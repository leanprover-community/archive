[
    {
        "content": "<p>Here is the beginning of my attempt to define a structure associated to every Desarguesian projective plane. Why is my attempt <code>instance : has_zero proj_plane_div_ring P L := proj_plane_div_ring.a₁</code> to define the zero element causing an error?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">basic</span> <span class=\"n\">combinatorics.configuration</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">configuration</span>\n\n<span class=\"kd\">universe</span> <span class=\"n\">u</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">P</span> <span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">has_mem</span> <span class=\"n\">P</span> <span class=\"n\">L</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">configuration.projective_plane</span> <span class=\"n\">P</span> <span class=\"n\">L</span><span class=\"o\">]</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"n\">L</span><span class=\"o\">)</span>\n<span class=\"kd\">structure</span> <span class=\"n\">proj_plane_div_ring</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">hdesarg</span> <span class=\"o\">:</span> <span class=\"n\">is_desarguesian</span> <span class=\"n\">P</span> <span class=\"n\">L</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">a₁</span> <span class=\"n\">a₂</span> <span class=\"n\">c₁₃</span> <span class=\"n\">c₂₃</span> <span class=\"o\">:</span> <span class=\"n\">P</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">hnoncol</span> <span class=\"o\">:</span> <span class=\"n\">four_points_no_three_collinear</span> <span class=\"n\">L</span> <span class=\"n\">a₁</span> <span class=\"n\">a₂</span> <span class=\"n\">c₁₃</span> <span class=\"n\">c₂₃</span><span class=\"o\">)</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_zero</span> <span class=\"n\">proj_plane_div_ring</span> <span class=\"n\">P</span> <span class=\"n\">L</span> <span class=\"o\">:=</span> <span class=\"n\">proj_plane_div_ring.a₁</span>\n</code></pre></div>\n<p>The error is</p>\n<div class=\"codehilite\" data-code-language=\"type\"><pre><span></span><code>  has_zero proj_plane_div_ring\nterm\n  proj_plane_div_ring\nhas type\n  Π (P L : Type ?) [_inst_1 : has_mem P L] [_inst_2 : projective_plane P L], Type ? : Type (?+1)\nbut is expected to have type\n  Type ? : Type (?+1)\n</code></pre></div>\n<p>Any other comments, critiques, etc. would be most welcome.</p>",
        "id": 328529295,
        "sender_full_name": "Quinn Culver",
        "timestamp": 1676656060
    },
    {
        "content": "<p>The error message is trying to tell you that you need brackets</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_zero</span> <span class=\"o\">(</span><span class=\"n\">proj_plane_div_ring</span> <span class=\"n\">P</span> <span class=\"n\">L</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 328529818,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1676656212
    },
    {
        "content": "<p>Thanks that worked. But now <code>proj_plane_div_ring.a₁</code> is yielding the error </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">type</span> <span class=\"n\">mismatch</span><span class=\"o\">,</span> <span class=\"n\">term</span>\n  <span class=\"n\">proj_plane_div_ring.a₁</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">proj_plane_div_ring</span> <span class=\"bp\">?</span><span class=\"n\">m_1</span> <span class=\"bp\">?</span><span class=\"n\">m_2</span> <span class=\"bp\">→</span> <span class=\"bp\">?</span><span class=\"n\">m_1</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">?</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"n\">has_zero</span> <span class=\"o\">(</span><span class=\"n\">proj_plane_div_ring</span> <span class=\"n\">P</span> <span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span>\n</code></pre></div>",
        "id": 328535012,
        "sender_full_name": "Quinn Culver",
        "timestamp": 1676657810
    },
    {
        "content": "<p><code>has_zero</code> is a structure with a single field, not just a bare term of that type, so you need to use a syntax to construct an element of that type, i.e. <code>{zero := blah}</code> (or anonymous constructor syntax with <code>\\&lt;blah\\&gt;</code></p>",
        "id": 328535828,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1676658042
    },
    {
        "content": "<p>I tried the anonymous constructor syntax, <code>instance : has_zero (proj_plane_div_ring P L) := ⟨proj_plane_div_ring.a₁⟩</code>, but got the same error.</p>",
        "id": 328539707,
        "sender_full_name": "Quinn Culver",
        "timestamp": 1676659330
    },
    {
        "content": "<p>You would need to give six arguments since your structure has six fields.</p>",
        "id": 328540135,
        "sender_full_name": "Reid Barton",
        "timestamp": 1676659475
    },
    {
        "content": "<p>So I assume you haven't said what you meant to say</p>",
        "id": 328540251,
        "sender_full_name": "Reid Barton",
        "timestamp": 1676659518
    },
    {
        "content": "<p><code>instance : has_zero (proj_plane_div_ring P L)</code> means \"there is a <code>proj_plane_div_ring </code> (aka a choice of four points in the P and L projective plane) we will call <code>0</code>\"</p>",
        "id": 328541497,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1676659932
    },
    {
        "content": "<p><code>proj_plane_div_ring.a₁</code> means \"given an existing choice of those four points, give me the first one\"</p>",
        "id": 328541797,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1676660039
    },
    {
        "content": "<p>I suspect you meant</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">proj_plane_div_ring</span> <span class=\"n\">P</span> <span class=\"n\">L</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">has_zero</span> <span class=\"n\">P</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">zero</span> <span class=\"o\">:=</span> <span class=\"n\">proj_plane_div_ring.a₁</span><span class=\"o\">}</span>\n</code></pre></div>\n<p>but that won't actualy help you because lean won't find <code>L</code></p>",
        "id": 328542068,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1676660116
    },
    {
        "content": "<p>Which part is looking for <code>L</code>?</p>",
        "id": 328544975,
        "sender_full_name": "Quinn Culver",
        "timestamp": 1676661115
    },
    {
        "content": "<p>Oh are you saying that  there's a problem with the <code>L</code> in <code>[proj_plane_div_ring P L]</code>?</p>",
        "id": 328551073,
        "sender_full_name": "Quinn Culver",
        "timestamp": 1676663320
    },
    {
        "content": "<p>Yes, exactly; lean won't know which L to try since it only knows P from the goal</p>",
        "id": 328551652,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1676663534
    },
    {
        "content": "<p>I get the feeling your question might be an <a href=\"https://en.wikipedia.org/wiki/XY_problem\">#xy</a> problem; what do you want the <code>0</code> for?</p>",
        "id": 328551878,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1676663615
    },
    {
        "content": "<p>I'm trying ultimately to formalize the fundamental theorem of projective geometry, which requires defining a division ring that coordinatizes a Desarguesian Projective plane.</p>",
        "id": 328553892,
        "sender_full_name": "Quinn Culver",
        "timestamp": 1676664310
    },
    {
        "content": "<p>In the proof I'm following it starts with four points, no three of which are colinear, and uses one of them <code>a₁</code> as the zero element.</p>",
        "id": 328554071,
        "sender_full_name": "Quinn Culver",
        "timestamp": 1676664375
    },
    {
        "content": "<p>Does that clear it up?</p>",
        "id": 328554098,
        "sender_full_name": "Quinn Culver",
        "timestamp": 1676664387
    },
    {
        "content": "<p>To define the zero element, I tried following <em>Mathematics in Lean</em>'s construction of the Guassian integers (section 6.3).</p>",
        "id": 328554274,
        "sender_full_name": "Quinn Culver",
        "timestamp": 1676664467
    },
    {
        "content": "<p>But what <em>is</em> the division ring? I mean its underlying set/type.</p>",
        "id": 328555963,
        "sender_full_name": "Reid Barton",
        "timestamp": 1676665092
    },
    {
        "content": "<p>It's the set of points on the line from <code>a₁</code> to  <code>a₂</code> excluding <code>a₂</code>.</p>",
        "id": 328556177,
        "sender_full_name": "Quinn Culver",
        "timestamp": 1676665194
    },
    {
        "content": "<p>So then that is the thing that you need to define <code>has_zero</code> etc. instances for</p>",
        "id": 328556285,
        "sender_full_name": "Reid Barton",
        "timestamp": 1676665231
    },
    {
        "content": "<p>Okay thanks. I'll think about that.</p>",
        "id": 328556321,
        "sender_full_name": "Quinn Culver",
        "timestamp": 1676665253
    },
    {
        "content": "<p>Cwould (←intentional portmanteau) someone please recommend an example of a structure definition that might be useful for me to learn how to go about this the correct way? <span aria-label=\"thanks\" class=\"emoji emoji-1fac2\" role=\"img\" title=\"thanks\">:thanks:</span></p>",
        "id": 328569879,
        "sender_full_name": "Quinn Culver",
        "timestamp": 1676670759
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">the_div_ring</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"bp\">//</span> <span class=\"n\">is_between</span> <span class=\"n\">x</span> <span class=\"n\">a1</span> <span class=\"n\">a2</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 328574874,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1676672927
    },
    {
        "content": "<p>Does that mean a structure isn't appropriate here?</p>",
        "id": 328575587,
        "sender_full_name": "Quinn Culver",
        "timestamp": 1676673222
    },
    {
        "content": "<p>I think it's overkill</p>",
        "id": 328583318,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1676677496
    },
    {
        "content": "<p>The code above uses <a href=\"https://leanprover-community.github.io/mathlib_docs/find/subtype\">docs#subtype</a> which is a structure that already exists</p>",
        "id": 328584441,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1676678231
    },
    {
        "content": "<p>A division ring is a structure on a type (the \"underlying set\") so you need to first make the type and then make the division ring structure on top</p>",
        "id": 328711916,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1676745320
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 328753981,
        "sender_full_name": "Quinn Culver",
        "timestamp": 1676777669
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 328756660,
        "sender_full_name": "Quinn Culver",
        "timestamp": 1676779776
    },
    {
        "content": "<p>The subtype example, <code>def the_div_ring : Type* := { x : P // is_between x a1 a2 }</code> above  refers to <code>a1</code> and <code>a2</code>. How to do this properly? Here <code>a1</code> and <code>a2</code> are points that are i) not equal and ii) two of a set of four points no three of which are colinear that I'm using as my alternative <a href=\"https://leanprover-community.github.io/mathlib_docs/combinatorics/configuration.html#configuration.projective_plane.exists_config\">configuration axiom</a>. I've already proven that  mathlib's configuration axiom,<code>exists_config</code>, implies this alternative one.</p>\n<p>My only idea is to use <code>variable</code>s and <code>constant</code>s as below, but that feels wrong.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variables</span> <span class=\"n\">a₁</span> <span class=\"n\">a₂</span> <span class=\"n\">c₁₃</span> <span class=\"n\">c₂₃</span> <span class=\"o\">:</span> <span class=\"n\">P</span>\n<span class=\"kd\">constant</span> <span class=\"n\">axiom3_alt</span> <span class=\"o\">:</span> <span class=\"n\">four_points_no_three_collinear</span> <span class=\"n\">L</span> <span class=\"n\">a₁</span> <span class=\"n\">a₂</span> <span class=\"n\">c₁₃</span> <span class=\"n\">c₂₃</span>\n<span class=\"kd\">constant</span> <span class=\"n\">ha₁a₂</span> <span class=\"o\">:</span> <span class=\"n\">a₁</span> <span class=\"bp\">≠</span> <span class=\"n\">a₂</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">the_div_ring</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"bp\">//</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">mk_line</span> <span class=\"n\">ha₁a₂</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"n\">a₂</span><span class=\"o\">}</span>\n</code></pre></div>",
        "id": 328833137,
        "sender_full_name": "Quinn Culver",
        "timestamp": 1676824363
    },
    {
        "content": "<p>You definitely do not want to use <code>constant</code>s here</p>",
        "id": 328834946,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1676825185
    },
    {
        "content": "<p>I was assuming you would keep your existing <code>structure</code>, or something similar to it:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- A choice of four points in a desarguesian plane, which define a division ring -/</span>\n<span class=\"kd\">structure</span> <span class=\"n\">proj_plane_div_config</span> <span class=\"o\">[</span><span class=\"n\">is_desarguesian</span> <span class=\"n\">P</span> <span class=\"n\">L</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">a₁</span> <span class=\"n\">a₂</span> <span class=\"n\">c₁₃</span> <span class=\"n\">c₂₃</span> <span class=\"o\">:</span> <span class=\"n\">P</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">hnoncol</span> <span class=\"o\">:</span> <span class=\"n\">four_points_no_three_collinear</span> <span class=\"n\">L</span> <span class=\"n\">a₁</span> <span class=\"n\">a₂</span> <span class=\"n\">c₁₃</span> <span class=\"n\">c₂₃</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">the_div_ring</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">proj_plane_div_config</span> <span class=\"n\">P</span> <span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"bp\">//</span> <span class=\"n\">is_between</span> <span class=\"n\">x</span> <span class=\"n\">c.a₁</span> <span class=\"n\">c.a₂</span> <span class=\"o\">}</span>\n\n<span class=\"c1\">-- optional; this lets you write `x : c` instead of `x : c.the_div_ring`</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_coe_to_sort</span> <span class=\"o\">(</span><span class=\"n\">proj_plane_div_config</span> <span class=\"n\">P</span> <span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">coe_sort</span> <span class=\"o\">:=</span> <span class=\"n\">the_div_ring</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>(untested, but should be easy to make that work after fiddling with implicit / explicit arguments)</p>",
        "id": 328835059,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1676825263
    },
    {
        "content": "<p>Note that this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variables</span> <span class=\"n\">a₁</span> <span class=\"n\">a₂</span> <span class=\"n\">c₁₃</span> <span class=\"n\">c₂₃</span> <span class=\"o\">:</span> <span class=\"n\">P</span>\n<span class=\"kd\">constant</span> <span class=\"n\">axiom3_alt</span> <span class=\"o\">:</span> <span class=\"n\">four_points_no_three_collinear</span> <span class=\"n\">L</span> <span class=\"n\">a₁</span> <span class=\"n\">a₂</span> <span class=\"n\">c₁₃</span> <span class=\"n\">c₂₃</span>\n</code></pre></div>\n<p>says \"any four points have no three collinear\", which I assume is false. This is one reason to avoid <code>constant</code> and <code>axiom</code>; it is very easy to add a false axiom by accident, especially if you're new to Lean.</p>",
        "id": 328835425,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1676825439
    },
    {
        "content": "<p>I thought that since you said a <code>structure</code> is overkill, your suggestion was intended to supplant it, <span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> . What would you recommend be used instead of <code>structure</code> here?</p>",
        "id": 328836741,
        "sender_full_name": "Quinn Culver",
        "timestamp": 1676825993
    },
    {
        "content": "<p><code>structure</code> is overkill <strong>for <code>the_div_ring </code></strong> (that's what I intepreted \"here\" as in your question)</p>",
        "id": 328837199,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1676826070
    },
    {
        "content": "<p>The thing I was implying you should <em>not</em> write is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">the_div_ring</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">proj_plane_div_config</span> <span class=\"n\">P</span> <span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">val</span> <span class=\"o\">:</span> <span class=\"n\">P</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">property</span> <span class=\"o\">:</span> <span class=\"n\">is_between</span> <span class=\"n\">x</span> <span class=\"n\">c.a₁</span> <span class=\"n\">c.a₂</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 328837332,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1676826112
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"245476\">Quinn Culver</span> <a href=\"#narrow/stream/113488-general/topic/Structure.20defined.20for.20Desarguesian.20proj.20plane/near/328833137\">said</a>:</p>\n<blockquote>\n<p>My only idea is to use <code>variable</code>s and <code>constant</code>s as below, but that feels wrong.</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variables</span> <span class=\"n\">a₁</span> <span class=\"n\">a₂</span> <span class=\"n\">c₁₃</span> <span class=\"n\">c₂₃</span> <span class=\"o\">:</span> <span class=\"n\">P</span>\n<span class=\"kd\">constant</span> <span class=\"n\">axiom3_alt</span> <span class=\"o\">:</span> <span class=\"n\">four_points_no_three_collinear</span> <span class=\"n\">L</span> <span class=\"n\">a₁</span> <span class=\"n\">a₂</span> <span class=\"n\">c₁₃</span> <span class=\"n\">c₂₃</span>\n<span class=\"kd\">constant</span> <span class=\"n\">ha₁a₂</span> <span class=\"o\">:</span> <span class=\"n\">a₁</span> <span class=\"bp\">≠</span> <span class=\"n\">a₂</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">the_div_ring</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"bp\">//</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">mk_line</span> <span class=\"n\">ha₁a₂</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"n\">a₂</span><span class=\"o\">}</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>Just to be clear, this approach would be fine if you used <code>variables</code> intead of <code>constant</code>; but you'd have to write <code>x : the_div_ring  a₁ a₂ c₁₃ c₂₃ axiom3_alt   ha₁a₂</code> instead of <code>x : the_div_ring  c</code> or <code>x : coe_sort c</code>. <code>structure</code> lets you take a bunch of variables and combine them into a single variable.</p>",
        "id": 328837816,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1676826310
    },
    {
        "content": "<p>My god, people in this forum are so helpful. Thanks!</p>",
        "id": 328838002,
        "sender_full_name": "Quinn Culver",
        "timestamp": 1676826386
    },
    {
        "content": "<p>Following the suggestion above, I have</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">proj_plane_div_config</span> <span class=\"o\">[</span><span class=\"n\">is_desarguesian</span> <span class=\"n\">P</span> <span class=\"n\">L</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">a₁</span> <span class=\"n\">a₂</span> <span class=\"n\">c₁₃</span> <span class=\"n\">c₂₃</span> <span class=\"o\">:</span> <span class=\"n\">P</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">ha₁a₂</span> <span class=\"o\">:</span> <span class=\"n\">a₁</span> <span class=\"bp\">≠</span> <span class=\"n\">a₂</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">hnoncol</span> <span class=\"o\">:</span> <span class=\"n\">four_points_no_three_collinear</span> <span class=\"n\">L</span> <span class=\"n\">a₁</span> <span class=\"n\">a₂</span> <span class=\"n\">c₁₃</span> <span class=\"n\">c₂₃</span><span class=\"o\">)</span>\n\n\n<span class=\"kd\">def</span> <span class=\"n\">the_div_ring</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">proj_plane_div_config</span> <span class=\"n\">P</span> <span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"bp\">//</span>  <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"o\">(</span><span class=\"n\">mk_line</span> <span class=\"n\">c.ha₁a₂</span><span class=\"o\">)}</span>\n</code></pre></div>\n<p>right now the <code>is_desarguesian</code> is throwing the an 'unknown identifier' error, even though it's in a file, <code>basic.lean</code>, that is imported.</p>\n<p>The <code>mk_line</code>is throwing an error too, saying that Lean doesn't know how to synthesize placeholder.</p>",
        "id": 336518585,
        "sender_full_name": "Quinn Culver",
        "timestamp": 1677254043
    },
    {
        "content": "<p>Maybe some spelling mistake? Can you post a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> ? (perhaps append the copy of one file to another?)</p>",
        "id": 336521931,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1677254812
    },
    {
        "content": "<p>This is not going to be some deep problem, it's far more likely to be a typo.</p>",
        "id": 336522047,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1677254839
    },
    {
        "content": "<p>You were right about a typo, <code>is_desarguesian</code> needed to be <code>configuration.is_desarguesian</code>. Fixed, thanks!</p>\n<p>Now the <code>proj_plane_div_config</code> in <code>def the_div_ring (c : proj_plane_div_config P L) : Type* := {x : P //  x ∈ (mk_line c.ha₁a₂)}</code> is  throwing a 'failed to synthesize typeclass instance' error.  The <code>mk_line</code> is still throwing an error too, but first things first; once the previous sentence's error is dealt with that error might go away.</p>\n<p>Here's my attempt at a MWE. </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">combinatorics.configuration</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">configuration.has_lines</span>\n<span class=\"kn\">open</span> <span class=\"n\">configuration.has_points</span>\n<span class=\"kn\">open</span> <span class=\"n\">configuration.nondegenerate</span>\n<span class=\"kn\">open</span> <span class=\"n\">classical</span>\n<span class=\"kn\">open</span> <span class=\"n\">set</span>\n\n<span class=\"kd\">universe</span> <span class=\"n\">u</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">P</span> <span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">has_mem</span> <span class=\"n\">P</span> <span class=\"n\">L</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">configuration.has_lines</span> <span class=\"n\">P</span> <span class=\"n\">L</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">configuration.has_points</span> <span class=\"n\">P</span> <span class=\"n\">L</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">nontrivial</span> <span class=\"n\">P</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">nontrivial</span> <span class=\"n\">L</span><span class=\"o\">]</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"n\">L</span><span class=\"o\">)</span>\n<span class=\"kd\">structure</span> <span class=\"n\">triangle</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">p₀</span> <span class=\"n\">p₁</span> <span class=\"n\">p₂</span> <span class=\"o\">:</span> <span class=\"n\">P</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">l₀</span> <span class=\"n\">l₁</span> <span class=\"n\">l₂</span> <span class=\"o\">:</span> <span class=\"n\">L</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">i₀₁</span> <span class=\"o\">:</span> <span class=\"n\">p₀</span> <span class=\"bp\">∈</span> <span class=\"n\">l₁</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">i₀₂</span> <span class=\"o\">:</span> <span class=\"n\">p₀</span> <span class=\"bp\">∈</span> <span class=\"n\">l₂</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">i₁₀</span> <span class=\"o\">:</span> <span class=\"n\">p₁</span> <span class=\"bp\">∈</span> <span class=\"n\">l₀</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">i₁₂</span> <span class=\"o\">:</span> <span class=\"n\">p₁</span> <span class=\"bp\">∈</span> <span class=\"n\">l₂</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">i₂₀</span> <span class=\"o\">:</span> <span class=\"n\">p₂</span> <span class=\"bp\">∈</span> <span class=\"n\">l₀</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">i₂₁</span> <span class=\"o\">:</span> <span class=\"n\">p₂</span> <span class=\"bp\">∈</span> <span class=\"n\">l₁</span><span class=\"o\">)</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">P</span><span class=\"o\">}</span>\n<span class=\"kd\">def</span> <span class=\"n\">collinear</span> <span class=\"o\">(</span><span class=\"n\">p₀</span> <span class=\"n\">p₁</span> <span class=\"n\">p₂</span> <span class=\"o\">:</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"bp\">∃</span> <span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">L</span><span class=\"o\">,</span> <span class=\"n\">p₀</span> <span class=\"bp\">∈</span> <span class=\"n\">l</span> <span class=\"bp\">∧</span> <span class=\"n\">p₁</span> <span class=\"bp\">∈</span> <span class=\"n\">l</span> <span class=\"bp\">∧</span> <span class=\"n\">p₂</span> <span class=\"bp\">∈</span> <span class=\"n\">l</span>\n\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">L</span><span class=\"o\">}</span>\n<span class=\"kd\">def</span> <span class=\"n\">concurrent</span> <span class=\"o\">(</span><span class=\"n\">l₀</span> <span class=\"n\">l₁</span> <span class=\"n\">l₂</span> <span class=\"o\">:</span> <span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"bp\">∃</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">P</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"bp\">∈</span> <span class=\"n\">l₀</span> <span class=\"bp\">∧</span> <span class=\"n\">p</span> <span class=\"bp\">∈</span> <span class=\"n\">l₁</span> <span class=\"bp\">∧</span> <span class=\"n\">p</span> <span class=\"bp\">∈</span> <span class=\"n\">l₂</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">P</span><span class=\"o\">}</span>\n<span class=\"kd\">def</span> <span class=\"n\">centrally_perspective</span> <span class=\"o\">(</span><span class=\"n\">T₁</span> <span class=\"n\">T₂</span> <span class=\"o\">:</span> <span class=\"n\">triangle</span> <span class=\"n\">P</span> <span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"bp\">∃</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">P</span><span class=\"o\">,</span> <span class=\"n\">collinear</span> <span class=\"n\">L</span> <span class=\"n\">p</span> <span class=\"n\">T₁.p₀</span> <span class=\"n\">T₂.p₀</span> <span class=\"bp\">∧</span> <span class=\"n\">collinear</span> <span class=\"n\">L</span> <span class=\"n\">p</span> <span class=\"n\">T₁.p₁</span> <span class=\"n\">T₂.p₁</span> <span class=\"bp\">∧</span> <span class=\"n\">collinear</span> <span class=\"n\">L</span> <span class=\"n\">p</span> <span class=\"n\">T₁.p₂</span> <span class=\"n\">T₂.p₂</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">axially_perspective</span> <span class=\"o\">(</span><span class=\"n\">T₁</span> <span class=\"n\">T₂</span> <span class=\"o\">:</span> <span class=\"n\">triangle</span> <span class=\"n\">P</span> <span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"bp\">∃</span> <span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">L</span><span class=\"o\">,</span> <span class=\"n\">concurrent</span> <span class=\"n\">P</span> <span class=\"n\">l</span> <span class=\"n\">T₁.l₀</span> <span class=\"n\">T₂.l₀</span> <span class=\"bp\">∧</span> <span class=\"n\">concurrent</span> <span class=\"n\">P</span> <span class=\"n\">l</span> <span class=\"n\">T₁.l₁</span> <span class=\"n\">T₂.l₁</span> <span class=\"bp\">∧</span> <span class=\"n\">concurrent</span> <span class=\"n\">P</span> <span class=\"n\">l</span> <span class=\"n\">T₁.l₂</span> <span class=\"n\">T₂.l₂</span>\n\n\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"n\">L</span><span class=\"o\">)</span>\n<span class=\"kd\">def</span> <span class=\"n\">configuration.is_desarguesian</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"bp\">∀</span> <span class=\"n\">T₁</span> <span class=\"n\">T₂</span> <span class=\"o\">:</span> <span class=\"n\">triangle</span> <span class=\"n\">P</span> <span class=\"n\">L</span><span class=\"o\">,</span> <span class=\"n\">centrally_perspective</span> <span class=\"n\">T₁</span> <span class=\"n\">T₂</span> <span class=\"bp\">↔</span> <span class=\"n\">axially_perspective</span> <span class=\"n\">T₁</span> <span class=\"n\">T₂</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">P</span><span class=\"o\">}</span>\n<span class=\"kd\">def</span> <span class=\"n\">four_points_no_three_collinear</span> <span class=\"o\">(</span><span class=\"n\">p₀</span> <span class=\"n\">p₁</span> <span class=\"n\">p₂</span> <span class=\"n\">p₃</span> <span class=\"o\">:</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"bp\">¬</span> <span class=\"n\">collinear</span> <span class=\"n\">L</span> <span class=\"n\">p₀</span> <span class=\"n\">p₁</span> <span class=\"n\">p₂</span> <span class=\"bp\">∧</span> <span class=\"bp\">¬</span> <span class=\"n\">collinear</span> <span class=\"n\">L</span> <span class=\"n\">p₀</span> <span class=\"n\">p₁</span> <span class=\"n\">p₃</span> <span class=\"bp\">∧</span> <span class=\"bp\">¬</span> <span class=\"n\">collinear</span> <span class=\"n\">L</span> <span class=\"n\">p₀</span> <span class=\"n\">p₂</span> <span class=\"n\">p₃</span> <span class=\"bp\">∧</span> <span class=\"bp\">¬</span> <span class=\"n\">collinear</span> <span class=\"n\">L</span> <span class=\"n\">p₁</span> <span class=\"n\">p₂</span> <span class=\"n\">p₃</span>\n\n<span class=\"sd\">/-- A choice of four points in a desarguesian plane, which define a division ring -/</span>\n<span class=\"kd\">structure</span> <span class=\"n\">proj_plane_div_config</span> <span class=\"o\">[</span><span class=\"n\">configuration.is_desarguesian</span> <span class=\"n\">P</span> <span class=\"n\">L</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">a₁</span> <span class=\"n\">a₂</span> <span class=\"n\">c₁₃</span> <span class=\"n\">c₂₃</span> <span class=\"o\">:</span> <span class=\"n\">P</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">ha₁a₂</span> <span class=\"o\">:</span> <span class=\"n\">a₁</span> <span class=\"bp\">≠</span> <span class=\"n\">a₂</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">hnoncol</span> <span class=\"o\">:</span> <span class=\"n\">four_points_no_three_collinear</span> <span class=\"n\">L</span> <span class=\"n\">a₁</span> <span class=\"n\">a₂</span> <span class=\"n\">c₁₃</span> <span class=\"n\">c₂₃</span><span class=\"o\">)</span>\n\n\n<span class=\"kd\">def</span> <span class=\"n\">the_div_ring</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">proj_plane_div_config</span> <span class=\"n\">P</span> <span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"bp\">//</span>  <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"o\">(</span><span class=\"n\">mk_line</span> <span class=\"n\">c.ha₁a₂</span><span class=\"o\">)}</span>\n</code></pre></div>",
        "id": 336530906,
        "sender_full_name": "Quinn Culver",
        "timestamp": 1677256825
    },
    {
        "content": "<p>Here you go:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"n\">L</span><span class=\"o\">)</span>\n<span class=\"kd\">@[class]</span> <span class=\"kd\">def</span> <span class=\"n\">configuration.is_desarguesian</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"bp\">∀</span> <span class=\"n\">T₁</span> <span class=\"n\">T₂</span> <span class=\"o\">:</span> <span class=\"n\">triangle</span> <span class=\"n\">P</span> <span class=\"n\">L</span><span class=\"o\">,</span> <span class=\"n\">centrally_perspective</span> <span class=\"n\">T₁</span> <span class=\"n\">T₂</span> <span class=\"bp\">↔</span> <span class=\"n\">axially_perspective</span> <span class=\"n\">T₁</span> <span class=\"n\">T₂</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">P</span><span class=\"o\">}</span>\n<span class=\"kd\">def</span> <span class=\"n\">four_points_no_three_collinear</span> <span class=\"o\">(</span><span class=\"n\">p₀</span> <span class=\"n\">p₁</span> <span class=\"n\">p₂</span> <span class=\"n\">p₃</span> <span class=\"o\">:</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"bp\">¬</span> <span class=\"n\">collinear</span> <span class=\"n\">L</span> <span class=\"n\">p₀</span> <span class=\"n\">p₁</span> <span class=\"n\">p₂</span> <span class=\"bp\">∧</span> <span class=\"bp\">¬</span> <span class=\"n\">collinear</span> <span class=\"n\">L</span> <span class=\"n\">p₀</span> <span class=\"n\">p₁</span> <span class=\"n\">p₃</span> <span class=\"bp\">∧</span> <span class=\"bp\">¬</span> <span class=\"n\">collinear</span> <span class=\"n\">L</span> <span class=\"n\">p₀</span> <span class=\"n\">p₂</span> <span class=\"n\">p₃</span> <span class=\"bp\">∧</span> <span class=\"bp\">¬</span> <span class=\"n\">collinear</span> <span class=\"n\">L</span> <span class=\"n\">p₁</span> <span class=\"n\">p₂</span> <span class=\"n\">p₃</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"n\">L</span><span class=\"o\">)</span>\n<span class=\"sd\">/-- A choice of four points in a desarguesian plane, which define a division ring -/</span>\n<span class=\"kd\">structure</span> <span class=\"n\">proj_plane_div_config</span> <span class=\"o\">[</span><span class=\"n\">configuration.is_desarguesian</span> <span class=\"n\">P</span> <span class=\"n\">L</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">a₁</span> <span class=\"n\">a₂</span> <span class=\"n\">c₁₃</span> <span class=\"n\">c₂₃</span> <span class=\"o\">:</span> <span class=\"n\">P</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">ha₁a₂</span> <span class=\"o\">:</span> <span class=\"n\">a₁</span> <span class=\"bp\">≠</span> <span class=\"n\">a₂</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">hnoncol</span> <span class=\"o\">:</span> <span class=\"n\">four_points_no_three_collinear</span> <span class=\"n\">L</span> <span class=\"n\">a₁</span> <span class=\"n\">a₂</span> <span class=\"n\">c₁₃</span> <span class=\"n\">c₂₃</span><span class=\"o\">)</span>\n\n\n<span class=\"kd\">def</span> <span class=\"n\">the_div_ring</span> <span class=\"o\">[</span><span class=\"n\">configuration.is_desarguesian</span> <span class=\"n\">P</span> <span class=\"n\">L</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">proj_plane_div_config</span> <span class=\"n\">P</span> <span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"bp\">//</span>  <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"o\">(</span><span class=\"n\">mk_line</span> <span class=\"n\">c.ha₁a₂</span> <span class=\"o\">:</span> <span class=\"n\">L</span><span class=\"o\">)}</span>\n</code></pre></div>",
        "id": 336562974,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1677265965
    },
    {
        "content": "<p>You need <code>@[class]</code> to be able to use the square bracket instance notation.<br>\nYou need <code>variables (P L)</code> to make both <code>P</code> and <code>L</code> explicit for <code>proj_plane_div_config P L</code>.<br>\nYou need  to add <code>[configuration.is_desarguesian P L]</code> to <code>the_div_ring</code> because it's needed for <code>proj_plane_div_config</code>.<br>\nYou need to write <code>(mk_line c.ha₁a₂ : L)</code> because <code>L</code> cannot be inferred.</p>",
        "id": 336563339,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1677266099
    },
    {
        "content": "<p>But really there's no reason to make <code>proj_plane_div_config</code> require <code>[configuration.is_desarguesian P L]</code>, right?</p>",
        "id": 336563475,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1677266133
    },
    {
        "content": "<p>I'm unclear on how &amp; where to define the division ring operations (which are rather complicated). I guess I need to define their types as data in the structure, like </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">proj_plane_div_config</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">a₁</span> <span class=\"n\">a₂</span> <span class=\"n\">c₁₃</span> <span class=\"n\">c₂₃</span> <span class=\"o\">:</span> <span class=\"n\">P</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">ha₁a₂</span> <span class=\"o\">:</span> <span class=\"n\">a₁</span> <span class=\"bp\">≠</span> <span class=\"n\">a₂</span><span class=\"o\">)</span> <span class=\"c1\">--TODO: figure out how to remove this since hnoncol below implies it. mk_line should get the proof from hnoncol</span>\n<span class=\"o\">(</span><span class=\"n\">hnoncol</span> <span class=\"o\">:</span> <span class=\"n\">four_points_no_three_collinear</span> <span class=\"n\">L</span> <span class=\"n\">a₁</span> <span class=\"n\">a₂</span> <span class=\"n\">c₁₃</span> <span class=\"n\">c₂₃</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">addition</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"bp\">→</span> <span class=\"n\">P</span> <span class=\"bp\">→</span> <span class=\"n\">P</span><span class=\"o\">)</span>  <span class=\"c1\">--IS THIS CORRECT?</span>\n</code></pre></div>\n<p>Then, once the carrier set is defined as </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">the_div_ring</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">proj_plane_div_config</span> <span class=\"n\">P</span> <span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"bp\">//</span>  <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"o\">(</span><span class=\"n\">mk_line</span> <span class=\"n\">c.ha₁a₂</span> <span class=\"o\">:</span> <span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"n\">c.a₂</span><span class=\"o\">}</span>\n</code></pre></div>\n<p>How and where do I define the addition of elements on that carrier set? I tried <code>def addition (r s : the_div_ring) : the_div_ring := r</code>, (which I intended to mean r+s = r, just as a test) but that didn't work. Thoughts?</p>",
        "id": 338188886,
        "sender_full_name": "Quinn Culver",
        "timestamp": 1677435718
    },
    {
        "content": "<p>You at some point need to say</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">my_config</span> <span class=\"o\">:</span> <span class=\"n\">proj_plane_div_ring</span> <span class=\"n\">P</span> <span class=\"n\">L</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">a₁</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">addition</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span> <span class=\"o\">}</span>\n<span class=\"c1\">-- lean will ask you to add the other fields too</span>\n</code></pre></div>\n<p>What's the maths here? Is the addition derived solely from the relation between P and L, or is the idea that it is already the natural one on P?</p>",
        "id": 338192648,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1677437787
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"245476\">Quinn Culver</span> <a href=\"#narrow/stream/113488-general/topic/Structure.20defined.20for.20Desarguesian.20proj.20plane/near/338188886\">said</a>:</p>\n<blockquote>\n<p>I tried <code>def addition (r s : the_div_ring) : the_div_ring := r</code>, (which I intended to mean r+s = r, just as a test) but that didn't work. Thoughts?</p>\n</blockquote>\n<p>In what sense did it not work? Was there an error?<br>\nYou probably need to give <code>c</code> (the <code>proj_plane_div_config P L</code>) as an argument to <code>the_div_ring</code>.</p>",
        "id": 338207968,
        "sender_full_name": "Reid Barton",
        "timestamp": 1677447683
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"245476\">Quinn Culver</span> <a href=\"#narrow/stream/113488-general/topic/Structure.20defined.20for.20Desarguesian.20proj.20plane/near/338188886\">said</a>:</p>\n<blockquote>\n<p>I'm unclear on how &amp; where to define the division ring operations (which are rather complicated). I guess I need to define their types as data in the structure, like </p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">proj_plane_div_config</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">a₁</span> <span class=\"n\">a₂</span> <span class=\"n\">c₁₃</span> <span class=\"n\">c₂₃</span> <span class=\"o\">:</span> <span class=\"n\">P</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">ha₁a₂</span> <span class=\"o\">:</span> <span class=\"n\">a₁</span> <span class=\"bp\">≠</span> <span class=\"n\">a₂</span><span class=\"o\">)</span> <span class=\"c1\">--TODO: figure out how to remove this since hnoncol below implies it. mk_line should get the proof from hnoncol</span>\n<span class=\"o\">(</span><span class=\"n\">hnoncol</span> <span class=\"o\">:</span> <span class=\"n\">four_points_no_three_collinear</span> <span class=\"n\">L</span> <span class=\"n\">a₁</span> <span class=\"n\">a₂</span> <span class=\"n\">c₁₃</span> <span class=\"n\">c₂₃</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">addition</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"bp\">→</span> <span class=\"n\">P</span> <span class=\"bp\">→</span> <span class=\"n\">P</span><span class=\"o\">)</span>  <span class=\"c1\">--IS THIS CORRECT?</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>No, you shouldn't try to put <code>addition</code> here.</p>",
        "id": 338208008,
        "sender_full_name": "Reid Barton",
        "timestamp": 1677447743
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> Given four points, <code>a₁ a₂ c₁₃ c₂₃</code>, no three of which are colinear, addition of two points, <code>r</code> and <code>s</code>, on the line connecting <code>a₁</code> and <code>a₂</code> is </p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>r</mi><mo>+</mo><mi>s</mi><mo>=</mo><mo stretchy=\"false\">[</mo><mo stretchy=\"false\">[</mo><mo stretchy=\"false\">(</mo><mi>r</mi><mo>∨</mo><msub><mi>c</mi><mn>13</mn></msub><mo stretchy=\"false\">)</mo><mo>∧</mo><mo stretchy=\"false\">(</mo><msub><mi>a</mi><mn>2</mn></msub><mo>∨</mo><msub><mi>a</mi><mn>3</mn></msub><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">]</mo><mo>∨</mo><mo stretchy=\"false\">(</mo><mo stretchy=\"false\">[</mo><mo stretchy=\"false\">(</mo><mi>s</mi><mo>∨</mo><msub><mi>a</mi><mn>3</mn></msub><mo stretchy=\"false\">)</mo><mo>∧</mo><mo stretchy=\"false\">(</mo><msub><mi>a</mi><mn>2</mn></msub><mo>∨</mo><msub><mi>c</mi><mn>13</mn></msub><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">]</mo><mo stretchy=\"false\">]</mo><mo>∧</mo><mo stretchy=\"false\">(</mo><msub><mi>a</mi><mn>1</mn></msub><mo>∨</mo><msub><mi>a</mi><mn>2</mn></msub><mo stretchy=\"false\">)</mo><mo separator=\"true\">,</mo></mrow><annotation encoding=\"application/x-tex\">r + s = [[(r \\vee c_{13}) \\wedge (a_2 \\vee a_3)] \\vee ([(s \\vee a_3) \\wedge (a_2 \\vee c_{13})]] \\wedge (a_1 \\vee a_2),</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6667em;vertical-align:-0.0833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">s</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">[[(</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">∨</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">c</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">13</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">∧</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">∨</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">3</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)]</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">∨</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">([(</span><span class=\"mord mathnormal\">s</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">∨</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">3</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">∧</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">∨</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">c</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">13</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)]]</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">∧</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">∨</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mpunct\">,</span></span></span></span></span></p>\n<p>where the join of two points is their line and the meet of two lines is their point.</p>",
        "id": 338364679,
        "sender_full_name": "Quinn Culver",
        "timestamp": 1677513231
    },
    {
        "content": "<p>Great, then you definitely do not want to be adding to <code>proj_plane_div_config</code></p>",
        "id": 338364847,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1677513266
    },
    {
        "content": "<p>So I guess after defining the structure and then the carrier set, the operations come <em>separately</em>?</p>",
        "id": 338365244,
        "sender_full_name": "Quinn Culver",
        "timestamp": 1677513357
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span> How would you go about it?</p>",
        "id": 338610422,
        "sender_full_name": "Quinn Culver",
        "timestamp": 1677596625
    },
    {
        "content": "<p>I think what you had above was good</p>",
        "id": 338610537,
        "sender_full_name": "Reid Barton",
        "timestamp": 1677596648
    },
    {
        "content": "<p>35 messages were moved here from <a class=\"stream-topic\" data-stream-id=\"113488\" href=\"/#narrow/stream/113488-general/topic/Structure.20defined.20for.20Desarguesian.20proj.20plane\">#general &gt; Structure defined for Desarguesian proj plane</a> by <span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span>.</p>",
        "id": 338613218,
        "sender_full_name": "Notification Bot",
        "timestamp": 1677597279
    },
    {
        "content": "<p>Apologies for the <code>has_coe_to_sort</code> notational distraction, I've moved that all to a new thread</p>",
        "id": 338613742,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1677597398
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/113488-general/topic/Structure.20defined.20for.20Desarguesian.20proj.20plane/near/338207968\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"245476\">Quinn Culver</span> <a href=\"#narrow/stream/113488-general/topic/Structure.20defined.20for.20Desarguesian.20proj.20plane/near/338188886\">said</a>:</p>\n<blockquote>\n<p>I tried <code>def addition (r s : the_div_ring) : the_div_ring := r</code>, (which I intended to mean r+s = r, just as a test) but that didn't work. Thoughts?</p>\n</blockquote>\n<p>In what sense did it not work? Was there an error?<br>\nYou probably need to give <code>c</code> (the <code>proj_plane_div_config P L</code>) as an argument to <code>the_div_ring</code>.</p>\n</blockquote>\n<p>I don't think you ever answered this question <span class=\"user-mention\" data-user-id=\"245476\">@Quinn Culver</span></p>",
        "id": 338613911,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1677597439
    },
    {
        "content": "<p>I think I got it to work; at least there're no errors: <code>def addition (c : proj_plane_div_config P L) (r s : the_div_ring P L c)  : the_div_ring P L c:= r</code></p>",
        "id": 338618584,
        "sender_full_name": "Quinn Culver",
        "timestamp": 1677598449
    },
    {
        "content": "<p>should I be using a namespace? <code>namespace proj_plane_div_config</code>?</p>",
        "id": 338618913,
        "sender_full_name": "Quinn Culver",
        "timestamp": 1677598533
    },
    {
        "content": "<p>I would skip the <code>def</code> entirely and just write a <code>has_add</code> instance</p>",
        "id": 338621752,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1677599231
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">proj_plane_div_config</span> <span class=\"n\">P</span> <span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">has_add</span> <span class=\"o\">(</span><span class=\"n\">the_div_ring</span> <span class=\"n\">P</span> <span class=\"n\">L</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">add</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">r</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"gr\">sorry</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 338621854,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1677599264
    },
    {
        "content": "<p>Also you should change the argument explicitness on <code>the_div_ring</code> so that <code>P</code> and <code>L</code> are implicit, as they're obvious from <code>c</code>; then you can write <code>c.the_div_ring</code> instead of <code>the_div_ring P L c</code></p>",
        "id": 338622180,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1677599351
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 338924944,
        "sender_full_name": "Quinn Culver",
        "timestamp": 1677696106
    },
    {
        "content": "<p>I recommend you write</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">proj_plane_div_config</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">a₁</span> <span class=\"n\">a₂</span> <span class=\"n\">c₁₃</span> <span class=\"n\">c₂₃</span> <span class=\"o\">:</span> <span class=\"n\">P</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">hnoncol</span> <span class=\"o\">:</span> <span class=\"n\">four_points_no_three_collinear</span> <span class=\"n\">L</span> <span class=\"n\">a₁</span> <span class=\"n\">a₂</span> <span class=\"n\">c₁₃</span> <span class=\"n\">c₂₃</span><span class=\"o\">)</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">proj_plane_div_config.ha₁a₂</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">proj_plane_div_config</span>  <span class=\"n\">P</span> <span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">c.a₁</span> <span class=\"bp\">≠</span> <span class=\"n\">c.a₂</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>so that you don't have to prove it inline</p>",
        "id": 338926042,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1677696406
    },
    {
        "content": "<p>Just did that!</p>",
        "id": 338926121,
        "sender_full_name": "Quinn Culver",
        "timestamp": 1677696438
    },
    {
        "content": "<p>But now...</p>",
        "id": 338926130,
        "sender_full_name": "Quinn Culver",
        "timestamp": 1677696442
    },
    {
        "content": "<p>The <code>∈</code> is  displaying the error</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"mi\">35</span><span class=\"o\">:</span><span class=\"mi\">75</span><span class=\"o\">:</span> <span class=\"n\">invalid</span> <span class=\"n\">type</span> <span class=\"n\">ascription</span><span class=\"o\">,</span> <span class=\"n\">term</span> <span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"kt\">Prop</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span>\n</code></pre></div>\n<p>Here's the code:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- A choice of four points in a desarguesian plane, which define a division ring -/</span>\n<span class=\"kd\">structure</span> <span class=\"n\">proj_plane_div_config</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">a₁</span> <span class=\"n\">a₂</span> <span class=\"n\">c₁₃</span> <span class=\"n\">c₂₃</span> <span class=\"o\">:</span> <span class=\"n\">P</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">hnoncol</span> <span class=\"o\">:</span> <span class=\"n\">four_points_no_three_collinear</span> <span class=\"n\">L</span> <span class=\"n\">a₁</span> <span class=\"n\">a₂</span> <span class=\"n\">c₁₃</span> <span class=\"n\">c₂₃</span><span class=\"o\">)</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">proj_plane_div_config</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">P</span> <span class=\"n\">L</span><span class=\"o\">}</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">neq_a₁a₂</span> <span class=\"o\">(</span><span class=\"n\">c</span><span class=\"o\">:</span> <span class=\"n\">proj_plane_div_config</span> <span class=\"n\">P</span> <span class=\"n\">L</span><span class=\"o\">):</span> <span class=\"n\">c.a₁</span> <span class=\"bp\">≠</span> <span class=\"n\">c.a₂</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n\n<span class=\"kd\">def</span> <span class=\"n\">the_div_ring</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">proj_plane_div_config</span> <span class=\"n\">P</span> <span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"bp\">//</span>  <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">mk_line</span> <span class=\"o\">(</span><span class=\"n\">neq_a₁a₂</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"n\">c.a₂</span><span class=\"o\">}</span>\n</code></pre></div>",
        "id": 338926399,
        "sender_full_name": "Quinn Culver",
        "timestamp": 1677696509
    },
    {
        "content": "<p>That comma is illegal after the <code>sorry</code></p>",
        "id": 338926984,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1677696672
    },
    {
        "content": "<p>Corrected that, thanks.</p>",
        "id": 338927060,
        "sender_full_name": "Quinn Culver",
        "timestamp": 1677696702
    },
    {
        "content": "<p>And <code>(x ∈ mk_line (neq_a₁a₂ c) : L)</code> means <code>((x ∈ mk_line (neq_a₁a₂ c)) : L)</code>, you meant <code>x ∈ (mk_line (neq_a₁a₂ c) : L)</code>.</p>",
        "id": 338927087,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1677696713
    },
    {
        "content": "<p>Nice! That worked. Thanks again.</p>",
        "id": 338927130,
        "sender_full_name": "Quinn Culver",
        "timestamp": 1677696722
    },
    {
        "content": "<p>Why did you suggest putting <code>proj_plane_div_config.</code> at the beginning of the lemma's name?</p>",
        "id": 338927379,
        "sender_full_name": "Quinn Culver",
        "timestamp": 1677696801
    },
    {
        "content": "<p>Wait I guess it's so I can just write <code>c.neq_a₁a₂</code>. Is that the reason?</p>",
        "id": 338927840,
        "sender_full_name": "Quinn Culver",
        "timestamp": 1677696908
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"245476\">Quinn Culver</span> <a href=\"#narrow/stream/113488-general/topic/Structure.20defined.20for.20Desarguesian.20proj.20plane/near/338927379\">said</a>:</p>\n<blockquote>\n<p>Why did you suggest putting <code>proj_plane_div_config.</code> at the beginning of the lemma's name?</p>\n</blockquote>\n<p>It does the same thing as the <code>namespace</code> command that I didn't know you had</p>",
        "id": 338927949,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1677696934
    },
    {
        "content": "<p>So yes, you can write it as <code>x ∈ (mk_line c.neq_a₁a₂ : L)</code> too</p>",
        "id": 338928147,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1677696984
    },
    {
        "content": "<p>For notational convenience, I'm considering  defining the meet and join of points and lines as in <a href=\"/user_uploads/3121/iksjMR4Zt8-aXqDf6MbVbWdE/ftpg.pdf\">ftpg.pdf</a>. Any reason this is unwise? For example might it be more work than it's worth?</p>\n<p>That way instead of always invoking<code>mk_line</code> I can just use the meet symbol.</p>",
        "id": 338955587,
        "sender_full_name": "Quinn Culver",
        "timestamp": 1677704790
    },
    {
        "content": "<p>If you do that you'll need to define <code>meet a b</code> as something like <code>if h : a \\ne b then mk_line h else classical.choice sorry</code></p>",
        "id": 338968070,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1677709457
    },
    {
        "content": "<p>If you define it on flats as described in those notes then it is always defined and well-behaved, and I expect it would save a large amount of case analysis.</p>",
        "id": 339168717,
        "sender_full_name": "Reid Barton",
        "timestamp": 1677779699
    },
    {
        "content": "<p>I'm unsure how to even start implementing the meet &amp; join. I'd need to add a 0 and 1 element (\\emptyset and the whole plane, I think). Any advice?</p>",
        "id": 339417912,
        "sender_full_name": "Quinn Culver",
        "timestamp": 1677868456
    },
    {
        "content": "<p>I would make an inductive type with 4 constructors</p>",
        "id": 339419359,
        "sender_full_name": "Reid Barton",
        "timestamp": 1677868926
    },
    {
        "content": "<p>Is an inductive type more appropriate than a structure here? Is that because there's no single carrier set?</p>\n<p>Are the 4 constructors you had in mind, <span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span>,  1. the minimum (zero), 2. the maximum (one), 3. the points, and 4. the lines? If so, why not also include constructors for the meet &amp; join? Is it better to define those separately?</p>",
        "id": 340434301,
        "sender_full_name": "Quinn Culver",
        "timestamp": 1678299683
    },
    {
        "content": "<p>You should define those separately</p>",
        "id": 340444934,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1678302956
    },
    {
        "content": "<p>If you include them, then <code>meet zero zero = zero</code> is false</p>",
        "id": 340445046,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1678302978
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 340483364,
        "sender_full_name": "Quinn Culver",
        "timestamp": 1678317922
    }
]