[
    {
        "content": "<p>A <em>binomial tree of order n</em> has a root element and n subtrees of orders n-1, …, 0. I'm struggling with how to model this type in Lean. To begin with, should the type be indexed by the order? The point of binomial trees is to make binomial heaps, which contain trees of arbitrary orders, so I was working under the assumption that it would be more convenient if the order were not part of the type. This leads me to want to express the list of subtrees as</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">subTrees</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span> <span class=\"n\">ts</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">Tree</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">//</span> <span class=\"n\">subTreeProp</span> <span class=\"n\">Tree.order</span> <span class=\"n\">ts</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">subTreeProp</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ts</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">ts.get</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">ts.length</span> <span class=\"bp\">-</span> <span class=\"n\">i</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span>\n</code></pre></div>\n<p>(<code>subTreeProp</code> is indexed by a function to make it easier to play around with before actually defining binomial trees)<br>\nBut this way even simple, concrete cases of <code>subTreeProp</code> aren't provable automatically (i.e. <code>by simp</code> or similar). I think the universal quantifier<br>\nover <code>Fin (List.length ts)</code> presents a difficulty here.</p>\n<p>Should I formulate the property differently? Should I create a bespoke type for the list of subtrees of a tree instead of using a subtype?</p>",
        "id": 367447287,
        "sender_full_name": "Sebastian Zivota",
        "timestamp": 1687115457
    },
    {
        "content": "<p>You'll find an isabelle version in chapter 16 of functional algorithms verified : <a href=\"https://functional-algorithms-verified.org/functional_data_structures_algorithms.pdf\">https://functional-algorithms-verified.org/functional_data_structures_algorithms.pdf</a></p>",
        "id": 367451867,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1687117710
    },
    {
        "content": "<p>Subtypes in general have two annoyances:  </p>\n<ol>\n<li>You can't pattern match on them.</li>\n<li>You have to redefine induction principles on them because proofs are not carried over or some such thing. For an example see PNat. To do proofs by induction, it might be useful to define your tree type inductively. At least that is what I find convenient.</li>\n</ol>",
        "id": 367452202,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1687117895
    },
    {
        "content": "<p>Std has this for Lean 4: <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Std.BinomialHeapImp.HeapNode#doc\">docs4#Std.BinomialHeapImp.HeapNode</a>. There's probably also a Lean 3 version in mathlib.</p>",
        "id": 367552621,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1687163689
    },
    {
        "content": "<p>Oh, it didn't even occur to me to check if it already existed. Thanks, that's very helpful!</p>",
        "id": 367559367,
        "sender_full_name": "Sebastian Zivota",
        "timestamp": 1687165122
    },
    {
        "content": "<blockquote>\n<p>There's probably also a Lean 3 version in mathlib.</p>\n</blockquote>\n<p>Nope, this is a lean 4 original</p>",
        "id": 367707165,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1687194952
    }
]