[
    {
        "content": "<p>I know on macOS you have to install <code>libgmp</code> before Lean will work. Does anyone know if there is a similar requirement on linux? (There doesn't appear to be on Windows.)</p>",
        "id": 134657745,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1537952878
    },
    {
        "content": "<p>The toolchains installed by elan contain static binaries, which I find a bit surprising, but should mean you don't need libgmp. However all the machines I have lean on also have libgmp installed anyways, so no definitive proof.</p>",
        "id": 134671562,
        "sender_full_name": "Reid Barton",
        "timestamp": 1537966673
    },
    {
        "content": "<p>Yes, on Linux it's definitely a static binary. I'm not even sure why it's not on macOS</p>",
        "id": 134685427,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1537977515
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span>, is the libgmp dependency on OS X something that could be fixed? (In elan?) I don't really know about these static/dynamic library issues. Given a pointer to something to look I could try to sort it out.</p>",
        "id": 161995302,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1553809245
    },
    {
        "content": "<p>Helping out students, I see how valuable it would be to get a \"no command line necessary\" install procedure, and I think <code>libgmp</code> is one of the last obstacles. (On OS X one currently needs <code>brew install coreutils</code> to get <code>greadlink</code>, but there are various ways to get around this: <a href=\"https://stackoverflow.com/questions/1055671/how-can-i-get-the-behavior-of-gnus-readlink-f-on-a-mac\" target=\"_blank\" title=\"https://stackoverflow.com/questions/1055671/how-can-i-get-the-behavior-of-gnus-readlink-f-on-a-mac\">https://stackoverflow.com/questions/1055671/how-can-i-get-the-behavior-of-gnus-readlink-f-on-a-mac</a>)</p>",
        "id": 161995305,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1553809250
    },
    {
        "content": "<p>For reference, the error message my students have been getting (on OS X) is:</p>",
        "id": 162000128,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1553813550
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>dyld: Library not loaded: /usr/local/opt/gmp/lib/libgmp.10.dylib\n  Referenced from: /Users/ZZZ/.elan/toolchains/nightly-2019-01-13/bin/lean\n  Reason: image not found\n</pre></div>",
        "id": 162000143,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1553813567
    },
    {
        "content": "<p>(this is of course fixable with <code>brew install gmp</code>, but the point is to avoid this if possible)</p>",
        "id": 162001005,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1553814407
    },
    {
        "content": "<p>I have not taken the time to try to fully understand the build system, nor have I ever used CMake for anything, so I can't point exactly to where the distinction between the operating systems is made given default settings, but I did try a mac build (on your machine scott) forcing the static option on. However, I get a whole bunch of</p>\n<div class=\"codehilite\"><pre><span></span>ld: library not found for -lcrt0.o\nclang: error: linker command failed with exit code 1\n</pre></div>\n\n\n<p>which looked like a solvable problem (the crt0 has to by lying around somewhere!, I thought). But alas, there is this:<br>\n<a href=\"https://stackoverflow.com/questions/3801011/ld-library-not-found-for-lcrt0-o-on-osx-10-6-with-gcc-clang-static-flag\" target=\"_blank\" title=\"https://stackoverflow.com/questions/3801011/ld-library-not-found-for-lcrt0-o-on-osx-10-6-with-gcc-clang-static-flag\">https://stackoverflow.com/questions/3801011/ld-library-not-found-for-lcrt0-o-on-osx-10-6-with-gcc-clang-static-flag</a><br>\nApparently, apple refuses to provide statically linked <code>libSystem.dylib</code>, so you'd have to build it yourself...</p>\n<p>This is all to say that you can't just be lazy and pass <code>-static</code> and compile with gcc or clang to fix the problem.</p>",
        "id": 162169142,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1554029955
    },
    {
        "content": "<p>On the other hand, I manually patched out the references to the dynamic library <code>libgmp.dylib</code> in the generated CMakeFiles and compiled, and everything worked fine... Here's a link to the zip for macos that was built:</p>",
        "id": 162169208,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1554030025
    },
    {
        "content": "<p><a href=\"https://github.com/khoek/klean/releases/download/macos-static/lean-3.4.2-darwin.zip\" target=\"_blank\" title=\"https://github.com/khoek/klean/releases/download/macos-static/lean-3.4.2-darwin.zip\">https://github.com/khoek/klean/releases/download/macos-static/lean-3.4.2-darwin.zip</a></p>\n<p>I'd be really good to know if it works (i.e. doesn't need libgmp.dylib)---I'm pretty sure it doesn't but I don't actually have a mac.<br>\n(If this works, it's obviously unsatisfactory, but it's proof the build system could probably be fixed/improved easily by someone who understood it.)</p>",
        "id": 162169299,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1554030242
    },
    {
        "content": "<p>On the other hand, I'm pretty sure the dynamic loader would look in the directory where the executable is for missing shared libraries, so if <code>elan</code> just popped a copy of <code>libgmp.10.dylib</code> in the <code>bin</code> directory of an extracted release I think we'd be okay too?</p>",
        "id": 162169351,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1554030301
    },
    {
        "content": "<p>re: the last point, <code>cp /usr/local/opt/gmp/lib/libgmp.10.dylib /Users/scott/.elan/bin/</code> doesn't help</p>",
        "id": 162170001,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1554031418
    },
    {
        "content": "<p>and yes, your statically linked binary really works, (when normal lean doesn't, complaining</p>\n<div class=\"codehilite\"><pre><span></span>dyld: Library not loaded: /usr/local/opt/gmp/lib/libgmp.10.dylib\n  Referenced from: /Users/scott/.elan/toolchains/stable/bin/lean\n  Reason: image not found\nAbort trap: 6\n</pre></div>",
        "id": 162170123,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1554031582
    },
    {
        "content": "<p>Your last snipped confused me, presumably you hid <code>/usr/local/opt/gmp/lib/libgmp.10.dylib</code> before test-invoking <code>bin/lean</code>?</p>",
        "id": 162172927,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1554036289
    },
    {
        "content": "<p>How does lean import gmp symbols? I don't see any dependency from binary distributions? </p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>schrodinger@Yifans-MacBook-Air<span class=\"w\"> </span>hasher<span class=\"w\"> </span>%<span class=\"w\"> </span>otool<span class=\"w\"> </span>-L<span class=\"w\"> </span><span class=\"k\">$(</span>which<span class=\"w\"> </span>lean<span class=\"k\">)</span>\n/Users/schrodinger/.elan/bin/lean:\n<span class=\"w\">        </span>/usr/lib/libcurl.4.dylib<span class=\"w\"> </span><span class=\"o\">(</span>compatibility<span class=\"w\"> </span>version<span class=\"w\"> </span><span class=\"m\">7</span>.0.0,<span class=\"w\"> </span>current<span class=\"w\"> </span>version<span class=\"w\"> </span><span class=\"m\">9</span>.0.0<span class=\"o\">)</span>\n<span class=\"w\">        </span>/usr/lib/libiconv.2.dylib<span class=\"w\"> </span><span class=\"o\">(</span>compatibility<span class=\"w\"> </span>version<span class=\"w\"> </span><span class=\"m\">7</span>.0.0,<span class=\"w\"> </span>current<span class=\"w\"> </span>version<span class=\"w\"> </span><span class=\"m\">7</span>.0.0<span class=\"o\">)</span>\n<span class=\"w\">        </span>/usr/lib/libSystem.B.dylib<span class=\"w\"> </span><span class=\"o\">(</span>compatibility<span class=\"w\"> </span>version<span class=\"w\"> </span><span class=\"m\">1</span>.0.0,<span class=\"w\"> </span>current<span class=\"w\"> </span>version<span class=\"w\"> </span><span class=\"m\">1319</span>.0.0<span class=\"o\">)</span>\n</code></pre></div>",
        "id": 391816119,
        "sender_full_name": "Schrodinger ZHU Yifan",
        "timestamp": 1695092179
    },
    {
        "content": "<p>We are in the process of replacing GMP with a custom implementation lifted from Z3. If you're on Apple Silicon, that's already the case.</p>",
        "id": 391838267,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1695104606
    },
    {
        "content": "<p>Is it mpn? I wonder if we can have API to access the buffer of mpn and its length. (mpz has mpz_limbs_read and mpz_size)</p>",
        "id": 391959802,
        "sender_full_name": "Schrodinger ZHU Yifan",
        "timestamp": 1695143997
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110024\">Sebastian Ullrich</span> <a href=\"#narrow/stream/113488-general/topic/libgmp.20dependency/near/391838267\">said</a>:</p>\n<blockquote>\n<p>We are in the process of replacing GMP with a custom implementation lifted from Z3. If you're on Apple Silicon, that's already the case.</p>\n</blockquote>\n<p>What is the reason/reasons for this change?</p>",
        "id": 394698645,
        "sender_full_name": "Ioannis Konstantoulas",
        "timestamp": 1696362286
    },
    {
        "content": "<p>licenseï¼Ÿ</p>",
        "id": 394724450,
        "sender_full_name": "Schrodinger ZHU Yifan",
        "timestamp": 1696375513
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"639630\">Schrodinger ZHU Yifan</span> <a href=\"#narrow/stream/113488-general/topic/libgmp.20dependency/near/394724450\">said</a>:</p>\n<blockquote>\n<p>licenseï¼Ÿ</p>\n</blockquote>\n<p>Oh, I see!  If the license is a burden and there is no significant performance hit, why not.</p>",
        "id": 394796080,
        "sender_full_name": "Ioannis Konstantoulas",
        "timestamp": 1696411188
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"639630\">Schrodinger ZHU Yifan</span> <a href=\"#narrow/stream/113488-general/topic/libgmp.20dependency/near/394724450\">said</a>:</p>\n<blockquote>\n<p>licenseï¼Ÿ</p>\n</blockquote>\n<p>Can someone confirm / say more about this and what sort of license is desired for Lean if that is the case?</p>",
        "id": 394799173,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1696412236
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"127136\">Alex J. Best</span> <a href=\"#narrow/stream/113488-general/topic/libgmp.20dependency/near/394799173\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"639630\">Schrodinger ZHU Yifan</span> <a href=\"#narrow/stream/113488-general/topic/libgmp.20dependency/near/394724450\">said</a>:</p>\n<blockquote>\n<p>licenseï¼Ÿ</p>\n</blockquote>\n<p>Can someone confirm / say more about this and what sort of license is desired for Lean if that is the case?</p>\n</blockquote>\n<p>I guess Apache license; generally, corporate-sponsored open source projects prefer permissive licenses like Apache over copyleft like GPL.</p>",
        "id": 394800984,
        "sender_full_name": "Ioannis Konstantoulas",
        "timestamp": 1696412949
    },
    {
        "content": "<p>I generally use GPL 3.0 for my projects, but I will use Apache if/when I upload Lean code, to make things easier for the rest of the community.</p>",
        "id": 394801227,
        "sender_full_name": "Ioannis Konstantoulas",
        "timestamp": 1696413043
    },
    {
        "content": "<p>Sure, I'm wondering if the devs considered switching to MPIR instead of gmp, it was forked from GMP for essentially this purpose, its not really maintained these days but it always maintained backwards compatibility so would be a drop in replacement.<br>\nIf the performance hit is small of course not depending on an external library is better but its something to consider</p>",
        "id": 394801888,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1696413277
    },
    {
        "content": "<p>For further information, can someone link to the code of the new library (e.g. the one that works on Apple stuff)?  Is it written in C?  I'd like to poke around a bit.</p>",
        "id": 394829048,
        "sender_full_name": "Ioannis Konstantoulas",
        "timestamp": 1696422302
    },
    {
        "content": "<p>It's code extracted from Z3, as far as I understand it. I don't think it is packaged as a library.</p>",
        "id": 394830282,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1696422727
    },
    {
        "content": "<p>See, e.g., <a href=\"https://github.com/leanprover/lean4/blob/89b65c8f1d6fa7700d73f1bc12db0b140c728e32/src/runtime/mpz.cpp\">https://github.com/leanprover/lean4/blob/89b65c8f1d6fa7700d73f1bc12db0b140c728e32/src/runtime/mpz.cpp</a></p>",
        "id": 394830481,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1696422816
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"577163\">@Ioannis Konstantoulas</span>, I've been meaning to write some tests for these functions: if you're at all interesting in writing tests as part of poking around, that would be amazing. :-)</p>",
        "id": 394832249,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1696423414
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/113488-general/topic/libgmp.20dependency/near/394832249\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"577163\">Ioannis Konstantoulas</span>, I've been meaning to write some tests for these functions: if you're at all interesting in writing tests as part of poking around, that would be amazing. :-)</p>\n</blockquote>\n<p>Oh no no, I am an amateur and will create more trouble than help <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span> .  I am trying to learn Lean well enough to be able to help on simple matters, but I am still far from ready.  I do not even understand how the github collaboration process works: what is CI, how to make correct PRs, etc.</p>",
        "id": 394856002,
        "sender_full_name": "Ioannis Konstantoulas",
        "timestamp": 1696430377
    },
    {
        "content": "<p>I also don't know any real C++; I am comfortable with some parts of C, but not any specialized work, especially as subtle as bignum.</p>",
        "id": 394856220,
        "sender_full_name": "Ioannis Konstantoulas",
        "timestamp": 1696430418
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> do you know how hashable interface is implemented for MPN/MPZ</p>",
        "id": 394873585,
        "sender_full_name": "Schrodinger ZHU Yifan",
        "timestamp": 1696435693
    }
]