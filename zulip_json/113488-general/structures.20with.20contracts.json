[
    {
        "content": "<p>Say I have a type</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">OrdPair</span>\n  <span class=\"n\">lower</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span>\n  <span class=\"n\">higher</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span>\n</code></pre></div>\n<p>I want this struct to have the additional contractual guarantee that <code>lower &lt; higher</code>. So can I have the struct carry the proof somehow? Something like this?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">OrdPair</span>\n  <span class=\"n\">lower</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span>\n  <span class=\"n\">higher</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span>\n  <span class=\"n\">is_ord</span><span class=\"o\">:</span> <span class=\"n\">lower</span> <span class=\"bp\">&lt;</span> <span class=\"n\">higher</span>\n</code></pre></div>\n<p>Is this possible? Is it considered a code smell or a sound design choice? I couldn't see any examples like this in the Functional Programming in Lean book, but I may well have missed it.</p>",
        "id": 389769332,
        "sender_full_name": "Matthew Pocock",
        "timestamp": 1694126410
    },
    {
        "content": "<p>Yeah, I'd say that's fine. There's a bit of a tradeoff where it puts more of a proof burden inside of your algorithms, vs proving your algorithms are correct after the fact, but especially if you're not going to formally verify an algorithm, it's great being able to take advantage of Lean to embed contracts like this.</p>\n<p>Here's something else you can do:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">OrdPair</span>\n  <span class=\"n\">lower</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span>\n  <span class=\"n\">higher</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span>\n  <span class=\"n\">is_ord</span> <span class=\"o\">:</span> <span class=\"n\">lower</span> <span class=\"bp\">&lt;</span> <span class=\"n\">higher</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span>\n</code></pre></div>\n<p>Then in simple cases like <code>def p : OrdPair := {lower := 1, higher := 10}</code> the tactic will fill in the proof automatically.</p>",
        "id": 389770470,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1694127253
    },
    {
        "content": "<p>Surely <code>:= by norm_num</code>?</p>",
        "id": 389771935,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1694128181
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/113488-general/topic/structures.20with.20contracts/near/389770470\">said</a>:</p>\n<blockquote>\n<p>but especially if you're not going to formally verify an algorithm, it's great being able to take advantage of Lean to embed contracts like this.</p>\n</blockquote>\n<p>At the moment these structs are there to model the domain of my proofs.</p>\n<blockquote>\n<p>Here's something else you can do:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">OrdPair</span>\n  <span class=\"n\">lower</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span>\n  <span class=\"n\">higher</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span>\n  <span class=\"n\">is_ord</span> <span class=\"o\">:</span> <span class=\"n\">lower</span> <span class=\"bp\">&lt;</span> <span class=\"n\">higher</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span>\n</code></pre></div>\n<p>Oh, that's neat. Thanks :D</p>\n</blockquote>",
        "id": 389845196,
        "sender_full_name": "Matthew Pocock",
        "timestamp": 1694165508
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/113488-general/topic/structures.20with.20contracts/near/389770470\">said</a>:</p>\n<blockquote>\n<p>Yeah, I'd say that's fine. </p>\n</blockquote>\n<p>So I've written my first thing :D </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">collatz</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">if</span> <span class=\"n\">Even</span> <span class=\"n\">n</span> <span class=\"k\">then</span> <span class=\"n\">n</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"k\">else</span> <span class=\"mi\">3</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">CollatzSequence</span> <span class=\"n\">where</span>\n    <span class=\"n\">left</span><span class=\"o\">:</span> <span class=\"n\">Nat</span>\n    <span class=\"n\">right</span><span class=\"o\">:</span> <span class=\"n\">Nat</span>\n    <span class=\"n\">length</span><span class=\"o\">:</span> <span class=\"n\">Nat</span>\n    <span class=\"n\">is_valid</span> <span class=\"o\">:</span> <span class=\"n\">Nat.iterate</span> <span class=\"n\">collatz</span> <span class=\"n\">length</span> <span class=\"n\">left</span> <span class=\"bp\">=</span> <span class=\"n\">right</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">CollatzSequence.join</span> <span class=\"o\">(</span><span class=\"n\">ls</span> <span class=\"n\">rs</span> <span class=\"o\">:</span> <span class=\"n\">CollatzSequence</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">touch</span><span class=\"o\">:</span> <span class=\"n\">ls.right</span> <span class=\"bp\">=</span> <span class=\"n\">rs.left</span><span class=\"o\">):</span> <span class=\"n\">CollatzSequence</span> <span class=\"o\">:=</span>\n    <span class=\"o\">{</span> <span class=\"n\">left</span> <span class=\"o\">:=</span> <span class=\"n\">ls.left</span><span class=\"o\">,</span> <span class=\"n\">right</span> <span class=\"o\">:=</span> <span class=\"n\">rs.right</span> <span class=\"o\">,</span> <span class=\"n\">length</span> <span class=\"o\">:=</span> <span class=\"n\">rs.length</span> <span class=\"bp\">+</span> <span class=\"n\">ls.length</span><span class=\"o\">,</span> <span class=\"n\">is_valid</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n        <span class=\"k\">have</span> <span class=\"n\">lh</span> <span class=\"o\">:=</span> <span class=\"n\">ls.is_valid</span>\n        <span class=\"k\">have</span> <span class=\"n\">rh</span> <span class=\"o\">:=</span> <span class=\"n\">rs.is_valid</span>\n        <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">touch</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">lh</span>\n        <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Eq.symm</span> <span class=\"n\">lh</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">rh</span>\n        <span class=\"k\">have</span> <span class=\"n\">cmp</span> <span class=\"o\">:=</span> <span class=\"n\">Function.iterate_add_apply</span> <span class=\"n\">collatz</span> <span class=\"n\">rs.length</span> <span class=\"n\">ls.length</span> <span class=\"n\">ls.left</span>\n        <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">Eq.symm</span> <span class=\"n\">cmp</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">rh</span>\n        <span class=\"n\">assumption</span>\n    <span class=\"o\">}</span>\n</code></pre></div>\n<p>Not sure if it will be useful in practice, but it was a good learning exercise.</p>",
        "id": 389864016,
        "sender_full_name": "Matthew Pocock",
        "timestamp": 1694172899
    },
    {
        "content": "<p>you can write <code>Eq.symm cmp</code> as <code>cmp.symm</code> by the way :) or in tactics like <code>simp</code> and <code>rw</code>, also as <code>‚Üêcmp</code>.</p>",
        "id": 389864415,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1694173057
    },
    {
        "content": "<p>Ah, that certainly tidies it up a bit <span class=\"user-mention\" data-user-id=\"284160\">@Eric Rodriguez</span> . The <code>apply?</code> tactic doesn't seem to know about this :/</p>",
        "id": 389867129,
        "sender_full_name": "Matthew Pocock",
        "timestamp": 1694174108
    }
]