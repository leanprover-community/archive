[
    {
        "content": "<p>Hi, I’m currently reading Kha's thesis and especially the chapter about the desugaring of do and I’m surprised it’s completely different in the actual implementation. What are the reasons for that? If it’s performance is there smth else to consider but efficiency of Except transformers? Why is the reference impl in the thesis based on StateT and not on real mutable references with delimited scope ala Haskells ST? <br>\nThanks in advance.</p>",
        "id": 381530849,
        "sender_full_name": "MangoIV",
        "timestamp": 1691077300
    },
    {
        "content": "<p><a href=\"https://publikationen.bibliothek.kit.edu/1000161074/151088087\">https://publikationen.bibliothek.kit.edu/1000161074/151088087</a> for reference</p>",
        "id": 381535984,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1691078279
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> maybe?</p>",
        "id": 381593936,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1691091646
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"586938\">MangoIV</span> <a href=\"#narrow/stream/113488-general/topic/Do.20desugaring/near/381530849\">said</a>:</p>\n<blockquote>\n<p>I’m surprised it’s completely different in the actual implementation. What are the reasons for that?</p>\n</blockquote>\n<p>They were written more or less in parallel, by two different people, for different purposes. Even if in the end they can be compiled down to similar code, the optimization overhead for doing so is a greater concern for the full implementation.</p>\n<p>ST I believe would harm verifiability and optimizability. Its complexity is simply not needed here.</p>",
        "id": 381600756,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1691093764
    },
    {
        "content": "<blockquote>\n<p>harm optimisability <br>\nits complexity is simply not needed here </p>\n</blockquote>\n<p>Oh really, that’s really unexpected for me, for one I’d expect in imperative code the match to be closer with mutable references due to how it’s simply one abstraction layer less and second I’d expect that it’s more complex to model multiple references with one context or have multiple contexts in StateT than in ST as in ST multiple references are “native”. </p>\n<p>The point of the verifiability is not so surprising although I guess I would’ve expected the concept already being sufficiently formalised for it to not to be too hard to do. </p>\n<p>On the first question: are there plans to eventually offer a second implementation s.t. this can be benchmarked against the current one? What do you expect the hurdles to be in terms of optimisation? </p>\n<p>Thank you so much for your answer.</p>",
        "id": 381602495,
        "sender_full_name": "MangoIV",
        "timestamp": 1691094339
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> I hope it’s okay that I ping you here again, just in case you overlooked it. Sorry if you didn’t. :3</p>",
        "id": 381895777,
        "sender_full_name": "MangoIV",
        "timestamp": 1691163462
    }
]