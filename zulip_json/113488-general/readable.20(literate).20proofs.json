[
    {
        "content": "<p>Is there a tutorial or style guide for writing proof documents that are human-reader oriented? I have a file full of theorems and code comments, but would prefer something more like a literate programming document that can be viewed as pdf/html.</p>",
        "id": 389872388,
        "sender_full_name": "Matthew Pocock",
        "timestamp": 1694176065
    },
    {
        "content": "<p>Check out the infra that's set for <a href=\"https://github.com/leanprover-community/lean4-metaprogramming-book\">https://github.com/leanprover-community/lean4-metaprogramming-book</a><br>\nThe core trick is using <a href=\"https://github.com/arthurpaulino/lean2md\">lean2md</a><br>\nOnce you turn your file into markdown, you're free to do much more with whatever tools exist out there</p>\n<p>Edit: note that <code>lean2md</code> won't handle comments with <code>/- ... -/</code> inside Lean code blocks because it's a very simple tool that was created for the specific purpose of writing the metaprogramming book</p>",
        "id": 389873156,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1694176374
    },
    {
        "content": "<p>We have a tool for producing interactive proof documents though it's not as nicely integrated as it could be: <a href=\"https://github.com/leanprover/LeanInk\">https://github.com/leanprover/LeanInk</a><br>\nExamples: <a href=\"https://leanprover.github.io/lean4/doc/examples.html\">https://leanprover.github.io/lean4/doc/examples.html</a></p>",
        "id": 389874892,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1694176969
    },
    {
        "content": "<p>Am I the only one who prefers reading Lean over reading PDFs?</p>",
        "id": 389877561,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1694177930
    },
    {
        "content": "<p>It clearly depends on the target audience and the context</p>",
        "id": 389878003,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1694178072
    },
    {
        "content": "<blockquote>\n<p>but would prefer something more like a literate programming document that can be viewed as pdf/html.</p>\n</blockquote>\n<p>doc-gen can do this in some sense; every <code>/-!</code> comment is rendered as markdown between declarations</p>",
        "id": 389878258,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1694178163
    },
    {
        "content": "<p>Thanks. I will have a play with these. Is there any support for live-preview of the formatted document within vs code?</p>",
        "id": 389883796,
        "sender_full_name": "Matthew Pocock",
        "timestamp": 1694180189
    },
    {
        "content": "<p>Not yet (bait attempt!)</p>",
        "id": 389887563,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1694181536
    },
    {
        "content": "<p>I'd say LeanInk is arguably the one that deserves further support/integration/simplification</p>",
        "id": 389888309,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1694181792
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/51CbTvfsnroMYaF-XK7yq8h7/EEF9C729-1038-4B94-A451-9E3F9711CA7B.png\">EEF9C729-1038-4B94-A451-9E3F9711CA7B.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/51CbTvfsnroMYaF-XK7yq8h7/EEF9C729-1038-4B94-A451-9E3F9711CA7B.png\" title=\"EEF9C729-1038-4B94-A451-9E3F9711CA7B.png\"><img src=\"/user_uploads/3121/51CbTvfsnroMYaF-XK7yq8h7/EEF9C729-1038-4B94-A451-9E3F9711CA7B.png\"></a></div><p><a href=\"/user_uploads/3121/5F_KPAFKVqZWUpufyXA9GoVk/DB79F1B3-2FE3-484A-BF9A-FF0C4C46AE31.png\">DB79F1B3-2FE3-484A-BF9A-FF0C4C46AE31.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/5F_KPAFKVqZWUpufyXA9GoVk/DB79F1B3-2FE3-484A-BF9A-FF0C4C46AE31.png\" title=\"DB79F1B3-2FE3-484A-BF9A-FF0C4C46AE31.png\"><img src=\"/user_uploads/3121/5F_KPAFKVqZWUpufyXA9GoVk/DB79F1B3-2FE3-484A-BF9A-FF0C4C46AE31.png\"></a></div><p>By using poly mode and emacs, one can set up a mixed mode to write Lean code as normal and org-style comments including rendering of maths equations and commutative diagram and displaying images.</p>",
        "id": 392840689,
        "sender_full_name": "Jujian Zhang",
        "timestamp": 1695567325
    },
    {
        "content": "<p>Did you try to convert the org file into html using LeanInk? I would be quite interested in that.</p>",
        "id": 393128096,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1695683725
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 393196591,
        "sender_full_name": "Jujian Zhang",
        "timestamp": 1695720802
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 393203397,
        "sender_full_name": "Jujian Zhang",
        "timestamp": 1695723317
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 393203445,
        "sender_full_name": "Jujian Zhang",
        "timestamp": 1695723344
    },
    {
        "content": "<p>I added <code>rst-mode</code> supported in emacs:<br>\n<a href=\"/user_uploads/3121/omtOuwOm6wMftneLHua4o2e2/Screenshot-2023-09-26-at-12.23.02.png\">Screenshot-2023-09-26-at-12.23.02.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/omtOuwOm6wMftneLHua4o2e2/Screenshot-2023-09-26-at-12.23.02.png\" title=\"Screenshot-2023-09-26-at-12.23.02.png\"><img src=\"/user_uploads/3121/omtOuwOm6wMftneLHua4o2e2/Screenshot-2023-09-26-at-12.23.02.png\"></a></div><p>exporting it via alectryon and leanink, it looks like this:<br>\n<a href=\"/user_uploads/3121/4C_qwNu-odXxMptGXQZPzY1e/Screenshot-2023-09-26-at-12.23.15.png\">Screenshot-2023-09-26-at-12.23.15.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/4C_qwNu-odXxMptGXQZPzY1e/Screenshot-2023-09-26-at-12.23.15.png\" title=\"Screenshot-2023-09-26-at-12.23.15.png\"><img src=\"/user_uploads/3121/4C_qwNu-odXxMptGXQZPzY1e/Screenshot-2023-09-26-at-12.23.15.png\"></a></div>",
        "id": 393213140,
        "sender_full_name": "Jujian Zhang",
        "timestamp": 1695727529
    },
    {
        "content": "<p>emacs setup:</p>\n<ol>\n<li>download <code>polymode</code></li>\n<li>add the following into emacs config file</li>\n</ol>\n<div class=\"codehilite\" data-code-language=\"EmacsLisp\"><pre><span></span><code><span class=\"p\">(</span><span class=\"nb\">require</span><span class=\"w\"> </span><span class=\"ss\">'polymode</span><span class=\"p\">)</span>\n\n<span class=\"p\">(</span><span class=\"nb\">defun</span><span class=\"w\"> </span><span class=\"nv\">pm--lean4org-head-matcher</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">ahead</span><span class=\"p\">)</span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"nb\">when</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nf\">re-search-forward</span><span class=\"w\"> </span><span class=\"s\">\"^[ \\t]*\\/-*Org\"</span><span class=\"w\"> </span><span class=\"no\">nil</span><span class=\"w\"> </span><span class=\"no\">t</span><span class=\"w\"> </span><span class=\"nv\">ahead</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"nf\">cons</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nf\">match-beginning</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nf\">match-end</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">))))</span>\n\n<span class=\"p\">(</span><span class=\"nb\">defun</span><span class=\"w\"> </span><span class=\"nv\">pm--lean4org-tail-matcher</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">ahead</span><span class=\"p\">)</span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"nb\">when</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nf\">&lt;</span><span class=\"w\"> </span><span class=\"nv\">ahead</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"ne\">error</span><span class=\"w\"> </span><span class=\"s\">\"Backwards tail match not implemented\"</span><span class=\"p\">))</span>\n<span class=\"w\">  </span><span class=\"c1\">;; may be rely on syntactic lookup ?</span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"nb\">when</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nf\">re-search-forward</span><span class=\"w\"> </span><span class=\"s\">\"^[ \\t]*-*\\/[ \\t]*\"</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"nf\">cons</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nf\">match-beginning</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nf\">match-end</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">))))</span>\n\n<span class=\"p\">(</span><span class=\"nv\">define-innermode</span><span class=\"w\"> </span><span class=\"nv\">poly-lean4-org-innermode</span>\n<span class=\"w\">  </span><span class=\"nb\">:mode</span><span class=\"w\"> </span><span class=\"ss\">'org-mode</span>\n<span class=\"w\">  </span><span class=\"nb\">:head-matcher</span><span class=\"w\"> </span><span class=\"ss\">'pm--lean4org-head-matcher</span>\n<span class=\"w\">  </span><span class=\"nb\">:tail-matcher</span><span class=\"w\"> </span><span class=\"ss\">'pm--lean4org-tail-matcher</span>\n<span class=\"w\">  </span><span class=\"nb\">:head-mode</span><span class=\"w\"> </span><span class=\"ss\">'host</span>\n<span class=\"w\">  </span><span class=\"nb\">:tail-mode</span><span class=\"w\"> </span><span class=\"ss\">'host</span><span class=\"p\">)</span>\n\n<span class=\"p\">(</span><span class=\"nb\">defun</span><span class=\"w\"> </span><span class=\"nv\">pm--lean4rst-head-matcher</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">ahead</span><span class=\"p\">)</span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"nb\">when</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nf\">re-search-forward</span><span class=\"w\"> </span><span class=\"s\">\"\\/-!\"</span><span class=\"w\"> </span><span class=\"no\">nil</span><span class=\"w\"> </span><span class=\"no\">t</span><span class=\"w\"> </span><span class=\"nv\">ahead</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"nf\">cons</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nf\">match-beginning</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nf\">match-end</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">))))</span>\n\n<span class=\"p\">(</span><span class=\"nb\">defun</span><span class=\"w\"> </span><span class=\"nv\">pm--lean4rst-tail-matcher</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">ahead</span><span class=\"p\">)</span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"nb\">when</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nf\">&lt;</span><span class=\"w\"> </span><span class=\"nv\">ahead</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"ne\">error</span><span class=\"w\"> </span><span class=\"s\">\"Backwards tail match not implemented\"</span><span class=\"p\">))</span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"nb\">when</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nf\">re-search-forward</span><span class=\"w\"> </span><span class=\"s\">\"^[ \\t]*-*\\/[ \\t]*\"</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"nf\">cons</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nf\">match-beginning</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nf\">match-end</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">))))</span>\n\n<span class=\"p\">(</span><span class=\"nv\">define-innermode</span><span class=\"w\"> </span><span class=\"nv\">poly-lean4-rst-innermode</span>\n<span class=\"w\">  </span><span class=\"nb\">:mode</span><span class=\"w\"> </span><span class=\"ss\">'rst-mode</span>\n<span class=\"w\">  </span><span class=\"nb\">:head-matcher</span><span class=\"w\"> </span><span class=\"ss\">'pm--lean4rst-head-matcher</span>\n<span class=\"w\">  </span><span class=\"nb\">:tail-matcher</span><span class=\"w\"> </span><span class=\"ss\">'pm--lean4rst-tail-matcher</span>\n<span class=\"w\">  </span><span class=\"nb\">:head-mode</span><span class=\"w\"> </span><span class=\"ss\">'host</span>\n<span class=\"w\">  </span><span class=\"nb\">:tail-mode</span><span class=\"w\"> </span><span class=\"ss\">'host</span><span class=\"p\">)</span>\n\n<span class=\"p\">(</span><span class=\"nv\">define-hostmode</span><span class=\"w\"> </span><span class=\"nv\">poly-lean4-hostmode</span>\n<span class=\"w\">  </span><span class=\"nb\">:mode</span><span class=\"w\"> </span><span class=\"ss\">'lean4-mode</span><span class=\"p\">)</span>\n\n<span class=\"p\">(</span><span class=\"nv\">define-polymode</span><span class=\"w\"> </span><span class=\"nv\">poly-lean4-mode</span>\n<span class=\"w\">  </span><span class=\"nb\">:hostmode</span><span class=\"w\"> </span><span class=\"ss\">'poly-lean4-hostmode</span>\n<span class=\"w\">  </span><span class=\"nb\">:innermodes</span>\n<span class=\"w\">  </span><span class=\"o\">'</span><span class=\"p\">(</span><span class=\"nv\">poly-lean4-org-innermode</span><span class=\"w\"> </span><span class=\"nv\">poly-lean4-rst-innermode</span><span class=\"p\">))</span>\n</code></pre></div>\n<ol start=\"3\">\n<li>use  <code>poly-lean4-mode</code> in a lean file buffer</li>\n</ol>",
        "id": 393213441,
        "sender_full_name": "Jujian Zhang",
        "timestamp": 1695727668
    }
]