[
    {
        "content": "<p>This is really starting to make me question whether bare <code>simp</code>'s are the right format to keep proofs in a mathlib like repo, and whether we should <code>simp only</code> everything by default, even finishing proofs.<br>\nA very rough count makes me believe that simp is used as often as an intermediate step than as a finishing tactic, so it will only get twice as annoying to do refactors involving renaming, would this be worth it if everyones branches built on average 30 mins faster? Or 1 hour or 2?<br>\nI'd like to gather some data on the effects of making such a change, provided I can find a good way to automate the process.<br>\nOf course there is also the ugliness factor of replacing nice one line proofs when defining structures with a 3 line simp block, but is the aesthetics worth the stress on CI?</p>",
        "id": 303864830,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1665675462
    },
    {
        "content": "<p>I suggested in the past that we could have files that kept the <code>simp only</code> output cached in the background; for this, we'd definitely need a more reliable squeeze_simp, but I still think it's a good idea for speed unless lean4 is literally here in &lt;1month or so. Last I looked at it, squeeze_simp is mostly reliable, there's still issues with expressions that provide extra values (so for example if you squeeze_simp with a term like <code>my_lemma _ _ h.a</code> it will be awful)  but otherwise solid enough</p>",
        "id": 303874549,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1665678086
    },
    {
        "content": "<p>Yeah I was thinking squeeze simp would fail maybe only 5% of the time, so it shouldn't change if the speedup was worth the readability sacrifice if we just left those as is rather than manually trying to fix 500 simps.</p>",
        "id": 303885485,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1665681254
    },
    {
        "content": "<p>Caching intermediate steps would of course be even better, but yeah is a much bigger project!</p>",
        "id": 303885592,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1665681289
    },
    {
        "content": "<p>re: caching, there's also the question of doing in Lean 3 (hard and/or messy) or in Lean 4 (hopefully lots more options!). If we had on the horizon a plan for tactics being able to cache data between runs in Lean 4, and anticipated this making a big difference for <code>simp</code> in mathlib4, there wouldn't be much point squeezing lots of mathlib3 simps.</p>",
        "id": 303940933,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1665704376
    },
    {
        "content": "<blockquote>\n<p>a plan for tactics being able to cache data between runs in Lean 4</p>\n</blockquote>\n<p>If you mean reusing a cache file created by the last CI run, I don't think that's a good plan at all.  It will make it essentially impossible to build mathlib without the cache, and refactorings will become increasingly impossible as the original uncached tactics stop working.</p>\n<p><code>simp only</code> is a bit better since you can modify and fix it even if the original <code>simp</code> no longer works.</p>",
        "id": 303941853,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1665705044
    },
    {
        "content": "<p>I had in mind something like this:</p>\n<ul>\n<li>A tactic called <code>cached_simp</code></li>\n<li>If it is run without caching data present, it runs <code>simp?</code>, and stores the found lemmas in a persistent cache (maybe along with <code>X.lean</code> and <code>X.olean</code> we have <code>X.cache</code>).</li>\n<li>If it is run with caching data present, it runs <code>simp only [...]</code> with the lemmas found in the cache.</li>\n<li>There is an easy code action to replace the <code>cached_simp</code> with <code>simp only [...]</code>, for debugging/fixing purposes.</li>\n<li>Perhaps it also stores in the cache the form of the goal after the <code>simp only [...]</code> in the initial run, and if that isn't achieved by today's <code>simp only [...]</code>, raise an error.</li>\n<li>We can also run more intense CI occasionally that verifies that <code>cached_simp</code> would recreate its cached data.</li>\n</ul>\n<p>It seems like that adds up to something functionally equivalent to our current <code>simp only [...]</code>, except that the giant list of lemmas is stored out of the reader's sight.</p>",
        "id": 303946693,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1665708899
    },
    {
        "content": "<p>In fact it does something a little better. Something that I really don't like at the moment is when I write <code>simp? [X, Y]</code>, and it spits back <code>simp only [A, B, C, D, X, E, F, G, Y, H]</code>. This has lost the semantic intent that <code>X</code> and <code>Y</code> are additional to the usual simp set, and are <em>meaningful</em> here, while everything else is just cached data. (One could fix this with a version like `simp only [special_lemmas] [boring_lemmas], I guess.)</p>",
        "id": 303946701,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1665708904
    },
    {
        "content": "<p>A cool thing you could do is some kind of semantic highlighting on lemmas that are not in the default simp set</p>",
        "id": 303946867,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1665709053
    },
    {
        "content": "<p>maybe fading out the ones that are in the default simp set</p>",
        "id": 303946924,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1665709094
    },
    {
        "content": "<p>It would be really cool if there were a way to do \"folding\" of <code>simp only</code> so that you only see the lemmas that are not in the default simp set, but perhaps semantic highlighting would be sufficient.</p>",
        "id": 303961196,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1665721059
    },
    {
        "content": "<p>I think we should explore this idea of \"folding\" and/or semantic highlighting for many other things as well.</p>",
        "id": 303968008,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1665727206
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">by</span> <span class=\"c\">/-</span><span class=\"cm\"> fold this: tidy -/</span>\n  <span class=\"o\">[</span><span class=\"n\">output</span> <span class=\"n\">of</span> <span class=\"n\">tidy</span><span class=\"bp\">?</span> <span class=\"n\">goes</span> <span class=\"n\">here</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">output</span> <span class=\"n\">of</span> <span class=\"n\">tidy</span><span class=\"bp\">?</span> <span class=\"n\">goes</span> <span class=\"n\">here</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">output</span> <span class=\"n\">of</span> <span class=\"n\">tidy</span><span class=\"bp\">?</span> <span class=\"n\">goes</span> <span class=\"n\">here</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">output</span> <span class=\"n\">of</span> <span class=\"n\">tidy</span><span class=\"bp\">?</span> <span class=\"n\">goes</span> <span class=\"n\">here</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">output</span> <span class=\"n\">of</span> <span class=\"n\">tidy</span><span class=\"bp\">?</span> <span class=\"n\">goes</span> <span class=\"n\">here</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">output</span> <span class=\"n\">of</span> <span class=\"n\">tidy</span><span class=\"bp\">?</span> <span class=\"n\">goes</span> <span class=\"n\">here</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>should just render as</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">by</span> <span class=\"n\">tidy</span><span class=\"bp\">Â¿</span>\n</code></pre></div>",
        "id": 303968117,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1665727299
    },
    {
        "content": "<p>And then you should be able to click some <code>+</code>-symbol in the VScode gutter to unfold the proof, if you really need to drill in.</p>",
        "id": 303968214,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1665727377
    },
    {
        "content": "<p>I very much agree that <code>simp? [foo, bar]</code> should output something which makes a clear distinction between <code>foo</code>, <code>bar</code> and the lemma from the default simp set, and that we should have a lot more code folding in VSCode.</p>",
        "id": 303975601,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1665732184
    },
    {
        "content": "<p>I can't believe that so many serious people are subscribed to this stream! I thought I was the only one obsessive enough to be watching it :-)</p>",
        "id": 304007045,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1665745262
    },
    {
        "content": "<p>Maybe this conversation should be taking place elsewhere, now it's gone way beyond my pay grade and should probably be conserved?</p>",
        "id": 304007128,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1665745292
    },
    {
        "content": "<p>I can move to a new topic but not to another stream apparently...</p>",
        "id": 304031827,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1665754126
    },
    {
        "content": "<p>21 messages were moved here from <a class=\"stream-topic\" data-stream-id=\"113538\" href=\"/#narrow/stream/113538-CI/topic/build.20time.20bot\">#CI &gt; build time bot</a> by <span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span>.</p>",
        "id": 304273975,
        "sender_full_name": "Notification Bot",
        "timestamp": 1665902283
    },
    {
        "content": "<p>About <code>simp only</code> and mathlib speed improvement: A quick investigation of a few randomly selected <code>simp only</code> calls shows that many of them can be replaced by a <code>simp_rw</code> call, as long as you order the list of lemmas right. If we make this change wherever possible, it could improve </p>\n<ol>\n<li>Speed (since presumably it's better to handle simplifications one at a time rather than to look through all of the lemmas again to check that there are no further simplifications)</li>\n<li>Readability (since you can see the order in which the simplifications are being applied, and even step through the proof state after each of them.</li>\n<li>Code size (since <code>simp_rw</code> is two characters shorter than <code>simp only</code>)</li>\n</ol>\n<p>One could write a script to make this change by trying to extract <code>simp_only</code> lemmas into a preceding <code>simp_rw</code> one at a time and only. You could even guarantee not making anything worse by checking the profiler before and after and reverting changes that hurt performance.</p>",
        "id": 304586058,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1666052580
    },
    {
        "content": "<blockquote>\n<p>Speed (since presumably it's better to handle simplifications one at a time rather than to look through all of the lemmas again to check that there are no further simplifications)</p>\n</blockquote>\n<p>Actually I would expect the opposite. One of the more expensive tasks of <code>simp</code> is creating a customized simp set with a matcher which can efficiently handle all the subexpression matching. Changing the simp set all the time means you have to do several expression traversals, which regular <code>simp</code> doesn't have to do.</p>",
        "id": 304586252,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1666052699
    },
    {
        "content": "<p>I see, interesting.</p>",
        "id": 304586821,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1666053077
    },
    {
        "content": "<p>\\2. still feels like a strong argument</p>",
        "id": 304606240,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1666065707
    },
    {
        "content": "<p>incidentally, lean 4 <code>simp?</code> will automatically order the lemmas in the order they were used as rewrite rules</p>",
        "id": 304606403,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1666065820
    },
    {
        "content": "<p>There is a 4th point that I like <code>simp_rw</code> a lot more than <code>simp only</code>, and it's maintainability. If a <code>simp only [lots of lemmas]</code> tactic call breaks, I have no idea where to look for the culprit. If it is a <code>simp_rw [lots of lemmas]</code> tactic call, then you can find out which step breaks, and get a much better idea what the problem is.</p>",
        "id": 304620573,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1666076332
    },
    {
        "content": "<p>So... can we get a sense of what the speed impact would be? I still imagine that <code>simp_rw</code> will be a lot faster than a bare <code>simp</code>. But it would be good if we can get some actual data.</p>",
        "id": 304632750,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1666081871
    },
    {
        "content": "<p>I did a few more random samples on the grep of all <code>simp only</code>s last night. Mario was right, it does seem to be slightly slower to use <code>simp_rw</code>, but the change usually wasn't more than 10% of the runtime. Funnily enough, sometimes it got faster, but not necessarily because <code>simp_rw</code> was faster - a few of the <code>simp only</code> calls included unnecessary lemmas.</p>",
        "id": 304820278,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1666119211
    },
    {
        "content": "<p>I'll write a script to do this a bit more rigorously</p>",
        "id": 304822281,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1666119904
    },
    {
        "content": "<p>Ok I started <a href=\"https://github.com/leanprover-community/mathlib/pull/17062\">#17062</a>, still not complete and likely very buggy. Before I go further, is there any more convenient way in Python to get profiler data than calling <code>lean --make --profile</code> and parsing the output?</p>",
        "id": 305056422,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1666220883
    },
    {
        "content": "<p>Also, I was getting tripped up by some commas that didn't have spaces after them. Is there any reason I couldn't add a rule saying commas must be followed by whitespace or a newline to the linter?</p>",
        "id": 305056485,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1666220921
    },
    {
        "content": "<p><code>M âââR,Lâ N</code> is used by the pretty-printer but has a comma followed by no space</p>",
        "id": 305067211,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1666230072
    },
    {
        "content": "<p>Also, at the extreme end you don't want to ban commas of that form in docstrings or tactic error messages</p>",
        "id": 305067229,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1666230106
    },
    {
        "content": "<p>Consider <code>/-- We write lists with `,`s between items -/</code></p>",
        "id": 305067275,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1666230130
    },
    {
        "content": "<p>I wonder if a better (but way harder) way to measure this style is by inspecting the AST</p>",
        "id": 305067292,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1666230168
    },
    {
        "content": "<p>(to be clear, I'm in favor of linting this if we can do so without too many false positives)</p>",
        "id": 305067315,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1666230210
    },
    {
        "content": "<p>I think that would likely be better, yes. This also feels like another QoL improvement that might be better done after the port.</p>",
        "id": 305067372,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1666230271
    }
]