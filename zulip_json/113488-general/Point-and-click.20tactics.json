[
    {
        "content": "<p>By default, Lean's <code>rw</code> tactic unfolds all occurrences of a pattern, which can be a bit limiting in proofs that require targeted rewrites. Here is a demonstration of a point-and-click widget that allows users to select a sub-expression to generate a <code>rw</code> tactic call with a configuration targeting that location. The source code for the tactic is available here: <a href=\"https://github.com/Human-Oriented-ATP/lean-tactics/blob/main/MotivatedMoves/ForMathlib/Rewrite.lean\">https://github.com/Human-Oriented-ATP/lean-tactics/blob/main/MotivatedMoves/ForMathlib/Rewrite.lean</a>.</p>\n<p><a href=\"/user_uploads/3121/yy2hLP_DtZatzfgs7rBD4jb8/rw_demo.gif\">rw_demo.gif</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/yy2hLP_DtZatzfgs7rBD4jb8/rw_demo.gif\" title=\"rw_demo.gif\"><img src=\"/user_uploads/3121/yy2hLP_DtZatzfgs7rBD4jb8/rw_demo.gif\"></a></div><p>The folder also contains a point-and-click widget for definitional unfolding, where the location of the target is specified via patterns and occurrences.</p>\n<p><a href=\"/user_uploads/3121/OkzK2DH3KjDJxWoV0wyOokRX/unfold_demo.gif\">unfold_demo.gif</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/OkzK2DH3KjDJxWoV0wyOokRX/unfold_demo.gif\" title=\"unfold_demo.gif\"><img src=\"/user_uploads/3121/OkzK2DH3KjDJxWoV0wyOokRX/unfold_demo.gif\"></a></div><p>Future work might include targeted rewriting with library results using <span class=\"user-mention\" data-user-id=\"479299\">@Jovan Gerbscheid</span>'s <code>DiscrTree</code>s (a crude preview of which is shown below), as well as targeted function application.</p>\n<p><a href=\"/user_uploads/3121/7IakjWrS6y9C4ne93iRERq-8/lib_rw_demo.gif\">lib_rw_demo.gif</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/7IakjWrS6y9C4ne93iRERq-8/lib_rw_demo.gif\" title=\"lib_rw_demo.gif\"><img src=\"/user_uploads/3121/7IakjWrS6y9C4ne93iRERq-8/lib_rw_demo.gif\"></a></div><p>Would a PR of these tactics to <code>Std</code> or <code>Mathlib</code> be welcome?</p>",
        "id": 405360088,
        "sender_full_name": "Anand Rao Tadipatri",
        "timestamp": 1701436280
    },
    {
        "content": "<p>I would guess that Std is a good target for these</p>",
        "id": 405367482,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1701438544
    },
    {
        "content": "<p>This maybe raises that <code>occs</code>s should be part of the <code>at</code> clause? It feels like it only makes sense per-target, not globally</p>",
        "id": 405367698,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1701438607
    },
    {
        "content": "<p>Again I think it would be nice to unify this with the existing framework used in Mathlib for <code>conv?</code>, <code>congrm?</code> and the calc widget. I don't mind getting rid of my framework if yours is better, but I don't think we should have both in parallel unless they really have different use cases (which doesn't seem to be true).</p>",
        "id": 405368486,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1701438902
    },
    {
        "content": "<p>I agree -- I will modify the UI part of the code to use <code>mkSelectionPanelRPC</code>.</p>",
        "id": 405443197,
        "sender_full_name": "Anand Rao Tadipatri",
        "timestamp": 1701467406
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113488-general/topic/Point-and-click.20tactics/near/405367698\">said</a>:</p>\n<blockquote>\n<p>This maybe raises that <code>occs</code>s should be part of the <code>at</code> clause? It feels like it only makes sense per-target, not globally</p>\n</blockquote>\n<p>At the moment, the tactic is designed to target a single location, so it is usually a single argument for both <code>occs</code> and <code>at</code>, but I agree that it would be nice to target multiple locations simultaneously (and to couple the <code>occs</code> with the <code>at</code> as a way to allow that). Alternatively, when multiple locations involving several local hypotheses are selected, a sequence of tactics is pasted into the editor (one for each hypothesis involved).</p>\n<p>In the future, I would like to also have syntax for targeting values of <code>let</code> hypotheses and allowing users to select <em>all</em> occurrences (perhaps through a checkbox in the infoview).</p>",
        "id": 405445333,
        "sender_full_name": "Anand Rao Tadipatri",
        "timestamp": 1701468376
    },
    {
        "content": "<p>Can I have this in NNG I wonder?</p>",
        "id": 405446115,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1701468848
    },
    {
        "content": "<p>Patrick's concerns look reasonable; but it seems that the <code>unfold'</code> tactic  (which is new, right?) is orthogonal to them; could you PR the non-interactive version to Std?</p>",
        "id": 405446605,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1701469129
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"303675\">@Anand Rao Tadipatri</span>, in your first example (<code>5+6=6+5</code>) you end up inserting a tactic that is overkill: it has both <code>Nat.comm 5 6</code> (i.e. arguments provided) <strong>and</strong> an <code>occs</code> parameter.</p>\n<p>Either would suffice. Would it be possible to give more succinct output?</p>\n<p>A few things you could do:</p>\n<ul>\n<li>find the specialization, and then see if now rewrites in a single location (using <code>kabstract</code>)</li>\n<li>try out both the specialized rewrite, and the <code>occs</code> rewrite. If only one works, use that, otherwise use whichever is shorted textually?</li>\n</ul>",
        "id": 405455097,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1701474168
    },
    {
        "content": "<p>It would also be lovely if the infoview highlighted the possible subexpressions (which you could access via <code>kabstract</code>).</p>",
        "id": 405455138,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1701474213
    },
    {
        "content": "<p>But these feature requests are much less important than having a path to integrating this into Std + Mathlib.</p>",
        "id": 405455168,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1701474238
    },
    {
        "content": "<p>(This is really nice!)</p>",
        "id": 405455262,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1701474287
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113488-general/topic/Point-and-click.20tactics/near/405446115\">said</a>:</p>\n<blockquote>\n<p>Can I have this in NNG I wonder?</p>\n</blockquote>\n<p>I find that I'm unable to select sub-expressions by shift-clicking in the NNG (at least on my browser), but in principle it should be possible. (I suspect that <a href=\"https://github.com/leanprover-community/lean4game/blob/333c9498f1d368d430f3bcfbc83479707fc48b5e/client/src/components/infoview/goals.tsx#L193\">this part of the Lean4Game source code</a> controls the shift-click behaviour.)</p>",
        "id": 405515824,
        "sender_full_name": "Anand Rao Tadipatri",
        "timestamp": 1701508477
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> Thanks for the detailed feedback -- I would like to shorten the tactic call in the editor to something more readable as well. I realised that the specialisation is in fact necessary in certain situations, since <code>kabstract</code> instantiates meta-variables in the query during unification, which can affect sub-sequent matches. Here is an example that illustrates this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span> <span class=\"bp\">+</span> <span class=\"mi\">4</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">(</span><span class=\"n\">config</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">occs</span> <span class=\"o\">:=</span> <span class=\"bp\">.</span><span class=\"n\">pos</span> <span class=\"o\">[</span><span class=\"mi\">2</span><span class=\"o\">]</span> <span class=\"o\">})</span> <span class=\"o\">[</span><span class=\"n\">Nat.add_comm</span><span class=\"o\">]</span> <span class=\"c1\">-- error</span>\n  <span class=\"c1\">-- tactic 'rewrite' failed, did not find instance of the pattern in the target expression</span>\n  <span class=\"c1\">--   1 + 2</span>\n  <span class=\"c1\">-- 1 + 2 = 3 + 4</span>\n</code></pre></div>\n<p>The second occurrence of the pattern <code>?n + ?m</code> in the target is <code>3 + 4</code>, so one would expect the tactic call to rewrite at that location, but it instead throws an error since the first occurrence of the pattern (<code>1 + 2</code>) instantiates the meta-variables and prevents the second match from happening.</p>",
        "id": 405516626,
        "sender_full_name": "Anand Rao Tadipatri",
        "timestamp": 1701509256
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"303675\">@Anand Rao Tadipatri</span>, see my open Lean 4 PR trying to improve this behaviour: <a href=\"https://github.com/leanprover/lean4/pull/2539\">lean4#2539</a> :-)</p>",
        "id": 405517524,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1701510027
    },
    {
        "content": "<p>In that case, I agree that it is perhaps best to drop the specialisation and operate entirely using <code>occs</code> (or the other way, using <code>occs</code> sparingly). With the second approach, I'm only worried that this might add additional time to creating the rewrite tactic call that gets pasted into the editor, which can have a cumulative effect in a tactic like <code>rw?</code> which generates multiple <code>rw</code> calls. Could this instead be a tactic code action in the editor that deletes the config to <code>rw</code> when it is redundant?</p>",
        "id": 405517961,
        "sender_full_name": "Anand Rao Tadipatri",
        "timestamp": 1701510444
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/113488-general/topic/Point-and-click.20tactics/near/405455138\">said</a>:</p>\n<blockquote>\n<p>It would also be lovely if the infoview highlighted the possible subexpressions (which you could access via <code>kabstract</code>).</p>\n</blockquote>\n<p>Thank you for this suggestion, this is a feature that I would really like the tactic to have!</p>",
        "id": 405518041,
        "sender_full_name": "Anand Rao Tadipatri",
        "timestamp": 1701510511
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 405518210,
        "sender_full_name": "Anand Rao Tadipatri",
        "timestamp": 1701510676
    },
    {
        "content": "<p>I have opened a pull request <a href=\"https://github.com/leanprover/std4/pull/417\">std4#417</a> for the <code>unfold'</code> tactic, according to Eric's suggestion.</p>",
        "id": 405521951,
        "sender_full_name": "Anand Rao Tadipatri",
        "timestamp": 1701513284
    },
    {
        "content": "<p>I have been working on <span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span>'s suggestion of allowing each hypothesis to maintain a separate list of occurrences (the code is at <a href=\"https://github.com/leanprover/std4/pull/417\">std4#417</a>). The idiomatic Lean way of specifying targets is through syntax of the form <code>at h h' ... ⊢</code>, which I generalised to syntax of the form <code>at h ‹h' (occs := 1)› ‹h'' (occs := 1) in body› ⊢</code>, which allows referring to specific occurrences in the types of hypotheses or the bodies of local <code>let</code> declarations.</p>\n<p>I would appreciate feedback on this design choice. The syntax has one sore point remaining -- occurrences in the target cannot use the syntax <code>‹⊢ (occs := 1)›</code>, since then <code>⊢</code> gets confused for an identifier; my temporary solution is to use differently styled parentheses (<code>&lt;&gt;</code> instead of <code>‹›</code>) to refer to occurrences in the target (which I find unsatisfactory).</p>",
        "id": 406594350,
        "sender_full_name": "Anand Rao Tadipatri",
        "timestamp": 1701972058
    },
    {
        "content": "<p>Hmm, interesting. I would have thought that the more pressing thing was not to allow rewriting with occurrences at different hypotheses, but rather rewriting with occurrences using several lemmas.</p>",
        "id": 406606933,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1701977011
    },
    {
        "content": "<p>Both of these seem rather unnecessary: you can do these things already, just needing multiple <code>rw</code> statements. Unless there was some performance problem, I think this would just result in extra syntax to learn.</p>",
        "id": 406680366,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1702011496
    }
]