[
    {
        "content": "<p><a href=\"/user_uploads/3121/rn2QPchj9z3kf0jAdEfPkK2-/Screenshot-2023-11-07-at-7.48.42-PM.png\">Screenshot-2023-11-07-at-7.48.42-PM.png</a><br>\nWhat is the best way for me as a recreational lean user to read this in a textbook and convert it into lean and try to prove it in like under 20 seconds total? Anyone have a really efficient process to do this?</p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/rn2QPchj9z3kf0jAdEfPkK2-/Screenshot-2023-11-07-at-7.48.42-PM.png\" title=\"Screenshot-2023-11-07-at-7.48.42-PM.png\"><img src=\"/user_uploads/3121/rn2QPchj9z3kf0jAdEfPkK2-/Screenshot-2023-11-07-at-7.48.42-PM.png\"></a></div>",
        "id": 400864765,
        "sender_full_name": "Mason McBride",
        "timestamp": 1699415630
    },
    {
        "content": "<p>you would have difficulty solving such an exercise in 20 seconds on paper</p>",
        "id": 400864860,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1699415686
    },
    {
        "content": "<p>most of the work here would be in defining what the star and bang operators there are</p>",
        "id": 400864909,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1699415719
    },
    {
        "content": "<p>and writing down the theorems</p>",
        "id": 400864949,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1699415737
    },
    {
        "content": "<p>depending on what the definitions say the proof could be very easy (e.g. <code>rfl</code> or <code>by simp</code>) or unboundedly hard (probably not too hard or else it wouldn't be phrased as an exercise like this)</p>",
        "id": 400865253,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1699415870
    },
    {
        "content": "<ul>\n<li>and _* are just the image and preimage operation on a function shouldn't they be easily reachable in mathlib? and the only other operations are compostion and the identity</li>\n</ul>",
        "id": 400865263,
        "sender_full_name": "Mason McBride",
        "timestamp": 1699415879
    },
    {
        "content": "<p>in that case the easy solution is <code>by exact?</code> because this theorem already exists</p>",
        "id": 400865341,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1699415903
    },
    {
        "content": "<p>I'm asking if you know how to query mathlib for these properties in under 20 seconds to fully describe the exercise</p>",
        "id": 400865635,
        "sender_full_name": "Mason McBride",
        "timestamp": 1699416021
    },
    {
        "content": "<p><code>by exact?</code></p>",
        "id": 400866322,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1699416223
    },
    {
        "content": "<p>you write that and in less than 20 seconds it will suggest the relevant theorem from the library</p>",
        "id": 400866420,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1699416251
    },
    {
        "content": "<p>(assuming it exists, of course)</p>",
        "id": 400866471,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1699416287
    },
    {
        "content": "<p>Thank you, what is the syntax using mathlib to write the theorem statement the image of f^-1 is equal to the the inverse of the image of f?</p>",
        "id": 400866652,
        "sender_full_name": "Mason McBride",
        "timestamp": 1699416374
    },
    {
        "content": "<p>like what are you importing as a programmer? are you opening any namespaces?</p>",
        "id": 400866894,
        "sender_full_name": "Mason McBride",
        "timestamp": 1699416548
    },
    {
        "content": "<p>no namespaces needed</p>",
        "id": 400867033,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1699416632
    },
    {
        "content": "<p>here's the preimage statement:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">Z</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">Y</span> <span class=\"bp\">→</span> <span class=\"n\">Z</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">Z</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"bp\">∘</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"bp\">⁻¹'</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"bp\">⁻¹'</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"bp\">⁻¹'</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">exact</span><span class=\"bp\">?</span> <span class=\"c1\">-- Try this: exact rfl</span>\n</code></pre></div>",
        "id": 400867208,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1699416802
    },
    {
        "content": "<p>if you wanted to write it without the set <code>s</code> like in the exercise you would need to use it without the notation, referring to its name <code>Set.preimage</code> or opening <code>Set</code> first:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Set</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">Z</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">Y</span> <span class=\"bp\">→</span> <span class=\"n\">Z</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">preimage</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"bp\">∘</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">preimage</span> <span class=\"n\">f</span> <span class=\"bp\">∘</span> <span class=\"n\">preimage</span> <span class=\"n\">g</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">exact</span><span class=\"bp\">?</span> <span class=\"c1\">-- Try this: exact rfl</span>\n</code></pre></div>",
        "id": 400867393,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1699416913
    },
    {
        "content": "<p>for forward image it's not just <code>rfl</code>, but there is still a theorem for it:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">Z</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">Y</span> <span class=\"bp\">→</span> <span class=\"n\">Z</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"bp\">∘</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"bp\">''</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"bp\">''</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">''</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">exact</span><span class=\"bp\">?</span> <span class=\"c1\">-- Try this: exact image_comp g f s</span>\n</code></pre></div>\n<p>unfortunately this one doesn't come in unapplied form in the library so if you wanted that you would have to prove it yourself</p>",
        "id": 400867614,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1699417036
    },
    {
        "content": "<p>Awesome</p>",
        "id": 400867919,
        "sender_full_name": "Mason McBride",
        "timestamp": 1699417248
    },
    {
        "content": "<p>For future questions: posting a screenshot of a lemma without providing definitions is not very helpful. Also, you can do simple stuff in 20 seconds but it takes much more time to learn how to do it in 20 seconds.</p>",
        "id": 400868760,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1699417919
    },
    {
        "content": "<p>yes, learning how to write these statements is going to be by far the slowest part of the work</p>",
        "id": 400868926,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1699418083
    },
    {
        "content": "<p>I can do it because I know the library well but it will take you quite a bit more than 20 seconds if you aren't familiar with the library, and <code>by exact?</code> only helps with the proofs, not the statements</p>",
        "id": 400868982,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1699418154
    },
    {
        "content": "<p>Potentially <a href=\"#narrow/stream/113486-announce/topic/Moogle/near/400837692\">moogle</a> could be helpful to this end</p>",
        "id": 400869063,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1699418231
    },
    {
        "content": "<p>but how does exact rfl help me either? what lemmas are applying?</p>",
        "id": 400869196,
        "sender_full_name": "Mason McBride",
        "timestamp": 1699418350
    },
    {
        "content": "<p>It's applying the <code>rfl</code> theorem</p>",
        "id": 400869345,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1699418457
    },
    {
        "content": "<p>which is another way to say that lean believes both sides to be equal by definition so reflexivity is a proof of the goal</p>",
        "id": 400869371,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1699418479
    },
    {
        "content": "<p>this is because if you unfold the definition of composition and preimage you realize both expressions are denoting the set <code>{x | g (f x) ∈ s}</code></p>",
        "id": 400869561,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1699418641
    },
    {
        "content": "<p>there is actually a theorem <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Set.preimage_comp#doc\">docs#Set.preimage_comp</a> which asserts this, but <code>exact?</code> optimistically tries <code>rfl</code> first because it proves quite a lot of things that you wouldn't expect at first</p>",
        "id": 400869666,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1699418724
    },
    {
        "content": "<p>preimage_comp uses rfl as proof haha</p>",
        "id": 400873611,
        "sender_full_name": "Mason McBride",
        "timestamp": 1699421425
    }
]