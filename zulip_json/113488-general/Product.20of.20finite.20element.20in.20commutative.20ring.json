[
    {
        "content": "<p>I've got a finite set S</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">S</span><span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span>\n<span class=\"n\">f</span><span class=\"o\">:</span> <span class=\"n\">Finite</span> <span class=\"bp\">↑</span><span class=\"n\">S</span>\n</code></pre></div>\n<p>and a commutative ring R with one of its ideal I</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">R</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span>\n<span class=\"n\">inst</span><span class=\"bp\">✝</span><span class=\"o\">:</span> <span class=\"n\">CommRing</span> <span class=\"n\">R</span>\n<span class=\"n\">I</span><span class=\"o\">:</span> <span class=\"n\">Ideal</span> <span class=\"n\">R</span>\n</code></pre></div>\n<p>Furthermore, assume that for each element in S, there exists some element in I that satisfy some property (called P)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"bp\">∈</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">r</span> <span class=\"bp\">∈</span> <span class=\"n\">I</span><span class=\"o\">,</span>  <span class=\"n\">P</span> <span class=\"n\">r</span>\n</code></pre></div>\n<p>I want to pick an arbitrary element (r i∈I) for each i∈S, and compute their product (which is well-defined since the set S is finite, and the result does not depend on the order since the ring is commutative).<br>\nHow should I achieve this?</p>",
        "id": 379410450,
        "sender_full_name": "UHU",
        "timestamp": 1690533623
    },
    {
        "content": "<p>Does <code>choose r hr pr using h</code> help?</p>",
        "id": 379417620,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1690534983
    },
    {
        "content": "<p>You should be able to do <code>have := Fintype.ofFinite S</code> and then you get <code>S.toFinset</code>, which might be a little annoying to work with since it's a <code>Finset α</code> and your condition has the dependence on being an element of <code>S</code>, and <code>(Finset.univ : Finset S)</code>, which gives you elements of <code>S</code> and might be easier to work with. Then there's <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Finset.prod#doc\">docs#Finset.prod</a></p>",
        "id": 379480274,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1690546187
    }
]