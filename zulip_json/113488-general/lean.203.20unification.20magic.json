[
    {
        "content": "<p>I'm porting a file and a proof <code>is_sheaf_for.is_amalgamation _ _</code> which works in Lean 3, is giving me errors on the underscores in lean 4. So I figured that if Lean 3 is solving the underscores with unification then they can't be too hard to solve! But <code>assumption</code>, <code>library_search</code>, and <code>apply_instance</code> don't solve them. What am I missing? Here's a mwe:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">category_theory.sites.cover_lifting</span>\n\n<span class=\"c1\">-- set-up</span>\n<span class=\"kd\">universes</span> <span class=\"n\">w</span> <span class=\"n\">v</span> <span class=\"n\">v‚ÇÅ</span> <span class=\"n\">v‚ÇÇ</span> <span class=\"n\">v‚ÇÉ</span> <span class=\"n\">u</span> <span class=\"n\">u‚ÇÅ</span> <span class=\"n\">u‚ÇÇ</span> <span class=\"n\">u‚ÇÉ</span>\n<span class=\"kd\">noncomputable theory</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">category_theory</span>\n<span class=\"kn\">open</span> <span class=\"n\">opposite</span>\n<span class=\"kn\">open</span> <span class=\"n\">category_theory.presieve.family_of_elements</span>\n<span class=\"kn\">open</span> <span class=\"n\">category_theory.presieve</span>\n<span class=\"kn\">open</span> <span class=\"n\">category_theory.limits</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">category_theory</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"n\">D</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">category.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">category.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">D</span><span class=\"o\">]</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">w</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">category.</span><span class=\"o\">{</span><span class=\"n\">max</span> <span class=\"n\">u</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_limits</span> <span class=\"n\">A</span><span class=\"o\">]</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">J</span> <span class=\"o\">:</span> <span class=\"n\">grothendieck_topology</span> <span class=\"n\">C</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"n\">grothendieck_topology</span> <span class=\"n\">D</span><span class=\"o\">}</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">Ran_is_sheaf_of_cover_lifting</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"bp\">‚•§</span> <span class=\"n\">D</span><span class=\"o\">}</span>  <span class=\"o\">(</span><span class=\"n\">hu</span> <span class=\"o\">:</span> <span class=\"n\">cover_lifting</span> <span class=\"n\">J</span> <span class=\"n\">K</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">‚Ñ±</span> <span class=\"o\">:</span> <span class=\"n\">Sheaf</span> <span class=\"n\">J</span> <span class=\"n\">A</span><span class=\"o\">)</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"n\">D</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">sieve</span> <span class=\"n\">U</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hS</span> <span class=\"o\">:</span> <span class=\"n\">S</span> <span class=\"bp\">‚àà</span> <span class=\"n\">K</span> <span class=\"n\">U</span><span class=\"o\">)</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">S.arrows.family_of_elements</span> <span class=\"o\">((</span><span class=\"n\">Ran</span> <span class=\"n\">G.op</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">obj</span> <span class=\"n\">‚Ñ±.val</span> <span class=\"bp\">‚ãô</span> <span class=\"n\">coyoneda.obj</span> <span class=\"o\">(</span><span class=\"n\">op</span> <span class=\"n\">X</span><span class=\"o\">))}</span>\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">x.compatible</span><span class=\"o\">)</span>\n\n<span class=\"c1\">-- the declaration</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">get_section_is_amalgamation'</span> <span class=\"o\">(</span><span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"n\">structured_arrow</span> <span class=\"o\">(</span><span class=\"n\">op</span> <span class=\"n\">U</span><span class=\"o\">)</span> <span class=\"n\">G.op</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">pulledback_family</span> <span class=\"n\">‚Ñ±</span> <span class=\"n\">S</span> <span class=\"n\">x</span> <span class=\"n\">Y</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">is_amalgamation</span> <span class=\"o\">(</span><span class=\"n\">get_section</span> <span class=\"n\">hu</span> <span class=\"n\">‚Ñ±</span> <span class=\"n\">hS</span> <span class=\"n\">hx</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">is_sheaf_for.is_amalgamation</span> <span class=\"n\">_</span> <span class=\"n\">_</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">Ran_is_sheaf_of_cover_lifting</span>\n<span class=\"kd\">end</span> <span class=\"n\">category_theory</span>\n</code></pre></div>\n<p>The challenge is to explicitly fill in the two underscores. If it helps, their types are</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">is_sheaf_for</span> <span class=\"o\">((</span><span class=\"mi\">ùü≠</span> <span class=\"o\">(</span><span class=\"n\">C</span><span class=\"bp\">·µí·µñ</span> <span class=\"bp\">‚•§</span> <span class=\"n\">A</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">obj</span> <span class=\"n\">‚Ñ±.val</span> <span class=\"bp\">‚ãô</span> <span class=\"n\">coyoneda.obj</span> <span class=\"o\">(</span><span class=\"n\">op</span> <span class=\"n\">X</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">functor_pullback</span> <span class=\"n\">G</span> <span class=\"bp\">‚áë</span><span class=\"o\">(</span><span class=\"n\">sieve.pullback</span> <span class=\"n\">Y.hom.unop</span> <span class=\"n\">S</span><span class=\"o\">))</span>\n</code></pre></div>\n<p>and</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">‚ä¢</span> <span class=\"o\">(</span><span class=\"n\">pulledback_family</span> <span class=\"n\">‚Ñ±</span> <span class=\"n\">S</span> <span class=\"n\">x</span> <span class=\"n\">Y</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">compatible</span>\n</code></pre></div>",
        "id": 357548282,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1683803650
    },
    {
        "content": "<p>I assume you've already tried using <code>(_)</code> to force Lean 4 to find the instances via unification?</p>",
        "id": 357552090,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1683804411
    },
    {
        "content": "<p><code>#print get_section_is_amalgamation'</code></p>",
        "id": 357552487,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1683804502
    },
    {
        "content": "<p>It gives you a usable term, but with auto-generated names that won't be the same in Lean 4.</p>",
        "id": 357552593,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1683804535
    },
    {
        "content": "<p>But possibly you can just find their names using <code>whatsnew in</code> on the definition of <code>getSection</code>.</p>",
        "id": 357552734,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1683804570
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Ya√´l Dillies</span> <a href=\"#narrow/stream/113488-general/topic/lean.203.20unification.20magic/near/357552090\">said</a>:</p>\n<blockquote>\n<p>I assume you've already tried using <code>(_)</code> to force Lean 4 to find the instances via unification?</p>\n</blockquote>\n<p>nice idea, but doesn't work.</p>",
        "id": 357553237,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1683804706
    },
    {
        "content": "<p>Hmm. In Lean 3, <code>#print prefix category_theory.Ran_is_sheaf_of_cover_lifting.get_section</code> just after the def of <code>get_section</code> gives me <code>category_theory.Ran_is_sheaf_of_cover_lifting.get_section._proof_n</code> for 1&lt;=n&lt;=6, and in Lean 4 <code>whatsnew in</code> just before the def of <code>getSection</code> gives me <code>CategoryTheory.RanIsSheafOfCoverLifting.getSection.proof_n</code> for a meagre 1 &lt;= n &lt;= 2, so we're being short changed by Lean 4 here. The declaration in Lean 3 is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">get_section</span> <span class=\"o\">(</span><span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"n\">structured_arrow</span> <span class=\"o\">(</span><span class=\"n\">op</span> <span class=\"n\">U</span><span class=\"o\">)</span> <span class=\"n\">G.op</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">‚ü∂</span> <span class=\"n\">‚Ñ±.val.obj</span> <span class=\"n\">Y.right</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">let</span> <span class=\"n\">hom_sh</span> <span class=\"o\">:=</span> <span class=\"n\">whisker_right</span> <span class=\"o\">((</span><span class=\"n\">Ran.adjunction</span> <span class=\"n\">A</span> <span class=\"n\">G.op</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">counit.app</span> <span class=\"n\">‚Ñ±.val</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">coyoneda.obj</span> <span class=\"o\">(</span><span class=\"n\">op</span> <span class=\"n\">X</span><span class=\"o\">)),</span>\n  <span class=\"k\">have</span> <span class=\"n\">S'</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">K.pullback_stable</span> <span class=\"n\">Y.hom.unop</span> <span class=\"n\">hS</span><span class=\"o\">),</span>\n  <span class=\"k\">have</span> <span class=\"n\">hs'</span> <span class=\"o\">:=</span> <span class=\"o\">((</span><span class=\"n\">hx.pullback</span> <span class=\"n\">Y.3.unop</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">functor_pullback</span> <span class=\"n\">G</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">comp_presheaf_map</span> <span class=\"n\">hom_sh</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">‚Ñ±.2</span> <span class=\"n\">X</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">hu.cover_lift</span> <span class=\"n\">S'</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">amalgamate</span> <span class=\"n\">_</span> <span class=\"n\">hs'</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>and it seems to me that the lets and haves are being turned into hidden proofs in the namespace in lean 3 but not lean 4. I've filled in one of the holes by pasting the definition of <code>hs'</code> and <code>hom_sh</code> into the hole.</p>",
        "id": 357558270,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1683805780
    },
    {
        "content": "<p>ha ha no it seems like Lean 3 is in fact just over-excited:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">category_theory.Ran_is_sheaf_of_cover_lifting.get_section._proof_1</span> <span class=\"bp\">=</span>\n  <span class=\"bp\">@</span><span class=\"n\">category_theory.Ran_is_sheaf_of_cover_lifting.get_section._proof_2</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">category_theory.Ran_is_sheaf_of_cover_lifting.get_section._proof_1</span> <span class=\"bp\">=</span>\n  <span class=\"bp\">@</span><span class=\"n\">category_theory.Ran_is_sheaf_of_cover_lifting.get_section._proof_3</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">category_theory.Ran_is_sheaf_of_cover_lifting.get_section._proof_1</span> <span class=\"bp\">=</span>\n  <span class=\"bp\">@</span><span class=\"n\">category_theory.Ran_is_sheaf_of_cover_lifting.get_section._proof_4</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 357559782,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1683806112
    },
    {
        "content": "<p>Indeed, the two holes can be filled with <code>‚Ñ±.2 X _ (hu.cover_lift S')</code> and <code>hs'</code> if the appropriate definitions are in context (i.e. copy and pasting the contents of <code>def get_section</code> and replacing <code>amalgamate</code> by <code>is_amalgamation</code> in the last line is a valid proof of <code>get_section_is_amalgamation</code>)</p>",
        "id": 357563270,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1683806880
    },
    {
        "content": "<p>Thanks! We've got it working locally now. The remaining question is why lean 4 can't solve the goals via unification.</p>",
        "id": 357566236,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1683807529
    },
    {
        "content": "<p>It can solve them, it you replace the <code>let</code> and <code>have</code>s in <code>amalgamate</code> by <code>letI</code> and <code>haveI</code>s</p>",
        "id": 357612030,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1683816466
    },
    {
        "content": "<p>Curiously, if you print the Lean 3 term for <code>amalgamate</code>, you can see the <code>have</code>s are inlined but the <code>let</code> is not, and yet unification does not care.</p>",
        "id": 357613134,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1683816659
    },
    {
        "content": "<p>Should I inline the let and haves in the declaration in Lean 4 then? I have no idea about this kind of internal representation stuff.</p>",
        "id": 357620401,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1683817952
    },
    {
        "content": "<p>This is partly a mathport translation issue; <em>tactic</em><code>have</code> in Lean3 is Lean4's <code>haveI</code>, but mathport translates it to lean4's <code>have</code> which is Lean3's <em>term</em> <code>have</code>.</p>",
        "id": 357625650,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1683818962
    }
]