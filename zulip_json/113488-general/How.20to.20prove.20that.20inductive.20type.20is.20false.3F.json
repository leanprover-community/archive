[
    {
        "content": "<p>How can I prove the following?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">mytype</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">mytype_one</span> <span class=\"o\">:</span> <span class=\"n\">mytype</span> <span class=\"mi\">1</span>\n<span class=\"bp\">|</span> <span class=\"n\">mytype_succ</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">mytype</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">mytype</span> <span class=\"n\">n.succ</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">mytype</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 342116629,
        "sender_full_name": "Mario Weitzer",
        "timestamp": 1678899661
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">mytype</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">mytype_one</span> <span class=\"o\">:</span> <span class=\"n\">mytype</span> <span class=\"mi\">1</span>\n<span class=\"bp\">|</span> <span class=\"n\">mytype_succ</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">mytype</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">mytype</span> <span class=\"n\">n.succ</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">mytype</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">.</span>\n</code></pre></div>",
        "id": 342117016,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1678899766
    },
    {
        "content": "<p>Hmm, that doesn‘t work for me. I should probably mention that I am using Lean 3.</p>",
        "id": 342118094,
        "sender_full_name": "Mario Weitzer",
        "timestamp": 1678900016
    },
    {
        "content": "<p>it should work. Here's the code in the lean3 web editor: <a href=\"https://leanprover-community.github.io/lean-web-editor/#code=inductive%20mytype%20%3A%20%E2%84%95%20%E2%86%92%20Prop%0A%7C%20mytype_one%20%3A%20mytype%201%0A%7C%20mytype_succ%20%3A%20%E2%88%80%20n%2C%20mytype%20n%20%E2%86%92%20mytype%20n.succ%0A%0Aexample%20%3A%20%C2%AC(mytype%200)%20.%0A\">https://leanprover-community.github.io/lean-web-editor/#code=inductive%20mytype%20%3A%20%E2%84%95%20%E2%86%92%20Prop%0A%7C%20mytype_one%20%3A%20mytype%201%0A%7C%20mytype_succ%20%3A%20%E2%88%80%20n%2C%20mytype%20n%20%E2%86%92%20mytype%20n.succ%0A%0Aexample%20%3A%20%C2%AC(mytype%200)%20.%0A</a></p>",
        "id": 342118428,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1678900086
    },
    {
        "content": "<p>Oh wait, sorry. It works, but I had to remove the :=<br>\nBut what does this even mean?</p>",
        "id": 342118466,
        "sender_full_name": "Mario Weitzer",
        "timestamp": 1678900096
    },
    {
        "content": "<p>This is an unreachable case of an inductive type, and so lean knows it's impossible all by itself.</p>",
        "id": 342119074,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1678900248
    },
    {
        "content": "<p>if you want a more verbose variant, you could do something like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">mytype</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">cases</span> <span class=\"n\">h</span>\n</code></pre></div>",
        "id": 342119251,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1678900290
    },
    {
        "content": "<p>I see. The solution being “.” makes this not only the shortest but also the lowest proof, I guess. I made it a theorem and “#print”ed it and as I suspected the solution involves no_confusion but I just couldn’t figure it out myself. Also, library_search couldn’t solve it. Thank you very much!</p>",
        "id": 342120291,
        "sender_full_name": "Mario Weitzer",
        "timestamp": 1678900569
    },
    {
        "content": "<p><code>library_search</code> looks for theorems in the library which will solve the goal, and given that you just defined <code>mytype</code> and didn't prove any theorems about it, it's unsurprising that <code>library_search</code> doesn't work.</p>",
        "id": 342120976,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1678900755
    }
]