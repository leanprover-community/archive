[
    {
        "content": "<p>(moved from <a href=\"#narrow/stream/113488-general/topic/class.20inductive/near/357876687\">https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/class.20inductive/near/357876687</a>)</p>\n<p>Nice, that's better.</p>\n<p>For inductive types, I wonder if it would be easier to read if it looked like this, with the docstrings below the constructors?</p>\n<p><a href=\"/user_uploads/3121/XN9oKIb2vaa-uKFovddcj8Zw/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/XN9oKIb2vaa-uKFovddcj8Zw/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/XN9oKIb2vaa-uKFovddcj8Zw/image.png\"></a></div><p>That would match how for normal top-level declarations the docstring is shown after the type.</p>",
        "id": 357811206,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1683884512
    },
    {
        "content": "<p>Hm, I designed it so that it looks like the code that was written since that is basically the entire theme of doc-gen. So I think this would in fact be more confusing than helpful since it is not the syntax that the actual thing uses.</p>",
        "id": 357813161,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1683884975
    },
    {
        "content": "<p>Well normal docstrings are written before the declaration, but appear in the docs as after</p>",
        "id": 357814937,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1683885383
    },
    {
        "content": "<p>The way these are laid out I find to be difficult to read:</p>\n<p><a href=\"/user_uploads/3121/LNmmORmjC7lAZE3Wh7qw1C4c/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/LNmmORmjC7lAZE3Wh7qw1C4c/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/LNmmORmjC7lAZE3Wh7qw1C4c/image.png\"></a></div><p><a href=\"/user_uploads/3121/nbMxHFGSE_X_sMwujaYcqohL/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/nbMxHFGSE_X_sMwujaYcqohL/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/nbMxHFGSE_X_sMwujaYcqohL/image.png\"></a></div><p>Having the <code>|</code> being where it isn't correct.</p>",
        "id": 357850142,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1683893577
    },
    {
        "content": "<p>I think there's a case to be made that comments aren't syntax (they're a lexical feature, but they're not parsed), and docgen isn't representing all the lexical features of the comments anyway (where are the <code>/--</code> and <code>-/</code>?), so it's fair to rearrange them.</p>",
        "id": 357850481,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1683893671
    },
    {
        "content": "<p>Consider also consistency with how IDEs tend to display docstrings:</p>\n<p><a href=\"/user_uploads/3121/p8PsxhoReIJPTmIw-bo65_l-/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/p8PsxhoReIJPTmIw-bo65_l-/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/p8PsxhoReIJPTmIw-bo65_l-/image.png\"></a></div>",
        "id": 357850578,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1683893701
    },
    {
        "content": "<p>I think having docstrings come before declarations in the source is a concession anyway. They're less useful after since the source contains the body of the definition so you might have to scroll down to see it, and I'm not sure there's a reasonable way for them to be inside declarations Python-style. Ideally you'd know what's being documented if you come across a long docstring.</p>",
        "id": 357851210,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1683893848
    },
    {
        "content": "<p>It's perhaps also worth noting that <code>| isFalse {p : Prop} →¬p →Decidable p</code> already fails at representing the source,  as <code>p</code> is an index for the family not a constructor argument (I might have the wrong names here)</p>",
        "id": 357854528,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1683894562
    },
    {
        "content": "<p>It's a parameter for the family. I wonder if it'd be reasonable to have docgen skip the parameters for constructors and re-use the parameter names from the inductive type itself?</p>",
        "id": 357855272,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1683894729
    },
    {
        "content": "<p>Having the full type, especially WRT argument explicitness (as we do now) is arguably more useful as a caller; but maybe there's a compromise here somewhere</p>",
        "id": 357868340,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1683897647
    },
    {
        "content": "<p>Maybe constructors could display using declaration signature style, and maybe it could also gray out parameters by virtue of them being implicit arguments.</p>\n<p>So like this, with <code>{p : Prop}</code> gray</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">|</span> <span class=\"n\">isFalse</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Decidable</span> <span class=\"n\">p</span>\n</code></pre></div>",
        "id": 357872301,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1683898376
    },
    {
        "content": "<p>In mathlib3 the docs already gray out implicit parameters</p>",
        "id": 357875813,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1683899119
    },
    {
        "content": "<p>So you'd need a different discriminator here</p>",
        "id": 357875880,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1683899134
    },
    {
        "content": "<p>(also, someone who is not on mobile should split this thread)</p>",
        "id": 357876122,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1683899176
    },
    {
        "content": "<p>14 messages were moved here from <a class=\"stream-topic\" data-stream-id=\"113488\" href=\"/#narrow/stream/113488-general/topic/class.20inductive\">#general &gt; class inductive</a> by <span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span>.</p>",
        "id": 357876686,
        "sender_full_name": "Notification Bot",
        "timestamp": 1683899289
    },
    {
        "content": "<p>Yeah, that's what I mean, just rely on the fact that implicit arguments are grayed out. I'm not sure if you really need to know which arguments are the inductive parameters</p>",
        "id": 357877314,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1683899429
    },
    {
        "content": "<p>You need to know it when writing <code>induction</code> tactic cases</p>",
        "id": 357881204,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1683900125
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113488-general/topic/inductive.20types.20in.20documentation/near/357854528\">said</a>:</p>\n<blockquote>\n<p>It's perhaps also worth noting that <code>| isFalse {p : Prop} →¬p →Decidable p</code> already fails at representing the source,  as <code>p</code> is an index for the family not a constructor argument (I might have the wrong names here)</p>\n</blockquote>\n<p>This is regardless the correct type of the constructor, it needs to get this as an implicit argument. I dont know whether it is possible to write an analysis that just skips this?</p>",
        "id": 357895009,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1683902720
    },
    {
        "content": "<p>There are a number of places you can get the number of parameters, <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.ConstructorVal.numParams#doc\">docs4#Lean.ConstructorVal.numParams</a> for one.</p>",
        "id": 357898451,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1683903315
    },
    {
        "content": "<p>You can use <code>Lean.Meta.forallBoundedTelescope</code> on the constructor's type using the number of parameters before you pretty print</p>",
        "id": 357899127,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1683903413
    },
    {
        "content": "<p>I suppose one way to represent this is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">|</span> <span class=\"n\">isFalse</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">Decidable</span> <span class=\"n\">p</span>\n</code></pre></div>\n<p>with the parameters before the <code>:</code>. That way you see the correct type for the constructor, and you also get a bit more information about which are the parameters.</p>",
        "id": 357900899,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1683903706
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/113488-general/topic/inductive.20types.20in.20documentation/near/357850481\">said</a>:</p>\n<blockquote>\n<p>I think there's a case to be made that comments aren't syntax (they're a lexical feature, but they're not parsed)</p>\n</blockquote>\n<p>Dropped in here from Kyle's recent reference to this thread. I thought it might be worth noting that in Lean, docstring comments are parsed with a standard parser that produces a <code>Syntax</code> node just like any other node in the grammar.  Thus, they can be analyzed and reproduced like normal syntax and unlike normal comments. On the other hand, the comment body does use a raw parser, so it is still a bit special.</p>",
        "id": 369297428,
        "sender_full_name": "Mac Malone",
        "timestamp": 1687662205
    }
]