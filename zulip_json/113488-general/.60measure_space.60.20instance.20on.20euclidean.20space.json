[
    {
        "content": "<p>Which of these is the right way to measure the volume of an object in euclidean space?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">measure_theory.constructions.pi</span>\n<span class=\"kn\">import</span> <span class=\"n\">measure_theory.measure.lebesgue</span>\n<span class=\"kn\">import</span> <span class=\"n\">analysis.inner_product_space.pi_L2</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">ι</span><span class=\"o\">]</span>\n\n<span class=\"c\">/-</span><span class=\"cm\">! 1) just copy the pi measure -/</span>\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">measure_theory.measure_space</span> <span class=\"o\">(</span><span class=\"n\">euclidean_space</span> <span class=\"n\">ℝ</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">measure_theory.measure_space.pi</span>\n\n<span class=\"c\">/-</span><span class=\"cm\">! 2) put these instances in place so that it can be found automatically -/</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">measurable_space</span> <span class=\"o\">(</span><span class=\"n\">euclidean_space</span> <span class=\"n\">ℝ</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">measurable_space.pi</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">borel_space</span> <span class=\"o\">(</span><span class=\"n\">euclidean_space</span> <span class=\"n\">ℝ</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">pi.borel_space</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">bar</span> <span class=\"o\">:</span> <span class=\"n\">measure_theory.measure_space</span> <span class=\"o\">(</span><span class=\"n\">euclidean_space</span> <span class=\"n\">ℝ</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">apply_instance</span>\n</code></pre></div>\n<p>Unfortunately after this setup</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">foo</span> <span class=\"n\">ι</span> <span class=\"bp\">=</span> <span class=\"n\">bar</span> <span class=\"n\">ι</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span> <span class=\"c1\">-- fails :(</span>\n</code></pre></div>\n<p>so these two approaches can't co-exist</p>",
        "id": 350830511,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1681835249
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"214703\">@Yury G. Kudryashov</span> seems to have have advocated for approach 1 <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Measurability.20of.20euclidean.20space/near/259024532\">here</a></p>",
        "id": 350833599,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1681835934
    },
    {
        "content": "<p>Is <a href=\"https://leanprover-community.github.io/mathlib_docs/find/measure_space_of_inner_product_space\">docs#measure_space_of_inner_product_space</a> a bad instance (in that it forms a diamond)?</p>",
        "id": 350834007,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1681836029
    },
    {
        "content": "<p>The linked message talks about <code>measurable_space</code> instance, not about <code>measure_space</code> instance. I think that <span class=\"user-mention\" data-user-id=\"110050\">@Sebastien Gouezel</span> introduced <a href=\"https://leanprover-community.github.io/mathlib_docs/find/measure_space_of_inner_product_space\">docs#measure_space_of_inner_product_space</a>. BTW, do we already have a diamond for <code>measure_space complex</code>?</p>",
        "id": 350844325,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1681838740
    },
    {
        "content": "<blockquote>\n<p>BTW, do we already have a diamond for <code>measure_space complex</code>?</p>\n</blockquote>\n<p>Yes,</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">measure_theory.measure.complex_lebesgue</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">complex.measure_space</span> <span class=\"bp\">=</span> <span class=\"n\">measure_space_of_inner_product_space</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span> <span class=\"c1\">-- fails</span>\n</code></pre></div>\n<p>both are registered as instances</p>",
        "id": 350846952,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1681839466
    },
    {
        "content": "<p>I think <code>measure_space_of_inner_product_space</code> should not be a global instance...</p>",
        "id": 350857510,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1681842498
    },
    {
        "content": "<p>Both 1 and 2 above are bad: the goal of <code>euclidean_space</code> is precisely to distinguish it from the product type, to be able to put instances on it which are not the <code>pi</code> ones. The measure should definitely be constructed from <a href=\"https://leanprover-community.github.io/mathlib_docs/find/measure_space_of_inner_product_space\">docs#measure_space_of_inner_product_space</a>, but the measurable space and borel space instance should rather come from the topology itself (if you need it inside a proof, you should use <code>borelize</code>).</p>",
        "id": 350866019,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1681844990
    },
    {
        "content": "<p><code>complex.measure_space</code> is a remnant of old times, before we had constructed a canonical measure on inner product spaces, and should definitely be removed to avoid the diamond.</p>",
        "id": 350866580,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1681845141
    },
    {
        "content": "<p>I really think <code>measure_space_of_inner_product_space</code> should be a global instance: on an inner product space, you have a canonical measure, and it should be easily available. Note that, if you just start from an inner product space, it won't have this measure space instance. But if you add the <code>[measurable_space E] [borel_space E]</code> instances, then the measure becomes available for you. And you can make it available in proofs just with <code>borelize E</code> if you don't have these instances. I can't see the drawbacks of this design, while I can clearly see the advantages (for instance when defining the Fourier transform on an inner product space, having the canonical measure is very helpful).</p>",
        "id": 350867114,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1681845340
    },
    {
        "content": "<blockquote>\n<p>but the measurable space and borel space instance should rather come from the topology itself</p>\n</blockquote>\n<p>Isn't the topology on <code>pi_Lp</code> (aka <code>euclidean_space</code>) the same as the one on pi? What's the danger in copying across the <code>measurable_space</code> and <code>borel_space</code> instances if so?</p>",
        "id": 350867287,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1681845399
    },
    {
        "content": "<p>I don't think there is a danger here, indeed. But I think it's wrong to think of <code>euclidean_space ℝ ι</code> as a product space -- and in fact most of the time it's probably a bad idea to express something explicitly for <code>euclidean_space ℝ ι</code> instead of using a general finite-dimensional inner product space. But maybe it's an <a href=\"https://en.wikipedia.org/wiki/XY_problem\">#xy</a> problem.</p>",
        "id": 350867774,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1681845573
    },
    {
        "content": "<blockquote>\n<p>But I think it's wrong to think of <code>euclidean_space ℝ ι</code> as a product space</p>\n</blockquote>\n<p>To some extent I agree; but copying across \"safe\" instances such as the algebraic structure and topology is something we already do, so I wanted to check which side of the \"<code>pi</code>-like\" line these two typeclasses were on</p>",
        "id": 350868047,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1681845665
    },
    {
        "content": "<p>I'm pretty sure that <code>measure_space_of_inner_product_space</code> is going to give us a diamond problem eventually, because it breaks the \"don't construct data from data\" rule; what's the measure on <code>ulift complex</code>? Is it just the measure on complex passed through <code>equiv.ulift</code>? Or is it the measure derived from <code>inner</code> passed through <code>equiv.ulift</code>? They're certainly not defeq, because everything goes through a <code>classical.some</code>.</p>",
        "id": 350868566,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1681845835
    },
    {
        "content": "<p>(we don't seem to have either <code>ulift</code> instance right now, but they seem pretty uncontroversial)</p>",
        "id": 350868759,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1681845910
    },
    {
        "content": "<p>Definitely the measure derived from inner passed through <code>equiv.ulift</code>. We have only two ways to get a canonical measure: on product spaces, and on inner product spaces. Since a product space is never an inner product space, these don't compete. I agree there could be an issue if we add new ways to get canonical measures, but for now it looks like we're safe.</p>",
        "id": 350869134,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1681846048
    },
    {
        "content": "<blockquote>\n<p>Most of the time it's probably a bad idea to express something explicitly for euclidean_space ℝ ι instead of using a general finite-dimensional inner product space</p>\n</blockquote>\n<p>I agree with this, in the same way that most results about matrices should be stated first about linear maps</p>",
        "id": 350869514,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1681846168
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110050\">Sebastien Gouezel</span> <a href=\"#narrow/stream/113488-general/topic/.60measure_space.60.20instance.20on.20euclidean.20space/near/350867114\">said</a>:</p>\n<blockquote>\n<p>I really think <code>measure_space_of_inner_product_space</code> should be a global instance: on an inner product space, you have a canonical measure, and it should be easily available.</p>\n</blockquote>\n<p>Ok, the reasons given by <span class=\"user-mention silent\" data-user-id=\"110050\">Sebastien Gouezel</span> for this are quite convincing to me. I initially <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span>'ed <span class=\"user-mention silent\" data-user-id=\"111080\">Floris van Doorn</span>'s case for the opposite --- my reasoning based on a rather naive application of the criterion \"use instance (only) when there is a unique reasonable structure\". (Other clearly reasonable measures on inner product spaces include for example Gaussians and in special cases many others. But I now think that one should always refer to those explicitly and not by instance, and it then doesn't seem to hurt to have a measure space instance on an inner product space.)</p>",
        "id": 350870764,
        "sender_full_name": "Kalle Kytölä",
        "timestamp": 1681846652
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110050\">Sebastien Gouezel</span> <a href=\"#narrow/stream/113488-general/topic/.60measure_space.60.20instance.20on.20euclidean.20space/near/350869134\">said</a>:</p>\n<blockquote>\n<p>Definitely the measure derived from inner passed through <code>equiv.ulift</code>.</p>\n</blockquote>\n<p>Getting the measure space from <code>inner_product_space (ulift X)</code> won't work for <code>X = add_circle</code> which has a measure but not an inner product</p>",
        "id": 350872362,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1681847275
    },
    {
        "content": "<p>BTW, should we drop <code>@[instance]</code> from <a href=\"https://leanprover-community.github.io/mathlib_docs/find/set_coe.measure_space\">docs#set_coe.measure_space</a>? We don't want this to be an instance, e.g., for a proper subspace of an inner product space.</p>",
        "id": 350905262,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1681861175
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113488-general/topic/.60measure_space.60.20instance.20on.20euclidean.20space/near/350867287\">said</a>:</p>\n<blockquote>\n<p>What's the danger in copying across the <code>measurable_space</code> and <code>borel_space</code> instances if so?</p>\n</blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"110050\">Sebastien Gouezel</span> <a href=\"#narrow/stream/113488-general/topic/.60measure_space.60.20instance.20on.20euclidean.20space/near/350867774\">said</a>:</p>\n<blockquote>\n<p>I don't think there is a danger here, indeed.</p>\n</blockquote>\n<p>I've added these instances in <a href=\"https://github.com/leanprover-community/mathlib/pull/18870\">#18870</a></p>",
        "id": 352660307,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1682467593
    },
    {
        "content": "<p>Is the following true?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">volume_preserving_measurable_equiv</span> <span class=\"o\">:</span>\n  <span class=\"n\">measure_preserving</span> <span class=\"o\">(</span><span class=\"n\">euclidean_space.measurable_equiv</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"n\">volume</span> <span class=\"n\">volume</span> <span class=\"o\">:=</span>\n<span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>edit: yes, but it probably needs <a href=\"https://github.com/leanprover-community/mathlib/pull/18829\">#18829</a></p>",
        "id": 352660321,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1682467605
    },
    {
        "content": "<p>Just to note, <span class=\"user-mention\" data-user-id=\"488648\">@Xavier Roblot</span>  has now proven this (merged in <a href=\"https://github.com/leanprover-community/mathlib4/pull/7037\">#7037</a>) as <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=EuclideanSpace.volume_preserving_measurableEquiv#doc\">docs#EuclideanSpace.volume_preserving_measurableEquiv</a></p>",
        "id": 390734527,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1694614774
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113488-general/topic/.60measure_space.60.20instance.20on.20euclidean.20space/near/350846952\">said</a>:</p>\n<blockquote>\n<blockquote>\n<p>BTW, do we already have a diamond for <code>measure_space complex</code>?</p>\n</blockquote>\n<p>Yes,<br>\n</p>\n</blockquote>\n<p>Xavier also fixed this in <a href=\"https://github.com/leanprover-community/mathlib4/pull/6832\">#6832</a></p>",
        "id": 390734953,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1694614878
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110050\">Sebastien Gouezel</span> <a href=\"#narrow/stream/113488-general/topic/.60measure_space.60.20instance.20on.20euclidean.20space/near/350869134\">said</a>:</p>\n<blockquote>\n<p>Definitely the measure derived from inner passed through <code>equiv.ulift</code>. We have only two ways to get a canonical measure: on product spaces, and on inner product spaces..</p>\n</blockquote>\n<p>What about <code>ULift Real</code>? That has a canonical measure, right?</p>",
        "id": 390735322,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1694614981
    },
    {
        "content": "<p>Is this a purely theoretical question, or do you have practical applications in mind?</p>",
        "id": 390735856,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1694615134
    },
    {
        "content": "<p>It's a purely theoretical one, but I think the fact the diamond <em>could</em> exist is sufficient evidence that <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=measureSpaceOfInnerProductSpace#doc\">docs#measureSpaceOfInnerProductSpace</a> is a bad instance in the sense of <a href=\"https://link.springer.com/chapter/10.1007/978-3-030-51054-1_1\">Competing Inheritance Paths in Dependent Type Theory: ...</a>. Of course it's not evidence that it's worth the effort to \"fix\" yet</p>",
        "id": 390736620,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1694615351
    },
    {
        "content": "<p>The full setup for the diamond is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.MeasureTheory.Measure.Lebesgue.Complex</span>\n\n<span class=\"kd\">universe</span> <span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"n\">w</span>\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"bp\">𝕜</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">w</span><span class=\"o\">}</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">ULift.instMeasurableSpace</span> <span class=\"o\">[</span><span class=\"n\">MeasurableSpace</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">MeasurableSpace</span> <span class=\"o\">(</span><span class=\"n\">ULift.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">MeasurableSet'</span> <span class=\"n\">s</span> <span class=\"o\">:=</span> <span class=\"n\">MeasurableSpace.MeasurableSet'</span> <span class=\"o\">‹</span><span class=\"n\">_</span><span class=\"o\">›</span> <span class=\"o\">(</span><span class=\"n\">ULift.up</span> <span class=\"bp\">⁻¹'</span> <span class=\"n\">s</span><span class=\"o\">)</span>\n  <span class=\"n\">measurableSet_empty</span> <span class=\"o\">:=</span> <span class=\"n\">MeasurableSpace.measurableSet_empty</span> <span class=\"n\">_</span>\n  <span class=\"n\">measurableSet_compl</span> <span class=\"n\">s</span> <span class=\"n\">hs</span> <span class=\"o\">:=</span> <span class=\"n\">MeasurableSpace.measurableSet_compl</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">ULift.up</span> <span class=\"bp\">⁻¹'</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"bp\">&lt;|</span> <span class=\"kd\">by</span> <span class=\"n\">exact</span> <span class=\"n\">hs</span>\n  <span class=\"n\">measurableSet_iUnion</span> <span class=\"n\">f</span> <span class=\"n\">h</span> <span class=\"o\">:=</span>\n    <span class=\"n\">Set.preimage_iUnion.symm</span> <span class=\"bp\">▸</span> <span class=\"n\">MeasurableSpace.measurableSet_iUnion</span> <span class=\"o\">‹</span><span class=\"n\">_</span><span class=\"o\">›</span> <span class=\"o\">((</span><span class=\"n\">ULift.up</span> <span class=\"bp\">⁻¹'</span> <span class=\"bp\">·</span><span class=\"o\">)</span> <span class=\"bp\">∘</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"n\">h</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">instance</span> <span class=\"n\">ULift.instMeasureSpace</span> <span class=\"o\">[</span><span class=\"n\">MeasureTheory.MeasureSpace</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">MeasureTheory.MeasureSpace</span> <span class=\"o\">(</span><span class=\"n\">ULift.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">volume</span> <span class=\"o\">:=</span> <span class=\"n\">MeasureTheory.volume.map</span> <span class=\"n\">ULift.up</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">TopologicalSpace</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">MeasurableSpace</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">BorelSpace</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">BorelSpace</span> <span class=\"o\">(</span><span class=\"n\">ULift.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">measurable_eq</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">IsROrC</span> <span class=\"bp\">𝕜</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">NormedAddCommGroup</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">InnerProductSpace</span> <span class=\"bp\">𝕜</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">InnerProductSpace</span> <span class=\"bp\">𝕜</span> <span class=\"o\">(</span><span class=\"n\">ULift.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">inner</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"n\">inner</span> <span class=\"n\">x.down</span> <span class=\"n\">y.down</span>\n  <span class=\"n\">norm_sq_eq_inner</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">norm_sq_eq_inner</span> <span class=\"n\">x.down</span>\n  <span class=\"n\">conj_symm</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"n\">InnerProductSpace.conj_symm</span> <span class=\"n\">x.down</span> <span class=\"n\">y.down</span>\n  <span class=\"n\">add_left</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"o\">:=</span> <span class=\"n\">InnerProductSpace.add_left</span> <span class=\"n\">x.down</span> <span class=\"n\">y.down</span> <span class=\"n\">z.down</span>\n  <span class=\"n\">smul_left</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"n\">InnerProductSpace.smul_left</span> <span class=\"n\">x.down</span> <span class=\"n\">y.down</span> <span class=\"n\">c</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">measureSpaceOfInnerProductSpace</span> <span class=\"o\">(</span><span class=\"n\">E</span> <span class=\"o\">:=</span> <span class=\"n\">ULift.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">ℝ</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"n\">ULift.instMeasureSpace.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 390742503,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1694617064
    },
    {
        "content": "<p>It looks like we agree that right now there is no diamond in mathlib, and there won't be any if we don't register <code>ULift.measureSpace</code> as an instance. So everything looks fine to me.</p>",
        "id": 390778571,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1694629282
    }
]