[
    {
        "content": "<p>Dear All,</p>\n<p>in the code below, something in the combination of the files <code>Algebra.Order.Monoid.WithTop</code> and <code>Data.Nat.Basic</code> is incompatible with a <code>simp</code> lemma.  Can I get <code>simp</code> to apply the <code>simp</code>-lemma <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=WithBot.unbot%27_coe#doc\">docs#WithBot.unbot'_coe</a>, with both imports?</p>\n<p>Thanks!</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Order.WithBot</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.Order.Monoid.WithTop</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Nat.Basic</span>\n\n<span class=\"c1\">-- works</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">WithBot.unbot'</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"n\">WithBot.unbot'_coe</span> <span class=\"n\">_</span> <span class=\"n\">_</span>\n\n<span class=\"c1\">-- both fail, unless you comment at least one of the two imports</span>\n<span class=\"c1\">-- `Mathlib.Algebra.Order.Monoid.WithTop` or `Mathlib.Data.Nat.Basic`</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">WithBot.unbot'</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">WithBot.unbot'_coe</span><span class=\"o\">]</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">WithBot.unbot'</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span>\n</code></pre></div>",
        "id": 379929736,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1690687890
    },
    {
        "content": "<p>I guess, Lean uses <code>Nat.cast</code> for coercion, not <code>WithBot.some</code>.</p>",
        "id": 379930089,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1690688065
    },
    {
        "content": "<p>So, you need to either use <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Nat.cast_withBot#doc\">docs#Nat.cast_withBot</a>, or add a duplicate lemma that uses <code>Nat.cast</code>.</p>",
        "id": 379930339,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1690688223
    },
    {
        "content": "<p>Ah, this indeed works with both imports:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">WithBot.unbot'</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">WithBot.some</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">WithBot.unbot'_coe</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 379930387,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1690688269
    },
    {
        "content": "<p>It also highlights this porting note:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- Porting note: changed this from `CoeTC` to `Coe` but I am not 100% confident that's correct.</span>\n<span class=\"kd\">instance</span> <span class=\"n\">coe</span> <span class=\"o\">:</span> <span class=\"n\">Coe</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">WithBot</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨</span><span class=\"n\">some</span><span class=\"o\">⟩</span>\n</code></pre></div>",
        "id": 379930458,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1690688296
    },
    {
        "content": "<p>Anyway, we'll have this problem one way or another: if Lean uses<code>Nat.cast</code> (like now), then you can't apply lemmas about <code>WithBot.some</code>, otherwise you can't apply lemmas about <code>Nat.cast</code>.</p>",
        "id": 379930769,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1690688462
    },
    {
        "content": "<p>So, to try to understand, with the combination of those files, Lean produces a <code>Nat.cast</code> to <code>WithBot Nat</code>, but the two files separately do not suffice for the <code>Nat.cast</code>.  Once the <code>Nat.cast</code> is available, Lean uses <code>Nat.cast</code> instead of <code>WithBot.coe</code> for the coercion.</p>\n<p>Is this correct?</p>",
        "id": 379930803,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1690688483
    },
    {
        "content": "<p>Yes, once you have an <code>AddMonoidWithOne</code> instance on <code>WithBot Nat</code>, it uses <code>NatCast</code>.</p>",
        "id": 379931391,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1690688840
    },
    {
        "content": "<p>Would adding this lemma be reasonable?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[simp]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">preferWithBotSomeToNatCast</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">Nat.cast</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">WithBot.some</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 379931394,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1690688842
    },
    {
        "content": "<p>This is exactly <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Nat.cast_withBot#src\">src#Nat.cast_withBot</a></p>",
        "id": 379931439,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1690688880
    },
    {
        "content": "<p>Ah, it is simply not <code>simp</code>!</p>",
        "id": 379931518,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1690688906
    },
    {
        "content": "<p>But if you make it a <code>simp</code> lemma, one can be surprised about lemmas about <code>Nat.cast</code> not working.</p>",
        "id": 379931519,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1690688909
    },
    {
        "content": "<p>Ok, I'll see if I can simply add it to the simp call and be done with it.</p>",
        "id": 379931547,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1690688933
    },
    {
        "content": "<p>(This is within some meta-programming, so I may report back with more questions!)</p>",
        "id": 379931581,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1690688965
    },
    {
        "content": "<p>Anyway, thank you very much: now the issue is perfectly clear!</p>",
        "id": 379931591,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1690688979
    },
    {
        "content": "<p>In Lean 3, this was not an issue because both functions were hidden behind <code>coe</code> but Lean 4 unfolds coercions.</p>",
        "id": 379931675,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1690689013
    },
    {
        "content": "<p>On the one hand, we no longer need to worry about some diamonds. OTOH, we get these problems.</p>",
        "id": 379931731,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1690689048
    },
    {
        "content": "<p>Ok, this example clarified a little for me the issue with coercions in Lean4: this has been super helpful, thanks again!</p>",
        "id": 379931891,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1690689149
    }
]