[
    {
        "content": "<p>We seem to have a problem back in mathlib3 about simp normal form for turning a <code>linear_isometry_equiv</code> into a <code>linear_map</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">analysis.normed_space.linear_isometry</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">E</span> <span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">seminormed_add_comm_group</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">seminormed_add_comm_group</span> <span class=\"n\">F</span><span class=\"o\">]</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">R</span> <span class=\"n\">E</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">S</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">σ₁₂</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">→+*</span> <span class=\"n\">S</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">σ₂₁</span> <span class=\"o\">:</span> <span class=\"n\">S</span> <span class=\"bp\">→+*</span> <span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">ring_hom_inv_pair</span> <span class=\"n\">σ₁₂</span> <span class=\"n\">σ₂₁</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">ring_hom_inv_pair</span> <span class=\"n\">σ₂₁</span> <span class=\"n\">σ₁₂</span><span class=\"o\">]</span>\n\n<span class=\"kn\">include</span> <span class=\"n\">σ₂₁</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">E</span> <span class=\"bp\">≃ₛₗᵢ</span><span class=\"o\">[</span><span class=\"n\">σ₁₂</span><span class=\"o\">]</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">e.to_linear_equiv</span> <span class=\"o\">:</span> <span class=\"n\">E</span> <span class=\"bp\">→ₛₗ</span><span class=\"o\">[</span><span class=\"n\">σ₁₂</span><span class=\"o\">]</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">e.to_linear_map</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"c1\">-- fails!</span>\n</code></pre></div>\n<p>Would someone be willing to look into this for me?</p>\n<p><span class=\"user-mention\" data-user-id=\"214703\">@Yury G. Kudryashov</span>, <span class=\"user-mention\" data-user-id=\"311453\">@Frédéric Dupuis</span>, <span class=\"user-mention\" data-user-id=\"260507\">@Heather Macbeth</span> are listed as the authors of <code>linear_isometry.lean</code>, so I'll ping them here. :-)</p>",
        "id": 354779939,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1682908363
    },
    {
        "content": "<p>Relatedly, it's curious that:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- We have a coercion from linear equivalences to linear maps:</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">E</span> <span class=\"bp\">≃ₛₗ</span><span class=\"o\">[</span><span class=\"n\">σ₁₂</span><span class=\"o\">]</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">E</span> <span class=\"bp\">→ₛₗ</span><span class=\"o\">[</span><span class=\"n\">σ₁₂</span><span class=\"o\">]</span> <span class=\"n\">F</span> <span class=\"o\">:=</span> <span class=\"n\">e</span> <span class=\"c1\">-- succeeds</span>\n\n<span class=\"c1\">-- But no corresponding coercion from linear isometry equivalences to linear isometries?</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">E</span> <span class=\"bp\">≃ₛₗᵢ</span><span class=\"o\">[</span><span class=\"n\">σ₁₂</span><span class=\"o\">]</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">E</span> <span class=\"bp\">→ₛₗᵢ</span><span class=\"o\">[</span><span class=\"n\">σ₁₂</span><span class=\"o\">]</span> <span class=\"n\">F</span> <span class=\"o\">:=</span> <span class=\"n\">e</span> <span class=\"c1\">-- fails</span>\n</code></pre></div>\n<p>and perhaps that (and deciding the simp normal form, and implementing it) could be fixed at the same time?</p>",
        "id": 354779994,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1682908416
    },
    {
        "content": "<p>I'm pretty sure this is the problem I warned about with adding coercions based on <code>semilinear_map_class</code></p>",
        "id": 354812767,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1682928250
    },
    {
        "content": "<p>Which is that now we have a coercion from every morphism to every other morphism, and no lemmas to cut that coercion in two (for example, showing that coercing an alg_hom to a monoid_hom is the same as coercing via a ring hom)</p>",
        "id": 354813248,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1682928375
    },
    {
        "content": "<p>I suggest that we add <code>simp</code> lemmas as needed for now, then after the port we try <a href=\"https://github.com/leanprover-community/mathlib4/pull/2202\">!4#2202</a> or some other way to automate the process.</p>",
        "id": 355257016,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1683058749
    },
    {
        "content": "<p>I'd preface that with \"In mathlib3, ...\". If the port tells us that we're missing a simp lemma here but mathlib3 didn't, then something else has gone wrong.</p>",
        "id": 355257724,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1683058997
    },
    {
        "content": "<p>Anyone want to add this simp lemma to mathlib3? I only indirectly ran into this problem while porting (trying to fix a timeout by making something irreducible, and then backporting the irreducible to mathlib3 to check it was sane uncovered this problem).</p>",
        "id": 355294801,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1683076856
    }
]