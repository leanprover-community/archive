[
    {
        "content": "<p>In thinking about experimental extensions to the natural number game, I wondered where I could add \"proper subtraction\", where you only allow <code>x - y</code> to typecheck if the system can find a proof that y&lt;=x. What would be some nice Lean 4 ways of doing this? I want to be secretly powered by linarith or something. Oh -- I don't even know if <code>linarith</code> works in NNG4 for their bespoke nats.</p>",
        "id": 381625921,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1691103404
    },
    {
        "content": "<p>First thing that  comes to mind: Some code that takes a proof  as an argument where the argument has a default value of <code>:= by  linarith</code> because Lean evaluates these default values in the context of the caller so it can use information from  the call site to derive the property.</p>",
        "id": 381626005,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1691103469
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 381637803,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1691109584
    },
    {
        "content": "<p>Is there a proper tutorial on how to work with subtypes? Wouldn't/Couldn't proper subtraction be implemented with subtypes?</p>",
        "id": 381637950,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1691109629
    },
    {
        "content": "<p>A first sketch (essentially from my course):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- Subtract `m` and `n` in the presence of a proof that `n ≤ m`. -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">minus</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)(</span><span class=\"n\">hyp</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">≤</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">hyp</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">m</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">_</span> <span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">pf</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">nomatch</span> <span class=\"n\">pf</span>\n  <span class=\"bp\">|</span> <span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">,</span> <span class=\"n\">pf</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">minus</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">le_of_succ_le_succ</span> <span class=\"n\">pf</span><span class=\"o\">)</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">minus</span> <span class=\"mi\">5</span> <span class=\"mi\">3</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">decide</span><span class=\"o\">)</span> <span class=\"c1\">-- 2</span>\n\n<span class=\"n\">macro</span> <span class=\"n\">n</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"s2\">\"-₀\"</span> <span class=\"n\">m</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"o\">:</span> <span class=\"n\">term</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">minus</span> <span class=\"bp\">$</span><span class=\"n\">n</span> <span class=\"bp\">$</span><span class=\"n\">m</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">decide</span><span class=\"o\">))</span>\n\n<span class=\"k\">#eval</span> <span class=\"mi\">5</span> <span class=\"bp\">-₀</span> <span class=\"mi\">3</span> <span class=\"c1\">-- 2</span>\n</code></pre></div>",
        "id": 381676311,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1691126999
    },
    {
        "content": "<p>Here is a variant using the <code>-</code> symbol and falling back to the usual subtraction in cases other than natural numbers. There is an error for natural numbers if the proof fails.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">elab</span><span class=\"o\">(</span><span class=\"n\">priority</span><span class=\"o\">:=</span><span class=\"n\">high</span><span class=\"o\">)</span> <span class=\"n\">n</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"s2\">\"-\"</span> <span class=\"n\">m</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"o\">:</span> <span class=\"n\">term</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"n\">Term.withoutErrToSorry</span> <span class=\"k\">do</span>\n  <span class=\"n\">try</span>\n    <span class=\"n\">Term.elabTermEnsuringType</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">minus</span> <span class=\"bp\">$</span><span class=\"n\">n</span> <span class=\"bp\">$</span><span class=\"n\">m</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">decide</span><span class=\"o\">)))</span> <span class=\"o\">(</span><span class=\"n\">mkConst</span> <span class=\"bp\">``</span><span class=\"n\">Nat</span><span class=\"o\">)</span>\n  <span class=\"n\">catch</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">let</span> <span class=\"n\">n</span> <span class=\"bp\">←</span> <span class=\"n\">Term.elabTerm</span> <span class=\"n\">n</span> <span class=\"n\">none</span>\n    <span class=\"k\">let</span> <span class=\"n\">m</span> <span class=\"bp\">←</span> <span class=\"n\">Term.elabTerm</span> <span class=\"n\">m</span> <span class=\"n\">none</span>\n    <span class=\"n\">mkAppM</span> <span class=\"bp\">``</span><span class=\"n\">HSub.hSub</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">m</span><span class=\"o\">]</span>\n\n<span class=\"k\">#eval</span> <span class=\"o\">(</span><span class=\"mi\">5</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"mi\">6</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span>\n<span class=\"k\">#eval</span> <span class=\"mi\">6</span> <span class=\"bp\">-</span> <span class=\"mi\">5</span> <span class=\"c1\">-- 1</span>\n<span class=\"c1\">-- #eval 5 - 6 -- error</span>\n</code></pre></div>",
        "id": 381686780,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1691129510
    }
]