[
    {
        "content": "<p>Should we add an abbreviation for <code>∙</code> as in <code>K ∙ v = Submodule.span K {v}</code>?</p>",
        "id": 375409010,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1689377564
    },
    {
        "content": "<p>Question to those who use this notation: what local abbreviation did you add for this symbol?</p>",
        "id": 375409053,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1689377596
    },
    {
        "content": "<p>In Lean 3 it was available as <code>\\.</code> but now it is taken by <code>·</code> MIDDLE DOT</p>",
        "id": 375852368,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1689551354
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"260507\">@Heather Macbeth</span> <span aria-label=\"up\" class=\"emoji emoji-2b06\" role=\"img\" title=\"up\">:up:</span></p>",
        "id": 375852527,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1689551505
    },
    {
        "content": "<p>Funny, I can't remember!  Don't we have a big table of VS Code shortcuts somewhere, though?</p>",
        "id": 375852658,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1689551619
    },
    {
        "content": "<p><a href=\"https://raw.githubusercontent.com/leanprover/vscode-lean4/master/vscode-lean4/src/abbreviation/abbreviations.json\">https://raw.githubusercontent.com/leanprover/vscode-lean4/master/vscode-lean4/src/abbreviation/abbreviations.json</a></p>",
        "id": 375852770,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1689551695
    },
    {
        "content": "<p>The problem is that <code>\\.</code> is now taken for the \"focus on the first goal\" / \"placeholder for a lambda function\" symbol.</p>",
        "id": 375852815,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1689551757
    },
    {
        "content": "<p>So, what should be the new shortcut?</p>",
        "id": 375862337,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1689556353
    },
    {
        "content": "<p>Is <code>cdot</code> used? That's what I type in latex</p>",
        "id": 375899222,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1689574683
    },
    {
        "content": "<p>It is used for <code>⬝</code> (matrix multiplication)</p>",
        "id": 375904323,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1689576375
    },
    {
        "content": "<p>I suppose we can now use <code>*</code> for matrix multiplication in ml4, right?</p>",
        "id": 375905373,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1689576712
    },
    {
        "content": "<p>Because of <code>HMul</code>.</p>",
        "id": 375905389,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1689576718
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"260507\">Heather Macbeth</span> <a href=\"#narrow/stream/113488-general/topic/Abbreviation.20for.20.E2.88.99.3F/near/375852658\">said</a>:</p>\n<blockquote>\n<p>Funny, I can't remember!  Don't we have a big table of VS Code shortcuts somewhere, though?</p>\n</blockquote>\n<p>In the VSCode extension you can access that table using Ctrl-shift-p Lean4: Show all abbreviations</p>",
        "id": 375909464,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1689577645
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> Will Lean try to cast both sides to the same type?</p>",
        "id": 375911291,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1689578125
    },
    {
        "content": "<p>No, I think we can teach it that (m x n)-matrix times (n x o) matrix is of size (m x o)</p>",
        "id": 375911554,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1689578207
    },
    {
        "content": "<p>Should we change the notation to reuse • now?</p>",
        "id": 375918547,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1689580137
    },
    {
        "content": "<p><code>instance : HSMul (Type u) M where hSMul R x := span R x</code></p>",
        "id": 375918782,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1689580193
    },
    {
        "content": "<p>That doesn't type check, right?</p>",
        "id": 375919236,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1689580292
    },
    {
        "content": "<p><code>span R x</code> only makes sense if there is a semiring instance for <code>R</code></p>",
        "id": 375919337,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1689580309
    },
    {
        "content": "<p>And a <code>Module R M</code> instance</p>",
        "id": 375919534,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1689580335
    },
    {
        "content": "<p>Oh, good point</p>",
        "id": 375926634,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1689581564
    },
    {
        "content": "<p>Maybe we can still overload the notation in the elaborator</p>",
        "id": 375926842,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1689581598
    }
]