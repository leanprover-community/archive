[
    {
        "content": "<p>I am making a case based definition using match, and in order to compile I have to provide a \"wildcard\" case which in practice should never appear.  Here is the definition</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">card_solution</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"mi\">4</span>\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">solution</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">card_solution</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">n.val</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">fun</span> <span class=\"n\">m</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">π</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"n\">π</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">fun</span> <span class=\"n\">m</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">π</span> <span class=\"bp\">/</span> <span class=\"mi\">4</span> <span class=\"bp\">+</span> <span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"n\">π</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">2</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">fun</span> <span class=\"n\">m</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">π</span> <span class=\"bp\">/</span> <span class=\"mi\">6</span> <span class=\"bp\">+</span> <span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"n\">π</span> <span class=\"bp\">/</span> <span class=\"mi\">6</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">3</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">fun</span> <span class=\"n\">m</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"mi\">5</span> <span class=\"bp\">*</span> <span class=\"n\">π</span> <span class=\"bp\">/</span> <span class=\"mi\">6</span> <span class=\"bp\">+</span> <span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"n\">π</span> <span class=\"bp\">/</span> <span class=\"mi\">6</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">fun</span> <span class=\"n\">m</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">0</span>\n</code></pre></div>\n<p>I might prefer for the wildcard to have something like a Nan (not a number) instead of 0.  Is there a way to do this?  I haven't found an appropriate \"error number\" within lean to put there.</p>",
        "id": 398142638,
        "sender_full_name": "Teddy Baker",
        "timestamp": 1698088375
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a></p>",
        "id": 398142895,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1698088500
    },
    {
        "content": "<p>You could do</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n<span class=\"kn\">open</span> <span class=\"n\">Real</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">card_solution</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"mi\">4</span>\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">solution</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">card_solution</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span> <span class=\"bp\">→</span> <span class=\"n\">Option</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">n.val</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">fun</span> <span class=\"n\">m</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">some</span> <span class=\"o\">(</span><span class=\"n\">π</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"n\">π</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">fun</span> <span class=\"n\">m</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">some</span> <span class=\"o\">(</span><span class=\"n\">π</span> <span class=\"bp\">/</span> <span class=\"mi\">4</span> <span class=\"bp\">+</span> <span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"n\">π</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">2</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">fun</span> <span class=\"n\">m</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">some</span> <span class=\"o\">(</span><span class=\"n\">π</span> <span class=\"bp\">/</span> <span class=\"mi\">6</span> <span class=\"bp\">+</span> <span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"n\">π</span> <span class=\"bp\">/</span> <span class=\"mi\">6</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">3</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">fun</span> <span class=\"n\">m</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">some</span> <span class=\"o\">(</span><span class=\"mi\">5</span> <span class=\"bp\">*</span> <span class=\"n\">π</span> <span class=\"bp\">/</span> <span class=\"mi\">6</span> <span class=\"bp\">+</span> <span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"n\">π</span> <span class=\"bp\">/</span> <span class=\"mi\">6</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">fun</span> <span class=\"n\">m</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">none</span>\n</code></pre></div>",
        "id": 398143012,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1698088563
    },
    {
        "content": "<p>Or,</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n<span class=\"kn\">open</span> <span class=\"n\">Real</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">card_solution</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"mi\">4</span>\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">solution</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">card_solution</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">n.val</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">fun</span> <span class=\"n\">m</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">π</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"n\">π</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">fun</span> <span class=\"n\">m</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">π</span> <span class=\"bp\">/</span> <span class=\"mi\">4</span> <span class=\"bp\">+</span> <span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"n\">π</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">2</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">fun</span> <span class=\"n\">m</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">π</span> <span class=\"bp\">/</span> <span class=\"mi\">6</span> <span class=\"bp\">+</span> <span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"n\">π</span> <span class=\"bp\">/</span> <span class=\"mi\">6</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">3</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">fun</span> <span class=\"n\">m</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"mi\">5</span> <span class=\"bp\">*</span> <span class=\"n\">π</span> <span class=\"bp\">/</span> <span class=\"mi\">6</span> <span class=\"bp\">+</span> <span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"n\">π</span> <span class=\"bp\">/</span> <span class=\"mi\">6</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">default</span>\n</code></pre></div>\n<p>(<code>default</code> is <code>0</code> here but at least it makes it clearer that the value does not matter.)</p>",
        "id": 398143507,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1698088820
    },
    {
        "content": "<p>Actually:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n<span class=\"kn\">open</span> <span class=\"n\">Real</span>\n\n<span class=\"n\">abbrev</span> <span class=\"n\">card_solution</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"mi\">4</span>\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">solution</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">card_solution</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">n</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">fun</span> <span class=\"n\">m</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">π</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"n\">π</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">fun</span> <span class=\"n\">m</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">π</span> <span class=\"bp\">/</span> <span class=\"mi\">4</span> <span class=\"bp\">+</span> <span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"n\">π</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">2</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">fun</span> <span class=\"n\">m</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">π</span> <span class=\"bp\">/</span> <span class=\"mi\">6</span> <span class=\"bp\">+</span> <span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"n\">π</span> <span class=\"bp\">/</span> <span class=\"mi\">6</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">3</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">fun</span> <span class=\"n\">m</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"mi\">5</span> <span class=\"bp\">*</span> <span class=\"n\">π</span> <span class=\"bp\">/</span> <span class=\"mi\">6</span> <span class=\"bp\">+</span> <span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"n\">π</span> <span class=\"bp\">/</span> <span class=\"mi\">6</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 398144082,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1698089166
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 398145500,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1698089972
    },
    {
        "content": "<p>No offense taken :-) So what would be your suggestion?</p>",
        "id": 398147666,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1698091159
    },
    {
        "content": "<p>Disregard my previous message. I misread the example.</p>",
        "id": 398148870,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1698091804
    },
    {
        "content": "<p>Thanks everyone, all of these are very helpful!</p>",
        "id": 398150818,
        "sender_full_name": "Teddy Baker",
        "timestamp": 1698092908
    },
    {
        "content": "<p>If you are forced to provide a provably impossible case, you can also use <code>False.elim _</code></p>",
        "id": 398171131,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1698104129
    }
]