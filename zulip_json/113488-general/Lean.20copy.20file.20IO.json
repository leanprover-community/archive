[
    {
        "content": "<p>I see Lean has an <code>IO.FS.rename</code> function for moving files; does it have a similar function for copying files to other directories?</p>",
        "id": 395057506,
        "sender_full_name": "Ioannis Konstantoulas",
        "timestamp": 1696516492
    },
    {
        "content": "<p>you can always write the contents of one file to a new file with <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=IO.FS.writeBinFile#doc\">docs#IO.FS.writeBinFile</a> or something like that.</p>",
        "id": 395058091,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1696516673
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">IO.FS.writeBinFile</span> <span class=\"n\">outPath</span> <span class=\"o\">(</span><span class=\"bp\">←</span><span class=\"n\">IO.FS.readBinFile</span> <span class=\"n\">inPath</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 395061481,
        "sender_full_name": "David Renshaw",
        "timestamp": 1696517696
    },
    {
        "content": "<p>You could also stream the file(s) if you want to handle large files.</p>",
        "id": 395062486,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1696518017
    },
    {
        "content": "<p>Perhaps we should add a streaming <code>copyFile</code> function to <code>Std</code>.</p>",
        "id": 395063428,
        "sender_full_name": "David Renshaw",
        "timestamp": 1696518295
    },
    {
        "content": "<p><a href=\"https://man7.org/linux/man-pages/man2/splice.2.html\">https://man7.org/linux/man-pages/man2/splice.2.html</a></p>",
        "id": 395065039,
        "sender_full_name": "Schrodinger ZHU Yifan",
        "timestamp": 1696518772
    },
    {
        "content": "<p>EIO from ocaml actually dispatch syscalls depending on stream types</p>",
        "id": 395065143,
        "sender_full_name": "Schrodinger ZHU Yifan",
        "timestamp": 1696518808
    },
    {
        "content": "<p>For example, splice is used to copy between fds</p>",
        "id": 395065203,
        "sender_full_name": "Schrodinger ZHU Yifan",
        "timestamp": 1696518826
    },
    {
        "content": "<p>Is Adam's code a reasonably fast/reliable way to copy files?  I am unfamiliar with the implementation of these operations, and would think they would be delegated to the OS via some system calls.</p>",
        "id": 395084663,
        "sender_full_name": "Ioannis Konstantoulas",
        "timestamp": 1696525110
    },
    {
        "content": "<p>I don't think there is any specialization going on. Streams in general are wrappers around lean_external_object that set a FILE* as its field. </p>\n<p>That is being said, I think a benchmark is needed to decide if higher performance can be achieved.</p>",
        "id": 395086450,
        "sender_full_name": "Schrodinger ZHU Yifan",
        "timestamp": 1696525803
    },
    {
        "content": "<p>FWIW, here's a short function with a steaming <code>copyFile</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">copyFile</span> <span class=\"o\">(</span><span class=\"n\">inFile</span> <span class=\"n\">outFile</span> <span class=\"o\">:</span> <span class=\"n\">System.FilePath</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">bufSize</span> <span class=\"o\">:</span> <span class=\"n\">USize</span> <span class=\"o\">:=</span> <span class=\"mi\">1024</span><span class=\"o\">):</span> <span class=\"n\">IO</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span>\n  <span class=\"n\">IO.FS.withFile</span> <span class=\"n\">outFile</span> <span class=\"bp\">.</span><span class=\"n\">write</span> <span class=\"k\">fun</span> <span class=\"n\">outHandle</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"n\">IO.FS.withFile</span> <span class=\"n\">inFile</span> <span class=\"bp\">.</span><span class=\"n\">read</span> <span class=\"k\">fun</span> <span class=\"n\">inHandle</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">buf</span> <span class=\"bp\">←</span> <span class=\"n\">inHandle.read</span> <span class=\"n\">bufSize</span>\n    <span class=\"n\">while</span> <span class=\"bp\">!</span><span class=\"n\">buf.isEmpty</span> <span class=\"k\">do</span>\n      <span class=\"n\">outHandle.write</span> <span class=\"n\">buf</span>\n      <span class=\"n\">buf</span> <span class=\"bp\">←</span> <span class=\"n\">inHandle.read</span> <span class=\"n\">bufSize</span>\n</code></pre></div>",
        "id": 395294996,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1696610020
    },
    {
        "content": "<p>I do hope for API consistency in this case. Copy and move should be implemented in the neighbor in the same way (external or lean) so the users can make reasonable guess to find it, and there won't be subtle implementation discrepancies.</p>",
        "id": 396618087,
        "sender_full_name": "Utensil Song",
        "timestamp": 1697262541
    },
    {
        "content": "<p>Furthermore, when it comes to something this basic, it's better to choose an API design from another language/library instead of going over redesign, it improves API predictability and saves design bike shedding to focus on what really matters. An API design taken from Rust or Haskell or Python could do.</p>\n<p>Obviously people expect a native implementation in this case, making the decision doesn't require evaluating the performance, it's just not exactly a productive to reinventing the wheel here. Rewriting a lot of basic functionality to pure Lean is another more time-consuming project, and the priority should be making APIs available in the standard libraries of other languages available to Lean as soon as possible, as predictable as possible.</p>",
        "id": 396618720,
        "sender_full_name": "Utensil Song",
        "timestamp": 1697263039
    },
    {
        "content": "<p>Many similar APIs are scattered, per my observation, it seems to be just where it's handy. Now it could be in Lean, Lake, Std, Mathlib, personal project, where ever it's needed, which is a serious issue for future. I can see some of the technical reasons like platform-dependent stuff should not be in Lean core etc. but these reasons can not beat API usability, and there are solutions to handle situations like this, for example, Lean core maintains the minimal API it needs and accepts, but Std will provide a complete set, and internally it calls or at least match Lean core to ensure API and behavior consistency, and Std is where people to expect APIs similar to other languages.</p>",
        "id": 396619304,
        "sender_full_name": "Utensil Song",
        "timestamp": 1697263416
    }
]