[
    {
        "content": "<p>This topic has appeared before but what I found is pretty old, so: what is the preferred way to talk about the natural numbers from <code>0</code> to <code>n</code>? (My use case is to have a finite ordered set of real numbers to describe a subdivision of an interval, which I want to index.) I'm hesitating between too many options:</p>\n<ul>\n<li><code>Fin (n + 1)</code></li>\n<li><code>Nat.Iic n</code></li>\n<li><code>Finset.range (n + 1)</code></li>\n<li><code>{ i : ℕ | i ≤ n }</code></li>\n<li>don't, use <code>ℕ</code> with a separate assumption and treat values above <code>n</code> as garbage values</li>\n<li>don't, use a <code>List</code> instead of indexing</li>\n</ul>",
        "id": 393270343,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1695744017
    },
    {
        "content": "<ul>\n<li>all of the above</li>\n</ul>",
        "id": 393270583,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1695744074
    },
    {
        "content": "<p>In your case, I'd go for the garbage values version, since you can treat the maximum of the interval as a garbage value (assuming it's a closed interval?).</p>",
        "id": 393270878,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1695744141
    },
    {
        "content": "<p>Right now I have this,</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">Subdivision</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span>\n  <span class=\"n\">toFun</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span>\n  <span class=\"n\">first</span> <span class=\"o\">:</span> <span class=\"n\">toFun</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"n\">a</span>\n  <span class=\"n\">last</span> <span class=\"o\">:</span> <span class=\"n\">toFun</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">b</span>\n  <span class=\"n\">mono</span> <span class=\"o\">:</span> <span class=\"n\">MonotoneOn</span> <span class=\"n\">toFun</span> <span class=\"o\">(</span><span class=\"n\">Set.Iic</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span>\n</code></pre></div>",
        "id": 393272431,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1695744528
    },
    {
        "content": "<p>Data point: for <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=eVariationOn#doc\">docs#eVariationOn</a>, I went for <code>ℕ</code> and garbage values. This is quite nice from some points of view, but in retrospect things would have probably been smoother using lists (especially when gluing subdivisions of consecutive intervals). If you want to have a look at something really bad, look at the proof of <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=eVariationOn.add_point#doc\">docs#eVariationOn.add_point</a> (which is about adding one point to a subdivision and checking that this does not decrease the variation).</p>\n<p>So my advice is to use lists.</p>",
        "id": 393272500,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1695744552
    },
    {
        "content": "<p><code>n</code> being bundled is probably good evidence that you want a list</p>",
        "id": 393272600,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1695744592
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110050\">Sebastien Gouezel</span> <a href=\"#narrow/stream/113488-general/topic/First.20n.20natural.20numbers/near/393272500\">said</a>:</p>\n<blockquote>\n<p>Data point: for <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=eVariationOn#doc\">docs#eVariationOn</a>, I went for <code>ℕ</code> and garbage values. This is quite nice from some points of view, but in retrospect things would have probably been smoother using lists (especially when gluing subdivisions of consecutive intervals). If you want to have a look at something really bad, look at the proof of <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=eVariationOn.add_point#doc\">docs#eVariationOn.add_point</a> (which is about adding one point to a subdivision and checking that this does not decrease the variation).</p>\n<p>So my advice is to use lists.</p>\n</blockquote>\n<p>Indeed <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=eVariationOn.add_point#doc\">docs#eVariationOn.add_point</a> is rather painful to look at... I was starting to state that given two subdivisions there is a third which is finer than both and for than in fact <code>Finset ℝ</code> felt more appealing, but then getting the pairs of consecutive elements is a nontrivial operation.</p>",
        "id": 393273397,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1695744831
    },
    {
        "content": "<p>Another option is to look at <code>Analysis.BoxIntegral</code> which implements subdivisions into boxes in finite product spaces (which contains in particular the one-dimensional case).</p>",
        "id": 393273669,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1695744904
    },
    {
        "content": "<p>With the <code>Finset ℝ</code> approach, you can easily take unions, and for consecutive elements you can sort your finset, so it is probably quite manageable also.</p>",
        "id": 393274130,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1695744976
    },
    {
        "content": "<p>With the <code>Finset</code> option IIRC the issue I had was that I wanted to say that the smallest element was <code>a</code>, but the smallest element of a <code>Finset</code> lives in <code>with_top something</code> and I kept casting into and out of <code>with_top</code> all the time</p>",
        "id": 393275180,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1695745186
    },
    {
        "content": "<p>Ah, thanks, <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=BoxIntegral.Prepartition#doc\">docs#BoxIntegral.Prepartition</a> seems to be exactly what I needed. I will try to coerce my current code into using it...</p>",
        "id": 393278043,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1695745926
    },
    {
        "content": "<p>(Box integral code is written for product spaces, of the form <code>ι → ℝ</code>, so it's not clear that it can be used in your situation :-(</p>",
        "id": 393279309,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1695746271
    },
    {
        "content": "<p>There is <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Finset.min%27#doc\">docs#Finset.min'</a> to avoid the <code>withTop</code> issue.</p>",
        "id": 393279585,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1695746332
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110050\">Sebastien Gouezel</span> <a href=\"#narrow/stream/113488-general/topic/First.20n.20natural.20numbers/near/393279309\">said</a>:</p>\n<blockquote>\n<p>(Box integral code is written for product spaces, of the form <code>ι → ℝ</code>, so it's not clear that it can be used in your situation :-(</p>\n</blockquote>\n<p>With <code>ι = Fin 1</code> I believe it can, but then I'm not sure if the plumbing won't be heavier than writing everything from scratch.</p>",
        "id": 393280617,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1695746543
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110050\">Sebastien Gouezel</span> <a href=\"#narrow/stream/113488-general/topic/First.20n.20natural.20numbers/near/393279585\">said</a>:</p>\n<blockquote>\n<p>There is <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Finset.min%27#doc\">docs#Finset.min'</a> to avoid the <code>withTop</code> issue.</p>\n</blockquote>\n<p>Yep, and then one has to carry around a proof that the <code>Finset</code> is not empty :-(</p>",
        "id": 393281069,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1695746675
    },
    {
        "content": "<p>Yes, or with <code>ι = Unit</code>, but it looks like too much plumbing indeed. Having a good intrinsic implementation, that we could use to streamline the bounded variation file, looks like a worthy goal.</p>",
        "id": 393281096,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1695746682
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"242586\">Vincent Beffara</span> <a href=\"#narrow/stream/113488-general/topic/First.20n.20natural.20numbers/near/393281069\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"110050\">Sebastien Gouezel</span> <a href=\"#narrow/stream/113488-general/topic/First.20n.20natural.20numbers/near/393279585\">said</a>:</p>\n<blockquote>\n<p>There is <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Finset.min%27#doc\">docs#Finset.min'</a> to avoid the <code>withTop</code> issue.</p>\n</blockquote>\n<p>Yep, and then one has to carry around a proof that the <code>Finset</code> is not empty :-(</p>\n</blockquote>\n<p>Yes, you can't have the butter and the butter money :-)</p>\n<p>(Not sure non-French speakers can understand that)</p>",
        "id": 393281179,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1695746706
    },
    {
        "content": "<p>But assuming nonemptyness is quite natural for subdivisions, right?</p>",
        "id": 393282728,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1695747125
    },
    {
        "content": "<p>The english version of that idiom is so much more confusing: you can't have your cake and eat it too! (Isn't that exactly what you do with cake?!)</p>",
        "id": 393285725,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1695748001
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"242586\">Vincent Beffara</span> <a href=\"#narrow/stream/113488-general/topic/First.20n.20natural.20numbers/near/393275180\">said</a>:</p>\n<blockquote>\n<p>With the <code>Finset</code> option IIRC the issue I had was that I wanted to say that the smallest element was <code>a</code>, but the smallest element of a <code>Finset</code> lives in <code>with_top something</code> and I kept casting into and out of <code>with_top</code> all the time</p>\n</blockquote>\n<p>Well you can use <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=FInset.inf%27#doc\">docs#FInset.inf'</a></p>",
        "id": 393292321,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1695750189
    },
    {
        "content": "<p>In the end I converged on <code>def Subdivision (a b : ℝ) := Finset (Ioo a b)</code> with a bit of API.</p>",
        "id": 393727046,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1695909502
    }
]