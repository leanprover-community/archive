[
    {
        "content": "<p>Has anybody developed an (unofficial) extension for Lean that would allow co√Ønduction?<br>\nI'd need both co√Ønductive types and a tactic for proofs by co√Ønduction.</p>",
        "id": 397143423,
        "sender_full_name": "Martin Dvo≈ô√°k",
        "timestamp": 1697559454
    },
    {
        "content": "<p><a href=\"https://github.com/alexkeizer/QpfTypes\">https://github.com/alexkeizer/QpfTypes</a></p>",
        "id": 397144462,
        "sender_full_name": "Henrik B√∂ving",
        "timestamp": 1697559864
    },
    {
        "content": "<p>By <span class=\"user-mention\" data-user-id=\"481133\">@Alex Keizer</span></p>",
        "id": 397144477,
        "sender_full_name": "Henrik B√∂ving",
        "timestamp": 1697559870
    },
    {
        "content": "<p>Can you elaborate a bit more about what you need? There is no proof by coinduction tactic yet, but with a concrete use-case in mind I could look to see what is the simplest tactic I could add that would work for your case (and can be generalized to more powerful cases later)</p>",
        "id": 397150689,
        "sender_full_name": "Alex Keizer",
        "timestamp": 1697562404
    },
    {
        "content": "<p>Also, thanks Henrik for pointing people towards my library! It seems you are better at promoting my work than me <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 397150810,
        "sender_full_name": "Alex Keizer",
        "timestamp": 1697562477
    },
    {
        "content": "<p>I'm just faster :P</p>",
        "id": 397151054,
        "sender_full_name": "Henrik B√∂ving",
        "timestamp": 1697562585
    },
    {
        "content": "<p>Let <code>S</code> be the largest <code>X ‚äÜ ùí´({0,1}^œâ)</code> such that <code>X ‚äÜ 01X ‚à™ 10X</code>.<br>\nProve <code>‚àÄ x : {0,1}^œâ</code>, <code>x</code> is in <code>S</code> ‚Üî every finite prefix of <code>x</code> of even length has #<code>0</code> = #<code>1</code>.</p>",
        "id": 397162259,
        "sender_full_name": "Martin Dvo≈ô√°k",
        "timestamp": 1697567265
    },
    {
        "content": "<p>Our teacher said we need to prove <code>‚Üê</code> by co√Ønduction on <code>S</code> and prove <code>‚Üí</code> by induction on <code>‚Ñï</code> (length of the prefix).</p>",
        "id": 397162840,
        "sender_full_name": "Martin Dvo≈ô√°k",
        "timestamp": 1697567505
    },
    {
        "content": "<p>Isn't stuff like this proved by transfinite induction if I remember my infinite word automaton correctly?</p>",
        "id": 397163197,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1697567659
    },
    {
        "content": "<p>Can you elaborate on how you are planning to formalize this, and what exactly you expect the coinduction tactic to do?</p>",
        "id": 397288072,
        "sender_full_name": "Alex Keizer",
        "timestamp": 1697627369
    },
    {
        "content": "<p>It seems like you also want to have coinductive predicates (at least, that is how I assume you'd want to formalize <code>S</code>), which is definitely beyond what we can currently do with <code>QpfTypes</code></p>",
        "id": 397288505,
        "sender_full_name": "Alex Keizer",
        "timestamp": 1697627519
    },
    {
        "content": "<p>I created an experimental version of the exercise in Lean without the co√Ønductive extension:<br>\n<a href=\"https://github.com/madvorak/fecssk/blob/3bc2218de71a6d341eacdb1758dc66306fec2ee5/Fecssk/Class03.lean#L152\">https://github.com/madvorak/fecssk/blob/3bc2218de71a6d341eacdb1758dc66306fec2ee5/Fecssk/Class03.lean#L152</a><br>\nIt is untested and, quite frankly, I suspect it might not be solvable as it is.</p>",
        "id": 397453508,
        "sender_full_name": "Martin Dvo≈ô√°k",
        "timestamp": 1697703183
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"481133\">@Alex Keizer</span> for help!</p>",
        "id": 397453610,
        "sender_full_name": "Martin Dvo≈ô√°k",
        "timestamp": 1697703221
    },
    {
        "content": "<p>Note that <code>Stream'</code> already has a fairly comprehensive coinduction API, so a coinduction package wouldn't be able to do much better than reproduce what is already there</p>",
        "id": 397455614,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1697703987
    },
    {
        "content": "<p>the motivation for a tactic is so that you can define your own coinductive types without going through all the work done for the <code>Stream'</code> type</p>",
        "id": 397455736,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1697704033
    },
    {
        "content": "<p>Here's a proof:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- Prove `‚àÄ x : {0,1}^œâ` , `x ‚àà S` ‚Üî every finite prefix of `x` of even length has #`0` = #`1`.</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">‚àÄ</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Word</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">‚àà</span> <span class=\"n\">S</span> <span class=\"bp\">‚Üî</span> <span class=\"bp\">‚àÄ</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñï</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">x.take</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">n</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">count</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">x.take</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">n</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">count</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">x</span>\n  <span class=\"n\">constructor</span>\n  <span class=\"bp\">¬∑</span> <span class=\"n\">intro</span> <span class=\"n\">h</span> <span class=\"n\">n</span>\n    <span class=\"n\">rcases</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"o\">‚ü®</span><span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"n\">hS</span><span class=\"o\">,</span> <span class=\"n\">ss</span><span class=\"o\">‚ü©</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">Set.subset_def</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">ss</span>\n    <span class=\"n\">induction</span> <span class=\"n\">n</span> <span class=\"n\">generalizing</span> <span class=\"n\">x</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">simp</span>\n    <span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"n\">n</span> <span class=\"n\">ih</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">Nat.mul_succ</span><span class=\"o\">,</span> <span class=\"n\">Stream'.take</span><span class=\"o\">]</span>\n      <span class=\"n\">rcases</span> <span class=\"n\">ss</span> <span class=\"n\">_</span> <span class=\"n\">hS</span> <span class=\"k\">with</span> <span class=\"o\">‚ü®</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">‚ü©</span> <span class=\"bp\">|</span> <span class=\"o\">‚ü®</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">‚ü©</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">ih</span> <span class=\"n\">_</span> <span class=\"n\">h</span><span class=\"o\">]</span>\n  <span class=\"bp\">¬∑</span> <span class=\"n\">intro</span> <span class=\"n\">h</span>\n    <span class=\"n\">refine</span> <span class=\"o\">‚ü®{</span><span class=\"n\">x</span> <span class=\"bp\">|</span> <span class=\"bp\">‚àÄ</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñï</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">x.take</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">n</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">count</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">x.take</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">n</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">count</span> <span class=\"mi\">1</span><span class=\"o\">},</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">‚ü©</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">Set.subset_def</span><span class=\"o\">]</span>\n    <span class=\"n\">intro</span> <span class=\"n\">x</span> <span class=\"n\">h</span>\n    <span class=\"n\">obtain</span> <span class=\"o\">‚ü®</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">‚ü©</span> <span class=\"o\">:</span> <span class=\"bp\">‚àÉ</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">Stream'.cons</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">Stream'.cons</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n      <span class=\"o\">‚ü®</span><span class=\"n\">x.head</span><span class=\"o\">,</span> <span class=\"n\">x.tail.head</span><span class=\"o\">,</span> <span class=\"n\">x.tail.tail</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">Stream'.eta</span><span class=\"o\">]‚ü©</span>\n    <span class=\"k\">match</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">refine</span> <span class=\"bp\">.</span><span class=\"n\">inl</span> <span class=\"o\">‚ü®</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"k\">fun</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span> <span class=\"n\">simpa</span> <span class=\"o\">[</span><span class=\"n\">Nat.mul_succ</span><span class=\"o\">]</span> <span class=\"n\">using</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"n\">rfl</span><span class=\"o\">‚ü©</span>\n    <span class=\"bp\">|</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">refine</span> <span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"o\">‚ü®</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"k\">fun</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span> <span class=\"n\">simpa</span> <span class=\"o\">[</span><span class=\"n\">Nat.mul_succ</span><span class=\"o\">]</span> <span class=\"n\">using</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"n\">rfl</span><span class=\"o\">‚ü©</span>\n    <span class=\"bp\">|</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">0</span> <span class=\"bp\">|</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">simpa</span> <span class=\"n\">using</span> <span class=\"n\">h</span> <span class=\"mi\">1</span>\n</code></pre></div>",
        "id": 397457637,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1697704731
    },
    {
        "content": "<p>Thanks a lot!!!<br>\nWhat imports did you add to make it work?</p>",
        "id": 397458435,
        "sender_full_name": "Martin Dvo≈ô√°k",
        "timestamp": 1697705027
    },
    {
        "content": "<p>just</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Stream.Init</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Set.Lattice</span>\n</code></pre></div>",
        "id": 397458565,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1697705062
    },
    {
        "content": "<p>BTW the step that a <code>coinduction</code> tactic would replace is the <code>refine ‚ü®{x | ‚àÄ n : ‚Ñï, (x.take (2*n)).count 0 = (x.take (2*n)).count 1}, h, ?_‚ü©</code> line</p>",
        "id": 397459738,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1697705451
    },
    {
        "content": "<p>FYI, I sent the following message to my colleagues. I hope the attribution is all right.</p>\n<p>Thanks to amazing help from Alex Keizer and Mario Carneiro, who both promptly replied to my questions, I am now confident that the 4th homework is solvable in Lean, as it is here:</p>\n<p><a href=\"https://github.com/madvorak/fecssk/blob/main/Fecssk/Class03.lean\">https://github.com/madvorak/fecssk/blob/main/Fecssk/Class03.lean</a></p>",
        "id": 397463100,
        "sender_full_name": "Martin Dvo≈ô√°k",
        "timestamp": 1697706688
    }
]