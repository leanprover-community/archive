[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">Point</span> <span class=\"n\">where</span>\n  <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Float</span>\n  <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Float</span>\n<span class=\"n\">deriving</span> <span class=\"n\">Repr</span>\n</code></pre></div>\n<p>What does <code>deriving Repr</code> mean?</p>",
        "id": 377764852,
        "sender_full_name": "Qin Yuxuan",
        "timestamp": 1690100424
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">Point</span> <span class=\"n\">where</span>\n  <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Float</span>\n  <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Float</span>\n<span class=\"n\">deriving</span> <span class=\"n\">Repr</span>\n</code></pre></div>\n<p>What does <code>deriving Repr</code> mean?</p>",
        "id": 377764936,
        "sender_full_name": "Qin Yuxuan",
        "timestamp": 1690100453
    },
    {
        "content": "<p>\"Figure out a <code>Repr</code> implementation automatically for this type given that all members of the type implement <code>Repr</code> themselves already\"</p>",
        "id": 377771611,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1690102223
    },
    {
        "content": "<p>slightly tangential question: is there a difference between <code>deriving Repr</code> (right by the type definition) and <code>deriving instance Repr for Type</code> except for where you can place the statement? I've seen both but I'm not sure if there's a difference.</p>",
        "id": 378258383,
        "sender_full_name": "Bhakti Shah",
        "timestamp": 1690229152
    },
    {
        "content": "<p>No, the main reason we have the second syntax is that you can for example have a type declared in some other module or even library and later still derive type class instances on it.</p>",
        "id": 378258578,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1690229210
    }
]