[
    {
        "content": "<p>Hi I'm currently a college freshman and as such I'm pretty sure everything being discussed in my math classes is already in mathlib. I thought it might be fun to start from nothing and just see how far I can get. I was wondering if anyone had advice on the practical logistics of this. </p>\n<p>Is it feasible to not even link mathlib? <br>\nI think trying to write tactics myself would be a bridge too far. Are those in mathlib or built into Lean itself?<br>\nI saw that natural numbers are special cased in the compiler. Is that going to be a problem if I'm trying to write my own nat type?</p>\n<p>If anyone has advice for the minimal reasonable base to start from it would be appreciated. Thanks!</p>",
        "id": 401206843,
        "sender_full_name": "Daniel James",
        "timestamp": 1699552117
    },
    {
        "content": "<p>Yes you can work without mathlib. If you want to start from nothing at all you would need to set <code>prelude</code> and start from there, and this is not really recommended</p>",
        "id": 401207142,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1699552237
    },
    {
        "content": "<p>A simpler option is to just open a new namespace and make your own version of all the types</p>",
        "id": 401207207,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1699552271
    },
    {
        "content": "<p>I would suggest setting up lean from the vscode extension and starting with one of the books. You can add your own Nat type inside a namespace.</p>",
        "id": 401207255,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1699552296
    },
    {
        "content": "<p>The mathematics in lean book might be more to your liking.</p>",
        "id": 401207516,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1699552381
    },
    {
        "content": "<p>I was definitely planning on working through the books before starting this.</p>",
        "id": 401207602,
        "sender_full_name": "Daniel James",
        "timestamp": 1699552417
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113488-general/topic/I'd.20like.20to.20start.20from.20the.20bottom/near/401207142\">said</a>:</p>\n<blockquote>\n<p>Yes you can work without mathlib. If you want to start from nothing at all you would need to set <code>prelude</code> and start from there, and this is not really recommended</p>\n</blockquote>\n<p>What's in the prelude and what is the problem with not including it?</p>",
        "id": 401207697,
        "sender_full_name": "Daniel James",
        "timestamp": 1699552446
    },
    {
        "content": "<p>Note that the <a href=\"https://adam.math.hhu.de/#/g/hhu-adam/NNG4\">Natural Number Game</a> is specifically designed for this application: make your own natural numbers and prove all the basic theorems about them</p>",
        "id": 401208031,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1699552573
    },
    {
        "content": "<p>Yeah that was what inspired it. I really enjoyed the natural number game and I want to go further.</p>",
        "id": 401208079,
        "sender_full_name": "Daniel James",
        "timestamp": 1699552602
    },
    {
        "content": "<p>You can take a look at <a href=\"https://github.com/leanprover/lean4/blob/master/src/Init/Prelude.lean\">https://github.com/leanprover/lean4/blob/master/src/Init/Prelude.lean</a> to see what the \"first file\" looks like</p>",
        "id": 401208184,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1699552649
    },
    {
        "content": "<p>one of the biggest issues is that notation doesn't work yet so you have to write things like <code>Eq a b</code> instead of <code>a = b</code></p>",
        "id": 401208240,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1699552678
    },
    {
        "content": "<p>Ok cool. I see what sort of stuff that is. Sounds like using the prelude and just redefining all the types would be the best option</p>",
        "id": 401208566,
        "sender_full_name": "Daniel James",
        "timestamp": 1699552800
    },
    {
        "content": "<p>I could probably replace it later if I got really good at Lean</p>",
        "id": 401208653,
        "sender_full_name": "Daniel James",
        "timestamp": 1699552810
    },
    {
        "content": "<p>Another problem is that if you don't define things exactly the way the prelude does, some tactics may fail because they have expectations about these definitions (like their name and type) which may not work on your types</p>",
        "id": 401208662,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1699552813
    },
    {
        "content": "<p>Also equality itself (not just the notation) is defined in the prelude, and I don't think you can really do things that basic without decent knowledge of lean to begin with</p>",
        "id": 401208729,
        "sender_full_name": "Nir Paz",
        "timestamp": 1699552835
    },
    {
        "content": "<p>You will notice that <code>inductive</code> is used a lot, this is where all the types come from, ultimately</p>",
        "id": 401208883,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1699552883
    },
    {
        "content": "<p>(or <code>structure</code> / <code>class</code> which are additional syntax on top of <code>inductive</code>)</p>",
        "id": 401209041,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1699552925
    },
    {
        "content": "<p>I love seeing that things like this are just part of the library <a href=\"https://github.com/leanprover/lean4/blob/master/src/Init/Prelude.lean#L263\">https://github.com/leanprover/lean4/blob/master/src/Init/Prelude.lean#L263</a></p>",
        "id": 401209169,
        "sender_full_name": "Daniel James",
        "timestamp": 1699552962
    },
    {
        "content": "<p>Daniel, of course this is feasible, but I don't recommend it for learning. You will spend most of your time doing one of the following:</p>\n<ol>\n<li>proving tons of absolutely trivial lemmas, so that the nontrivial lemmas are not so cumbersome to prove</li>\n<li>proving nontrivial lemmas in long and complicated ways, often repeating arguments because you didn't split out all the little lemmas.</li>\n</ol>\n<p>I would encourage what Mario suggested above. For any given topic (e.g., groups), import Mathlib up to, but not including, that topic, and then develop that topic from scratch.</p>",
        "id": 401209269,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1699552998
    },
    {
        "content": "<p>Well I feel like part of the problem is that I haven't really done much complex math yet. (e.g. no groups)</p>",
        "id": 401209482,
        "sender_full_name": "Daniel James",
        "timestamp": 1699553075
    },
    {
        "content": "<p>What math are you familiar with?</p>",
        "id": 401209522,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1699553097
    },
    {
        "content": "<p>I'm currently doing linear algebra and multi variable calculus</p>",
        "id": 401209589,
        "sender_full_name": "Daniel James",
        "timestamp": 1699553125
    },
    {
        "content": "<p>I recommend reading <a href=\"https://leanprover.github.io/theorem_proving_in_lean4/\">#tpil</a> to understand lean from the bottom (especially chapters 2, 3, 4, 7, 8)</p>",
        "id": 401209621,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1699553135
    },
    {
        "content": "<p>Multivariable calculus is certainly quite complex!</p>",
        "id": 401209663,
        "sender_full_name": "YaÃ«l Dillies",
        "timestamp": 1699553156
    },
    {
        "content": "<p>True. I more meant I haven't done any proof based courses yet. So there isn't as much opportunity to take results I've seen in class and write them in Lean.</p>",
        "id": 401209815,
        "sender_full_name": "Daniel James",
        "timestamp": 1699553211
    },
    {
        "content": "<p>Of course I can still do theorems that they state but don't prove</p>",
        "id": 401209856,
        "sender_full_name": "Daniel James",
        "timestamp": 1699553231
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113488-general/topic/I'd.20like.20to.20start.20from.20the.20bottom/near/401209621\">said</a>:</p>\n<blockquote>\n<p>I recommend reading <a href=\"https://leanprover.github.io/theorem_proving_in_lean4/\">#tpil</a> to understand lean from the bottom (especially chapters 2, 3, 4, 7, 8)</p>\n</blockquote>\n<p>I was definitely planning to read through/do the exercises from the book</p>",
        "id": 401210182,
        "sender_full_name": "Daniel James",
        "timestamp": 1699553366
    },
    {
        "content": "<p>If you start from the bottom then to do multivariable calculus you'll have to make the real numbers and it's probably not unreasonable to suggest that this will take many months.</p>",
        "id": 401230918,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1699561574
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113488-general/topic/I'd.20like.20to.20start.20from.20the.20bottom/near/401230918\">said</a>:</p>\n<blockquote>\n<p>If you start from the bottom then to do multivariable calculus you'll have to make the real numbers and it's probably not unreasonable to suggest that this will take many months.</p>\n</blockquote>\n<p>I don't have any real expectations about how far I'd get. I just wanted to try and see what I can get done.</p>",
        "id": 401235526,
        "sender_full_name": "Daniel James",
        "timestamp": 1699563580
    },
    {
        "content": "<p>I once tried it and got as far as making the rationals and showing they're a field, but I got exhausted checking the order axioms. So nowhere near the reals really.</p>",
        "id": 401240480,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1699565618
    },
    {
        "content": "<p>Haha ok. Well I wonât expect to get to far.</p>",
        "id": 401245102,
        "sender_full_name": "Daniel James",
        "timestamp": 1699567749
    }
]