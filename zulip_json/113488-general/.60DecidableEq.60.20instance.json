[
    {
        "content": "<p>I have a structure that's just a wrapper around a list:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[ext]</span>\n<span class=\"kd\">structure</span> <span class=\"n\">Set</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n<span class=\"n\">val</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span>\n</code></pre></div>\n<p>and I'm trying to define my own instance of decidable equality for it. I've been looking <a href=\"https://github.com/leanprover/lean4/blob/a44dd71ad62a1760e32b0e8a12449e560ddcf492/src/Init/Prelude.lean#L2205-L2205\">here</a> as a reference for the list instance definition.<br>\nThis is what I have so far: </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">Set.hasDecEq</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Decidable</span> <span class=\"o\">(</span><span class=\"n\">Eq</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">match</span> <span class=\"o\">(</span><span class=\"n\">a.val</span><span class=\"o\">,</span><span class=\"n\">b.val</span><span class=\"o\">)</span> <span class=\"k\">with</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">List.nil</span><span class=\"o\">,</span> <span class=\"n\">List.nil</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Set.ext_iff</span><span class=\"o\">]</span>\n  <span class=\"n\">apply</span> <span class=\"o\">(</span><span class=\"n\">isTrue</span> <span class=\"n\">rfl</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>which errors out with</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">tactic</span> <span class=\"bp\">'</span><span class=\"n\">apply'</span> <span class=\"n\">failed</span><span class=\"o\">,</span> <span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">unify</span>\n  <span class=\"n\">Decidable</span> <span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">m.4038</span> <span class=\"bp\">=</span> <span class=\"bp\">?</span><span class=\"n\">m.4038</span><span class=\"o\">)</span>\n<span class=\"k\">with</span>\n  <span class=\"n\">Decidable</span> <span class=\"o\">(</span><span class=\"n\">a.val</span> <span class=\"bp\">=</span> <span class=\"n\">b.val</span><span class=\"o\">)</span>\n<span class=\"n\">α</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span>\n<span class=\"n\">inst</span><span class=\"bp\">✝</span><span class=\"o\">:</span> <span class=\"n\">DecidableEq</span> <span class=\"n\">α</span>\n<span class=\"n\">ab</span><span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">Decidable</span> <span class=\"o\">(</span><span class=\"n\">a.val</span> <span class=\"bp\">=</span> <span class=\"n\">b.val</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>since lists already have decidable equality i thought this would work but it didnt. any ideas on why / suggestions to make it work? thank you :)</p>",
        "id": 372687290,
        "sender_full_name": "Bhakti Shah",
        "timestamp": 1688583112
    },
    {
        "content": "<p>Are you not happy with the deriving handler's DecidableEq instance?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">Set</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">val</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span>\n  <span class=\"n\">deriving</span> <span class=\"n\">DecidableEq</span>\n</code></pre></div>",
        "id": 372689996,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1688583769
    },
    {
        "content": "<p>I am not -- I'm trying to mimic a set and I need a non-ordered equality comparison</p>",
        "id": 372691850,
        "sender_full_name": "Bhakti Shah",
        "timestamp": 1688584252
    },
    {
        "content": "<p>Oh, then this is impossible. <code>DecidableEq</code>'s contract is that it has to calculate true equality</p>",
        "id": 372692184,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1688584326
    },
    {
        "content": "<p>In this case you need to start from a different type (perhaps involving a quotient), since <code>DecidableEq</code> is about deciding actual equality.</p>",
        "id": 372692193,
        "sender_full_name": "Reid Barton",
        "timestamp": 1688584331
    },
    {
        "content": "<p>Equality on your structure is simply equality of the underlying lists, you'll need to define your type as a quotient if you want them to behave like sets (or use a non lawful new)</p>",
        "id": 372692198,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1688584333
    },
    {
        "content": "<p>that's really unfortunate because i cant use quotients<br>\nthank you though!</p>",
        "id": 372693157,
        "sender_full_name": "Bhakti Shah",
        "timestamp": 1688584583
    },
    {
        "content": "<p>Why not?</p>",
        "id": 372693297,
        "sender_full_name": "Reid Barton",
        "timestamp": 1688584627
    },
    {
        "content": "<p>You also don't necessarily need quotients, e.g., if you can use a sorted list as the representation.</p>",
        "id": 372693398,
        "sender_full_name": "Reid Barton",
        "timestamp": 1688584654
    },
    {
        "content": "<p>I'm working with a type like </p>\n<div class=\"codehilite\" data-code-language=\"inductive\"><pre><span></span><code>| C0\n| C1 (Set T)\n</code></pre></div>\n<p>so I can never actually define the equality relation :')</p>",
        "id": 372695093,
        "sender_full_name": "Bhakti Shah",
        "timestamp": 1688585107
    },
    {
        "content": "<p>Well sure you can define it (in fact you don't even have to)--but indeed you can't decide it.</p>",
        "id": 372695507,
        "sender_full_name": "Reid Barton",
        "timestamp": 1688585224
    },
    {
        "content": "<p>(<span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span> Just to check, you're responding to their definition with their <code>Set</code> being for finite sets, not the mathlib <code>Set</code>, right?)</p>",
        "id": 372695974,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1688585363
    },
    {
        "content": "<p>oh no I am confused</p>",
        "id": 372696023,
        "sender_full_name": "Reid Barton",
        "timestamp": 1688585380
    },
    {
        "content": "<p>I meant mathlib Set of course.</p>",
        "id": 372696060,
        "sender_full_name": "Reid Barton",
        "timestamp": 1688585395
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"578936\">@Bhakti Shah</span> Would defining <code>==</code>/<code>BEq</code> instead work for your use case instead (as that does not have to correspond to actual equality)?</p>",
        "id": 372716117,
        "sender_full_name": "Mac Malone",
        "timestamp": 1688592080
    },
    {
        "content": "<p>I still don't understand why you can't use a quotient for your <code>Set</code>? e.g. something like:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">Set</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n   <span class=\"n\">val</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Set.eq</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">T</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">X.val</span> <span class=\"bp\">↔</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">Y.val</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">Set.eq_refl</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">T</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Set.eq</span> <span class=\"n\">X</span> <span class=\"n\">X</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Iff.rfl</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">Set.eq_symm</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">T</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">Set.eq</span> <span class=\"n\">X</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Set.eq</span> <span class=\"n\">Y</span> <span class=\"n\">X</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Iff.symm</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">Set.eq_trans</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">Z</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">T</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hxy</span> <span class=\"o\">:</span> <span class=\"n\">Set.eq</span> <span class=\"n\">X</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hyz</span> <span class=\"o\">:</span> <span class=\"n\">Set.eq</span> <span class=\"n\">Y</span> <span class=\"n\">Z</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Set.eq</span> <span class=\"n\">X</span> <span class=\"n\">Z</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Iff.trans</span> <span class=\"o\">(</span><span class=\"n\">hxy</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hyz</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">setoidSetT</span> <span class=\"o\">:</span> <span class=\"n\">Setoid</span> <span class=\"o\">(</span><span class=\"n\">Set</span> <span class=\"n\">T</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">Set.eq</span><span class=\"o\">,</span> <span class=\"n\">Set.eq_refl</span><span class=\"o\">,</span> <span class=\"n\">Set.eq_symm</span><span class=\"o\">,</span> <span class=\"n\">Set.eq_trans</span><span class=\"o\">⟩</span>\n<span class=\"kd\">def</span> <span class=\"n\">SetQuot</span> <span class=\"o\">(</span><span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">Quotient</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">setoidSetT</span> <span class=\"n\">T</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 373107699,
        "sender_full_name": "Andrés Goens",
        "timestamp": 1688715263
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"315577\">@Mac</span> I did define <code>BEq</code>, but not having decidable equality made proofs harder.<br>\n<span class=\"user-mention\" data-user-id=\"315434\">@Andrés Goens</span> I'm primarily using the set with [this] (<a href=\"#narrow/stream/113488-general/topic/.60DecidableEq.60.20instance/near/372695093\">https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/.60DecidableEq.60.20instance/near/372695093</a>) type and I can't use a quotient in that definition because it would require mutual induction between a function and a type declaration, which isn't supported.</p>",
        "id": 375330550,
        "sender_full_name": "Bhakti Shah",
        "timestamp": 1689353770
    },
    {
        "content": "<p>Can you give a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>? The message you link to doesn't contain actual code to construct a type</p>",
        "id": 375331001,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1689353887
    },
    {
        "content": "<p>Sure, although I changed my implementation so I don't need this anymore; purely for your exploration. </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Value</span> <span class=\"n\">where</span>\n<span class=\"bp\">|</span> <span class=\"n\">Primitive</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">Set</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">Value</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>this won't be accepted if <code>Set</code> is a quotient.</p>",
        "id": 375337407,
        "sender_full_name": "Bhakti Shah",
        "timestamp": 1689355377
    },
    {
        "content": "<p>Which of the two <code>Set</code>s are you talking about? Note the naming contention in mathlib would be <code>| set (s : Set Value)</code> to avoid this kind of confusion.</p>",
        "id": 375338639,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1689355673
    },
    {
        "content": "<p>This should allow you to prove <code>DecidableEq Value</code> without too much work</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Value</span> <span class=\"n\">where</span>\n<span class=\"bp\">|</span> <span class=\"n\">primitive</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">Value</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">DecidablePred</span> <span class=\"o\">(</span><span class=\"bp\">\\</span><span class=\"n\">mem</span> <span class=\"n\">s</span><span class=\"o\">)]</span>\n</code></pre></div>",
        "id": 375338839,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1689355712
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> The discussion so far is that <code>Set</code> is meant to be a finite set</p>",
        "id": 375340569,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1689356142
    },
    {
        "content": "<p>Oops, I thought this was <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Set#doc\">docs#Set</a></p>",
        "id": 375343170,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1689356740
    },
    {
        "content": "<p>sorry, should have been clearer!</p>",
        "id": 375345417,
        "sender_full_name": "Bhakti Shah",
        "timestamp": 1689357321
    }
]