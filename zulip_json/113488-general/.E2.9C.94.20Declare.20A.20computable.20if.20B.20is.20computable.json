[
    {
        "content": "<p>Suppose I have a definition <code>A</code> which is in general not computable (for example <code>noncomputable def A (x : R) : Int := if x = 42 then 3 else 0</code> where <code>R</code> is a general ring). Under certain conditions it becomes computable (for example if the <code>=</code> on <code>R</code> is decidable (?), e.g. ring of integers, or field of rational numbers). How can I achieve this in Lean?</p>",
        "id": 377906833,
        "sender_full_name": "Jz Pan",
        "timestamp": 1690138597
    },
    {
        "content": "<p>define <code>A</code> with a <code>DecidableEq R</code> assumption</p>",
        "id": 377906957,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1690138637
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113488-general/topic/Declare.20A.20computable.20if.20B.20is.20computable/near/377906957\">said</a>:</p>\n<blockquote>\n<p>define <code>A</code> with a <code>DecidableEq R</code> assumption</p>\n</blockquote>\n<p>This works, but I also want a noncomputable version for a ring <code>R</code> which has no <code>DecidableEq</code>. It must have a name different from <code>A</code>, right?</p>\n<p>Moreover, in my application the <code>A</code> is not simply a def but a typeclass instance (to be precise, elliptic curves over a field is inhabited, by constructing an elliptic curve with specified j-invariant, which is noncomputable unless the field have <code>DecidableEq</code>). So if I define two <code>A</code>s (one is computable, another one is general) isn't it introduce diamond problem?</p>",
        "id": 377909856,
        "sender_full_name": "Jz Pan",
        "timestamp": 1690139345
    },
    {
        "content": "<p>you would use <code>A</code> with a noncomputable <code>DecidableEq</code> instance in that case</p>",
        "id": 377909992,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1690139383
    },
    {
        "content": "<p>Thanks, it works. More precisely I need <code>open scoped Classical</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">CommRing</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">A</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Int</span> <span class=\"o\">:=</span> <span class=\"k\">if</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">42</span> <span class=\"k\">then</span> <span class=\"mi\">3</span> <span class=\"k\">else</span> <span class=\"mi\">0</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">scoped</span> <span class=\"n\">Classical</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">test</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Int</span> <span class=\"o\">:=</span> <span class=\"n\">A</span> <span class=\"n\">x</span>\n</code></pre></div>",
        "id": 377911038,
        "sender_full_name": "Jz Pan",
        "timestamp": 1690139613
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"366779\">Jz Pan</span> has marked this topic as resolved.</p>",
        "id": 377911239,
        "sender_full_name": "Notification Bot",
        "timestamp": 1690139649
    }
]