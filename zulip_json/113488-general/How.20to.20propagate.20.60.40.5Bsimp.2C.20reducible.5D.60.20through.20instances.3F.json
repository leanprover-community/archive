[
    {
        "content": "<p>Why does Lean 4 ignore <code>@[simp, reducible]</code> in this case? </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Cow</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n <span class=\"bp\">|</span> <span class=\"n\">tail</span> <span class=\"o\">:</span> <span class=\"n\">Cow</span> <span class=\"n\">α</span>\n <span class=\"bp\">|</span> <span class=\"n\">horn</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">Cow</span> <span class=\"n\">α</span>\n\n<span class=\"kd\">@[simp, reducible]</span>\n<span class=\"kd\">def</span> <span class=\"n\">Cow.le</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">LE</span> <span class=\"n\">α</span><span class=\"o\">]:</span> <span class=\"n\">Cow</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">Cow</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">match</span> <span class=\"n\">x</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">tail</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">true</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">horn</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"k\">match</span> <span class=\"n\">y</span> <span class=\"k\">with</span>\n      <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">tail</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">false</span>\n      <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">horn</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">CowLT</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">LE</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">LE</span> <span class=\"o\">(</span><span class=\"n\">Cow</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">le</span> <span class=\"o\">:=</span> <span class=\"n\">Cow.le</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">Cow.moo</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">LE</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">horn</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">horn</span> <span class=\"n\">y</span> <span class=\"bp\">→</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"c1\">-- this does not work</span>\n</code></pre></div>\n<p>If I replace <code>horn x ≤ horn y</code> in the lemma with <code>Cow.le</code> then <code>by simp</code> works.</p>",
        "id": 348007430,
        "sender_full_name": "Andrej Bauer",
        "timestamp": 1681038583
    },
    {
        "content": "<p>You presumably need to mark CowLT [sic] reducible too</p>",
        "id": 348016660,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1681041935
    },
    {
        "content": "<p>Ah yes, that works. But what if the instance had many fields,  can I annotate only some of them?</p>",
        "id": 348040960,
        "sender_full_name": "Andrej Bauer",
        "timestamp": 1681050221
    },
    {
        "content": "<p>What's the motivation for making it reducible?</p>",
        "id": 348044440,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1681051356
    },
    {
        "content": "<p>I suspect I don't understand when <code>reducible</code> should be used.</p>",
        "id": 348044567,
        "sender_full_name": "Andrej Bauer",
        "timestamp": 1681051405
    },
    {
        "content": "<p>I'm not sure many people do; it's use pretty sparingly and somewhat arbitrarily in mathlib</p>",
        "id": 348044729,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1681051450
    },
    {
        "content": "<p>Most of the time it's only used to alias a function or type with another name</p>",
        "id": 348044803,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1681051479
    },
    {
        "content": "<p>I don't know if there are any places where it is used on instances.</p>",
        "id": 348044859,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1681051503
    },
    {
        "content": "<p>Incidentally, your <code>Cow</code> looks like <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=WithBot#doc\">docs4#WithBot</a></p>",
        "id": 348045062,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1681051565
    },
    {
        "content": "<p>Yes, I know, I wanted a self-contained example. It's more polite that way.</p>",
        "id": 348074055,
        "sender_full_name": "Andrej Bauer",
        "timestamp": 1681063446
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"345260\">Andrej Bauer</span> <a href=\"#narrow/stream/113488-general/topic/How.20to.20propagate.20.60.40.5Bsimp.2C.20reducible.5D.60.20through.20instances.3F/near/348040960\">said</a>:</p>\n<blockquote>\n<p>Ah yes, that works. But what if the instance had many fields,  can I annotate only some of them?</p>\n</blockquote>\n<p>You can mark the instance as reducible and make all but some of the fields defined in terms of a not-<code>reducible</code> implementation</p>",
        "id": 348074834,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1681063788
    },
    {
        "content": "<p>One thing you can do is put <code>@[simp]</code> on the instance (no need for <code>reducible</code> anywhere), though it's not clear to me whether this is the correct design.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Std.Logic</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">Cow</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n <span class=\"bp\">|</span> <span class=\"n\">tail</span> <span class=\"o\">:</span> <span class=\"n\">Cow</span> <span class=\"n\">α</span>\n <span class=\"bp\">|</span> <span class=\"n\">horn</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">Cow</span> <span class=\"n\">α</span>\n\n<span class=\"kd\">@[simp]</span>\n<span class=\"kd\">def</span> <span class=\"n\">Cow.le</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">LE</span> <span class=\"n\">α</span><span class=\"o\">]:</span> <span class=\"n\">Cow</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">Cow</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">match</span> <span class=\"n\">x</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">tail</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">true</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">horn</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"k\">match</span> <span class=\"n\">y</span> <span class=\"k\">with</span>\n      <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">tail</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">false</span>\n      <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">horn</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span>\n\n<span class=\"kd\">@[simp]</span>\n<span class=\"kd\">instance</span> <span class=\"n\">CowLT</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">LE</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">LE</span> <span class=\"o\">(</span><span class=\"n\">Cow</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">le</span> <span class=\"o\">:=</span> <span class=\"n\">Cow.le</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">Cow.moo</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">LE</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">horn</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">horn</span> <span class=\"n\">y</span> <span class=\"bp\">→</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span>\n</code></pre></div>",
        "id": 348088608,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1681071919
    },
    {
        "content": "<p>A problem with this is that <code>simp</code> will always turn <code>LE</code> for <code>Cow</code> into <code>Cow.le</code>, which isn't great. Another solution, which isn't great but at least limits the scope, is to not use <code>@[simp]</code> and instead give <code>simp</code> the definitions manually.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">Cow.moo</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">LE</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">horn</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">horn</span> <span class=\"n\">y</span> <span class=\"bp\">→</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">LE.le</span><span class=\"o\">,</span> <span class=\"n\">Cow.le</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 348088904,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1681072109
    }
]