[
    {
        "content": "<p>The following snippet does not compile: <code>unexpected occurrence of recursive function</code></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">height</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">id</span> <span class=\"n\">height</span> <span class=\"n\">n</span>\n</pre></div>\n\n\n<p>I am very disturbed!</p>",
        "id": 167936797,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1560338838
    },
    {
        "content": "<p>Did you mean <code>id height n</code> (which is <code>(id height) n</code>, of course) or <code>id (height n)</code>?  I am not surprised that the former fails.</p>",
        "id": 167937146,
        "sender_full_name": "Neil Strickland",
        "timestamp": 1560339237
    },
    {
        "content": "<p>I mean't the former---why is it expected that it fails?</p>",
        "id": 167937362,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1560339413
    },
    {
        "content": "<p>It wouldn't be so great if you instead had <code>id' height n</code> where <code>id' f n := f (n+1)</code></p>",
        "id": 167937423,
        "sender_full_name": "Reid Barton",
        "timestamp": 1560339467
    },
    {
        "content": "<p>So basically you're asking Lean to reduce the right hand side before attempting to determine whether it is syntactically a valid recursive call</p>",
        "id": 167937512,
        "sender_full_name": "Reid Barton",
        "timestamp": 1560339517
    },
    {
        "content": "<p>Sure, but normally when this happens we get <code>could not prove recursive application is decreasing well-founded relation</code> (or something like that I'm just remembering), and instead this time it seems like lean just goes \"nope not even trying this time\".</p>",
        "id": 167937549,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1560339554
    },
    {
        "content": "<p>Well because you don't even have an application of <code>height</code></p>",
        "id": 167937564,
        "sender_full_name": "Reid Barton",
        "timestamp": 1560339571
    },
    {
        "content": "<p>aha! ok. Thanks! :)</p>",
        "id": 167937644,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1560339633
    }
]