[
    {
        "content": "<p>Is there a way to do this without assuming that the type <code>D</code> has decidable equality?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"n\">type</span> <span class=\"kd\">class</span> <span class=\"kd\">instance</span> <span class=\"n\">for</span>\n<span class=\"n\">D</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">,</span>\n<span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"n\">interpretation</span> <span class=\"n\">D</span><span class=\"o\">,</span>\n<span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"n\">valuation</span> <span class=\"n\">D</span><span class=\"o\">,</span>\n<span class=\"n\">τ</span> <span class=\"o\">:</span> <span class=\"n\">string</span> <span class=\"bp\">→</span> <span class=\"n\">string</span><span class=\"o\">,</span>\n<span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">formula</span><span class=\"o\">,</span>\n<span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">string</span><span class=\"o\">,</span>\n<span class=\"n\">xs</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">D</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">decidable</span> <span class=\"o\">(</span><span class=\"n\">xs</span> <span class=\"bp\">=</span> <span class=\"n\">list.nil</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 357767755,
        "sender_full_name": "Kayla Thomas",
        "timestamp": 1683873203
    },
    {
        "content": "<p>Yes you can make that work, from the looks of your code I am guessing you are doing Lean 3 which I do not have around right now but the Lean 4 instance would look like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">{</span><span class=\"n\">xs</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">Decidable</span> <span class=\"o\">(</span><span class=\"n\">xs</span> <span class=\"bp\">=</span> <span class=\"o\">[])</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">xs</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">isTrue</span> <span class=\"n\">rfl</span>\n  <span class=\"bp\">|</span> <span class=\"n\">y</span> <span class=\"o\">::</span> <span class=\"n\">ys</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">isFalse</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">intro</span><span class=\"bp\">;</span> <span class=\"n\">injections</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 357768420,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1683873441
    },
    {
        "content": "<p>Thank you!</p>",
        "id": 357768575,
        "sender_full_name": "Kayla Thomas",
        "timestamp": 1683873499
    },
    {
        "content": "<p>I also just realized that <code>if (xs = list.nil) = tt</code> seems to work.</p>",
        "id": 357768740,
        "sender_full_name": "Kayla Thomas",
        "timestamp": 1683873579
    },
    {
        "content": "<p>instead of <code>if xs = list.nil</code></p>",
        "id": 357768837,
        "sender_full_name": "Kayla Thomas",
        "timestamp": 1683873606
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"139442\">Kayla Thomas</span> has marked this topic as resolved.</p>",
        "id": 357769028,
        "sender_full_name": "Notification Bot",
        "timestamp": 1683873714
    },
    {
        "content": "<p>You'll probably have more fun with a straight <code>match</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">match</span> <span class=\"n\">xs</span> <span class=\"k\">with</span>\n<span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">...</span>\n<span class=\"bp\">|</span> <span class=\"n\">x</span> <span class=\"o\">::</span> <span class=\"n\">xs</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">...</span>\n</code></pre></div>",
        "id": 357819877,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1683886610
    },
    {
        "content": "<p>The instance you're asking for is deliberately omitted from mathlib as I believe it would cause a diamond</p>",
        "id": 357821907,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1683887117
    },
    {
        "content": "<p>What does cause a diamond mean?</p>",
        "id": 365241266,
        "sender_full_name": "Kayla Thomas",
        "timestamp": 1686462959
    },
    {
        "content": "<p>Have I done something wrong to need this instance?</p>",
        "id": 365241956,
        "sender_full_name": "Kayla Thomas",
        "timestamp": 1686463335
    },
    {
        "content": "<p>A <a href=\"https://en.wikipedia.org/wiki/Multiple_inheritance\">diamond</a> is when a typeclass derives from another in multiple ways.</p>",
        "id": 365242371,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1686463579
    },
    {
        "content": "<p>Thank you.</p>",
        "id": 365242455,
        "sender_full_name": "Kayla Thomas",
        "timestamp": 1686463634
    }
]