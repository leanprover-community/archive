[
    {
        "content": "<p>I was attempting to define the permutation of terms that could be used to prove the Riemann Series Theorem. This permutation is defined inductively, and in each step a natural number corresponding to the smallest nonnegative or negative term (depending on the sum up to this point) is returned. I use <code>nat.find</code>, which requires an existence proof.<br>\nI would like to be able to use this existence proof both inside and outside of the definition of the recursive function. The simplest way to do this is just to copy and paste the proofs outside the definition, which is not too bad in this case because the proofs are only about 5 lines each. However, in general, is there a better way of doing this that doesn't require duplicating the proof?</p>\n<p>Here's what the definition looks like currently:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">topology.algebra.ring.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.big_operators.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">order.filter.at_top_bot</span>\n<span class=\"kn\">import</span> <span class=\"n\">analysis.specific_limits.normed</span>\n<span class=\"kn\">import</span> <span class=\"n\">topology.metric_space.cau_seq_filter</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">open</span> <span class=\"n\">filter</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">big_operators</span> <span class=\"n\">topology</span>\n\n<span class=\"kd\">universe</span> <span class=\"n\">u</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">partial_sum</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">add_comm_monoid</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">∑</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"n\">finset.range</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">rearrangement</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">C</span><span class=\"o\">,</span> <span class=\"n\">tendsto</span> <span class=\"o\">(</span><span class=\"n\">partial_sum</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"n\">at_top</span> <span class=\"o\">(</span><span class=\"bp\">𝓝</span> <span class=\"n\">C</span><span class=\"o\">))</span>\n  <span class=\"o\">(</span><span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"bp\">¬∃</span> <span class=\"n\">C</span><span class=\"o\">,</span> <span class=\"n\">tendsto</span> <span class=\"o\">(</span><span class=\"n\">partial_sum</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"bp\">‖</span><span class=\"n\">a</span> <span class=\"n\">n</span><span class=\"bp\">‖</span><span class=\"o\">))</span> <span class=\"n\">at_top</span> <span class=\"o\">(</span><span class=\"bp\">𝓝</span> <span class=\"n\">C</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"k\">if</span> <span class=\"bp\">∑</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"k\">in</span> <span class=\"n\">finset.univ</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">rearrangement</span> <span class=\"bp\">↑</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"n\">M</span> <span class=\"k\">then</span>\n    <span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">k</span> <span class=\"bp\">∉</span> <span class=\"n\">set.range</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"n\">rearrangement</span> <span class=\"bp\">↑</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span> <span class=\"n\">k</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n    <span class=\"n\">nat.find</span> <span class=\"n\">h</span>\n  <span class=\"k\">else</span>\n    <span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">k</span> <span class=\"bp\">∉</span> <span class=\"n\">set.range</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"n\">rearrangement</span> <span class=\"bp\">↑</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"n\">a</span> <span class=\"n\">k</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n    <span class=\"n\">nat.find</span> <span class=\"n\">h</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">exists_nonneg_terms_not_in_range_fin_rearrangement</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">C</span><span class=\"o\">,</span> <span class=\"n\">tendsto</span> <span class=\"o\">(</span><span class=\"n\">partial_sum</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"n\">at_top</span> <span class=\"o\">(</span><span class=\"bp\">𝓝</span> <span class=\"n\">C</span><span class=\"o\">))</span>\n  <span class=\"o\">(</span><span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"bp\">¬∃</span> <span class=\"n\">C</span><span class=\"o\">,</span> <span class=\"n\">tendsto</span> <span class=\"o\">(</span><span class=\"n\">partial_sum</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"bp\">‖</span><span class=\"n\">a</span> <span class=\"n\">n</span><span class=\"bp\">‖</span><span class=\"o\">))</span> <span class=\"n\">at_top</span> <span class=\"o\">(</span><span class=\"bp\">𝓝</span> <span class=\"n\">C</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n  <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">k</span> <span class=\"bp\">∉</span> <span class=\"n\">set.range</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"n\">rearrangement</span> <span class=\"n\">h₁</span> <span class=\"n\">h₂</span> <span class=\"n\">M</span> <span class=\"bp\">↑</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span> <span class=\"n\">k</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">exists_neg_terms_not_in_range_fin_rearrangement</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">C</span><span class=\"o\">,</span> <span class=\"n\">tendsto</span> <span class=\"o\">(</span><span class=\"n\">partial_sum</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"n\">at_top</span> <span class=\"o\">(</span><span class=\"bp\">𝓝</span> <span class=\"n\">C</span><span class=\"o\">))</span>\n  <span class=\"o\">(</span><span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"bp\">¬∃</span> <span class=\"n\">C</span><span class=\"o\">,</span> <span class=\"n\">tendsto</span> <span class=\"o\">(</span><span class=\"n\">partial_sum</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"bp\">‖</span><span class=\"n\">a</span> <span class=\"n\">n</span><span class=\"bp\">‖</span><span class=\"o\">))</span> <span class=\"n\">at_top</span> <span class=\"o\">(</span><span class=\"bp\">𝓝</span> <span class=\"n\">C</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n  <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">k</span> <span class=\"bp\">∉</span> <span class=\"n\">set.range</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"n\">rearrangement</span> <span class=\"n\">h₁</span> <span class=\"n\">h₂</span> <span class=\"n\">M</span> <span class=\"bp\">↑</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"n\">a</span> <span class=\"n\">k</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>Here's my current attempt to do this with mutual definitions, which currently gives the message <code>ill-formed match/equations expression</code></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">mutual</span> <span class=\"kd\">def</span> <span class=\"n\">rearrangement</span><span class=\"o\">,</span> <span class=\"n\">exists_nonneg</span><span class=\"o\">,</span> <span class=\"n\">exists_neg</span>\n  <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">C</span><span class=\"o\">,</span> <span class=\"n\">tendsto</span> <span class=\"o\">(</span><span class=\"n\">partial_sum</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"n\">at_top</span> <span class=\"o\">(</span><span class=\"bp\">𝓝</span> <span class=\"n\">C</span><span class=\"o\">))</span>\n  <span class=\"o\">(</span><span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"bp\">¬∃</span> <span class=\"n\">C</span><span class=\"o\">,</span> <span class=\"n\">tendsto</span> <span class=\"o\">(</span><span class=\"n\">partial_sum</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"bp\">‖</span><span class=\"n\">a</span> <span class=\"n\">n</span><span class=\"bp\">‖</span><span class=\"o\">))</span> <span class=\"n\">at_top</span> <span class=\"o\">(</span><span class=\"bp\">𝓝</span> <span class=\"n\">C</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n<span class=\"k\">with</span> <span class=\"n\">rearrangement</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"k\">if</span> <span class=\"bp\">∑</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"k\">in</span> <span class=\"n\">finset.univ</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">rearrangement</span> <span class=\"bp\">↑</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"n\">M</span> <span class=\"k\">then</span>\n    <span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">k</span> <span class=\"bp\">∉</span> <span class=\"n\">set.range</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"n\">rearrangement</span> <span class=\"bp\">↑</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span> <span class=\"n\">k</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n    <span class=\"n\">nat.find</span> <span class=\"n\">h</span>\n  <span class=\"k\">else</span>\n    <span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">k</span> <span class=\"bp\">∉</span> <span class=\"n\">set.range</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"n\">rearrangement</span> <span class=\"bp\">↑</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"n\">a</span> <span class=\"n\">k</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n    <span class=\"n\">nat.find</span> <span class=\"n\">h</span>\n<span class=\"k\">with</span> <span class=\"n\">exists_nonneg</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">k</span> <span class=\"bp\">∉</span> <span class=\"n\">set.range</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"n\">rearrangement</span> <span class=\"bp\">↑</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span> <span class=\"n\">k</span>\n<span class=\"bp\">|</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"k\">with</span> <span class=\"n\">exists_neg</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">k</span> <span class=\"bp\">∉</span> <span class=\"n\">set.range</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"n\">rearrangement</span> <span class=\"bp\">↑</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"n\">a</span> <span class=\"n\">k</span> <span class=\"bp\">≤</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 358189008,
        "sender_full_name": "Niels Voss",
        "timestamp": 1684026638
    },
    {
        "content": "<p>Since your definition is noncomputable, you don't need to use <code>nat.find</code> (which is a specific algorithm for computing an infimum) and you can use <code>Inf</code> instead, which also defaults to <code>0</code> if the set is empty so it avoids your needing to provide an existence proof to use it.</p>\n<p>Something like this (untested):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">rearrangement</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">C</span><span class=\"o\">,</span> <span class=\"n\">tendsto</span> <span class=\"o\">(</span><span class=\"n\">partial_sum</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"n\">at_top</span> <span class=\"o\">(</span><span class=\"bp\">𝓝</span> <span class=\"n\">C</span><span class=\"o\">))</span>\n  <span class=\"o\">(</span><span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"bp\">¬∃</span> <span class=\"n\">C</span><span class=\"o\">,</span> <span class=\"n\">tendsto</span> <span class=\"o\">(</span><span class=\"n\">partial_sum</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"bp\">‖</span><span class=\"n\">a</span> <span class=\"n\">n</span><span class=\"bp\">‖</span><span class=\"o\">))</span> <span class=\"n\">at_top</span> <span class=\"o\">(</span><span class=\"bp\">𝓝</span> <span class=\"n\">C</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"k\">if</span> <span class=\"bp\">∑</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">rearrangement</span> <span class=\"bp\">↑</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"n\">M</span> <span class=\"k\">then</span>\n    <span class=\"n\">Inf</span> <span class=\"o\">{</span><span class=\"n\">k</span> <span class=\"bp\">|</span> <span class=\"n\">k</span> <span class=\"bp\">∉</span> <span class=\"n\">set.range</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"n\">rearrangement</span> <span class=\"bp\">↑</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span> <span class=\"n\">k</span><span class=\"o\">}</span>\n  <span class=\"k\">else</span>\n    <span class=\"n\">Inf</span> <span class=\"o\">{</span><span class=\"n\">k</span> <span class=\"bp\">|</span> <span class=\"n\">k</span> <span class=\"bp\">∉</span> <span class=\"n\">set.range</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"n\">rearrangement</span> <span class=\"bp\">↑</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"n\">a</span> <span class=\"n\">k</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">0</span><span class=\"o\">}</span>\n</code></pre></div>\n<p>There's <a href=\"https://leanprover-community.github.io/mathlib_docs/find/nat.Inf_def\">docs#nat.Inf_def</a> if you need to convert between <code>Inf</code> and <code>nat.find</code> in proofs.</p>",
        "id": 358224698,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1684056261
    },
    {
        "content": "<p>That's a good idea. One advantage of it is that I can now remove the h1 and h2 from the definition (since I know that complicated hypotheses in definitions are sometimes discouraged). In general I guess I could also just use an <code>if</code> statement and prove outside the function that the if statement will never be false.</p>",
        "id": 358282817,
        "sender_full_name": "Niels Voss",
        "timestamp": 1684080377
    },
    {
        "content": "<p>I think it worked. Here are the revised definitions. They are a bit long but I don't really know how to shorten them.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">rearrangement</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"k\">if</span> <span class=\"bp\">∑</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"k\">in</span> <span class=\"n\">finset.univ</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">rearrangement</span> <span class=\"bp\">↑</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"n\">M</span> <span class=\"k\">then</span>\n    <span class=\"n\">Inf</span> <span class=\"o\">{</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">|</span> <span class=\"n\">k</span> <span class=\"bp\">∉</span> <span class=\"n\">set.range</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"n\">rearrangement</span> <span class=\"bp\">↑</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span> <span class=\"n\">k</span><span class=\"o\">}</span>\n  <span class=\"k\">else</span>\n    <span class=\"n\">Inf</span> <span class=\"o\">{</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">|</span> <span class=\"n\">k</span> <span class=\"bp\">∉</span> <span class=\"n\">set.range</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"n\">rearrangement</span> <span class=\"bp\">↑</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"n\">a</span> <span class=\"n\">k</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">0</span><span class=\"o\">}</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">exists_nonneg_terms_not_in_range_fin_rearrangement</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">C</span><span class=\"o\">,</span> <span class=\"n\">tendsto</span> <span class=\"o\">(</span><span class=\"n\">partial_sum</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"n\">at_top</span> <span class=\"o\">(</span><span class=\"bp\">𝓝</span> <span class=\"n\">C</span><span class=\"o\">))</span>\n  <span class=\"o\">(</span><span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"bp\">¬∃</span> <span class=\"n\">C</span><span class=\"o\">,</span> <span class=\"n\">tendsto</span> <span class=\"o\">(</span><span class=\"n\">partial_sum</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"bp\">‖</span><span class=\"n\">a</span> <span class=\"n\">n</span><span class=\"bp\">‖</span><span class=\"o\">))</span> <span class=\"n\">at_top</span> <span class=\"o\">(</span><span class=\"bp\">𝓝</span> <span class=\"n\">C</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n  <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">k</span> <span class=\"bp\">∉</span> <span class=\"n\">set.range</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"n\">rearrangement</span> <span class=\"n\">a</span> <span class=\"n\">M</span> <span class=\"bp\">↑</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span> <span class=\"n\">k</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">exists_neg_terms_not_in_range_fin_rearrangement</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">C</span><span class=\"o\">,</span> <span class=\"n\">tendsto</span> <span class=\"o\">(</span><span class=\"n\">partial_sum</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"n\">at_top</span> <span class=\"o\">(</span><span class=\"bp\">𝓝</span> <span class=\"n\">C</span><span class=\"o\">))</span>\n  <span class=\"o\">(</span><span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"bp\">¬∃</span> <span class=\"n\">C</span><span class=\"o\">,</span> <span class=\"n\">tendsto</span> <span class=\"o\">(</span><span class=\"n\">partial_sum</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"bp\">‖</span><span class=\"n\">a</span> <span class=\"n\">n</span><span class=\"bp\">‖</span><span class=\"o\">))</span> <span class=\"n\">at_top</span> <span class=\"o\">(</span><span class=\"bp\">𝓝</span> <span class=\"n\">C</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n  <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">k</span> <span class=\"bp\">∉</span> <span class=\"n\">set.range</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"n\">rearrangement</span> <span class=\"n\">a</span> <span class=\"n\">M</span> <span class=\"bp\">↑</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"n\">a</span> <span class=\"n\">k</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">rearrangement_def</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">C</span><span class=\"o\">,</span> <span class=\"n\">tendsto</span> <span class=\"o\">(</span><span class=\"n\">partial_sum</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"n\">at_top</span> <span class=\"o\">(</span><span class=\"bp\">𝓝</span> <span class=\"n\">C</span><span class=\"o\">))</span>\n  <span class=\"o\">(</span><span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"bp\">¬∃</span> <span class=\"n\">C</span><span class=\"o\">,</span> <span class=\"n\">tendsto</span> <span class=\"o\">(</span><span class=\"n\">partial_sum</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"bp\">‖</span><span class=\"n\">a</span> <span class=\"n\">n</span><span class=\"bp\">‖</span><span class=\"o\">))</span> <span class=\"n\">at_top</span> <span class=\"o\">(</span><span class=\"bp\">𝓝</span> <span class=\"n\">C</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n  <span class=\"o\">:</span> <span class=\"n\">rearrangement</span> <span class=\"n\">a</span> <span class=\"n\">M</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span>\n    <span class=\"k\">if</span> <span class=\"bp\">∑</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"k\">in</span> <span class=\"n\">finset.univ</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">rearrangement</span> <span class=\"n\">a</span> <span class=\"n\">M</span> <span class=\"bp\">↑</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"n\">M</span> <span class=\"k\">then</span>\n      <span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">k</span> <span class=\"bp\">∉</span> <span class=\"n\">set.range</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"n\">rearrangement</span> <span class=\"n\">a</span> <span class=\"n\">M</span> <span class=\"bp\">↑</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span> <span class=\"n\">k</span><span class=\"o\">,</span>\n      <span class=\"k\">from</span> <span class=\"n\">exists_nonneg_terms_not_in_range_fin_rearrangement</span> <span class=\"n\">h₁</span> <span class=\"n\">h₂</span> <span class=\"n\">M</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n      <span class=\"n\">nat.find</span> <span class=\"n\">h</span>\n    <span class=\"k\">else</span>\n      <span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">k</span> <span class=\"bp\">∉</span> <span class=\"n\">set.range</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"n\">rearrangement</span> <span class=\"n\">a</span> <span class=\"n\">M</span> <span class=\"bp\">↑</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"n\">a</span> <span class=\"n\">k</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n      <span class=\"k\">from</span> <span class=\"n\">exists_neg_terms_not_in_range_fin_rearrangement</span> <span class=\"n\">h₁</span> <span class=\"n\">h₂</span> <span class=\"n\">M</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n      <span class=\"n\">nat.find</span> <span class=\"n\">h</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">rearrangement</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">nat.Inf_def</span> <span class=\"o\">(</span><span class=\"k\">show</span> <span class=\"n\">set.nonempty</span> <span class=\"o\">{</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">|</span> <span class=\"n\">k</span> <span class=\"bp\">∉</span> <span class=\"n\">set.range</span>\n    <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"n\">rearrangement</span> <span class=\"n\">a</span> <span class=\"n\">M</span> <span class=\"bp\">↑</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span> <span class=\"n\">k</span><span class=\"o\">},</span>\n      <span class=\"k\">from</span> <span class=\"n\">exists_nonneg_terms_not_in_range_fin_rearrangement</span> <span class=\"n\">h₁</span> <span class=\"n\">h₂</span> <span class=\"n\">M</span> <span class=\"n\">n</span><span class=\"o\">),</span>\n  <span class=\"n\">rw</span> <span class=\"n\">nat.Inf_def</span> <span class=\"o\">(</span><span class=\"k\">show</span> <span class=\"n\">set.nonempty</span> <span class=\"o\">{</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">|</span> <span class=\"n\">k</span> <span class=\"bp\">∉</span> <span class=\"n\">set.range</span>\n    <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"n\">rearrangement</span> <span class=\"n\">a</span> <span class=\"n\">M</span> <span class=\"bp\">↑</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"n\">a</span> <span class=\"n\">k</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">0</span><span class=\"o\">},</span>\n      <span class=\"k\">from</span> <span class=\"n\">exists_neg_terms_not_in_range_fin_rearrangement</span> <span class=\"n\">h₁</span> <span class=\"n\">h₂</span> <span class=\"n\">M</span> <span class=\"n\">n</span><span class=\"o\">),</span>\n  <span class=\"n\">simp</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">rearrangement_nonneg</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">C</span><span class=\"o\">,</span> <span class=\"n\">tendsto</span> <span class=\"o\">(</span><span class=\"n\">partial_sum</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"n\">at_top</span> <span class=\"o\">(</span><span class=\"bp\">𝓝</span> <span class=\"n\">C</span><span class=\"o\">))</span>\n  <span class=\"o\">(</span><span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"bp\">¬∃</span> <span class=\"n\">C</span><span class=\"o\">,</span> <span class=\"n\">tendsto</span> <span class=\"o\">(</span><span class=\"n\">partial_sum</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"bp\">‖</span><span class=\"n\">a</span> <span class=\"n\">n</span><span class=\"bp\">‖</span><span class=\"o\">))</span> <span class=\"n\">at_top</span> <span class=\"o\">(</span><span class=\"bp\">𝓝</span> <span class=\"n\">C</span><span class=\"o\">))</span> <span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∑</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"k\">in</span> <span class=\"n\">finset.univ</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">rearrangement</span> <span class=\"n\">a</span> <span class=\"n\">M</span> <span class=\"bp\">↑</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"n\">M</span><span class=\"o\">)</span>\n  <span class=\"o\">:</span> <span class=\"n\">rearrangement</span> <span class=\"n\">a</span> <span class=\"n\">M</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span>\n    <span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">k</span> <span class=\"bp\">∉</span> <span class=\"n\">set.range</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"n\">rearrangement</span> <span class=\"n\">a</span> <span class=\"n\">M</span> <span class=\"bp\">↑</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span> <span class=\"n\">k</span><span class=\"o\">,</span>\n    <span class=\"k\">from</span> <span class=\"n\">exists_nonneg_terms_not_in_range_fin_rearrangement</span> <span class=\"n\">h₁</span> <span class=\"n\">h₂</span> <span class=\"n\">M</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n    <span class=\"n\">nat.find</span> <span class=\"n\">h</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">rearrangement_def</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">if_pos</span> <span class=\"n\">h</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">rearrangement_neg</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">C</span><span class=\"o\">,</span> <span class=\"n\">tendsto</span> <span class=\"o\">(</span><span class=\"n\">partial_sum</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"n\">at_top</span> <span class=\"o\">(</span><span class=\"bp\">𝓝</span> <span class=\"n\">C</span><span class=\"o\">))</span>\n  <span class=\"o\">(</span><span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"bp\">¬∃</span> <span class=\"n\">C</span><span class=\"o\">,</span> <span class=\"n\">tendsto</span> <span class=\"o\">(</span><span class=\"n\">partial_sum</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"bp\">‖</span><span class=\"n\">a</span> <span class=\"n\">n</span><span class=\"bp\">‖</span><span class=\"o\">))</span> <span class=\"n\">at_top</span> <span class=\"o\">(</span><span class=\"bp\">𝓝</span> <span class=\"n\">C</span><span class=\"o\">))</span> <span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">&lt;</span> <span class=\"bp\">∑</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"k\">in</span> <span class=\"n\">finset.univ</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">rearrangement</span> <span class=\"n\">a</span> <span class=\"n\">M</span> <span class=\"bp\">↑</span><span class=\"n\">x</span><span class=\"o\">))</span>\n  <span class=\"o\">:</span> <span class=\"n\">rearrangement</span> <span class=\"n\">a</span> <span class=\"n\">M</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span>\n    <span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">k</span> <span class=\"bp\">∉</span> <span class=\"n\">set.range</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"n\">rearrangement</span> <span class=\"n\">a</span> <span class=\"n\">M</span> <span class=\"bp\">↑</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"n\">a</span> <span class=\"n\">k</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n    <span class=\"k\">from</span> <span class=\"n\">exists_neg_terms_not_in_range_fin_rearrangement</span> <span class=\"n\">h₁</span> <span class=\"n\">h₂</span> <span class=\"n\">M</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n    <span class=\"n\">nat.find</span> <span class=\"n\">h</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">rearrangement_def</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">if_neg</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">push_neg</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">h</span> <span class=\"o\">})</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 358308105,
        "sender_full_name": "Niels Voss",
        "timestamp": 1684091393
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"521331\">Niels Voss</span> has marked this topic as resolved.</p>",
        "id": 358324826,
        "sender_full_name": "Notification Bot",
        "timestamp": 1684102592
    }
]