[
    {
        "content": "<p>Hello everyone, </p>\n<p>We (cc : <span class=\"user-mention\" data-user-id=\"470149\">@Joachim Breitner</span>  and <span class=\"user-mention\" data-user-id=\"284160\">@Eric Rodriguez</span> ) have been taking a close look at the way types are rendered, both in <a href=\"https://loogle.lean-lang.org/\">loogle</a> and <a href=\"https://marketplace.visualstudio.com/items?itemName=ShreyasSrinivas.loogle-lean\">loogle's vscode extension</a>. Currently loogle renders the full type signature of a given term. This includes implicit parameters (including types), typeclass instances, and the explicit parameters. The primary question is : Do users find this useful or cluttered? <a href=\"https://github.com/nomeata/loogle/issues/7\">How should loogle show type signatures</a>?</p>\n<p>In relation, the extension currently renders the type signature adjacent to the term name and the module name below it. It is also possible to swap their positions. In either case, when you hover the mouse over the type signature, the full signature is visible. The goal with the current design choice was to reduce clutter, especially when <a href=\"https://github.com/Shreyas4991/loogle-lean/pull/3#issuecomment-1832359668\">users turn off module names</a>. You can see the two variants in the <a href=\"https://github.com/Shreyas4991/loogle-lean/pull/3#issuecomment-1832379020\">two pictures in this comment</a>. We would like to get some feedback before making decisions on this issue as well as the PR.</p>\n<p>To this end I am creating a poll below. Please choose all your preferred options (more than one allowed).</p>",
        "id": 407453094,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1702380034
    },
    {
        "content": "<p>/poll How should loogle render types. Where should the extension render type signatures<br>\nLoogle should show only explicit parameters<br>\nLoogle should show explicit parameters and typeclass instances<br>\nLoogle should show the full type signature<br>\nThe extension should show type signatures next to the term<br>\nThe extension should show type signatures below the term<br>\nThe extension should show truncated type signatures.</p>",
        "id": 407453381,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1702380141
    },
    {
        "content": "<p>Please feel free to add options</p>",
        "id": 407453403,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1702380152
    },
    {
        "content": "<p>I think all places where a declaration is printed is very cluttered (<code>#check</code>, mouseover pop-ups, ...). The most important information is the explicit arguments, and it is not easy to see them at a glance. But I do also want to be able to see the implicit information.</p>",
        "id": 407458291,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1702381923
    },
    {
        "content": "<p>On <a href=\"https://github.com/leanprover-community/mathlib4/tree/show_cmd\">branch#show_cmd</a> I wrote a prototype command that prints declarations in a (in my opinion) cleaner format.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">#</span><span class=\"k\">show</span> <span class=\"n\">ContDiff.of_le</span> <span class=\"c\">/-</span><span class=\"cm\"> prints the following:</span>\n<span class=\"cm\">ContDiff.of_le (h : ContDiff ùïú n f) (hmn : m ‚â§ n) : ContDiff ùïú m f</span>\n<span class=\"cm\">implicits: {ùïú : Type u} {E : Type uE} {F : Type uF} {f : E ‚Üí F} {m n : ‚Ñï‚àû}</span>\n<span class=\"cm\">instances: [NontriviallyNormedField ùïú] [NormedAddCommGroup E] [NormedSpace ùïú E] [NormedAddCommGroup F] [NormedSpace ùïú F] -/</span>\n</code></pre></div>\n<p>There are some drawbacks: for example it loses information of the order of the implicit arguments, which sometimes is important.</p>",
        "id": 407458396,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1702381960
    },
    {
        "content": "<p>I guess less important now that we have <code>(a := a)</code> syntax at call sites</p>",
        "id": 407459395,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1702382334
    },
    {
        "content": "<p>true, though that doesn't worked with unnamed arguments (mostly instances)</p>",
        "id": 407459825,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1702382471
    },
    {
        "content": "<p>I keep hoping that we get automated names for instance variables (ideally less crazy than the autogenerated instance declaration names)</p>",
        "id": 407460493,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1702382692
    },
    {
        "content": "<p>because these are at the same time the most likely to be omitted and also the most likely to want to use with <code>(a := ...)</code> syntax</p>",
        "id": 407460564,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1702382724
    },
    {
        "content": "<p>I agree with the first part of your sentence, but not the second one, Mario. The most likely to be used with <code>(a := ...)</code> are</p>\n<ul>\n<li>the implicit arguments to an <code>‚Üî</code> lemma (because we do want those to be mostly implicit)</li>\n<li>the implicit arguments to a rewriting lemma that should be explicit but we're too lazy to change them</li>\n</ul>",
        "id": 407461189,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1702382935
    },
    {
        "content": "<p>One key constraint from the vscode side is that vscode's quickpick api currently doesn't allow multi-line descriptions.</p>",
        "id": 407461246,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1702382957
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"111080\">Floris van Doorn</span> <a href=\"#narrow/stream/113488-general/topic/Poll.20.3A.20Vscode.20loogle.20interface.20feedback/near/407458396\">said</a>:</p>\n<blockquote>\n<p>On <a href=\"https://github.com/leanprover-community/mathlib4/tree/show_cmd\">branch#show_cmd</a> I wrote a prototype command that prints declarations in a (in my opinion) cleaner format.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">#</span><span class=\"k\">show</span> <span class=\"n\">ContDiff.of_le</span> <span class=\"c\">/-</span><span class=\"cm\"> prints the following:</span>\n<span class=\"cm\">ContDiff.of_le (h : ContDiff ùïú n f) (hmn : m ‚â§ n) : ContDiff ùïú m f</span>\n<span class=\"cm\">implicits: {ùïú : Type u} {E : Type uE} {F : Type uF} {f : E ‚Üí F} {m n : ‚Ñï‚àû}</span>\n<span class=\"cm\">instances: [NontriviallyNormedField ùïú] [NormedAddCommGroup E] [NormedSpace ùïú E] [NormedAddCommGroup F] [NormedSpace ùïú F] -/</span>\n</code></pre></div>\n<p>There are some drawbacks: for example it loses information of the order of the implicit arguments, which sometimes is important.</p>\n</blockquote>\n<p>I think this would be a really good format to show things in for Loogle. Maybe rearranging to have instances above the implicits.</p>",
        "id": 407461493,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1702383037
    },
    {
        "content": "<blockquote>\n<p>the implicit arguments to a rewriting lemma that should be explicit but we're too lazy to change them</p>\n</blockquote>\n<p>I think \"we're too lazy\" is not a correct description here, the availability of <code>(a := ...)</code> syntax has changed the calculus regarding the cost/benefit of making an argument implicit</p>",
        "id": 407461495,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1702383037
    },
    {
        "content": "<p>I am currently exploiting the fact that it doesn't remove whitespaces to give a clutter free view like below (turn off module  names in your vscode settings)<a href=\"/user_uploads/3121/a5qWogKMx0lyfXC5kYUa-Hlp/d97401ea-27e3-4b98-aa3b-afec95cce826.png\">d97401ea-27e3-4b98-aa3b-afec95cce826.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/a5qWogKMx0lyfXC5kYUa-Hlp/d97401ea-27e3-4b98-aa3b-afec95cce826.png\" title=\"d97401ea-27e3-4b98-aa3b-afec95cce826.png\"><img src=\"/user_uploads/3121/a5qWogKMx0lyfXC5kYUa-Hlp/d97401ea-27e3-4b98-aa3b-afec95cce826.png\"></a></div>",
        "id": 407461530,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1702383052
    },
    {
        "content": "<p>I still think rewriting lemmas have no reason to have too many implicit arguments (unless they are an <code>‚Üî</code>). Also it does happen that variable names change during a refactor.</p>",
        "id": 407461740,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1702383124
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113488-general/topic/Poll.20.3A.20Vscode.20loogle.20interface.20feedback/near/407460564\">said</a>:</p>\n<blockquote>\n<p>because these are at the same time the most likely to be omitted and also the most likely to want to use with <code>(a := ...)</code> syntax</p>\n</blockquote>\n<p>It is very annoying when I want to set <code>(inst := (_))</code> in a lemma, but am forced back into the <code>@ _ _ _ _ _ _ _</code> dark ages because the name is inaccessible</p>",
        "id": 407476843,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1702388105
    },
    {
        "content": "<p>Just for my understanding, this is in cases where let-binding the instance locally would not be appropriate?</p>",
        "id": 407477299,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1702388261
    },
    {
        "content": "<p>I believe there was a proposal for <code>(\\f&lt;ClassType\\f&gt; := ...)</code> once</p>",
        "id": 407477490,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1702388313
    },
    {
        "content": "<p>It's for the case where I don't want to work out what to <code>let</code> bind, and just want to pass in literally the expression <code>(_)</code> to find it by unification</p>",
        "id": 407481427,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1702389480
    },
    {
        "content": "<p>Oh haha, I didn't scan that as literal input. Does the <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span> mean you would be happy with that proposal in this case as well?</p>",
        "id": 407481718,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1702389551
    },
    {
        "content": "<p>I never use the Loogle VSCode extension because it never shows the relevant information. It should open a panel instead of a drop-down menu.</p>",
        "id": 407486323,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1702390673
    },
    {
        "content": "<p>Currently loogle's API gives you the name of a term, the type signature and the name of the documentation. In the drop down menu all these things are already shown. I also construct a link to the docs which you can reach by clicking on the button I have circled with red ink here: <br>\n<a href=\"/user_uploads/3121/9uGnHRdlKuxzAOP6L0EPCqXk/Screenshot-2023-12-12-152020.png\">Screenshot-2023-12-12-152020.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/9uGnHRdlKuxzAOP6L0EPCqXk/Screenshot-2023-12-12-152020.png\" title=\"Screenshot-2023-12-12-152020.png\"><img src=\"/user_uploads/3121/9uGnHRdlKuxzAOP6L0EPCqXk/Screenshot-2023-12-12-152020.png\"></a></div>",
        "id": 407487197,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1702390910
    },
    {
        "content": "<p>No, they are not shown. What is shown is ...</p>",
        "id": 407487697,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1702391033
    },
    {
        "content": "<p>I believe that soon loogle's API will also offer the documentation string. Then I will create a panel that shows you the declaration.</p>",
        "id": 407487698,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1702391033
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/113488-general/topic/Poll.20.3A.20Vscode.20loogle.20interface.20feedback/near/407487697\">said</a>:</p>\n<blockquote>\n<p>No, they are not shown. What is shown is ...</p>\n</blockquote>\n<p>what are you seeing?</p>",
        "id": 407487791,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1702391048
    },
    {
        "content": "<p>Unless this changed recently.</p>",
        "id": 407487802,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1702391051
    },
    {
        "content": "<p>The documentation link has been there almost from the beginning</p>",
        "id": 407488151,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1702391159
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/8Jo_jiKKpqDZlB4SDwogYbJv/image.png\">image.png</a><br>\nContains no information whatsoever.</p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/8Jo_jiKKpqDZlB4SDwogYbJv/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/8Jo_jiKKpqDZlB4SDwogYbJv/image.png\"></a></div>",
        "id": 407489332,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1702391454
    },
    {
        "content": "<p>You can access information by clicking each link to open the doc website, but this completely defeats the purpose of the extension which was to avoid switching to a webbrowser.</p>",
        "id": 407489710,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1702391532
    },
    {
        "content": "<p>And you need to retype the query for each new item you want to check (since no information allows you to know which item you should check out).</p>",
        "id": 407489820,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1702391565
    },
    {
        "content": "<p>So this extension was a good idea but it is currently completely useless as far as I can see.</p>",
        "id": 407489992,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1702391611
    },
    {
        "content": "<ol>\n<li>About docs in the website : This was a decision made because there are plans from the lean4 extension to add the docs inside vscode, and it seemed wasteful to duplicate that work. </li>\n<li>The extension is designed with the goal of being able to quickly insert a definition you want wherever your cursor is. But I can see that it might be nice to show a panel of some sort too. One issue is that a large number of mathlib4_docs terms especially theorems have no docstrings. So most loogle hits will have a docstring \"null\".</li>\n</ol>",
        "id": 407491079,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1702391902
    },
    {
        "content": "<p>But these are good points I should address very very soon.</p>",
        "id": 407491829,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1702392119
    },
    {
        "content": "<p>Would it be a good idea to show the whole docs block for the chosen declaration in-editor?</p>",
        "id": 407492463,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1702392267
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> : Reflecting on your suggestion, I think it makes sense to complement the search view with a panel where loogle results appear in more detail. I'll get on it and post an update soon (hopefully before the year runs out).</p>",
        "id": 407496056,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1702393134
    },
    {
        "content": "<p>But for now, if you hover your mouse over the type signature, a tooltip will show you the full type signature. This is typically what docs show for most theorems anyway.</p>",
        "id": 407496997,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1702393332
    },
    {
        "content": "<p>See : <br>\n<a href=\"/user_uploads/3121/dYatYqXRQ5ZqKzYpZE2R-6o-/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/dYatYqXRQ5ZqKzYpZE2R-6o-/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/dYatYqXRQ5ZqKzYpZE2R-6o-/image.png\"></a></div>",
        "id": 407498280,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1702393651
    },
    {
        "content": "<p>Longer example:<br>\n<a href=\"/user_uploads/3121/qKQvMn1K0RkMV5q8uBCEspLs/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/qKQvMn1K0RkMV5q8uBCEspLs/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/qKQvMn1K0RkMV5q8uBCEspLs/image.png\"></a></div>",
        "id": 407498609,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1702393744
    },
    {
        "content": "<p>Oh, this is really tricky to find! It works only on the type signature, not on the name. This already makes this extension somewhat useful!</p>",
        "id": 407520034,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1702399841
    },
    {
        "content": "<p>I guess I should add more instructions and demos. You can go back to search for a new term with \"Alt + &lt;Left Arrow Key&gt;\" btw. The last term you searched or selection you made will be available.</p>",
        "id": 407522989,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1702400707
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"466334\">Shreyas Srinivas</span> <a href=\"#narrow/stream/113488-general/topic/Poll.20.3A.20Vscode.20loogle.20interface.20feedback/near/407522989\">said</a>:</p>\n<blockquote>\n<p>I guess I should add more instructions and demos. You can go back to search for a new term with \"Alt + &lt;Left Arrow Key&gt;\" btw. The last term you searched or selection you made will be available.</p>\n</blockquote>\n<p>this hasn't been working on Mac and I didn't see where the keybindings or anything were, unless you're using a built-in hotkey</p>",
        "id": 407526650,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1702402042
    },
    {
        "content": "<p>You can get the shortcut by hovering over the back button on the search title bar</p>",
        "id": 407526822,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1702402096
    },
    {
        "content": "<p>ah okay so it's a built in thing, cool</p>",
        "id": 407529702,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1702402981
    },
    {
        "content": "<p>There is a standard UI element for that. Of course one has to place the button and program its action.</p>",
        "id": 407538317,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1702405641
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"111080\">Floris van Doorn</span> <a href=\"#narrow/stream/113488-general/topic/Poll.20.3A.20Vscode.20loogle.20interface.20feedback/near/407458396\">said</a>:</p>\n<blockquote>\n<p>On <a href=\"https://github.com/leanprover-community/mathlib4/tree/show_cmd\">branch#show_cmd</a> I wrote a prototype command that prints declarations in a (in my opinion) cleaner format.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">#</span><span class=\"k\">show</span> <span class=\"n\">ContDiff.of_le</span> <span class=\"c\">/-</span><span class=\"cm\"> prints the following:</span>\n<span class=\"cm\">ContDiff.of_le (h : ContDiff ùïú n f) (hmn : m ‚â§ n) : ContDiff ùïú m f</span>\n<span class=\"cm\">implicits: {ùïú : Type u} {E : Type uE} {F : Type uF} {f : E ‚Üí F} {m n : ‚Ñï‚àû}</span>\n<span class=\"cm\">instances: [NontriviallyNormedField ùïú] [NormedAddCommGroup E] [NormedSpace ùïú E] [NormedAddCommGroup F] [NormedSpace ùïú F] -/</span>\n</code></pre></div>\n<p>There are some drawbacks: for example it loses information of the order of the implicit arguments, which sometimes is important.</p>\n</blockquote>\n<p>Looks nice! Ping me when that makes it to mathlib or even better std, and I'll happily use it. (Even more so if I can get the elaborated strings for implicits and instances separately, so that I can put them in separate JSON fields, so that Shreyas can display them cleverly)</p>",
        "id": 407568812,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1702415619
    },
    {
        "content": "<p>One thing that may be nice as well, Shreyas, especially whilst we work out the best way to display everything, is just to add a link to the normal search page so that can be seen as well if necessary. (Or even to keep the loogle search in a more persistent fashion)</p>",
        "id": 407917228,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1702546109
    },
    {
        "content": "<p>I thought leaving the editor was the main issue with the way docs work for now. It might be much easier to open a panel that displays the hit than again redirect users to a browser window</p>",
        "id": 407927237,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1702548985
    },
    {
        "content": "<p>My feedback or question: How do I efficiently type queries involving Unicode symbols like <code>‚à®</code>? Latex code doesn't work in the loogle prompt. Right now I'm resorting to copy and paste.</p>",
        "id": 408240466,
        "sender_full_name": "Yongyi Chen",
        "timestamp": 1702666787
    },
    {
        "content": "<p>This is an unimplemented feature. On the pipeline and coming soon</p>",
        "id": 408240633,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1702666834
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"582393\">Yongyi Chen</span> <a href=\"#narrow/stream/113488-general/topic/Poll.20.3A.20Vscode.20loogle.20interface.20feedback/near/408240466\">said</a>:</p>\n<blockquote>\n<p>My feedback or question: How do I efficiently type queries involving Unicode symbols like <code>‚à®</code>? Latex code doesn't work in the loogle prompt. Right now I'm resorting to copy and paste.</p>\n</blockquote>\n<p>For half of these I'm resorting to typing their full name</p>",
        "id": 408241230,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1702667040
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"284160\">Eric Rodriguez</span> <a href=\"#narrow/stream/113488-general/topic/Poll.20.3A.20Vscode.20loogle.20interface.20feedback/near/408241230\">said</a>:</p>\n<blockquote>\n<p>For half of these I'm resorting to typing their full name</p>\n</blockquote>\n<p>Haha, good to know!</p>",
        "id": 408241386,
        "sender_full_name": "Yongyi Chen",
        "timestamp": 1702667087
    }
]