[
    {
        "content": "<p>I saw <a href=\"https://github.com/leanprover-community/mathlib4/pull/6221\">#6221</a> on the queue and I thought it might be useful to have something similar for my project (which currently lives in <a href=\"https://github.com/leanprover-community/mathlib4/pull/5297\">#5297</a>) to compute total degrees of MvPolynomials. <span class=\"user-mention\" data-user-id=\"321459\">@Damiano Testa</span> does this PR work for MvPolynomials/do you think it would be easy for me to basically replicate declaration-by-declaration for MvPolynomials?</p>",
        "id": 387974882,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1693345855
    },
    {
        "content": "<p>The PR certainly does not work out of the box for MvPolynomials.  It would certainly be possible to adapt it, but I do not know how easy it would be.</p>",
        "id": 388031886,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1693371445
    },
    {
        "content": "<p>If/when the current PR gets merged, I will take a look at MvPolynomials, but Polynomials seem like the natural initial testing ground!</p>",
        "id": 388031988,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1693371501
    },
    {
        "content": "<p>Is this tactic usable to introduce new hypotheses? Can I write something like <code>ccompute_degree (X^2 + X + 1) as hd</code> and have <code>hd : degree (X^2 + X + 1) = 2</code> appear in my hypotheses?</p>",
        "id": 388211667,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1693438059
    },
    {
        "content": "<p>At the moment, no, but you can write</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"k\">have</span> <span class=\"n\">hd</span> <span class=\"o\">:</span> <span class=\"n\">degree</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">X</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">compute_degree</span>\n</code></pre></div>\n<p>and it will try to compute the degree.  It should be easy to add this functionality, but I did not want to make the PR longer to simplify the review process.</p>",
        "id": 388233927,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1693450259
    },
    {
        "content": "<p>Note that, internally, the tactic does not use the value that you give for the expected degree and computes its own guess, so the <code>= 2</code> in the example is really superfluous information.</p>",
        "id": 388234093,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1693450340
    },
    {
        "content": "<p>However, in its current form, the tactic requires that something be present (and it should tell you that it expected to see a <code>2</code>, if you give it a different number.</p>",
        "id": 388234219,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1693450417
    },
    {
        "content": "<p>Right ok. My goal is a tactic that takes an equality <code>p = q</code> of MvPolynomials and then applies the Schwartz-Zippel lemma to \"prove\" the equality by generating a probabilistic test of the fact that <code>p-q = 0</code>. The S-Z lemma depends on having an upper bound on the total degree, so it seems like at some point I will want to be able to produce a proof of an upper bound without necessarily having the degree to start with (in fact, the point is that <code>p-q</code> has degree 0 but that we don't know this at the start, only that we have a particular bound on the degree).</p>",
        "id": 388392866,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1693510235
    },
    {
        "content": "<p>Thinking about it more, I guess one approach is just to hard-code a large number like 10^24 as the degree bound, and this would work pretty consistently for the use cases I imagine, but would not actually require knowing the degree. But if I wanted to use the test for very high-degree polynomials, it could eat into the soundness of the test, so I might want to just run code to tell me a degree bound at that point.</p>",
        "id": 388393266,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1693510412
    },
    {
        "content": "<p>I guess the point is that computing <code>totalDegree = x</code> would seem to be disanalogous to the single-variable polynomial setting, but I don't need to do that. I just need to be able to prove goals of the form <code>totalDegree &lt;= 10^24</code>, and this seems like it could work exactly the same way it does in the single variable setting (this I take it is by recursively bounding the degree of subexpressions).</p>",
        "id": 388393908,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1693510653
    },
    {
        "content": "<p>Proving upper bounds on the degree is <em>much</em> simpler than computing the degree.  The tactic could be significantly shorter if that is all you wanted.</p>\n<p>Making it work for <code>total_degree</code> should not be hard, but would also require a substantial amount of changes, since currently all the matching and lemmas are about <code>Polynomial</code>s.</p>",
        "id": 388406998,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1693516495
    },
    {
        "content": "<p>Are the polynomials that you produce \"actual\" polynomials, in the same sense that <code>3</code> is a natural number, or are they polynomials in the sense that <code>n</code> is a natural number?</p>",
        "id": 388407174,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1693516576
    },
    {
        "content": "<p>My goal is to be able to \"prove\" the things that <code>ring</code> does, but asymptotically faster. I want to convert ring expressions into polynomials over their atoms and prove them equivalent as polynomials.</p>",
        "id": 388410681,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1693518388
    },
    {
        "content": "<p>If they are \"black box\" polynomials, the current tactic will not really be very useful.  <code>compute_degree</code> expects something like <code>natDegree (C 4 * X ^ 8 + 5) = 7</code>, with atomic building blocks such as <code>X, C _, monomial _ _</code> and then \"algebraic operations\" combining them.</p>\n<p>It attempts to do something meaningful with expressions such as <code>f : R[X]</code>, but it won't use anything from context to make even the most trivial estimate as to what the degree of <code>f</code> could be.</p>",
        "id": 388500326,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1693566004
    },
    {
        "content": "<p>Do you have a sample of what kinds of expressions you would like to pass to the tactic?</p>",
        "id": 388500376,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1693566032
    },
    {
        "content": "<p>What I would like to do is something like the following:</p>\n<ol>\n<li>I start with an expression like <code>\\forall (a b : R), (a + b)^2 = a^2 + 2 * a * b + b^2</code></li>\n<li>\n<p>I transform the atoms into evaluations of MvPolynomials (is this what the Qq library is for?) something like <br>\n<code>let f (quoted_z : TypeOfExpressions) : R := &lt;quoted_a maps to a, quoted_b maps to b and so forth&gt;</code><br>\nNow the goal is equivalent to<br>\n<code>(eval f (X quoted_a) + eval f (X quoted_b))^2 = (eval f (X quoted_a) )^2 + 2 * (eval f (X quoted_a) ) * (eval f (X quoted_b)) + (eval f (X quoted_b))^2</code><br>\nWhich simplifies to<br>\n<code>eval f (X quoted_a + X quoted_b)^2 = eval f (X quoted_a)^2 + C 2 * X quoted_a *  X quoted_b + (X quoted_b)^2</code></p>\n</li>\n<li>\n<p>Apply <code>congr</code> to reduce to</p>\n</li>\n</ol>\n<p><code>(X quoted_a + X quoted_b)^2 = (X quoted_a)^2 + C 2 * X quoted_a *  X quoted_b + (X quoted_b)^2</code></p>\n<ol start=\"4\">\n<li>Bound the degree of these polynomials (which are over the type of quoted expressions) and prove them equal.</li>\n</ol>",
        "id": 388584461,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1693595264
    },
    {
        "content": "<p>So I think all I need really is <code>X</code> and <code>C</code>, I don't need <code>monomial</code>.</p>",
        "id": 388584819,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1693595411
    },
    {
        "content": "<p>I had some Lean 3 code for converting (some) atoms in an algebraic expression in independent variables of a polynomial.  It would have to be rewritten, but my recollection is that it was fairly easy to write an implementation that works most of the time, but tricky to do it robustly.</p>",
        "id": 388674615,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1693648797
    },
    {
        "content": "<p>With respect to the computation of the degree of multi-variable polynomials, I am fairly confident that this is easier to automate robustly.  The <code>compute_degree</code> tactic got a make-over (thanks Kyle!) and hopefully will be merged soon.  Once that one is in, I will take a look into extending it to also work for multivariable polynomials.</p>",
        "id": 388674817,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1693648893
    },
    {
        "content": "<p>On the topic of getting the tactic to take an optional polynomial as an argument and having <code>compute_degree h : pol</code> leave <code>h : degree pol = ...</code> in context, this should not be hard.  There is the small question of passing the information of whether you want the <code>natDegree</code> or the <code>degree</code>, whether you want to name or not the resulting hypothesis, but technically everything should be there.</p>",
        "id": 388674998,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1693649008
    },
    {
        "content": "<p>What I think would make the extension easier to use is to allow underscores in the term <code>pol</code> and let the tactic guess that you want to compute the degree of the first subexpression of something in context that unifies with what you gave it.  Here is an example.</p>",
        "id": 388675158,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1693649071
    },
    {
        "content": "<p>In context, there is <code>hm : Monic (X ^ 3 + (2 * X ^ 2 + 5))</code>.  Writing</p>\n<ul>\n<li><code>compute_degree _</code> adds the hypothesis <code>degree (X ^ 3 + (2 * X ^ 2 + 5)) = 3</code> to the context;</li>\n<li><code>compute_degree 2 * _ + _</code> adds the hypothesis <code>degree (2 * X ^ 2 + 5) = 2</code> to the context.</li>\n</ul>\n<p>This should also be relatively straightforward.  Still, I would wait for this until the current version of the tactic is merged!</p>",
        "id": 388675531,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1693649302
    },
    {
        "content": "<p>In fact, regardless of the underscores, maybe this extension could be called <code>have_degree/have_natDegree</code>, rather that <code>compute_degree</code>.</p>",
        "id": 388675649,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1693649403
    },
    {
        "content": "<p><code>compute_degree</code> got merged!  Thank you, Kyle!</p>\n<p>If you have a goal of the form <code>natDegree (reasonably explicit polynomial) = n</code> (or variations with <code>degree</code> or <code>≤</code>, then chances are that <code>compute_degree</code> will make progress on it!  And <code>compute_degree!</code> will try harder.</p>\n<p>If you use it and you have questions, bug reports, suggestions, do let me know!</p>",
        "id": 388699132,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1693665759
    },
    {
        "content": "<p>Hi Damiano, been loving <code>compute_degree</code>! Is it an easy modification for it to support stuff like <code>(A : R) \\smul X ^ n : R[X]</code>? I see it has support for <code>monomial</code>, and likely I should be writing things in that sort of form...</p>",
        "id": 404468840,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1701110087
    },
    {
        "content": "<p>Eric, I am very happy that you enjoy <code>compute_degree</code>!</p>\n<p>I think that adding support for <code>\\smul</code> should be relatively straightforward, since the lemmas <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Polynomial.natDegree_smul_le#doc\">docs#Polynomial.natDegree_smul_le</a> and <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Polynomial.degree_smul_le#doc\">docs#Polynomial.degree_smul_le</a> are already in place.</p>\n<p>The lemma <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Polynomial.natDegree_smul_ite#doc\">docs#Polynomial.natDegree_smul_ite</a> seems to be missing, so the whole PR is probably a couple of extra lines of tactic code, the extra lemma and a couple of tests.</p>\n<p>If you can supply a \"real-world\" test for the tactic, I can take care of the rest of the PR!  <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span></p>",
        "id": 404486029,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1701117556
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/8666\">#8666</a> waiting for a good test!</p>",
        "id": 404490724,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1701119790
    },
    {
        "content": "<p>Can <code>compute_degree</code> perhaps be taught to also deal with goals of the form <code>Monic f</code>?</p>",
        "id": 404491025,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1701119966
    },
    {
        "content": "<p>Michael, it certainly can, and it is probably also quite a simple extension.  I wonder if maybe the name of the tactic should change, though.</p>",
        "id": 404491271,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1701120101
    },
    {
        "content": "<p>The tactic essentially breaks up the degree computation in two parts:</p>\n<ul>\n<li>the easy part is showing an inequality and this normally is always successful;</li>\n<li>the hard part is showing that the coefficient of top degree is non-zero and this is where the tactic typically can get stuck.</li>\n</ul>\n<p>Also, when faced with a goal <code>degree f = n</code>, the tactic does not actually use the information that <code>n</code> is given, but replaces straight away the actual degree with a metavariable.  This means that it is able to get its own estimate of the degree and to compare it with the given one.  So, when trying to prove monicity, you would still begin with a metavariable for the degree and close the final goal with <code>rfl</code> to get the actual degree.</p>\n<p>To prove monic, you then have a goal of <code>coeff ... = 1</code> instead of <code>coeff ... ≠ 0</code>: such goals probably get stuck in similar ways!  So, I expect a similar performance of <code>Monic f</code> and <code>degree f = n</code>.</p>",
        "id": 404492388,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1701120636
    },
    {
        "content": "<p>This addition is slightly lengthier than the support for <code>smul</code>, but probably still quite short.</p>",
        "id": 404492531,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1701120708
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"479359\">@Michael Stoll</span>, do you have some use-case for the monic extension?  It might be that this simple-minded macro already goes a long way to proving monicity.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">open</span> <span class=\"n\">Polynomial</span>\n\n<span class=\"n\">macro</span> <span class=\"s2\">\"monicity\"</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">apply</span> <span class=\"n\">monic_of_natDegree_le_of_coeff_eq_one</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">compute_degree</span><span class=\"o\">))</span>\n\n<span class=\"n\">macro</span> <span class=\"s2\">\"monicity!\"</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">apply</span> <span class=\"n\">monic_of_natDegree_le_of_coeff_eq_one</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">compute_degree</span><span class=\"bp\">!</span><span class=\"o\">))</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Nontrivial</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Monic</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"n\">X</span> <span class=\"bp\">^</span> <span class=\"mi\">5</span> <span class=\"bp\">+</span> <span class=\"n\">X</span> <span class=\"bp\">^</span> <span class=\"mi\">6</span> <span class=\"bp\">*</span> <span class=\"n\">monomial</span> <span class=\"mi\">10</span> <span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">])</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">monicity</span><span class=\"bp\">!</span>\n</code></pre></div>",
        "id": 404499918,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1701124435
    },
    {
        "content": "<p>In the context of my seminar, one project is to formalize Eisenstein integers, and one possibility would start somewhat like the following.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">BigOperators</span> <span class=\"n\">Polynomial</span>\n\n<span class=\"kd\">noncomputable</span>\n<span class=\"n\">abbrev</span> <span class=\"n\">minpol</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">X</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">X</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">])</span>\n\n<span class=\"n\">abbrev</span> <span class=\"n\">EisensteinInt</span> <span class=\"o\">:=</span> <span class=\"n\">AdjoinRoot</span> <span class=\"n\">minpol</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">EisensteinInt</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">AdjoinRoot</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">deg_minpol_eq_two</span> <span class=\"o\">:</span> <span class=\"n\">natDegree</span> <span class=\"n\">minpol</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">minpol</span><span class=\"o\">]</span>\n  <span class=\"n\">compute_degree</span><span class=\"bp\">!</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">monic_minpol</span> <span class=\"o\">:</span> <span class=\"n\">Monic</span> <span class=\"n\">minpol</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">minpol</span><span class=\"o\">,</span> <span class=\"n\">Monic</span><span class=\"o\">,</span> <span class=\"n\">leadingCoeff</span><span class=\"o\">,</span> <span class=\"n\">deg_minpol_eq_two</span><span class=\"o\">]</span>\n  <span class=\"n\">compute_degree</span>\n</code></pre></div>\n<p>This is where the question came up.</p>",
        "id": 404500290,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1701124613
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"321459\">Damiano Testa</span> <a href=\"#narrow/stream/113488-general/topic/compute_total_degree/near/404499918\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"479359\">Michael Stoll</span>, do you have some use-case for the monic extension?  It might be that this simple-minded macro already goes a long way to proving monicity.</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">macro</span> <span class=\"s2\">\"monicity\"</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">apply</span> <span class=\"n\">monic_of_natDegree_le_of_coeff_eq_one</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">compute_degree</span><span class=\"o\">))</span>\n\n<span class=\"n\">macro</span> <span class=\"s2\">\"monicity!\"</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">apply</span> <span class=\"n\">monic_of_natDegree_le_of_coeff_eq_one</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">compute_degree</span><span class=\"bp\">!</span><span class=\"o\">))</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Nontrivial</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Monic</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"n\">X</span> <span class=\"bp\">^</span> <span class=\"mi\">5</span> <span class=\"bp\">+</span> <span class=\"n\">X</span> <span class=\"bp\">^</span> <span class=\"mi\">6</span> <span class=\"bp\">*</span> <span class=\"n\">monomial</span> <span class=\"mi\">10</span> <span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">])</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">monicity</span><span class=\"bp\">!</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>may be worth PRing this straight away!</p>\n<p>I also got reminded by Michael's proofs that <code>leadingCoeff</code> is another good target. If you're looking for a new name, maybe <code>norm_poly</code> to match <code>norm_num</code> in some way?</p>",
        "id": 404500477,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1701124701
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/8668\">#8668</a> adds <code>monicity</code>.</p>",
        "id": 404500956,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1701124926
    },
    {
        "content": "<p>As for the name, I remember that maybe it was suggested that <code>compute_degree</code> might be a <code>norm_num</code> extension.  Maybe this is even more the case for all of these auxiliary tactics/macros that are based on it.</p>",
        "id": 404501025,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1701124974
    },
    {
        "content": "<p>By the way, while I think that the extension to support <code>smul</code> is probably quite robust (at least, as robust as the rest of <code>compute_degree</code>), I feel a little less confident about the <code>monicity</code> macro.</p>",
        "id": 404501117,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1701125042
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"479359\">@Michael Stoll</span>, with the two macros above, this also works</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">monic_minpol</span> <span class=\"o\">:</span> <span class=\"n\">Monic</span> <span class=\"n\">minpol</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">minpol</span>\n  <span class=\"n\">monicity</span>\n</code></pre></div>",
        "id": 404501452,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1701125182
    }
]