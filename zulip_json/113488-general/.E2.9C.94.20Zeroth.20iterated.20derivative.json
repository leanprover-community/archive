[
    {
        "content": "<p>With mathlib's implementation of Schwartz functions (<a href=\"https://leanprover-community.github.io/mathlib_docs/analysis/schwartz_space.html\">https://leanprover-community.github.io/mathlib_docs/analysis/schwartz_space.html</a>), how does one show that a Schwartz function is <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi mathvariant=\"normal\">∥</mi><mi>x</mi><msup><mi mathvariant=\"normal\">∥</mi><mrow><mo>−</mo><mi>r</mi></mrow></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(\\|x\\|^{-r})</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0213em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\">∥</span><span class=\"mord mathnormal\">x</span><span class=\"mord\"><span class=\"mord\">∥</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7713em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.02778em;\">r</span></span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span> at infinity for integers r? </p>\n<p>There is <a href=\"https://leanprover-community.github.io/mathlib_docs/find/schwartz_map.decay\">docs#schwartz_map.decay</a>, which gives a more general result about decay of the <code>n</code>-th derivative for any <code>n</code>; but I can't work out how to show that the 0-th iterated derivative of <code>f</code> is actually <code>f</code>. The zeroth derivative is returned as some utterly baffling structure (something like an element of the free module on maps from the empty set to something) and I couldn't work out how to get an actual number out of it! Can someone help me out here?</p>",
        "id": 328641235,
        "sender_full_name": "David Loeffler",
        "timestamp": 1676716738
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/norm_iterated_fderiv_zero\">docs#norm_iterated_fderiv_zero</a> looks useful</p>",
        "id": 328641834,
        "sender_full_name": "Reid Barton",
        "timestamp": 1676716952
    },
    {
        "content": "<p>Thanks, that's a good point: I was trying to get hold of <code>f x</code> directly, but this seems to be a direct shortcut to <code>‖f x‖</code> which would have been the next step anyway.</p>",
        "id": 328642210,
        "sender_full_name": "David Loeffler",
        "timestamp": 1676717124
    },
    {
        "content": "<p>Above it a bit is iterated_fderiv_zero_apply</p>",
        "id": 328642521,
        "sender_full_name": "Reid Barton",
        "timestamp": 1676717265
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/113488-general/topic/Zeroth.20iterated.20derivative/near/328642521\">said</a>:</p>\n<blockquote>\n<p>Above it a bit is iterated_fderiv_zero_apply</p>\n</blockquote>\n<p>That's the one I was trying before: it takes as input a map from <code>fin 0</code> to something (whose relevance wasn't clear to me). But my problem is solved by <code>norm_iterated_fderiv_zero</code>so I don't need to worry about what this other function does <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span></p>",
        "id": 328646022,
        "sender_full_name": "David Loeffler",
        "timestamp": 1676718564
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"481963\">David Loeffler</span> has marked this topic as resolved.</p>",
        "id": 328646232,
        "sender_full_name": "Notification Bot",
        "timestamp": 1676718610
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 328704240,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1676741295
    },
    {
        "content": "<p>it is funny, there should be a lemma for exactly what you are asking for, I did add the lemma that Reid was mentioning for this very reason, but maybe I did not get around to PR the corresponding lemma for the Schwartz functions.</p>",
        "id": 329168180,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1676979831
    }
]