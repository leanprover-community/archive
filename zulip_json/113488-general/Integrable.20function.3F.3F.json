[
    {
        "content": "<p>In the code below, lean is not satisfied with the lemma provided and replies with the nice looking but useless  message (shown below the code). Using the option <code>set_option pp.all true</code> produces the scarier but probably more informative message beneath it. So I have two questions:</p>\n<ol>\n<li>I understand the goals are somehow not identical? How do I fix this</li>\n<li>Is it possible that to change the error messages to shows the second scarier message when the original ones look identical because <code>unable to match a to a</code> is just plain confusing</li>\n</ol>\n<h2>Code with error in last Line</h2>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">MeasureTheory</span>\n\n<span class=\"c1\">-- set_option pp.notation false</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">Integrable</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Real.exp</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">Real.rpow_two</span><span class=\"o\">]</span>\n  <span class=\"n\">refine</span> <span class=\"n\">integrable_exp_neg_mul_sq</span> <span class=\"o\">(</span><span class=\"n\">zero_lt_two'</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">gaussianMeasure2</span> <span class=\"o\">:</span> <span class=\"n\">Measure</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">let</span> <span class=\"n\">g</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hu</span> <span class=\"o\">:</span> <span class=\"n\">MeasurableSet</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">ENNReal.ofReal</span> <span class=\"o\">(</span><span class=\"bp\">∫</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"k\">in</span> <span class=\"n\">u</span><span class=\"o\">,</span> <span class=\"n\">Real.exp</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">x</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"o\">))</span>\n  <span class=\"n\">apply</span> <span class=\"n\">MeasureTheory.Measure.ofMeasurable</span> <span class=\"n\">g</span>\n  <span class=\"gr\">sorry</span>\n  <span class=\"n\">intros</span> <span class=\"n\">s</span> <span class=\"n\">hs</span> <span class=\"n\">hs_disjoint</span>\n  <span class=\"n\">dsimp</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">MeasureTheory.integral_iUnion</span> <span class=\"n\">hs</span><span class=\"o\">,</span> <span class=\"n\">ENNReal.ofReal_tsum_of_nonneg</span><span class=\"o\">]</span>\n  <span class=\"n\">intro</span> <span class=\"n\">n</span><span class=\"bp\">;</span>  <span class=\"n\">apply</span> <span class=\"o\">(</span><span class=\"n\">integral_nonneg</span> <span class=\"o\">(</span><span class=\"n\">le_of_strongLT</span> <span class=\"n\">_</span><span class=\"o\">))</span>\n  <span class=\"gr\">sorry</span><span class=\"bp\">;</span> <span class=\"gr\">sorry</span><span class=\"bp\">;</span> <span class=\"gr\">sorry</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">IntegrableOn</span><span class=\"o\">]</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">Real.rpow_two</span><span class=\"o\">]</span>\n  <span class=\"n\">refine</span> <span class=\"n\">integrable_exp_neg_mul_sq</span> <span class=\"bp\">?</span><span class=\"n\">_</span>\n</code></pre></div>\n<h2>The nice error message. (But confusing!!)</h2>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>type mismatch\n  integrable_exp_neg_mul_sq ?m.2235\nhas type\n  Integrable fun x =&gt; rexp (-2 * x ^ 2) : Prop\nbut is expected to have type\n  Integrable fun x =&gt; rexp (-2 * x ^ 2) : Prop\n</code></pre></div>\n<h2>Using set_option.pp all true gives the scarier (but perhaps more informative)</h2>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>type mismatch\n  @integrable_exp_neg_mul_sq ?m.2234 ?m.2235\nhas type\n  @MeasureTheory.Integrable.{0, 0} Real Real.normedAddCommGroup Real\n    (@MeasureTheory.MeasureSpace.toMeasurableSpace.{0} Real Real.measureSpace)\n    (fun (x : Real) =&gt;\n      Real.exp\n        (@HMul.hMul.{0, 0, 0} Real Real Real (@instHMul.{0} Real Real.instMulReal)\n          (@Neg.neg.{0} Real Real.instNegReal ?m.2234)\n          (@HPow.hPow.{0, 0, 0} Real Nat Real (@instHPow.{0, 0} Real Nat (@Monoid.Pow.{0} Real Real.instMonoidReal)) x\n            (@OfNat.ofNat.{0} Nat 2 (instOfNatNat 2)))))\n    (@MeasureTheory.MeasureSpace.volume.{0} Real Real.measureSpace) : Prop\nbut is expected to have type\n  @MeasureTheory.Integrable.{0, 0} Real Real.normedAddCommGroup Real Real.measurableSpace\n    (fun (x : Real) =&gt;\n      Real.exp\n        (@HMul.hMul.{0, 0, 0} Real Real Real (@instHMul.{0} Real Real.instMulReal)\n          (@Neg.neg.{0} Real Real.instNegReal\n            (@OfNat.ofNat.{0} Real 2\n              (@instOfNat.{0} Real 2 Real.natCast\n                (@instAtLeastTwoHAddNatInstHAddInstAddNatOfNat (@OfNat.ofNat.{0} Nat 0 (instOfNatNat 0))))))\n          (@HPow.hPow.{0, 0, 0} Real Nat Real (@instHPow.{0, 0} Real Nat (@Monoid.Pow.{0} Real Real.instMonoidReal)) x\n            (@OfNat.ofNat.{0} Nat 2 (instOfNatNat 2)))))\n    (@MeasureTheory.Measure.restrict.{0} Real Real.measurableSpace\n      (@MeasureTheory.MeasureSpace.volume.{0} Real Real.measureSpace)\n      (@Set.iUnion.{0, 1} Real Nat fun (i : Nat) =&gt; s i)) : Prop\n</code></pre></div>",
        "id": 378476508,
        "sender_full_name": "MohanadAhmed",
        "timestamp": 1690291820
    },
    {
        "content": "<p>I'm not answering your question, but if you're seeking to define the Gaussian measure you should definitely have a look at  <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=MeasureTheory.Measure.withDensity#doc\">docs#MeasureTheory.Measure.withDensity</a>, which will build the measure for you without having to mess with too much measure theory.</p>",
        "id": 378486794,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1690293659
    },
    {
        "content": "<p>I think this is the <code>HPow</code> issue again, where the exponent <code>2</code> is a Real when it probably should be a Nat</p>",
        "id": 378490922,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1690294399
    },
    {
        "content": "<p>Try putting the following incantation after your imports:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">local</span> <span class=\"n\">macro_rules</span> <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"bp\">$</span><span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">HPow.hPow</span> <span class=\"bp\">$</span><span class=\"n\">x</span> <span class=\"bp\">$</span><span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"c1\">-- Porting note: See issue #2220</span>\n</code></pre></div>",
        "id": 378491241,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1690294446
    },
    {
        "content": "<p>No, I think it's the last argument that's not defeq:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">MeasureTheory.MeasureSpace.volume.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">Real</span> <span class=\"n\">Real.measureSpace</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>vs</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">MeasureTheory.Measure.restrict.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">Real</span> <span class=\"n\">Real.measurableSpace</span>\n      <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">MeasureTheory.MeasureSpace.volume.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">Real</span> <span class=\"n\">Real.measureSpace</span><span class=\"o\">)</span>\n      <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Set.iUnion.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"n\">Real</span> <span class=\"n\">Nat</span> <span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">s</span> <span class=\"n\">i</span><span class=\"o\">))</span>\n</code></pre></div>",
        "id": 378493327,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1690294814
    },
    {
        "content": "<p>I don't even think that you can prove that these are equal in your context.</p>",
        "id": 378493556,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1690294848
    },
    {
        "content": "<p>One big issue here is that the last argument of <code>Integrable</code> is treated as an implicit argument in the pretty printer. I don't think that should be the case for auto-param arguments. Note that the type of <code>Integrable</code> is </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">Integrable</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">MeasurableSpace</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">μ</span> <span class=\"o\">:</span> <span class=\"n\">Measure</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">volume_tac</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 378493622,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1690294854
    },
    {
        "content": "<p>Who can implement an option that makes the pretty printer treat auto-params as normal arguments?</p>",
        "id": 378499819,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1690295829
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"497480\">@MohanadAhmed</span>: if you just want to continue with your proof, then replace the <code>rw [IntegrableOn]</code> by <code>refine Integrable.integrableOn ?_</code> (but <span class=\"user-mention\" data-user-id=\"110050\">@Sebastien Gouezel</span>'s suggestion to use <code>withDensity</code> is of course better).</p>",
        "id": 378502061,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1690296155
    }
]