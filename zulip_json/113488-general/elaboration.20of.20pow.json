[
    {
        "content": "<p>In Data.Nat.Choose.Bounds, the statement of <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Nat.choose_le_pow#doc\">docs#Nat.choose_le_pow</a> is subtly different from the Lean 3 version. In particular, in the Lean 3 version the cast happens before the pow, whereas in Lean 4 the pow happens in Nat, and then is cast to α. (And this isn't just because of a mistake in porting - <code>(n ^ r : α)</code> just elaborates differently). And this change in how the theorem is stated just bit me in porting the exponential ramsey project! </p>\n<p>Does the change to pow (<a href=\"https://github.com/leanprover/lean4/pull/2778\">https://github.com/leanprover/lean4/pull/2778</a>) affect this? Do we want to turn the statements back into what they used to be?</p>",
        "id": 401829865,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1699903062
    },
    {
        "content": "<p>I just checked, and the statement will change once the Lean version bump <a href=\"https://github.com/leanprover-community/mathlib4/pull/8366\">#8366</a> lands in mathlib, without modification. Here will be the new statement:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Nat.choose_le_pow.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">inst</span><span class=\"bp\">✝</span> <span class=\"o\">:</span> <span class=\"n\">LinearOrderedSemifield</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">choose</span> <span class=\"n\">n</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"bp\">↑</span><span class=\"n\">n</span> <span class=\"bp\">^</span> <span class=\"n\">r</span> <span class=\"bp\">/</span> <span class=\"bp\">↑</span><span class=\"n\">r</span> <span class=\"bp\">!</span>\n</code></pre></div>\n<p>I got that from hovering over the lemma.</p>",
        "id": 401830873,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1699903457
    },
    {
        "content": "<p>Ah perfect, so back to the Lean 3 version!</p>",
        "id": 401831270,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1699903597
    }
]