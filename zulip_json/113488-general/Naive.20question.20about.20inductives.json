[
    {
        "content": "<p>I have been playing around with constructors and recursors to get a feel for types in Lean, and I have a question: when we have a type like the following:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">I</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">mk</span> <span class=\"o\">:</span> <span class=\"n\">I</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">I</span>\n</code></pre></div>\n<p>from which we cannot get any terms (I assume?), what can we say about the type?  For example, if we define the iterated composition of <code>I.mk</code>, can we say that these compositions are extensionally equal, or that they are not equal?  Similarly, if we build another type <code>J</code> on top of <code>I</code> as follows:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">J</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">mk</span> <span class=\"o\">:</span> <span class=\"n\">J</span> <span class=\"bp\">-&gt;</span> <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">I</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">J</span>\n</code></pre></div>\n<p>can we something similar about self-compositions of <code>J.mk</code>?  Can Lean prove <code>I = J</code> or <code>Not (I = J)</code>?</p>\n<p>Also, surely it is not the case that definitionally <code>I = Empty</code>(?), but is there a notion of \"type extensionality\" that would make such an equality true?</p>\n<p>This is all for educational purposes, as I do not know any type theory, but I would love to get some basic info at least in how Lean views types like the above.</p>",
        "id": 394164921,
        "sender_full_name": "Ioannis Konstantoulas",
        "timestamp": 1696144225
    },
    {
        "content": "<p><code>I</code> is empty</p>",
        "id": 394165212,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1696144418
    },
    {
        "content": "<p>It is not (provably) true that <code>I = Empty</code>, but <code>I</code> is empty in the sense that <code>I -&gt; False</code>, <code>I -&gt; Empty</code> or various other expressions</p>",
        "id": 394165326,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1696144471
    },
    {
        "content": "<p>mathlib has <code>IsEmpty I</code> to express this condition</p>",
        "id": 394165356,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1696144490
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Logic.IsEmpty</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">I</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">mk</span> <span class=\"o\">:</span> <span class=\"n\">I</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">I</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">IsEmpty</span> <span class=\"n\">I</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"n\">rec</span> <span class=\"n\">go</span> <span class=\"o\">:</span> <span class=\"n\">I</span> <span class=\"bp\">→</span> <span class=\"n\">False</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"n\">i</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">go</span> <span class=\"n\">i</span>\n  <span class=\"o\">⟨</span><span class=\"n\">go</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">J</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">mk</span> <span class=\"o\">:</span> <span class=\"n\">J</span> <span class=\"bp\">-&gt;</span> <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">I</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">J</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">IsEmpty</span> <span class=\"n\">J</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"n\">rec</span> <span class=\"n\">go</span> <span class=\"o\">:</span> <span class=\"n\">J</span> <span class=\"bp\">→</span> <span class=\"n\">False</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"n\">j</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">go</span> <span class=\"n\">j</span>\n  <span class=\"o\">⟨</span><span class=\"n\">go</span><span class=\"o\">⟩</span>\n</code></pre></div>",
        "id": 394165538,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1696144574
    },
    {
        "content": "<p>Thank you!  This is exactly what I was suspecting, that you could get <code>I -&gt; False</code>, but I didn't know how to do it.</p>",
        "id": 394166893,
        "sender_full_name": "Ioannis Konstantoulas",
        "timestamp": 1696145302
    },
    {
        "content": "<p>This leads me to another question, now: what is the difference between the following two?  Lean accepts the first, but rejects the second complaining about non-termination:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">con₀</span> <span class=\"o\">:</span> <span class=\"n\">I</span> <span class=\"bp\">→</span> <span class=\"n\">False</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"n\">rec</span> <span class=\"n\">go</span> <span class=\"o\">:</span> <span class=\"n\">I</span> <span class=\"bp\">→</span> <span class=\"n\">False</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"n\">i</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">go</span> <span class=\"n\">i</span>\n  <span class=\"n\">go</span>\n\n<span class=\"n\">unsafe</span> <span class=\"kd\">def</span> <span class=\"n\">con</span> <span class=\"o\">:</span> <span class=\"n\">I</span> <span class=\"bp\">→</span> <span class=\"n\">False</span> <span class=\"o\">:=</span>\n  <span class=\"k\">fun</span> <span class=\"n\">i</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">con</span> <span class=\"n\">i</span>\n</code></pre></div>\n<p>I would assume the first would also have termination problems.</p>",
        "id": 394167395,
        "sender_full_name": "Ioannis Konstantoulas",
        "timestamp": 1696145638
    },
    {
        "content": "<p>the first one is recursive on <code>I</code></p>",
        "id": 394167453,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1696145657
    },
    {
        "content": "<p>it terminates because there can only be finitely many applications of <code>mk</code></p>",
        "id": 394167498,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1696145693
    },
    {
        "content": "<p>and the reason <code>I</code> is empty is because once you get to the bottom there is nothing else to apply</p>",
        "id": 394167522,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1696145711
    },
    {
        "content": "<p>To give an analogy, compare to <code>Nat</code>: there are no \"infinitely large <code>Nat</code>s\", every <code>Nat</code> has a <code>Nat.zero</code> subterm in it. So if we take <code>Nat</code> and delete the <code>Nat.zero</code> constructor there are no elements left</p>",
        "id": 394167865,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1696145875
    },
    {
        "content": "<p>Fantastic; equivalently, Lean accepts this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">con</span> <span class=\"o\">:</span> <span class=\"n\">I</span> <span class=\"bp\">→</span> <span class=\"n\">False</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"n\">i</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">con</span> <span class=\"n\">i</span>\n</code></pre></div>",
        "id": 394168192,
        "sender_full_name": "Ioannis Konstantoulas",
        "timestamp": 1696146043
    },
    {
        "content": "<p>yes, the extra step was just to wrap it in the <code>IsEmpty</code> structure</p>",
        "id": 394168436,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1696146226
    },
    {
        "content": "<p>\"Type extensionality\" is another name in some places for univalence, are you sure you mean that?</p>",
        "id": 394170025,
        "sender_full_name": "Trebor Huang",
        "timestamp": 1696147261
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"404479\">Trebor Huang</span> <a href=\"#narrow/stream/113488-general/topic/Naive.20question.20about.20inductives/near/394170025\">said</a>:</p>\n<blockquote>\n<p>\"Type extensionality\" is another name in some places for univalence, are you sure you mean that?</p>\n</blockquote>\n<p>No, not really; I am not educated enough on these things to formulate clear questions.</p>",
        "id": 394170296,
        "sender_full_name": "Ioannis Konstantoulas",
        "timestamp": 1696147440
    }
]