[
    {
        "content": "<p>I can't find much about this in any of the references, so apologies if this is documented somewhere.<br>\nIf I have a type <code>A</code> that has an instance of, say, <code>Repr</code>, and I do something like <code>def B := A</code>, is <code>B</code> supposed to automatically derive <code>Repr</code>? I'm not seeing this behavior and I'm not sure if it's just not expected / I'm missing an import or something (I'm currently only importing <code>Lean.Elab.Deriving.Repr</code>, which I'm not even sure is required). </p>\n<p>Even pointers to documentation on instance derivations would be helpful, since I'm having a couple other issues with the same.</p>\n<p>Thanks!</p>",
        "id": 368617176,
        "sender_full_name": "Bhakti Shah",
        "timestamp": 1687449733
    },
    {
        "content": "<p>No I would not have thought that this automatic derivation is supposed to happen if you use <code>def</code>. Indeed I think that this is a feature -- if <code>X</code> is some type with an instance of <code>Le</code> then perhaps one wants to consider <code>X</code> with the opposite <code>Le</code>, so one writes <code>def Y := X</code> and now <code>Y</code> has no <code>Le</code> at all and you can put the opposite one on without causing trouble for the typeclass inference system.</p>\n<p>If you want <code>B</code> to interit <code>Repr</code> then in Lean 3 you could do <code>@[derive Repr]</code> but I don't know if this works in Lean 4. Alternatively you could use something like <code>abbrev</code> instead of <code>def</code>.</p>",
        "id": 368619786,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1687450123
    },
    {
        "content": "<p>Ah I see. That makes sense; Thank you!</p>",
        "id": 368651368,
        "sender_full_name": "Bhakti Shah",
        "timestamp": 1687456555
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"578936\">Bhakti Shah</span> has marked this topic as resolved.</p>",
        "id": 368651374,
        "sender_full_name": "Notification Bot",
        "timestamp": 1687456559
    },
    {
        "content": "<p>This type of generic deriving handler for defs is not in Lean 4 yet unfortunately, see <a href=\"https://github.com/leanprover-community/mathlib4/pull/5020\">#5020</a></p>",
        "id": 368670751,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1687461405
    },
    {
        "content": "<p>You can at least do <code>instance : Repr B := inferInstanceAs &lt;| Repr A</code></p>",
        "id": 368671304,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1687461559
    }
]