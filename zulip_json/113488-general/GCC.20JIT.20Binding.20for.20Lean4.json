[
    {
        "content": "<p>I am working on creating a GCC JIT Binding for Lean: <a href=\"https://github.com/SchrodingerZhu/lean-gccjit\">https://github.com/SchrodingerZhu/lean-gccjit</a>. (Named \"Jit\" as it is, <code>libgccjit</code> can actually be used as a pretty good AOT backend.)</p>\n<p>It is still very very early stage with low-level direct bindings only. However, it gained the ability to emit its first executable just now!</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">blockCheck1</span> <span class=\"o\">(</span><span class=\"n\">ctx</span><span class=\"o\">:</span> <span class=\"n\">Context</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">location</span> <span class=\"bp\">←</span> <span class=\"n\">ctx.newLocation</span> <span class=\"s2\">\"test.c\"</span> <span class=\"mi\">3</span> <span class=\"mi\">3</span>\n  <span class=\"k\">let</span> <span class=\"n\">int</span> <span class=\"bp\">←</span> <span class=\"n\">ctx.getType</span> <span class=\"n\">TypeEnum.Int</span>\n  <span class=\"k\">let</span> <span class=\"n\">code</span> <span class=\"bp\">←</span> <span class=\"n\">ctx.newParam</span> <span class=\"n\">location</span> <span class=\"n\">int</span> <span class=\"s2\">\"code\"</span>\n  <span class=\"k\">let</span> <span class=\"n\">exit</span> <span class=\"bp\">←</span> <span class=\"n\">ctx.newFunction</span> <span class=\"n\">location</span> <span class=\"n\">FunctionKind.Imported</span> <span class=\"n\">int</span> <span class=\"s2\">\"exit\"</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">code</span><span class=\"o\">]</span> <span class=\"n\">false</span>\n  <span class=\"k\">let</span> <span class=\"n\">main</span> <span class=\"bp\">←</span> <span class=\"n\">ctx.newFunction</span> <span class=\"n\">location</span> <span class=\"n\">FunctionKind.Exported</span> <span class=\"n\">int</span> <span class=\"s2\">\"main\"</span> <span class=\"bp\">#</span><span class=\"o\">[]</span> <span class=\"n\">false</span>\n  <span class=\"k\">let</span> <span class=\"n\">entry</span> <span class=\"bp\">←</span> <span class=\"n\">main.newBlock</span> <span class=\"s2\">\"entry\"</span>\n  <span class=\"k\">let</span> <span class=\"n\">zero</span> <span class=\"bp\">←</span> <span class=\"n\">ctx.zero</span> <span class=\"n\">int</span>\n  <span class=\"k\">let</span> <span class=\"n\">callExit</span> <span class=\"bp\">←</span> <span class=\"n\">ctx.newCall</span> <span class=\"n\">location</span> <span class=\"n\">exit</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">zero</span><span class=\"o\">]</span>\n  <span class=\"n\">entry.endWithReturn</span> <span class=\"n\">location</span> <span class=\"n\">callExit</span>\n</code></pre></div>\n<p>It is very likely that I have made many mistakes in creating the bindings. I am hoping that someone else interested can help audit the code and also help design <code>Monad</code> flavor higher-level interfaces.</p>",
        "id": 389567752,
        "sender_full_name": "Schrodinger ZHU Yifan",
        "timestamp": 1694061652
    },
    {
        "content": "<p>It is now able to compile a brainfuck program!</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"bp\">«</span><span class=\"n\">LeanGccJit</span><span class=\"bp\">»</span>\n<span class=\"kn\">import</span> <span class=\"n\">LeanGccJit.Version</span>\n<span class=\"kn\">import</span> <span class=\"n\">LeanGccJit.Types</span>\n<span class=\"kn\">import</span> <span class=\"n\">LeanGccJit.Unsafe</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">BFItem</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Right</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Left</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Inc</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Dec</span>\n  <span class=\"bp\">|</span> <span class=\"n\">PutChar</span>\n  <span class=\"bp\">|</span> <span class=\"n\">GetChar</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Loop</span> <span class=\"o\">(</span><span class=\"n\">body</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">BFItem</span><span class=\"o\">)</span>\n<span class=\"n\">deriving</span> <span class=\"n\">Repr</span>\n\n<span class=\"n\">partial</span> <span class=\"kd\">def</span> <span class=\"n\">compileBF</span> <span class=\"o\">(</span><span class=\"n\">ctx</span><span class=\"o\">:</span> <span class=\"n\">Context</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">putchar</span><span class=\"o\">:</span> <span class=\"n\">Func</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">getchar</span><span class=\"o\">:</span> <span class=\"n\">Func</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">main</span><span class=\"o\">:</span> <span class=\"n\">Func</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">block</span><span class=\"o\">:</span> <span class=\"n\">Block</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">gBuffer</span> <span class=\"o\">:</span> <span class=\"n\">LValue</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">cursor</span> <span class=\"o\">:</span> <span class=\"n\">LValue</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">one</span><span class=\"o\">:</span> <span class=\"n\">RValue</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">prog</span><span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">BFItem</span><span class=\"o\">)</span>\n  <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">Block</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">block</span> <span class=\"o\">:=</span> <span class=\"n\">block</span>\n  <span class=\"n\">for</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"n\">prog</span> <span class=\"k\">do</span>\n    <span class=\"k\">match</span> <span class=\"n\">i</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"n\">BFItem.Right</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"n\">block.addAssignmentOp</span> <span class=\"n\">none</span> <span class=\"n\">cursor</span> <span class=\"n\">BinaryOp.Plus</span> <span class=\"n\">one</span>\n    <span class=\"bp\">|</span> <span class=\"n\">BFItem.Left</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"n\">block.addAssignmentOp</span> <span class=\"n\">none</span> <span class=\"n\">cursor</span> <span class=\"n\">BinaryOp.Minus</span> <span class=\"n\">one</span>\n    <span class=\"bp\">|</span> <span class=\"n\">BFItem.Inc</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"k\">let</span> <span class=\"n\">access</span> <span class=\"bp\">←</span> <span class=\"n\">ctx.newArrayAccess</span> <span class=\"n\">none</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">gBuffer.asRValue</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">cursor.asRValue</span><span class=\"o\">)</span>\n      <span class=\"n\">block.addAssignmentOp</span> <span class=\"n\">none</span> <span class=\"n\">access</span> <span class=\"n\">BinaryOp.Plus</span> <span class=\"n\">one</span>\n    <span class=\"bp\">|</span> <span class=\"n\">BFItem.Dec</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"k\">let</span> <span class=\"n\">access</span> <span class=\"bp\">←</span> <span class=\"n\">ctx.newArrayAccess</span> <span class=\"n\">none</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">gBuffer.asRValue</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">cursor.asRValue</span><span class=\"o\">)</span>\n      <span class=\"n\">block.addAssignmentOp</span> <span class=\"n\">none</span> <span class=\"n\">access</span> <span class=\"n\">BinaryOp.Minus</span> <span class=\"n\">one</span>\n    <span class=\"bp\">|</span> <span class=\"n\">BFItem.PutChar</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"k\">let</span> <span class=\"n\">access</span> <span class=\"bp\">←</span> <span class=\"n\">ctx.newArrayAccess</span> <span class=\"n\">none</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">gBuffer.asRValue</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">cursor.asRValue</span><span class=\"o\">)</span>\n      <span class=\"k\">let</span> <span class=\"n\">ch</span> <span class=\"bp\">←</span> <span class=\"n\">ctx.newCall</span> <span class=\"n\">none</span> <span class=\"n\">putchar</span> <span class=\"bp\">#</span><span class=\"o\">[(</span><span class=\"bp\">←</span> <span class=\"n\">access.asRValue</span><span class=\"o\">)]</span>\n      <span class=\"n\">block.addEval</span> <span class=\"n\">none</span> <span class=\"n\">ch</span>\n    <span class=\"bp\">|</span> <span class=\"n\">BFItem.GetChar</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"k\">let</span> <span class=\"n\">access</span> <span class=\"bp\">←</span> <span class=\"n\">ctx.newArrayAccess</span> <span class=\"n\">none</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">gBuffer.asRValue</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">cursor.asRValue</span><span class=\"o\">)</span>\n      <span class=\"k\">let</span> <span class=\"n\">ch</span> <span class=\"bp\">←</span> <span class=\"n\">ctx.newCall</span> <span class=\"n\">none</span> <span class=\"n\">putchar</span> <span class=\"bp\">#</span><span class=\"o\">[(</span><span class=\"bp\">←</span> <span class=\"n\">access.asRValue</span><span class=\"o\">)]</span>\n      <span class=\"n\">block.addAssignment</span> <span class=\"n\">none</span> <span class=\"n\">access</span> <span class=\"n\">ch</span>\n    <span class=\"bp\">|</span> <span class=\"n\">BFItem.Loop</span> <span class=\"n\">body</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"k\">let</span> <span class=\"n\">loop</span> <span class=\"bp\">←</span> <span class=\"n\">main.newBlock</span> <span class=\"n\">none</span>\n      <span class=\"k\">let</span> <span class=\"n\">after</span> <span class=\"bp\">←</span> <span class=\"n\">main.newBlock</span> <span class=\"n\">none</span>\n      <span class=\"k\">let</span> <span class=\"n\">access</span> <span class=\"bp\">←</span> <span class=\"n\">ctx.newArrayAccess</span> <span class=\"n\">none</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">gBuffer.asRValue</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">cursor.asRValue</span><span class=\"o\">)</span>\n      <span class=\"k\">let</span> <span class=\"n\">access</span> <span class=\"bp\">←</span> <span class=\"n\">ctx.newCast</span> <span class=\"n\">none</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">access.asRValue</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">ctx.getType</span> <span class=\"n\">TypeEnum.Bool</span><span class=\"o\">)</span>\n      <span class=\"n\">block.endWithConditional</span> <span class=\"n\">none</span> <span class=\"n\">access</span> <span class=\"n\">loop</span> <span class=\"n\">after</span>\n      <span class=\"k\">let</span> <span class=\"n\">blk</span> <span class=\"bp\">←</span> <span class=\"n\">compileBF</span> <span class=\"n\">ctx</span> <span class=\"n\">putchar</span> <span class=\"n\">getchar</span> <span class=\"n\">main</span> <span class=\"n\">loop</span> <span class=\"n\">gBuffer</span> <span class=\"n\">cursor</span> <span class=\"n\">one</span> <span class=\"n\">body</span>\n      <span class=\"n\">blk.endWithConditional</span> <span class=\"n\">none</span> <span class=\"n\">access</span> <span class=\"n\">loop</span> <span class=\"n\">after</span>\n      <span class=\"n\">block</span> <span class=\"o\">:=</span> <span class=\"n\">after</span>\n  <span class=\"n\">pure</span> <span class=\"n\">block</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">splitAtEnd</span>  <span class=\"o\">(</span><span class=\"n\">prog</span><span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Char</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">List</span> <span class=\"n\">Char</span> <span class=\"bp\">×</span> <span class=\"n\">List</span> <span class=\"n\">Char</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"n\">rec</span> <span class=\"n\">loop</span> <span class=\"o\">(</span><span class=\"n\">level</span><span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">prog</span><span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Char</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">acc</span><span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Char</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">List</span> <span class=\"n\">Char</span> <span class=\"bp\">×</span> <span class=\"n\">List</span> <span class=\"n\">Char</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n    <span class=\"k\">match</span> <span class=\"n\">prog</span><span class=\"o\">,</span> <span class=\"n\">level</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"sc\">'['</span> <span class=\"o\">::</span> <span class=\"n\">rest</span><span class=\"o\">,</span> <span class=\"n\">level</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">loop</span> <span class=\"o\">(</span><span class=\"n\">level</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">rest</span> <span class=\"o\">(</span><span class=\"sc\">'['</span> <span class=\"o\">::</span> <span class=\"n\">acc</span><span class=\"o\">)</span>\n    <span class=\"bp\">|</span> <span class=\"sc\">']'</span> <span class=\"o\">::</span> <span class=\"n\">rest</span><span class=\"o\">,</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">acc.reverse</span><span class=\"o\">,</span> <span class=\"n\">rest</span><span class=\"o\">)</span>\n    <span class=\"bp\">|</span> <span class=\"sc\">']'</span> <span class=\"o\">::</span> <span class=\"n\">rest</span><span class=\"o\">,</span> <span class=\"n\">level</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">loop</span> <span class=\"o\">(</span><span class=\"n\">level</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">rest</span> <span class=\"o\">(</span><span class=\"sc\">']'</span> <span class=\"o\">::</span> <span class=\"n\">acc</span><span class=\"o\">)</span>\n    <span class=\"bp\">|</span> <span class=\"n\">c</span> <span class=\"o\">::</span> <span class=\"n\">rest</span><span class=\"o\">,</span> <span class=\"n\">level</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">loop</span> <span class=\"n\">level</span> <span class=\"n\">rest</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">::</span> <span class=\"n\">acc</span><span class=\"o\">)</span>\n    <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"o\">,</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">panic</span><span class=\"bp\">!</span> <span class=\"s2\">\"unterminated loop\"</span>\n  <span class=\"n\">loop</span> <span class=\"mi\">0</span> <span class=\"n\">prog</span> <span class=\"o\">[]</span>\n\n<span class=\"n\">partial</span> <span class=\"kd\">def</span> <span class=\"n\">parseBFProg</span> <span class=\"o\">(</span><span class=\"n\">prog</span><span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Char</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">compiled</span><span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">BFItem</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">BFItem</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">prog</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"sc\">'&gt;'</span> <span class=\"o\">::</span> <span class=\"n\">rest</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">parseBFProg</span> <span class=\"n\">rest</span> <span class=\"o\">(</span><span class=\"n\">compiled.push</span> <span class=\"n\">BFItem.Right</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"sc\">'&lt;'</span> <span class=\"o\">::</span> <span class=\"n\">rest</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">parseBFProg</span> <span class=\"n\">rest</span> <span class=\"o\">(</span><span class=\"n\">compiled.push</span> <span class=\"n\">BFItem.Left</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"sc\">'+'</span> <span class=\"o\">::</span> <span class=\"n\">rest</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">parseBFProg</span> <span class=\"n\">rest</span> <span class=\"o\">(</span><span class=\"n\">compiled.push</span> <span class=\"n\">BFItem.Inc</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"sc\">'-'</span> <span class=\"o\">::</span> <span class=\"n\">rest</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">parseBFProg</span> <span class=\"n\">rest</span> <span class=\"o\">(</span><span class=\"n\">compiled.push</span> <span class=\"n\">BFItem.Dec</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"sc\">'.'</span> <span class=\"o\">::</span> <span class=\"n\">rest</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">parseBFProg</span> <span class=\"n\">rest</span> <span class=\"o\">(</span><span class=\"n\">compiled.push</span> <span class=\"n\">BFItem.PutChar</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"sc\">','</span> <span class=\"o\">::</span> <span class=\"n\">rest</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">parseBFProg</span> <span class=\"n\">rest</span> <span class=\"o\">(</span><span class=\"n\">compiled.push</span> <span class=\"n\">BFItem.GetChar</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"sc\">'['</span> <span class=\"o\">::</span> <span class=\"n\">rest</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">body</span><span class=\"o\">,</span> <span class=\"n\">tail</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">splitAtEnd</span> <span class=\"n\">rest</span>\n    <span class=\"k\">let</span> <span class=\"n\">bodyCompiled</span> <span class=\"o\">:=</span> <span class=\"n\">parseBFProg</span> <span class=\"n\">body</span> <span class=\"bp\">#</span><span class=\"o\">[]</span>\n    <span class=\"n\">parseBFProg</span> <span class=\"n\">tail</span> <span class=\"o\">(</span><span class=\"n\">compiled.push</span> <span class=\"o\">(</span><span class=\"n\">BFItem.Loop</span> <span class=\"n\">bodyCompiled</span><span class=\"o\">))</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">compiled</span>\n\n<span class=\"n\">partial</span> <span class=\"kd\">def</span> <span class=\"n\">compileBFToFile</span> <span class=\"o\">(</span><span class=\"n\">path</span><span class=\"o\">:</span> <span class=\"n\">System.FilePath</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">prog</span><span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">ctx</span> <span class=\"bp\">←</span> <span class=\"n\">Context.acquire</span>\n  <span class=\"n\">ctx.setIntOption</span> <span class=\"n\">IntOption.OptimizationLevel</span> <span class=\"mi\">3</span>\n  <span class=\"k\">let</span> <span class=\"n\">int</span> <span class=\"bp\">←</span> <span class=\"n\">ctx.getType</span> <span class=\"n\">TypeEnum.Int</span>\n  <span class=\"k\">let</span> <span class=\"n\">chParam</span> <span class=\"bp\">←</span> <span class=\"n\">ctx.newParam</span> <span class=\"n\">none</span> <span class=\"n\">int</span> <span class=\"s2\">\"ch\"</span>\n  <span class=\"k\">let</span> <span class=\"n\">putchar</span> <span class=\"bp\">←</span> <span class=\"n\">ctx.newFunction</span> <span class=\"n\">none</span> <span class=\"n\">FunctionKind.Imported</span> <span class=\"n\">int</span> <span class=\"s2\">\"putchar\"</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">chParam</span><span class=\"o\">]</span> <span class=\"n\">false</span>\n  <span class=\"k\">let</span> <span class=\"n\">getchar</span> <span class=\"bp\">←</span> <span class=\"n\">ctx.newFunction</span> <span class=\"n\">none</span> <span class=\"n\">FunctionKind.Imported</span> <span class=\"n\">int</span> <span class=\"s2\">\"getchar\"</span> <span class=\"bp\">#</span><span class=\"o\">[]</span> <span class=\"n\">false</span>\n  <span class=\"k\">let</span> <span class=\"n\">main</span> <span class=\"bp\">←</span> <span class=\"n\">ctx.newFunction</span> <span class=\"n\">none</span> <span class=\"n\">FunctionKind.Exported</span> <span class=\"n\">int</span> <span class=\"s2\">\"main\"</span> <span class=\"bp\">#</span><span class=\"o\">[]</span> <span class=\"n\">false</span>\n  <span class=\"k\">let</span> <span class=\"n\">buffer</span> <span class=\"bp\">←</span> <span class=\"n\">ctx.newArrayType</span> <span class=\"n\">none</span> <span class=\"n\">int</span> <span class=\"mi\">1024</span>\n  <span class=\"k\">let</span> <span class=\"n\">gBuffer</span> <span class=\"bp\">←</span> <span class=\"n\">ctx.newGlobal</span> <span class=\"n\">none</span> <span class=\"n\">GlobalKind.Internal</span> <span class=\"n\">buffer</span> <span class=\"s2\">\"buffer\"</span>\n  <span class=\"k\">let</span> <span class=\"n\">cursor</span> <span class=\"bp\">←</span> <span class=\"n\">main.newLocal</span> <span class=\"n\">none</span> <span class=\"n\">int</span> <span class=\"s2\">\"cursor\"</span>\n  <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">block</span> <span class=\"bp\">←</span> <span class=\"n\">main.newBlock</span> <span class=\"s2\">\"entry\"</span>\n  <span class=\"k\">let</span> <span class=\"n\">one</span> <span class=\"bp\">←</span> <span class=\"n\">ctx.one</span> <span class=\"n\">int</span>\n  <span class=\"n\">block.addAssignment</span> <span class=\"n\">none</span> <span class=\"n\">cursor</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">ctx.newRvalueFromUInt32</span> <span class=\"n\">int</span> <span class=\"mi\">512</span><span class=\"o\">)</span>\n  <span class=\"k\">let</span> <span class=\"n\">last</span> <span class=\"bp\">←</span> <span class=\"n\">compileBF</span> <span class=\"n\">ctx</span> <span class=\"n\">putchar</span> <span class=\"n\">getchar</span> <span class=\"n\">main</span> <span class=\"n\">block</span> <span class=\"n\">gBuffer</span> <span class=\"n\">cursor</span> <span class=\"n\">one</span> <span class=\"o\">(</span><span class=\"n\">parseBFProg</span> <span class=\"n\">prog.toList</span> <span class=\"bp\">#</span><span class=\"o\">[])</span>\n  <span class=\"k\">let</span> <span class=\"n\">zero</span> <span class=\"bp\">←</span> <span class=\"n\">ctx.zero</span> <span class=\"n\">int</span>\n  <span class=\"n\">last.endWithReturn</span> <span class=\"n\">none</span> <span class=\"n\">zero</span>\n  <span class=\"n\">ctx.compileToFile</span> <span class=\"n\">OutputKind.Executable</span> <span class=\"n\">path.toString</span>\n  <span class=\"n\">IO.println</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"{(← ctx.getFirstError)}\"</span>\n  <span class=\"n\">ctx.release</span>\n</code></pre></div>",
        "id": 389902636,
        "sender_full_name": "Schrodinger ZHU Yifan",
        "timestamp": 1694186627
    },
    {
        "content": "<p>Say \"hello, world\" with </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"n\">compileBFToFile</span> <span class=\"s2\">\"/tmp/bf\"</span> <span class=\"s2\">\"++++++++[&gt;++++[&gt;++&gt;+++&gt;+++&gt;+&lt;&lt;&lt;&lt;-]&gt;+&gt;+&gt;-&gt;&gt;+[&lt;]&lt;-]&gt;&gt;.&gt;---.+++++++..+++.&gt;&gt;.&lt;-.&lt;.+++.------.--------.&gt;&gt;+.&gt;++.\"</span>\n</code></pre></div>",
        "id": 389903734,
        "sender_full_name": "Schrodinger ZHU Yifan",
        "timestamp": 1694186976
    },
    {
        "content": "<p>First release published as <a href=\"https://github.com/SchrodingerZhu/lean-gccjit\">https://github.com/SchrodingerZhu/lean-gccjit</a>.<br>\nSee also the <a href=\"https://www.cs.rochester.edu/~yzhu104/lean-gccjit/\">documentation</a>. </p>\n<p>Thanks for offering help and suggestions during the progress!</p>",
        "id": 393316015,
        "sender_full_name": "Schrodinger ZHU Yifan",
        "timestamp": 1695758201
    }
]