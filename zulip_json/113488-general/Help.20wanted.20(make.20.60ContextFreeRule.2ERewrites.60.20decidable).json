[
    {
        "content": "<p>I'd like to delegate this task to somebody who (unlike me) knows what they are doing...</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">ContextFreeRule</span> <span class=\"n\">T</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">T</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">N</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">DecidableRel</span> <span class=\"n\">r.Rewrites</span> <span class=\"o\">:=</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>It should go into this place:<br>\n<a href=\"https://github.com/leanprover-community/mathlib4/blob/11add7feea9488bd2250bf2122566d4d92e675a2/Mathlib/Computability/ContextFreeGrammar.lean#L51\">https://github.com/leanprover-community/mathlib4/blob/11add7feea9488bd2250bf2122566d4d92e675a2/Mathlib/Computability/ContextFreeGrammar.lean#L51</a></p>",
        "id": 396562209,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1697225943
    },
    {
        "content": "<p>You need to write an algorithm to decide whether a string matches</p>",
        "id": 396581503,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1697238513
    },
    {
        "content": "<p>I had a go at this last week, and it was harder than expected</p>",
        "id": 396581518,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1697238527
    },
    {
        "content": "<p>The easy way out here is to prove that <code>r.Rewrites x y</code> (<a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=ContextFreeRule.Rewrites#doc\">docs#ContextFreeRule.Rewrites</a>) is the same as \"there exists index of a symbol that was replaced\", because lean will then generate an algorithm for you that iterates over all indices (though I think this will be O(x.length^2) due to the involvement of list indexing)</p>",
        "id": 396581689,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1697238672
    }
]