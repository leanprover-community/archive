[
    {
        "content": "<p>Would the following break anything?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"k\">Pi</span><span class=\"bp\">.</span><span class=\"n\">fun_like</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Sort</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">fun_like</span> <span class=\"o\">(</span><span class=\"bp\">Π</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">β</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">coe</span> <span class=\"o\">:=</span> <span class=\"n\">id</span><span class=\"o\">,</span>\n  <span class=\"n\">coe_injective'</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">h</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>(or the equivalent with <code>has_coe_to_fun</code>, I don't care)</p>",
        "id": 298160416,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1662829894
    },
    {
        "content": "<p>I suggest trying it out. My bet is on it going wrong horribly and quickly, but I can't be sure!</p>",
        "id": 298160582,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1662829996
    },
    {
        "content": "<p>Yes it does</p>",
        "id": 298162103,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1662830891
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"268315\">Anatole Dedecker</span> has marked this topic as resolved.</p>",
        "id": 298162105,
        "sender_full_name": "Notification Bot",
        "timestamp": 1662830893
    },
    {
        "content": "<p>IIRC the specific thing that breaks is that Lean starts inserting <code>coe_fn</code> in half of your function applications, and tactics don't tend to like that.</p>",
        "id": 298340817,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1662973735
    },
    {
        "content": "<p>Eric(W) was saying that this sort of approach would allow unbundled morphisms, though, which would be nice.</p>",
        "id": 298340891,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1662973776
    },
    {
        "content": "<p>So maybe this is a serious thing to consider</p>",
        "id": 298340898,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1662973781
    },
    {
        "content": "<p>So the idea there is we'd insert a dummy <code>coe_fn</code> head symbol for all morphisms, so <code>simp</code> can match on it?</p>",
        "id": 298341182,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1662973913
    },
    {
        "content": "<p>precisely, yeah</p>",
        "id": 298341838,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1662974171
    },
    {
        "content": "<p>Yes, but my suggestion was to do that by making a <code>wrapped_function</code> structure rather than introducing coe_fns everywhere</p>",
        "id": 298460209,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1663009228
    }
]