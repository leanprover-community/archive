[
    {
        "content": "<p>Recently I added a new simp lemma to the mathlib ( PR <a href=\"https://github.com/leanprover-community/mathlib/pull/14456\">#14456</a> )</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">coe_int_div_eq_mk</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"bp\">↑</span><span class=\"n\">d</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"bp\">/.</span> <span class=\"n\">d</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>Now this seems to work against <code>field_simp</code>, as would any other simp lemma of the form <code>a / b = ...</code>, for example <code>field_simp</code> excludes</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">one_div</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"bp\">⁻¹</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">inv_eq_one_div</span> <span class=\"n\">a</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span>\n</code></pre></div>\n<p>While one could simply manually exclude the above lemma in <code>field_simp</code> or not mark it as simp lemma in the first place, I wonder if there would be a way to either exclude such simp lemmas automatically in the tactic, or have a test/linter so that the CI would warn an inexperienced user like me from such a problem?</p>\n<p>Happy to give it a try myself, but I 'd like some expertise input on what would be a robust way</p>",
        "id": 286335027,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1655376942
    },
    {
        "content": "<p>I don't think this should be a <code>simp</code> lemma. I don't even know what <code>/.</code> is called.</p>",
        "id": 286335438,
        "sender_full_name": "Reid Barton",
        "timestamp": 1655377206
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/113488-general/topic/.60field_simp.60.20breaking.20under.20new.20simp.20lemmas/near/286335438\">said</a>:</p>\n<blockquote>\n<p>I don't think this should be a <code>simp</code> lemma. I don't even know what <code>/.</code> is called.</p>\n</blockquote>\n<p><code>rat.mk</code></p>\n<p>ok that's probably the simplest option <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 286337593,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1655378257
    },
    {
        "content": "<p>I think a related underlying issue is that I have a old PR that was merged that placed the ext attribute on rat, which means that by default, using the ext tactic on rat equality breaks it into two goals of num and denom equality. I regret that PR, for reasons similar to how Kevin has explained that having ext on complex to break it into re and im is useful for building api but counter-productive afterwards</p>",
        "id": 286337981,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1655378407
    },
    {
        "content": "<p>I guess you're right. The places where I split a rational number into num/denom are rather dirty, explicit constructions, and not really something that <code>simp</code> would be the right tool to deal with them .</p>",
        "id": 286342607,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1655381016
    },
    {
        "content": "<p>I'll just remove the attribute: <a href=\"https://github.com/leanprover-community/mathlib/pull/14765\">#14765</a></p>",
        "id": 286342707,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1655381082
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"385895\">Jon Eugster</span> has marked this topic as resolved.</p>",
        "id": 286342720,
        "sender_full_name": "Notification Bot",
        "timestamp": 1655381093
    }
]