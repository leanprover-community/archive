[
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">C</span> <span class=\"n\">D</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">zzz</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"bp\">→</span> <span class=\"n\">C</span> <span class=\"bp\">→</span> <span class=\"n\">D</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">D</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">apply</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">zzz</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">zzz</span> <span class=\"n\">a</span><span class=\"o\">),</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>If I try this in VS Code (on Ubuntu) and hover over the two <code>zzz</code>s in the <code>apply</code> tactic line, the first one doesn't give me a little transient window saying <code>zzz : A \\to C</code> but the second one does. Can someone else reproduce? Should I expect the window to pop up for the first <code>zzz</code> as well?</p>",
        "id": 154997129,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1547322447
    },
    {
        "content": "<p>I get the corresponding behavior in emacs too, so I guess it is an issue with Lean itself</p>",
        "id": 154997252,
        "sender_full_name": "Reid Barton",
        "timestamp": 1547322667
    },
    {
        "content": "<p>reproduced (Windows, VS Code)</p>",
        "id": 154997256,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1547322691
    },
    {
        "content": "<p><code>by exact g (zzz a) (zzz a)</code> has the issue, but just giving the term mode proof makes things work again.</p>",
        "id": 154997258,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1547322700
    },
    {
        "content": "<p>reproduced all three behaviours</p>",
        "id": 154997300,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1547322732
    },
    {
        "content": "<p>This is actually quite annoying whenever I do a <code>by haveI := _; exact _</code> proof</p>",
        "id": 154997657,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1547323421
    },
    {
        "content": "<p>So it's the Lean server which ships these little windows out?</p>",
        "id": 154997702,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1547323479
    },
    {
        "content": "<p>can we have the complicated diagram again?</p>",
        "id": 154997714,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1547323507
    }
]