[
    {
        "content": "<p>Why does Aesop work with the <code>cases</code> call below, but not without it? In the Aesop paper, <code>cases</code> is described as one of the safe rules. Is there something I have to do to get Aesop to look at casing?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Fin.Basic</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">trace.aesop.steps</span> <span class=\"n\">true</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">Fin.zero_false</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">False</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"c1\">-- cases a</span>\n  <span class=\"n\">aesop</span>\n</code></pre></div>",
        "id": 358710557,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1684239220
    },
    {
        "content": "<p>Does the definition of <code>Fin</code> need to be annotated perhaps?</p>",
        "id": 358711971,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1684239561
    },
    {
        "content": "<p>Yes, you have to add <code>cases</code> rules if you want Aesop to perform case analysis on a particular type. This annotation, for example, instructs Aesop to run <code>cases</code> on each hypothesis <code>h : Fin n</code> and to consider this a safe rule (i.e., to do it eagerly without backtracking):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Fin.Basic</span>\n\n<span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"n\">aesop</span> <span class=\"n\">safe</span> <span class=\"n\">cases</span><span class=\"o\">]</span> <span class=\"n\">Fin</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">Fin.zero_false</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">False</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">aesop</span>\n</code></pre></div>",
        "id": 358713147,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1684239826
    },
    {
        "content": "<p>However, this may be a bit too aggressive. A more conservative setup would be this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Fin.Basic</span>\n\n<span class=\"kd\">@[aesop safe destruct]</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">Fin.zero_false</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">False</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">cases</span> <span class=\"n\">a</span><span class=\"bp\">;</span> <span class=\"n\">aesop</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">True</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">False</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">aesop</span>\n</code></pre></div>",
        "id": 358713630,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1684239940
    },
    {
        "content": "<p>Cool! Out of curiosity, why do you consider it too aggressive? Is it that it slows down the tactic to add too many of these?</p>",
        "id": 358721440,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1684241557
    },
    {
        "content": "<p>I'd assume you don't really want to case on every <code>Fin</code></p>",
        "id": 358726936,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1684242705
    },
    {
        "content": "<p>But why not? A fin just consists of a Nat and a <code>&lt;</code> - it seems like it would be convenient to always just decompose where possible and then only have to worry about the ability of Aesop to prove things about Nats.</p>",
        "id": 358730925,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1684243504
    },
    {
        "content": "<p>Is there an example where the aggressive Fin casing would cause Aesop to fail, where it would succeed without the Fin casing?</p>",
        "id": 358731402,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1684243602
    },
    {
        "content": "<p>It's not just that subtype, it has a different ring structure</p>",
        "id": 358731532,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1684243630
    },
    {
        "content": "<p>So I guess you're saying if I wanted to prove something like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>then the decomposition would be inconvenient, I guess that makes sense.</p>",
        "id": 358734979,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1684244293
    },
    {
        "content": "<p><code>Fin</code> really should not be a <code>Ring</code>, but anyway... :-)</p>\n<p>Blind <code>case</code>ing gets very expensive. <code>tidy</code> used to do more <code>case</code> bashing by default than <code>aesop</code>, and this was the origin of many performance problems.</p>",
        "id": 358737121,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1684244699
    },
    {
        "content": "<p>I certainly have often had the experience of a <code>tidy</code>call running forever. On the other hand, I'd prefer a tactic that is unperformant over one that gives up too early.</p>\n<p>Is there any way to make <code>safe</code> rules that are applied lazily/with low priority/only if all other options fail?</p>",
        "id": 358739961,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1684245272
    },
    {
        "content": "<p>I used <code>Ring</code> as a shorthand -- whether or not it has modular addition or saturating addition, it's still a different enough structure that breaking it down to the deconstructed subtype tuples might be the \"long way around\"</p>",
        "id": 358741968,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1684245665
    },
    {
        "content": "<p>My intuition (mostly untested) is that the following would be a good process for developing a library with Aesop:</p>\n<ul>\n<li>While developing the API for a type, say <code>Fin</code>, locally add Aesop lemmas that reduce <code>Fin</code> to more primitive notions. Then Aesop can hopefully make progress on the API lemmas. In more complex cases, it may be appropriate to define a rule set for this reduction.</li>\n<li>Once the API is developed, go back and tag likely-useful API lemmas as global rules.</li>\n</ul>\n<p>Downstream proofs involving <code>Fin</code> will then hopefully need only the API lemmas. If they need to break the <code>Fin</code> abstraction, corresponding Aesop rules can be added locally again, but this should perhaps be considered a code smell.</p>",
        "id": 358787173,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1684254830
    }
]