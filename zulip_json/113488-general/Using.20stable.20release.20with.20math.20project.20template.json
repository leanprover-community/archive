[
    {
        "content": "<p>Since mathlib4 has monthly stable releases now, is there a way to create a new project using the latest <em>stable</em> release / a specified release of mathlib with <code>lake</code>? Right now, I have a bash script to which I pass the tag (e.g. \"v4.2.0\") and which runs <code>lake new &lt;project_name&gt; math</code>, modifies <code>&lt;project_name&gt;/lean-toolchain</code> and adds <code>@\"&lt;tag&gt;\"</code> to the mathlib reference in<code>&lt;project_name&gt;/lakefile.lean</code>.</p>\n<p>Edit: I was confused about what my own script does as it's been a while since I wrote it.</p>",
        "id": 402222230,
        "sender_full_name": "Peiran Wu",
        "timestamp": 1700050704
    },
    {
        "content": "<p><code>lake new &lt;project_name&gt; math</code> currently creates a project that uses the latest unstable release of Lean and master branch of mathlib4. Would it not make more sense now to have <code>lake</code> use the latest stable release by default?</p>",
        "id": 402223029,
        "sender_full_name": "Peiran Wu",
        "timestamp": 1700050919
    },
    {
        "content": "<p>I think stability is currently not considered a key feature of Lean, and I think that <code>math</code> by default chooses unstable is okay; on the other hand, I think instructions for pinning stable should be much more clear.</p>",
        "id": 402229399,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1700052458
    },
    {
        "content": "<p>Sure. I think we shouldn't stop at \"instructions\". I was trying to find out if I could pin to stable with a single command (e.g. with a command line argument). If not, I think we should make that possible.</p>",
        "id": 402231232,
        "sender_full_name": "Peiran Wu",
        "timestamp": 1700052906
    },
    {
        "content": "<p>I'll dig up the source code for the math template later. But if someone familiar with the matter could point me there, I would appreciate it.</p>",
        "id": 402232573,
        "sender_full_name": "Peiran Wu",
        "timestamp": 1700053235
    },
    {
        "content": "<p>Pinning to stable is a very unusual requirement for a math project. Why do you want to do that?</p>",
        "id": 402234954,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1700053791
    },
    {
        "content": "<p>Pinning is useful in many applications, I'm not sure about specifically stable.</p>",
        "id": 402237055,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1700054316
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/113488-general/topic/Using.20stable.20release.20with.20math.20project.20template/near/402234954\">said</a>:</p>\n<blockquote>\n<p>Pinning to stable is a very unusual requirement for a math project. Why do you want to do that?</p>\n</blockquote>\n<p>Because I want as few Lean toolchains on my machine as possible. If I pin to stable, then I only need that toolchain and another one for working in mathlib4 itself. And I'm not working on anything that needs the latest commits in mathlib4. (Lean's toolchain management is a fork of that of Rust, and I only ever have one Rust toolchain installed at any point. Mathlib is a bit different, so I can tolerate having another toolchain for it.)</p>",
        "id": 402247473,
        "sender_full_name": "Peiran Wu",
        "timestamp": 1700056848
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"284160\">Eric Rodriguez</span> <a href=\"#narrow/stream/113488-general/topic/Using.20stable.20release.20with.20math.20project.20template/near/402237055\">said</a>:</p>\n<blockquote>\n<p>Pinning is useful in many applications, I'm not sure about specifically stable.</p>\n</blockquote>\n<p>The type of pinning that's useful for mathlib is already done automatically by <code>lake-manifest.json</code> though?</p>",
        "id": 402247591,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1700056875
    },
    {
        "content": "<p>(Why do we have stable releases of mathlib if they are not meant to be used?)</p>",
        "id": 402247937,
        "sender_full_name": "Peiran Wu",
        "timestamp": 1700056946
    },
    {
        "content": "<p>Peiran, if you want few toolchains then you shouldn't update. The best pinning is to not run <code>lake update</code>.</p>",
        "id": 402249756,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1700057288
    },
    {
        "content": "<p>If the idea is that an <code>rc</code> toolchain is meant to beta test new changes before making it to the next stable release, it is sensible that people should not have to update to an <code>rc</code> toolchain if they don't wish to test these changes, until they appear in a stable form</p>",
        "id": 402249989,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1700057325
    },
    {
        "content": "<p>I know this is not a priority for most people and I'm happy to keep using my bash script. My question hasn't been answered yet, but I guess the answer is no, <code>lake</code> doesn't support that yet. In that case, I might do a PR that makes this possible for people who are toolchain-minimliastic like me.</p>",
        "id": 402251155,
        "sender_full_name": "Peiran Wu",
        "timestamp": 1700057538
    },
    {
        "content": "<p>It is not supported yet and I wish it were</p>",
        "id": 402251208,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1700057551
    },
    {
        "content": "<p>something like <code>lake update stable</code> which excludes RC releases and <code>lake update latest</code> which will update to the latest release including <code>rc</code> \"pre-releases\"</p>",
        "id": 402251477,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1700057613
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/113488-general/topic/Using.20stable.20release.20with.20math.20project.20template/near/402249756\">said</a>:</p>\n<blockquote>\n<p>Peiran, if you want few toolchains then you shouldn't update. The best pinning is to not run <code>lake update</code>.</p>\n</blockquote>\n<p>The problem is that I have projects that start at different points in time and the current toolchain at those times are different. So I'd end up having to update everything when I create a new project</p>",
        "id": 402251536,
        "sender_full_name": "Peiran Wu",
        "timestamp": 1700057630
    },
    {
        "content": "<p>You can always roll back a new project to the same version you were using in an old project</p>",
        "id": 402254937,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1700058517
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113488-general/topic/Using.20stable.20release.20with.20math.20project.20template/near/402254937\">said</a>:</p>\n<blockquote>\n<p>You can always roll back a new project to the same version you were using in an old project</p>\n</blockquote>\n<p>Yes, but that would require the same amount of effort as just pinning the project to stable manually</p>",
        "id": 402255214,
        "sender_full_name": "Peiran Wu",
        "timestamp": 1700058599
    },
    {
        "content": "<p>There is no lake command for this. It is agnostic about versions of dependencies, and doesn't provide any commands at all for controlling them: you edit <code>lakefile.lean</code>.</p>\n<p>The only time <code>lake</code> does anything with a version as far as I know is when you run <code>lake new MyProject math</code>, where the <code>math</code> template is setup to point to mathlib @ master, as that it is most common setup.</p>",
        "id": 402338537,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1700087131
    },
    {
        "content": "<p>I appreciate that editing <code>lakefile.lean</code> is a difficult requirement for many users, especially as the <code>lakefile</code>s become complicated...</p>",
        "id": 402339063,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1700087393
    }
]