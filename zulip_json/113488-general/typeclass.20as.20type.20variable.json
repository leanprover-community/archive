[
    {
        "content": "<p>Is it possible within lean, without metaprogramming, to have a variable that refers to an unspecified typeclass?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">weird_function</span> <span class=\"o\">(</span><span class=\"n\">tc</span><span class=\"o\">:</span> <span class=\"bp\">???</span><span class=\"o\">)</span> <span class=\"bp\">...</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">weird_function</span> <span class=\"o\">(</span><span class=\"n\">LT</span><span class=\"o\">)</span>\n<span class=\"k\">#check</span> <span class=\"n\">weird_function</span><span class=\"o\">(</span><span class=\"n\">GT</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>So where <code>tc</code> would be filled in later with a typeclass (not an instance of a typeclass). I have tried a few things, but so far not stumbled over syntax that works.</p>",
        "id": 392130332,
        "sender_full_name": "Matthew Pocock",
        "timestamp": 1695220241
    },
    {
        "content": "<p>Just check the type of <code>LT</code> and that should be what <code>???</code> is</p>",
        "id": 392130464,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1695220290
    },
    {
        "content": "<p>Can you be more specific about what you want to do with this? A typeclass is \"just\" a (dependent type) so it itself has a type. I don't know any way to specify within the logic of lean that something is a class, but if you have something like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">a</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">alpha</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">m</span> <span class=\"n\">alpha</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"gr\">sorry</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>then it will only ever be instantiated by the TC mechanism when <code>m</code> is a class</p>",
        "id": 392131129,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1695220484
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"127136\">Alex J. Best</span> <a href=\"#narrow/stream/113488-general/topic/typeclass.20as.20type.20variable/near/392131129\">said</a>:</p>\n<blockquote>\n<p>Can you be more specific about what you want to do with this? A typeclass is \"just\" a (dependent type) so it itself has a type. I don't know any way to specify within the logic of lean that something is a class, but if you have something like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">a</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">alpha</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">m</span> <span class=\"n\">alpha</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"gr\">sorry</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>then it will only ever be instantiated by the TC mechanism when <code>m</code> is a class</p>\n</blockquote>\n<p>Thanks. I think this answers my question. I think I was fat-fingering how I was writing <code>Type -&gt; Type</code>.</p>\n<p>Cheers :D</p>",
        "id": 392131498,
        "sender_full_name": "Matthew Pocock",
        "timestamp": 1695220595
    },
    {
        "content": "<p>Apparently lean complains about such a def by default but you can turn that off as the error message states. I'm still curious what you hope to with this though, you can't really do much without more information about the <code>m</code> in question</p>",
        "id": 392131988,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1695220748
    },
    {
        "content": "<p>I'm still interested in a systematic way to describe one type being embedded into another, and asserting that various type classes \"work\" consistently across the embedding.</p>",
        "id": 392133826,
        "sender_full_name": "Matthew Pocock",
        "timestamp": 1695221325
    },
    {
        "content": "<p>I think the two approaches here are:</p>\n<ul>\n<li>Just write out the statements manually for each typeclass</li>\n<li>Use the category theory library which bundles <code>{alpha : Type} [m alpha]</code> as <code>MCat</code></li>\n</ul>",
        "id": 392134186,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1695221446
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113488-general/topic/typeclass.20as.20type.20variable/near/392134186\">said</a>:</p>\n<blockquote>\n<ul>\n<li>Just write out the statements manually for each typeclass</li>\n</ul>\n</blockquote>\n<p>This is what I'm doing while sketching. Trivial but tedious. Probably time for me to read the metaprogramming book.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">NaturalEmbedding</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n    <span class=\"n\">embed</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span>\n    <span class=\"n\">embedded</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Prop</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">NE_LT</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">ne</span> <span class=\"o\">:</span> <span class=\"n\">NaturalEmbedding</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">ltα</span> <span class=\"o\">:</span> <span class=\"n\">LT</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">ltβ</span> <span class=\"o\">:</span> <span class=\"n\">LT</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"n\">where</span>\n    <span class=\"n\">embeds_lt</span><span class=\"o\">(</span><span class=\"n\">a1</span> <span class=\"n\">a2</span><span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ltα.lt</span> <span class=\"n\">a1</span> <span class=\"n\">a2</span> <span class=\"bp\">=</span> <span class=\"n\">ltβ.lt</span> <span class=\"o\">(</span><span class=\"n\">ne.embed</span> <span class=\"n\">a1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ne.embed</span> <span class=\"n\">a2</span><span class=\"o\">)</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">NE_Zero</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">ne</span> <span class=\"o\">:</span> <span class=\"n\">NaturalEmbedding</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">zα</span> <span class=\"o\">:</span> <span class=\"n\">Zero</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">zβ</span> <span class=\"o\">:</span> <span class=\"n\">Zero</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"n\">where</span>\n    <span class=\"n\">embeds_zero</span> <span class=\"o\">:</span> <span class=\"n\">ne.embed</span> <span class=\"n\">zα.zero</span> <span class=\"bp\">=</span> <span class=\"n\">zβ.zero</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">NE_Add</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">ne</span> <span class=\"o\">:</span> <span class=\"n\">NaturalEmbedding</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">addα</span> <span class=\"o\">:</span> <span class=\"n\">Add</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">addβ</span> <span class=\"o\">:</span> <span class=\"n\">Add</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"n\">where</span>\n    <span class=\"n\">embeds_add</span><span class=\"o\">(</span><span class=\"n\">a1</span> <span class=\"n\">a2</span><span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ne.embed</span> <span class=\"o\">(</span><span class=\"n\">addα.add</span> <span class=\"n\">a1</span> <span class=\"n\">a2</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">addβ.add</span> <span class=\"o\">(</span><span class=\"n\">ne.embed</span> <span class=\"n\">a1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ne.embed</span> <span class=\"n\">a2</span><span class=\"o\">)</span>\n\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">NaturalEmbedding</span> <span class=\"n\">ℕ</span> <span class=\"n\">ℤ</span> <span class=\"n\">where</span>\n    <span class=\"n\">embed</span> <span class=\"o\">:=</span> <span class=\"n\">Int.ofNat</span>\n    <span class=\"n\">embedded</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">.</span> <span class=\"bp\">≥</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">NE_LT</span> <span class=\"n\">ℕ</span> <span class=\"n\">ℤ</span> <span class=\"n\">where</span>\n    <span class=\"n\">embeds_lt</span><span class=\"o\">(</span><span class=\"n\">a1</span> <span class=\"n\">a2</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">embed</span><span class=\"o\">]</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">NE_Zero</span> <span class=\"n\">ℕ</span> <span class=\"n\">ℤ</span> <span class=\"n\">where</span>\n    <span class=\"n\">embeds_zero</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">embed</span><span class=\"o\">]</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">NE_Add</span> <span class=\"n\">ℕ</span> <span class=\"n\">ℤ</span> <span class=\"n\">where</span>\n  <span class=\"n\">embeds_add</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">intros</span> <span class=\"n\">a1</span> <span class=\"n\">a2</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">embed</span><span class=\"o\">]</span>\n    <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 392203732,
        "sender_full_name": "Matthew Pocock",
        "timestamp": 1695242385
    }
]