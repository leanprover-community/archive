[
    {
        "content": "<p>What does all this twaddle mean? This is from <a href=\"https://github.com/leanprover-community/mathlib4/pull/4668\">#4668</a></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">local</span> <span class=\"kd\">notation</span> <span class=\"n\">x</span> <span class=\"s2\">\"ùñ£\"</span> <span class=\"n\">y</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">KaehlerDifferential.kerTotal</span> <span class=\"n\">R</span> <span class=\"n\">S</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mkQ</span> <span class=\"o\">(</span><span class=\"n\">single</span> <span class=\"n\">y</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"c1\">-- error</span>\n<span class=\"c\">/-</span>\n<span class=\"cm\">no macro or `[quot_precheck]` instance for syntax kind 'Lean.Parser.Term.proj' found</span>\n<span class=\"cm\">  (KaehlerDifferential.kerTotal R S).mkQ</span>\n<span class=\"cm\">This means we cannot eagerly check your notation/quotation for unbound identifiers; you can use `set_option quotPrecheck false` to disable this check.</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>\n<p>If I just go ahead and write <code>set_option quotPrecheck false in</code> above the definition then I get error <code>expected token</code> on <code>zùñ£x</code> a couple of lines later. However if I write <code>set_option quotPrecheck false</code> instead, then things look like they work. Thing is, I have no idea what I'm doing. Can anyone enlighten me? Note that <code>R</code> and <code>S</code> are indeed variables, and in Lean 3 the analogous line <a href=\"https://github.com/leanprover-community/mathlib/blob/8905e5ed90859939681a725b00f6063e65096d95/src/ring_theory/kaehler.lean#L422\">seemed to work fine</a>.</p>",
        "id": 373037339,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1688684174
    },
    {
        "content": "<p>If I were to guess, it's that <code>R</code> and <code>S</code> are variables? I don't think this is supported by the <code>notation</code> command. You could try using <code>notation3</code> instead, but you might have to turn that dot notation into a normal function application to get a pretty printer (if you don't care about a pretty printer, the command will tell you an extra option to set)</p>",
        "id": 373038359,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1688684670
    },
    {
        "content": "<p>Oh, maybe it's actually that it's that it's using dot notation, but still, I'm not sure <code>notation</code> supports variables so even if you switch it to using a function application it might give you another error</p>",
        "id": 373038692,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1688684801
    },
    {
        "content": "<p>Yes <code>R</code> and <code>S</code> are variables, and this was Ok in Lean 3 for local notation.</p>",
        "id": 373042593,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1688686665
    },
    {
        "content": "<p>Last time I had a similar problem, it was solved by using <code>local macro</code> instead of <code>local notation</code>.</p>",
        "id": 373043633,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1688687211
    },
    {
        "content": "<p>See <a href=\"https://tqft.net/mathlib4files/MeasureTheory/Integral/DivergenceTheorem\">file#MeasureTheory/Integral/DivergenceTheorem</a></p>",
        "id": 373043730,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1688687244
    },
    {
        "content": "<p>No, this file doesn't use local variables.</p>",
        "id": 373043849,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1688687302
    },
    {
        "content": "<p>I don't know the syntax for <code>local macro</code> so am unable to check if this helps. <code>local notation3</code> prompts me to write <code>local notation3 (prettyPrint := false)</code> which works but for some reason won't prettyprint...</p>",
        "id": 373044646,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1688687750
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">local</span> <span class=\"n\">macro</span> <span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"s2\">\"ùñ£\"</span> <span class=\"n\">y</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"o\">:</span> <span class=\"n\">term</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">((</span><span class=\"n\">KaehlerDifferential.kerTotal</span> <span class=\"n\">R</span> <span class=\"n\">S</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mkQ</span> <span class=\"o\">(</span><span class=\"n\">single</span> <span class=\"bp\">$</span><span class=\"n\">y</span> <span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">))</span>\n</code></pre></div>\n<p>seems to work</p>",
        "id": 373051514,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1688690819
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113488-general/topic/no.20macro.20or.20.60.5Bquot_precheck.5D.60.20instance.20for.20syntax.20kind/near/373037339\">said</a>:</p>\n<blockquote>\n<p>If I just go ahead and write <code>set_option quotPrecheck false in</code> above the definition then I get error <code>expected token</code> on <code>zùñ£x</code> a couple of lines later. However if I write <code>set_option quotPrecheck false</code> instead, then things look like they work.</p>\n</blockquote>\n<p>The error itself is stating that the projection syntax (i.e., <code>.mkQ</code>) is not supported by the quotation prechecker, which is true. The <code>notation</code> command prechecks its definition, thus you get this error. To avoid this, you need to turn quotation prechecking off as you did with <code>set_option quotPrecheck false</code>. </p>\n<p>However, the problem with <code>set_option quotPrecheck false in &lt;cmd&gt;</code> is that the <code>in &lt;cmd&gt;</code> syntax creates an anonymous <code>section</code> to wrap <code>cmd</code> in. Since <code>local</code> declarations are local only to their surrounding section,  the definition immediately disappears once you leave the scope of the <code>in</code>. To get around this, you can just surround the definition with <code>set_option</code>. For example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">set_option</span> <span class=\"n\">quotPrecheck</span> <span class=\"n\">false</span>\n<span class=\"kn\">local</span> <span class=\"kd\">notation</span> <span class=\"n\">x</span> <span class=\"s2\">\"ùñ£\"</span> <span class=\"n\">y</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">KaehlerDifferential.kerTotal</span> <span class=\"n\">R</span> <span class=\"n\">S</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mkQ</span> <span class=\"o\">(</span><span class=\"n\">single</span> <span class=\"n\">y</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">quotPrecheck</span> <span class=\"n\">true</span>\n</code></pre></div>\n<p>Alternatively, as  <span class=\"user-mention\" data-user-id=\"214703\">@Yury G. Kudryashov</span>  and <span class=\"user-mention\" data-user-id=\"306577\">@Matthew Ballard</span> indicated, if you write this as a macro with a non-prechecked quotation (i.e., using <code> `(...) </code> instead of <code> ``(...) </code>), you can also  avoid the prechecking.</p>",
        "id": 373071387,
        "sender_full_name": "Mac Malone",
        "timestamp": 1688701271
    },
    {
        "content": "<p>Surely we should consider that a bug? That means we can't ever use <code>set_option ... in local ...</code>.</p>",
        "id": 373109071,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1688715632
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"387244\">@Ya√´l Dillies</span> Mario <a href=\"#narrow/stream/270676-lean4/topic/Notation.20for.20inductive.20types/near/363985526\">previously</a> suggested opening an issue for it, but I do not think it ever manifested.</p>",
        "id": 373111770,
        "sender_full_name": "Mac Malone",
        "timestamp": 1688716355
    },
    {
        "content": "<p>The <code>notation</code> command still won't be able to generate a pretty printer for this though, since it can't handle dot notation when it generates an unexpander, and I'm not sure it generates the correct unexpander when there are local <code>variable</code>-defined variables.</p>",
        "id": 373163415,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1688726863
    },
    {
        "content": "<p>I pushed my first suggestion (\"you could try using <code>notation3</code> instead, but you might have to turn that dot notation into a normal function application\"). You also need to make the coercion be explicit. These are some limitations with <code>notation3</code> that could potentially be improved later.</p>\n<p>Here's what it looks like:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">local</span> <span class=\"n\">notation3</span> <span class=\"n\">x</span> <span class=\"s2\">\"ùñ£\"</span> <span class=\"n\">y</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"n\">FunLike.coe</span> <span class=\"o\">(</span><span class=\"n\">Submodule.mkQ</span> <span class=\"o\">(</span><span class=\"n\">KaehlerDifferential.kerTotal</span> <span class=\"n\">R</span> <span class=\"n\">S</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">single</span> <span class=\"n\">y</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 373163966,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1688726976
    }
]