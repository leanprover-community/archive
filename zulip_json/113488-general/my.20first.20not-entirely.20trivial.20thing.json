[
    {
        "content": "<p>Thanks for all the helpful answers to my questions these past few days. I've written my first not entirely trivial proof that I can solve two linear equations. Where the equations produce whole number outputs for whole number inputs, the solutions should generate all whole number solutions, but I've not proved this yet. Constructive criticism welcomed.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- A linear equation of the form y=mx+c</span>\n<span class=\"kd\">structure</span> <span class=\"n\">LF</span> <span class=\"o\">:=</span>\n    <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">m_gt_zero</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">m</span><span class=\"o\">)</span>\n\n<span class=\"c1\">-- Perhaps there's a typeclass for this?</span>\n<span class=\"kd\">def</span> <span class=\"n\">LF.app</span> <span class=\"o\">(</span><span class=\"n\">lf</span> <span class=\"o\">:</span> <span class=\"n\">LF</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span> <span class=\"o\">:=</span> <span class=\"n\">lf.m</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">lf.c</span>\n\n<span class=\"c1\">-- parameterised solutions to lf1,2</span>\n<span class=\"kd\">def</span> <span class=\"n\">solutions</span> <span class=\"o\">(</span><span class=\"n\">lf₁</span> <span class=\"n\">lf₂</span> <span class=\"o\">:</span> <span class=\"n\">LF</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">LF</span><span class=\"bp\">×</span><span class=\"n\">LF</span> <span class=\"o\">:=</span>\n    <span class=\"k\">let</span> <span class=\"n\">mgcd</span> <span class=\"o\">:=</span> <span class=\"n\">Nat.gcd</span> <span class=\"n\">lf₁.m</span> <span class=\"n\">lf₂.m</span>\n    <span class=\"k\">let</span> <span class=\"n\">lfL</span> <span class=\"o\">:=</span> <span class=\"o\">{</span>\n        <span class=\"n\">m</span> <span class=\"o\">:=</span> <span class=\"n\">lf₂.m</span> <span class=\"bp\">/</span> <span class=\"n\">mgcd</span>\n        <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"n\">lf₂.c</span> <span class=\"bp\">/</span> <span class=\"n\">lf₁.m</span>\n        <span class=\"n\">m_gt_zero</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n            <span class=\"k\">have</span> <span class=\"n\">gz</span> <span class=\"o\">:=</span> <span class=\"n\">Nat.div_gcd_pos_of_pos_right</span> <span class=\"n\">lf₁.m</span> <span class=\"n\">lf₂.m_gt_zero</span>\n            <span class=\"n\">simp</span>\n            <span class=\"n\">assumption</span>\n    <span class=\"o\">}</span>\n    <span class=\"k\">let</span> <span class=\"n\">lfR</span> <span class=\"o\">:=</span> <span class=\"o\">{</span>\n        <span class=\"n\">m</span> <span class=\"o\">:=</span> <span class=\"n\">lf₁.m</span> <span class=\"bp\">/</span> <span class=\"n\">mgcd</span>\n        <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"n\">lf₁.c</span> <span class=\"bp\">/</span> <span class=\"n\">lf₂.m</span>\n        <span class=\"n\">m_gt_zero</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n            <span class=\"k\">have</span> <span class=\"n\">gz</span> <span class=\"o\">:=</span> <span class=\"n\">Nat.div_gcd_pos_of_pos_left</span> <span class=\"n\">lf₂.m</span> <span class=\"n\">lf₁.m_gt_zero</span>\n            <span class=\"n\">simp</span>\n            <span class=\"n\">assumption</span>\n    <span class=\"o\">}</span>\n    <span class=\"o\">⟨</span> <span class=\"n\">lfL</span><span class=\"o\">,</span> <span class=\"n\">lfR</span> <span class=\"o\">⟩</span>\n\n<span class=\"c1\">-- prove that they are, in fact, solutions</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">solutions_valid</span> <span class=\"o\">(</span><span class=\"n\">lf₁</span> <span class=\"n\">lf₂</span> <span class=\"o\">:</span> <span class=\"n\">LF</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(⟨</span><span class=\"n\">sL</span><span class=\"o\">,</span> <span class=\"n\">sR</span><span class=\"o\">⟩</span> <span class=\"bp\">=</span> <span class=\"n\">solutions</span> <span class=\"n\">lf₁</span> <span class=\"n\">lf₂</span><span class=\"o\">)</span> <span class=\"bp\">→</span>\n        <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"o\">,</span> <span class=\"n\">lf₁.app</span> <span class=\"o\">(</span><span class=\"n\">sL.app</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">lf₂.app</span> <span class=\"o\">(</span><span class=\"n\">sR.app</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">solutions</span><span class=\"o\">]</span>\n    <span class=\"n\">rintro</span> <span class=\"n\">hsL</span> <span class=\"n\">hsR</span> <span class=\"n\">n</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">LF.app</span><span class=\"o\">,</span> <span class=\"n\">hsL</span><span class=\"o\">,</span> <span class=\"n\">hsR</span><span class=\"o\">]</span>\n    <span class=\"k\">have</span> <span class=\"n\">lf₁nz</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">lf₁.m</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">Iff.mpr</span> <span class=\"n\">Nat.cast_ne_zero</span> <span class=\"bp\">$</span> <span class=\"n\">Nat.pos_iff_ne_zero.mp</span> <span class=\"n\">lf₁.m_gt_zero</span>\n    <span class=\"k\">have</span> <span class=\"n\">lf₂nz</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">lf₂.m</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">Iff.mpr</span> <span class=\"n\">Nat.cast_ne_zero</span> <span class=\"bp\">$</span> <span class=\"n\">Nat.pos_iff_ne_zero.mp</span> <span class=\"n\">lf₂.m_gt_zero</span>\n\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">mul_add</span><span class=\"o\">]</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">mul_div_cancel'</span> <span class=\"n\">lf₂.c</span> <span class=\"n\">lf₁nz</span><span class=\"o\">,</span> <span class=\"n\">mul_div_cancel'</span> <span class=\"n\">lf₁.c</span> <span class=\"n\">lf₂nz</span><span class=\"o\">]</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">Nat.gcd_dvd_left</span><span class=\"o\">,</span> <span class=\"n\">Nat.gcd_dvd_right</span><span class=\"o\">]</span>\n    <span class=\"n\">ring</span>\n</code></pre></div>",
        "id": 391137286,
        "sender_full_name": "Matthew Pocock",
        "timestamp": 1694775073
    },
    {
        "content": "<p>You might be able to use <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=CoeFun#doc\">docs#CoeFun</a> for your <code>LF.app</code> although I am not quite sure if that is idiomatic.</p>\n<p>And with respect to your proof. We usually try to use <code>simp</code> only as the last tactic to prove a goal (in your case there is only one goal, if you do e.g. a <code>cases</code> you would want to use <code>simp</code> only at the end of the <code>cases</code> arms). That's because we want to guarantee proof stability. Say that we add a lemma to the default simp rules via <code>@[simp]</code> a call to <code>simp</code> in the middle of your proof could turn your goal into something entirely different now which ends up either failing right away at the next tactic step or the much more annoying variant: ends up failing after a couple of tactic steps and you cant instantly see what's wrong.</p>\n<p>For this reason we usually try to use <code>simp only</code> when we are not in terminal position. If you want to turn a <code>simp</code> call into a <code>simp only</code> one (after all as we just learned <code>simp</code> can involve arbitrary additional lemmas) you can use the mathlib tactic <code>simp?</code> instead of <code>simp</code> which will print the corresponding <code>simp only</code> call  that you can then replace the <code>simp?</code> with.</p>",
        "id": 391140120,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1694776087
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"395550\">Henrik Böving</span> <a href=\"#narrow/stream/113488-general/topic/my.20first.20not-entirely.20trivial.20thing/near/391140120\">said</a>:</p>\n<blockquote>\n<p>You might be able to use <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=CoeFun#doc\">docs#CoeFun</a> for your <code>LF.app</code> although I am not quite sure if that is idiomatic.</p>\n</blockquote>\n<p>I did try something like this but couldn't encourage it to summon the correct bounds. I was probably syntaxing wrongly.</p>\n<blockquote>\n<p>For this reason we usually try to use <code>simp only</code> when we are not in terminal position. If you want to turn a <code>simp</code> call into a <code>simp only</code> one (after all as we just learned <code>simp</code> can involve arbitrary additional lemmas) you can use the mathlib tactic <code>simp?</code> instead of <code>simp</code> which will print the corresponding <code>simp only</code> call  that you can then replace the <code>simp?</code> with.</p>\n</blockquote>\n<p>Brill :D</p>",
        "id": 391141452,
        "sender_full_name": "Matthew Pocock",
        "timestamp": 1694776563
    }
]