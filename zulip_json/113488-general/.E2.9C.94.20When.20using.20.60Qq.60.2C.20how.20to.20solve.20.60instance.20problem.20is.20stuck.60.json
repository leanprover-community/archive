[
    {
        "content": "<p>To be more specify, I am trying to to match</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">|</span> <span class=\"bp\">~</span><span class=\"n\">q</span><span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">$</span><span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"bp\">$</span><span class=\"n\">y</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>It reports <code>typeclass instance problem is stuck, it is often due to metavariables</code> for <code>f</code> requires a instance <code>[F p]</code>.</p>\n<p>I have tried something like <code>@f $P (_ : Q(F $P)) ($x : Q($P)) = @f _ $P _ $y</code>, but it says <code>don't know how to synthesize placeholder for argument 'P'</code></p>",
        "id": 398901643,
        "sender_full_name": "Alissa Tung",
        "timestamp": 1698414239
    },
    {
        "content": "<p>Can you make a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>?</p>",
        "id": 398901944,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1698414336
    },
    {
        "content": "<p>You probably need to use <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Qq.synthInstanceQ#doc\">docs#Qq.synthInstanceQ</a> but a mwe will certainly help</p>",
        "id": 398903236,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1698414806
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113488-general/topic/When.20using.20.60Qq.60.2C.20how.20to.20solve.20.60instance.20problem.20is.20stuck.60/near/398901944\">发言道</a>：</p>\n<blockquote>\n<p>Can you make a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>?</p>\n</blockquote>\n<p>Yes. I finally tried to finish it</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean.Elab</span>\n<span class=\"kn\">import</span> <span class=\"n\">Qq</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Lean.Meta</span> <span class=\"n\">Lean.Elab</span> <span class=\"n\">Lean.Elab.Tactic</span>\n<span class=\"kn\">open</span> <span class=\"n\">Qq</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">where</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span> <span class=\"n\">id</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">f</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">F</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">G</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"mi\">42</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">F</span> <span class=\"n\">ℕ</span> <span class=\"n\">where</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">TacticM</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">expr</span> <span class=\"o\">:</span> <span class=\"n\">Q</span><span class=\"o\">(</span><span class=\"kt\">Prop</span><span class=\"o\">))</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"k\">match</span> <span class=\"n\">expr</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">~</span><span class=\"n\">q</span><span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">f</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"bp\">$</span><span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"bp\">@</span><span class=\"n\">f</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"bp\">$</span><span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"gr\">sorry</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">return</span>\n</code></pre></div>\n<p>and </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">typeclass</span> <span class=\"kd\">instance</span> <span class=\"n\">problem</span> <span class=\"n\">is</span> <span class=\"n\">stuck</span><span class=\"o\">,</span> <span class=\"n\">it</span> <span class=\"n\">is</span> <span class=\"n\">often</span> <span class=\"n\">due</span> <span class=\"n\">to</span> <span class=\"n\">metavariables</span>\n  <span class=\"n\">F</span> <span class=\"bp\">?</span><span class=\"n\">m.659</span>\n</code></pre></div>",
        "id": 398903859,
        "sender_full_name": "Alissa Tung",
        "timestamp": 1698415014
    },
    {
        "content": "<p>I don't get that error when I run your code</p>",
        "id": 398904201,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1698415137
    },
    {
        "content": "<p>I think you're missing an import?</p>",
        "id": 398904237,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1698415152
    },
    {
        "content": "<p>This works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean.Elab</span>\n<span class=\"kn\">import</span> <span class=\"n\">Qq</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Init.Data.Nat.Notation</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Lean.Meta</span> <span class=\"n\">Lean.Elab</span> <span class=\"n\">Lean.Elab.Tactic</span>\n<span class=\"kn\">open</span> <span class=\"n\">Qq</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">where</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span> <span class=\"n\">id</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">f</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">F</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">G</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"mi\">42</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">F</span> <span class=\"n\">ℕ</span> <span class=\"n\">where</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">TacticM</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">expr</span> <span class=\"o\">:</span> <span class=\"n\">Q</span><span class=\"o\">(</span><span class=\"kt\">Prop</span><span class=\"o\">))</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"k\">match</span> <span class=\"n\">expr</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">~</span><span class=\"n\">q</span><span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">f</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"bp\">$</span><span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"bp\">@</span><span class=\"n\">f</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"bp\">$</span><span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"gr\">sorry</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">return</span>\n</code></pre></div>",
        "id": 398904426,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1698415213
    },
    {
        "content": "<p>(<code>(_)</code> not <code>_</code> for instance arguments)</p>",
        "id": 398904452,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1698415222
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113488-general/topic/When.20using.20.60Qq.60.2C.20how.20to.20solve.20.60instance.20problem.20is.20stuck.60/near/398904452\">发言道</a>：</p>\n<blockquote>\n<p>(<code>(_)</code> not <code>_</code> for instance arguments)</p>\n</blockquote>\n<p>Thank you, this does the key step, now my real world code works now</p>",
        "id": 398906882,
        "sender_full_name": "Alissa Tung",
        "timestamp": 1698415929
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"662001\">Alissa Tung</span> has marked this topic as resolved.</p>",
        "id": 398906920,
        "sender_full_name": "Notification Bot",
        "timestamp": 1698415939
    }
]