[
    {
        "content": "<p>Hi, I am a newbie for lean language. I have some question to which i cannot find answer simply by google. Hopefully someone can help me.<br>\nFirst, recursion scheme and codata: A common pattern for functional language is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">(</span><span class=\"n\">co</span><span class=\"o\">)</span><span class=\"kd\">inductive</span> <span class=\"n\">Fix</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">|</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">Fix</span> <span class=\"n\">f</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>which define how a data can be constructed (the maximum fixpoint in term of domain theory).<br>\nIf we use inductive in the above definiton, the lean would <strong>correctly</strong> reject the program, as pattern matching on such data structure cannot assure termination:<br>\n<a href=\"/user_uploads/3121/u-IizZPFZCvHjvbP8QexudQ1/图片.png\">图片.png</a> <br>\nSo,  how shall i apply codata pattern in term of programming in lean? Shall i just define a typeclass describing how data can be destructed?</p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/u-IizZPFZCvHjvbP8QexudQ1/图片.png\" title=\"图片.png\"><img src=\"/user_uploads/3121/u-IizZPFZCvHjvbP8QexudQ1/图片.png\"></a></div><p>Another problem is IO that cannot ensure termination:<br>\n<a href=\"/user_uploads/3121/nN--n6eKgwboTQ5t3MnrzfYJ/图片.png\">图片.png</a> <br>\nthe manual says lean4 doesn't have meta yet. So how do i implement this intention?</p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/nN--n6eKgwboTQ5t3MnrzfYJ/图片.png\" title=\"图片.png\"><img src=\"/user_uploads/3121/nN--n6eKgwboTQ5t3MnrzfYJ/图片.png\"></a></div>",
        "id": 305365856,
        "sender_full_name": "Erika Su",
        "timestamp": 1666361844
    },
    {
        "content": "<p>For <code>IO</code>, you can use <code>unsafe def</code>.<br>\nYou may want to ask the first question in the <a class=\"stream\" data-stream-id=\"270676\" href=\"/#narrow/stream/270676-lean4\">#lean4</a> stream, I'm not sure if the answer will be any different in theory, but it might be more likely to be seen by someone who can answer there</p>",
        "id": 305380230,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1666365920
    },
    {
        "content": "<p>thanks! i shall ask accordingly.</p>",
        "id": 305382544,
        "sender_full_name": "Erika Su",
        "timestamp": 1666366462
    },
    {
        "content": "<p>Please don't use <code>unsafe</code> for this :) . The correct replacement is <code>partial</code> as mentioned in <a href=\"https://leanprover.github.io/lean4/doc/lean3changes.html#the-meta-keyword\">https://leanprover.github.io/lean4/doc/lean3changes.html#the-meta-keyword</a>.</p>",
        "id": 305382686,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1666366490
    },
    {
        "content": "<p>(or use <code>repeat</code>!)</p>",
        "id": 305382844,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1666366523
    },
    {
        "content": "<p>Oops! My bad, I did a quick grep on mathlib4 and found <code>unsafe def.*IO</code> only and no <code>partial def.*IO</code> and assumed based on that.</p>",
        "id": 305383268,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1666366611
    }
]