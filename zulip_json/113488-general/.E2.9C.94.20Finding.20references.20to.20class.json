[
    {
        "content": "<p>Hey there, I have instanciated <code>IsTotalPreorder</code> for something in a file, and I'd like to know all the theorems ans lemmas that now derive from the fact my object derives <code>IsTotalPreorder</code>.</p>\n<p>Is there an easy way to do that ?</p>",
        "id": 397637627,
        "sender_full_name": "Thomas Vigouroux",
        "timestamp": 1697782729
    },
    {
        "content": "<p>For example, I am pretty sure that if I have a <code>set: Finset a</code> and <code>IsTotalPreorder a ord</code> then there exist a maximum (and a minimum) in <code>set</code> with regard to <code>ord</code></p>",
        "id": 397637955,
        "sender_full_name": "Thomas Vigouroux",
        "timestamp": 1697782860
    },
    {
        "content": "<p>To be more precise, I think that the assumption in <code>Finset.max</code> stating that <code>LinearOrder \\alpha</code> is too restrictive, and one actually only needs <code>IsTotalPreorder \\alpha ord</code></p>",
        "id": 397638743,
        "sender_full_name": "Thomas Vigouroux",
        "timestamp": 1697783188
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"658705\">Thomas Vigouroux</span> <a href=\"#narrow/stream/113488-general/topic/Finding.20references.20to.20class/near/397637627\">said</a>:</p>\n<blockquote>\n<p>Is there an easy way to do that ?</p>\n</blockquote>\n<p>You can right click on the class name in vscode and say \"find references\"</p>",
        "id": 397646898,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1697786530
    },
    {
        "content": "<p>I don't see how a preorder would work for your use case; what's the maximum of <code>{A,B,C}</code> where <code>A ≤\n≤ B ≤ C ≤ A</code>?</p>",
        "id": 397647116,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1697786627
    },
    {
        "content": "<p>Well, not <em>the</em> maximum but rather <em>a maximal</em> element</p>",
        "id": 397647680,
        "sender_full_name": "Thomas Vigouroux",
        "timestamp": 1697786841
    },
    {
        "content": "<p>Do you really care about preorders that are not partial orders?</p>",
        "id": 397647705,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1697786853
    },
    {
        "content": "<p>What's your use case here?</p>",
        "id": 397647726,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1697786859
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/113488-general/topic/Finding.20references.20to.20class/near/397647705\">said</a>:</p>\n<blockquote>\n<p>Do you really care about preorders that are not partial orders?</p>\n</blockquote>\n<p>Yeah, I have a setting where I can assign a number to each element in my set, but having the same number does not mean being the same element</p>",
        "id": 397647910,
        "sender_full_name": "Thomas Vigouroux",
        "timestamp": 1697786933
    },
    {
        "content": "<p>Can you give more context?</p>",
        "id": 397647968,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1697786961
    },
    {
        "content": "<p>Yup, just give me a sec</p>",
        "id": 397647994,
        "sender_full_name": "Thomas Vigouroux",
        "timestamp": 1697786974
    },
    {
        "content": "<p>(time to write it)</p>",
        "id": 397648008,
        "sender_full_name": "Thomas Vigouroux",
        "timestamp": 1697786981
    },
    {
        "content": "<p>So I am working on a formalization of a paper I wrote about the Max#SAT problem (a quantitative problem over boolean formulae), which involves combinatorial optimization.</p>\n<p>Basically, I want to show that there always exist <em>a maximal</em> element (that is, the problem always has a solution), and then prove that the algorithm we develop for it is correct (we already have the proof of that, but I thought that having the proof in lean was a good thing too).</p>",
        "id": 397648242,
        "sender_full_name": "Thomas Vigouroux",
        "timestamp": 1697787087
    },
    {
        "content": "<p>(here's the paper for reference <a href=\"https://hal.science/hal-03773005\">https://hal.science/hal-03773005</a>)</p>",
        "id": 397648669,
        "sender_full_name": "Thomas Vigouroux",
        "timestamp": 1697787277
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Finset.exists_maximal#doc\">docs#Finset.exists_maximal</a> surely does what you want.</p>",
        "id": 397674327,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1697796280
    },
    {
        "content": "<p>The trick when you have <code>f : alpha -&gt; beta</code> and you want to show that there's some <code>a</code> maximizing <code>f a</code> is to not introduce an order on <code>alpha</code> but instead just use the linear order on <code>beta</code>.</p>",
        "id": 397674649,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1697796400
    },
    {
        "content": "<p>Oh well, that definitely helps!</p>",
        "id": 397693729,
        "sender_full_name": "Thomas Vigouroux",
        "timestamp": 1697802860
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"658705\">Thomas Vigouroux</span> has marked this topic as resolved.</p>",
        "id": 397700261,
        "sender_full_name": "Notification Bot",
        "timestamp": 1697805275
    },
    {
        "content": "<p>It helped me a lot, thanks !<br>\nI could prove that my set is nonempty, which allowed to prove the fact</p>",
        "id": 397700376,
        "sender_full_name": "Thomas Vigouroux",
        "timestamp": 1697805328
    }
]