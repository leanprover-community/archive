[
    {
        "content": "<p>I am about to move <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Nat.find#doc\">docs#Nat.find</a> from Mathlib to Std, and I would like to do a quick <span aria-label=\"bike\" class=\"emoji emoji-1f6b2\" role=\"img\" title=\"bike\">:bike:</span> <span aria-label=\"house\" class=\"emoji emoji-1f3e0\" role=\"img\" title=\"house\">:house:</span> on naming. Currently the docs say:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">*</span> <span class=\"bp\">`</span><span class=\"n\">Nat.find_spec</span><span class=\"bp\">`</span> <span class=\"n\">is</span> <span class=\"n\">the</span> <span class=\"n\">proof</span> <span class=\"n\">that</span> <span class=\"bp\">`</span><span class=\"n\">Nat.find</span> <span class=\"n\">hp</span><span class=\"bp\">`</span> <span class=\"n\">satisfies</span> <span class=\"bp\">`</span><span class=\"n\">p</span><span class=\"bp\">`.</span>\n<span class=\"bp\">*</span> <span class=\"bp\">`</span><span class=\"n\">Nat.find_min</span><span class=\"bp\">`</span> <span class=\"n\">is</span> <span class=\"n\">the</span> <span class=\"n\">proof</span> <span class=\"n\">that</span> <span class=\"k\">if</span> <span class=\"bp\">`</span><span class=\"n\">m</span> <span class=\"bp\">&lt;</span> <span class=\"n\">Nat.find</span> <span class=\"n\">hp</span><span class=\"bp\">`</span> <span class=\"k\">then</span> <span class=\"bp\">`</span><span class=\"n\">m</span><span class=\"bp\">`</span> <span class=\"n\">does</span> <span class=\"n\">not</span> <span class=\"n\">satisfy</span> <span class=\"bp\">`</span><span class=\"n\">p</span><span class=\"bp\">`.</span>\n<span class=\"bp\">*</span> <span class=\"bp\">`</span><span class=\"n\">Nat.find_min'</span><span class=\"bp\">`</span> <span class=\"n\">is</span> <span class=\"n\">the</span> <span class=\"n\">proof</span> <span class=\"n\">that</span> <span class=\"k\">if</span> <span class=\"bp\">`</span><span class=\"n\">m</span><span class=\"bp\">`</span> <span class=\"n\">does</span> <span class=\"n\">satisfy</span> <span class=\"bp\">`</span><span class=\"n\">p</span><span class=\"bp\">`</span> <span class=\"k\">then</span> <span class=\"bp\">`</span><span class=\"n\">Nat.find</span> <span class=\"n\">hp</span> <span class=\"bp\">≤</span> <span class=\"n\">m</span><span class=\"bp\">`.</span>\n</code></pre></div>\n<p>I think <code>find_min</code> is an unhelpful name, and the fact that the other half of the specification is then called <code>find_min'</code> is especially unhelpful.</p>",
        "id": 396840550,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1697441600
    },
    {
        "content": "<p>Is everyone happy with <code>find_not_of_lt</code> and <code>find_le</code>?</p>",
        "id": 396840602,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1697441623
    },
    {
        "content": "<p><code>find_min</code> and <code>find_min'</code> are not two halves of the specification, they are the same spec written in contrapositive</p>",
        "id": 396840836,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1697441713
    },
    {
        "content": "<p>Oops, indeed! Still, the prime is unhelpful?</p>",
        "id": 396840877,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1697441730
    },
    {
        "content": "<p><code>find_spec</code> is the other half of the spec</p>",
        "id": 396840878,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1697441730
    },
    {
        "content": "<p>I think it should have a name better than <code>find</code>, this does not give an indication that it is finding the minimum element</p>",
        "id": 396841041,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1697441780
    },
    {
        "content": "<p><code>Nat.findMin</code>?</p>",
        "id": 396841101,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1697441809
    },
    {
        "content": "<p>makes sense</p>",
        "id": 396841183,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1697441844
    },
    {
        "content": "<p>is <code>Nat.minimum</code> used? Or is there precedent?</p>",
        "id": 396841219,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1697441870
    },
    {
        "content": "<p>It doesn't seem to be used.</p>",
        "id": 396841333,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1697441899
    },
    {
        "content": "<p>not even in other namespaces?</p>",
        "id": 396841368,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1697441916
    },
    {
        "content": "<p>An approximate precedent would be <code>List.findIdx</code> and <code>List.findIdx?</code>.</p>",
        "id": 396841369,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1697441916
    },
    {
        "content": "<p>There is <code>List.minimum</code>.</p>",
        "id": 396841407,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1697441931
    },
    {
        "content": "<p>also <code>WellFounded.min</code></p>",
        "id": 396841430,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1697441940
    },
    {
        "content": "<p>what's the ordinal one called</p>",
        "id": 396841484,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1697441962
    },
    {
        "content": "<p>I think it used to be <code>omin</code> but now it's just an <code>Inf</code> instance</p>",
        "id": 396841663,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1697442016
    },
    {
        "content": "<p>what is your interest in this function?</p>",
        "id": 396841826,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1697442091
    },
    {
        "content": "<p>I think there should also be a version of the function which starts the search at a given point</p>",
        "id": 396842149,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1697442210
    },
    {
        "content": "<p>I wanted a <code>def idx_of_mem [DecidableEq α] (xs : List α) (w : y ∈ xs) : Nat := ...</code> and was going to define it via Nat.find.</p>",
        "id": 396842158,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1697442215
    },
    {
        "content": "<p>isn't that just <code>findIdx?</code></p>",
        "id": 396842280,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1697442248
    },
    {
        "content": "<p>Well, that returns an Option Nat, but yes, I could also define it in terms of that.</p>",
        "id": 396842332,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1697442271
    },
    {
        "content": "<p>I would not use Nat.find as a building block unless there wasn't any other structure in the problem. It's not very computationally efficient compared to almost any other strategy</p>",
        "id": 396842496,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1697442325
    },
    {
        "content": "<p>You said <code>List.findIdx</code> before, is that a thing? I would expect it to have that signature</p>",
        "id": 396842710,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1697442385
    },
    {
        "content": "<p>I guess that does have the right signature. It doesn't take a <code>y \\mem xs</code> argument and just returns the length of the list if there's nothing to find.</p>",
        "id": 396842836,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1697442437
    },
    {
        "content": "<p>it takes a predicate though, the std naming convention would call it <code>findIdxP</code></p>",
        "id": 396842902,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1697442463
    },
    {
        "content": "<p>well actually I guess they all do</p>",
        "id": 396842962,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1697442483
    },
    {
        "content": "<p>Oh, yes.</p>",
        "id": 396842993,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1697442485
    },
    {
        "content": "<p>The place I'm using this is only for proving a property, I don't really care about the computational behaviour. I will just replace the implementation of <code>idx_of_mem</code> with something in terms of <code>findIdx?</code>, and not think any further about <code>Nat.find</code>.</p>",
        "id": 396843254,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1697442608
    },
    {
        "content": "<p>Still the names of the lemmas are bad. :-)</p>",
        "id": 396843271,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1697442616
    },
    {
        "content": "<p>What does <code>Idx</code> even mean? That sounds unhelpfully obscure.</p>",
        "id": 396857804,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1697447765
    },
    {
        "content": "<p>Anyway, I would go for <code>Nat.find_spec</code>, <code>Nat.of_lt_find</code>, <code>Nat.find_le</code>.</p>",
        "id": 396857875,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1697447797
    },
    {
        "content": "<p>I think that <code>Idx</code> stands for <code>Index</code>, but I also have to remind myself of this every time I see it.</p>",
        "id": 396887969,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1697457890
    }
]