[
    {
        "content": "<p>I tried out Paperproof (in a project that is not mathlib4 itself) and it looked great. But I had trouble getting Paperproof to work it inside mathlib4 itself.</p>\n<p>Let's say I start with the master branch of mathlib4 with no local changes. I run <code>lake exe cache get</code> which works as expected. As instructed by the <a href=\"https://github.com/Paper-Proof/paperproof\">README.md</a> of Paperproof, I add the following line to <code>lakefile.lean</code>, below all the other <code>require</code> statements.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">require</span> <span class=\"n\">Paperproof</span> <span class=\"k\">from</span> <span class=\"n\">git</span> <span class=\"s2\">\"https://github.com/Paper-Proof/paperproof.git\"</span><span class=\"bp\">@</span><span class=\"s2\">\"main\"</span><span class=\"bp\">/</span><span class=\"s2\">\"lean\"</span>\n</code></pre></div>\n<p>I run <code>lake update Paperproof</code> to install the package.</p>\n<p>Now I start/restart the Lean server in VS Code and open a Lean file (say \"Mathlib/GroupTheory/GroupAction/Basic.lean\"). I get a notification (nice feature btw) that says imports are out of date and must be rebuilt. (Note that I haven't added <code>import Paperproof</code>.) If I rebuild, it'll involve 1000+ files and take a long time. If I try to run <code>lake exe cache get</code>, then I get something like the following.</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>Attempting to download 3849 file(s)\nDownloaded: 0 file(s) [attempted 3849/3849 = 100%] (0% success)\nWarning: some files were not found in the cache.\nThis usually means that your local checkout of mathlib4 has diverged from upstream.\nIf you push your commits to a branch of the mathlib4 repository, CI will build the oleans and they will be available later.\nNo cache files to decompress\n</code></pre></div>\n<p>And I think this is happening because all the online cache is considered \"out of date\" as well.</p>\n<p>So my questions are, did I do something wrong? Is it expected/necessary/ideal behaviour that cache becomes out of date when a new package is added to <code>lakefile.lean</code>/<code>lake-manifest.json</code>? Is there any way to avoid rebuilding mathlib locally?</p>",
        "id": 398326154,
        "sender_full_name": "Peiran Wu",
        "timestamp": 1698165862
    },
    {
        "content": "<p><del>Ah so we have a situation with two non-inherited dependencies</del> : sorry mathlib itself is the project so this is not true</p>",
        "id": 398328556,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1698166820
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> : per your proposal which tool chain would lake pick on calling lake update?</p>",
        "id": 398328683,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1698166869
    },
    {
        "content": "<p>Did it get implemented?</p>",
        "id": 398328753,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1698166896
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"258845\">@Peiran Wu</span> : can you check if the lean-toolchain of your project and of mathlib4 inside lake-packages match?</p>",
        "id": 398328967,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1698166967
    },
    {
        "content": "<p>You could try <code>lake exe cache clean!</code></p>",
        "id": 398329050,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1698167005
    },
    {
        "content": "<p>And then repeat lake exe cache get!</p>",
        "id": 398329286,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1698167087
    },
    {
        "content": "<p>You can instead create a standalone project and add paperproof and mathlib as dependencies. I think cache will work correctly in this case.</p>",
        "id": 398330581,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1698167651
    },
    {
        "content": "<p>(I think cache misses are expected if you're adding paperproof as a Mathlib dependency directly)</p>",
        "id": 398330641,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1698167686
    },
    {
        "content": "<p><code>lake new ProjectName math</code> creates a project with a mathlib dependency, then you can just add paperproof to it as you did above. <code>lake exe cache get</code> in the root folder should work</p>",
        "id": 398330753,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1698167758
    },
    {
        "content": "<p>Sorry, I now realize you already know this works, and you are adding it directly to mathlib on purpose. I'll have to defer to the experts.</p>",
        "id": 398330918,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1698167831
    },
    {
        "content": "<p>Yeah, I don't know how this can work unless we add it to mathlib upstream</p>",
        "id": 398331325,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1698168048
    },
    {
        "content": "<p>Apologies! my suggestion won't work. The cache always downloads its dependencies caches too. Maybe that's the missing part, since paperproof doesn't have a cache.</p>",
        "id": 398331449,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1698168121
    },
    {
        "content": "<p>Unfortunately it's not just that, I think. <code>lakefile.lean</code> and <code>lake-manifest.json</code> are hashed by the cache script (and probably by Lake itself). You can't change them in mathlib without causing cache misses.</p>",
        "id": 398332354,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1698168550
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"325367\">Mauricio Collares</span> <a href=\"#narrow/stream/113488-general/topic/Cache.20becomes.20out.20of.20date.20when.20new.20package.20is.20added/near/398332354\">said</a>:</p>\n<blockquote>\n<p>Unfortunately it's not just that, I think. <code>lakefile.lean</code> and <code>lake-manifest.json</code> are hashed by the cache script (and probably by Lake itself). You can't change them in mathlib without causing cache misses.</p>\n</blockquote>\n<p>This would have been my guess as well. Would there be any benefit in modifying the behaviour of the cache script, e.g. taking in account some more specific information such as dependencies instead of just hashing <code>lakefile.lean</code> and/or <code>lake-manifest.json</code>? Or would it break a lot of other things / make things slower?</p>",
        "id": 398334319,
        "sender_full_name": "Peiran Wu",
        "timestamp": 1698169428
    },
    {
        "content": "<p>they are not. At least not by lake. I learnt this just yesterday</p>",
        "id": 398335614,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1698169996
    },
    {
        "content": "<p>See : <a href=\"#narrow/stream/113488-general/topic/Potential.20data.20loss.20from.20.60lake.20clean.60.20with.204.2E2.2E0-rc2.2F3/near/398158713\">https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/Potential.20data.20loss.20from.20.60lake.20clean.60.20with.204.2E2.2E0-rc2.2F3/near/398158713</a></p>",
        "id": 398335679,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1698170030
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"258845\">Peiran Wu</span> <a href=\"#narrow/stream/113488-general/topic/Cache.20becomes.20out.20of.20date.20when.20new.20package.20is.20added/near/398334319\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"325367\">Mauricio Collares</span> <a href=\"#narrow/stream/113488-general/topic/Cache.20becomes.20out.20of.20date.20when.20new.20package.20is.20added/near/398332354\">said</a>:</p>\n<blockquote>\n<p>Unfortunately it's not just that, I think. <code>lakefile.lean</code> and <code>lake-manifest.json</code> are hashed by the cache script (and probably by Lake itself). You can't change them in mathlib without causing cache misses.</p>\n</blockquote>\n<p>This would have been my guess as well. Would there be any benefit in modifying the behaviour of the cache script, e.g. taking in account some more specific information such as dependencies instead of just hashing <code>lakefile.lean</code> and/or <code>lake-manifest.json</code>? Or would it break a lot of other things / make things slower?</p>\n</blockquote>\n<p>This is by design. You should not be adding paperproof as a dependency of mathlib; or if you do you should either do it in a branch, run CI and get some fresh caches to use, or you should make a PR adding it to master.</p>",
        "id": 398358483,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1698180541
    },
    {
        "content": "<p>Changes to the mathlib lakefile invalidate the cache because it is difficult to determine whether those changes have invalidated build outputs. We would need to ask lake, and this would require a completely different implementation of cache (which may happen someday but not today)</p>",
        "id": 398358777,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1698180676
    },
    {
        "content": "<p>Now I am confused. To be clear you mean cache hashes lakefile.lean and not lake itself right?</p>",
        "id": 398359872,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1698181205
    },
    {
        "content": "<p>yes</p>",
        "id": 398367407,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1698185246
    },
    {
        "content": "<p>cache is not lake, it only has limited view into what builds depend on (and lake wants to keep it that way), so cache is conservative and assumes any lakefile changes could potentially invalidate build outputs</p>",
        "id": 398367542,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1698185314
    },
    {
        "content": "<p>(In fact, this is not even enough because lake has <code>-K</code> config options you can pass to change build configuration without even touching lakefile.lean)</p>",
        "id": 398367611,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1698185352
    },
    {
        "content": "<p>okay.  Btw, in the current state of affairs, my hypothetical scenario of a few weeks ago becomes real. Unless and until paperproof becomes a mathlib dependency, the only straightforward way to use paperproof with mathlib is to have a math project with paperproof as an extra dependency right? So there can easily be projects with two top level dependencies. This might create a real world test case for the <code>lake update</code> proposals (unless paperproof tracks mathlib's toolchain).</p>",
        "id": 398368838,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1698186101
    },
    {
        "content": "<p>What's the problem there?</p>",
        "id": 398369153,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1698186285
    },
    {
        "content": "<p>You would just use the lean-toolchain of mathlib and a corresponding version of paperproof</p>",
        "id": 398369190,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1698186317
    },
    {
        "content": "<p>There isn't. There was a lot of discussion last month or so which was hypothetical at the time. Naturally it is interesting to observe a real world test case.</p>",
        "id": 398369194,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1698186319
    },
    {
        "content": "<p>this isn't a counterexample case though</p>",
        "id": 398369215,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1698186336
    },
    {
        "content": "<p>You need to make the example more complicated to actually hit problems</p>",
        "id": 398369276,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1698186365
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113488-general/topic/Cache.20becomes.20out.20of.20date.20when.20new.20package.20is.20added/near/398369190\">said</a>:</p>\n<blockquote>\n<p>You would just use the lean-toolchain of mathlib and a corresponding version of paperproof</p>\n</blockquote>\n<p>Do we have an easy way of picking this version other than going through the commit history?</p>",
        "id": 398369291,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1698186384
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113488-general/topic/Cache.20becomes.20out.20of.20date.20when.20new.20package.20is.20added/near/398358777\">said</a>:</p>\n<blockquote>\n<p>Changes to the mathlib lakefile invalidate the cache because it is difficult to determine whether those changes have invalidated build outputs. We would need to ask lake, and this would require a completely different implementation of cache (which may happen someday but not today)</p>\n</blockquote>\n<p>I see. This fully answers the original questions I asked. Thanks.</p>",
        "id": 398473235,
        "sender_full_name": "Peiran Wu",
        "timestamp": 1698236459
    }
]