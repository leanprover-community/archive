[
    {
        "content": "<p>I am trying to write some API for working with subsets of subtypes, and I found the following error: when I tried to define a coercion from the sets of a subtype to sets of the initial type, like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">X</span><span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">SubSet.Coe</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">Set</span> <span class=\"n\">X</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">U</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">{</span> <span class=\"o\">(</span><span class=\"n\">x.val</span><span class=\"o\">)</span> <span class=\"bp\">|</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">U</span><span class=\"o\">}</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Coe</span> <span class=\"o\">(</span><span class=\"n\">Set</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Set</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">coe</span> <span class=\"o\">:=</span> <span class=\"n\">SubSet.Coe</span>\n</code></pre></div>\n<p>I get this error:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">does</span> <span class=\"n\">not</span> <span class=\"n\">provide</span> <span class=\"n\">concrete</span> <span class=\"n\">values</span> <span class=\"n\">for</span> <span class=\"o\">(</span><span class=\"n\">semi</span><span class=\"bp\">-</span><span class=\"o\">)</span><span class=\"n\">out</span><span class=\"bp\">-</span><span class=\"n\">params</span>\n  <span class=\"n\">Coe</span> <span class=\"o\">(</span><span class=\"n\">Set</span> <span class=\"bp\">↑?</span><span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Set</span> <span class=\"n\">X</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>what does that mean? What would be the right way to do it?</p>\n<p>Also, is there a particular reason why this has not been done already in mathlib?</p>",
        "id": 395448126,
        "sender_full_name": "Miguel Marco",
        "timestamp": 1696707105
    },
    {
        "content": "<p>We just use <code>Set.image (\\u) s</code></p>",
        "id": 395448356,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1696707319
    },
    {
        "content": "<p>Yes, but my question is about how to make it a coercion, in such a way that we can \"automatically\" convert sets of <code>↑A</code>to sets of <code>X</code>.</p>",
        "id": 395449740,
        "sender_full_name": "Miguel Marco",
        "timestamp": 1696708209
    },
    {
        "content": "<p>Sorry, I had put the error message twice instead of the code that causes it. Edited now.</p>",
        "id": 395450017,
        "sender_full_name": "Miguel Marco",
        "timestamp": 1696708499
    },
    {
        "content": "<p>Have you tried using <code>CoeT</code> instead of <code>Coe</code>?</p>",
        "id": 395450558,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1696708872
    },
    {
        "content": "<p>If I Try</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">CoeT</span> <span class=\"o\">(</span><span class=\"n\">Set</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Set</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">coe</span> <span class=\"o\">:=</span>  <span class=\"k\">fun</span> <span class=\"n\">U</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">{</span> <span class=\"o\">(</span><span class=\"n\">x.val</span> <span class=\"o\">)</span> <span class=\"bp\">|</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">U</span><span class=\"o\">}</span>\n</code></pre></div>\n<p>lean seems to enter in an infinite loop: it stays forever with a high CPU usage. maybe i introduced a cycle in the coercion graph?</p>",
        "id": 395451085,
        "sender_full_name": "Miguel Marco",
        "timestamp": 1696709338
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"461731\">@Miguel Marco</span> Your initial example confuses me, particularly the term <code>Set A</code>. The mathlib <code>Set</code> has type <code>Type u -&gt; Type u</code> and <code>A</code> in your example has type <code>Set X</code> which is not a <code>Type u</code>, so <code>Set A</code> is not well-typed. What are you trying to do here?</p>",
        "id": 395457411,
        "sender_full_name": "Mac Malone",
        "timestamp": 1696715697
    },
    {
        "content": "<p>Oh, I guess this is my inexperience with mathlib talking. The set is being coerced into a type.</p>",
        "id": 395457510,
        "sender_full_name": "Mac Malone",
        "timestamp": 1696715811
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"315577\">Mac Malone</span> <a href=\"#narrow/stream/113488-general/topic/How.20to.20define.20a.20coercion/near/395457411\">said</a>:</p>\n<blockquote>\n<p>Oh, I guess this is my inexperience with mathlib talking. The set is being coerced into a type.</p>\n</blockquote>\n<p>Exactly. What I want is to \"extend\" this coercion to sets.</p>",
        "id": 395457821,
        "sender_full_name": "Miguel Marco",
        "timestamp": 1696716125
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"461731\">@Miguel Marco</span> Okay, thanks for the explanation! The problem here is that during synthetization of a <code>Coe</code> instance, Lean is tries to solve for the LHS using information from the RHS. In the instance <code>Coe (Set A) (Set X)</code>. the RHS <code>Set X</code> provides Lean no information on what <code>A</code> should be. Thus, Lean errors when you tried to provide it such an instance. What you would like  to do is flip this so that <code>Coe (Set A) (Set X)</code> uses the information from the LHS <code>Set A</code> where <code>A : Set X</code> to help Lean determine the <code>X</code> in the RHS. To do this you can use <code>CoeOut</code> like so:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">X</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">CoeOut</span> <span class=\"o\">(</span><span class=\"n\">Set</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Set</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">coe</span> <span class=\"o\">:=</span> <span class=\"n\">SubSet.Coe</span>\n</code></pre></div>\n<p>With <code>CoeOut</code>, unlike <code>Coe</code>, Lean tries to solve for the RHS using information from the LHS during synthetization.</p>",
        "id": 395458578,
        "sender_full_name": "Mac Malone",
        "timestamp": 1696716998
    },
    {
        "content": "<p>I see, thanks. It works.</p>\n<p>My problem now is that, in the InfoView, I don't get the nice notation <code>↑U</code> but  <code>Lean.Internal.coeM U</code>. Is there a way to fix it?</p>",
        "id": 395460566,
        "sender_full_name": "Miguel Marco",
        "timestamp": 1696719212
    },
    {
        "content": "<p>I claimed victory too early. There seems to be a coercion already defined, called <code>Lean.Internal.coeM</code> , but I am not sure it is what  I want. And it seems to be conflicting with <code>↑U</code>notation.</p>",
        "id": 395461898,
        "sender_full_name": "Miguel Marco",
        "timestamp": 1696720708
    },
    {
        "content": "<p>This was discussed a few times before. We used to have no such coercion, but in Lean4 this coercion comes \"for free\" from the fact that <code>Set</code> is a monad. The problems are that (1) the underlying definition is not convenient (2) it’s not nicely pretty printed and (3) it’s clearly marked as an internal definition (necessary for coercions in do notation) that shouldn’t be invoked explicitly. I think we should decide either to disable it outside of <code>do</code> notation (if that’s even possible) or ask for it to be renamed if we’re willing to use it in Mathlib</p>",
        "id": 395462694,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1696721591
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"268315\">Anatole Dedecker</span> <a href=\"#narrow/stream/113488-general/topic/How.20to.20define.20a.20coercion/near/395462694\">said</a>:</p>\n<blockquote>\n<p>This was discussed a few times before. We used to have no such coercion, but in Lean4 this coercion comes \"for free\" from the fact that <code>Set</code> is a monad. The problems are that (1) the underlying definition is not convenient (2) it’s not nicely pretty printed and (3) it’s clearly marked as an internal definition (necessary for coercions in do notation) that shouldn’t be invoked explicitly. I think we should decide either to disable it outside of <code>do</code> notation (if that’s even possible) or ask for it to be renamed if we’re willing to use it in Mathlib</p>\n</blockquote>\n<p>Is there a way to override it?</p>",
        "id": 395466544,
        "sender_full_name": "Miguel Marco",
        "timestamp": 1696724940
    },
    {
        "content": "<p>I'm hitting this problem as well in LeanCamCombi. Is there any way to disable <code>Lean.Internal.coeM</code> locally?</p>",
        "id": 399742690,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1698850825
    },
    {
        "content": "<p>Why do you want to disable it, it should be possible to unfold it (with simp) and prove things about it.<br>\nYou could try <code>attribute [-coe_decl] Lean.Internal.coeM</code> or whatever the syntax to remove attributes is (untested)</p>",
        "id": 399775071,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1698862489
    },
    {
        "content": "<p>Ok turns out it can't be erased, <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> ?</p>",
        "id": 399775840,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1698862852
    }
]