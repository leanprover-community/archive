[
    {
        "content": "<p>This is a bit surprising,</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.polynomial.eval</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">p.eval</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p.eval</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"c1\">-- p is expected to have type polynomial (polynomial (polynomial ℕ))</span>\n</code></pre></div>\n<p>Is there any way to tell lean that the dot notation for <code>polynomial.eval</code> is always supposed to be for the second argument?</p>",
        "id": 270344399,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1643787060
    },
    {
        "content": "<p>Unfortunately not as far as I'm aware. The trick is to apply the function enough for Lean to figure out what you're dot notating on, and not use dot notation when that's impossible.</p>",
        "id": 270351455,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1643791943
    },
    {
        "content": "<p>Ha ha exactly this happened to me in a live lean session yesterday and I just resorted to lambdas</p>",
        "id": 270352350,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1643792442
    },
    {
        "content": "<p>One reason it's not this way is because \"eval 0\" is a pretty useful function to apply to the various polynomials as is. \"eval r\" is a ring_hom, for all r, for example.</p>",
        "id": 270387722,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1643810503
    },
    {
        "content": "<p>i'm still sad that we can't make <code>map</code> a bundled morphism because of dot notation</p>",
        "id": 270388941,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1643810977
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"284160\">Eric Rodriguez</span> <a href=\"#narrow/stream/113488-general/topic/polynomial.20eval.20dot.20notation/near/270388941\">said</a>:</p>\n<blockquote>\n<p>i'm still sad that we can't make <code>map</code> a bundled morphism because of dot notation</p>\n</blockquote>\n<p>I would much rather it be bundled and lose the notation.</p>",
        "id": 270406418,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1643817214
    },
    {
        "content": "<p>there's something like 1K uses in the library, plus we'd want to migrate <code>map_zero/one/mul/add...</code> to use the <code>fun_like</code> ones. I'm happy to help with that, but I really don't want to start that and then be told \"oh actually we don't like this\"</p>",
        "id": 270406731,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1643817298
    },
    {
        "content": "<p>Reviving this thread to bring up a new MWE. It seems I can use dot notation to eval a <code>Polynomial</code>, but not a <code>MvPolynomial</code>. Why is this?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">scoped</span> <span class=\"n\">BigOperators</span> <span class=\"n\">Classical</span>\n\n<span class=\"kn\">section</span> <span class=\"n\">Matrix</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">F</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">Subgroup</span> <span class=\"n\">F</span><span class=\"bp\">ˣ</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">H</span><span class=\"o\">]</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">lincheck_to_sumcheck_matrix_completeness</span> <span class=\"o\">(</span><span class=\"n\">z_hat_M</span> <span class=\"n\">z_hat</span> <span class=\"o\">:</span> <span class=\"n\">Polynomial</span> <span class=\"n\">F</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">f_M</span> <span class=\"o\">:</span> <span class=\"n\">MvPolynomial</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">MvPolynomial</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Polynomial.eval</span> <span class=\"n\">x</span> <span class=\"n\">z_hat_M</span><span class=\"o\">)</span> <span class=\"bp\">=</span>\n      <span class=\"n\">Matrix.mulVec</span>\n        <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">MvPolynomial.eval</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">]</span> <span class=\"n\">f_M</span><span class=\"o\">)</span>\n        <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">y</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">z_hat.eval</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">lincheck_to_sumcheck_matrix_completeness'</span> <span class=\"o\">(</span><span class=\"n\">z_hat_M</span> <span class=\"n\">z_hat</span> <span class=\"o\">:</span> <span class=\"n\">Polynomial</span> <span class=\"n\">F</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">f_M</span> <span class=\"o\">:</span> <span class=\"n\">MvPolynomial</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">MvPolynomial</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Polynomial.eval</span> <span class=\"n\">x</span> <span class=\"n\">z_hat_M</span><span class=\"o\">)</span> <span class=\"bp\">=</span>\n      <span class=\"n\">Matrix.mulVec</span>\n        <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">f_M.eval</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">])</span> <span class=\"c1\">-- invalid field notation, function 'MvPolynomial.eval' does not have argument with type (MvPolynomial ...) that can be used, it must be explicit or implicit with a unique name</span>\n        <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">y</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">z_hat.eval</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n\n\n<span class=\"kd\">end</span> <span class=\"n\">Matrix</span>\n</code></pre></div>",
        "id": 384848718,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1692033002
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=MvPolynomial.eval#doc\">docs#MvPolynomial.eval</a> is a <code>RingHom</code> which confuses dot notation, <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Polynomial.eval#doc\">docs#Polynomial.eval</a> is a regular function</p>",
        "id": 384850045,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1692033303
    },
    {
        "content": "<p>Doesn't this call for some homogeneization?</p>",
        "id": 385525581,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1692213527
    },
    {
        "content": "<p>I think <code>eval</code> should always be a regular function</p>",
        "id": 385531887,
        "sender_full_name": "David Ang",
        "timestamp": 1692216188
    },
    {
        "content": "<p>There’s also the question of <code>map</code> being a ring homomorphism or not</p>",
        "id": 385532457,
        "sender_full_name": "David Ang",
        "timestamp": 1692216436
    },
    {
        "content": "<p>Once upon a time I think we had <code>Polynomial = MvPolynomial Unit</code>, which has the big advantage that the APIs are completely homogenous, but the big disadvantage that the APIs are completely homogenous.</p>",
        "id": 385532703,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1692216558
    },
    {
        "content": "<p>What do people think of having two functions, say <code>eval</code> and <del><code>eval_at</code></del> something else, with different argument orders/one is a hom and the other is a plain function?</p>",
        "id": 385533440,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1692216907
    },
    {
        "content": "<p>Which one is the <code>simp</code> normal form?</p>",
        "id": 385542517,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1692220002
    },
    {
        "content": "<p>We already have two functions for polynomial, <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Polynomial.eval#doc\">docs#Polynomial.eval</a> and <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Polynomial.evalRingHom#doc\">docs#Polynomial.evalRingHom</a></p>",
        "id": 385544774,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1692220908
    },
    {
        "content": "<p>I don't really know what the criteria are for a good simp normal form. I think I would prefer <code>eval</code> (the polynomial first argument order) to be more widely used because this is how I think functions are usually designed.</p>",
        "id": 385544859,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1692220950
    },
    {
        "content": "<p>I guess what I'm suggesting then is that we redefine <code>MvPolynomial.eval</code> to have the polynomial argument first, rewrite everything we can to use the new <code>eval</code> argument order, and rewrite the things we can't to use <code>evalRingHom.toFun</code>.</p>",
        "id": 385545110,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1692221069
    },
    {
        "content": "<p>The overriding concern to me is that I am used to hearing \"we evaluate a polynomial <code>p</code> at point <code>x</code>\", and so this is the order of arguments I expect to see and use in the majority of cases where I am not taking advantage of the homomorphism structure of the particular point evaluation.</p>",
        "id": 385545482,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1692221233
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113488-general/topic/polynomial.20eval.20dot.20notation/near/384850045\">said</a>:</p>\n<blockquote>\n<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=MvPolynomial.eval#doc\">docs#MvPolynomial.eval</a> is a <code>RingHom</code> which confuses dot notation, <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Polynomial.eval#doc\">docs#Polynomial.eval</a> is a regular function</p>\n</blockquote>\n<p>By the way, while I now understand this is why I was experiencing a bug, I think I don't get why this is the case.  Even if the default argument order doesn't change, why is a different decision made for <code>Polynomial</code> versus <code>MvPolynomial</code> on the point of the point-first function being a hom?</p>",
        "id": 385545889,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1692221409
    },
    {
        "content": "<p>Probably because different people made the decision without communicating</p>",
        "id": 385552937,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1692225419
    },
    {
        "content": "<p>Or someone decided to change both, but only got around to changing one</p>",
        "id": 385552963,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1692225437
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"282271\">Bolton Bailey</span> <a href=\"#narrow/stream/113488-general/topic/polynomial.20eval.20dot.20notation/near/385545482\">said</a>:</p>\n<blockquote>\n<p>The overriding concern to me is that I am used to hearing \"we evaluate a polynomial <code>p</code> at point <code>x</code>\", and so this is the order of arguments I expect to see and use in the majority of cases where I am not taking advantage of the homomorphism structure of the particular point evaluation.</p>\n</blockquote>\n<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Function.eval#doc\">docs#Function.eval</a> uses the same convention as <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Polynomial.eval#doc\">docs#Polynomial.eval</a>, both of which go against your intuition here.</p>",
        "id": 385553072,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1692225494
    },
    {
        "content": "<p>Wild. I see that <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=RatFunc.eval#doc\">docs#RatFunc.eval</a> does as well, though the docstring does have the same form as the natural-language sentence I gave.</p>",
        "id": 385569346,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1692233542
    },
    {
        "content": "<p>Maybe the issue is that <code>apply</code> is the more natural word for the operation with my conception of the ordering, but that there is already a meaning for that?</p>",
        "id": 385569954,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1692233781
    },
    {
        "content": "<p>I am partially also thinking of functions like <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=List.nthLe#doc\">docs#List.nthLe</a> or <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Vector.get#doc\">docs#Vector.get</a>, which have the \"function like structure\" argument first.</p>",
        "id": 385570331,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1692233935
    },
    {
        "content": "<p>It could be that the order is so that <code>eval x</code> is the function that happens to also be the homomorphism, as opposed to the (non-existing in Lean 3) <code>(eval · x)</code>.</p>",
        "id": 385610269,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1692255571
    },
    {
        "content": "<p>If I remember correctly, in Lean 3, certain things could/could not work depending on the order of the arguments.</p>",
        "id": 385610438,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1692255624
    },
    {
        "content": "<p>(I also find the order <code>eval polynomial point</code> more natural, but the possibility of writing <code>p.eval x</code> anyway makes this rarely an issue for me.)</p>",
        "id": 385610740,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1692255734
    },
    {
        "content": "<p>This actually looks like a bug or at least an issue to be reported and decide whether we want this behavior. If <code>T.foo : α -&gt; T -&gt; T</code> then I expect <code>(t:T).foo a</code> to mean <code>T.foo a t</code> even if it is applied in the special case where <code>α := T</code></p>",
        "id": 385613572,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1692256847
    },
    {
        "content": "<p>that is, the decision of which variable to treat as the main one should be done based on the constant's type <em>before</em> instantiation (possibly with the current behavior as fallback so that <code>T.foo : α -&gt; α -&gt; α</code> still works when applied with <code>α := T</code>)</p>",
        "id": 385613700,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1692256910
    },
    {
        "content": "<p>actually, this doesn't even work:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">Nat.foo</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"n\">y</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">y</span>\n<span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"n\">Nat</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">foo</span> <span class=\"mi\">2</span>\n</code></pre></div>\n<blockquote>\n<p>invalid field notation, function '<a href=\"http://Nat.foo\">Nat.foo</a>' does not have argument with type (Nat ...) that can be used, it must be explicit or implicit with a unique name</p>\n</blockquote>\n<p>so this seems more like a bug / inconsistent behavior</p>",
        "id": 385614122,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1692257076
    },
    {
        "content": "<p>Oh I was mislead, the initial issue is from lean 3, this does not replicate in lean 4</p>",
        "id": 385614473,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1692257228
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span>, I'm confused by your comment; isn't the problem with dot notation for <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=MvPolynomial.eval#doc\">docs#MvPolynomial.eval</a> due to<code>T.foo : α -&gt; SomeHom T U</code> not knowing how to tell that <code>SomeHom</code> expects a <code>T</code> argument?</p>",
        "id": 385623022,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1692260363
    },
    {
        "content": "<p>yes, my comment was about the wrong issue</p>",
        "id": 385625598,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1692261315
    },
    {
        "content": "<p>because this issue was continued from a completely different one</p>",
        "id": 385625624,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1692261330
    }
]