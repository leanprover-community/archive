[
    {
        "content": "<p>I'm trying to define functions with mutual recursion. The recursion also depends on properties of the previous step. The following code does not work:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">mutual</span> <span class=\"kd\">def</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"n\">p</span>\n<span class=\"k\">with</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span>\n<span class=\"bp\">|</span> <span class=\"n\">i</span> <span class=\"mi\">0</span>       <span class=\"o\">:=</span> <span class=\"n\">i</span>\n<span class=\"bp\">|</span> <span class=\"n\">i</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"n\">g</span> <span class=\"n\">i</span> <span class=\"n\">j</span>\n<span class=\"k\">with</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span>\n<span class=\"bp\">|</span> <span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">nat.cases_on</span> <span class=\"n\">j</span> <span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">j'</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">list.range</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"n\">i</span> <span class=\"n\">j'</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">nth_le</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">i</span> <span class=\"n\">j'</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">lt_of_lt_of_eq</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">j'</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">list.length_range</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n<span class=\"k\">with</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"bp\">&lt;</span> <span class=\"n\">g</span> <span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span>       <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>The specific definitions and predicate are placeholders.</p>\n<p>There seems to be 2 problems here:</p>\n<ol>\n<li>The definition has \"ill-formed match/equations expression\"</li>\n<li>Even if I remove mutual recursion, I get am told that it is an \"invalid mutual definition, result types must be in the same universe\"</li>\n</ol>\n<p>Additionally, as in <code>g</code>, I want to split by cases of <code>j</code> inside a larger expression, so I can reuse the structure. I want this in a later mutually recursed proof which only needs to see that shared structure.<br>\nHow can I achieve this?</p>",
        "id": 376449066,
        "sender_full_name": "Naruyoko",
        "timestamp": 1689707176
    },
    {
        "content": "<p>How about defining a function of type <code>ℕ -&gt; ℕ -&gt; { a : ℕ \\x ℕ // a.1 &lt; a.2 }</code>?</p>",
        "id": 376453259,
        "sender_full_name": "Reid Barton",
        "timestamp": 1689708304
    },
    {
        "content": "<p>Thank you, I guess that is an option too, and the individual functions and theorems would be extracted from that definition. I am not sure how I can write it in a way that doesn't go in a mess though as I am going to put many theorems that depend on others. I also don't know a way which allow delaying the case splitting either, or have a friendly name for individual functions in the recursive definition and proofs, though those are cosmetics.</p>",
        "id": 376462495,
        "sender_full_name": "Naruyoko",
        "timestamp": 1689710669
    },
    {
        "content": "<p>I decided to define a structure to bundle the needed functions and properties and explicitly recurse on <code>j</code> (slightly inconvenient since I'd have to repeat some parts). Interestingly, I get a time-out if I use the case matching notation with <code>let prev := ... in</code> on <code>j</code>, but no problem at all if I write out <code>nat.rec</code>.</p>",
        "id": 376822038,
        "sender_full_name": "Naruyoko",
        "timestamp": 1689815446
    },
    {
        "content": "<p>Do you have an <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> for the timeout ?</p>",
        "id": 376886737,
        "sender_full_name": "Arthur Adjedj",
        "timestamp": 1689841549
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"432410\">Arthur Adjedj</span> <a href=\"#narrow/stream/113488-general/topic/Mutual.20recursion.20with.20dependency.20on.20an.20inductve.20proof/near/376886737\">said</a>:</p>\n<blockquote>\n<p>Do you have an <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> for the timeout ?</p>\n</blockquote>\n<p>Is this good?</p>\n<p><a href=\"https://gist.github.com/Naruyoko/f377dd2577d7ebb2911fbea13ff172c9\">https://gist.github.com/Naruyoko/f377dd2577d7ebb2911fbea13ff172c9</a></p>\n<p>I tried to see the minimum complexity to get the timeout. I think I got it too close though, since it times out on Linux (in VirtualBox) but not on Windows 11 for me.</p>\n<p><code>Lean (version 3.50.3, commit 855e5b74e3a5, Release)</code></p>\n<p>Edit: Now the example does not time out anywhere, so I will have to add complexity back in.</p>",
        "id": 377422062,
        "sender_full_name": "Naruyoko",
        "timestamp": 1689971711
    },
    {
        "content": "<p>Oh you're using lean 3 still?</p>",
        "id": 377423335,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1689972140
    },
    {
        "content": "<p>Yes. Should I migrate?</p>\n<p>Updated the gist so I think it should time out now.</p>",
        "id": 377423866,
        "sender_full_name": "Naruyoko",
        "timestamp": 1689972293
    },
    {
        "content": "<p>Well maybe migrating will fix the problem!</p>",
        "id": 377437147,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1689976943
    },
    {
        "content": "<p>My guess without testing anything is that Lean is doing zeta reduction on the <code>let</code>  (i.e., substituting the value into the body of the <code>let</code>) while doing some analysis, and this recursively calculated value appears multiple times in the body.</p>\n<p>It looks like the entire body of the <code>j+1</code> case is actually a non-recursive function <code>resultAt x -&gt; resultAt x</code> that takes in the value of <code>recursive_function_pattern_match j</code>. Maybe try lifting that out into its own function?</p>",
        "id": 377439368,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1689977782
    },
    {
        "content": "<p>By the way, you can write</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">dite</span> <span class=\"o\">(</span><span class=\"n\">v.val</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x.length</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">coe</span> <span class=\"bp\">&lt;$&gt;</span> <span class=\"o\">(</span><span class=\"n\">pnat.has_sub.sub</span> <span class=\"bp\">&lt;$&gt;</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">&lt;*&gt;</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">⟨</span><span class=\"n\">v.val</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">⟩)))</span>\n  <span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">none</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>as</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">v.val</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x.length</span>\n<span class=\"k\">then</span> <span class=\"n\">coe</span> <span class=\"bp\">&lt;$&gt;</span> <span class=\"o\">(</span><span class=\"n\">pnat.has_sub.sub</span> <span class=\"bp\">&lt;$&gt;</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">&lt;*&gt;</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">⟨</span><span class=\"n\">v.val</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">⟩))</span>\n<span class=\"k\">else</span> <span class=\"n\">none</span>\n</code></pre></div>",
        "id": 377439529,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1689977857
    },
    {
        "content": "<p>In my case, I found that only a few properties needed to be proved, and the rest could be inferred. Therefore, I ended up defining a builder function (something like <code>resultBuilder : Π (x : list ℕ) (f : fin x.length → option ℕ+) (g : fin x.length → option ℕ) (property1 : _) -&gt; resultAt x</code>) that takes the few input functions and propositions and creates the object I wanted. This reduced the repetition between the <code>0</code> and <code>j+1</code> cases. I think it also had a similar effect as your suggestion to make the recursion a separate function (<code>let</code> works now!).</p>\n<p>I didn't know <code>if then else</code> syntax could be dependent. Thank you for the tip.</p>\n<p>And thanks to everyone who looked at this.</p>",
        "id": 377953827,
        "sender_full_name": "Naruyoko",
        "timestamp": 1690159098
    }
]