[
    {
        "content": "<p>I saw <code>theorem thm : quot.lift f h (quot.mk r a) = f a := rfl</code> in <a href=\"https://leanprover.github.io/theorem_proving_in_lean/axioms_and_computation.html\">https://leanprover.github.io/theorem_proving_in_lean/axioms_and_computation.html</a>  but cannot see how it's a reflection of equality #general</p>",
        "id": 339694424,
        "sender_full_name": "Coriver Chen",
        "timestamp": 1678022596
    },
    {
        "content": "<p><code>constant quot.lift :\n  Π {α : Sort u} {r : α → α → Prop} {β : Sort u} (f : α → β),\n    (∀ a b, r a b → f a = f b) → quot r → β</code> only says <code>quot.lift f h</code> having type <code>quot r → β</code>, but does not say how it's defined?</p>",
        "id": 339694644,
        "sender_full_name": "Coriver Chen",
        "timestamp": 1678022718
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 339695654,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1678023221
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Quot.sound#doc\">docs4#Quot.sound</a> has an explanation of what's going on, for Lean 4</p>",
        "id": 339695989,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1678023375
    },
    {
        "content": "<p>Lean 3 is similar, but I think missing the documentation: <a href=\"https://leanprover-community.github.io/mathlib_docs/find/quot.sound\">docs#quot.sound</a></p>",
        "id": 339696027,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1678023396
    },
    {
        "content": "<p>Thank you. I am reading the linked docs</p>",
        "id": 339696533,
        "sender_full_name": "Coriver Chen",
        "timestamp": 1678023618
    },
    {
        "content": "<p>I think the summary is that the kernel itself has special support and reduction rules for those declarations, meaning you will need to look deep inside lean to find out \"why\" the proof you quoted works</p>",
        "id": 339696758,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1678023737
    },
    {
        "content": "<p>BTW the situation is not so different from an ordinary inductive type, it's just that Lean has hard-coded knowledge that it should add the \"action on equalities\" hypothesis to the type of <code>quot.lift</code>, which justifies the addition of the axiom <code>quot.sound</code>.</p>",
        "id": 339696896,
        "sender_full_name": "Reid Barton",
        "timestamp": 1678023807
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 339705093,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1678027254
    },
    {
        "content": "<p>I still have some difficulties in understanding it. Now maybe I get the <code>quot.sound</code> axiom. But may I ask how is <code>f</code> involved in the theorem? It seems if there is some other <code>f'</code> satisfying <code>f' a = f' b</code> , is it ok taking <code>quot.lift f h (quot.mk r a)</code> to <code>f' a</code>?  I have some background in programing languages like java or python, and some background in math but little in type theory and very new to lean prover. I can feel it seems different to prove <code>2+3=5</code> using reflection.</p>",
        "id": 339711720,
        "sender_full_name": "Coriver Chen",
        "timestamp": 1678029996
    },
    {
        "content": "<p>Where are you seeing <code>f'</code>?</p>",
        "id": 339712980,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1678030626
    },
    {
        "content": "<p>It does look like the docs at Quot.sound don't actually mention that the opaque definitions satisfy <code>lift f h (mk x) = f x</code>, which arguably is also being added as an axiom (but not a true <code>axiom</code> in the keyword sense of the word)</p>",
        "id": 339713300,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1678030792
    },
    {
        "content": "<p>Emm indeed there is no such <code>f'</code> mentioned. I don't have an enviroment for running codes now. What if I change the signature to <code>constant quot.lift_f_and_f':\n  Π {α : Sort u} {r : α → α → Prop} {β : Sort u} (f : α → β), (f': α → β),\n    (∀ a b, r a b → f a = f b) →\n    (∀ a b, r a b → f' a = f' b) → quot r → β</code> ? Then we cannot give a proof for this right?</p>",
        "id": 339714720,
        "sender_full_name": "Coriver Chen",
        "timestamp": 1678031480
    },
    {
        "content": "<p>Anyway since I am learning lean with TPIL as a first tutorial, taking it as an axiom seems good for me. Maybe I can come back to this after being more familiar. Thank you very much Eric</p>",
        "id": 339714939,
        "sender_full_name": "Coriver Chen",
        "timestamp": 1678031595
    },
    {
        "content": "<p>The <code>rfl</code> behaviour of <code>quot.lift</code>that you've observed  is baked into Lean's kernel -- it is an axiom of the system. If you add another constant then it won't have the same behaviour.</p>",
        "id": 339715297,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1678031763
    },
    {
        "content": "<p>As an aside, something I found kind of confusing in TPIL was that they don't make explicit the fact that <code>quot.lift</code> and <code>quot.ind</code> are two constant, each with its own \"baked-in\" computation rule.</p>",
        "id": 339726262,
        "sender_full_name": "Rémi Bottinelli",
        "timestamp": 1678037706
    }
]