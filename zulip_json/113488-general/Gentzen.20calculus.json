[
    {
        "content": "<p>Is it possible to emulate the Gentzen calculus LK in Lean?</p>",
        "id": 402423920,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1700127141
    },
    {
        "content": "<p>I did a deep embedding of NJ in lean3 a bunch of time ago, though I'm afraid I nuked the repo at some point. In any case code-and-proofs-wise I was going off of <a href=\"https://www.amazon.com/PROGRAM-PROOF-Samuel-Mimram/dp/B08C97TD9G\">this</a> (the examples are in OCaml or Agda but very easy to adapt. Note that the book is publicly available online but the website of our CS department appears to be down right now).</p>\n<p>I don't see why you couldn't do the same thing for LK. You just define the terms inductively and then essentially as far as lean is concerned you are manipulating syntax. If you want something more shallow, interacting with lean props, I imagine it's going to be more difficult. The deep embedding was fun at first but it got pretty boring pretty quickly.</p>",
        "id": 402480352,
        "sender_full_name": "Luigi Massacci",
        "timestamp": 1700144361
    },
    {
        "content": "<p>Also I think someone already did this in Coq if I’m not mistaken, so you might check that out.</p>",
        "id": 402483451,
        "sender_full_name": "Luigi Massacci",
        "timestamp": 1700145199
    },
    {
        "content": "<p>I did propositional calculus in natural deduction style, Hilbert style, and Gentzen sequence calculus style in Coq: <a href=\"https://arxiv.org/abs/1503.08744\">https://arxiv.org/abs/1503.08744</a></p>\n<p>Glimpse of Lean has some propositional calculus, but only natural deduction style: <a href=\"https://github.com/PatrickMassot/GlimpseOfLean/tree/master/GlimpseOfLean/Exercises/Topics\">https://github.com/PatrickMassot/GlimpseOfLean/tree/master/GlimpseOfLean/Exercises/Topics</a></p>",
        "id": 402484418,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1700145462
    },
    {
        "content": "<p>You made a a system for developing a metatheory of propositional logic. This is an overkill for my purposes. I would just like to have a simple assistant for writing LK-like proofs in Lean, for classwork purposes.</p>",
        "id": 402520727,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1700155601
    },
    {
        "content": "<p>I am searching for something on this level:<br>\n<a href=\"#narrow/stream/113489-new-members/topic/Proving.20in.20Hilbert.20System\">https://leanprover.zulipchat.com/#narrow/stream/113489-new-members/topic/Proving.20in.20Hilbert.20System</a></p>",
        "id": 402657976,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1700214721
    },
    {
        "content": "<p>How can I contribute to this website? I am new, and things here are making me lose direction.</p>",
        "id": 402658915,
        "sender_full_name": "Kishor DhawaIe",
        "timestamp": 1700215013
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"667444\">Kishor DhawaIe</span> <a href=\"#narrow/stream/113488-general/topic/Gentzen.20calculus/near/402658915\">said</a>:</p>\n<blockquote>\n<p>How can I contribute to this website? I am new, and things here are making me lose direction.</p>\n</blockquote>\n<p>Website?</p>",
        "id": 402659002,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1700215043
    },
    {
        "content": "<p>Sorry if I bother your work, I mean, this chatroom.</p>",
        "id": 402659132,
        "sender_full_name": "Kishor DhawaIe",
        "timestamp": 1700215084
    },
    {
        "content": "<p>You just did. Or did you want to contribute to mathlib?</p>",
        "id": 402659206,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1700215109
    }
]