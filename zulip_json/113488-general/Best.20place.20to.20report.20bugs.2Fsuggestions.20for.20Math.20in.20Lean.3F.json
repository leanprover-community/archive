[
    {
        "content": "<p>I've been reading Mathematics in Lean.  Overall it's great, but every once in a while I find a typo.  Where's the best place to report these?  Somewhere in Zulip (where)?  An issue in github?  Something else?</p>",
        "id": 340404418,
        "sender_full_name": "Martin C. Martin",
        "timestamp": 1678291810
    },
    {
        "content": "<p>An issue <a href=\"https://github.com/avigad/mathematics_in_lean_source/\">on GitHub</a> is very good. A pull-request with a fix is even better.</p>",
        "id": 340404636,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1678291865
    },
    {
        "content": "<p>Done!  <a href=\"https://github.com/avigad/mathematics_in_lean_source/pull/55\">https://github.com/avigad/mathematics_in_lean_source/pull/55</a></p>",
        "id": 340410225,
        "sender_full_name": "Martin C. Martin",
        "timestamp": 1678293197
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 340412021,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1678293627
    },
    {
        "content": "<p>You have a pair of pull requests here: <a href=\"https://github.com/avigad/mathematics_in_lean_source/pulls\">https://github.com/avigad/mathematics_in_lean_source/pulls</a></p>\n<p>One is from 2022 and has no comments, so I wonder if you missed it?</p>\n<p>Also, in section 6.2 on algebraic structures, you have:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">(</span><span class=\"n\">mul_one</span><span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">mul</span> <span class=\"n\">x</span> <span class=\"n\">one</span> <span class=\"bp\">=</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">one_mul</span><span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">mul</span> <span class=\"n\">x</span> <span class=\"n\">one</span> <span class=\"bp\">=</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>which, of course, are the same.  I'm not sure the correct fix here: reverse the second one, or just get rid of it?</p>",
        "id": 341269864,
        "sender_full_name": "Martin C. Martin",
        "timestamp": 1678623249
    },
    {
        "content": "<p>Actually, I guess we'd eliminate the first one and fix the second one?  Having both of them makes it closer to what's in mathlib, but as the end of section 2.2 points out, you can derive <code>mul_one</code> from <code>one_mul</code> along with <code>mul_left_inv</code></p>",
        "id": 341271686,
        "sender_full_name": "Martin C. Martin",
        "timestamp": 1678624041
    },
    {
        "content": "<p>Also, a little later where we supply the additive definitions, <code>neg</code> should only take a single argument, whereas it currently takes <code>a b : point</code>.</p>",
        "id": 341300523,
        "sender_full_name": "Martin C. Martin",
        "timestamp": 1678636112
    },
    {
        "content": "<p>Also, our structure has a suffix of 1, so in <code>add_group_point</code> we need to add that suffix.</p>",
        "id": 341301287,
        "sender_full_name": "Martin C. Martin",
        "timestamp": 1678636489
    },
    {
        "content": "<p>In section 6.4, in the definition of norm for Euclidean domain, \"N(a) &lt; N(b)\" should read \"N(r) &lt; N(b).\"</p>",
        "id": 341882248,
        "sender_full_name": "Martin C. Martin",
        "timestamp": 1678820686
    }
]