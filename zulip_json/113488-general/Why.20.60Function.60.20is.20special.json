[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Test</span> <span class=\"o\">:=</span> <span class=\"bp\">|</span> <span class=\"n\">T</span>\n<span class=\"kd\">inductive</span> <span class=\"n\">Function</span> <span class=\"o\">:=</span> <span class=\"bp\">|</span> <span class=\"n\">F</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Test.id</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">Test</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n<span class=\"kd\">def</span> <span class=\"n\">Function.id</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">Function</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">Test.T.id</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">Function.F.id</span>\n</code></pre></div>\n<p>Will give</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>schrodinger@Yifans-MacBook-Air<span class=\"w\"> </span>/tmp<span class=\"w\"> </span>%<span class=\"w\"> </span>lean<span class=\"w\"> </span>test.lean\n<span class=\"m\">1</span>\ntest.lean:9:6:<span class=\"w\"> </span>error:<span class=\"w\"> </span>invalid<span class=\"w\"> </span>field<span class=\"w\"> </span>notation,<span class=\"w\"> </span><span class=\"k\">function</span><span class=\"w\"> </span><span class=\"s1\">'Function.id'</span><span class=\"w\"> </span>does<span class=\"w\"> </span>not<span class=\"w\"> </span>have<span class=\"w\"> </span>argument<span class=\"w\"> </span>with<span class=\"w\"> </span><span class=\"nb\">type</span><span class=\"w\"> </span><span class=\"o\">(</span>Function<span class=\"w\"> </span>...<span class=\"o\">)</span><span class=\"w\"> </span>that<span class=\"w\"> </span>can<span class=\"w\"> </span>be<span class=\"w\"> </span>used,<span class=\"w\"> </span>it<span class=\"w\"> </span>must<span class=\"w\"> </span>be<span class=\"w\"> </span>explicit<span class=\"w\"> </span>or<span class=\"w\"> </span>implicit<span class=\"w\"> </span>with<span class=\"w\"> </span>a<span class=\"w\"> </span>unique<span class=\"w\"> </span>name\n</code></pre></div>",
        "id": 389452746,
        "sender_full_name": "Schrodinger ZHU Yifan",
        "timestamp": 1694013620
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Function.id#doc\">docs#Function.id</a> already exists?</p>",
        "id": 389457897,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1694014750
    },
    {
        "content": "<p>Apparently not, but it is probably related to the fact that <code>Function</code> is already an existing namespace...</p>",
        "id": 389458519,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1694014914
    },
    {
        "content": "<p>It's also a very special namespace: since you can use dot notations on any function, and it will use the declaration in the <code>Function</code> namespace. For example, the following codesnippet uses <code>Function.comp</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f.comp</span> <span class=\"n\">g</span> <span class=\"bp\">=</span> <span class=\"n\">f.comp</span> <span class=\"n\">g</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>\n<p>This means that if you use dot notation in the <code>Function</code> namespace, Lean expects a function, not something of type <code>Function</code>.</p>\n<p>TL;DR: rename the type <code>Function</code></p>",
        "id": 389462224,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1694015189
    }
]