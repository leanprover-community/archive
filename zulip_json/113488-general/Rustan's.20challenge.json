[
    {
        "content": "<p><a href=\"https://leino.science/\">Rustan Leino</a> is a famous computer scientist and a long time friend of mine. In a recent trip, he talked with Shankar and Stephan Merz about some challenge problem that could be used to compare proof assistants. Surely, one would need to have many different kinds of problems for a good comparison. Still, Shankar was excited to suggest “if normalization”, so the 3 of them have been discussing versions to solve this in PVS, Isabelle, and Dafny. Today, Rustan asked me if the Lean community would be interested in the challenge :)<br>\nHere is the summary he shared with me:<br>\nThe data structure is an Expression with boolean literals, variables, and if-then-else expressions.<br>\nThe goal is to normalize such expressions into a form where:<br>\na) No nested ifs: That is, the condition part of an if-expression is not itself an if-expression<br>\nb) No constant tests: That is, the condition part of an if-expression is not a constant<br>\nc) No redundant if’s: That is, the then and else branches of an if are not the same<br>\nd) Each variable is evaluated at most once: That is, the free variables of the condition are disjoint from those in the then branch, and also disjoint from those in the else branch.<br>\nOne should show that a normalization function produces an expression satisfying (a,b,c,d), and one should also prove that the normalization function preserves the meaning of the given expression.</p>",
        "id": 398566772,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1698271365
    },
    {
        "content": "<p>Is it just a programming problem, i.e. converting the input data structure to the desired output?  Or is the goal to produce a formally verified algorithm?  Or is the goal to use Lean's framework more directly in the solution (say producing a tactic that reduces on a Lean term of the right form, i.e. a shallow embedding of the input data structure)?</p>",
        "id": 398576492,
        "sender_full_name": "Jason Rute",
        "timestamp": 1698275987
    },
    {
        "content": "<p>Oh, I didn't read the last line. <span aria-label=\"face palm\" class=\"emoji emoji-1f926\" role=\"img\" title=\"face palm\">:face_palm:</span></p>",
        "id": 398576753,
        "sender_full_name": "Jason Rute",
        "timestamp": 1698276175
    },
    {
        "content": "<p>So no boolean operations between literals and variables are made?</p>",
        "id": 398593475,
        "sender_full_name": "Jineon Baek",
        "timestamp": 1698288873
    },
    {
        "content": "<p>Seems like a request for verified BDD algorithm.</p>",
        "id": 398595640,
        "sender_full_name": "Joe Hendrix",
        "timestamp": 1698289892
    },
    {
        "content": "<p>I think this is the problem statement, if you prefer your statements pre-formalized. :-)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">E</span>\n<span class=\"bp\">|</span> <span class=\"n\">lit</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span> <span class=\"bp\">→</span> <span class=\"n\">E</span>\n<span class=\"bp\">|</span> <span class=\"n\">var</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">E</span>\n<span class=\"bp\">|</span> <span class=\"n\">ite</span> <span class=\"o\">:</span> <span class=\"n\">E</span> <span class=\"bp\">→</span> <span class=\"n\">E</span> <span class=\"bp\">→</span> <span class=\"n\">E</span> <span class=\"bp\">→</span> <span class=\"n\">E</span>\n<span class=\"n\">deriving</span> <span class=\"n\">BEq</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">E.hasNestedIf</span> <span class=\"o\">:</span> <span class=\"n\">E</span> <span class=\"bp\">→</span> <span class=\"n\">Bool</span>\n<span class=\"bp\">|</span> <span class=\"n\">lit</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">false</span>\n<span class=\"bp\">|</span> <span class=\"n\">var</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">false</span>\n<span class=\"bp\">|</span> <span class=\"n\">ite</span> <span class=\"o\">(</span><span class=\"n\">ite</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">true</span>\n<span class=\"bp\">|</span> <span class=\"n\">ite</span> <span class=\"n\">_</span> <span class=\"n\">t</span> <span class=\"n\">e</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">t.hasNestedIf</span> <span class=\"bp\">||</span> <span class=\"n\">e.hasNestedIf</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">E.hasConstantIf</span> <span class=\"o\">:</span> <span class=\"n\">E</span> <span class=\"bp\">→</span> <span class=\"n\">Bool</span>\n<span class=\"bp\">|</span> <span class=\"n\">lit</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">false</span>\n<span class=\"bp\">|</span> <span class=\"n\">var</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">false</span>\n<span class=\"bp\">|</span> <span class=\"n\">ite</span> <span class=\"o\">(</span><span class=\"n\">lit</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">true</span>\n<span class=\"bp\">|</span> <span class=\"n\">ite</span> <span class=\"n\">i</span> <span class=\"n\">t</span> <span class=\"n\">e</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">i.hasConstantIf</span> <span class=\"bp\">||</span> <span class=\"n\">t.hasConstantIf</span> <span class=\"bp\">||</span> <span class=\"n\">e.hasConstantIf</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">E.hasRedundantIf</span> <span class=\"o\">:</span> <span class=\"n\">E</span> <span class=\"bp\">→</span> <span class=\"n\">Bool</span>\n<span class=\"bp\">|</span> <span class=\"n\">lit</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">false</span>\n<span class=\"bp\">|</span> <span class=\"n\">var</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">false</span>\n<span class=\"bp\">|</span> <span class=\"n\">ite</span> <span class=\"n\">i</span> <span class=\"n\">t</span> <span class=\"n\">e</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">t</span> <span class=\"bp\">==</span> <span class=\"n\">e</span> <span class=\"bp\">||</span> <span class=\"n\">i.hasRedundantIf</span> <span class=\"bp\">||</span> <span class=\"n\">t.hasRedundantIf</span> <span class=\"bp\">||</span> <span class=\"n\">e.hasRedundantIf</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">E.vars</span> <span class=\"o\">:</span> <span class=\"n\">E</span> <span class=\"bp\">→</span> <span class=\"n\">List</span> <span class=\"n\">Nat</span>\n<span class=\"bp\">|</span> <span class=\"n\">lit</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">[]</span>\n<span class=\"bp\">|</span> <span class=\"n\">var</span> <span class=\"n\">i</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]</span>\n<span class=\"bp\">|</span> <span class=\"n\">ite</span> <span class=\"n\">i</span> <span class=\"n\">t</span> <span class=\"n\">e</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">i.vars</span> <span class=\"bp\">++</span> <span class=\"n\">t.vars</span> <span class=\"bp\">++</span> <span class=\"n\">e.vars</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">List.disjoint</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">List</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Bool</span>\n<span class=\"bp\">|</span> <span class=\"o\">[],</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">true</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">::</span><span class=\"n\">xs</span><span class=\"o\">),</span> <span class=\"n\">ys</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span> <span class=\"bp\">∉</span> <span class=\"n\">ys</span> <span class=\"bp\">&amp;&amp;</span> <span class=\"n\">xs.disjoint</span> <span class=\"n\">ys</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">E.disjoint</span> <span class=\"o\">:</span> <span class=\"n\">E</span> <span class=\"bp\">→</span> <span class=\"n\">Bool</span>\n<span class=\"bp\">|</span> <span class=\"n\">lit</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">true</span>\n<span class=\"bp\">|</span> <span class=\"n\">var</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">true</span>\n<span class=\"bp\">|</span> <span class=\"n\">ite</span> <span class=\"n\">i</span> <span class=\"n\">t</span> <span class=\"n\">e</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">i.vars.disjoint</span> <span class=\"n\">t.vars</span> <span class=\"bp\">&amp;&amp;</span> <span class=\"n\">i.vars.disjoint</span> <span class=\"n\">e.vars</span> <span class=\"bp\">&amp;&amp;</span> <span class=\"n\">i.disjoint</span> <span class=\"bp\">&amp;&amp;</span> <span class=\"n\">t.disjoint</span> <span class=\"bp\">&amp;&amp;</span> <span class=\"n\">e.disjoint</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">E.normalized</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">!</span><span class=\"n\">e.hasNestedIf</span> <span class=\"bp\">&amp;&amp;</span> <span class=\"bp\">!</span><span class=\"n\">e.hasConstantIf</span> <span class=\"bp\">&amp;&amp;</span> <span class=\"bp\">!</span><span class=\"n\">e.hasRedundantIf</span> <span class=\"bp\">&amp;&amp;</span> <span class=\"n\">e.disjoint</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">E.eval</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Bool</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">E</span> <span class=\"bp\">→</span> <span class=\"n\">Bool</span>\n<span class=\"bp\">|</span> <span class=\"n\">lit</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">b</span>\n<span class=\"bp\">|</span> <span class=\"n\">var</span> <span class=\"n\">i</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">f</span> <span class=\"n\">i</span>\n<span class=\"bp\">|</span> <span class=\"n\">ite</span> <span class=\"n\">i</span> <span class=\"n\">t</span> <span class=\"n\">e</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">bif</span> <span class=\"n\">i.eval</span> <span class=\"n\">f</span> <span class=\"k\">then</span> <span class=\"n\">t.eval</span> <span class=\"n\">f</span> <span class=\"k\">else</span> <span class=\"n\">e.eval</span> <span class=\"n\">f</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">IfNormalization</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">Z</span> <span class=\"o\">:</span> <span class=\"n\">E</span> <span class=\"bp\">→</span> <span class=\"n\">E</span> <span class=\"bp\">//</span> <span class=\"bp\">∀</span> <span class=\"n\">e</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">Z</span> <span class=\"n\">e</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">normalized</span> <span class=\"bp\">∧</span> <span class=\"bp\">∀</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">Z</span> <span class=\"n\">e</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">eval</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">e.eval</span> <span class=\"n\">f</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">IfNormalization</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"c1\">-- Bonus points for functions `E → Syntax` and `Syntax → E`</span>\n<span class=\"c1\">-- and a code action that runs normalization! :-)</span>\n</code></pre></div>",
        "id": 398607255,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1698294295
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> I'm curious why you formalize the properties in <code>Bool</code> and not <code>Prop</code>, is there a concrete reason or was it just faster to write it that way for the example?</p>",
        "id": 398664902,
        "sender_full_name": "Andrés Goens",
        "timestamp": 1698318249
    },
    {
        "content": "<p>We're talking to some computer scientists here. They might want to run the code! :-)</p>",
        "id": 398666289,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1698318844
    },
    {
        "content": "<p>(Of course, we could provide <code>Decidable</code> instances, but <code>Bool</code> from the beginning is easier?)</p>",
        "id": 398666954,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1698319148
    },
    {
        "content": "<p>yeah, that makes sense, but if you're proving that the normalization function does its job you'll have to go there anyway! I guess showing <code>E.hasNestedIf = false</code>, etc works too (I was just checking whether there was another underlying reason)</p>",
        "id": 398669968,
        "sender_full_name": "Andrés Goens",
        "timestamp": 1698320347
    },
    {
        "content": "<p>For point c), is \"the same\" considering the truth table or the exact syntactic structure of the sub-expressions?</p>\n<p>For example, using <code>xn</code> for variables, would <code>if x0 then (if x1 then x2 else x3) else false</code> be considered \"the same\" as <code>if x1 then (if x0 then x2 else false) else (if x0 then x3) else false</code></p>",
        "id": 398687095,
        "sender_full_name": "Nathaniel Burke",
        "timestamp": 1698326234
    },
    {
        "content": "<p>I proved you can produce a <code>disjoint</code> expression with the same semantics. I think I will stop for today now, but anyone can feel free to take over. <a href=\"https://gist.github.com/ChrisHughes24/f278f2b22474c001565b672ab2d7f1d0\">https://gist.github.com/ChrisHughes24/f278f2b22474c001565b672ab2d7f1d0</a> It's done in a way that does not introduce <code>nestedIfs</code>, so it should be possible to remove the nestedIfs first, and then remove <code>constantIfs</code> and <code>redundantIfs</code> afterwards I think.</p>",
        "id": 398688842,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1698326787
    },
    {
        "content": "<p>Okay, I finished. Not the most beautiful code right now, maybe I will tidy it up <a href=\"https://gist.github.com/ChrisHughes24/f278f2b22474c001565b672ab2d7f1d0\">https://gist.github.com/ChrisHughes24/f278f2b22474c001565b672ab2d7f1d0</a></p>",
        "id": 398722333,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1698336502
    },
    {
        "content": "<p>Can you rename the file to .lean so that it syntax-highlights?</p>",
        "id": 398723785,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1698337033
    },
    {
        "content": "<p>This is really great, Chris! The fast turnaround time on challenges is becoming a hallmark of Lean. :-)</p>",
        "id": 398780551,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1698361680
    },
    {
        "content": "<p>It would be amazing if Chris and/or others want to continue working on this, and producing something polished!</p>\n<p>(And maybe even performant? I haven't looked at Chris's code.)</p>\n<p>We suspect the other systems that Leo mentions in the top post are going to try to come up with very clean solutions, and it would be great if we look at least as nice. :-)</p>",
        "id": 398780737,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1698361799
    },
    {
        "content": "<p>I am reminded of Larry Paulson's remark in a talk at a conference, saying that cubing the cube had never been formalised, and me announcing <span class=\"user-mention\" data-user-id=\"111080\">@Floris van Doorn</span> 's formalisation in my talk two days later :-)</p>",
        "id": 398780924,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1698361900
    },
    {
        "content": "<p>And <a href=\"https://gist.github.com/Vtec234/8d8ef8e4b61f661511b4a15353be9475\">here</a> is another solution :) I define a normalization relation in the style of big-step operational semantics, a predicate for normal forms, prove that normal forms have the desired properties, prove that the results of normalization are normal, and then implement the normalization relation as a computable function with some slightly weird termination measure. Mostly its lots and lots of repetitive inductions which I wish I knew how to make shorter: e.g. in <code>Norm.preservation</code>, the cases differ only in where in the context some variable that I want to give a name to is, but named variable syntax in induction doesn't seem to be supported (<code>induction h with | pat (x := x) =&gt; ..</code>). Also the <code>norm</code> function technically has two sorries in it due to <code>(kernel) invalid projection</code> (perhaps <a href=\"#narrow/stream/270676-lean4/topic/invalid.20kernel.20projection.20error.20error\">this</a>?).</p>",
        "id": 398824748,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1698385356
    },
    {
        "content": "<blockquote>\n<p>(And maybe even performant? I haven't looked at Chris's code.)</p>\n</blockquote>\n<p>If you want to actually normalize large Boolean formulas in practice, BDDs are the way to go. But it would be rather more work to verify a BDD package.</p>",
        "id": 398824980,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1698385551
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"128280\">@Wojciech Nawrocki</span>, what did you want to write at your <code>sorry</code>s? The thing you have commented out gives <code>invalid field 'ite_inversion'</code>.</p>",
        "id": 398828422,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1698386970
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/113488-general/topic/Rustan's.20challenge/near/398828422\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"128280\">Wojciech Nawrocki</span>, what did you want to write at your <code>sorry</code>s? The thing you have commented out gives <code>invalid field 'ite_inversion'</code>.</p>\n</blockquote>\n<p>Oops! Fixed.</p>",
        "id": 398914194,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1698418524
    },
    {
        "content": "<p>I have a much cleaner, shorter, and faster version <a href=\"https://github.com/ChrisHughes24/lean4stuff/blob/main/Stuff/Rustan.lean\">here</a></p>",
        "id": 398939115,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1698426883
    },
    {
        "content": "<p>Wow, this is really short! I'm amazed the default tactic can prove all the termination goals.</p>",
        "id": 399078365,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1698522874
    },
    {
        "content": "<p>The default tactic includes <code>simp</code> and I strategically added some <code>simp</code> lemmas on line 51</p>",
        "id": 399151377,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1698584368
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110044\">@Chris Hughes</span>, I hope you won't mind that I took the liberty of polishing this slightly further, and really trying to show off <code>aesop</code>.</p>\n<p>I made a PR at <a href=\"https://github.com/leanprover-community/mathlib4/pull/8035\">#8035</a>. If you'd like to make further changes please do so, of course!!</p>",
        "id": 399252021,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1698655818
    },
    {
        "content": "<p>I have too say as well, that although mine is very short, it maybe goes against the mathlib principle of building up the correct API. I suspect if you really wanted the fastest procedure, then the code would be more complicated and you'd need a better API, and something like Wojciech's <code>Norm</code> relation might be very useful.</p>",
        "id": 399265375,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1698659674
    }
]