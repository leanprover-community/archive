[
    {
        "content": "<p>I was trying to use <code>recall</code> and I ran into something that puzzles me:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.Recall</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">hi</span>\n<span class=\"kd\">def</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n\n<span class=\"n\">recall</span> <span class=\"n\">hi.x</span> <span class=\"o\">:=</span> <span class=\"mi\">10</span>  <span class=\"c1\">-- should I expect this to error?</span>\n\n<span class=\"c1\">--recall x := 10  -- unknown constant 'x'</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">hi</span>\n\n<span class=\"n\">recall</span> <span class=\"n\">hi.x</span> <span class=\"o\">:=</span> <span class=\"mi\">10</span>  <span class=\"c1\">-- error, as expected</span>\n<span class=\"c\">/-</span>\n<span class=\"cm\">value mismatch</span>\n<span class=\"cm\">  hi.x</span>\n<span class=\"cm\">has value</span>\n<span class=\"cm\">  10</span>\n<span class=\"cm\">but is expected to have value</span>\n<span class=\"cm\">  1</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>",
        "id": 405076713,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1701337303
    },
    {
        "content": "<p>I imagined that whether or not I use <code>recall</code> in the namespace, <code>recall hi.x := 10</code> should fail.</p>",
        "id": 405076889,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1701337356
    },
    {
        "content": "<p>It seems to be a disagreement in whether it should use <code>def</code> style name resolution (append the namespace always) or regular name resolution (look up in namespaces and <code>open</code> for the def)</p>",
        "id": 405078927,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1701338022
    },
    {
        "content": "<p>What kind of name resolution is expected here?</p>",
        "id": 405078978,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1701338039
    },
    {
        "content": "<p>I do not know what resolution it uses, but the <code>recall</code> inside the namespace should either tell me that <code>hi.hi.x</code> does not exist or that <code>hi.x</code> does not have value 10.  At least, I would expect one of these two behaviours...</p>",
        "id": 405079230,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1701338116
    },
    {
        "content": "<p>Right, I'm asking which one</p>",
        "id": 405079263,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1701338133
    },
    {
        "content": "<p><code>recall</code> currently does a mixture of both which is the cause of the error</p>",
        "id": 405079292,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1701338146
    },
    {
        "content": "<p>Personally, I would prefer the same as def: tell me that <code>10</code> is not the value of <code>hi.x</code>.</p>",
        "id": 405079346,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1701338162
    },
    {
        "content": "<p>that's not the same as <code>def</code>, <code>def</code> would say that <code>hi.hi.x</code> does not exist (or rather it would create <code>hi.hi.x</code>)</p>",
        "id": 405079477,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1701338203
    },
    {
        "content": "<p>Sorry, I got confused: I mean I would like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">namespace</span> <span class=\"n\">hi</span>\n<span class=\"n\">recall</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"mi\">10</span>\n<span class=\"kd\">end</span> <span class=\"n\">hi</span>\n</code></pre></div>\n<p>to tell me that 10 is not 1.</p>",
        "id": 405079513,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1701338217
    },
    {
        "content": "<p>oh yes that one just seems broken</p>",
        "id": 405079701,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1701338278
    },
    {
        "content": "<p>I can be happy with the above telling me that <code>x</code> does not exist, but then I would expect</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">namespace</span> <span class=\"n\">hi</span>\n<span class=\"n\">recall</span> <span class=\"n\">hi.x</span> <span class=\"o\">:=</span> <span class=\"mi\">10</span>\n<span class=\"kd\">end</span> <span class=\"n\">hi</span>\n</code></pre></div>\n<p>to tell me that 10 is not 1!</p>",
        "id": 405079889,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1701338332
    },
    {
        "content": "<p>IMO this should do regular name resolution, since in context you want to be able to say that a certain constant you are about to refer to has a certain definition</p>",
        "id": 405079896,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1701338334
    },
    {
        "content": "<p>so it's fine if this uses the current <code>open</code>s et al</p>",
        "id": 405079941,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1701338349
    },
    {
        "content": "<p>the actual implementation of <code>recall</code> is not at all what I would expect, it is creating <code>def</code>s and this causes weirdness</p>",
        "id": 405080078,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1701338399
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/8740\">#8740</a></p>",
        "id": 405089532,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1701341206
    },
    {
        "content": "<p>Thanks, Mario!</p>\n<p>I imagine that your fix also takes care of the following?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Init.Function</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.Recall</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">Injective</span>  <span class=\"c1\">-- unknown identifier 'Injective'</span>\n\n<span class=\"c1\">-- no error here, though</span>\n<span class=\"n\">recall</span> <span class=\"n\">Function.Injective</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">u₁</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">u₂</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"n\">Injective</span> <span class=\"n\">f</span>\n</code></pre></div>",
        "id": 405090809,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1701341637
    },
    {
        "content": "<p>no, the <code>Injective</code> at the end of the line is an unknown identifier</p>",
        "id": 405091115,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1701341730
    },
    {
        "content": "<p>the one at the beginning of the line resolves though</p>",
        "id": 405091211,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1701341761
    },
    {
        "content": "<p>Ok, I think that this is what I meant as \"fix\": I would expect that the final line will give an error, since there is no <code>open Function</code> available.</p>",
        "id": 405091439,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1701341836
    }
]