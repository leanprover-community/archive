[
    {
        "content": "<p>Myself and <span class=\"user-mention\" data-user-id=\"121918\">@Edward Ayers</span> put together a demo of semantic search for mathlib. </p>\n<p><a href=\"http://mathlib-search.edayers.com/\">http://mathlib-search.edayers.com/</a></p>\n<p>For example, when I search \"What can I use to prove a subset of the reals is compact?\" in the mathlib docs, I don't get anything useful because the default search mostly looks for substring overlap. However, if I use the semantic search, the first result is the correct theorem: <a href=\"https://leanprover-community.github.io/mathlib_docs/topology/metric_space/basic.html#metric.is_compact_of_is_closed_bounded\">metric.is_compact_of_is_closed_bounded</a>. I'd also encourage you to try looking for theorems that have a well-known name (e.g triangle inequality) but are called something obscure in mathlib. </p>\n<p>This website is very much a quick and dirty demo, and we're keen to hear more about when it works and when it breaks. You can thumbs up and down search results and also suggest what the search should've returned if you don't see the correct result. This feedback will help us improve the system. We hope these kinds of tools will lower the barrier to entry for newcomers to formal math and help manage the growth of mathlib. </p>\n<p>This is mostly implemented using the OpenAI API. If you're curious about the technical details, you can find the <a href=\"https://github.com/zhangir-azerbayev/mathlib-semantic-search\">source here</a>.</p>",
        "id": 336366109,
        "sender_full_name": "Zhangir Azerbayev",
        "timestamp": 1677196576
    },
    {
        "content": "<p>Very nice! Does it check if the theorem names that it outputs are actually in mathlib, or is it just the raw output from the language model?</p>",
        "id": 336373678,
        "sender_full_name": "Frédéric Dupuis",
        "timestamp": 1677200603
    },
    {
        "content": "<p>We've precomputed dense vector representations of every mathlib term. The language model predicts a term given the natural language query, embeds the predicted term, and does kNN search against the mathlib vectors. So every search result is guaranteed to be a real theorem.</p>",
        "id": 336374541,
        "sender_full_name": "Zhangir Azerbayev",
        "timestamp": 1677201067
    },
    {
        "content": "<p>I am now imagining a tactic in Lean 4 that opens up a text box widget in the infoview, accepts a natural language description and then does the semantic search</p>",
        "id": 336375520,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1677201722
    },
    {
        "content": "<p>Very nice! But a link didn't work:<br>\n<a href=\"/user_uploads/3121/-d-m28r14tdg6wMHEY7UcfCf/image.png\">image.png</a> <a href=\"/user_uploads/3121/0XdKuK9j3K99DCNSsTA433T5/image.png\">image.png</a> <br>\n<a href=\"https://leanprover-community.github.io/mathlib_docs/topology/algebra/infinite_sum.html#summable.tendsto_at_top_zero\">https://leanprover-community.github.io/mathlib_docs/topology/algebra/infinite_sum.html#summable.tendsto_at_top_zero</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/-d-m28r14tdg6wMHEY7UcfCf/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/-d-m28r14tdg6wMHEY7UcfCf/image.png\"></a></div><div class=\"message_inline_image\"><a href=\"/user_uploads/3121/0XdKuK9j3K99DCNSsTA433T5/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/0XdKuK9j3K99DCNSsTA433T5/image.png\"></a></div>",
        "id": 336378084,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1677203644
    },
    {
        "content": "<p>Seems to be moved <a href=\"https://leanprover-community.github.io/mathlib_docs/topology/algebra/infinite_sum/basic.html#summable.tendsto_at_top_zero\">here</a><br>\nbut git blame says it's moved 3 years ago ...</p>",
        "id": 336381973,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1677206774
    },
    {
        "content": "<p>I <a href=\"http://mathlib-search.edayers.com/?query=law+of+cosines&amp;suggested=True\">tested this classical example</a>:</p>\n<p><span class=\"user-mention silent\" data-user-id=\"284160\">Eric Rodriguez</span> <a href=\"#narrow/stream/113488-general/topic/Minimal.20cardinality.20of.20generating.20set/near/304353834\">said</a>:</p>\n<blockquote>\n<p>for an extreme example of this: i'll be impressed if someone ever finds the cosine rule without knowing what it's called already</p>\n</blockquote>\n<p>unfortunately, nothing useful pops up. Probably because the autoformalization is pretty far from the statement</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">cosine_law</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hb</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hc</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">cos</span> <span class=\"o\">(</span><span class=\"n\">angle</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">-</span> <span class=\"n\">c</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>This formalization could be right if <code>angle a b c</code> is defined to be the angle between the side of length a and the side of length b in a triangle with side lengths a, b, c, but such <code>angle</code> doesn't exist in mathlib ...</p>",
        "id": 336385716,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1677207543
    },
    {
        "content": "<p>Mathlib docs search takes docstrings into account so if you put \"law of cosine\" in the search box then <a href=\"https://leanprover-community.github.io/mathlib_docs/find/euclidean_geometry.dist_sq_eq_dist_sq_add_dist_sq_sub_two_mul_dist_mul_dist_mul_cos_angle\">docs#euclidean_geometry.dist_sq_eq_dist_sq_add_dist_sq_sub_two_mul_dist_mul_dist_mul_cos_angle</a> will appear as the first result. <del>This new semantic search seems to completely ignore docstrings.</del>(maybe not)</p>",
        "id": 336389470,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1677208855
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"224323\">Junyan Xu</span> <a href=\"#narrow/stream/113488-general/topic/Mathlib.20semantic.20search/near/336381973\">said</a>:</p>\n<blockquote>\n<p>Seems to be moved <a href=\"https://leanprover-community.github.io/mathlib_docs/topology/algebra/infinite_sum/basic.html#summable.tendsto_at_top_zero\">here</a><br>\nbut git blame says it's moved 3 years ago ...</p>\n</blockquote>\n<p>No, it moved last week. <a href=\"https://github.com/leanprover-community/mathlib/pull/18414\">#18414</a></p>",
        "id": 336417912,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1677226546
    },
    {
        "content": "<p><del>I forgot git can now track <a href=\"https://github.com/leanprover-community/mathlib/pull/18414/files#diff-7d810e3b8d245b7d1b3141e48d4f4adff1e79b09532a6cdd4d5389ca6b93ff9c\">file renames</a> ...</del></p>",
        "id": 336427244,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1677229792
    },
    {
        "content": "<p>Git doesn't track renames in any meaningful way, it just guesses after the fact</p>",
        "id": 336428164,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1677230123
    },
    {
        "content": "<p>I searched for \"sine rule\" and the autoformalization was</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">sin_cos_eq_sin_cos_of_cos_eq_cos</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">inhabited</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">discrete_linear_ordered_field</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">trigonometry</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">cos</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">cos</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">sin</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">cos</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">sin</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">cos</span> <span class=\"n\">c</span> <span class=\"bp\">↔</span> <span class=\"n\">sin</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">sin</span> <span class=\"n\">b</span>\n</code></pre></div>\n<p>Should we introduce a <code>[trigonometry α]</code> typeclass to generalize over <code>complex.sin</code> and <code>real.sin</code>? (edit: moved to another thread to not distract from the main topic here)</p>",
        "id": 336429981,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1677230752
    },
    {
        "content": "<blockquote>\n<p>Git doesn't track renames in any meaningful way, it just guesses after the fact</p>\n</blockquote>\n<p>Thanks for the correction. <a href=\"https://archive.kernel.org/oldwiki/git.wiki.kernel.org/index.php/Git_FAQ.html#Why_does_Git_not_.22track.22_renames.3F\">Here is the relevant official FAQ</a></p>",
        "id": 336431320,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1677231093
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"224323\">Junyan Xu</span> <a href=\"#narrow/stream/113488-general/topic/Mathlib.20semantic.20search/near/336431320\">said</a>:</p>\n<blockquote>\n<blockquote>\n<p>Git doesn't track renames in any meaningful way, it just guesses after the fact</p>\n</blockquote>\n<p>Thanks for the correction. <a href=\"https://archive.kernel.org/oldwiki/git.wiki.kernel.org/index.php/Git_FAQ.html#Why_does_Git_not_.22track.22_renames.3F\">Here is the relevant official FAQ</a></p>\n</blockquote>\n<p>The database the current demo uses was generated from a commit that's a few weeks old (<code>06d0ad</code>). I can manually regenerate the database pretty easily, but automatically syncing with mathlib commits is on the to-do list.</p>",
        "id": 336546766,
        "sender_full_name": "Zhangir Azerbayev",
        "timestamp": 1677261072
    },
    {
        "content": "<p>A message was moved from this topic to <a class=\"stream-topic\" data-stream-id=\"113488\" href=\"/#narrow/stream/113488-general/topic/Mathlib.20semantic.20search.20suggests.3A.20a.20trigonometry.20typeclass\">#general &gt; Mathlib semantic search suggests: a trigonometry typeclass</a> by <span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span>.</p>",
        "id": 336547095,
        "sender_full_name": "Notification Bot",
        "timestamp": 1677261164
    }
]