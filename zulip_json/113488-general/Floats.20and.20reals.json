[
    {
        "content": "<p>I’m thinking about launching a Lean for Curious Scientists and Engineers workshop here in Maryland / online. Nothing official yet. I’m thinking we’d cover a mix of topics around FPIL and TPIL, guiding students in writing a program that performs some basic scientific calculation (like SciLean) as well as a proof about the math / code. I’d want this fully in Lean 4; mathport progress would affect the extent of what we can prove - having single variable calculus and limits by then would be helpful.</p>",
        "id": 317712215,
        "sender_full_name": "Tyler Josephson ⚛️",
        "timestamp": 1671882695
    },
    {
        "content": "<p>Will you need to relate <code>float</code> to <code>real</code>?</p>",
        "id": 317717545,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1671884996
    },
    {
        "content": "<p>Good question. How are those related in Lean? Can we just write proofs with reals and implement them numerically with floats? </p>\n<p>I’m personally more interested in “the mathematics of the software corresponds to the theory” than in “let’s be sure that floating point arithmetic errors don’t accumulate and lead to qualitatively bad numerical results.” Though we do need the second to be <em>really</em> sure about the results, especially in certain contexts like stiff ODEs or ill-conditioned matrices, those are old problems; formalizing the high-level mathematics of software is a newer challenge, and more interesting to me.</p>",
        "id": 317738936,
        "sender_full_name": "Tyler Josephson ⚛️",
        "timestamp": 1671894912
    },
    {
        "content": "<p>Right now they are 100% unrelated in lean, I believe.</p>",
        "id": 317744039,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1671897752
    },
    {
        "content": "<p>There has been quite some discussion on how to relate them in <a class=\"stream\" data-stream-id=\"270676\" href=\"/#narrow/stream/270676-lean4\">#lean4</a> before but iirc all the attempts to get this done in a quick fashion were fruitless. Furthermore the fact that we define <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Float#doc\">docs4#Float</a> in Lean 4 in a way that makes them close to impossible to argue about in non trivial scenarios on their own already, because the <code>Float</code> type is really only a quick facade for C level floats with close to no support on the proving side of things, won't make establishing this connection easier either :/, not even taking into account the connection to reals stuff yet.</p>\n<p>We could in theory attempt to write meta programs that mechanically translate things on the reals to things on floats (of course not translating things from the reals that have a native float implementation such as say arithmetic and trigonometric functions) without a proof that they are equivalent (whatever equivalent might mean in this context) if that is of interest.</p>\n<p>If anyone does have concrete ideas or pointers for how to get this done in a way that does actually have these ideas of some form of equivalence and automated translation I'd be very interested in that, the problem has stayed on my mind ever since the mentioned <a class=\"stream\" data-stream-id=\"270676\" href=\"/#narrow/stream/270676-lean4\">#lean4</a> discussions^^</p>",
        "id": 317748754,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1671901156
    },
    {
        "content": "<p>I think there’s interest, beyond just me. For example, one way to do this is described here: <a href=\"https://arxiv.org/abs/1706.08605\">https://arxiv.org/abs/1706.08605</a></p>\n<p>“We have proved that our system is correct in an idealized mathematical context with infinite-precision real numbers. To actually execute the system we need to replace all real numbers in the program with floating-point numbers. Although doing so technically invalidates the specification and can introduce numerical instability in some cases, this class of errors is well understood (Higham, 2002), could be ruled out as well in principle (Harrison, 2006; Boldo et al., 2015; Ramananandro et al., 2016) and is conceptually distinct from the algorithmic and mathematical errors that our methodology is designed to eliminate.”</p>",
        "id": 317750048,
        "sender_full_name": "Tyler Josephson ⚛️",
        "timestamp": 1671902263
    },
    {
        "content": "<p>So the way this stuff is implemented is rather hacky IMHO. Basically they have a definition of a tensor and the mathematical primitives here: <a href=\"https://github.com/dselsam/certigrad/blob/master/src/certigrad/tensor.lean\">https://github.com/dselsam/certigrad/blob/master/src/certigrad/tensor.lean</a> (they avoid doing all of the mathematics by stating all of this stuff as axioms, in principle I believe their approach could also work out when actually doing all of this mathematically) </p>\n<p>And then they have a Lean 3 fork that adds executable code for their library functions: <a href=\"https://github.com/leanprover/lean/blob/dd0ade03fc7c90825d03429fd6823b112e86cc67/src/library/vm/vm_eigen.cpp#L443\">https://github.com/leanprover/lean/blob/dd0ade03fc7c90825d03429fd6823b112e86cc67/src/library/vm/vm_eigen.cpp#L443</a> through eigen.</p>\n<p>This is more or less the same as if we told the Lean runtime that the real numbers are equivalent to floats and tagged all the primitive real functions with their native implementations, both achievable via the <code>@extern</code> attribute right now. If people want it to do this way (this is more or less the same as \"write meta programs that automatically do the conversion\" with the difference that the meta programs already exist in form of the Lean compiler) we can do that of course. But I have a feeling mathematicians might be opposed to the idea of essentially telling the runtime and compiler float = real.</p>",
        "id": 317758776,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1671910297
    },
    {
        "content": "<p>I think one might in fact be able to derive False using this approach + <code>native_decide</code>.</p>",
        "id": 317758863,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1671910347
    },
    {
        "content": "<p>using floats and native_decide you are already dangerously close to being able to prove false just by using oleans across architectures that vary in the implementation of floats</p>",
        "id": 317759052,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1671910511
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"395550\">Henrik Böving</span> <a href=\"#narrow/stream/113488-general/topic/Lean.20workshops.202023/near/317758776\">said</a>:</p>\n<blockquote>\n<p>So the way this stuff is implemented is rather hacky IMHO. Basically they have a definition of a tensor and the mathematical primitives here: <a href=\"https://github.com/dselsam/certigrad/blob/master/src/certigrad/tensor.lean\">https://github.com/dselsam/certigrad/blob/master/src/certigrad/tensor.lean</a> (they avoid doing all of the mathematics by stating all of this stuff as axioms, in principle I believe their approach could also work out when actually doing all of this mathematically) </p>\n</blockquote>\n<p>Oh I agree. Indeed, this was 5-6 years ago; with mathlib, we can do the mathematics right. We can also execute in Lean 4 or in compiled C, rather than link to a library like they do. But as a proof of concept for software development, I appreciate this.</p>",
        "id": 317760195,
        "sender_full_name": "Tyler Josephson ⚛️",
        "timestamp": 1671911623
    },
    {
        "content": "<p>No this is not the part that I find hacky. The axioms is just stuff that we know how to resolve in Lean already, they just did it this way because they didn't want to do the job of mathlib essentially, that's perfectly fine of course. The hacky part about this (to me) is how they make the connection between the reals/tensors and the computable floating point numbers and of course they just went for a pragmatic solution here I just want to explain why it is not something we want to use for a fleshed out variant. It is basically declaring an equivalence between them and while that's possible in Lean 4 easily, we'd just write</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[extern \"lean_float_add\"]</span>\n<span class=\"kd\">def</span> <span class=\"n\">Real.add</span> <span class=\"o\">:</span> <span class=\"n\">Real</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Real</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Real</span> <span class=\"o\">:=</span> <span class=\"bp\">...</span>\n<span class=\"c1\">-- the type declaration and integration gets a little bit trickier but still doable</span>\n</code></pre></div>\n<p>it feels very hacky since it is breaking the contract that the extern implementation should be equivalent to the one in the system which can actually break the system if you poke it hard enough. And that's something we do definitely not want in a fleshed out implementation. The open question for Lean 4 is mostly, how do we tie reals and floats together in a way so this does not happen, the mathematics around reals and how we can interact with extern code are solved problems.</p>\n<p>And to my knowledge right now nobody has an idea how to teach this connection properly to Lean 4 :(</p>",
        "id": 317760894,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1671912141
    },
    {
        "content": "<p>Fully expecting the answer no: are there functions <code>lower, upper : Float -&gt; Real</code> with the property that \"the real number modelled by <code>f : Float</code>\" (whatever that means, if it means anything at all) is in the closed inteval <code>[lower f, upper f]</code> and for all the operations in (whatever operations computer scientists deem are the canonical operations on <code>Float</code>) there are corresponding compatible interval arithmetic theorems in <code>Real</code>, e.g. <code>lower(f)+lower(g) &lt;= lower (f+g)</code> and <code>upper(f+g) &lt;= upper(f)+upper(g)</code>?</p>",
        "id": 317762481,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1671913525
    },
    {
        "content": "<p>I'm fully expecting edge cases to break even naive hopes like this (I don't know the first thing about floats)</p>",
        "id": 317762502,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1671913557
    },
    {
        "content": "<p>No, that one is not true even without float weirdness. There needs to be an interval extension of <code>+</code> in there somewhere, because you have provided no way for the bounds on a number to grow as you apply more operations</p>",
        "id": 317768057,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1671918356
    },
    {
        "content": "<p>The natural choice for <code>lower</code> and <code>upper</code> there are the rounding limits of the number, i.e. +- 1 ULP from the float's real value (in the finite case), but if you add two numbers with a 1 ULP bound you get a number with a 2 ULP bound</p>",
        "id": 317768159,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1671918430
    },
    {
        "content": "<p>Right -- I'm allowing the bounds to grow -- I'm only asking for inequalities. So the more stuff you do to real numbers the less accuracy you have.</p>",
        "id": 317772581,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1671921764
    },
    {
        "content": "<p>I'm suggesting that you can link floats to interval arithmetic, but I'm not suggesting that you can get back.</p>",
        "id": 317772659,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1671921838
    },
    {
        "content": "<p>For examples of calculations of how ulp errors propagate in floating-point arithmetic, see e.g. the start of <a href=\"https://www.mpfr.org/algorithms.pdf\">https://www.mpfr.org/algorithms.pdf</a> (working with interval arithmetic is likely to be simpler in many cases, but also slower). Note that those calculations assume an unbounded exponent range; underflow and overflow add extra complications.</p>",
        "id": 317773439,
        "sender_full_name": "Joseph Myers",
        "timestamp": 1671922380
    },
    {
        "content": "<p>Maybe relevant: <br>\nHales, <em><a href=\"https://link.springer.com/content/pdf/10.1007/s00454-009-9148-4.pdf\">A Revision of the Proof of the Kepler Conjecture</a></em> mentions floating point and MPFI in p.9-10 (section 4.1-4.2).<br>\n<em><a href=\"https://link.springer.com/article/10.1007/s10817-017-9448-y#Sec26\">A Verified ODE Solver and the Lorenz Attractor</a></em> (\"Light-weight data refinement\")</p>\n<p>both in Isabelle/HOL, unsurprisingly.</p>",
        "id": 317793571,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1671943507
    },
    {
        "content": "<p>The second one refers to this: <a href=\"https://home.in.tum.de/~hoelzl/documents/hoelzl09realinequalities.pdf\">https://home.in.tum.de/~hoelzl/documents/hoelzl09realinequalities.pdf</a> which does make use of interval arithmetics on floating point numbers.</p>",
        "id": 317830050,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1671971791
    },
    {
        "content": "<p>\"We overload the polymorphic constant real to interpret float values as real value\" /o\\ et tu!</p>",
        "id": 317831376,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1671972456
    },
    {
        "content": "<p>The author is apparently on this Zulip but the last activity was in 2019 ...<br>\n(Update: the author is a major early contributor to mathlib, see below.)</p>",
        "id": 317857131,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1671987338
    },
    {
        "content": "<p>Yes, Johannes Hoelzl is one of the founders of mathlib, although he's gone radio silent since he went to Apple</p>",
        "id": 317860345,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1671989613
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"224323\">Junyan Xu</span> <a href=\"#narrow/stream/113488-general/topic/Floats.20and.20reals/near/317857131\">said</a>:</p>\n<blockquote>\n<p>The author is apparently on this Zulip but the last activity was in 2019 ...</p>\n</blockquote>\n<p>This is really <em>painful</em> to read. I know that we are all participating in a giant quest going far beyond individual contributions. But it would be really nice to find a way to pass around the history of this quest. Junyan, I'm not blaming you for anything, but I want to tell you that nothing  you see here would exist without Johannes Hölzl. He was contributing to mathlib before any mathematician joined. He is the one who started the <a href=\"https://github.com/leanprover-community/mathlib/blob/e9be2fa75faa22892937c275e27a91cd558cf8c0/src/topology/basic.lean#L2\">topology library</a>  and <a href=\"https://github.com/leanprover-community/mathlib/commit/7882677de6cdb4f0044726054e16a535407256c0\">defined real numbers</a> (that definition was later replaced by another one, but it was used to start a lot of things). He was a strong advocate of (<a href=\"https://github.com/leanprover-community/mathlib/blob/e9be2fa75faa22892937c275e27a91cd558cf8c0/src/order/complete_lattice.lean#L2\">complete</a>)<a href=\"https://github.com/leanprover-community/mathlib/blob/e9be2fa75faa22892937c275e27a91cd558cf8c0/src/order/lattice.lean#L2\">lattices</a>, <a href=\"https://github.com/leanprover-community/mathlib/blob/e9be2fa75faa22892937c275e27a91cd558cf8c0/src/order/galois_connection.lean#L2\">galois connections</a> and <a href=\"https://github.com/leanprover-community/mathlib/blob/master/src/order/filter/basic.lean#L2\">filters</a>. His views still have a very profound impact on today's mathlib, and will continue in mathlib4.</p>",
        "id": 317934886,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1672050853
    },
    {
        "content": "<p>He's also listed as emeritus at the bottom of <a href=\"https://github.com/leanprover-community/mathlib/\">https://github.com/leanprover-community/mathlib/</a></p>",
        "id": 317935572,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1672051317
    },
    {
        "content": "<p>Something that might be nice to attempt to expose history is to add a \"relevant zulip discussions\" section to module docstring</p>",
        "id": 317939949,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1672053489
    },
    {
        "content": "<p>Is this something related to real computation and iRRAM? If so please let me know since I once studied about it as an undergrad, and the topic was so much fun!</p>",
        "id": 317963262,
        "sender_full_name": "Jihoon Hyun",
        "timestamp": 1672063959
    },
    {
        "content": "<p>Yeah, sorry for being ignorant about the history! I found the name very familiar when I saw the author of the paper, but didn't remember where I'd seen it, so I searched on Zulip, and there are only about 20 messages since my account joined Zulip; if I had clicked to expand the history (\"search all public streams\") I would get much more results and would not significantly underestimate his contribution. So it could be an improvement Zulip to search all public history by default.</p>",
        "id": 317977255,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1672070411
    },
    {
        "content": "<p>Tell me if I'm wrong, but there are some related implementations in coq, although I have never used it.<br>\nOne verification of iRRAM on coq I know: <a href=\"https://cp.kaist.ac.kr/jeehoon.kang/\">https://cp.kaist.ac.kr/jeehoon.kang/</a><br>\nAxiomatic Reals and Certified Efficient Exact Real Computation: <a href=\"https://doi.org/10.1007/978-3-030-88853-4_16\">https://doi.org/10.1007/978-3-030-88853-4_16</a></p>",
        "id": 317980182,
        "sender_full_name": "Jihoon Hyun",
        "timestamp": 1672071965
    },
    {
        "content": "<p>I haven't looked into Lean 4 yet, but is my impression correct that Lean 4 doesn't require as much boilerplate as Lean 3 requires when it comes to <em>computation</em> with floats?</p>",
        "id": 318091366,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1672145469
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113488-general/topic/Floats.20and.20reals/near/317772581\">said</a>:</p>\n<blockquote>\n<p>Right -- I'm allowing the bounds to grow -- I'm only asking for inequalities. So the more stuff you do to real numbers the less accuracy you have.</p>\n</blockquote>\n<p>If I understand your suggestions correctly, I believe it cannot work. Your hypothetical functions <code>lower</code> and <code>upper</code> violate the <code>congr_arg</code> property unless you make them return something like <code>-∞</code> and <code>∞</code> respectively.</p>",
        "id": 318093628,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1672146345
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"417654\">Martin Dvořák</span> <a href=\"#narrow/stream/113488-general/topic/Floats.20and.20reals/near/318091366\">said</a>:</p>\n<blockquote>\n<p>I haven't looked into Lean 4 yet, but is my impression correct that Lean 4 doesn't require as much boilerplate as Lean 3 requires when it comes to <em>computation</em> with floats?</p>\n</blockquote>\n<p>THey are just a built-in type (that as explained above is a very rudimentary facade for C level floats) with all the operations you'd expect to be defined on floats defined on it you can just start away basically instantly.</p>",
        "id": 318094357,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1672146658
    },
    {
        "content": "<p>By \"boilerplate\" I meant <code>meta </code> and <code>native.</code> in declarations like:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">solve_quadratic_equation</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">native.float</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">native.float</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 318095333,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1672147061
    },
    {
        "content": "<p>Neither of these keywords do exist anymore in the Lean 4 realm so...yup!</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">solveQuadratic</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">Float</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Float</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"n\">discr</span> <span class=\"o\">:=</span> <span class=\"n\">b</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">-</span> <span class=\"mi\">4</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">c</span>\n  <span class=\"k\">let</span> <span class=\"n\">sol1</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">discr.sqrt</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n  <span class=\"k\">let</span> <span class=\"n\">sol2</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">b</span> <span class=\"bp\">-</span> <span class=\"n\">discr.sqrt</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n  <span class=\"o\">[</span><span class=\"n\">sol1</span><span class=\"o\">,</span> <span class=\"n\">sol2</span><span class=\"o\">]</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">solveQuadratic</span> <span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"mi\">5</span> <span class=\"mi\">4</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">120</span><span class=\"bp\">.</span><span class=\"mi\">3</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>also note that the compiler is smart enough to figure out all of the duplicate stuff going on here so it is also efficient to write it down like this \\o/</p>",
        "id": 318098038,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1672148185
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"417654\">Martin Dvořák</span> <a href=\"#narrow/stream/113488-general/topic/Floats.20and.20reals/near/318093628\">said</a>:</p>\n<blockquote>\n<p>If I understand your suggestions correctly, I believe it cannot work. Your hypothetical functions <code>lower</code> and <code>upper</code> violate the <code>congr_arg</code> property unless you make them return something like <code>-∞</code> and <code>∞</code> respectively.</p>\n</blockquote>\n<p>As you probably can probably imagine, for every real number <code>r</code> and every float <code>f</code> there exists a formula that evaluates to <code>r</code> over reals but to <code>f</code> over floats.</p>",
        "id": 318098699,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1672148452
    },
    {
        "content": "<p>Yes but I was not demanding that evaluation of formulas preserves <code>lower</code> and <code>upper</code>, I was only asking for inequalities, so your observation doesn't contradict what I'm asking for.</p>",
        "id": 318101580,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1672149578
    },
    {
        "content": "<p>Then I probably wrongly understood what you meant by <code>lower(f)+lower(g) &lt;= lower (f+g)</code> and similar.</p>",
        "id": 318101899,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1672149667
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113488-general/topic/Floats.20and.20reals/near/317762481\">said</a>:</p>\n<blockquote>\n<p>Fully expecting the answer no: are there functions <code>lower, upper : Float -&gt; Real</code> with the property that \"the real number modelled by <code>f : Float</code>\" (whatever that means, if it means anything at all) is in the closed inteval <code>[lower f, upper f]</code> and for all the operations in (whatever operations computer scientists deem are the canonical operations on <code>Float</code>) there are corresponding compatible interval arithmetic theorems in <code>Real</code>, e.g. <code>lower(f)+lower(g) &lt;= lower (f+g)</code> and <code>upper(f+g) &lt;= upper(f)+upper(g)</code>?</p>\n</blockquote>\n<p>Looking again at this, I guess the inequalities are pointing in the right direction, but I think it is still not satisfied because of examples that go out of range. For example, if I have a finite float <code>x</code> somewhere above the square root of the largest finite float, then we get <code>x * x = +inf</code> so <code>upper(x*x) = ∞ &gt; upper(x) * upper(x) = (x + ε) ^ 2</code></p>",
        "id": 318127065,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1672159359
    },
    {
        "content": "<p>that's assuming that <code>upper(+inf) = ∞</code>, which seems reasonable, as well as that <code>upper(x)</code> is finite (it's a middling finite number so this also seems reasonable). As long as there is any boundary where <code>upper</code> goes from being finite to being infinite you can play the same trick, so you end up arguing that <code>upper(x) = ∞</code> for all <code>x</code></p>",
        "id": 318127465,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1672159542
    },
    {
        "content": "<p>The product of two floats can be +infinity??</p>",
        "id": 318129346,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1672160362
    },
    {
        "content": "<p>Yes.</p>",
        "id": 318130034,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1672160646
    },
    {
        "content": "<p>After a short experimentation, I can see that addition of two floats can lead to <code>∞</code> too.<br>\nLet <code>M</code> be the largest possible float and <code>x</code> be a positive float.<br>\nThen <code>M+x</code> evaluates either to <code>M</code> or to <code>∞</code>.<br>\nIt seems that (I am not sure about the following) <code>M+x</code> ends up being <code>M</code> when <code>x</code> is small enough so that <code>M-x = M</code>.<br>\nIf <code>M - (M-x)</code> gives a positive number, then <code>M+x</code> evaluates to <code>∞</code>.</p>",
        "id": 318132342,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1672161773
    },
    {
        "content": "<p>It's called \"overflow\" <del>as in Stack Overflow or MathOverflow</del>.</p>",
        "id": 318133137,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1672162143
    },
    {
        "content": "<p>Yeah. Computers are merciless.</p>",
        "id": 318134046,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1672162543
    },
    {
        "content": "<p>Oh wait, stack overflow is a different kind of overflow, it's a kind of buffer overflow.</p>",
        "id": 318134202,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1672162604
    },
    {
        "content": "<p>If infinity is a float then does one have to use ereal to model them? :-/</p>",
        "id": 318136164,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1672163509
    },
    {
        "content": "<p>IEEE 754 (see 3.2 in IEEE 754-2019) defines four specification levels. Level 1 \"Extended real numbers\" corresponds to ereal. Level 2 \"Floating-point data\" adds NaN and distinguishes positive and negative 0. Level 3 \"Representations of floating-point data\" represents finite numbers as (sign, exponent, significand) (so also distinguishing different quantum exponents for the same real number, in the decimal floating-point case) and also distinguishes qNaN from sNaN; almost all IEEE 754 operations have fully defined results at this level, modulo implementation choices such as tininess detection before or after rounding (there are a few cases where results aren't fully specified, e.g. quantum exponents for minimum/maximum operations). Level 4 is \"Bit strings\", which brings in choices of NaN signs and payloads (relevant if you want to model the exact semantics of machine instructions, not so relevant for most analysis of floating-point algorithms at a higher level than individual machine instructions) as well as non-canonical decimal encodings in certain cases.</p>",
        "id": 318139392,
        "sender_full_name": "Joseph Myers",
        "timestamp": 1672164895
    },
    {
        "content": "<p>I would be inclined to level 3 there for a formalized float library on the level of say flocq</p>",
        "id": 318139701,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1672165030
    },
    {
        "content": "<p>I think you can't really do level 4 unless you explicitly select various architectures to implement</p>",
        "id": 318139886,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1672165128
    },
    {
        "content": "<p>and if you want it to correspond to lean code using <code>Float</code> then even that's not sufficient because the programs have to propagate through a compiler like LLVM which has its own ideas about float semantics</p>",
        "id": 318140011,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1672165204
    },
    {
        "content": "<p>I'd agree that level 3 is probably the right level for most floating-point formalization purposes, with explicit parameters somewhere for such things as \"is tininess detected before or after rounding\" (only relevant for exceptions, not the floating-point results) and \"does fma(0, Inf, NaN) raise invalid\" (likewise) and for operations where level 3 operands don't fully determine level 3 results (copySign copying the sign from a NaN operand, min/max operations with decimal operands with the same value and sign but different quantum exponents).</p>",
        "id": 318141171,
        "sender_full_name": "Joseph Myers",
        "timestamp": 1672165748
    },
    {
        "content": "<p>for functions that are not deterministic at level 3 (most explicitly, toBits, but also things like copySign), I think it is best to represent them <em>explicitly</em> as nondeterministic functions and not attempt to treat them as opaque functions like is currently done in <code>Float</code>, because even opaque functions are functions and I don't think this is a safe assumption - the same operation on the same inputs can yield different results depending on whether it was evaluated by LLVM or the target machine (or the other target machine because it was compiled into an olean and then moved to another architecture)</p>",
        "id": 318141700,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1672165982
    },
    {
        "content": "<p>Or as another example, on x86, the rules for choice of NaN result given two NaN operands are different for x87 (larger payload) and SSE (based on order of operands to the instruction).</p>",
        "id": 318141912,
        "sender_full_name": "Joseph Myers",
        "timestamp": 1672166114
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113488-general/topic/Floats.20and.20reals/near/318141700\">said</a>:</p>\n<blockquote>\n<p>for functions that are not deterministic at level 3 (most explicitly, toBits, but also things like copySign), I think it is best to represent them <em>explicitly</em> as nondeterministic functions (...)</p>\n</blockquote>\n<p>What is the most idiomatic way to deal with handle nondeterministic functions in Lean?</p>",
        "id": 318147150,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1672168708
    },
    {
        "content": "<p>It's a bit annoying to work with but the most direct representation of nondeterminism that is available to the lean logic is <code>Quot</code></p>",
        "id": 318148035,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1672169154
    },
    {
        "content": "<p>So you can for example use <code>Squash Bool</code> (<code>Squash</code> being the quotient by the true relation, called <code>trunc</code> in lean 3) to represent a nondeterministic boolean value</p>",
        "id": 318148231,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1672169222
    },
    {
        "content": "<p>to the lean compiler, <code>Squash Bool</code> is just the same as <code>Bool</code>, but to the logic <code>Squash Bool</code> is a type with (provably) only one element</p>",
        "id": 318148549,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1672169356
    },
    {
        "content": "<p>In another thread someone (possibly someone unreliable) <a href=\"#narrow/stream/113489-new-members/topic/starting.20Lean.20and.20Lean.20version/near/304237216\">said</a>:</p>\n<blockquote>\n<p>You may want to resolve this issue by making your functions polymorphic; your proofs will apply to the <code>Real</code> version but you can use the <code>Float</code> version to get numbers out.</p>\n</blockquote>\n<p>Is that in fact a reasonable plan of action to address the question raised at the top of this thread?</p>",
        "id": 318213234,
        "sender_full_name": "Alistair Tucker",
        "timestamp": 1672217027
    },
    {
        "content": "<p>Or would it have to involve some metaprogram as <span class=\"user-mention\" data-user-id=\"395550\">@Henrik Böving</span> suggests</p>",
        "id": 318213599,
        "sender_full_name": "Alistair Tucker",
        "timestamp": 1672217165
    },
    {
        "content": "<p>OT: Do we really want to compare floats to reals? They are almost a subset of rational numbers. Why don't we compare floats to rationals instead?</p>",
        "id": 318214942,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1672217781
    },
    {
        "content": "<p>When I talk about floats with my CS friends they keep telling me that floats are terrible.</p>",
        "id": 318215088,
        "sender_full_name": "Trebor Huang",
        "timestamp": 1672217852
    },
    {
        "content": "<p>They are terrible but useful.</p>",
        "id": 318215214,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1672217890
    },
    {
        "content": "<p>They are so useful that we might want to start to care about them.</p>",
        "id": 318215253,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1672217909
    },
    {
        "content": "<p>I think the best we can do is</p>\n<ul>\n<li>Make a \"Float or Real\" typeclass for a quick relation between them, we prove stuff about the real version, and use the float version.</li>\n<li>Metaprogramming to replace reals with floats.</li>\n<li>Formalize IEEE standards.</li>\n</ul>\n<p>There will not be a set of workhorse theorems that are easy to use, like to give a concise bound of errors.</p>",
        "id": 318215581,
        "sender_full_name": "Trebor Huang",
        "timestamp": 1672218083
    },
    {
        "content": "<p>I suppose that typeclass would look something like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">FloatOrReal</span> <span class=\"o\">(</span><span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">Add</span> <span class=\"n\">R</span><span class=\"o\">,</span> <span class=\"n\">Mul</span> <span class=\"n\">R</span> <span class=\"n\">where</span>\n  <span class=\"n\">sqrt</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">→</span><span class=\"n\">R</span>\n  <span class=\"n\">sin</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">→</span><span class=\"n\">R</span>\n  <span class=\"bp\">//</span> <span class=\"n\">and</span> <span class=\"n\">every</span> <span class=\"n\">other</span> <span class=\"n\">function</span> <span class=\"k\">in</span> <span class=\"n\">the</span> <span class=\"n\">IEEE</span> <span class=\"n\">spec</span>\n</code></pre></div>",
        "id": 318222057,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1672220809
    },
    {
        "content": "<p>I guess I’m not clear on exactly what the metaprogram would be translating</p>",
        "id": 318222470,
        "sender_full_name": "Alistair Tucker",
        "timestamp": 1672220954
    },
    {
        "content": "<p>Yeah, the whole point in the typeclass would be to avoid the need to do any translation</p>",
        "id": 318223589,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1672221498
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"111433\">Alistair Tucker</span> <a href=\"#narrow/stream/113488-general/topic/Floats.20and.20reals/near/318213599\">said</a>:</p>\n<blockquote>\n<p>Or would it have to involve some metaprogram as <span class=\"user-mention silent\" data-user-id=\"395550\">Henrik Böving</span> suggests</p>\n</blockquote>\n<p>The meta program would be a more extreme version of the typeclass approach where we could add arbitrary custom things into the \"polymorphism\" basically. It might very well be that the TC approach is completely sufficient.</p>",
        "id": 318251188,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1672232322
    },
    {
        "content": "<p>Thanks for all the discussion, everyone! I'm learning a lot here.</p>",
        "id": 318263829,
        "sender_full_name": "Tyler Josephson ⚛️",
        "timestamp": 1672237110
    },
    {
        "content": "<p>We almost have <code>data.real.basic</code> finished porting, and I'd try this for myself if it were. But I'm curious - what should happen if one imported the real numbers and then executed:<br>\n<code>#eval (1 / 3 : Real)</code><br>\nWould Lean run forever, increasing the precision of 0.3333... without end? Or would it fail to compile, because it has no guarantee that such a computation will halt? If the Lean code were compiled to C, what would be the type of the result?</p>",
        "id": 318265066,
        "sender_full_name": "Tyler Josephson ⚛️",
        "timestamp": 1672237468
    },
    {
        "content": "<p>If implemented directly the way it is in mathlib, <code>Real</code> is a cauchy sequence of rationals, so computationally it's a <code>Nat -&gt; Rat</code> function. There is even a <code>meta</code> instance for <code>real</code>  which ignores the quotient to get at the function and then prints the first 5 or so values, so if you <code>#eval (1 / 3 : real)</code> you see <code>[1/3, 1/3, 1/3, 1/3, 1/3, ...]</code></p>",
        "id": 318265682,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1672237706
    },
    {
        "content": "<p>I don't think we can safely do this in lean 4 though. We can have it as an <code>unsafe instance : Repr Real</code> but ignoring a quotient is not a safe operation, you can cause false proofs in <code>native_decide</code> with it</p>",
        "id": 318266738,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1672238054
    },
    {
        "content": "<p>Okay, that's helpful. The output of the function is <code>Rat</code> so it wouldn't even try to resolve it into a decimal representation, it would compute and show the resulting <code>Rat</code> itself.</p>",
        "id": 318269222,
        "sender_full_name": "Tyler Josephson ⚛️",
        "timestamp": 1672238923
    },
    {
        "content": "<p>So to check my understanding:<br>\nFor computing (approximate) decimal representations, we should convert the real number into a float (by extending the real typeclass to a float typeclass, or through metaprogramming). The resulting type would correspond to precisely-described IEEE standards, which would allow us to compute decimal representations safely (i.e. no false proofs). We wouldn't <em>need</em> to prove things about the numerical properties of floats, but we could if we wanted to.</p>",
        "id": 318269452,
        "sender_full_name": "Tyler Josephson ⚛️",
        "timestamp": 1672239008
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/real\">docs#real</a> is a type not a typeclass</p>",
        "id": 318277831,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1672242074
    },
    {
        "content": "<p>There is of course <a href=\"https://leanprover-community.github.io/mathlib_docs/find/conditionally_complete_linear_ordered_field\">docs#conditionally_complete_linear_ordered_field</a> which uniquely characterizes the reals, but floats come nowhere close to satisfying it.</p>",
        "id": 318278078,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1672242178
    },
    {
        "content": "<p>On a semi-related note, the semantics of the SMT-LIB float theory are described in <a href=\"https://smtlib.cs.uiowa.edu/papers/BTRW14.pdf\">An Automatable Formal Semantics\nfor IEEE-754 Floating-Point Arithmetic</a> (it targets level 2).</p>",
        "id": 318306512,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1672252404
    },
    {
        "content": "<p>In case it’s useful as a case study or for inspiration, there’s <a href=\"https://github.com/JuliaIntervals/ValidatedNumerics.jl\">this package</a> for validated numerics in Julia, which is capable of quite a bit!</p>",
        "id": 318903111,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1672605093
    }
]