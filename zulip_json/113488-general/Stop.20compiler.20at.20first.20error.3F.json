[
    {
        "content": "<p>Is there a way to compile a single file (like \"lean --make\") but stopping at the first sign of an error, rather than continuing with the compilation through to the end of the file?</p>",
        "id": 355001880,
        "sender_full_name": "David Loeffler",
        "timestamp": 1682988399
    },
    {
        "content": "<p>I don't think so. Perhaps it might be possible to read <code>stderr</code> and abort if you can read anything from it??</p>",
        "id": 355002263,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1682988569
    },
    {
        "content": "<p>I think we do this in CI?</p>",
        "id": 355002942,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1682988900
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/blob/master/scripts/detect_errors.py#L40\">https://github.com/leanprover-community/mathlib/blob/master/scripts/detect_errors.py#L40</a></p>",
        "id": 355003097,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1682988964
    },
    {
        "content": "<p>Indeed <code>env LEAN_ABORT_ON_PANIC=1 lake build</code></p>",
        "id": 355003115,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1682988969
    },
    {
        "content": "<p>(For lean4, that is)</p>",
        "id": 355003362,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1682989111
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243562\">Adam Topaz</span> <a href=\"#narrow/stream/113488-general/topic/Stop.20compiler.20at.20first.20error.3F/near/355003115\">said</a>:</p>\n<blockquote>\n<p>Indeed <code>env LEAN_ABORT_ON_PANIC=1 lake build</code></p>\n</blockquote>\n<p>Good to know this exists in lean4. The context is that I'm hacking together a script to detect unnecessary import statements, because flattening the import hierarchy will make life easier during the porting process. So applying it to mathlib4 is not useful (yet).</p>",
        "id": 355003454,
        "sender_full_name": "David Loeffler",
        "timestamp": 1682989182
    },
    {
        "content": "<p>(We already have <code>leanproject reduce-imports</code> but that only detects import statements in the transitive closure of other imports. I want to detect imports that do actually have an effect, but where the stuff that's ipmorted doesn't get used.)</p>",
        "id": 355003632,
        "sender_full_name": "David Loeffler",
        "timestamp": 1682989280
    },
    {
        "content": "<p>For lean3 it seems you have to do what Scott suggests using the script Eric mentioned. You can take a look at how mathlib3 CI does this.</p>",
        "id": 355004211,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1682989597
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"481963\">David Loeffler</span> <a href=\"#narrow/stream/113488-general/topic/Stop.20compiler.20at.20first.20error.3F/near/355003632\">said</a>:</p>\n<blockquote>\n<p>I want to detect imports that do actually have an effect, but where the stuff that's ipmorted doesn't get used.</p>\n</blockquote>\n<p>I assume you're aware that the graphs in <a class=\"stream-topic\" data-stream-id=\"287929\" href=\"/#narrow/stream/287929-mathlib4/topic/port.20progress\">#mathlib4 &gt; port progress</a> (but not the ones on <a href=\"https://leanprover-community.github.io/mathlib-port-status\">#port-dashboard</a>) already do this?</p>",
        "id": 355004557,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1682989742
    },
    {
        "content": "<blockquote>\n<p>because flattening the import hierarchy will make life easier during the porting process. </p>\n</blockquote>\n<p>I'm not sure how true this is; while it might mean some files can be ported sooner, it won't have much effect on the overall speed of porting all of mathlib, as we're far beyond the bottleneck now</p>",
        "id": 355004942,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1682989876
    },
    {
        "content": "<p>Where it <em>might</em> help is that fewer imports mean faster <code>simp</code> calls due to fewer available lemmas</p>",
        "id": 355004977,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1682989906
    },
    {
        "content": "<p>But I think most of our timeout problems are caused by unreasonably nasty unification problems related to typeclasses, not large simp lemma sets</p>",
        "id": 355005081,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1682989955
    },
    {
        "content": "<p>That said, the tool you're describing does still sound useful to have in the long run :)</p>",
        "id": 355005145,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1682989993
    },
    {
        "content": "<p>is that actually observed in lean 4? The way discrimination tree indexing works means that it is almost completely indifferent to having more lemmas in the simp set</p>",
        "id": 355005147,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1682989994
    },
    {
        "content": "<p>although a larger simp set does mean more initialization time at <code>import</code></p>",
        "id": 355005175,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1682990018
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113488-general/topic/Stop.20compiler.20at.20first.20error.3F/near/355004557\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"481963\">David Loeffler</span> <a href=\"#narrow/stream/113488-general/topic/Stop.20compiler.20at.20first.20error.3F/near/355003632\">said</a>:</p>\n<blockquote>\n<p>I want to detect imports that do actually have an effect, but where the stuff that's imported doesn't get used.</p>\n</blockquote>\n<p>I assume you're aware that the graphs in <a class=\"stream-topic\" data-stream-id=\"287929\" href=\"/#narrow/stream/287929-mathlib4/topic/port.20progress\">#mathlib4 &gt; port progress</a> (but not the ones on <a href=\"https://leanprover-community.github.io/mathlib-port-status\">#port-dashboard</a>) already do this?</p>\n</blockquote>\n<p>Do they really? I wasn't aware of that. How exactly is this detection done?</p>",
        "id": 355005275,
        "sender_full_name": "David Loeffler",
        "timestamp": 1682990072
    },
    {
        "content": "<p>it checks the declarations in the file to see whether they use any declarations in the target file</p>",
        "id": 355005420,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1682990168
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113488-general/topic/Stop.20compiler.20at.20first.20error.3F/near/355005420\">said</a>:</p>\n<blockquote>\n<p>it checks the declarations in the file to see whether they use any declarations in the target file</p>\n</blockquote>\n<p>I wonder if it might be useful to extract that check and run it as part of the CI test cycle (at some point in the future)</p>",
        "id": 355005945,
        "sender_full_name": "David Loeffler",
        "timestamp": 1682990481
    },
    {
        "content": "<p>It is expensive</p>",
        "id": 355006353,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1682990733
    },
    {
        "content": "<p>plus the results are not so easily interpretable as to be usable in a CI check</p>",
        "id": 355006426,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1682990769
    },
    {
        "content": "<p>Mario, this isn’t really related, but how can I make lean4 emit errors in json?</p>",
        "id": 355006791,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1682991013
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113488-general/topic/Stop.20compiler.20at.20first.20error.3F/near/355006353\">said</a>:</p>\n<blockquote>\n<p>It is expensive</p>\n</blockquote>\n<p>This is also the reason that <a href=\"https://leanprover-community.github.io/mathlib-port-status\">#port-dashboard</a> does not attempt this</p>",
        "id": 355006806,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1682991024
    },
    {
        "content": "<p>The json flag doesn’t exist in lean4 as far as I know</p>",
        "id": 355006823,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1682991037
    },
    {
        "content": "<p>that's an open issue IIRC</p>",
        "id": 355006957,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1682991138
    },
    {
        "content": "<p>there is no such flag</p>",
        "id": 355006972,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1682991150
    },
    {
        "content": "<p>Does the flag belong in lake or lean?</p>",
        "id": 355006994,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1682991178
    },
    {
        "content": "<p>both?</p>",
        "id": 355007007,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1682991184
    },
    {
        "content": "<p>Does lake invoke lean as a subprocess, or hook into it directly somehow?</p>",
        "id": 355007023,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1682991198
    },
    {
        "content": "<p>lake definitely wants lean to emit json</p>",
        "id": 355007030,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1682991203
    },
    {
        "content": "<p>it calls it as a subprocess</p>",
        "id": 355007044,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1682991216
    },
    {
        "content": "<p>I made a thread about the <code>--json</code> argument, but I don't know if I've seen an issue</p>",
        "id": 355007061,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1682991237
    },
    {
        "content": "<p>It might be worth tagging that mathport-high-priority, since it means we can get better CI feedback on mathlib4 PRs</p>",
        "id": 355007126,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1682991265
    }
]