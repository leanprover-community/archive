[
    {
        "content": "<p>Here's an example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">Q</span><span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"bp\">→</span> <span class=\"n\">Q</span><span class=\"o\">):</span>\n    <span class=\"o\">(</span><span class=\"n\">nat.succ</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">nat.succ</span> <span class=\"n\">y</span> <span class=\"bp\">→</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">refine</span> <span class=\"o\">(</span><span class=\"bp\">λ</span><span class=\"n\">h3</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">),</span>\n  <span class=\"c1\">-- intro h3,</span>\n  <span class=\"c1\">-- change x.succ=y.succ at h3,</span>\n  <span class=\"n\">injection</span> <span class=\"n\">h3</span> <span class=\"k\">with</span> <span class=\"n\">h1</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">h</span> <span class=\"n\">h1</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>It errors</p>\n<blockquote>\n<p>injection tactic failed, argument must be an equality proof where lhs and rhs are of the form (c ...), where c is a constructor</p>\n</blockquote>\n<p>However, replacing the <code>refine</code> line with <code>intro</code> line or adding <code>change</code> line which both I think don't change anything will make it work.</p>\n<p>So what's wrong with it, and how can I prevent it?</p>",
        "id": 355374805,
        "sender_full_name": "uwagjaynoi",
        "timestamp": 1683106489
    },
    {
        "content": "<p>The same happens with <code>simp</code> (in place of <code>injection</code>).  Variables that are introduced in a lambda in a <code>refine</code> behave differently to the ones introduced with <code>intros</code>. I have no idea why.</p>",
        "id": 355375896,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1683106702
    },
    {
        "content": "<p><code>change _ at h3,</code> is enough to fix it</p>",
        "id": 355377599,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1683107005
    },
    {
        "content": "<p>As is <code>injection (show _, from h3) with h1,</code></p>",
        "id": 355377921,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1683107066
    },
    {
        "content": "<p>the issue is that the type of <code>h3</code> when introduced in that way contains an assigned metavariable</p>",
        "id": 355393732,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1683110559
    },
    {
        "content": "<p>Is this something that can be fixed in <code>refine</code>?</p>",
        "id": 355394567,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1683110782
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113488-general/topic/Variables.20introduced.20in.20lambda.20in.20refine/near/355393732\">said</a>:</p>\n<blockquote>\n<p>the issue is that the type of <code>h3</code> when introduced in that way contains an assigned metavariable</p>\n</blockquote>\n<p>Does \"that way\" refer to <code>refine</code> or <code>show</code>?</p>",
        "id": 355394997,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1683110896
    },
    {
        "content": "<p>lambda with no type annotation inside <code>refine</code></p>",
        "id": 355397345,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1683111473
    },
    {
        "content": "<p>I think it is difficult to fix in <code>refine</code> IIRC, the assignment to the type is in fact determined out-of-band</p>",
        "id": 355397629,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1683111540
    },
    {
        "content": "<p>and we don't want to go traversing the whole term or the whole context instantiating everything</p>",
        "id": 355397718,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1683111567
    },
    {
        "content": "<p>in lean 4 we are consistently doing the opposite: it is the responsibility of the downstream tactic to call <code>instantiateMVars</code> whenever they need to pattern match on something</p>",
        "id": 355397961,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1683111620
    },
    {
        "content": "<p>that is, the blame is pointed at <code>injection</code> for not instantiating mvars before asking if the type of h3 is <code>=</code> of something</p>",
        "id": 355398161,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1683111652
    }
]