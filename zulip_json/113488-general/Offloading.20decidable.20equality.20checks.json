[
    {
        "content": "<p>Is there a way to offload decidable equality to the VM? If not, is ther a better way to write tests of my functions in this way?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean.Data.Parsec</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Parsec</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">beginEnv</span> <span class=\"o\">(</span><span class=\"n\">environment</span> <span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Parsec</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"n\">skipString</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"</span><span class=\"se\">\\\\</span><span class=\"s2\">begin</span><span class=\"err\">\\</span><span class=\"s2\">{{environment}}\"</span>\n<span class=\"kd\">def</span> <span class=\"n\">endEnv</span> <span class=\"o\">(</span><span class=\"n\">environment</span> <span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Parsec</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"n\">skipString</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"</span><span class=\"se\">\\\\</span><span class=\"s2\">end</span><span class=\"err\">\\</span><span class=\"s2\">{{environment}}\"</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">env</span> <span class=\"o\">(</span><span class=\"n\">environment</span> <span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">inner</span> <span class=\"o\">:</span> <span class=\"n\">Parsec</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Parsec</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n  <span class=\"n\">beginEnv</span> <span class=\"n\">environment</span> <span class=\"bp\">*&gt;</span> <span class=\"n\">inner</span> <span class=\"bp\">&lt;*</span> <span class=\"n\">endEnv</span> <span class=\"n\">environment</span>\n\n<span class=\"n\">deriving</span> <span class=\"kd\">instance</span> <span class=\"n\">DecidableEq</span> <span class=\"n\">for</span> <span class=\"n\">Except</span>\n\n<span class=\"k\">#eval</span> <span class=\"o\">(</span><span class=\"n\">env</span> <span class=\"s2\">\"foo\"</span> <span class=\"o\">(</span><span class=\"n\">pstring</span> <span class=\"s2\">\"test\"</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">run</span> <span class=\"s2\">\"</span><span class=\"se\">\\\\</span><span class=\"s2\">begin{foo}test</span><span class=\"se\">\\\\</span><span class=\"s2\">end{foo}\"</span> <span class=\"c1\">-- .ok \"test\"</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">envTest</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"n\">env</span> <span class=\"s2\">\"foo\"</span> <span class=\"o\">(</span><span class=\"n\">pstring</span> <span class=\"s2\">\"test\"</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">run</span> <span class=\"s2\">\"</span><span class=\"se\">\\\\</span><span class=\"s2\">begin{foo}test</span><span class=\"se\">\\\\</span><span class=\"s2\">end{foo}\"</span> <span class=\"bp\">=</span> <span class=\"bp\">.</span><span class=\"n\">ok</span> <span class=\"s2\">\"test\"</span> <span class=\"o\">:=</span>\n  <span class=\"kd\">by</span> <span class=\"n\">decide</span> <span class=\"c1\">-- timeout</span>\n</code></pre></div>",
        "id": 402226387,
        "sender_full_name": "Sky Wilshaw",
        "timestamp": 1700051742
    },
    {
        "content": "<p>Alternatively, are there simp lemmas for things in parsec?</p>",
        "id": 402226749,
        "sender_full_name": "Sky Wilshaw",
        "timestamp": 1700051829
    },
    {
        "content": "<p>You can use <code>native_decide</code> in place of decide I believe</p>",
        "id": 402234834,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1700053750
    },
    {
        "content": "<p>At the price of trusting the compiler</p>",
        "id": 402235072,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1700053814
    },
    {
        "content": "<p>Ah great, that worked! I knew something like that had to exist.</p>",
        "id": 402235715,
        "sender_full_name": "Sky Wilshaw",
        "timestamp": 1700053989
    },
    {
        "content": "<p><code>rfl</code> works there too</p>",
        "id": 402235849,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1700054027
    },
    {
        "content": "<p>It takes too long to elaborate rfl unfortunately.</p>",
        "id": 402236527,
        "sender_full_name": "Sky Wilshaw",
        "timestamp": 1700054191
    },
    {
        "content": "<p>Weird, it works instantly for me</p>",
        "id": 402244371,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1700056097
    },
    {
        "content": "<p>Interestingly enough <code>by rfl</code> is fast but <code>rfl</code> is slow. What's the difference?</p>",
        "id": 402244701,
        "sender_full_name": "Sky Wilshaw",
        "timestamp": 1700056180
    },
    {
        "content": "<p>Is this on the example above, or a much bigger example?</p>",
        "id": 402245665,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1700056414
    },
    {
        "content": "<p>If the former, maybe you're on an older lean.</p>",
        "id": 402245689,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1700056427
    },
    {
        "content": "<p><a href=\"#narrow/stream/270676-lean4/topic/rfl.20repeating.20itself/near/390127430\">There is a difference</a>, but it was much more pronounced in earlier versions of Lean. Are you using an older Lean version?</p>",
        "id": 402245727,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1700056436
    },
    {
        "content": "<p>It's just the example above. <code>by rfl</code> is instant, and <code>rfl</code> times out. I'm on <code>leanprover/lean4:nightly-2023-05-09\n</code>.</p>",
        "id": 402245894,
        "sender_full_name": "Sky Wilshaw",
        "timestamp": 1700056467
    },
    {
        "content": "<p>That's 6 months old</p>",
        "id": 402246084,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1700056521
    },
    {
        "content": "<p>I think it predates the first official release, and probably the FRO?</p>",
        "id": 402246286,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1700056566
    },
    {
        "content": "<p>Ah, right. <code>lake update</code> wasn't doing anything so I just assumed I was already on a relatively recent one.</p>",
        "id": 402246315,
        "sender_full_name": "Sky Wilshaw",
        "timestamp": 1700056573
    },
    {
        "content": "<p>Does lake update even update the toolchain?</p>",
        "id": 402246415,
        "sender_full_name": "Sky Wilshaw",
        "timestamp": 1700056609
    },
    {
        "content": "<p>Just updated to <code>4.3.0-rc1</code> and now <code>rfl</code> is fast. Thanks for the help!</p>",
        "id": 402246668,
        "sender_full_name": "Sky Wilshaw",
        "timestamp": 1700056666
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"492774\">Sky Wilshaw</span> <a href=\"#narrow/stream/113488-general/topic/Offloading.20decidable.20equality.20checks/near/402246415\">said</a>:</p>\n<blockquote>\n<p>Does lake update even update the toolchain?</p>\n</blockquote>\n<p>Only if you're using mathlib (!)</p>",
        "id": 402247441,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1700056840
    },
    {
        "content": "<p>(Mathlib provides a post update hook that does this.)</p>",
        "id": 402339227,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1700087467
    }
]