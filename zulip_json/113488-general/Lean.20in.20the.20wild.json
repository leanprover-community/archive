[
    {
        "content": "<p>Its always interesting to find unexpected Lean theories: <a href=\"https://github.com/levjj/esverify-theory/\" target=\"_blank\" title=\"https://github.com/levjj/esverify-theory/\">https://github.com/levjj/esverify-theory/</a><br>\nFrom a first glance, <code>esverify</code> is a Javascript/ECMAScript verifier, and these are some semantics with soundness...</p>",
        "id": 148772776,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1543480647
    },
    {
        "content": "<p>I enjoy looking at different people's coding style; this is nicely written</p>",
        "id": 148773018,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1543480959
    },
    {
        "content": "<p>and another one: <a href=\"https://twitter.com/scottfleischman/status/1069965177641160707\" target=\"_blank\" title=\"https://twitter.com/scottfleischman/status/1069965177641160707\">https://twitter.com/scottfleischman/status/1069965177641160707</a></p>\n<div class=\"inline-preview-twitter\"><div class=\"twitter-tweet\"><a href=\"https://twitter.com/scottfleischman/status/1069965177641160707\" target=\"_blank\"><img class=\"twitter-avatar\" src=\"https://pbs.twimg.com/profile_images/626135784106491904/6sdJuWCU_normal.jpg\"></a><p>\"Our choice of Lean as the language for the formalisation of this paper has been a consequence of a failed attempt at embedding two-level type theory in the Agda proof assistant.\" \nAdventures in Formalisation <a href=\"https://t.co/UWscHLXJHK\" target=\"_blank\" title=\"https://t.co/UWscHLXJHK\">https://arxiv.org/pdf/1811.11317.pdf</a> p.124</p><span>- Scott Fleischman (@scottfleischman)</span></div></div>",
        "id": 150862445,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1543943781
    },
    {
        "content": "<p><a href=\"https://www.reddit.com/r/math/comments/a3zujc/the_xena_project_i_would_like_to_see_the_main/\" target=\"_blank\" title=\"https://www.reddit.com/r/math/comments/a3zujc/the_xena_project_i_would_like_to_see_the_main/\">https://www.reddit.com/r/math/comments/a3zujc/the_xena_project_i_would_like_to_see_the_main/</a></p>",
        "id": 151166355,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1544253441
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> Did you just confess <em>on Reddit</em> that you don't know much about Reddit?</p>",
        "id": 151172376,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1544265709
    },
    {
        "content": "<p>Anyway, congrats with the visibility!</p>",
        "id": 151172416,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1544265726
    },
    {
        "content": "<p>yes... visibility... is a bad thing in my opinion</p>",
        "id": 151172723,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1544266479
    },
    {
        "content": "<p>Here's a cool writeup of the thesis that includes the <code>esverify</code> project mentioned up above by <span class=\"user-mention\" data-user-id=\"110294\">@Johannes Hölzl</span> <a href=\"https://chris-schuster.net/thesis#esverify\" target=\"_blank\" title=\"https://chris-schuster.net/thesis#esverify\">https://chris-schuster.net/thesis#esverify</a></p>",
        "id": 156943113,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1548540120
    },
    {
        "content": "<p>More Lean in the wild, if you're willing to read some Portuguese: someone was working on cryptography last summer. <a href=\"https://www.maxwell.vrac.puc-rio.br/35851/35851.PDF\" target=\"_blank\" title=\"https://www.maxwell.vrac.puc-rio.br/35851/35851.PDF\">https://www.maxwell.vrac.puc-rio.br/35851/35851.PDF</a></p>",
        "id": 157681100,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1549450552
    },
    {
        "content": "<p>is <code>premise</code> still a keyword? Looks like it means <code>axiom</code> from context</p>",
        "id": 157681437,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1549450987
    },
    {
        "content": "<p>I thought it was a Prop-valued <code>variable</code>, but I'm not sure.</p>",
        "id": 157681581,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1549451176
    },
    {
        "content": "<p>actually I think you're right</p>",
        "id": 157681985,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1549451659
    },
    {
        "content": "<p>\"When describing a proof of a theorem, one must be cautious to ensure said proof<br>\ndoes not contain errors or inconsistencies.\". This guy obviously has no idea about how mathematics works in practice. We're in a post-caution world now.</p>",
        "id": 157683022,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1549453059
    },
    {
        "content": "<p>A slightly unusual \"Lean in the wild\" story:</p>\n<p>My partner was out at an aerials (circus stuff) class this evening, talking to someone, who at some point in the conversation asked \"Coq or Lean\"? (Context: they worked in CS at a research institute here in Canberra, my partner mentioned to them I was interested in automated theorem proving.)</p>",
        "id": 158107947,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1549968090
    },
    {
        "content": "<p>Now I'm disappointed they didn't ask about Isabelle. For me Australia is Isabelle territory.</p>",
        "id": 158113071,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1549974322
    },
    {
        "content": "<p>Everyone knows that mathematicians can't use Isabelle because it doesn't have dependent types?</p>",
        "id": 158113155,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1549974397
    },
    {
        "content": "<p>I gave a talk in Cambridge two weeks ago and at the end of it Larry Paulson told one of his post-docs to go away and define a scheme in Isabelle, to prove it could be done. When he'd left I told the post-doc that I'd met people who were skeptical.</p>",
        "id": 158113182,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1549974444
    },
    {
        "content": "<p>Or, at least, skeptical that you could do it whilst remaining sane.</p>",
        "id": 158113208,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1549974478
    },
    {
        "content": "<p>set theory doesn't have dependent types either...</p>",
        "id": 158113213,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1549974482
    },
    {
        "content": "<p>yeah but look at the set theorists.</p>",
        "id": 158113256,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1549974491
    },
    {
        "content": "<p>Set theory probably doesn't have schemes either <span aria-label=\"rolling eyes\" class=\"emoji emoji-1f644\" role=\"img\" title=\"rolling eyes\">:rolling_eyes:</span></p>",
        "id": 158113264,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1549974508
    },
    {
        "content": "<p>Wait -- you can basically make dependent types in set theory, right?</p>",
        "id": 158113270,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1549974518
    },
    {
        "content": "<p>being a de facto foundation for pen-and-paper maths?</p>",
        "id": 158113272,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1549974521
    },
    {
        "content": "<p>you can, that's kind of the point</p>",
        "id": 158113294,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1549974543
    },
    {
        "content": "<p>Most of analysis works in HOL.</p>",
        "id": 158113306,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1549974553
    },
    {
        "content": "<p>set theory doesn't really have types at all, but you can reconstruct it all</p>",
        "id": 158113318,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1549974564
    },
    {
        "content": "<p>An example of a dependent type is a function which Johan will have seen, which takes a topological space and presheaf on it, and defines a function from the space sending a point to an element of the stalk of the presheaf at that point.</p>",
        "id": 158113327,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1549974579
    },
    {
        "content": "<p>as long as you can make a big enough type you can do most of the same things in HOL</p>",
        "id": 158113335,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1549974592
    },
    {
        "content": "<p>This is manifestly a dependent type, because the target depends on the source.</p>",
        "id": 158113339,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1549974593
    },
    {
        "content": "<p>you just can't call it a dependent type</p>",
        "id": 158113395,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1549974605
    },
    {
        "content": "<p>However in Hartshorne he just says \"now let <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>Y</mi></mrow><annotation encoding=\"application/x-tex\">Y</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.68333em;\"></span><span class=\"strut bottom\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"base\"><span class=\"mord mathit\" style=\"margin-right:0.22222em;\">Y</span></span></span></span> be the disjoint union of all the stalks, and define a function from X to Y...\"</p>",
        "id": 158113410,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1549974615
    },
    {
        "content": "<p>in set theory a function from X to Y is just a set</p>",
        "id": 158113424,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1549974641
    },
    {
        "content": "<p>no dependent types here</p>",
        "id": 158113429,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1549974648
    },
    {
        "content": "<p>doesn't matter how fancy X and Y are</p>",
        "id": 158113436,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1549974657
    },
    {
        "content": "<p>Can you do that in Isabelle? <span class=\"user-mention\" data-user-id=\"110294\">@Johannes Hölzl</span> I've noticed that people do non-trivial analysis in this Isabelle thing. So what about schemes? Everyone seems to think it will be hell, apart from Larry.</p>",
        "id": 158113464,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1549974687
    },
    {
        "content": "<p>it's not pleasant to encode a function as a set when the foundation supports functions directly, but it can be done</p>",
        "id": 158113482,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1549974720
    },
    {
        "content": "<p>and it has to be done this way when you can't find a suitable hack to make your dependent type less dependent</p>",
        "id": 158113532,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1549974744
    },
    {
        "content": "<p>I'm not sure I know enough about schemes to know how to write them down in HOL. You essentially need to relativize everything, i.e. make every definition relative to a set. As far as I understand it, for schemes the biggest advantage of dependent types is that we can ad hoc use the subtype of a open set. This is not possible in HOL.</p>",
        "id": 158116980,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1549978132
    },
    {
        "content": "<p><a href=\"https://plus.maths.org/content/pure-maths-crisis\" target=\"_blank\" title=\"https://plus.maths.org/content/pure-maths-crisis\">https://plus.maths.org/content/pure-maths-crisis</a></p>",
        "id": 161286814,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1553112854
    },
    {
        "content": "<p>Pretty cool, Kevin! I hope people read this.</p>",
        "id": 161292290,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1553116774
    },
    {
        "content": "<p>I understand from the \"pitch to journalists\" standpoint the 'crisis' story is great, and I fully appreciate that the mathematics literature is crap. Nevertheless, I think when talking to other mathematicians, I'd prefer to emphasise more the \"this is fun\" / \"this isn't quite helpful yet, but if you pitch in someday soon this is going to be an awesome tool\" / \"if you don't pay attention now you're going to be a dinosaur\" arguments.</p>",
        "id": 161292455,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1553116871
    },
    {
        "content": "<p>We should rename this thread \"Kevin in the wild\" <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span></p>",
        "id": 161292658,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1553117022
    },
    {
        "content": "<p>I also think we should be careful with this \"crisis\" story. Insisting on this will probably only result in regular mathematicians thinking we are crackpots. And the general audience may also get the wrong message</p>",
        "id": 161292780,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1553117107
    },
    {
        "content": "<p>I did not write that article, someone who came to my talk wrote that article. But I did say the word \"crisis\".</p>",
        "id": 161296468,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1553119997
    },
    {
        "content": "<p>Semi-related: \"Death of Proof\", from 1993 Scientific American</p>",
        "id": 161297423,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1553120690
    },
    {
        "content": "<p><a href=\"https://blogs.scientificamerican.com/cross-check/the-horgan-surface-and-the-death-of-proof/\" target=\"_blank\" title=\"https://blogs.scientificamerican.com/cross-check/the-horgan-surface-and-the-death-of-proof/\">https://blogs.scientificamerican.com/cross-check/the-horgan-surface-and-the-death-of-proof/</a></p>",
        "id": 161297425,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1553120691
    },
    {
        "content": "<p>It is a decades-long crisis <span aria-label=\"sunglasses\" class=\"emoji emoji-1f60e\" role=\"img\" title=\"sunglasses\">:sunglasses:</span></p>",
        "id": 161297485,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1553120743
    },
    {
        "content": "<p>\"A case in point was Andrew Wiles’s proof of Fermat’s last theorem. Only a handful of experts were qualified to evaluate the dense, 200-page proof when it first appeared. \"</p>\n<p>This is extremely misleading. I'm not even sure that it is true, but even if it is true, within a year or two of the proof appearing there was a very detailed survey article by Darmon, Diamond and Taylor explaining the proof which needed only the kind of background which a graduate student working in this area in algebraic number theory would have, so hundreds and maybe even thousands of people were able to verify the proof within a couple of years of it appearing.</p>",
        "id": 161298381,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1553121529
    },
    {
        "content": "<blockquote>\n<p>I also think we should be careful with this \"crisis\" story. Insisting on this will probably only result in regular mathematicians thinking we are crackpots. And the general audience may also get the wrong message</p>\n</blockquote>\n<p>I could give a far harsher talk where I point out various serious mistakes by prestigious people and then point to various recent extremely technical papers by these same people which I know because of insider information did not go through as rigorous a refereeing process as they should have done and then flat out accuse the mathematical community of not having done its job correctly. I am not sure who is the crackpot but recent events in number theory have made me start to firmly believe that it's not me but them. I have thus far refrained from telling such stories in public, but believe you me this is why I am here in the formal proof verification community.</p>",
        "id": 161301248,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1553124289
    },
    {
        "content": "<p>There is also a follow-up to the blog post that <span class=\"user-mention\" data-user-id=\"110025\">@Andrew Ashworth</span> linked: <a href=\"https://blogs.scientificamerican.com/cross-check/okay-maybe-proofs-arent-dying-after-all/\" target=\"_blank\" title=\"https://blogs.scientificamerican.com/cross-check/okay-maybe-proofs-arent-dying-after-all/\">https://blogs.scientificamerican.com/cross-check/okay-maybe-proofs-arent-dying-after-all/</a>. It seems to give a slightly different perspective...</p>",
        "id": 161391937,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1553199353
    },
    {
        "content": "<p><a href=\"https://stackoverflow.com/questions/55417159/lean-define-product-of-r-ideal-and-r-module\" target=\"_blank\" title=\"https://stackoverflow.com/questions/55417159/lean-define-product-of-r-ideal-and-r-module\">https://stackoverflow.com/questions/55417159/lean-define-product-of-r-ideal-and-r-module</a></p>",
        "id": 162045390,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1553865622
    },
    {
        "content": "<p>This sort of thing has come up before</p>",
        "id": 162045402,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1553865634
    },
    {
        "content": "<p>There are people in our community who believe that because stackexchange is the goto place for programming questions, people should not be being redirected here for answers</p>",
        "id": 162045467,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1553865685
    },
    {
        "content": "<p>Is there an archive-related reason to keeping all the discussions here?</p>",
        "id": 162045722,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1553865861
    },
    {
        "content": "<p>hey I wrote that code :P maybe I should answer</p>",
        "id": 162046006,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1553866108
    },
    {
        "content": "<p>You are taking a break from Lean (-;</p>",
        "id": 162046021,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1553866127
    },
    {
        "content": "<p><a href=\"https://stackoverflow.com/questions/55014276/how-to-remove-a-universal-quantifier-in-lean\" target=\"_blank\" title=\"https://stackoverflow.com/questions/55014276/how-to-remove-a-universal-quantifier-in-lean\">https://stackoverflow.com/questions/55014276/how-to-remove-a-universal-quantifier-in-lean</a> one two weeks ago</p>",
        "id": 162047748,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1553867448
    },
    {
        "content": "<p>I think it was <span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> who was arguing that SO was a place where we should be building a fanbase and I trust his judgement on these matters</p>",
        "id": 162051222,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1553870215
    },
    {
        "content": "<p>... so the opposite of redirecting people here</p>",
        "id": 162051569,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1553870425
    },
    {
        "content": "<p>Exactly. There was some discussion about this a while back. The point is that however well we attempt to archive this site, you can't just email the man at Google to say \"whenever someone googles for Lean questions, point them here and not at Stack Exchange please\". Have you noticed more and more people coming out of the woodwork recently asking random questions? This guy today is asking about modules over a ring -- they have a mathematical background and they are going to SO not here. It's something we need to think about.</p>",
        "id": 162055465,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1553872994
    },
    {
        "content": "<p><a href=\"https://twitter.com/JSEllenberg/status/1111248659063205899\" target=\"_blank\" title=\"https://twitter.com/JSEllenberg/status/1111248659063205899\">https://twitter.com/JSEllenberg/status/1111248659063205899</a></p>\n<div class=\"inline-preview-twitter\"><div class=\"twitter-tweet\"><a href=\"https://twitter.com/JSEllenberg/status/1111248659063205899\" target=\"_blank\"><img class=\"twitter-avatar\" src=\"https://pbs.twimg.com/profile_images/732745695644385285/4UEuEOYV_normal.jpg\"></a><p>Sweet, I’ve been replaced! <a href=\"https://t.co/RIYB2bCSd2\" target=\"_blank\" title=\"https://t.co/RIYB2bCSd2\">https://twitter.com/johannes2007/status/1111213919895539712</a></p><span>- Jordan Ellenberg (@JSEllenberg)</span></div></div>",
        "id": 162056898,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1553874031
    },
    {
        "content": "<p>Jordan tweeted to his 11.7K followers :D</p>",
        "id": 162056969,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1553874085
    },
    {
        "content": "<p>Did he just misunderstand what happened?</p>",
        "id": 162057017,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1553874117
    },
    {
        "content": "<p>I am pretty sure that he did not :-)</p>",
        "id": 162057156,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1553874203
    },
    {
        "content": "<p>he's just being a wag</p>",
        "id": 162057159,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1553874208
    },
    {
        "content": "<p>Following links brings <a href=\"https://t.co/qFMmlbCj9d\" target=\"_blank\" title=\"https://t.co/qFMmlbCj9d\">https://t.co/qFMmlbCj9d</a> which reminds us very much how little math is done in Lean compared to Isabelle...</p>",
        "id": 162060016,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1553876293
    },
    {
        "content": "<p>They have apostol, we have Atiyah MacDonald, and I know which one I'd rather have</p>",
        "id": 162062540,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1553877972
    },
    {
        "content": "<p>Except we don't \"have  Atiyah-MacDonald\", right? We have part of chapter one if I followed correctly</p>",
        "id": 162075245,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1553886332
    },
    {
        "content": "<p>Well, by now we have Nakayama, Hilbert basis, tensor products.</p>",
        "id": 162075825,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1553886774
    },
    {
        "content": "<p>So that's also quite some stuff from other chapters</p>",
        "id": 162075839,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1553886784
    },
    {
        "content": "<p>We just had a wonderful installation of Kevin's talk here in Freiburg. With CS and maths in the audience (and a bunch of undergrads!). People kept Kevin busy for &gt;30 minutes after the talk.</p>",
        "id": 164213374,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1556229112
    },
    {
        "content": "<p><a href=\"https://twitter.com/johncarlosbaez/status/1127616867391066113\" target=\"_blank\" title=\"https://twitter.com/johncarlosbaez/status/1127616867391066113\">https://twitter.com/johncarlosbaez/status/1127616867391066113</a></p>\n<div class=\"inline-preview-twitter\"><div class=\"twitter-tweet\"><a href=\"https://twitter.com/johncarlosbaez/status/1127616867391066113\" target=\"_blank\"><img class=\"twitter-avatar\" src=\"https://pbs.twimg.com/profile_images/771587319119814656/n-P1G66L_normal.jpg\"></a><p>For more on Kevin Buzzard, Johan Commelin, and Patrick Massot's project to put the definition of perfectoid space into Lean, go here:\n\n<a href=\"https://t.co/MRvoXiWUcS\" target=\"_blank\" title=\"https://t.co/MRvoXiWUcS\">https://leanprover-community.github.io/lean-perfectoid-spaces/</a>\n\nThanks to <a href=\"https://twitter.com/HigherGeometer\" target=\"_blank\" title=\"https://twitter.com/HigherGeometer\">@HigherGeometer</a> for bringing this to my attention.  Follow him (David Roberts) for news on advanced math!</p><span>- John Carlos Baez (@johncarlosbaez)</span></div></div>",
        "id": 165472854,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1557681135
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> there is some chat after Baez' tweet about your graph: <a href=\"https://twitter.com/JadeMasterMath/status/1127615276151783424\" target=\"_blank\" title=\"https://twitter.com/JadeMasterMath/status/1127615276151783424\">https://twitter.com/JadeMasterMath/status/1127615276151783424</a> . Do you do Twitter?</p>\n<div class=\"inline-preview-twitter\"><div class=\"twitter-tweet\"><a href=\"https://twitter.com/JadeMasterMath/status/1127615276151783424\" target=\"_blank\"><img class=\"twitter-avatar\" src=\"https://pbs.twimg.com/profile_images/996131821296406528/2YN-v8rf_normal.jpg\"></a><p><a href=\"https://twitter.com/johncarlosbaez\" target=\"_blank\" title=\"https://twitter.com/johncarlosbaez\">@johncarlosbaez</a> Do you know what the closeness of different definitions represents here?</p><span>- Jade Master (@JadeMasterMath)</span></div></div>",
        "id": 165483310,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1557698170
    },
    {
        "content": "<p><a href=\"https://twitter.com/XenaProject\" target=\"_blank\" title=\"https://twitter.com/XenaProject\">https://twitter.com/XenaProject</a> After several people in one day told me I needed to get on Twitter, I have got on Twitter. Apparently now I am just supposed to follow shedloads of people and retweet the things they tweet. This is what the world has become?? Patrick I stole your graph because it looks cool.</p>",
        "id": 166222517,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1558480968
    },
    {
        "content": "<p>Oh now there's a surprise: <a href=\"https://twitter.com/leanprover\" target=\"_blank\" title=\"https://twitter.com/leanprover\">https://twitter.com/leanprover</a></p>",
        "id": 166223077,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1558481546
    },
    {
        "content": "<p>not a single tweet. sounds about right</p>",
        "id": 166223406,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1558481886
    },
    {
        "content": "<p>lots of followers though, haha</p>",
        "id": 166223525,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1558482047
    },
    {
        "content": "<p><a href=\"http://www.math.columbia.edu/~woit/wordpress/?p=11053\" target=\"_blank\" title=\"http://www.math.columbia.edu/~woit/wordpress/?p=11053\">http://www.math.columbia.edu/~woit/wordpress/?p=11053</a></p>",
        "id": 167330034,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1559677693
    },
    {
        "content": "<p>I commented, including inviting people here ...</p>",
        "id": 167331386,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1559678855
    },
    {
        "content": "<p><a href=\"https://itp19.cecs.pdx.edu/accepted-papers/\" target=\"_blank\" title=\"https://itp19.cecs.pdx.edu/accepted-papers/\">https://itp19.cecs.pdx.edu/accepted-papers/</a>  <strong>5</strong> Lean papers at ITP, not bad</p>",
        "id": 167506016,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1559844309
    },
    {
        "content": "<p>Nice! How do you know which one is about Lean?</p>",
        "id": 167506715,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1559844749
    },
    {
        "content": "<p>Guessing by Name. I was counting 4, but then Rob pointed out that Minchao's paper is also a Lean implementation.<br>\nThe concrete list:</p>\n<ul>\n<li><strong>Jeremy Avigad, Mario Carneiro and Simon Hudon.</strong> Data types as quotients of polynomial functors</li>\n<li><strong>Mario Carneiro.</strong> Formalizing computability theory via partial recursive functions</li>\n<li><strong>Minchao Wu and Rajeev Goré.</strong> Verified Decision Procedures for Modal Logics</li>\n<li><strong>Robert Y. Lewis, Johannes Hölzl and Sander Dahmen.</strong> Formalizing the Solution to the Cap Set Problem</li>\n<li><strong>Jesse Han and Floris van Doorn.</strong> A formalization of forcing and the consistency of the failure of the continuum hypothesis</li>\n</ul>",
        "id": 167507502,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1559845226
    },
    {
        "content": "<p>All papers have authors who are or have been at CMU</p>",
        "id": 167508502,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1559845879
    },
    {
        "content": "<p>I see Cody Roux has a paper too. Wasn't he also working with Lean?</p>",
        "id": 167509155,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1559846290
    },
    {
        "content": "<p>The paper seams to refering to this Coq project: <a href=\"https://github.com/slasser/vermillion\" target=\"_blank\" title=\"https://github.com/slasser/vermillion\">https://github.com/slasser/vermillion</a></p>",
        "id": 167509266,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1559846380
    },
    {
        "content": "<p>That answers my question</p>",
        "id": 167509407,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1559846438
    },
    {
        "content": "<p>Did you see <a href=\"https://www21.in.tum.de/~wimmers/proofground/\" target=\"_blank\" title=\"https://www21.in.tum.de/~wimmers/proofground/\">https://www21.in.tum.de/~wimmers/proofground/</a>? <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> we need you!</p>",
        "id": 167512442,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1559848071
    },
    {
        "content": "<p>You want me to write a proof problem or play the game?</p>",
        "id": 167512669,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1559848198
    },
    {
        "content": "<p>I once managed to get a problem onto the IMO!</p>",
        "id": 167513238,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1559848536
    },
    {
        "content": "<p>I quite like the idea of coming up with some problems.</p>",
        "id": 167513259,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1559848557
    },
    {
        "content": "<p>We need you to get Lean to win the contest!</p>",
        "id": 167513921,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1559848954
    },
    {
        "content": "<p>Now you know Kevin will submit problems, you can train on sample Langlands program riddles.</p>",
        "id": 167513960,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1559848990
    },
    {
        "content": "<p>is kevin going to trick me into solving langlands conjecture or something?</p>",
        "id": 167514300,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1559849195
    },
    {
        "content": "<p>that would be good</p>",
        "id": 167514309,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1559849205
    },
    {
        "content": "<p>Maybe tricking you to solving 3x+1 would be easier</p>",
        "id": 167514315,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1559849212
    },
    {
        "content": "<p>I need to suggest defining Lebesgue integral</p>",
        "id": 167514398,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1559849266
    },
    {
        "content": "<p>defining the real lebesgue integral (by breaking into positive and negative parts) would probably be a half hour project given the ennreal integral</p>",
        "id": 167514794,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1559849522
    },
    {
        "content": "<p>Do we really need this contest to get it done then?</p>",
        "id": 167514886,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1559849590
    },
    {
        "content": "<p>It's not in mathlib because it's overcomplicated and worthless</p>",
        "id": 167514903,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1559849608
    },
    {
        "content": "<p>but it's not hard to do</p>",
        "id": 167514914,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1559849617
    },
    {
        "content": "<p>How can it be half an hour and overcomplicated?</p>",
        "id": 167515176,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1559849802
    },
    {
        "content": "<p>The only question <a href=\"https://en.wikipedia.org/wiki/Martin_Hairer\" target=\"_blank\" title=\"https://en.wikipedia.org/wiki/Martin_Hairer\">Martin Hairer</a> ever asks me about Lean is \"have you guys got the <a href=\"https://en.wikipedia.org/wiki/Gaussian_measure\" target=\"_blank\" title=\"https://en.wikipedia.org/wiki/Gaussian_measure\">Gaussian measure</a> yet?\"</p>",
        "id": 167515271,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1559849883
    },
    {
        "content": "<p>So someone who knows what it is could do that at some point, so I could finally tell him yes and we could find out what Q2 is</p>",
        "id": 167515334,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1559849965
    },
    {
        "content": "<p>I think at this point it just needs typing in</p>",
        "id": 167515557,
        "sender_full_name": "Reid Barton",
        "timestamp": 1559850128
    },
    {
        "content": "<p>Let me return to the main topic of this thread today (Lean papers in ITP). It's probably obvious to computer scientists, but I prefer to write it just in case. As was pointed out to the perfectoid team, forgetting to write that Lean is developed at Microsoft research is not helping to keep Lean funded. So everybody should make sure their papers and slides mention Microsoft research.</p>",
        "id": 167515955,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1559850454
    },
    {
        "content": "<p>I think that's one of the things <span class=\"user-mention\" data-user-id=\"116448\">@Koundinya Vajjha</span> is working on (gaussian measure)</p>",
        "id": 167515956,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1559850455
    },
    {
        "content": "<p>Is there any effort to collect and catalog copies of all Lean papers? I would be willing to maintain a bibtex bibliography of papers. One of the key problems of doing \"independent research\" (as I am) is that papers get locked behind paywalls or lost due to authors leaving the field.</p>",
        "id": 167531761,
        "sender_full_name": "Tim Daly",
        "timestamp": 1559863241
    },
    {
        "content": "<p>We have the website at <a href=\"https://leanprover-community.github.io/\" target=\"_blank\" title=\"https://leanprover-community.github.io/\">https://leanprover-community.github.io/</a> that isn't doing anything beyond hosting the Zulip archive right now. This would be a good place to collect mathlib-based papers.</p>",
        "id": 167533831,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1559865751
    },
    {
        "content": "<p>A 0-th level try is here: <a href=\"http://axiom-developer.org/leanbib.tex\" target=\"_blank\" title=\"http://axiom-developer.org/leanbib.tex\">http://axiom-developer.org/leanbib.tex</a> </p>\n<p>I don't have write access to the leanprover github. It would be nice to host copies of the papers there also.</p>",
        "id": 167533949,
        "sender_full_name": "Tim Daly",
        "timestamp": 1559865907
    },
    {
        "content": "<p>Who controls this website?</p>",
        "id": 167536260,
        "sender_full_name": "Tim Daly",
        "timestamp": 1559869071
    },
    {
        "content": "<p>I think the leanprover-community maintainers all have access, but Rob set it up</p>",
        "id": 167536517,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1559869407
    },
    {
        "content": "<p>Would you like write access to mathlib? We give it out to whoever wants it</p>",
        "id": 167536597,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1559869480
    },
    {
        "content": "<p>I'd like write access to someplace where people would expect to find a lean bibliography (e.g. a link on the leanprover-community page. Anybody with write access could then add bibliographic entries to their (or other's) papers. A central resource for finding biblio links would make it easier to cite papers. A central repository of copies of the papers would mean that your bibliography could also include a hyperlink.</p>",
        "id": 167536948,
        "sender_full_name": "Tim Daly",
        "timestamp": 1559869886
    },
    {
        "content": "<p>You can make a pull request to the leanprover-community repo. (<a href=\"https://github.com/leanprover-community/leanprover-community.github.io\" target=\"_blank\" title=\"https://github.com/leanprover-community/leanprover-community.github.io\">https://github.com/leanprover-community/leanprover-community.github.io</a>)</p>",
        "id": 167537662,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1559870813
    },
    {
        "content": "<p>I'm a little hesitant to hand out write access, because accidental changes to the archive part of the site might break the auto-updates.</p>",
        "id": 167537681,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1559870862
    },
    {
        "content": "<p>In theory I've created a correct pull request.</p>",
        "id": 167540065,
        "sender_full_name": "Tim Daly",
        "timestamp": 1559873914
    },
    {
        "content": "<blockquote>\n<p>I commented, including inviting people here ...</p>\n</blockquote>\n<p>I note that a discussion began in the comments at <a href=\"http://www.math.columbia.edu/~woit/wordpress/?p=11053\" target=\"_blank\" title=\"http://www.math.columbia.edu/~woit/wordpress/?p=11053\">Woit's blog</a> .</p>\n<p>I regard this sort of thing (online chat) as not unimportant. I have had over 1000 blog views in the last thee days, just from the fact that he mentioned my blog (the wordpress software tells me that people are clicking on his link) so I think we can assume (if we didn't know already) that Woit's blog is very widely read. If people feel that they have something to say about the issues being discussed there and want to contribute, I can pretty much guarantee that there is an audience reading it.</p>\n<p>The reason they're not unimportant is that I am still convinced that the mathematical community is still overwhelmingly completely ignorant of software like Lean, and the more \"chat\" about it, the better.</p>",
        "id": 167554238,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1559892180
    },
    {
        "content": "<p>(note: I think mathlib has a lemma to simplify this <code>not_unimportant : ¬ unimportant ↔ important</code>)</p>",
        "id": 167572492,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1559911089
    },
    {
        "content": "<p>I think this argument assumes the law of the excluded middle.</p>",
        "id": 167573758,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1559912146
    },
    {
        "content": "<p>I usually do assume the excluded middle. Have you been spending a lot of time with Kenny?</p>",
        "id": 167587409,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1559922000
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">unimportant</span> <span class=\"o\">:=</span> <span class=\"n\">true</span>\n<span class=\"n\">def</span> <span class=\"n\">important</span> <span class=\"o\">:=</span> <span class=\"n\">false</span>\n<span class=\"n\">def</span> <span class=\"n\">not_unimportant</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"n\">unimportant</span> <span class=\"bp\">↔</span> <span class=\"n\">important</span>\n<span class=\"o\">:=</span> <span class=\"n\">iff</span><span class=\"bp\">.</span><span class=\"n\">intro</span>\n         <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"bp\">_</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">unimportant</span><span class=\"o\">,</span>\n                        <span class=\"k\">have</span>  <span class=\"bp\">¬</span><span class=\"n\">true</span> <span class=\"bp\">→</span> <span class=\"n\">false</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">h</span> <span class=\"err\">$</span> <span class=\"k\">by</span> <span class=\"n\">trivial</span><span class=\"o\">),</span>\n                        <span class=\"k\">have</span> <span class=\"n\">unimportant</span> <span class=\"bp\">=</span> <span class=\"n\">true</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">refl</span><span class=\"o\">,</span>\n                        <span class=\"k\">have</span> <span class=\"bp\">¬</span><span class=\"n\">true</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"o\">(</span><span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"n\">substr</span> <span class=\"err\">‹</span><span class=\"n\">unimportant</span> <span class=\"bp\">=</span> <span class=\"n\">true</span><span class=\"err\">›</span> <span class=\"o\">)</span> <span class=\"err\">‹</span><span class=\"bp\">¬</span> <span class=\"n\">unimportant</span><span class=\"err\">›</span><span class=\"o\">,</span>\n                        <span class=\"k\">show</span> <span class=\"n\">important</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"err\">‹</span><span class=\"bp\">¬</span> <span class=\"n\">true</span> <span class=\"bp\">→</span> <span class=\"n\">false</span><span class=\"err\">›</span> <span class=\"err\">‹</span><span class=\"bp\">¬</span> <span class=\"n\">true</span><span class=\"err\">›</span> <span class=\"o\">)</span>\n         <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"bp\">_</span> <span class=\"o\">:</span> <span class=\"n\">important</span><span class=\"o\">,</span> <span class=\"n\">false</span><span class=\"bp\">.</span><span class=\"n\">elim</span> <span class=\"err\">‹</span><span class=\"n\">important</span><span class=\"err\">›</span><span class=\"o\">)</span>\n<span class=\"bp\">#</span><span class=\"kn\">print</span> <span class=\"n\">axioms</span> <span class=\"n\">not_unimportant</span>\n</pre></div>\n\n\n<p>i'm still not convinced nihilism is all that constructive though</p>",
        "id": 167589932,
        "sender_full_name": "matt rice",
        "timestamp": 1559923655
    },
    {
        "content": "<p>Leonardo de Moura at PLSE 2016: The Lean Theorem Prover <a href=\"https://www.youtube.com/watch?v=69ytTKfSSgc\" target=\"_blank\" title=\"https://www.youtube.com/watch?v=69ytTKfSSgc\">https://www.youtube.com/watch?v=69ytTKfSSgc</a></p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"69ytTKfSSgc\" href=\"https://www.youtube.com/watch?v=69ytTKfSSgc\" target=\"_blank\" title=\"https://www.youtube.com/watch?v=69ytTKfSSgc\"><img src=\"https://i.ytimg.com/vi/69ytTKfSSgc/default.jpg\"></a></div>",
        "id": 167639172,
        "sender_full_name": "Tim Daly",
        "timestamp": 1559978565
    },
    {
        "content": "<p><a href=\"https://galoisrepresentations.wordpress.com/2019/06/12/harris-versus-buzzard/\" target=\"_blank\" title=\"https://galoisrepresentations.wordpress.com/2019/06/12/harris-versus-buzzard/\">https://galoisrepresentations.wordpress.com/2019/06/12/harris-versus-buzzard/</a></p>",
        "id": 168024921,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1560414553
    },
    {
        "content": "<p>Is that face-off on the 20th of June in Paris recorded by any chance?</p>",
        "id": 168028664,
        "sender_full_name": "Kevin Kappelmann",
        "timestamp": 1560418251
    },
    {
        "content": "<p>I don't know, but if it's in France it will probably be dubbed in French</p>",
        "id": 168028785,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1560418350
    },
    {
        "content": "<p><a href=\"https://www.youtube.com/watch?v=aZHbnQlFOn4\" target=\"_blank\" title=\"https://www.youtube.com/watch?v=aZHbnQlFOn4\">https://www.youtube.com/watch?v=aZHbnQlFOn4</a> My general audience talk with a bunch of Lean in.</p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"aZHbnQlFOn4\" href=\"https://www.youtube.com/watch?v=aZHbnQlFOn4\" target=\"_blank\" title=\"https://www.youtube.com/watch?v=aZHbnQlFOn4\"><img src=\"https://i.ytimg.com/vi/aZHbnQlFOn4/default.jpg\"></a></div>",
        "id": 168144927,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1560526150
    },
    {
        "content": "<p>re; Squares Tessellate  Tait, \"Truth and Proof: The Platonism of Mathematics\" <a href=\"http://logic.harvard.edu/EFI_Tait_PlatonismInMathematics.pdf\" target=\"_blank\" title=\"http://logic.harvard.edu/EFI_Tait_PlatonismInMathematics.pdf\">http://logic.harvard.edu/EFI_Tait_PlatonismInMathematics.pdf</a></p>",
        "id": 168149782,
        "sender_full_name": "Tim Daly",
        "timestamp": 1560529399
    },
    {
        "content": "<blockquote>\n<p><a href=\"https://itp19.cecs.pdx.edu/accepted-papers/\" target=\"_blank\" title=\"https://itp19.cecs.pdx.edu/accepted-papers/\">https://itp19.cecs.pdx.edu/accepted-papers/</a>  <strong>5</strong> Lean papers at ITP, not bad</p>\n</blockquote>\n<p><a href=\"https://itp19.cecs.pdx.edu/invited-speakers/\" target=\"_blank\" title=\"https://itp19.cecs.pdx.edu/invited-speakers/\">https://itp19.cecs.pdx.edu/invited-speakers/</a></p>\n<p>So now 6 Lean talks ;-)</p>",
        "id": 169026015,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1561553671
    },
    {
        "content": "<p>Do you know what you'll talk about, or will you decide at 3 AM the night before?</p>",
        "id": 169027915,
        "sender_full_name": "Reid Barton",
        "timestamp": 1561554968
    },
    {
        "content": "<p>I was thinking of talking about what makes a mathematician tick.</p>",
        "id": 169029058,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1561555723
    },
    {
        "content": "<p><a href=\"https://twitter.com/derKha/status/1145412656632930304\" target=\"_blank\" title=\"https://twitter.com/derKha/status/1145412656632930304\">https://twitter.com/derKha/status/1145412656632930304</a></p>\n<div class=\"inline-preview-twitter\"><div class=\"twitter-tweet\"><a href=\"https://twitter.com/derKha/status/1145412656632930304\" target=\"_blank\"><img class=\"twitter-avatar\" src=\"https://pbs.twimg.com/profile_images/1112971062399074305/jRGHUc-f_normal.png\"></a><p>the ideal lambda syntax is</p><span>- Sebastian Ullrich (@derKha)</span></div></div>",
        "id": 169356464,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1561933341
    },
    {
        "content": "<p>I use \\mapsto inside an expression.</p>",
        "id": 169356856,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1561934250
    },
    {
        "content": "<p>I don't like the idea that there would be significant notational differences between  for all and lambda. I think we shouldn't have a completely different syntax for each binder. If we pick <code>.</code>, we should use it for <code>forall</code>, <code>exists</code>, etc</p>",
        "id": 169356947,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1561934424
    },
    {
        "content": "<blockquote>\n<p>One of Lean's syntactic idiosyncrasies is the use of a comma separator in lambdas and other binders.</p>\n</blockquote>\n<p>one of my reviewers complained about this exact thing:</p>\n<div class=\"codehilite\"><pre><span></span>How is this tuple parsed?  For me it looks like a 5-uple!\n  Apparently, Lean has some magic binding rules where the comma gets a\n  different binding strength if it was preceded by a λ!? ...\n  [What were the designers of Lean thinking here??]\n</pre></div>\n\n\n<p>in retrospect, it is indeed hilarious:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"kn\">check</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">pSet</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"bp\">→</span> <span class=\"n\">bSet</span> <span class=\"err\">𝔹</span>\n<span class=\"bp\">|</span> <span class=\"bp\">⟨</span><span class=\"n\">α</span><span class=\"o\">,</span><span class=\"n\">A</span><span class=\"bp\">⟩</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"kn\">check</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">a</span><span class=\"o\">),</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"err\">⊤</span><span class=\"bp\">⟩</span>\n</pre></div>",
        "id": 169356998,
        "sender_full_name": "Jesse Michael Han",
        "timestamp": 1561934542
    },
    {
        "content": "<p>Yeah, I also noticed how crazy/ambiguous-looking the <code>, , ,</code> syntax is when trying to explain some Lean code to a non-Lean user</p>",
        "id": 169357257,
        "sender_full_name": "Reid Barton",
        "timestamp": 1561935218
    },
    {
        "content": "<p>But I don't have a Twitter account so I don't get a vote <span aria-label=\"not allowed\" class=\"emoji emoji-1f6ab\" role=\"img\" title=\"not allowed\">:not_allowed:</span> <span aria-label=\"bird\" class=\"emoji emoji-1f426\" role=\"img\" title=\"bird\">:bird:</span></p>",
        "id": 169357297,
        "sender_full_name": "Reid Barton",
        "timestamp": 1561935286
    },
    {
        "content": "<p>Yeah, I can't vote either. But the traditional separator is the period, so I'd vote for that. And it should also be used for all the other logical quantifiers, like Simon mentioned.</p>",
        "id": 169359102,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1561938830
    },
    {
        "content": "<p>if we're thinking outside the box syntaxwise, a lot of people wouldn't mind having the Greek letter λ available as a variable name</p>",
        "id": 169359506,
        "sender_full_name": "Reid Barton",
        "timestamp": 1561939405
    },
    {
        "content": "<p>from the perspective, <code>\\mapsto</code> doesn't use a letter so that frees up lambda but it does use an arrow which we always seem to run out of. Plus, my aforementioned point about homogeneity</p>",
        "id": 169359822,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1561940046
    },
    {
        "content": "<p>there are also some alternative Unicode lambdas (see under \"Mathematical Lambda\" at <a href=\"https://en.wikipedia.org/wiki/Lambda\" target=\"_blank\" title=\"https://en.wikipedia.org/wiki/Lambda\">https://en.wikipedia.org/wiki/Lambda</a>) but I don't know how well supported they are</p>",
        "id": 169360011,
        "sender_full_name": "Reid Barton",
        "timestamp": 1561940505
    },
    {
        "content": "<p>We could keep the same lambda for functional abstractions and let people find other unicode lambdas for their local purposes</p>",
        "id": 169360746,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1561942125
    },
    {
        "content": "<p>I would actually prefer to use backslash than unicode lambda (but with lambda available as alternate notation). It would be nice if the core syntax didn't use so much unicode, since this makes it difficult for those that don't want to use a lean-approved editor</p>",
        "id": 169363277,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1561947133
    },
    {
        "content": "<p>Does that issue arise often?</p>",
        "id": 169363333,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1561947252
    },
    {
        "content": "<p>Well, maybe we don't hear those users, because they don't even consider Lean atm...</p>",
        "id": 169363339,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1561947282
    },
    {
        "content": "<p>Is <code>.\\</code> a faithful ASCII rendition of lambda?</p>",
        "id": 169363341,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1561947295
    },
    {
        "content": "<p><code>.\\ x. e</code> <span aria-label=\"scream cat\" class=\"emoji emoji-1f640\" role=\"img\" title=\"scream cat\">:scream_cat:</span></p>",
        "id": 169363351,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1561947318
    },
    {
        "content": "<p>Btw, I would be a fan of having infix <code>\\mapsto</code> available. It's used all over the place in maths, so it doesn't feel like \"sacrificing\" an arrow.</p>",
        "id": 169363399,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1561947377
    },
    {
        "content": "<p>Yeah --- I'd be pretty upset seeing someone use \\mapsto to mean anything else, so arguably it's already taken.</p>",
        "id": 169363414,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1561947439
    },
    {
        "content": "<p>I would be happy to see \\mapsto, although it might be tricky to parse</p>",
        "id": 169363728,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1561948036
    },
    {
        "content": "<p>ATTACK OF ZE SEMICOLONS</p>",
        "id": 169363972,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1561948554
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/lean4/commit/5c4ec3082099a7e1b008ced0db162c7cac16663a\" target=\"_blank\" title=\"https://github.com/leanprover/lean4/commit/5c4ec3082099a7e1b008ced0db162c7cac16663a\">https://github.com/leanprover/lean4/commit/5c4ec3082099a7e1b008ced0db162c7cac16663a</a></p>",
        "id": 169363973,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1561948555
    },
    {
        "content": "<p>Sigh. I wish there weren't so many meaningless syntax changes. I don't really care what the syntax is, but I like consistency and these changes should be considered in the light of all the people that will have to learn the new syntax. I hope there is at least a rationale posted for all these things at some point</p>",
        "id": 169364165,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1561948951
    },
    {
        "content": "<p>Guy Steele on logic notation: <a href=\"https://www.youtube.com/watch?v=dCuZkaaou0Q\" target=\"_blank\" title=\"https://www.youtube.com/watch?v=dCuZkaaou0Q\">https://www.youtube.com/watch?v=dCuZkaaou0Q</a></p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"dCuZkaaou0Q\" href=\"https://www.youtube.com/watch?v=dCuZkaaou0Q\" target=\"_blank\" title=\"https://www.youtube.com/watch?v=dCuZkaaou0Q\"><img src=\"https://i.ytimg.com/vi/dCuZkaaou0Q/default.jpg\"></a></div>",
        "id": 169364832,
        "sender_full_name": "Tim Daly",
        "timestamp": 1561950360
    },
    {
        "content": "<p>For example, does [x/y]e mean substitute x for y in e or substitute y for x in e? Guy did a survey.</p>",
        "id": 169365029,
        "sender_full_name": "Tim Daly",
        "timestamp": 1561950726
    },
    {
        "content": "<blockquote>\n<p>I would actually prefer to use backslash than unicode lambda (but with lambda available as alternate notation). It would be nice if the core syntax didn't use so much unicode, since this makes it difficult for those that don't want to use a lean-approved editor</p>\n</blockquote>\n<p>there are non-unicode alternatives for lambda, though? Just like coq, I think you can type <code>fun</code> or <code>assume</code> for lambda, and so forth. The implication arrow is the very awesome <code>-&gt;</code>. I mean, you probably know this, so I'm not quite following.</p>",
        "id": 169367614,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1561955906
    },
    {
        "content": "<blockquote>\n<p>For example, does [x/y]e mean substitute x for y in e or substitute y for x in e? Guy did a survey.</p>\n</blockquote>\n<p>This issue is what confused me every single time I read or watched explanations about lambda-calculus.</p>",
        "id": 169379398,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1561972234
    },
    {
        "content": "<p>I'm very close to creating a Twitter account only for the purpose of voting here. <span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> wouldn't it make more sense to have a GitHub vote? You could created and issue with one message per proposition, and we can use the emoji reactions to vote. I think the period option is really awful. I don't know any language (I mean real language, not programming language) where period is used for anything else than ending a sentence. In what sense does <code>λ x. e</code>ends after <code>x</code>?!? Of course every mathematician would vote for <code>x ↦ e</code> but I'd be happy to keep <code>λ x, e</code> if it is important for CS people.</p>",
        "id": 169379751,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1561972604
    },
    {
        "content": "<p>(x : nat, y : int) ↦ x + y</p>",
        "id": 169381079,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1561973934
    },
    {
        "content": "<p>The java compiler can parse that</p>",
        "id": 169381102,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1561973962
    },
    {
        "content": "<p>(I mean an isomorphic expression)</p>",
        "id": 169381111,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1561973977
    },
    {
        "content": "<p>Period is used in Isabelle. It took me a lot of time to get used to the comma in Lean, and in the end I think I prefer the period because the comma is already used to separate expressions in anonymous constructors. My point is rather that I would like to have two different symbols here, be it <code>. ,</code> or <code>, ;</code> say.</p>",
        "id": 169382876,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1561975738
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> The wording of the poll should imply that it isn't meant to be taken very seriously, nor will its outcome influence our decision</p>",
        "id": 169383259,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1561976270
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110050\">@Sebastien Gouezel</span> I'm not convinced we should unnecessarily include syntax variations (ASCII alternatives are quite useful, OTOH). In practice, whatever syntax TPIL uses will be used by 95% of all users. But you're welcome to override the builtin notation in Lean 4 if you want to.</p>",
        "id": 169383799,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1561976843
    },
    {
        "content": "<p>What about using python's <code>λ x: e</code>? At least it's not a period</p>",
        "id": 169386807,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1561980275
    },
    {
        "content": "<p>we can make everybody unhappy and do <code>λx ↦ e</code></p>",
        "id": 169387109,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1561980645
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110025\">@Andrew Ashworth</span> That looks dicey. To be sure everyone is unhappy, let's put the lambda at the end</p>",
        "id": 169423858,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1562009194
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> I'm not too wild about this possibility because <code>:</code> is also used for type annotations. <code>λ v : e : e</code> would be valid and possibly ambiguous. You could require brackets around <code>v : e</code> but I prefer those brackets to be optional</p>",
        "id": 169423987,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1562009304
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> I think Sebastien didn't mean two syntaxes at the same time, but to have a syntax where the tuple \"comma\" is different from the binder \"dot\".</p>",
        "id": 169426428,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1562011346
    },
    {
        "content": "<p>While I would also prefer the \" fun x. t\" instead of \"fun x, t\" I think this would be another unnecessary syntax change.</p>",
        "id": 169426481,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1562011417
    },
    {
        "content": "<blockquote>\n<p>I think Sebastien didn't mean two syntaxes at the same time, but to have a syntax where the tuple \"comma\" is different from the binder \"dot\".</p>\n</blockquote>\n<p>Ah, I see.</p>",
        "id": 169426656,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1562011538
    },
    {
        "content": "<p>would it really be that difficult to (possibly automatically) convert the old syntax to a new syntax in all important lean resources? <br>\nare there many existing lean resources that cannot be easily converted?</p>",
        "id": 169427172,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1562011920
    },
    {
        "content": "<p>I like the period, but probably because it is common in the CS literature and I have gotten used to it. <span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> here in the US we write 3.1415... I guess you Europeans sometimes write 1.000.000 for one million.</p>",
        "id": 169427292,
        "sender_full_name": "Jeremy Avigad",
        "timestamp": 1562011990
    },
    {
        "content": "<p>It is possible to get used to anything.</p>",
        "id": 169427399,
        "sender_full_name": "Jeremy Avigad",
        "timestamp": 1562012053
    },
    {
        "content": "<p>The problem is that this isn't fully \"a free choice\", since some of these will eventually be published in papers and books. Hopefully the syntax can be understood by non-lean readers.</p>",
        "id": 169429271,
        "sender_full_name": "Tim Daly",
        "timestamp": 1562013505
    },
    {
        "content": "<p>No, we use <code>1 000 000</code>.</p>",
        "id": 169429286,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1562013527
    },
    {
        "content": "<p>This might not count as \"in the wild\" since it's from MSR, but: <a href=\"https://sf.snu.ac.kr/aliveinlean/\" target=\"_blank\" title=\"https://sf.snu.ac.kr/aliveinlean/\">https://sf.snu.ac.kr/aliveinlean/</a> <a href=\"https://sf.snu.ac.kr/publications/aliveinlean.pdf\" target=\"_blank\" title=\"https://sf.snu.ac.kr/publications/aliveinlean.pdf\">https://sf.snu.ac.kr/publications/aliveinlean.pdf</a></p>",
        "id": 171069447,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1563363271
    },
    {
        "content": "<p>ooh, if I have time, I want to check this out</p>",
        "id": 171123895,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1563403699
    },
    {
        "content": "<p>right now I'm researching how much work it would be to write a program that traverses Clang ASTs and feeds floating point expressions to Herbie, and then spit out the analysis. So maybe not directly related, but somewhat...</p>",
        "id": 171124083,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1563404004
    },
    {
        "content": "<p><a href=\"https://arxiv.org/abs/1907.07801\" target=\"_blank\" title=\"https://arxiv.org/abs/1907.07801\">https://arxiv.org/abs/1907.07801</a></p>",
        "id": 171238612,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1563524179
    },
    {
        "content": "<p>The relevant code seems to be here: <a href=\"https://github.com/NeilStrickland/itloc\" target=\"_blank\" title=\"https://github.com/NeilStrickland/itloc\">https://github.com/NeilStrickland/itloc</a></p>",
        "id": 171251977,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1563538544
    },
    {
        "content": "<blockquote>\n<p>In particular, we have implemented interaction with the lean theorem prover, whereby the export format of lean is used (via trepplein) to generate code in our implementation of HoTT. This allows us to start with a library for learning as well as a target for natural lannguage processing.</p>\n</blockquote>\n<p><a href=\"http://siddhartha-gadgil.github.io/ProvingGround/\" target=\"_blank\" title=\"http://siddhartha-gadgil.github.io/ProvingGround/\">http://siddhartha-gadgil.github.io/ProvingGround/</a></p>",
        "id": 171326712,
        "sender_full_name": "Koundinya Vajjha",
        "timestamp": 1563627820
    },
    {
        "content": "<p>I'd be interested in thoughts about the arrangement of code for this sort of thing.  I think it's desirable to have a static snapshot on the arxiv and a maintained repository on github.  Certainly some of the code on my github repository could move into mathlib.  We could have a policy and/or aspiration that all code supporting a published paper should move into mathlib.  Or we could have a separate repository for that purpose, but still under leanprover-community and set up with travis so we can maintain compatibility with mathlib.</p>",
        "id": 171419381,
        "sender_full_name": "Neil Strickland",
        "timestamp": 1563791366
    },
    {
        "content": "<p>It's a little ambitious to expect everybody to keep their code up to date. An arxiv submission should contain git hashes of any dependent packages. Probably also a specific Lean version number too, in order to ensure reproducibility, maybe using Elan? Then even if the paper is read years later the code should still work without squiggly lines.</p>",
        "id": 171420435,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1563792509
    },
    {
        "content": "<p>It would be best if ArXiv would host everything needed to make a reproducible paper, but I can imagine the storage costs would be immense, especially for papers in physical science with large datasets... :/</p>",
        "id": 171420864,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1563793066
    },
    {
        "content": "<p>On The FOM (foundations of mathematics) mailing list there is a <a href=\"https://cs.nyu.edu/pipermail/fom/2019-July/021617.html\" target=\"_blank\" title=\"https://cs.nyu.edu/pipermail/fom/2019-July/021617.html\">short thread</a> about the NP = PSPACE problem. People are trying to formalize their claimed proof that NP = PSPACE in Lean:</p>\n<blockquote>\n<p>In order to avoid incomplete versions, I and my students,<br>\nare formalizing  our version in LEAN. Only after each relevant part is<br>\nformalized and checked there will be an article published it in arxiv</p>\n</blockquote>\n<p>According to Wikipedia, this claim is \"<a href=\"https://en.wikipedia.org/wiki/PSPACE#Relation_among_other_classes\" target=\"_blank\" title=\"https://en.wikipedia.org/wiki/PSPACE#Relation_among_other_classes\">widely suspected</a>\" to be false.</p>",
        "id": 172536503,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1565037793
    },
    {
        "content": "<p>I wrote a short piece about Lean for the London Mathematical Society newsletter, and it has just appeared: <a href=\"https://www.lms.ac.uk/sites/lms.ac.uk/files/files/NLMS_484_for-web_0.pdf\" target=\"_blank\" title=\"https://www.lms.ac.uk/sites/lms.ac.uk/files/files/NLMS_484_for-web_0.pdf\">https://www.lms.ac.uk/sites/lms.ac.uk/files/files/NLMS_484_for-web_0.pdf</a>  (pages 32 to 36).</p>",
        "id": 174729173,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1567440838
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> Gijswijt's name is missing on p33</p>",
        "id": 174730222,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1567442095
    },
    {
        "content": "<p>Noo!</p>",
        "id": 174732526,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1567444987
    },
    {
        "content": "<p>:-(</p>",
        "id": 174732535,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1567444995
    },
    {
        "content": "<p>Well it's only missing once, it is there the second time, and it's also clearly a typo rather than me claiming that it's Ellenberg only because of the dangling \"and\".</p>",
        "id": 174732748,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1567445211
    },
    {
        "content": "<p>Oh! Gijswijt's name is in the version I sent them! So they have removed it for some reason -- as well as making the Lean code on p32 look a bit horrible (this is some png rescaling issue perhaps).</p>",
        "id": 174732788,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1567445280
    },
    {
        "content": "<p>Wow, that's some really good editing!</p>",
        "id": 174732948,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1567445428
    },
    {
        "content": "<p>The London Mathematical Society runs on a shoestring.</p>",
        "id": 174732996,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1567445522
    },
    {
        "content": "<p>Can they still fix it? Or is it already printed?</p>",
        "id": 174733059,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1567445579
    },
    {
        "content": "<p>I have no idea. I'll ask.</p>",
        "id": 174733081,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1567445615
    },
    {
        "content": "<p>It will be fixed online when people are back from holidays</p>",
        "id": 174849121,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1567569019
    },
    {
        "content": "<p>If minor edits are still relevant: \"It is just is a\" near the end of the first page</p>",
        "id": 174974997,
        "sender_full_name": "Reid Barton",
        "timestamp": 1567691258
    },
    {
        "content": "<p>Thanks. The person who's making the changes is away until Monday so I believe I might still be able to get this fixed.</p>",
        "id": 174977912,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1567693182
    },
    {
        "content": "<p><a href=\"https://www.vice.com/en_us/article/8xwm54/number-theorist-fears-all-published-math-is-wrong-actually\" target=\"_blank\" title=\"https://www.vice.com/en_us/article/8xwm54/number-theorist-fears-all-published-math-is-wrong-actually\">https://www.vice.com/en_us/article/8xwm54/number-theorist-fears-all-published-math-is-wrong-actually</a></p>",
        "id": 176671369,
        "sender_full_name": "Olli",
        "timestamp": 1569513972
    },
    {
        "content": "<p>?? How did they get from \"I think there is a non-zero chance that some of our great castles are built on sand\" to \"Number Theorist Fears All Published Math Is Wrong\" ?? <span class=\"user-mention\" data-user-id=\"110596\">@Rob Lewis</span> this is the guy we were talking about at ITP.</p>",
        "id": 176671429,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1569514045
    },
    {
        "content": "<p>That's just a completely click-baity title which does not represent my views.</p>",
        "id": 176671458,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1569514075
    },
    {
        "content": "<p>Yep, I ran into it on Twitter posted by a non-mathematician, clearly it is clickbait and how they get their clicks and their ad revenue</p>",
        "id": 176671683,
        "sender_full_name": "Olli",
        "timestamp": 1569514214
    },
    {
        "content": "<p>“I’m suddenly concerned that all of published math is wrong because mathematicians are not checking the details, and I’ve seen them wrong before,” Buzzard told Motherboard while he was attending the 10th Interactive Theorem Proving conference in Portland, Oregon, where he gave the opening talk.</p>",
        "id": 176672284,
        "sender_full_name": "William Whistler",
        "timestamp": 1569514728
    },
    {
        "content": "<p>Is that a made-up quote?</p>",
        "id": 176672293,
        "sender_full_name": "William Whistler",
        "timestamp": 1569514739
    },
    {
        "content": "<p>How can I check? :-/ I was in a hotel room in Portland talking to him on the phone. It's not very good English, that's for sure.</p>",
        "id": 176672418,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1569514831
    },
    {
        "content": "<p>Hard at this point, if you don't remember or have a record. They might've rolled their question and your response into the quote, or something like that.</p>",
        "id": 176672639,
        "sender_full_name": "William Whistler",
        "timestamp": 1569514987
    },
    {
        "content": "<p>Well, we live and learn :-/</p>",
        "id": 176672671,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1569515010
    },
    {
        "content": "<p>Heh, it's not the worst thing Vice has ever published.</p>",
        "id": 176672676,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1569515014
    },
    {
        "content": "<p>:-)</p>",
        "id": 176672689,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1569515021
    },
    {
        "content": "<p>Even \"arguing that we must begin to rely on AI to verify proofs\" is quite clickbaity. Not all software is AI, for heaven's sake.</p>",
        "id": 176672940,
        "sender_full_name": "William Whistler",
        "timestamp": 1569515175
    },
    {
        "content": "<p>But to be fair, Kevin does put a lot of software in the same basket, going so far as to ask \"Why isn't Lean smart enough to figure it out?\" inviting the classification of interactive provers as AI technology</p>",
        "id": 176675494,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1569517144
    },
    {
        "content": "<p>I had the foresight to ask him to check back with me over any quotes he wanted to use. So at least I sound sane (if not nearly as exciting).</p>",
        "id": 176706638,
        "sender_full_name": "Jeremy Avigad",
        "timestamp": 1569541493
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> Time for a rectification blogpost? <span aria-label=\"grimacing\" class=\"emoji emoji-1f62c\" role=\"img\" title=\"grimacing\">:grimacing:</span> <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span></p>",
        "id": 176718191,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1569559458
    },
    {
        "content": "<p>I'm not so much concerned about the general public, or clickbaity titles. More about the mathematical community that doesn't speak with you on a daily basis.</p>",
        "id": 176718516,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1569560127
    },
    {
        "content": "<p>I'm a bit snowed under at the minute, teaching starts next week, but I'll see what I can do</p>",
        "id": 176723700,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1569568394
    },
    {
        "content": "<blockquote>\n<p>I'm not so much concerned about the general public, or clickbaity titles. More about the mathematical community that doesn't speak with you on a daily basis.</p>\n</blockquote>\n<p>I think you're probably more concerned than I am :-) I think that when I was younger I would have been running around panicking, but now I understand the internet much better and it seems to me that most Lean stuff on the internet is sane, and then this one piece is a bit more extreme but it will just disappear into the general noise. I think much more interesting is Frank Calegari's claim that some humans completely understand the proof of Fermat's Last Theorem, so I wrote a blog post about that instead. What do you think <span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> ? I can't quite work out if you're being serious. I mention the Vice article a bit at the beginning.</p>\n<p><a href=\"https://xenaproject.wordpress.com/2019/09/27/does-anyone-know-a-proof-of-fermats-last-theorem/\" target=\"_blank\" title=\"https://xenaproject.wordpress.com/2019/09/27/does-anyone-know-a-proof-of-fermats-last-theorem/\">https://xenaproject.wordpress.com/2019/09/27/does-anyone-know-a-proof-of-fermats-last-theorem/</a></p>",
        "id": 176737129,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1569583147
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> I think the first paragraph of your blogpost settles it in a nice and relaxed way (-;</p>",
        "id": 176737924,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1569584012
    },
    {
        "content": "<p>But Frank hasn't provided a proof of his counterclaim. Not even a \"mathematical\" proof (-;</p>",
        "id": 176738428,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1569584552
    },
    {
        "content": "<p>I just ran into François Charles in the corridor and stopped me to tell me: \"I saw in newspapers that your collaborator says every maths is wrong\". He was smiling though.</p>",
        "id": 176749195,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1569593457
    },
    {
        "content": "<p>What can you do :-) Given that you yourself found omissions in Bourbaki, maybe all maths _is_ wrong :-)</p>",
        "id": 176749743,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1569593772
    },
    {
        "content": "<p>Of course François heard about this on Twitter. Did you put links to your blog post there?</p>",
        "id": 176749827,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1569593838
    },
    {
        "content": "<p>Yes.</p>",
        "id": 176750354,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1569594220
    },
    {
        "content": "<p>I think reporters generally run with quotes they think they need to drive views.   Being very measured in responses just means no news.</p>",
        "id": 176771067,
        "sender_full_name": "Joe Hendrix",
        "timestamp": 1569607946
    },
    {
        "content": "<p>My phone showed me this today <a href=\"https://www.popularmechanics.com/science/math/a29252622/is-math-wrong/\" target=\"_blank\" title=\"https://www.popularmechanics.com/science/math/a29252622/is-math-wrong/\">https://www.popularmechanics.com/science/math/a29252622/is-math-wrong/</a></p>",
        "id": 176791616,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1569623793
    },
    {
        "content": "<p>Good to see it mentions Lean!</p>",
        "id": 176824712,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1569674395
    },
    {
        "content": "<p>I guess my interest in proof checking stems from a very different thing, where we have a general proof that something is (unprovable? -- i dont want to say false), but in special cases can be proven true, the general cases tend to throw shade on the special case, and the special case tends to require a lot of setup... It's probably best if I just give an example...</p>\n<p>like the idea that nand has no inverse and loses information, but in the case where nand is the partial application of a reversible universal logic gate like a fredkin gate, or a toffoli gate the complete gate has an inverse.  I like proof checkers for their ability to convey all these special assumptions, when trying to convey a counterintuitive truth ... This is somewhat the dual of Kevin's what if its false when we think it true I guess.</p>",
        "id": 176831013,
        "sender_full_name": "matt rice",
        "timestamp": 1569685943
    },
    {
        "content": "<p>kevin just hit # 1 on hacker news: <a href=\"https://news.ycombinator.com/item?id=21107706\" target=\"_blank\" title=\"https://news.ycombinator.com/item?id=21107706\">https://news.ycombinator.com/item?id=21107706</a></p>",
        "id": 176879121,
        "sender_full_name": "Jesse Michael Han",
        "timestamp": 1569776607
    },
    {
        "content": "<p>Amazing what a clickbait headline can do!</p>",
        "id": 176888300,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1569791838
    },
    {
        "content": "<p>TPIL is <a href=\"https://github.com/leanprover-community/mathlib/issues/12\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/issues/12\">#12</a>! That's a <em>good thing</em>.</p>",
        "id": 176888309,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1569791872
    },
    {
        "content": "<p>What I am manifestly relieved about is that most people actually seem to be completely avoiding saying \"this guy is clearly an idiot, clearly all published maths is not wrong\". It's like today's kids are somehow immune to the clickbait, or forget it instantly or something.</p>",
        "id": 176888532,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1569792238
    },
    {
        "content": "<p>Oh! Because of hacker news rules, apparently they changed the headline from the clickbaity one to \"Number theorist fears many proofs widely considered to be true are wrong \". That's closer to the truth, but perhaps \"some proofs\" would be better.</p>",
        "id": 176888997,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1569793058
    },
    {
        "content": "<p>The whole thing is great. People are talking about Lean, people are talking about theorem provers, this is just what we need to get young people interested in the area.</p>",
        "id": 176889193,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1569793432
    },
    {
        "content": "<p>This comment from Hacker News is quite a marvel:</p>\n<blockquote>\n<p>IMO the final paper had too much technical jargon which was convoluting some simple concepts.</p>\n<p>This is symptomatic of IMHO the biggest single problem with the world of mathematics today. This discipline should be about developing ideas based on rigorous foundations and logic, which is a useful and important purpose. Once you have understood those ideas, even \"advanced\" results often seem quite simple and intuitive, and we can take that understanding and apply it to other work if helps us to make useful progress. However, the amount of needlessly obscure terminology, poor notation and just plain bad writing in formal papers make the whole field absurdly inaccessible, even to many who might have no trouble understanding the underlying concepts and important results.</p>\n<p>Just imagine what would happen if we tried to write engineering specs or software the way postgraduate mathematics research is done. We'd be trying to debug source code where every identifier was a single character, taken from one of three or four different alphabets, with several of them looking similar enough to mistake one for another, with a bunch of combining accent modifiers on top that were used to fundamentally change the semantics of the program, interspersed with comments by someone who needs a remedial class in basic writing skills, full of technical terminology that is defined in terms of other technical terminology from other software packages, except that sometimes the meaning is subtly different in this context but that isn't noted anywhere on the screen at the time, resulting in needing to spend half an hour doing a depth-first-search of all the definitions only to find that a function whose only identifier is the name of the developer who wrote the second version (because the first person to work on it already has another function bearing their name) is actually equivalent to what a programmer would write as</p>\n<div class=\"codehilite\"><pre><span></span>const DAYS_IN_WEEK := 7\n</pre></div>\n\n\n<p>I write this as someone who studied mathematics to a high level and has touched on the field many times since in connection with heavily mathematical software development. It's the worst sort of closed-world gate-keeping, and we could do so much better, but sadly inertia and vested interests are not our friends in this matter.</p>\n</blockquote>\n<p><a href=\"https://news.ycombinator.com/item?id=21109440\" target=\"_blank\" title=\"https://news.ycombinator.com/item?id=21109440\">https://news.ycombinator.com/item?id=21109440</a></p>",
        "id": 176915006,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1569834839
    },
    {
        "content": "<p>Mathematica won in the computer algebra field for a simple reason. It had the best documentation. The learning curve for any computer algebra system is quite steep and all of the other systems relied on \"learn by trial\".</p>\n<p>Now look at Lean. Take, for example, group.lean. It is a wall of text. Finding a theorem relies on odd names like mul_eq_of_eq_inv_mul. The whole of the \"communication\" with people, such as it is, is contained in that name. Programmers made the mistake of this \"pile of sane\" (POS) approach, witness the \"src\", \"inc\", \"tst\", and (usually empty) \"doc\" directories with \"semantic naming\" like parser.c, <a href=\"http://SMTFuns.pl\" target=\"_blank\" title=\"http://SMTFuns.pl\">SMTFuns.pl</a>, or <a href=\"http://catsim.ml\" target=\"_blank\" title=\"http://catsim.ml\">catsim.ml</a>.</p>\n<p>Suppose, instead, there was a group theory textbook in latex. The textbook explains the ideas in natural language. It contains all of the lemmas in group.lean, each  one with a paragraph or so of explanation. The lemmas are in named \"chunks\", basically a verbatim block with a name. Lemmas should only be accepted when they contain a paragraph or section in the group theory volume.</p>\n<p>Now you have a book, with a table of contents, a table of equations, chapters, sections, paragraphs, an index, and a bibliography, all hyperlinked and searchable. Since each lemma is in a named verbatim chunk you can extract any or all lemmas automatically, letting the compiler do it. You can find relevant lemmas by looking in the table of contents or the index.</p>\n<p>Code to extract a named chunk is 170 lines of C. Axiom already uses this technology.</p>\n<p>The idea is called \"literate programming\" (Knuth). You write for people, and incidently, write for the machine. And, as a benefit, you get a book to publish, which counts on your resume rather than a file of code that doesn't.</p>",
        "id": 176921499,
        "sender_full_name": "Tim Daly",
        "timestamp": 1569841102
    },
    {
        "content": "<p>\"pile of sand\" (POS) ...</p>",
        "id": 176921615,
        "sender_full_name": "Tim Daly",
        "timestamp": 1569841217
    },
    {
        "content": "<p>I'm quite happy that 20 pesky little trivial lemmas all fit on one screen. If all of those trivialities came with a paragraph of documentation, I think it would be harder to find something for me.</p>",
        "id": 176921672,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1569841271
    },
    {
        "content": "<p>Mathlib is currently in the process of documenting definitions and major theorems</p>",
        "id": 176921691,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1569841299
    },
    {
        "content": "<p>How long have you been using Lean?</p>",
        "id": 176921699,
        "sender_full_name": "Tim Daly",
        "timestamp": 1569841313
    },
    {
        "content": "<p>But I think one can go overboard on the other side</p>",
        "id": 176921701,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1569841315
    },
    {
        "content": "<p>There was a time when I had not yet used Lean for a very long time...</p>",
        "id": 176921749,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1569841335
    },
    {
        "content": "<p>Documentation is important. But it's not the reason why mathematicians aren't jumping on board. It simply isn't</p>",
        "id": 176921777,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1569841380
    },
    {
        "content": "<p>It took me 10 courses and 3 years to be able to read current research papers, many of which contain whole pages of nothing but greek rules.</p>",
        "id": 176921793,
        "sender_full_name": "Tim Daly",
        "timestamp": 1569841399
    },
    {
        "content": "<p>And if I ask the mathematician in the office next to me why he doesn't use Lean, he'll ask me... do you have the K-theory of coherent sheaves on a scheme?</p>",
        "id": 176921869,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1569841447
    },
    {
        "content": "<p>If I ask someone on the floor below me, they'll want to know if special holonomy groups are in our library...</p>",
        "id": 176921889,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1569841484
    },
    {
        "content": "<p>Etc...</p>",
        "id": 176921892,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1569841486
    },
    {
        "content": "<p>I'm one of the authors of Axiom. Axiom was a commercial competitor to Mathematca and Maple. It was considered \"one of the big 3\". I got a lot of feedback from professors who taught using computer algebra, including those who contributed to Axiom. Documentation mattered for teaching and students kept using what they knew.</p>",
        "id": 176921925,
        "sender_full_name": "Tim Daly",
        "timestamp": 1569841525
    },
    {
        "content": "<p>That's the main obstruction. The fact that we don't have étale cohomology groups, or even just the discriminant of a number field, or whatever.</p>",
        "id": 176921960,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1569841537
    },
    {
        "content": "<p>Take a calc textbook. Shake out all of the equations and paste them on index cards. Throw away the words. Now teach calculus from the index cards. The group.lean file is \"just the equations\", i.e. just the index cards. If all of mathematics were reduced to a wall of 200-character named lemmas I'm not sure it would get much use.</p>",
        "id": 176922131,
        "sender_full_name": "Tim Daly",
        "timestamp": 1569841702
    },
    {
        "content": "<p>I don't know who's right. My experience talking to mathematicians is the same as Johan -- they're not interested because the things they do aren't there. However in 5 years' time when they <em>are</em> there, documentation will most definitely be an issue. Whether it contributes now or not is something I don't know. I am trying to write documentation for maths undergraduates, but progress is slow because I have a busy job :-/</p>",
        "id": 176922240,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1569841837
    },
    {
        "content": "<p>I can read group.lean because I've done group theory for years. I have no idea what the other lemmas mean or how to use them.</p>",
        "id": 176922262,
        "sender_full_name": "Tim Daly",
        "timestamp": 1569841866
    },
    {
        "content": "<p>Take an introductory textbook on group theory. Shake out all the theorems and lemmas and paste them on index cards. Throw away all the words. Now try to find a corresponding entry for each index card in <code>group.lean</code>. For &gt;50% of the index cards, you won't find an entry. On the other hand, for 90% of the lines in <code>group.lean</code>, you won't find an index card...</p>",
        "id": 176922281,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1569841883
    },
    {
        "content": "<p>I'm suggesting that the \"library\" format for lean is books, not files. Of course the group theory \"book\" would be written to hold the current lemmas surrounded by paragraphs (useful for word searching). New lemmas would update the book. I'm not suggesting \"decorating\" an existing group theory book with the lemmas.</p>",
        "id": 176922399,
        "sender_full_name": "Tim Daly",
        "timestamp": 1569842013
    },
    {
        "content": "<p>Latex was written in lterate programming style in the 70s and is still maintained, mostly because you can read and understand it. Almost every program I've written in the last half century is gone, despite being quite useful for current things, such a remotely monitoring data centers.</p>",
        "id": 176922570,
        "sender_full_name": "Tim Daly",
        "timestamp": 1569842171
    },
    {
        "content": "<p>If only Knuth were to write an ITP...</p>",
        "id": 176922582,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1569842217
    },
    {
        "content": "<p>Or a text that explains BDDs for solvers :-)</p>",
        "id": 176922613,
        "sender_full_name": "Tim Daly",
        "timestamp": 1569842261
    },
    {
        "content": "<p>Tim, how is Lean different from Coq, Isabelle, whatever? Why are there more pure mathematicians in this small and young community than in the others?</p>",
        "id": 176922689,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1569842312
    },
    {
        "content": "<p>The documentation problem isn't a problem now. It shows up as a problem once the origianl authors leave the project. Witness the tens of thousands of dead projects on github, sourceforge, and savannah.</p>",
        "id": 176922740,
        "sender_full_name": "Tim Daly",
        "timestamp": 1569842335
    },
    {
        "content": "<p>Well, Benjamin Pierce taught COQ courses in Oregon, which is where I started learning it. And he has a textbook which I can use.</p>",
        "id": 176922804,
        "sender_full_name": "Tim Daly",
        "timestamp": 1569842403
    },
    {
        "content": "<p>Many math papers and textbooks are \"dead\" in that sense. Also, it doesn't answer my question.</p>",
        "id": 176922833,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1569842420
    },
    {
        "content": "<p>The average math paper from &lt;1950s is unreadable for us.</p>",
        "id": 176922850,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1569842443
    },
    {
        "content": "<p>Yeah, I struggled with Frege's papers due to notation</p>",
        "id": 176922858,
        "sender_full_name": "Tim Daly",
        "timestamp": 1569842465
    },
    {
        "content": "<p>One clear problem is that probably 5% to at most 10% (just a guess, an authority can jump in if they please) of the lemmas in <code>mathlib</code> are actually even stated in a mathematics book. At the very least, in mathlib proofs of important and hard, \"real\", propositions and theorems are often chopped up in order to remain manageable. I think just the act of <em>stating</em> many of the broken-up pieces as they are phrased in lean would be totally unbearable to read in a mathematics book. Imagine, for example, such a direct translation of <a href=\"https://github.com/leanprover-community/mathlib/blob/master/src/group_theory/sylow.lean\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/blob/master/src/group_theory/sylow.lean\">https://github.com/leanprover-community/mathlib/blob/master/src/group_theory/sylow.lean</a><br>\nSo much is \"obvious\". That's not even to say it's not worth checking---it just stands in the way of understanding.</p>",
        "id": 176922918,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1569842542
    },
    {
        "content": "<p>But then I've struggled with recent papers for the same reason (look up Guy Steele's talk on logic notation)</p>",
        "id": 176922926,
        "sender_full_name": "Tim Daly",
        "timestamp": 1569842560
    },
    {
        "content": "<p>Keeley, lemmas are where proofs get creative. A few words about why it is needed gives a clue but a few lines of Lean does not.</p>",
        "id": 176923014,
        "sender_full_name": "Tim Daly",
        "timestamp": 1569842663
    },
    {
        "content": "<p>Tim, that's simply not true</p>",
        "id": 176923024,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1569842682
    },
    {
        "content": "<p>There are dozens of lemmas in the library that are exactly the opposite of being creative</p>",
        "id": 176923042,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1569842708
    },
    {
        "content": "<p>They are there only to handhold the system</p>",
        "id": 176923047,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1569842719
    },
    {
        "content": "<p>I think you mean \"thousands\"</p>",
        "id": 176923051,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1569842725
    },
    {
        "content": "<p>Usually, page of code after a new definition is just scaffolding. Stuff that mathematicians don't even unconsciously think about when writing a detailed introductory text.</p>",
        "id": 176923134,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1569842799
    },
    {
        "content": "<p>I would say not that they are handholding for the system, rather they are there to bring the system up to a basic level of competence, so that you don't have to worry about extremely piddling details for your <em>next</em> project</p>",
        "id": 176923142,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1569842807
    },
    {
        "content": "<p>Right, that's a better way of putting it</p>",
        "id": 176923146,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1569842821
    },
    {
        "content": "<p>Well, it will then grow into the millions if Kevin Buzzard's dream comes true.</p>",
        "id": 176923149,
        "sender_full_name": "Tim Daly",
        "timestamp": 1569842823
    },
    {
        "content": "<p>\"mathlib does the piddling details so you don't have to\"</p>",
        "id": 176923154,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1569842827
    },
    {
        "content": "<p><code>group.lean</code> is not group theory. It is basic highschool algebra</p>",
        "id": 176923182,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1569842880
    },
    {
        "content": "<p>nothing in that file has a name in math</p>",
        "id": 176923228,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1569842902
    },
    {
        "content": "<p>it is not representative of all of math</p>",
        "id": 176923237,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1569842929
    },
    {
        "content": "<p>Does it have an \"idea\" in math? And is that \"idea\" properly communicated in 16 characters?</p>",
        "id": 176923258,
        "sender_full_name": "Tim Daly",
        "timestamp": 1569842960
    },
    {
        "content": "<p>although coming from a CAS background you might become disproportionately interested in that material</p>",
        "id": 176923270,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1569842977
    },
    {
        "content": "<p>but mathematicians are looking much further afield</p>",
        "id": 176923302,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1569843002
    },
    {
        "content": "<p>no, it does not have an \"idea\"</p>",
        "id": 176923347,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1569843022
    },
    {
        "content": "<p>its meaning is completely described by the statement of the theorem itself</p>",
        "id": 176923360,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1569843037
    },
    {
        "content": "<p><code>a * (a^-1 * b) = b</code> is just that</p>",
        "id": 176923374,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1569843056
    },
    {
        "content": "<p>you can give the property a name if you want, but it's just a thing that is true</p>",
        "id": 176923392,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1569843077
    },
    {
        "content": "<p>but even if it does grow to millions, most of those lemmas wouldn't benefit much from extensive documentation. <br>\ni suppose the normal workflow is the following: you encounter a technical issue in one of your proofs that is intuitively obvious but would be bothersome to prove. you use library_search or some other lemma search tool to resolve the technicality, and then go on with your proof.<br>\nthere's really not much beyond the lemma type that matters.</p>",
        "id": 176923402,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1569843089
    },
    {
        "content": "<p>I'm just trying to suggest that there might be methods for the Lean project to survive once the original authors leave. 10,000 lemmas in flat files like group.lean is completely unmaintainable.</p>",
        "id": 176923408,
        "sender_full_name": "Tim Daly",
        "timestamp": 1569843100
    },
    {
        "content": "<p>again, <code>group.lean</code> is not representative</p>",
        "id": 176923469,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1569843126
    },
    {
        "content": "<p>look around</p>",
        "id": 176923473,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1569843128
    },
    {
        "content": "<p>documentation is much more important in places where it's not bleeding obvious why the theorem is true</p>",
        "id": 176923494,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1569843176
    },
    {
        "content": "<p>Are you suggesting that there ARE books in Lean?</p>",
        "id": 176923501,
        "sender_full_name": "Tim Daly",
        "timestamp": 1569843184
    },
    {
        "content": "<p>TPIL?</p>",
        "id": 176923506,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1569843191
    },
    {
        "content": "<p>I'm reading that.</p>",
        "id": 176923532,
        "sender_full_name": "Tim Daly",
        "timestamp": 1569843218
    },
    {
        "content": "<p>Ah, well. I'm done.</p>",
        "id": 176923610,
        "sender_full_name": "Tim Daly",
        "timestamp": 1569843272
    },
    {
        "content": "<p>I have heard a lot of praise for that book, specifically as it relates to documentation making it easy to get into lean</p>",
        "id": 176923642,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1569843301
    },
    {
        "content": "<p>I think we are all aware of the importance of documentation, and there is a push for more high level documentation in mathlib</p>",
        "id": 176923672,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1569843347
    },
    {
        "content": "<p>Tim, I am sincerely interested in your thoughts on why there are disproportionately many pure mathematicians in the Lean community compared to other prover-communities. Even though Lean is the youngest of them all.</p>",
        "id": 176923729,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1569843371
    },
    {
        "content": "<p>I'm in \"the lean community\" because Jeremy Avigad taught a class, so I know how to use it. I want to use it underneath Axiom as my proof engine and Jeremy has been most helpful with that. Without Jeremy's help I probably couldn't even read the group.lean file.</p>",
        "id": 176923909,
        "sender_full_name": "Tim Daly",
        "timestamp": 1569843546
    },
    {
        "content": "<p>Axiom has over 10,000 functions and 1100 \"typeclasses\". I fully understand how hard it is to maintain the mathematics, the compiler, and the interpreter. Why when I open-sourced Axiom, it had about 3 useful comments in total. Who would possibly need more?</p>",
        "id": 176924057,
        "sender_full_name": "Tim Daly",
        "timestamp": 1569843697
    },
    {
        "content": "<p>Who doesn't understand Risch integration with radical field extensions? Why bother to even include a reference to a paper?</p>",
        "id": 176924169,
        "sender_full_name": "Tim Daly",
        "timestamp": 1569843788
    },
    {
        "content": "<p>Lean is following the same path Axiom took. I'm trying to suggest ideas that keep it from becoming an open source project maintained by one person and used by 4 on odd months.</p>",
        "id": 176924259,
        "sender_full_name": "Tim Daly",
        "timestamp": 1569843879
    },
    {
        "content": "<p>Axiom was developed at IBM Research, contains the results of many PhD theses, costs an extimated 42 million dollars to develop, and involved mathematicians worldwide.</p>",
        "id": 176924397,
        "sender_full_name": "Tim Daly",
        "timestamp": 1569844064
    },
    {
        "content": "<p>You can have a look at more recent files, where we are precisely trying to enforce more documentation, but at places where it is useful -- i.e., there are nonobvious definitions or design decisions. For instance <a href=\"https://github.com/leanprover-community/mathlib/blob/master/src/geometry/manifold/manifold.lean\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/blob/master/src/geometry/manifold/manifold.lean\">https://github.com/leanprover-community/mathlib/blob/master/src/geometry/manifold/manifold.lean</a>, that I wrote recently and for which the more than 100 comments in the PRs made me vastly improve the documentation. Does it correspond to what you are looking for, or how would you envision things for better documentation?</p>",
        "id": 176924525,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1569844192
    },
    {
        "content": "<p>The key question is, what discipline is required in development so that when Lean has 100,000 lemmas, 5,000 theorems, and dozens of fields of mathematics, it can still be maintained by people who have no idea what a homology is.</p>",
        "id": 176924594,
        "sender_full_name": "Tim Daly",
        "timestamp": 1569844244
    },
    {
        "content": "<p>No. That is not the key question.</p>",
        "id": 176924670,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1569844323
    },
    {
        "content": "<p>The key question is: why are pure mathematicians not using ITPs on a large scale right now?</p>",
        "id": 176924681,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1569844344
    },
    {
        "content": "<p>Sebastien, I'm quite fond of literate programming. We all understand books, how to write them, how to navigate them, how to orgainzie them, and how to index them. It is trivial to extract code from a latex document.</p>",
        "id": 176924685,
        "sender_full_name": "Tim Daly",
        "timestamp": 1569844356
    },
    {
        "content": "<p>Johan, that's where we differ. Axiom's motto is \"The 30 Year Horizon\". I'm looking at what Axiom needs to be in 30 years, say as a trusted computational oracle for proof systems. You're looking at enlarging the community this month. So we're talking about different objectives.</p>",
        "id": 176924782,
        "sender_full_name": "Tim Daly",
        "timestamp": 1569844479
    },
    {
        "content": "<p>Johan didn't say Lean, he said ITPs</p>",
        "id": 176924816,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1569844525
    },
    {
        "content": "<p>what is it that the ITP community lacks right now that is preventing world domination?</p>",
        "id": 176924835,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1569844550
    },
    {
        "content": "<p>If you were given Lean and everyone else left, could you maintain it and extend it? The C++ code is quite clever.</p>",
        "id": 176924836,
        "sender_full_name": "Tim Daly",
        "timestamp": 1569844552
    },
    {
        "content": "<p>If I were given all maths textbooks in the world, and everyone left... all I could do was sit on top of them...</p>",
        "id": 176924905,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1569844580
    },
    {
        "content": "<p>Tim, that kind of happened with lean 3</p>",
        "id": 176924916,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1569844605
    },
    {
        "content": "<p>Tim, I never said \"this month\". But I do know that (i) we are moving towards 30 years later one month at a time, and (ii) it takes more than documentation of trivialities to get mathematicians interested.</p>",
        "id": 176924958,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1569844657
    },
    {
        "content": "<p>Why do you think I started using Lean, and why am I still using it? Because of superb documentation?</p>",
        "id": 176924974,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1569844677
    },
    {
        "content": "<p>Someone working in Cubical Type Theory isn't going to find much support. And since academic promotions never measure code output (withness William Stein) there is no upside to writing Lean theories.</p>",
        "id": 176925039,
        "sender_full_name": "Tim Daly",
        "timestamp": 1569844719
    },
    {
        "content": "<p>Books, however, count.</p>",
        "id": 176925184,
        "sender_full_name": "Tim Daly",
        "timestamp": 1569844838
    },
    {
        "content": "<p>It depends...</p>",
        "id": 176925195,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1569844851
    },
    {
        "content": "<p>... on the contents.</p>",
        "id": 176925199,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1569844858
    },
    {
        "content": "<p>there you've stumbled on one part of our plan for world domination - first fix the financial incentives by making mathematicians care about computers and formal mathematics</p>",
        "id": 176925232,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1569844896
    },
    {
        "content": "<p>once it becomes sufficiently relevant it won't be career suicide anymore</p>",
        "id": 176925309,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1569844946
    },
    {
        "content": "<p>I worked with Gilbert Baumslag, the leader of the field of Infinite Group Theory. He wrote 125 papers on the subject. I open-sourced Magnus, which automates Infinite Group Theory calculations. I THINK there were 3 users.</p>",
        "id": 176925416,
        "sender_full_name": "Tim Daly",
        "timestamp": 1569845055
    },
    {
        "content": "<p>Convincing mathematicans to use computers (the source of all frustration) is like convincing cats to use the internet. You can barely get them to do a google search as it takes time away from their next paper.</p>",
        "id": 176925472,
        "sender_full_name": "Tim Daly",
        "timestamp": 1569845155
    },
    {
        "content": "<p>I feel it is like the transition from the 19th to the 20th century. 19th century mathematicians resisted the idea of proofs. 20th century mathematicians resist the idea of ITP. Progress in science is measured one funeral at a time.-- Max Planck. So design your system for the 30 year horizon so it is possible to maintain it by non-authors and non-experts.</p>",
        "id": 176925664,
        "sender_full_name": "Tim Daly",
        "timestamp": 1569845377
    },
    {
        "content": "<p>If you want ITP mathematicians you have to grow them. So you need courses. You need documentation. You need degrees which recognize programs as well as papers and books. Current mathematicians are successfully set in their ways and they know where credit lies.</p>",
        "id": 176925893,
        "sender_full_name": "Tim Daly",
        "timestamp": 1569845629
    },
    {
        "content": "<p>Why do you want to use Lean as backend for Axiom? Wouldn't metamath be a lot better for your use case?</p>",
        "id": 176925898,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1569845636
    },
    {
        "content": "<p>It is extremely small, fast, and very flexible in its foundations</p>",
        "id": 176925957,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1569845655
    },
    {
        "content": "<p>The checker is so small that if you write 3000 lines of comments, you will have a paragraph per line of code.</p>",
        "id": 176925993,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1569845691
    },
    {
        "content": "<p>I'm looking at several systems (COQ, AGDA, IDRIS, HOL, ISABELLE). HOL88 is interesting because it is implemented in Common Lisp and I can embed it in Axiom directly (which is also Common Lisp). Lean is interesting in particular due to Jeremy Avigad. I used it a bit and now I'm trying to communicate between it and the compiler. Axiom is typed everywhere, at every level, and is dependently typed so I need a robust system.</p>",
        "id": 176926151,
        "sender_full_name": "Tim Daly",
        "timestamp": 1569845859
    },
    {
        "content": "<p>As a mathematician, why aren't you using Axiom?</p>",
        "id": 176926221,
        "sender_full_name": "Tim Daly",
        "timestamp": 1569845909
    },
    {
        "content": "<p>FWIW I figure most people don't use ITPs because being formal is a chore. Nobody cares about Bourbaki, and nobody cares about convincing a computer they are correct. In that sense they are a solution in search of a problem. I think they will take off once we true believers formalize enough math and develop enough useful tactics that the software starts being a net gain in productivity as opposed to a 10x reduction.</p>",
        "id": 176926222,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1569845909
    },
    {
        "content": "<p>Andrew, I'm not sure how far tactics can carry you toward that goal. The undecidability issue is an issue. Axiom uses heuristics at runtime to resolve type questions that can't be computed at compile time. I expect to run into the same issue once I try to prove some of Axiom's algorithms correct. Also, tactics have to somehow be related to the specification language of the algorithms and I'm not sure what to think about that connection yet. It is still an \"open research question\" for me.</p>",
        "id": 176926425,
        "sender_full_name": "Tim Daly",
        "timestamp": 1569846106
    },
    {
        "content": "<p>Most Lean work isn't proving algorithms, of course, so I'm out in left field near the corn silo.</p>",
        "id": 176926554,
        "sender_full_name": "Tim Daly",
        "timestamp": 1569846221
    },
    {
        "content": "<p>Also, note that there is almost no person in common in the bibliographic references in ITP and Computer Algebra. James Davenport seems to be the only crossover I can name. There are 2 \"silos\" of computational mathematics and the computer algebra people I know can't read the logic literature.</p>",
        "id": 176926955,
        "sender_full_name": "Tim Daly",
        "timestamp": 1569846602
    },
    {
        "content": "<p>The Axiom Sane project (Sane is a synonum for rational, coherent, judicial, and sound) is trying to build a bridge between these two fields, merging computer algebra and theorem proving machinery.</p>",
        "id": 176927103,
        "sender_full_name": "Tim Daly",
        "timestamp": 1569846699
    },
    {
        "content": "<p>I see that Axiom wants to call Lean under the hood. Is it feasible that I could call Axiom from Lean and get a proof certificate for things that a CAS can do? For example, I would love to call out to a cylindrical alg decomp algorithm, or matrix decomposer alg, or symbolic integrator.</p>",
        "id": 176927403,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1569846903
    },
    {
        "content": "<p>I guess in these cases it's difficult since not only the result needs to be returned, but also the sequence of transformations that lead up to it</p>",
        "id": 176927540,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1569846987
    },
    {
        "content": "<p>Andrew, that's exactly the goal of the Axiom Sane project. Axiom should be a trusted oracle for computing algorithms. Libraries like complex numbers, computing primes, doing CAD, etc. are easy in Axiom but providing a trusted algorithm and a proof certificate is the center of the research question. The oracle response should provide the answer and a proof that the checker can check</p>",
        "id": 176927737,
        "sender_full_name": "Tim Daly",
        "timestamp": 1569847128
    },
    {
        "content": "<p>I can't imagine trying to encode the Risch integration algorithm in Lean. It requires too much algorithmic machinery, most of it at the PhD thesis level. But it already exists in Axiom.</p>",
        "id": 176927881,
        "sender_full_name": "Tim Daly",
        "timestamp": 1569847258
    },
    {
        "content": "<p>The idea of \"encoding all of mathematics\" doesn't seem to mention the computer algebra field. Certain algorithms (e.g. Buchberger's algorithm) seem to have been proven but the whole subject of Infinite Group Theory, which is mostly non-terminating procedures, doesn't seem to fit into the proof systems easily.</p>",
        "id": 176928813,
        "sender_full_name": "Tim Daly",
        "timestamp": 1569848035
    },
    {
        "content": "<p>I think that Andrew's suggestion is the more profitable angle here. Rather than attempt to have lean be a component of axiom, see if you can modify axiom to produce certificates of its results that can then be checked in a theorem prover like lean</p>",
        "id": 176930292,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1569849165
    },
    {
        "content": "<p>You could also just reimplement selected algorithms in lean</p>",
        "id": 176930339,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1569849224
    },
    {
        "content": "<p>The problem with treating Axiom as a black box is that you don't trust it, and the very purpose of the project seems to be to make it more trustworthy. The only way you can achieve that is either by whiteboxing the algorithm and proving it correct, or by having the algorithm validate any outputs it gives by producing proofs alongside.</p>",
        "id": 176930497,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1569849362
    },
    {
        "content": "<p>Indeed, the point is to prove the Axiom algorithms correct with respect to a specification.</p>",
        "id": 176932755,
        "sender_full_name": "Tim Daly",
        "timestamp": 1569850939
    },
    {
        "content": "<blockquote>\n<p>If you want ITP mathematicians you have to grow them. So you need courses. You need documentation. You need degrees which recognize programs as well as papers and books. Current mathematicians are successfully set in their ways and they know where credit lies.</p>\n</blockquote>\n<p>I am taking a risk in my job by not producing the standard research papers which I used to produce. My justification for this is that I am attempting to put courses together. But I won't be able to change our UG maths degree, other than by adding a pure Lean course to it (which I no doubt will try to do at some point). It will still just be one of many.</p>",
        "id": 176948160,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1569860497
    },
    {
        "content": "<p>But the lean course will exist, Kevin! :D</p>",
        "id": 177008968,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1569899475
    },
    {
        "content": "<p>Survey question: What is the biggest concern developers have about open source:</p>\n<p>Result: Perhaps the clearest finding from this question is that 46% of respondents indicated risk about how well packages will be maintained into the future is either a major or a moderate obstacle</p>\n<p><a href=\"https://thenewstack.io/what-is-the-biggest-concern-developers-have-about-open-source/\" target=\"_blank\" title=\"https://thenewstack.io/what-is-the-biggest-concern-developers-have-about-open-source/\">https://thenewstack.io/what-is-the-biggest-concern-developers-have-about-open-source/</a></p>",
        "id": 177068068,
        "sender_full_name": "Tim Daly",
        "timestamp": 1569944733
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span>  Speaking about Lean courses, have you finished docs for the incoming freshers / is it viewable by us? I'm a Warwick second year and am fairly interested in this stuff. I've spent the summer trying to learn it but it's all fairly impenetrable. Some docs for maths undergrads would be obviously very helpful. If they're not finished yet I'll just actually concentrate on my degree (for once ;))</p>",
        "id": 177068089,
        "sender_full_name": "Luca Seemungal",
        "timestamp": 1569944750
    },
    {
        "content": "<p>Jeremy Avigad used the Lean browser to organize his class. You might consider adding sections to the browser text and organize it by lecture.</p>",
        "id": 177069941,
        "sender_full_name": "Tim Daly",
        "timestamp": 1569945867
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"221895\">@Luca Seemungal</span>  Hmm, there are many things which are half-finished, including my preparation for my lectures this week, which have to take priority right now. But we're getting there.</p>",
        "id": 177078189,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1569951071
    },
    {
        "content": "<p>Not about Lean specifically, but this event looks interesting: <a href=\"https://www.helixcenter.org/roundtables/mechanization-of-math/\" target=\"_blank\" title=\"https://www.helixcenter.org/roundtables/mechanization-of-math/\">https://www.helixcenter.org/roundtables/mechanization-of-math/</a></p>",
        "id": 177395576,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1570245753
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> you should leave a comment pointing to your Fermat blog post there.</p>",
        "id": 177406478,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1570267715
    },
    {
        "content": "<p>rofl I just tried, and it was rejected as spam ;-)</p>",
        "id": 177426136,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1570300850
    },
    {
        "content": "<p>Internet is so wonderful...</p>",
        "id": 177426767,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1570301823
    },
    {
        "content": "<p>There is an interesting talk by John Seale (of the Chinese Room fame), that is related to the question of \"machine checked proofs\".<br>\nI suggest you take careful notes of the definitions he uses in the first 5 minutes as the whole talk rests on them.<br>\n<a href=\"https://www.youtube.com/watch?v=rHKwIYsPXLg\" target=\"_blank\" title=\"https://www.youtube.com/watch?v=rHKwIYsPXLg\">https://www.youtube.com/watch?v=rHKwIYsPXLg</a></p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"rHKwIYsPXLg\" href=\"https://www.youtube.com/watch?v=rHKwIYsPXLg\" target=\"_blank\" title=\"https://www.youtube.com/watch?v=rHKwIYsPXLg\"><img src=\"https://i.ytimg.com/vi/rHKwIYsPXLg/default.jpg\"></a></div>",
        "id": 177448457,
        "sender_full_name": "Tim Daly",
        "timestamp": 1570345184
    },
    {
        "content": "<p>I watched 23 minutes but I hesitate to continue. Is there any moment when he does something else than repeating: \"let's laugh together at how stupid are people who disagree with me\" and \"the computer is not intelligent because it has zero intelligence\"?</p>",
        "id": 177453914,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1570355387
    },
    {
        "content": "<p>I don't say I disagree, but I was hoping for arguments instead of authoritarian assertions and jokes.</p>",
        "id": 177453978,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1570355503
    },
    {
        "content": "<p>He gives an argument, although I don't particularly buy it</p>",
        "id": 177454407,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1570356317
    },
    {
        "content": "<p>Tim is right though - his argument hinges on a linguistic matter between two senses for what is meant by intelligent</p>",
        "id": 177454454,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1570356398
    },
    {
        "content": "<p>it's not all about the chinese room</p>",
        "id": 177454467,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1570356454
    },
    {
        "content": "<p>Not sure if this really counts as \"in the wild\", but I just saw <a href=\"https://twitter.com/Jose_A_Alonso/status/1187004186027839490\" target=\"_blank\" title=\"https://twitter.com/Jose_A_Alonso/status/1187004186027839490\">a link on twitter</a> to a nice-looking PDF titled <a href=\"https://github.com/blanchette/logical_verification_2019/raw/master/logical_verification_in_lean.pdf\" target=\"_blank\" title=\"https://github.com/blanchette/logical_verification_2019/raw/master/logical_verification_in_lean.pdf\">\"Logical Verification in Lean\"</a> by <span class=\"user-mention\" data-user-id=\"129120\">@Alexander Bentkamp</span>, <span class=\"user-mention\" data-user-id=\"121058\">@Jasmin Blanchette</span> and <span class=\"user-mention\" data-user-id=\"110294\">@Johannes Hölzl</span>.  It looks like it's for the course <a href=\"https://lean-forward.github.io/logical-verification/2019/\" target=\"_blank\" title=\"https://lean-forward.github.io/logical-verification/2019/\">\"Logical Verification\"</a> by <span class=\"user-mention\" data-user-id=\"121058\">@Jasmin Blanchette</span> and <span class=\"user-mention\" data-user-id=\"129120\">@Alexander Bentkamp</span>. I'm looking forward to reading it!</p>\n<div class=\"inline-preview-twitter\"><div class=\"twitter-tweet\"><a href=\"https://twitter.com/Jose_A_Alonso/status/1187004186027839490\" target=\"_blank\"><img class=\"twitter-avatar\" src=\"https://pbs.twimg.com/profile_images/2609449263/vmq3lkuceoz054nl3u4u_normal.jpeg\"></a><p>Logical verification in Lean. ~ A. Bentkamp, J. Blanchette, J. Hölzl. <a href=\"https://t.co/Fp5UqbQI0m\" target=\"_blank\" title=\"https://t.co/Fp5UqbQI0m\">https://github.com/blanchette/logical_verification_2019/raw/master/logical_verification_in_lean.pdf</a> #eBook #ITP #LeanProver #Logic #FunctionalProgramming</p><span>- José A. Alonso (@Jose_A_Alonso)</span></div></div>",
        "id": 178865474,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1571844617
    },
    {
        "content": "<p>It still amuses me that computer scientists are quite happy to have entire chapters on metaprogramming and monads before the section on \"adding two numbers\" :D</p>",
        "id": 178865952,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1571844941
    },
    {
        "content": "<p><a href=\"http://chalkdustmagazine.com/features/can-computers-prove-theorems/\" target=\"_blank\" title=\"http://chalkdustmagazine.com/features/can-computers-prove-theorems/\">http://chalkdustmagazine.com/features/can-computers-prove-theorems/</a></p>",
        "id": 178930855,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1571905658
    },
    {
        "content": "<p>\"it's not hard to get Lean running on a computer\" <span aria-label=\"joy\" class=\"emoji emoji-1f602\" role=\"img\" title=\"joy\">:joy:</span><span aria-label=\"joy\" class=\"emoji emoji-1f602\" role=\"img\" title=\"joy\">:joy:</span></p>",
        "id": 178931607,
        "sender_full_name": "Luca Seemungal",
        "timestamp": 1571906371
    },
    {
        "content": "<p>So where is the scorpion section in mathlib? <a href=\"https://i0.wp.com/chalkdustmagazine.com/wp-content/uploads/2019/10/level.jpg\" target=\"_blank\" title=\"https://i0.wp.com/chalkdustmagazine.com/wp-content/uploads/2019/10/level.jpg\">https://i0.wp.com/chalkdustmagazine.com/wp-content/uploads/2019/10/level.jpg</a></p>\n<div class=\"message_inline_image\"><a href=\"https://i0.wp.com/chalkdustmagazine.com/wp-content/uploads/2019/10/level.jpg\" target=\"_blank\" title=\"https://i0.wp.com/chalkdustmagazine.com/wp-content/uploads/2019/10/level.jpg\"><img src=\"https://i0.wp.com/chalkdustmagazine.com/wp-content/uploads/2019/10/level.jpg\"></a></div>",
        "id": 178941779,
        "sender_full_name": "Jason Rute",
        "timestamp": 1571916038
    },
    {
        "content": "<p>Yeah what the heck is that scorpion thing about?? The UCL people did the graphics, I don't know what they were thinking there.</p>",
        "id": 178943690,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1571917815
    },
    {
        "content": "<p>But addition and multiplication world are here: <a href=\"http://wwwf.imperial.ac.uk/~buzzard/xena/natural_number_game/\" target=\"_blank\" title=\"http://wwwf.imperial.ac.uk/~buzzard/xena/natural_number_game/\">http://wwwf.imperial.ac.uk/~buzzard/xena/natural_number_game/</a></p>",
        "id": 178943736,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1571917855
    },
    {
        "content": "<p>Lol, it's a nice easter egg, right?</p>",
        "id": 178944218,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1571918312
    },
    {
        "content": "<p>I mean, it really fits in the theme</p>",
        "id": 178944219,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1571918312
    },
    {
        "content": "<p>Guess who modeled for the second charachter in this pic: <a href=\"https://i2.wp.com/chalkdustmagazine.com/wp-content/uploads/2019/10/lean-e1571862471361.jpg?resize=670%2C300\" target=\"_blank\" title=\"https://i2.wp.com/chalkdustmagazine.com/wp-content/uploads/2019/10/lean-e1571862471361.jpg?resize=670%2C300\">https://i2.wp.com/chalkdustmagazine.com/wp-content/uploads/2019/10/lean-e1571862471361.jpg?resize=670%2C300</a></p>\n<div class=\"message_inline_image\"><a href=\"https://i2.wp.com/chalkdustmagazine.com/wp-content/uploads/2019/10/lean-e1571862471361.jpg?resize=670%2C300\" target=\"_blank\" title=\"https://i2.wp.com/chalkdustmagazine.com/wp-content/uploads/2019/10/lean-e1571862471361.jpg?resize=670%2C300\"><img src=\"https://i2.wp.com/chalkdustmagazine.com/wp-content/uploads/2019/10/lean-e1571862471361.jpg?resize=670%2C300\"></a></div>",
        "id": 178944289,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1571918392
    },
    {
        "content": "<p>It's the launch party of the mag this evening and I'm wearing a pair of trousers which are as close as possible to those depicted</p>",
        "id": 178945499,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1571919494
    },
    {
        "content": "<p>They never told me they were going to do all this crazy graphics, I only found out a couple of weeks ago and I wrote the article months ago. And I didn't even <em>notice</em> what Johan is pointing out!</p>",
        "id": 178945523,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1571919534
    },
    {
        "content": "<p>I showed it to my daughter and she said \"oh wow Dad that's you!\" and I'm like \"is it??\"</p>",
        "id": 178945550,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1571919553
    },
    {
        "content": "<p>Too bad that Zulip doesn't have a \"crazy trousers\" emoji....</p>",
        "id": 178945591,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1571919577
    },
    {
        "content": "<blockquote>\n<p>Too bad that Zulip doesn't have a \"crazy trousers\" emoji....</p>\n</blockquote>\n<p>... I was about to do so, but I do not have the permissions :( <a href=\"https://zulipchat.com/help/add-custom-emoji\" target=\"_blank\" title=\"https://zulipchat.com/help/add-custom-emoji\">https://zulipchat.com/help/add-custom-emoji</a></p>",
        "id": 178945967,
        "sender_full_name": "Kevin Kappelmann",
        "timestamp": 1571919870
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110026\">@Simon Hudon</span> <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> who's the boss here? Can we make an exception <span aria-label=\"octopus\" class=\"emoji emoji-1f419\" role=\"img\" title=\"octopus\">:octopus:</span> <span aria-label=\"tools\" class=\"emoji emoji-1f6e0\" role=\"img\" title=\"tools\">:tools:</span> <img alt=\":zulip:\" class=\"emoji\" src=\"/static/generated/emoji/images/emoji/unicode/zulip.png\" title=\"zulip\"> <span aria-label=\"joy cat\" class=\"emoji emoji-1f639\" role=\"img\" title=\"joy cat\">:joy_cat:</span></p>",
        "id": 178946762,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1571920509
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> <span class=\"user-mention\" data-user-id=\"132175\">@Mohammad Pedramfar</span> The natural number game is looking great! Congrats!</p>",
        "id": 178951912,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1571924145
    },
    {
        "content": "<p>Great! So now let's do the complex number game.</p>",
        "id": 178951986,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1571924175
    },
    {
        "content": "<p>you import the reals, and then have to define everything.</p>",
        "id": 178952000,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1571924194
    },
    {
        "content": "<p>unfortunately all of the proofs are \"ext;ring\" :-/</p>",
        "id": 178952006,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1571924204
    },
    {
        "content": "<p>maybe I should think of a better game</p>",
        "id": 178952025,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1571924222
    },
    {
        "content": "<p>Although others have done it before, and probably they've even done it better (Patrick showed me some impressive stuff I remember), I wonder if we can just get some sort of little suite of games like this, just to get people interested.</p>",
        "id": 178952141,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1571924292
    },
    {
        "content": "<p>I've been meaning to make stickers based on the Lean logo, but now I know what I really need is that start screen</p>",
        "id": 178952757,
        "sender_full_name": "Reid Barton",
        "timestamp": 1571924762
    },
    {
        "content": "<p>I suppose one could turn a whole undergrad degree into a game...</p>",
        "id": 178952813,
        "sender_full_name": "Luca Seemungal",
        "timestamp": 1571924776
    },
    {
        "content": "<p>I think <span class=\"user-mention\" data-user-id=\"121918\">@Edward Ayers</span> created a bunch of alternative Lean logos some time ago</p>",
        "id": 178954426,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1571925693
    },
    {
        "content": "<p><a href=\"#narrow/stream/113488-general/topic/Leaked.20Lean.204.20Logos\" title=\"#narrow/stream/113488-general/topic/Leaked.20Lean.204.20Logos\">https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/Leaked.20Lean.204.20Logos</a></p>",
        "id": 178954639,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1571925802
    },
    {
        "content": "<p>Just saw this on the front page of the internet:</p>\n<p><a href=\"https://www.reddit.com/r/math/comments/dnc0jj/imo_grand_challenge_automated_problem_solving/\" target=\"_blank\" title=\"https://www.reddit.com/r/math/comments/dnc0jj/imo_grand_challenge_automated_problem_solving/\">https://www.reddit.com/r/math/comments/dnc0jj/imo_grand_challenge_automated_problem_solving/</a></p>",
        "id": 179136057,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1572114566
    },
    {
        "content": "<p>and now this (on Mario's metamath paper): <br>\n<a href=\"https://news.ycombinator.com/item?id=21358674\" target=\"_blank\" title=\"https://news.ycombinator.com/item?id=21358674\">https://news.ycombinator.com/item?id=21358674</a></p>",
        "id": 179161793,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1572165939
    },
    {
        "content": "<p>I was on the front page for a while :D</p>",
        "id": 179161897,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1572166159
    },
    {
        "content": "<p>I regard these things as small victories for the formal proof verification community</p>",
        "id": 179163024,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1572168212
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> Well... they certainly are small victories within the CS community. But how many pure mathematicians read hacker news? Probably about as many as use ITP's...</p>",
        "id": 179205646,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1572244434
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/AdnVN030Nvzl3p-Q_J3M9T7R/IMG_20191101_144932.jpg\" target=\"_blank\" title=\"IMG_20191101_144932.jpg\">IMG_20191101_144932.jpg</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/AdnVN030Nvzl3p-Q_J3M9T7R/IMG_20191101_144932.jpg\" target=\"_blank\" title=\"IMG_20191101_144932.jpg\"><img src=\"/user_uploads/3121/AdnVN030Nvzl3p-Q_J3M9T7R/IMG_20191101_144932.jpg\"></a></div>",
        "id": 179660611,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1572639001
    },
    {
        "content": "<p>Lean related graffiti in room 342</p>",
        "id": 179660671,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1572639017
    },
    {
        "content": "<p>Nice IMO grand challenge!</p>\n<p>Is there a prize?</p>",
        "id": 179686652,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1572671628
    },
    {
        "content": "<p>Sure, see: <a href=\"#narrow/stream/113488-general/topic/IMO.20Grand.20Challenge/near/175143187\" title=\"#narrow/stream/113488-general/topic/IMO.20Grand.20Challenge/near/175143187\">https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/IMO.20Grand.20Challenge/near/175143187</a></p>",
        "id": 179686765,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1572671771
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"221921\">@Marc Huisinga</span> presented his <a href=\"https://pp.ipd.kit.edu/uploads/publikationen/huisinga19bachelorarbeit.pdf\" target=\"_blank\" title=\"https://pp.ipd.kit.edu/uploads/publikationen/huisinga19bachelorarbeit.pdf\">bachelor's thesis</a> on a partial verification of the compiler in our reference counting paper (done in Lean 3) yesterday. Apart from a much more in-depth description of the IR and compiler than we could have put in the paper, there are some good observation about effective proving in Lean in general in section4, as well as a self-contained section (5) about the list/multiset <code>group</code> function (which he might want to PR to mathlib at some point?).</p>",
        "id": 179911868,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1572943703
    },
    {
        "content": "<p>The formalization mentions <code>obtain</code>?</p>",
        "id": 179914502,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1572946020
    },
    {
        "content": "<p>but also <code>#check</code></p>",
        "id": 179914527,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1572946050
    },
    {
        "content": "<p>The lean version that was used exists outside the linear flow of time</p>",
        "id": 179914624,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1572946106
    },
    {
        "content": "<p>It's the <code>obtain</code> tactic. I guess we never updated lstlean.tex to remove the obsolete keyword.</p>",
        "id": 179915005,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1572946448
    },
    {
        "content": "<p>\"we use Lean 3 to prove that Lean 4 works\". Cunningly avoiding Goedel.</p>",
        "id": 179916336,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1572947576
    },
    {
        "content": "<p>wait, I don't think that's the direction that avoids Goedel</p>",
        "id": 179916734,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1572947925
    },
    {
        "content": "<p>yes, it's the obtain tactic. the proof code certainly still needs to be cleaned up, especially before contributing anything to mathlib. many non-terminal simps, lots of duplication and several instances where i miss-use <code>let</code> and should use <code>have</code> instead :)</p>",
        "id": 179919199,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1572950075
    },
    {
        "content": "<p>I'll take that as a vote for \"one tactic instead of two please\"</p>",
        "id": 179925782,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1572956157
    },
    {
        "content": "<p>Some new \"Lean in the wild\": Sébastien got <a href=\"https://en.wikipedia.org/wiki/Michael_Brin_Prize_in_Dynamical_Systems\" target=\"_blank\" title=\"https://en.wikipedia.org/wiki/Michael_Brin_Prize_in_Dynamical_Systems\">a prize</a> for theorems he didn't formalize yet, but half of <a href=\"http://www.cnrs.fr/insmi/spip.php?article3371\" target=\"_blank\" title=\"http://www.cnrs.fr/insmi/spip.php?article3371\">the interview</a> he gave to the <a href=\"https://en.wikipedia.org/wiki/Centre_national_de_la_recherche_scientifique\" target=\"_blank\" title=\"https://en.wikipedia.org/wiki/Centre_national_de_la_recherche_scientifique\">CNRS</a> website is propaganda for proof assistants.</p>",
        "id": 180535885,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1573577097
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110050\">@Sebastien Gouezel</span> Congratulations! <span aria-label=\"octopus\" class=\"emoji emoji-1f419\" role=\"img\" title=\"octopus\">:octopus:</span> <span aria-label=\"cake\" class=\"emoji emoji-1f370\" role=\"img\" title=\"cake\">:cake:</span></p>",
        "id": 180539496,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1573579418
    },
    {
        "content": "<p>Thank you!</p>",
        "id": 180540574,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1573580087
    },
    {
        "content": "<p>Slightly more unusual spotting of Lean in the wild: <a href=\"https://en.wikipedia.org/wiki/George_Hotz\" target=\"_blank\" title=\"https://en.wikipedia.org/wiki/George_Hotz\">George Hotz</a> has <a href=\"https://www.youtube.com/watch?v=4Or-5OLCNDA\" target=\"_blank\" title=\"https://www.youtube.com/watch?v=4Or-5OLCNDA\">livestreamed</a> writing a small <a href=\"https://github.com/geohot/twitchcoq/blob/master/metamath/lean/main.lean\" target=\"_blank\" title=\"https://github.com/geohot/twitchcoq/blob/master/metamath/lean/main.lean\">parser</a> for Metamath files on Twitch back in November.</p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"4Or-5OLCNDA\" href=\"https://www.youtube.com/watch?v=4Or-5OLCNDA\" target=\"_blank\" title=\"https://www.youtube.com/watch?v=4Or-5OLCNDA\"><img src=\"https://i.ytimg.com/vi/4Or-5OLCNDA/default.jpg\"></a></div>",
        "id": 184766189,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1578084221
    },
    {
        "content": "<p>first 40 minutes: why is the hello world example broken</p>",
        "id": 184766712,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1578084681
    },
    {
        "content": "<p>This person needs to hear about mm0, as a more modern foundation than metamath :p</p>",
        "id": 184767285,
        "sender_full_name": "Simon Cruanes",
        "timestamp": 1578085163
    },
    {
        "content": "<p>It's actually pretty funny, during the stream he visits the MM0 page like 5 times when searching for things about metamath or lean (and usually coming up empty). Apparently I've got good SEO</p>",
        "id": 184774881,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1578092429
    },
    {
        "content": "<p><a href=\"https://agentultra.github.io/lean-for-hackers/\" target=\"_blank\" title=\"https://agentultra.github.io/lean-for-hackers/\">https://agentultra.github.io/lean-for-hackers/</a> -- hello world stuff! It had never occurred to me to get Lean to print anything before.</p>",
        "id": 186626029,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1580052496
    },
    {
        "content": "<p>Oh SWEET! You've \"cracked the code\". I can build on that.</p>",
        "id": 186626123,
        "sender_full_name": "Tim Daly",
        "timestamp": 1580052706
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"220270\">@James King</span> made a thread about his guide <a href=\"#narrow/stream/113488-general/topic/guides\" title=\"#narrow/stream/113488-general/topic/guides\">here</a>.</p>",
        "id": 186628144,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1580056226
    },
    {
        "content": "<p>oh nice, thanks Bryan. I see now that I starred that post when it appeared but I never went back and \"tidied up recent stars\", my bad.</p>",
        "id": 186628202,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1580056335
    },
    {
        "content": "<p>Kevin, did you notice that \"The primary focus of Lean is mathematical research and its intended audience are mathematicians.\" We can be proud of what we did. By taking over this forum, we managed to get James completely confused about Lean's origins an intended audience. <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span></p>",
        "id": 186628770,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1580057511
    },
    {
        "content": "<p>I did notice that yes :-)</p>",
        "id": 186632539,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1580063855
    },
    {
        "content": "<p>I am completely confused and PRs are welcome. I've talked to various people around the community but I haven't met all of you nor had a chance to meet Kevin, Jeremy, or Leo. <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span></p>",
        "id": 186632962,
        "sender_full_name": "James King",
        "timestamp": 1580064582
    },
    {
        "content": "<p>I made the guide after watching George Hotz try Lean on his \"esoteric language sundays\" twitch channel and being stymied in a similar fashion by the empty sections on the programming language bits of the Lean documentation. I hope to round it out a bit and work with Simon to contribute parts to the official docs.</p>",
        "id": 186633154,
        "sender_full_name": "James King",
        "timestamp": 1580064873
    },
    {
        "content": "<p>Presently wrapping up work on a JSON parsing library for Lean3 to serve as the intro for the next section to the guide. (I'm really humbled that people have actually read it...)</p>",
        "id": 186633265,
        "sender_full_name": "James King",
        "timestamp": 1580065090
    },
    {
        "content": "<p><a href=\"http://aarinc.org/Newsletters/130-2020-02.html#zulip\" target=\"_blank\" title=\"http://aarinc.org/Newsletters/130-2020-02.html#zulip\">http://aarinc.org/Newsletters/130-2020-02.html#zulip</a></p>",
        "id": 188001745,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1581507249
    },
    {
        "content": "<p>\"The lean zulip server demonstrates that good communication tools can help communities thrive, make it easier for newcomers to ask questions, and lower friction for discussions. \"</p>",
        "id": 188001768,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1581507286
    },
    {
        "content": "<p>Kevin, since when do you read the AAR newsletter? Next thing you know, you'll be attending IJCAR or CADE.</p>",
        "id": 188148104,
        "sender_full_name": "Jasmin Blanchette",
        "timestamp": 1581626426
    },
    {
        "content": "<p>Next IJCAR is in Paris, it's the right time to attend! <span aria-label=\"croissant\" class=\"emoji emoji-1f950\" role=\"img\" title=\"croissant\">:croissant:</span> <span aria-label=\"baguette\" class=\"emoji emoji-1f956\" role=\"img\" title=\"baguette\">:baguette:</span></p>",
        "id": 188148744,
        "sender_full_name": "Simon Cruanes",
        "timestamp": 1581626759
    },
    {
        "content": "<p>I gave a talk in Bath on Tuesday and some computer scientists attended, and one of them emailed me the newsletter afterwards :-)</p>",
        "id": 188150448,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1581627730
    },
    {
        "content": "<p>I used to be the editor of that beautiful publication. :)</p>\n<p>If you want to get it delivered to your mailbox (4-5 times a year), you can ask Sophie Tourret at <a href=\"mailto:newsletter@aarinc.org\" title=\"mailto:newsletter@aarinc.org\">newsletter@aarinc.org</a> . She's an Isabelle user, though, so you might want to keep a low profile.</p>",
        "id": 188150766,
        "sender_full_name": "Jasmin Blanchette",
        "timestamp": 1581627898
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> hits frontpage on HN again: <a href=\"https://news.ycombinator.com/item?id=22390486\" target=\"_blank\" title=\"https://news.ycombinator.com/item?id=22390486\">https://news.ycombinator.com/item?id=22390486</a></p>",
        "id": 188833516,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1582406150
    },
    {
        "content": "<p>Who did he provoked this time?</p>",
        "id": 188833557,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1582406171
    },
    {
        "content": "<p>Just his blogpost from over a week ago (-;</p>",
        "id": 188833629,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1582406334
    },
    {
        "content": "<p><a href=\"https://www.imperial.ac.uk/news/196435/growing-plants-without-soil-amongst-frontier/\" title=\"https://www.imperial.ac.uk/news/196435/growing-plants-without-soil-amongst-frontier/\">https://www.imperial.ac.uk/news/196435/growing-plants-without-soil-amongst-frontier/</a></p>\n<p>Go me, I got money for a Lean post-doc :D</p>",
        "id": 191950111,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585257329
    },
    {
        "content": "<p>Job ad should be out by the end of the week :D</p>",
        "id": 191950149,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585257345
    },
    {
        "content": "<p>Not sure if this was posted anywhere else, but I saw a presentation go up about Lean at Imperial College London: <a href=\"https://www.researchgate.net/publication/339827943_University_students'_proof_writing_and_LEAN_theorem_prover_the_case_of_the_abundant_number_task\" title=\"https://www.researchgate.net/publication/339827943_University_students'_proof_writing_and_LEAN_theorem_prover_the_case_of_the_abundant_number_task\">https://www.researchgate.net/publication/339827943_University_students'_proof_writing_and_LEAN_theorem_prover_the_case_of_the_abundant_number_task</a></p>",
        "id": 192550165,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1585756498
    },
    {
        "content": "<p>Athina Thoma is the education post-doc who watched my students learning Lean, interviewed and surveyed them, and tried to draw rigorous conclusions from an educational perspective.</p>",
        "id": 192554800,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585758495
    },
    {
        "content": "<p>I'm not sure if this is \"in the wild\", but here's the new version of our Lecture notes:    <a href=\"https://lean-forward.github.io/logical-verification/2020/index.html#material\" title=\"https://lean-forward.github.io/logical-verification/2020/index.html#material\">https://lean-forward.github.io/logical-verification/2020/index.html#material</a></p>\n<p>Sorry for all the spam. I just want to make sure nobody keeps on reading the old book.</p>",
        "id": 192798565,
        "sender_full_name": "Jasmin Blanchette",
        "timestamp": 1585918421
    },
    {
        "content": "<p>I think prominent links to the new version at the old course site and github repo would help with that.</p>",
        "id": 192799255,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1585918704
    },
    {
        "content": "<p>Blogpost about Lean <a href=\"https://ahelwer.ca/post/2020-04-05-lean-assignment/\" title=\"https://ahelwer.ca/post/2020-04-05-lean-assignment/\">https://ahelwer.ca/post/2020-04-05-lean-assignment/</a> (mentions NNG). It's urrently place 14 on HackerNews: <a href=\"https://news.ycombinator.com/item?id=22789953\" title=\"https://news.ycombinator.com/item?id=22789953\">https://news.ycombinator.com/item?id=22789953</a></p>",
        "id": 192996698,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1586150659
    },
    {
        "content": "<p>See also <a href=\"#narrow/stream/113488-general/topic/Wrote.20a.20blog.20post.20about.20Lean\" title=\"#narrow/stream/113488-general/topic/Wrote.20a.20blog.20post.20about.20Lean\">https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/Wrote.20a.20blog.20post.20about.20Lean</a> <span aria-label=\"slight smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"slight smile\">:slight_smile:</span></p>",
        "id": 192996703,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1586150686
    },
    {
        "content": "<p>Hitchhikers Guide Lean book now on front page of hacker news</p>",
        "id": 193077870,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586195707
    },
    {
        "content": "<p>Here is the comment section: <a href=\"https://news.ycombinator.com/item?id=22794533\" title=\"https://news.ycombinator.com/item?id=22794533\">https://news.ycombinator.com/item?id=22794533</a></p>",
        "id": 193150870,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1586245764
    },
    {
        "content": "<p>They are saying silly things over there</p>",
        "id": 193150893,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1586245786
    },
    {
        "content": "<p>Like you can't do epsilon delta proofs in Lean</p>",
        "id": 193150951,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1586245805
    },
    {
        "content": "<p>Clearly didn't read TFA before commenting</p>",
        "id": 193150977,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1586245835
    },
    {
        "content": "<p>I'm not sure arguing a lot about this is a good use of our time. Writing better documentation and tutorials seem like a better idea to me.</p>",
        "id": 193150982,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1586245839
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/113488-general/topic/Lean.20in.20the.20wild/near/193150893\" title=\"#narrow/stream/113488-general/topic/Lean.20in.20the.20wild/near/193150893\">said</a>:</p>\n<blockquote>\n<p>They are saying silly things over there</p>\n</blockquote>\n<p>Doesn't this apply to literally every comments section on the internet? This will keep happening no matter how perfect the documentation and tutorials are :)</p>",
        "id": 193151128,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1586245957
    },
    {
        "content": "<p>Natural number game on Reddit: <a href=\"https://www.reddit.com/r/math/comments/fwlgf4/natural_number_game_a_game_where_you_learn_to/\" title=\"https://www.reddit.com/r/math/comments/fwlgf4/natural_number_game_a_game_where_you_learn_to/\">https://www.reddit.com/r/math/comments/fwlgf4/natural_number_game_a_game_where_you_learn_to/</a></p>",
        "id": 193213018,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1586276465
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span>  -- Patrick encouraged me to give NNG \"some love\" last week, and I accepted all the PRs, made some edits, and pushed a slightly tidied up version live. Just in time!</p>",
        "id": 193223892,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586281731
    },
    {
        "content": "<p>My default search engine is <a href=\"https://duckduckgo.com\" title=\"https://duckduckgo.com\">duck duck go</a>, and I usually get to the mathlib github repo by searching for the word mathlib, because it's usually the second or third hit. But as of the last 24 hours or so it's consistently been number 1. Is that true for everyone or just me? I thought the point was that they weren't tracking me.</p>",
        "id": 193340836,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586361571
    },
    {
        "content": "<p>third entry for me</p>",
        "id": 193341036,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1586361635
    },
    {
        "content": "<p>third for me after pearson and matlab</p>",
        "id": 193341101,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1586361659
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113488-general/topic/Lean.20in.20the.20wild/near/193340836\" title=\"#narrow/stream/113488-general/topic/Lean.20in.20the.20wild/near/193340836\">said</a>:</p>\n<blockquote>\n<p>My default search engine is <a href=\"https://duckduckgo.com\" title=\"https://duckduckgo.com\">duck duck go</a>, and I usually get to the mathlib github repo by searching for the word mathlib, because it's usually the second or third hit. But as of the last 24 hours or so it's consistently been number 1. Is that true for everyone or just me? I thought the point was that they weren't tracking me.</p>\n</blockquote>\n<p>2nd entry for me</p>",
        "id": 193341105,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1586361660
    },
    {
        "content": "<p>Its non-deterministic though, simply refreshing changes the order for me.</p>",
        "id": 193341284,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1586361732
    },
    {
        "content": "<p><a href=\"https://www.youtube.com/watch?v=mb-qDG5-05Y\" title=\"https://www.youtube.com/watch?v=mb-qDG5-05Y\">\"The Mechanization of Mathematics\" by Jeremy Avigad</a></p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"mb-qDG5-05Y\" href=\"https://www.youtube.com/watch?v=mb-qDG5-05Y\" title=\"https://www.youtube.com/watch?v=mb-qDG5-05Y\"><img src=\"https://i.ytimg.com/vi/mb-qDG5-05Y/default.jpg\"></a></div>",
        "id": 194380258,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1587079777
    }
]