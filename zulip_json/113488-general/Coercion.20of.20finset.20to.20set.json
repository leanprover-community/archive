[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">linear_algebra.finite_dimensional</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">division_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n          <span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">bar</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">M</span><span class=\"o\">,</span> <span class=\"n\">set.finrank</span> <span class=\"n\">R</span> <span class=\"bp\">↑</span><span class=\"n\">s</span> <span class=\"c1\">-- error</span>\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">bar'</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">M</span><span class=\"o\">,</span> <span class=\"n\">set.finrank</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"c1\">-- works</span>\n<span class=\"kd\">def</span> <span class=\"n\">baz</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">M</span><span class=\"o\">,</span> <span class=\"n\">set.inj_on</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">↑</span><span class=\"n\">s</span> <span class=\"c1\">-- works</span>\n<span class=\"kd\">def</span> <span class=\"n\">baz'</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">M</span><span class=\"o\">,</span> <span class=\"n\">set.inj_on</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"n\">s</span> <span class=\"c1\">-- works</span>\n</code></pre></div>\n<p>Why does coercion of <code>finset</code>s to <code>set</code>s not work automatically with <code>set.finrank</code>, but does work with <code>set.inj_on</code>?</p>",
        "id": 349077512,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1681384658
    },
    {
        "content": "<p>Note that <code>#print bar'</code> gives</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">bar'</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"bp\">...</span><span class=\"o\">),</span> <span class=\"n\">finset</span> <span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"bp\">...</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">M</span><span class=\"o\">),</span> <span class=\"n\">set.finrank</span> <span class=\"n\">R</span> <span class=\"bp\">↑</span><span class=\"n\">s</span>\n</code></pre></div>",
        "id": 349077976,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1681384780
    },
    {
        "content": "<p>Probably Lean can't guess M in the first example</p>",
        "id": 349078134,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1681384810
    },
    {
        "content": "<p>What's the error?</p>",
        "id": 349078285,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1681384847
    },
    {
        "content": "<p>The error is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">don't</span> <span class=\"n\">know</span> <span class=\"n\">how</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"n\">placeholder</span>\n<span class=\"n\">context</span><span class=\"o\">:</span>\n<span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"o\">,</span>\n<span class=\"n\">_inst_1</span> <span class=\"o\">:</span> <span class=\"n\">division_ring</span> <span class=\"n\">R</span><span class=\"o\">,</span>\n<span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_2</span><span class=\"o\">,</span>\n<span class=\"n\">_inst_2</span> <span class=\"o\">:</span> <span class=\"n\">add_comm_group</span> <span class=\"n\">M</span><span class=\"o\">,</span>\n<span class=\"n\">_inst_3</span> <span class=\"o\">:</span> <span class=\"n\">decidable_eq</span> <span class=\"n\">M</span><span class=\"o\">,</span>\n<span class=\"n\">_inst_4</span> <span class=\"o\">:</span> <span class=\"n\">module</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">,</span>\n<span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">M</span>\n<span class=\"bp\">⊢</span> <span class=\"kt\">Type</span> <span class=\"bp\">?</span>\n</code></pre></div>\n<p><code>M</code> is there , as far as I can see...</p>",
        "id": 349078421,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1681384885
    },
    {
        "content": "<p>Sure it's there, but lean can't guess it in the first example (and that's what the error means). You tell it M explicitly in the second one. The issue that there could in theory be a coercion from <code>finset M</code> to <code>set R</code>. Silly I know but I think that's why it's asking for help.</p>",
        "id": 349078751,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1681384968
    },
    {
        "content": "<p>I was just arriving at a similar conclusion...</p>",
        "id": 349078895,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1681385005
    },
    {
        "content": "<p>The problem is that in <code>set.finrank</code> the module is implicit.</p>",
        "id": 349079097,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1681385050
    },
    {
        "content": "<p>A couple of years ago when all this was dawning on me I think I had a bit of a moan about how silly all this was, but probably it's impossible to fix without editing core.</p>",
        "id": 349079135,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1681385057
    },
    {
        "content": "<p>I guess the upshot is that when I write <code>↑s</code> the target type needs to be known (to Lean, not to me <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span> ), and in this case, it isn't.</p>",
        "id": 349079584,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1681385184
    },
    {
        "content": "<p>Thanks for enlightening me!</p>",
        "id": 349079682,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1681385215
    }
]