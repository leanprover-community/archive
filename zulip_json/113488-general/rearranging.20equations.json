[
    {
        "content": "<p>I have the equation <code>2 * j = 3 * (1 + 2 * i) + 1</code> as an intermediate goal, and I would like to rewrite it in terms of <code>j=...</code> as I need the <code>j</code> to plug into an existential. I'm having trouble even simplifying the rhs to <code>4+2i</code>. From there, I should be able to divide through by 2, to get <code>j = 2+i</code>, assuming my high-school algebra isn't too rusty. I have had a quick scan through the mathematics in lean book, but haven't been able to find anything to help me so far.</p>",
        "id": 389064991,
        "sender_full_name": "Matthew Pocock",
        "timestamp": 1693869496
    },
    {
        "content": "<p>If you post a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> you will get much better help!</p>",
        "id": 389065726,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1693870097
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/113488-general/topic/rearranging.20equations/near/389065726\">said</a>:</p>\n<blockquote>\n<p>If you post a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> you will get much better help!</p>\n</blockquote>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.LibrarySearch</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span>\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span>\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">is_even</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"bp\">∃</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">a</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">is_odd</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"bp\">∃</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">a</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">collatz</span> <span class=\"o\">:=</span> <span class=\"k\">if</span> <span class=\"n\">n</span> <span class=\"bp\">%</span> <span class=\"mi\">2</span> <span class=\"bp\">==</span> <span class=\"mi\">0</span> <span class=\"k\">then</span> <span class=\"n\">n</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"k\">else</span> <span class=\"mi\">3</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">collatz_odd_to_even</span> <span class=\"o\">:</span> <span class=\"n\">is_odd</span> <span class=\"n\">n</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">is_even</span> <span class=\"o\">(</span><span class=\"n\">collatz</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">is_odd</span><span class=\"o\">,</span> <span class=\"n\">is_even</span><span class=\"o\">,</span> <span class=\"n\">collatz</span><span class=\"o\">]</span>\n    <span class=\"n\">intro</span> <span class=\"n\">i</span>                                 <span class=\"c1\">-- odd generator</span>\n    <span class=\"n\">intro</span> <span class=\"n\">hn</span>                                <span class=\"c1\">-- collatz argument</span>\n    <span class=\"n\">subst</span> <span class=\"n\">hn</span>                                <span class=\"c1\">-- expand i for n</span>\n    <span class=\"n\">refine</span> <span class=\"n\">Exists.intro</span> <span class=\"n\">j</span> <span class=\"bp\">?</span><span class=\"n\">h</span>                <span class=\"c1\">-- break up the existential</span>\n    <span class=\"n\">refine</span> <span class=\"n\">Iff.mpr</span> <span class=\"n\">eq_ite_iff</span> <span class=\"bp\">?</span><span class=\"n\">h.a</span>          <span class=\"c1\">-- rewrite the if/else</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">Nat.add_mul_mod_self_left</span> <span class=\"mi\">1</span> <span class=\"mi\">2</span> <span class=\"n\">i</span><span class=\"o\">]</span>  <span class=\"c1\">-- and leave us with the odd case</span>\n</code></pre></div>\n<p>I am not sure if this is the nicest way to approach this problem. <code>j=2+i</code>should be the existential witness that completes the proof.</p>",
        "id": 389067495,
        "sender_full_name": "Matthew Pocock",
        "timestamp": 1693871301
    },
    {
        "content": "<p>It's unclear to me why you want the <code>j</code> at all here.</p>",
        "id": 389082957,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1693879122
    },
    {
        "content": "<p>It seems that you should rather use <code>i</code>.</p>",
        "id": 389082976,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1693879132
    },
    {
        "content": "<p>Well, not <code>i</code> exactly, but at least some expression involving <code>i</code>.</p>",
        "id": 389083045,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1693879167
    },
    {
        "content": "<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>Ungolfed Spoiler!</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Nat.Basic</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span>\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span>\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">is_even</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"bp\">∃</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">a</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">is_odd</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"bp\">∃</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">a</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">collatz</span> <span class=\"o\">:=</span> <span class=\"k\">if</span> <span class=\"n\">n</span> <span class=\"bp\">%</span> <span class=\"mi\">2</span> <span class=\"bp\">==</span> <span class=\"mi\">0</span> <span class=\"k\">then</span> <span class=\"n\">n</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"k\">else</span> <span class=\"mi\">3</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">collatz_odd_to_even</span> <span class=\"o\">:</span> <span class=\"n\">is_odd</span> <span class=\"n\">n</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">is_even</span> <span class=\"o\">(</span><span class=\"n\">collatz</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">is_odd</span><span class=\"o\">,</span> <span class=\"n\">is_even</span><span class=\"o\">,</span> <span class=\"n\">collatz</span><span class=\"o\">]</span>\n    <span class=\"n\">intro</span> <span class=\"n\">i</span>                                 <span class=\"c1\">-- odd generator</span>\n    <span class=\"n\">intro</span> <span class=\"n\">hn</span>                                <span class=\"c1\">-- collatz argument</span>\n    <span class=\"n\">subst</span> <span class=\"n\">hn</span>                                <span class=\"c1\">-- expand i for n</span>\n    <span class=\"n\">refine</span> <span class=\"n\">Exists.intro</span> <span class=\"o\">(</span><span class=\"mi\">3</span> <span class=\"bp\">*</span> <span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">?</span><span class=\"n\">h</span>\n    <span class=\"n\">refine</span> <span class=\"n\">Iff.mpr</span> <span class=\"n\">eq_ite_iff</span> <span class=\"bp\">?</span><span class=\"n\">h.a</span>          <span class=\"c1\">-- rewrite the if/else</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">Nat.add_mul_mod_self_left</span> <span class=\"mi\">1</span> <span class=\"mi\">2</span> <span class=\"n\">i</span><span class=\"o\">]</span>  <span class=\"c1\">-- and leave us with the odd case</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">mul_add</span><span class=\"o\">,</span> <span class=\"n\">add_comm</span> <span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">mul_assoc</span><span class=\"o\">]</span>\n</code></pre></div>\n</div></div>",
        "id": 389083389,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1693879304
    },
    {
        "content": "<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>Golfed spoiler</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">collatz_odd_to_even</span> <span class=\"o\">:</span> <span class=\"n\">is_odd</span> <span class=\"n\">n</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">is_even</span> <span class=\"o\">(</span><span class=\"n\">collatz</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rintro</span> <span class=\"o\">⟨</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span>\n  <span class=\"n\">use</span> <span class=\"mi\">3</span> <span class=\"bp\">*</span> <span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">collatz</span><span class=\"o\">,</span> <span class=\"n\">mul_add</span><span class=\"o\">,</span> <span class=\"n\">add_comm</span> <span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">mul_assoc</span><span class=\"o\">]</span>\n</code></pre></div>\n</div></div>",
        "id": 389083599,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1693879404
    },
    {
        "content": "<p>Thank you. I'll try to understand both proofs :D</p>",
        "id": 389179399,
        "sender_full_name": "Matthew Pocock",
        "timestamp": 1693917421
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243562\">Adam Topaz</span> <a href=\"#narrow/stream/113488-general/topic/rearranging.20equations/near/389083599\">said</a>:</p>\n<blockquote>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"n\">rintro</span> <span class=\"o\">⟨</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span>\n  <span class=\"n\">use</span> <span class=\"mi\">3</span> <span class=\"bp\">*</span> <span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>Is there something that I need to import to get the <code>use</code> tactic? My session says that it is an unknown tactic.</p>\n<p>In the <code>rintro</code> tactic, is <code>rfl</code> being used as a name for the introduced goal, or is it immediately applying the rfl tactic to whatever fits into that slot in the constructor? I haven't seen targets used \"in place\" like that before.</p>",
        "id": 389182942,
        "sender_full_name": "Matthew Pocock",
        "timestamp": 1693918467
    },
    {
        "content": "<p><code>import Mathlib.Tactic</code> should be enough to get you all \"standard\" tactics</p>",
        "id": 389199801,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1693923146
    },
    {
        "content": "<p>The <code>rfl</code> is like a keyword for <code>rintro</code> and it tells <code>rintro</code> to automatically substitute the introduced equality instead of returning it as a new hypothesis</p>",
        "id": 389202608,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1693923878
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"127136\">Alex J. Best</span> <a href=\"#narrow/stream/113488-general/topic/rearranging.20equations/near/389202608\">said</a>:</p>\n<blockquote>\n<p>The <code>rfl</code> is like a keyword for <code>rintro</code> and it tells <code>rintro</code> to automatically substitute the introduced equality instead of returning it as a new hypothesis</p>\n</blockquote>\n<p>Thanks. That import has got it working.  Cheers!</p>",
        "id": 389214414,
        "sender_full_name": "Matthew Pocock",
        "timestamp": 1693926772
    },
    {
        "content": "<p>Do I need to have in mind that <code>3*i+2</code> is the value I'm looking for, or can I use a tactic that will summon this term somehow? Perhaps this is the difference between an interactive proof assistant and a fully automated solver.</p>",
        "id": 389216920,
        "sender_full_name": "Matthew Pocock",
        "timestamp": 1693927335
    }
]