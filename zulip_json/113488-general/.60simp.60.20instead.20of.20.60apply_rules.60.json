[
    {
        "content": "<p>I hadn't really internalised until today that this works (in lean 4 but the same works in lean 3; <code>opaque</code> = <code>constant</code>)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">opaque</span> <span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n<span class=\"n\">opaque</span> <span class=\"n\">Q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">theorem</span> <span class=\"n\">hP</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">theorem</span> <span class=\"n\">hPQ</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"bp\">→</span> <span class=\"n\">Q</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">Q</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span>\n</code></pre></div>\n<p>For me, that's a pretty weird use of <code>simp</code>. I had this vague idea that in mathlib3 there was something called <code>apply_rules</code>, and if you wanted to write a tactic like <code>continuity</code> (which can prove things like \"if f and g and h are continuous, then so is f \\circ (g \\times h)\" by constructing proofs like <code>apply continuous.comp, assumption, apply continuous.prod, assumption, assumption</code>) then you basically tagged a bunch of appropriate lemmas adn then let <code>apply_rules</code> do the work. The above example seems to indicate that <code>simp</code> can also do this work. Currently my lecture tomorrow (written in Lean 3) looks like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- This says \"the function cos(sin(x))*exp(x) is differentiable\"</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">differentiable</span> <span class=\"n\">ℝ</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">cos</span> <span class=\"o\">(</span><span class=\"n\">sin</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">exp</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">apply</span> <span class=\"n\">differentiable.mul</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"c1\">-- ⊢ differentiable ℝ (λ (y : ℝ), cos (sin y))</span>\n    <span class=\"n\">apply</span> <span class=\"n\">differentiable.comp</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">differentiable_cos</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">differentiable_sin</span><span class=\"o\">,</span> <span class=\"o\">},</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">differentiable_exp</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n\n<span class=\"c1\">-- Alternative approach:</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">differentiable</span> <span class=\"n\">ℝ</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">cos</span> <span class=\"o\">(</span><span class=\"n\">sin</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">exp</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"c1\">-- I am a bit freaked out that this works.</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>What is the point of <code>apply_rules</code> if <code>simp</code> can do this?</p>",
        "id": 341345295,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1678662433
    },
    {
        "content": "<p>These are often called \"conditional simp lemmas\"</p>",
        "id": 341345519,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1678662614
    },
    {
        "content": "<p>I'd heard of conditional simp lemmas of the form <code>P -&gt; (a = b)</code> so <code>simp</code> would rewrite <code>a</code> to <code>b</code> and try and prove <code>P</code> but this is different, right?</p>",
        "id": 341346118,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1678663127
    },
    {
        "content": "<p>I'm curious if the behavior here is similar to that of Isabelle, where simp lemmas <code>P</code> which are not of the form <code>a=b</code> are treated as a rewrite rule <code>P = true</code>. Your MWE seems consistent with this (assuming there's a simp lemma of the form <code>true -&gt; Q = Q</code>).</p>",
        "id": 341347142,
        "sender_full_name": "Pedro Sánchez Terraf",
        "timestamp": 1678664103
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"327749\">Pedro Sánchez Terraf</span> <a href=\"#narrow/stream/113488-general/topic/.60simp.60.20instead.20of.20.60apply_rules.60/near/341347142\">said</a>:</p>\n<blockquote>\n<p>I'm curious if the behavior here is similar to that of Isabelle, where simp lemmas <code>P</code> which are not of the form <code>a=b</code> are treated as a rewrite rule <code>P = true</code>. Your MWE seems consistent with this (assuming there's a simp lemma of the form <code>true -&gt; Q = Q</code>).</p>\n</blockquote>\n<p>Yes, that's exactly what happens. <code>simp_all</code> and <code>simp [*]</code> should do this as well. I believe the default discharge depth (i.e. how many layers of assumptions <code>simp</code> will try to rewrite to <code>True</code>) is 1.</p>",
        "id": 342035321,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1678881869
    },
    {
        "content": "<p>The only drawback I've noticed with simp-as-apply-rules is that if the simp call fails then the goal is unchanged, whereas when being used as <code>rw</code> on steroids, if it fails then you can see how far it got.</p>",
        "id": 342044507,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1678883989
    }
]