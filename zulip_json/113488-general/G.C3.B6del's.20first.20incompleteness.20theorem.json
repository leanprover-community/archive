[
    {
        "content": "<p>A few weeks ago, I successfully proved Gödel's first incompleteness theorem using Lean, You can find the details on my GitHub repository <a href=\"https://github.com/iehality/lean4-logic\">here</a>, likely the first of its kind, accoding to <a href=\"https://leanprover-community.github.io/100-missing.html\">Missing theorems from Freek Wiedijk's list of 100 theorems</a> (Do I need to write a paper or something to update this list?). I would greatly appreciate your insights to ensure the accuracy of the proof.</p>\n<p>Furthermore, there's an ongoing attempt within Mathlib to prove the incompleteness theorem, as mentioned <a href=\"https://leanprover-community.github.io/mathlib4_docs//Mathlib/ModelTheory/Encoding.html\">here</a>. I'm interested in contributing to this effort. Given the potentially different definitions in use, a direct transplant might be challenging. Regardless, is there something I can make a contribution?  I'm considering porting some theorems about computability to Mathlib.</p>",
        "id": 403845658,
        "sender_full_name": "Palalansoukî",
        "timestamp": 1700766813
    },
    {
        "content": "<p>Great work!</p>",
        "id": 403850936,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1700770721
    },
    {
        "content": "<p>I'm the one who made that note about that approach to incompleteness - along with adding most of the Model_Theory folder, building initially on work by <span class=\"user-mention\" data-user-id=\"111080\">@Floris van Doorn</span> and <span class=\"user-mention\" data-user-id=\"116045\">@Jesse Michael Han</span>.<br>\nI haven't had much time to work on mathlib for a while, so I'm unlikely to try very hard to work on that direction soon.</p>",
        "id": 403851073,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1700770819
    },
    {
        "content": "<p>Thus I'm not sure what I'd recommend as an immediate next step, but I'd be happy to talk over potential plans.</p>",
        "id": 403851340,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1700770985
    },
    {
        "content": "<p>Regarding updating freeks list. If you make a PR to mathlib editing the file <code>docs/100.yaml</code> adding a link to your repo (you can look at independence of CH as an example for the format), this will update the mathlib website. One of the maintainers generally emails freek periodically to ask him to update his page with our new theorems I think rather than mailing him every time, but this may indeed be a good opportunity for someone to mail him.</p>",
        "id": 403851928,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1700771454
    },
    {
        "content": "<p>If we pick up the fundamental theorem of symmetric polynomials and Lindemann, there'd be even more :)</p>",
        "id": 403852931,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1700772229
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"302826\">Aaron Anderson</span> <a href=\"#narrow/stream/113488-general/topic/G.C3.B6del's.20first.20incompleteness.20theorem/near/403851340\">said</a>:</p>\n<blockquote>\n<p>Thus I'm not sure what I'd recommend as an immediate next step, but I'd be happy to talk over potential plans.</p>\n</blockquote>\n<p>In the context of the computability of formulae and terms, Lean4-logic has proven the primitive recursiveness of the <code>WType</code> satisfying some conditions. <a href=\"https://github.com/iehality/lean4-logic/blob/master/Logic/Vorspiel/W.lean\">Link to the proof</a>. I believe this approach presents several advantages compared to current strategies.</p>\n<ol>\n<li>\n<p>The recursion of <code>WType</code> is likely simpler and more straightforward to prove than specific recursion for formulae and terms.</p>\n</li>\n<li>\n<p>Many countable types, including formula and term, are isomorphic to <code>WType</code> or its subtypes. This fact enables us to prove that numerous types are <code>Primcodable</code>, and their recursion is primitive recursive.</p>\n</li>\n</ol>\n<p>One issue with this approach is its significant inefficiency (for example, <code>encode “0 = 1”</code> is <a href=\"https://github.com/iehality/lean4-logic/blob/ad5f85ff7c8388f8fedcbf05dbbe560ea76c5266/Logic/FirstOrder/Computability/Formula.lean#L841\">too huge for computers to handle</a>). but from a mathematical standpoint, there may be no problem.</p>",
        "id": 403926484,
        "sender_full_name": "Palalansoukî",
        "timestamp": 1700816625
    },
    {
        "content": "<p>Additionally, it is necessary to prove that the graph of partial recursive functions can be expressed in <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi mathvariant=\"normal\">Σ</mi><mn>1</mn></msub></mrow><annotation encoding=\"application/x-tex\">\\Sigma_1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord\">Σ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> formula of arithmetic​. This is proved by the equivalence of the class <code>ArithPart₁</code> (the name might be inappropriate; <code>Sigma₁</code> might be more suitable?) defined below and the class <code>Primrec'</code>.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">ArithPart₁</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">n</span><span class=\"o\">},</span> <span class=\"o\">(</span><span class=\"n\">Vector</span> <span class=\"n\">ℕ</span> <span class=\"n\">n</span> <span class=\"bp\">→.</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n  <span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"o\">{</span><span class=\"n\">n</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">ArithPart₁</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">one</span> <span class=\"o\">{</span><span class=\"n\">n</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">ArithPart₁</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">add</span> <span class=\"o\">{</span><span class=\"n\">n</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">ArithPart₁</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">v</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">v.get</span> <span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"n\">v.get</span> <span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">Vector</span> <span class=\"n\">ℕ</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">mul</span> <span class=\"o\">{</span><span class=\"n\">n</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">ArithPart₁</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">v</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">v.get</span> <span class=\"n\">i</span> <span class=\"bp\">*</span> <span class=\"n\">v.get</span> <span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">Vector</span> <span class=\"n\">ℕ</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">proj</span> <span class=\"o\">{</span><span class=\"n\">n</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">ArithPart₁</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">v</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">v.get</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Vector</span> <span class=\"n\">ℕ</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">equal</span> <span class=\"o\">{</span><span class=\"n\">n</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">ArithPart₁</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">v</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">isEqNat</span> <span class=\"o\">(</span><span class=\"n\">v.get</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">v.get</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Vector</span> <span class=\"n\">ℕ</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">lt</span> <span class=\"o\">{</span><span class=\"n\">n</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">ArithPart₁</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">v</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">isLtNat</span> <span class=\"o\">(</span><span class=\"n\">v.get</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">v.get</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Vector</span> <span class=\"n\">ℕ</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">comp</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"n\">f</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">Vector</span> <span class=\"n\">ℕ</span> <span class=\"n\">m</span> <span class=\"bp\">→.</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">ArithPart₁</span> <span class=\"n\">f</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">ArithPart₁</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"n\">i</span><span class=\"o\">))</span> <span class=\"bp\">→</span> <span class=\"n\">ArithPart₁</span> <span class=\"k\">fun</span> <span class=\"n\">v</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">mOfFn</span> <span class=\"k\">fun</span> <span class=\"n\">i</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">g</span> <span class=\"n\">i</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"n\">f</span>\n  <span class=\"bp\">|</span> <span class=\"n\">rfind</span> <span class=\"o\">{</span><span class=\"n\">n</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Vector</span> <span class=\"n\">ℕ</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n    <span class=\"n\">ArithPart₁</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">f</span> <span class=\"bp\">→</span> <span class=\"n\">ArithPart₁</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">v</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rfind</span> <span class=\"k\">fun</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">some</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">::</span><span class=\"bp\">ᵥ</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">))</span>\n</code></pre></div>\n<p>I believe proving this fact in Mathlib is relatively straightforward. Initially, I am considering porting these two to Mathlib.</p>",
        "id": 403930081,
        "sender_full_name": "Palalansoukî",
        "timestamp": 1700818035
    },
    {
        "content": "<p>Congratulations <span class=\"user-mention\" data-user-id=\"414485\">@Palalansoukî</span>; this is impressive. I would be interested to help port this to mathlib. The work seems huge even focusing on key theorems--submitting additions outside logic, removing overlaps, adding documentation, etc. There are 11K lines over 50 files and maintainers prefer 30-300 lines per PR. A good place to start might be the first two hundred lines of <a href=\"https://github.com/iehality/lean4-logic/blob/master/Logic/Vorspiel/Arith.lean\">arith</a> that would add to Nat and then additions <a href=\"https://github.com/iehality/lean4-logic/blob/master/Logic/Vorspiel/Vorspiel.lean\">elsewhere</a>.</p>",
        "id": 405710884,
        "sender_full_name": "Hunter Monroe",
        "timestamp": 1701648110
    },
    {
        "content": "<p>Many of the theorems proved in Arith (mainly about Gödel's beta function lemma and computability) are natural extensions of Mathlib, and I agree that Arith is certainly a good place to start.</p>",
        "id": 405764624,
        "sender_full_name": "Palalansoukî",
        "timestamp": 1701675778
    },
    {
        "content": "<p>We have submitted PR <a href=\"https://github.com/leanprover-community/mathlib4/pull/8887\">#8887</a> which incorporates code for Godel's Beta Function, drawing from the lean4-logic repository. This code is a step towards eventually including a proof of Gödel's First Incompleteness Theorem<br>\nand other key results from the repository <a href=\"https://github.com/iehality/lean4-logic\">https://github.com/iehality/lean4-logic</a>.</p>",
        "id": 406679657,
        "sender_full_name": "Hunter Monroe",
        "timestamp": 1702011024
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> could you look at <a href=\"https://github.com/leanprover-community/mathlib4/pull/8619\">#8619</a>, which will eventually be needed to include Godel's First Incompleteness Theorem in mathlib, from lean4-logic? Lean4-logic by <span class=\"user-mention\" data-user-id=\"414485\">@Palalansoukî</span>  uses nat_omega_rec in several places. Many thanks.</p>",
        "id": 406751858,
        "sender_full_name": "Hunter Monroe",
        "timestamp": 1702039672
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> could you help with two strategic questions? First, what would be a sensible likely successful approach to including <span class=\"user-mention\" data-user-id=\"414485\">@Palalansoukî</span> proof of Gödel's first incompleteness theorem and possibly Godel's completeness theorem in mathlib? Is this a realistic endeavor? His repository logic4-lean has 10K lines of code--so should the emphasis be on extracting minimal proofs that integrate tightly with mathlib's code on model theory etc? As suggested by <span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> he has separated some coprime theorems <a href=\"https://github.com/leanprover-community/mathlib4/pull/9005\">#9005</a> from Godel's Beta Function <a href=\"https://github.com/leanprover-community/mathlib4/pull/8887\">#8887</a>, and his proof also depends on <a href=\"https://github.com/leanprover-community/mathlib4/pull/8619\">#8619</a> which you have seen.   </p>\n<p>Second, what would represent a minimum viable pull request on complexity theory? My PR <a href=\"https://github.com/leanprover-community/mathlib4/pull/8931\">#8931</a> has definitions of P, NP, NP-Completeness, and poly time reductions, without theorems. I could readily add an example of a language in P and NP, consisting of every bit string, with a TM that returns \"[true]\" on any input. Going further eg an example of NP completeness would require universal TM via bounded halting, and Cook Levin is even harder. Showing that poly time reducibility is transitive would require composability of TMs. After rereading three years of discussions and seeing all the failed PRs, I wanted to understand what is needed for a successful PR before investing more time.</p>\n<p>Thanks!</p>",
        "id": 407779455,
        "sender_full_name": "Hunter Monroe",
        "timestamp": 1702489394
    },
    {
        "content": "<p>My main suggestion is to break things into small pieces and make sure that things are integrated well with the rest of the library</p>",
        "id": 407779744,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1702489520
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/8931\">#8931</a> is a bit too definition-heavy. I think a MVP PR should have one definition and a handful of theorems about it</p>",
        "id": 407780264,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1702489694
    },
    {
        "content": "<p>like, even the <code>BitString</code> definition is likely to cause discussion</p>",
        "id": 407780380,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1702489744
    },
    {
        "content": "<p>It is impossible to define whether an arbitrary type is in P. With a unary alphabet, P=NP.  With a sufficiently inefficient encoding, anything computable is in P (use unary and append the time to halt with separator character). If the encoding encrypts strings, nothing is in P (if one way functions exist). Replacing <code>BitString</code> (<code>List Bool</code>) with <code>List Γ</code> with a finite nonunary alphabet is an option. I will hold off on any work until that issue is sorted out. (My tone is exaggerated on purpose, tell me if I have missed the point.)</p>",
        "id": 407788430,
        "sender_full_name": "Hunter Monroe",
        "timestamp": 1702492597
    },
    {
        "content": "<p>Note that <code>Primcodable</code> is built to handle exactly this issue</p>",
        "id": 407788618,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1702492676
    },
    {
        "content": "<p>it doesn't really matter if weird instances exist, because we use canonical instances to prove all the interesting theorems</p>",
        "id": 407788844,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1702492752
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113488-general/topic/G.C3.B6del's.20first.20incompleteness.20theorem/near/407780380\">said</a>:</p>\n<blockquote>\n<p>like, even the <code>BitString</code> definition is likely to cause discussion</p>\n</blockquote>\n<p>Because it should be <code>abbrev</code> instead?</p>",
        "id": 408004307,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1702573234
    }
]