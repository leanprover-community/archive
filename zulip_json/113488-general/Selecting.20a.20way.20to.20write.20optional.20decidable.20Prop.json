[
    {
        "content": "<p>I'm trying to write a property on <code>op : option Prop</code> which states that the <code>Prop</code> it contains when it is <code>some</code> variant is decidable, and came up with several ways:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[reducible]</span>\n<span class=\"kd\">def</span> <span class=\"n\">optional_decidable₁</span> <span class=\"o\">(</span><span class=\"n\">op</span> <span class=\"o\">:</span> <span class=\"n\">option</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"n\">fact</span> <span class=\"bp\">$</span> <span class=\"n\">true</span> <span class=\"bp\">&lt;|</span> <span class=\"o\">(</span><span class=\"n\">nonempty</span> <span class=\"bp\">∘</span> <span class=\"n\">decidable</span><span class=\"o\">)</span> <span class=\"bp\">&lt;$&gt;</span> <span class=\"n\">op</span>\n\n<span class=\"kd\">@[reducible]</span>\n<span class=\"kd\">def</span> <span class=\"n\">optional_decidable₂</span> <span class=\"o\">(</span><span class=\"n\">op</span> <span class=\"o\">:</span> <span class=\"n\">option</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"n\">fact</span> <span class=\"bp\">$</span> <span class=\"n\">option.cases_on</span> <span class=\"n\">op</span> <span class=\"n\">true</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">nonempty</span> <span class=\"o\">(</span><span class=\"n\">decidable</span> <span class=\"n\">p</span><span class=\"o\">))</span>\n\n<span class=\"kd\">@[reducible]</span>\n<span class=\"kd\">def</span> <span class=\"n\">optional_decidable₃</span> <span class=\"o\">(</span><span class=\"n\">op</span> <span class=\"o\">:</span> <span class=\"n\">option</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"n\">fact</span> <span class=\"bp\">$</span> <span class=\"k\">match</span> <span class=\"n\">op</span> <span class=\"k\">with</span> <span class=\"bp\">|</span> <span class=\"n\">none</span> <span class=\"o\">:=</span> <span class=\"n\">true</span> <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">nonempty</span> <span class=\"o\">(</span><span class=\"n\">decidable</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"kd\">end</span>\n\n<span class=\"kd\">@[reducible]</span>\n<span class=\"kd\">def</span> <span class=\"n\">optional_decidable₄</span> <span class=\"o\">:</span> <span class=\"n\">option</span> <span class=\"kt\">Prop</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"n\">fact</span> <span class=\"bp\">∘</span> <span class=\"n\">option.elim</span> <span class=\"n\">true</span> <span class=\"o\">(</span><span class=\"n\">nonempty</span> <span class=\"bp\">∘</span> <span class=\"n\">decidable</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>(I made it a type class to be able to infer <code>decidable</code> instance when using e.g. <code>option.get</code> or <code>option.lhoare</code>. The intended use is to automate <code>decidable</code> inference of predicates on an <code>option</code> that use the contained value.)<br>\nThe definitions should be equivalent, but is there a practical reason to choose one over the other?</p>",
        "id": 375655253,
        "sender_full_name": "Naruyoko",
        "timestamp": 1689472742
    },
    {
        "content": "<p>(I'm also having trouble extracting the <code>decidable</code> instance, as <code>cases</code> and similar seem to produce a wrong sort)</p>",
        "id": 375678812,
        "sender_full_name": "Naruyoko",
        "timestamp": 1689487488
    },
    {
        "content": "<p>You can't put your typeclass in <code>Prop</code>, then computably extract a <code>decidable</code> instance because the latter contains data.</p>",
        "id": 375680515,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1689488518
    },
    {
        "content": "<p>I see</p>",
        "id": 375680890,
        "sender_full_name": "Naruyoko",
        "timestamp": 1689488661
    },
    {
        "content": "<p>My current end goal for doing this is to be able to write things like \"option (is none or | is not none and) its contained value satisfies a predicate\" and \"two options are <code>some</code> and the contained values satisfies a relation,\" and I figured using <code>lhoare</code> and <code>map</code> is a good way to do this. However, I am starting to think the simpler way is to just use <code>option.elim</code>, define a single <code>decidable</code> instance on it, and pass an option of a product when I need to check two values.</p>",
        "id": 375681802,
        "sender_full_name": "Naruyoko",
        "timestamp": 1689489114
    }
]