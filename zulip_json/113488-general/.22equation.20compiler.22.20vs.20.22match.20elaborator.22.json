[
    {
        "content": "<p>I'm trying to understand the terminology \"equation compiler\" (as used, for example, in <a href=\"https://github.com/leanprover/lean4/blob/77ee031172ba6a0d0871731b2a780be2c5ed093b/doc/declarations.md#the-equation-compiler\">these docs</a>).</p>\n<p>To me, the word \"compiler\" here is a bit confusing, as \"compiler\" is already heavily overloaded in describing other parts of Lean.</p>\n<p>Would it be inaccurate to instead call it a \"match elaborator\"?</p>\n<hr>\n<p>To be more concrete, is there a situation where the \"equation compiler\" does something observably different from shallowly expanding to a match?</p>\n<p>For example, this declaration</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">append_eqn_compiler</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">List</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">List</span> <span class=\"n\">α</span>\n<span class=\"bp\">|</span> <span class=\"o\">[],</span>   <span class=\"n\">l</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">l</span>\n<span class=\"bp\">|</span> <span class=\"n\">h</span><span class=\"o\">::</span><span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">l</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">h</span> <span class=\"o\">::</span> <span class=\"n\">append_eqn_compiler</span> <span class=\"n\">t</span> <span class=\"n\">l</span>\n</code></pre></div>\n<p>can be rewritten as</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">append_match</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">l1</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">l2</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"k\">match</span> <span class=\"n\">l1</span><span class=\"o\">,</span> <span class=\"n\">l2</span> <span class=\"k\">with</span>\n<span class=\"bp\">|</span> <span class=\"o\">[],</span>   <span class=\"n\">l</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">l</span>\n<span class=\"bp\">|</span> <span class=\"n\">h</span><span class=\"o\">::</span><span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">l</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">h</span> <span class=\"o\">::</span> <span class=\"n\">append_match</span> <span class=\"n\">t</span> <span class=\"n\">l</span>\n<span class=\"bp\">``</span>\n</code></pre></div>",
        "id": 402045449,
        "sender_full_name": "David Renshaw",
        "timestamp": 1699987078
    },
    {
        "content": "<p>Yes -- the equation compiler is responsible for taking this high-level pattern matching syntax, which give the equations that your recursive definition must satisfy, and then lowers it down (and compiling it) to the recursors for the inductive types. It also generates equation lemmas you can use to unfold definitions using these equations.</p>",
        "id": 402047136,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1699987642
    },
    {
        "content": "<p>So do those things not get generated in the second example (<code>append_match</code>)? Or does the equation compiler act on the <code>match</code> there too?</p>",
        "id": 402047404,
        "sender_full_name": "David Renshaw",
        "timestamp": 1699987757
    },
    {
        "content": "<p>I don't know the internals, but my mental model is that the equation compiler is responsible for eliminating recursive internal <code>match</code>es (so it's definitely not just expanding the first syntax into the second). In fact, this is a fancy new feature of Lean 4 that Lean 3 didn't have. You had to write recursive definitions the first way.</p>",
        "id": 402047475,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1699987793
    },
    {
        "content": "<p>Here's a quick case study. Take a look at <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Nat.add#doc\">docs#Nat.add</a>, which is defined using equations. This is what you get if you <code>#print Nat.add</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">protected</span> <span class=\"kd\">def</span> <span class=\"n\">Nat.add</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span>\n<span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">x_1</span> <span class=\"bp\">↦</span>\n  <span class=\"n\">Nat.brecOn</span> <span class=\"o\">(</span><span class=\"n\">motive</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">↦</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"n\">x_1</span>\n    <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">f</span> <span class=\"n\">x_2</span> <span class=\"bp\">↦</span>\n      <span class=\"o\">(</span><span class=\"k\">match</span> <span class=\"o\">(</span><span class=\"n\">motive</span> <span class=\"o\">:=</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">Nat.below</span> <span class=\"o\">(</span><span class=\"n\">motive</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">↦</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"n\">x_2</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"k\">with</span>\n        <span class=\"bp\">|</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">Nat.zero</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">↦</span> <span class=\"n\">a</span>\n        <span class=\"bp\">|</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">Nat.succ</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">↦</span> <span class=\"n\">Nat.succ</span> <span class=\"o\">(</span><span class=\"n\">PProd.fst</span> <span class=\"n\">x.fst</span> <span class=\"n\">a</span><span class=\"o\">))</span>\n        <span class=\"n\">f</span><span class=\"o\">)</span>\n    <span class=\"n\">x</span>\n</code></pre></div>\n<p>That's what the equation compiler generated to eliminate the explicit recursion.</p>",
        "id": 402048004,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1699987955
    },
    {
        "content": "<p>what is it about this that makes it more than just \"elaboration\"? I suppose maybe it's a more involved and more global form of elaboration? Or something happening at some other phase?</p>",
        "id": 402048014,
        "sender_full_name": "David Renshaw",
        "timestamp": 1699987959
    },
    {
        "content": "<p>I guess you could say that it's part of the <code>def</code>/<code>theorem</code>/etc. command elaborator, but the name \"equation compiler\" goes back to before those were called elaborators. It's also clearly a kind of compilation, though \"elaboration\" in general is some phase of compilation too -- I'm not sure there's any real distinction.</p>",
        "id": 402048768,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1699988153
    },
    {
        "content": "<p>There's a nice diagram of the Lean architecture that I can't find again, but what I remember is that once you get a fully elaborated definition, then on one hand it goes to the equation compiler to make the actual expression that gets fed to the Lean environment for theory purposes, and on the other hand it goes to the compiler that lowers it to IR and then to C, for execution purposes.</p>",
        "id": 402049885,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1699988477
    },
    {
        "content": "<p>Maybe that's justification enough for \"equation <em>compiler</em>\" instead of \"<em>elaborator</em>\"?</p>",
        "id": 402050010,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1699988513
    },
    {
        "content": "<p>Yeah, that's a related thing I'm trying to get a handle on: exactly where that split happens, between kernel/theory reduction and IR/native evaluation.</p>",
        "id": 402050932,
        "sender_full_name": "David Renshaw",
        "timestamp": 1699988777
    },
    {
        "content": "<p>You're telling me that the equation compiler does <em>not</em> apply to the IR/native path, which is contrary to what I was expecting.</p>",
        "id": 402051003,
        "sender_full_name": "David Renshaw",
        "timestamp": 1699988811
    },
    {
        "content": "<p>Also, the comment on <code>Nat.add</code> seems to imply that there are actually 3 ways that lean code can execute: kernel, compiled, and \"logical\":</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/--</span>\n<span class=\"sd\">Addition of natural numbers.</span>\n\n<span class=\"sd\">This definition is overridden in both the kernel and the compiler to efficiently</span>\n<span class=\"sd\">evaluate using the \"bignum\" representation (see `Nat`). The definition provided</span>\n<span class=\"sd\">here is the logical model (and it is soundness-critical that they coincide).</span>\n<span class=\"sd\">-/</span>\n</code></pre></div>\n<p>I had thought that \"kernel\" and \"logical\" were the same thing. So that's more for me to chew on...</p>",
        "id": 402051476,
        "sender_full_name": "David Renshaw",
        "timestamp": 1699988998
    },
    {
        "content": "<p>/me goes back to reading the source code</p>",
        "id": 402051539,
        "sender_full_name": "David Renshaw",
        "timestamp": 1699989008
    },
    {
        "content": "<p>That's a special deal just for <code>Nat.add</code>, normally kernel and \"logical\" do coincide but the kernel explicitly looks out for occurrences of the <code>Nat.add</code> function and does something else instead of naive reduction on it so if the body of <code>Nat.add</code> is something else then bad things happen</p>",
        "id": 402161025,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1700032479
    },
    {
        "content": "<p>Bad things:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">prelude</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">autoImplicit</span> <span class=\"n\">false</span>\n\n<span class=\"kd\">universe</span> <span class=\"n\">u</span>\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">Eq</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span> <span class=\"n\">where</span>\n  <span class=\"sd\">/-- `Eq.refl a : a = a` is reflexivity, the unique constructor of the</span>\n<span class=\"sd\">  equality type. See also `rfl`, which is usually used instead. -/</span>\n  <span class=\"bp\">|</span> <span class=\"n\">refl</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Eq</span> <span class=\"n\">a</span> <span class=\"n\">a</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">Nat</span> <span class=\"n\">where</span>\n  <span class=\"sd\">/-- `Nat.zero`, normally written `0 : Nat`, is the smallest natural number.</span>\n<span class=\"sd\">  This is one of the two constructors of `Nat`. -/</span>\n  <span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span>\n  <span class=\"sd\">/-- The successor function on natural numbers, `succ n = n + 1`.</span>\n<span class=\"sd\">  This is one of the two constructors of `Nat`. -/</span>\n  <span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span>\n\n\n<span class=\"kd\">def</span> <span class=\"n\">Nat.add</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">@&amp;</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">@&amp;</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"bp\">.</span><span class=\"n\">zero</span>\n<span class=\"kd\">def</span> <span class=\"n\">Nat.add2</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">@&amp;</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">@&amp;</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"bp\">.</span><span class=\"n\">zero</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">eq1</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">):</span> <span class=\"n\">Eq</span> <span class=\"o\">(</span><span class=\"n\">Nat.add</span> <span class=\"n\">x</span> <span class=\"n\">Nat.zero</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Nat.add2</span> <span class=\"n\">x</span> <span class=\"n\">Nat.zero</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">Eq.refl</span> <span class=\"n\">_</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">eq2</span> <span class=\"o\">:</span> <span class=\"n\">Eq</span> <span class=\"o\">(</span><span class=\"n\">Nat.add</span> <span class=\"bp\">.</span><span class=\"n\">zero</span> <span class=\"bp\">.</span><span class=\"n\">zero</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Nat.add2</span> <span class=\"bp\">.</span><span class=\"n\">zero</span> <span class=\"bp\">.</span><span class=\"n\">zero</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">eq1</span> <span class=\"n\">_</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">eq3</span> <span class=\"o\">:</span> <span class=\"n\">Eq</span> <span class=\"o\">(</span><span class=\"n\">Nat.zero</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"bp\">.</span><span class=\"n\">zero</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">eq2</span>\n</code></pre></div>",
        "id": 402200131,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1700044604
    },
    {
        "content": "<p>This even passes <code>lean4checker</code>. (<a href=\"https://github.com/leanprover/lean4checker/pull/3\">https://github.com/leanprover/lean4checker/pull/3</a>). Clearly, this falls under “don’t do it”, but probably there should be some protection against that? Either <code>lean4checker</code> should prevent the use of <code>prelude</code>, or (better) the kernel should not accept a definition for <code>Nat.add</code> besides the expected one?</p>",
        "id": 402204011,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1700045873
    },
    {
        "content": "<p>This is a known issue, currently considered out of scope because of lack of manpower</p>",
        "id": 402204173,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1700045921
    },
    {
        "content": "<p>The quotient module does actually check that the <code>Eq</code> type looks as expected</p>",
        "id": 402204308,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1700045974
    },
    {
        "content": "<p>but in general one would need to set up something a lot more sophisticated to do this checking because it's unbearably verbose to do the checking right now</p>",
        "id": 402204459,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1700046012
    },
    {
        "content": "<p>The kernel seems to define a printer:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">//</span> <span class=\"n\">Low</span> <span class=\"n\">level</span> <span class=\"o\">(</span><span class=\"n\">raw</span><span class=\"o\">)</span> <span class=\"n\">printing</span>\n<span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">ostream</span> <span class=\"bp\">&amp;</span> <span class=\"n\">operator</span><span class=\"bp\">&lt;&lt;</span><span class=\"o\">(</span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">ostream</span> <span class=\"bp\">&amp;</span> <span class=\"n\">out</span><span class=\"o\">,</span> <span class=\"n\">expr</span> <span class=\"n\">const</span> <span class=\"bp\">&amp;</span> <span class=\"n\">e</span><span class=\"o\">)</span><span class=\"bp\">;</span>\n</code></pre></div>\n<p>so hard-coding the expected output and checking against that (assuming the raw printer has all details) might be of acceptable verbosity.<br>\n(Not a priority, if the out-of-scopeness is clearly documented.)</p>\n<p>(Hmm, nevermind, the actual implemenntation is outside of <code>kernel/</code>, and so this wouldn’t work without increasing the TCB.)</p>",
        "id": 402206415,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1700046612
    },
    {
        "content": "<p>maybe we can do this if lean4lean replaces the kernel, since then we can use more convenient expr construction functions and/or read the expr construction of <code>Nat.add</code> itself for bootstrapping <span aria-label=\"kiss smiling eyes\" class=\"emoji emoji-1f619\" role=\"img\" title=\"kiss smiling eyes\">:kiss_smiling_eyes:</span><span aria-label=\"pinched fingers\" class=\"emoji emoji-1f90c\" role=\"img\" title=\"pinched fingers\">:pinched_fingers:</span></p>",
        "id": 402207440,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1700046944
    },
    {
        "content": "<p>Is the version of lean4lean that replaces the kernel going to be called 2lean4lean?</p>",
        "id": 402207991,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1700047094
    },
    {
        "content": "<p>Let me just add for extra clarification that this is neither a new issue, or one with with practical impact. It’s tracked at <a href=\"https://github.com/leanprover/lean4/issues/188\">https://github.com/leanprover/lean4/issues/188</a>.</p>",
        "id": 402275096,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1700063767
    }
]