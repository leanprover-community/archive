[
    {
        "content": "<p>How do I check which <code>variables</code> are in scope in a certain part of a lean file.</p>",
        "id": 127200270,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527504609
    },
    {
        "content": "<p>impossible, I'm afraid</p>",
        "id": 127200274,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527504617
    },
    {
        "content": "<p>you can't</p>",
        "id": 127200276,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527504619
    },
    {
        "content": "<p>Bleeh</p>",
        "id": 127200277,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527504624
    },
    {
        "content": "<p>Who understands lean3 variables?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"bp\">𝕜</span><span class=\"o\">)</span>\n<span class=\"sd\">/-- Expand the square -/</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">norm_add_sq</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">‖</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"bp\">‖^</span><span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"bp\">‖</span><span class=\"n\">x</span><span class=\"bp\">‖^</span><span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">re</span> <span class=\"bp\">⟪</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"bp\">⟫</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"bp\">‖</span><span class=\"n\">y</span><span class=\"bp\">‖^</span><span class=\"mi\">2</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">repeat</span> <span class=\"o\">{</span><span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">sq</span><span class=\"o\">,</span> <span class=\"bp\">←@</span><span class=\"n\">inner_self_eq_norm_mul_norm</span> <span class=\"bp\">𝕜</span><span class=\"o\">]},</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">inner_add_add_self</span><span class=\"o\">,</span> <span class=\"n\">two_mul</span><span class=\"o\">],</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">add_assoc</span><span class=\"o\">,</span> <span class=\"n\">add_left_inj</span><span class=\"o\">,</span> <span class=\"n\">add_right_inj</span><span class=\"o\">,</span> <span class=\"n\">add_monoid_hom.map_add</span><span class=\"o\">],</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">inner_conj_symm</span><span class=\"o\">,</span> <span class=\"n\">conj_re</span><span class=\"o\">],</span>\n<span class=\"kd\">end</span>\n\n<span class=\"k\">#check</span> <span class=\"bp\">@</span><span class=\"n\">norm_add_sq</span>\n<span class=\"c1\">-- norm_add_sq :</span>\n<span class=\"c1\">--  ∀ {𝕜 : Type u_4} {E : Type u_5} [_inst_1 : is_R_or_C 𝕜] [_inst_2 : normed_add_comm_group E]</span>\n<span class=\"c1\">--  [_inst_3 : inner_product_space 𝕜 E] (x y : E), ‖x + y‖ ^ 2 = ‖x‖ ^ 2 + 2 * ⇑re (inner x y) + ‖y‖ ^ 2</span>\n</code></pre></div>",
        "id": 364018348,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1686061309
    },
    {
        "content": "<p>This is a quirk in <code>local notation</code>, but you didn't make your mwe in a way that shows it's being used</p>",
        "id": 364018633,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1686061371
    },
    {
        "content": "<p>yeah, this is something I noticed while porting. <span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> I think when you refactored <code>inner_product_space</code>and added these <code>variable (𝕜)</code> lines, a lot of them didn't end up applying because of the <code>local notation</code>s present. In Lean 4 I think they work properly though, so I didn't worry about it. (It just made it slightly confusing during porting because suddenly declarations which <em>didn't</em> need an explicit <code>𝕜</code> in Lean 3 all of a sudden needed one in Lean 4.)</p>\n<p>Ruben, basically, if you do</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"bp\">𝕜</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span>\n\n<span class=\"kn\">local</span> <span class=\"kd\">notation</span> <span class=\"n\">my_notation</span> <span class=\"o\">:=</span> <span class=\"n\">some_decl</span> <span class=\"bp\">𝕜</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"bp\">𝕜</span><span class=\"o\">)</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">foo_involving_my_notation</span> <span class=\"o\">:</span> <span class=\"bp\">...</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>then <code>𝕜</code> is not explicit in <code>foo_involving_my_notation</code> despite the variable update because of the presence of <code>my_notation</code>, which was declared when <code>𝕜</code> was implicit.</p>",
        "id": 364021807,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1686062051
    },
    {
        "content": "<p>Thanks for the explanation!</p>",
        "id": 364036056,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1686064907
    }
]