[
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/113488-general/topic/Lean.20in.20the.20wild/near/387810530\">said</a>:</p>\n<blockquote>\n<p><a href=\"http://leanprover.github.io/talks/WITS2023.pdf\">Slides</a> from Sebastian's keynote at <a href=\"https://ifl23.github.io/wits.html\">WITS 23</a>.</p>\n<p>He talks about public signatures for Lean modules, <code>private import</code> and <code>import ... for meta</code>. I'm not sure if there will be a video.</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> This reminds me of a feature I have been considering while watching mathport compile 2/3 of mathlib: We could have a <code>noncomputable import Foo.Bar</code>, which means \"don't load any compiler IR from this file\". The effect is that <em>from the perspective of the importing file only</em> all declarations in the module are <code>noncomputable</code>, but this is has no effect on transitive dependencies, unless one of the declarations in the current file becomes <code>noncomputable</code> as a result. You can still import other modules computably, and an imported module is considered noncomputable only if there are no regular (transitive) imports of the file. The idea is that if lake sees a <code>noncomputable import</code> it knows that while the lean files are in a dependency relationship, the c files are not, which hopefully significantly decreases the number of c files that have to be compiled when you have a project like mathport that has some very \"advanced\" imports but there is almost no actual compilable code involved so all the <code>Compiling</code> is pointless.</p>",
        "id": 387812926,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1693288647
    },
    {
        "content": "<p>(Note that mathport currently depends on about 2700 files in mathlib right now, and while <code>lake exe cache get</code> can download the oleans, you still have to compile the .c -&gt; .o files locally. I think this takes about 5 minutes. The reason it has to import so much is because it needs the syntax declaration for every tactic in mathlib, via the <code>Mathlib.Mathport.Syntax</code> file, and these syntax declarations are littered throughout the code, including things like the witt vector tactics that sit on top of a sizable fraction of mathlib.)</p>",
        "id": 387813118,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1693288793
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> You still want to import some IR in order to actually run those notations, no? But if that only needs to happen at build time and no mathlib parts should be part of the final binary, then that sounds exactly like a job for a phase separation system.</p>",
        "id": 387830804,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1693297202
    },
    {
        "content": "<p>Well, the constraint is that you can't produce any declarations that depend on the upstream compiled code</p>",
        "id": 387831013,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1693297282
    },
    {
        "content": "<p>you could still make use of the IR at build time</p>",
        "id": 387831037,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1693297293
    },
    {
        "content": "<p>We seem to be saying the same thing</p>",
        "id": 387904626,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1693322351
    },
    {
        "content": "<p>A recording should be available eventually</p>",
        "id": 387904660,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1693322366
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> Same thing meaning that <code>noncomputable import</code> maps exactly to one of your proposed import variants? Is this what <code>import Foo for meta</code> is supposed to do?</p>",
        "id": 388020312,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1693364944
    },
    {
        "content": "<p>That syntax implies that you are considering other kinds of imports. Could you list all the variants you have considered?</p>",
        "id": 388020400,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1693364997
    }
]