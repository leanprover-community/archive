[
    {
        "content": "<p>I just came across this very nice list of \"fundamental theorems\" in many different areas of mathematics:<br>\n<a href=\"http://people.math.harvard.edu/~knill/graphgeometry/papers/fundamental.pdf\">http://people.math.harvard.edu/~knill/graphgeometry/papers/fundamental.pdf</a></p>",
        "id": 206032542,
        "sender_full_name": "Reid Barton",
        "timestamp": 1596639611
    },
    {
        "content": "<p>This is what I wish the 100 theorems list looked like.</p>",
        "id": 206032561,
        "sender_full_name": "Reid Barton",
        "timestamp": 1596639626
    },
    {
        "content": "<p>I'm curious how much of these we have - we could have a list parallel to <a href=\"https://leanprover-community.github.io/100.html\">our freek list</a></p>",
        "id": 206033073,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1596639881
    },
    {
        "content": "<p>yeah this is fantastic. I should get back to NSS!</p>",
        "id": 206034054,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1596640318
    },
    {
        "content": "<p>NSS?</p>",
        "id": 206035676,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1596640897
    },
    {
        "content": "<p>aka Theorem 12</p>",
        "id": 206035778,
        "sender_full_name": "Reid Barton",
        "timestamp": 1596640925
    },
    {
        "content": "<p>ahh nullstellensatz, that makes sense!</p>",
        "id": 206035852,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1596640952
    },
    {
        "content": "<p>\"NLLSTZ\"</p>",
        "id": 206035959,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1596641003
    },
    {
        "content": "<p>ooh, just like Mizar</p>",
        "id": 206036007,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1596641019
    },
    {
        "content": "<p>gotta love 8.3 theorem names</p>",
        "id": 206036115,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1596641051
    },
    {
        "content": "<p>I find it kind of funny that the list contains both green-tao and the pigeonhole principle as equals</p>",
        "id": 206036155,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1596641069
    },
    {
        "content": "<p>Yeah, there's quite a wide range in that regard, and also a few of these are not theorems at all</p>",
        "id": 206036251,
        "sender_full_name": "Reid Barton",
        "timestamp": 1596641114
    },
    {
        "content": "<p>number 136 is curious</p>",
        "id": 206037280,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1596641556
    },
    {
        "content": "<p>Yeah, there's one or two more like that one too.</p>",
        "id": 206037376,
        "sender_full_name": "Reid Barton",
        "timestamp": 1596641617
    },
    {
        "content": "<p>113?? :-) \"A theorem of Lebowski\".</p>",
        "id": 206088094,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1596668355
    },
    {
        "content": "<p>We really should scrape the theorem statements from this and pop them up in a yaml file, and mark what we have.</p>",
        "id": 206088277,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1596668464
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/113488-general/topic/lots.20of.20theorems/near/206088094\">said</a>:</p>\n<blockquote>\n<p>113?? :-) \"A theorem of Lebowski\".</p>\n</blockquote>\n<p>It would really tie mathlib together.</p>",
        "id": 206089053,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1596669123
    },
    {
        "content": "<p>There is a version on the arxiv, with latex sources available, but it is shorter than the one on his webpage.</p>",
        "id": 206089086,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1596669160
    },
    {
        "content": "<p>Oliver says we are welcome to use his list, and he gave me the latex source and gave permission to use it. (He also said he's interested in adding a paragraph about interactive theorem provers in the second half of his article.)</p>\n<p>I've made a yaml file out of it: is there anyone interested in taking over to make a html template file?</p>\n<p>My yaml file currently looks like:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"nt\">5</span><span class=\"p\">:</span>\n  <span class=\"nt\">area </span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">Probability</span>\n  <span class=\"nt\">satz </span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">$\\overline{(X_1+X_2+ \\cdots + X_n)} \\to Z$ in distribution.</span>\n  <span class=\"nt\">long </span><span class=\"p\">:</span> <span class=\"p p-Indicator\">|</span>\n    <span class=\"no\">Given a sequence $X_k$ of **independent random variables** on a</span>\n    <span class=\"no\">probability space $(\\Omega,\\mathcal{A},{\\rm P})$ which all have the same</span>\n    <span class=\"no\">**cumulative distribution functions** $F_X(t) = {\\rm P}[X \\leq t]$. The</span>\n    <span class=\"no\">**normalized random variable** $\\overline{X}=$ is</span>\n    <span class=\"no\">$(X-{\\rm E}[X])/\\sigma[X]$, where ${\\rm E}[X]$ is the **mean**</span>\n    <span class=\"no\">$\\int_{\\Omega} X(\\omega) dP(\\omega)$ and</span>\n    <span class=\"no\">$\\sigma[X]  = {\\rm E}[(X-{\\rm E}[X])^2]^{1/2}$ is the standard</span>\n    <span class=\"no\">deviation. A sequence of random variables $Z_n \\to Z$ **converges in</span>\n    <span class=\"no\">distribution** to $Z$ if $F_{Z_n}(t) \\to F_Z(t)$ for all $t$ as</span>\n    <span class=\"no\">$n \\to \\infty$. If $Z$ is a **Gaussian random variable** with zero mean</span>\n    <span class=\"no\">${\\rm E}[Z]=0$ and standard deviation $\\sigma[Z]=1$, the **central limit</span>\n    <span class=\"no\">theorem** is:</span>\n\n    <span class=\"no\">&gt; $\\overline{(X_1+X_2+ \\cdots + X_n)} \\to Z$ in distribution.</span>\n\n    <span class=\"no\">Proven in a special case by Abraham De-Moivre for discrete random</span>\n    <span class=\"no\">variables and then by Constantin Carathéodory and Paul Lévy, the theorem</span>\n    <span class=\"no\">explains the importance and ubiquity of the **Gaussian density</span>\n    <span class=\"no\">function** $e^{-x^2/2}/\\sqrt{2\\pi}$ defining the **normal</span>\n    <span class=\"no\">distribution**. The Gaussian distribution was first considered by</span>\n    <span class=\"no\">Abraham de Moivre from 1738. See [@Stroock; @knillprobability].</span>\n</code></pre></div>\n\n\n<p>I would suggest that a good presentation would be to only show the \"area\" and \"satz\" (Knill's term for the pithy version of the statement), as well as any \"author\" and \"decl\" fields we add as links to mathlib. Possibly clicking on an item should unfold the \"long\" description.</p>\n<p>I think with a list like this, where we are not very far along at the moment, it is better to display the entire list, with clear formatting showing which ones are in mathlib and which ones aren't (green and red shaded backgrounds?)</p>",
        "id": 206110887,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1596698054
    },
    {
        "content": "<p>If anyone would like to play with this it is on the <code>knill</code> branch of the <code>leanprover-community.github.io</code> repository.</p>",
        "id": 206110996,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1596698188
    },
    {
        "content": "<p>(This is probably only worth working on if we actually think it would be good to redirect some attention from Freek's 100 list to this list. But that may in fact be the case.)</p>",
        "id": 206112299,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1596699599
    },
    {
        "content": "<p>The big problem with Freek's list is that the vast majority have been done (and FLT is a joke) so it gives a very misleading impression</p>",
        "id": 206113485,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1596700762
    },
    {
        "content": "<p>This would give a far more meaningful impression of what needs to be done</p>",
        "id": 206113499,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1596700782
    },
    {
        "content": "<p>To be honest I think that the first challenge is to state 90% of them</p>",
        "id": 206113599,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1596700849
    },
    {
        "content": "<p>I'm sure you meant this implicitly, but let's make it explicit: stating 90% of them on top of the same unified library of concepts.</p>\n<p>Mizar has gotten really far, but at the cost of duplicating a lot of definitions [the Mizar authors themselves have complained about this in print.]</p>",
        "id": 206194851,
        "sender_full_name": "Jacques Carette",
        "timestamp": 1596746878
    },
    {
        "content": "<p>Why did they end up duplicating definitions?</p>",
        "id": 206213133,
        "sender_full_name": "Reid Barton",
        "timestamp": 1596759981
    },
    {
        "content": "<p>Independent developments that covered the same ground?</p>",
        "id": 206213147,
        "sender_full_name": "Reid Barton",
        "timestamp": 1596760015
    },
    {
        "content": "<p>AFAIK, they publish new \"papers\" instead of updating old ones.</p>",
        "id": 206225848,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1596779021
    },
    {
        "content": "<p>(I don't remember how they call mini-libraries)</p>",
        "id": 206225851,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1596779040
    },
    {
        "content": "<p>This way you know for sure that your dependencies won't change but if you want to refactor a definition, then you have to \"republish\" all reverse dependencies.</p>",
        "id": 206225920,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1596779139
    },
    {
        "content": "<p>Disclaimer: I may be wrong. I think I've spent less than a day looking at Mizar. I disliked the idea of an interpreted with source available only to people who actively used the binary for some time.</p>",
        "id": 206225981,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1596779222
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span> (sorry for the slow answer,  this got buried). In part, it is because of what <span class=\"user-mention\" data-user-id=\"214703\">@Yury G. Kudryashov</span> mentions. But also, there is definitely the issue that there was no curation of the library, no 'gatekeeper' that suggested that things should build on one another. What happens is that different (but equivalent) definitions provide different levels of convenience in different contexts.</p>\n<p>But also, there is a definite first-mover effect: Mizar was first at so many things, slowing people down by requiring that they must build a coherent whole we it's unclear that the parts themselves are even possible, is/was simply too high a bar. Only in retrospect can we see that this led into chaos.</p>\n<p>Note that Coq has the same problem. They are trying to fix it, but it is difficult.</p>\n<p>The problems are well-known: <strong>none</strong> of the current theorem provers have good abstraction facilities. By 'abstraction' here I mean the CS structural version of that, as obviously most of them are happy quantifying over all sorts of stuff that are increasingly 'abstract' from a math POV. This is why we have the bundling/unbundling problems (save for Arend), that so much ink has been written about coerce and transport, that we need to care about 'definitional equality', proof (ir)relevance and so on.</p>\n<p>In other words, my opinion is that 'mathematics' as a _unified whole_ does not <strong>yet</strong> exist. And that it will be quite a bit of hard (potentially thankless) work to do so. Because, as others have said, mathematicians do know what they are doing, so it _will_ work.</p>",
        "id": 207415390,
        "sender_full_name": "Jacques Carette",
        "timestamp": 1597847545
    },
    {
        "content": "<p>I'm (a little perversely) quite pleased to see all the struggles with <code>finset</code> and <code>fin</code> in a variety of discussions. In my opinion, this is one of the symptoms of the gap between 'semantic' mathematics and the convenient-on-paper-only short-cuts that are used all the time. </p>\n<p>Math uses indexing <strong>a lot</strong>, but because all the theorems you need to be true for dealing with indexing really are true (lots of finite combinatorics at play), there is simply not reason to worry on-paper. But when you try to be precise, wow does it ever become a mess.  Linear Algebra, multivariate polynomials and Multicategories were the two things that brought this into focus for me. (Following the 'Universal Algebra' method of looking at things, eventually you wonder why polynomials seem to inhabit this weird half-semantic, half-syntactic worlds, and so you ask <a href=\"https://mathoverflow.net/questions/73664/what-is-the-theory-of-polynomials\">What is the theory of polynomials</a> and get some super gratifying answers).</p>",
        "id": 207416471,
        "sender_full_name": "Jacques Carette",
        "timestamp": 1597848096
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> I only found this thread now... and I think we should do something with this list (even if it isn't <em>urgent</em>).</p>",
        "id": 212180334,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1601744558
    },
    {
        "content": "<p>What do you think of having the <code>satz</code>, but then also sub-items for every term printed in bold?</p>",
        "id": 212180346,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1601744590
    },
    {
        "content": "<p>That would give an extremely long list, but I don't think that's a problem.</p>",
        "id": 212180354,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1601744608
    },
    {
        "content": "<p>136 also seems curious:</p>\n<blockquote>\n<p>There is no theorem about the Mandelbulb $M_{n,m}$ for $n&gt;2$</p>\n</blockquote>",
        "id": 212188103,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1601756222
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"326322\">Jacques Carette</span> <a href=\"#narrow/stream/113488-general/topic/lots.20of.20theorems/near/207416471\">said</a>:</p>\n<blockquote>\n<p>(Following the 'Universal Algebra' method of looking at things, eventually you wonder why polynomials seem to inhabit this weird half-semantic, half-syntactic worlds, and so you ask <a href=\"https://mathoverflow.net/questions/73664/what-is-the-theory-of-polynomials\">What is the theory of polynomials</a> and get some super gratifying answers).</p>\n</blockquote>\n<p>I've been playing around with universal algebra in Lean, so I wanted to see how polynomial rings work as universal objects.  Here's a gist: <a href=\"https://gist.github.com/kmill/546049b5251afdcea9acc7564e7c4fa5\">https://gist.github.com/kmill/546049b5251afdcea9acc7564e7c4fa5</a></p>\n<p>It uses the formulation that polynomial ring construction is left adjoint to the forgetful functor from pointed commutative rings to commutative rings.  (I didn't prove anything about the structure of the polynomial ring though.)</p>",
        "id": 212193099,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1601764719
    },
    {
        "content": "<p>(Came here after writing <a href=\"https://github.com/leanprover-community/mathlib4/pull/6091\">#6091</a>, which is a new list of 100 theorems to formalise)</p>",
        "id": 378044864,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1690189244
    },
    {
        "content": "<p>Regarding mutilated chessboard, I had actually included a second part to my statement: Gomory's theorem which states that if two _opposite colour_ squares are removed the remainder can _always_ be domino tiled</p>",
        "id": 378045169,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1690189302
    },
    {
        "content": "<p>But yes, I agree that there is assez de formalisation vis-à-vis this, and have replaced it with the Robertson–Seymour theorem</p>",
        "id": 378045414,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1690189342
    },
    {
        "content": "<p>Do you know that <span class=\"user-mention silent\" data-user-id=\"217807\">Freek Wiedijk</span> is currently compiling a new list himself?</p>",
        "id": 378054049,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1690190880
    },
    {
        "content": "<p>If he is doing that I haven't found any updates</p>",
        "id": 378061699,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1690192257
    },
    {
        "content": "<p>(i.e. that is unexpected news to me)</p>",
        "id": 378061862,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1690192278
    },
    {
        "content": "<p>I believe it is not yet public.</p>",
        "id": 378066547,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1690192972
    },
    {
        "content": "<p>In some sense, both \"misc\" theorems can be labeled \"Dynamical Systems\". As for the shape of a drum, there are several results that are not about examples: e.g., H. Weyl's (1911) and V. Ivrii's (1980) estimates on the asymptotics of the spectrum. The latter estimate is conditional on a geometric assumption (the measure of periodic orbits in the corresponding billiard is zero) that is conjectured to be always true.</p>",
        "id": 378167109,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1690209367
    },
    {
        "content": "<p>This PA question might be relevant: <a href=\"https://proofassistants.stackexchange.com/questions/436/impact-of-formalizing-100-theorems-and-what-is-next\">https://proofassistants.stackexchange.com/questions/436/impact-of-formalizing-100-theorems-and-what-is-next</a></p>",
        "id": 378171210,
        "sender_full_name": "Jason Rute",
        "timestamp": 1690210114
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span> <a href=\"#narrow/stream/113488-general/topic/lots.20of.20theorems/near/378167109\">said</a>:</p>\n<blockquote>\n<p>As for the shape of a drum, there are several results that are not about examples: e.g., H. Weyl's (1911) and V. Ivrii's (1980) estimates on the asymptotics of the spectrum. The latter estimate is conditional on a geometric assumption (the measure of periodic orbits in the corresponding billiard is zero) that is conjectured to be always true.</p>\n</blockquote>\n<p>Do you know whether there is any research area that considers similar questions to that conjecture? I know a bit about the PDE part of the story (by the way manifolds without boundary are way better than domains and there are lots of interesting theorems there), but I have no clue about the dynamical systems side.</p>",
        "id": 378255236,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1690228242
    },
    {
        "content": "<p>Yeah, half of my PhD thesis says that in a planar domain with a sufficiently smooth boundary, the measure of <strong>quadrilateral</strong> periodic trajectories is zero. For triangular trajectories, this is known in any dimension (Rychlik, Vorobets, ...)</p>",
        "id": 378262908,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1690230718
    },
    {
        "content": "<p>This is also related to the following question: is it possible to hide an object with mirrors? More precisely, we want a system of mirrors (hypersurfaces) such that all rays going from the camera (a) never visit some domain; (b) after some reflections, go to infinity along the same rays. For a camera fixed at a point, the answer is \"yes\", but what if one can put the camera anywhere in a small nhd of a given point? The question differs from Ivrii's by signs at 2 intersections, so, e.g., from the complex point of view, it is the same question.</p>",
        "id": 378263558,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1690230989
    },
    {
        "content": "<p>It's good that the list in <a href=\"https://github.com/leanprover-community/mathlib4/pull/6091\">#6091</a> includes statements or references for the theorems, considering that the old 100 theorems list suffered from having just names, some of which were rather obscure as to what result was intended, especially in the cases where it's not clear where the dividing line between theorem and definition is (triangle inequality, Pythagoras, ...) - I hope any new list Freek compiles also includes statements and references like that. Though whatever the right location for such lists is, a single GitHub issue doesn't seem ideal for what's clearly 100 separate projects (many of which could have many sub-issues - or a whole blueprint - or a giant project taking many years of work).</p>",
        "id": 378294542,
        "sender_full_name": "Joseph Myers",
        "timestamp": 1690240784
    },
    {
        "content": "<p>the lack of explicit statements was IIRC deliberate, stating the theorem is part of the challenge and it can be problematic if the statement is formulated by someone who doesn't have the domain knowledge to do it right (often times no such person even exists at the time the challenge is originally posed!)</p>",
        "id": 378295018,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1690240998
    },
    {
        "content": "<p>I don't recall ever having difficulty locating the theorem by name, they all have wikipedia pages</p>",
        "id": 378295165,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1690241077
    },
    {
        "content": "<p>E.g., difficulty of formalizing triangle inequality or Pythagoras highly depends on how do you formulate them.</p>",
        "id": 378295668,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1690241327
    },
    {
        "content": "<p>In the 1st case: which metric space; in the second case: is it about a Hilbert space or an axiomatically defined plane?</p>",
        "id": 378295776,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1690241394
    },
    {
        "content": "<p>The statements in <a href=\"https://github.com/leanprover-community/mathlib4/pull/6091\">#6091</a> aren't (and don't need to be) fully detailed statements at the level of e.g. the official Millennium Prize Problem descriptions that define exactly what does or does not qualify as a solution; they're still better than just giving abbreviated names. Names such as \"The Partition Theorem\" are, by themselves, rather obscure (there are lots of theorems about partitions!).</p>",
        "id": 378295884,
        "sender_full_name": "Joseph Myers",
        "timestamp": 1690241431
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span> <a href=\"#narrow/stream/113488-general/topic/lots.20of.20theorems/near/378295776\">said</a>:</p>\n<blockquote>\n<p>In the 1st case: which metric space; in the second case: is it about a Hilbert space or an axiomatically defined plane?</p>\n</blockquote>\n<p>It's up to you, that's the point. What are you going to formalize? It says something about the library how it approaches this question</p>",
        "id": 378296031,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1690241528
    },
    {
        "content": "<p>I think this bit of underspecification is actually a good trick, it is like a Rorschach test for the library when you look at how all the statements differ across libraries</p>",
        "id": 378296157,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1690241633
    },
    {
        "content": "<p>It also helps encourage not taking languages' scores against the list <em>too</em> seriously. :-)</p>",
        "id": 378296307,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1690241716
    },
    {
        "content": "<p>I understand and agree with the point re: theorem names which are so vague that it is unclear what they are referring to (Euler's theorem anyone?), although I think \"The Partition Theorem\" isn't one of them, AFAICT there is only one theorem that claims to be \"the partition theorem\"</p>",
        "id": 378296440,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1690241785
    },
    {
        "content": "<p>a link to a wikipedia page is usually enough to clear that up</p>",
        "id": 378296496,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1690241832
    },
    {
        "content": "<p>I think having a new list of formalization targets is worthwhile, but ideally it would look somewhat different to the old list, reflecting the different challenges for formalization today. The challenge now isn't so much \"can we formalize X?\" for various X - by now it's clear that just about any individual result X can be formalized on its own with enough effort. And the old list effectively provided lots of examples of such individual results.</p>\n<p>Rather, I think challenges now are more about issues such as scaling, breadth, integration, maintenance. Can mathlib scale to 100 times its present size, with a community 100 times its present size and commits going in at 100 times the present rate? Can it reach the point where it has not merely most of an undergraduate degree but many of the key results used by people working in all fields of mathematics? Can all the results be formalized not just on their own, but with all the underlying mathematics being properly integrated in mathlib? Will the proofs be maintained afterwards (arguably several of the entries on Freek's original list should now have some kind of red flag in the list of Lean proofs, that they were only done in Lean 3 in an external repository and so haven't been done in Lean 4 / with current mathlib4 - and I'd guess much the same applies for some of the other theorem provers that have been used to formalize entries on that list)?</p>\n<p>Considering those challenges suggests that maybe some of the following would make sense for a new list of formalization targets. (a) It should have a lot more than 100 theorems, to provide broad coverage of different areas of mathematics. (b) It should routinely get more theorems added (whenever new results come to prominence), rather than being a fixed and frozen list (but once an entry is there, it should remain there). (c) While \"interesting oddities\" as described in a comment on <a href=\"https://github.com/leanprover-community/mathlib4/pull/6091\">#6091</a> are worth including, maybe also get people working in (or familiar with) many different fields of mathematics to suggest lists of major theorems in their fields for inclusion. (You might get the \"interesting oddities\" by counting \"mathematics that attracts popular interest or coverage\" as being a field there.) (d) There should be an associated convention that a theorem on the list isn't considered done until all the underlying mathematics is fully integrated in the relevant libraries for the theorem prover being used, with the result itself being somewhere that gets maintained on an ongoing basis independent of the original authors.</p>",
        "id": 378297465,
        "sender_full_name": "Joseph Myers",
        "timestamp": 1690242437
    },
    {
        "content": "<blockquote>\n<p>Will the proofs be maintained afterwards (arguably several of the entries on Freek's original list should now have some kind of red flag in the list of Lean proofs, that they were only done in Lean 3 in an external repository and so haven't been done in Lean 4 / with current mathlib4 - and I'd guess much the same applies for some of the other theorem provers that have been used to formalize entries on that list)?</p>\n</blockquote>\n<p>FWIW I consider this a strong negative aspect of lean in general: it is not suitable for doing anything \"archival quality\" because in a year you will have difficulty getting it to compile. Mathematics is supposed to \"stay proved\", and lean overhauling itself on a regular basis does not help in this regard. Not all theorem provers have this issue, although the approaches used to deal with it vary.</p>",
        "id": 378298875,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1690243297
    },
    {
        "content": "<p>Ping <span class=\"user-mention\" data-user-id=\"217807\">@Freek Wiedijk</span> since he was specifically interested in this topic and as mentioned up-thread is working on this</p>",
        "id": 378299087,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1690243417
    },
    {
        "content": "<p>Quoting from <a href=\"https://leanprover-community.github.io/100.html\">https://leanprover-community.github.io/100.html</a></p>\n<blockquote>\n<p>Currently 76 of them are formalized in Lean. We also have a page with the theorems from the list not yet in mathlib.</p>\n</blockquote>\n<p>I think we should update this sentence. Because it suggests that those 76 are <em>in mathlib</em>.</p>",
        "id": 378364538,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1690270184
    },
    {
        "content": "<p>I agree with <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> that maths is supposed to \"stay proved\". But it is also supposed to \"stay applicable\". And I think there aren't many systems out there that support both features at the same time.</p>",
        "id": 378364721,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1690270227
    },
    {
        "content": "<p>the easiest way to support both features at the same time is to be a dead language :)</p>",
        "id": 378366497,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1690270658
    },
    {
        "content": "<p>I'm not convinced that is sufficient.</p>",
        "id": 378366762,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1690270712
    },
    {
        "content": "<p>You also need a dead library</p>",
        "id": 378366815,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1690270727
    },
    {
        "content": "<p>Refactors should be forbidden.</p>",
        "id": 378366913,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1690270747
    },
    {
        "content": "<p>And everything should work together smoothly from day 0.</p>",
        "id": 378366987,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1690270763
    },
    {
        "content": "<p>And dedicated hardware / OS?</p>",
        "id": 378367045,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1690270780
    },
    {
        "content": "<p>there is no need for that</p>",
        "id": 378367125,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1690270798
    },
    {
        "content": "<p>in fact it would be detrimental because once support for that hardware goes away there goes the archive</p>",
        "id": 378367258,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1690270819
    },
    {
        "content": "<p>Regarding the website, note that until we get <a href=\"https://github.com/leanprover-community/leanprover-community.github.io/pull/338\">https://github.com/leanprover-community/leanprover-community.github.io/pull/338</a> past CI (discussed <a href=\"#narrow/stream/287929-mathlib4/topic/100.20theorems.20list.20and.20undergrad.20targets/near/378374094\">here</a>) it will continue to link to mathlib3</p>",
        "id": 378373437,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1690272219
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/113488-general/topic/lots.20of.20theorems/near/378364538\">said</a>:</p>\n<blockquote>\n<p>Quoting from <a href=\"https://leanprover-community.github.io/100.html\">https://leanprover-community.github.io/100.html</a></p>\n<blockquote>\n<p>Currently 76 of them are formalized in Lean. We also have a page with the theorems from the list not yet in mathlib.</p>\n</blockquote>\n<p>I think we should update this sentence. Because it suggests that those 76 are <em>in mathlib</em>.</p>\n</blockquote>\n<p>Of the entries on that list neither in mathlib nor the mathlib archive (but instead linking to some external project), I'd guess that Ramsey’s Theorem, Sylow’s Theorem (any bits that aren't already in mathlib), Principle of Inclusion/Exclusion aren't too hard to get into mathlib-suitable form (so eliminating the need to link to external projects for them) - whether that form is based on the implementations linked from the list, or is reproved from scratch. Probably harder to get into mathlib (but still desirable before they can really be considered to be done and to stay proved) are The Independence of the Continuum Hypothesis, Brouwer Fixed Point Theorem, e is Transcendental.</p>",
        "id": 378406332,
        "sender_full_name": "Joseph Myers",
        "timestamp": 1690278855
    },
    {
        "content": "<p>If mathlib is to scale to 100 times the present size (and the mathlib archive to 100 times the size of mathlib, potentially - if mathlib is \"anything standard / in a textbook\", the mathlib archive could be \"formal versions of anything from the rest of the mathematics literature\", though maybe the mathlib archive would no longer be a monorepo at that point), I expect we'll want really good refactoring tools to help update things when we change low-level parts of mathlib. Such tools might end up being key to how things \"stay proved\", if they can be applied to external projects, to branches for open PRs, etc., just as easily as they are applied to mathlib itself and the mathlib archive.</p>",
        "id": 378407675,
        "sender_full_name": "Joseph Myers",
        "timestamp": 1690279126
    },
    {
        "content": "<p>There's a mathlib3 PR for e transcendental, but I stopped working on it because I thought Lindemann-Weierstrass was very close (<a href=\"#narrow/stream/116395-maths/topic/Lindemann-Weierstrass.20theorem.20almost.20done\">https://leanprover.zulipchat.com/#narrow/stream/116395-maths/topic/Lindemann-Weierstrass.20theorem.20almost.20done</a>), but I don't think anyone is working on the missing part</p>",
        "id": 378408478,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1690279279
    },
    {
        "content": "<p>If someone does complete that - and get it into mathlib4! - then that's certainly one way of eliminating a dependence on an old external project for an entry on the 100 theorems list (and, at the same time, moving 53: Pi is Transcendental and 56: The Hermite-Lindemann Transcendence Theorem to the list of those done in Lean).</p>",
        "id": 378409974,
        "sender_full_name": "Joseph Myers",
        "timestamp": 1690279533
    },
    {
        "content": "<p>I thought there was even a sorry-free proof of L-W somewhere</p>",
        "id": 378418202,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1690280824
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"252627\">@Jujian Zhang</span> did transcendence of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>e</mi></mrow><annotation encoding=\"application/x-tex\">e</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">e</span></span></span></span> for his first Lean 3 project; it's his MSc thesis.</p>",
        "id": 378506010,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1690296817
    },
    {
        "content": "<p>Right, this is the PR I was referring to</p>",
        "id": 378507826,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1690297121
    },
    {
        "content": "<p>Let me mention that <span class=\"user-mention\" data-user-id=\"246273\">@Bhavik Mehta</span> has a nice Ramsey theorem that's close to ready for inclusion in mathlib.</p>",
        "id": 378537179,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1690302307
    },
    {
        "content": "<p>As an \"analytic\" number theorist, may I humbly suggest the inclusion of the <a href=\"https://en.wikipedia.org/wiki/Bombieri%E2%80%93Vinogradov_theorem\">Bombieri-Vinogradov theorem</a> (the generalized Riemann hypothesis on average, for which Bombieri got his Fields Medal). Along the way, we would need to develop the large sieve, and the <a href=\"https://en.wikipedia.org/wiki/Siegel%E2%80%93Walfisz_theorem\">Siegel-Walfisz theorem</a>, in particular dealing with issues of \"ineffective\" constants that cause a lot of difficulty in the subject. Would be nice to see such things formalized. But to do this the \"right\" way, we would first need some more complex analysis...</p>",
        "id": 378553331,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1690305658
    },
    {
        "content": "<p>The <a href=\"http://proofassistants.stackexchange.com\">proofassistants.stackexchange.com</a> discussion linked above included a suggestion of \"Fields-medal winning theorems\" in general, which seems a good idea for inclusion in such a list (at least one major result for each past Fields Medal) and may help balance the interesting oddities with results considered of major importance in mathematics.</p>",
        "id": 378606246,
        "sender_full_name": "Joseph Myers",
        "timestamp": 1690319976
    },
    {
        "content": "<p>And of course that'll get us a lot of the way towards Zhang / Maynard, so maybe we'll get two Fields medals for the price of one...</p>",
        "id": 378612357,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1690322568
    },
    {
        "content": "<p>There is a branch <code>knill</code>, see <a href=\"https://github.com/leanprover-community/leanprover-community.github.io/compare/knill?expand=1\">https://github.com/leanprover-community/leanprover-community.github.io/compare/knill?expand=1</a> that contains a yaml file with all the data of Knill's list of 172 theorems (thanks to Scott for wrangling the data!).<br>\nI started cargo-culting towards an html template for the corresponding web page. But I have no idea what I'm doing.</p>\n<p>What we need to do:</p>\n<ul>\n<li>Decide whether we want to add this list to our web page. (I'm strongly in favour)</li>\n<li>Move the yaml file to the mathlib repo (just like we did with <code>100.yaml</code> and <code>undergrad.yaml</code>)</li>\n<li>Fix all the web templating stuff, so that it actually works</li>\n<li>Start ticking of items in the yaml file that are already done.</li>\n</ul>",
        "id": 382040101,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1691214565
    },
    {
        "content": "<p>We still need fix the undergrad yml to work with mathlib4</p>",
        "id": 382142934,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1691241719
    },
    {
        "content": "<p>But that is orthogonal to my todo list, right?</p>",
        "id": 382143082,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1691241744
    },
    {
        "content": "<p>The penultimate Todo item is the same thing</p>",
        "id": 382143156,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1691241761
    },
    {
        "content": "<p>Were missing the \"tell the website what filename, line number, and statement of the decl\" step, which comes from the \"export db\" script which needs some simple meta porting</p>",
        "id": 382143526,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1691241854
    },
    {
        "content": "<p>/poll Shall we turn the Knill 172 theorem list into a web page on the community website and keep track which entries are formalized in Lean?</p>\n<ul>\n<li>Yes</li>\n<li>No</li>\n</ul>",
        "id": 382143607,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1691241877
    },
    {
        "content": "<p>What is the motivation for adding this list to the website? As far as I can see its a nicely written but fundamentally slightly random list of theorems (as is any list of only 100 theorems from all of mathematics). Making a webpage seems to explicitly make these theorems targets we are working towards, and we should consider carefully if these are good targets for mathlib. Personally I'd rather contributors used the projects board on github to identify useful results andpaths towards them in different sub-areas they work on, ideally results that would have a big impact on formalization in that area (e.g. unlocking deeper results, or commonly used workhorse theorems)</p>\n<p>edit. it looks like the list actually has 272 theorems now, more than the 172 the wesite says, this is an improvement imo on the 100 version I found by googling, but still presumably less focussed than us setting our own goals</p>",
        "id": 382150829,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1691243695
    },
    {
        "content": "<p>That's a fair question. I think there points that are somewhat in tension with each other:</p>\n<ul>\n<li>mathlib experts know best what mathlib needs, so they should set their own goals \"ideally results that would have a big impact on formalization in that area (e.g. unlocking deeper results, or commonly used workhorse theorems)\"</li>\n<li>\"benchmarks\" that our set outside of the community, might be somewhat \"random\" and hence challenge mathlib to grow in directions that might not happen naturally given the current shape of our community. They might also challenge mathlib to do things that are typically avoided because it's not a smooth or idiomatic experience. (E.g., mathlib is famously bad at explicit computational exercises.)</li>\n</ul>",
        "id": 382162862,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1691246863
    },
    {
        "content": "<p>So, I think we should have both.</p>",
        "id": 382162930,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1691246879
    },
    {
        "content": "<p>Another benefit of benchmarks, is that they can be challenges for other communities as well. My hope is that they can serve as connecting points between various communities. I think this was one of the things that happened with Freek's list, although it might be hard to quantify to what extent it happened.</p>",
        "id": 382163238,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1691246975
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/113488-general/topic/lots.20of.20theorems/near/382163238\">said</a>:</p>\n<blockquote>\n<p>Another benefit of benchmarks, is that they can be challenges for other communities as well. My hope is that they can serve as connecting points between various communities. I think this was one of the things that happened with Freek's list, although it might be hard to quantify to what extent it happened.</p>\n</blockquote>\n<p>I agree with this for sure, which is partially why I'm not sure about committing to this particular list right now by putting it very visibly on the website.</p>",
        "id": 382163641,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1691247090
    },
    {
        "content": "<p>Knill's list is really very good, at least in terms of reflecting \"taste\" of academic mathematicians. :-)</p>",
        "id": 382238647,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1691278508
    },
    {
        "content": "<p>One scaling question would be how we scale to maintaining 100 overlapping lists of theorems and their status in mathlib. But while 100 separate lists may make sense as a successor to the undergraduate mathematics list (systematically list definitions and results from 100 graduate-level textbooks in different areas of mathematics, for example), it's less clear that lots of separate lists are the best form of benchmark as successors to the 100 theorems list. There, it might be better to work collaboratively with other communities to produce a 1000 theorems list as a successor to the 100 theorems list (where lists such as Knill's 272 theorems (minus any included in the 100 theorems list, or that aren't meaningful mathematical theorems that could be formalized), and those in <a href=\"https://github.com/leanprover-community/mathlib4/pull/6091\">#6091</a>, and the supplemental theorems listed at the bottom of Freek's page, would provide ideas as a starting point for the list, but without requiring all the entries from any one such list to appear in the final 1000 theorems).</p>",
        "id": 382452931,
        "sender_full_name": "Joseph Myers",
        "timestamp": 1691364721
    },
    {
        "content": "<p>Another source of inspiration for megalists was (I think) suggested by <span class=\"user-mention\" data-user-id=\"122022\">@Joseph Corneli</span> quite a while ago: <a href=\"https://en.wikipedia.org/wiki/Wikipedia:Vital_articles/Level/5/Mathematics\">https://en.wikipedia.org/wiki/Wikipedia:Vital_articles/Level/5/Mathematics</a></p>",
        "id": 382489382,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1691381206
    },
    {
        "content": "<p>I think this discussion is demonstrating quite well just how many different kinds of lists of theorems there are. (Note that Knill's list is quite careful to say the \"fundamental\" is different from \"important\" or \"deep\"; see also Tao's <a href=\"https://www.ams.org/journals/bull/2007-44-04/S0273-0979-07-01168-8/S0273-0979-07-01168-8.pdf\">What is good mathematics?</a>. I don't think a specific list of lots of important or deep theorems has been suggested here, beyond the idea of \"Fields-medal winning theorems\" - and there are many more important or deep theorems that might be good candidates for formalization benchmarks than just those that won Fields Medals.)</p>",
        "id": 382781179,
        "sender_full_name": "Joseph Myers",
        "timestamp": 1691452698
    },
    {
        "content": "<p>That there are so many different ideas for the kinds of results worth including in a list of theorems for formalizing in turn I think tends to support the idea that a formalization benchmark should best be built up from suggestions from lots of people, reflecting their various preferences, in order to get a very broad range of different kinds of theorems, rather than blessing a list that reflects a single person's taste for what makes a good theorem for the list.</p>",
        "id": 382781996,
        "sender_full_name": "Joseph Myers",
        "timestamp": 1691452985
    },
    {
        "content": "<p>Btw there's a typo in n°37 of Knill's list: The \"Erdös conjecture on arithmetic progressions\" should read <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mo>∑</mo><mi>n</mi></msub><msubsup><mi>x</mi><mi>n</mi><mrow><mo>−</mo><mn>1</mn></mrow></msubsup><mo>=</mo><mi mathvariant=\"normal\">∞</mi></mrow><annotation encoding=\"application/x-tex\">∑_n x_n^{-1} = ∞</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.1138em;vertical-align:-0.2997em;\"></span><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:0em;\">∑</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.0017em;\"><span style=\"top:-2.4003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2997em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-2.453em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.247em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord\">∞</span></span></span></span>, not <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mo>∑</mo><mi>n</mi></msub><msub><mi>x</mi><mi>n</mi></msub><mo>=</mo><mi mathvariant=\"normal\">∞</mi></mrow><annotation encoding=\"application/x-tex\">∑_n x_n = ∞</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0497em;vertical-align:-0.2997em;\"></span><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:0em;\">∑</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.0017em;\"><span style=\"top:-2.4003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2997em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord\">∞</span></span></span></span>.</p>",
        "id": 385428320,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1692180013
    },
    {
        "content": "<p>... or maybe it is just very easy to disprove.</p>",
        "id": 385432142,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1692181551
    },
    {
        "content": "<p>Yaël's observation made me wonder how would I formalize the existence of sets containing no arithmetic progressions:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.GroupPower.Order</span>\n\n<span class=\"sd\">/--  The sequence `f` does not take three values in arithmetic progression:</span>\n<span class=\"sd\">if there are `a b c t : ℕ` such that `f a + t = f b` and `f b + t = f c`, then</span>\n<span class=\"sd\">`t = 0`. -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">No3AP</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">t</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">f</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">t</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">c</span> <span class=\"bp\">→</span> <span class=\"n\">t</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n\n<span class=\"sd\">/--  The sequence `f` `grows` if the sum of two of its earlier values is smaller than</span>\n<span class=\"sd\">its later values. -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">Function.grows</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">c</span> <span class=\"bp\">→</span> <span class=\"n\">b</span> <span class=\"bp\">&lt;</span> <span class=\"n\">c</span> <span class=\"bp\">→</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">f</span> <span class=\"n\">b</span> <span class=\"bp\">&lt;</span> <span class=\"n\">f</span> <span class=\"n\">c</span>\n\n<span class=\"sd\">/--  A sequence that `grows` is strictly monotone. -/</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">Function.grows.StrictMono</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">f.grows</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">StrictMono</span> <span class=\"n\">f</span> <span class=\"o\">:=</span>\n<span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">xy</span> <span class=\"bp\">↦</span> <span class=\"n\">lt_of_le_of_lt</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"n\">x</span> <span class=\"n\">x</span> <span class=\"n\">_</span> <span class=\"n\">xy</span> <span class=\"n\">xy</span><span class=\"o\">)</span>\n\n<span class=\"sd\">/--  A sequence that `grows` satisfies `No3AP`. -/</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">grows.No3AP</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">f.grows</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">No3AP</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intros</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">t</span> <span class=\"n\">ha</span> <span class=\"n\">hb</span>\n  <span class=\"n\">cases</span> <span class=\"n\">t</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rfl</span>\n    <span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"n\">exfalso</span>\n      <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">f</span> <span class=\"n\">b</span> <span class=\"bp\">&lt;</span> <span class=\"n\">f</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n        <span class=\"n\">apply</span> <span class=\"n\">h</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">refine</span> <span class=\"n\">h.StrictMono.lt_iff_lt.mp</span> <span class=\"o\">(</span><span class=\"n\">lt_iff_exists_add.mpr</span> <span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"bp\">&lt;;&gt;</span>\n        <span class=\"bp\">·</span> <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">hb</span><span class=\"o\">]⟩</span>\n      <span class=\"n\">refine</span> <span class=\"n\">lt_irrefl</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">lt_of_le_of_lt</span> <span class=\"bp\">?</span><span class=\"n\">_</span> <span class=\"n\">this</span><span class=\"o\">)</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">hb</span><span class=\"o\">]</span>\n      <span class=\"n\">apply</span> <span class=\"n\">add_le_add_left</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">ha</span><span class=\"o\">]</span>\n      <span class=\"n\">simp</span>\n\n<span class=\"sd\">/--  For `n : ℕ` with `3 ≤ n`, the sequence `{ n ^ a | a : ℕ }` does not contain</span>\n<span class=\"sd\">3-term arithmetic progressions. -/</span>\n<span class=\"c1\">-- You could tweak some inequality in `grows` and get it to work for `n = 2` as well.</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">No3AP_pow</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">No3AP</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">^</span> <span class=\"bp\">·</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">apply</span> <span class=\"n\">grows.No3AP</span>\n  <span class=\"n\">intros</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">ac</span> <span class=\"n\">bc</span>\n  <span class=\"n\">wlog</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span>\n  <span class=\"bp\">·</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">add_comm</span><span class=\"o\">]</span>\n    <span class=\"n\">refine</span> <span class=\"n\">this</span> <span class=\"bp\">?</span><span class=\"n\">_</span> <span class=\"bp\">?</span><span class=\"n\">_</span> <span class=\"bp\">?</span><span class=\"n\">_</span> <span class=\"bp\">?</span><span class=\"n\">_</span> <span class=\"bp\">?</span><span class=\"n\">_</span> <span class=\"bp\">?</span><span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">Nat.le_of_not_le</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">exact</span> <span class=\"n\">h</span><span class=\"o\">))</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">try</span> <span class=\"n\">assumption</span><span class=\"bp\">;</span>\n  <span class=\"n\">apply</span> <span class=\"o\">(</span><span class=\"n\">add_le_add</span> <span class=\"o\">(</span><span class=\"n\">pow_mono</span> <span class=\"o\">(</span><span class=\"n\">Nat.one_le_of_lt</span> <span class=\"n\">h2</span><span class=\"o\">)</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"n\">rfl.le</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">trans_lt</span> <span class=\"bp\">?</span><span class=\"n\">_</span>\n  <span class=\"k\">show</span> <span class=\"n\">n</span> <span class=\"bp\">^</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">n</span> <span class=\"bp\">^</span> <span class=\"n\">b</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"bp\">^</span> <span class=\"n\">c</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">two_mul</span><span class=\"o\">]</span>\n  <span class=\"n\">cases</span> <span class=\"n\">c</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">ac</span>\n    <span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"n\">c</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">pow_succ</span><span class=\"o\">]</span>\n      <span class=\"n\">apply</span> <span class=\"n\">mul_lt_mul</span> <span class=\"n\">h2</span> <span class=\"bp\">?</span><span class=\"n\">_</span> <span class=\"bp\">?</span><span class=\"n\">_</span> <span class=\"n\">n.zero_le</span>\n      <span class=\"bp\">·</span> <span class=\"n\">exact</span> <span class=\"n\">pow_mono</span> <span class=\"o\">(</span><span class=\"n\">Nat.one_le_of_lt</span> <span class=\"n\">h2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Nat.lt_succ.mp</span> <span class=\"n\">bc</span><span class=\"o\">)</span>\n      <span class=\"bp\">·</span> <span class=\"n\">exact</span> <span class=\"n\">pow_pos</span> <span class=\"o\">(</span><span class=\"n\">Nat.zero_lt_of_lt</span> <span class=\"n\">h2</span><span class=\"o\">)</span> <span class=\"bp\">..</span>\n</code></pre></div>\n<p>To disprove Erdős's conjecture, all that is left to show is that the sum of the powers of 3 diverges...  <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 385451890,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1692189156
    },
    {
        "content": "<p><code>No3AP</code> is (when <code>f</code> is injective) <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=AddSalemSpencer#doc\">docs#AddSalemSpencer</a></p>",
        "id": 385457471,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1692190870
    },
    {
        "content": "<p>Ah, maybe I'll PR a <code>Counterexample</code> using <code>AddSalemSpencer</code>!</p>",
        "id": 385458130,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1692191078
    },
    {
        "content": "<p>But sadly, I should restrain from Lean for the rest of today...</p>",
        "id": 385458226,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1692191113
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 385872415,
        "sender_full_name": "Maarten Derickx",
        "timestamp": 1692351933
    }
]