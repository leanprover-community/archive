[
    {
        "content": "<p>What is the best way to use the notation \"x : S\" for a structure S? For instance, suppose I want to use that notation here:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">magma</span> <span class=\"n\">where</span>\n  <span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n  <span class=\"n\">μ</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">X</span>\n  <span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">μ</span> <span class=\"o\">(</span><span class=\"n\">μ</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"n\">z</span> <span class=\"bp\">=</span> <span class=\"n\">μ</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">μ</span> <span class=\"n\">y</span> <span class=\"n\">z</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 340916707,
        "sender_full_name": "Dean Young",
        "timestamp": 1678467676
    },
    {
        "content": "<p>What's your question?</p>",
        "id": 340930389,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1678471409
    },
    {
        "content": "<p>Are you asking whether you can write <code>m : magma</code>? The answer is yes.</p>",
        "id": 340930484,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1678471440
    },
    {
        "content": "<p>There's also potentially the question of whether given <code>S : magma</code> you can write <code>x : S</code> for <code>x : S.X</code>. You can write a <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=CoeSort#doc\">docs4#CoeSort</a> instance.</p>",
        "id": 340931209,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1678471632
    },
    {
        "content": "<p>\"whether you can write <code>m : magma</code>\" yes that's my question ... but also how does it know the meaning of <code>m : magma</code>? And when does that work?</p>",
        "id": 340941596,
        "sender_full_name": "Dean Young",
        "timestamp": 1678474483
    },
    {
        "content": "<p>Because you just defined what the type <code>magma</code> is...? Is this really the question you want to ask?</p>",
        "id": 340942903,
        "sender_full_name": "Reid Barton",
        "timestamp": 1678474903
    },
    {
        "content": "<p>Once <code>magma</code> is defined with <code>structure</code>,  it becomes a type, i.e. in this case we  have <code>magma : Type 1</code>,  so <code>m : magma</code> is completely sensible</p>",
        "id": 340942904,
        "sender_full_name": "Logan Murphy",
        "timestamp": 1678474903
    },
    {
        "content": "<p>note that <code>structure</code> is essentially just <code>inductive</code> with a single constructor, so your definition is the same as </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">magma</span>\n<span class=\"bp\">|</span> <span class=\"n\">mk</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">μ</span><span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span>  <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">μ</span> <span class=\"o\">(</span><span class=\"n\">μ</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"n\">z</span> <span class=\"bp\">=</span> <span class=\"n\">μ</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">μ</span> <span class=\"n\">y</span> <span class=\"n\">z</span><span class=\"o\">))</span>  <span class=\"o\">:</span> <span class=\"n\">magma</span>\n</code></pre></div>\n<p>given this definition, would you expect <code>m : magma</code> to fail somehow?</p>",
        "id": 340943719,
        "sender_full_name": "Logan Murphy",
        "timestamp": 1678475150
    }
]