[
    {
        "content": "<p>I'm wondering, when I define a type as a specialization of another (parameterized) type, is there a way to inheret all of the instances from the original one?</p>\n<p>For example, if I do:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.CategoryTheory.Arrow</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.CategoryTheory.Types</span>\n<span class=\"kn\">open</span> <span class=\"n\">CategoryTheory</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Fam</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n <span class=\"n\">Arrow</span> <span class=\"kt\">Type</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">isoRefl</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Fam</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">â‰…</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">_</span>\n</code></pre></div>\n<p>I get the error </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"kd\">instance</span>\n  <span class=\"n\">Category.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">u.21</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"n\">Fam</span>\n</code></pre></div>\n<p>even though <code>Arrow Type</code> has a Category instance.</p>\n<p>Is there something I have to do to import the instances, or to declare <code>Fam</code> as transparent, so the typeclass checker sees that it's the same as <code>Arrow Type</code>? I could declare it as a notation instead of a definition, but is that the best way to do it?</p>",
        "id": 392685176,
        "sender_full_name": "Joey Eremondi",
        "timestamp": 1695468901
    },
    {
        "content": "<p>Use <code>abbrev</code> instead of <code>def</code></p>",
        "id": 392685578,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1695469269
    },
    {
        "content": "<p>The former has reducible transparency, while the latter is semi-reducible</p>",
        "id": 392685618,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1695469316
    },
    {
        "content": "<p>Perfect, thanks!</p>",
        "id": 392711588,
        "sender_full_name": "Joey Eremondi",
        "timestamp": 1695483656
    }
]