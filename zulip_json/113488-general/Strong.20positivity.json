[
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110865\">Jeremy Avigad</span> <a href=\"#narrow/stream/113488-general/topic/RFC.3A.20naming.20convention.20for.20.60nonneg.60.2F.60pos.60/near/383694585\">said</a>:</p>\n<blockquote>\n<p>With my American undergraduate and graduate training in mathematics, I interpret \"x is positive\" as \"x &gt; 0.\" Webster agrees with me:<br>\n<a href=\"https://www.merriam-webster.com/dictionary/positive\">https://www.merriam-webster.com/dictionary/positive</a><br>\nWikipedia lists both interpretations:<br>\n<a href=\"https://en.wikipedia.org/wiki/Sign_(mathematics)#Terminology_for_signs\">https://en.wikipedia.org/wiki/Sign_(mathematics)#Terminology_for_signs</a></p>\n</blockquote>\n<p>From that second page:</p>\n<blockquote>\n<p>The same terminology is sometimes used for functions that yield real or other signed values. For example, a function would be called a positive function if its values are positive for all arguments of its domain, or a non-negative function if all of its values are non-negative.</p>\n</blockquote>\n<p>Which is already not what <code>0 &lt; f</code> means in Mathlib!</p>",
        "id": 383695343,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1691686085
    },
    {
        "content": "<p>BTW, sometimes <code>∀ x, f x &lt; g x</code> is the right notion (e.g., if we want to generalize <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=isOpen_Ioi#doc\">docs#isOpen_Ioi</a>)</p>",
        "id": 383698528,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1691686720
    },
    {
        "content": "<p>But I don't know how to formulate it in terms of a <code>PartialOrder</code>.</p>",
        "id": 383698612,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1691686738
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Pi.StrongLT#doc\">docs#Pi.StrongLT</a></p>",
        "id": 383701422,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1691687284
    },
    {
        "content": "<p>It’s just <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=StrongLT#doc\">docs#StrongLT</a> apparently</p>",
        "id": 383702407,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1691687499
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"268315\">Anatole Dedecker</span> <a href=\"#narrow/stream/113488-general/topic/RFC.3A.20naming.20convention.20for.20.60nonneg.60.2F.60pos.60/near/383702407\">said</a>:</p>\n<blockquote>\n<p>It’s just <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=StrongLT#doc\">docs#StrongLT</a> apparently</p>\n</blockquote>\n<p>But we don't have a generic <code>StrongLT</code> that works for linear orders, <code>Prod</code>s and <code>Pi</code>s of them.</p>",
        "id": 383715074,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1691690091
    },
    {
        "content": "<p>Yeah, I thought about this problem, but haven't come up with a solution yet.</p>",
        "id": 383716164,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1691690320
    },
    {
        "content": "<p>Is the solution not to make StrongLT a type class?</p>",
        "id": 383718505,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1691690891
    },
    {
        "content": "<p>There's more annoyances too in the realm of strongly positive. In C star algebra theory an element <code>a</code> is said to be strictly positive if it is positive (i.e., <code>0 \\le a</code>) and the hereditary C star subalgebra it generates is the full algebra. If you represent that C star algebra faithfully on a Hilbert space, that condition is that the element corresponding to <code>a</code> is positive and zero is not an eigenvalue (or equivalently, for all <code>x</code>, <code>0 &lt; inner (a x) x</code>), which is the link to strongly positive.</p>",
        "id": 383724544,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1691692380
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113488-general/topic/RFC.3A.20naming.20convention.20for.20.60nonneg.60.2F.60pos.60/near/383718505\">said</a>:</p>\n<blockquote>\n<p>Is the solution not to make StrongLT a type class?</p>\n</blockquote>\n<p>If it were a typeclass, we would still need to state something about it. Else it's just notation.</p>",
        "id": 383728238,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1691693241
    },
    {
        "content": "<p>In particular, what should <code>StrongLT</code> mean on <code>alpha x beta x gamma</code>? With the obvious definition, it would mean <code>x.1 &lt; y.1 and (x.2.1 &lt; y.2.1 and x.2.2 &lt;= y.2.2 or x.2.1 &lt;= y.2.1 and x.2.2 &lt; y.2.2</code>, which is not the same as <code>x.1 &lt; y.1 and x.2.1 &lt; y.2.1 and x.2.2 &lt; y.2.2</code>.<br>\nOne solution would be to have an instance <code>LinearOrder alpha -&gt; StrongLT alpha</code> and then the instance <code>StrongLT alpha -&gt; StrongLT beta -&gt; StrongLT (alpha x beta)</code>.</p>",
        "id": 383732155,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1691694162
    },
    {
        "content": "<p>13 messages were moved here from <a class=\"stream-topic\" data-stream-id=\"113488\" href=\"/#narrow/stream/113488-general/topic/RFC.3A.20naming.20convention.20for.20.02klzzwxh.3A0000.03.2F.02klzzwxh.3A0001.03\">#general &gt; RFC: naming convention for <code>nonneg</code>/<code>pos</code></a> by <span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span>.</p>",
        "id": 383734802,
        "sender_full_name": "Notification Bot",
        "timestamp": 1691694911
    }
]