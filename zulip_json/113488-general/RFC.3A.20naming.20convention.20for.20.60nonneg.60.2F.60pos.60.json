[
    {
        "content": "<p>This may be an unpopular opinion, but I'm hoping many will see the logic and agree: I think we should change the <code>nonneg</code>/<code>pos</code> naming convention.</p>\n<p>I believe this has come up before, in part because it does not reflect standard terminology in French, which, as Anatole has just reminded me, is <em>positif</em> / <em>strictement positif</em>. The point is that \"nonnegative\" literally interpreted is <code>¬ x &lt; 0</code>, but we use it to refer to <code>0 ≤ x</code>, and these are only equivalent in general for <em>linear</em> orders. Nevertheless, we use them in contexts that don't make sense:</p>\n<ul>\n<li>In the context of <code>OrderedSemiring</code>: this feels a bit weird because there may be no negative elements whatsoever, and there is no <code>neg</code>.  An example might be <code>C(X, R)</code> where <code>R</code> is an topological ordered (semi)ring. In that case, there are elements which are neither  positive nor negative.</li>\n<li>In the context of <code>StarOrderedRing</code>: see for example, the declaration <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=star_mul_self_nonneg#doc\">docs#star_mul_self_nonneg</a> and things nearby, where almost always the order will not be linear.</li>\n<li>In the case of the partial order on <code>IsROrC</code> this leads to some odd lemmas (if one reads it as <code>¬ x &lt; 0</code>) as evidenced in <a href=\"https://github.com/leanprover-community/mathlib4/pull/6488\">#6488</a></li>\n<li>In the context of linear maps, the condition <code>0 ≤ f</code> (i.e., <code>∀ x, 0 ≤ ⟪f x, x⟫</code>) is generally referred to as <em>\"positive\"</em></li>\n<li>Likewise, in matrix theory, a selfadjoint matrix with eigenvalues satisfying <code>0 ≤ μ</code> is <em>\"positive semidefinite\"</em></li>\n</ul>\n<p>Some potential replacement conventions are <code>semipos</code>/<code>pos</code> or <code>pos</code>/<code>spos</code> (<code>spos</code> for <em>strictly</em> positive). These changes would also entail <code>semineg</code>/<code>neg</code> or <code>neg</code>/<code>sneg</code> convention for <code>x ≤ 0</code>/<code>x &lt; 0</code>. Of course, this conflicts with naming for <code>-x</code>, but that conflict is already present for the current <code>nonpos</code>/<code>neg</code> convention.</p>\n<p>Another consideration is that some lemmas in <code>Std</code> (e.g., <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Nat.one_pos#doc\">docs#Nat.one_pos</a>) would also need to be changed (otherwise it would get tremendously confusing).</p>",
        "id": 383670353,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1691681389
    },
    {
        "content": "<p>Should PNat become SPNat, then?</p>",
        "id": 383671697,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1691681618
    },
    {
        "content": "<p>And I suppose <code>ENNReal</code> then becomes <code>EPReal</code></p>",
        "id": 383672895,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1691681852
    },
    {
        "content": "<p>Maybe true mathlib style would be not to use either term and use <code>zero_le</code> and <code>zero_lt</code> instead</p>",
        "id": 383673452,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1691681961
    },
    {
        "content": "<p>Actually these exceptions are explicitly covered in the <a href=\"https://leanprover-community.github.io/contribute/naming.html\">#naming</a> conventions. (plug for the <a href=\"https://github.com/leanprover-community/leanprover-community.github.io/pull/344\">PR to update this page to Lean 4</a>)</p>",
        "id": 383674040,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1691682070
    },
    {
        "content": "<p>/poll Naming convention for <code>0 &lt; x</code> / <code>0 ≤ x</code><br>\n<code>pos</code>/<code>nonneg</code> (status quo)<br>\n<code>pos</code>/<code>semipos</code><br>\n<code>spos</code>/<code>pos</code><br>\n<code>pos</code>/<code>zero_le</code><br>\n<code>zero_lt</code>/<code>zero_le</code></p>",
        "id": 383680281,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1691683250
    },
    {
        "content": "<p>Note: one reason I really don't like <code>zero_le</code> is that it doesn't generalize nicely to things like linear maps, especially not when referring to the <em>types</em> of those maps that satisfy <code>0 ≤ f</code> (same for <code>ℝ≥0</code>).</p>",
        "id": 383681842,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1691683520
    },
    {
        "content": "<p>Isn't <code>pos</code> for <code>≤</code> too French?</p>",
        "id": 383682218,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1691683595
    },
    {
        "content": "<p>As I mentioned above \"positive\" is standard for <code>0 ≤</code> in certain contexts in English. Moreover, I hear plenty of English speakers refer to <code>0 ≤ </code> as \"positive\" in casual conversation, even if they use \"nonnegative\" in more formal situations.</p>",
        "id": 383683078,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1691683787
    },
    {
        "content": "<p>I like that the current system uses the same words than the standard English math usage (in most contexts). These are not the words I would have chosen if that standard did not exist and I had to adapt to those unintuitive words when the language I use to do math switched from French to English, but I think that keeping mathlib close to informal math is important. It lowers the barrier to entry.</p>",
        "id": 383686228,
        "sender_full_name": "Rémy Degenne",
        "timestamp": 1691684407
    },
    {
        "content": "<p>Another consideration in favor of the <code>spos</code>/<code>pos</code> convention is the analogy with <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=StrictMono#doc\">docs#StrictMono</a> / <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Monotone#doc\">docs#Monotone</a></p>",
        "id": 383686229,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1691684407
    },
    {
        "content": "<p>fwiw, I have heard native English speakers refer to <code>(0 : ℝ) &lt; x</code> as \"<code>x</code> is strictly positive\". My advisor was one who often adopted this convention, and he is not a French speaker. Likewise, I think in analysis it is common to refer to <code>a &lt; b</code> as a <em>strict</em> inequality when contrasting with <code>a ≤ b</code>.</p>",
        "id": 383687907,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1691684703
    },
    {
        "content": "<p>I'm used to saying \"strictly positive\" since high school, I think... (<span class=\"user-mention\" data-user-id=\"111080\">@Floris van Doorn</span> wasn't that the terminology used at our IMO trainings?)</p>",
        "id": 383688363,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1691684776
    },
    {
        "content": "<p>In the UK I think \"strictly positive\" is rare, but \"strict inequality\" is normal for &lt; vs &lt;=</p>",
        "id": 383689304,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1691684946
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"350992\">Rémy Degenne</span> <a href=\"#narrow/stream/113488-general/topic/RFC.3A.20naming.20convention.20for.20.60nonneg.60.2F.60pos.60/near/383686228\">said</a>:</p>\n<blockquote>\n<p>I like that the current system uses the same words than the standard English math usage (in most contexts). These are not the words I would have chosen if that standard did not exist and I had to adapt to those unintuitive words when the language I use to do math switched from French to English, but I think that keeping mathlib close to informal math is important. It lowers the barrier to entry.</p>\n</blockquote>\n<p>I think this is probably the main argument against switching. The thing I'm not sure about is how \"systematic\" it is. Is the situation \"this is the common convention, but people frequently change convention if needed\" or rather \"even with a warning, reading a paper with another convention is confusing\"?</p>",
        "id": 383689973,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1691685067
    },
    {
        "content": "<p>For an \"unbiased\" reference for English language usage, a <a href=\"https://books.google.com/ngrams/graph?content=nonnegative%2Cnon-negative%2Cstrictly+positive&amp;year_start=1920&amp;year_end=2019&amp;corpus=en-2019&amp;smoothing=3\">Google Ngram</a>. Note that these are not comparing exactly the same thing: we're comparing <code>0 ≤ x</code> under one convention to <code>0 &lt; x</code> under a different convention. This is because including \"positive\" would introduce far too many false positives (pun intended! <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span>).</p>\n<p>I expect that \"nonnegative\" could come up relatively rarely, but a nonzero percentage of the time, in generic English texts. In contrast, I would bet that virtually <em>all</em> occurrences of \"strictly positive\" are in mathematical texts.</p>",
        "id": 383692887,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1691685614
    },
    {
        "content": "<p>At the very least, it's interesting to see when the hyphenation switch occurred. It's quite clearly 1962, but I'm not sure why.</p>",
        "id": 383693418,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1691685715
    },
    {
        "content": "<p><a href=\"https://books.google.com/ngrams/graph?content=nonpositive%2Cnon-positive%2Cstrictly+negative&amp;year_start=1920&amp;year_end=2019&amp;corpus=en-2019&amp;smoothing=3\">Here's the same ngram</a> for x \\le 0</p>",
        "id": 383694550,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1691685932
    },
    {
        "content": "<p>With my American undergraduate and graduate training in mathematics, I interpret \"x is positive\" as \"x &gt; 0.\" Webster agrees with me:<br>\n<a href=\"https://www.merriam-webster.com/dictionary/positive\">https://www.merriam-webster.com/dictionary/positive</a><br>\nWikipedia lists both interpretations:<br>\n<a href=\"https://en.wikipedia.org/wiki/Sign_(mathematics)#Terminology_for_signs\">https://en.wikipedia.org/wiki/Sign_(mathematics)#Terminology_for_signs</a></p>",
        "id": 383694585,
        "sender_full_name": "Jeremy Avigad",
        "timestamp": 1691685941
    },
    {
        "content": "<p><code>spos</code> is ok if you know what it means, but, well, it's now another thing to know the meaning of (and the <code>s</code> is different than the one in, say, <code>smul</code>). Imo that counts against it.</p>\n<p>One other <code>pos</code>sibility is qualifying <em>both</em> names, maybe as <code>strictlyPos</code>/<code>semiPos</code>—then there's no unqualified <code>pos</code> lying around waiting to be ambiguous! :P</p>",
        "id": 383708149,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1691688631
    },
    {
        "content": "<p>I also think there's virtue to banishing <code>pos</code> in the most general cases, such as <code>0 ≤ x</code>, and reserving it only for when it's part of a very specific thing (such as e.g. <code>positiveDefinite</code>/<code>positiveSemidefinite</code>). The fewer ways there are to spell things, the easier it is to find them—since we can already spell <code>0 &lt; x</code>/<code>0 ≤ x</code> with the words we have (and, crucially, spell it <em>simply</em> with the words we have)...maybe that's the best option. (By these metrics, of course.)</p>",
        "id": 383709816,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1691688955
    },
    {
        "content": "<p>13 messages were moved from this topic to <a class=\"stream-topic\" data-stream-id=\"113488\" href=\"/#narrow/stream/113488-general/topic/Strong.20less.20than.20on.20functions\">#general &gt; Strong less than on functions</a> by <span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span>.</p>",
        "id": 383734805,
        "sender_full_name": "Notification Bot",
        "timestamp": 1691694912
    },
    {
        "content": "<p>(I broke that link, the messages are <a href=\"#narrow/stream/113488-general/topic/Strong.20positivity/near/383695343\">here</a>)</p>",
        "id": 383735239,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1691695024
    },
    {
        "content": "<p>Here is my usage in informal maths.</p>\n<ul>\n<li>If I say \"nonnegative\" I assume that I am clearly asserting that zero is allowed.</li>\n<li>If I say strictly positive, I am clearly asserting that zero is not allowed.</li>\n<li>If I say positive, I personally think that I am excluding zero, but will keep in the back of my mind that I could be misunderstood.</li>\n</ul>\n<p>I normally use positive only when I don't really care about the zero case and, depending on context, it could be trivially included or trivially excluded.</p>\n<p>Overall, the mathlib convention aligns well with how I would like my audience to parse what I say!</p>",
        "id": 383759782,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1691702014
    },
    {
        "content": "<p>The currently second most popular option <code>zero_lt</code>/<code>zero_le</code> has the virtue of being systematic, but I find it strange that this naming appears to promote <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">0</span></span></span></span> to an important player in results that in my opinion have very little to do with zero! And I fear that the initial impression they leave to the informal mathematician or a newcomer to formalization is not one of awe (\"remember to search for results about positive operators by the <code>zero_le</code> substring\").</p>",
        "id": 383767596,
        "sender_full_name": "Kalle Kytölä",
        "timestamp": 1691704853
    },
    {
        "content": "<p>Is it totally heretic to allow <code>pos</code> as a part of naming for both <code>0 &lt; x</code> and <code>0 ≤ f</code>, if the word positive is commonly used with that meaning in (English) mathematical literature of the relevant area? (When diasmbiguation is urgently needed, one could still choose to deliberately use the longer <code>strictly_pos</code>/<code>nonneg</code> or even <code>zero_lt</code>/<code>zero_le</code>). Do I dare to even add the heretic ambiguous option to the poll? [EDIT: I did, but I didn't yet dare to vote for it <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span>.]</p>",
        "id": 383767710,
        "sender_full_name": "Kalle Kytölä",
        "timestamp": 1691704877
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"373986\">Kalle Kytölä</span> <a href=\"#narrow/stream/113488-general/topic/RFC.3A.20naming.20convention.20for.20.60nonneg.60.2F.60pos.60/near/383767710\">said</a>:</p>\n<blockquote>\n<p>Is it totally heretic to allow <code>pos</code> as a part of naming for both <code>0 &lt; x</code> and <code>0 ≤ f</code>, if the word positive is commonly used with that meaning in (English) mathematical literature of the relevant area?</p>\n</blockquote>\n<p>The problem arises when you want to use more general results when working in that area. Now half your lemmas are called <code>nonneg</code> and the other half <code>pos</code>, and the only way to know which one to use is to look for both and see which exists!</p>",
        "id": 383769354,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1691705321
    }
]