[
    {
        "content": "<p>I’m writing a command elaborator that generates declarations. Is there any higher-level interfact I can use that wraps <a href=\"https://leanprover-community.github.io/mathlib4_docs/Lean/CoreM.html#Lean.addDecl\"><code>addDecl</code></a> internally? Specifically, to repeated frustration I’ve already encountered the following few things feel like they could be done automatically, but I’m not sure how:</p>\n<ol>\n<li>Prefixing the name of the resulting declaration with the currently opened namespace;</li>\n<li>Dealing with <code>variable</code>s, automatically converting them to parameters iff they’re used;</li>\n<li>Conversion of universe level params / metavariables into level parameters of the declaration;</li>\n<li>Marking the declarations with <code>abbrev</code>;</li>\n<li>Elaborating the value of the definition with appropriate usage of <code>withDeclName</code>.</li>\n</ol>\n<p>I don’t even know how to achieve (1) and (4) right now, so help with that would also be appreciated. Alternatively, if there is a complete example out there of something similar to this, it would be very helpful.</p>",
        "id": 405543198,
        "sender_full_name": "Sabrina Jewson",
        "timestamp": 1701530642
    },
    {
        "content": "<p>you can always adapt the body of <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.Elab.Command.elabDeclaration#src\">src#Lean.Elab.Command.elabDeclaration</a> . There is a lot though (main code is in <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.Elab.Term.elabMutualDef.go#src\">src#Lean.Elab.Term.elabMutualDef.go</a> and <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.Elab.addPreDefinitions#src\">src#Lean.Elab.addPreDefinitions</a> ), it would be great to have a metaprogramming interface to get the bells and whistles</p>",
        "id": 405561122,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1701546087
    },
    {
        "content": "<p>Ah, thank you! I searched around a lot for <code>elabDef</code>, <code>elabAbbrev</code> but didn’t find that one <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 405561768,
        "sender_full_name": "Sabrina Jewson",
        "timestamp": 1701546703
    },
    {
        "content": "<p>regarding questions (1) and (4):</p>\n<ul>\n<li>the way the <code>def</code> syntax resolves the declaration name from the parsed name is <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.Elab.mkDeclName#src\">src#Lean.Elab.mkDeclName</a></li>\n<li>the only thing that <code>abbrev</code> seems to do is set <code>ReducibilityHints.abbrev</code> in the <code>defnDecl</code> passed to the kernel (which is surprising, in particular it is <em>not</em> marked as reducible AFAICT)</li>\n</ul>",
        "id": 405562228,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1701547088
    },
    {
        "content": "<p>If you would like to contribute a metaprogramming interface that gives access to the functionality of <code>elabDeclaration</code>, Std or Mathlib would love to have it.</p>\n<p>We would like to provide more MetaM and TacticM level interfaces in Lean itself... Eventually!</p>",
        "id": 405586425,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1701566496
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> You scared me with your second bullet point, and I got a chance to try to read through the source. For <code>abbrev</code>, the <code>reducible</code> and <code>inline</code> attributes are added <a href=\"https://github.com/leanprover/lean4/blob/b0fe9d6cdca82723134d61f8fe23a8c674f308b7/src/Lean/Elab/DefView.lean#L47-L53\">here</a> as it constructs the <code>DefView</code>.</p>",
        "id": 405906176,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1701721555
    },
    {
        "content": "<p>oh sneaky, it's a syntax fixup</p>",
        "id": 405916437,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1701726193
    },
    {
        "content": "<p>I was looking for calls to <code>setReducibleAttribute</code> or uses of <code>.abbrev</code></p>",
        "id": 405916467,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1701726209
    }
]