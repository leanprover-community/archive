[
    {
        "content": "<p>Hi everyone, I'm trying to define the identity type and its inductor from the HoTT book, but I'm getting a type error. If I replace Type with Prop everywhere, it works perfectly. Why can I not use match like this on Type?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">IdType</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">refl</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">IdType</span> <span class=\"n\">a</span> <span class=\"n\">a</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">idTypeInduction</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">IdType</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"n\">x</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">IdType.refl</span> <span class=\"n\">x</span><span class=\"o\">)))</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">IdType</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">p</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">p</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"n\">IdType.refl</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">c</span> <span class=\"n\">x</span>\n\n<span class=\"c1\">-- type mismatch</span>\n<span class=\"c1\">--   c x</span>\n<span class=\"c1\">-- has type</span>\n<span class=\"c1\">--   C x x (IdType.refl x) : Type</span>\n<span class=\"c1\">-- but is expected to have type</span>\n<span class=\"c1\">--   C x x (IdType.refl x✝) : Type</span>\n</code></pre></div>",
        "id": 377938429,
        "sender_full_name": "Gordon Li",
        "timestamp": 1690149971
    },
    {
        "content": "<p>It looks like you made a typo in your type definition, this works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">IdType</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">refl</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">IdType</span> <span class=\"n\">x</span> <span class=\"n\">x</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">idTypeInduction</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">IdType</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"n\">x</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">IdType.refl</span> <span class=\"n\">x</span><span class=\"o\">)))</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">IdType</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">p</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">p</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"n\">IdType.refl</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">c</span> <span class=\"n\">x</span>\n</code></pre></div>",
        "id": 377939212,
        "sender_full_name": "Arthur Adjedj",
        "timestamp": 1690150398
    },
    {
        "content": "<p>Oh... Thanks a lot, I spent an hour on that. It's weird that it's working with the typo if it's a Prop...</p>",
        "id": 377939611,
        "sender_full_name": "Gordon Li",
        "timestamp": 1690150606
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"634937\">Gordon Li</span> has marked this topic as resolved.</p>",
        "id": 377939625,
        "sender_full_name": "Notification Bot",
        "timestamp": 1690150612
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"634937\">Gordon Li</span> <a href=\"#narrow/stream/113488-general/topic/.E2.9C.94.20match.20on.20type/near/377939611\">said</a>:</p>\n<blockquote>\n<p>Oh... Thanks a lot, I spent an hour on that. It's weird that it's working with the typo if it's a Prop...</p>\n</blockquote>\n<p>It doesn't for me, could you send an example with Prop where it works ?</p>",
        "id": 377940221,
        "sender_full_name": "Arthur Adjedj",
        "timestamp": 1690150873
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">IdProp</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">refl</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">IdProp</span> <span class=\"n\">a</span> <span class=\"n\">a</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">idPropInduction</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">IdProp</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"n\">x</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">IdProp.refl</span> <span class=\"n\">x</span><span class=\"o\">)))</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">IdProp</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">p</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">p</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"n\">IdProp.refl</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">c</span> <span class=\"n\">x</span>\n</code></pre></div>",
        "id": 377940389,
        "sender_full_name": "Gordon Li",
        "timestamp": 1690150977
    },
    {
        "content": "<p><code>set_option autoImplicit false</code> makes your original code an error much earlier, catching the typo</p>",
        "id": 377940801,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1690151282
    },
    {
        "content": "<p>Lean is just inventing a new variable for the <code>a</code> you mis-typed</p>",
        "id": 377940855,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1690151297
    },
    {
        "content": "<p><a href=\"#narrow/stream/270676-lean4/topic/.60autoImplicit.20true.60.20is.20evil/near/355142480\">This thread</a> has some discussion about whether it's sensible to have that on by default</p>",
        "id": 377940914,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1690151345
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"634937\">Gordon Li</span> <a href=\"#narrow/stream/113488-general/topic/.E2.9C.94.20match.20on.20type/near/377940389\">said</a>:</p>\n<blockquote>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">IdProp</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">refl</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">IdProp</span> <span class=\"n\">a</span> <span class=\"n\">a</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">idPropInduction</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">IdProp</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"n\">x</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">IdProp.refl</span> <span class=\"n\">x</span><span class=\"o\">)))</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">IdProp</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">p</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">p</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"n\">IdProp.refl</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">c</span> <span class=\"n\">x</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>With <code>x y : A</code> and <code>p : IdProp x y</code>, you first get that <code>x = y</code> by unification when pattern-matching on p. Then, since <code>Prop</code> is a proof-irrelevant universe,  any <code>p : IdProp x x</code> will be definitionally equal to <code>IdProp.refl foo</code> for any <code>foo : A</code>, and in particular, when <code>foo := x</code>.</p>",
        "id": 378034314,
        "sender_full_name": "Arthur Adjedj",
        "timestamp": 1690187201
    }
]