[
    {
        "content": "<p>Starting a new thread for this project.<br>\nCan someone explain me: when I build core</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"nb\">cd</span> build/releases\ncmake ../../src\nmake\n</code></pre></div>\n\n\n<p>How is this aware of any <code>.lean</code> files in core? I grepped through all the Makefiles, and they don't seem to mention lean files anywhere.</p>",
        "id": 197099043,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589171430
    },
    {
        "content": "<p>Or does it not care, but will you only notice once you run the tests if you've changed/moved a bunch of lean files?</p>",
        "id": 197099070,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589171485
    },
    {
        "content": "<p>Here is the relevant part of <code>CMakeLists.txt</code>:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"nb\">add_custom_target</span><span class=\"p\">(</span>\n    <span class=\"s\">standard_lib</span> <span class=\"s\">ALL</span>\n    <span class=\"s\">COMMAND</span> <span class=\"s2\">&quot;${LEAN_SOURCE_DIR}/../bin/lean&quot;</span> <span class=\"s\">--make</span> <span class=\"o\">${</span><span class=\"nv\">LEAN_EXTRA_MAKE_OPTS</span><span class=\"o\">}</span>\n    <span class=\"s\">DEPENDS</span> <span class=\"s\">bin_lean</span>\n    <span class=\"s\">WORKING_DIRECTORY</span> <span class=\"s2\">&quot;${LEAN_SOURCE_DIR}/../library&quot;</span>\n    <span class=\"p\">)</span>\n\n<span class=\"nb\">add_custom_target</span><span class=\"p\">(</span>\n    <span class=\"s\">leanpkg</span> <span class=\"s\">ALL</span>\n    <span class=\"s\">COMMAND</span> <span class=\"s2\">&quot;${LEAN_SOURCE_DIR}/../bin/lean&quot;</span> <span class=\"s\">--make</span> <span class=\"o\">${</span><span class=\"nv\">LEAN_EXTRA_MAKE_OPTS</span><span class=\"o\">}</span>\n    <span class=\"s\">DEPENDS</span> <span class=\"s\">standard_lib</span>\n    <span class=\"s\">WORKING_DIRECTORY</span> <span class=\"s2\">&quot;${LEAN_SOURCE_DIR}/../leanpkg&quot;</span>\n<span class=\"p\">)</span>\n</code></pre></div>",
        "id": 197100272,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1589173011
    },
    {
        "content": "<p>It just runs this command. It doesn't care what it does.</p>",
        "id": 197100278,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1589173038
    },
    {
        "content": "<p>/me should learn cmake</p>",
        "id": 197100279,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589173040
    },
    {
        "content": "<p>BTW, <span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> do you want me to look at lean buildsystem? A few years ago I contributed several patches to cmake and to KDE cmake files.</p>",
        "id": 197100333,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1589173150
    },
    {
        "content": "<p>If you only plan to edit Lean files, you can just mess around in <code>library</code> after compiling a binary from the latest commit.</p>",
        "id": 197100409,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1589173293
    },
    {
        "content": "<p>In particular, writing build files to source tree is generally a bad idea. If I have two build directories with different configuration, then I expect these two builds to be completely independent.</p>",
        "id": 197100460,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1589173359
    },
    {
        "content": "<p>Oh, maybe <a href=\"#narrow/stream/113488-general/topic/modifying.20lean.20core.20library.20code/near/194571633\" title=\"#narrow/stream/113488-general/topic/modifying.20lean.20core.20library.20code/near/194571633\">this post</a> by Jason will help? It could be an alternate way to play around with <code>library</code> without having to build Lean.</p>",
        "id": 197100464,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1589173374
    },
    {
        "content": "<p>But I guess I will have to touch <code>.cpp</code> as well. Cut <code>norm_num</code> away.</p>",
        "id": 197100473,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589173398
    },
    {
        "content": "<p>What should core know about natural and integer numbers? Only definitions of operations? Something else?</p>",
        "id": 197100520,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1589173453
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/lean/issues/224\">lean#224</a> is the first step</p>",
        "id": 197110201,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589182843
    },
    {
        "content": "<p>That PR removes all the CPP involving norm_num.</p>",
        "id": 197111904,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589183953
    },
    {
        "content": "<p>A follow-up PR should strip most algebra from the core library. But that lean code is pretty tangled )-;</p>",
        "id": 197111948,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589183988
    },
    {
        "content": "<p>/me is somewhat surprised that Lean code is faster than cpp code</p>",
        "id": 197112369,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1589184187
    },
    {
        "content": "<p>That's fine</p>",
        "id": 197112487,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589184255
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span> <a href=\"#narrow/stream/113488-general/topic/moving.20algebra.20out.20of.20core/near/197100333\">said</a>:</p>\n<blockquote>\n<p>BTW, <span class=\"user-mention silent\" data-user-id=\"110043\">Gabriel Ebner</span> do you want me to look at lean buildsystem? A few years ago I contributed several patches to cmake and to KDE cmake files.</p>\n</blockquote>\n<p>Are you talking about removing the part that copies lean to <code>bin/lean</code>?  I've already gotten used to this horrible hack.  I don't think that there's an immediate need to change it.  See also previous discussion here: <a href=\"https://github.com/leanprover/lean/issues/1918\">https://github.com/leanprover/lean/issues/1918</a></p>",
        "id": 197113896,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1589185234
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span> <a href=\"#narrow/stream/113488-general/topic/moving.20algebra.20out.20of.20core/near/197100520\">said</a>:</p>\n<blockquote>\n<p>What should core know about natural and integer numbers? Only definitions of operations? Something else?</p>\n</blockquote>\n<p>It needs a few lemmas for the equation compiler.  If you write <code>match n with 314 := a | 42 := b | _ := c end</code>, then it needs to prove that <code>314 â‰  42</code>.  The definitions of natural numbers (including exponentiation) are also required for the VM (because they are overriden) and the tactic framework.</p>",
        "id": 197114605,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1589185764
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span> The reason it's faster is because the C++ is using instance search and <code>norm_num</code> is (now) aggressively caching. It turns out that actual number crunching was nothing compared to finding typeclasses</p>",
        "id": 197118328,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589188073
    },
    {
        "content": "<p>This is what we need to unclutter:<br>\n<a href=\"/user_uploads/3121/WEHf9-B-Lka6tbRn01erZj_z/import_graph.pdf\">import_graph.pdf</a></p>",
        "id": 197121715,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589190334
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> Do you know by heart whether something like <code>init.meta.well_founded_tactics</code> has to stay in core?</p>",
        "id": 197122013,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589190520
    },
    {
        "content": "<p>that tactic is a mess, I'd like to see it gone</p>",
        "id": 197122044,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589190541
    },
    {
        "content": "<p>it should be <code>assumption</code></p>",
        "id": 197122074,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589190557
    },
    {
        "content": "<p>What does that mean for this project...</p>",
        "id": 197122501,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589190804
    },
    {
        "content": "<p>It can definitely be removed from core</p>",
        "id": 197122654,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589190881
    },
    {
        "content": "<p>Ok, I'll try my best</p>",
        "id": 197122743,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589190936
    },
    {
        "content": "<p>It is used by lean magic currently: if you leave off the <code>using_well_founded</code> clause in a well founded recursive definition, it will call the tactic in <code>well_founded_tactics</code> in order to solve the size decreasing theorem</p>",
        "id": 197122820,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589190973
    },
    {
        "content": "<p>that needs to be changed to another tactic, and I recommend <code>assumption</code></p>",
        "id": 197122835,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589190992
    },
    {
        "content": "<p>Does that mean a lot of proofs in mathlib will have to be fixed?</p>",
        "id": 197122895,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589191055
    },
    {
        "content": "<p>It does mean a regression for well founded definitions that currently are using the tactic to prove the size decreasing theorem; they will need to put the <code>using_well_founded</code> clause in and reference <code>well_founded_tactic</code> explicitly</p>",
        "id": 197122902,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589191063
    },
    {
        "content": "<p>And does lean need to be changed before <code>well_founded_tactics</code> can be removed? You seem to suggest that lean depends on it.</p>",
        "id": 197122961,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589191092
    },
    {
        "content": "<p>Well founded definitions like this are extremely rare in mathlib, and even when they are used the result isn't great, because it does recursion on <code>T.sizeof</code> which has few lemmas</p>",
        "id": 197123009,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589191132
    },
    {
        "content": "<p><code>well_founded_tactics.default</code> is referenced by lean</p>",
        "id": 197123399,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589191397
    },
    {
        "content": "<p>and it uses default construction of <code>well_founded_tactics</code>, resulting in the use of <code>well_founded_tactics.default_dec_tac</code></p>",
        "id": 197123434,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589191435
    },
    {
        "content": "<p>So if you change the default value of <code>well_founded_tactics.dec_tac</code> to <code>assumption</code>, you should be able to remove <code>default_dec_tac</code></p>",
        "id": 197123504,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589191480
    },
    {
        "content": "<p>Another option is to use a <code>def_replacer</code> here, so that users can mark their own default dec_tac, changing the global default</p>",
        "id": 197123633,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589191575
    },
    {
        "content": "<p>This sounds orthogonal to <code>norm_num</code>, but maybe not to moving algebra out of core.</p>",
        "id": 197123699,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589191635
    },
    {
        "content": "<p><code>well_founded_tactics.default_dec_tac</code> is basically a poor man's <code>linarith</code></p>",
        "id": 197123753,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589191682
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/lean/issues/229\">lean#229</a> is a wip PR that compiles</p>",
        "id": 197181675,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589219689
    },
    {
        "content": "<p>I would like some advice on the way forward.</p>",
        "id": 197181717,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589219706
    },
    {
        "content": "<p>Previously <code>init.data.nat.lemmas</code> imported <code>init.algebra.functions</code> and hence the entire algebraic hierarchy in core.<br>\nNow <code>init.algebra.functions</code> only imports <code>init.algebra.order</code>, and hence <code>init.algebra.{group,field,ordered_ring}</code> etc can all be moved out of core.</p>",
        "id": 197181902,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589219789
    },
    {
        "content": "<p>I had to prove something like 20 lemmas specifically for <code>nat</code> and <code>int</code> that would otherwise follow from an <code>ordered_(semi)ring</code> instance.</p>",
        "id": 197182022,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589219852
    },
    {
        "content": "<p>Wow, so this really is the light at the end of the tunnel?</p>",
        "id": 197182138,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589219897
    },
    {
        "content": "<p>Also, <code>nat</code> now has a personal <code>has_dvd</code> instance, and <code>int</code> its own <code>has_sub</code> instance, because they can't get them from <code>comm_semiring</code> resp. <code>add_group</code>.</p>",
        "id": 197182155,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589219910
    },
    {
        "content": "<p>When you posted that graph earlier I was just thinking that this might be impossible</p>",
        "id": 197182168,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589219916
    },
    {
        "content": "<p>Nat also has its own has_pow instance though, and this causes lots of problems</p>",
        "id": 197182266,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589219972
    },
    {
        "content": "<p>But mine are defeq to what you would get otherwise</p>",
        "id": 197182300,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589219990
    },
    {
        "content": "<p>I was hoping you'd say that :-)</p>",
        "id": 197182327,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589220001
    },
    {
        "content": "<p>So, for <a href=\"https://github.com/leanprover-community/lean/issues/229\">lean#229</a> should I now remove all the <code>init.algebra.*</code> stuff from core? Or should I wait for a bit, so that people can look at what the PR looks like now?</p>",
        "id": 197201501,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589229434
    },
    {
        "content": "<p>For me, it would be easier to look at a version with deleted code (as opposed to commented out or not imported anymore).</p>",
        "id": 197203205,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1589230349
    },
    {
        "content": "<p>I wonder what should we do with copyrights when we move code to mathlib, especially when we move code out of files (c) Microsoft to files (c) list of authors.</p>",
        "id": 197203339,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1589230421
    },
    {
        "content": "<p>It would be more polite to ask Leo about this copyright thing.</p>",
        "id": 197203517,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1589230512
    },
    {
        "content": "<p>Who volunteers to ask Leo?</p>",
        "id": 197204895,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1589231246
    }
]