[
    {
        "content": "<p>Starting a new thread for this project.<br>\nCan someone explain me: when I build core</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"nb\">cd</span> build/releases\ncmake ../../src\nmake\n</code></pre></div>\n\n\n<p>How is this aware of any <code>.lean</code> files in core? I grepped through all the Makefiles, and they don't seem to mention lean files anywhere.</p>",
        "id": 197099043,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589171430
    },
    {
        "content": "<p>Or does it not care, but will you only notice once you run the tests if you've changed/moved a bunch of lean files?</p>",
        "id": 197099070,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589171485
    },
    {
        "content": "<p>Here is the relevant part of <code>CMakeLists.txt</code>:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"nb\">add_custom_target</span><span class=\"p\">(</span>\n    <span class=\"s\">standard_lib</span> <span class=\"s\">ALL</span>\n    <span class=\"s\">COMMAND</span> <span class=\"s2\">&quot;${LEAN_SOURCE_DIR}/../bin/lean&quot;</span> <span class=\"s\">--make</span> <span class=\"o\">${</span><span class=\"nv\">LEAN_EXTRA_MAKE_OPTS</span><span class=\"o\">}</span>\n    <span class=\"s\">DEPENDS</span> <span class=\"s\">bin_lean</span>\n    <span class=\"s\">WORKING_DIRECTORY</span> <span class=\"s2\">&quot;${LEAN_SOURCE_DIR}/../library&quot;</span>\n    <span class=\"p\">)</span>\n\n<span class=\"nb\">add_custom_target</span><span class=\"p\">(</span>\n    <span class=\"s\">leanpkg</span> <span class=\"s\">ALL</span>\n    <span class=\"s\">COMMAND</span> <span class=\"s2\">&quot;${LEAN_SOURCE_DIR}/../bin/lean&quot;</span> <span class=\"s\">--make</span> <span class=\"o\">${</span><span class=\"nv\">LEAN_EXTRA_MAKE_OPTS</span><span class=\"o\">}</span>\n    <span class=\"s\">DEPENDS</span> <span class=\"s\">standard_lib</span>\n    <span class=\"s\">WORKING_DIRECTORY</span> <span class=\"s2\">&quot;${LEAN_SOURCE_DIR}/../leanpkg&quot;</span>\n<span class=\"p\">)</span>\n</code></pre></div>",
        "id": 197100272,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1589173011
    },
    {
        "content": "<p>It just runs this command. It doesn't care what it does.</p>",
        "id": 197100278,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1589173038
    },
    {
        "content": "<p>/me should learn cmake</p>",
        "id": 197100279,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589173040
    },
    {
        "content": "<p>BTW, <span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> do you want me to look at lean buildsystem? A few years ago I contributed several patches to cmake and to KDE cmake files.</p>",
        "id": 197100333,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1589173150
    },
    {
        "content": "<p>If you only plan to edit Lean files, you can just mess around in <code>library</code> after compiling a binary from the latest commit.</p>",
        "id": 197100409,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1589173293
    },
    {
        "content": "<p>In particular, writing build files to source tree is generally a bad idea. If I have two build directories with different configuration, then I expect these two builds to be completely independent.</p>",
        "id": 197100460,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1589173359
    },
    {
        "content": "<p>Oh, maybe <a href=\"#narrow/stream/113488-general/topic/modifying.20lean.20core.20library.20code/near/194571633\" title=\"#narrow/stream/113488-general/topic/modifying.20lean.20core.20library.20code/near/194571633\">this post</a> by Jason will help? It could be an alternate way to play around with <code>library</code> without having to build Lean.</p>",
        "id": 197100464,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1589173374
    },
    {
        "content": "<p>But I guess I will have to touch <code>.cpp</code> as well. Cut <code>norm_num</code> away.</p>",
        "id": 197100473,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589173398
    },
    {
        "content": "<p>What should core know about natural and integer numbers? Only definitions of operations? Something else?</p>",
        "id": 197100520,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1589173453
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/lean/issues/224\">lean#224</a> is the first step</p>",
        "id": 197110201,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589182843
    },
    {
        "content": "<p>That PR removes all the CPP involving norm_num.</p>",
        "id": 197111904,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589183953
    },
    {
        "content": "<p>A follow-up PR should strip most algebra from the core library. But that lean code is pretty tangled )-;</p>",
        "id": 197111948,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589183988
    },
    {
        "content": "<p>/me is somewhat surprised that Lean code is faster than cpp code</p>",
        "id": 197112369,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1589184187
    },
    {
        "content": "<p>That's fine</p>",
        "id": 197112487,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589184255
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span> <a href=\"#narrow/stream/113488-general/topic/moving.20algebra.20out.20of.20core/near/197100333\">said</a>:</p>\n<blockquote>\n<p>BTW, <span class=\"user-mention silent\" data-user-id=\"110043\">Gabriel Ebner</span> do you want me to look at lean buildsystem? A few years ago I contributed several patches to cmake and to KDE cmake files.</p>\n</blockquote>\n<p>Are you talking about removing the part that copies lean to <code>bin/lean</code>?  I've already gotten used to this horrible hack.  I don't think that there's an immediate need to change it.  See also previous discussion here: <a href=\"https://github.com/leanprover/lean/issues/1918\">https://github.com/leanprover/lean/issues/1918</a></p>",
        "id": 197113896,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1589185234
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span> <a href=\"#narrow/stream/113488-general/topic/moving.20algebra.20out.20of.20core/near/197100520\">said</a>:</p>\n<blockquote>\n<p>What should core know about natural and integer numbers? Only definitions of operations? Something else?</p>\n</blockquote>\n<p>It needs a few lemmas for the equation compiler.  If you write <code>match n with 314 := a | 42 := b | _ := c end</code>, then it needs to prove that <code>314 â‰  42</code>.  The definitions of natural numbers (including exponentiation) are also required for the VM (because they are overriden) and the tactic framework.</p>",
        "id": 197114605,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1589185764
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span> The reason it's faster is because the C++ is using instance search and <code>norm_num</code> is (now) aggressively caching. It turns out that actual number crunching was nothing compared to finding typeclasses</p>",
        "id": 197118328,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589188073
    }
]