[
    {
        "content": "<p>I taught a Introduction to Lean 3 course this semester, and one student came upon an odd issue using quotient groups.   The student reduced one part of a proof to showing that   <br>\ng * h = g * h<br>\nwhich ought to be true by reflexivity; however, this was prevented from happening due to the hypothesis [group (G / N)].  I think the hypothesis [group (G/N)] is redundant, since G/N is a group by virtue of N being a normal subgroup and the definition of taking the quotient group. (Then again, group G doesn't type check as Prop, so I am not entirely sure what having [group (G/N)] as a hypothesis means.)   In any case, removing the hypothesis [group (G/N)] makes everything work (i.e., the goal below closes, and the sorry is not necessary), and I would be curious if there is a nice way to explain this behavior.</p>\n<p>Below is code replicating the issue.  </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.real.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">group_theory.quotient_group</span>\n\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]</span>\n          <span class=\"o\">(</span><span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"n\">subgroup</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hN</span> <span class=\"o\">:</span> <span class=\"n\">subgroup.normal</span> <span class=\"n\">N</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">quot_map</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">@</span><span class=\"n\">quotient_group.mk'</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hN</span><span class=\"o\">)</span>\n<span class=\"k\">#check</span> <span class=\"n\">quot_map</span> <span class=\"n\">G</span>\n<span class=\"k\">#check</span> <span class=\"n\">quot_map</span> <span class=\"n\">G</span> <span class=\"n\">N</span> <span class=\"n\">hN</span>\n\n<span class=\"kd\">example</span>\n    <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"bp\">⧸</span> <span class=\"n\">N</span><span class=\"o\">)]</span>\n    <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">G</span> <span class=\"bp\">⧸</span> <span class=\"n\">N</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">g'</span> <span class=\"n\">h'</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">hh'</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">quot_map</span> <span class=\"n\">G</span> <span class=\"n\">N</span> <span class=\"n\">hN</span><span class=\"o\">)</span> <span class=\"n\">h'</span> <span class=\"bp\">=</span> <span class=\"n\">h</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">hg'</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">quot_map</span> <span class=\"n\">G</span> <span class=\"n\">N</span> <span class=\"n\">hN</span><span class=\"o\">)</span> <span class=\"n\">g'</span> <span class=\"bp\">=</span> <span class=\"n\">g</span><span class=\"o\">)</span>\n    <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">quot_map</span> <span class=\"n\">G</span> <span class=\"n\">N</span> <span class=\"n\">hN</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g'</span> <span class=\"bp\">*</span> <span class=\"n\">h'</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"bp\">*</span> <span class=\"n\">h</span>\n  <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">monoid_hom.map_mul</span><span class=\"o\">,</span> <span class=\"n\">hh'</span><span class=\"o\">,</span> <span class=\"n\">hg'</span><span class=\"o\">],</span>\n  <span class=\"c\">/-</span><span class=\"cm\"> The remaining goal is</span>\n<span class=\"cm\">      ⊢ g * h = g * h</span>\n<span class=\"cm\">     If the hypothesis [group (G / N)] is</span>\n<span class=\"cm\">     commented out, the goal closes automatically,</span>\n<span class=\"cm\">     but it does not if the hypothesis</span>\n<span class=\"cm\">     \"[group (G / N)]\" is left in.  Why is that?</span>\n<span class=\"cm\">  -/</span>\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 355572485,
        "sender_full_name": "Phil Wood",
        "timestamp": 1683137041
    },
    {
        "content": "<p>Write <code>set_option pp.all true</code> at the top of the file and you will see that the two <code>g * h</code> are not the same.<br>\nOne is the sensible one coming from the multiplication on <code>g</code>. The other one is an arbitrary multiplication introduced by your extraneous <code>[group (G / N)]</code>.</p>",
        "id": 355573222,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1683137219
    },
    {
        "content": "<p>Phil, are your group theory exercises available somewhere?</p>",
        "id": 355573827,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1683137361
    },
    {
        "content": "<p><code>[group (G / N)]</code> means \"let us now put a totally arbitrary group structure on <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>G</mi><mi mathvariant=\"normal\">/</mi><mi>N</mi></mrow><annotation encoding=\"application/x-tex\">G/N</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">G</span><span class=\"mord\">/</span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span></span></span></span> which is unrelated to the one you're thinking of\"</p>",
        "id": 355574055,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1683137414
    },
    {
        "content": "<p>like <code>(G : Type) [group G]</code> means \"let G be a set, and then let's put a totally arbitrary group structure on G which we know nothing about (but now things like <code>1 : G</code> make sense, when they didn't before)\"</p>",
        "id": 355574153,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1683137441
    },
    {
        "content": "<p>This is super helpful!  So that hypothesis <code>[group (G/N)]</code> is doing something new (and problematic!) to the proof state.   And I can indeed see the different multiplication being used with the <code>set_option pp.all true</code>.</p>\n<p>Patrick—I don't have any particular group theory exercises.  A few students did final projects for the course involving groups,  for example this particular student was working to implement the statement \"If N is a normal subgroup of G, then G/N is abelian if and only if [G,G] is contained in N.\"  And by now, those students have a better understanding of the group theory libraries than I do!</p>",
        "id": 355577457,
        "sender_full_name": "Phil Wood",
        "timestamp": 1683138292
    },
    {
        "content": "<p>Lean's typeclass inference system should find the term of type <code>group (G / N)</code> automatically, it's not your job to make a term of this type. Looking in the library file for quotient groups I can see it's called <a href=\"https://leanprover-community.github.io/mathlib_docs/find/quotient_group.quotient.group\">docs#quotient_group.quotient.group</a> , and following that link I see that the typeclass inference system is expecting to find <code>[N.normal]</code>. This tells me that <code>subgroup.normal</code> is actually a class, so you would probably be better off writing <code>[hN : subgroup.normal N]</code>(or, using dot notation, <code>[hN : N.normal]</code>) so that the typeclass inference system knows that the subgroup is normal.</p>",
        "id": 355584236,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1683140202
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/quotient_group.mk'\">docs#quotient_group.mk'</a></p>",
        "id": 355584393,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1683140260
    },
    {
        "content": "<p>Aha, that function also expects the typeclass inference system to find the proof of normality, so you wouldn't need the <code>@</code> in the definition of <code>quot_map</code> if you'd put <code>hN</code> into the system. Indeed, if you <code>open quotient_group</code> then you don't even need to define <code>quot_map</code> at all, you can just call it <code>mk' N</code> and it should work fine.</p>",
        "id": 355584654,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1683140342
    }
]