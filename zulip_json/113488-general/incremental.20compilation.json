[
    {
        "content": "<p>In any reasonably sized lean file, when you are editing in the top half, there is a really noticeable delay as it rebuilds everything below, constantly. Including on things like whitespace, comment editing, that can not even in principle alter the type checking or evaluation of anything below. Are there any plans to make a more clever incremental compiler that only re-does work where changes to the text invalidates old values? I know that the scala compiler uses a combination of timestamps and checksums to enable this, in effect making the entire compiler into a reactive, time-indexed computation.</p>",
        "id": 393476077,
        "sender_full_name": "Matthew Pocock",
        "timestamp": 1695817252
    },
    {
        "content": "<p>Yes, Sebastian has many plans in this direction. His WITP slides have some outlines about the module system. For inside a single file, there is the possibility of parallel elaboration of independent pieces (e.g. elaborating proofs of theorems without holding up the rest of the file). You may have to wait a bit for him to have time to explain detailed plans.</p>",
        "id": 393480462,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1695818907
    },
    {
        "content": "<p>Also don't forget: you can split files in multiple smaller files. :-)</p>",
        "id": 393480544,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1695818940
    },
    {
        "content": "<p>I've long wished we had a 1000 line linter in Mathlib!</p>",
        "id": 393480587,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1695818968
    },
    {
        "content": "<p>A low-brow version of achieving this is to place <code>#exit</code> after the declaration that you are modifying, to prevent further compilation.</p>\n<p>Also, I used to intersperse my code with <code>#eval 0</code>s, since editing a declaration had the effect of recompiling the one <em>above</em> it.  This behaviour may have changed now, though.</p>\n<p>When dealing with long proofs, <code>sorry</code>ing or <code>stop</code>ping already solved branches also helps.</p>",
        "id": 393489181,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1695821859
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"321459\">@Damiano Testa</span>  yup - I added an <code>#exit</code> for my sanity sake. At least I know this is on the radar of the devs.</p>",
        "id": 393489688,
        "sender_full_name": "Matthew Pocock",
        "timestamp": 1695822007
    },
    {
        "content": "<p>I didn't know about <code>#exit</code>!  This is very convenient.</p>",
        "id": 394169641,
        "sender_full_name": "Ioannis Konstantoulas",
        "timestamp": 1696146980
    },
    {
        "content": "<p>“Very convenient” seems an exaggeration; I'd say it's a “decent workaround” for a relevant usability issue. I hope eventually interactive editing will be fully smooth :-)</p>",
        "id": 394176892,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1696151213
    }
]