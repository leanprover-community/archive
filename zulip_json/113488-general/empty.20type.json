[
    {
        "content": "<p>I'm brand new to lean. How do I map out of the Empty type? <br>\nFor example, I want to write this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">bang0</span> <span class=\"o\">{</span> <span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">Empty</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">T</span> <span class=\"o\">:=</span>          <span class=\"c1\">-- what goes here?</span>\n</code></pre></div>",
        "id": 389778803,
        "sender_full_name": "David Spivak",
        "timestamp": 1694132264
    },
    {
        "content": "<p>Hi David!</p>",
        "id": 389779978,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1694132828
    },
    {
        "content": "<p>I would probably write:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.Common</span> <span class=\"c1\">-- or import Std.Tactic.RCases if you're happy to use Std but not Mathlib</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">bang0</span> <span class=\"o\">{</span> <span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">Empty</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">T</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rintro</span> <span class=\"o\">⟨⟩</span>\n</code></pre></div>",
        "id": 389780025,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1694132851
    },
    {
        "content": "<p>which says: \"introduce an argument, at the same time deconstructing it\", and Lean works out that there was no way to deconstruct an <code>Empty</code>.</p>",
        "id": 389780154,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1694132902
    },
    {
        "content": "<p>Hey Scott!! Thanks!  I think I have work to do, because it says \"unknown package 'mathlib',\" which seems like a me problem.</p>",
        "id": 389780226,
        "sender_full_name": "David Spivak",
        "timestamp": 1694132941
    },
    {
        "content": "<p>Just updated my code block to include imports. You're allowed to say <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> to people who forget to do that. :-)</p>",
        "id": 389780577,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1694133099
    },
    {
        "content": "<p>If you're in a brand new project with no imports, then</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">bang0</span> <span class=\"o\">{</span> <span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">Empty</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">T</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">x</span>\n  <span class=\"n\">cases</span> <span class=\"n\">x</span>\n</code></pre></div>",
        "id": 389780726,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1694133151
    },
    {
        "content": "<p>But we should get you up to speed with Mathlib, because it has <strong>lots</strong> of goodies that make writing proofs easier.</p>",
        "id": 389780763,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1694133170
    },
    {
        "content": "<p>That got it. Thanks!</p>",
        "id": 389780800,
        "sender_full_name": "David Spivak",
        "timestamp": 1694133192
    },
    {
        "content": "<p>Did you already create a project using <code>lake new</code>?</p>",
        "id": 389780818,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1694133201
    },
    {
        "content": "<p>Once you've got imports working, I can show you the tactics that you would use to <strong>find</strong> the answer above even if you didn't already know it.</p>",
        "id": 389781024,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1694133298
    },
    {
        "content": "<p>no, it's all just in my local repo. I don't know about lake new.</p>",
        "id": 389781919,
        "sender_full_name": "David Spivak",
        "timestamp": 1694133661
    },
    {
        "content": "<p>bang0 didn't work as well as i hoped: I have a type that reduces to Empty, but Lean doesn't seem to know that; I try calling bang0 and Lean doesn't realize it applies.</p>",
        "id": 389782297,
        "sender_full_name": "David Spivak",
        "timestamp": 1694133833
    },
    {
        "content": "<p>Anyway, thanks Scott, but I should stop for the night; I'm feeling the RSI flaring up a bit. Lean is too fun! I'll look into Lake and mathlib soon.</p>",
        "id": 389782861,
        "sender_full_name": "David Spivak",
        "timestamp": 1694134040
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"647851\">David Spivak</span> <a href=\"#narrow/stream/113488-general/topic/empty.20type/near/389782297\">said</a>:</p>\n<blockquote>\n<p>bang0 didn't work as well as i hoped: I have a type that reduces to Empty, but Lean doesn't seem to know that; I try calling bang0 and Lean doesn't realize it applies.</p>\n</blockquote>\n<p>It depends a bit on what you mean by \"reduces\", but it might be possible to use <code>Empty.elim</code> or something like that. Then Lean will try to unify your expression with <code>Empty</code> and hopefully realise that it works.</p>",
        "id": 389807846,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1694148023
    },
    {
        "content": "<p>Note that \"the empty type <code>Empty</code>\" is different to \"a type which I can prove has no terms\"; unlike in set theory there is more than one empty type in type theory. The most effective way to ask questions here is to post a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> (this is a link explaining more).</p>",
        "id": 389815332,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1694152745
    },
    {
        "content": "<p>Isn't the simplest way to map out <code>Empty.rec</code> ?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">out</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">Empty</span> <span class=\"bp\">→</span> <span class=\"n\">out</span> <span class=\"o\">:=</span>\n  <span class=\"n\">Empty.rec</span>\n</code></pre></div>",
        "id": 389887290,
        "sender_full_name": "Ioannis Konstantoulas",
        "timestamp": 1694181438
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=isEmptyElim#doc\">docs#isEmptyElim</a> is more general</p>",
        "id": 389888624,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1694181914
    },
    {
        "content": "<p>Empty.rec works!!!! Thanks!</p>",
        "id": 389926888,
        "sender_full_name": "David Spivak",
        "timestamp": 1694196363
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Std</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">out</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">Empty</span> <span class=\"bp\">→</span> <span class=\"n\">out</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span><span class=\"bp\">.</span>\n</code></pre></div>\n<p>There were a couple of fun threads on this (which I cannot track down at the moment). Do we have the dot?</p>",
        "id": 389929936,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1694197756
    },
    {
        "content": "<p>Yes, but it requires <code>import Std</code> (or less)</p>",
        "id": 390020783,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1694256210
    }
]