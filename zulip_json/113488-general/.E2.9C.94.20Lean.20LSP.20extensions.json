[
    {
        "content": "<p>Hi, I've been working for a while in a Lean 4 plugin for the IntelliJ family of IDEs (as a hobby project) and recently reached a <em>proof of concept</em> state where I can finally start to implement the handling for LSP requests (since I made my own LSP framework in Kotlin for fun).</p>\n<p>I know Lean's LSP server sends several custom requests, such as <code>$/fileProgress</code> (and even more fun, extends the type of parameters from existing requests). It's not hard to imagine it also supports a few custom client requests and whatnot.</p>\n<p>Since I'm now at the point where I'll be working on the integration of different LSP features with the IDE, I was wondering if these extensions to the LSP were documented anywhere.<br>\nI imagine we don't have a convenient Lean LSP <a href=\"https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#metaModel\">meta model</a> like the base LSP, do we?</p>\n<p>Should I simply read through the server/(VSC) client code instead?</p>",
        "id": 394601783,
        "sender_full_name": "Endor H",
        "timestamp": 1696328018
    },
    {
        "content": "<p>I don't quite understand the background of this  question. Are you planning on basically implementing a Lean 4 LSP server on your own for an IntelliJ plugin?</p>\n<p>Either way I'm not aware of such a file if it exists  but I'm also not  super deep  into the LSP stuff so don't give up hope^^</p>",
        "id": 394610762,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1696331050
    },
    {
        "content": "<p>I think to me it sounds like an LSP client, but perhaps <span class=\"user-mention\" data-user-id=\"646492\">@Endor H</span> can clarify.<br>\nIf that's what you mean, speaking from having done this in neovim (albeit with help) I don't think it was very difficult.</p>",
        "id": 394621541,
        "sender_full_name": "Julian Berman",
        "timestamp": 1696334868
    },
    {
        "content": "<p>You might find the neovim plugin itself to be a decent reference on the extensions, specifically <a href=\"https://github.com/Julian/lean.nvim/blob/main/lua/lean/lsp.lua\">https://github.com/Julian/lean.nvim/blob/main/lua/lean/lsp.lua</a> and <a href=\"https://github.com/Julian/lean.nvim/blob/main/lua/lean/rpc.lua\">https://github.com/Julian/lean.nvim/blob/main/lua/lean/rpc.lua</a> represent nearly all the communication that was needed with the Lean server.</p>",
        "id": 394621779,
        "sender_full_name": "Julian Berman",
        "timestamp": 1696334942
    },
    {
        "content": "<p>A more concrete recommendation is definitely \"start with getting an infoview working by making requests to get the goal state\", the rest is pretty minor.</p>",
        "id": 394621934,
        "sender_full_name": "Julian Berman",
        "timestamp": 1696334999
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"395550\">Henrik Böving</span> <a href=\"#narrow/stream/113488-general/topic/Lean.20LSP.20extensions/near/394610762\">said</a>:</p>\n<blockquote>\n<p>Are you planning on basically implementing a Lean 4 LSP server on your own for an IntelliJ plugin?</p>\n</blockquote>\n<p>No, I'm just making an LSP client, as <span class=\"user-mention silent\" data-user-id=\"321696\">Julian Berman</span> guessed. Perhaps I should've been more specific <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span><br>\nI know Lean's LSP server is written in Lean, which allows Lean libraries to extend some of its features (can't wait to play with that xD)</p>",
        "id": 394633457,
        "sender_full_name": "Endor H",
        "timestamp": 1696338954
    },
    {
        "content": "<p>I've already managed to get the connection and handshake with the LSP server working, so now I was wondering if there was an exhaustive list of the extensions added by Lean's server to the protocol.</p>",
        "id": 394634071,
        "sender_full_name": "Endor H",
        "timestamp": 1696339148
    },
    {
        "content": "<p>If I recall correctly, it's just <code>'$/lean/fileProgress'</code> -- the other request we override simply to tweak diagnostic ranges (which may have been fixed or changed upstream by now even) and then also it seems to do some infoview work. But yeah for LSP requests, just 2 is what we implement in nvim on top of the \"usual\" editor interaction.</p>",
        "id": 394634500,
        "sender_full_name": "Julian Berman",
        "timestamp": 1696339282
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"321696\">Julian Berman</span> <a href=\"#narrow/stream/113488-general/topic/Lean.20LSP.20extensions/near/394621779\">said</a>:</p>\n<blockquote>\n<p>You might find the neovim plugin itself to be a decent reference on the extensions</p>\n</blockquote>\n<p>Thanks, <span class=\"user-mention\" data-user-id=\"321696\">@Julian Berman</span> , those are quite helpful pointers.<br>\nDo you perhaps know where the Lean LSP server source is hosted?</p>",
        "id": 394634513,
        "sender_full_name": "Endor H",
        "timestamp": 1696339286
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/lean4/tree/6b93f05cd172640253ad1ed27935167e5a3af981/src/Lean/Server\">https://github.com/leanprover/lean4/tree/6b93f05cd172640253ad1ed27935167e5a3af981/src/Lean/Server</a> and <a href=\"https://github.com/leanprover/lean4/tree/6b93f05cd172640253ad1ed27935167e5a3af981/src/Lean/Data/Lsp\">https://github.com/leanprover/lean4/tree/6b93f05cd172640253ad1ed27935167e5a3af981/src/Lean/Data/Lsp</a></p>",
        "id": 394634812,
        "sender_full_name": "Julian Berman",
        "timestamp": 1696339373
    },
    {
        "content": "<p>Oh, alright. I also knew of the diagnostic ranges tweak (since it crashed my JSON deserializer once).<br>\nI wasn't sure if there'd be many more extensions.</p>",
        "id": 394634949,
        "sender_full_name": "Endor H",
        "timestamp": 1696339417
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"321696\">Julian Berman</span> <a href=\"#narrow/stream/113488-general/topic/Lean.20LSP.20extensions/near/394634812\">said</a>:</p>\n<blockquote>\n<p><a href=\"https://github.com/leanprover/lean4/tree/6b93f05cd172640253ad1ed27935167e5a3af981/src/Lean/Server\">https://github.com/leanprover/lean4/tree/6b93f05cd172640253ad1ed27935167e5a3af981/src/Lean/Server</a> and <a href=\"https://github.com/leanprover/lean4/tree/6b93f05cd172640253ad1ed27935167e5a3af981/src/Lean/Data/Lsp\">https://github.com/leanprover/lean4/tree/6b93f05cd172640253ad1ed27935167e5a3af981/src/Lean/Data/Lsp</a></p>\n</blockquote>\n<p>Ok, that's really helpful. Thanks a lot ^^</p>",
        "id": 394635256,
        "sender_full_name": "Endor H",
        "timestamp": 1696339500
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"646492\">Endor H</span> has marked this topic as resolved.</p>",
        "id": 394635286,
        "sender_full_name": "Notification Bot",
        "timestamp": 1696339512
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"321696\">Julian Berman</span> <a href=\"#narrow/stream/113488-general/topic/.E2.9C.94.20Lean.20LSP.20extensions/near/394621934\">said</a>:</p>\n<blockquote>\n<p>A more concrete recommendation is definitely \"start with getting an infoview working by making requests to get the goal state\", the rest is pretty minor.</p>\n</blockquote>\n<p>Yeah, the infoview is definitely one of my first priorities, but I'm still a bit far from getting it to work xD</p>",
        "id": 394635652,
        "sender_full_name": "Endor H",
        "timestamp": 1696339625
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"646492\">@Endor H</span> we tried to put all the extra messages Lean adds to LSP in <a href=\"https://github.com/leanprover/lean4/blob/6b93f05cd172640253ad1ed27935167e5a3af981/src/Lean/Data/Lsp/Extra.lean\">https://github.com/leanprover/lean4/blob/6b93f05cd172640253ad1ed27935167e5a3af981/src/Lean/Data/Lsp/Extra.lean</a> , though I can't guarantee they are all actually contained in that file. Note also that <code>$/rpc/call</code> is a 'meta-message' which carries the payload of an RPC method call, and there are a bunch of these (RPC methods) scattered throughout the codebase.</p>",
        "id": 394683763,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1696355976
    }
]