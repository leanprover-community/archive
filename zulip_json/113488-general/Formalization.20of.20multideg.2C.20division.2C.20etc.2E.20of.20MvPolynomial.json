[
    {
        "content": "<p>Based on section 2 of the book <a href=\"https://link.springer.com/book/10.1007/978-3-319-16721-3\">Ideals, Varieties, and Algorithms</a>, I have formalized something about multivariable polynomial in Lean4 (here is <a href=\"https://github.com/Hagb/lean-groebner\">the source code repository</a> and <a href=\"#narrow/stream/113489-new-members/topic/formalizing.20something.20of.20algebraic.20geometry/near/346595985\">my previous zulip topic</a>):</p>\n<ul>\n<li>Term order (modified from <a href=\"https://github.com/leanprover-community/mathlib4/blob/master/Mathlib/Order/Synonym.lean\">Mathlib4</a> and <a href=\"#narrow/stream/113489-new-members/topic/.E2.9C.94.20Override.20default.20ordering.20instance/near/339882298\">the answer from Anne Baanen </a>)</li>\n<li>Multidegree and some of its properties</li>\n<li><a href=\"https://en.m.wikipedia.org/wiki/Gr%C3%B6bner_basis#Reduction\">DIvision of multivariable polynomials</a> and its properties</li>\n<li>Gröbner basis (Groebner basis) and a few properties of it</li>\n</ul>\n<p>Are they possible to be feedbacked to Mathlib(4)? (But I think that my codes are probably very naive.)<br>\nI am new to both Lean(4) and computational algebraic geometry. Any suggestion will be valuable to me.</p>",
        "id": 362204990,
        "sender_full_name": "Hagb (Junyu Guo)",
        "timestamp": 1685457559
    },
    {
        "content": "<p>Yes, we'd love to have this material in mathlib4. While the port is still going on it's probably best that \"new lemmas for old files\" instead get put in new files, along with careful notes about where they should eventually be moved. This is a bit awkward, but hopefully we will only be in this phase briefly.</p>",
        "id": 362324014,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1685494076
    },
    {
        "content": "<p>I'm a bit confused having an initial look at your work. What is the purpose of the <code>TermOrder</code> type synonym? Don't you need <em>different</em> synonyms for each of the different term orderings? (Or a <code>TermOrder</code> type with additional \"unused argument\" parameters that specify the term ordering?)</p>",
        "id": 362324136,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1685494145
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/113488-general/topic/Formalization.20of.20multideg.2C.20division.2C.20etc.2E.20of.20MvPolynomial/near/362324136\">said</a>:</p>\n<blockquote>\n<p>I'm a bit confused having an initial look at your work. What is the purpose of the <code>TermOrder</code> type synonym? Don't you need <em>different</em> synonyms for each of the different term orderings? (Or a <code>TermOrder</code> type with additional \"unused argument\" parameters that specify the term ordering?)</p>\n</blockquote>\n<p>My initial idea was that <code>TermOrder</code> is used to avoid confusion with the original <code>≤</code> and <code>&lt;</code> on <code>Finsupp</code>. At the same time, a different term order can be specified through a different <code>TermOrderClass</code>, but I think it is a bad idea that can cause a lot of inconvenience in the future. (I just didn't have better idea at that time.)</p>\n<p>Thanks very much for your idea! How about having a <code>LinearOrder</code> argument for <code>TermOrder</code> and let <code>TermOrderClass</code> get <code>LinearOrder</code> as an instance class? (Define  <code>TermOrder</code> as <code>def TermOrder (LinearOrder α) (α : Type _) := α</code> and <code>TermOrderClass</code> as  <code>class TermOrderClass (β : Type _) [LinearOrder  β] ...</code>, and set the <code>LinearOrder α</code> as an instance of <code>LinearOrder (TermOrder α)</code>, so we can use <code>TermOrder a_linear_order (σ→₀ℕ)</code> and <code>TermOrderClass (TermOrder a_linear_order (σ→₀ℕ))</code>.)</p>\n<p>(Sorry for my bad English, if there is any wrong expression.)</p>",
        "id": 362328615,
        "sender_full_name": "Hagb (Junyu Guo)",
        "timestamp": 1685497698
    },
    {
        "content": "<p>It seems complicated. I had imagined that we would just be defining <code>lex</code>, <code>deglex</code>, <code>degrevlex</code>, etc, all just as synonyms of <code>σ→₀ℕ</code>, and then defining different linear orders on each of them.</p>",
        "id": 362353804,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1685513529
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span><a href=\"#narrow/stream/113488-general/topic/Formalization.20of.20multideg.2C.20division.2C.20etc.2E.20of.20MvPolynomial/near/362353804\"> said</a>：</p>\n<blockquote>\n<p>It seems complicated. I had imagined that we would just be defining <code>lex</code>, <code>deglex</code>, <code>degrevlex</code>, etc, all just as synonyms of <code>σ→₀ℕ</code>, and then defining different linear orders on each of them.</p>\n</blockquote>\n<p>Each of them has its own multideg, division and so on. How to deal with them?</p>",
        "id": 362355658,
        "sender_full_name": "Hagb (Junyu Guo)",
        "timestamp": 1685514242
    },
    {
        "content": "<p>Isn't division (of monomials) always just subtraction in <code>σ→₀ℕ</code>? So you need to have those typeclasses \"leak\" through the synonym. Perhaps I'm misunderstanding what you want, still.</p>",
        "id": 362359214,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1685515488
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"266440\">@Shing Tak Lam</span> and I have thought about this problem for a while. He's good at Gröbner bases and I'm good at order theory. We'll be done with our exams in 10 days, so watch out.</p>",
        "id": 362367307,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1685517947
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span> Perhaps you can start by reviewing <span class=\"user-mention\" data-user-id=\"331356\">@Hagb (Junyu Guo)</span>'s code.</p>",
        "id": 362367980,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1685518093
    },
    {
        "content": "<p>Yes of course <span aria-label=\"grinning face with smiling eyes\" class=\"emoji emoji-1f601\" role=\"img\" title=\"grinning face with smiling eyes\">:grinning_face_with_smiling_eyes:</span> but I have zero time right now</p>",
        "id": 362368958,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1685518364
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/113488-general/topic/Formalization.20of.20multideg.2C.20division.2C.20etc.2E.20of.20MvPolynomial/near/362359214\">said</a>:</p>\n<blockquote>\n<p>Isn't division (of monomials) always just subtraction in <code>σ→₀ℕ</code>? So you need to have those typeclasses \"leak\" through the synonym. Perhaps I'm misunderstanding what you want, still.</p>\n</blockquote>\n<p>I think the difficulty arises with <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mfrac><mrow><mi>x</mi><mo>+</mo><mn>2</mn><mi>y</mi><mo>+</mo><mn>3</mn><mi>z</mi></mrow><mrow><mi>x</mi><mo>+</mo><mi>y</mi><mo>+</mo><mi>z</mi></mrow></mfrac></mrow><annotation encoding=\"application/x-tex\">\\frac{x + 2y + 3z}{x+y+z}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.3783em;vertical-align:-0.4811em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8972em;\"><span style=\"top:-2.655em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">x</span><span class=\"mbin mtight\">+</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03588em;\">y</span><span class=\"mbin mtight\">+</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.04398em;\">z</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.4461em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">x</span><span class=\"mbin mtight\">+</span><span class=\"mord mtight\">2</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03588em;\">y</span><span class=\"mbin mtight\">+</span><span class=\"mord mtight\">3</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.04398em;\">z</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.4811em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span>, and whether you want the result to be 1, 2, or 3?</p>",
        "id": 362371224,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1685518984
    },
    {
        "content": "<blockquote>\n<p>Each of them has its own multideg, division and so on. How to deal with them?</p>\n</blockquote>\n<p>Maybe:</p>\n<ul>\n<li><code>p.multideg rel</code>, where <code>rel : (σ →₀ ℕ) → (σ →₀ ℕ) → Prop</code> and <code>is_total rel</code></li>\n<li><code>p.multideg embedding</code>, where <code>embedding : (σ →₀ ℕ) ↪ L</code> and <code>linear_order L</code></li>\n</ul>",
        "id": 362371966,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1685519168
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/113488-general/topic/Formalization.20of.20multideg.2C.20division.2C.20etc.2E.20of.20MvPolynomial/near/362359214\">said</a>：</p>\n<blockquote>\n<p>Isn't division (of monomials) always just subtraction in <code>σ→₀ℕ</code>? So you need to have those typeclasses \"leak\" through the synonym. Perhaps I'm misunderstanding what you want, still.</p>\n</blockquote>\n<p>Sorry for the confusion. When I said \"division\", I meant <a href=\"https://en.m.wikipedia.org/wiki/Gr%C3%B6bner_basis#Reduction\">this kind of division</a> (or theorem 3 on page 64 of the book <a href=\"https://link.springer.com/book/10.1007/978-3-319-16721-3\">Ideals, Varieties, and Algorithms</a>). It depends on the term order, and different term orders can lead to different results.</p>",
        "id": 362381180,
        "sender_full_name": "Hagb (Junyu Guo)",
        "timestamp": 1685521535
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/113488-general/topic/Formalization.20of.20multideg.2C.20division.2C.20etc.2E.20of.20MvPolynomial/near/362368958\">said</a>：</p>\n<blockquote>\n<p>Yes of course <span aria-label=\"grinning face with smiling eyes\" class=\"emoji emoji-1f601\" role=\"img\" title=\"grinning face with smiling eyes\">:grinning_face_with_smiling_eyes:</span> but I have zero time right now</p>\n</blockquote>\n<p>Thanks. I will also finish my exams in about 10 days. I will add more comments and documents as soon as I have time.</p>",
        "id": 362393143,
        "sender_full_name": "Hagb (Junyu Guo)",
        "timestamp": 1685524366
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113488-general/topic/Formalization.20of.20multideg.2C.20division.2C.20etc.2E.20of.20MvPolynomial/near/362371966\">said</a>：</p>\n<blockquote>\n<blockquote>\n<p>Each of them has its own multideg, division and so on. How to deal with them?</p>\n</blockquote>\n<p><code>p.multideg rel</code> (where <code>rel : (σ →₀ ℕ) → (σ →₀ ℕ) → Prop</code> and <code>is_total rel</code>), or perhaps <code>p.multideg embedding</code> (where <code>embedding : (σ →₀ ℕ) ↪ L</code> and <code>linear_order L</code>) ?</p>\n</blockquote>\n<p><code>TermOrder (σ →₀ ℕ) rel</code> and <code>p.multideg rel : TermOrder (σ →₀ ℕ) rel</code>?<br>\nOne of the reasons I use type synonym <code>TermOrder</code> is to use <code>≤</code> for the term order, so that <code>le_xxx</code> lemmas (and many other things) that require something like <code>[Preorder α]</code> can be used to deal with term order.</p>",
        "id": 362419641,
        "sender_full_name": "Hagb (Junyu Guo)",
        "timestamp": 1685530795
    },
    {
        "content": "<p>Sure, that approach would be reasonable; though I suspect it might be overkill vs just stating things like <code>rel (p.multideg rel) ((X * p).multideg )</code> instead of <code>p.multideg rel ≤ (X * p).multideg rel</code></p>",
        "id": 362420361,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1685530964
    },
    {
        "content": "<p>You can always make local notation in the file, especially if all these constructions are just for intermediate results</p>",
        "id": 362420444,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1685530988
    }
]