[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"395550\">@Henrik Böving</span> there is a very weird doc-gen bug. If you go to <a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/RingTheory/Ideal/QuotientOperations.html\">https://leanprover-community.github.io/mathlib4_docs/Mathlib/RingTheory/Ideal/QuotientOperations.html</a> then you can't see <a href=\"https://github.com/leanprover-community/mathlib4/blob/2da494d2bfc6145023ef272371755c2ddff5fa20//Mathlib/RingTheory/Ideal/QuotientOperations.lean#L224-L228\">this declaration</a> which is the most important one in the file and is mentioned in the library overview so that building the community website currently fails.</p>",
        "id": 397137123,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1697557383
    },
    {
        "content": "<p>I'll take a look when I'm home</p>",
        "id": 397139304,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1697558088
    },
    {
        "content": "<p>I would guess there's a crash when parsing the declaration, so it gets skipped?</p>",
        "id": 397139460,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1697558143
    },
    {
        "content": "<p><code>2023-10-17T08:12:17.3612730Z WARNING: Failed to obtain information for: Ideal.quotientInfRingEquivPiQuotient: unknown free variable 'ι'</code> is the log message for that line btw</p>",
        "id": 397139465,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1697558144
    },
    {
        "content": "<p>If that's the case, I think doc-gen should output a red box saying \"error processing declaration <code>Ideal.quotientInfRingEquivPiQuotient</code>\" rather than dropping it silently</p>",
        "id": 397139591,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1697558174
    },
    {
        "content": "<p>and there are many such lines.</p>",
        "id": 397139598,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1697558176
    },
    {
        "content": "<p>Yeah these ones appear for a bunch of declarations. I haven't been able to figure out where these errors are coming from. If you look at the code that does this error handling I tried to print more verbose messages there but that part never triggers so I dont really know why these are failing or how to narrow it down as it only seems to happen in large complicated files.</p>\n<p>Also these errors are not that many compared to the number of declarations :D which is the reason I postponed looking into this after failing to get more information about the errorm</p>",
        "id": 397139933,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1697558290
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 397139942,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1697558292
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 397139943,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1697558292
    },
    {
        "content": "<p>Okay I'm starting to add logging to the doc-gen meta framework and hopefully bisect the failing case out. I'll probably come back whining for meta help soon :P</p>",
        "id": 397148398,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1697561469
    },
    {
        "content": "<p>The only thing I noticed is that this seems to hapen a lot with things with <code>⋂</code> and <code>⨅ </code> and other big operators in, which made me wonder if it was somehow related to the delaborators for those. But I failed to minimise an example of such a thing</p>",
        "id": 397148595,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1697561550
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 397149152,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1697561777
    },
    {
        "content": "<p>Okay after a bit of debug log based bisection it is:<br>\n<a href=\"https://github.com/leanprover/doc-gen4/blob/main/DocGen4/Process/Base.lean#L182\">https://github.com/leanprover/doc-gen4/blob/main/DocGen4/Process/Base.lean#L182</a> this line that is failing<br>\nand in the specific case I have this information from this is happening here:<br>\n<a href=\"https://github.com/leanprover-community/mathlib4/blob/master/Mathlib/Order/CompleteLattice.lean#L1100\">https://github.com/leanprover-community/mathlib4/blob/master/Mathlib/Order/CompleteLattice.lean#L1100</a><br>\nwhile printing the type of this theorem using the above function, the missing variable here is the iota: </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">WARNING</span><span class=\"o\">:</span> <span class=\"n\">Failed</span> <span class=\"n\">to</span> <span class=\"n\">obtain</span> <span class=\"n\">information</span> <span class=\"n\">for</span><span class=\"o\">:</span> <span class=\"n\">le_iInf_const</span><span class=\"o\">:</span> <span class=\"n\">unknown</span> <span class=\"n\">free</span> <span class=\"kd\">variable</span> <span class=\"sc\">'ι'</span>\n</code></pre></div>",
        "id": 397151765,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1697562899
    },
    {
        "content": "<p>So it seems that indeed this is a bug in the delaborator of this type:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"bp\">⨅</span> <span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n</code></pre></div>",
        "id": 397151844,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1697562933
    },
    {
        "content": "<p>One more interesting observation: The same unkown free variable error (in this case with \"decls\") is happening to this declaration in QQ: <a href=\"https://github.com/gebner/quote4/blob/a387c0eb611857e2460cf97a8e861c944286e6b2/Qq/Match.lean#L89-L95\">https://github.com/gebner/quote4/blob/a387c0eb611857e2460cf97a8e861c944286e6b2/Qq/Match.lean#L89-L95</a> which is completely free of these bigop binders.</p>\n<p>This leaves 3 possible conclusions:</p>\n<ol>\n<li>They both call an underlying API that's buggy</li>\n<li>They both copied the same mistake into their delaborator</li>\n<li>The bugs are unrelated and this is a red herring for this particular issue.</li>\n</ol>",
        "id": 397152931,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1697563387
    },
    {
        "content": "<p>Aha! It's a bug in the way that doc-gen is preprocessing these types</p>",
        "id": 397155468,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1697564402
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Ideal.quotientInfRingEquivPiQuotient#doc\">docs#Ideal.quotientInfRingEquivPiQuotient</a></p>",
        "id": 397164538,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1697568288
    },
    {
        "content": "<p>Great! Thank you very much for fixing this so quickly.</p>",
        "id": 397165087,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1697568549
    },
    {
        "content": "<p>Is the fact that <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=AddEquiv.uniqueProd.proof_1#doc\">docs#AddEquiv.uniqueProd.proof_1</a> appears (rather than being hidden) a fallout of this change, or is this a change to core?</p>",
        "id": 397171245,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1697571456
    },
    {
        "content": "<p>Hm, these changes merely influenced how free variables were being handled while rendering expressions, they did not touch the filter for declarations...I have in fact not touched this filter in a <em>long</em> while</p>",
        "id": 397173063,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1697572325
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/doc-gen4/blob/main/DocGen4/Process/DocInfo.lean#L120-L130\">https://github.com/leanprover/doc-gen4/blob/main/DocGen4/Process/DocInfo.lean#L120-L130</a> this is the blacklisting algorithm, iirc it is taken from the LSP? I did not call it directly at the time because it was a private function, idk if that is still the reason. It could definitely be improved and it would be super cool if we had some single source of truth for this \"is this decl auto generated\" idea.</p>\n<p>Either way it's been like 10 months since I touched this. In addition to that this name does also not pop up in the logs of old runs so it was not a declaration that previously errored out but doesn't anymore</p>",
        "id": 397173644,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1697572633
    },
    {
        "content": "<p><a href=\"https://web.archive.org/web/20230326185341/https://leanprover-community.github.io/mathlib4_docs/Mathlib/Algebra/Group/Prod.html#AddEquiv.uniqueProd.proof_1\">https://web.archive.org/web/20230326185341/https://leanprover-community.github.io/mathlib4_docs/Mathlib/Algebra/Group/Prod.html#AddEquiv.uniqueProd.proof_1</a> indeed according to the archive this has existed since at least march <span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span></p>",
        "id": 397173803,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1697572717
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"395550\">@Henrik Böving</span> the <a href=\"https://github.com/leanprover-community/leanprover-community.github.io/actions/runs/6701869521/job/18209972859\">website build</a> has turned up another missing declaration. <a href=\"https://github.com/leanprover-community/mathlib4/blob/master/Mathlib/GroupTheory/FiniteAbelian.lean#L54\"><code>AddCommGroup.equiv_directSum_zmod_of_fintype</code></a> exists but <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=AddCommGroup.equiv_directSum_zmod_of_fintype#doc\">docs#AddCommGroup.equiv_directSum_zmod_of_fintype</a> doesn't</p>",
        "id": 399525521,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1698760240
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">stdout</span><span class=\"o\">:</span>\n<span class=\"n\">WARNING</span><span class=\"o\">:</span> <span class=\"n\">Failed</span> <span class=\"n\">to</span> <span class=\"n\">obtain</span> <span class=\"n\">information</span> <span class=\"n\">for</span><span class=\"o\">:</span> <span class=\"n\">AddCommGroup.equiv_free_prod_directSum_zmod</span><span class=\"o\">:</span> <span class=\"n\">parenthesize</span><span class=\"o\">:</span> <span class=\"n\">uncaught</span> <span class=\"n\">backtrack</span> <span class=\"n\">exception</span>\n<span class=\"n\">WARNING</span><span class=\"o\">:</span> <span class=\"n\">Failed</span> <span class=\"n\">to</span> <span class=\"n\">obtain</span> <span class=\"n\">information</span> <span class=\"n\">for</span><span class=\"o\">:</span> <span class=\"n\">AddCommGroup.equiv_directSum_zmod_of_fintype</span><span class=\"o\">:</span> <span class=\"n\">parenthesize</span><span class=\"o\">:</span> <span class=\"n\">uncaught</span> <span class=\"n\">backtrack</span> <span class=\"n\">exception</span>\n</code></pre></div>\n<p>hmmm, that seems to be another pretty printing error, though I am unsure if it is my fault this time :D</p>",
        "id": 399525873,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1698760352
    },
    {
        "content": "<p>Hmmm, these errors were not around 2 weeks ago: <a href=\"https://github.com/leanprover-community/mathlib4_docs/actions/runs/6593960010/job/17917228824\">https://github.com/leanprover-community/mathlib4_docs/actions/runs/6593960010/job/17917228824</a></p>",
        "id": 399527300,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1698760781
    },
    {
        "content": "<p>So either you introduced super funky new terms that my code isn't use to handling yet or for a change it is not actually my fault.</p>",
        "id": 399527495,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1698760828
    },
    {
        "content": "<p>The website build failed last night for the first time, and the overview hasn't changed in a month, so this must be related to a change from yesterday</p>",
        "id": 399527743,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1698760893
    },
    {
        "content": "<p>It could be <a href=\"https://github.com/leanprover-community/mathlib4/pull/8050\">#8050</a> ? I don't see any commits from yesterday that explicitly mention delaborators</p>",
        "id": 399528306,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1698761011
    },
    {
        "content": "<p><em>Maybe</em> <a href=\"https://github.com/leanprover-community/mathlib4/pull/7964\">#7964</a> landed just in time to miss the docs build that was used by Sunday's website build? Nothing's obviously suspicious there, it's just the only delaborator change I see</p>",
        "id": 399529887,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1698761504
    },
    {
        "content": "<p>Okay, yeah. <a href=\"https://github.com/leanprover-community/mathlib4_docs/actions/runs/6682133142/job/18156972871\">This doc-gen run</a> at <time datetime=\"2023-10-29T08:18:00Z\">2023-10-29T04:18:00-04:00</time> was fine but <a href=\"https://github.com/leanprover-community/mathlib4_docs/actions/runs/6689938132/job/18174333263\">this one</a> at <time datetime=\"2023-10-30T08:19:00Z\">2023-10-30T04:19:00-04:00</time> wasn't. So the culprit is <a href=\"https://github.com/leanprover-community/mathlib4/compare/b56efa53d7479fda9740f364170cbaef34699dee...41b0e9c7f0d1ab669a24a957b1bd07886fd13749\">one of these mathlib4 commits</a>, out of which <a href=\"https://github.com/leanprover-community/mathlib4/pull/7964\">#7964</a> looks like the only relevant change, unless I'm missing something in the std bump</p>",
        "id": 399533586,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1698762660
    },
    {
        "content": "<p>This is indeed caused by <a href=\"https://github.com/leanprover-community/mathlib4/pull/7964\">#7964</a> (cc <span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span> <span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> ). On current master this fails to pretty print:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Set.Pairwise.Basic</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">exists_ne_mem_inter_of_not_pairwise_disjoint</span>\n</code></pre></div>\n<p>But <a href=\"https://github.com/leanprover-community/mathlib4/tree/doc-gen-debug\">reverting that commit</a> makes it work again.</p>",
        "id": 399570746,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1698773570
    },
    {
        "content": "<p><a href=\"#narrow/stream/287929-mathlib4/topic/A.20specific.20file.20triggers.20rpc.20errors\">Other occurrences</a></p>",
        "id": 399571184,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1698773732
    },
    {
        "content": "<p>It seems that the new part of <a href=\"https://github.com/leanprover-community/mathlib4/pull/7964\">#7964</a> that is causing problems is globally enabling it. I guess there's been a latent bug in the binder merging logic... Commenting out this line causes my tests to succeed:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"bp\">$</span><span class=\"n\">group</span><span class=\"o\">:</span><span class=\"n\">bracketedExplicitBinders</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"bp\">$</span><span class=\"n\">groups</span><span class=\"bp\">*</span><span class=\"o\">,</span> <span class=\"bp\">$</span><span class=\"n\">body</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"bp\">$</span><span class=\"n\">group</span> <span class=\"bp\">$</span><span class=\"n\">groups</span><span class=\"bp\">*</span><span class=\"o\">,</span> <span class=\"bp\">$</span><span class=\"n\">body</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>It appears to be merging in cases where it's not meant to and then throwing off the parenthesizer somehow.</p>",
        "id": 399575769,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1698775434
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110596\">Rob Lewis</span> <a href=\"#narrow/stream/113488-general/topic/doc-gen4.20missing.20declaration/near/399570746\">said</a>:</p>\n<blockquote>\n<p>This is indeed caused by <a href=\"https://github.com/leanprover-community/mathlib4/pull/7964\">#7964</a> (cc <span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> ). On current master this fails to pretty print:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Set.Pairwise.Basic</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">exists_ne_mem_inter_of_not_pairwise_disjoint</span>\n</code></pre></div>\n<p>But <a href=\"https://github.com/leanprover-community/mathlib4/tree/doc-gen-debug\">reverting that commit</a> makes it work again.</p>\n</blockquote>\n<p>Not my fault for the first time! I count this as a win in my book :D</p>",
        "id": 399577872,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1698776219
    },
    {
        "content": "<p>Here's a fix: <a href=\"https://github.com/leanprover-community/mathlib4/pull/8070\">#8070</a></p>",
        "id": 399577998,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1698776277
    }
]