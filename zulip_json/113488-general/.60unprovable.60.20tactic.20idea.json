[
    {
        "content": "<p>Sometimes I wonder if I've gotten myself to an unprovable goal state. It would be cool if there was a tactic that reverted all my hypotheses and then gave me the new goal state of proving that my old goal state was false. Has anyone already made something like this?</p>\n<p>Example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">q</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h</span>\n  <span class=\"n\">apply</span> <span class=\"n\">Or.inr</span>\n\n  <span class=\"c1\">-- Tactic state</span>\n  <span class=\"c1\">--   p q : Prop</span>\n  <span class=\"c1\">--   h : p</span>\n  <span class=\"c1\">--   ⊢ q</span>\n\n  <span class=\"n\">unprovable</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">h</span> <span class=\"n\">True</span> <span class=\"n\">False</span> <span class=\"n\">trivial</span>\n  <span class=\"c1\">-- desugars to a `have` with all hypothesis reverted and the goal negated</span>\n  <span class=\"k\">have</span> <span class=\"n\">unprovable</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"bp\">∀</span> <span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">q</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">h</span> <span class=\"n\">True</span> <span class=\"n\">False</span> <span class=\"n\">trivial</span>\n\n  <span class=\"gr\">sorry</span> <span class=\"c1\">-- the goal is still impossible. the tactic just helps us convince ourselves</span>\n</code></pre></div>\n<p>This would probably be most useful in conjunction with automation that can often disprove your tactic state. In the above example <code>aesop</code> would work, but I imagine that usually <code>aesop</code> will fail because the goal is essentially an existential and it can't search for witnesses.</p>",
        "id": 377719967,
        "sender_full_name": "Timo Carlin-Burns",
        "timestamp": 1690080223
    },
    {
        "content": "<p>Somewhat related: the <code>slim_check</code> tactic.</p>",
        "id": 377720104,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1690080306
    },
    {
        "content": "<p>ooh <code>slim_check</code> is really neat and covers most uses cases I had in mind. when the goal isn't decidable, it might still be nice to have some automation for generating inputs and searching for proofs that they're counterexamples though. maybe you could even have a library of <code>@[counterexample]</code>s that it selects from</p>",
        "id": 377721356,
        "sender_full_name": "Timo Carlin-Burns",
        "timestamp": 1690081135
    },
    {
        "content": "<p>I would like to have <code>slim_check</code> be able to run <code>norm_norm</code> during its testing phase, but at the moment that isn't possible. cf. <a href=\"https://github.com/leanprover-community/mathlib4/pull/3838\">#3838</a>.</p>",
        "id": 377725381,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1690083522
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> did you have any further thoughts on <a href=\"https://github.com/leanprover-community/mathlib4/pull/6268\">#6268</a>, your PR trying to all MetaM code in <code>slim_check</code> after your polymorphism change?</p>\n<p>If not, could we please revisit my proposal to revert <a href=\"https://github.com/leanprover-community/mathlib4/pull/5796\">#5796</a>, so as to not permanently prevent progress on <code>slim_check</code>?</p>",
        "id": 401486568,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1699685445
    },
    {
        "content": "<p>I'll have another look in a few hours, sorry for letting this go very stale</p>",
        "id": 401487183,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1699686073
    },
    {
        "content": "<p>It's okay, I don't necessarily have capacity for push <code>slim_check</code> forward even if this is unblocked. But I would like to make sure we don't leave it in an unpushable state!</p>",
        "id": 401487508,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1699686351
    },
    {
        "content": "<p>(network issues meant this did not happen today after all, sorry; but I'll keep it near the top of my queue)</p>",
        "id": 401554192,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1699749356
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span>, just pinging on this one again. I had to tell someone today that <code>slim_check</code> still can't handle real numbers, because it can't use <code>norm_num</code> to decide goals, because it can't use <code>MetaM</code>, because it is needlessly polymorphic. :-)</p>",
        "id": 405292367,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1701413909
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span>, could you answer my question at <a href=\"https://github.com/leanprover-community/mathlib4/pull/3838/files#r1267792775\">https://github.com/leanprover-community/mathlib4/pull/3838/files#r1267792775</a>?</p>",
        "id": 405360077,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1701436274
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/8772\">#8772</a> is a spin-off I found myself neededing when updating <a href=\"https://github.com/leanprover-community/mathlib4/pull/6268\">#6268</a></p>",
        "id": 405374366,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1701440676
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span>, the answer to your question: I couldn't get it to work, and didn't need it immediately.</p>",
        "id": 405452909,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1701472577
    },
    {
        "content": "<p>I really don't understand the aversion to reverting the change making code in <code>slim_check</code> universe polymorphic. It finds concrete counterexamples. They all live in <code>Type 0</code>, just like us.</p>",
        "id": 405453037,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1701472659
    },
    {
        "content": "<p>Maybe this is symptomatic of a bigger design issue; I feel like we ought to be able to sample from <code>ULift Nat</code> or <code>Cardinal.{0}</code> or <code> Σ G : Type*, Group G</code>; which means either the sampling function needs to be universe polymorphic, or we need to sample from <code>Expr</code> (or a Qq spelling) instead to stay in universe 0.</p>",
        "id": 405513025,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1701506029
    },
    {
        "content": "<p>If you sample from <code>Σ G : Type _, Group G</code> instead you can just do the sensible thing and pick <code>G = Int</code>! :-)</p>",
        "id": 405590131,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1701568895
    },
    {
        "content": "<p>Oh absolutely, but slim_check couldn't do that with the proposed revert, because <code>SampleableExt (Type _)</code> wouldn't be well-typed</p>",
        "id": 405631181,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1701598215
    },
    {
        "content": "<p>Okay. I'm an idiot. :-)</p>",
        "id": 405664230,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1701608517
    },
    {
        "content": "<p>One thing that most higher universe types have in common is that they aren't really enumerable or computable. Would <code>slim_check</code> work even if we had such instances? You can't compute most operations on <code>Cardinal.{0}</code> or things on arbitrary groups in the first place</p>",
        "id": 405665280,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1701609399
    },
    {
        "content": "<p>It seems much more sensible to sample exprs of those types and use tactics like <code>simp</code> or <code>norm_num</code> to evaluate them, in which case the universe thing is a red herring</p>",
        "id": 405665316,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1701609448
    },
    {
        "content": "<p>Changing to <code>Expr</code> sampling (which indeed sounds good) is unfortunately a pretty fundamental change to <code>slim_check</code>...</p>",
        "id": 405665592,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1701609711
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 405684720,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1701626055
    },
    {
        "content": "<p>One other thing I'm realizing;  it looks like <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=ULiftable#doc\">docs#ULiftable</a> was specifically invented for slimcheck in mathlib3 (<a href=\"https://leanprover-community.github.io/mathlib_docs/find/uliftable\">docs3#uliftable</a>, <a href=\"https://github.com/leanprover-community/mathlib/pull/3742\">!3#3742</a>), based on the lack of use anywhere else</p>",
        "id": 406362154,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1701887195
    },
    {
        "content": "<p>Here's some progress: <a href=\"https://github.com/leanprover-community/mathlib4/pull/8876\">#8876</a> generalizes <code>Rand</code> to a monad transformer, without sacrificing universe polymorphism</p>",
        "id": 406589774,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1701970039
    },
    {
        "content": "<p>I think I'm happy to compromise on having <code>Rand</code> be universe-polymorphic, but leaving <code>Gen</code> in <code>Type 0</code>, in light of the realization that probably in the long term we want to be sampling <code>Expr</code> anyway</p>",
        "id": 406589904,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1701970085
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/8857\">#8857</a> is another spin-off PR</p>",
        "id": 407722918,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1702472909
    }
]