[
    {
        "content": "<p>On the Coq zulip, <a href=\"https://coq.zulipchat.com/#narrow/stream/237977-Coq-users/topic/Program.20extraction.20plans/near/403700593\">there is an interesting conversation about Lean vs Coq on writing programs and extracting code</a>.  My understanding of the consensus is that Coq is more focused on a complete verified toolchain including code extraction, while Lean is more focused on being able to quickly open up Lean and write executable verified applications in Lean (at the cost of a larger TCB).  But in particular, <span class=\"user-mention\" data-user-id=\"198375\">@Karl Palmskog</span> <a href=\"https://coq.zulipchat.com/#narrow/stream/237977-Coq-users/topic/Program.20extraction.20plans/near/403774685\">asked</a></p>\n<blockquote>\n<p>Is there a breakdown of the TCB for running Lean programs? My impression is that without running a checker post-hoc on terms stored in files, Lean gives very few guarantees about any results (due to input/output, etc.)</p>\n</blockquote>",
        "id": 404049700,
        "sender_full_name": "Jason Rute",
        "timestamp": 1700881677
    },
    {
        "content": "<p>I'm not sure if the \"running a checker post-hoc\" comment is about executable code or more about <br>\n something like <a class=\"stream-topic\" data-stream-id=\"113488\" href=\"/#narrow/stream/113488-general/topic/PSA.20about.20trusting.20Lean.20proofs\">#general &gt; PSA about trusting Lean proofs</a>.</p>",
        "id": 404050190,
        "sender_full_name": "Jason Rute",
        "timestamp": 1700882107
    },
    {
        "content": "<p>The TCB for compiled lean programs is:</p>\n<ol>\n<li>You trust that the lean logic is sound</li>\n<li>(If you didn't prove the program correct) You trust that the elaborator has converted your input into the lean expression denoting the program you expect</li>\n<li>(If you did prove the program correct) You trust that the proofs about the program have been checked &lt;- use lean4checker / other external checkers to eliminate this</li>\n<li>You trust that any compiler overrides (<code>extern</code> / <code>implemented_by</code>) do not violate the lean logic (i.e. the model matches the implementation)</li>\n<li>You trust the lean compiler (which lowered the lean code to C) to preserve the semantics of the program</li>\n<li>You trust clang / LLVM to convert the C program into an executable with the same semantics</li>\n<li>You trust that the hardware / firmware / OS software running all of the above didn't break or lie to you</li>\n<li>(When running the program) You trust that the hardware / firmware / OS software faithfully executes the program according to spec and there are no debuggers or magnets on the hard drive or cosmic rays messing with your output</li>\n</ol>",
        "id": 404052056,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1700883663
    },
    {
        "content": "<p>As far as I know, the default situation for programs written in Coq is much the same as for Lean, with \"code extractor\" replacing \"lean compiler\" and \"ocaml compiler\" replacing \"clang / LLVM\"</p>",
        "id": 404052297,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1700883866
    },
    {
        "content": "<p>I feel 4 (overrides) is probably one of the biggest areas of trust.</p>",
        "id": 404052516,
        "sender_full_name": "Jason Rute",
        "timestamp": 1700884077
    },
    {
        "content": "<p>well, all of the above are actually very complicated things to ensure</p>",
        "id": 404052636,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1700884177
    },
    {
        "content": "<p>4 is at least easy to enumerate</p>",
        "id": 404052650,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1700884190
    },
    {
        "content": "<p>from a software verification standpoint the only things we have a hope of eliminating given infinite effort are 4, 5 and 6</p>",
        "id": 404052743,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1700884251
    },
    {
        "content": "<p>In some cases we can outright prove instances of 4, in other cases you can prove it only as a refinement, and in still others one has to reason about properties of the lean runtime</p>",
        "id": 404052879,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1700884368
    },
    {
        "content": "<p>Of course some of the cases of 4 involve IO and there you need to prove properties about the glue code, assuming correctness of libc (which is some combination of 6 and 7)</p>",
        "id": 404053019,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1700884490
    },
    {
        "content": "<p>Maybe this belongs in one of the documentation pages</p>",
        "id": 404098504,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1700910354
    },
    {
        "content": "<p>Along with basic conceptual explanations and  comparisons with the TCB of similar systems under similar situations.</p>",
        "id": 404098589,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1700910386
    }
]