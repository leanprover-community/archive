[
    {
        "content": "<p>My state has a polynomial <code>p: MvPolynomial (Fin (Nat.succ n)) F</code> in it. I would like to be able to do</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.MvPolynomial.Equiv</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">schwartz_zippel</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">CommRing</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">MvPolynomial</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"n\">p_eq</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">MvPolynomial.finSuccEquiv</span> <span class=\"n\">F</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"o\">(</span><span class=\"n\">MvPolynomial.finSuccEquiv</span> <span class=\"n\">F</span> <span class=\"n\">n</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">AlgEquiv.symm_apply_apply</span><span class=\"o\">]</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">p_eq</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hp</span> <span class=\"bp\">⊢</span>\n  <span class=\"c1\">-- Call this polynomial p'</span>\n  <span class=\"n\">set</span> <span class=\"n\">p'</span> <span class=\"o\">:</span> <span class=\"n\">Polynomial</span> <span class=\"o\">(</span><span class=\"n\">MvPolynomial</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">MvPolynomial.finSuccEquiv</span> <span class=\"n\">F</span> <span class=\"n\">n</span> <span class=\"n\">p</span>\n  <span class=\"n\">clear</span> <span class=\"n\">p_eq</span> <span class=\"n\">p</span>\n</code></pre></div>\n<p>But at the end I get </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">tactic</span> <span class=\"bp\">'</span><span class=\"n\">clear'</span> <span class=\"n\">failed</span><span class=\"o\">,</span> <span class=\"kd\">variable</span> <span class=\"sc\">'p'</span><span class=\"bp\">'</span> <span class=\"n\">depends</span> <span class=\"n\">on</span> <span class=\"sc\">'p'</span>\n</code></pre></div>\n<p>Is there a way I can pass through the equiv and then clear <code>p</code>?</p>",
        "id": 398327414,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1698166358
    },
    {
        "content": "<p>Can you make a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>?</p>",
        "id": 398327546,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1698166411
    },
    {
        "content": "<p>Sure, one sec</p>",
        "id": 398327777,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1698166504
    },
    {
        "content": "<p>Ok, it is a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> now</p>",
        "id": 398328227,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1698166693
    },
    {
        "content": "<p>Basically, I don't care that <code>p'</code> is defined based off of <code>p</code> since for the rest of the proof I only deal with <code>p'</code>, so I would like to forget <code>p</code>, replace every reference to it with a reference to <code>p'</code> and then remove the clutter from the state.</p>",
        "id": 398328558,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1698166820
    },
    {
        "content": "<p>Is this what you want?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.MvPolynomial.Equiv</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">schwartz_zippel</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">CommRing</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">MvPolynomial</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"n\">p_eq</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">MvPolynomial.finSuccEquiv</span> <span class=\"n\">F</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"o\">(</span><span class=\"n\">MvPolynomial.finSuccEquiv</span> <span class=\"n\">F</span> <span class=\"n\">n</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">AlgEquiv.symm_apply_apply</span><span class=\"o\">]</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">p_eq</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hp</span> <span class=\"bp\">⊢</span>\n  <span class=\"c1\">-- Call this polynomial p'</span>\n  <span class=\"n\">set</span> <span class=\"n\">p'</span> <span class=\"o\">:</span> <span class=\"n\">Polynomial</span> <span class=\"o\">(</span><span class=\"n\">MvPolynomial</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">MvPolynomial.finSuccEquiv</span> <span class=\"n\">F</span> <span class=\"n\">n</span> <span class=\"n\">p</span>\n  <span class=\"n\">clear_value</span> <span class=\"n\">p'</span>\n  <span class=\"n\">clear</span> <span class=\"n\">p_eq</span> <span class=\"n\">p</span>\n  <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"bp\">*</span>\n</code></pre></div>",
        "id": 398329559,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1698167183
    },
    {
        "content": "<p>Yes! Thanks</p>",
        "id": 398329857,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1698167295
    },
    {
        "content": "<p>Does this do what you want?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">schwartz_zippel</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">CommRing</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">MvPolynomial</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">revert</span> <span class=\"n\">p</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[(</span><span class=\"n\">MvPolynomial.finSuccEquiv</span> <span class=\"n\">F</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm.surjective.forall</span><span class=\"o\">]</span>\n  <span class=\"n\">intro</span> <span class=\"n\">p'</span> <span class=\"n\">hp'</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">AddEquivClass.map_eq_zero_iff</span><span class=\"o\">,</span> <span class=\"n\">AddEquivClass.map_ne_zero_iff</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hp'</span> <span class=\"bp\">⊢</span>\n</code></pre></div>",
        "id": 398332918,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1698168797
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Function.Surjective.forall#doc\">docs#Function.Surjective.forall</a></p>",
        "id": 398344589,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1698173923
    }
]