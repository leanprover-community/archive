[
    {
        "content": "<p>In <a href=\"https://github.com/leanprover-community/mathlib4/blob/185dddfc6745cc254847085423dd050992417d46/Mathlib/Util/Delaborators.lean#L22C1-L22C1\">this line</a> the notation</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"n\">x</span>\n</code></pre></div>\n<p>is described to be a short version for the Pi type <code>Π x : α, β x</code>, and this affects the way the infoview renders terms of a pi type. What was the point of that notation? To me, it seems quite odd from a type-theoretic point of view, since the definition 'Pi type' is <a href=\"https://en.wikipedia.org/wiki/Dependent_type\">well documented</a> and people landing on <code>mathlib</code> with no knowledge of its jargon but knowledgeable about (dependent) type theory would know what <code>Π x : α, β x</code> represents. I might be wrong, but the disappearance of the <code>Π</code> symbol does not look very intelligible to me. At least in the infoview, I would prefer the <code>Π</code> to survive, is it unreasonable?</p>",
        "id": 399377561,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1698700108
    },
    {
        "content": "<p>Mathlib will make you happy if you ask nicely.</p>",
        "id": 399377823,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1698700257
    },
    {
        "content": "<p><a href=\"#narrow/stream/287929-mathlib4/topic/Add.20pi.20notation.20back.20.3F\">https://leanprover.zulipchat.com/#narrow/stream/287929-mathlib4/topic/Add.20pi.20notation.20back.20.3F</a></p>",
        "id": 399377855,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1698700271
    },
    {
        "content": "<p>And I agree that at least in mathlib we want this.</p>",
        "id": 399378010,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1698700349
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Util.Delaborators</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n\n<span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"n\">x</span> <span class=\"c1\">-- (x : α) → β x : Type</span>\n\n<span class=\"k\">#check</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">β</span> <span class=\"n\">x</span> <span class=\"c1\">-- (x : α) → β x : Type</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">scoped</span> <span class=\"n\">PiNotation</span>\n\n<span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"n\">x</span> <span class=\"c1\">-- Π (x : α), β x : Type</span>\n</code></pre></div>",
        "id": 399378040,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1698700365
    },
    {
        "content": "<p>As long as you import that file, Lean understands what you mean. If in addition you open the scoped notation then you will understand what Lean means.</p>",
        "id": 399378252,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1698700482
    },
    {
        "content": "<p>Importing this file is pretty cheap since it is imported by <code>Data.Set.Basic</code>.</p>",
        "id": 399378298,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1698700513
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/113488-general/topic/Notation.20for.20Pi.20type/near/399377823\">said</a>:</p>\n<blockquote>\n<p>Mathlib will make you happy if you ask nicely.</p>\n</blockquote>\n<p>Do you mean my question above was rude? I did not mean it to be so, so my apologies are in order if it felt it was.</p>",
        "id": 399378302,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1698700516
    },
    {
        "content": "<p>No, it wasn't rude!</p>",
        "id": 399378342,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1698700540
    },
    {
        "content": "<p>I wrote that to keep you hopeful when I was cooking up the code snippet I posted two minutes later.</p>",
        "id": 399378436,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1698700571
    },
    {
        "content": "<p>Ah, so the \"nicely\" refer to the way I should ask mathlib, not the way I asked here...</p>",
        "id": 399378438,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1698700573
    },
    {
        "content": "<p>Nicely means make sure you import at least <code>Data.Set.Basic</code> (importing any math file will be enough), and type that <code>open scoped</code> line.</p>",
        "id": 399378507,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1698700620
    },
    {
        "content": "<p>The <code>opened scoped</code> requirement is a concession. If I were the only user of Mathlib I would have make it the default.</p>",
        "id": 399378556,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1698700664
    },
    {
        "content": "<p>Well, it would be the case also if we were the only <em>two</em> users of mathlib <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 399378637,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1698700697
    },
    {
        "content": "<p>And of course I should also write that Kyle Miller wrote the corresponding delaborator, I only PRed it to Mathlib.</p>",
        "id": 399378692,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1698700740
    },
    {
        "content": "<p>Why not liberate <code>Π</code> too if we are liberating <code>λ</code>? This letter has other meanings in mathematics as well, most notably for actual products</p>",
        "id": 399378707,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1698700744
    },
    {
        "content": "<p>This is an actual product. Mathematicians would be very happy to use the same symbol for this and for <code>Finset.prod</code>.</p>",
        "id": 399378773,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1698700796
    },
    {
        "content": "<p>Well, as a matter of fact, I find the disappearance of <code>λ</code> quite annoying as well...</p>",
        "id": 399378774,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1698700799
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/113488-general/topic/Notation.20for.20Pi.20type/near/399378773\">said</a>:</p>\n<blockquote>\n<p>This is an actual product. Mathematicians would be very happy to use the same symbol for this and for <code>Finset.prod</code>.</p>\n</blockquote>\n<p>Right, but by using it for one we can't use it for the other. This is not a product in the sense of <code>Finset.prod</code>, it returns a type not a value</p>",
        "id": 399378886,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1698700849
    },
    {
        "content": "<p>(If someone were to remove \"scoped\" from <a href=\"https://github.com/leanprover-community/mathlib4/blob/185dddfc6745cc254847085423dd050992417d46//Mathlib/Util/Delaborators.lean#L79\">this line</a> then it would become global.)</p>",
        "id": 399378903,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1698700859
    },
    {
        "content": "<p>Filippo, if you insist I can write to the math department of St Etienne that you need to be reminded of the importance of having <code>λ</code> available, hence you should teach only linear algebra and eigenvalues for a couple of years.</p>",
        "id": 399378926,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1698700874
    },
    {
        "content": "<p>Should we rename <a href=\"https://en.wikipedia.org/wiki/Lambda_calculus\">this entry</a> to</p>\n<blockquote>\n<p><code>fun _ =&gt; _</code> Calculus</p>\n</blockquote>\n<p><span aria-label=\"smirk\" class=\"emoji emoji-1f60f\" role=\"img\" title=\"smirk\">:smirk:</span></p>",
        "id": 399378930,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1698700878
    },
    {
        "content": "<p><code>fun</code> calculus sounds good</p>",
        "id": 399378952,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1698700893
    },
    {
        "content": "<p>Why would we use <code>U+03A0 Π greek capital letter pi</code> for actual products when we already have and use <code>U+220F ∏ n-ary product</code>?</p>",
        "id": 399378995,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1698700923
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/113488-general/topic/Notation.20for.20Pi.20type/near/399378926\">said</a>:</p>\n<blockquote>\n<p>Filippo, if you insist I can write to the math department of St Etienne that you need to be reminded of the importance of having <code>λ</code> available, hence you should teach only linear algebra and eigenvalues for a couple of years.</p>\n</blockquote>\n<p>I'll think about it...</p>",
        "id": 399379043,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1698700931
    },
    {
        "content": "<p>IMHO naming mathematical concepts after the random letters chosen to denote them is a terrible practice</p>",
        "id": 399379072,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1698700955
    },
    {
        "content": "<p>Lean 4 put the <code>fun</code> back into formalizing mathematics</p>",
        "id": 399379130,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1698700985
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/113488-general/topic/Notation.20for.20Pi.20type/near/399378556\">said</a>:</p>\n<blockquote>\n<p>The <code>opened scoped</code> requirement is a concession. If I were the only user of Mathlib I would have make it the default.</p>\n</blockquote>\n<p>Prefferably before mathport removed all the pi notations from our source code...</p>",
        "id": 399379162,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1698701009
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113488-general/topic/Notation.20for.20Pi.20type/near/399379072\">said</a>:</p>\n<blockquote>\n<p>IMHO naming mathematical concepts after the random letters chosen to denote them is a terrible practice</p>\n</blockquote>\n<p>I certainly agree, in general. I just find that we live in a world where some practices are established and it does not make it easy for people coming from outside to understand what we mean if we start using our own language. But I did not want to open a Pandora's vase.</p>",
        "id": 399379254,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1698701055
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113488-general/topic/Notation.20for.20Pi.20type/near/399379162\">said</a>:</p>\n<blockquote>\n<p>Prefferably before mathport removed all the pi notations from our source code...</p>\n</blockquote>\n<p>note that this was a technical restriction: lean 3 did not differentiate <code>∀</code> and <code>Π</code> at all, it forgets which one you wrote immediately</p>",
        "id": 399379330,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1698701097
    },
    {
        "content": "<p>lean 4 internally now universally refers to this as the \"forall type\", \"Pi\" no longer appears anywhere</p>",
        "id": 399379563,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1698701232
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"300245\">Filippo A. E. Nuccio</span> <a href=\"#narrow/stream/113488-general/topic/Notation.20for.20Pi.20type/near/399379043\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/113488-general/topic/Notation.20for.20Pi.20type/near/399378926\">said</a>:</p>\n<blockquote>\n<p>Filippo, if you insist I can write to the math department of St Etienne that you need to be reminded of the importance of having <code>λ</code> available, hence you should teach only linear algebra and eigenvalues for a couple of years.</p>\n</blockquote>\n<p>I'll think about it...</p>\n</blockquote>\n<p>In the meantime I can also drop a line in Orsay, telling them that both <code>x</code> and <code>y</code> can be useful and should not be freezed just to mean that some <a href=\"#narrow/stream/116395-maths/topic/completion.20of.20uniform.20spaces/near/353728754\">misunderstanding is probably taking place</a> <span aria-label=\"angel\" class=\"emoji emoji-1f47c\" role=\"img\" title=\"angel\">:angel:</span></p>",
        "id": 399379691,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1698701318
    },
    {
        "content": "<p>this is also the strategy I used in <a href=\"https://github.com/digama0/lean-type-theory/releases/tag/v1.0\">#leantt</a>, I just use <code>∀</code> for this type constructor and <code>Π</code> does not appear (except in the section on the proof-split language, which has both <code>∀</code> and <code>Π</code> and they mean different things)</p>",
        "id": 399379784,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1698701395
    },
    {
        "content": "<p>Let me try to put the discussion back on the track I initially meant, which is: suppose you are somewhat new to <code>mathlib</code> and/or <code>lean4</code> (at least, new enough not to be willing to go looking <a href=\"https://github.com/leanprover-community/mathlib4/blob/185dddfc6745cc254847085423dd050992417d46/Mathlib/Util/Delaborators.lean#L22C1-L22C1\">so deep</a> ). Wouldn't it be nice to have some hint telling you that</p>\n<ol>\n<li>This notation is meant to be something that you might know</li>\n<li>Adding this <code>open scoped PiNotation</code> might be a useful thing to do?</li>\n</ol>",
        "id": 399380057,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1698701544
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/113488-general/topic/Notation.20for.20Pi.20type/near/399378903\">said</a>:</p>\n<blockquote>\n<p>(If someone were to remove \"scoped\" from <a href=\"https://github.com/leanprover-community/mathlib4/blob/185dddfc6745cc254847085423dd050992417d46//Mathlib/Util/Delaborators.lean#L79\">this line</a> then it would become global.)</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span> I guess that you are <em>not</em> suggesting that someone opens a PR, right?</p>",
        "id": 399380557,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1698701839
    },
    {
        "content": "<p>I guess I'm not not suggesting it either</p>",
        "id": 399380703,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1698701895
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"300245\">Filippo A. E. Nuccio</span> <a href=\"#narrow/stream/113488-general/topic/Notation.20for.20Pi.20type/near/399380057\">said</a>:</p>\n<blockquote>\n<p>Let me try to put the discussion back on the track I initially meant, which is: suppose you are somewhat new to <code>mathlib</code> and/or <code>lean4</code> (at least, new enough not to be willing to go looking <a href=\"https://github.com/leanprover-community/mathlib4/blob/185dddfc6745cc254847085423dd050992417d46/Mathlib/Util/Delaborators.lean#L22C1-L22C1\">so deep</a> ). Wouldn't it be nice to have some hint telling you that</p>\n<ol>\n<li>This notation is meant to be something that you might know</li>\n<li>Adding this <code>open scoped PiNotation</code> might be a useful thing to do?</li>\n</ol>\n</blockquote>\n<p>That's a good point. We should at least mention it in <a href=\"https://leanprover-community.github.io/mathematics_in_lean/\">#mil</a> but I'm not sure we ever discuss dependent products specifically. Could you create an issue in the mathematics_in_lean_source repo?</p>",
        "id": 399380712,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1698701900
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/113488-general/topic/Notation.20for.20Pi.20type/near/399380712\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"300245\">Filippo A. E. Nuccio</span> <a href=\"#narrow/stream/113488-general/topic/Notation.20for.20Pi.20type/near/399380057\">said</a>:</p>\n<blockquote>\n<p>Let me try to put the discussion back on the track I initially meant, which is: suppose you are somewhat new to <code>mathlib</code> and/or <code>lean4</code> (at least, new enough not to be willing to go looking <a href=\"https://github.com/leanprover-community/mathlib4/blob/185dddfc6745cc254847085423dd050992417d46/Mathlib/Util/Delaborators.lean#L22C1-L22C1\">so deep</a> ). Wouldn't it be nice to have some hint telling you that</p>\n<ol>\n<li>This notation is meant to be something that you might know</li>\n<li>Adding this <code>open scoped PiNotation</code> might be a useful thing to do?</li>\n</ol>\n</blockquote>\n<p>That's a good point. We should at least mention it in <a href=\"https://leanprover-community.github.io/mathematics_in_lean/\">#mil</a> but I'm not sure we ever discuss dependent products specifically. Could you create an issue in the mathematics_in_lean_source repo?</p>\n</blockquote>\n<p>Sure!</p>",
        "id": 399380769,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1698701934
    },
    {
        "content": "<p>Kyle means that you won't be able to constructively prove that he didn't suggest you shouldn't refrain to not propose this PR. Or the other way around.</p>",
        "id": 399380875,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1698701996
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/113488-general/topic/Notation.20for.20Pi.20type/near/399380703\">said</a>:</p>\n<blockquote>\n<p>I guess I'm not not suggesting it either</p>\n</blockquote>\n<p>Although the \"not not suggesting\" is great, the \"I guess\" at the beginning of your sentence is unbeatable!</p>",
        "id": 399380888,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1698702001
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"300245\">Filippo A. E. Nuccio</span> <a href=\"#narrow/stream/113488-general/topic/Notation.20for.20Pi.20type/near/399380769\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/113488-general/topic/Notation.20for.20Pi.20type/near/399380712\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"300245\">Filippo A. E. Nuccio</span> <a href=\"#narrow/stream/113488-general/topic/Notation.20for.20Pi.20type/near/399380057\">said</a>:</p>\n<blockquote>\n<p>Let me try to put the discussion back on the track I initially meant, which is: suppose you are somewhat new to <code>mathlib</code> and/or <code>lean4</code> (at least, new enough not to be willing to go looking <a href=\"https://github.com/leanprover-community/mathlib4/blob/185dddfc6745cc254847085423dd050992417d46/Mathlib/Util/Delaborators.lean#L22C1-L22C1\">so deep</a> ). Wouldn't it be nice to have some hint telling you that</p>\n<ol>\n<li>This notation is meant to be something that you might know</li>\n<li>Adding this <code>open scoped PiNotation</code> might be a useful thing to do?</li>\n</ol>\n</blockquote>\n<p>That's a good point. We should at least mention it in <a href=\"https://leanprover-community.github.io/mathematics_in_lean/\">#mil</a> but I'm not sure we ever discuss dependent products specifically. Could you create an issue in the mathematics_in_lean_source repo?</p>\n</blockquote>\n<p>Sure!</p>\n</blockquote>\n<p>Done <a href=\"https://github.com/avigad/mathematics_in_lean_source/issues/149\">here</a> [BTW Is there a way to reference to an issue in a repo different from mathlib?)] As mentioned there, I wonder if the right place for the comment is not <em>Theorem Proving in Lean</em> (or both).</p>",
        "id": 399382861,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1698703146
    },
    {
        "content": "<p>I think to reference an issue you just include the full issue link? (edit: oh, for some reason I thought you meant linking from inside github rather than from here on zulip)</p>",
        "id": 399383939,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1698703609
    },
    {
        "content": "<p>We have linkifiers for general repos as well: <a href=\"https://github.com/avigad/mathematics_in_lean_source/pull/149\">avigad/mathematics_in_lean_source#149</a></p>",
        "id": 399383985,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1698703647
    },
    {
        "content": "<p>Thanks! And I ended up doing a small Swiss tour with <span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span>  opening <a href=\"https://github.com/leanprover-community/mathlib4/pull/8047\">#8047</a> <span aria-label=\"flag switzerland\" class=\"emoji emoji-1f1e8-1f1ed\" role=\"img\" title=\"flag switzerland\">:flag_switzerland:</span> (I wished 4810 was still available... <span aria-label=\"snowy mountain\" class=\"emoji emoji-1f3d4\" role=\"img\" title=\"snowy mountain\">:snowy_mountain:</span> )</p>",
        "id": 399384757,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1698704065
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/113488-general/topic/Notation.20for.20Pi.20type/near/399378926\">said</a>:</p>\n<blockquote>\n<p>Filippo, if you insist I can write to the math department of St Etienne that you need to be reminded of the importance of having <code>λ</code> available, hence you should teach only linear algebra and eigenvalues for a couple of years.</p>\n</blockquote>\n<p>Alas:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"c1\">-- unexpected token 'λ'; expected '_' or identifier</span>\n</code></pre></div>",
        "id": 399385943,
        "sender_full_name": "Richard Copley",
        "timestamp": 1698704778
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"400544\">Richard Copley</span> <a href=\"#narrow/stream/113488-general/topic/Notation.20for.20Pi.20type/near/399385943\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/113488-general/topic/Notation.20for.20Pi.20type/near/399378926\">said</a>:</p>\n<blockquote>\n<p>Filippo, if you insist I can write to the math department of St Etienne that you need to be reminded of the importance of having <code>λ</code> available, hence you should teach only linear algebra and eigenvalues for a couple of years.</p>\n</blockquote>\n<p>Alas:</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"c1\">-- unexpected token 'λ'; expected '_' or identifier</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>Oh well, but eigenvalues are complex numbers, not natural, right?! <span aria-label=\"face with hand over mouth\" class=\"emoji emoji-1f92d\" role=\"img\" title=\"face with hand over mouth\">:face_with_hand_over_mouth:</span></p>",
        "id": 399386545,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1698705190
    },
    {
        "content": "<p><code>variable (Π : Type*)</code> produces a different error: expected token (without importing PiNotation). What's the mechanism behind this? I'm checking other Greek letters. <code>λ</code> is still used for functions, and <code>Σ</code> is for sigma types, these I know. But what's <code>Ι</code> (\\Iota) used for? (same error as <code>λ</code> and <code>Σ</code>.)</p>",
        "id": 399416433,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1698721369
    },
    {
        "content": "<p>Recall that <code>Type*</code> is a Mathlib thing.</p>",
        "id": 399416696,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1698721460
    },
    {
        "content": "<p>So you cannot test what comes from Lean alone if you use <code>Type*</code>.</p>",
        "id": 399416728,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1698721480
    },
    {
        "content": "<p>In Mathlib Iota is defined as a notationin <code>Data/Set/Intervals/UnorderedInterval.lean</code>.</p>",
        "id": 399416794,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1698721530
    },
    {
        "content": "<p>This issue is discussed a bit <a href=\"#narrow/stream/270676-lean4/topic/Undefine.20lambda/near/393694873\">here</a>. That was about lambda but the same thing is true for Pi</p>",
        "id": 399416796,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1698721531
    },
    {
        "content": "<p>it is explicitly excluded as an identifier character, even though it has since been removed as a token</p>",
        "id": 399416874,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1698721564
    },
    {
        "content": "<p>as far as I know <code>Ι</code> should work as an identifier (testing seems to agree)</p>",
        "id": 399417095,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1698721680
    },
    {
        "content": "<blockquote>\n<p>In Mathlib Iota is defined as a notationin Data/Set/Intervals/UnorderedInterval.lean.</p>\n</blockquote>\n<p>Thanks, indeed, I was importing too much.</p>",
        "id": 399417433,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1698721834
    },
    {
        "content": "<p>Slightly unrelated, but what does <code>\\Iota</code> look like for you all? Also, guess which is <code>\\Iota</code> and which is <code>I</code>:<br>\n<a href=\"/user_uploads/3121/tYcB1dmHFKzhIY8cYNUv67-j/Screenshot-2023-10-31-at-04.34.57.png\">Screenshot-2023-10-31-at-04.34.57.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/tYcB1dmHFKzhIY8cYNUv67-j/Screenshot-2023-10-31-at-04.34.57.png\" title=\"Screenshot-2023-10-31-at-04.34.57.png\"><img src=\"/user_uploads/3121/tYcB1dmHFKzhIY8cYNUv67-j/Screenshot-2023-10-31-at-04.34.57.png\"></a></div>",
        "id": 399426875,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1698726930
    },
    {
        "content": "<p>The one with the red line under it is the one which isn't recognised as a token :-)</p>",
        "id": 399428057,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1698727845
    },
    {
        "content": "<p>For me <code>I</code> and <code>Ι</code> look identical. I don't know many fonts that differentiate them</p>",
        "id": 399430518,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1698729469
    },
    {
        "content": "<p>and it's a bit underhanded that mathlib is using capital iota as a notation</p>",
        "id": 399430581,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1698729492
    },
    {
        "content": "<p>Just to understand: at the beginning of the <a href=\"https://github.com/leanprover-community/mathlib4/wiki/Lean-4-survival-guide-for-Lean-3-users\">survival guide</a> I read that</p>\n<blockquote>\n<p>Function notation changed from <code>λ x, f x</code> to <code>fun x =&gt; f x</code> or <code>λ x =&gt; f x</code> or <code>fun x ↦ f x</code> or <code>λ x ↦ f x</code>.</p>\n</blockquote>\n<p>Does it mean that <em>even in mathlib</em> the λ-notation is accepted, or only the <code>fun</code> one is OK? Similar question for <code>=&gt;</code> vs <code>↦</code>.</p>",
        "id": 399910116,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1698923400
    },
    {
        "content": "<p>Only <code>fun</code>. Both arrows are accepted.</p>",
        "id": 399911657,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1698923750
    },
    {
        "content": "<p>This is covered in <a href=\"https://leanprover-community.github.io/contribute/style.html\">#style</a></p>",
        "id": 399911689,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1698923758
    },
    {
        "content": "<p>Oh, thanks. That's what I feared. I know it is too late (and not relevant), but I find it a pity.</p>",
        "id": 399911845,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1698923794
    },
    {
        "content": "<p>We can just start using <code>λ</code> again.</p>",
        "id": 399948997,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1698935128
    },
    {
        "content": "<p>Obligatory link to the <a href=\"#narrow/stream/270676-lean4/topic/Should.20we.20remove.2Fdeprecate.20.CE.BB.3F/near/363384578\">let's kill lambda</a> thread where we never actually eliminated it</p>",
        "id": 399952944,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1698936161
    },
    {
        "content": "<p>Indeed, what I see is that at the end of the day the notation is <em>not</em> deprecated in Lean4, but it is in <code>mathlib</code> (and the discussion pointed at by <span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> was indeed about Lean4). I cannot find the equivalent discussion for <code>mathlib</code> but it just seems to me to be a top-down directive that brings nothing. I do not want to claim it is <em>better</em> to use <code>λ</code> over <code>fun</code>, just that preventing users from using a symbol that the system accepts is weird. As far as uniformity is concerned, <code>mathlib</code> is allowing both <code>=&gt;</code> and <code>↦</code>. Likewise, I guess that both <code>fun x =&gt; x + 1</code> and <code>(· +1 )</code> are accepted. What is the downside to the solution \"every contributor can use whatever symbol they prefer\" here as well?</p>",
        "id": 399968053,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1698939125
    },
    {
        "content": "<p>I think there's a lot of value to picking one style and sticking to it; no one wants to read code like <code>λ x =&gt; fun y =&gt; λ z =&gt;</code> and have to try and work out whether the two different spellings genuinely mean different things.</p>",
        "id": 399969225,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1698939478
    },
    {
        "content": "<p>Arguably this should apply to <code>↦</code> too, but that's a mess because there are lots of <code>=&gt;</code>s in Lean that you can't replace with <code>↦</code>...</p>",
        "id": 399969372,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1698939501
    },
    {
        "content": "<p>I agree, but this seems to be a crazy contributor who likes to mix things up (and the PR review could go along the lines of \"please pick one convention in your PR and stick to it\").</p>",
        "id": 399969492,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1698939539
    },
    {
        "content": "<p>That quickly becomes \"please pick the convention in the rest of the existing files you touch\", and well, that convention is <code>fun</code> because that's what we asked mathport to write</p>",
        "id": 399969631,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1698939583
    },
    {
        "content": "<p>Three reasons from my perspective.</p>\n<ol>\n<li>If mathlib uses <code>λ</code>, core will be less likely to abolish it.</li>\n<li><code>λ</code> is weird type theory notation that math users may be unfamiliar with. We should avoid this where possible.</li>\n<li>As Eric said, consistent style.</li>\n</ol>\n<p>Note that we will <em>always</em> have <code>fun x ...</code> because it can do things that <code>(· + 1)</code> can't, even though the latter is more pleasing. So, it's to be expected, and a user can choose here which they prefer since both will be allowed. As for <code>=&gt;</code> and <code>↦</code>, I think the problem is that the community is rather split about which is preferred (and, as Eric mentioned, we will always have <code>=&gt;</code> in some places).</p>",
        "id": 399970281,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1698939772
    },
    {
        "content": "<p>Mario told us that one day he will write a meta-program turning every <code>λ x =&gt; ...</code> into <code>fun x ↦ ...</code> in Mathlib. That's the only reason why we didn't do it by hand.</p>",
        "id": 399970282,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1698939772
    },
    {
        "content": "<p>(That's a very good reason not to do it by hand)</p>",
        "id": 399970673,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1698939899
    },
    {
        "content": "<p>OK, I see your points. My only concern is of inclusiveness: many people coming from type theory are used to the lambda notation and this goes against what they are used to. Had we at least gained in flexibility by freeing the symbol, or had it been impossible to let Lean work with both, I would understand the need of being strict. Like this, it just seems to put a preference on mathematicians over type-theorists and I am not that much happy about it. At any rate, I realise it was a well-thought-out decision and I do not want to make a fuss out of it.</p>",
        "id": 399970704,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1698939907
    },
    {
        "content": "<p>I think <code>λ</code> is in a sense <em>only</em> for the type theorists (i.e., mathematicians and software engineers may not understand the reason for it's use, whereas <code>fun</code> is clear).</p>",
        "id": 399971471,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1698940129
    },
    {
        "content": "<p>As far as I know, non mathlib projects can still use \\lambda. Further it also makes perfect sense for a mathematical library to have conventions that work for math, which could be linter enforced. The question is, what does removing it from core achieve?</p>",
        "id": 399971472,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1698940129
    },
    {
        "content": "<p>Shreyas, allowing us to use it as a variable.</p>",
        "id": 399971598,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1698940173
    },
    {
        "content": "<p>Fwiw, type theorists probably don't use lean as it is. They construct a suitable DSL for their type theory.</p>",
        "id": 399971886,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1698940248
    },
    {
        "content": "<p>We could remove from core the fact that <code>λ</code> cannot be used for anything else, and then define it as a scoped notation for people who want it.</p>",
        "id": 399982454,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1698943300
    },
    {
        "content": "<p>Or just teach those people how to define the notation as a notation example, without actually doing it in Std or Mathlib</p>",
        "id": 399982886,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1698943434
    }
]