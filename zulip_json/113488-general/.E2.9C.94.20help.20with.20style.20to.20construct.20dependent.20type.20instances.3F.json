[
    {
        "content": "<p>Hi, I have some simple, working test code:</p>\n<p>However, I'm not a big fan of the nesting. Is there any pattern that anyone has used that would flatten this out, much like how do-notation helps me flatten out nested option matches etc.?</p>\n<p>Thanks</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">abbrev</span> <span class=\"n\">EmailAddress</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">str</span> <span class=\"o\">:</span> <span class=\"n\">String</span> <span class=\"bp\">//</span> <span class=\"n\">str.contains</span> <span class=\"sc\">'@'</span> <span class=\"bp\">∧</span> <span class=\"n\">str.length</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">5</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">createEmailAddressFromString</span> <span class=\"o\">(</span><span class=\"n\">str</span> <span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Except</span> <span class=\"n\">String</span> <span class=\"n\">EmailAddress</span> <span class=\"o\">:=</span>\n    <span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">str.contains</span> <span class=\"sc\">'@'</span> <span class=\"k\">then</span>\n        <span class=\"k\">if</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">str.length</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">5</span> <span class=\"k\">then</span>\n            <span class=\"bp\">.</span><span class=\"n\">ok</span> <span class=\"o\">⟨</span> <span class=\"n\">str</span><span class=\"o\">,</span> <span class=\"n\">And.intro</span> <span class=\"n\">h</span> <span class=\"n\">p</span> <span class=\"o\">⟩</span>\n        <span class=\"k\">else</span> <span class=\"bp\">.</span><span class=\"n\">error</span> <span class=\"s2\">\"needs to be at least 6 characters\"</span>\n    <span class=\"k\">else</span> <span class=\"bp\">.</span><span class=\"n\">error</span> <span class=\"s2\">\"does not contain @ symbol\"</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">createEmailAddressFromString</span> <span class=\"s2\">\"test@gmail.com\"</span>\n</code></pre></div>\n<p>edit: changed option to an except since the original code could just be simplified into one if-else</p>",
        "id": 400651950,
        "sender_full_name": "Matt",
        "timestamp": 1699326415
    },
    {
        "content": "<p>EDIT: Fixed?<br>\nYou can do <code>match</code> on more than one target, as follows:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">abbrev</span> <span class=\"n\">EmailAddress</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">str</span> <span class=\"o\">:</span> <span class=\"n\">String</span> <span class=\"bp\">//</span> <span class=\"n\">str.contains</span> <span class=\"sc\">'@'</span> <span class=\"bp\">∧</span> <span class=\"n\">str.length</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">5</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">createEmailAddressFromString</span> <span class=\"o\">(</span><span class=\"n\">str</span> <span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Except</span> <span class=\"n\">String</span> <span class=\"n\">EmailAddress</span> <span class=\"o\">:=</span>\n  <span class=\"c1\">-- \"double\" match, note the slight awkwardness with the type-ascription, though</span>\n  <span class=\"k\">match</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">str.contains</span> <span class=\"sc\">'@'</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">str.length</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">5</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span><span class=\"o\">)</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"n\">false</span><span class=\"o\">,</span> <span class=\"n\">_</span>   <span class=\"bp\">=&gt;</span> <span class=\"bp\">.</span><span class=\"n\">error</span> <span class=\"s2\">\"does not contain @ symbol\"</span>\n    <span class=\"bp\">|</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">false</span>   <span class=\"bp\">=&gt;</span> <span class=\"bp\">.</span><span class=\"n\">error</span> <span class=\"s2\">\"needs to be at least 6 characters\"</span>\n    <span class=\"bp\">|</span> <span class=\"n\">true</span><span class=\"o\">,</span> <span class=\"n\">true</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">.</span><span class=\"n\">ok</span> <span class=\"o\">(⟨</span> <span class=\"n\">str</span><span class=\"o\">,</span> <span class=\"n\">And.intro</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">simp_all</span><span class=\"o\">)</span> <span class=\"o\">⟩)</span>\n</code></pre></div>",
        "id": 400683775,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1699343848
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"321459\">Damiano Testa</span> <a href=\"#narrow/stream/113488-general/topic/help.20with.20style.20to.20construct.20dependent.20type.20instances.3F/near/400683775\">said</a>:</p>\n<blockquote>\n<p>EDIT: Fixed?<br>\nYou can do <code>match</code> on more than one target, as follows:</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">abbrev</span> <span class=\"n\">EmailAddress</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">str</span> <span class=\"o\">:</span> <span class=\"n\">String</span> <span class=\"bp\">//</span> <span class=\"n\">str.contains</span> <span class=\"sc\">'@'</span> <span class=\"bp\">∧</span> <span class=\"n\">str.length</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">5</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">createEmailAddressFromString</span> <span class=\"o\">(</span><span class=\"n\">str</span> <span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Except</span> <span class=\"n\">String</span> <span class=\"n\">EmailAddress</span> <span class=\"o\">:=</span>\n  <span class=\"c1\">-- \"double\" match, note the slight awkwardness with the type-ascription, though</span>\n  <span class=\"k\">match</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">str.contains</span> <span class=\"sc\">'@'</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">str.length</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">5</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span><span class=\"o\">)</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"n\">false</span><span class=\"o\">,</span> <span class=\"n\">_</span>   <span class=\"bp\">=&gt;</span> <span class=\"bp\">.</span><span class=\"n\">error</span> <span class=\"s2\">\"does not contain @ symbol\"</span>\n    <span class=\"bp\">|</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">false</span>   <span class=\"bp\">=&gt;</span> <span class=\"bp\">.</span><span class=\"n\">error</span> <span class=\"s2\">\"needs to be at least 6 characters\"</span>\n    <span class=\"bp\">|</span> <span class=\"n\">true</span><span class=\"o\">,</span> <span class=\"n\">true</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">.</span><span class=\"n\">ok</span> <span class=\"o\">(⟨</span> <span class=\"n\">str</span><span class=\"o\">,</span> <span class=\"n\">And.intro</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">simp_all</span><span class=\"o\">)</span> <span class=\"o\">⟩)</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>ah ok thank you! that's interesting. when I hover over p, its type is <code>decide (String.length str &gt; 5) = x✝¹</code> compared to h which is as expected: <code>String.contains str (Char.ofNat 64) = false</code></p>\n<p>do you know what's going on here?</p>",
        "id": 400685851,
        "sender_full_name": "Matt",
        "timestamp": 1699344667
    },
    {
        "content": "<p>I suspect that the inequality is a Prop, not a Bool and converting between them is creating some friction.  There may be a better way of getting the conversion to work, but I failed at making it smoother.</p>",
        "id": 400686693,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1699344961
    },
    {
        "content": "<p>Another sign that something is off, is the fact that the final branch of the <code>match</code> \"should\" work also with underscores instead of <code>true</code>, but it actually doesn't.</p>",
        "id": 400687087,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1699345122
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"321459\">Damiano Testa</span> <a href=\"#narrow/stream/113488-general/topic/help.20with.20style.20to.20construct.20dependent.20type.20instances.3F/near/400687087\">said</a>:</p>\n<blockquote>\n<p>Another sign that something is off, is the fact that the final branch of the <code>match</code> \"should\" work also with underscores instead of <code>true</code>, but it actually doesn't.</p>\n</blockquote>\n<p>oh you're right that's odd. either way thanks for the help!</p>",
        "id": 400687194,
        "sender_full_name": "Matt",
        "timestamp": 1699345184
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"653560\">Matt</span> has marked this topic as resolved.</p>",
        "id": 400687244,
        "sender_full_name": "Notification Bot",
        "timestamp": 1699345204
    },
    {
        "content": "<p>Ideally, I feel like you should be able to write something like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">abbrev</span> <span class=\"n\">EmailAddress</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">str</span> <span class=\"o\">:</span> <span class=\"n\">String</span> <span class=\"bp\">//</span> <span class=\"n\">str.contains</span> <span class=\"sc\">'@'</span> <span class=\"bp\">∧</span> <span class=\"n\">str.length</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">5</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">createEmailAddressFromString</span> <span class=\"o\">(</span><span class=\"n\">str</span> <span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Except</span> <span class=\"n\">String</span> <span class=\"n\">EmailAddress</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n    <span class=\"n\">unless</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">str.contains</span> <span class=\"sc\">'@'</span> <span class=\"k\">do</span>\n      <span class=\"n\">throw</span> <span class=\"s2\">\"does not contain @ symbol\"</span>\n    <span class=\"n\">unless</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">str.length</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">5</span> <span class=\"k\">do</span>\n      <span class=\"n\">throw</span> <span class=\"s2\">\"needs to be at least 6 characters\"</span>\n    <span class=\"n\">return</span> <span class=\"o\">⟨</span><span class=\"n\">str</span><span class=\"o\">,</span> <span class=\"n\">And.intro</span> <span class=\"n\">h</span> <span class=\"n\">p</span><span class=\"o\">⟩</span>\n</code></pre></div>\n<p>However, the <code>unless</code> syntax doesn't allow for a named hypothesis</p>",
        "id": 400687395,
        "sender_full_name": "Arthur Adjedj",
        "timestamp": 1699345285
    },
    {
        "content": "<p>Yes, I also tried <code>unless</code> first and failed...</p>",
        "id": 400687746,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1699345443
    },
    {
        "content": "<p>I think this is a feature request for <code>unless</code> that would be uncontroversial</p>",
        "id": 400726560,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1699358933
    },
    {
        "content": "<p>The feature isn’t applicable to <code>unless</code> in general, at least not in this use case: since the \"outer\" branch can still be reached if the \"inner\" one doesn’t return early, it is not always certain that <code>h</code> would be true in the outer branch, all you would get from having a named hypothesis would be the fact that <code>not h</code> would be in the context of the inner one. Because of this, the code written above would still not work with this feature added.</p>",
        "id": 400736048,
        "sender_full_name": "Arthur Adjedj",
        "timestamp": 1699362480
    }
]