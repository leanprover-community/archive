[
    {
        "content": "<p>This code:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"bp\">𝒜𝒜𝒜𝒜𝒜𝒜𝒜𝒜𝒜𝒜𝒜𝒜</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"n\">_</span>\n</code></pre></div>\n<p>results in the error line going under <code>nat</code> when it should instead be under <code>_</code>:<br>\n<a href=\"/user_uploads/3121/gYtyBZHaqznq4nNbPPk2Ghkw/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/gYtyBZHaqznq4nNbPPk2Ghkw/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/gYtyBZHaqznq4nNbPPk2Ghkw/image.png\"></a></div>",
        "id": 282848210,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1652907339
    },
    {
        "content": "<p>This example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"bp\">𝒜𝒜𝒜𝒜𝒜𝒜𝒜𝒜𝒜𝒜𝒜𝒜</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"n\">_</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">AAAAAAAAAAAA</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"n\">_</span>\n</code></pre></div>\n<p>Reports the same column number with <code>lean --make</code>, so the bug must lie in the server or extension</p>",
        "id": 282848613,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1652907548
    },
    {
        "content": "<p><a href=\"#narrow/stream/113488-general/topic/VSCode.20squiggle.20off/near/269407218\">https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/VSCode.20squiggle.20off/near/269407218</a></p>",
        "id": 282848971,
        "sender_full_name": "Reid Barton",
        "timestamp": 1652907707
    },
    {
        "content": "<p>interestingly, <a href=\"https://github.com/microsoft/language-server-protocol/issues/376\">https://github.com/microsoft/language-server-protocol/issues/376</a> recently got fixed, so maybe there is a way to fix this now</p>",
        "id": 282849585,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1652908044
    },
    {
        "content": "<p>I thought Lean 3 didn't use LSP?</p>",
        "id": 282850923,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1652908778
    },
    {
        "content": "<p>Or rather, that the L in Lean 3's LSP stood for Lean</p>",
        "id": 282850957,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1652908795
    },
    {
        "content": "<p>ah, fair point</p>",
        "id": 282852022,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1652909422
    },
    {
        "content": "<p>I'll have a go at fixing the lean3 extension, I think the server is well-behaved</p>",
        "id": 282852348,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1652909647
    },
    {
        "content": "<p>Out of curiosity, how did you come up with that testing case? <span aria-label=\"open mouth\" class=\"emoji emoji-1f62e\" role=\"img\" title=\"open mouth\">:open_mouth:</span></p>",
        "id": 282852645,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1652909874
    },
    {
        "content": "<p>it's easy enough to notice when you use one script letter</p>",
        "id": 282852712,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1652909904
    },
    {
        "content": "<p>using more script letters just makes the problem worse</p>",
        "id": 282852723,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1652909915
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"451983\">Arthur Paulino</span> <a href=\"#narrow/stream/113488-general/topic/VSCode.20puts.20error.20lines.20in.20the.20wrong.20place/near/282852645\">said</a>:</p>\n<blockquote>\n<p>Out of curiosity, how did you come up with that testing case? <span aria-label=\"open mouth\" class=\"emoji emoji-1f62e\" role=\"img\" title=\"open mouth\">:open_mouth:</span></p>\n</blockquote>\n<p>The same input causes Overleaf to completely reject a tex file</p>",
        "id": 282852743,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1652909930
    },
    {
        "content": "<p>This rabbit hole started with a spike trap</p>",
        "id": 282852782,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1652909958
    },
    {
        "content": "<p>Apparently its editor, CodeMirror, doesn't handle things that use two UTF-16 code units</p>",
        "id": 282852819,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1652909985
    },
    {
        "content": "<p>the general problem happens if you use any characters above 0xFFFF</p>",
        "id": 282852847,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1652909996
    },
    {
        "content": "<p>UTF-16 is the worst</p>",
        "id": 282852852,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1652909999
    },
    {
        "content": "<p>UTF-8 forces people to actually solve these problems, UTF-32/UCS-4 makes them not exist.</p>",
        "id": 282852931,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1652910026
    },
    {
        "content": "<p>Most uses of UTF-16 are actually WTF-16 (UTF-16 with unpaired surrogates)</p>",
        "id": 282852988,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1652910075
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113488-general/topic/VSCode.20puts.20error.20lines.20in.20the.20wrong.20place/near/282849585\">said</a>:</p>\n<blockquote>\n<p>interestingly, <a href=\"https://github.com/microsoft/language-server-protocol/issues/376\">https://github.com/microsoft/language-server-protocol/issues/376</a> recently got fixed, so maybe there is a way to fix this now</p>\n</blockquote>\n<p>VSCode just throws an error if it recieves this field with any value other than utf8</p>",
        "id": 282852994,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1652910080
    },
    {
        "content": "<p>...and yes, the acronym is intentional</p>",
        "id": 282853005,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1652910093
    },
    {
        "content": "<p>utf8 is fine, the hard part was getting it to recognize anything other than utf16</p>",
        "id": 282853097,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1652910142
    },
    {
        "content": "<p>is that for the server or the client?</p>",
        "id": 282853336,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1652910289
    },
    {
        "content": "<p>I can't work out where the vscode client is</p>",
        "id": 282853425,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1652910352
    },
    {
        "content": "<p>My best guess was <a href=\"https://github.com/microsoft/vscode-languageserver-node/blob/8b3c375adc4fa69f63726ef58d911c8e27b261c5/client/src/common/client.ts#L1120-L1122\">https://github.com/microsoft/vscode-languageserver-node/blob/8b3c375adc4fa69f63726ef58d911c8e27b261c5/client/src/common/client.ts#L1120-L1122</a></p>",
        "id": 282853428,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1652910355
    },
    {
        "content": "<p>The protocol is that the client says a bunch of encodings it supports, and then the server replies with the encoding it wants to use. It makes sense for the template for typescript servers to reply utf-16 since javascript is utf-16 native</p>",
        "id": 282853611,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1652910474
    },
    {
        "content": "<p>in particular you can tell that is a server response and not the client list because the client's version is <code>positionEncodings</code> (note the plural)</p>",
        "id": 282853734,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1652910548
    },
    {
        "content": "<p>actually that's not right, that is the code on the client to reject the server's response if it is not <code>utf-16</code>. The client's original request of supported encodings is <a href=\"https://github.com/microsoft/vscode-languageserver-node/blob/8b3c375adc4fa69f63726ef58d911c8e27b261c5/client/src/common/client.ts#L1690\">https://github.com/microsoft/vscode-languageserver-node/blob/8b3c375adc4fa69f63726ef58d911c8e27b261c5/client/src/common/client.ts#L1690</a></p>",
        "id": 282853934,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1652910650
    },
    {
        "content": "<p>so I think you are right that vscode does not yet actually support any other encodings</p>",
        "id": 282853974,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1652910675
    },
    {
        "content": "<p>I was hoping I'd be able to look at how the server client handles these other encodings so as to implement it in our server</p>",
        "id": 282854399,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1652910951
    },
    {
        "content": "<p>So much for that approach</p>",
        "id": 282854403,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1652910957
    },
    {
        "content": "<p>Tried a patch at <a href=\"https://github.com/leanprover/vscode-lean/pull/301\">https://github.com/leanprover/vscode-lean/pull/301</a>, but can't work out how to test it in gitpod</p>",
        "id": 282856059,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1652911860
    },
    {
        "content": "<p>It works <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span></p>\n<p><a href=\"/user_uploads/3121/7Ff177_1S6shYGm11_oAXQO9/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/7Ff177_1S6shYGm11_oAXQO9/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/7Ff177_1S6shYGm11_oAXQO9/image.png\"></a></div>",
        "id": 282856425,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1652912105
    },
    {
        "content": "<p>You know we've had this problem for literal months, right? <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span></p>",
        "id": 282856610,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1652912225
    },
    {
        "content": "<p>I think there are other places the issue arises in the server:</p>\n<ul>\n<li><a href=\"https://github.com/leanprover/vscode-lean/blob/8ad0609f560f279512ff792589f06d18aa92fb3f/src/hover.ts#L12\">https://github.com/leanprover/vscode-lean/blob/8ad0609f560f279512ff792589f06d18aa92fb3f/src/hover.ts#L12</a></li>\n<li><a href=\"https://github.com/leanprover/vscode-lean/blob/8ad0609f560f279512ff792589f06d18aa92fb3f/src/definition.ts#L12\">https://github.com/leanprover/vscode-lean/blob/8ad0609f560f279512ff792589f06d18aa92fb3f/src/definition.ts#L12</a></li>\n<li><a href=\"https://github.com/leanprover/vscode-lean/blob/8ad0609f560f279512ff792589f06d18aa92fb3f/src/completion.ts#L45\">https://github.com/leanprover/vscode-lean/blob/8ad0609f560f279512ff792589f06d18aa92fb3f/src/completion.ts#L45</a></li>\n<li><a href=\"https://github.com/leanprover/vscode-lean/blob/8ad0609f560f279512ff792589f06d18aa92fb3f/src/tacticsuggestions.ts#L57\">https://github.com/leanprover/vscode-lean/blob/8ad0609f560f279512ff792589f06d18aa92fb3f/src/tacticsuggestions.ts#L57</a></li>\n<li><a href=\"https://github.com/leanprover/vscode-lean/blob/8ad0609f560f279512ff792589f06d18aa92fb3f/src/diagnostics.ts#L60\">https://github.com/leanprover/vscode-lean/blob/8ad0609f560f279512ff792589f06d18aa92fb3f/src/diagnostics.ts#L60</a></li>\n</ul>",
        "id": 282857136,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1652912573
    },
    {
        "content": "<p>Yeah, I just found those</p>",
        "id": 282857695,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1652912963
    },
    {
        "content": "<p>Ok, hopefully fixed</p>",
        "id": 282862413,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1652916148
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"373814\">@Rish Vaishnav</span> fixed this sort of thing in lean.nvim awhile back -- <a href=\"https://github.com/Julian/lean.nvim/pull/208\">https://github.com/Julian/lean.nvim/pull/208</a></p>",
        "id": 282864734,
        "sender_full_name": "Julian Berman",
        "timestamp": 1652918154
    },
    {
        "content": "<p>I guess yet another reason Lean 4 can't come soon enough, will be nice if we can share a bit more between all of the plugins.</p>",
        "id": 282864809,
        "sender_full_name": "Julian Berman",
        "timestamp": 1652918184
    },
    {
        "content": "<p>Personally I think the lean 3 behavior of counting codepoints is correct, and the fault lies entirely with vscode; but perhaps that's the python user within me talking.</p>",
        "id": 282885038,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1652940224
    },
    {
        "content": "<p>Turns out that <code>Try this</code> was also broken:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c\">/-</span><span class=\"cm\">𝒜𝒜𝒜𝒜𝒜𝒜𝒜𝒜𝒜𝒜𝒜𝒜𝒜𝒜𝒜𝒜𝒜𝒜𝒜 don't replace me -/</span> <span class=\"k\">#eval</span>\n  <span class=\"n\">tactic.trace</span> <span class=\"s2\">\"Try this: foo\"</span>\n</code></pre></div>\n<p>This replaces the word <code>don't</code> with <code>foo</code></p>",
        "id": 282889899,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1652944443
    },
    {
        "content": "<p>This is now released, <a href=\"https://github.com/leanprover/vscode-lean/releases/tag/v0.16.48\">https://github.com/leanprover/vscode-lean/releases/tag/v0.16.48</a></p>",
        "id": 282919781,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1652962759
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> has marked this topic as resolved.</p>",
        "id": 282919788,
        "sender_full_name": "Notification Bot",
        "timestamp": 1652962764
    },
    {
        "content": "<blockquote>\n<p>[...] these problems, UTF-32/UCS-4 makes them not exist.</p>\n</blockquote>\n<p>If only strings were that easy... <code>स्</code> is a single \"grapheme cluster\" but written as two (UTF-32) codepoints (which are of course represented as 3 UTF-16 code units, or 6 bytes of UTF-8).</p>",
        "id": 282926946,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1652966214
    },
    {
        "content": "<p>I guess my perpective comes from lean and python both working in terms of codepoints</p>",
        "id": 282940918,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1652972238
    },
    {
        "content": "<p>And not actually caring about \"real\" characters</p>",
        "id": 282940953,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1652972248
    },
    {
        "content": "<p>Note that the VSCode status bar counts <code>स्</code> as two columns, so it seems to also only look at codepoints</p>",
        "id": 282941010,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1652972278
    },
    {
        "content": "<p>You also need to press right-arrow twice before the cursor moves over the character.  And if you press space after the first right-arrow, vscode splits the character in half.</p>",
        "id": 282941444,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1652972422
    },
    {
        "content": "<p>neovim gets this right btw.</p>",
        "id": 282941548,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1652972452
    },
    {
        "content": "<p>Even <code>nano</code> seems to get this right</p>",
        "id": 282941729,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1652972516
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110043\">Gabriel Ebner</span> <a href=\"#narrow/stream/113488-general/topic/.E2.9C.94.20VSCode.20puts.20error.20lines.20in.20the.20wrong.20place/near/282941444\">said</a>:</p>\n<blockquote>\n<p>You also need to press right-arrow twice before the cursor moves over the character.  And if you press space after the first right-arrow, vscode splits the character in half.</p>\n</blockquote>\n<p>Couldn't you argue this is intended behavior for a text editor? Does unicode specify how editing grapheme clusters is supposed to work?</p>",
        "id": 282949639,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1652975630
    },
    {
        "content": "<p>I'd say this depends on how the text is rendered.  If the character is divisible by inserting a space, then it should also be partially selectable, you should be able to put the cursor in the middle, etc.  What makes the vscode behavior so weird is that it is inconsistent.  The column number and the key input treat it as two characters, while selection and cursor display treat it as a single character.</p>\n<p>For a general-purpose editor I think <code>स्</code> should count as one character.  Otherwise you could conclude with the same argument that inserting a space in <code>Ö</code> should result in <code>O ̈</code> (which to be clear, is not useful in any way).</p>",
        "id": 282951062,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1652976177
    },
    {
        "content": "<p><a href=\"https://www.foonathan.net/2021/02/column/\">https://www.foonathan.net/2021/02/column/</a> is a nice high-level article I have bookmarked that may be of interest.</p>",
        "id": 282969830,
        "sender_full_name": "Julian Berman",
        "timestamp": 1652983723
    }
]