[
    {
        "content": "<p>tl;dr: how hard is to make this work:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Nat</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">succ_inj2</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">succ</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">succ</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">succ</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">succ</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">apply</span> <span class=\"n\">succ_inj2</span> <span class=\"n\">at</span> <span class=\"n\">h</span> <span class=\"c1\">-- `h` becomes `a = b`</span>\n</code></pre></div>\n<p>We have a preliminary version in NNG4:</p>\n<p><a href=\"https://github.com/hhu-adam/NNG4/blob/0eb7817cf9cb71a33b0f92d6b29a2c9f88acf165/Game/Tactic/Apply.lean#L15-L16\">https://github.com/hhu-adam/NNG4/blob/0eb7817cf9cb71a33b0f92d6b29a2c9f88acf165/Game/Tactic/Apply.lean#L15-L16</a></p>\n<p>but it desugars to <code>replace h := succ_inj2 h</code> which is no good here; <code>apply t at h</code> works fine if <code>t : P -&gt; Q</code> but <code>succ_inj2</code> has got explicit inputs before <code>P</code> which need to be filled in by unification.</p>\n<p>Basically, <code>apply t</code> changes the goal Q to P even if the type of <code>t</code> is <code>\\forall x, P -&gt; Q</code> . I'd like <code>apply at</code> to be as flexible. Is this difficult?</p>\n<hr>\n<p>Here's why I would love this.</p>\n<p>Mathematicians typically don't get taught logic formally and are expected to pick it up themselves. As a consequence they figure out that arguing forwards is normal, don't ever really see examples of arguing backwards, and so the moment they leave the main path of the natural number game (which only uses <code>rw</code> and <code>induction</code>) and run into <code>apply</code>, they are totally confused for two reasons: firstly because mathematicians use the word \"apply\" to mean lots of things (e.g. \"rewrite\") and secondly because when they are using it in the context of an implication, 9 times out of 10 they are applying <code>t : P -&gt; Q</code>to a <em>hypothesis</em> <code>h : P</code> rather than to <code>\\|- Q</code>. </p>\n<p>In NNG3 I mitigated against this by making function world and proposition world, which introduce <code>apply</code> very slowly in an abstract context of <code>P -&gt; Q</code> with <code>P : Prop</code>. These are the only two worlds in the Lean 3 version of the game which have variables of type Type or Prop; every other thing they see has type Nat or is a proof.</p>\n<p>I was convinced in 2019 that this was the way to teach tactics like <code>intro</code> and <code>apply</code>, but then I learnt from Patrick that he teaches these tactics \"by example\", so the students never see <code>P -&gt; Q</code>, they see mathematically meaningful props like <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mo>=</mo><mn>2</mn><mtext>  </mtext><mo>⟹</mo><mtext>  </mtext><msup><mi>x</mi><mn>2</mn></msup><mo>=</mo><mn>4</mn></mrow><annotation encoding=\"application/x-tex\">x=2\\implies x^2=4</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6684em;vertical-align:-0.024em;\"></span><span class=\"mord\">2</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">⟹</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8141em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">4</span></span></span></span>. So I'm ripping out function and proposition world and going straight into advanced addition world and teaching <code>intro</code>, <code>apply</code> and <code>exact</code> in this context, rewriting the entire world to have far more tutorial elements where these tactics are taught in the context of theorems about numbers. It's going really well -- I like the new version much better than I like NNG3 function and proposition world.  But rewriting these levels made me realise that actually one way of teaching <code>apply</code> would be by teaching <code>apply at</code> first and then <code>apply</code> second, and if the students remain confused about arguing backwards they can just <code>apply at</code> their way through the levels. However it's really common that my lemmas have explicit inputs, it turns out, so right now I can't write them because with my current set-up <code>apply at</code> won't eat <code>succ_inj2 a b</code> and fails if I just give it <code>succ_inj</code>. <span class=\"user-mention\" data-user-id=\"127136\">@Alex J. Best</span> you say you're sometimes looking for small tactic projects -- is this small, or is it a nightmare?</p>",
        "id": 394509077,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1696279010
    },
    {
        "content": "<p>Kevin, I think the trickiest part of this is that the expected type is not known, so how do you determine which arguments are fillable?</p>\n<p>For example, if have</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"n\">r</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">q</span> <span class=\"bp\">→</span> <span class=\"n\">r</span> <span class=\"bp\">→</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hq</span> <span class=\"o\">:</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">r</span> <span class=\"bp\">→</span> <span class=\"n\">s</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">apply</span> <span class=\"n\">h</span>\n  <span class=\"bp\">·</span> <span class=\"n\">exact</span> <span class=\"n\">hp</span>\n  <span class=\"bp\">·</span> <span class=\"n\">exact</span> <span class=\"n\">hq</span>\n</code></pre></div>\n<p>Then when I call <code>apply</code>, Lean can unify the goal with the end of <code>h</code> to see, oh, I'll do <code>refine h ?_ ?_</code> and get something of the correct type. But what would you expect <code>apply h at hp</code> to do here?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">q</span> <span class=\"bp\">→</span> <span class=\"n\">r</span> <span class=\"bp\">→</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hq</span> <span class=\"o\">:</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">r</span> <span class=\"bp\">→</span> <span class=\"n\">s</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">apply</span> <span class=\"n\">h</span> <span class=\"n\">at</span> <span class=\"n\">hp</span>\n  <span class=\"c1\">-- hp : ???</span>\n  <span class=\"c1\">-- what new goals are there, if any?</span>\n</code></pre></div>",
        "id": 394510836,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1696279808
    },
    {
        "content": "<p>Coq does what Kevin asks.</p>",
        "id": 394511023,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1696279906
    },
    {
        "content": "<p>What does it do in my example above?</p>",
        "id": 394511161,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1696279951
    },
    {
        "content": "<p>One minute. Typing it in CoqIDE.</p>",
        "id": 394511619,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1696280165
    },
    {
        "content": "<p>Why cant you unify the type of <code>hp</code> with the leftmost parameter of <code>f</code> where it works, introduce metavariables for everything to the left of that, and return the result of applying the function?</p>",
        "id": 394511674,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1696280195
    },
    {
        "content": "<p>ah, I just realized I misread Kevin's intended use case. I think what Adam says makes sense.</p>",
        "id": 394511794,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1696280247
    },
    {
        "content": "<p>And then with that behavior in my example it would yield <code>hp : q → r → s</code> and no new goals.</p>",
        "id": 394511986,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1696280331
    },
    {
        "content": "<p>Coq did something much stranger than I expected on that example. Here's a proof of dni that works as I expected:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Require</span> <span class=\"n\">Import</span> <span class=\"n\">Coq.Unicode.Utf8.</span>\n\n<span class=\"n\">Lemma</span> <span class=\"n\">dn_introduction</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"bp\">→</span> <span class=\"bp\">¬¬</span><span class=\"n\">P.</span>\n<span class=\"n\">Proof.</span>\n  <span class=\"n\">intros</span> <span class=\"n\">P</span> <span class=\"n\">hP.</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">not.</span>\n  <span class=\"n\">intro</span> <span class=\"n\">hnp.</span>\n  <span class=\"n\">apply</span> <span class=\"n\">hnp</span> <span class=\"k\">in</span> <span class=\"n\">hP.</span>\n  <span class=\"n\">exact</span> <span class=\"n\">hP.</span>\n<span class=\"n\">Qed.</span>\n</code></pre></div>",
        "id": 394513423,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1696280982
    },
    {
        "content": "<p>For an explanation see : <a href=\"https://softwarefoundations.cis.upenn.edu/lf-current/Tactics.html#silly4\">forward and backward reasoning</a></p>",
        "id": 394513606,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1696281078
    },
    {
        "content": "<p>On your example <span class=\"user-mention\" data-user-id=\"197836\">@Jireh Loreaux</span> it changed the hypothesis <code>h</code> to <code>s</code></p>",
        "id": 394513656,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1696281111
    },
    {
        "content": "<p>Changing <code>h</code> to <code>s</code> by adding goals for <code>q</code> and <code>r</code>, you mean?</p>",
        "id": 394513830,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1696281194
    },
    {
        "content": "<p>Basically yes.</p>",
        "id": 394514132,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1696281344
    },
    {
        "content": "<p>I am  not sure anymore if this is what Kevin wants.</p>",
        "id": 394514161,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1696281360
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"243562\">@Adam Topaz</span> : May I PM you to understand why Coq just did that? Don't want to hijack the thread.</p>\n<p>Forward reasoning definitely feels more intuitive for basic logic.</p>",
        "id": 394517627,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1696283243
    },
    {
        "content": "<p>I know it's very cute that <code>apply h : p -&gt; q -&gt; r</code> does something cute when the goal is <code>r</code>, but I think this is a pretty niche use and I'd be happy if it was not covered by <code>apply...at</code>. In all the examples I've seen in NNG h is of the form Nat -&gt; Nat -&gt; ... -&gt; Nat -&gt; q -&gt; r where q and r depend on the nats, you apply it at <code>hq : q(37,42...)</code> and get <code>hr : r(37,42,...)</code>.</p>\n<p>Shreyas, thanks for pointing out that Coq already has this.</p>",
        "id": 394561169,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1696309819
    },
    {
        "content": "<p>Being new to tactics, I start about 75% of all my tactic proofs with <code>apply...at</code>.  I <em>know</em> it doesn't work, and yet I still mechanically write it.  Sometimes I write it even though I know it doesn't work, as a visual marker for \"ok, now how do I make this work\".</p>",
        "id": 394597895,
        "sender_full_name": "Ioannis Konstantoulas",
        "timestamp": 1696326710
    },
    {
        "content": "<p>It works in NNG (but only for functions which have no explicit numerical inputs)</p>",
        "id": 394670735,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1696350630
    },
    {
        "content": "<p>Well, I got something to kind of work:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">Mathlib.Tactic</span>\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Meta</span> <span class=\"n\">Elab</span> <span class=\"n\">Tactic</span> <span class=\"n\">Term</span>\n\n<span class=\"n\">elab</span> <span class=\"s2\">\"apply\"</span> <span class=\"n\">t</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"s2\">\"at\"</span> <span class=\"n\">i</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">fn</span> <span class=\"bp\">←</span> <span class=\"n\">Term.elabTerm</span> <span class=\"n\">t</span> <span class=\"n\">none</span>\n  <span class=\"k\">let</span> <span class=\"n\">fnTp</span> <span class=\"bp\">←</span> <span class=\"n\">inferType</span> <span class=\"n\">fn</span>\n  <span class=\"n\">unless</span> <span class=\"n\">fnTp.isForall</span> <span class=\"k\">do</span> <span class=\"n\">throwError</span> <span class=\"s2\">\"oops!\"</span>\n  <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">ms</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">foutTp</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">forallMetaTelescopeReducing</span> <span class=\"n\">fnTp</span> <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n  <span class=\"k\">let</span> <span class=\"n\">finTp</span> <span class=\"bp\">←</span> <span class=\"n\">inferType</span> <span class=\"n\">ms</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">]</span><span class=\"bp\">!</span>\n  <span class=\"k\">let</span> <span class=\"n\">ldecl</span> <span class=\"bp\">←</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">getLCtx</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">findFromUserName</span><span class=\"bp\">?</span> <span class=\"n\">i.getId</span>\n  <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">mvs</span><span class=\"o\">,</span> <span class=\"n\">outTp</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"k\">show</span> <span class=\"n\">TacticM</span> <span class=\"o\">(</span><span class=\"n\">Array</span> <span class=\"n\">Expr</span> <span class=\"bp\">×</span> <span class=\"n\">Expr</span><span class=\"o\">)</span> <span class=\"k\">from</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">mvs</span> <span class=\"o\">:=</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">ms</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">]</span><span class=\"bp\">!</span><span class=\"o\">]</span>\n    <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">cmpTp</span> <span class=\"o\">:=</span> <span class=\"n\">finTp</span>\n    <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">outTp</span> <span class=\"o\">:=</span> <span class=\"n\">foutTp</span>\n    <span class=\"n\">while</span> <span class=\"bp\">!</span><span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">isDefEq</span> <span class=\"n\">cmpTp</span> <span class=\"n\">ldecl.type</span><span class=\"o\">)</span> <span class=\"k\">do</span>\n      <span class=\"n\">unless</span> <span class=\"n\">outTp.isForall</span> <span class=\"k\">do</span> <span class=\"n\">throwError</span> <span class=\"s2\">\"oops!\"</span>\n      <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">ms</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">newfoutTp</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">forallMetaTelescopeReducing</span> <span class=\"n\">outTp</span> <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n      <span class=\"n\">mvs</span> <span class=\"o\">:=</span> <span class=\"n\">mvs</span> <span class=\"bp\">++</span> <span class=\"n\">ms</span>\n      <span class=\"n\">cmpTp</span> <span class=\"bp\">←</span> <span class=\"n\">inferType</span> <span class=\"n\">ms</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">]</span><span class=\"bp\">!</span>\n      <span class=\"n\">outTp</span> <span class=\"o\">:=</span> <span class=\"n\">newfoutTp</span>\n    <span class=\"n\">mvs</span> <span class=\"o\">:=</span> <span class=\"n\">mvs.pop</span>\n    <span class=\"n\">return</span> <span class=\"o\">(</span><span class=\"n\">mvs</span><span class=\"o\">,</span> <span class=\"n\">outTp</span><span class=\"o\">)</span>\n  <span class=\"k\">let</span> <span class=\"n\">mainGoal</span> <span class=\"bp\">←</span> <span class=\"n\">getMainGoal</span>\n  <span class=\"k\">let</span> <span class=\"n\">mainGoal</span> <span class=\"bp\">←</span> <span class=\"n\">mainGoal.tryClear</span> <span class=\"n\">ldecl.fvarId</span>\n  <span class=\"k\">let</span> <span class=\"n\">mainGoal</span> <span class=\"bp\">←</span> <span class=\"n\">mainGoal.assert</span> <span class=\"n\">ldecl.userName</span> <span class=\"n\">outTp</span> <span class=\"o\">(</span><span class=\"n\">mkAppN</span> <span class=\"n\">fn</span> <span class=\"o\">(</span><span class=\"n\">mvs.push</span> <span class=\"n\">ldecl.toExpr</span><span class=\"o\">))</span>\n  <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">mainGoal</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">mainGoal.intro1P</span>\n  <span class=\"n\">replaceMainGoal</span> <span class=\"bp\">&lt;|</span> <span class=\"o\">[</span><span class=\"n\">mainGoal</span><span class=\"o\">]</span> <span class=\"bp\">++</span> <span class=\"n\">mvs.toList.map</span> <span class=\"k\">fun</span> <span class=\"n\">e</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">e.mvarId</span><span class=\"bp\">!</span>\n\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">γ</span> <span class=\"n\">δ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">γ</span> <span class=\"bp\">→</span> <span class=\"n\">δ</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">γ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">δ</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">apply</span> <span class=\"n\">f</span> <span class=\"n\">at</span> <span class=\"n\">g</span>\n  <span class=\"n\">assumption</span>\n  <span class=\"n\">assumption</span>\n  <span class=\"n\">assumption</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Nat</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">succ_inj2</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">succ</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">succ</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">succ</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">succ</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">apply</span> <span class=\"n\">succ_inj2</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n  <span class=\"n\">assumption</span>\n</code></pre></div>",
        "id": 394817177,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1696418076
    },
    {
        "content": "<p>I haven't tested it much, and it certainly needs better errors.</p>",
        "id": 394817221,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1696418098
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"bp\">→</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">apply</span> <span class=\"n\">f</span> <span class=\"n\">at</span> <span class=\"n\">ha</span> <span class=\"c1\">-- ha : B</span>\n  <span class=\"n\">apply</span> <span class=\"n\">g</span> <span class=\"n\">at</span> <span class=\"n\">ha</span> <span class=\"c1\">-- error: oops!</span>\n  <span class=\"n\">exact</span> <span class=\"n\">ha</span>\n</code></pre></div>\n<p>I am very impressed that you've managed to make this fail! How can the first <code>apply</code> work but not the second?</p>",
        "id": 394829637,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1696422519
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"bp\">→</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">apply</span> <span class=\"n\">f</span> <span class=\"n\">at</span> <span class=\"n\">ha</span> <span class=\"c1\">-- ha : B</span>\n  <span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"n\">ha</span> <span class=\"c1\">-- h : B</span>\n  <span class=\"n\">apply</span> <span class=\"n\">g</span> <span class=\"n\">at</span> <span class=\"n\">h</span> <span class=\"c1\">-- error: failed</span>\n  <span class=\"n\">exact</span> <span class=\"n\">ha</span>\n</code></pre></div>",
        "id": 394829915,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1696422608
    },
    {
        "content": "<p>hmmm ok. I'll try to fix this when I have time later today.</p>",
        "id": 394829962,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1696422628
    },
    {
        "content": "<p>The issue is that the local declaration is not getting updated for some reason after the first <code>apply</code>. So clearly there's some bug.</p>",
        "id": 394830457,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1696422808
    },
    {
        "content": "<p>The <code>isForall</code> checks look suspicious to me. <code>forallMetaTelescopeReducing</code> will already perform similar (but less strict) checks. They at least need a <code>consumeMData</code>.</p>",
        "id": 394832358,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1696423444
    },
    {
        "content": "<p>Yeah, but i think even if I pass <code>some 1</code> to forallMetaTelescopingReducing the resulting mvar array will have at most 1 element. I wanted to ensure there is exactly one.</p>",
        "id": 394833287,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1696423771
    },
    {
        "content": "<p>Then I would check the array size afterwards.</p>",
        "id": 394834834,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1696424260
    },
    {
        "content": "<p>Fair enough.</p>",
        "id": 394835211,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1696424378
    },
    {
        "content": "<p>Keep in mind that this is probably the first time I’ve tried to write an actual tactic. Im sure that there are various other issues with this code as well. Any advice would be much appreciated!</p>",
        "id": 394835488,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1696424460
    },
    {
        "content": "<p>I think that replacing the first line of the tactic with</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">elab</span> <span class=\"s2\">\"apply\"</span> <span class=\"n\">t</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"s2\">\"at\"</span> <span class=\"n\">i</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">getMainGoal</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">withContext</span> <span class=\"k\">do</span>\n</code></pre></div>\n<p>(i.e. work in the context of the main goal) should fix the issues.</p>",
        "id": 394842530,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1696426506
    },
    {
        "content": "<p>Yeah that's exactly the issue. Here's my fix:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">Mathlib.Tactic</span>\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Meta</span> <span class=\"n\">Elab</span> <span class=\"n\">Tactic</span> <span class=\"n\">Term</span>\n\n<span class=\"n\">elab</span> <span class=\"s2\">\"apply\"</span> <span class=\"n\">t</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"s2\">\"at\"</span> <span class=\"n\">i</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">withMainContext</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">fn</span> <span class=\"bp\">←</span> <span class=\"n\">Term.elabTerm</span> <span class=\"n\">t</span> <span class=\"n\">none</span>\n  <span class=\"k\">let</span> <span class=\"n\">fnTp</span> <span class=\"bp\">←</span> <span class=\"n\">inferType</span> <span class=\"n\">fn</span>\n  <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">ms</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">foutTp</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">forallMetaTelescopeReducing</span> <span class=\"n\">fnTp</span> <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n  <span class=\"n\">unless</span> <span class=\"n\">ms.size</span> <span class=\"bp\">==</span> <span class=\"mi\">1</span> <span class=\"k\">do</span> <span class=\"n\">throwError</span> <span class=\"s2\">\"oops!\"</span>\n  <span class=\"k\">let</span> <span class=\"n\">finTp</span> <span class=\"bp\">←</span> <span class=\"n\">inferType</span> <span class=\"n\">ms</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">]</span><span class=\"bp\">!</span>\n  <span class=\"k\">let</span> <span class=\"n\">ldecl</span> <span class=\"bp\">←</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">getLCtx</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">findFromUserName</span><span class=\"bp\">?</span> <span class=\"n\">i.getId</span>\n  <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">mvs</span><span class=\"o\">,</span> <span class=\"n\">outTp</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"k\">show</span> <span class=\"n\">TacticM</span> <span class=\"o\">(</span><span class=\"n\">Array</span> <span class=\"n\">Expr</span> <span class=\"bp\">×</span> <span class=\"n\">Expr</span><span class=\"o\">)</span> <span class=\"k\">from</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">mvs</span> <span class=\"o\">:=</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">ms</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">]</span><span class=\"bp\">!</span><span class=\"o\">]</span>\n    <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">cmpTp</span> <span class=\"o\">:=</span> <span class=\"n\">finTp</span>\n    <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">outTp</span> <span class=\"o\">:=</span> <span class=\"n\">foutTp</span>\n    <span class=\"n\">while</span> <span class=\"bp\">!</span><span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">isDefEq</span> <span class=\"n\">cmpTp</span> <span class=\"n\">ldecl.type</span><span class=\"o\">)</span> <span class=\"k\">do</span>\n      <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">ms</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">newfoutTp</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">forallMetaTelescopeReducing</span> <span class=\"n\">outTp</span> <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n      <span class=\"n\">unless</span> <span class=\"n\">ms.size</span> <span class=\"bp\">==</span> <span class=\"mi\">1</span> <span class=\"k\">do</span> <span class=\"n\">throwError</span> <span class=\"s2\">\"oops!\"</span>\n      <span class=\"n\">mvs</span> <span class=\"o\">:=</span> <span class=\"n\">mvs</span> <span class=\"bp\">++</span> <span class=\"n\">ms</span>\n      <span class=\"n\">cmpTp</span> <span class=\"bp\">←</span> <span class=\"n\">inferType</span> <span class=\"n\">ms</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">]</span><span class=\"bp\">!</span>\n      <span class=\"n\">outTp</span> <span class=\"o\">:=</span> <span class=\"n\">newfoutTp</span>\n    <span class=\"n\">mvs</span> <span class=\"o\">:=</span> <span class=\"n\">mvs.pop</span>\n    <span class=\"n\">return</span> <span class=\"o\">(</span><span class=\"n\">mvs</span><span class=\"o\">,</span> <span class=\"n\">outTp</span><span class=\"o\">)</span>\n  <span class=\"k\">let</span> <span class=\"n\">mainGoal</span> <span class=\"bp\">←</span> <span class=\"n\">getMainGoal</span>\n  <span class=\"k\">let</span> <span class=\"n\">mainGoal</span> <span class=\"bp\">←</span> <span class=\"n\">mainGoal.tryClear</span> <span class=\"n\">ldecl.fvarId</span>\n  <span class=\"k\">let</span> <span class=\"n\">mainGoal</span> <span class=\"bp\">←</span> <span class=\"n\">mainGoal.assert</span> <span class=\"n\">ldecl.userName</span> <span class=\"n\">outTp</span> <span class=\"o\">(</span><span class=\"n\">mkAppN</span> <span class=\"n\">fn</span> <span class=\"o\">(</span><span class=\"n\">mvs.push</span> <span class=\"n\">ldecl.toExpr</span><span class=\"o\">))</span>\n  <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">mainGoal</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">mainGoal.intro1P</span>\n  <span class=\"n\">replaceMainGoal</span> <span class=\"bp\">&lt;|</span> <span class=\"o\">[</span><span class=\"n\">mainGoal</span><span class=\"o\">]</span> <span class=\"bp\">++</span> <span class=\"n\">mvs.toList.map</span> <span class=\"k\">fun</span> <span class=\"n\">e</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">e.mvarId</span><span class=\"bp\">!</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">γ</span> <span class=\"n\">δ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">γ</span> <span class=\"bp\">→</span> <span class=\"n\">δ</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">γ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">δ</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">apply</span> <span class=\"n\">f</span> <span class=\"n\">at</span> <span class=\"n\">g</span>\n  <span class=\"n\">exact</span> <span class=\"n\">g</span>\n  <span class=\"n\">exact</span> <span class=\"n\">a</span>\n  <span class=\"n\">exact</span> <span class=\"n\">b</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Nat</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">succ_inj2</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">succ</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">succ</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">succ</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">succ</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">apply</span> <span class=\"n\">succ_inj2</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n  <span class=\"n\">exact</span> <span class=\"n\">h</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"bp\">→</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">apply</span> <span class=\"n\">f</span> <span class=\"n\">at</span> <span class=\"n\">ha</span>\n  <span class=\"n\">apply</span> <span class=\"n\">g</span> <span class=\"n\">at</span> <span class=\"n\">ha</span>\n  <span class=\"n\">exact</span> <span class=\"n\">ha</span>\n</code></pre></div>",
        "id": 394843228,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1696426685
    },
    {
        "content": "<p>I also applied Jannis's suggestion.</p>",
        "id": 394843366,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1696426733
    },
    {
        "content": "<p>This is now working in all examples so far in NNG4! Thanks so much Adam!</p>",
        "id": 394854181,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1696429894
    },
    {
        "content": "<p>If people think this is actually useful, then I can work on cleaning it up and open a mathlib pr…</p>",
        "id": 394856821,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1696430577
    },
    {
        "content": "<p>It's definitely going in NNG4, and so if you don't PR we'll get people coming from NNG complaining that <code>apply at</code> doesn't work, on top of the usual complaints that <code>rfl</code> and <code>rw</code> close goals too quickly :-)</p>",
        "id": 394857730,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1696430817
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243562\">Adam Topaz</span> <a href=\"#narrow/stream/113488-general/topic/apply.20at/near/394856821\">said</a>:</p>\n<blockquote>\n<p>If people think this is actually useful, then I can work on cleaning it up and open a mathlib pr…</p>\n</blockquote>\n<p>PR here: <a href=\"https://github.com/leanprover-community/mathlib4/pull/7527\">#7527</a></p>",
        "id": 395100081,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1696531289
    },
    {
        "content": "<p>Nice!</p>\n<p>So parameters before the one that marches the hypothesis are turned into metavariables, and arguments afterwards are left as premises in the remaining hypothesis, correct? It makes sense from an implementation point of view, but is it the best user experience? Or would we expect something more symmetric?<br>\nFor example if I have use <code>apply Nat.lt_of_le_of_lt at h</code> the result looks quite different if <code>h : a &lt; b</code> or <code>h : a ≤ b</code> (I assume).<br>\nWhat does Coq or Isabelle do in that case?</p>",
        "id": 395101827,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1696532065
    },
    {
        "content": "<p>When applying hypothesis <code>h :p  -&gt; q -&gt; r  -&gt; .. -&gt; t</code>  at    <code>HP :p</code>  , Coq  modified HP to <code> HP: t </code>   and all of <code>q</code>, <code>r</code>,... into goals</p>",
        "id": 395108431,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1696535051
    },
    {
        "content": "<p>As for UX, maybe this is fine for experts, but it was very unintuitive for me. Backward reasoning felt easier at that point.</p>",
        "id": 395108500,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1696535099
    },
    {
        "content": "<p>Trust me, a gazillion highly non expert mathematicians find forward reasoning very intuitive and backwards reasoning very weird</p>",
        "id": 395110425,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1696535994
    },
    {
        "content": "<p>I guess for me Coq's behavior is relatively intuitive, but maybe that's because I used Coq before :-)</p>",
        "id": 395110427,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1696535994
    },
    {
        "content": "<p>My users aren't going to be applying anything more complex than stuff like succ_inj at things</p>",
        "id": 395110632,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1696536064
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113488-general/topic/apply.20at/near/395110425\">said</a>:</p>\n<blockquote>\n<p>Trust me, a gazillion highly non expert mathematicians find forward reasoning very intuitive and backwards reasoning very weird</p>\n</blockquote>\n<p>Kevin I agree.  I just think what Adam described is different from what Coq seems to do, and unlike Coq, it matches what you want. You wish to automate the function application that takes <code>h : p -&gt; q</code> and <code>hp : p</code> and sets <code>hp</code> to <code>hp : q</code>. That is not what coq seems to do (EDIT: for more complicated cases like Jireh's example)</p>",
        "id": 395114323,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1696537739
    },
    {
        "content": "<p>Kevin, the short version is: the whole discussion of what Coq does was actually completely irrelevant.</p>",
        "id": 395114657,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1696537932
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"470149\">Joachim Breitner</span> <a href=\"#narrow/stream/113488-general/topic/apply.20at/near/395101827\">said</a>:</p>\n<blockquote>\n<p>Nice!</p>\n<p>So parameters before the one that marches the hypothesis are turned into metavariables, and arguments afterwards are left as premises in the remaining hypothesis, correct? It makes sense from an implementation point of view, but is it the best user experience? Or would we expect something more symmetric?<br>\nFor example if I have use <code>apply Nat.lt_of_le_of_lt at h</code> the result looks quite different if <code>h : a &lt; b</code> or <code>h : a ≤ b</code> (I assume).<br>\nWhat does Coq or Isabelle do in that case?</p>\n</blockquote>\n<p>Yes that is indeed what this tactic does. I don't know what coq actually does except for the example that was posted above in this thread, but at least in that example, the behavior is different. Yes, the result will indeed look different if one applies <code>Nat.lt_of_le_of_lt</code>.</p>",
        "id": 395114926,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1696538096
    },
    {
        "content": "<p>And thanks all for the comments! I'll definitely add some tests!</p>",
        "id": 395114962,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1696538110
    },
    {
        "content": "<p>Re the Coq tactic: oh sorry I misunderstood. I thought the difference was only in these funny p-&gt;q-&gt;r cases which are not relevant to me</p>",
        "id": 395115128,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1696538193
    },
    {
        "content": "<p>@Adam : one quick question. Since this Coq comparison came up again, I checked and Coq's apply also works with \\iff. It automatically seems to figure out which side matches the hypothesis. Is this feasible for the tactic you are writing?</p>",
        "id": 395115471,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1696538343
    },
    {
        "content": "<p>It's certainly possible to extend this to allow for <code>iff</code> as well, but maybe I'll leave that to a future PR :)</p>",
        "id": 395117126,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1696539131
    },
    {
        "content": "<p>Ok, I added some tests to <a href=\"https://github.com/leanprover-community/mathlib4/pull/7527\">#7527</a> and added some code to make sure that instances are properly synthesized.</p>",
        "id": 395149938,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1696558046
    },
    {
        "content": "<p>Do I understand from the test</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">apply</span> <span class=\"n\">f</span> <span class=\"n\">at</span> <span class=\"n\">a</span>\n  <span class=\"n\">guard_hyp</span> <span class=\"n\">a</span> <span class=\"o\">:</span><span class=\"bp\">ₛ</span> <span class=\"n\">β</span>\n  <span class=\"n\">exact</span> <span class=\"n\">a</span>\n</code></pre></div>\n<p>that this is meant to subsume <code>apply_fun ... at ...</code>?</p>",
        "id": 395150749,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1696558499
    },
    {
        "content": "<p>No it doesn’t really subsume apply_fun which works for hypotheses of the form <code>a = b</code> and there f is a function whose domain is the type of <code>a</code>.</p>",
        "id": 395151257,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1696558785
    },
    {
        "content": "<p><a href=\"#narrow/stream/113488-general/topic/apply.20at/near/395151257\">A message</a> was moved here from <a class=\"stream-topic\" data-stream-id=\"113488\" href=\"/#narrow/stream/113488-general/topic/Arbitrary.20Metaprograms\">#general &gt; Arbitrary Metaprograms</a> by <span class=\"user-mention silent\" data-user-id=\"243562\">Adam Topaz</span>.</p>",
        "id": 395151292,
        "sender_full_name": "Notification Bot",
        "timestamp": 1696558801
    },
    {
        "content": "<p>I tried to understand what Damiano is suggesting with <code>MVarId.apply</code>, but I’m not sure what the intention is.</p>",
        "id": 395151457,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1696558851
    },
    {
        "content": "<p><a href=\"#narrow/stream/113488-general/topic/apply.20at/near/395151457\">A message</a> was moved here from <a class=\"stream-topic\" data-stream-id=\"113488\" href=\"/#narrow/stream/113488-general/topic/Arbitrary.20Metaprograms\">#general &gt; Arbitrary Metaprograms</a> by <span class=\"user-mention silent\" data-user-id=\"243562\">Adam Topaz</span>.</p>",
        "id": 395151486,
        "sender_full_name": "Notification Bot",
        "timestamp": 1696558864
    },
    {
        "content": "<p>(sorry, typing on mobile…)</p>",
        "id": 395151514,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1696558890
    },
    {
        "content": "<p>I added the following test which shows how <code>apply at</code> can mimic at least some of the behavior of <code>apply_fun</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">apply</span> <span class=\"n\">congr_arg</span> <span class=\"n\">f</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n  <span class=\"n\">guard_hyp</span> <span class=\"n\">h</span> <span class=\"o\">:</span><span class=\"bp\">ₛ</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">b</span>\n  <span class=\"n\">exact</span> <span class=\"n\">h</span>\n</code></pre></div>",
        "id": 395152041,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1696559213
    },
    {
        "content": "<p>Sorry, I read the test too quickly.</p>",
        "id": 395152844,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1696559734
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243562\">Adam Topaz</span> <a href=\"#narrow/stream/113488-general/topic/apply.20at/near/395151457\">said</a>:</p>\n<blockquote>\n<p>I tried to understand what Damiano is suggesting with <code>MVarId.apply</code>, but I’m not sure what the intention is.</p>\n</blockquote>\n<p>What I was trying to achieve was to let Lean unify the argument of <code>f</code> with the hypothesis <code>b</code>, rather than doing it yourself.  I have found that constructing the proof term \"by hand\" is more brittle than tapping into the <code>MVarId</code>s and using <code>Lean.MVarId.apply</code> to figure out the arguments.  This is why I then had the extra step of trying to unify one of the leftover goals with <code>b</code>.</p>\n<p>I wonder whether this would also take care of synthesizing typeclass assumptions.  However, I do not think that I'll have time to try this today.</p>",
        "id": 395200623,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1696578895
    },
    {
        "content": "<p>Ok, I think I understand <span class=\"user-mention\" data-user-id=\"321459\">@Damiano Testa</span>  -- IIUC the strategy you want to take is this:</p>\n<ol>\n<li>After the <code>let (mvs, bis, tp) ← forallMetaTelescopeReducingUntilDefEq (← inferType f) ldecl.type</code> line, make a new mvar with type <code>tp</code>.</li>\n<li>Apply the original <code>f</code> to this new <code>mvar</code> to obtain whatever goals pop up.</li>\n<li>Fill in the \"last\" goal with the local declaration <code>i</code>.</li>\n</ol>\n<p>Is that what you have in mind?</p>",
        "id": 395292072,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1696608893
    },
    {
        "content": "<p>This would indeed work, I guess. But <code>apply</code> still has an issue with typeclass instances IIRC. I.e. this will fail if there are typeclass parameters which can't be synthesized automatically.</p>",
        "id": 395292413,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1696609037
    },
    {
        "content": "<p>With the code in my PR, any such typeclass parameters should pop up as new goals, see the following test for example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Monoid</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">c</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">hh</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">z</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"n\">z</span> <span class=\"bp\">→</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span><span class=\"o\">):</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">apply</span> <span class=\"n\">mul_right_cancel</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n  <span class=\"n\">guard_hyp</span> <span class=\"n\">h</span> <span class=\"o\">:</span><span class=\"bp\">ₛ</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span>\n  <span class=\"bp\">·</span> <span class=\"n\">exact</span> <span class=\"n\">h</span>\n  <span class=\"bp\">·</span> <span class=\"n\">guard_target</span> <span class=\"bp\">=</span> <span class=\"n\">IsRightCancelMul</span> <span class=\"n\">G</span>\n    <span class=\"n\">constructor</span>\n    <span class=\"n\">intros</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span>\n    <span class=\"n\">apply</span> <span class=\"n\">hh</span>\n</code></pre></div>",
        "id": 395292606,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1696609114
    },
    {
        "content": "<p>Ok, I had not tested the typeclass behaviour, and I hoped that <code>apply</code> would take care of this on its own.  If however you have to jump through lots of hoops instead, then manually trying to synthesize the intermediate arguments is a good approach.</p>\n<p>Thanks for the check!</p>",
        "id": 395295870,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1696610321
    },
    {
        "content": "<p>Thanks for the suggestion! BTW, I still think changing the default behaviour of <code>apply</code> to introduce goals for missing type class parameters might be a good thing…</p>",
        "id": 395296560,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1696610647
    },
    {
        "content": "<p>Yes, or at least call <code>@pply</code> the tactic that does it.</p>",
        "id": 395296736,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1696610738
    },
    {
        "content": "<p>Ah, have you tried if the tactic gets tripped up by metadata?</p>",
        "id": 395296973,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1696610833
    },
    {
        "content": "<p>no... do you have an example in mind?</p>",
        "id": 395297003,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1696610847
    },
    {
        "content": "<p>(Sorry, I'm about to not have internet for a while!)</p>",
        "id": 395297006,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1696610850
    },
    {
        "content": "<p>Usually, having <code>let</code>s around adds metadata...</p>",
        "id": 395297045,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1696610870
    },
    {
        "content": "<p>I'll try...</p>",
        "id": 395297057,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1696610878
    },
    {
        "content": "<p>Aha, so this works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">let</span> <span class=\"n\">a'</span> <span class=\"o\">:=</span> <span class=\"n\">a</span>\n  <span class=\"n\">apply</span> <span class=\"n\">f</span> <span class=\"n\">at</span> <span class=\"n\">a'</span>\n  <span class=\"n\">exact</span> <span class=\"n\">a'</span>\n</code></pre></div>\n<p>except after <code>apply f at a'</code> the actual value is dropped.</p>",
        "id": 395297401,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1696611006
    },
    {
        "content": "<p>Although this looks to be similar to the behavior of <code>apply_fun</code>, so maybe it's not a big issue?</p>",
        "id": 395297904,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1696611232
    },
    {
        "content": "<p>Today marks the first time someone complained that <code>apply at</code> doesn't work in mathlib ;-) (we have it up and running locally in NNG on an Imperial server).</p>",
        "id": 395717745,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1696863539
    }
]