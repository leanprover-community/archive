[
    {
        "content": "<p>Can someone remind me: what do we need to do so that <code>induction n</code> will use <code>0</code> and <code>?n + 1</code> instead of <code>Nat.zero</code> and <code>Nat.succ ?n</code> by default in mathlib?<br>\nThis has been discussed several times, but I fail to find the discussions.<br>\nThe current behaviour is a really annoying booby trap to land in when you are in the middle of a demo in front of innocent unsuspecting mathematicians.</p>",
        "id": 405340450,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1701429486
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.LinearAlgebra.Basic</span>\n\n<span class=\"sd\">/-- `Nat.rec` but with `0` and `+1` instead of `.zero` and `.succ` -/</span>\n<span class=\"kd\">@[</span><span class=\"n\">eliminator</span><span class=\"kd\">]</span>\n<span class=\"kd\">def</span> <span class=\"n\">Nat.recWithTheRealZero.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">motive</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">zero</span> <span class=\"o\">:</span> <span class=\"n\">motive</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">motive</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">motive</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">motive</span> <span class=\"n\">t</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">Nat.rec.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">motive</span> <span class=\"n\">zero</span> <span class=\"n\">succ</span> <span class=\"n\">t</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">induction</span> <span class=\"n\">n</span>\n</code></pre></div>",
        "id": 405348133,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1701432316
    },
    {
        "content": "<p>Is there a reason why we shouldn't have this eliminator somewhere in the bottom of our import hierarchy?</p>",
        "id": 405351129,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1701433058
    },
    {
        "content": "<p>PR'd as <a href=\"https://github.com/leanprover-community/mathlib4/pull/8769\">#8769</a>. But expect lots of breakage in induction proofs, so it'll take some time before this is ready for review.</p>",
        "id": 405358312,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1701435705
    },
    {
        "content": "<p>You could shortcut the breakage for now with <code>induction n using Nat.rec</code></p>",
        "id": 405360317,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1701436344
    },
    {
        "content": "<p>The issue is that it breaks cases.</p>",
        "id": 405361255,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1701436607
    },
    {
        "content": "<p>Does it? Can you give an example?</p>",
        "id": 405361474,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1701436675
    },
    {
        "content": "<p><code>cases n using Nat.rec</code> works too</p>",
        "id": 405361552,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1701436689
    },
    {
        "content": "<p>Thanks <span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span>! I'll use that strategy. At a later point, people can decide to rewrite proofs using the new recursor.</p>",
        "id": 405366090,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1701438100
    },
    {
        "content": "<p>Most recent previous discussion at <a href=\"#narrow/stream/287929-mathlib4/topic/Ring.20tactic.20on.20.60.28n.2B1.29.5E2.3Dn.5E2.2B2n.2B1.60/near/398346446\">https://leanprover.zulipchat.com/#narrow/stream/287929-mathlib4/topic/Ring.20tactic.20on.20.60.28n.2B1.29.5E2.3Dn.5E2.2B2n.2B1.60/near/398346446</a> with links to older ones.</p>",
        "id": 405368101,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1701438762
    },
    {
        "content": "<p>Well, I hope this thread will the last one to discuss this issue</p>",
        "id": 405368428,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1701438877
    },
    {
        "content": "<p><a href=\"#narrow/stream/287929-mathlib4/topic/default.20induction/near/362292193\">This message</a> seems to contain the failing example</p>",
        "id": 405369081,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1701439094
    },
    {
        "content": "<p>Note that the same problem can be obtained without a custom induction principle:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">cases</span> <span class=\"n\">n</span> <span class=\"n\">using</span> <span class=\"n\">Nat.rec</span>\n  <span class=\"c\">/-</span>\n<span class=\"cm\">  case zero</span>\n<span class=\"cm\">  m : Nat</span>\n<span class=\"cm\">  ⊢ Nat.zero + m = m + Nat.zero</span>\n<span class=\"cm\">  -/</span>\n  <span class=\"bp\">·</span> <span class=\"gr\">sorry</span>\n  <span class=\"c\">/-</span>\n<span class=\"cm\">  case succ</span>\n<span class=\"cm\">  m n✝ : Nat</span>\n<span class=\"cm\">  n_ih✝ : Nat.succ n✝ = n✝ → Nat.succ n✝ + m = m + Nat.succ n✝  -- what?</span>\n<span class=\"cm\">  ⊢ Nat.succ n✝ + m = m + Nat.succ n✝</span>\n<span class=\"cm\">  -/</span>\n  <span class=\"bp\">·</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 405370167,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1701439357
    },
    {
        "content": "<p><del>So I don't think it's fair to say this \"breaks cases\", I think cases is just broken itself</del></p>",
        "id": 405370247,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1701439375
    },
    {
        "content": "<p>Ah, <code>cases n using Nat.casesOn</code> solve that issue</p>",
        "id": 405370409,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1701439416
    },
    {
        "content": "<p>So I think the answer is we need both <code>@[eliminator]</code> and a new <code>@[cases_eliminator]</code></p>",
        "id": 405370463,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1701439432
    },
    {
        "content": "<p>Would you mind writing that one as well?</p>",
        "id": 405370638,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1701439471
    },
    {
        "content": "<p>That's a core change</p>",
        "id": 405377079,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1701441652
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.Meta.getCustomEliminator%3F#doc\">docs#Lean.Meta.getCustomEliminator?</a> would need to learn a \"rec := false\" argument</p>",
        "id": 405377187,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1701441689
    },
    {
        "content": "<p>Then I think <a href=\"https://github.com/leanprover/lean4/blob/master/src/Lean/Elab/Tactic/Induction.lean#L496C74-L498\">these lines</a> would pass in the existing <code>induction : Bool</code> into <code>getCustomEliminator</code></p>",
        "id": 405377405,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1701441759
    },
    {
        "content": "<p>I've been in the process of preparing a core change to fix this for Nat (making induction on Nat beautiful for everyone is an FRO priority <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span>)</p>",
        "id": 405393965,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1701447021
    },
    {
        "content": "<p>I haven't made the PR yet (it's only a local branch), but, yes, part of the solution is to split <code>@[eliminator]</code> into two for <code>cases</code> and <code>induction</code>.</p>",
        "id": 405394487,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1701447225
    },
    {
        "content": "<p>(<span class=\"user-mention\" data-user-id=\"243562\">@Adam Topaz</span> already figured out most of it <a href=\"#narrow/stream/287929-mathlib4/topic/Ring.20tactic.20on.20.60.28n.2B1.29.5E2.3Dn.5E2.2B2n.2B1.60/near/398372230\">here</a>, but I'm looking into seeing whether it's feasible to get equation lemmas to use <code>0</code> and <code>n + 1</code> as well for <code>Nat</code>. A side effect would be that <code>rcases</code> would also use the right eliminator -- <code>rcases</code> does not use code that cares about <code>@[eliminator]</code>.)</p>",
        "id": 405394700,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1701447298
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span> Shall I continue with my PR, or do you think that will actually make your work more difficult?</p>",
        "id": 405432608,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1701462057
    },
    {
        "content": "<p>If you can stand to wait, that recursor should appear in core. It wouldn't hurt if you do decide to include it in mathlib in the meantime, but make sure not to add <code>@[eliminator]</code> since it will break either <code>induction</code> or <code>cases</code> (your choice).</p>",
        "id": 405433002,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1701462254
    },
    {
        "content": "<p>The alternate recursors are in Std.</p>",
        "id": 405433074,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1701462302
    },
    {
        "content": "<p>Oh, right, thanks for the reminder: <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Nat.recAux#doc\">docs#Nat.recAux</a> and <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Nat.casesAuxOn#doc\">docs#Nat.casesAuxOn</a></p>",
        "id": 405433222,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1701462364
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span> how about I do add <code>@[eliminator]</code> and fix a whole bunch of proofs in mathlib. Because those proofs will need fixing anyway, right?</p>",
        "id": 405433253,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1701462378
    },
    {
        "content": "<p>To be clear, it doesn't actually <em>break</em> cases, right? It just introduces some unused garbage?</p>",
        "id": 405433263,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1701462386
    },
    {
        "content": "<p>In testing I did before, it actually put <code>cases</code> into unsalveagable states. I don't have those tests anymore though (this was months ago).</p>",
        "id": 405433290,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1701462409
    },
    {
        "content": "<p>Does <code>cases using Nat.casesAuxOn</code> avoid the issue?</p>",
        "id": 405433332,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1701462428
    },
    {
        "content": "<p>Yes, because it's using the correct kind of eliminator.</p>",
        "id": 405433371,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1701462448
    },
    {
        "content": "<p>It sounds like Johan's plan is safe as long as that (and removing <code>zero = 0</code> rewrites) is the only fix that gets made, since then when the real fix lands we can just delete the <code>using</code> clause</p>",
        "id": 405433476,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1701462500
    },
    {
        "content": "<p>Another plan is to wait for the Lean PR and then do this all in the mathlib fixup branch. That would save needing to add <code>using</code> clauses and then removing them again.</p>",
        "id": 405433774,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1701462654
    },
    {
        "content": "<p>I'm planning on making the PR within the next week (and if it all goes well, I'll have the PR today)</p>",
        "id": 405433845,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1701462699
    },
    {
        "content": "<p>(But feel free to go and use <code>using</code> clauses everywhere. It won't cause any conflicts with what I'm doing, so long as you do it soon, before I start making that mathlib fixup branch. Otherwise we'll have to be careful synchronizing what we're doing.)</p>",
        "id": 405434626,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1701463089
    },
    {
        "content": "<p>Ok, I think I'll wait for the fixup branch, because this weekend is full of family visits, and it sounds like you are making good progress doing it \"the right way (TM)\" <span aria-label=\"happy\" class=\"emoji emoji-1f600\" role=\"img\" title=\"happy\">:happy:</span></p>",
        "id": 405435222,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1701463390
    }
]