[
    {
        "content": "<p>I am looking for an <code>init!</code> function with the same type as <code>List.tail!</code>. When I <a href=\"https://loogle.lean-lang.org/?q=List+%3F_+%E2%86%92+List+%3F_\">loogle</a> for <code>List ?_ → List ?_</code> I get 345 responses, and <code>List.tail!</code> is middle of the pack. The top responses are all functions which have multiple explicit arguments. But if I search <code>List a -&gt; List a</code> on <a href=\"https://hoogle.haskell.org/?hoogle=List%20a%20-%3E%20List%20a\">hoogle</a>, tail and init are in the top 3 responses. <span class=\"user-mention\" data-user-id=\"470149\">@Joachim Breitner</span> can anything be done to make loogle more like this - favoring responses which are closer to my type when explicit arguments are ignored?</p>",
        "id": 397489406,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1697716493
    },
    {
        "content": "<p>One thing that could help a lot is if you can have a <code>_</code> or <code>?a</code> with the additional constraint that it must be a variable in the lemma, this could already rule out any lemma where there is a <code>List Nat</code> or so. In theory it should actually work to write <code>\\forall a, List a -&gt; List a</code>, but I think in practice somehow it doesn't (debugging help welcome)</p>",
        "id": 397490949,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1697717032
    },
    {
        "content": "<p>As for sorting the results, maybe it should simply sort by lemma type size (maybe secondary after module), or number of district names (concepts) mentioned. This would automatically move stuff up that has less “extra” fluff. But then sometimes the alphabetical sorting is better at grouping related things. I doubt there is a perfect one-size-fits-all solution.</p>",
        "id": 397491405,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1697717185
    },
    {
        "content": "<p>Oh, it seems that  <a href=\"https://loogle.lean-lang.org/?q=%E2%88%80+a%2C+List+a+%E2%86%92+List+a\"><code>∀ a, List a → List a</code></a> actually kinda works these days, maybe I fixed it. It matches 158 lemmas, while <a href=\"https://loogle.lean-lang.org/?q=List+%3Fa+%E2%86%92+List+%3Fa\"><code>List ?a → List ?a</code></a> matches 223 lemmas.</p>",
        "id": 397494292,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1697718263
    },
    {
        "content": "<p>Trying to sort by lemma size, I was trying to use <code>sizeOf constInfo.type</code>, but it seems the sizeOf instances are not computable, and I can’t find another definition for size-of-an-expr, or is there one?<br>\n(Not so important, it’s quick to write one.)</p>",
        "id": 397496785,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1697719165
    },
    {
        "content": "<p>Ok, after the next deploy it should sort lemmas (within a module) by theorem size; let’s play around with it for a while.</p>",
        "id": 397501736,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1697720852
    },
    {
        "content": "<p>It’s live now. If you search for <a href=\"https://loogle.lean-lang.org/?q=%E2%88%80+a%2C+List+a+%E2%86%92+List+a\"><code>∀ a, List a → List a</code></a> it now lists <code>List.tail!</code> as the first lemma of those in <code>Init.Data.List.BasicAux</code>, but of course plenty of lemmas from more basic modules come first. Let’s run with this for a while.</p>",
        "id": 397528932,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1697729029
    },
    {
        "content": "<p>More importantly <code>dropLast</code>, which is the <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/init/near/397499201\">lemma I was actually looking for</a>, is in the top 5! Thanks!</p>",
        "id": 397636771,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1697782360
    },
    {
        "content": "<p>Great to hear! (Can't do emoji reactions on Zulip on Firefox on Android, hence posting these not very useful messages).</p>",
        "id": 397643123,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1697784937
    }
]