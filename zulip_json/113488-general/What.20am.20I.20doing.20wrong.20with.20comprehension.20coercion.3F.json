[
    {
        "content": "<p>What am I doing wrong here? I want to specialize Schröder-Bernstein to two simple functions between <code>Icc (0 : ℝ) 1</code> and <code>Ico (0 : ℝ) 1</code>, but I get the following error </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">argument</span>\n  <span class=\"n\">f</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">Icc</span> <span class=\"mi\">0</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">Ico</span> <span class=\"mi\">0</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">Icc</span> <span class=\"mi\">0</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">Ico</span> <span class=\"mi\">0</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n</code></pre></div>\n<p>Here's my mwe: </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n<span class=\"kn\">open</span> <span class=\"n\">Set</span>\n<span class=\"kn\">open</span> <span class=\"n\">Function</span>\n<span class=\"kd\">noncomputable</span> <span class=\"kn\">section</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">schroeder_bernstein</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"n\">Injective</span> <span class=\"n\">f</span> <span class=\"bp\">→</span>  <span class=\"n\">Injective</span> <span class=\"n\">g</span> <span class=\"bp\">→</span>  <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">),</span> <span class=\"n\">Bijective</span> <span class=\"n\">h</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span>\n    <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Icc</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"mi\">1</span> <span class=\"bp\">→</span> <span class=\"n\">Ico</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"o\">⟨</span><span class=\"n\">x.val</span><span class=\"bp\">/</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"kd\">by</span>\n    <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">hx</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">x</span><span class=\"bp\">;</span> <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">hx</span> <span class=\"bp\">⊢;</span> <span class=\"n\">constructor</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">linarith</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">inj_f</span> <span class=\"o\">:</span> <span class=\"n\">Injective</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">h</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">f</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n  <span class=\"n\">ext</span>\n  <span class=\"n\">linarith</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">Ico</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"mi\">1</span> <span class=\"bp\">→</span> <span class=\"n\">Icc</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"o\">⟨</span><span class=\"n\">x.val</span><span class=\"o\">,</span> <span class=\"kd\">by</span>\n    <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">hx</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">x</span><span class=\"bp\">;</span> <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">hx</span> <span class=\"bp\">⊢;</span> <span class=\"n\">constructor</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">linarith</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">inj_g</span> <span class=\"o\">:</span> <span class=\"n\">Injective</span> <span class=\"n\">g</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">h</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">g</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n  <span class=\"n\">ext</span>\n  <span class=\"n\">linarith</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">my_bij</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">Icc</span> <span class=\"mi\">0</span> <span class=\"mi\">1</span> <span class=\"bp\">→</span> <span class=\"n\">Ico</span> <span class=\"mi\">0</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"n\">Bijective</span> <span class=\"n\">h</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span>\n  <span class=\"n\">exact</span> <span class=\"n\">schroeder_bernstein</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"n\">inj_f</span> <span class=\"n\">inj_g</span>\n  <span class=\"c1\">--apply schroeder_bernstein f g</span>\n</code></pre></div>",
        "id": 392674094,
        "sender_full_name": "Sina",
        "timestamp": 1695463368
    },
    {
        "content": "<p>Your final statement <code>∃ (h : Icc 0 1 → Ico 0 1)</code> is about the natural numbers; is this what you wanted?</p>",
        "id": 392678167,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1695465011
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113488-general/topic/What.20am.20I.20doing.20wrong.20with.20comprehension.20coercion.3F/near/392678167\">said</a>:</p>\n<blockquote>\n<p>Your final statement <code>∃ (h : Icc 0 1 → Ico 0 1)</code> is about the natural numbers; is this what you wanted?</p>\n</blockquote>\n<p>Oh, I see. When I change it to <code>∃ (h : Icc (0 : ℝ)  1 → Ico (0 : ℝ) 1), Bijective h</code> it works. Thanks! For future, how do i detect such silly mistakes? Or,  how did you find this out? I think the error message was not very helpful in this case.</p>",
        "id": 392678677,
        "sender_full_name": "Sina",
        "timestamp": 1695465224
    },
    {
        "content": "<p>Here I just guessed because this type of thing happens all the time, but you can check by hovering over the error message</p>",
        "id": 392678774,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1695465268
    },
    {
        "content": "<p>In this case, hovering over the two <code>0</code>s will show you that they are different</p>",
        "id": 392678787,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1695465288
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113488-general/topic/What.20am.20I.20doing.20wrong.20with.20comprehension.20coercion.3F/near/392678787\">said</a>:</p>\n<blockquote>\n<p>In this case, hovering over the two <code>0</code>s will show you that they are different</p>\n</blockquote>\n<p>This is great! I almost never did this, but seems very useful.</p>",
        "id": 392678918,
        "sender_full_name": "Sina",
        "timestamp": 1695465407
    }
]