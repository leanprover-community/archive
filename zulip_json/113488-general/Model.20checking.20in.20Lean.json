[
    {
        "content": "<p><span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span> </p>\n<p>This maybe a somewhat ignorant question :) Recently, I've been looking at various consensus algorthims, and one thing I've found frustrating is that their description usually spans pages of prose, and it's hard to get a \"precise\" meaning of algorithm. </p>\n<p>So, I am thinking about using Lean _mostly_ just as a notation to encode algorithms. Basically, as a slightly more structured and typechecked hand-written notes. </p>\n<p>As such, I don't want (yet?) to  _prove_ that  the algorithms are correct, as proofs are kinda hard, and I am kinda lazy. That being said, suppose that I've encoded a consensus algo as: </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">Replica</span>\n<span class=\"kd\">structure</span> <span class=\"n\">Message</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">init</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">Replica</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"kd\">def</span> <span class=\"n\">step</span> <span class=\"o\">(</span><span class=\"n\">r</span><span class=\"o\">:</span> <span class=\"n\">Replica</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">m</span><span class=\"o\">:</span> <span class=\"n\">Message</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Replica</span> <span class=\"bp\">×</span> <span class=\"n\">Array</span> <span class=\"n\">Message</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"kd\">def</span> <span class=\"n\">safe</span> <span class=\"o\">(</span><span class=\"n\">replicas</span><span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">Replicas</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>is there some _quick_ way I can, eg, just through random messages at it to uncover counter-examples for obvious errors?</p>",
        "id": 325220147,
        "sender_full_name": "matklad",
        "timestamp": 1675271878
    },
    {
        "content": "<p>we have a thing called slimcheck in Mathlib4, it is a kinda basic (verified) impl of quickcheck in Lean that you could in theory get to do this I presume.</p>",
        "id": 325221330,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1675272170
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"585534\">matklad</span> <a href=\"#narrow/stream/113488-general/topic/Model.20checking.20in.20Lean/near/325220147\">said</a>:</p>\n<blockquote>\n<p><span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span> </p>\n<p>This maybe a somewhat ignorant question :) Recently, I've been looking at various consensus algorthims, and one thing I've found frustrating is that their description usually spans pages of prose, and it's hard to get a \"precise\" meaning of algorithm. </p>\n<p>So, I am thinking about using Lean _mostly_ just as a notation to encode algorithms. Basically, as a slightly more structured and typechecked hand-written notes. </p>\n<p>As such, I don't want (yet?) to  _prove_ that  the algorithms are correct, as proofs are kinda hard, and I am kinda lazy. That being said, suppose that I've encoded a consensus algo as: </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">Replica</span>\n<span class=\"kd\">structure</span> <span class=\"n\">Message</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">init</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">Replica</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"kd\">def</span> <span class=\"n\">step</span> <span class=\"o\">(</span><span class=\"n\">r</span><span class=\"o\">:</span> <span class=\"n\">Replica</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">m</span><span class=\"o\">:</span> <span class=\"n\">Message</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Replica</span> <span class=\"bp\">×</span> <span class=\"n\">Array</span> <span class=\"n\">Message</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"kd\">def</span> <span class=\"n\">safe</span> <span class=\"o\">(</span><span class=\"n\">replicas</span><span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">Replicas</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>is there some _quick_ way I can, eg, just through random messages at it to uncover counter-examples for obvious errors?</p>\n</blockquote>\n<p>Hi, I am from the theory side of the distributed world here. I agree that consensus algorithms can seem very verbose. But thanks to the TLA+ people, you might find more formal specifications of consensus algorithms</p>",
        "id": 325248248,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1675279257
    },
    {
        "content": "<p>In the world of algorithm verification, distributed algorithms are probably a good low hanging fruit to target, because there is often considerable freedom from model issues with local computations since they have zero cost. Defining them as state transition functions between finite state sets is often sufficient</p>",
        "id": 325248855,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1675279443
    },
    {
        "content": "<p>So I'd say this is a very good choice of topic to work on, to even prove things.</p>",
        "id": 325249042,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1675279503
    },
    {
        "content": "<p>For example paxos: <a href=\"https://github.com/tlaplus/Examples/blob/master/specifications/Paxos/Paxos.tla\">https://github.com/tlaplus/Examples/blob/master/specifications/Paxos/Paxos.tla</a></p>",
        "id": 325253135,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1675280673
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"466334\">@Shreyas Srinivas</span> yeah, the context here is that a search for TLA+ alternative is exactly what brought lean to my attention. I used TLA+ in the past to specify Paxos myself. I like the _idea_ behind TLA+, but I am not entirely satisfied with the concrete implementation, mostly due to tooling issues. Lean nails the tooling bit perfectly for me</p>",
        "id": 325387928,
        "sender_full_name": "matklad",
        "timestamp": 1675341751
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"585534\">matklad</span> <a href=\"#narrow/stream/113488-general/topic/Model.20checking.20in.20Lean/near/325387928\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"466334\">Shreyas Srinivas</span> yeah, the context here is that a search for TLA+ alternative is exactly what brought lean to my attention. I used TLA+ in the past to specify Paxos myself. I like the _idea_ behind TLA+, but I am not entirely satisfied with the concrete implementation, mostly due to tooling issues. Lean nails the tooling bit perfectly for me</p>\n</blockquote>\n<p>I agree that the TLA+ tooling is poor. It is also one of the things that made me pick Lean. TLA+ is a fundamentally  different tool compared to lean. It falls on the model checking side of formal verification. But the reason I mentioned it here was that you pointed out that consensus algorithms are often described as walls of text. The TLA people have formalised these algorithms in their plusCal language. So it might be a useful source for formal descriptions of consensus algorithms, where the walls of text are unhelpful. One caveat is that specifications might be tailored to avoid state space explosion, which we won't face if we prove theorems explicitly.</p>",
        "id": 325395467,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1675343909
    }
]