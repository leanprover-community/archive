[
    {
        "content": "<p>Check out the definition of nonempty:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"kd\">inductive</span> <span class=\"n\">nonempty</span> <span class=\"o\">(</span><span class=\"n\">Œ±</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">intro</span> <span class=\"o\">(</span><span class=\"n\">val</span> <span class=\"o\">:</span> <span class=\"n\">Œ±</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">nonempty</span>\n</code></pre></div>\n\n<p>Even the syntax highlighter didn't know <code>class inductive</code> was a thing</p>",
        "id": 211264050,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1601043626
    },
    {
        "content": "<p>not zulip's highlighter but I think it doesn't understand definition structure</p>",
        "id": 211264132,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1601043669
    },
    {
        "content": "<p>(Personally I don't think it <em>should</em> be a thing, since <code>@[class] inductive</code> works just as well)</p>",
        "id": 211265925,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1601044597
    },
    {
        "content": "<p>what are some useful examples of <code>@[class] inductive</code>?</p>",
        "id": 357684555,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1683834327
    },
    {
        "content": "<p>I guess you could imagine something like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[class]</span> <span class=\"kd\">inductive</span> <span class=\"n\">IsROrC</span> <span class=\"o\">(</span><span class=\"bp\">ùïú</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"bp\">ùïú</span><span class=\"o\">]</span>\n<span class=\"bp\">|</span> <span class=\"n\">real</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"bp\">ùïú</span> <span class=\"bp\">‚âÉ+*</span> <span class=\"n\">‚Ñù</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">complex</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"bp\">ùïú</span> <span class=\"bp\">‚âÉ+*</span> <span class=\"n\">‚ÑÇ</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 357687774,
        "sender_full_name": "Fr√©d√©ric Dupuis",
        "timestamp": 1683835385
    },
    {
        "content": "<p>I think we used to have more of these, but we eliminated them in favor of using structures containing more primitive inductive types as fields</p>",
        "id": 357687973,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1683835448
    },
    {
        "content": "<p>The most useful one by far is of course <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Decidable#doc\">docs4#Decidable</a> !</p>",
        "id": 357691922,
        "sender_full_name": "Henrik B√∂ving",
        "timestamp": 1683836731
    },
    {
        "content": "<p>Off-topic, but is it easy to fix the docs for that so that the docstrings for the constructors are not monospaced?</p>",
        "id": 357692486,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1683836912
    },
    {
        "content": "<p>That should be a simple <span aria-label=\"tm\" class=\"emoji emoji-2122\" role=\"img\" title=\"tm\">:tm:</span> CSS fix yes</p>",
        "id": 357693271,
        "sender_full_name": "Henrik B√∂ving",
        "timestamp": 1683837194
    },
    {
        "content": "<p>Should be fixed on the next build</p>",
        "id": 357693949,
        "sender_full_name": "Henrik B√∂ving",
        "timestamp": 1683837425
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"311453\">@Fr√©d√©ric Dupuis</span> that's actually exactly the application I was considering!</p>",
        "id": 357698529,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1683839104
    },
    {
        "content": "<p>[insert my canonical moan about how it shouldn't be <code>Is</code> because it's not a Prop]</p>",
        "id": 357703051,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1683841127
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113488-general/topic/class.20inductive/near/357692486\">said</a>:</p>\n<blockquote>\n<p>Off-topic, but is it easy to fix the docs for that so that the docstrings for the constructors are not monospaced?</p>\n</blockquote>\n<p>better?^^</p>",
        "id": 357807987,
        "sender_full_name": "Henrik B√∂ving",
        "timestamp": 1683883737
    },
    {
        "content": "<p>14 messages were moved from this topic to <a class=\"stream-topic\" data-stream-id=\"113488\" href=\"/#narrow/stream/113488-general/topic/inductive.20types.20in.20documentation\">#general &gt; inductive types in documentation</a> by <span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span>.</p>",
        "id": 357876687,
        "sender_full_name": "Notification Bot",
        "timestamp": 1683899289
    }
]