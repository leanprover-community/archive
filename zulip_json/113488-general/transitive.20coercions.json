[
    {
        "content": "<p>Here's the first thing which broke in a nontrivial way when I made <code>coe_fn_trans</code> and <code>coe_sort_trans</code> no longer instances:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"n\">Union_range_eq_sUnion</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">))</span>\n  <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span><span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">),</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">s</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span><span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">),</span> <span class=\"n\">surjective</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">s</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"err\">⋃</span><span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">),</span> <span class=\"n\">range</span> <span class=\"o\">(</span><span class=\"bp\">λ</span><span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">s</span> <span class=\"n\">y</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">val</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"err\">⋃₀</span> <span class=\"n\">C</span> <span class=\"o\">:=</span>\n</code></pre></div>",
        "id": 195747861,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588183364
    },
    {
        "content": "<p>(By \"nontrivial\", I mean something not directly related to transitive coercions. Obviously the fix for this example is still simple.)</p>",
        "id": 195747954,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588183416
    },
    {
        "content": "<p>I recommend explicitly putting in multiple type ascriptions whenever we literally want a transitive coercion</p>",
        "id": 195751341,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588185101
    },
    {
        "content": "<p>I got distracted from this project, but a second class of issues are ones where we define a new type and a <code>has_coe</code> instance for it to another type that has a coercion to function/sort, and expect the new type to also have a coercion to function/sort. A prototypical example is <code>subgroup G</code> which has a coercion to <code>set G</code>. These are easily addressed by adding an explicit <code>has_coe_to_sort</code> instance.</p>",
        "id": 195797044,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588220117
    },
    {
        "content": "<p>These need to be fixed anyhow.  Transitive coercion instances are not in simp-normal form.</p>",
        "id": 195810897,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1588235525
    },
    {
        "content": "<p>If we want to make this change, it might be handy to write a little attribute we can put on <code>has_coe</code> instances to automatically generate <code>has_coe_to_sort</code>/<code>has_coe_to_fun</code> instances--though they're quite easy to write by hand also: I've been using things like</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_coe_to_sort</span> <span class=\"o\">(</span><span class=\"n\">submodule</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">coe_sort_trans</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span>\n</code></pre></div>\n\n\n<p>and it seems to be working so far...</p>",
        "id": 195833474,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588250858
    },
    {
        "content": "<p>In a fancier system, maybe it would be worth thinking of \"an R-submodule of M is a set\" as a different kind of thing from \"a natural number is an integer\"</p>",
        "id": 195833586,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588250927
    },
    {
        "content": "<p>Haha, I briefly panicked when a <code>dsimp</code> in the middle of some random proof stopped working, but I just deleted it and all is well <span aria-label=\"slight smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"slight smile\">:slight_smile:</span></p>",
        "id": 195833748,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588251015
    },
    {
        "content": "<p>Whoa, it builds <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span> <br>\n<code> 20 files changed, 38 insertions(+), 37 deletions(-)</code></p>",
        "id": 195835973,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588252175
    },
    {
        "content": "<p>That's actually a rather small diff</p>",
        "id": 195836090,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588252231
    },
    {
        "content": "<p>and a little bit is commenting out things that should just be deleted, so it actually saves a few lines overall</p>",
        "id": 195836124,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588252254
    },
    {
        "content": "<p>And speeds up the build, I guess</p>",
        "id": 195836160,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588252275
    },
    {
        "content": "<p>But probably not noticable</p>",
        "id": 195836192,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588252293
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/commit/8ef91f54a9c689f2560b8670e573bb3a79d15940\" title=\"https://github.com/leanprover-community/mathlib/commit/8ef91f54a9c689f2560b8670e573bb3a79d15940\">Here</a> is the commit if anyone is interested; there are some bits like the <code>has_coe_to_fun_linter</code> which I don't understand yet.</p>",
        "id": 195838136,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588253330
    },
    {
        "content": "<p>I assume it doesn't build with the current version of Lean, but I suppose it might</p>",
        "id": 195838160,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588253346
    },
    {
        "content": "<p>Ah, the CI build failed immediately because of my change to <code>leanpkg.toml</code>--probably for the best <span aria-label=\"slight smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"slight smile\">:slight_smile:</span></p>",
        "id": 195838361,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588253447
    },
    {
        "content": "<p>The <code>has_coe_to_fun</code> linter is supposed to check for exactly this kind of problem, where a type has a <code>has_coe</code> instance but no <code>has_coe_to_fun</code>.  If the transitive instances are gone, then the linter is no longer necessary.</p>",
        "id": 195841201,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1588254657
    }
]