[
    {
        "content": "<p>Here's the first thing which broke in a nontrivial way when I made <code>coe_fn_trans</code> and <code>coe_sort_trans</code> no longer instances:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"n\">Union_range_eq_sUnion</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">))</span>\n  <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span><span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">),</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">s</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span><span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">),</span> <span class=\"n\">surjective</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">s</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"err\">⋃</span><span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">),</span> <span class=\"n\">range</span> <span class=\"o\">(</span><span class=\"bp\">λ</span><span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">s</span> <span class=\"n\">y</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">val</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"err\">⋃₀</span> <span class=\"n\">C</span> <span class=\"o\">:=</span>\n</code></pre></div>",
        "id": 195747861,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588183364
    },
    {
        "content": "<p>(By \"nontrivial\", I mean something not directly related to transitive coercions. Obviously the fix for this example is still simple.)</p>",
        "id": 195747954,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588183416
    },
    {
        "content": "<p>I recommend explicitly putting in multiple type ascriptions whenever we literally want a transitive coercion</p>",
        "id": 195751341,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588185101
    },
    {
        "content": "<p>I got distracted from this project, but a second class of issues are ones where we define a new type and a <code>has_coe</code> instance for it to another type that has a coercion to function/sort, and expect the new type to also have a coercion to function/sort. A prototypical example is <code>subgroup G</code> which has a coercion to <code>set G</code>. These are easily addressed by adding an explicit <code>has_coe_to_sort</code> instance.</p>",
        "id": 195797044,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588220117
    },
    {
        "content": "<p>These need to be fixed anyhow.  Transitive coercion instances are not in simp-normal form.</p>",
        "id": 195810897,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1588235525
    }
]