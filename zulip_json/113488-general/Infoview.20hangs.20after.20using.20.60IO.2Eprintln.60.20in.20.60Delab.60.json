[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">PrettyPrinter</span> <span class=\"n\">Delaborator</span> <span class=\"n\">SubExpr</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">delab</span> <span class=\"n\">app.Prod.fst</span><span class=\"o\">,</span> <span class=\"n\">delab</span> <span class=\"n\">app.Prod.snd</span><span class=\"kd\">]</span>\n<span class=\"kd\">def</span> <span class=\"n\">delabProdProjs</span> <span class=\"o\">:</span> <span class=\"n\">Delab</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">xs</span><span class=\"bp\">@#</span><span class=\"o\">[</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">SubExpr.getExpr</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">getAppArgs</span> <span class=\"bp\">|</span> <span class=\"n\">failure</span>\n  <span class=\"n\">IO.println</span> <span class=\"n\">xs</span>\n  <span class=\"k\">let</span> <span class=\"n\">stx</span> <span class=\"bp\">←</span> <span class=\"n\">delabProjectionApp</span>\n  <span class=\"k\">match</span> <span class=\"n\">stx</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">fst</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">snd</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">failure</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">xs</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">)</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">xs.fst</span>\n</code></pre></div>\n<p>consider the above code, the insert of <code>IO.println XS</code> causes info view hangs at <code>#check xs.fst</code>, and keeps not working even after delete the <code>IO.println</code>, but okay after delete then restart server.</p>\n<p>Is this a bug of info view? If so, I think I can transfer this thread to GitHub issues.</p>",
        "id": 399074557,
        "sender_full_name": "Alissa Tung",
        "timestamp": 1698518988
    },
    {
        "content": "<p>I suspect  this is <a href=\"https://github.com/leanprover/lean4/pull/738\">lean4#738</a> caused by the delaborator being called directly by the Lean language server in an asynchronous task without redirecting/capturing its output (as it was not expected to print anything).</p>",
        "id": 399175321,
        "sender_full_name": "Mac Malone",
        "timestamp": 1698603342
    },
    {
        "content": "<p>Is there a preferred way to print as debugging from within a delaborator?</p>",
        "id": 399179180,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1698607165
    },
    {
        "content": "<p>You can use <code>dbg_trace</code>. The message seems to appear directly in the Lean server log (so appears in VS Code as an error popup), but at least you can see it.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">PrettyPrinter</span> <span class=\"n\">Delaborator</span> <span class=\"n\">SubExpr</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">delab</span> <span class=\"n\">app.Prod.fst</span><span class=\"o\">,</span> <span class=\"n\">delab</span> <span class=\"n\">app.Prod.snd</span><span class=\"kd\">]</span>\n<span class=\"kd\">def</span> <span class=\"n\">delabProdProjs</span> <span class=\"o\">:</span> <span class=\"n\">Delab</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">xs</span><span class=\"bp\">@#</span><span class=\"o\">[</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">SubExpr.getExpr</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">getAppArgs</span> <span class=\"bp\">|</span> <span class=\"n\">failure</span>\n  <span class=\"n\">dbg_trace</span> <span class=\"s2\">\"xs = {xs}\"</span>\n  <span class=\"k\">let</span> <span class=\"n\">stx</span> <span class=\"bp\">←</span> <span class=\"n\">delabProjectionApp</span>\n  <span class=\"k\">match</span> <span class=\"n\">stx</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">fst</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">snd</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">failure</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">xs</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">)</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">xs.fst</span>\n</code></pre></div>",
        "id": 399179730,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1698607778
    },
    {
        "content": "<p>What's the difference between <code>dbg_trace</code> and <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=dbgTrace#doc\">docs#dbgTrace</a> ?</p>",
        "id": 399183790,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1698611911
    },
    {
        "content": "<p>And perhaps a related question: where would I have had to look to learn about each of them?</p>",
        "id": 399184147,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1698612309
    },
    {
        "content": "<p>Afaik <code>dbg_trace</code> is just a little wrapper around <code>dbgTrace</code> that allows you to use an interpolated string directly, rather than writing <code>dbgTrace s!\"...\"</code>.</p>",
        "id": 399295735,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1698670667
    },
    {
        "content": "<p>Stuff like this should really be in the metaprogramming book, probably in the <code>MetaM</code> chapter.</p>",
        "id": 399295888,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1698670712
    },
    {
        "content": "<p>That should be in the docstring for dbg_trace</p>",
        "id": 399317734,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1698677479
    },
    {
        "content": "<p>The current docstring is</p>\n<blockquote>\n<p>dbg_trace e; body evaluates to body and prints e (which can be an interpolated string literal) to stderr. It should only be used for debugging.</p>\n</blockquote>\n<p>What would you like to have added?</p>\n<p>Ah, the docstring disappears when <code>dbg_trace</code> is used in a <code>do</code> block. LMFT. PR at &lt;<a href=\"https://github.com/leanprover/lean4/pull/2787\">https://github.com/leanprover/lean4/pull/2787</a>&gt;</p>",
        "id": 399340516,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1698684362
    },
    {
        "content": "<p>I'd also like to see a docstring on dbgTrace that mentions that there is special syntax for it, so I'm not left wondering if the functions are unrelated</p>",
        "id": 399342808,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1698685181
    }
]