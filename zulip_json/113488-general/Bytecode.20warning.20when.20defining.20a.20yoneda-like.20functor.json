[
    {
        "content": "<p>What does this error message even mean? From previous discussions here on Zulip I understand that this often occurs when something that's not a Prop is called lemma and not def, but that's not the case here.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">fin_yoneda</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">Fintype.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span><span class=\"bp\">ᵒᵖ</span>  <span class=\"bp\">⥤</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">obj</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">Y</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">unop</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">X</span><span class=\"o\">,</span>\n  <span class=\"n\">map</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">Y</span> <span class=\"n\">Z</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"n\">z</span><span class=\"o\">,</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">f.unop</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"o\">}</span>\n  <span class=\"c\">/-</span>\n<span class=\"cm\">  failed to generate bytecode for 'fin_yoneda'</span>\n<span class=\"cm\">  infer type failed, function expected at</span>\n<span class=\"cm\">    f z</span>\n<span class=\"cm\">  term</span>\n<span class=\"cm\">    f</span>\n<span class=\"cm\">  has type</span>\n<span class=\"cm\">    Y ⟶ Z</span>\n<span class=\"cm\">  -/</span>\n</code></pre></div>",
        "id": 353194257,
        "sender_full_name": "Dagur Asgeirsson",
        "timestamp": 1682588646
    },
    {
        "content": "<p>What does adding <code>noncomputable</code> do?</p>",
        "id": 353195053,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1682588751
    },
    {
        "content": "<p>Nothing :(</p>",
        "id": 353195275,
        "sender_full_name": "Dagur Asgeirsson",
        "timestamp": 1682588776
    },
    {
        "content": "<p>Well I have a \"noncomputable theory\" at the top, and removing it does nothing</p>",
        "id": 353195576,
        "sender_full_name": "Dagur Asgeirsson",
        "timestamp": 1682588817
    },
    {
        "content": "<p>It looks like it's just having trouble seeing that <code>f : Y ⟶ Z</code> is a function. What if you type-ascript?</p>",
        "id": 353197189,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1682589021
    },
    {
        "content": "<p>Like this? It gives the same error.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">fin_yoneda</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">Fintype.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span><span class=\"bp\">ᵒᵖ</span>  <span class=\"bp\">⥤</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">obj</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">Y</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">unop</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">X</span><span class=\"o\">,</span>\n  <span class=\"n\">map</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">Y</span> <span class=\"n\">Z</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"n\">z</span><span class=\"o\">,</span> <span class=\"n\">g</span> <span class=\"o\">((</span><span class=\"n\">f.unop</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">unop</span> <span class=\"n\">Z</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">unop</span> <span class=\"n\">Y</span><span class=\"o\">))</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 353197964,
        "sender_full_name": "Dagur Asgeirsson",
        "timestamp": 1682589124
    },
    {
        "content": "<p>f itself is of course not a function, it's an arrow in the opposite category</p>",
        "id": 353198522,
        "sender_full_name": "Dagur Asgeirsson",
        "timestamp": 1682589182
    },
    {
        "content": "<p>What's the type of all the variables? Can we have a MWE?</p>",
        "id": 353199118,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1682589268
    },
    {
        "content": "<p>The only variable is <code>X : Type (u+1)</code>.</p>",
        "id": 353200229,
        "sender_full_name": "Dagur Asgeirsson",
        "timestamp": 1682589412
    },
    {
        "content": "<p>What's even weirder is that <code>my_yoneda</code> defined below gives the same error message, yet <code>my_yoneda_eq_yoneda</code> is true:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">my_yoneda</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">))</span><span class=\"bp\">ᵒᵖ</span> <span class=\"bp\">⥤</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">obj</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">Y</span><span class=\"o\">,</span> <span class=\"n\">unop</span> <span class=\"n\">Y</span> <span class=\"bp\">⟶</span> <span class=\"n\">X</span><span class=\"o\">,</span>\n  <span class=\"n\">map</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">Y</span> <span class=\"n\">Y'</span> <span class=\"n\">f</span> <span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"n\">f.unop</span> <span class=\"bp\">≫</span> <span class=\"n\">g</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">my_yoneda_eq_yoneda</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">my_yoneda</span> <span class=\"n\">X</span> <span class=\"bp\">=</span> <span class=\"n\">yoneda.obj</span> <span class=\"n\">X</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">refl</span>\n</code></pre></div>",
        "id": 353200588,
        "sender_full_name": "Dagur Asgeirsson",
        "timestamp": 1682589463
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"519559\">Dagur Ásgeirsson</span> <a href=\"#narrow/stream/113488-general/topic/Bytecode.20warning.20when.20defining.20a.20yoneda-like.20functor/near/353200229\">said</a>:</p>\n<blockquote>\n<p>The only variable is <code>X : Type (u+1)</code>.</p>\n</blockquote>\n<p>No, but <code>f</code>, <code>g</code>, etc... Can you copy the context or, better, give us a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>?</p>",
        "id": 353203421,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1682589867
    },
    {
        "content": "<p>Here is a mwe:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">category_theory.yoneda</span>\n<span class=\"kn\">import</span> <span class=\"n\">category_theory.Fintype</span>\n\n<span class=\"kd\">universe</span> <span class=\"n\">u</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">opposite</span>\n<span class=\"kn\">open</span> <span class=\"n\">category_theory</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">my_yoneda</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">))</span><span class=\"bp\">ᵒᵖ</span> <span class=\"bp\">⥤</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">obj</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">Y</span><span class=\"o\">,</span> <span class=\"n\">unop</span> <span class=\"n\">Y</span> <span class=\"bp\">⟶</span> <span class=\"n\">X</span><span class=\"o\">,</span>\n  <span class=\"n\">map</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">Y</span> <span class=\"n\">Y'</span> <span class=\"n\">f</span> <span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"n\">f.unop</span> <span class=\"bp\">≫</span> <span class=\"n\">g</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">my_yoneda_eq_yoneda</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">my_yoneda</span> <span class=\"n\">X</span> <span class=\"bp\">=</span> <span class=\"n\">yoneda.obj</span> <span class=\"n\">X</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">refl</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">fin_yoneda</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">Fintype.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span><span class=\"bp\">ᵒᵖ</span>  <span class=\"bp\">⥤</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">obj</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">Y</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">unop</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">X</span><span class=\"o\">,</span>\n  <span class=\"n\">map</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">Y</span> <span class=\"n\">Z</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"n\">z</span><span class=\"o\">,</span> <span class=\"n\">g</span> <span class=\"o\">((</span><span class=\"n\">f.unop</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">unop</span> <span class=\"n\">Z</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">unop</span> <span class=\"n\">Y</span><span class=\"o\">))</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 353204808,
        "sender_full_name": "Dagur Asgeirsson",
        "timestamp": 1682590054
    },
    {
        "content": "<p>Y, Z, f, g, z are all bound by the lambda but here is the state after it in <code>fin_yoneda</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">),</span>\n<span class=\"n\">Y</span> <span class=\"n\">Z</span> <span class=\"o\">:</span> <span class=\"n\">Fintype</span><span class=\"bp\">ᵒᵖ</span><span class=\"o\">,</span>\n<span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Y</span> <span class=\"bp\">⟶</span> <span class=\"n\">Z</span><span class=\"o\">,</span>\n<span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"bp\">↥</span><span class=\"o\">(</span><span class=\"n\">unop</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">X</span><span class=\"o\">,</span>\n<span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"bp\">↥</span><span class=\"o\">(</span><span class=\"n\">unop</span> <span class=\"n\">Z</span><span class=\"o\">)</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">X</span>\n</code></pre></div>",
        "id": 353205399,
        "sender_full_name": "Dagur Asgeirsson",
        "timestamp": 1682590132
    },
    {
        "content": "<p>I have no clue about anything here, but I find it interesting that the following seems to work although I would naively expect it to do the same thing:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">category_theory.yoneda</span>\n<span class=\"kn\">import</span> <span class=\"n\">category_theory.Fintype</span>\n\n<span class=\"kd\">universe</span> <span class=\"n\">u</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">opposite</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">fin_yoneda</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">Fintype.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span><span class=\"bp\">ᵒᵖ</span>  <span class=\"bp\">⥤</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">obj</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">Y</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">unop</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">X</span><span class=\"o\">,</span>\n  <span class=\"n\">map</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">Y</span> <span class=\"n\">Z</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"n\">z</span><span class=\"o\">,</span> <span class=\"kd\">begin</span>\n    <span class=\"k\">let</span> <span class=\"n\">f'</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">f.unop</span><span class=\"o\">),</span>\n    <span class=\"n\">exact</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">f'</span> <span class=\"n\">z</span><span class=\"o\">),</span>\n  <span class=\"kd\">end</span>\n<span class=\"o\">}</span>\n</code></pre></div>",
        "id": 353211961,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1682591079
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">my_yoneda</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">))</span><span class=\"bp\">ᵒᵖ</span> <span class=\"bp\">⥤</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">obj</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">Y</span><span class=\"o\">,</span> <span class=\"n\">unop</span> <span class=\"n\">Y</span> <span class=\"bp\">⟶</span> <span class=\"n\">X</span><span class=\"o\">,</span>\n  <span class=\"n\">map</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">Y</span> <span class=\"n\">Y'</span> <span class=\"n\">f</span> <span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"k\">let</span> <span class=\"n\">f'</span> <span class=\"o\">:=</span> <span class=\"n\">f.unop</span> <span class=\"k\">in</span> <span class=\"n\">f'</span> <span class=\"bp\">≫</span> <span class=\"n\">g</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>works too</p>",
        "id": 353214762,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1682591461
    },
    {
        "content": "<p>Thanks, that's weird. Would be interesting if someone knows why this works</p>",
        "id": 353215024,
        "sender_full_name": "Dagur Asgeirsson",
        "timestamp": 1682591500
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"519559\">Dagur Ásgeirsson</span> <a href=\"#narrow/stream/113488-general/topic/Bytecode.20warning.20when.20defining.20a.20yoneda-like.20functor/near/353195576\">said</a>:</p>\n<blockquote>\n<p>Well I have a \"noncomputable theory\" at the top, and removing it does nothing</p>\n</blockquote>\n<p>The Lean 3 noncomputability logic is:</p>\n<ul>\n<li>If the function is marked <code>noncomputable!</code>, believe the user and skip the rest of these steps.</li>\n<li>Determine whether the function should be computable or not.</li>\n<li>If there's no <code>noncomputable theory</code> at the top, complain if the user got it wrong (i.e., if they put or didn't put <code>noncomputable</code> on this definition correctly).</li>\n</ul>",
        "id": 353229326,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1682593473
    },
    {
        "content": "<p>This means that if you have <code>noncomputable theory</code>, Lean completely(*) ignores whether you put <code>noncomputable</code> or not.</p>\n<p>(*) Just to complicate things, the equation compiler acts differently depending on whether you add <code>noncomputable</code>. I think this only really impacts recursive definitions.</p>",
        "id": 353230219,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1682593584
    },
    {
        "content": "<p>Hmm ok, putting <code>noncomputable!</code> works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">noncomputable</span><span class=\"bp\">!</span> <span class=\"kd\">def</span> <span class=\"n\">fin_yoneda</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">Fintype.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span><span class=\"bp\">ᵒᵖ</span>  <span class=\"bp\">⥤</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">obj</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">Y</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">unop</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">X</span><span class=\"o\">,</span>\n  <span class=\"n\">map</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">Y</span> <span class=\"n\">Z</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"n\">z</span><span class=\"o\">,</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">f.unop</span> <span class=\"n\">z</span><span class=\"o\">),</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 353231017,
        "sender_full_name": "Dagur Asgeirsson",
        "timestamp": 1682593688
    },
    {
        "content": "<p>(deleted: you tried my suggestion already! <span aria-label=\"racecar\" class=\"emoji emoji-1f3ce\" role=\"img\" title=\"racecar\">:racecar:</span>)</p>",
        "id": 353231042,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1682593691
    },
    {
        "content": "<p>Oh, this is a fascinating error:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">generate</span> <span class=\"n\">bytecode</span> <span class=\"n\">for</span> <span class=\"bp\">'</span><span class=\"n\">my_yoneda'</span>\n<span class=\"n\">infer</span> <span class=\"n\">type</span> <span class=\"n\">failed</span><span class=\"o\">,</span> <span class=\"n\">function</span> <span class=\"n\">expected</span> <span class=\"n\">at</span>\n  <span class=\"n\">f</span> <span class=\"n\">x</span>\n<span class=\"n\">term</span>\n  <span class=\"n\">f</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">Y</span> <span class=\"bp\">⟶</span> <span class=\"n\">Y'</span>\n</code></pre></div>",
        "id": 353231672,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1682593787
    },
    {
        "content": "<p>I'm not going to go and debug it, but I have a strong suspicion what it is. <code>opposite</code> is <code>@[irreducible]</code>, and the core <code>infer_type</code> algorithm doesn't unfold irreducible definitions when calculating the type. I don't think this error should happen, but I doubt it will be fixed in Lean 3.</p>",
        "id": 353232520,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1682593900
    },
    {
        "content": "<p>Here's what <code>set_option trace.compiler true</code> reveals about how this function is transformed during compilation:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)),</span>\n  <span class=\"o\">{</span><span class=\"n\">obj</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">))</span><span class=\"bp\">ᵒᵖ</span><span class=\"o\">),</span> <span class=\"n\">unop</span> <span class=\"n\">Y</span> <span class=\"bp\">→</span> <span class=\"n\">X</span><span class=\"o\">,</span>\n   <span class=\"n\">map</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">Y</span> <span class=\"n\">Y'</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">))</span><span class=\"bp\">ᵒᵖ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Y</span> <span class=\"bp\">⟶</span> <span class=\"n\">Y'</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">unop</span> <span class=\"n\">Y</span> <span class=\"bp\">⟶</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">unop</span> <span class=\"n\">Y'</span><span class=\"o\">),</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">),</span>\n   <span class=\"n\">map_id'</span> <span class=\"o\">:=</span> <span class=\"n\">my_yoneda._proof_1</span> <span class=\"n\">X</span><span class=\"o\">,</span>\n   <span class=\"n\">map_comp'</span> <span class=\"o\">:=</span> <span class=\"n\">my_yoneda._proof_2</span> <span class=\"n\">X</span><span class=\"o\">}</span>\n</code></pre></div>",
        "id": 353234564,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1682594326
    },
    {
        "content": "<p>I think the definition of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/quiver.hom.unop\">docs#quiver.hom.unop</a>  is to blame</p>",
        "id": 353236561,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1682594587
    },
    {
        "content": "<p>It inlines the definition of <code>≫</code> for the <code>Type</code> category and simplifies some things until it gets to <code>g (f x)</code>, but <code>f</code> isn't a function that can be applied due to irreducibility.</p>",
        "id": 353236739,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1682594620
    },
    {
        "content": "<p>Yeah, it looks like it's inlining <code>hom.unop</code> but with irreducibility thrown in it's not seeing it as being type correct. (I think arguably the compiler should be able to handle this though.)</p>",
        "id": 353237096,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1682594667
    },
    {
        "content": "<p><del><code>hom.unop</code> should presumably be implemented in terms of composition with op and unop?</del></p>",
        "id": 353237363,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1682594697
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/113488-general/topic/Bytecode.20warning.20when.20defining.20a.20yoneda-like.20functor/near/353232520\">said</a>:</p>\n<blockquote>\n<p>but I have a strong suspicion what it is. <code>opposite</code> is <code>@[irreducible]</code></p>\n</blockquote>\n<p>Indeed, this fixes it</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"n\">semireducible</span><span class=\"o\">]</span> <span class=\"n\">quiver.opposite</span>\n</code></pre></div>",
        "id": 353239297,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1682594969
    },
    {
        "content": "<p>I'm not sure there's any fix for <code>hom.unop</code> that would protect against <code>infer_type</code> failing</p>",
        "id": 353239578,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1682595002
    },
    {
        "content": "<p>There's a <a href=\"https://github.com/leanprover/lean4/issues/2194\">Lean 4 issue</a> tracking what seems to be the same problem.</p>",
        "id": 353240065,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1682595067
    },
    {
        "content": "<p>Trying to wrap it in a structure seems to run into universe issues</p>",
        "id": 353241036,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1682595215
    },
    {
        "content": "<p>Making <code>quiver.opposite</code> semireducible seems like an obvious fix</p>",
        "id": 353241520,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1682595276
    },
    {
        "content": "<p>I don't see why it makes sense to make it irreducible, it's not guarding a type synonym or anything</p>",
        "id": 353241848,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1682595310
    },
    {
        "content": "<p>There's a different <code>quiver</code> structure on <code>Type u</code> vs <code>(Type u)ᵒᵖ</code> at least, so you don't want <code>opposite</code> to be unfolded. It also helps protect against composing morphisms that shouldn't be composed</p>",
        "id": 353244342,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1682595661
    },
    {
        "content": "<p>Aren't you describing why <code>opposite</code> should be irreducible? I don't see why <code>quiver.opposite</code> should be irreducible</p>",
        "id": 353247751,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1682596092
    },
    {
        "content": "<p>That feels like making <a href=\"https://leanprover-community.github.io/mathlib_docs/find/mul_opposite.has_mul\">docs#mul_opposite.has_mul</a> irreducible, which we don't do</p>",
        "id": 353247806,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1682596105
    },
    {
        "content": "<p>Oh, I see. I think <code>quiver.opposite</code> being irreducible is to make it so that you can't see that the hom sets are pi types, that way you can put instances on them that are different from other pi type instances (but I don't really know the justification).</p>",
        "id": 353249647,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1682596334
    },
    {
        "content": "<p>Here's the commit that made it irreducible: <a href=\"https://github.com/leanprover-community/mathlib/commit/042c290dac25b5f1c77255f1039fae301774d6cf\">https://github.com/leanprover-community/mathlib/commit/042c290dac25b5f1c77255f1039fae301774d6cf</a></p>",
        "id": 353251456,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1682596560
    },
    {
        "content": "<p>I'm afraid I don't see what you mean by \"see that the hom sets are pi types\"</p>",
        "id": 353275049,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1682599636
    }
]