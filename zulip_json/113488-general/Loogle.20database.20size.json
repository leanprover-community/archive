[
    {
        "content": "<p>I wanted to ask you one thing about loogle. How big is the entire database?</p>",
        "id": 398355104,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1698178722
    },
    {
        "content": "<p>200MB, which includes both indices (constants to lemmas, and the lemma name suffix trie; the latter is actually larger).<br>\nBut note that loogle also needs the <code>oleans</code> of Mathlib to work properly.</p>",
        "id": 398358496,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1698180546
    },
    {
        "content": "<p>Wait so loogle is pointless for non mathlib projects?</p>",
        "id": 398360095,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1698181304
    },
    {
        "content": "<p>Adding a search feature that gives live feedback as you type it is naturally a drag on the extension, especially since the initial search results can be large.</p>",
        "id": 398360324,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1698181406
    },
    {
        "content": "<p>Is there a way to ask the API to not return more than the first 20 matches in the request itself?</p>",
        "id": 398360377,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1698181436
    },
    {
        "content": "<p>Ah, no: In the context of non-mathlib you need the oleans of whatever else you want to search.</p>",
        "id": 398360535,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1698181507
    },
    {
        "content": "<p>Sorry, late here, I didn’t make the connection to the VS code work right away :-) <span aria-label=\"sleepy\" class=\"emoji emoji-1f62a\" role=\"img\" title=\"sleepy\">:sleepy:</span></p>",
        "id": 398360585,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1698181534
    },
    {
        "content": "<p>I can add a parameter for the result size, but I doubt it saves much time: Most of the time is spend producing and sorting the matches.</p>",
        "id": 398360688,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1698181580
    },
    {
        "content": "<p>No it can get bad. Not everyone has a superfast connection dedicated to downloading a few dozen MBs especially if fast response is needed, especially when the requests are made in rapid succession. I am not even thinking of the burden on the server when thousands of lean users are doing this.</p>",
        "id": 398360968,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1698181715
    },
    {
        "content": "<p>Are the query results already in the MBs? I'd expect a few kb for the bit of JSON (or maybe I am not following).<br>\nBut yes, eventually we want people to just have <code>loogle</code> running locally, and nothing would have to be downloaded (for mathlib, the cache comes with the oleans you already download, or is created on demand).</p>",
        "id": 398361211,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1698181829
    },
    {
        "content": "<p>I suggested using <a href=\"https://loogle.lean-fro.org/\">https://loogle.lean-fro.org/</a> primarily so that we focus on the UI part first, and get a prototype out; and later make it use a local installation. At least the current server (cheapest Hetzner vserver around) won’t handle a big load, I expect :-)</p>",
        "id": 398361274,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1698181872
    },
    {
        "content": "<p>The other issue is even with the current set up I see no guarantee that calling the api on a string produces a strict subset of the results produced by it's prefix. I also cannot say I will only start searching after 3-4 characters have been typed since what happens if the search is simply 'pi'</p>",
        "id": 398361390,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1698181929
    },
    {
        "content": "<p>Naively I would expect that it will search-as-you-type from a certain length on only, unless I press Enter.</p>",
        "id": 398361516,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1698182028
    },
    {
        "content": "<p>But if serach-as-you-type is causing headaches, then a search-when-you-press-enter UI is also a good MVP!</p>",
        "id": 398361588,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1698182060
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"470149\">Joachim Breitner</span> <a href=\"#narrow/stream/113488-general/topic/Loogle.20is.20live!/near/398361516\">said</a>:</p>\n<blockquote>\n<p>Naively I would expect that it will search-as-you-type from a certain length on only, unless I press Enter.</p>\n</blockquote>\n<p>That's my plan. But in the past I have had bad experiences where users used to getting a dropdown for longer queries complain that nothing is happening when they just type two letters.</p>",
        "id": 398361706,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1698182124
    },
    {
        "content": "<p>Also, searching for <code>p</code> or <code>pi</code> is really fast, because that’s an unknown identifier. And searching for <code>\"pi</code> is illegal syntax :-D</p>",
        "id": 398361711,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1698182127
    },
    {
        "content": "<p>There is also the option of waiting for <em>x</em> ms, so that the <code>pi</code> search only fires when they stop typing (or a typing rather slowly)</p>",
        "id": 398361828,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1698182173
    },
    {
        "content": "<p>I'm trying out all this stuff already.</p>",
        "id": 398361882,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1698182209
    },
    {
        "content": "<p>Cool!</p>",
        "id": 398361912,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1698182226
    },
    {
        "content": "<p>I would say that matching how google behaves is the ideal. But I also expect that when people use the current online version, they are going to complain a lot about \"loogle hanging\"</p>",
        "id": 398361975,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1698182262
    },
    {
        "content": "<p>Yes, I am surprised I didn’t get many complaints yet with this small, single-threaded service. But hopefully by then <code>#find</code> is part of mathlib proper (and later maybe <code>std4</code> or its own library used by whoever wants to, including mathlib) and people can start using it locally.</p>",
        "id": 398362125,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1698182343
    },
    {
        "content": "<p>OTOH, it shouldn’t be hard to scale it out a lot. It’s not very memory hungry, I believe (most data structures are mmap’ed, the requests themselves hopefully don't need much), so a mult-threaded implementation can scale easily, and it has no state, so if we really need an online service that can sustain a high load, I don’t see big obstacles.</p>",
        "id": 398362388,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1698182479
    },
    {
        "content": "<p>With a local version, it should not be a big deal to load the entire trie into memory if required. We are in the era of chrome and vscode after all ;)</p>",
        "id": 398362612,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1698182599
    },
    {
        "content": "<p>Realistically it won't happen of course</p>",
        "id": 398362657,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1698182627
    },
    {
        "content": "<p>It is loaded into memory, via <code>mmap</code> (so the pages are read on demand), just like <code>oleans</code> by lean.</p>",
        "id": 398362689,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1698182642
    },
    {
        "content": "<p>25 messages were moved here from <a class=\"stream-topic\" data-stream-id=\"113488\" href=\"/#narrow/stream/113488-general/topic/Loogle.20is.20live.21\">#general &gt; Loogle is live!</a> by <span class=\"user-mention silent\" data-user-id=\"470149\">Joachim Breitner</span>.</p>",
        "id": 398362814,
        "sender_full_name": "Notification Bot",
        "timestamp": 1698182696
    },
    {
        "content": "<p>Oh, I <em>can</em> move messages after all! That’s good to know. (I guess just not within streams?)</p>",
        "id": 398362906,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1698182742
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"470149\">Joachim Breitner</span> <a href=\"#narrow/stream/113488-general/topic/Loogle.20database.20size/near/398362689\">said</a>:</p>\n<blockquote>\n<p>It is loaded into memory, via <code>mmap</code> (so the pages are read on demand), just like <code>oleans</code> by lean.</p>\n</blockquote>\n<p>Is this really the right level of abstraction? Wouldn't a small DB server do better?</p>",
        "id": 398362940,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1698182762
    },
    {
        "content": "<p>A DB server doesn't do anything different internally, doesn’t it? And it’s how <code>library_search</code> and <code>rw?</code> and other tactics works, so it seemed reasonable to me so that <code>#find</code> works the same</p>",
        "id": 398363090,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1698182835
    },
    {
        "content": "<p>I just trust that they have implemented proper cache optimal data structures for indexing and querying.</p>",
        "id": 398363310,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1698182944
    },
    {
        "content": "<p>We can certainly swap out data structures and/or storage later if needed. So far I was positively surprised by the performance we get out of Lean's data structures (search trees and Tries). Remind me to look again once someone wrote SQLite bindings for Lean :-D</p>",
        "id": 398364971,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1698183864
    },
    {
        "content": "<p>I know we can do that. I just think that the people who wrote redis or dragonfly know a lot more about real world cache optimization than me. Algorithms engineering lives on an entirely different planet from algorithms theory.</p>",
        "id": 398365647,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1698184263
    },
    {
        "content": "<p>Especially for rapid query management</p>",
        "id": 398365862,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1698184387
    },
    {
        "content": "<p>The db can be extracted from the data structures or alternatively act as an intermediary for caching queries.</p>",
        "id": 398365998,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1698184467
    },
    {
        "content": "<p>I'm not denying that! It won't help with elaborating and pattern matching expressions though, which (I believe) is the current bottleneck for many slow queries.</p>",
        "id": 398366813,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1698184913
    },
    {
        "content": "<p>Anyway, let's first build it, and then make it usable, and then make it fast :-)</p>",
        "id": 398366898,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1698184942
    },
    {
        "content": "<p>But why does loogle need to elaborate?</p>",
        "id": 398366913,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1698184950
    },
    {
        "content": "<p>I'll try to post a prototype this weekend</p>",
        "id": 398366930,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1698184963
    },
    {
        "content": "<p>No firm guarantees though</p>",
        "id": 398366950,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1698184974
    },
    {
        "content": "<p>Because what you enter into the search query is syntax, not raw expressions, so it has to elaborate them.</p>",
        "id": 398367008,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1698185017
    },
    {
        "content": "<p>oh okay, I think I see your point</p>",
        "id": 398367180,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1698185116
    },
    {
        "content": "<p>Exciting!</p>",
        "id": 398367199,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1698185127
    },
    {
        "content": "<p>I don't want to raise any expectations. It is just basically \"type in your query\" and pick your sin. The only thing is that I want to find out what people think about where they best like accessing it from and how.</p>",
        "id": 398367331,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1698185194
    },
    {
        "content": "<p>I wish I could query the mathlib docs and give a short description (without any web scraping of course).</p>",
        "id": 398367354,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1698185209
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"470149\">Joachim Breitner</span> <a href=\"#narrow/stream/113488-general/topic/Loogle.20database.20size/near/398362906\">said</a>:</p>\n<blockquote>\n<p>Oh, I <em>can</em> move messages after all! That’s good to know. (I guess just not within streams?)</p>\n</blockquote>\n<p>You can within streams but not across.</p>",
        "id": 398414739,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1698213006
    },
    {
        "content": "<p>Loogle has access to the environment, and could return type and docstring along with search results. I anyways wanted to include the type on loogle, just haven't had a good idea for a nice UI there yet.</p>",
        "id": 398435109,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1698222062
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"470149\">Joachim Breitner</span> <a href=\"#narrow/stream/113488-general/topic/Loogle.20database.20size/near/398435109\">said</a>:</p>\n<blockquote>\n<p>Loogle has access to the environment, and could return type and docstring along with search results. I anyways wanted to include the type on loogle, just haven't had a good idea for a nice UI there yet.</p>\n</blockquote>\n<p>Could it return this info in the json for now?</p>",
        "id": 398524633,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1698251955
    },
    {
        "content": "<p>Let me give it a try.</p>",
        "id": 398524913,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1698252059
    },
    {
        "content": "<p>That was <a href=\"https://github.com/nomeata/loogle/commit/1720fc052362c73abc037c67d56cf3588778e219\">easier than expected</a>. Most of the time was spent finding <code>findDocString?</code>. Deploy running…</p>",
        "id": 398529727,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1698253851
    },
    {
        "content": "<p>Why not just display it upon hovering the cursor over the link to the decl?</p>",
        "id": 398530028,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1698253971
    },
    {
        "content": "<p>That’s surely one option. But isn’t it even nicer if you don’t even have to move the mouse, i.e. if it's always visible? Or is that too cluttered? Maybe <code>&lt;detail&gt;</code>?<br>\nI’ve just pushed a change (still deploying) that simply shows the type in a line below the hit, let’s see what feedback we get.</p>\n<p>For the VS extension, one eventually wants to have a rich view like in the InfoView, where you hover on subexpressions of the type, go to defintion etc. Probably that needs integration with the LSP server somehow? Anyway, that’s future work :-)</p>",
        "id": 398531031,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1698254401
    },
    {
        "content": "<p>Now with types: <a href=\"https://loogle.lean-lang.org/?q=%28List.replicate+%28_+%2B+_%29+_+%3D+_%29\">https://loogle.lean-lang.org/?q=%28List.replicate+%28_+%2B+_%29+_+%3D+_%29</a><br>\nAnd JSON with types and docstring: <a href=\"https://loogle.lean-lang.org/json?q=%22List.replicate%22\">https://loogle.lean-lang.org/json?q=%22List.replicate%22</a></p>",
        "id": 398531591,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1698254635
    },
    {
        "content": "<p>have a look at:<br>\n<span class=\"user-mention\" data-user-id=\"644391\">@loogle</span> (<a href=\"http://Complex.re\">Complex.re</a> ?z : ℂ)</p>",
        "id": 398534832,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1698256112
    },
    {
        "content": "<p><span aria-label=\"search\" class=\"emoji emoji-1f50d\" role=\"img\" title=\"search\">:search:</span> <a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/Data/Complex/Basic.html#Complex.re_add_im\">Complex.re_add_im</a>, <a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/Data/Complex/Basic.html#Complex.conj_eq_iff_re\">Complex.conj_eq_iff_re</a>, and <a href=\"https://loogle.lean-lang.org/?q=%28Complex.re%20%3Fz%20%3A%20%E2%84%82%29\">22 more</a></p>",
        "id": 398534836,
        "sender_full_name": "loogle",
        "timestamp": 1698256113
    },
    {
        "content": "<p>The issue is that when you get into the more complicated statements, there are too many hypotheses. Maybe you could avoid displaying type classes and implicit arguments unless we're hovering? That would be similar to doc-gen, which greys out the implicits and type classes.</p>",
        "id": 398534958,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1698256174
    },
    {
        "content": "<p>Sorry, I don't mean to ask for the moon, it's already great.</p>",
        "id": 398534995,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1698256199
    },
    {
        "content": "<p>(just fyi, in the example I gave above, the results I was thinking of were the last two. I'm not arguing they should be first, but they would be much more readable without that extra info.)</p>",
        "id": 398535271,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1698256311
    },
    {
        "content": "<p>I am using <code>(ppExpr ci.type)</code>; if there are any options I should set to make it a bit smaller, I’m happy to do so (like hiding unused parameter names, hiding universes, etc.)<br>\nI don’t think there should be much more smartness in this part of the code yet; maybe once we do really nice semantic types, like in the info view (with hover and clickable).<br>\nAnother cheap fix might be some CSS that disables line wraps and sets <code>overflow-x:scroll</code>, so if types get large you get to scrol that type, but at least it’s not a wall of text.</p>",
        "id": 398554092,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1698264611
    },
    {
        "content": "<p>You could look at how <code>#check</code> works to trigger pretty printing like a declaration. The <code>extract_goal</code> tactic also does this, if you want another example. (Look around <code>PrettyPrinter.ppSignature</code>.)</p>",
        "id": 398554489,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1698264822
    },
    {
        "content": "<p>I see, <a href=\"https://github.com/leanprover/lean4/blob/819b5eaceaa433ea9105d7af3582a45d8f5a00e9/src/Lean/PrettyPrinter/Delaborator/Builtins.lean#L783-L817\"><code>delabConstWithSignatures</code></a> looks good…<br>\nannoyingly, I'd like to get just <code>&lt;params&gt; : &lt;type&gt;</code> and not <code>c.{&lt;levels&gt;} &lt;params&gt; : &lt;type&gt;</code>, but all the interesting logic about parameters is bundled. Maybe I can PR a refactor that exposes that. Or simply blindly copy that code…</p>",
        "id": 398555754,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1698265440
    },
    {
        "content": "<p>I have a question: How should loogle-lean (what I am calling my extension for now) insert the definitions into the editor</p>",
        "id": 400313506,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1699116974
    },
    {
        "content": "<p>Btw, I think if I get this and a couple of other snafus fixed, I can share a prototype later today <span class=\"user-mention\" data-user-id=\"470149\">@Joachim Breitner</span>. I still need to configure the correct places to start off the extension.</p>",
        "id": 400313521,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1699117003
    },
    {
        "content": "<p>Do we just want a text insert into the cursor position? Another option is to copy the definition into the clipboard (for now I have both options, but insert is the default).</p>",
        "id": 400313604,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1699117087
    },
    {
        "content": "<p>Up to you :-)</p>",
        "id": 400330265,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1699136117
    }
]