[
    {
        "content": "<p>So I finally understand the exact reason for the apply bug, and it's trickier than I'd guessed. Here is an illustrative example:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">topology</span><span class=\"bp\">.</span><span class=\"n\">instances</span><span class=\"bp\">.</span><span class=\"n\">real</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">topological_ring</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n\n<span class=\"n\">def</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">l1</span> <span class=\"o\">:</span> <span class=\"n\">continuous</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">apply</span> <span class=\"n\">continuous</span><span class=\"bp\">.</span><span class=\"n\">add</span><span class=\"o\">,</span>\n  <span class=\"n\">sorry</span><span class=\"o\">,</span> <span class=\"n\">sorry</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">l2</span> <span class=\"o\">:</span> <span class=\"n\">continuous</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">apply</span> <span class=\"n\">continuous</span><span class=\"bp\">.</span><span class=\"n\">add</span><span class=\"o\">,</span>         <span class=\"c1\">-- invalid apply tactic, failed to unify ...</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p><code>apply</code> unfolds the types of the target and the given expression and uses the number of →s to work out how many <code>_</code>s to insert. So here, <code>apply</code> also unfolds <code>continuous f</code> to its definition <code>∀s, is_open s → is_open (f ⁻¹' s)</code>. However, in the target of <code>l2</code>, <code>is_open (f ⁻¹' s)</code> unfolds even further (to something of the form <code>∀ x ∈ f ⁻¹' s, ...</code>), while in the target of <code>l1</code> and in the type of <code>continuous.add</code>, <code>is_open (f ⁻¹' s)</code> is stuck (it's a field extractor from the topology instance, which is <code>α</code> or a metavariable). Therefore, <code>apply</code> inserts two fewer <code>_</code>s in <code>l2</code> and this causes the familiar \"apply bug\".</p>",
        "id": 195345344,
        "sender_full_name": "Reid Barton",
        "timestamp": 1587923836
    },
    {
        "content": "<p>Does it tell you how to fix this in Lean 3.10? (and tell Sebastian how to make sure this will work in Lean 4)</p>",
        "id": 195345507,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1587924040
    },
    {
        "content": "<p>Unfortunately it is not at all clear to me so far how to fix this</p>",
        "id": 195345525,
        "sender_full_name": "Reid Barton",
        "timestamp": 1587924101
    },
    {
        "content": "<p>apparently Lean 4 already has an <code>apply</code> tactic, though, so conceivably I could try to reproduce the issue there</p>",
        "id": 195345607,
        "sender_full_name": "Reid Barton",
        "timestamp": 1587924230
    }
]