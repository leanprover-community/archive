[
    {
        "content": "<p>How do I prove the following? (in Lean 3)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">number_theory.padics.padic_numbers</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">fact</span> <span class=\"n\">p.prime</span><span class=\"o\">]</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">ℚ_</span><span class=\"o\">[</span><span class=\"n\">p</span><span class=\"o\">])</span> <span class=\"o\">(</span><span class=\"n\">ε</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hε</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">ε</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">j</span> <span class=\"bp\">≥</span> <span class=\"n\">i</span> <span class=\"bp\">→</span> <span class=\"n\">padic_norm_e</span> <span class=\"o\">((</span><span class=\"n\">quotient.out</span> <span class=\"n\">d</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"n\">ε</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 362027917,
        "sender_full_name": "Mario Weitzer",
        "timestamp": 1685391624
    },
    {
        "content": "<p>What's the proof?</p>",
        "id": 362029159,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1685392229
    },
    {
        "content": "<p>Isn‘t this true by definition? The p-adic number d is the limit of every sequence in the class of Cauchy sequences that represent it, one of which is picked by quotient.out. And convergence is defined in terms of the p-adic norm.</p>",
        "id": 362029889,
        "sender_full_name": "Mario Weitzer",
        "timestamp": 1685392600
    },
    {
        "content": "<p>Mathematicians are great at claiming that a whole bunch of things are true \"by definition\" :-)</p>",
        "id": 362037225,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1685396836
    },
    {
        "content": "<p>Can you make your question into a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> Mario? Add any <code>import</code> and <code>open</code> etc in order to make the code block compile just by cutting and pasting; this makes it much easier for others to experiment with your question.</p>",
        "id": 362037342,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1685396913
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/padic_norm_e\">docs#padic_norm_e</a></p>",
        "id": 362037350,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1685396922
    },
    {
        "content": "<p>Ah sorry, I included the stuff about p being prime but forgot about the import. I edited the example and it should compile now.</p>\n<p>Yes, I meant it should be true by definition to a mathematician but to be fair, I was asked for a mathematician‘s proof (at least that‘s how I understood the question) ;).</p>",
        "id": 362039661,
        "sender_full_name": "Mario Weitzer",
        "timestamp": 1685398442
    },
    {
        "content": "<p>This is essentially the very next declaration in the same file <a href=\"https://leanprover-community.github.io/mathlib_docs/find/padic_norm_e.defn\">docs#padic_norm_e.defn</a></p>",
        "id": 362040424,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1685398891
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">number_theory.padics.padic_numbers</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">fact</span> <span class=\"n\">p.prime</span><span class=\"o\">]</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">ℚ_</span><span class=\"o\">[</span><span class=\"n\">p</span><span class=\"o\">])</span> <span class=\"o\">(</span><span class=\"n\">ε</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hε</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">ε</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">j</span> <span class=\"bp\">≥</span> <span class=\"n\">i</span> <span class=\"bp\">→</span> <span class=\"n\">padic_norm_e</span> <span class=\"o\">((</span><span class=\"n\">quotient.out</span> <span class=\"n\">d</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"n\">ε</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span>  <span class=\"n\">simpa</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">padic_norm_e.map_sub</span><span class=\"o\">,</span> <span class=\"n\">quotient.out_eq</span> <span class=\"n\">d</span><span class=\"o\">]</span> <span class=\"n\">using</span> <span class=\"n\">padic_norm_e.defn</span> <span class=\"o\">(</span><span class=\"n\">quotient.out</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"n\">hε</span>\n</code></pre></div>",
        "id": 362041277,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1685399270
    },
    {
        "content": "<p>Perfect, thank you!</p>",
        "id": 362045813,
        "sender_full_name": "Mario Weitzer",
        "timestamp": 1685401938
    }
]