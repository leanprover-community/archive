[
    {
        "content": "<p>Hey there, within a proof, I am encountering a proof where one of the cases results in <code>P : { x \\\\ x \\in \\empty }</code>.<br>\nIt looks like a contradiction to me, but I am not able to actually use that, what am I doing wrong ?</p>",
        "id": 396948516,
        "sender_full_name": "Thomas Vigouroux",
        "timestamp": 1697477731
    },
    {
        "content": "<p>does <code>cases P</code> finish the proof?</p>",
        "id": 396948605,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1697477776
    },
    {
        "content": "<p>It does !</p>\n<p>May I ask for some explanation (I am a newbie <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span> ) ?</p>",
        "id": 396948691,
        "sender_full_name": "Thomas Vigouroux",
        "timestamp": 1697477828
    },
    {
        "content": "<p>(By the way, thank you sooo much, this was a proof that any \"closed\" boolean formula is equivalent to either true or false, and I was just missing this case !)</p>",
        "id": 396948828,
        "sender_full_name": "Thomas Vigouroux",
        "timestamp": 1697477890
    },
    {
        "content": "<p>Suppose you are proving some statement <code>p</code> an you have a natural number <code>n</code> around. Since <code>ℕ</code> has only two constructor you can do <code>cases n</code> (in practice any natural number is either <code>0</code> or the successor of a natural number).</p>",
        "id": 396948916,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1697477939
    },
    {
        "content": "<p>Oh, so contradiction deconstructs the Subtype, thus yielding the contradiction, I get it now.</p>\n<p>Thanks you very much !</p>",
        "id": 396949334,
        "sender_full_name": "Thomas Vigouroux",
        "timestamp": 1697478067
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"658705\">Thomas Vigouroux</span> has marked this topic as resolved.</p>",
        "id": 396949345,
        "sender_full_name": "Notification Bot",
        "timestamp": 1697478070
    },
    {
        "content": "<p>Now, <code>Empty</code> defined as the subtype (read subset if you want) of terms (elements) that satisfies <code>False</code>. In practice your <code>P</code> is a proof of false. Now, <code>False</code> is an inductive proposition with no constructor,  so, <code>cases P</code> says that to prove your theorem you have to do it in any of the cases <code>P</code> can be constructed, but there are zero of them, so there is nothing to do.</p>",
        "id": 396949366,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1697478077
    },
    {
        "content": "<p><code>exfalso</code> and then <code>exact H.2</code> should work too.</p>",
        "id": 396949490,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1697478120
    },
    {
        "content": "<p>The point is that by definition of <code>Empty</code>, having a term of it means having a proof of false.</p>",
        "id": 396949615,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1697478159
    },
    {
        "content": "<p>Eh, using <code>exfalso</code> works, but then <code>exact</code> does not for some reason</p>",
        "id": 396950064,
        "sender_full_name": "Thomas Vigouroux",
        "timestamp": 1697478371
    },
    {
        "content": "<p>Ah, sorry, <code>Empty</code> is already a type, is not the subset defined by <code>False</code>.</p>",
        "id": 396950806,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1697478697
    },
    {
        "content": "<p>What I say before is still valid, <code>Empty</code> is the inductive type with no constructors.</p>",
        "id": 396950861,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1697478719
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"658705\">Thomas Vigouroux</span> has marked this topic as unresolved.</p>",
        "id": 396951291,
        "sender_full_name": "Notification Bot",
        "timestamp": 1697478913
    },
    {
        "content": "<p>I'll bother you again if I may: I have the following:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">type</span> <span class=\"n\">mismatch</span>\n  <span class=\"bp\">...</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">Formula</span> <span class=\"o\">((</span><span class=\"n\">X</span> <span class=\"bp\">∪</span> <span class=\"n\">Y</span> <span class=\"bp\">∪</span> <span class=\"n\">Z</span><span class=\"o\">)</span> <span class=\"bp\">\\</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"n\">Formula</span> <span class=\"o\">(</span><span class=\"n\">Y</span> <span class=\"bp\">∪</span> <span class=\"n\">Z</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n</code></pre></div>\n<p>I would like it to realize the fact, but I am not sure of how to proceed, may I ask for a little guidance here again ?</p>",
        "id": 396951431,
        "sender_full_name": "Thomas Vigouroux",
        "timestamp": 1697478980
    },
    {
        "content": "<p>I have a proof that <code>Disjoint X Y</code> and <code>Disjoint X Z</code> available</p>",
        "id": 396951495,
        "sender_full_name": "Thomas Vigouroux",
        "timestamp": 1697479013
    },
    {
        "content": "<p>My question is more: when using dependent types, I'd sometimes like to make computations in the dependent (for simplification), how'd I do that ?</p>",
        "id": 396951691,
        "sender_full_name": "Thomas Vigouroux",
        "timestamp": 1697479086
    },
    {
        "content": "<p>In that case, the <code>convert</code> tactic will probably help</p>",
        "id": 396951817,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1697479150
    },
    {
        "content": "<p>May I ask how I'd use that ?</p>",
        "id": 396951970,
        "sender_full_name": "Thomas Vigouroux",
        "timestamp": 1697479208
    },
    {
        "content": "<p>We probably need a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a></p>",
        "id": 396952012,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1697479225
    },
    {
        "content": "<p>Okay I'll work on one quickly</p>",
        "id": 396952090,
        "sender_full_name": "Thomas Vigouroux",
        "timestamp": 1697479261
    },
    {
        "content": "<p>Let me ask something first that might unblock me: how would one use the <code>convert</code> tactic when the result of the definition is not <code>Prop</code> ?</p>",
        "id": 396952689,
        "sender_full_name": "Thomas Vigouroux",
        "timestamp": 1697479443
    },
    {
        "content": "<p>Okay I got the <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> (still a bit long, but mainly for notations):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Finset.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n\n<span class=\"n\">abbrev</span> <span class=\"n\">Variable</span> <span class=\"o\">:=</span> <span class=\"n\">ℕ</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">Formula</span> <span class=\"o\">(</span><span class=\"n\">S</span><span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">Variable</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n<span class=\"bp\">|</span> <span class=\"n\">bot</span>\n<span class=\"bp\">|</span> <span class=\"n\">var</span> <span class=\"o\">:</span> <span class=\"n\">S</span> <span class=\"bp\">→</span> <span class=\"n\">Formula</span> <span class=\"n\">S</span>\n<span class=\"bp\">|</span> <span class=\"n\">disj</span> <span class=\"o\">:</span> <span class=\"n\">Formula</span> <span class=\"n\">S</span> <span class=\"bp\">→</span> <span class=\"n\">Formula</span> <span class=\"n\">S</span> <span class=\"bp\">→</span> <span class=\"n\">Formula</span> <span class=\"n\">S</span>\n<span class=\"bp\">|</span> <span class=\"n\">conj</span> <span class=\"o\">:</span> <span class=\"n\">Formula</span> <span class=\"n\">S</span> <span class=\"bp\">→</span> <span class=\"n\">Formula</span> <span class=\"n\">S</span> <span class=\"bp\">→</span> <span class=\"n\">Formula</span> <span class=\"n\">S</span>\n<span class=\"bp\">|</span> <span class=\"n\">neg</span> <span class=\"o\">:</span> <span class=\"n\">Formula</span> <span class=\"n\">S</span> <span class=\"bp\">→</span> <span class=\"n\">Formula</span> <span class=\"n\">S</span>\n<span class=\"n\">deriving</span> <span class=\"n\">DecidableEq</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Formula</span>\n<span class=\"kd\">notation</span> <span class=\"o\">(</span><span class=\"n\">priority</span> <span class=\"o\">:=</span> <span class=\"n\">high</span><span class=\"o\">)</span> <span class=\"s2\">\"⊥\"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">bot</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Formula.top</span> <span class=\"o\">:</span> <span class=\"n\">Formula</span> <span class=\"n\">S</span> <span class=\"o\">:=</span> <span class=\"bp\">⊥.</span><span class=\"n\">neg</span>\n<span class=\"kd\">notation</span> <span class=\"o\">(</span><span class=\"n\">priority</span> <span class=\"o\">:=</span> <span class=\"n\">high</span><span class=\"o\">)</span> <span class=\"s2\">\"⊤\"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Formula.top</span>\n\n<span class=\"n\">abbrev</span> <span class=\"n\">Assignement</span> <span class=\"o\">(</span><span class=\"n\">S</span><span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">Variable</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">S</span> <span class=\"bp\">→</span> <span class=\"n\">Bool</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span>\n<span class=\"kd\">def</span> <span class=\"n\">Formula.Coproduct</span> <span class=\"o\">(</span><span class=\"n\">F</span><span class=\"o\">:</span> <span class=\"n\">Formula</span> <span class=\"n\">Sf</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">v</span><span class=\"o\">:</span> <span class=\"n\">Assignement</span> <span class=\"n\">Sv</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Formula</span> <span class=\"o\">(</span><span class=\"n\">Sf</span> <span class=\"bp\">\\</span> <span class=\"n\">Sv</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">match</span> <span class=\"n\">F</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">bot</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">bot</span>\n  <span class=\"bp\">|</span> <span class=\"n\">var</span> <span class=\"n\">P</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">↑</span><span class=\"n\">P</span> <span class=\"bp\">∈</span> <span class=\"n\">Sv</span> <span class=\"k\">then</span>\n      <span class=\"k\">if</span> <span class=\"n\">v</span> <span class=\"o\">⟨</span><span class=\"bp\">↑</span><span class=\"n\">P</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">⟩</span> <span class=\"k\">then</span> <span class=\"bp\">⊤</span> <span class=\"k\">else</span> <span class=\"bp\">⊥</span>\n    <span class=\"k\">else</span>\n      <span class=\"n\">var</span> <span class=\"o\">⟨</span><span class=\"bp\">↑</span><span class=\"n\">P</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"o\">{</span>\n        <span class=\"n\">apply</span> <span class=\"n\">Finset.mem_sdiff.mpr</span>\n        <span class=\"n\">constructor</span>\n        <span class=\"bp\">·</span> <span class=\"n\">exact</span> <span class=\"n\">P.2</span>\n        <span class=\"bp\">·</span> <span class=\"n\">assumption</span>\n      <span class=\"o\">}⟩</span>\n  <span class=\"bp\">|</span> <span class=\"n\">neg</span> <span class=\"n\">A</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">neg</span> <span class=\"o\">(</span><span class=\"n\">A.Coproduct</span> <span class=\"n\">v</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">conj</span> <span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">conj</span> <span class=\"o\">(</span><span class=\"n\">A.Coproduct</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">B.Coproduct</span> <span class=\"n\">v</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">disj</span> <span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">conj</span> <span class=\"o\">(</span><span class=\"n\">A.Coproduct</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">B.Coproduct</span> <span class=\"n\">v</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Formula.CoprodSimp</span> <span class=\"o\">(</span><span class=\"n\">F</span><span class=\"o\">:</span> <span class=\"n\">Formula</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">∪</span> <span class=\"n\">B</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">v</span><span class=\"o\">:</span> <span class=\"n\">Assignement</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Formula</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">\\</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">F.Coproduct</span> <span class=\"n\">v</span>\n</code></pre></div>\n<p>EDIT: the assumption that <code>Disjoint A B</code> is not important, once I grasp how to convert one dependent type into another.</p>",
        "id": 396953699,
        "sender_full_name": "Thomas Vigouroux",
        "timestamp": 1697479917
    },
    {
        "content": "<p>Hi, may I ping again in this topic ? I have been implementing things manually to circumvent the issue, but I'd really like it if there are better ways to do computations in a dependent type...</p>",
        "id": 397067165,
        "sender_full_name": "Thomas Vigouroux",
        "timestamp": 1697535271
    },
    {
        "content": "<p>I recommend that you define an explicit \"coercion\" function from one Finset of variables to another, and apply that explicitly.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">Formula.mono</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">Formula</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">S</span> <span class=\"bp\">⊆</span> <span class=\"n\">S'</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">Formula</span> <span class=\"n\">S'</span>\n  <span class=\"bp\">|</span> <span class=\"n\">bot</span><span class=\"o\">,</span>      <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">bot</span>\n  <span class=\"bp\">|</span> <span class=\"n\">var</span> <span class=\"n\">P</span><span class=\"o\">,</span>    <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">var</span> <span class=\"o\">⟨</span><span class=\"n\">P</span><span class=\"o\">,</span> <span class=\"n\">h</span> <span class=\"n\">P.prop</span><span class=\"o\">⟩</span>\n  <span class=\"bp\">|</span> <span class=\"n\">neg</span> <span class=\"n\">A</span><span class=\"o\">,</span>    <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">neg</span> <span class=\"o\">(</span><span class=\"n\">A.mono</span> <span class=\"n\">h</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">conj</span> <span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">,</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">conj</span> <span class=\"o\">(</span><span class=\"n\">A.mono</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">B.mono</span> <span class=\"n\">h</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">disj</span> <span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">,</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">conj</span> <span class=\"o\">(</span><span class=\"n\">A.mono</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">B.mono</span> <span class=\"n\">h</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Formula.CoprodSimp</span> <span class=\"o\">(</span><span class=\"n\">F</span><span class=\"o\">:</span> <span class=\"n\">Formula</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">∪</span> <span class=\"n\">B</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">v</span><span class=\"o\">:</span> <span class=\"n\">Assignement</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Formula</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">\\</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">F.Coproduct</span> <span class=\"n\">v</span> <span class=\"bp\">|&gt;.</span><span class=\"n\">mono</span> <span class=\"bp\">&lt;|</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 397072208,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1697536882
    },
    {
        "content": "<p>Okay, that's what I ended up doing, so thank you very much.</p>\n<p>I note the notations you have here, which simplify the process.</p>\n<p>Thank you very much !</p>",
        "id": 397101256,
        "sender_full_name": "Thomas Vigouroux",
        "timestamp": 1697546857
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"658705\">Thomas Vigouroux</span> has marked this topic as resolved.</p>",
        "id": 397101276,
        "sender_full_name": "Notification Bot",
        "timestamp": 1697546863
    }
]