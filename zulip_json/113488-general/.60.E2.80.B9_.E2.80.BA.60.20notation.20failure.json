[
    {
        "content": "<p><code>‹_›</code> has a weird failure when it's the entire proof:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">true</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"o\">‹</span><span class=\"n\">_</span><span class=\"o\">›</span> <span class=\"c1\">-- fails</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">true</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"n\">id</span> <span class=\"o\">‹</span><span class=\"n\">_</span><span class=\"o\">›</span> <span class=\"c1\">-- ok</span>\n</code></pre></div>\n<p>The error is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">type</span> <span class=\"n\">mismatch</span><span class=\"o\">,</span> <span class=\"n\">term</span>\n  <span class=\"n\">h1</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">true</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span>\n</code></pre></div>",
        "id": 356095116,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1683300399
    },
    {
        "content": "<p>is this lean 3?</p>",
        "id": 356098991,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1683301165
    },
    {
        "content": "<p>Wouldn't it be <code>(h1 : True)</code> in Lean 4?</p>",
        "id": 356099200,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1683301210
    },
    {
        "content": "<p>heh, <code>true</code> exists in Lean 4 but would probably be coerced to <code>true = true</code> if treated as a type</p>",
        "id": 356099522,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1683301293
    },
    {
        "content": "<p>If you expand out the notation, you can get a little better idea of the issue:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">true</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">assumption</span> <span class=\"o\">:</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>The beginning of this tactic proof is a metavariable, so <code>assumption</code> succeeds with the first local hypotheses. In fact, the <code>exact</code> tactic here can succeed:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">true</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">exact</span> <span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>Even with the following, <code>h1</code> succeeds and it's the type ascription notation itself that gets the type error:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">true</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>(You can check that by deleting the <code>: _</code> and seeing where the squiggle goes.)</p>",
        "id": 356151402,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1683315531
    },
    {
        "content": "<p>This suceeds:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">true</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">assumption</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>so it must have something to do with type ascription notation not getting the expected type in time.</p>",
        "id": 356151771,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1683315682
    },
    {
        "content": "<p>isn't this the same thing that makes the <code>(e : _)</code> trick work?</p>",
        "id": 356151811,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1683315709
    },
    {
        "content": "<p>it's a bit weird though since <code>by</code> blocks should run last, after all other elaboration</p>",
        "id": 356151929,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1683315751
    },
    {
        "content": "<p>I don't really understand the <code>(e : _)</code> trick or when it's supposed to work. Why does <code>example (h1 : true) (h2 : 1 = 1) : 1 = 1 := id (by assumption : _)</code> get an expected type?</p>",
        "id": 356151975,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1683315771
    },
    {
        "content": "<p>I guess because <code>by</code> blocks (are supposed to) run later?</p>",
        "id": 356152032,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1683315794
    },
    {
        "content": "<p>well for all I know it's just exploiting a bug in unification</p>",
        "id": 356152055,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1683315807
    },
    {
        "content": "<p>I don't think it was intentional</p>",
        "id": 356152090,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1683315822
    },
    {
        "content": "<p>(<code>(e :)</code> in lean 4 is intentional)</p>",
        "id": 356152108,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1683315833
    },
    {
        "content": "<p>I see, type ascription notation in Lean 3 <a href=\"https://github.com/leanprover-community/lean/blob/master/src/frontends/lean/elaborator.cpp#L806\">doesn't elaborate using the expected type</a>, which explains the <code>(e : _)</code> trick (though not this tactic thing).</p>",
        "id": 356152562,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1683316006
    },
    {
        "content": "<p>I think the expected order of events is that using <code>by</code> causes a metavariable to be returned (with a metavariable type in the <code>(by ... : _)</code> case), then the type of the mvar is unified with the real expected type, then the <code>by</code> metavariable is solved by the tactic block</p>",
        "id": 356153047,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1683316176
    },
    {
        "content": "<p>I'm going to guess what's happening when it's a \"top level\" expression, rather than an argument to <code>id</code>, the fact that there's <a href=\"https://github.com/leanprover-community/lean/blob/master/src/frontends/lean/elaborator.cpp#L4021\">this <code>synthesize()</code> before <code>enforce_type</code></a> means that when you're using the <code>(e : _)</code> trick the <code>by</code> metavariable never gets unified with the expected type before the tactic block is executed.</p>",
        "id": 356153761,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1683316445
    }
]