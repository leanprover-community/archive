[
    {
        "content": "<p>This pauses for a long time...</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.RepresentationTheory.Rep</span>\n\n<span class=\"n\">count_hearbeats</span> <span class=\"k\">in</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">Rep.ihom_coev_app_hom'</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">k</span> <span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">CommRing</span> <span class=\"n\">k</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">Rep</span> <span class=\"n\">k</span> <span class=\"n\">G</span><span class=\"o\">),</span>\n  <span class=\"o\">(</span><span class=\"n\">CategoryTheory.NatTrans.app</span> <span class=\"o\">(</span><span class=\"n\">CategoryTheory.ihom.coev</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"n\">B</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">hom</span> <span class=\"bp\">=</span>\n    <span class=\"n\">LinearMap.flip</span> <span class=\"o\">(</span><span class=\"n\">TensorProduct.mk</span> <span class=\"n\">k</span> <span class=\"o\">(</span><span class=\"n\">CoeSort.coe</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"bp\">↑</span><span class=\"o\">((</span><span class=\"n\">CategoryTheory.Functor.id</span> <span class=\"o\">(</span><span class=\"n\">Rep</span> <span class=\"n\">k</span> <span class=\"n\">G</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">obj</span> <span class=\"n\">B</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">fun</span> <span class=\"o\">{</span><span class=\"n\">k</span> <span class=\"n\">G</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">CommRing</span> <span class=\"n\">k</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"bp\">↦</span> <span class=\"n\">LinearMap.ext</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">↦</span> <span class=\"n\">LinearMap.ext</span> <span class=\"k\">fun</span> <span class=\"n\">x_1</span> <span class=\"bp\">↦</span> <span class=\"n\">rfl</span>\n</code></pre></div>\n<p>and then says <code>expected command</code> because you missed out a letter of <code>hearTbeats</code> :-/</p>\n<p>OK so now I learnt my lesson, I should use auto-complete. So I change the first line to <code>count_</code>, press ctrl-tab, and off we go again with the heavy <code>rfl</code> while it just says <code>loading...</code> :-/</p>",
        "id": 383702290,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1691687469
    },
    {
        "content": "<p>I had this typo just now too!</p>",
        "id": 383712007,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1691689403
    }
]