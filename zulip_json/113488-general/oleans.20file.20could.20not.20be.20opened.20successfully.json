[
    {
        "content": "<p>How can I purge local mathlib3 oleans? I think my local copy is broken, or I need to install an xz reader somehow.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Looking</span> <span class=\"n\">for</span> <span class=\"n\">mathlib</span> <span class=\"n\">oleans</span> <span class=\"n\">for</span> <span class=\"mi\">32</span><span class=\"n\">a7e53528</span>\n  <span class=\"n\">locally...</span>\n  <span class=\"n\">Found</span> <span class=\"kn\">local</span> <span class=\"n\">mathlib</span> <span class=\"n\">oleans</span>\n<span class=\"n\">Located</span> <span class=\"n\">matching</span> <span class=\"n\">cache</span>\n<span class=\"n\">Applying</span> <span class=\"n\">cache</span>\n<span class=\"n\">file</span> <span class=\"n\">could</span> <span class=\"n\">not</span> <span class=\"n\">be</span> <span class=\"n\">opened</span> <span class=\"n\">successfully</span><span class=\"o\">:</span>\n<span class=\"bp\">-</span> <span class=\"n\">method</span> <span class=\"n\">gz</span><span class=\"o\">:</span> <span class=\"n\">ReadError</span><span class=\"o\">(</span><span class=\"bp\">'</span><span class=\"n\">not</span> <span class=\"n\">a</span> <span class=\"n\">gzip</span> <span class=\"n\">file'</span><span class=\"o\">)</span>\n<span class=\"bp\">-</span> <span class=\"n\">method</span> <span class=\"n\">bz2</span><span class=\"o\">:</span> <span class=\"n\">ReadError</span><span class=\"o\">(</span><span class=\"bp\">'</span><span class=\"n\">not</span> <span class=\"n\">a</span> <span class=\"n\">bzip2</span> <span class=\"n\">file'</span><span class=\"o\">)</span>\n<span class=\"bp\">-</span> <span class=\"n\">method</span> <span class=\"n\">xz</span><span class=\"o\">:</span> <span class=\"n\">CompressionError</span><span class=\"o\">(</span><span class=\"bp\">'</span><span class=\"n\">lzma</span> <span class=\"n\">module</span> <span class=\"n\">is</span> <span class=\"n\">not</span> <span class=\"n\">available'</span><span class=\"o\">)</span>\n<span class=\"bp\">-</span> <span class=\"n\">method</span> <span class=\"n\">tar</span><span class=\"o\">:</span> <span class=\"n\">ReadError</span><span class=\"o\">(</span><span class=\"bp\">'</span><span class=\"n\">invalid</span> <span class=\"n\">header'</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 385644903,
        "sender_full_name": "Sky Wilshaw",
        "timestamp": 1692268100
    },
    {
        "content": "<p>Well, one good way to purge your mathlib3 oleans is to switch to using Lean 4. :-)</p>",
        "id": 385645868,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1692268509
    },
    {
        "content": "<p>Sorry, I would have to go read the <code>leanproject</code> source at this point to remember where it stores things. Perhaps a more recent user of Lean 3 will be able to actually help. :-)</p>",
        "id": 385646245,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1692268655
    },
    {
        "content": "<p>That's what I'm trying to do, haha! But I need to run mathport on lean 3 to get my lean 4 code.</p>",
        "id": 385646502,
        "sender_full_name": "Sky Wilshaw",
        "timestamp": 1692268757
    },
    {
        "content": "<p>It looks like the caches were stored in <code>~/.mathlib</code></p>",
        "id": 385646831,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1692268895
    },
    {
        "content": "<p>If you don't mind having to redownload, it should be safe to just delete that directory.</p>",
        "id": 385646856,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1692268907
    },
    {
        "content": "<p>I think my bigger issue at the moment is trying to use WSL2. I'll try the same procedure on an actual linux machine, I don't expect it to have this problem. Thanks!</p>",
        "id": 385647528,
        "sender_full_name": "Sky Wilshaw",
        "timestamp": 1692269153
    },
    {
        "content": "<p>(Everything froze...)</p>",
        "id": 385647598,
        "sender_full_name": "Sky Wilshaw",
        "timestamp": 1692269171
    },
    {
        "content": "<p>Feel free to ping me if you run into trouble. We do want to make sure people running mathport at project scale are not left behind!!</p>",
        "id": 385648699,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1692269576
    },
    {
        "content": "<p>Thanks, I'll let you know how it goes! For context, I'm porting <a href=\"https://github.com/leanprover-community/con-nf\">https://github.com/leanprover-community/con-nf</a></p>",
        "id": 385648978,
        "sender_full_name": "Sky Wilshaw",
        "timestamp": 1692269694
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> If you're interested, I've just finished porting the project. It came out to 12.4k LoC of Lean 4, translated from 12.2k LoC of Lean 3. I only ended up running mathport once, fixing all the little errors manually. Unsurprisingly mathport worked best on statements and proofs that exploited the kernel the least - things that didn't abuse defeqs, for example. I found that most of the time, it correctly guessed the case conventions of theorem <br>\n and definition statements, but often didn't propagate the name change to the uses of those theorems. In any case, the port only took a few days and everything's working just as well as it did back in Lean 3 - and a few of the more technical proofs are now <code>rfl</code>!</p>",
        "id": 387344292,
        "sender_full_name": "Sky Wilshaw",
        "timestamp": 1692997822
    },
    {
        "content": "<p>And CI is down from 20 mins to about 8! (not factorial)</p>",
        "id": 387344491,
        "sender_full_name": "Sky Wilshaw",
        "timestamp": 1692997958
    },
    {
        "content": "<p>Project page is <a href=\"https://leanprover-community.github.io/con-nf\">https://leanprover-community.github.io/con-nf</a></p>",
        "id": 387344542,
        "sender_full_name": "Sky Wilshaw",
        "timestamp": 1692997989
    },
    {
        "content": "<p>Congratulations! What is the current status of this project? Are you making good progress in addition to porting to Lean 4? Do you think you are getting close to a full formalization?</p>",
        "id": 387345259,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1692998435
    },
    {
        "content": "<p>Yes, I'm making good progress. I've proven the most important technical theorem of the project, the freedom of action theorem. It shows that there are a lot of permutations of the model in question (and moreover we can pick ones that have prescribed actions on small domains) and so the set of model elements can't be that large.</p>",
        "id": 387345417,
        "sender_full_name": "Sky Wilshaw",
        "timestamp": 1692998526
    },
    {
        "content": "<p>The Lean proof differs drastically from the paper proof - thousands of lines of code were needed to state and prove results that were just implicit in the paper.</p>",
        "id": 387345490,
        "sender_full_name": "Sky Wilshaw",
        "timestamp": 1692998563
    },
    {
        "content": "<p>The main issue is that every construction is wrapped in inductions inside inductions. On paper, you can pretty much claim whatever you like and appeal to well-foundedness, but in Lean you need to be careful about always referencing inductive hypotheses of the right form at the right time. The hardest part by far has been writing the statements of what is to be proven.</p>",
        "id": 387345753,
        "sender_full_name": "Sky Wilshaw",
        "timestamp": 1692998736
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"492774\">Sky Wilshaw</span> <a href=\"#narrow/stream/113488-general/topic/oleans.20file.20could.20not.20be.20opened.20successfully/near/387345753\">said</a>:</p>\n<blockquote>\n<p>The hardest part by far has been writing the statements of what is to be proven.</p>\n</blockquote>\n<p>I think this is pretty universal in formalized math, although it's probably worse than average in this specific project.</p>",
        "id": 387345881,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1692998807
    }
]