[
    {
        "content": "<p>/poll</p>",
        "id": 225952529,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1613024240
    },
    {
        "content": "<p>Oh, would it be better to put the poll in #general?</p>",
        "id": 225952590,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1613024326
    },
    {
        "content": "<p>This topic was moved here from <a class=\"stream-topic\" data-stream-id=\"144837\" href=\"/#narrow/stream/144837-PR-reviews/topic/.234684\">#PR reviews &gt; #4684</a> by <span class=\"user-mention silent\" data-user-id=\"123965\">Bryan Gin-ge Chen</span></p>",
        "id": 225952667,
        "sender_full_name": "Notification Bot",
        "timestamp": 1613024443
    },
    {
        "content": "<p>Quoting from <a href=\"https://github.com/leanprover-community/mathlib/issues/4684\">#4684</a>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/--</span>\n<span class=\"sd\">We put a partial order on ℂ so that `z ≤ w` exactly if `w - z` is real and nonnegative.</span>\n<span class=\"sd\">Complex numbers with different imaginary parts are incomparable.</span>\n<span class=\"sd\">-/</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">partial_order</span> <span class=\"n\">ℂ</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">le</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">z</span> <span class=\"n\">w</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">,</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span> <span class=\"bp\">∧</span> <span class=\"n\">w</span> <span class=\"bp\">=</span> <span class=\"n\">z</span> <span class=\"bp\">+</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n<span class=\"bp\">...</span>\n</code></pre></div>",
        "id": 225952680,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1613024471
    },
    {
        "content": "<p>Are there any other candidates for which we might want to use results from the order library?</p>",
        "id": 225953960,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1613026177
    },
    {
        "content": "<p>I am not sure whether this is relevant or not, but there are partial orderings on ℂ, different than the one above that appear in the literature.  For instance, when talking about Bridgeland stability conditions, (partially) ordering complex numbers by a choice of argument appears often.  One example, is on page 2 of the paper below, with even an explanatory picture:</p>\n<p><a href=\"https://www.maths.ed.ac.uk/~abayer/dc-lecture-notes.pdf\">https://www.maths.ed.ac.uk/~abayer/dc-lecture-notes.pdf</a></p>",
        "id": 225954414,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1613026708
    },
    {
        "content": "<p>Well it's not just a matter of whether there is any better order to put on the complexes. <em>Not</em> putting an order on the complexes should also be an option. Sometimes I think that we're undermining the benefits of type theory when we make everything apply to everything like this; I'm reminded of the incident where <code>nat</code> had a <code>has_coe_fn</code> to <code>nat -&gt; nat</code></p>",
        "id": 225955277,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1613027717
    },
    {
        "content": "<p>My rationale is that if you ask a mathematician \"are the complexes ordered\" the answer you will get is \"no\"</p>",
        "id": 225955358,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1613027813
    },
    {
        "content": "<p>I guess my ancient functional analysis origins are showing. I would have said \"yes\". :-)</p>",
        "id": 225955436,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1613027886
    },
    {
        "content": "<p>I have seen this particular order before, I think in coq or mizar, but it seems more like a formalization trick than anything else</p>",
        "id": 225955448,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1613027902
    },
    {
        "content": "<p>It's the standard ordering on any Banach <code>*</code>-algebra or C*-algebra, specialised to the smallest example of such.</p>",
        "id": 225955464,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1613027937
    },
    {
        "content": "<p>is there a wiki link for this?</p>",
        "id": 225955477,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1613027961
    },
    {
        "content": "<p>Just to clarify: what I meant by my comment is that I personally would not consider the complex numbers to be ordered, but I am happy with someone saying \"for this section, I am going to order the complex numbers as follows: [...]\".  Whether they use the \"lexicographic-like\" stuff with the reals, arguments, norms, or whatever else is less relevant (to me!).</p>\n<p>So, from this point of view, I believe that my position is close to Mario's.</p>",
        "id": 225955544,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1613028020
    },
    {
        "content": "<p>wikipedia does indeed say the ordering is only on the self-adjoint elements</p>",
        "id": 225955546,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1613028022
    },
    {
        "content": "<p><a href=\"https://en.wikipedia.org/wiki/C*-algebra#Structure_of_C*-algebras\">https://en.wikipedia.org/wiki/C*-algebra#Structure_of_C*-algebras</a></p>",
        "id": 225955651,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1613028157
    },
    {
        "content": "<p>Okay, I'll agree that extending the partial order, rather than just the self-adjoint elements, is not particularly important or useful.</p>",
        "id": 225955671,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1613028191
    },
    {
        "content": "<p>It's useful <em>for the sake of formalisation</em>, because you don't need to carry around witnesses of self-adjointness when talking about the ordering of self-adjoint elements.</p>",
        "id": 225955695,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1613028232
    },
    {
        "content": "<p>well that should be some kind of subspace. Of course this is pretty explicit for <code>real</code></p>",
        "id": 225955872,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1613028412
    },
    {
        "content": "<p>That said I'm sympathetic to the formalization argument and I won't fight too hard on this. I just want to double check that this isn't another division by zero kind of thing that will require us to defend the choice to aghast mainstream mathematicians all the time</p>",
        "id": 225956095,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1613028615
    },
    {
        "content": "<p>or maybe nat subtraction is a better parallel</p>",
        "id": 225956130,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1613028671
    },
    {
        "content": "<p>I'm pretty sure this is no where near as aghasting as monus.</p>",
        "id": 225958754,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1613030998
    },
    {
        "content": "<p>Are we talking about making this a global instance? I think most mathematicians expect C not to have an order</p>",
        "id": 225960534,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1613032364
    },
    {
        "content": "<p>Ok! How should I hide it away?</p>",
        "id": 225961968,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1613033370
    },
    {
        "content": "<p>Like Bryan said, another option is to have this be an instance in a locale. That means you would say <code>open_locale complex_order</code> or something like that and it would add <code>local attribute [instance] complex.partial_order</code> and so on</p>",
        "id": 225962118,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1613033492
    },
    {
        "content": "<p>Done!</p>",
        "id": 225968736,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1613037479
    },
    {
        "content": "<p>Reviving this question briefly: someone pointed out to me recently that it is completely standard to write <code>0 ≤ z</code> in informal mathematics, when <code>z</code> is a complex number to mean \"z is real and non-negative\".</p>\n<p>When the <code>partial_order ℂ</code> discussed above is available, it is possible to do exactly this in Lean too.</p>",
        "id": 227553851,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1614147937
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> do you have particular reasons against using a <code>locale</code>?</p>",
        "id": 227554713,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1614148663
    },
    {
        "content": "<p>Doesn't that give us the best of both worlds?</p>",
        "id": 227554725,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1614148674
    },
    {
        "content": "<p>It's also possible to write <code>I &lt;= z</code> with that partial order, and I'm not sure what this actually means would be in the top 3 guesses if you showed this to a random mathematician</p>",
        "id": 227555976,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1614149557
    },
    {
        "content": "<p>(that said, we are of course no strangers to definitions that make sense in a limited range and give pseudo-sensible results out of range)</p>",
        "id": 227556118,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1614149661
    },
    {
        "content": "<p>Right, we should just define <code>I &lt;= z</code> to mean <code>z = 37</code> whenever <code>z</code> is non-real <span aria-label=\"stuck out tongue wink\" class=\"emoji emoji-1f61c\" role=\"img\" title=\"stuck out tongue wink\">:stuck_out_tongue_wink:</span>   /s</p>",
        "id": 227556272,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1614149790
    },
    {
        "content": "<p>It's even pretty sensible: I &lt;= z means  z-I is a positive complex number, ie a positive real.</p>",
        "id": 227559738,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1614152491
    },
    {
        "content": "<p>I don't have my heart set on making this instance global. I just wanted to say that I'd realised people use it naturally.</p>",
        "id": 227559878,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1614152572
    },
    {
        "content": "<p>ooh, ok <span aria-label=\"thumbs up\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"thumbs up\">:thumbs_up:</span></p>",
        "id": 227560706,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1614153141
    },
    {
        "content": "<p>Ah great, then we can finally write <code>x ≤ 0 ∨ 0 ≤ x</code> instead of <code>im x = 0</code>.</p>",
        "id": 227563578,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1614155073
    },
    {
        "content": "<p>I would advise against making local(ized) instances for notation classes.  This might get confusing because the pretty-printer will always print it as <code>x ≤ 0</code>, but Lean can't parse <code>x ≤ 0</code> unless the locale is opened.</p>",
        "id": 227563751,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1614155187
    },
    {
        "content": "<p>In a similar vein, I think it would be just as confusing if we had multiple instances for <code>has_le ℂ</code>.</p>",
        "id": 227563780,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1614155216
    },
    {
        "content": "<p>I am not convinced that this type class is a good idea.  But if we have it, I think it should be global.</p>",
        "id": 227563949,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1614155322
    },
    {
        "content": "<p>In Scott's example you could just say <code>(z : ℝ) (h : 0 ≤ z)</code> or even <code>(z : ℝ≥0)</code> instead of <code>(z : ℂ) (h : 0 ≤ z)</code> and then use coercions.  And the coercion allows simp lemmas to trigger, while the hypothesis doesn't (as easily).</p>",
        "id": 227564178,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1614155436
    },
    {
        "content": "<p>Following up on Gabriel's comment, the Riemann hypothesis becomes a statement about zeros of the ζ-function lying on the line</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">{</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span> <span class=\"bp\">|</span> <span class=\"n\">I</span> <span class=\"bp\">*</span> <span class=\"n\">s</span> <span class=\"bp\">≤</span> <span class=\"n\">I</span> <span class=\"bp\">*</span> <span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"bp\">∨</span> <span class=\"n\">I</span> <span class=\"bp\">*</span> <span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"bp\">≤</span> <span class=\"n\">I</span> <span class=\"bp\">*</span> <span class=\"n\">s</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>i.e.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">ζ</span> <span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"n\">I</span> <span class=\"bp\">*</span> <span class=\"n\">s</span> <span class=\"bp\">≤</span> <span class=\"n\">I</span> <span class=\"bp\">*</span> <span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"bp\">∨</span> <span class=\"n\">I</span> <span class=\"bp\">*</span> <span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"bp\">≤</span> <span class=\"n\">I</span> <span class=\"bp\">*</span> <span class=\"n\">s</span>\n</code></pre></div>",
        "id": 227564731,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1614155761
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 227565461,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1614156125
    },
    {
        "content": "<p>I could be wrong: I had to change it a few times to get my head around the right condition...  ahahah</p>",
        "id": 227565565,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1614156174
    },
    {
        "content": "<p>Second try (this ≤ is really hard to interpret): is this a very convoluted way of saying <code>re s = 1/2</code>?</p>",
        "id": 227565614,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1614156207
    },
    {
        "content": "<p>I was trying to exploit </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">s</span> <span class=\"bp\">∨</span> <span class=\"n\">s</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span> <span class=\"bp\">↔</span> <span class=\"n\">im</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">im</span> <span class=\"n\">s</span>\n</code></pre></div>",
        "id": 227565729,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1614156265
    },
    {
        "content": "<p>Gabriel, indeed, that is what I was trying to achieve!  Ahaha</p>",
        "id": 227565747,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1614156284
    },
    {
        "content": "<p>I view this partial order as uncountably many incomparable orders, one for each imaginary part.  On a given line with a fixed imaginary part, you simply compare the real parts.  This is what it is, right?</p>",
        "id": 227565927,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1614156378
    },
    {
        "content": "<p>yes</p>",
        "id": 227565933,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1614156385
    },
    {
        "content": "<p>To be honest, I am not thrilled about this order, but I am also unlikely to actually ever seriously use an order on ℂ, so I am happy to go with whatever makes formalizing simpler.</p>",
        "id": 227566018,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1614156446
    },
    {
        "content": "<p>There is another order on the complexes that I have used before, namely lexicographic order of <code>(re z, im z)</code></p>",
        "id": 227566161,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1614156510
    },
    {
        "content": "<p>which has the advantage of being total</p>",
        "id": 227566194,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1614156537
    },
    {
        "content": "<p>The one in question is closer to lex on <code>(im z, re z)</code>, except that the order on <code>im</code> is inexistent: you can only compare something with itself.</p>",
        "id": 227566268,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1614156592
    },
    {
        "content": "<p>It coincides with both</p>",
        "id": 227566333,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1614156609
    },
    {
        "content": "<p>The given partial order is a subset of both total orders <code>(re z, im z)</code> and <code>(im z, re z)</code></p>",
        "id": 227566390,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1614156640
    },
    {
        "content": "<p>Yes, you are right: this is so confusing for me!  <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 227566436,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1614156684
    },
    {
        "content": "<p>Personally it makes more sense to me to sort the numbers <code>-1, -I, 0, I, 1</code> in that order</p>",
        "id": 227566571,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1614156770
    },
    {
        "content": "<p>like if I had a whole random collection of complex numbers and wanted to arrange them lex order seems the easiest to follow</p>",
        "id": 227566637,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1614156817
    },
    {
        "content": "<p>My tutees just taught me the \"jungle river metric\" on <code>ℝ^2</code>, which has similar features (although it does allow you to change the x coordinate, but at a cost).<br>\n(You should view the x-axis as a river and you can only travel vertically or along the river, so to go from (a,b) to (c,d) you first go vertically to the x-axis, then you slide on the river and finally you move vertically again)</p>",
        "id": 227566761,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1614156888
    },
    {
        "content": "<p>(Note: what follows was merged from another thread)</p>\n<p>With <a href=\"https://github.com/leanprover-community/mathlib4/pull/6210\">#6210</a> (see also <a href=\"#narrow/stream/113488-general/topic/PartialOrder.20and.20StarOrderedRing.20on.20IsROrC\">this thread</a>), the <code>IsROrC</code> class will now extend <code>PartialOrder</code>, so that we can have a <code>StarOrderedRing</code> instance for <code>IsROrC</code>. However, this would entail making the existing <em>scoped</em> <code>PartialOrder ℂ</code> instance a <em>global</em> instance (<code>x ≤ y ↔ x.re ≤ y.re ∧ x.im = y.im</code>). The question is: is that okay?</p>",
        "id": 379558354,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1690559895
    },
    {
        "content": "<p>/poll Can we make the <code>PartialOrder ℂ</code> instance global?<br>\nyes<br>\nno</p>",
        "id": 379558457,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1690559923
    },
    {
        "content": "<p>What would be the arguments <em>against</em> making this instance global?</p>\n<p>Of course, one shouldn't use <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>≤</mo></mrow><annotation encoding=\"application/x-tex\">\\le</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7719em;vertical-align:-0.136em;\"></span><span class=\"mrel\">≤</span></span></span></span> on <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">C</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{C}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6889em;\"></span><span class=\"mord mathbb\">C</span></span></span></span> too much in the first place... But when it is used in math, I think it is almost always in exactly the sense (<code>x ≤ y ↔ x.re ≤ y.re ∧ x.im = y.im</code>) that Jireh describes.</p>\n<p>Trying to force myself to think of some other mathematically reasonable meaning and use of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>≤</mo></mrow><annotation encoding=\"application/x-tex\">\\le</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7719em;vertical-align:-0.136em;\"></span><span class=\"mrel\">≤</span></span></span></span> on <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">C</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{C}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6889em;\"></span><span class=\"mord mathbb\">C</span></span></span></span>, I could only come up with \"two-dimensional cumulative distribution functions determining a Borel (probability) measure on <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">C</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{C}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6889em;\"></span><span class=\"mord mathbb\">C</span></span></span></span>\", in which case the reasonable choice of partial order would be (<code>x ≤ y ↔ x.re ≤ y.re ∧ x.im ≤ y.im</code>). But I doubt this other partial order should be a global instance. (For that purpose we have <code>Fin 2 → ℝ</code>, I guess.)</p>",
        "id": 379566805,
        "sender_full_name": "Kalle Kytölä",
        "timestamp": 1690561562
    },
    {
        "content": "<p>Kalle, turning your comments into an argument against it would go something like this:</p>\n<p>\"there are other partial orders we may want to consider on <code>ℂ</code> from time to time; e.g., two-dimensional cumulative distribution functions determining a Borel (probability) measure on <code>ℂ</code> result in the pointwise order (<code>x.re ≤ y.re ∧ x.im ≤ y.im</code>). If the instance suggested by the poll is made global, then to use this alternative partial order we would have to disable it locally.\"</p>\n<p>I'm not saying I support that argument, but you asked for an argument against it.</p>",
        "id": 379569684,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1690562180
    },
    {
        "content": "<blockquote>\n<p>What would be the arguments against making this instance global?</p>\n</blockquote>\n<p>That the order is surprising for people who aren't paying attention, I guess. Perhaps you wrote <code>z &lt; w</code> but meant to write <code>norm z &lt; norm w</code> or <code>z.re &lt; w.re</code>.<br>\nIf you think the complex partial order is stupid, then you will be annoyed that this silently did the wrong thing instead of giving you an error.</p>",
        "id": 379569738,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1690562192
    },
    {
        "content": "<p>Eric, I think what you're suggesting is probably (IMHO) the best argument against it. Although I think where it might be most confusing is if you wanted <code>norm z &lt; norm w</code> (or something related), but for some reason they were coerced to <code>ℂ</code>; then Lean doesn't complain, but you didn't get what you expected and it is sometimes easy to miss a <code>↑</code> in the goal.</p>",
        "id": 379571039,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1690562479
    },
    {
        "content": "<p>A good example of another family of scoped instances is the one that sets <code>{1} + {2, 3} = {3, 4}</code>; that's disabled behind the <code>Pointwise</code> locale, even though its the \"obvious\" instance</p>",
        "id": 379571182,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1690562506
    },
    {
        "content": "<p>I totally agree that the partial order is completely stupid, and indeed am savage with undergraduates when they write <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>z</mi><mo>≤</mo><mi>w</mi></mrow><annotation encoding=\"application/x-tex\">z\\leq w</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7719em;vertical-align:-0.136em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.04398em;\">z</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02691em;\">w</span></span></span></span> for complex numbers, but what I am unclear about is whether this instinct is a reasonable basis for arguing against not making the instance global. 6 years ago I would have also argued that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn><mi mathvariant=\"normal\">/</mi><mn>0</mn><mo>=</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">1/0=0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1/0</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">0</span></span></span></span> is also completely stupid and I have now made my peace with this idea having better understood the nature of Lean's type theory.</p>",
        "id": 379571908,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1690562669
    },
    {
        "content": "<p>Kevin, do you think a partial order instance on <code>H →L[ℂ] H</code> with <code>H</code> a Hilbert space is also stupid? (the order is propositionally the same as <code>f₁ ≤ f₂</code> iff <code>f₂ - f₁</code> is positive semidefinite.)</p>",
        "id": 379572346,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1690562765
    },
    {
        "content": "<p>A more mathematical comment: a few months ago when thinking about this order I wanted to dismiss it out of hand because everyone knows that (a) there's a standard proof which shows that there's no sensible order on the complexes (\"squares are nonnegative and -1 is negative\") and hence (b) the complexes are a field and a ring, and this order will not make them an ordered field or an ordered ring, and thus it's a terrible idea. However the argument for (a) shows that there is no <em>total</em> order on the complexes which is compatible with the ring structure (squares are nonnegative because you check the two cases x&gt;=0 and x&lt;0, so the argument doesn't apply to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>i</mi></mrow><annotation encoding=\"application/x-tex\">i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6595em;\"></span><span class=\"mord mathnormal\">i</span></span></span></span> which is neither &gt; 0 nor &lt; 0) and (b) when I actually started to think about it, the axioms you come up with are satisfied anyway; for example <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi><mo>≤</mo><mi>b</mi></mrow><annotation encoding=\"application/x-tex\">a\\leq b</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7719em;vertical-align:-0.136em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\">b</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>c</mi><mo>≤</mo><mi>d</mi></mrow><annotation encoding=\"application/x-tex\">c\\leq d</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7719em;vertical-align:-0.136em;\"></span><span class=\"mord mathnormal\">c</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\">d</span></span></span></span> doesn't imply <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi><mi>c</mi><mo>≤</mo><mi>b</mi><mi>d</mi></mrow><annotation encoding=\"application/x-tex\">ac\\leq bd</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7719em;vertical-align:-0.136em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\">c</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\">b</span><span class=\"mord mathnormal\">d</span></span></span></span>, but this isn't true for the reals either; you have to demand <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>0</mn><mo>≤</mo><mi>a</mi></mrow><annotation encoding=\"application/x-tex\">0\\leq a</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7804em;vertical-align:-0.136em;\"></span><span class=\"mord\">0</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">a</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>0</mn><mo>≤</mo><mi>c</mi></mrow><annotation encoding=\"application/x-tex\">0\\leq c</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7804em;vertical-align:-0.136em;\"></span><span class=\"mord\">0</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">c</span></span></span></span> to make this work, and this is true for the complexes with the proposed order. So even though my gut feeling is that this is horrible, I cannot mathematically justify this and so I might just be wrong.</p>",
        "id": 379573485,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1690563009
    },
    {
        "content": "<p>Jireh I have never seen that ordering in my life but perhaps my answer is: if it is a partial order which satisfies <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>0</mn><mo>≤</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">0\\leq 1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7804em;vertical-align:-0.136em;\"></span><span class=\"mord\">0</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span></span></span></span>, and if <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi><mo>≤</mo><mi>b</mi></mrow><annotation encoding=\"application/x-tex\">a\\leq b</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7719em;vertical-align:-0.136em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\">b</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>c</mi><mo>≤</mo><mi>d</mi></mrow><annotation encoding=\"application/x-tex\">c\\leq d</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7719em;vertical-align:-0.136em;\"></span><span class=\"mord mathnormal\">c</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\">d</span></span></span></span> implies <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi><mo>+</mo><mi>c</mi><mo>≤</mo><mi>b</mi><mo>+</mo><mi>d</mi></mrow><annotation encoding=\"application/x-tex\">a+c\\leq b+d</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6667em;vertical-align:-0.0833em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7719em;vertical-align:-0.136em;\"></span><span class=\"mord mathnormal\">c</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7778em;vertical-align:-0.0833em;\"></span><span class=\"mord mathnormal\">b</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\">d</span></span></span></span>, and if it also satisfies <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi><mi>c</mi><mo>≤</mo><mi>b</mi><mi>d</mi></mrow><annotation encoding=\"application/x-tex\">ac\\leq bd</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7719em;vertical-align:-0.136em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\">c</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\">b</span><span class=\"mord mathnormal\">d</span></span></span></span> under the additional assumptions <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>0</mn><mo>≤</mo><mi>a</mi></mrow><annotation encoding=\"application/x-tex\">0\\leq a</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7804em;vertical-align:-0.136em;\"></span><span class=\"mord\">0</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">a</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>0</mn><mo>≤</mo><mi>c</mi></mrow><annotation encoding=\"application/x-tex\">0\\leq c</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7804em;vertical-align:-0.136em;\"></span><span class=\"mord\">0</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">c</span></span></span></span> then I cannot really find a mathematical objection to it.</p>",
        "id": 379574061,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1690563142
    },
    {
        "content": "<p>Kevin, it's the standard order on selfadjoint elements, but extended to be defined on all elements by requiring that the imaginary parts are equal. It definitely <em>doesn't</em> satisfy <code>a * c ≤ b * d</code> if <code>0 ≤ a</code> and <code>0 ≤ c</code> because it lacks commutativity (this is partly why a <code>StarOrderedRing</code> is in general not an <code>OrderedRing</code>).</p>",
        "id": 379574682,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1690563298
    },
    {
        "content": "<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi><mi>c</mi><mo>≤</mo><mi>b</mi><mi>c</mi><mo>≤</mo><mi>b</mi><mi>d</mi></mrow><annotation encoding=\"application/x-tex\">ac\\leq bc\\leq bd</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7719em;vertical-align:-0.136em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\">c</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8304em;vertical-align:-0.136em;\"></span><span class=\"mord mathnormal\">b</span><span class=\"mord mathnormal\">c</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\">b</span><span class=\"mord mathnormal\">d</span></span></span></span>?</p>",
        "id": 379575273,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1690563413
    },
    {
        "content": "<p>both of those inequalities fail</p>",
        "id": 379575349,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1690563429
    },
    {
        "content": "<p>Oh interesting. Just to be clear we're assuming <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>0</mn><mo>≤</mo><mi>a</mi></mrow><annotation encoding=\"application/x-tex\">0\\leq a</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7804em;vertical-align:-0.136em;\"></span><span class=\"mord\">0</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">a</span></span></span></span> here, which implies that the imaginary part of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi></mrow><annotation encoding=\"application/x-tex\">a</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">a</span></span></span></span> is zero. This doesn't help? This is what saves us in the complexes.</p>",
        "id": 379575766,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1690563508
    },
    {
        "content": "<p>Right, but <code>ℂ</code> is commutative. The product of positive operators is positive if and only if they commute. (Essentially because that's what's needed to make the product selfadjoint)</p>",
        "id": 379575910,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1690563535
    },
    {
        "content": "<p>Thanks everyone for much better arguments than I had in mind!</p>\n<p>After these, I do like Eric's balanced vote for <em>both yes and no</em> <span aria-label=\"rofl\" class=\"emoji emoji-1f923\" role=\"img\" title=\"rofl\">:rofl:</span>, but I think the self-adjoint use case is so dear to me that I vote for whatever makes it the most convenient (which I believe is Jireh's proposed instance).</p>",
        "id": 379577238,
        "sender_full_name": "Kalle Kytölä",
        "timestamp": 1690563811
    },
    {
        "content": "<p>Note that this has been discussed (at least once) before:</p>\n<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/116395-maths/topic/complex.20order/near/255140481\">said</a>:</p>\n<blockquote>\n<p>I think it was/is controversial to make that order an instance on <code>ℂ</code>, because it is pretty non-canonical.</p>\n</blockquote>",
        "id": 379577582,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1690563888
    },
    {
        "content": "<p>In fact, we even <a href=\"#narrow/stream/113488-general/topic/Poll.3A.20partial.20order.20on.20complex.20numbers.20in.20mathlib/near/225952529\">had a poll!</a> (in a different thread again)</p>",
        "id": 379577928,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1690563968
    },
    {
        "content": "<p>Kevin the inequality that holds in a <code>StarOrderedRing</code> is <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=conjugate_le_conjugate#doc\">docs#conjugate_le_conjugate</a> <code>a ≤ b → star c * a * c ≤ star c * b * c</code>. (with our definition, this holds for all <code>a b c</code>, but mathematically you should think of <code>a b</code> as being self-adjoint and <code>c</code> as being anything). When your ring is commutative and positive elements (things of the form <code>star c * c</code>) have positive square roots, then you can get <code>0 ≤ c → a ≤ b → c * a ≤ c * b</code> because <code>sqrt c</code> exists (and is positive, hence selfadjoint too) and <code>c * a = sqrt c * a * sqrt c ≤ sqrt c * b * sqrt b = c * b</code>.</p>",
        "id": 379578289,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1690564046
    },
    {
        "content": "<p>As I said in another thread, the thing that really sold this order to me is the fact that it’s the natural order coming from the star algebra structure.</p>",
        "id": 379578574,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1690564095
    },
    {
        "content": "<p>I see I even upvoted <a href=\"#narrow/stream/116395-maths/topic/complex.20order/near/255168162\">Kevin's message</a> against the instance in that thread, but I think that message gave the impression of using <code>a ≤ b</code> as an obscure form of hypothesis, which I don't think it would be in clear enough operator-theory context.</p>\n<p>(But I'm slightly torn: the \"readable to any mathematician not familiar with mathlib\" is a strong argument, and Eric's position seems ever more tempting. <span aria-label=\"balance\" class=\"emoji emoji-2696\" role=\"img\" title=\"balance\">:balance:</span> )</p>",
        "id": 379578831,
        "sender_full_name": "Kalle Kytölä",
        "timestamp": 1690564159
    },
    {
        "content": "<p>By the way, maybe I’ve been influenced by Lean too early, but I don’t remember ever seeing the order on operators being restricted to self adjoint elements 🤔</p>",
        "id": 379579337,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1690564261
    },
    {
        "content": "<p>As far as readability is concerned, I'm skeptical that this will really be a problem, even in the context of <a href=\"#narrow/stream/116395-maths/topic/complex.20order/near/255168162\">Kevin's message</a>. For example, I think it's totally natural for a mathematician to say that <code>z : ℂ</code> is positive (they mean <code>z ∈ Set.range ((↑) : ℝ≥0 → ℂ)</code>), which is just phrased as <code>0 ≤ z</code> with this partial order instance. Likewise, to say <code>z : ℂ</code> is not positive just means <code>z ∉ Set.range ((↑) : ℝ≥0 → ℂ)</code> (or <code>¬ (0 ≤ z)</code>.</p>\n<p>The only small footgun I see in that regard is that <code>¬ (0 ≤ z)</code> is not equivalent to <code>z &lt; 0</code>, but of course that's to be expected since <code>ℂ</code> isn't a <em>linear</em> order.</p>",
        "id": 379583973,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1690565308
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113488-general/topic/global.20PartialOrder.20.E2.84.82.20instance/near/379577928\">said</a>:</p>\n<blockquote>\n<p>In fact, we even <a href=\"#narrow/stream/113488-general/topic/Poll.3A.20partial.20order.20on.20complex.20numbers.20in.20mathlib/near/225952529\">had a poll!</a> (in a different thread again)</p>\n</blockquote>\n<p>should we merge these threads? They ask exactly the same question.</p>",
        "id": 379585813,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1690565684
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> in case it affects your decision, we <em>do</em> already have the <code>StrictOrderedCommRing ℂ</code> instance in the scope in which <code>PartialOrder ℂ</code> is declared.</p>",
        "id": 379586223,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1690565748
    },
    {
        "content": "<p>26 messages were moved here from <a class=\"stream-topic\" data-stream-id=\"113488\" href=\"/#narrow/stream/113488-general/topic/global.20PartialOrder.20.E2.84.82.20instance\">#general &gt; global PartialOrder ℂ instance</a> by <span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span>.</p>",
        "id": 379587437,
        "sender_full_name": "Notification Bot",
        "timestamp": 1690565927
    },
    {
        "content": "<p>I don't really use the complexes so I was not going to vote.</p>",
        "id": 379591154,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1690566504
    },
    {
        "content": "<p>I mean, I know I made the PR which introduced them to mathlib in 2017 ;-) <span aria-label=\"older man\" class=\"emoji emoji-1f474\" role=\"img\" title=\"older man\">:older_man:</span> but I've moved on since then :-)</p>",
        "id": 379591370,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1690566540
    },
    {
        "content": "<p>The readability argument is very good against results stated directly about <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">C</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{C}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6889em;\"></span><span class=\"mord mathbb\">C</span></span></span></span> using <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>≤</mo></mrow><annotation encoding=\"application/x-tex\">\\le</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7719em;vertical-align:-0.136em;\"></span><span class=\"mrel\">≤</span></span></span></span>. But I think the intention is to only put results in the library about generic star-ordered rings (or similar), in which case I don't think we would be actively misleading the mathematician not familiar with mathlib.</p>\n<p>(Or maybe the form <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>0</mn><mo>≤</mo><mi>z</mi></mrow><annotation encoding=\"application/x-tex\">0 \\le z</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7804em;vertical-align:-0.136em;\"></span><span class=\"mord\">0</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.04398em;\">z</span></span></span></span> where <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>z</mi><mo>∈</mo><mi mathvariant=\"double-struck\">C</mi></mrow><annotation encoding=\"application/x-tex\">z \\in \\mathbb{C}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.04398em;\">z</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6889em;\"></span><span class=\"mord mathbb\">C</span></span></span></span> would still be acceptable as a hypothesis, but I think this is still non-misleading.)</p>",
        "id": 379592368,
        "sender_full_name": "Kalle Kytölä",
        "timestamp": 1690566718
    },
    {
        "content": "<p>Kalle, I'm not sure I agree that we would only have results in the library about generic star ordered rings. I could certainly imagine stating inequalities about continuous functions taking values in <code>ℂ</code>, because these would be relevant to the continuous functional calculus.</p>",
        "id": 379593343,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1690566893
    },
    {
        "content": "<p>Maybe <span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span> can give an opinion on whether <code>open scoped Pointwise</code> causes any trouble in combinatorics</p>",
        "id": 379593711,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1690566964
    },
    {
        "content": "<p>Ok, thanks for the warning, Jireh! I think I'm still mildly in favor...</p>\n<p>(I think if this weren't a global instance, the files containing those <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">C</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{C}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6889em;\"></span><span class=\"mord mathbb\">C</span></span></span></span>-specific of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">C</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{C}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6889em;\"></span><span class=\"mord mathbb\">C</span></span></span></span>-valued-function-specific results would still make it an instance, and it's not that much of a readability improvement. Ultimately one just has to know the definitions...)</p>",
        "id": 379593791,
        "sender_full_name": "Kalle Kytölä",
        "timestamp": 1690566978
    },
    {
        "content": "<p>Ultimately I think the only things to worry about here are:</p>\n<ul>\n<li>People who are confused when they get this partial order and would prefer not to get one</li>\n<li>People who are confused when they expected this order but don't get it (because they forgot to write <code>open scoped ComplexOrder</code>)</li>\n<li>Problems with using <code>open scoped</code> for instances in general</li>\n</ul>",
        "id": 379594099,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1690567055
    },
    {
        "content": "<p>Would it be possible to pretty-print the order with a subscript as in <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mo>≤</mo><mi mathvariant=\"double-struck\">C</mi></msub></mrow><annotation encoding=\"application/x-tex\">\\le _{\\mathbb{C}}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.786em;vertical-align:-0.15em;\"></span><span class=\"mrel\"><span class=\"mrel\">≤</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3322em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathbb mtight\">C</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>?  My biggest concern is the \"surprise\" effect of having an order on <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">C</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{C}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6889em;\"></span><span class=\"mord mathbb\">C</span></span></span></span>.</p>",
        "id": 379608178,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1690570491
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"321459\">Damiano Testa</span> <a href=\"#narrow/stream/113488-general/topic/Poll.3A.20partial.20order.20on.20complex.20numbers.20in.20mathlib/near/379608178\">said</a>:</p>\n<blockquote>\n<p>Would it be possible to pretty-print the order with a subscript as in <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mo>≤</mo><mi mathvariant=\"double-struck\">C</mi></msub></mrow><annotation encoding=\"application/x-tex\">\\le _{\\mathbb{C}}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.786em;vertical-align:-0.15em;\"></span><span class=\"mrel\"><span class=\"mrel\">≤</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3322em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathbb mtight\">C</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>?  My biggest concern is the \"surprise\" effect of having an order on <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">C</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{C}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6889em;\"></span><span class=\"mord mathbb\">C</span></span></span></span>.</p>\n</blockquote>\n<p>I hope, someone can write an unexpander for this.</p>",
        "id": 379672635,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1690594959
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"373986\">Kalle Kytölä</span> <a href=\"#narrow/stream/113488-general/topic/Poll.3A.20partial.20order.20on.20complex.20numbers.20in.20mathlib/near/379592368\">said</a>:</p>\n<blockquote>\n<p>The readability argument is very good against results stated directly about <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">C</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{C}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6889em;\"></span><span class=\"mord mathbb\">C</span></span></span></span> using <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>≤</mo></mrow><annotation encoding=\"application/x-tex\">\\le</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7719em;vertical-align:-0.136em;\"></span><span class=\"mrel\">≤</span></span></span></span>. But I think the intention is to only put results in the library about generic star-ordered rings (or similar), in which case I don't think we would be actively misleading the mathematician not familiar with mathlib.</p>\n<p>(Or maybe the form <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>0</mn><mo>≤</mo><mi>z</mi></mrow><annotation encoding=\"application/x-tex\">0 \\le z</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7804em;vertical-align:-0.136em;\"></span><span class=\"mord\">0</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.04398em;\">z</span></span></span></span> where <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>z</mi><mo>∈</mo><mi mathvariant=\"double-struck\">C</mi></mrow><annotation encoding=\"application/x-tex\">z \\in \\mathbb{C}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.04398em;\">z</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6889em;\"></span><span class=\"mord mathbb\">C</span></span></span></span> would still be acceptable as a hypothesis, but I think this is still non-misleading.)</p>\n</blockquote>\n<p>IMHO, at least comparison with zero should be allowed. Then theorems like <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Complex.continuousAt_arg#doc\">docs#Complex.continuousAt_arg</a> can be formulated in a more natural way <code>h : ¬z ≤ 0</code></p>",
        "id": 379672964,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1690595089
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113488-general/topic/Poll.3A.20partial.20order.20on.20complex.20numbers.20in.20mathlib/near/379593711\">said</a>:</p>\n<blockquote>\n<p>Maybe <span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> can give an opinion on whether <code>open scoped Pointwise</code> causes any trouble in combinatorics</p>\n</blockquote>\n<p>Absolutely not. <code>pointwise</code> is in fact my most frequently opened locale.</p>",
        "id": 379949763,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1690700412
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110050\">@Sebastien Gouezel</span>, <span class=\"user-mention\" data-user-id=\"240862\">@Oliver Nash</span>, <span class=\"user-mention\" data-user-id=\"238446\">@Anne Baanen</span>, <span class=\"user-mention\" data-user-id=\"111080\">@Floris van Doorn</span>: has your opinion changed in the two years between the polls?</p>",
        "id": 380271157,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1690797600
    },
    {
        "content": "<p>If I understand the message history here correctly: the plan is to make <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=StarOrderedRing#doc\">docs#StarOrderedRing</a> a superclass of <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=IsROrC#doc\">docs#IsROrC</a>, which would make the currently scoped order on <code>ℂ</code> a global instance?</p>",
        "id": 380272774,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1690797891
    },
    {
        "content": "<p>My hesitation to make the order global is that it wasn't obviously the right one and we might want other orders instead. StarOrderedRing sounds appropriately general so in that case I'm happy with the change.</p>",
        "id": 380273842,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1690798082
    },
    {
        "content": "<p>That's not really what this poll is about though: we can make the superclass without making it global, so we don't need to mix the votes here</p>",
        "id": 380273954,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1690798095
    },
    {
        "content": "<p>Unless your comment is \"oh, this is obviously the right order after all!\"</p>",
        "id": 380274270,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1690798149
    },
    {
        "content": "<p>I see, then I suppose I have one more question: did anyone need to put another order on ℂ in the meantime?</p>",
        "id": 380274610,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1690798213
    },
    {
        "content": "<p>I think the answer to that is probably no.</p>",
        "id": 380275064,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1690798304
    },
    {
        "content": "<p>Alright, thanks for catching me up! Then my vote is now weak support for <code>scoped</code>.</p>",
        "id": 380275329,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1690798349
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113488-general/topic/Poll.3A.20partial.20order.20on.20complex.20numbers.20in.20mathlib/near/380271157\">said</a>:</p>\n<blockquote>\n<p><strong>Oliver Nash</strong>: has your opinion changed in the two years between the polls?</p>\n</blockquote>\n<p>No, but I haven't thought carefully about this so I decided not to vote in the new poll.</p>",
        "id": 380278400,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1690798918
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113488-general/topic/Poll.3A.20partial.20order.20on.20complex.20numbers.20in.20mathlib/near/380273954\">said</a>:</p>\n<blockquote>\n<p>we can make the superclass without making it global, so we don't need to mix the votes here</p>\n</blockquote>\n<p>Looking quickly now I cannot easily reconcile this claim witht he claim in <a href=\"#narrow/stream/113488-general/topic/Poll.3A.20partial.20order.20on.20complex.20numbers.20in.20mathlib/near/379558354\">new poll</a> saying that we would have to make the partial order instance global to create the star-ordered ring instance.</p>",
        "id": 380278684,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1690798967
    },
    {
        "content": "<p>To be totally honest, I think there are already enough oars in this boat so I'm reluctant to spend time on it.</p>",
        "id": 380278968,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1690799032
    },
    {
        "content": "<p>We can add <code>le</code> and <code>lt</code> fields to <code>IsROrC</code> instead of adding <code>PartialOrder K</code> to <code>extends</code>.</p>",
        "id": 380454913,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1690828848
    },
    {
        "content": "<p>But I would prefer to have a global <code>StarOrderedRing</code> instance.</p>",
        "id": 380454984,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1690828865
    },
    {
        "content": "<p>Given that we now have a <code>StarOrderedRing</code> class for which the complexes are an instance, I don't feel strongly anymore about my position to keep the order on <code>ℂ</code> scoped. I think we can still keep it scoped (it seems to work fine for the pointwise operations on sets - so I see no reason it would be annoying here), but it's also ok with me if we make it global.</p>",
        "id": 380689267,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1690894492
    }
]