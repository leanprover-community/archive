[
    {
        "content": "<p>I want to use <code>mathport</code> for my own project (to be ported from Lean 3 to Lean 4). Is there any tutorial for that?</p>",
        "id": 368508195,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1687430932
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathport#running-on-a-project-other-than-mathlib\">https://github.com/leanprover-community/mathport#running-on-a-project-other-than-mathlib</a></p>",
        "id": 368508963,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1687431077
    },
    {
        "content": "<p>Can it be done on Windows please?</p>",
        "id": 368509617,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1687431203
    },
    {
        "content": "<p>If you do have WSL and Windows instructions aren't available, you can probably use <a href=\"https://ubuntu.com/tutorials/install-ubuntu-on-wsl2-on-windows-11-with-gui-support#1-overview\">the Microsoft Store to install Ubuntu</a> and follow the Linux instructions.</p>",
        "id": 368510237,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1687431328
    },
    {
        "content": "<p>You may need to go boldly where no mathport run has gone before :)</p>",
        "id": 368510328,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1687431348
    },
    {
        "content": "<p>Another option is to run mathport within a gitpod instance</p>",
        "id": 368512496,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1687431776
    },
    {
        "content": "<p>Can I use a Gitpod instance made from the mathlib4 repository for that?</p>",
        "id": 368514526,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1687432179
    },
    {
        "content": "<p>No, you should use the mathport gitpod instance</p>",
        "id": 368534325,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1687436044
    },
    {
        "content": "<p>From here?<br>\n<a href=\"https://github.com/leanprover-community/mathport\">https://github.com/leanprover-community/mathport</a><br>\nAny idea whether Codespaces works as well as Gitpod for this purpose?</p>",
        "id": 368536439,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1687436483
    },
    {
        "content": "<p>Well, there is <a href=\"https://github.com/leanprover-community/mathport/blob/master/.gitpod.yml\">gitpod configuration</a> but no codespace configuration</p>",
        "id": 368538919,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1687436985
    },
    {
        "content": "<p>So if you use codespaces you're starting from a clean linux machine, rather than one with everything pre-installed</p>",
        "id": 368538996,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1687437002
    },
    {
        "content": "<p>Will <code>mathport</code> port my tactics as well as my definitions and lemmas?</p>",
        "id": 368568675,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1687442264
    },
    {
        "content": "<p>No, tactics have to be ported by hand</p>",
        "id": 368568962,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1687442316
    },
    {
        "content": "<p>Because the meta framework changed radically</p>",
        "id": 368569025,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1687442328
    },
    {
        "content": "<p>What about if  I have <code>sorry</code>s, will that cause a problem?</p>",
        "id": 368573735,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1687443011
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"325367\">Mauricio Collares</span> <a href=\"#narrow/stream/113488-general/topic/Tutorial.20for.20mathport/near/368510237\">said</a>:</p>\n<blockquote>\n<p>If you do have WSL and Windows instructions aren't available, you can probably use <a href=\"https://ubuntu.com/tutorials/install-ubuntu-on-wsl2-on-windows-11-with-gui-support#1-overview\">the Microsoft Store to install Ubuntu</a> and follow the Linux instructions.</p>\n</blockquote>\n<p>I followed the first step of the tutorial for Debian/Ubuntu in my WSL Ubuntu.<br>\nIt continues with \"In the mathport folder\".<br>\nWhat mathport folder does it talk about?</p>",
        "id": 368575249,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1687443215
    },
    {
        "content": "<p>Presumably the folder you have cloned mathport into</p>",
        "id": 368576466,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1687443415
    },
    {
        "content": "<p>This step is not preceded by clone the <code>mathport</code> repository, is it?</p>",
        "id": 368577624,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1687443579
    },
    {
        "content": "<p>I guess the instructions assume you have already cloned the repo.</p>",
        "id": 368578152,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1687443640
    },
    {
        "content": "<p>Is it alright if I first downloaded the dependencies, then I clone the repo and do <code>lake exe cache get</code> afterwards?</p>",
        "id": 368578686,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1687443715
    },
    {
        "content": "<p>Yes that should be fine</p>",
        "id": 368578841,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1687443730
    },
    {
        "content": "<p>Ok I am trying to get this working but I get an error on the <code>make source</code> instruction, so I am switching to gitpod. But how do I clone my own repository into the gitpod? Gitpod says \"write access to repository not granted\". edit nvm i'm dumb my repo was private</p>",
        "id": 368588085,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1687445134
    },
    {
        "content": "<p><code>make source</code> on my local machine gives me</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">boltonbailey</span><span class=\"bp\">@</span><span class=\"n\">starlight</span> <span class=\"n\">mathport</span> <span class=\"bp\">%</span> <span class=\"n\">make</span> <span class=\"n\">source</span>\n<span class=\"n\">mkdir</span> <span class=\"bp\">-</span><span class=\"n\">p</span> <span class=\"n\">sources</span>\n<span class=\"k\">if</span> <span class=\"o\">[</span> <span class=\"bp\">!</span> <span class=\"bp\">-</span><span class=\"n\">d</span> <span class=\"s2\">\"sources/mathlib/.git\"</span> <span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"k\">then</span> <span class=\"bp\">\\</span>\n        <span class=\"n\">cd</span> <span class=\"n\">sources</span> <span class=\"bp\">&amp;&amp;</span> <span class=\"n\">git</span> <span class=\"n\">clone</span> <span class=\"c1\">--depth 1 https://github.com/leanprover-community/mathlib.git; \\</span>\n    <span class=\"n\">fi</span>\n<span class=\"n\">Cloning</span> <span class=\"n\">into</span> <span class=\"bp\">'</span><span class=\"n\">mathlib'...</span>\n<span class=\"n\">remote</span><span class=\"o\">:</span> <span class=\"n\">Enumerating</span> <span class=\"n\">objects</span><span class=\"o\">:</span> <span class=\"mi\">4015</span><span class=\"o\">,</span> <span class=\"n\">done.</span>\n<span class=\"n\">remote</span><span class=\"o\">:</span> <span class=\"n\">Counting</span> <span class=\"n\">objects</span><span class=\"o\">:</span> <span class=\"mi\">100</span><span class=\"bp\">%</span> <span class=\"o\">(</span><span class=\"mi\">4015</span><span class=\"bp\">/</span><span class=\"mi\">4015</span><span class=\"o\">),</span> <span class=\"n\">done.</span>\n<span class=\"n\">remote</span><span class=\"o\">:</span> <span class=\"n\">Compressing</span> <span class=\"n\">objects</span><span class=\"o\">:</span> <span class=\"mi\">100</span><span class=\"bp\">%</span> <span class=\"o\">(</span><span class=\"mi\">3911</span><span class=\"bp\">/</span><span class=\"mi\">3911</span><span class=\"o\">),</span> <span class=\"n\">done.</span>\n<span class=\"n\">remote</span><span class=\"o\">:</span> <span class=\"n\">Total</span> <span class=\"mi\">4015</span> <span class=\"o\">(</span><span class=\"n\">delta</span> <span class=\"mi\">91</span><span class=\"o\">),</span> <span class=\"n\">reused</span> <span class=\"mi\">678</span> <span class=\"o\">(</span><span class=\"n\">delta</span> <span class=\"mi\">53</span><span class=\"o\">),</span> <span class=\"n\">pack</span><span class=\"bp\">-</span><span class=\"n\">reused</span> <span class=\"mi\">0</span>\n<span class=\"n\">Receiving</span> <span class=\"n\">objects</span><span class=\"o\">:</span> <span class=\"mi\">100</span><span class=\"bp\">%</span> <span class=\"o\">(</span><span class=\"mi\">4015</span><span class=\"bp\">/</span><span class=\"mi\">4015</span><span class=\"o\">),</span> <span class=\"mi\">12</span><span class=\"bp\">.</span><span class=\"mi\">08</span> <span class=\"n\">MiB</span> <span class=\"bp\">|</span> <span class=\"mi\">7</span><span class=\"bp\">.</span><span class=\"mi\">66</span> <span class=\"n\">MiB</span><span class=\"bp\">/</span><span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">done.</span>\n<span class=\"n\">Resolving</span> <span class=\"n\">deltas</span><span class=\"o\">:</span> <span class=\"mi\">100</span><span class=\"bp\">%</span> <span class=\"o\">(</span><span class=\"mi\">91</span><span class=\"bp\">/</span><span class=\"mi\">91</span><span class=\"o\">),</span> <span class=\"n\">done.</span>\n<span class=\"n\">cd</span> <span class=\"n\">sources</span><span class=\"bp\">/</span><span class=\"n\">mathlib</span> <span class=\"bp\">&amp;&amp;</span> <span class=\"n\">git</span> <span class=\"n\">clean</span> <span class=\"bp\">-</span><span class=\"n\">xfd</span> <span class=\"bp\">&amp;&amp;</span> <span class=\"n\">git</span> <span class=\"n\">fetch</span> <span class=\"bp\">&amp;&amp;</span> <span class=\"n\">git</span> <span class=\"n\">checkout</span> <span class=\"s2\">\"origin/master\"</span> <span class=\"c1\">--</span>\n<span class=\"n\">Note</span><span class=\"o\">:</span> <span class=\"n\">switching</span> <span class=\"n\">to</span> <span class=\"bp\">'</span><span class=\"n\">origin</span><span class=\"bp\">/</span><span class=\"n\">master'.</span>\n\n<span class=\"n\">You</span> <span class=\"n\">are</span> <span class=\"k\">in</span> <span class=\"bp\">'</span><span class=\"n\">detached</span> <span class=\"n\">HEAD'</span> <span class=\"n\">state.</span> <span class=\"n\">You</span> <span class=\"n\">can</span> <span class=\"n\">look</span> <span class=\"n\">around</span><span class=\"o\">,</span> <span class=\"n\">make</span> <span class=\"n\">experimental</span>\n<span class=\"n\">changes</span> <span class=\"n\">and</span> <span class=\"n\">commit</span> <span class=\"n\">them</span><span class=\"o\">,</span> <span class=\"n\">and</span> <span class=\"n\">you</span> <span class=\"n\">can</span> <span class=\"n\">discard</span> <span class=\"n\">any</span> <span class=\"n\">commits</span> <span class=\"n\">you</span> <span class=\"n\">make</span> <span class=\"k\">in</span> <span class=\"n\">this</span>\n<span class=\"n\">state</span> <span class=\"n\">without</span> <span class=\"n\">impacting</span> <span class=\"n\">any</span> <span class=\"n\">branches</span> <span class=\"kd\">by</span> <span class=\"n\">switching</span> <span class=\"n\">back</span> <span class=\"n\">to</span> <span class=\"n\">a</span> <span class=\"n\">branch.</span>\n\n<span class=\"n\">If</span> <span class=\"n\">you</span> <span class=\"n\">want</span> <span class=\"n\">to</span> <span class=\"n\">create</span> <span class=\"n\">a</span> <span class=\"n\">new</span> <span class=\"n\">branch</span> <span class=\"n\">to</span> <span class=\"n\">retain</span> <span class=\"n\">commits</span> <span class=\"n\">you</span> <span class=\"n\">create</span><span class=\"o\">,</span> <span class=\"n\">you</span> <span class=\"n\">may</span>\n<span class=\"k\">do</span> <span class=\"n\">so</span> <span class=\"o\">(</span><span class=\"n\">now</span> <span class=\"n\">or</span> <span class=\"n\">later</span><span class=\"o\">)</span> <span class=\"kd\">by</span> <span class=\"n\">using</span> <span class=\"bp\">-</span><span class=\"n\">c</span> <span class=\"k\">with</span> <span class=\"n\">the</span> <span class=\"n\">switch</span> <span class=\"n\">command.</span> <span class=\"n\">Example</span><span class=\"o\">:</span>\n\n  <span class=\"n\">git</span> <span class=\"n\">switch</span> <span class=\"bp\">-</span><span class=\"n\">c</span> <span class=\"bp\">&lt;</span><span class=\"n\">new</span><span class=\"bp\">-</span><span class=\"n\">branch</span><span class=\"bp\">-</span><span class=\"n\">name</span><span class=\"bp\">&gt;</span>\n\n<span class=\"n\">Or</span> <span class=\"n\">undo</span> <span class=\"n\">this</span> <span class=\"n\">operation</span> <span class=\"k\">with</span><span class=\"o\">:</span>\n\n  <span class=\"n\">git</span> <span class=\"n\">switch</span> <span class=\"bp\">-</span>\n\n<span class=\"n\">Turn</span> <span class=\"n\">off</span> <span class=\"n\">this</span> <span class=\"n\">advice</span> <span class=\"kd\">by</span> <span class=\"n\">setting</span> <span class=\"n\">config</span> <span class=\"kd\">variable</span> <span class=\"n\">advice.detachedHead</span> <span class=\"n\">to</span> <span class=\"n\">false</span>\n\n<span class=\"n\">HEAD</span> <span class=\"n\">is</span> <span class=\"n\">now</span> <span class=\"n\">at</span> <span class=\"mi\">1</span><span class=\"n\">b089e3</span> <span class=\"n\">chore</span><span class=\"o\">(</span><span class=\"bp\">*</span><span class=\"o\">):</span> <span class=\"n\">add</span> <span class=\"n\">mathlib4</span> <span class=\"n\">synchronization</span> <span class=\"n\">comments</span> <span class=\"o\">(</span><span class=\"bp\">#</span><span class=\"mi\">19211</span><span class=\"o\">)</span>\n<span class=\"n\">cd</span> <span class=\"n\">sources</span><span class=\"bp\">/</span><span class=\"n\">mathlib</span> <span class=\"bp\">&amp;&amp;</span> <span class=\"n\">echo</span> <span class=\"bp\">-</span><span class=\"n\">n</span> <span class=\"bp\">'</span><span class=\"n\">mathlib</span> <span class=\"n\">commit</span><span class=\"o\">:</span> <span class=\"bp\">'</span> <span class=\"bp\">&amp;&amp;</span> <span class=\"n\">git</span> <span class=\"n\">rev</span><span class=\"bp\">-</span><span class=\"n\">parse</span> <span class=\"n\">HEAD</span>\n<span class=\"n\">mathlib</span> <span class=\"n\">commit</span><span class=\"o\">:</span> <span class=\"mi\">1</span><span class=\"n\">b089e3bdc3ce6b39cd472543474a0a137128c6c</span>\n<span class=\"n\">cd</span> <span class=\"n\">sources</span><span class=\"bp\">/</span><span class=\"n\">mathlib</span> <span class=\"bp\">&amp;&amp;</span> <span class=\"n\">leanpkg</span> <span class=\"n\">configure</span> <span class=\"bp\">&amp;&amp;</span> <span class=\"bp\">./</span><span class=\"n\">scripts</span><span class=\"bp\">/</span><span class=\"n\">mk_all.sh</span>\n<span class=\"n\">configuring</span> <span class=\"n\">mathlib</span> <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">1</span>\n<span class=\"n\">cd</span> <span class=\"n\">sources</span><span class=\"bp\">/</span><span class=\"n\">mathlib</span><span class=\"bp\">/</span><span class=\"n\">archive</span> <span class=\"bp\">&amp;&amp;</span> <span class=\"n\">git</span> <span class=\"n\">ls</span><span class=\"bp\">-</span><span class=\"n\">files</span> <span class=\"bp\">\\</span>\n        <span class=\"bp\">|</span> <span class=\"n\">sed</span> <span class=\"bp\">-</span><span class=\"n\">n</span> <span class=\"bp\">'/\\.</span><span class=\"n\">lean</span><span class=\"bp\">/</span> <span class=\"o\">{</span> <span class=\"n\">s</span><span class=\"bp\">=\\.</span><span class=\"n\">lean</span><span class=\"bp\">$==</span> <span class=\"bp\">;</span> <span class=\"n\">s</span><span class=\"bp\">=/=».«=</span><span class=\"n\">g</span><span class=\"bp\">;</span> <span class=\"n\">s</span><span class=\"bp\">=^=</span><span class=\"kn\">import</span> <span class=\"bp\">«=</span> <span class=\"bp\">;</span> <span class=\"n\">s</span><span class=\"bp\">=$=»=</span> <span class=\"bp\">;</span> <span class=\"n\">p</span> <span class=\"o\">}</span><span class=\"bp\">'</span> <span class=\"bp\">&gt;</span> <span class=\"n\">all.lean</span>\n<span class=\"n\">sed</span><span class=\"o\">:</span> <span class=\"mi\">1</span><span class=\"o\">:</span> <span class=\"s2\">\"/</span><span class=\"err\">\\</span><span class=\"s2\">.lean/ { s=</span><span class=\"err\">\\</span><span class=\"s2\">.lean$==  ...\"</span><span class=\"o\">:</span> <span class=\"n\">extra</span> <span class=\"n\">characters</span> <span class=\"n\">at</span> <span class=\"n\">the</span> <span class=\"kd\">end</span> <span class=\"n\">of</span> <span class=\"n\">p</span> <span class=\"n\">command</span>\n<span class=\"n\">make</span><span class=\"o\">:</span> <span class=\"bp\">***</span> <span class=\"o\">[</span><span class=\"n\">mathbin</span><span class=\"bp\">-</span><span class=\"n\">source</span><span class=\"o\">]</span> <span class=\"n\">Error</span> <span class=\"mi\">1</span>\n</code></pre></div>",
        "id": 368589316,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1687445336
    },
    {
        "content": "<p>This repo is only 1000 lines of code, is it going to be easier just to make a new lean 4 repo and translate everything by hand?</p>",
        "id": 368591862,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1687445759
    },
    {
        "content": "<p>Probably not</p>",
        "id": 368592240,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1687445821
    },
    {
        "content": "<p>Are you on a mac? This relies on GNU sed</p>",
        "id": 368593678,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1687446031
    },
    {
        "content": "<p>Yes I am on a mac</p>",
        "id": 368594149,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1687446106
    },
    {
        "content": "<p>Is this something I have to download?</p>",
        "id": 368594274,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1687446122
    },
    {
        "content": "<p>sed seems to be installed</p>",
        "id": 368594557,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1687446154
    },
    {
        "content": "<p>Yeah, but it's the wrong <code>sed</code>. See thread from here: <a href=\"#narrow/stream/287929-mathlib4/topic/Updating.20.60mathlib3port.60/near/302779660\">https://leanprover.zulipchat.com/#narrow/stream/287929-mathlib4/topic/Updating.20.60mathlib3port.60/near/302779660</a></p>",
        "id": 368596320,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1687446397
    },
    {
        "content": "<p>Ok but in that thread Scott says they fixed it to be macos compatible.</p>",
        "id": 368597803,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1687446620
    },
    {
        "content": "<p>Ok whatever the difference is, switching <code>sed</code> for <code>gsed</code> in the <code>Makefile</code> did seem to work, thank you.</p>",
        "id": 368601449,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1687447215
    },
    {
        "content": "<p>I followed till <code>make build</code> which gave me:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">(</span><span class=\"bp\">...</span><span class=\"o\">)</span>\n<span class=\"o\">[</span><span class=\"mi\">1787</span><span class=\"bp\">/</span><span class=\"mi\">1955</span><span class=\"o\">]</span> <span class=\"n\">Compiling</span> <span class=\"n\">Mathlib.Algebra.Algebra.Equiv</span>\n<span class=\"o\">[</span><span class=\"mi\">1791</span><span class=\"bp\">/</span><span class=\"mi\">1955</span><span class=\"o\">]</span> <span class=\"n\">Compiling</span> <span class=\"n\">Mathlib.LinearAlgebra.Prod</span>\n<span class=\"o\">[</span><span class=\"mi\">1791</span><span class=\"bp\">/</span><span class=\"mi\">1955</span><span class=\"o\">]</span> <span class=\"n\">Compiling</span> <span class=\"n\">Mathlib.Algebra.Algebra.Pi</span>\n<span class=\"o\">[</span><span class=\"mi\">1793</span><span class=\"bp\">/</span><span class=\"mi\">1955</span><span class=\"o\">]</span> <span class=\"n\">Compiling</span> <span class=\"n\">Mathlib.Algebra.Star.Module</span>\n<span class=\"o\">[</span><span class=\"mi\">1795</span><span class=\"bp\">/</span><span class=\"mi\">1955</span><span class=\"o\">]</span> <span class=\"n\">Compiling</span> <span class=\"n\">Mathlib.Data.Matrix.Basic</span>\n<span class=\"o\">[</span><span class=\"mi\">1797</span><span class=\"bp\">/</span><span class=\"mi\">1955</span><span class=\"o\">]</span> <span class=\"n\">Compiling</span> <span class=\"n\">Mathlib.Data.Matrix.Notation</span>\n<span class=\"o\">[</span><span class=\"mi\">1799</span><span class=\"bp\">/</span><span class=\"mi\">1955</span><span class=\"o\">]</span> <span class=\"n\">Compiling</span> <span class=\"n\">Mathlib.Mathport.Syntax</span>\n<span class=\"n\">make</span><span class=\"o\">:</span> <span class=\"bp\">***</span> <span class=\"o\">[</span><span class=\"n\">Makefile</span><span class=\"o\">:</span><span class=\"mi\">37</span><span class=\"o\">:</span> <span class=\"n\">build</span><span class=\"o\">]</span> <span class=\"n\">Error</span> <span class=\"mi\">1</span>\n</code></pre></div>",
        "id": 368625104,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1687451124
    },
    {
        "content": "<p>Repeating <code>make build</code> gives me:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">lake</span> <span class=\"n\">build</span>\n<span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">/</span><span class=\"mi\">1955</span><span class=\"o\">]</span> <span class=\"n\">Compiling</span> <span class=\"n\">FFI.c</span>\n<span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"bp\">&gt;</span> <span class=\"n\">c</span><span class=\"bp\">++</span> <span class=\"bp\">-</span><span class=\"n\">c</span> <span class=\"bp\">-</span><span class=\"n\">o</span> <span class=\"bp\">./</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">c</span><span class=\"bp\">/</span><span class=\"n\">ffi.o</span> <span class=\"bp\">./</span><span class=\"n\">Mathport</span><span class=\"bp\">/</span><span class=\"n\">FFI.cpp</span> <span class=\"bp\">-</span><span class=\"n\">I</span> <span class=\"bp\">/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">madv</span><span class=\"bp\">/.</span><span class=\"n\">elan</span><span class=\"bp\">/</span><span class=\"n\">toolchains</span><span class=\"bp\">/</span><span class=\"n\">leanprover</span><span class=\"c1\">--lean4---nightly-2023-06-20/include -fPIC</span>\n<span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">stderr</span><span class=\"o\">:</span>\n<span class=\"n\">could</span> <span class=\"n\">not</span> <span class=\"n\">execute</span> <span class=\"n\">external</span> <span class=\"n\">process</span> <span class=\"bp\">'</span><span class=\"n\">c</span><span class=\"bp\">++'</span>\n<span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">external</span> <span class=\"n\">command</span> <span class=\"bp\">`</span><span class=\"n\">c</span><span class=\"bp\">++`</span> <span class=\"n\">exited</span> <span class=\"k\">with</span> <span class=\"n\">code</span> <span class=\"mi\">255</span>\n<span class=\"n\">make</span><span class=\"o\">:</span> <span class=\"bp\">***</span> <span class=\"o\">[</span><span class=\"n\">Makefile</span><span class=\"o\">:</span><span class=\"mi\">37</span><span class=\"o\">:</span> <span class=\"n\">build</span><span class=\"o\">]</span> <span class=\"n\">Error</span> <span class=\"mi\">1</span>\n</code></pre></div>",
        "id": 368626301,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1687451357
    },
    {
        "content": "<p>You seem to be missing some basic deps. Try <code>apt install build-essential clang</code></p>",
        "id": 368627419,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1687451570
    },
    {
        "content": "<p>[resolved]</p>",
        "id": 368628000,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1687451684
    },
    {
        "content": "<p>I was able to run mathport, but a ton of lemmas that needed to be renamed didn't get renamed. What gives?</p>",
        "id": 368676660,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1687462970
    },
    {
        "content": "<p>(these are definitely lemmas from files that have been ported <code>polynomial.div_X_mul_X_add</code> is an example.)</p>",
        "id": 368677824,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1687463249
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"282271\">Bolton Bailey</span> <a href=\"#narrow/stream/113488-general/topic/Tutorial.20for.20mathport/near/368597803\">said</a>:</p>\n<blockquote>\n<p>Ok but in that thread Scott says they fixed it to be macos compatible.</p>\n</blockquote>\n<p>That fix was for <code>update.sh</code>, there is now an additional use of <code>sed</code> in the makefile. <span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> what did you do to fix it?</p>",
        "id": 368703520,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1687471284
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"282271\">@Bolton Bailey</span> <a href=\"#narrow/stream/113488-general/topic/Tutorial.20for.20mathport/near/368676660\">said</a>:</p>\n<blockquote>\n<p>I was able to run mathport, but a ton of lemmas that needed to be renamed didn't get renamed. What gives?</p>\n</blockquote>\n<p>Do you have an example? When used in certain positions mathport has difficulty doing the rename (I see this mainly in tactic arguments and dot notation)</p>",
        "id": 368703778,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1687471381
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/VNbpqXGHFPj0Y1m06_bFX8F5/PolyLemmas.lean\">PolyLemmas.lean</a><br>\nHere is an example of the mathport output, with many instances of <code>nat_degree_le_nat_degree</code> which should be <code>natDegree_le_natDegree</code></p>",
        "id": 368704402,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1687471609
    },
    {
        "content": "<p>Here is the corresponding lean3 input<br>\n<a href=\"/user_uploads/3121/QqBfm4OZB5fjzCy7Q5-IJ-UP/poly_lemmas.lean\">poly_lemmas.lean</a></p>",
        "id": 368704688,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1687471715
    },
    {
        "content": "<p>To fix the makefile for mac I just replaced every sed I could find with gsed</p>",
        "id": 368704936,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1687471814
    },
    {
        "content": "<p>there are no <code>#align</code> statements in this output, which means either you have a custom configuration or a very old mathport</p>",
        "id": 368706967,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1687472737
    },
    {
        "content": "<p>I think the issue here is that the names aren't being resolved because of the namespace</p>",
        "id": 368707180,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1687472849
    },
    {
        "content": "<p>e.g. it doesn't know <code>nat_degree_le_nat_degree</code> means <code>polynomial.nat_degree_le_nat_degree</code> and so can't use the #align line for it</p>",
        "id": 368707264,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1687472888
    },
    {
        "content": "<p>I just cloned mathport this morning. I don't know what I could've done to give it a custom configuration.</p>",
        "id": 368708498,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1687473522
    },
    {
        "content": "<p>Mathport version is 38063ec2</p>",
        "id": 368708569,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1687473569
    },
    {
        "content": "<p>Align statement is there in mathlib 4 <a href=\"https://github.com/leanprover-community/mathlib4/blob/6533094a68393dbab56cfb3ff2bed55c6978a84d/Mathlib/Data/Polynomial/Degree/Definitions.lean#L235-L237\">https://github.com/leanprover-community/mathlib4/blob/6533094a68393dbab56cfb3ff2bed55c6978a84d/Mathlib/Data/Polynomial/Degree/Definitions.lean#L235-L237</a></p>",
        "id": 368708816,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1687473702
    },
    {
        "content": "<p>ok, I guess you're saying it's because there's a namespace in my code, that makes sense</p>",
        "id": 368708907,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1687473736
    },
    {
        "content": "<p>I have adjusted the <code>sed</code> invocation in <a href=\"https://github.com/leanprover-community/mathport/pull/243\">https://github.com/leanprover-community/mathport/pull/243</a> so that hopefully it works with all versions of sed. (Joint work with chatgpt, tested on mac with both gsed and sed.)</p>",
        "id": 368710846,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1687474705
    },
    {
        "content": "<p>is it the semicolon at the end or the use of <code>/</code> separators that makes the difference?</p>",
        "id": 368712661,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1687475605
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"282271\">@Bolton Bailey</span> is <code>\"redundantAlign\": true</code> in your config.json?</p>",
        "id": 368712881,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1687475711
    },
    {
        "content": "<p>\"redundantAlign\": true in my config.json, but false in my config-project.json</p>",
        "id": 368713833,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1687476248
    },
    {
        "content": "<p>It seems to be the / separators.</p>",
        "id": 368716676,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1687478096
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/113488-general/topic/Tutorial.20for.20mathport/near/368568962\">said</a>:</p>\n<blockquote>\n<p>No, tactics have to be ported by hand</p>\n</blockquote>\n<p>Ok what is the best practice for doing this then? Mathport tells me that I have to build my project beforehand, but my project has a tactic that is custom-written and takes a long time to run. Will it cause problems if I just comment out this tactic invocation and replace it with sorry?</p>",
        "id": 369475580,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1687715791
    },
    {
        "content": "<p>(I guess I'm asking a question with no good answer, sorry about that)</p>",
        "id": 369489915,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1687720435
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"282271\">@Bolton Bailey</span>, you need to build your project in Lean3 before hand, but that shouldn't be a problem. You could adjust <code>mathport</code> to know about the syntax of your tactic and how to translate calls to it (as we do for all the mathlib3 tactics) (note this is not translating the tactic itself: just invocations of it!). But unless you have a lot of calls with complicated syntax, I would recommend skipping this step. Just replace all the <code>my_tactic</code> calls in your project with <code>sorry</code>, run mathport, fix up the output, reimplement <code>my_tactic</code> from scratch in Lean 4, then finally restore the <code>sorry</code>s back to <code>my_tactic</code>.</p>",
        "id": 369528608,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1687741036
    },
    {
        "content": "<p>Ok seems sensible, thanks for the advice</p>",
        "id": 369528824,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1687741121
    },
    {
        "content": "<p>After running mathport, we must:<br>\n(1) Change all \"import Mathbin\" to \"import Mathlib\".<br>\n(2) Reïmplement custom tactics in Lean 4 by hand.<br>\nIs there anything else everybody has to do?</p>",
        "id": 369650530,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1687776347
    },
    {
        "content": "<p>Add the new file to <code>Mathlib.lean</code> or equivalent</p>",
        "id": 369652132,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1687776652
    },
    {
        "content": "<p>See the <code>scripts/start_port.sh</code> script in mathlib4.</p>",
        "id": 369729248,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1687790567
    }
]