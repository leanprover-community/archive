[
    {
        "content": "<p>Is every canonically ordered monoid automatically cancellative?</p>",
        "id": 169770164,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1562425062
    },
    {
        "content": "<p>Probably not, because it isn't in mathlib.</p>",
        "id": 169770165,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1562425072
    },
    {
        "content": "<p><code>with_top nat</code> is a counterexample</p>",
        "id": 169770380,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1562425351
    },
    {
        "content": "<p>Aha, thanks</p>",
        "id": 169770470,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1562425510
    },
    {
        "content": "<p>No it isn't</p>",
        "id": 169770472,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1562425516
    },
    {
        "content": "<p>Why not?</p>",
        "id": 169770477,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1562425534
    },
    {
        "content": "<p><code>fin n</code> with saturating addition is a counterexample</p>",
        "id": 169770478,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1562425536
    },
    {
        "content": "<p>Sorry it is.</p>",
        "id": 169770530,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1562425615
    },
    {
        "content": "<p>There isn't really anything in the definition that looks like a cancellation law. Notice that <code>lt_of_add_lt_add_left</code> is just the contrapositive of <code>add_le_add_left</code> for total orders</p>",
        "id": 169770589,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1562425687
    },
    {
        "content": "<p>Ok, thanks</p>",
        "id": 169770596,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1562425723
    },
    {
        "content": "<p>The comment for <code>ordered_comm_monoid</code> is a lie</p>",
        "id": 169770659,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1562425823
    },
    {
        "content": "<p>I think it is trying to describe <code>ordered_cancel_comm_monoid</code></p>",
        "id": 169770676,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1562425867
    },
    {
        "content": "<p>Right... I guess that might have added to the confusion for me.</p>",
        "id": 169771765,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1562427962
    },
    {
        "content": "<p>Does it make sense to have a <code>canonically_ordered_cancel_monoid</code>?</p>",
        "id": 169771773,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1562427980
    },
    {
        "content": "<p>I guess this is not provable:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">instance</span> <span class=\"o\">[</span><span class=\"n\">canonically_ordered_monoid</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">ordered_comm_monoid</span> <span class=\"o\">(</span><span class=\"n\">σ</span> <span class=\"bp\">→</span><span class=\"err\">₀</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n</pre></div>",
        "id": 169772017,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1562428446
    },
    {
        "content": "<p>You need the cancellative thing</p>",
        "id": 169772019,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1562428456
    },
    {
        "content": "<p>Talking of canonically ordered monoids,</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">class</span> <span class=\"n\">canonically_ordered_monoid</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"kn\">extends</span> <span class=\"n\">ordered_comm_monoid</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">lattice</span><span class=\"bp\">.</span><span class=\"n\">order_bot</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">le_iff_exists_add</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span><span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">:</span><span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"bp\">↔</span> <span class=\"bp\">∃</span><span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">c</span><span class=\"o\">)</span>\n</pre></div>\n\n\n<p>it occurred to me yesterday that this <code>le_iff_exists_add</code> axiom implies that that <code>0 ≤ b</code> for all <code>b</code>, which makes it surprising that Lean asks for the <code>lattice.order_bot</code>structure; it could be generated automatically, because one can prove that bot must be 0 from the other stuff.</p>",
        "id": 169777878,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1562438542
    },
    {
        "content": "<p>I guess that I'm saying that instead of <code>canonically_ordered_monoid</code> extending <code>lattice.order_bot</code> it should not mention it at all, and then there should just be an instance making a lattice.order_bot from a canonically ordered monoid.</p>",
        "id": 169777958,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1562438698
    },
    {
        "content": "<p>That's true, but you still want the structure to have both a bot and a zero. What if the structure already has a bot and a zero? Granted it's pretty unlikely that they are not defeq, but this definition permits it</p>",
        "id": 169777973,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1562438744
    },
    {
        "content": "<p>In any case I don't think that would be a very good instance - it is a kind of cross cutting thing, it will cause typeclass inference to get more complicated</p>",
        "id": 169778035,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1562438834
    },
    {
        "content": "<p>Then again, it's already an instance with this definition <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 169778039,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1562438863
    },
    {
        "content": "<p>So it seems to me that it should be like the lt in a preorder: <code>canonically_ordered_monoid</code> should not extend <code>lattice.order_bot</code> but it should ask for three fields, <code>le_iff_exists_add</code> and then <code>bot</code> but with the <code>:=</code> thing so that the user can define it if they want but if they don't it defaults to <code>zero</code>, and then a tactic can autogenerate <code>bot_le</code> if the user wants it to.</p>",
        "id": 169778093,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1562438951
    },
    {
        "content": "<p>it is already doing basically that</p>",
        "id": 169778225,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1562439187
    },
    {
        "content": "<p>You can stick <code>(bot := 0)</code> at the end and I think it will work</p>",
        "id": 169778231,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1562439220
    },
    {
        "content": "<blockquote>\n<p>it is already doing basically that</p>\n</blockquote>\n<p>It's not, at least in the sense that if I write this:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">canonically_ordered_comm_semiring</span> <span class=\"n\">mynat</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">add</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">+</span><span class=\"o\">),</span>\n  <span class=\"n\">add_assoc</span> <span class=\"o\">:=</span> <span class=\"n\">add_assoc</span><span class=\"o\">,</span>\n  <span class=\"n\">zero</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n  <span class=\"n\">zero_add</span> <span class=\"o\">:=</span> <span class=\"n\">zero_add</span><span class=\"o\">,</span>\n  <span class=\"n\">add_zero</span> <span class=\"o\">:=</span> <span class=\"n\">add_zero</span><span class=\"o\">,</span>\n  <span class=\"n\">add_comm</span> <span class=\"o\">:=</span> <span class=\"n\">add_comm</span><span class=\"o\">,</span>\n  <span class=\"n\">le</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">≤</span><span class=\"o\">),</span>\n  <span class=\"n\">le_refl</span> <span class=\"o\">:=</span> <span class=\"n\">le_refl</span><span class=\"o\">,</span>\n  <span class=\"n\">le_trans</span> <span class=\"o\">:=</span> <span class=\"n\">le_trans</span><span class=\"o\">,</span>\n  <span class=\"n\">le_antisymm</span> <span class=\"o\">:=</span> <span class=\"n\">le_antisymm</span><span class=\"o\">,</span>\n  <span class=\"n\">add_le_add_left</span> <span class=\"o\">:=</span> <span class=\"n\">add_le_add_left</span><span class=\"o\">,</span>\n  <span class=\"n\">lt_of_add_lt_add_left</span> <span class=\"o\">:=</span> <span class=\"n\">lt_of_add_lt_add_left</span><span class=\"o\">,</span>\n<span class=\"c1\">--  bot := ⊥,</span>\n<span class=\"c1\">--  bot_le := bot_le,</span>\n  <span class=\"n\">le_iff_exists_add</span> <span class=\"o\">:=</span> <span class=\"n\">le_iff_exists_add</span><span class=\"o\">,</span>\n  <span class=\"n\">mul</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">*</span><span class=\"o\">),</span>\n  <span class=\"n\">mul_assoc</span> <span class=\"o\">:=</span> <span class=\"n\">mul_assoc</span><span class=\"o\">,</span>\n  <span class=\"n\">one</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n  <span class=\"n\">one_mul</span> <span class=\"o\">:=</span> <span class=\"n\">one_mul</span><span class=\"o\">,</span>\n  <span class=\"n\">mul_one</span> <span class=\"o\">:=</span> <span class=\"n\">mul_one</span><span class=\"o\">,</span>\n  <span class=\"n\">left_distrib</span> <span class=\"o\">:=</span> <span class=\"n\">left_distrib</span><span class=\"o\">,</span>\n  <span class=\"n\">right_distrib</span> <span class=\"o\">:=</span> <span class=\"n\">right_distrib</span><span class=\"o\">,</span>\n  <span class=\"n\">zero_mul</span> <span class=\"o\">:=</span> <span class=\"n\">zero_mul</span><span class=\"o\">,</span>\n  <span class=\"n\">mul_zero</span> <span class=\"o\">:=</span> <span class=\"n\">mul_zero</span><span class=\"o\">,</span>\n  <span class=\"n\">mul_comm</span> <span class=\"o\">:=</span> <span class=\"n\">mul_comm</span><span class=\"o\">,</span>\n  <span class=\"n\">zero_ne_one</span> <span class=\"o\">:=</span> <span class=\"n\">zero_ne_one</span><span class=\"o\">,</span>\n  <span class=\"n\">mul_eq_zero_iff</span> <span class=\"o\">:=</span> <span class=\"n\">mul_eq_zero_iff</span> <span class=\"o\">}</span>\n</pre></div>\n\n\n<p>then, unsurprisingly, it says</p>\n<div class=\"codehilite\"><pre><span></span>invalid structure value { ... }, field &#39;bot&#39; was not provided\ninvalid structure value { ... }, field &#39;bot_le&#39; was not provided\n</pre></div>",
        "id": 169778373,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1562439473
    },
    {
        "content": "<p>I don't want my player to have to worry about bot. I might just make another constructor.</p>",
        "id": 169778419,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1562439524
    },
    {
        "content": "<p>I mean stick <code>(bot := 0)</code> in <code>canonically_ordered_monoid</code></p>",
        "id": 169778436,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1562439582
    },
    {
        "content": "<p>I think having a custom constructor would solve a lot of problems, but lean magic only works on the builtin constructor which makes this unattractive</p>",
        "id": 169778514,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1562439683
    },
    {
        "content": "<p>lean magic includes <code>i_just_proved_all_teh_theorems</code> or whatever it's called now (<code>structure_helper</code> I think)</p>",
        "id": 169778561,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1562439734
    },
    {
        "content": "<p>One way to recover the structure notation is to have an auxiliary class with the arguments. <code>nonneg_comm_group</code> was my attempt at this, but I think in practice it ends up just being one more class in the hierarchy</p>",
        "id": 169778580,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1562439811
    },
    {
        "content": "<blockquote>\n<p>I mean stick <code>(bot := 0)</code> in <code>canonically_ordered_monoid</code></p>\n</blockquote>\n<p>In <code>preorder</code> we see</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"o\">(</span><span class=\"n\">lt</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"bp\">∧</span> <span class=\"bp\">¬</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">lt_iff_le_not_le</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"bp\">∧</span> <span class=\"bp\">¬</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">.</span> <span class=\"n\">order_laws_tac</span><span class=\"o\">)</span>\n</pre></div>\n\n\n<p>So the question is how to prove <code>bot_le</code>;  I can't even right click on <code>order_laws_tac</code> to see what it's doing.</p>",
        "id": 169778841,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1562440267
    },
    {
        "content": "<p>If clicking doesn't work you can always put it somewhere else, i.e. <code>#print order_laws_tac</code> and then click on it there</p>",
        "id": 169779588,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1562441735
    },
    {
        "content": "<p>it's basically <code>exact rfl</code></p>",
        "id": 169779592,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1562441750
    }
]