[
    {
        "content": "<p>I had some very simple calculations that I was performing in ℕ and displaying with <code>#reduce</code> that were for all practical purposes instant. I have the identical code, except in ℚ, and I'm melting my CPU and getting a full screen of timeout errors:</p>\n<p><code>(deterministic) timeout at 'whnf', maximum number of heartbeats (200000) has been reached (use 'set_option maxHeartbeats &lt;num&gt;' to set the limit)</code></p>\n<p>Here's a mwe:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">ColS</span> <span class=\"n\">where</span>\n<span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"o\">:</span> <span class=\"n\">ColS</span>\n<span class=\"bp\">|</span> <span class=\"n\">up</span> <span class=\"o\">:</span> <span class=\"n\">ColS</span> <span class=\"bp\">→</span> <span class=\"n\">ColS</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">LinEq</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">LinEq.eval</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Semiring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">le</span> <span class=\"o\">:</span> <span class=\"n\">LinEq</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">le.m</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">le.c</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">ColS.to_lf</span> <span class=\"o\">(</span><span class=\"n\">cs</span><span class=\"o\">:</span> <span class=\"n\">ColS</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">LinEq</span> <span class=\"n\">ℚ</span> <span class=\"o\">:=</span> <span class=\"k\">match</span> <span class=\"n\">cs</span> <span class=\"k\">with</span>\n<span class=\"bp\">|</span> <span class=\"n\">ColS.zero</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">⟨</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">⟩</span>\n<span class=\"bp\">|</span> <span class=\"n\">ColS.up</span> <span class=\"n\">ds</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"k\">let</span> <span class=\"o\">⟨</span><span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">c</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">ds.to_lf</span>\n  <span class=\"o\">⟨</span><span class=\"mi\">3</span> <span class=\"bp\">*</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"mi\">3</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">⟩</span>\n\n\n<span class=\"k\">#reduce</span> <span class=\"o\">(</span><span class=\"n\">ColS.up</span> <span class=\"bp\">$</span> <span class=\"n\">ColS.zero</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">to_lf</span> <span class=\"c1\">-- works</span>\n<span class=\"k\">#reduce</span> <span class=\"o\">(</span><span class=\"n\">ColS.up</span> <span class=\"bp\">$</span> <span class=\"n\">ColS.zero</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">to_lf.eval</span> <span class=\"mi\">1</span> <span class=\"c1\">-- times out</span>\n</code></pre></div>",
        "id": 392523944,
        "sender_full_name": "Matthew Pocock",
        "timestamp": 1695391004
    },
    {
        "content": "<p>The answer to perf issues with reduce is basically always  dont use reduce use eval, reduce is not optimized well at all.</p>",
        "id": 392524537,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1695391179
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"395550\">Henrik Böving</span> <a href=\"#narrow/stream/113488-general/topic/performance.20of.20reduce.20with.20.E2.84.9A/near/392524537\">said</a>:</p>\n<blockquote>\n<p>The answer to perf issues with reduce is basically always  dont use reduce use eval, reduce is not optimized well at all.</p>\n</blockquote>\n<p>Eval does, indeed, work. Thanks. Sprinkling through some <code>deriving Repr</code> seems to also get the other things that only worked with <code>#reduce</code> working with <code>#eval</code>.</p>",
        "id": 392581375,
        "sender_full_name": "Matthew Pocock",
        "timestamp": 1695408243
    }
]