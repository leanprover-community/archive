[
    {
        "content": "<p>If I'm understanding correctly, defining a <code>DecidableEq</code> instance for a type automatically generates a <code>BEq</code> instance too that's just <code>decide (a=b)</code>. This is lawful by definition, so shouldn't I get a <code>LawfulBEq</code> derivation for free?</p>",
        "id": 375336537,
        "sender_full_name": "Bhakti Shah",
        "timestamp": 1689355160
    },
    {
        "content": "<p>Are you asking this because it's not working? Or do you want to know before trying it yourself or looking up what <code>LawfulBEq</code> instances there are in the documentation?</p>",
        "id": 375338255,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1689355574
    },
    {
        "content": "<p>Here's how you can check from within Lean:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n\n<span class=\"bp\">#</span><span class=\"n\">synth</span> <span class=\"n\">LawfulBEq</span> <span class=\"n\">α</span> <span class=\"c1\">-- succeeds</span>\n</code></pre></div>",
        "id": 375338314,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1689355589
    },
    {
        "content": "<p>Asking because it isn't working. From what I saw in the docs, I assumed it would work but it didn't hence the question.<br>\nThanks for the code! Didn't know about <code>#synth</code>. It does not in fact synthesize for my type.<br>\nI experimented a bit and it seems to not take issue with my type (it's able to synthesize a <code>LawfulBEq</code> instance for the type itself), but with <code>Option</code> itself.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n<span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"n\">LawfulBEq</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n<span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"n\">BEq</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n<span class=\"bp\">#</span><span class=\"n\">synth</span> <span class=\"n\">LawfulBEq</span> <span class=\"o\">(</span><span class=\"n\">Option</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"c1\">-- fails with every combination of the variables above</span>\n</code></pre></div>\n<p>from what I see <a href=\"https://leanprover-community.github.io/mathlib4_docs/Std/Data/Option/Basic.html#Option.instLawfulBEqOptionInstBEqOption\">here</a> I don't need anything else. I'm not sure what #synth really does (can't find it in the docs) but I'm assuming it uses that instance.</p>",
        "id": 375345350,
        "sender_full_name": "Bhakti Shah",
        "timestamp": 1689357303
    },
    {
        "content": "<p>Do you have the import of that file?</p>",
        "id": 375345511,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1689357353
    },
    {
        "content": "<p>One part of why that doesn't work is because you're adding variables introducing a completely new <code>BEq</code> that's unrelated to the one from <code>DecidableEq</code>. If a typeclass is implied by another, don't add that typeclass as a variable. Same with <code>LawfulBEq</code>, which is implies from <code>DecidableEq</code>.</p>",
        "id": 375345653,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1689357381
    },
    {
        "content": "<p>This is curious though:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n\n<span class=\"bp\">#</span><span class=\"n\">synth</span> <span class=\"n\">DecidableEq</span> <span class=\"o\">(</span><span class=\"n\">Option</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"c1\">-- succeeds</span>\n\n<span class=\"bp\">#</span><span class=\"n\">synth</span> <span class=\"n\">LawfulBEq</span> <span class=\"o\">(</span><span class=\"n\">Option</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"c1\">-- fails</span>\n</code></pre></div>",
        "id": 375345922,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1689357457
    },
    {
        "content": "<p>It seems to be because <code>Option</code> implements its own <code>BEq</code></p>",
        "id": 375346252,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1689357521
    },
    {
        "content": "<p>Yes, when I said every combination I meant each individual one too. The first thing I tried was just <code>DecidableEq \\alpha</code> but it didn't work</p>",
        "id": 375346267,
        "sender_full_name": "Bhakti Shah",
        "timestamp": 1689357525
    },
    {
        "content": "<p>(It's helpful when there's an <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> (or a minimal non-working example) so that we don't have to guess that the actual question is why doesn't <code>Option α</code> lawful beq instance from <code>α</code> having decidable equality.)</p>",
        "id": 375347158,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1689357673
    },
    {
        "content": "<p>Here's a workaround for you:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n\n<span class=\"bp\">#</span><span class=\"n\">synth</span> <span class=\"n\">DecidableEq</span> <span class=\"o\">(</span><span class=\"n\">Option</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"c1\">-- succeeds</span>\n\n<span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"bp\">-</span><span class=\"kd\">instance</span><span class=\"o\">]</span> <span class=\"n\">instBEqOption</span>\n\n<span class=\"bp\">#</span><span class=\"n\">synth</span> <span class=\"n\">LawfulBEq</span> <span class=\"o\">(</span><span class=\"n\">Option</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"c1\">-- fails</span>\n</code></pre></div>",
        "id": 375347346,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1689357701
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/113488-general/topic/.60DecidableEq.60.20and.20.60LawfulBEq.60/near/375346252\">said</a>:</p>\n<blockquote>\n<p>It seems to be because <code>Option</code> implements its own <code>BEq</code></p>\n</blockquote>\n<p>I see. so the <a href=\"https://github.com/leanprover/lean4/blob/6e904421304c362a146883baa360f451376dd9b1/src/Init/Data/Option/Basic.lean#L87-L87\">DecidableEq generated one</a> is overwritten?</p>",
        "id": 375347392,
        "sender_full_name": "Bhakti Shah",
        "timestamp": 1689357707
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/113488-general/topic/.60DecidableEq.60.20and.20.60LawfulBEq.60/near/375347346\">said</a>:</p>\n<blockquote>\n<p>Here's a workaround for you:</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n\n<span class=\"bp\">#</span><span class=\"n\">synth</span> <span class=\"n\">DecidableEq</span> <span class=\"o\">(</span><span class=\"n\">Option</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"c1\">-- succeeds</span>\n\n<span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"bp\">-</span><span class=\"kd\">instance</span><span class=\"o\">]</span> <span class=\"n\">instBEqOption</span>\n\n<span class=\"bp\">#</span><span class=\"n\">synth</span> <span class=\"n\">LawfulBEq</span> <span class=\"o\">(</span><span class=\"n\">Option</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"c1\">-- fails</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>thanks! if i'm understanding correctly that you're just removing the (second)<code>BEq</code> instance for <code>Option</code> from context?</p>",
        "id": 375348485,
        "sender_full_name": "Bhakti Shah",
        "timestamp": 1689357905
    },
    {
        "content": "<p>No, not overwritten, they're all in the instance database somewhere, but it's that in <code>LawfulBEq (Option α)</code>, Lean needs a <code>BEq (Option α)</code> instance, and it finds the one generated by <code>deriving instance BEq for Option</code> first (via a <code>BEq α</code> instance from <code>DecidableEq α</code>) before finding the one that comes from the one you're linking to</p>",
        "id": 375348501,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1689357907
    },
    {
        "content": "<p>This is known as a \"diamond\", when you get non-defeq instances by going along different paths of instances</p>",
        "id": 375348693,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1689357955
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span> Another interesting question is <strong>why</strong> Lean generates a separate <code>BEq</code> instance for Option instead of just using the one from <code>DecidableEq</code>?</p>",
        "id": 375348873,
        "sender_full_name": "Mac Malone",
        "timestamp": 1689357984
    },
    {
        "content": "<p>That makes sense. I'm also curious about <span class=\"user-mention\" data-user-id=\"315577\">@Mac</span> 's question</p>",
        "id": 375348974,
        "sender_full_name": "Bhakti Shah",
        "timestamp": 1689358009
    },
    {
        "content": "<p>I think it's so you can get a <code>BEq</code> instance on <code>Option α</code> if you only have a <code>BEq</code> instance on <code>α</code></p>",
        "id": 375348984,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1689358012
    },
    {
        "content": "<p>Ah, that makes sense.</p>",
        "id": 375349123,
        "sender_full_name": "Mac Malone",
        "timestamp": 1689358045
    },
    {
        "content": "<p>I wonder if they could be made to be defeq to resolve the diamond?</p>",
        "id": 375349203,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1689358062
    },
    {
        "content": "<p>Then it should probably also have a \"deriving\" <code>LawfulBEq</code> instance.</p>",
        "id": 375349221,
        "sender_full_name": "Mac Malone",
        "timestamp": 1689358066
    },
    {
        "content": "<p>If we resolve the diamond that shouldn't be necessary (and I've run into these <code>BEq</code>/<code>DecidableEq</code> diamonds in a few places already... so I'd be happy if there's some solution)</p>",
        "id": 375349651,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1689358157
    },
    {
        "content": "<p><code>LawfulBEq</code> wouldn't help with <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=List.count#doc\">docs#List.count</a> for example. I ran into two <code>BEq</code> instances, one from decidable eq of a product of types with decidable eq, and the other from a product of types with beq</p>",
        "id": 375350120,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1689358277
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span> Doesn't the <code>BEq</code> for <code>DecidableEq</code> come from a different generic instance? I do not see a way to resolve that diamond (as the two generic instances have two have different definitions due to different prereqs).</p>",
        "id": 375350559,
        "sender_full_name": "Mac Malone",
        "timestamp": 1689358404
    },
    {
        "content": "<p>Unless, I guess, you implement <code>DecidableEq (Option a)</code> using  <code>LawfulBEq a</code>, but that  may have its own troubles.</p>",
        "id": 375350848,
        "sender_full_name": "Mac Malone",
        "timestamp": 1689358489
    },
    {
        "content": "<p>In essence I think the problem is that the current order of generic instances (in core) is <code>DecidableEq -&gt; BEq -&gt; LawfulBEq</code> (which necessitates a different <code>BEq</code> for a non-decidable <code>BEq</code> prerequisite) instead of <code>BEq -&gt; LawfulBEq -&gt; DecidableEq</code> (which would allow the difference).</p>",
        "id": 375351226,
        "sender_full_name": "Mac Malone",
        "timestamp": 1689358600
    },
    {
        "content": "<p>If you could somehow set it up so that you have the property \"if <code>BEq X</code> is defeq to the the one from <code>DecidableEq X</code> and then <code>BEq (Option X)</code> is defeq to the one from <code>DecidableEq (Option X)</code>\" then it should work, but this might be too much to hope for.</p>",
        "id": 375353776,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1689359281
    },
    {
        "content": "<p>Relevant: <a href=\"https://github.com/leanprover/lean4/pull/2038\">lean4#2038</a></p>",
        "id": 375357706,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1689360323
    }
]