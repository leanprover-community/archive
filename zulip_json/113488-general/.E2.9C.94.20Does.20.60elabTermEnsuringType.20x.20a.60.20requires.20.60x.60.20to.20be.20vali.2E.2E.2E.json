[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean.Elab</span>\n<span class=\"kn\">import</span> <span class=\"n\">Qq</span>\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Lean.Meta</span> <span class=\"n\">Lean.Elab</span> <span class=\"n\">Lean.Elab.Tactic</span>\n<span class=\"kn\">open</span> <span class=\"n\">Qq</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[</span><span class=\"n\">tactic</span> <span class=\"n\">xs</span><span class=\"kd\">]</span>\n<span class=\"kd\">def</span> <span class=\"n\">evalXs</span> <span class=\"o\">:</span> <span class=\"n\">Tactic</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">stx</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"k\">match</span> <span class=\"n\">stx</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">xs</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n      <span class=\"n\">try</span> <span class=\"k\">do</span>\n        <span class=\"n\">_</span> <span class=\"bp\">&lt;-</span> <span class=\"n\">elabTermEnsuringType</span> <span class=\"o\">(</span><span class=\"bp\">&lt;-</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">Nat.zero</span> <span class=\"n\">Nat.zero</span><span class=\"o\">))</span> <span class=\"n\">q</span><span class=\"o\">(</span><span class=\"n\">Nat</span><span class=\"o\">)</span>\n      <span class=\"n\">catch</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">return</span>\n      <span class=\"n\">return</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">throwUnsupportedSyntax</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">xs</span>\n  <span class=\"n\">exact</span> <span class=\"mi\">42</span>\n</code></pre></div>\n<p>failed with</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">function</span> <span class=\"n\">expected</span> <span class=\"n\">at</span>\n  <span class=\"n\">Nat.zero</span>\n<span class=\"n\">term</span> <span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">ℕ</span>\n</code></pre></div>\n<p>but </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[</span><span class=\"n\">tactic</span> <span class=\"n\">xs</span><span class=\"kd\">]</span>\n<span class=\"kd\">def</span> <span class=\"n\">evalXs</span> <span class=\"o\">:</span> <span class=\"n\">Tactic</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">stx</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"k\">match</span> <span class=\"n\">stx</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">xs</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n      <span class=\"n\">try</span> <span class=\"k\">do</span>\n        <span class=\"n\">_</span> <span class=\"bp\">&lt;-</span> <span class=\"n\">elabTermEnsuringType</span> <span class=\"o\">(</span><span class=\"bp\">&lt;-</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">Nat.succ</span> <span class=\"n\">Nat.zero</span><span class=\"o\">))</span> <span class=\"n\">q</span><span class=\"o\">(</span><span class=\"n\">Unit</span><span class=\"o\">)</span>\n      <span class=\"n\">catch</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">return</span>\n      <span class=\"n\">return</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">throwUnsupportedSyntax</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">xs</span>\n  <span class=\"n\">exact</span> <span class=\"mi\">42</span>\n</code></pre></div>\n<p>is okay. So how can I catch the exception when <code>x</code> is not a valid application, and where does it thrown?</p>",
        "id": 398446360,
        "sender_full_name": "Alissa Tung",
        "timestamp": 1698226188
    },
    {
        "content": "<p>For interactive purposes, the elaborator turns errors into sorries and only reports the errors as messages rather than throwing an exception. Try wrapping your code in <code>withTheReader Term.Context ({ · with errToSorry := false })</code> to switch this feature off</p>",
        "id": 398554829,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1698264978
    },
    {
        "content": "<p>Thank you! Do you think this should have some documents in this family of elab term functions? If so I can file a merge request on this.</p>",
        "id": 398589124,
        "sender_full_name": "Alissa Tung",
        "timestamp": 1698286951
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"662001\">Alissa Tung</span> has marked this topic as resolved.</p>",
        "id": 398594542,
        "sender_full_name": "Notification Bot",
        "timestamp": 1698289371
    },
    {
        "content": "<p>Btw, there’s a shorthand for this: <code>withoutErrToSorry</code> (though the explicit version is a bit better at showing you what’s going on)</p>",
        "id": 398764168,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1698352795
    }
]