[
    {
        "content": "<p>Right now, we have notation for functions from <code>Fin n</code> as <code>![x, y, z]</code>. <a href=\"https://github.com/leanprover-community/mathlib4/pull/6367\">#6367</a> introduces notation for <code>Finsupp</code>, allowing sparse vectors to be written as <code>fun₀ | 0 =&gt; x | 2 =&gt; z</code>.</p>\n<p>The notation matches the builtin <code>fun | 0 =&gt; x | 2 =&gt; z | _ =&gt; 0</code> notation for functions.</p>",
        "id": 381919585,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1691168078
    },
    {
        "content": "<p>Perhaps more controversially, this PR also introduces an unexpander, which means that <code>finsupp.single i x</code> is now replaced by <code>fun₀ | i =&gt; x</code> in the info view (and docs).</p>",
        "id": 381919724,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1691168116
    },
    {
        "content": "<p>I labelled <a href=\"https://github.com/leanprover-community/mathlib4/pull/6367\">#6367</a> RFC for now; I'd appreciate feedback on:</p>\n<ul>\n<li>The notation itself</li>\n<li>The expansion to <code>update (update (single i x) j y) k z)</code> rather than an <code>update i x 0</code> at the bottom</li>\n<li>The agressiveness of the unexpander, and whether hiding <code>single</code> from goals is good or bad.</li>\n</ul>",
        "id": 381920273,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1691168244
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113488-general/topic/Notation.20for.20.60finsupp.60/near/381919724\">said</a>:</p>\n<blockquote>\n<p>Perhaps more controversially, this PR also introduces an unexpander, which means that <code>finsupp.single i x</code> is now replaced by <code>fun | i =&gt; x</code> in the info view (and docs).</p>\n</blockquote>\n<p><code>fun</code> or <code>fun₀</code>?</p>",
        "id": 381920374,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1691168269
    },
    {
        "content": "<p>Fixed, thanks!</p>",
        "id": 381921239,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1691168445
    },
    {
        "content": "<p>Eric, you may want to fix it in the top two posts above as well. I think the second <code>fun₀</code> should be <code>fun</code> and the last <code>fun</code> should be <code>fun₀</code>.</p>",
        "id": 381948071,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1691174540
    },
    {
        "content": "<p>Should be corrected now, apologies for the typos</p>",
        "id": 382606592,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1691410696
    },
    {
        "content": "<p>I left this as a comment on the PR, but perhaps it's better to put it here:</p>\n<p>I really like this! :) Given that <code>↦</code> is standard for <code>fun</code> expressions in mathlib, though, I would suggest that:</p>\n<ol>\n<li>both <code>=&gt;</code> and <code>↦</code> should be available as input notation, and</li>\n<li>the delaborator and <code>Repr</code> instance should use <code>↦</code></li>\n</ol>\n<p>so that it's as close as possible to fun syntax.</p>",
        "id": 383558282,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1691660707
    },
    {
        "content": "<p>Is it, though? (standard for mathlib)</p>",
        "id": 383559132,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1691660859
    },
    {
        "content": "<p>Yes, I believe so; for example, if you write <code>example : True := by let _ := fun x : Bool =&gt; x; trivial</code> in a typical mathlib theory file, the value will show up as <code>fun x ↦ x</code> in the infoview. (I'm not sure where exactly this delaborator is located.)</p>",
        "id": 383560472,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1691661143
    },
    {
        "content": "<p>It's standard in the infoview, but not in the source</p>",
        "id": 383562552,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1691661576
    },
    {
        "content": "<p>Ah, ok—in any case my suggestion was consistent with that :) (allow both arrows in source and stick to <code>↦</code> in delaboration/<code>Repr</code>)</p>",
        "id": 383563406,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1691661767
    },
    {
        "content": "<p>I think it already allows both in the source, but I will check</p>",
        "id": 383563504,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1691661793
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 383563762,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1691661848
    },
    {
        "content": "<p>On another point, I was wondering about this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- A variant of `Lean.Parser.Term.matchAlts` with less line wrapping. -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">fun₀.matchAlts</span> <span class=\"o\">:</span> <span class=\"n\">Parser</span> <span class=\"o\">:=</span>\n  <span class=\"n\">leading_parser</span> <span class=\"n\">withPosition</span> <span class=\"bp\">$</span> <span class=\"n\">ppRealGroup</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">many1Indent</span> <span class=\"o\">(</span><span class=\"n\">ppSpace</span> <span class=\"bp\">&gt;&gt;</span> <span class=\"n\">ppGroup</span> <span class=\"n\">matchAlt</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>What's the effect of this, and why do we want it?</p>",
        "id": 383565091,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1691662155
    },
    {
        "content": "<p>Ok, so <code>↦</code> doesn't work in that PR, but it also doesn't work for regular functions:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#check</span> <span class=\"k\">show</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"k\">from</span> <span class=\"k\">fun</span> <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">0</span> <span class=\"bp\">|</span> <span class=\"n\">Nat.succ</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"c1\">-- ok</span>\n<span class=\"k\">#check</span> <span class=\"k\">show</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"k\">from</span> <span class=\"k\">fun</span> <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">↦</span> <span class=\"mi\">0</span> <span class=\"bp\">|</span> <span class=\"n\">Nat.succ</span> <span class=\"n\">n</span> <span class=\"bp\">↦</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"c1\">-- fail</span>\n</code></pre></div>",
        "id": 383565123,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1691662165
    },
    {
        "content": "<p>Ah, so it's <em>just</em> e.g. <code>fun x ↦ y</code> that works! ...I think we want to fix that, right?</p>",
        "id": 383565351,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1691662224
    },
    {
        "content": "<p>Yes, I think we probably do want to fix that for regular <code>fun</code>; and since they use the same parser, we will get the feature for <code>Finsupp</code> for free once it's fixed</p>",
        "id": 383565495,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1691662257
    },
    {
        "content": "<p>Just want to bring this message down so it doesn't fade into obscurity :)</p>\n<p><span class=\"user-mention silent\" data-user-id=\"548935\">Thomas Murrills</span> <a href=\"#narrow/stream/113488-general/topic/Notation.20for.20.60Finsupp.60/near/383565091\">said</a>:</p>\n<blockquote>\n<p>On another point, I was wondering about this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- A variant of `Lean.Parser.Term.matchAlts` with less line wrapping. -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">fun₀.matchAlts</span> <span class=\"o\">:</span> <span class=\"n\">Parser</span> <span class=\"o\">:=</span>\n  <span class=\"n\">leading_parser</span> <span class=\"n\">withPosition</span> <span class=\"bp\">$</span> <span class=\"n\">ppRealGroup</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">many1Indent</span> <span class=\"o\">(</span><span class=\"n\">ppSpace</span> <span class=\"bp\">&gt;&gt;</span> <span class=\"n\">ppGroup</span> <span class=\"n\">matchAlt</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>What's the effect of this, and why do we want it?</p>\n</blockquote>",
        "id": 383705400,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1691688087
    },
    {
        "content": "<p>Compare with <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.Parser.Term.matchAlts#src\">src#Lean.Parser.Term.matchAlts</a>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">matchAlts</span> <span class=\"o\">(</span><span class=\"n\">rhsParser</span> <span class=\"o\">:</span> <span class=\"n\">Parser</span> <span class=\"o\">:=</span> <span class=\"n\">termParser</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Parser</span> <span class=\"o\">:=</span>\n  <span class=\"n\">leading_parser</span> <span class=\"n\">withPosition</span> <span class=\"bp\">$</span> <span class=\"n\">many1Indent</span> <span class=\"o\">(</span><span class=\"n\">ppLine</span> <span class=\"bp\">&gt;&gt;</span> <span class=\"n\">matchAlt</span> <span class=\"n\">rhsParser</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 383710534,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1691689111
    },
    {
        "content": "<p>The effect is:</p>\n<ul>\n<li><code>fun₀ | 0 =&gt; x + x + x | 1 =&gt; y + y + y</code> is rendered on a single line if possible (the removed <code>ppLine</code>)</li>\n<li>If not possible, the wrapping always happens at the <code>|</code>s before the <code>+</code>s (the <code>ppGroup</code>)<br>\n  I think the <code>ppRealGroup</code> was part of the same thing.</li>\n</ul>",
        "id": 383711185,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1691689253
    },
    {
        "content": "<p>The reason we want the first one is that we want <code>(fun₀ | 0 =&gt; x) + (fun₀ | 0 =&gt; y) = fun₀ | 0 =&gt; x + y</code> to render on one line in the goal view, otherwise it's completely unreadable</p>",
        "id": 383711413,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1691689308
    },
    {
        "content": "<p>With the default <code>matchAlts</code> it printed as:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Finsupp.single_add.</span><span class=\"o\">{</span><span class=\"n\">u_2</span><span class=\"o\">,</span> <span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_2</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">inst</span><span class=\"bp\">✝</span> <span class=\"o\">:</span> <span class=\"n\">AddZeroClass</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b₁</span> <span class=\"n\">b₂</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">fun₀</span>\n      <span class=\"bp\">|</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">b₁</span> <span class=\"bp\">+</span> <span class=\"n\">b₂</span><span class=\"o\">)</span> <span class=\"bp\">=</span>\n    <span class=\"o\">(</span><span class=\"n\">fun₀</span>\n        <span class=\"bp\">|</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">b₁</span><span class=\"o\">)</span> <span class=\"bp\">+</span>\n      <span class=\"n\">fun₀</span>\n      <span class=\"bp\">|</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">b₂</span>\n</code></pre></div>",
        "id": 383711828,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1691689363
    },
    {
        "content": "<p>That's great! I stress tested the parser (by itself) a bit and nothing seemed to break when it shouldn't. All the inputs that I wanted to work did. :)</p>",
        "id": 383719155,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1691691072
    },
    {
        "content": "<p>One thing that puzzled me while developing this is that we seem to have all this logic for clever line wrapping, only to completely ignore the width of the goal view when rendering it...</p>",
        "id": 383722550,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1691691912
    },
    {
        "content": "<p>Does the <code>![x, y, ...]</code> notation from <code>Mathlib.Data.Fin.VecNotation</code> work for dependent vectors as well?</p>",
        "id": 389229293,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1693930826
    },
    {
        "content": "<p>No, and probably it shouldn't because that would be annoying for elaboration.</p>",
        "id": 389237333,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1693933162
    },
    {
        "content": "<p>(but it could be a different syntax</p>",
        "id": 389237380,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1693933176
    },
    {
        "content": "<p>Btw your notation is currently broken when the user accidentally uses the same index twice. This sounds like a dumb restriction, but it actually came up for me since I was doing stuff like <code>fun₀ | 1 =&gt; 0 | 0 =&gt; -1 : R →₀ S</code> for a possibly trivial ring <code>R</code>. The solution there was to use <code>+</code> instead of <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Finsupp.update#doc\">docs#Finsupp.update</a>.</p>",
        "id": 393042806,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1695655405
    },
    {
        "content": "<p><a href=\"#narrow/stream/113488-general/topic/Notation.20for.20.60Finsupp.60/near/393042806\">A message</a> was moved here from <a class=\"stream-topic\" data-stream-id=\"217875\" href=\"/#narrow/stream/217875-Is-there-code-for-X.3F/topic/Factorisation.20of.20squarefree.20naturals\">#Is there code for X? &gt; Factorisation of squarefree naturals</a> by <span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span>.</p>",
        "id": 393062337,
        "sender_full_name": "Notification Bot",
        "timestamp": 1695660158
    },
    {
        "content": "<p>This was deliberate on my part; I thought addition would be more surprising for the semantics than replacements</p>",
        "id": 393062961,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1695660379
    },
    {
        "content": "<p>For instance, <code>{0: 1, 0: 2}</code> in python means <code>{0: 2}</code> not <code>{0: 3}</code>.</p>",
        "id": 393063014,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1695660402
    },
    {
        "content": "<p><code>(fun | 1 =&gt; 2 | 1 =&gt; 2 | _ =&gt; 0)</code> is an error (<code>redundant alternative</code>) so unfortunately I can't claim I'm emulating that</p>",
        "id": 393063116,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1695660448
    },
    {
        "content": "<p>Well I've resorted to using <code>(fun₀ | 1 =&gt; 1) - fun₀ | 0 =&gt; 1 : R →₀ ℤ</code> instead of <code>fun₀ | 1 =&gt; 1 | 0 =&gt; -1 : R →₀ ℤ</code> <a href=\"https://github.com/YaelDillies/LeanCamCombi/blob/main/LeanCamCombi/DiscreteDeriv.lean#L20C12-L20C54\">here</a> because of that, so I'm unconvinced.</p>",
        "id": 393085070,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1695667503
    },
    {
        "content": "<p>This had the advantage of</p>\n<ul>\n<li>meaning the correct thing even when the ring is trivial</li>\n<li>not requiring side goals</li>\n</ul>",
        "id": 393085240,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1695667574
    },
    {
        "content": "<p>I think your spelling is better anyway because there's no ambiguity in what it could mean</p>",
        "id": 393088178,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1695668537
    },
    {
        "content": "<p>Which is to say, I would rather see <code>(fun₀ | 1 =&gt; 1) - (fun₀ | 0 =&gt; 1)</code> than <code>fun₀ | 1 =&gt; 1 | 0 =&gt; -1</code> in the goal view for the case you describe</p>",
        "id": 393088327,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1695668588
    },
    {
        "content": "<p>Is there any way to temporarily turn off the notation, to prove things about it? I'm not exactly sure how it's implemented so it's hard to know</p>",
        "id": 403564897,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1700649319
    },
    {
        "content": "<p>No, there isn't; but it's sort of the same as proving things about <code>{a, b}</code>; instead of <code>insert</code> and <code>singleton</code>, the term is built of <code>update</code> and <code>single</code></p>",
        "id": 403565761,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1700649630
    },
    {
        "content": "<p>Maybe the docstring and/or hover behavior needs improving</p>",
        "id": 403566375,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1700649834
    },
    {
        "content": "<p>This hover text is pretty dumb: oops!</p>\n<p><a href=\"/user_uploads/3121/1yZlGxAEuiuJWGMQy4EY1UOr/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/1yZlGxAEuiuJWGMQy4EY1UOr/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/1yZlGxAEuiuJWGMQy4EY1UOr/image.png\"></a></div>",
        "id": 403566539,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1700649883
    },
    {
        "content": "<p>You can use <code>set_option pp.notation false</code> btw, I just wouldn't know how to make it more fine-grained.</p>",
        "id": 403635979,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1700673790
    },
    {
        "content": "<p>Is it still the case that FinSupp is noncomputable btw?</p>",
        "id": 403824221,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1700759037
    },
    {
        "content": "<p>Yes, use <code>DFinsupp</code> if you want a computable version</p>",
        "id": 403824372,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1700759112
    }
]