[
    {
        "content": "<p>(deleted: cannot reproduce; turns out I had a bunch of std uncompiled)</p>",
        "id": 377755454,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1690097327
    },
    {
        "content": "<p>So I have spent some time today looking at <code>RingTheory.Kaehler</code>, a poster child for <code>maxHeartbeats</code> and <code>synthInstance.maxHeartbeats</code> bumps. The first time they need bumping is in part because of <a href=\"https://github.com/leanprover-community/mathlib4/blob/f8c1566ccfded661bfcb7b64f01a88be3a9d87dc/Mathlib/RingTheory/Kaehler.lean#L218-L219\">this rewrite</a>, which takes two seconds for me on a fast machine and 3 or 4 on my laptop. Here's the experiment I did (and which you can do too). Start with a fresh master.</p>\n<p>1) I copied <a href=\"https://gist.github.com/kbuzzard/8fd862c42ac5b8e2195550bec742d295\">this file</a> to <code>Mathlib.RingTheory.Kaehler2</code>. It's just the first 200 or so lines of <code>Mathlib.RingTheory.Kaehler</code> but with <code>trace.profile true</code> at the relevant time (the rewrite which takes 2+ seconds).</p>\n<p>2) I ran <code>lake build Mathlib.RingTheory.Kaehler2 &gt; trace.txt</code> (this takes a minute or two and makes a 31 meg file with over 200000 lines).</p>\n<p>3) I opened the trace file in a text editor and searched for <code>nsmul =?= AddMonoid.mk</code>. This is the middle line in what looks like a syntactically equal check. In full the check looks like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">[</span><span class=\"n\">Meta.isDefEq</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">012934</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">✅</span>\n<span class=\"n\">AddMonoid.mk</span>\n  <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">S</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">S</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">S</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">S</span><span class=\"o\">),</span> <span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">S</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">S</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">S</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">S</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n  <span class=\"n\">AddMonoid.nsmul</span> <span class=\"bp\">=?=</span> <span class=\"n\">AddMonoid.mk</span>\n  <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">S</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">S</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">S</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">S</span><span class=\"o\">),</span> <span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">S</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">S</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">S</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">S</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n  <span class=\"n\">AddMonoid.nsmul</span>\n</code></pre></div>\n<p>There are 134 of these, spread evenly through the trace, one occurring about every 1800 lines. Each of these 134 problems takes about 12ms to be solved, and these 1.6 seconds make up the majority of the time spent on the rewrite.</p>\n<p>(If you also set <code>trace.Meta.isDefEq true</code> you can see the gigantic trace of apparently syntactically equal stuff which is spewed out every time this goal needs to be solved.)</p>\n<p>Each of the 134 goals is a \"blocker\" for progression in the sense that if you look at the trace you will see that after solving this goal, trace indentation always jumps back 50 or more spaces. The next goal is always one of the following:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">[</span><span class=\"n\">Meta.isDefEq</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">041673</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"n\">Semiring.toModule</span> <span class=\"bp\">=?=</span> <span class=\"n\">Semiring.toModule</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">[</span><span class=\"n\">Meta.isDefEq</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">020788</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"n\">Semiring.toNonUnitalSemiring</span> <span class=\"bp\">=?=</span> <span class=\"n\">NonUnitalSemiring.mk</span>\n      <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span>\n        <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">S</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">S</span><span class=\"o\">),</span>\n          <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"n\">Algebra.TensorProduct.mul</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"n\">Algebra.TensorProduct.mul</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">y</span><span class=\"o\">))</span>\n              <span class=\"n\">z</span> <span class=\"bp\">=</span>\n            <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"n\">Algebra.TensorProduct.mul</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n              <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"n\">Algebra.TensorProduct.mul</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"n\">z</span><span class=\"o\">))</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">[</span><span class=\"n\">Meta.isDefEq</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">041805</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"n\">CommSemiring.toSemiring</span> <span class=\"bp\">=?=</span> <span class=\"n\">Algebra.TensorProduct.instSemiringTensorProductToAddCommMonoidToNonUnitalNonAssocSemiringToNonAssocSemiringToAddCommMonoidToNonUnitalNonAssocSemiringToNonAssocSemiringToModuleToModule</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">[</span><span class=\"n\">Meta.synthInstance</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">359371</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"n\">SMul</span> <span class=\"n\">S</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">KaehlerDifferential.ideal</span> <span class=\"n\">R</span> <span class=\"n\">S</span> <span class=\"o\">}</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">[</span><span class=\"n\">Meta.isDefEq</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">201068</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"n\">SetLike.instMembership</span> <span class=\"bp\">=?=</span> <span class=\"n\">SetLike.instMembership</span>\n</code></pre></div>\n<p>And then for pretty much all of these goals, they take 1900 lines of trace to solve, along the way expanding out to subgoals which are 30 lines long and then collapsing again to subgoals which are one line long, and each time ending up with 0.012 seconds solving <code>AddMonoid.mk _ _ AddMonoid.nsmul =?= AddMonoid.mk _ _ AddMonoid.nsmul</code>.</p>\n<p>I'm not entirely sure what any of this means. Right now I have three questions and one in progress task.</p>\n<p>The questions are:</p>\n<p>(1) Is 12ms a reasonable amount of time for solving <code>AddMonoid.mk _ _ AddMonoid.nsmul =?= AddMonoid.mk _ _ AddMonoid.nsmul</code> ? Or is this not a reasonable question because I am not asking it with <code>pp.all true</code> so we can't even see what the question is?</p>\n<p>(2) How do I access the trace with <code>pp.all true</code> on, so I can see more about what that question is which is taking 12ms? I've tried switching it on in the code but it just crashes VS Code and brings my computer to its knees if I run it on the command line.</p>\n<p>(3) The trace would be a bit smaller if I knew the option which will change <code> (_ : ∀ (a : S ⊗[R] S →ₗ[R] S ⊗[R] S), 0 + a = a)</code> to just <code>_</code>. Is there such an option? I'm sure I've asked this before.</p>\n<p>The in progress task is that I'm trying to make this example mathlib-free and it's quite an effort. I probably won't get this done tonight. Current progress is <a href=\"https://github.com/kbuzzard/MweSkeletons/blob/ad8466c0757fce09bbdfee6ed8abe142447a9b21/MweSkeletons/Kaehler/mwe.lean#L64\">here</a>; this is a repo which has a skeleton for <code>CommRing</code> which I will hopefully be able to use at some point.</p>",
        "id": 377937118,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1690149221
    },
    {
        "content": "<blockquote>\n<p>This is the middle line in what looks like a syntactically equal check. In full the check looks like this:</p>\n</blockquote>\n<p>Can we somehow make <code>set_option pp.proofs.withTypes false</code> the default for when tracing instance info?</p>",
        "id": 377941298,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1690151585
    },
    {
        "content": "<blockquote>\n<p>Or is this not a reasonable question because I am not asking it with pp.all true so we can't even see what the question is?</p>\n</blockquote>\n<p>Yes, this is unfortunately not a reasonable question without knowing the implicit constructor arguments</p>",
        "id": 377941497,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1690151702
    },
    {
        "content": "<p>This is pretty suspicious:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">[</span><span class=\"n\">Meta.isDefEq</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">020788</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"n\">Semiring.toNonUnitalSemiring</span> <span class=\"bp\">=?=</span> <span class=\"n\">NonUnitalSemiring.mk</span>\n      <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span>\n        <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">S</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">S</span><span class=\"o\">),</span>\n          <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"n\">Algebra.TensorProduct.mul</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"n\">Algebra.TensorProduct.mul</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">y</span><span class=\"o\">))</span>\n              <span class=\"n\">z</span> <span class=\"bp\">=</span>\n            <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"n\">Algebra.TensorProduct.mul</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n              <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"n\">Algebra.TensorProduct.mul</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"n\">z</span><span class=\"o\">))</span>\n</code></pre></div>\n<p>Those proofs don't have the right type: they should be about <code>*</code> not <code>Algebra.TensorProduct.mul</code></p>",
        "id": 377941641,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1690151775
    },
    {
        "content": "<p>I'm sure they're defeq, but doe <code>isDefeq</code> know to ignore them completely now?</p>",
        "id": 377941668,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1690151796
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113488-general/topic/slow.20rw/near/377941298\">said</a>:</p>\n<blockquote>\n<blockquote>\n<p>This is the middle line in what looks like a syntactically equal check. In full the check looks like this:</p>\n</blockquote>\n<p>Can we somehow make <code>set_option pp.proofs.withTypes false</code> the default for when tracing instance info?</p>\n</blockquote>\n<p>Thanks. It's actually <code>pp.proofs.withType</code>. </p>\n<blockquote>\n<p>This is pretty suspicious:</p>\n</blockquote>\n<p>There are 72 instances of <code>Semiring.toNonUnitalSemiring =?= NonUnitalSemiring.mk</code> in my minimised trace, each taking 15ms to be solved.</p>",
        "id": 377943821,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1690153226
    },
    {
        "content": "<p>I just kicked <a href=\"https://github.com/leanprover-community/mathlib/pull/19234\">!3#19234</a> on the queue. I don't think it will make a huge difference (when ported to mathlib4), but who knows...</p>",
        "id": 378022671,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1690184901
    },
    {
        "content": "<p>Thanks! I think it made little difference on master, but it helped in another forward-port (edit: <a href=\"https://github.com/leanprover-community/mathlib4/pull/6094\">#6094</a>)</p>",
        "id": 378030388,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1690186415
    },
    {
        "content": "<p>Thanks! I'm still in the process of trying to understand why this file is slow, but tidying it up always helps.</p>",
        "id": 378106721,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1690199295
    },
    {
        "content": "<p>Does adding shortcut instances help speed it up at all? Something like this just before <code>KaehlerDifferential.endEquivDerivation'</code></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">set_option</span> <span class=\"n\">synthInstance.maxHeartbeats</span> <span class=\"mi\">1500000</span> <span class=\"k\">in</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">maxHeartbeats</span> <span class=\"mi\">4400000</span> <span class=\"k\">in</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Module</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">KaehlerDifferential.ideal</span> <span class=\"n\">R</span> <span class=\"n\">S</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">cotangentIdeal</span> <span class=\"o\">:=</span> <span class=\"n\">Submodule.module'</span> <span class=\"n\">_</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">synthInstance.maxHeartbeats</span> <span class=\"mi\">1500000</span> <span class=\"k\">in</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">maxHeartbeats</span> <span class=\"mi\">4400000</span> <span class=\"k\">in</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Module</span> <span class=\"n\">S</span> <span class=\"o\">(</span><span class=\"n\">KaehlerDifferential.ideal</span> <span class=\"n\">R</span> <span class=\"n\">S</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">cotangentIdeal</span> <span class=\"o\">:=</span> <span class=\"n\">Submodule.module'</span> <span class=\"n\">_</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">synthInstance.maxHeartbeats</span> <span class=\"mi\">1500000</span> <span class=\"k\">in</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">maxHeartbeats</span> <span class=\"mi\">4400000</span> <span class=\"k\">in</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">SMulCommClass</span> <span class=\"n\">R</span> <span class=\"n\">S</span> <span class=\"o\">(</span><span class=\"n\">KaehlerDifferential.ideal</span> <span class=\"n\">R</span> <span class=\"n\">S</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">cotangentIdeal</span> <span class=\"o\">:=</span> <span class=\"n\">IsScalarTower.to_smulCommClass</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Module</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">Derivation</span> <span class=\"n\">R</span> <span class=\"n\">S</span> <span class=\"o\">(</span><span class=\"n\">KaehlerDifferential.ideal</span> <span class=\"n\">R</span> <span class=\"n\">S</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">cotangentIdeal</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">Derivation.instModule</span>\n</code></pre></div>",
        "id": 378110522,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1690199887
    }
]