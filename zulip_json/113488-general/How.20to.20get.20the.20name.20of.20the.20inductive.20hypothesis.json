[
    {
        "content": "<p>After mathport, my lemma looks like this, and shows an error.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">MvPolynomial.mul_x_pow_eq_zero</span> <span class=\"o\">{</span><span class=\"n\">σ</span> <span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">CommSemiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">σ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">MvPolynomial</span> <span class=\"n\">σ</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">MvPolynomial.X</span> <span class=\"n\">s</span> <span class=\"bp\">^</span> <span class=\"n\">d</span> <span class=\"bp\">*</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n  <span class=\"kd\">by</span>\n  <span class=\"n\">induction</span> <span class=\"n\">d</span>\n  <span class=\"bp\">·</span> <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n    <span class=\"n\">exact</span> <span class=\"n\">h</span>\n  <span class=\"bp\">·</span> <span class=\"n\">apply</span> <span class=\"n\">d_ih</span> <span class=\"c1\">-- unknown identifier 'd_ih'</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">pow_succ</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n    <span class=\"n\">apply</span> <span class=\"n\">MvPolynomial.mul_x_eq_zero</span> <span class=\"n\">s</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">mul_assoc</span><span class=\"o\">]</span>\n    <span class=\"n\">exact</span> <span class=\"n\">h</span>\n</code></pre></div>\n<p>When I mouse over <code>induction</code> I get a docstring saying \"You can use with to provide the variables names for each constructor.\" But how do I do this?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">MvPolynomial.mul_x_pow_eq_zero</span> <span class=\"o\">{</span><span class=\"n\">σ</span> <span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">CommSemiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">σ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">MvPolynomial</span> <span class=\"n\">σ</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">MvPolynomial.X</span> <span class=\"n\">s</span> <span class=\"bp\">^</span> <span class=\"n\">d</span> <span class=\"bp\">*</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n  <span class=\"kd\">by</span>\n  <span class=\"n\">induction</span> <span class=\"n\">d</span> <span class=\"k\">with</span> <span class=\"n\">d</span> <span class=\"n\">d_ih</span> <span class=\"c1\">-- unknown tactic</span>\n  <span class=\"bp\">·</span> <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n    <span class=\"n\">exact</span> <span class=\"n\">h</span>\n  <span class=\"bp\">·</span> <span class=\"n\">apply</span> <span class=\"n\">d_ih</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">pow_succ</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n    <span class=\"n\">apply</span> <span class=\"n\">MvPolynomial.mul_x_eq_zero</span> <span class=\"n\">s</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">mul_assoc</span><span class=\"o\">]</span>\n    <span class=\"n\">exact</span> <span class=\"n\">h</span>\n</code></pre></div>",
        "id": 390097557,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1694320213
    },
    {
        "content": "<p>Seems like the right way is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">MvPolynomial.mul_x_pow_eq_zero</span> <span class=\"o\">{</span><span class=\"n\">σ</span> <span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">CommSemiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">σ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">MvPolynomial</span> <span class=\"n\">σ</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">MvPolynomial.X</span> <span class=\"n\">s</span> <span class=\"bp\">^</span> <span class=\"n\">d</span> <span class=\"bp\">*</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n  <span class=\"kd\">by</span>\n  <span class=\"n\">induction</span> <span class=\"n\">d</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n    <span class=\"n\">exact</span> <span class=\"n\">h</span>\n  <span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"n\">x'</span> <span class=\"n\">d_ih</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">apply</span> <span class=\"n\">d_ih</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">pow_succ</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n    <span class=\"n\">apply</span> <span class=\"n\">MvPolynomial.mul_x_eq_zero</span> <span class=\"n\">s</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">mul_assoc</span><span class=\"o\">]</span>\n    <span class=\"n\">exact</span> <span class=\"n\">h</span>\n</code></pre></div>",
        "id": 390097739,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1694320423
    },
    {
        "content": "<p>I was very confused by the docstring, in the last bullet point it seems like it's saying I can only use one tactic to close my goal for each case.</p>",
        "id": 390097913,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1694320553
    },
    {
        "content": "<p>I'm not actually sure where that docstring lives, I can't find it in either of the lean4 or mathlib4 repos.</p>",
        "id": 390098913,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1694321204
    },
    {
        "content": "<p>This is not exactly an answer to your question, but, if you leave the cursor at the end of the \"inducted\" variable, you should get a code-action.<br>\n<a href=\"/user_uploads/3121/7OwVzo2XOKk3TgiAsRYUlZCX/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/7OwVzo2XOKk3TgiAsRYUlZCX/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/7OwVzo2XOKk3TgiAsRYUlZCX/image.png\"></a></div><p>If you click on the lightbulb and then on <code>Generate...</code> you will get a template that you can fill in.  This is what the template looks like:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">d</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">induction</span> <span class=\"n\">d</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"bp\">=&gt;</span> <span class=\"gr\">sorry</span>\n  <span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"n\">n</span> <span class=\"n\">ih</span> <span class=\"bp\">=&gt;</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 390109153,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1694328346
    },
    {
        "content": "<p>I almost never use this feature, so it is not very helpful to me.</p>\n<p>I want to point out that <code>cases</code> also has the same problem. I would really like to make a PR to whatever thing provides the text for these tooltips but I can't find it.</p>",
        "id": 392510692,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1695386901
    },
    {
        "content": "<p>Also now that I try it, this lightbulb is destroying the line of code after where it inserts the example.</p>",
        "id": 392511506,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1695387186
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"321459\">Damiano Testa</span> <a href=\"#narrow/stream/113488-general/topic/How.20to.20get.20the.20name.20of.20the.20inductive.20hypothesis/near/390109153\">said</a>:</p>\n<blockquote>\n<p>This is not exactly an answer to your question, but, if you leave the cursor at the end of the \"inducted\" variable, you should get a code-action.<br>\n<a href=\"/user_uploads/3121/7OwVzo2XOKk3TgiAsRYUlZCX/image.png\">image.png</a></p>\n<p>If you click on the lightbulb and then on <code>Generate...</code> you will get a template that you can fill in.  This is what the template looks like:</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">d</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">induction</span> <span class=\"n\">d</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"bp\">=&gt;</span> <span class=\"gr\">sorry</span>\n  <span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"n\">n</span> <span class=\"n\">ih</span> <span class=\"bp\">=&gt;</span> <span class=\"gr\">sorry</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>Are these code actions defined by std, mathlib or built-in?</p>",
        "id": 392511771,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1695387273
    },
    {
        "content": "<p>std</p>",
        "id": 392528169,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1695392116
    },
    {
        "content": "<p>Do we have plans to upstream this eventually?</p>",
        "id": 392528522,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1695392202
    },
    {
        "content": "<p>You'll need to ask Mario.</p>",
        "id": 392529065,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1695392350
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> bonk</p>",
        "id": 392529104,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1695392363
    },
    {
        "content": "<p>More specific answer to \"where is it?\" is <a href=\"https://github.com/leanprover/std4/blob/7149f40ab67056499919535b8dcc244a5a4150af/Std/CodeAction/Misc.lean#L235-L251\">here</a></p>",
        "id": 392529420,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1695392447
    },
    {
        "content": "<p>what's the question?</p>",
        "id": 392590852,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1695412347
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"395550\">Henrik Böving</span> <a href=\"#narrow/stream/113488-general/topic/How.20to.20get.20the.20name.20of.20the.20inductive.20hypothesis/near/392528522\">said</a>:</p>\n<blockquote>\n<p>Do we have plans to upstream this eventually?</p>\n</blockquote>",
        "id": 392594648,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1695413931
    },
    {
        "content": "<p>to core? no</p>",
        "id": 392594880,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1695414059
    },
    {
        "content": "<p>this seems like an example of something that is suitable for std long-term: it's not necessary for the compiler but is a clear value add on the language</p>",
        "id": 392594974,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1695414110
    },
    {
        "content": "<p>I mean, it would be nice to have it in core development but only insofar as anything in std is a nice to have. I would rather solve that by putting std in the bootstrap and that's a far future thing</p>",
        "id": 392595210,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1695414210
    },
    {
        "content": "<p>When I use the tooltip doing induction on a list, I get</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"n\">induction</span> <span class=\"n\">l</span> <span class=\"n\">generalizing</span> <span class=\"n\">n</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">α</span> <span class=\"bp\">=&gt;</span> <span class=\"gr\">sorry</span>\n  <span class=\"bp\">|</span> <span class=\"n\">nil</span> <span class=\"bp\">=&gt;</span> <span class=\"gr\">sorry</span>\n  <span class=\"bp\">|</span> <span class=\"n\">cons</span> <span class=\"n\">head</span> <span class=\"n\">tail</span> <span class=\"n\">ih</span> <span class=\"bp\">=&gt;</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>What is this <code>  | α =&gt; sorry</code> part? Evidently I don't need it, because I can delete it and prove the other ones normally.</p>",
        "id": 392699714,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1695475960
    },
    {
        "content": "<p><a href=\"#narrow/stream/113488-general/topic/Nonsense.20autocomplete.20of.20.60cases.20with.60/near/391116492\">https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/Nonsense.20autocomplete.20of.20.60cases.20with.60/near/391116492</a></p>",
        "id": 392700063,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1695476134
    },
    {
        "content": "<p>Is there an open issue for this? Where does it go, if not?</p>",
        "id": 392702243,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1695477281
    },
    {
        "content": "<p>Well according to Patrick's comment, this lives in std4.</p>",
        "id": 392702394,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1695477395
    },
    {
        "content": "<p>I'm not sure if this is separate from or related to the tooltip eating my code. Maybe there need to be two issues?</p>",
        "id": 392702430,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1695477443
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/std4/pull/270\">std4#270</a> , hopefully this is useful and in the right place.</p>",
        "id": 392703071,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1695477926
    },
    {
        "content": "<p>You wrote \"tooltip\" where you meant \"code action\".</p>",
        "id": 392703636,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1695478269
    },
    {
        "content": "<p>oh jeez I just copied from someone else. What do these mean, and which is which?</p>",
        "id": 392705219,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1695479452
    },
    {
        "content": "<p>Hopefully I fixed it. So a code action is a lightbulb and a tooltip is...not sure.</p>",
        "id": 392705261,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1695479498
    },
    {
        "content": "<p>Tooltip is whatever you see when you let your mouse pointer over something and a little piece of information shows up.</p>",
        "id": 392705743,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1695479884
    }
]