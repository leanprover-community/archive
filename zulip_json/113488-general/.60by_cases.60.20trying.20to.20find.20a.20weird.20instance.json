[
    {
        "content": "<p>What is up with <a href=\"https://github.com/leanprover-community/mathlib4/blob/9da87fd9865ae4c277c65b8880646a0577e5189e/Mathlib/RingTheory/DiscreteValuationRing/TFAE.lean#L243\">the error here</a>? Why is <code>by_cases</code> trying to find a linear order on ideals?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">...</span>\n    <span class=\"n\">rintro</span> <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"n\">J</span> <span class=\"o\">:</span> <span class=\"n\">Ideal</span> <span class=\"n\">R</span><span class=\"o\">)</span>\n    <span class=\"n\">by_cases</span> <span class=\"n\">hI</span> <span class=\"o\">:</span> <span class=\"n\">I</span> <span class=\"bp\">=</span> <span class=\"bp\">⊥</span> <span class=\"c1\">-- error: failed to synthesize `Ideal R → Ideal R → LinearOrder (Ideal R)`</span>\n<span class=\"bp\">...</span>\n</code></pre></div>\n<p>Messages:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">...</span>\n<span class=\"n\">I</span> <span class=\"n\">J</span> <span class=\"o\">:</span> <span class=\"n\">Ideal</span> <span class=\"n\">R</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">I</span> <span class=\"bp\">≤</span> <span class=\"n\">J</span> <span class=\"bp\">∨</span> <span class=\"n\">J</span> <span class=\"bp\">≤</span> <span class=\"n\">I</span>\n\n<span class=\"bp\">▶</span> <span class=\"mi\">242</span><span class=\"o\">:</span><span class=\"mi\">5</span><span class=\"bp\">-</span><span class=\"mi\">242</span><span class=\"o\">:</span><span class=\"mi\">24</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span>\n<span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span>\n  <span class=\"n\">Ideal</span> <span class=\"n\">R</span> <span class=\"bp\">→</span> <span class=\"n\">Ideal</span> <span class=\"n\">R</span> <span class=\"bp\">→</span> <span class=\"n\">LinearOrder</span> <span class=\"o\">(</span><span class=\"n\">Ideal</span> <span class=\"n\">R</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">deterministic</span><span class=\"o\">)</span> <span class=\"n\">timeout</span> <span class=\"n\">at</span> <span class=\"bp\">'</span><span class=\"n\">typeclass'</span><span class=\"o\">,</span> <span class=\"n\">maximum</span> <span class=\"n\">number</span> <span class=\"n\">of</span> <span class=\"n\">heartbeats</span> <span class=\"o\">(</span><span class=\"mi\">20000</span><span class=\"o\">)</span> <span class=\"n\">has</span> <span class=\"n\">been</span> <span class=\"n\">reached</span> <span class=\"o\">(</span><span class=\"n\">use</span> <span class=\"bp\">'</span><span class=\"kd\">set_option</span> <span class=\"n\">synthInstance.maxHeartbeats</span> <span class=\"bp\">&lt;</span><span class=\"n\">num</span><span class=\"bp\">&gt;'</span> <span class=\"n\">to</span> <span class=\"n\">set</span> <span class=\"n\">the</span> <span class=\"n\">limit</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 374857727,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1689240158
    },
    {
        "content": "<p>(What is the Lean4 equivalent to <code>extract_goal</code>?)</p>",
        "id": 374858110,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1689240248
    },
    {
        "content": "<p>Extracting the goal manually works without problems:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">tfae_7_to_2.total</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span>\n    <span class=\"o\">[</span><span class=\"n\">CommRing</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Algebra</span> <span class=\"n\">R</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">IsFractionRing</span> <span class=\"n\">R</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">IsNoetherianRing</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">LocalRing</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n    <span class=\"o\">[</span><span class=\"n\">IsDomain</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"n\">IsField</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ne_bot</span> <span class=\"o\">:</span> <span class=\"n\">maximalIdeal</span> <span class=\"n\">R</span> <span class=\"bp\">≠</span> <span class=\"bp\">⊥</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"n\">Ideal</span> <span class=\"n\">R</span><span class=\"o\">),</span> <span class=\"n\">I</span> <span class=\"bp\">≠</span> <span class=\"bp\">⊥</span> <span class=\"bp\">→</span> <span class=\"bp\">∃</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">I</span> <span class=\"bp\">=</span> <span class=\"n\">maximalIdeal</span> <span class=\"n\">R</span> <span class=\"bp\">^</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"n\">J</span> <span class=\"o\">:</span> <span class=\"n\">Ideal</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">I</span> <span class=\"bp\">≤</span> <span class=\"n\">J</span> <span class=\"bp\">∨</span> <span class=\"n\">J</span> <span class=\"bp\">≤</span> <span class=\"n\">I</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">hI</span> <span class=\"o\">:</span> <span class=\"n\">I</span> <span class=\"bp\">=</span> <span class=\"bp\">⊥</span>\n  <span class=\"bp\">·</span> <span class=\"n\">subst</span> <span class=\"n\">hI</span><span class=\"bp\">;</span> <span class=\"n\">left</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">bot_le</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">hJ</span> <span class=\"o\">:</span> <span class=\"n\">J</span> <span class=\"bp\">=</span> <span class=\"bp\">⊥</span>\n  <span class=\"bp\">·</span> <span class=\"n\">subst</span> <span class=\"n\">hJ</span><span class=\"bp\">;</span> <span class=\"n\">right</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">bot_le</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">H</span> <span class=\"n\">I</span> <span class=\"n\">hI</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">H</span> <span class=\"n\">J</span> <span class=\"n\">hJ</span>\n  <span class=\"n\">cases'</span> <span class=\"n\">le_total</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"k\">with</span> <span class=\"n\">h'</span> <span class=\"n\">h'</span>\n  <span class=\"bp\">·</span> <span class=\"n\">left</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">Ideal.pow_le_pow</span> <span class=\"n\">h'</span>\n  <span class=\"bp\">·</span> <span class=\"n\">right</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">Ideal.pow_le_pow</span> <span class=\"n\">h'</span>\n</code></pre></div>",
        "id": 374858869,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1689240403
    },
    {
        "content": "<p>This reproduces on the latest mathlib master.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.RingTheory.Polynomial.RationalRoot</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.RingTheory.Valuation.ValuationRing</span>\n\n<span class=\"kn\">section</span> <span class=\"n\">DedekindDomain.Basic</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"n\">A</span> <span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">CommRing</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">CommRing</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">K</span><span class=\"o\">]</span>\n\n<span class=\"sd\">/-- A ring `R` has Krull dimension at most one if all nonzero prime ideals are maximal. -/</span>\n<span class=\"kd\">class</span> <span class=\"n\">Ring.DimensionLEOne</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">maximalOfPrime</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">Ideal</span> <span class=\"n\">R</span><span class=\"o\">},</span> <span class=\"n\">p</span> <span class=\"bp\">≠</span> <span class=\"bp\">⊥</span> <span class=\"bp\">→</span> <span class=\"n\">p.IsPrime</span> <span class=\"bp\">→</span> <span class=\"n\">p.IsMaximal</span><span class=\"o\">)</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Ideal</span> <span class=\"n\">Ring</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">Ring</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">DimensionLEOne.principal_ideal_ring</span> <span class=\"o\">[</span><span class=\"n\">IsDomain</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">IsPrincipalIdealRing</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n    <span class=\"n\">DimensionLEOne</span> <span class=\"n\">A</span> <span class=\"n\">where</span>\n  <span class=\"n\">maximalOfPrime</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">nonzero</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">IsPrime.to_maximal_ideal</span> <span class=\"n\">nonzero</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">R</span><span class=\"o\">}</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">Ring</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">IsDedekindDomain</span>\n  <span class=\"kd\">extends</span> <span class=\"n\">IsDomain</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"n\">IsNoetherian</span> <span class=\"n\">A</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"n\">DimensionLEOne</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"n\">IsIntegrallyClosed</span> <span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n\n<span class=\"c1\">-- See library note [lower instance priority]</span>\n<span class=\"kd\">instance</span> <span class=\"o\">(</span><span class=\"n\">priority</span> <span class=\"o\">:=</span> <span class=\"mi\">100</span><span class=\"o\">)</span> <span class=\"n\">IsPrincipalIdealRing.isDedekindDomain</span>\n    <span class=\"o\">[</span><span class=\"n\">IsDomain</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">IsPrincipalIdealRing</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n    <span class=\"n\">IsDedekindDomain</span> <span class=\"n\">A</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span> <span class=\"n\">PrincipalIdealRing.isNoetherianRing</span><span class=\"o\">,</span> <span class=\"n\">Ring.DimensionLEOne.principal_ideal_ring</span> <span class=\"n\">A</span><span class=\"o\">,</span>\n    <span class=\"n\">UniqueFactorizationMonoid.instIsIntegrallyClosed</span> <span class=\"k\">with</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">DedekindDomain.Basic</span>\n\n<span class=\"kn\">section</span> <span class=\"n\">TFAE</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">CommRing</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Algebra</span> <span class=\"n\">R</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">IsFractionRing</span> <span class=\"n\">R</span> <span class=\"n\">K</span><span class=\"o\">]</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">LocalRing</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">DiscreteValuationRing.TFAE</span> <span class=\"o\">[</span><span class=\"n\">IsNoetherianRing</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">LocalRing</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">IsDomain</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n    <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">IsField</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">List.TFAE</span>\n      <span class=\"o\">[</span><span class=\"n\">DiscreteValuationRing</span> <span class=\"n\">R</span><span class=\"o\">,</span> <span class=\"n\">ValuationRing</span> <span class=\"n\">R</span><span class=\"o\">,</span> <span class=\"n\">IsDedekindDomain</span> <span class=\"n\">R</span><span class=\"o\">,</span>\n        <span class=\"n\">IsIntegrallyClosed</span> <span class=\"n\">R</span> <span class=\"bp\">∧</span> <span class=\"bp\">∃!</span> <span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">Ideal</span> <span class=\"n\">R</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"bp\">≠</span> <span class=\"bp\">⊥</span> <span class=\"bp\">∧</span> <span class=\"n\">P.IsPrime</span><span class=\"o\">,</span>\n        <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">I</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">I</span> <span class=\"bp\">≠</span> <span class=\"bp\">⊥</span><span class=\"o\">),</span> <span class=\"bp\">∃</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">I</span> <span class=\"bp\">=</span> <span class=\"n\">maximalIdeal</span> <span class=\"n\">R</span> <span class=\"bp\">^</span> <span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">tfae_have</span> <span class=\"mi\">2</span> <span class=\"bp\">→</span> <span class=\"mi\">1</span>\n  <span class=\"bp\">·</span> <span class=\"gr\">sorry</span>\n  <span class=\"n\">tfae_have</span> <span class=\"mi\">4</span> <span class=\"bp\">→</span> <span class=\"mi\">3</span>\n  <span class=\"bp\">·</span> <span class=\"gr\">sorry</span>\n  <span class=\"n\">tfae_have</span> <span class=\"mi\">5</span> <span class=\"bp\">→</span> <span class=\"mi\">2</span>\n  <span class=\"bp\">·</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">ValuationRing.iff_ideal_total</span><span class=\"o\">]</span>\n    <span class=\"n\">intro</span> <span class=\"n\">H</span>\n    <span class=\"n\">constructor</span>\n    <span class=\"n\">rintro</span> <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"n\">J</span> <span class=\"o\">:</span> <span class=\"n\">Ideal</span> <span class=\"n\">R</span><span class=\"o\">)</span>\n    <span class=\"n\">by_cases</span> <span class=\"n\">hI</span> <span class=\"o\">:</span> <span class=\"n\">I</span> <span class=\"bp\">=</span> <span class=\"bp\">⊥</span>\n    <span class=\"bp\">·</span> <span class=\"gr\">sorry</span>\n    <span class=\"gr\">sorry</span>\n  <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">TFAE</span>\n</code></pre></div>",
        "id": 374863462,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1689241391
    },
    {
        "content": "<p>A bit more minimizing:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">Domain'</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n<span class=\"kd\">class</span> <span class=\"n\">PrincipalIdealRing'</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n<span class=\"kd\">class</span> <span class=\"n\">DedekindDomain'</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">Domain'</span> <span class=\"n\">X</span>\n<span class=\"kd\">class</span> <span class=\"n\">ValuationRing'</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">PrincipalIdealRing'</span> <span class=\"n\">X</span>\n<span class=\"kd\">class</span> <span class=\"n\">DiscreteValuationRing'</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">ValuationRing'</span> <span class=\"n\">X</span>\n<span class=\"kd\">instance</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">PrincipalIdealRing'</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Domain'</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">DedekindDomain'</span> <span class=\"n\">X</span> <span class=\"o\">:=</span> <span class=\"o\">⟨⟩</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">trace.Meta.synthInstance</span> <span class=\"n\">true</span> <span class=\"k\">in</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">DiscreteValuationRing'</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">ValuationRing'</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Domain'</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">DedekindDomain'</span> <span class=\"n\">X</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">infer_instance</span>\n</code></pre></div>\n<p>and we get lovely trace messages such as</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"o\">[</span><span class=\"n\">resume</span><span class=\"o\">]</span> <span class=\"n\">propagating</span> <span class=\"n\">DiscreteValuationRing'</span> <span class=\"n\">X</span> <span class=\"bp\">→</span>\n        <span class=\"n\">DiscreteValuationRing'</span> <span class=\"n\">X</span> <span class=\"bp\">→</span>\n          <span class=\"n\">DiscreteValuationRing'</span> <span class=\"n\">X</span> <span class=\"bp\">→</span>\n            <span class=\"n\">DiscreteValuationRing'</span> <span class=\"n\">X</span> <span class=\"bp\">→</span>\n              <span class=\"n\">DiscreteValuationRing'</span> <span class=\"n\">X</span> <span class=\"bp\">→</span>\n                <span class=\"n\">DiscreteValuationRing'</span> <span class=\"n\">X</span> <span class=\"bp\">→</span>\n                  <span class=\"n\">DiscreteValuationRing'</span> <span class=\"n\">X</span> <span class=\"bp\">→</span>\n                    <span class=\"n\">DiscreteValuationRing'</span> <span class=\"n\">X</span> <span class=\"bp\">→</span>\n                      <span class=\"n\">DiscreteValuationRing'</span> <span class=\"n\">X</span> <span class=\"bp\">→</span>\n                        <span class=\"n\">DiscreteValuationRing'</span> <span class=\"n\">X</span> <span class=\"bp\">→</span>\n                          <span class=\"n\">DiscreteValuationRing'</span> <span class=\"n\">X</span> <span class=\"bp\">→</span>\n                            <span class=\"n\">DiscreteValuationRing'</span> <span class=\"n\">X</span> <span class=\"bp\">→</span>\n                              <span class=\"n\">DiscreteValuationRing'</span> <span class=\"n\">X</span> <span class=\"bp\">→</span>\n                                <span class=\"n\">DiscreteValuationRing'</span> <span class=\"n\">X</span> <span class=\"bp\">→</span>\n                                  <span class=\"n\">DiscreteValuationRing'</span> <span class=\"n\">X</span> <span class=\"bp\">→</span>\n                                    <span class=\"n\">DiscreteValuationRing'</span> <span class=\"n\">X</span> <span class=\"bp\">→</span>\n                                      <span class=\"n\">DiscreteValuationRing'</span> <span class=\"n\">X</span> <span class=\"bp\">→</span>\n                                        <span class=\"n\">DiscreteValuationRing'</span> <span class=\"n\">X</span> <span class=\"bp\">→</span>\n                                          <span class=\"n\">DiscreteValuationRing'</span> <span class=\"n\">X</span> <span class=\"bp\">→</span>\n                                            <span class=\"n\">DiscreteValuationRing'</span> <span class=\"n\">X</span> <span class=\"bp\">→</span>\n                                              <span class=\"n\">DiscreteValuationRing'</span> <span class=\"n\">X</span> <span class=\"bp\">→</span>\n                                                <span class=\"n\">DiscreteValuationRing'</span> <span class=\"n\">X</span> <span class=\"bp\">→</span>\n                                                  <span class=\"n\">DiscreteValuationRing'</span> <span class=\"n\">X</span> <span class=\"bp\">→</span>\n                                                    <span class=\"n\">DiscreteValuationRing'</span> <span class=\"n\">X</span> <span class=\"bp\">→</span>\n                                                      <span class=\"n\">DiscreteValuationRing'</span> <span class=\"n\">X</span> <span class=\"bp\">→</span>\n                                                        <span class=\"n\">DiscreteValuationRing'</span> <span class=\"n\">X</span> <span class=\"bp\">→</span>\n                                                          <span class=\"n\">DiscreteValuationRing'</span> <span class=\"n\">X</span> <span class=\"bp\">→</span>\n                                                            <span class=\"n\">DiscreteValuationRing'</span> <span class=\"n\">X</span> <span class=\"bp\">→</span>\n                                                              <span class=\"n\">DiscreteValuationRing'</span> <span class=\"n\">X</span> <span class=\"bp\">→</span>\n                                                                <span class=\"n\">DiscreteValuationRing'</span> <span class=\"n\">X</span> <span class=\"bp\">→</span>\n                                                                  <span class=\"n\">DiscreteValuationRing'</span> <span class=\"n\">X</span> <span class=\"bp\">→</span>\n                                                                    <span class=\"n\">DiscreteValuationRing'</span> <span class=\"n\">X</span> <span class=\"bp\">→</span>\n                                                                      <span class=\"n\">DedekindDomain'</span>\n                                                                        <span class=\"n\">X</span> <span class=\"n\">to</span> <span class=\"n\">subgoal</span> <span class=\"n\">DedekindDomain'</span> <span class=\"n\">X</span> <span class=\"n\">of</span> <span class=\"n\">Domain'</span> <span class=\"n\">X</span> <span class=\"bp\">▶</span>\n</code></pre></div>\n<p>(here, we seem to hit the max search depth before timing out)</p>",
        "id": 374893214,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1689247159
    },
    {
        "content": "<p>(The reason Lean was trying to find the <code>LinearOrder</code> instance in <code>by_cases</code> is that linear orders carry decidability of <code>≤</code> and that implies decidability of <code>=</code>.)</p>",
        "id": 374893599,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1689247242
    },
    {
        "content": "<p><code>by_cases</code> <a href=\"https://github.com/leanprover/std4/blob/main/Std/Tactic/ByCases.lean#L20C15-L20C76\">is implemented as</a></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">by_cases</span> <span class=\"bp\">$</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">$</span><span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"kn\">open</span> <span class=\"n\">Classical</span> <span class=\"k\">in</span> <span class=\"n\">refine</span> <span class=\"k\">if</span> <span class=\"bp\">$</span><span class=\"n\">h</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"o\">:</span> <span class=\"bp\">$</span><span class=\"n\">e</span> <span class=\"k\">then</span> <span class=\"bp\">?</span><span class=\"n\">pos</span> <span class=\"k\">else</span> <span class=\"bp\">?</span><span class=\"n\">neg</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>Do I understand correctly that if this instance search didn't hit max search depth then it would eventually find the classical instance?</p>",
        "id": 374914496,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1689251588
    },
    {
        "content": "<p>Maybe as an experiment it's worth putting <code>classical!</code> on the line before to be more assertive in adding the classical instance?</p>",
        "id": 374915026,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1689251690
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/113488-general/topic/.60by_cases.60.20trying.20to.20find.20a.20weird.20instance/near/374914496\">said</a>:</p>\n<blockquote>\n<p>Do I understand correctly that if this instance search didn't hit max search depth then it would eventually find the classical instance?</p>\n</blockquote>\n<p>That's what I thought, at least.</p>",
        "id": 374921156,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1689252875
    },
    {
        "content": "<p>I ended up following Kyle's approach: <a href=\"https://github.com/leanprover-community/mathlib4/pull/5834/commits/13c68ee5\">https://github.com/leanprover-community/mathlib4/pull/5834/commits/13c68ee5</a></p>",
        "id": 378405590,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1690278717
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"238446\">Anne Baanen</span> <a href=\"#narrow/stream/113488-general/topic/.60by_cases.60.20trying.20to.20find.20a.20weird.20instance/near/374858110\">said</a>:</p>\n<blockquote>\n<p>(What is the Lean4 equivalent to <code>extract_goal</code>?)</p>\n</blockquote>\n<p>A few weeks later... <code>extract_goal</code> is now in mathlib4!  I produced a bad enough PR that Kyle wrote a great one!</p>",
        "id": 381231585,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1690995487
    }
]