[
    {
        "content": "<p>Here is a little teaser:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">~/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">lean</span><span class=\"bp\">/</span><span class=\"n\">mathlib4</span> <span class=\"bp\">$</span> <span class=\"bp\">./</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">bin</span><span class=\"bp\">/</span><span class=\"n\">loogle</span> <span class=\"n\">Mathlib.Data.List.Basic</span> <span class=\"bp\">'</span><span class=\"n\">List.replicate</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"bp\">++</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">'</span>\n<span class=\"n\">Found</span> <span class=\"mi\">3</span> <span class=\"n\">definitions</span> <span class=\"n\">mentioning</span> <span class=\"n\">List.replicate</span> <span class=\"n\">and</span> <span class=\"n\">HAppend.hAppend.</span>\n<span class=\"n\">Of</span> <span class=\"n\">these</span><span class=\"o\">,</span> <span class=\"mi\">3</span> <span class=\"k\">match</span> <span class=\"n\">your</span> <span class=\"n\">patterns.</span>\n\n<span class=\"n\">List.replicateTR_loop_eq</span>\n<span class=\"n\">List.replicate_add</span>\n<span class=\"n\">List.replicate_succ'</span>\n<span class=\"bp\">~/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">lean</span><span class=\"bp\">/</span><span class=\"n\">mathlib4</span> <span class=\"bp\">$</span> <span class=\"bp\">./</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">bin</span><span class=\"bp\">/</span><span class=\"n\">loogle</span> <span class=\"n\">Mathlib.Data.List.Basic</span> <span class=\"bp\">'</span><span class=\"o\">(</span><span class=\"n\">List.replicate</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"bp\">+</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">'</span>\n<span class=\"n\">Found</span> <span class=\"mi\">5</span> <span class=\"n\">definitions</span> <span class=\"n\">mentioning</span> <span class=\"n\">List.replicate</span><span class=\"o\">,</span> <span class=\"n\">HAdd.hAdd</span> <span class=\"n\">and</span> <span class=\"n\">Eq.</span>\n<span class=\"n\">Of</span> <span class=\"n\">these</span><span class=\"o\">,</span> <span class=\"mi\">3</span> <span class=\"k\">match</span> <span class=\"n\">your</span> <span class=\"n\">patterns.</span>\n\n<span class=\"n\">List.replicate_add</span>\n<span class=\"n\">List.replicate_succ</span>\n<span class=\"n\">List.replicate_succ'</span>\n</code></pre></div>\n<p>This exposes the functionality of the improved <code>#find</code> (under review at <a href=\"https://github.com/leanprover-community/mathlib4/pull/6363\">mathlib4#6363</a>) as a command line tool. </p>\n<p>Of course, once such a command line tool exists, it’s a short step™ towards a website to search through mathlib very expressively, like hoogle allows for Haskell.</p>",
        "id": 385741000,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1692301933
    },
    {
        "content": "<p>(One hurdle will be: Can such a query, which goes through the term elaborator and <code>defEq</code> checking, cause arbitrary code execution, and how to prevent that.)</p>",
        "id": 385741131,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1692301992
    },
    {
        "content": "<p>With the include string macro that is in scope if you import mathilb it should be possible to at least exfiltrate file content</p>",
        "id": 385744890,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1692303567
    },
    {
        "content": "<p>A simple measure to prevent this form being an issue in general is prolly jsut to run it in a sandbox</p>",
        "id": 385744941,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1692303596
    },
    {
        "content": "<p>I think in general this should be sandboxed, you are basically adding every meta program that mathlib exposes to your trusted code base here. If any of them allows to e.g. execute a command via some bad string formatting while trying to call an external solver or something an attacker can escape. In general the threat model of mathlib tactics should probably not be \"we don't trust the person writing the query\" so if the input to them can be untrusted like here the system should be considered compromised IMO.</p>",
        "id": 385745283,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1692303740
    },
    {
        "content": "<p>While Sandboxing is surely a good idea in any case, I am a bit … worried … that lean itself doesn’t have a story about dealing with parsing (and elaborating, I guess) untrustworthy code. But I guess it’s just very deeply baked into Lean’s model, so I better stop beating that dead horse.</p>",
        "id": 385747215,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1692304497
    },
    {
        "content": "<p>Maybe I could use the FFI to use <code>prctl(PR_SET_SECCOMP, SECCOMP_MODE_STRICT);</code> and maybe set up some CPU and memory limits right before processing a query. Judging from <a href=\"https://man7.org/linux/man-pages/man2/seccomp.2.html\">https://man7.org/linux/man-pages/man2/seccomp.2.html</a> this would be a pretty simple and tight sandbox,  if it works (i.e. if lean won’t insist on making other syscalls). I’ll try that later.</p>",
        "id": 385861724,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1692348352
    },
    {
        "content": "<p>I would recommend <a href=\"https://github.com/netblue30/firejail\">https://github.com/netblue30/firejail</a> which is based on seccomp and a couple of other linux technologies. It is quite configurable as well in case we need some special stuff etc.</p>",
        "id": 385867898,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1692350251
    },
    {
        "content": "<p>I gave <code>libseccomp</code> a shot, and at first glance it works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">~/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">lean</span><span class=\"bp\">/</span><span class=\"n\">mathlib4</span> <span class=\"bp\">$</span> <span class=\"bp\">./</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">bin</span><span class=\"bp\">/</span><span class=\"n\">loogle</span> <span class=\"n\">Std.Data.List.Lemmas</span> <span class=\"bp\">'</span><span class=\"o\">(</span><span class=\"n\">List.replicate</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">'</span>\n<span class=\"n\">Enabling</span> <span class=\"n\">seccomp</span>\n<span class=\"n\">Found</span> <span class=\"mi\">11</span> <span class=\"n\">definitions</span> <span class=\"n\">mentioning</span> <span class=\"n\">List.replicate</span> <span class=\"n\">and</span> <span class=\"n\">Eq.</span>\n<span class=\"n\">Of</span> <span class=\"n\">these</span><span class=\"o\">,</span> <span class=\"mi\">1</span> <span class=\"k\">match</span> <span class=\"n\">your</span> <span class=\"n\">patterns.</span>\n\n<span class=\"n\">List.replicate_succ</span>\n<span class=\"bp\">~/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">lean</span><span class=\"bp\">/</span><span class=\"n\">mathlib4</span> <span class=\"bp\">$</span> <span class=\"bp\">./</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">bin</span><span class=\"bp\">/</span><span class=\"n\">loogle</span> <span class=\"n\">Std.Data.List.Lemmas</span> <span class=\"bp\">'</span><span class=\"o\">(</span><span class=\"n\">List.replicate</span> <span class=\"o\">(</span><span class=\"n\">include_str</span> <span class=\"s2\">\"test\"</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">'</span>\n<span class=\"n\">Enabling</span> <span class=\"n\">seccomp</span>\n<span class=\"n\">Bad</span> <span class=\"n\">system</span> <span class=\"n\">call</span> <span class=\"o\">(</span><span class=\"n\">Speicherabzug</span> <span class=\"n\">geschrieben</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>Unfortunately, strict mode is too strict, and there are more syscalls needed:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">alloy</span> <span class=\"n\">c</span> <span class=\"n\">extern</span> <span class=\"kd\">def</span> <span class=\"n\">enable</span> <span class=\"o\">:</span> <span class=\"n\">BaseIO</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"o\">{</span>\n  <span class=\"n\">scmp_filter_ctx</span> <span class=\"n\">ctx</span> <span class=\"bp\">=</span> <span class=\"n\">seccomp_init</span><span class=\"o\">(</span><span class=\"n\">SCMP_ACT_KILL</span><span class=\"o\">)</span><span class=\"bp\">;</span>\n  <span class=\"n\">seccomp_rule_add</span><span class=\"o\">(</span><span class=\"n\">ctx</span><span class=\"o\">,</span> <span class=\"n\">SCMP_ACT_ALLOW</span><span class=\"o\">,</span> <span class=\"n\">SCMP_SYS</span><span class=\"o\">(</span><span class=\"n\">read</span><span class=\"o\">),</span> <span class=\"mi\">0</span><span class=\"o\">)</span><span class=\"bp\">;</span>\n  <span class=\"n\">seccomp_rule_add</span><span class=\"o\">(</span><span class=\"n\">ctx</span><span class=\"o\">,</span> <span class=\"n\">SCMP_ACT_ALLOW</span><span class=\"o\">,</span> <span class=\"n\">SCMP_SYS</span><span class=\"o\">(</span><span class=\"n\">write</span><span class=\"o\">),</span> <span class=\"mi\">0</span><span class=\"o\">)</span><span class=\"bp\">;</span>\n  <span class=\"n\">seccomp_rule_add</span><span class=\"o\">(</span><span class=\"n\">ctx</span><span class=\"o\">,</span> <span class=\"n\">SCMP_ACT_ALLOW</span><span class=\"o\">,</span> <span class=\"n\">SCMP_SYS</span><span class=\"o\">(</span><span class=\"n\">close</span><span class=\"o\">),</span> <span class=\"mi\">0</span><span class=\"o\">)</span><span class=\"bp\">;</span>\n  <span class=\"n\">seccomp_rule_add</span><span class=\"o\">(</span><span class=\"n\">ctx</span><span class=\"o\">,</span> <span class=\"n\">SCMP_ACT_ALLOW</span><span class=\"o\">,</span> <span class=\"n\">SCMP_SYS</span><span class=\"o\">(</span><span class=\"n\">exit</span><span class=\"o\">),</span> <span class=\"mi\">0</span><span class=\"o\">)</span><span class=\"bp\">;</span>\n  <span class=\"n\">seccomp_rule_add</span><span class=\"o\">(</span><span class=\"n\">ctx</span><span class=\"o\">,</span> <span class=\"n\">SCMP_ACT_ALLOW</span><span class=\"o\">,</span> <span class=\"n\">SCMP_SYS</span><span class=\"o\">(</span><span class=\"n\">exit_group</span><span class=\"o\">),</span> <span class=\"mi\">0</span><span class=\"o\">)</span><span class=\"bp\">;</span>\n  <span class=\"n\">seccomp_rule_add</span><span class=\"o\">(</span><span class=\"n\">ctx</span><span class=\"o\">,</span> <span class=\"n\">SCMP_ACT_ALLOW</span><span class=\"o\">,</span> <span class=\"n\">SCMP_SYS</span><span class=\"o\">(</span><span class=\"n\">brk</span><span class=\"o\">),</span> <span class=\"mi\">0</span><span class=\"o\">)</span><span class=\"bp\">;</span>\n  <span class=\"n\">seccomp_rule_add</span><span class=\"o\">(</span><span class=\"n\">ctx</span><span class=\"o\">,</span> <span class=\"n\">SCMP_ACT_ALLOW</span><span class=\"o\">,</span> <span class=\"n\">SCMP_SYS</span><span class=\"o\">(</span><span class=\"n\">mmap</span><span class=\"o\">),</span> <span class=\"mi\">0</span><span class=\"o\">)</span><span class=\"bp\">;</span>\n  <span class=\"n\">seccomp_rule_add</span><span class=\"o\">(</span><span class=\"n\">ctx</span><span class=\"o\">,</span> <span class=\"n\">SCMP_ACT_ALLOW</span><span class=\"o\">,</span> <span class=\"n\">SCMP_SYS</span><span class=\"o\">(</span><span class=\"n\">munmap</span><span class=\"o\">),</span> <span class=\"mi\">0</span><span class=\"o\">)</span><span class=\"bp\">;</span>\n  <span class=\"n\">seccomp_rule_add</span><span class=\"o\">(</span><span class=\"n\">ctx</span><span class=\"o\">,</span> <span class=\"n\">SCMP_ACT_ALLOW</span><span class=\"o\">,</span> <span class=\"n\">SCMP_SYS</span><span class=\"o\">(</span><span class=\"n\">rt_sigaction</span><span class=\"o\">),</span> <span class=\"mi\">0</span><span class=\"o\">)</span><span class=\"bp\">;</span>\n  <span class=\"n\">seccomp_rule_add</span><span class=\"o\">(</span><span class=\"n\">ctx</span><span class=\"o\">,</span> <span class=\"n\">SCMP_ACT_ALLOW</span><span class=\"o\">,</span> <span class=\"n\">SCMP_SYS</span><span class=\"o\">(</span><span class=\"n\">rt_sigprocmask</span><span class=\"o\">),</span> <span class=\"mi\">0</span><span class=\"o\">)</span><span class=\"bp\">;</span>\n  <span class=\"n\">seccomp_rule_add</span><span class=\"o\">(</span><span class=\"n\">ctx</span><span class=\"o\">,</span> <span class=\"n\">SCMP_ACT_ALLOW</span><span class=\"o\">,</span> <span class=\"n\">SCMP_SYS</span><span class=\"o\">(</span><span class=\"n\">mprotect</span><span class=\"o\">),</span> <span class=\"mi\">0</span><span class=\"o\">)</span><span class=\"bp\">;</span>\n  <span class=\"n\">seccomp_rule_add</span><span class=\"o\">(</span><span class=\"n\">ctx</span><span class=\"o\">,</span> <span class=\"n\">SCMP_ACT_ALLOW</span><span class=\"o\">,</span> <span class=\"n\">SCMP_SYS</span><span class=\"o\">(</span><span class=\"n\">clone3</span><span class=\"o\">),</span> <span class=\"mi\">0</span><span class=\"o\">)</span><span class=\"bp\">;</span>\n  <span class=\"n\">seccomp_rule_add</span><span class=\"o\">(</span><span class=\"n\">ctx</span><span class=\"o\">,</span> <span class=\"n\">SCMP_ACT_ALLOW</span><span class=\"o\">,</span> <span class=\"n\">SCMP_SYS</span><span class=\"o\">(</span><span class=\"n\">futex</span><span class=\"o\">),</span> <span class=\"mi\">0</span><span class=\"o\">)</span><span class=\"bp\">;</span>\n  <span class=\"n\">seccomp_rule_add</span><span class=\"o\">(</span><span class=\"n\">ctx</span><span class=\"o\">,</span> <span class=\"n\">SCMP_ACT_ALLOW</span><span class=\"o\">,</span> <span class=\"n\">SCMP_SYS</span><span class=\"o\">(</span><span class=\"n\">rseq</span><span class=\"o\">),</span> <span class=\"mi\">0</span><span class=\"o\">)</span><span class=\"bp\">;</span>\n  <span class=\"n\">seccomp_rule_add</span><span class=\"o\">(</span><span class=\"n\">ctx</span><span class=\"o\">,</span> <span class=\"n\">SCMP_ACT_ALLOW</span><span class=\"o\">,</span> <span class=\"n\">SCMP_SYS</span><span class=\"o\">(</span><span class=\"n\">set_robust_list</span><span class=\"o\">),</span> <span class=\"mi\">0</span><span class=\"o\">)</span><span class=\"bp\">;</span>\n  <span class=\"n\">seccomp_rule_add</span><span class=\"o\">(</span><span class=\"n\">ctx</span><span class=\"o\">,</span> <span class=\"n\">SCMP_ACT_ALLOW</span><span class=\"o\">,</span> <span class=\"n\">SCMP_SYS</span><span class=\"o\">(</span><span class=\"n\">sigaltstack</span><span class=\"o\">),</span> <span class=\"mi\">0</span><span class=\"o\">)</span><span class=\"bp\">;</span>\n  <span class=\"n\">seccomp_rule_add</span><span class=\"o\">(</span><span class=\"n\">ctx</span><span class=\"o\">,</span> <span class=\"n\">SCMP_ACT_ALLOW</span><span class=\"o\">,</span> <span class=\"n\">SCMP_SYS</span><span class=\"o\">(</span><span class=\"n\">madvise</span><span class=\"o\">),</span> <span class=\"mi\">0</span><span class=\"o\">)</span><span class=\"bp\">;</span>\n  <span class=\"n\">seccomp_load</span><span class=\"o\">(</span><span class=\"n\">ctx</span><span class=\"o\">)</span><span class=\"bp\">;</span>\n  <span class=\"n\">return</span> <span class=\"n\">lean_io_result_mk_ok</span><span class=\"o\">(</span><span class=\"n\">lean_box</span><span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">))</span><span class=\"bp\">;</span>\n<span class=\"o\">}</span>\n</code></pre></div>\n<p>(Thanks <span class=\"user-mention\" data-user-id=\"315577\">@Mac Malone</span> for <a href=\"https://github.com/tydeu/lean4-alloy\">https://github.com/tydeu/lean4-alloy</a>!)<br>\nAnd one has to write to stdout once before enabling seccomp, else it tries to use <code>newfstatat</code> for some reason.<br>\nThe need to support cloning is a bit annoying, but it’s a start.</p>",
        "id": 385990576,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1692393547
    },
    {
        "content": "<p>Is there already a clean way to add C library dependencies in lake, maybe with <code>pkgconfig</code> support? Currently using this, which is obviously not good :-)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">lean_exe</span> <span class=\"n\">loogle</span> <span class=\"n\">where</span>\n  <span class=\"n\">root</span> <span class=\"o\">:=</span> <span class=\"bp\">`</span><span class=\"n\">Loogle.Main</span>\n  <span class=\"n\">supportInterpreter</span> <span class=\"o\">:=</span> <span class=\"n\">true</span>\n  <span class=\"n\">moreLeanArgs</span> <span class=\"o\">:=</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"s2\">\"--load-dynlib=/nix/store/xykfcm1gdz27sxmcvbwb7xmrhmw8qayc-libseccomp-2.5.4-lib/lib/libseccomp.so.2\"</span><span class=\"o\">]</span>\n  <span class=\"n\">moreLinkArgs</span> <span class=\"o\">:=</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"s2\">\"-lseccomp\"</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 385990666,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1692393599
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"470149\">@Joachim Breitner</span> If it can be compiled as a <strong>static</strong> library, Lake provides <a href=\"https://github.com/leanprover/lean4/tree/63d2bdd4908b4df7db381537af754a7319e334e4/src/lake#external-libraries\"><code>extern_lib</code> targets</a> for this.</p>",
        "id": 385992493,
        "sender_full_name": "Mac Malone",
        "timestamp": 1692394780
    },
    {
        "content": "<p>Hmm, the only example for this I can find is for building a static library from some C files that I have in my project. Can I also use it to include a static library already provided by the system?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">extern_lib</span> <span class=\"n\">libseccomp</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"n\">buildStaticLib</span> <span class=\"s2\">\"/nix/store/a9dk2n1dl1bynhj2fl98iw2xpy7jy4w3-libseccomp-static-x86_64-unknown-linux-musl-2.5.4-lib/lib/libseccomp.a\"</span> <span class=\"bp\">#</span><span class=\"o\">[]</span>\n</code></pre></div>\n<p>obviously doesn’t work (disregarding the hard-coded nix path)</p>",
        "id": 386073532,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1692434656
    },
    {
        "content": "<p>Maybe something along these lines?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">extern_lib</span> <span class=\"n\">libseccomp</span> <span class=\"n\">pkg</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"n\">nameToStaticLib</span> <span class=\"s2\">\"seccomp\"</span>\n  <span class=\"k\">let</span> <span class=\"n\">_</span> <span class=\"bp\">←</span> <span class=\"n\">IO.Process.run</span> <span class=\"o\">{</span>\n    <span class=\"n\">cmd</span> <span class=\"o\">:=</span> <span class=\"s2\">\"cp\"</span>\n    <span class=\"n\">args</span> <span class=\"o\">:=</span> <span class=\"bp\">#</span><span class=\"o\">[</span> <span class=\"s2\">\"/nix/store/a9dk2n1dl1bynhj2fl98iw2xpy7jy4w3-libseccomp-static-x86_64-unknown-linux-musl-2.5.4-lib/lib/libseccomp.a\"</span><span class=\"o\">,</span>\n               <span class=\"o\">(</span><span class=\"n\">pkg.nativeLibDir</span> <span class=\"bp\">/</span> <span class=\"n\">name</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">toString</span> <span class=\"o\">]</span>\n  <span class=\"o\">}</span>\n  <span class=\"n\">pure</span> <span class=\"bp\">$</span> <span class=\"n\">BuildJob.pure</span> <span class=\"o\">(</span><span class=\"n\">pkg.nativeLibDir</span> <span class=\"bp\">/</span> <span class=\"n\">name</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 386074993,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1692435286
    },
    {
        "content": "<p>Indeed, this works. It seems this library is now linked into every target of the current project? Maybe about time I move some these weird experiments out of <code>mathlib</code> :-)</p>",
        "id": 386075636,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1692435564
    },
    {
        "content": "<p>This is a bit more reasonable maybe</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">extern_lib</span> <span class=\"n\">libseccomp</span> <span class=\"n\">pkg</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"n\">nameToStaticLib</span> <span class=\"s2\">\"seccomp\"</span>\n  <span class=\"k\">let</span> <span class=\"n\">dst</span> <span class=\"o\">:=</span> <span class=\"n\">pkg.nativeLibDir</span> <span class=\"bp\">/</span> <span class=\"n\">name</span>\n  <span class=\"k\">let</span> <span class=\"n\">libdir</span> <span class=\"bp\">←</span> <span class=\"n\">captureProc</span> <span class=\"o\">{</span> <span class=\"n\">cmd</span> <span class=\"o\">:=</span> <span class=\"s2\">\"pkg-config\"</span><span class=\"o\">,</span> <span class=\"n\">args</span> <span class=\"o\">:=</span> <span class=\"bp\">#</span><span class=\"o\">[</span> <span class=\"s2\">\"--variable=libdir\"</span><span class=\"o\">,</span> <span class=\"s2\">\"libseccomp\"</span><span class=\"o\">]</span> <span class=\"o\">}</span>\n  <span class=\"n\">logStep</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"Copying {name} from {libdir}\"</span>\n  <span class=\"n\">proc</span> <span class=\"o\">{</span> <span class=\"n\">cmd</span> <span class=\"o\">:=</span> <span class=\"s2\">\"cp\"</span><span class=\"o\">,</span> <span class=\"n\">args</span> <span class=\"o\">:=</span> <span class=\"bp\">#</span><span class=\"o\">[</span> <span class=\"s2\">\"-f\"</span><span class=\"o\">,</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"{libdir}/{name}\"</span><span class=\"o\">,</span> <span class=\"n\">dst.toString</span><span class=\"o\">]</span> <span class=\"o\">}</span>\n  <span class=\"n\">pure</span> <span class=\"bp\">$</span> <span class=\"n\">BuildJob.pure</span> <span class=\"n\">dst</span>\n</code></pre></div>",
        "id": 386077526,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1692436202
    }
]