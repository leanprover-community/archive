[
    {
        "content": "<p>I took the week to build a working (in the sense that it generates machine code, not that it is functionally correct with any certainity) version of Buchberger's algorithm at <a href=\"https://github.com/mattrobball/gb\">mattrobball/gb</a>. </p>\n<p>Some thoughts: </p>\n<ul>\n<li>If you want computable data, it is reasonably easy to strip out (or reimplement away) the uses of <code>Classical.dec</code>. Unfortunately since <code>DecidableXXX</code> is not part of the signature in many declarations in mathlib you cannot just <code>csimp</code> these things away. </li>\n<li>However, if you want to verify things, then you will quickly cast eyes longingly at the body of results in <code>mathlib4</code> for the existing implementation. </li>\n<li>As mentioned, I have no confidence in its correctness atm. It wouldn't be too bad to verify it given proper access to mathlib. I don't even have reasonable unit tests right now.  </li>\n<li>Things are clearly not optimized. I did use some slightly more sophisticated procedure (Gebauer-Moeller) to deal with the critical pairs. Ultimately, one of the goals is to see how fast native Lean can go so there is more work to do. One target is <a href=\"https://marc-stevens.nl/research/papers/ISSAC17-MS-M4GB.pdf\">M4GB</a>. </li>\n<li>Another goal (of which I have only thoughts and not work) is to connect up an existing C-library like <a href=\"https://github.com/algebraic-solving/msolve\">MSolve</a>.</li>\n</ul>",
        "id": 368952335,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1687536885
    },
    {
        "content": "<p>Right now this is a strange middle ground where the types want to keep contact with mathlib while not actually proving much. </p>\n<p>There is a lot to do to make this useful in any sense and I would happily welcome any help.</p>",
        "id": 368966623,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1687539816
    },
    {
        "content": "<p>Since <code>polyrith</code> can outsource the Groebner basis work for proving that an algebraic equation is implied by a collection of other algebraic equations, I have sometimes wondered whether a big use of a Lean-native Groebner implementation would be the other direction: showing that False (or, a specified algebraic equation) is <em>not</em> implied by a collection of other equations, i.e. that there exists a point satisfying a collection of equations (optionally: and also not satisfying a specified equation).  (Assuming <code>[IsAlgClosed K]</code>, I guess.). Is this something on your radar?</p>",
        "id": 368968478,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1687540215
    },
    {
        "content": "<p>I hadn't really thought of that but that is a good use. Mainly I just want to see how performant a Lean-native &amp; Mathlib-compatible GB implementation might be.</p>",
        "id": 368979397,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1687542641
    },
    {
        "content": "<p>It might be that we are just SOL because GB computations are just so expensive but Lean 4 has been surprisingly performant anecdotally.</p>",
        "id": 368980282,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1687542855
    },
    {
        "content": "<p>On a related tack, are there people who really like the current non-computable <code>MvPolynomial</code>? (Also, shouldn't it be <code>MVPolynomial</code>?)  </p>\n<p>Like most people, I have no trouble dropping a <code>Classical.dec</code> in a proof but to do in constructing a term for something that is data carrying is something else.</p>",
        "id": 368982157,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1687543310
    },
    {
        "content": "<p>I think that it's hard to have one computable <del><code>MVPolynomial</code> (yes, we should fix the name)</del> <code>MvPolynomial</code> (I'm wrong, see below) implementation that fits different algorithms.</p>",
        "id": 368985430,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1687544144
    },
    {
        "content": "<p>I agree that different implementations are more natural for different algorithms. </p>\n<p>But I am asking a smaller question I think. As an example,  for <code>Finsupp.single</code> below</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">single</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→₀</span> <span class=\"n\">M</span> <span class=\"n\">where</span>\n  <span class=\"n\">support</span> <span class=\"o\">:=</span>\n    <span class=\"n\">haveI</span> <span class=\"o\">:=</span> <span class=\"n\">Classical.decEq</span> <span class=\"n\">M</span>\n    <span class=\"k\">if</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"k\">then</span> <span class=\"bp\">∅</span> <span class=\"k\">else</span> <span class=\"o\">{</span><span class=\"n\">a</span><span class=\"o\">}</span>\n  <span class=\"n\">toFun</span> <span class=\"o\">:=</span>\n    <span class=\"n\">haveI</span> <span class=\"o\">:=</span> <span class=\"n\">Classical.decEq</span> <span class=\"n\">α</span>\n    <span class=\"k\">Pi</span><span class=\"bp\">.</span><span class=\"n\">single</span> <span class=\"n\">a</span> <span class=\"n\">b</span>\n  <span class=\"n\">mem_support_toFun</span> <span class=\"n\">a'</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">classical</span>\n      <span class=\"bp\">...</span>\n</code></pre></div>\n<p>all the decidability assumptions are hidden from the outside. I know that not explicitly passing <code>[DecidableEq α]</code> and <code>[DecidableEq M]</code> in <code>Finsupp.single</code> were design designs and am trying to understand the motivation for this.</p>",
        "id": 368988579,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1687544988
    },
    {
        "content": "<p>Most likely the motivation is \"in practice, it's annoying to work with the instance\"</p>",
        "id": 368988997,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1687545072
    },
    {
        "content": "<p><code>MVPolynomial</code> seems fine for math, but it's not a good data structure for computations, and I don't believe there's any way to make it be good for computations without changing it completely to something else (like lists of monomial/coefficient pairs with respect to some monomial ordering, or dense multidimensional arrays of coefficients).</p>\n<p>The problem is that it's using finitely supported functions. (1) The finite support uses a <code>Finset</code>, which is <em>a</em> data structure, but pretty much in any practical situation there are much better data structures, and (2) the function does not cache any of its values, making it very easy to accidentally recompute things repeatedly.</p>\n<p>For example, <a href=\"https://github.com/mattrobball/gb/blob/main/GB/FinsuppAlg/Basic.lean#L52\">in this instance</a> you don't precompute any of the sums, so every time you index into it you'll recompute them. Plus, the closure stores <code>v</code> and <code>w</code> so there's a memory leak.</p>",
        "id": 368989164,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1687545114
    },
    {
        "content": "<p>Regarding the name, we did actually talk about this before (i.e., <code>MV</code> vs <code>Mv</code>) and I think this one was a toss up. The capitalization is for acronyms, but since Multivariate is a single word, I think that's why we opted for <code>v</code> instead of <code>V</code>.</p>",
        "id": 368989402,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1687545165
    },
    {
        "content": "<p>Note, according to naming conventions, if we <em>do</em> switch from <code>MvPolynomial</code> to <code>MVPolynomial</code>, we need to switch all occurrences in theorem names and the like to <code>mvpolynomial</code> instead of the current <code>mvPolynomial</code>.</p>",
        "id": 368989888,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1687545282
    },
    {
        "content": "<p>I totally agree that finitely supported functions are not the way to go if you are seriously performance conscious.</p>",
        "id": 368990477,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1687545436
    },
    {
        "content": "<p>Funnily, I didn't actually think of the actual name and parsed it as 'multi' + 'variable'.</p>",
        "id": 368990956,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1687545555
    },
    {
        "content": "<p>More generally, what do people think the role of mathlib is for \"real(ish) world\" code given the advances with Lean 4?</p>",
        "id": 368991745,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1687545773
    },
    {
        "content": "<p>This is \"performance conscious\" at the bare minimum of \"can it perform at all\". You can expect accidentally exponential algorithmic complexity in the number of operations, unless you use a function to cache the results periodically (I don't think this function exists yet for <code>MvPolynomial</code>). Finitely supported functions are mathematically nice so I wouldn't want to change <code>MvPolynomial</code>, but I think we should stop trying to make it computable and we ought to develop a separate polynomial type for doing calculations, along with some theory to be able to carry results back and forth between these types.</p>",
        "id": 368992293,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1687545922
    },
    {
        "content": "<p>That probably makes more sense. I was wondering about the ease of \"carrying results back and forth\". What is the model for making this less painful?</p>",
        "id": 368993117,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1687546143
    },
    {
        "content": "<p>For example of the issue, this loop would create an MvPolynomial that does something like <code>2^100</code> additions on the last line:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">MvPolynomial</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n<span class=\"n\">for</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">:</span><span class=\"mi\">100</span><span class=\"o\">]</span> <span class=\"k\">do</span>\n  <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"n\">p</span> <span class=\"bp\">+</span> <span class=\"n\">p</span>\n<span class=\"n\">return</span> <span class=\"n\">p.coeff</span> <span class=\"mi\">0</span>\n</code></pre></div>",
        "id": 368993162,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1687546161
    },
    {
        "content": "<p>and plus the final <code>p</code> would transitively refer to all intermediate <code>p</code>s (that's a memory leak)</p>",
        "id": 368993307,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1687546203
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306577\">Matthew Ballard</span> <a href=\"#narrow/stream/113488-general/topic/Groebner.20bases/near/368993117\">said</a>:</p>\n<blockquote>\n<p>What is the model for making this less painful?</p>\n</blockquote>\n<p>I don't really know. At the least, you'd want a ring isomorphism between the math type and the computational type along with a proof that it's <code>coeff</code>-preserving.</p>\n<p>I don't fully understand what the impact would be on the theorem proving side. If you're doing a verified Groebner basis calculation, you could at least show one-way containment of the resulting ideal using these faster polynomials, since you could run the algorithm, get a Groebner basis, take every original generator and calculate how it's generated by the new basis, then use <code>ring</code> to generate proofs post-hoc. For the reverse containment, if you can calculate the reverse inclusion on the way and prove it with <code>ring</code> afterwards, then great. Otherwise, you'd probably need to run a verified version of the algorithm by a slower method (reduction) or you could probably just work with symbolic evaluation of <code>MvPolynomial</code>s at the meta level. I'm fairly ignorant about how to carry these things out, so having computable polynomials could very well unlock much more.</p>",
        "id": 368996851,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1687547207
    },
    {
        "content": "<p>Instead of transfer, I think it might be easier to build a common specification from which you can derive correctness of algorithm on both sides.</p>",
        "id": 368999610,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1687547961
    },
    {
        "content": "<p>But then you would have to prove your new structure satisfies all the properties? E.g., you would need to prove that your multiplication on your new type is associative.</p>",
        "id": 369038731,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1687561276
    },
    {
        "content": "<p>You just need to provide an <code>Equiv</code> that preserves operations.</p>",
        "id": 369039601,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1687561738
    },
    {
        "content": "<p>Then you can prove correctness using <code>Function.Injective.*</code> and/or <code>Function.Surjective.*</code>.</p>",
        "id": 369039632,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1687561758
    },
    {
        "content": "<p>Also, you can prove nothing, just rephrase your answer in terms of <code>MvPolynomial</code>s and provide enough information to verify the answer using <code>linear_combination</code>.</p>",
        "id": 369039769,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1687561825
    },
    {
        "content": "<p>(or <code>ring</code> or whatever)</p>",
        "id": 369039778,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1687561831
    },
    {
        "content": "<p>Right, that's what Kyle was arguing for, and I think it's what makes sense. I interpreted Matthew's comment of \"common specification\" as essentially: \"show that both are rings (or whatever structure is needed)\".</p>",
        "id": 369249978,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1687633694
    },
    {
        "content": "<p>I have been working on a project related to this. Though I am not finished, I would like to share my code. <a href=\"https://github.com/hyunsanghwang/matroid\">https://github.com/hyunsanghwang/matroid</a>  I used <code>Dfinsupp</code> rather than <code>Finsupp</code>.</p>",
        "id": 369471059,
        "sender_full_name": "Hyunsang Hwang",
        "timestamp": 1687714428
    }
]