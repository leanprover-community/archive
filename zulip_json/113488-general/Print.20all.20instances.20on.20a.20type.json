[
    {
        "content": "<p>When learning about a new type I like to see what instances are defined on it (until now by grepping mathlib), is there a way to show all of them? It looks like lean3 had <code>#print instances</code>, but it doesn't work anymore.</p>",
        "id": 400286367,
        "sender_full_name": "Nir Paz",
        "timestamp": 1699094808
    },
    {
        "content": "<p>There isn't a command for that (yet) as far as I know. But you can visit the docs which does have a list for each type in mathlib eg <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Nat#doc\">docs#Nat</a>, under the heading \" Instances for \"</p>",
        "id": 400290507,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1699096968
    },
    {
        "content": "<p>Thanks, this is great!</p>",
        "id": 400293296,
        "sender_full_name": "Nir Paz",
        "timestamp": 1699099479
    },
    {
        "content": "<p>We also have the <code>#synth</code> command if you want to check whether a type has a particular instance</p>",
        "id": 400301108,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1699106367
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"127136\">Alex J. Best</span> <a href=\"#narrow/stream/113488-general/topic/Print.20all.20instances.20on.20a.20type/near/400290507\">said</a>:</p>\n<blockquote>\n<p>There isn't a command for that (yet) as far as I know. But you can visit the docs which does have a list for each type in mathlib eg <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Nat#doc\">docs#Nat</a>, under the heading \" Instances for \"</p>\n</blockquote>\n<p>Something must be a little wrong, since I see instances like <a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/AlgebraicTopology/DoldKan/NCompGamma.html#AlgebraicTopology.DoldKan.instIsIsoFunctorKaroubiSimplicialObjectInstCategorySimplicialObjectInstCategoryKaroubiCategoryCompChainComplexPreadditiveHasZeroMorphismsNatToAddRightCancelSemigroupToAddRightCancelMonoidToAddCancelMonoidToCancelAddCommMonoidToOrderedCancelAddCommMonoidStrictOrderedSemiringToOneCanonicallyOrderedCommSemiringInstCategoryHomologicalComplexDownN%E2%82%82%CE%93%E2%82%82IdNatTrans\">this one</a></p>",
        "id": 400301609,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1699106672
    },
    {
        "content": "<p>Maybe because there is \"nat\" in the name?</p>",
        "id": 400301623,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1699106687
    },
    {
        "content": "<p>yeah that looks like a bug in doc-gen4</p>",
        "id": 400301665,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1699106746
    },
    {
        "content": "<p>I would be very sad to find out that the instance list is using name matching...</p>",
        "id": 400301760,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1699106820
    },
    {
        "content": "<p>In Lean3 it genuinely checked the types</p>",
        "id": 400301775,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1699106828
    },
    {
        "content": "<p>ping <span class=\"user-mention\" data-user-id=\"395550\">@Henrik Böving</span></p>",
        "id": 400301925,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1699106904
    },
    {
        "content": "<p>Quack</p>",
        "id": 400302003,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1699106928
    },
    {
        "content": "<p>It also lists <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=IccManifold#doc\">docs#IccManifold</a></p>",
        "id": 400302061,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1699106960
    },
    {
        "content": "<p>EuclideanHalfSpace at least has a nat in the type, maye the DoldKan instance does too?</p>",
        "id": 400302428,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1699107314
    },
    {
        "content": "<p>doc-gen4 does check if \"Nat occurs anywhere within the type of the instance\":</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">getInstanceTypes</span> <span class=\"o\">(</span><span class=\"n\">typ</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">MetaM</span> <span class=\"o\">(</span><span class=\"n\">Array</span> <span class=\"n\">Name</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">tail</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">forallMetaTelescopeReducing</span> <span class=\"n\">typ</span>\n  <span class=\"k\">let</span> <span class=\"n\">args</span> <span class=\"o\">:=</span> <span class=\"n\">tail.getAppArgs</span>\n  <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">names</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">args.mapM</span> <span class=\"o\">(</span><span class=\"n\">Expr.forEach</span> <span class=\"bp\">·</span> <span class=\"n\">findName</span><span class=\"o\">)</span> <span class=\"bp\">|&gt;.</span><span class=\"n\">run</span> <span class=\"bp\">.</span><span class=\"n\">empty</span>\n  <span class=\"n\">return</span> <span class=\"n\">names</span>\n<span class=\"n\">where</span>\n  <span class=\"n\">findName</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span> <span class=\"bp\">→</span> <span class=\"n\">StateRefT</span> <span class=\"o\">(</span><span class=\"n\">Array</span> <span class=\"n\">Name</span><span class=\"o\">)</span> <span class=\"n\">MetaM</span> <span class=\"n\">Unit</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">const</span> <span class=\"n\">name</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">modify</span> <span class=\"o\">(</span><span class=\"bp\">·.</span><span class=\"n\">push</span> <span class=\"n\">name</span><span class=\"o\">)</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">sort</span> <span class=\"bp\">.</span><span class=\"n\">zero</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">modify</span> <span class=\"o\">(</span><span class=\"bp\">·.</span><span class=\"n\">push</span> <span class=\"s2\">\"_builtin_prop\"</span><span class=\"o\">)</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">sort</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">modify</span> <span class=\"o\">(</span><span class=\"bp\">·.</span><span class=\"n\">push</span> <span class=\"s2\">\"_builtin_typeu\"</span><span class=\"o\">)</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">sort</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">modify</span> <span class=\"o\">(</span><span class=\"bp\">·.</span><span class=\"n\">push</span> <span class=\"s2\">\"_builtin_sortu\"</span><span class=\"o\">)</span>\n    <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">return</span> <span class=\"o\">()</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">InstanceInfo.ofDefinitionVal</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">DefinitionVal</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">MetaM</span> <span class=\"n\">InstanceInfo</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">info</span> <span class=\"bp\">←</span> <span class=\"n\">DefinitionInfo.ofDefinitionVal</span> <span class=\"n\">v</span>\n  <span class=\"k\">let</span> <span class=\"n\">some</span> <span class=\"n\">className</span> <span class=\"bp\">←</span> <span class=\"n\">isClass</span><span class=\"bp\">?</span> <span class=\"n\">v.type</span> <span class=\"bp\">|</span> <span class=\"n\">panic</span><span class=\"bp\">!</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"isClass? on {v.name} returned none\"</span>\n  <span class=\"k\">if</span> <span class=\"k\">let</span> <span class=\"n\">some</span> <span class=\"n\">instAttr</span> <span class=\"bp\">←</span> <span class=\"n\">getDefaultInstance</span> <span class=\"n\">v.name</span> <span class=\"n\">className</span> <span class=\"k\">then</span>\n    <span class=\"n\">info</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">info</span> <span class=\"k\">with</span> <span class=\"n\">attrs</span> <span class=\"o\">:=</span> <span class=\"n\">info.attrs.push</span> <span class=\"n\">instAttr</span> <span class=\"o\">}</span>\n  <span class=\"k\">let</span> <span class=\"n\">typeNames</span> <span class=\"bp\">←</span> <span class=\"n\">getInstanceTypes</span> <span class=\"n\">v.type</span>\n  <span class=\"n\">return</span> <span class=\"o\">{</span>\n    <span class=\"n\">toDefinitionInfo</span> <span class=\"o\">:=</span> <span class=\"n\">info</span><span class=\"o\">,</span>\n    <span class=\"n\">className</span><span class=\"o\">,</span>\n    <span class=\"n\">typeNames</span>\n  <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 400302433,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1699107320
    },
    {
        "content": "<p>I can turn this down and e.g. use a telescope and only look at the type at the end of an arrow if you want? Or something else entirely?</p>",
        "id": 400302456,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1699107347
    },
    {
        "content": "<p>Maybe we want two headings, \"instances for this type\" and \"instances involving this type, where the former is only things with an explicit argument equal to (an application of) the type?</p>",
        "id": 400303054,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1699107796
    },
    {
        "content": "<p>Maybe this is a possibility?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Meta</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">getInstanceTypes</span> <span class=\"o\">(</span><span class=\"n\">typ</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">MetaM</span> <span class=\"o\">(</span><span class=\"n\">Array</span> <span class=\"n\">Name</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">tail</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">forallMetaTelescopeReducing</span> <span class=\"n\">typ</span>\n  <span class=\"k\">let</span> <span class=\"n\">args</span> <span class=\"o\">:=</span> <span class=\"n\">tail.getAppArgs</span>\n  <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">bis</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">forallMetaTelescopeReducing</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">inferType</span> <span class=\"n\">tail.getAppFn</span><span class=\"o\">)</span>\n  <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">names</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"o\">(</span><span class=\"n\">bis.zip</span> <span class=\"n\">args</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mapM</span> <span class=\"n\">findName</span> <span class=\"bp\">|&gt;.</span><span class=\"n\">run</span> <span class=\"bp\">.</span><span class=\"n\">empty</span>\n  <span class=\"n\">return</span> <span class=\"n\">names</span>\n<span class=\"n\">where</span>\n  <span class=\"n\">findName</span> <span class=\"o\">:</span> <span class=\"n\">BinderInfo</span> <span class=\"bp\">×</span> <span class=\"n\">Expr</span> <span class=\"bp\">→</span> <span class=\"n\">StateRefT</span> <span class=\"o\">(</span><span class=\"n\">Array</span> <span class=\"n\">Name</span><span class=\"o\">)</span> <span class=\"n\">MetaM</span> <span class=\"n\">Unit</span>\n    <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">default</span><span class=\"o\">,</span> <span class=\"bp\">.</span><span class=\"n\">sort</span> <span class=\"bp\">.</span><span class=\"n\">zero</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">modify</span> <span class=\"o\">(</span><span class=\"bp\">·.</span><span class=\"n\">push</span> <span class=\"s2\">\"_builtin_prop\"</span><span class=\"o\">)</span>\n    <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">default</span><span class=\"o\">,</span> <span class=\"bp\">.</span><span class=\"n\">sort</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">_</span><span class=\"o\">))</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">modify</span> <span class=\"o\">(</span><span class=\"bp\">·.</span><span class=\"n\">push</span> <span class=\"s2\">\"_builtin_typeu\"</span><span class=\"o\">)</span>\n    <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">default</span><span class=\"o\">,</span> <span class=\"bp\">.</span><span class=\"n\">sort</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">modify</span> <span class=\"o\">(</span><span class=\"bp\">·.</span><span class=\"n\">push</span> <span class=\"s2\">\"_builtin_sortu\"</span><span class=\"o\">)</span>\n    <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">default</span><span class=\"o\">,</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"k\">match</span> <span class=\"n\">e.getAppFn</span> <span class=\"k\">with</span>\n      <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">const</span> <span class=\"n\">name</span> <span class=\"bp\">..</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">modify</span> <span class=\"o\">(</span><span class=\"bp\">·.</span><span class=\"n\">push</span> <span class=\"n\">name</span><span class=\"o\">)</span>\n      <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">return</span> <span class=\"o\">()</span>\n    <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">return</span> <span class=\"o\">()</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">autoImplicit</span> <span class=\"n\">true</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">t1</span> <span class=\"n\">t2</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"n\">True</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">baz</span> <span class=\"o\">:</span> <span class=\"n\">foo</span> <span class=\"n\">Nat</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">trivial</span>\n\n<span class=\"k\">#eval</span> <span class=\"k\">do</span> <span class=\"n\">getInstanceTypes</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">inferType</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">const</span> <span class=\"bp\">``</span><span class=\"n\">baz</span> <span class=\"o\">[]))</span>\n<span class=\"c1\">-- #[`Nat, `Fin]</span>\n</code></pre></div>",
        "id": 400317375,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1699121009
    },
    {
        "content": "<p>It takes each explicit argument and returns its head constant</p>",
        "id": 400317464,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1699121067
    },
    {
        "content": "<p>I added this algorithm to doc-gen, it'll be up on mathlib4_docs in a bit (when this ends: <a href=\"https://github.com/leanprover-community/mathlib4_docs/actions/runs/6760311745/job/18373945758\">https://github.com/leanprover-community/mathlib4_docs/actions/runs/6760311745/job/18373945758</a>) so you can see if its more to your liking</p>",
        "id": 400375412,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1699174687
    }
]