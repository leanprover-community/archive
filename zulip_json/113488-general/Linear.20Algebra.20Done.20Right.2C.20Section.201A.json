[
    {
        "content": "<p>I've made a first pass at translating Sheldon Axler's Linear Algebra Done Right, section 1A, into Lean.  Please find it on <a href=\"https://github.com/martincmartin/linear_algebra_done_right/blob/master/src/chapter1/section1A.lean\">github here.</a>.  All feedback welcome!  Should I continue along these same lines with the rest of the book?</p>",
        "id": 358285748,
        "sender_full_name": "Martin C. Martin",
        "timestamp": 1684081622
    },
    {
        "content": "<p>One question is, should I do the exercises?  On the one hand, publishing solutions to exercises undermines the use of the book in class.  On the other hand, most students don't know Lean, and even those who do might have a hard time understanding the proof and translating it into traditional hand written math.</p>",
        "id": 358286889,
        "sender_full_name": "Martin C. Martin",
        "timestamp": 1684082042
    },
    {
        "content": "<p>There's another attempt at this FWIW at <a href=\"https://github.com/Vilin97/linear-algebra-done-right\">https://github.com/Vilin97/linear-algebra-done-right</a>, I think by <span class=\"user-mention\" data-user-id=\"414458\">@Vasily Ilin</span> with a few others contributing.</p>\n<p>(Which isn't to say you shouldn't proceed as is!)</p>",
        "id": 358291310,
        "sender_full_name": "Julian Berman",
        "timestamp": 1684083989
    },
    {
        "content": "<p>A quick skim is a nice confirmation to me that using <code>fin n → α</code> in mathlib instead of <code>vector n α</code> was a good choice in terms of making proofs short!</p>",
        "id": 358291551,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684084095
    },
    {
        "content": "<p>(of course the real argument for using <code>fin n →α</code> is that it's a special case of  <code>ι → α</code>, and so most of the theory can be developed there instead)</p>",
        "id": 358291682,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684084160
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 358291720,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1684084182
    },
    {
        "content": "<blockquote>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- Would like to make n implicit, how do we split on cases of an implicit</span>\n<span class=\"c1\">-- argument?</span>\n<span class=\"kd\">@[simp]</span>\n<span class=\"kd\">def</span> <span class=\"n\">neg</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">vector</span> <span class=\"n\">F</span> <span class=\"n\">n</span><span class=\"o\">),</span> <span class=\"n\">vector</span> <span class=\"n\">F</span> <span class=\"n\">n</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>You just write <code>{n : N}</code> instead and it should just work.</p>",
        "id": 358292085,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684084353
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"321696\">Julian Berman</span> <a href=\"#narrow/stream/113488-general/topic/Linear.20Algebra.20Done.20Right.2C.20Section.201A/near/358291310\">said</a>:</p>\n<blockquote>\n<p>There's another attempt at this </p>\n</blockquote>\n<p>Thanks!  My main goal is to learn, secondary goal is to contribute something of value to the community.  If there's something more valuable in the first two years of a standard undergrad math curriculum, I'm happy to contribute that instead.  Something from 3rd year would be a stretch but I'm up for that too.  Spivak's Calculus comes to mind.  But without consensus, I'm happy to stick with LADR.</p>",
        "id": 358294807,
        "sender_full_name": "Martin C. Martin",
        "timestamp": 1684085589
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113488-general/topic/Linear.20Algebra.20Done.20Right.2C.20Section.201A/near/358291551\">said</a>:</p>\n<blockquote>\n<p>A quick skim is a nice confirmation to me that using <code>fin n → α</code> in mathlib instead of <code>vector n α</code> was a good choice in terms of making proofs short!</p>\n</blockquote>\n<p>Thanks!  I am a little concerned that using recursion and induction for something as simple as a tuple will make Lean seem more complicated than need be, so maybe <code>fin n → α</code> would be a better, especially if we can e.g. define addition as <code>λ i, v[i] + w[i]</code>.</p>",
        "id": 358295485,
        "sender_full_name": "Martin C. Martin",
        "timestamp": 1684085891
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113488-general/topic/Linear.20Algebra.20Done.20Right.2C.20Section.201A/near/358292085\">said</a>:</p>\n<blockquote>\n<p>You just write <code>{n : N}</code> instead and it should just work.</p>\n</blockquote>\n<p>Oh right, I don't know why I didn't think of that!</p>",
        "id": 358295746,
        "sender_full_name": "Martin C. Martin",
        "timestamp": 1684086033
    },
    {
        "content": "<p>For actually executing code, your inductive approach is probably more efficient</p>",
        "id": 358298891,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684087311
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113488-general/topic/Linear.20Algebra.20Done.20Right.2C.20Section.201A/near/358298891\">said</a>:</p>\n<blockquote>\n<p>For actually executing code, your inductive approach is probably more efficient</p>\n</blockquote>\n<p>Reminds me of a joke.</p>\n<p>An engineer, a physicist and a mathematician are at a conference, staying at a hotel.  In the middle of the night, a fire breaks out.  The engineer wakes up, sees the fire, sees the fire extinguisher, puts the fire out with the fire extinguisher, and goes back to sleep.</p>\n<p>A little while later, another fire breaks out.  This time, the physicist wakes up.  Sees the fire, sees the extinguisher, calculates the angle to use the minimum amount of water, puts out the fire and goes back to sleep.</p>\n<p>Wouldn't you know it, a third fire breaks out.  This time the mathematician wakes up.  Sees the fire, sees the extinguisher, says \"Ah, a solution exists!\" and goes back to sleep.</p>",
        "id": 358299886,
        "sender_full_name": "Martin C. Martin",
        "timestamp": 1684087766
    },
    {
        "content": "<p>(I'd have something to say to the hotel safety manager, though...)</p>",
        "id": 358300614,
        "sender_full_name": "Giovanni Mascellani",
        "timestamp": 1684088054
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"321696\">Julian Berman</span> <a href=\"#narrow/stream/113488-general/topic/Linear.20Algebra.20Done.20Right.2C.20Section.201A/near/358291310\">said</a>:</p>\n<blockquote>\n<p>There's another attempt at this FWIW at <a href=\"https://github.com/Vilin97/linear-algebra-done-right\">https://github.com/Vilin97/linear-algebra-done-right</a>, I think by <span class=\"user-mention silent\" data-user-id=\"414458\">Vasily Ilin</span> with a few others contributing.</p>\n<p>(Which isn't to say you shouldn't proceed as is!)</p>\n</blockquote>\n<p>Just took a look, it seems they're only doing the exercises and not the main text, whereas I'm doing the opposite, only the main text and not the exercises.  :)</p>",
        "id": 358309904,
        "sender_full_name": "Martin C. Martin",
        "timestamp": 1684092224
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113488-general/topic/Linear.20Algebra.20Done.20Right.2C.20Section.201A/near/358291682\">said</a>:</p>\n<blockquote>\n<p>(of course the real argument for using <code>fin n →α</code> is that it's a special case of  <code>ι → α</code>, and so most of the theory can be developed there instead)</p>\n</blockquote>\n<p>Example 1.22 is F^∞, which can't be defined recursively, and the most reasonable way to do it as <code>ℕ → F</code>.  So even in LADR it would be simpler to use <code>fin n → F</code>.  :)</p>",
        "id": 358311425,
        "sender_full_name": "Martin C. Martin",
        "timestamp": 1684092930
    }
]