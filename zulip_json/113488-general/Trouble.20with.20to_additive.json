[
    {
        "content": "<p>While porting a file from my joint project with <span class=\"user-mention\" data-user-id=\"130609\">@Antoine Chambert-Loir</span> to Lean 4, I run into the following issue with <code>to_additive</code>. In the last definition, I get the error message \"The additive declaration already exists. Please specify this explicitly  using <code>@[to_additive existing]</code>. [linter.toAdditiveExisting]\" (even though <code>tsum</code> is not imported):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Topology.Algebra.UniformGroup</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Classical</span> <span class=\"n\">Filter</span> <span class=\"n\">Finset</span> <span class=\"n\">Function</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">scoped</span> <span class=\"n\">BigOperators</span> <span class=\"n\">Classical</span> <span class=\"n\">Topology</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">Œ±</span> <span class=\"n\">Œ≤</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">TopologicalSpace</span> <span class=\"n\">Œ±</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">CommMonoid</span> <span class=\"n\">Œ±</span><span class=\"o\">]</span>\n\n<span class=\"kd\">@[to_additive]</span>\n<span class=\"kd\">def</span> <span class=\"n\">HasProd</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Œ≤</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">Œ±</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Œ±</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"n\">Tendsto</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">Œ≤</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">‚àè</span> <span class=\"n\">b</span> <span class=\"k\">in</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"n\">atTop</span> <span class=\"o\">(</span><span class=\"bp\">ùìù</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n\n<span class=\"kd\">@[to_additive Summable]</span>\n<span class=\"kd\">def</span> <span class=\"n\">Multipliable</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Œ≤</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">Œ±</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">‚àÉ</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">HasProd</span> <span class=\"n\">f</span> <span class=\"n\">a</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"> ERROR MESSAGE: The additive declaration already exists. Please specify this explicitly</span>\n<span class=\"cm\">  using `@[to_additive existing]`. [linter.toAdditiveExisting]-/</span>\n<span class=\"kd\">@[to_additive tsum]</span>\n<span class=\"kd\">noncomputable</span> <span class=\"n\">irreducible_def</span> <span class=\"n\">tprod</span> <span class=\"o\">{</span><span class=\"n\">Œ≤</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Œ≤</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">Œ±</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">Multipliable</span> <span class=\"n\">f</span> <span class=\"k\">then</span> <span class=\"n\">Classical.choose</span> <span class=\"n\">h</span> <span class=\"k\">else</span> <span class=\"mi\">1</span>\n</code></pre></div>\n<p>However, if I add <code>existing</code> as suggested, the linter now tells me that the additive version does not exist.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c\">/-</span><span class=\"cm\"> ERROR MESSAGE: The additive declaration doesn't exist. Please remove the option</span>\n<span class=\"cm\">  `existing`. [linter.toAdditiveExisting]-/</span>\n<span class=\"kd\">@[to_additive existing tsum]</span>\n<span class=\"kd\">noncomputable</span> <span class=\"n\">irreducible_def</span> <span class=\"n\">tprod</span> <span class=\"o\">{</span><span class=\"n\">Œ≤</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Œ≤</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">Œ±</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">Multipliable</span> <span class=\"n\">f</span> <span class=\"k\">then</span> <span class=\"n\">Classical.choose</span> <span class=\"n\">h</span> <span class=\"k\">else</span> <span class=\"mi\">1</span>\n</code></pre></div>\n<p>In both cases, I also get the error <code>tprod_def and tsum do not generate the same number of equation lemmas.</code> Any ideas? Thanks!</p>",
        "id": 378400641,
        "sender_full_name": "Mar√≠a In√©s de Frutos Fern√°ndez",
        "timestamp": 1690277751
    },
    {
        "content": "<p>I assume the cause is <code>irreducible_def</code>?</p>",
        "id": 378402254,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1690278059
    },
    {
        "content": "<p>Thanks! Removing <code>irreducible</code> indeed fixes the issue. However, <code>tsum</code> is an irreducible_def in Mathlib; I guess the solution could be to write the definitions separately and then try to use <code>to_additive</code> for the theorems.</p>",
        "id": 378403998,
        "sender_full_name": "Mar√≠a In√©s de Frutos Fern√°ndez",
        "timestamp": 1690278397
    },
    {
        "content": "<p><code>@[to_additive]</code> and <code>irreducible_def</code> are not compatible with each other yet.</p>",
        "id": 378427312,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1690282555
    },
    {
        "content": "<p>Note that if you do multiplicativize <code>tsum</code>, you probably want to add a translation rule <a href=\"https://github.com/leanprover-community/mathlib4/blob/4bf4f50c0a1ac06e08be83bfb0f728b0341ca515/Mathlib/Tactic/ToAdditive.lean#L707-L733\">here</a>, so that <code>to_additive</code> correctly guesses the names.</p>",
        "id": 378427991,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1690282684
    },
    {
        "content": "<p>If you do that, then your code (after removing the <code>tsum</code> name hint) will not give an error, but it will also not do quite the right thing, since it won't mark the additive version as irreducible, and it might also not make the additive version have the correct equation lemmas. So it's still good to give the definitions separately and then additivize the theorems.</p>",
        "id": 378428316,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1690282763
    },
    {
        "content": "<p>Recently, there were at least 2 attempts to add a multiplicative version of <code>HasSum</code>/<code>tsum</code>.</p>",
        "id": 378500583,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1690295956
    },
    {
        "content": "<p>And <span class=\"user-mention\" data-user-id=\"110050\">@Sebastien Gouezel</span> explained that the definition of <code>HasSum</code> should be changed so that the multiplicative version works better with zeros.</p>",
        "id": 378500993,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1690296009
    },
    {
        "content": "<p>Indeed, there is another pr by <span class=\"user-mention\" data-user-id=\"387244\">@Ya√´l Dillies</span> which apparently does more than we do. But we need that file now.</p>\n<p>Regarding <span class=\"user-mention\" data-user-id=\"110050\">@Sebastien Gouezel</span>'s suggestion, I think we fell in agreement that ‚ÄòHasSum‚Äò and ‚ÄòHasProd‚Äò should keep their standard meaning, but that another definition might be useful to introduce, if you need to use that remove a finite number of terms of your series and stay summable.</p>",
        "id": 378504235,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1690296531
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"130609\">Antoine Chambert-Loir</span> <a href=\"#narrow/stream/113488-general/topic/Trouble.20with.20to_additive/near/378504235\">said</a>:</p>\n<blockquote>\n<p>Regarding <span class=\"user-mention silent\" data-user-id=\"110050\">Sebastien Gouezel</span>'s suggestion, I think we fell in agreement that ‚ÄòHasSum‚Äò and ‚ÄòHasProd‚Äò should keep their standard meaning, but that another definition might be useful to introduce, if you need to use that remove a finite number of terms of your series and stay summable.</p>\n</blockquote>\n<p>Yes, I agree with that. Note however that the definition of <code>tsum</code> has changed recently in Mathlib4, so you should probably adapt your code to the new definition.</p>",
        "id": 378516948,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1690298617
    }
]