[
    {
        "content": "<p>Soft question if anyone has a take. How does lean4 compare to Coq/Agda/Isabelle/... (either a particular example or as a group if you take there to be larger groupings) in terms of its approach, motivations, aspirations, ... things like that? For context by way of example, I note that some frameworks for formalized mathematics seem particularly interested in HoTT and univalent foundations, others not so much. Put another way, is there anything lean 4 defines itself by from a super high level perspective? Thanks</p>",
        "id": 392909866,
        "sender_full_name": "Nick Dean",
        "timestamp": 1695618430
    },
    {
        "content": "<p>This might get a better answer on proofassistants.stackexchange. Regarding formalized mathematics in HoTT: people formalising mathematics in HoTT are typically interested in questions about higher types, which form a very small subset of pure mathematics. People formalising it in systems like Lean, Coq and Isabelle are typically interested in all of pure mathematics.</p>",
        "id": 392911600,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1695619299
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113488-general/topic/soft.20question.3A.20what.20makes.20lean.20lean/near/392911600\">said</a>:</p>\n<blockquote>\n<p>This might get a better answer on proofassistants.stackexchange. Regarding formalized mathematics in HoTT: people formalising mathematics in HoTT are typically interested in questions about higher types, which form a very small subset of pure mathematics. People formalising it in systems like Lean, Coq and Isabelle are typically interested in all of pure mathematics.</p>\n</blockquote>\n<p>Great, thanks Kevin (for the answer and the pointer)!</p>",
        "id": 392912812,
        "sender_full_name": "Nick Dean",
        "timestamp": 1695619815
    },
    {
        "content": "<p>Can't help to quote \"lean-ness of Lean\":</p>\n<blockquote>\n<p>......the base language should be sufficiently expressive for the formalization of advanced mathematics and for program verification, for which dependent type theory seemed like the most promising foundation. Thus the <strong>lean-ness of Lean</strong> should be understood in comparison to other implementations of dependent type theory, which does come with a certain degree of fundamental complexity compared to simpler logic systems. Compared to Coq, whose type theory Lean’s is inspired by and still closest to, this in particular relates to replacing the primitive concepts of termination checking, fixpoint operators, and pattern matching with primitive recursor functions [Dybjer, 1994], as well as forgoing the type system-embedded module system.</p>\n</blockquote>\n<p>from <em>1.3.3 The Essence of Lean</em> in  in <a href=\"https://leanprover.github.io/papers/thesis-sebastian.pdf\">An Extensible Theorem Proving Frontend ( <span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> 's thesis ) </a>.</p>",
        "id": 392914332,
        "sender_full_name": "Utensil Song",
        "timestamp": 1695620401
    },
    {
        "content": "<blockquote>\n<p>Another major change from Lean 2 was the removal of support for HoTT, which was done because of concerns over how to implement efficient tactics in the absence of proof irrelevance and the code duplication resulting from this as well as uncertainty at that time over whether “book HoTT” or the recent computational version of Cubical Type Theory [Cohen et al., 2015] was preferable.</p>\n</blockquote>\n<p>from <em>1.3.4 A Short History of Lean</em></p>",
        "id": 392914687,
        "sender_full_name": "Utensil Song",
        "timestamp": 1695620527
    },
    {
        "content": "<p>Combining both paragraphs, my understanding is that Lean was looking for an appropriately lean foundation for Lean that provides sufficient  support for the formalization of advanced mathematics and for program verification, and be able to write efficient tactics at the same time (thus requires proof irrelevance?).</p>\n<p>Choosing its type theory foundation on a \"lean\" one also doesn't stop Lean to <a href=\"#narrow/stream/270676-lean4/topic/Lean.204.20HoTT.20Library/near/285116257\">do research/formalization on HoTT</a> or similar math branches, requiring no modification to Lean kernel.</p>",
        "id": 392916017,
        "sender_full_name": "Utensil Song",
        "timestamp": 1695621054
    },
    {
        "content": "<p>(deleted-duplicate response)</p>",
        "id": 392918841,
        "sender_full_name": "Nick Dean",
        "timestamp": 1695622035
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"296911\">Utensil Song</span> <a href=\"#narrow/stream/113488-general/topic/soft.20question.3A.20what.20makes.20lean.20lean/near/392916017\">said</a>:</p>\n<blockquote>\n<p>Combining both paragraphs, my understanding is that Lean was looking for an appropriately lean foundation for Lean that provides sufficient  support for the formalization of advanced mathematics and for program verification, and be able to write efficient tactics at the same time (thus requires proof irrelevance?).</p>\n<p>Choosing its type theory foundation on a \"lean\" one also doesn't stop Lean to <a href=\"#narrow/stream/270676-lean4/topic/Lean.204.20HoTT.20Library/near/285116257\">do research/formalization on HoTT</a> or similar math branches, requiring no modification to Lean kernel.</p>\n</blockquote>\n<p>Ahhhh. Thanks a lot for your answers (and for including the poetic 'leanness of Lean'!). Clarified various things for me</p>",
        "id": 392918935,
        "sender_full_name": "Nick Dean",
        "timestamp": 1695622074
    },
    {
        "content": "<p>I don't think that Leo had any interest at all in the formalisation of mathematics when he wrote Lean; I think that the fact that it is extensively used for formalisation of mathematics is little more than a very happy historical fluke (combined with the fact that it turned out to be a very powerful tool for formalising mathematics).</p>",
        "id": 392919397,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1695622214
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113488-general/topic/soft.20question.3A.20what.20makes.20lean.20lean/near/392919397\">said</a>:</p>\n<blockquote>\n<p>I don't think that Leo had any interest at all in the formalisation of mathematics when he wrote Lean; I think that the fact that it is extensively used for formalisation of mathematics is little more than a very happy historical fluke (combined with the fact that it turned out to be a very powerful tool for formalising mathematics).</p>\n</blockquote>\n<p>Ooh!  What was the initial motivation?</p>",
        "id": 392993506,
        "sender_full_name": "Ioannis Konstantoulas",
        "timestamp": 1695643775
    },
    {
        "content": "<p>If you want to hear about Leo's initial motivations and much more, this recent podcast is quite relevant: <a href=\"https://podcasts.google.com/feed/aHR0cHM6Ly93d3cudHlwZXRoZW9yeWZvcmFsbC5jb20vZXBpc29kZXMubXAzLnJzcw/episode/aHR0cHM6Ly93d3cudHlwZXRoZW9yeWZvcmFsbC5jb20vMjAyMy8wOS8wOS8zMy1MZW8tZGUtTW91cmEuaHRtbA?ep=14\">https://podcasts.google.com/feed/aHR0cHM6Ly93d3cudHlwZXRoZW9yeWZvcmFsbC5jb20vZXBpc29kZXMubXAzLnJzcw/episode/aHR0cHM6Ly93d3cudHlwZXRoZW9yeWZvcmFsbC5jb20vMjAyMy8wOS8wOS8zMy1MZW8tZGUtTW91cmEuaHRtbA?ep=14</a></p>",
        "id": 392995023,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1695644134
    },
    {
        "content": "<p>One thing that Lean has thanks to a lack of legacy is pleasant unicode based notation. Also it can be used in VS Code which is an editor that riff-raff like myself can use easily.</p>",
        "id": 392995358,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1695644224
    },
    {
        "content": "<p>note that coq, agda, and isabelle also use unicode-based notation, it's not really a lean exclusive invention</p>",
        "id": 392997906,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1695644812
    },
    {
        "content": "<p>in fact, one of the common criticisms of agda is that people use way too much unicode</p>",
        "id": 392998060,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1695644857
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113488-general/topic/soft.20question.3A.20what.20makes.20lean.20lean/near/392997906\">said</a>:</p>\n<blockquote>\n<p>note that coq, agda, and isabelle also use unicode-based notation, it's not really a lean exclusive invention</p>\n</blockquote>\n<p>I see. I saw Gonthier's talk at the ICM and he used <code>\\Sigma</code>. So I assumed this was what Coq forced.</p>",
        "id": 392998149,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1695644884
    },
    {
        "content": "<p>Here I was not talking of Lean inventions, just the benefits of a lack of legacy so one can start with a world already having Javascript, LSP, Unicode etc.</p>",
        "id": 392998357,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1695644950
    },
    {
        "content": "<p>Most programming languages are unicode-capable these days</p>",
        "id": 392998425,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1695644967
    },
    {
        "content": "<p>but it is a common belief especially among programmers that unicode use is confusing and dangerous, or difficult to input, or both</p>",
        "id": 392998759,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1695645028
    },
    {
        "content": "<p>of course lean has a great IME for unicode but I'm not sure it has a great track record for avoiding confusables</p>",
        "id": 392998962,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1695645092
    },
    {
        "content": "<p>it's quite annoying that often lean code gets flagged by the vscode unicode thing</p>",
        "id": 393004138,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1695646202
    },
    {
        "content": "<p>What's the \"vscode unicode thing\"?</p>",
        "id": 393005337,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1695646545
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/e-OSW7_YO3A7TApJ4yPNvDDF/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/e-OSW7_YO3A7TApJ4yPNvDDF/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/e-OSW7_YO3A7TApJ4yPNvDDF/image.png\"></a></div>",
        "id": 393009722,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1695647479
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"266304\">Siddhartha Gadgil</span> <a href=\"#narrow/stream/113488-general/topic/soft.20question.3A.20what.20makes.20lean.20lean/near/392995358\">said</a>:</p>\n<blockquote>\n<p>One thing that Lean has thanks to a lack of legacy is pleasant unicode based notation. Also it can be used in VS Code which is an editor that riff-raff like myself can use easily.</p>\n</blockquote>\n<p>This might be more of a vim/emacs debate. Lean has a cultural edge in the math community, in the same way Coq has a userbase among the PL+verification community. </p>\n<ol>\n<li>Lean's tooling is great and it has the sort of OSS culture where people jump on to the zulip server and collaborate. Since it is fairly new, it is easy to get changes implemented compared to a tool with a lot of older codebases and power users to support. It got onto the LSP bandwagon earlier compared to other ITPs for example.</li>\n<li>I am guessing math people love that the lean community tries to accommodate their preferences as far as possible, rather than pontificating on how math ought to be done. Plus there's less backward compatibility to worry about. </li>\n<li>It attracts programmers who are not necessarily mathematicians who like to contribute to the tooling, build system, tactics, as well as math stuff. If you ask power users of other ITPs, I am sure they'll give you really convincing arguments </li>\n<li>The various parts of the system are more loosely coupled with each other. So while Coq has to maintain CoqIDE for each platform release and isabelle is tied to encoding choices made 20 years ago (whence their need to package their own vscodium which doesn't work with other up-to-date extensions), changes in the lean UX are less painful to make.</li>\n</ol>\n<p>EDIT:</p>\n<ol start=\"5\">\n<li>Lean has great learning material going for it: tpil, fpil, mpil, and most importantly the games. Coq's Software Foundations are great too, but more verification focussed than math focussed.</li>\n</ol>",
        "id": 393013150,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1695648334
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"284160\">Eric Rodriguez</span> <a href=\"#narrow/stream/113488-general/topic/soft.20question.3A.20what.20makes.20lean.20lean/near/393009722\">said</a>:</p>\n<blockquote>\n<p><a href=\"/user_uploads/3121/e-OSW7_YO3A7TApJ4yPNvDDF/image.png\">image.png</a></p>\n</blockquote>\n<p>i've never seen that, does it show up for you in lean files, if you click adjust settings can you turn it off? (we could add this to the mathlib default settings if needed)</p>",
        "id": 393051401,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1695657361
    },
    {
        "content": "<p>it may be turned off by default somehow? I've seen it pop up but rarely</p>",
        "id": 393051795,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1695657456
    },
    {
        "content": "<p>The relevant settings are </p>\n<div class=\"codehilite\" data-code-language=\"JSON\"><pre><span></span><code><span class=\"nt\">\"editor.unicodeHighlight.ambiguousCharacters\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kc\">false</span><span class=\"p\">,</span>\n<span class=\"nt\">\"editor.unicodeHighlight.nonBasicASCII\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kc\">false</span><span class=\"p\">,</span>\n</code></pre></div>",
        "id": 393092449,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1695669878
    },
    {
        "content": "<blockquote>\n<p>Coq has to maintain CoqIDE for each platform release</p>\n</blockquote>\n<p>For the record, CoqIDE is now in bugfix-only mode and is <a href=\"https://github.com/coq/ceps/blob/master/text/068-coqide-split.md\">on its way out</a> from the Coq GitHub repository. There are two VS Code extensions for Coq using novel language servers (developed outside Coq repo) supporting Isabelle-style interaction: <a href=\"https://github.com/coq-community/vscoq\">VsCoq2</a> and <a href=\"https://github.com/ejgallego/coq-lsp\">Coq-LSP</a></p>",
        "id": 394238287,
        "sender_full_name": "Karl Palmskog",
        "timestamp": 1696180642
    }
]