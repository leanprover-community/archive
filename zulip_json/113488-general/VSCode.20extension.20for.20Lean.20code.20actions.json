[
    {
        "content": "<p>Have you considered upstreaming this to vscode-lean4?</p>",
        "id": 386974613,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1692842239
    },
    {
        "content": "<p>auto-import and rename in vscode-lean4 would be awesome</p>",
        "id": 386974669,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1692842283
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113486-announce/topic/VSCode.20extension.20for.20Lean.20code.20actions/near/386974613\">said</a>:</p>\n<blockquote>\n<p>Have you considered upstreaming this to vscode-lean4?</p>\n</blockquote>\n<p>Yes, I'd love to. Who is the right person to talk with regarding upstreaming?</p>",
        "id": 386979266,
        "sender_full_name": "Denis Gorbachev",
        "timestamp": 1692845750
    },
    {
        "content": "<p>3 messages were moved here from <a class=\"stream-topic\" data-stream-id=\"113486\" href=\"/#narrow/stream/113486-announce/topic/VSCode.20extension.20for.20Lean.20code.20actions\">#announce &gt; VSCode extension for Lean code actions</a> by <span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span>.</p>",
        "id": 386979472,
        "sender_full_name": "Notification Bot",
        "timestamp": 1692845891
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"128280\">@Wojciech Nawrocki</span> and <span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> have done most of the recent work on the extension.</p>\n<p>I think you can just start making PRs. (Preferably separate PRs for separate actions, to ease review.)</p>",
        "id": 386979569,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1692845978
    },
    {
        "content": "<p>I'll send a preliminary PR to discuss the merge <span aria-label=\"ok\" class=\"emoji emoji-1f44c\" role=\"img\" title=\"ok\">:ok:</span></p>",
        "id": 387000107,
        "sender_full_name": "Denis Gorbachev",
        "timestamp": 1692854713
    },
    {
        "content": "<p>Some feature requests that I think would be very nice:</p>\n<ul>\n<li>\"clean up\" code by looking at open namespaces / (scoped) notation and using that to shorten names / use the notation. Example: <br>\nExample using mathlib:</li>\n</ul>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Analysis.SpecialFunctions.Trigonometric.Basic</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">Real</span>\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">tau</span> <span class=\"o\">:=</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">Real.pi</span>\n<span class=\"c\">/-</span><span class=\"cm\"> using the command gives:</span>\n<span class=\"cm\">noncomputable def tau := 2 * π</span>\n<span class=\"cm\">-/</span>\n<span class=\"kd\">end</span> <span class=\"n\">Real</span>\n</code></pre></div>\n<ul>\n<li>Look at namespaces / scoped notations that could be opened  to shorten parts of the code. Example:</li>\n</ul>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Analysis.SpecialFunctions.Trigonometric.Basic</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">tau</span> <span class=\"o\">:=</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">Real.pi</span>\n<span class=\"c\">/-</span><span class=\"cm\"> using the command gives:</span>\n<span class=\"cm\">open Real in</span>\n<span class=\"cm\">noncomputable def tau := 2 * π</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>\n<ul>\n<li>Use variables declared in the file and reuse those variables assuming those variables have the same type / binder type and associated type-classes, potentially by renaming the variable. Example:</li>\n</ul>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Add</span> <span class=\"n\">β</span><span class=\"o\">]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">{</span><span class=\"n\">γ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Add</span> <span class=\"n\">γ</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">γ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">γ</span> <span class=\"o\">:=</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">x</span>\n<span class=\"c\">/-</span><span class=\"cm\"> using the command gives:</span>\n<span class=\"cm\">def foo (x : β) : β := x + x</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>\n<p>(note: this can get trickier if you use type-classes that have more than 1 argument, like <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Module#doc\">docs#Module</a>)</p>\n<p>I would love to use a \"move definition\" command that uses all of the above features!</p>",
        "id": 387117099,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1692893730
    },
    {
        "content": "<p>I very much agree with the first and the third, while the second might be a bit trickier, because sometimes one really needs only one declaration and it is not worth it opening the namespace to avoid ambiguity.</p>",
        "id": 387122688,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1692895494
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"111080\">@Floris van Doorn</span> <span class=\"user-mention\" data-user-id=\"300245\">@Filippo A. E. Nuccio</span>  Thank you for suggestions - I've added <a href=\"https://github.com/DenisGorbachev/vscode-lean4-code-actions/issues\">new issues</a> to the repo</p>",
        "id": 387201610,
        "sender_full_name": "Denis Gorbachev",
        "timestamp": 1692934975
    },
    {
        "content": "<p>We should not merge typescript code that is parsing Lean source to the vscode extension. This won't be maintainable; parsing needs to be done Lean natively.</p>",
        "id": 387210219,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1692941017
    },
    {
        "content": "<p>Is the plan really to merge new code actions to the VSCode extension? Rather than Std or somewhere else?</p>",
        "id": 387227890,
        "sender_full_name": "Julian Berman",
        "timestamp": 1692950568
    },
    {
        "content": "<p>New command released: \"Set argument style\"</p>\n<p><a href=\"/user_uploads/3121/4WOG5XAbOef2U1bt8tWnm9m6/setArgumentStyle.gif\">Demo</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/4WOG5XAbOef2U1bt8tWnm9m6/setArgumentStyle.gif\" title=\"Demo\"><img src=\"/user_uploads/3121/4WOG5XAbOef2U1bt8tWnm9m6/setArgumentStyle.gif\"></a></div><p><strong>Before:</strong></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span>\n</code></pre></div>\n<p><strong>After:</strong></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span>\n</code></pre></div>\n<p><strong>Notes:</strong></p>\n<ul>\n<li>The command supports four argument styles: <a href=\"https://leanprover.github.io/theorem_proving_in_lean4/dependent_type_theory.html#function-abstraction-and-evaluation\">explicit</a>, <a href=\"https://leanprover.github.io/theorem_proving_in_lean4/dependent_type_theory.html#implicit-arguments\">implicit strong</a>, <a href=\"https://leanprover.github.io/theorem_proving_in_lean4/interacting_with_lean.html#more-on-implicit-arguments\">implicit weak</a>, <a href=\"https://leanprover.github.io/theorem_proving_in_lean4/type_classes.html\">typeclass</a> (<code>()</code>, <code>{}</code>, <code>⦃⦄</code>, <code>[]</code>).</li>\n</ul>\n<p><strong>Extension links:</strong></p>\n<ul>\n<li><a href=\"https://marketplace.visualstudio.com/items?itemName=denis-gorbachev.lean4-code-actions\">Install</a></li>\n<li><a href=\"https://github.com/DenisGorbachev/vscode-lean4-code-actions#commands\">Docs</a></li>\n<li><a href=\"https://github.com/DenisGorbachev/vscode-lean4-code-actions/issues/new?template=bug_report.md\">Report a bug</a></li>\n<li><a href=\"https://github.com/DenisGorbachev/vscode-lean4-code-actions/issues/new?template=feature_request.md\">Request a feature</a></li>\n</ul>",
        "id": 387228250,
        "sender_full_name": "Denis Gorbachev",
        "timestamp": 1692950687
    },
    {
        "content": "<p>Agreed, it's better to execute the code actions on the server, in the LSP file worker.</p>",
        "id": 387228843,
        "sender_full_name": "Denis Gorbachev",
        "timestamp": 1692950970
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"321696\">Julian Berman</span> <a href=\"#narrow/stream/113488-general/topic/VSCode.20extension.20for.20Lean.20code.20actions/near/387227890\">said</a>:</p>\n<blockquote>\n<p>Is the plan really to merge new code actions to the VSCode extension? Rather than Std or somewhere else?</p>\n</blockquote>\n<p>If they are implemented in Lean, they should of course go into a Lean package, yes</p>",
        "id": 387228860,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1692950978
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"599279\">Denis Gorbachev</span> <a href=\"#narrow/stream/113488-general/topic/VSCode.20extension.20for.20Lean.20code.20actions/near/387228250\">said</a>:</p>\n<blockquote>\n<p>New command released: \"Set argument style\"</p>\n</blockquote>\n<p>does this also change all the callers?</p>",
        "id": 387228948,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1692951008
    },
    {
        "content": "<p>These don't actually seem to be code actions though in the technical sense, these are extension commands</p>",
        "id": 387229107,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1692951089
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"321696\">Julian Berman</span> <a href=\"#narrow/stream/113488-general/topic/VSCode.20extension.20for.20Lean.20code.20actions/near/387227890\">said</a>:</p>\n<blockquote>\n<p>Is the plan really to merge new code actions to the VSCode extension? Rather than Std or somewhere else?</p>\n</blockquote>\n<p>Ideally, the extension should provide a frontend for the code actions, which should be executed on the server.</p>\n<p>Whether to merge to core extension or not - see <a href=\"https://github.com/leanprover/vscode-lean4/issues/316\">https://github.com/leanprover/vscode-lean4/issues/316</a></p>",
        "id": 387229248,
        "sender_full_name": "Denis Gorbachev",
        "timestamp": 1692951144
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113488-general/topic/VSCode.20extension.20for.20Lean.20code.20actions/near/387228948\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"599279\">Denis Gorbachev</span> <a href=\"#narrow/stream/113488-general/topic/VSCode.20extension.20for.20Lean.20code.20actions/near/387228250\">said</a>:</p>\n<blockquote>\n<p>New command released: \"Set argument style\"</p>\n</blockquote>\n<p>does this also change all the callers?</p>\n</blockquote>\n<p>No, sorry - it simply changes the argument in the definition.</p>\n<p>I agree this is suboptimal.</p>\n<p>Who's interested in forming a Code Actions Working Group? Together, we could implement the proper code actions that handle all edge cases &amp; work natively within the LSP server.</p>",
        "id": 387229582,
        "sender_full_name": "Denis Gorbachev",
        "timestamp": 1692951304
    },
    {
        "content": "<p>At least the rename action seems to be relatively easy to implement in the server</p>",
        "id": 387229590,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1692951308
    },
    {
        "content": "<p>TBH it is unclear why it doesn't already exist</p>",
        "id": 387229617,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1692951320
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113488-general/topic/VSCode.20extension.20for.20Lean.20code.20actions/near/387229590\">said</a>:</p>\n<blockquote>\n<p>At least the rename action seems to be relatively easy to implement in the server</p>\n</blockquote>\n<p>Yeah, that would be great!</p>",
        "id": 387229756,
        "sender_full_name": "Denis Gorbachev",
        "timestamp": 1692951383
    },
    {
        "content": "<p>I think the procedure would be to make a PR to the appropriate repository (lean core, std, or vscode-lean4), they each have their own contribution process</p>",
        "id": 387229794,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1692951402
    },
    {
        "content": "<p>a rename action would go in core</p>",
        "id": 387229838,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1692951424
    },
    {
        "content": "<p>auto-import too</p>",
        "id": 387229882,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1692951448
    },
    {
        "content": "<p>most actual code actions would go in std</p>",
        "id": 387230010,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1692951496
    },
    {
        "content": "<p>P.S. The \"final boss\" is the \"Move definition\" command. There are lots of nuances related to <code>namespace</code> and <code>open</code> that should be handled when moving the definition from one file to another. Discussed here: <a href=\"https://github.com/DenisGorbachev/vscode-lean4-code-actions/issues/10\">https://github.com/DenisGorbachev/vscode-lean4-code-actions/issues/10</a></p>",
        "id": 387230061,
        "sender_full_name": "Denis Gorbachev",
        "timestamp": 1692951522
    },
    {
        "content": "<p>and more involved text manipulation or things that need dropdowns / additional info would be in the extension</p>",
        "id": 387230094,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1692951539
    },
    {
        "content": "<p>Agree</p>",
        "id": 387230447,
        "sender_full_name": "Denis Gorbachev",
        "timestamp": 1692951697
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"599279\">Denis Gorbachev</span> <a href=\"#narrow/stream/113488-general/topic/VSCode.20extension.20for.20Lean.20code.20actions/near/387230061\">said</a>:</p>\n<blockquote>\n<p>P.S. The \"final boss\" is the \"Move definition\" command.</p>\n</blockquote>\n<p>This doesn't seem very valuable to me. Code actions are most useful when tens of files need to be changed in sync. Cut-and-pasting a single definition doesn't really meet that threshold.</p>",
        "id": 387231214,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1692952028
    },
    {
        "content": "<p>if it can actually solve those \"final boss\" issues it could be valuable</p>",
        "id": 387231396,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1692952095
    },
    {
        "content": "<p>but I'm not sure it's worth the effort</p>",
        "id": 387231446,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1692952111
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113488-general/topic/VSCode.20extension.20for.20Lean.20code.20actions/near/387228948\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"599279\">Denis Gorbachev</span> <a href=\"#narrow/stream/113488-general/topic/VSCode.20extension.20for.20Lean.20code.20actions/near/387228250\">said</a>:</p>\n<blockquote>\n<p>New command released: \"Set argument style\"</p>\n</blockquote>\n<p>does this also change all the callers?</p>\n</blockquote>\n<p>With respect to this, I've been using <a href=\"https://marketplace.visualstudio.com/items?itemName=pustelto.bracketeer\">Bracketeer</a> that has a key combination cycling through <code>(), [], {}</code> only.  Even so, I find it incredibly useful, since I very rarely use strict implicits.  So, if this code action improved on this, I would be very happy!</p>",
        "id": 387236330,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1692953926
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113488-general/topic/VSCode.20extension.20for.20Lean.20code.20actions/near/387231214\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"599279\">Denis Gorbachev</span> <a href=\"#narrow/stream/113488-general/topic/VSCode.20extension.20for.20Lean.20code.20actions/near/387230061\">said</a>:</p>\n<blockquote>\n<p>P.S. The \"final boss\" is the \"Move definition\" command.</p>\n</blockquote>\n<p>This doesn't seem very valuable to me. Code actions are most useful when tens of files need to be changed in sync. Cut-and-pasting a single definition doesn't really meet that threshold.</p>\n</blockquote>\n<p>What about moving the definition that is used in tens of other files? (we'll need to update the imports)</p>",
        "id": 387237832,
        "sender_full_name": "Denis Gorbachev",
        "timestamp": 1692954443
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"321459\">Damiano Testa</span> <a href=\"#narrow/stream/113488-general/topic/VSCode.20extension.20for.20Lean.20code.20actions/near/387236330\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113488-general/topic/VSCode.20extension.20for.20Lean.20code.20actions/near/387228948\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"599279\">Denis Gorbachev</span> <a href=\"#narrow/stream/113488-general/topic/VSCode.20extension.20for.20Lean.20code.20actions/near/387228250\">said</a>:</p>\n<blockquote>\n<p>New command released: \"Set argument style\"</p>\n</blockquote>\n<p>does this also change all the callers?</p>\n</blockquote>\n<p>With respect to this, I've been using <a href=\"https://marketplace.visualstudio.com/items?itemName=pustelto.bracketeer\">Bracketeer</a> that has a key combination cycling through <code>(), [], {}</code> only.  Even so, I find it incredibly useful, since I very rarely use strict implicits.  So, if this code action improved on this, I would be very happy!</p>\n</blockquote>\n<p>Ah snap, Bracketeer looks like a better solution! (it also has a \"Remove brackets\" action)</p>\n<p>But you're right - it doesn't support weak implicit args.</p>",
        "id": 387238386,
        "sender_full_name": "Denis Gorbachev",
        "timestamp": 1692954622
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 387238437,
        "sender_full_name": "Denis Gorbachev",
        "timestamp": 1692954645
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113488-general/topic/VSCode.20extension.20for.20Lean.20code.20actions/near/387229590\">said</a>:</p>\n<blockquote>\n<p>At least the rename action seems to be relatively easy to implement in the server</p>\n<p>TBH it is unclear why it doesn't already exist</p>\n</blockquote>\n<p>I put up a rename implementation at <a href=\"https://github.com/leanprover/lean4/pull/2462\">lean4#2462</a></p>",
        "id": 387264821,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1692965566
    },
    {
        "content": "<p>Thanks a lot Mario! I'll switch to your implementation as soon as it's merged</p>",
        "id": 387369526,
        "sender_full_name": "Denis Gorbachev",
        "timestamp": 1693014137
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113488-general/topic/VSCode.20extension.20for.20Lean.20code.20actions/near/387231214\">said</a>:</p>\n<blockquote>\n<p>This doesn't seem very valuable to me. Code actions are most useful when tens of files need to be changed in sync. Cut-and-pasting a single definition doesn't really meet that threshold.</p>\n</blockquote>\n<p>Moving a lemma from a new file to an existing mathlib file is a huge pain IMO, since the lemma usually breaks after just copy-and-pasting: the target location has different namespaces open, different declared variable names, etc. In Lean 3 it was a big annoyance. Also, if you paste results to multiple different files, then in Lean 3 you'd have to recompile a large part of the library to see if there are any errors after copy-pasting, so I usually just sent it off to Github CI and hoped for the best.</p>\n<p>Having a \"copy-paste\" function that doesn't create errors 99% of the time would be very nice.</p>",
        "id": 387411328,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1693045201
    },
    {
        "content": "<p>New action: <strong>Update imports on file rename</strong></p>\n<p><a href=\"/user_uploads/3121/-PcPRHeJu2h8iJl86O5X77w4/updateImports.gif\">Demo</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/-PcPRHeJu2h8iJl86O5X77w4/updateImports.gif\" title=\"Demo\"><img src=\"/user_uploads/3121/-PcPRHeJu2h8iJl86O5X77w4/updateImports.gif\"></a></div><p><strong>Example:</strong></p>\n<p>If you rename <code>Some/File.lean</code> to <code>Another/Name.lean</code>, it will update <code>import Some.File</code> to <code>import Another.Name</code> in every file in the workspace.</p>\n<p><strong>Extension links:</strong></p>\n<ul>\n<li><a href=\"https://marketplace.visualstudio.com/items?itemName=denis-gorbachev.lean4-code-actions\">Install</a></li>\n<li><a href=\"https://github.com/DenisGorbachev/vscode-lean4-code-actions#commands\">Docs</a></li>\n<li><a href=\"https://github.com/DenisGorbachev/vscode-lean4-code-actions/issues/new?template=bug_report.md\">Report a bug</a></li>\n<li><a href=\"https://github.com/DenisGorbachev/vscode-lean4-code-actions/issues/new?template=feature_request.md\">Request a feature</a></li>\n</ul>",
        "id": 387617416,
        "sender_full_name": "Denis Gorbachev",
        "timestamp": 1693209155
    }
]