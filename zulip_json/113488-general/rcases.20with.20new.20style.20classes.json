[
    {
        "content": "<p>As an example, consider this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic.rcases</span>\n<span class=\"kd\">class</span> <span class=\"n\">foo</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">bar</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">foobar</span> <span class=\"kd\">extends</span> <span class=\"n\">foo</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">zero</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">bar</span> <span class=\"mi\">2</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">foobar</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">false</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">unfreezingI</span> <span class=\"o\">{</span> <span class=\"n\">rcases</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">⟩,</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>I would expect this code to unpack this. And indeed it does, if you change _either_ or both of the <code>class</code>es to <code>structure</code>. But for some reason this doesn't work at all when they are both <code>class</code>es. What's going on? How am I meant to use <code>rcases</code> in this case?</p>",
        "id": 351887523,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1682173416
    },
    {
        "content": "<p>Does <code>@⟨a, b⟩</code> as a pattern work?</p>",
        "id": 351908254,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1682180438
    },
    {
        "content": "<p>that does work, thanks! weird that that's needed</p>",
        "id": 351940656,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1682190614
    },
    {
        "content": "<p>It's because base classes to <code>class</code> constructors are (typeclass) implicit arguments and so aren't included in anonymous constructor notation</p>",
        "id": 351950181,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1682195356
    }
]