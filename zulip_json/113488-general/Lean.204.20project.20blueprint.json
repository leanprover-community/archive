[
    {
        "content": "<p>Has anyone gone around to doing a version of plastex (cc <span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span>) for Lean 4? I'm almost done porting LeanAPAP to Lean 4 but I don't want to switch over if that means losing the blueprint.</p>",
        "id": 392196691,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1695238931
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"492774\">@Sky Wilshaw</span> who has a similar problem with Con(NF)</p>",
        "id": 392196742,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1695238965
    },
    {
        "content": "<p>You mean a Lean 4 plugin for plasTeX?</p>",
        "id": 392196790,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1695238998
    },
    {
        "content": "<p>We were talking about a Lean 4-compatible version of <code>leanblueprint</code>.</p>",
        "id": 392197037,
        "sender_full_name": "Sky Wilshaw",
        "timestamp": 1695239141
    },
    {
        "content": "<p>I haven't heard anything about this. It should be at most one day of work, but someone needs to do it.</p>",
        "id": 392197040,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1695239142
    },
    {
        "content": "<p>Recently I also needed a lightweight solution to use blueprint for Lean 4/Mathlib 4, so I hacked one <a href=\"https://github.com/utensil/leanblueprint/tree/lean4\">here</a> in a minimal setting:</p>\n<ol>\n<li>Use <code>\\leanfour{SomeTheorem}</code> to jump to Mathlib4 doc like <code>https://leanprover-community.github.io/mathlib4_docs/find/?pattern=SomeTheorem#doc</code> and the base url can be configured by <code>\\dochome{https://your-docgen4-url-base/}</code> in your <code>web.tex</code> file</li>\n<li>All original <code>\\lean{some_theorems}</code> still work alongside the Lean 4 button, provided you install leanblueprint with <code>leanblueprint[lean3] @ git+https://github.com/utensil/leanblueprint.git@lean4</code> in your <code>requirements.txt</code> via <code>pip install  -r requirements.txt</code> (note the extra <code>[lean3]</code> here to indicate legacy Lean 3 support together with Lean 4 support)</li>\n</ol>",
        "id": 394148705,
        "sender_full_name": "Utensil Song",
        "timestamp": 1696136455
    },
    {
        "content": "<h2>A few considerations:</h2>\n<p><strong>1. Should it drop Lean 3 support immediately?</strong></p>\n<p>I choose to make them work together for the transition period because converting all <code>\\lean{some_theorems}</code> to <code>\\leanfour{SomeTheorem}</code> or just <code>\\lean{SomeTheorem}</code> could be as easy as replacing them with CamelCase or they could end up somewhere quite different with some different name, it's better to provide a transition period, at least I need it in a scenario that the dependency is changed to Mathlib 4 but the project itself is still in Lean 3 and porting, so it makes sense for the blueprint to accommodate that.</p>\n<p>It's likely the official leanblueprint will drop Lean 3 support without hesitation and use  <code>\\lean{SomeTheorem}</code>, but it's easy to port <code>\\leanfour</code> to <code>\\lean</code> as it's just a simple global replacement without ambiguity. So this solution is future-proof.</p>\n<p>During the transition period, <code>mathlibtools</code> installation has been made optional, as long as you don't use the old <code>\\lean</code> and stick to <code>\\leanfour</code> in your Lean 4 project, you are safe to just use <code>leanblueprint @ git+https://github.com/utensil/leanblueprint.git@lean4</code> (if there's consensus on the approach I will open a PR).</p>\n<p><strong>2. Where should it jump?</strong></p>\n<p>I prefer to jump to the doc, but it can be made jumping to source with an option to replace the trailing <code>#doc</code> to <code>#src</code> as this is supported by docgen4. But I think this is a loss of information, because one can jump to the source from the doc if needed but not vice versa.</p>\n<p>The old  leanblueprint requires running a Lean 3 script to collect the declarations to make a precise jump, this can be done for Lean 4 in principle, but I fail to see the necessity in a minimal setting and I need to figure out how to do it idiomatically in Lean 4. So this part is left out, but the UX is almost not affected, the only difference is that it might not jump to the precise one if there is ambiguity but this can be considered a feature to find similar theorems or definitions.</p>\n<p>EDIT: One requirement difference is that the target project needs to use <a href=\"https://github.com/leanprover/doc-gen4\">docgen4</a>, because the old one supports jumping to Github source without a docgen setting. But this requirement is towards a better practice.</p>\n<p><strong>3. Why <code>\\leanfour</code> instead of <code>\\lean4</code>?</strong></p>\n<p>Unfortunately, LaTeX doesn't directly support digits in macro names. There are workarounds, but they make the solution more fragile. So I stick to <code>\\leanfour</code> and also it's easier to replace it without ambiguity and reasonably simple to type.</p>\n<p>Anyway, this fits my own need for now, and it's easy for anyone else to make one with some different preference by reading the diff <a href=\"https://github.com/PatrickMassot/leanblueprint/compare/master...utensil:leanblueprint:lean4?expand=1\">here</a>.</p>",
        "id": 394148710,
        "sender_full_name": "Utensil Song",
        "timestamp": 1696136460
    },
    {
        "content": "<p>It looks like this:</p>\n<p><a href=\"/user_uploads/3121/QCZttGPqYSwCUwH6vykHHS5-/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/QCZttGPqYSwCUwH6vykHHS5-/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/QCZttGPqYSwCUwH6vykHHS5-/image.png\"></a></div><p>(Maybe I should change <code>L∃∀N</code> to <code>L∃∀N 3</code> or <code>L∃∀N 4</code> to <span aria-label=\"lucky\" class=\"emoji emoji-1f340\" role=\"img\" title=\"lucky\">:lucky:</span> )</p>",
        "id": 394149243,
        "sender_full_name": "Utensil Song",
        "timestamp": 1696136701
    },
    {
        "content": "<p>I don't see any reason why you should still support lean 3. If someone wants to make a project then they won't be using <em>both</em> systems, and lean 3 already has its own blueprint software.</p>",
        "id": 394159541,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1696141719
    },
    {
        "content": "<p>Besides the reasons I explained above that I need to reference  Mathlib 4 and Lean 3 project in one Blueprint for the time being, use <code>\\lean</code> to mean lean4 will break Blueprint CI for existing Lean 3 projects (but it's also an easy  fix). It's easy to drop Lean 3, and equivalently easy to remain compatibility so I did it.</p>",
        "id": 394166538,
        "sender_full_name": "Utensil Song",
        "timestamp": 1696145072
    },
    {
        "content": "<p>If dropping Lean 3 is preferred and using <code>\\lean</code> to mean Lean 4 is ok, I can easily make it so and submit a PR.</p>",
        "id": 394167796,
        "sender_full_name": "Utensil Song",
        "timestamp": 1696145838
    },
    {
        "content": "<p>LeanAPAP is currently in Lean 3 because I don't want the blueprint to break. But all the code has been ported to Lean 4 on a branch and I don't need any transition period for my blueprint.</p>",
        "id": 394168165,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1696146026
    },
    {
        "content": "<p>Consideration 2 is also opinionated.</p>",
        "id": 394168261,
        "sender_full_name": "Utensil Song",
        "timestamp": 1696146100
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span> Do you have doc-gen4 for your Lean 4 project?</p>",
        "id": 394168650,
        "sender_full_name": "Utensil Song",
        "timestamp": 1696146331
    },
    {
        "content": "<p>Yes.</p>",
        "id": 394168938,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1696146539
    },
    {
        "content": "<p>Then consideration 2 won't be an issue.</p>",
        "id": 394169263,
        "sender_full_name": "Utensil Song",
        "timestamp": 1696146749
    },
    {
        "content": "<p>I think you should have both a \"Lean docs\" and a \"Lean source\" button, with the \"Lean docs\" one on only if doc-gen4 is used.</p>",
        "id": 394169464,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1696146887
    },
    {
        "content": "<p>Unfortunately the old leanblueprint relies on the Lean script to gather source location while my branch relies on doc-gen4 to do the same. I can provide both buttons if doc-gen4 is available but none of them if doc-gen4 is not.</p>",
        "id": 394169803,
        "sender_full_name": "Utensil Song",
        "timestamp": 1696147103
    },
    {
        "content": "<p>Ah I see. I think that's fine to keep it like that until someone complains.</p>",
        "id": 394170277,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1696147424
    },
    {
        "content": "<p>One in need could port the Lean 3 script to Lean 4 but maybe better to use yaml etc. instead of pickle.</p>",
        "id": 394170869,
        "sender_full_name": "Utensil Song",
        "timestamp": 1696147797
    },
    {
        "content": "<p>Lean 4 only branch: <a href=\"https://github.com/utensil/leanblueprint/tree/lean4-only\">https://github.com/utensil/leanblueprint/tree/lean4-only</a></p>\n<p>It works with  <code>leanblueprint @ git+https://github.com/utensil/leanblueprint.git@lean4-only</code>in the <code>requirements.txt</code> via <code>pip install  -r requirements.txt</code>.</p>\n<p>PR WIP, need to add some doc</p>",
        "id": 394170931,
        "sender_full_name": "Utensil Song",
        "timestamp": 1696147833
    },
    {
        "content": "<p><a href=\"https://github.com/PatrickMassot/leanblueprint/pull/5\">PatrickMassot/leanblueprint#5</a></p>",
        "id": 394243001,
        "sender_full_name": "Utensil Song",
        "timestamp": 1696182808
    },
    {
        "content": "<p>I don't know what to add in the doc, as there were little and people follow example projects anyway. I end up writing a migration guide assuming the readers know what to do for Lean 3, only need some clue to achieve the same for Lean 4.</p>",
        "id": 394243829,
        "sender_full_name": "Utensil Song",
        "timestamp": 1696183101
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"296911\">Utensil Song</span> <a href=\"#narrow/stream/113488-general/topic/Lean.204.20project.20blueprint/near/394148710\">said</a>:</p>\n<blockquote>\n<p><strong>2. Where should it jump?</strong></p>\n<p>I prefer to jump to the doc, but it can be made jumping to source with an option to replace the trailing <code>#doc</code> to <code>#src</code> as this is supported by docgen4. But I think this is a loss of information, because one can jump to the source from the doc if needed but not vice versa.<br>\n</p>\n</blockquote>\n<p>The advantage of a src jump is that you can permalink to a specific commit, unlike a doc link that can break.</p>",
        "id": 394319606,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1696222202
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"296911\">Utensil Song</span> <a href=\"#narrow/stream/113488-general/topic/Lean.204.20project.20blueprint/near/394243829\">said</a>:</p>\n<blockquote>\n<p>I don't know what to add in the doc, as there were little and people follow example projects anyway. I end up writing a migration guide assuming the readers know what to do for Lean 3, only need some clue to achieve the same for Lean 4.</p>\n</blockquote>\n<p>Is there a sample project for lean 4 that I can look at? I wanted to try and do this for the flt blueprint, but even though I at somepoint knew how to do it for lean 3 I don't really know how to do it now for lean 4. I remember using the instructions <a href=\"https://github.com/mmasdeu/brouwerfixedpoint\">here</a> when I made a lean 3 blueprint, but I'm not sure how much carries over.</p>",
        "id": 394441733,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1696255544
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"296911\">@Utensil Song</span> thanks for your work. I'll take a look soon. In the mean time I'd be really interested in reading what existing and future users of the blueprint infrastructure think about the link targets (doc-gen vs GitHub). Indeed the doc-gen solution is infinitely simpler to implement.</p>",
        "id": 394442505,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1696255666
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113488-general/topic/Lean.204.20project.20blueprint/near/394319606\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"296911\">Utensil Song</span> <a href=\"#narrow/stream/113488-general/topic/Lean.204.20project.20blueprint/near/394148710\">said</a>:</p>\n<blockquote>\n<p><strong>2. Where should it jump?</strong></p>\n<p>I prefer to jump to the doc, but it can be made jumping to source with an option to replace the trailing <code>#doc</code> to <code>#src</code> as this is supported by docgen4. But I think this is a loss of information, because one can jump to the source from the doc if needed but not vice versa.<br>\n</p>\n</blockquote>\n<p>The advantage of a src jump is that you can permalink to a specific commit, unlike a doc link that can break.</p>\n</blockquote>\n<p>I think it means the blueprint must link only to documentation hosted on the same website and generated at the same time. So a project depending on mathlib needs to rebuild and host mathlib documentation. Does that sound reasonable? <span class=\"user-mention\" data-user-id=\"395550\">@Henrik Böving</span></p>",
        "id": 394443005,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1696255739
    },
    {
        "content": "<p>Yes, keeping doc-gen4 consistent  with blueprint and ensured by a CI is the practice I was imagining.</p>\n<p>Somehow I begin to realize the usability cost for the simplicity of implementation. Maybe the Lean script to collect declarations is already a minimal dependency and worth porting to meet functionality equivalence then jumping to doc-gen4 could be an extra feature.</p>",
        "id": 394448770,
        "sender_full_name": "Utensil Song",
        "timestamp": 1696257281
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"389019\">Chris Birkbeck</span> <a href=\"#narrow/stream/113488-general/topic/Lean.204.20project.20blueprint/near/394441733\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"296911\">Utensil Song</span> <a href=\"#narrow/stream/113488-general/topic/Lean.204.20project.20blueprint/near/394243829\">said</a>:</p>\n<blockquote>\n<p>I don't know what to add in the doc, as there were little and people follow example projects anyway. I end up writing a migration guide assuming the readers know what to do for Lean 3, only need some clue to achieve the same for Lean 4.</p>\n</blockquote>\n<p>Is there a sample project for lean 4 that I can look at? I wanted to try and do this for the flt blueprint, but even though I at somepoint knew how to do it for lean 3 I don't really know how to do it now for lean 4. I remember using the instructions <a href=\"https://github.com/mmasdeu/brouwerfixedpoint\">here</a> when I made a lean 3 blueprint, but I'm not sure how much carries over.</p>\n</blockquote>\n<p>Sorry I'm out these two days, I can make a minimal sample project when I'm back.</p>",
        "id": 394452394,
        "sender_full_name": "Utensil Song",
        "timestamp": 1696258263
    },
    {
        "content": "<p>That would be great, thank you! I'll have a closer look to see if I can figure it out, but I'm sure a sample project will be useful to others as well :)</p>",
        "id": 394453317,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1696258529
    },
    {
        "content": "<p>Meanwhile you can check out <a href=\"https://github.com/utensil/lean-ga\">here</a> particularly tasks.py, .github, requirements.txt which runs blueprint lean4 only version. You can use the relevant part in your Lean 4 project and safely ignore the fact that lean-ga is still a Lean 3 project which doesn't affect the new blueprint plugin as it's simply jumping to a doc-gen4 link.</p>",
        "id": 394453855,
        "sender_full_name": "Utensil Song",
        "timestamp": 1696258683
    },
    {
        "content": "<p>If I want to use this stuff to make a Fermat's Last Theorem project like the liquid tensor experiment, hosted at eg Imperial College's GitHub, then what does jumping to doc-gen mean for me? Do I also have to host docs somehow?</p>\n<p>Wasn't the dream to jump to leanink?</p>",
        "id": 394455238,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1696259066
    },
    {
        "content": "<p>Yes, hosting the doc makes this approach  work naturally. I'll show the POC of how it works in the sample project. It could be as easy as some copy-pasting(from the sample project).</p>",
        "id": 394458300,
        "sender_full_name": "Utensil Song",
        "timestamp": 1696259970
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113488-general/topic/Lean.204.20project.20blueprint/near/394455238\">said</a>:</p>\n<blockquote>\n<p>If I want to use this stuff to make a Fermat's Last Theorem project like the liquid tensor experiment, hosted at eg Imperial College's GitHub, then what does jumping to doc-gen mean for me? Do I also have to host docs somehow?</p>\n</blockquote>\n<p>Yes, if we want links to doc-gen rather than GitHub then you need to host docs. But there is no need for a fancy server, they are html pages with javascript. It is not more complicated than hosting NNG3.</p>",
        "id": 394458546,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1696260036
    },
    {
        "content": "<p>As for LeanInk, my dream would be directly embed LeanInk generated Lean 4 proof with intermediate goal states in the blueprint, maybe with click to expand.</p>",
        "id": 394458698,
        "sender_full_name": "Utensil Song",
        "timestamp": 1696260085
    },
    {
        "content": "<blockquote>\n<p>Wasn't the dream to jump to leanink?</p>\n</blockquote>\n<p>Very good question. The original dream was indeed to jump to some version of leanink. But leanink is abandonned. Even doc-gen no longer includes links to leanink-generated pages. I hope someone will pick up this project at some point.</p>",
        "id": 394458726,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1696260090
    },
    {
        "content": "<p>Oh I didn't know LeanInk is abandoned (only in the sense of maintenance, right? as it seems to work fine for proofs I tried) and docgen4 used to link to it. Then if LeanInk is revived, blueprint → doc gen4 → LeanInk is still there.</p>",
        "id": 394459679,
        "sender_full_name": "Utensil Song",
        "timestamp": 1696260361
    },
    {
        "content": "<p>It is not <em>officially</em> abandoned, but this was a student project, the student moved along and nobody took up the task. The main difficulty is that it was built on top of a tool, Alectryon, that is also mostly abandoned (the main author was a post-doc but got an actual job involving teaching and presumably administrative duty and no longer has enough time).  In the beginning relying on Alectryon was a big win because it allowed to focus on Lean with worrying with user-facing stuff, but now this dependency should probably be removed.</p>",
        "id": 394460378,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1696260575
    },
    {
        "content": "<p>All of this is public information by the way, you only need to look at <a href=\"https://github.com/leanprover/LeanInk/commits/main\">https://github.com/leanprover/LeanInk/commits/main</a>, <a href=\"https://github.com/leanprover/LeanInk/issues\">https://github.com/leanprover/LeanInk/issues</a>, <a href=\"https://github.com/cpitclaudel/alectryon/commits/master\">https://github.com/cpitclaudel/alectryon/commits/master</a>, <a href=\"https://github.com/cpitclaudel/alectryon/issues\">https://github.com/cpitclaudel/alectryon/issues</a></p>",
        "id": 394460806,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1696260693
    },
    {
        "content": "<p>Thanks for the thorough explanation. I checked the issues of both repos and they seem to be mostly enhancements and only few are bugs for edge cases, so overall LeanInk is in good shape and the major issue is to make LeanInk work with something  else to produce the HTML instead of relying on alectryon? As LeanInk already produces JSON, these something else could be as simple as just one html with some js to consume that JSON directly as opposed to the current  approach of using alectryon to generate some HTML tags then use CSS/JS to render these tags.</p>",
        "id": 394465203,
        "sender_full_name": "Utensil Song",
        "timestamp": 1696262059
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/113488-general/topic/Lean.204.20project.20blueprint/near/394443005\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113488-general/topic/Lean.204.20project.20blueprint/near/394319606\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"296911\">Utensil Song</span> <a href=\"#narrow/stream/113488-general/topic/Lean.204.20project.20blueprint/near/394148710\">said</a>:</p>\n<blockquote>\n<p><strong>2. Where should it jump?</strong></p>\n<p>I prefer to jump to the doc, but it can be made jumping to source with an option to replace the trailing <code>#doc</code> to <code>#src</code> as this is supported by docgen4. But I think this is a loss of information, because one can jump to the source from the doc if needed but not vice versa.<br>\n</p>\n</blockquote>\n<p>The advantage of a src jump is that you can permalink to a specific commit, unlike a doc link that can break.</p>\n</blockquote>\n<p>I think it means the blueprint must link only to documentation hosted on the same website and generated at the same time. So a project depending on mathlib needs to rebuild and host mathlib documentation. Does that sound reasonable? <span class=\"user-mention silent\" data-user-id=\"395550\">Henrik Böving</span></p>\n</blockquote>\n<p>Yes. Although I would hope we eventually converge towards a <a href=\"http://docs.rs\">docs.rs</a> style solution that everyone can just link to.</p>",
        "id": 394470312,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1696263806
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"296911\">Utensil Song</span> <a href=\"#narrow/stream/113488-general/topic/Lean.204.20project.20blueprint/near/394465203\">said</a>:</p>\n<blockquote>\n<p>Thanks for the thorough explanation. I checked the issues of both repos and they seem to be mostly enhancements </p>\n</blockquote>\n<p>Some enhancements are really fundamental. Currently Alectryon and LeanInk are fundamentally tools handling one Lean file at a time. There is no way you can get links between files. So you don' t have the html analogue of jump to definition, or even preview lemma statement, so it is not really usable. I'm also pretty sure there were more serious bugs, but maybe nobody opened issues because it seemed abandoned.</p>\n<blockquote>\n<p>and only few are bugs for edge cases, so overall LeanInk is in good shape and the major issue is to make LeanInk work with something  else to produce the HTML instead of relying on alectryon? As LeanInk already produces JSON, these something else could be as simple as just one html with some js to consume that JSON directly as opposed to the current  approach of using alectryon to generate some HTML tags then use CSS/JS to render these tags.</p>\n</blockquote>\n<p>Yes, that would be the minimal version. But I think it's less simple than it appears.</p>",
        "id": 394483247,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1696268498
    },
    {
        "content": "<p>To be able to handle multiple Lean files or a Lean project as a whole, then distilling the relevant part of LeanInk into doc-gen4 might be the way to go, then facilities there handling cross-reference, markup and frontend etc. can be reused. This would be like Doxygen, which can generate API document as well as source code cross-reference, in one place.</p>\n<p>As for blueprint, once I thought it would become less used when doc-gen4 becomes more powerful and integrated, but its value is to first chart uncharted territories in an informal and Lean-neutral way, then provides portals to the later formalized doc and source. So keeping it independent from doc-gen4 makes sense.</p>",
        "id": 394533695,
        "sender_full_name": "Utensil Song",
        "timestamp": 1696293568
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"395550\">Henrik Böving</span> <a href=\"#narrow/stream/113488-general/topic/Lean.204.20project.20blueprint/near/394470312\">said</a>:</p>\n<blockquote>\n<p>Yes. Although I would hope we eventually converge towards a <a href=\"http://docs.rs\">docs.rs</a> style solution that everyone can just link to.</p>\n</blockquote>\n<p>I contemplated doing this in Reservoir, but I was not sure how to make this work. The main issue is that doc-gen4 currently has a lot of workspace global data, which does not translate nicely to atomized packages. For example, if we run doc-gen on each package it produce documentation for all its dependencies which means a lot of duplicated data across packages (and very large data for packages which depend on mathlib). How would you see this working?</p>",
        "id": 394564713,
        "sender_full_name": "Mac Malone",
        "timestamp": 1696312826
    },
    {
        "content": "<p>Right, I do think the current doc gen design is not so easily compatible with having multiple separate packages either. In particular features like the global list of instances definitely dont work out on a larger scale. I think the answer here is to basically give up on the idea of having a list of all instances in the Eco system on the type class itself and instead limit these global information features to local package information.</p>\n<p>In addition to that we would need a slightly more intelligent linking feature that tells doc-gen some sort of template string to use for linking to external packages. Reservoir could then provide such a string that conforms with its own structure.</p>\n<p>Do you see additional problems here? <span class=\"user-mention\" data-user-id=\"315577\">@Mac Malone</span></p>",
        "id": 394599798,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1696327398
    },
    {
        "content": "<p>If I publish a package that depends on a particular version of mathlib, then I'm going to want to be able to permalink to docs for that particular mathlib version; and by far the easiest way to do that is just to regenerate all those docs myself and host them alongside my docs (in which case the instance lists in their current form are fine)</p>",
        "id": 394655539,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1696345896
    },
    {
        "content": "<p>The alternative is to centrally host a copy for every mathlib \"release\", but that seems far more resource intensive than each package hosting the one copy they need.</p>",
        "id": 394655836,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1696345981
    },
    {
        "content": "<p>(at least while every commit is a release)</p>",
        "id": 394655889,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1696345995
    },
    {
        "content": "<p>It would be great if doc-gen4 could distinguish \"this is <em>the</em> documentation for this package\" vs \"you are looking at an old version of the documentation for a dependency of another package\"</p>",
        "id": 394656198,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1696346088
    },
    {
        "content": "<p>(doc-gen3 did this with link rel=\"canonical\", which avoids SEO problems caused by duplication)</p>",
        "id": 394656356,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1696346131
    },
    {
        "content": "<p>Yes, I've also made used of this fact (generating doc for a project generates doc for the exact version of mathlib, std, core it uses) so there is only one base url to jump to, the doc of the project.</p>",
        "id": 394657704,
        "sender_full_name": "Utensil Song",
        "timestamp": 1696346545
    },
    {
        "content": "<p>I could not imagine a <a href=\"http://docs.rs\">docs.rs</a> for Lean as it's so decentralized in regard to versions of dependencies, and little compatibility can be preserved when they evolve, unlike traditional software developments.</p>",
        "id": 394658013,
        "sender_full_name": "Utensil Song",
        "timestamp": 1696346645
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"389019\">@Chris Birkbeck</span> The minimal Lean 4 blueprint project is here: <a href=\"https://github.com/utensil/LeanBlueprintExample/\">https://github.com/utensil/LeanBlueprintExample/</a> which has a minimal CI that generates a blueprint here ( <a href=\"https://utensil.github.io/LeanBlueprintExample/blueprint/sec-subdemo.html\">https://utensil.github.io/LeanBlueprintExample/blueprint/sec-subdemo.html</a> ) that can jump to its doc-gen4 docs ( <a href=\"https://utensil.github.io/LeanBlueprintExample/doc/\">https://utensil.github.io/LeanBlueprintExample/doc/</a> ) .</p>",
        "id": 394787811,
        "sender_full_name": "Utensil Song",
        "timestamp": 1696408634
    },
    {
        "content": "<p>Amazing! Thank you very much! I'll check it out now</p>",
        "id": 394787950,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1696408665
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"296911\">@Utensil Song</span> In step 3, is there a command missing? should I add</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">meta</span> <span class=\"k\">if</span> <span class=\"n\">get_config</span><span class=\"bp\">?</span> <span class=\"n\">env</span> <span class=\"bp\">=</span> <span class=\"n\">some</span> <span class=\"s2\">\"dev\"</span> <span class=\"k\">then</span> <span class=\"c1\">-- dev is so not everyone has to build it</span>\n<span class=\"n\">require</span> <span class=\"bp\">«</span><span class=\"n\">doc</span><span class=\"bp\">-</span><span class=\"n\">gen4</span><span class=\"bp\">»</span> <span class=\"k\">from</span> <span class=\"n\">git</span> <span class=\"s2\">\"https://github.com/leanprover/doc-gen4\"</span> <span class=\"bp\">@</span> <span class=\"s2\">\"main\"</span>\n</code></pre></div>\n<p>to the <code>lakefile.lean</code>?</p>",
        "id": 394790814,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1696409327
    },
    {
        "content": "<p>Yes, I was about to update readme after ci pass but forgot (before went out to play with my kids)</p>",
        "id": 394799280,
        "sender_full_name": "Utensil Song",
        "timestamp": 1696412277
    },
    {
        "content": "<p>So I'm getting the following error when I try to test locally, running <code>lake -Kenv=dev build YourProject:docs</code> it says <br>\n\"error: unknown library facet <code>docs</code>\"</p>",
        "id": 394807729,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1696414990
    },
    {
        "content": "<p>It would appear if you haven't run <code>lake -Kenv=dev update</code> which installs and configures doc-gen4</p>",
        "id": 394810779,
        "sender_full_name": "Utensil Song",
        "timestamp": 1696415775
    },
    {
        "content": "<p>README updated.</p>",
        "id": 394810842,
        "sender_full_name": "Utensil Song",
        "timestamp": 1696415803
    },
    {
        "content": "<p>Hmm, no I did run that: </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">PS</span> <span class=\"n\">C</span><span class=\"o\">:</span><span class=\"bp\">\\</span><span class=\"n\">Users</span><span class=\"bp\">\\</span><span class=\"n\">chris</span><span class=\"bp\">\\</span><span class=\"n\">FLT_regular_blueprint</span><span class=\"bp\">\\</span><span class=\"n\">FltRegular</span><span class=\"bp\">&gt;</span> <span class=\"n\">lake</span> <span class=\"bp\">-</span><span class=\"n\">Kenv</span><span class=\"bp\">=</span><span class=\"n\">dev</span> <span class=\"n\">update</span>\n<span class=\"n\">mathlib</span><span class=\"o\">:</span> <span class=\"n\">updating</span> <span class=\"n\">repository</span> <span class=\"bp\">'.\\</span><span class=\"n\">lake</span><span class=\"bp\">-</span><span class=\"n\">packages</span><span class=\"bp\">\\</span><span class=\"n\">mathlib'</span> <span class=\"n\">to</span> <span class=\"n\">revision</span> <span class=\"bp\">'</span><span class=\"mi\">39</span><span class=\"n\">a866a8658151890d84106ca8edd9fbebfe9df1'</span>\n<span class=\"n\">PS</span> <span class=\"n\">C</span><span class=\"o\">:</span><span class=\"bp\">\\</span><span class=\"n\">Users</span><span class=\"bp\">\\</span><span class=\"n\">chris</span><span class=\"bp\">\\</span><span class=\"n\">FLT_regular_blueprint</span><span class=\"bp\">\\</span><span class=\"n\">FltRegular</span><span class=\"bp\">&gt;</span> <span class=\"n\">lake</span> <span class=\"bp\">-</span><span class=\"n\">Kenv</span><span class=\"bp\">=</span><span class=\"n\">dev</span> <span class=\"n\">build</span> <span class=\"n\">FltRegular</span><span class=\"o\">:</span><span class=\"n\">docs</span>\n<span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">unknown</span> <span class=\"n\">library</span> <span class=\"n\">facet</span> <span class=\"bp\">`</span><span class=\"n\">docs</span><span class=\"bp\">`</span>\n</code></pre></div>",
        "id": 394810928,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1696415834
    },
    {
        "content": "<p>Weird, it should show:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">%</span> <span class=\"n\">lake</span> <span class=\"bp\">-</span><span class=\"n\">Kenv</span><span class=\"bp\">=</span><span class=\"n\">dev</span> <span class=\"n\">update</span>\n<span class=\"n\">cloning</span> <span class=\"n\">https</span><span class=\"o\">:</span><span class=\"bp\">//</span><span class=\"n\">github.com</span><span class=\"bp\">/</span><span class=\"n\">leanprover</span><span class=\"bp\">/</span><span class=\"n\">doc</span><span class=\"bp\">-</span><span class=\"n\">gen4</span> <span class=\"n\">to</span> <span class=\"bp\">./</span><span class=\"n\">lake</span><span class=\"bp\">-</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">doc</span><span class=\"bp\">-</span><span class=\"n\">gen4</span>\n<span class=\"n\">cloning</span> <span class=\"n\">https</span><span class=\"o\">:</span><span class=\"bp\">//</span><span class=\"n\">github.com</span><span class=\"bp\">/</span><span class=\"n\">xubaiw</span><span class=\"bp\">/</span><span class=\"n\">CMark.lean</span> <span class=\"n\">to</span> <span class=\"bp\">./</span><span class=\"n\">lake</span><span class=\"bp\">-</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">CMark</span>\n<span class=\"n\">cloning</span> <span class=\"n\">https</span><span class=\"o\">:</span><span class=\"bp\">//</span><span class=\"n\">github.com</span><span class=\"bp\">/</span><span class=\"n\">fgdorais</span><span class=\"bp\">/</span><span class=\"n\">lean4</span><span class=\"bp\">-</span><span class=\"n\">unicode</span><span class=\"bp\">-</span><span class=\"n\">basic</span> <span class=\"n\">to</span> <span class=\"bp\">./</span><span class=\"n\">lake</span><span class=\"bp\">-</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">lean4</span><span class=\"bp\">-</span><span class=\"n\">unicode</span><span class=\"bp\">-</span><span class=\"n\">basic</span>\n<span class=\"n\">cloning</span> <span class=\"n\">https</span><span class=\"o\">:</span><span class=\"bp\">//</span><span class=\"n\">github.com</span><span class=\"bp\">/</span><span class=\"n\">hargonix</span><span class=\"bp\">/</span><span class=\"n\">LeanInk</span> <span class=\"n\">to</span> <span class=\"bp\">./</span><span class=\"n\">lake</span><span class=\"bp\">-</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">leanInk</span>\n<span class=\"n\">warning</span><span class=\"o\">:</span> <span class=\"n\">improperly</span> <span class=\"n\">formatted</span> <span class=\"n\">manifest</span><span class=\"o\">:</span> <span class=\"n\">incompatible</span> <span class=\"n\">manifest</span> <span class=\"n\">version</span> <span class=\"bp\">`</span><span class=\"mi\">4</span><span class=\"bp\">`</span>\n</code></pre></div>",
        "id": 394811137,
        "sender_full_name": "Utensil Song",
        "timestamp": 1696415911
    },
    {
        "content": "<p>now it just does nothing: </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">PS</span> <span class=\"n\">C</span><span class=\"o\">:</span><span class=\"bp\">\\</span><span class=\"n\">Users</span><span class=\"bp\">\\</span><span class=\"n\">chris</span><span class=\"bp\">\\</span><span class=\"n\">FLT_regular_blueprint</span><span class=\"bp\">\\</span><span class=\"n\">FltRegular</span><span class=\"bp\">&gt;</span> <span class=\"n\">lake</span> <span class=\"bp\">-</span><span class=\"n\">Kenv</span><span class=\"bp\">=</span><span class=\"n\">dev</span> <span class=\"n\">update</span>\n<span class=\"n\">PS</span> <span class=\"n\">C</span><span class=\"o\">:</span><span class=\"bp\">\\</span><span class=\"n\">Users</span><span class=\"bp\">\\</span><span class=\"n\">chris</span><span class=\"bp\">\\</span><span class=\"n\">FLT_regular_blueprint</span><span class=\"bp\">\\</span><span class=\"n\">FltRegular</span><span class=\"bp\">&gt;</span>\n</code></pre></div>",
        "id": 394811294,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1696415978
    },
    {
        "content": "<p>Let me try this from scratch again</p>",
        "id": 394811649,
        "sender_full_name": "Utensil Song",
        "timestamp": 1696416089
    },
    {
        "content": "<p>I did add that line to the <code>lakefile.lean</code>. I also cloned the blueprint example repo and tried running it there and nothing.  Also I don't know if this matters but I'm using windows...</p>",
        "id": 394811826,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1696416135
    },
    {
        "content": "<p>Seems to work from scratch on my end. Sorry, I can't test this on Windows at the moment.</p>",
        "id": 394813073,
        "sender_full_name": "Utensil Song",
        "timestamp": 1696416605
    },
    {
        "content": "<p>hmm ok, let me try with my WSL</p>",
        "id": 394813222,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1696416672
    },
    {
        "content": "<p>Maybe try remove <code>meta if get_config? env = some \"dev\" then -- dev is so not everyone has to build it</code> and leaves only <code>require «doc-gen4» from git \"https://github.com/leanprover/doc-gen4\" @ \"main\"</code> in the lakefile.lean, then run <code>lake update</code> and <code>lake build YourProject:docs</code>?</p>",
        "id": 394813248,
        "sender_full_name": "Utensil Song",
        "timestamp": 1696416685
    },
    {
        "content": "<p>I can only assume maybe <code>get_config?</code> has some issue on Windows, the rest seems platform-independent.</p>",
        "id": 394813431,
        "sender_full_name": "Utensil Song",
        "timestamp": 1696416747
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"296911\">Utensil Song</span> <a href=\"#narrow/stream/113488-general/topic/Lean.204.20project.20blueprint/near/394813248\">said</a>:</p>\n<blockquote>\n<p>Maybe try remove <code>meta if get_config? env = some \"dev\" then -- dev is so not everyone has to build it</code> and leaves only <code>require «doc-gen4» from git \"https://github.com/leanprover/doc-gen4\" @ \"main\"</code> in the lakefile.lean, then run <code>lake update</code> and <code>lake build YourProject:docs</code>?</p>\n</blockquote>\n<p>Oh that did something. I got the output you said I should get. Let me see if the rest works now</p>",
        "id": 394813571,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1696416801
    },
    {
        "content": "<p>OK I think I almost have it all running. I ran the github workflow and made a <code>doc</code> and <code>blueprint</code> folder in the <code>gh-pages</code> branch which look good. The only thing I dont know how to do is to get github to host the pages from these subfolders. Is there a way to do this? I guess I could just put the contents in some other branch and use that, but I wanted to know if there is something I'm missing.</p>",
        "id": 394858070,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1696430924
    },
    {
        "content": "<p>Congratulations! CI has been set up to publish Github pages, Step 8 &amp; 9 in the updated README is about that.</p>",
        "id": 394859762,
        "sender_full_name": "Utensil Song",
        "timestamp": 1696431404
    },
    {
        "content": "<p>In <code>.github/workflows/push.yml</code>, step \"Copy documentation\" and \"Deploy doc &amp; blueprint\" are there to make this work, along with <code>permissions</code> at the beginning of the file.</p>",
        "id": 394860178,
        "sender_full_name": "Utensil Song",
        "timestamp": 1696431530
    },
    {
        "content": "<p>Oh nice, I hadn't refreshed the readme. Thank you very much!</p>",
        "id": 394861494,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1696431901
    },
    {
        "content": "<p>You can add more steps to make an extra project page to link to doc and blueprint like <a href=\"https://github.com/YaelDillies/LeanAPAP\">https://github.com/YaelDillies/LeanAPAP</a> did (using its <code>docs</code> folder for a Jekyll website, and step \"Bundle dependencies\" and \"Bundle website\" to generate the website, then you just need to copy or move things to be under <code>_site</code> then it's published together with doc and blueprint). I didn't include that part as I think that won't be minimal to include something that depends on Ruby.</p>",
        "id": 394861603,
        "sender_full_name": "Utensil Song",
        "timestamp": 1696431934
    },
    {
        "content": "<p>OK I think I got this working now, thank you so much for making the example blueprint. One last thing that I'm unsure of is, with doc4 links to things that are already in mathlib, should the link direct you to <code>https://leanprover-community.github.io/mathlib4_docs/etc..</code> or to the one I created? Since it seems either I can link to the mathlib4 ones but then ones that aren't in mathlib wont work or only to the ones in the project but the ones to things in mathlib don't work. You can see <a href=\"https://cbirkbeck.github.io/FltRegulartest/blueprint/\">here</a> where some of LEAN links work and some don't.</p>",
        "id": 394910400,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1696450621
    },
    {
        "content": "<p>I guess you need to consider what this looks like in 5 years when your project is finished but mathlib is still racing on, definitions and theorems have moved or been removed or generalised etc.</p>",
        "id": 394911604,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1696451258
    },
    {
        "content": "<p>Yeah, I think you want to have a copy of the docs for the exact mathlib version you depend on</p>",
        "id": 394911777,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1696451331
    },
    {
        "content": "<p>Why change the way it worked in Lean 3? namely host the docs for all the mathlib files imported by your project, at the version used by your project.</p>",
        "id": 394917587,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1696454244
    },
    {
        "content": "<p>Aha I see, I hadn't thought about how this would age. I agree maybe a copy of the exact version would be best then.</p>",
        "id": 394927957,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1696460118
    },
    {
        "content": "<p>Wait, why isn't Mathlib4 documentation of the used version generated together with the project itself?</p>",
        "id": 394931083,
        "sender_full_name": "Utensil Song",
        "timestamp": 1696462395
    },
    {
        "content": "<p>Lean, Lake, Init are, why not Mathlib?</p>",
        "id": 394931190,
        "sender_full_name": "Utensil Song",
        "timestamp": 1696462488
    },
    {
        "content": "<p>I thought they would be, so they would naturally be linked inside the project doc, at least the part that's  used.</p>",
        "id": 394931323,
        "sender_full_name": "Utensil Song",
        "timestamp": 1696462565
    },
    {
        "content": "<p>There was this PR discussing generating the document for dependencies but only handles Init/Lean/Lake: <a href=\"https://github.com/leanprover/doc-gen4/pull/19\">https://github.com/leanprover/doc-gen4/pull/19</a></p>",
        "id": 394931530,
        "sender_full_name": "Utensil Song",
        "timestamp": 1696462735
    },
    {
        "content": "<blockquote>\n<p>If you have multiple libraries you want to generate documentation for the recommended way right now is to run it for each library.</p>\n</blockquote>\n<p>From doc-gen4 README. But do they link together? I'll have to experiment this the day after tomorrow as I'm out hiking again today and tomorrow.</p>\n<p>Has anyone get this to work? From FLT's doc, it can't jump to something in Mathlib, e.g. AddCommMonoid from <a href=\"https://cbirkbeck.github.io/FltRegulartest/doc/FltRegular/ReadyForMathlib/Homogenization.html\">https://cbirkbeck.github.io/FltRegulartest/doc/FltRegular/ReadyForMathlib/Homogenization.html</a> nor can it be found using find</p>",
        "id": 394932010,
        "sender_full_name": "Utensil Song",
        "timestamp": 1696463150
    },
    {
        "content": "<p>I think this is just an accident</p>",
        "id": 394932146,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1696463278
    },
    {
        "content": "<p>How so? Can you elaborate a bit? <span aria-label=\"confused\" class=\"emoji emoji-1f615\" role=\"img\" title=\"confused\">:confused:</span></p>",
        "id": 394932768,
        "sender_full_name": "Utensil Song",
        "timestamp": 1696463799
    },
    {
        "content": "<p>Observing <a href=\"https://cbirkbeck.github.io/FltRegulartest/doc/Mathlib/Algebra/Group/Defs.html#AddCommMonoid\">https://cbirkbeck.github.io/FltRegulartest/doc/Mathlib/Algebra/Group/Defs.html#AddCommMonoid</a> it seems linking is possible, just need to place the generated Mathlib doc at the right place (EDIT: already so)</p>",
        "id": 394935526,
        "sender_full_name": "Utensil Song",
        "timestamp": 1696465847
    },
    {
        "content": "<p>I can ge this fixed in the minimal example when I'm back. The same applies to Std etc.</p>",
        "id": 394935708,
        "sender_full_name": "Utensil Song",
        "timestamp": 1696465951
    },
    {
        "content": "<p>And it seems just a little tweak can make find work too</p>",
        "id": 394936687,
        "sender_full_name": "Utensil Song",
        "timestamp": 1696466500
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"296911\">Utensil Song</span> <a href=\"#narrow/stream/113488-general/topic/Lean.204.20project.20blueprint/near/394932010\">said</a>:</p>\n<blockquote>\n<blockquote>\n<p>If you have multiple libraries you want to generate documentation for the recommended way right now is to run it for each library.</p>\n</blockquote>\n<p>From doc-gen4 README. But do they link together? I'll have to experiment this the day after tomorrow as I'm out hiking again today and tomorrow.</p>\n<p>Has anyone get this to work? From FLT's doc, it can't jump to something in Mathlib, e.g. AddCommMonoid from <a href=\"https://cbirkbeck.github.io/FltRegulartest/doc/FltRegular/ReadyForMathlib/Homogenization.html\">https://cbirkbeck.github.io/FltRegulartest/doc/FltRegular/ReadyForMathlib/Homogenization.html</a> nor can it be found using find</p>\n</blockquote>\n<p>You just run</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">lake</span> <span class=\"n\">build</span> <span class=\"n\">Std</span><span class=\"o\">:</span><span class=\"n\">docs</span> <span class=\"n\">Mathlib</span><span class=\"o\">:</span><span class=\"n\">docs</span> <span class=\"n\">Whatever</span><span class=\"o\">:</span><span class=\"n\">docs</span>\n</code></pre></div>\n<p>and it figures the linking out for you, you only have to copy paste the <code>doc</code> folder somewhere and done</p>",
        "id": 394977685,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1696489561
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"395550\">Henrik Böving</span> <a href=\"#narrow/stream/113488-general/topic/Lean.204.20project.20blueprint/near/394977685\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"296911\">Utensil Song</span> <a href=\"#narrow/stream/113488-general/topic/Lean.204.20project.20blueprint/near/394932010\">said</a>:</p>\n<blockquote>\n<blockquote>\n<p>If you have multiple libraries you want to generate documentation for the recommended way right now is to run it for each library.</p>\n</blockquote>\n<p>From doc-gen4 README. But do they link together? I'll have to experiment this the day after tomorrow as I'm out hiking again today and tomorrow.</p>\n<p>Has anyone get this to work? From FLT's doc, it can't jump to something in Mathlib, e.g. AddCommMonoid from <a href=\"https://cbirkbeck.github.io/FltRegulartest/doc/FltRegular/ReadyForMathlib/Homogenization.html\">https://cbirkbeck.github.io/FltRegulartest/doc/FltRegular/ReadyForMathlib/Homogenization.html</a> nor can it be found using find</p>\n</blockquote>\n<p>You just run</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">lake</span> <span class=\"n\">build</span> <span class=\"n\">Std</span><span class=\"o\">:</span><span class=\"n\">docs</span> <span class=\"n\">Mathlib</span><span class=\"o\">:</span><span class=\"n\">docs</span> <span class=\"n\">Whatever</span><span class=\"o\">:</span><span class=\"n\">docs</span>\n</code></pre></div>\n<p>and it figures the linking out for you, you only have to copy paste the <code>doc</code> folder somewhere and done</p>\n</blockquote>\n<p>Ahn nice! I'll try doing this then. Thanks!</p>",
        "id": 394987794,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1696493855
    },
    {
        "content": "<p>Ok I tried doing this on the github workflow (i.e. ran <code> ~/.elan/bin/lake -Kenv=dev build Std:docs Mathlib:docs FltRegular:docs</code>), but it seems to take a very long time (which is maybe not suprising?) and then fails giving the message <code>System.IO.IOException: No space left on device</code>. It seems to be making the doc for all of mathlib instead of just the ones I need for the repo. Am I doing something wrong?</p>",
        "id": 395078326,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1696522880
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"389019\">@Chris Birkbeck</span> I've tried this locally, the link and find seems to work. </p>\n<p>I'll try doing this in CI with the help from <a href=\"https://github.com/jlumbroso/free-disk-space\">https://github.com/jlumbroso/free-disk-space</a> .</p>",
        "id": 395368751,
        "sender_full_name": "Utensil Song",
        "timestamp": 1696652276
    },
    {
        "content": "<p>doc-gen4 seems to be smart enough to pick up all declarations generated by previous <code>lake Whatever:docs</code> runs under <code>build/doc/declarations</code>, index them into one <code>declaration-data.bmp</code> (~32MB with mathlib etc.), not only the last run. That's why find works in this case. Related source code: <code>htmlOutputIndex</code> in <a href=\"https://github.com/leanprover/doc-gen4/blob/main/DocGen4/Output.lean\">DocGen4.Output</a>. So no tweak required at all.</p>",
        "id": 395370518,
        "sender_full_name": "Utensil Song",
        "timestamp": 1696653507
    },
    {
        "content": "<p>It takes 1h19m to run <code>lake build Mathlib:docs Whatever:docs</code> in CI, barely acceptable. For now, it can be accelerated by caching Mathlib docs for the commit. But indeed we need a way to only build the doc for the part that is used.</p>",
        "id": 395378369,
        "sender_full_name": "Utensil Song",
        "timestamp": 1696659479
    },
    {
        "content": "<p>My 1h35m CI failed with:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"bp\">/</span><span class=\"n\">usr</span><span class=\"bp\">/</span><span class=\"n\">bin</span><span class=\"bp\">/</span><span class=\"n\">git</span> <span class=\"n\">push</span> <span class=\"n\">origin</span> <span class=\"n\">gh</span><span class=\"bp\">-</span><span class=\"n\">pages</span>\n  <span class=\"n\">remote</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">Trace</span><span class=\"o\">:</span> <span class=\"n\">bdbeb905b93ebbfade683a8bd626cf4d052ac40891b9622c6f33a00dcb598006</span>\n  <span class=\"n\">remote</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">See</span> <span class=\"n\">https</span><span class=\"o\">:</span><span class=\"bp\">//</span><span class=\"n\">gh.io</span><span class=\"bp\">/</span><span class=\"n\">lfs</span> <span class=\"n\">for</span> <span class=\"n\">more</span> <span class=\"n\">information.</span>\n  <span class=\"n\">remote</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">File</span> <span class=\"n\">doc</span><span class=\"bp\">/</span><span class=\"n\">declarations</span><span class=\"bp\">/</span><span class=\"n\">header</span><span class=\"bp\">-</span><span class=\"n\">data.bmp</span> <span class=\"n\">is</span> <span class=\"mi\">449</span><span class=\"bp\">.</span><span class=\"mi\">71</span> <span class=\"n\">MB</span><span class=\"bp\">;</span> <span class=\"n\">this</span> <span class=\"n\">exceeds</span> <span class=\"n\">GitHub's</span> <span class=\"n\">file</span> <span class=\"n\">size</span> <span class=\"n\">limit</span> <span class=\"n\">of</span> <span class=\"mi\">100</span><span class=\"bp\">.</span><span class=\"mi\">00</span> <span class=\"n\">MB</span>\n  <span class=\"n\">remote</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">GH001</span><span class=\"o\">:</span> <span class=\"n\">Large</span> <span class=\"n\">files</span> <span class=\"n\">detected.</span> <span class=\"n\">You</span> <span class=\"n\">may</span> <span class=\"n\">want</span> <span class=\"n\">to</span> <span class=\"n\">try</span> <span class=\"n\">Git</span> <span class=\"n\">Large</span> <span class=\"n\">File</span> <span class=\"n\">Storage</span> <span class=\"bp\">-</span> <span class=\"n\">https</span><span class=\"o\">:</span><span class=\"bp\">//</span><span class=\"n\">git</span><span class=\"bp\">-</span><span class=\"n\">lfs.github.com.</span>\n  <span class=\"n\">To</span> <span class=\"n\">https</span><span class=\"o\">:</span><span class=\"bp\">//</span><span class=\"n\">github.com</span><span class=\"bp\">/</span><span class=\"n\">utensil</span><span class=\"bp\">/</span><span class=\"n\">LeanBlueprintExample.git</span>\n   <span class=\"bp\">!</span> <span class=\"o\">[</span><span class=\"n\">remote</span> <span class=\"n\">rejected</span><span class=\"o\">]</span> <span class=\"n\">gh</span><span class=\"bp\">-</span><span class=\"n\">pages</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">gh</span><span class=\"bp\">-</span><span class=\"n\">pages</span> <span class=\"o\">(</span><span class=\"n\">pre</span><span class=\"bp\">-</span><span class=\"n\">receive</span> <span class=\"n\">hook</span> <span class=\"n\">declined</span><span class=\"o\">)</span>\n  <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">push</span> <span class=\"n\">some</span> <span class=\"n\">refs</span> <span class=\"n\">to</span> <span class=\"bp\">'</span><span class=\"n\">https</span><span class=\"o\">:</span><span class=\"bp\">//</span><span class=\"n\">github.com</span><span class=\"bp\">/</span><span class=\"n\">utensil</span><span class=\"bp\">/</span><span class=\"n\">LeanBlueprintExample.git'</span>\n  <span class=\"n\">Error</span><span class=\"o\">:</span> <span class=\"n\">Action</span> <span class=\"n\">failed</span> <span class=\"k\">with</span> <span class=\"s2\">\"The process '/usr/bin/git' failed with exit code 1\"</span>\n</code></pre></div>\n<p>so using gh-pages is probably no longer a good idea, should use <code>actions/deploy-pages</code> directly instead.</p>",
        "id": 395390372,
        "sender_full_name": "Utensil Song",
        "timestamp": 1696666923
    },
    {
        "content": "<p>I've hacked doc-gen4 locally, it seems that I only need to bypass the following lines in <code>DocGen4.Process.process</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>    <span class=\"k\">if</span> <span class=\"bp\">!</span><span class=\"n\">relevantModules.contains</span> <span class=\"n\">moduleName</span> <span class=\"k\">then</span>\n      <span class=\"n\">continue</span>\n</code></pre></div>\n<p>and change it to:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>    <span class=\"k\">if</span> <span class=\"bp\">!</span><span class=\"n\">relevantModules.contains</span> <span class=\"n\">moduleName</span> <span class=\"bp\">&amp;&amp;</span> <span class=\"bp\">!</span><span class=\"n\">moduleName.toString.startsWith</span> <span class=\"s2\">\"Mathlib\"</span> <span class=\"k\">then</span>\n      <span class=\"c1\">-- println! \"Skipping {name} because it is not in the relevant modules\"</span>\n      <span class=\"n\">continue</span>\n</code></pre></div>\n<p>then I can generate the part of Mathlib that this package has actually imported by <code>Whatever</code> when running <code>lake build Whatever:docs</code>. This can reduce the document size and build time significantly (before: 487M, after: 223M, for minimal example that imported <code>Mathlib.Tactic</code> which is already a big import).</p>",
        "id": 395419747,
        "sender_full_name": "Utensil Song",
        "timestamp": 1696685167
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"395550\">@Henrik Böving</span>  As it's technically feasible, is it desired for doc-gen4 to generate imported part of Mathlib for a math project (with an addtional flag)?</p>\n<p>IMHO, a math project is better to host the exact version of Mathlib it uses, but only the part it uses instead of the whole Mathlib which might contain totally unrelated math branches. I estimate this should be able to reduce the size/build time to 1/3 or less, as a math project is likely only depend on that much of human math.</p>",
        "id": 395420749,
        "sender_full_name": "Utensil Song",
        "timestamp": 1696685896
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"296911\">Utensil Song</span> <a href=\"#narrow/stream/113488-general/topic/Lean.204.20project.20blueprint/near/395370518\">said</a>:</p>\n<blockquote>\n<p>doc-gen4 seems to be smart enough to pick up all declarations generated by previous <code>lake Whatever:docs</code> runs under <code>build/doc/declarations</code>, index them into one <code>declaration-data.bmp</code> (~32MB with mathlib etc.), not only the last run. That's why find works in this case. Related source code: <code>htmlOutputIndex</code> in <a href=\"https://github.com/leanprover/doc-gen4/blob/main/DocGen4/Output.lean\">DocGen4.Output</a>. So no tweak required at all.</p>\n</blockquote>\n<p>This is phenomenon is a combination of lake knowing when to build what and doc-gen just using the stuff that is already there without thinking, doc-gen itself is not actually aware of the fact what is going on, it is merely instructed by lake to generate documentation for this and that module if lake deems that necessary.</p>\n<p><span class=\"user-mention silent\" data-user-id=\"296911\">Utensil Song</span> <a href=\"#narrow/stream/113488-general/topic/Lean.204.20project.20blueprint/near/395390372\">said</a>:</p>\n<blockquote>\n<p>My 1h35m CI failed with:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"bp\">/</span><span class=\"n\">usr</span><span class=\"bp\">/</span><span class=\"n\">bin</span><span class=\"bp\">/</span><span class=\"n\">git</span> <span class=\"n\">push</span> <span class=\"n\">origin</span> <span class=\"n\">gh</span><span class=\"bp\">-</span><span class=\"n\">pages</span>\n  <span class=\"n\">remote</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">Trace</span><span class=\"o\">:</span> <span class=\"n\">bdbeb905b93ebbfade683a8bd626cf4d052ac40891b9622c6f33a00dcb598006</span>\n  <span class=\"n\">remote</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">See</span> <span class=\"n\">https</span><span class=\"o\">:</span><span class=\"bp\">//</span><span class=\"n\">gh.io</span><span class=\"bp\">/</span><span class=\"n\">lfs</span> <span class=\"n\">for</span> <span class=\"n\">more</span> <span class=\"n\">information.</span>\n  <span class=\"n\">remote</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">File</span> <span class=\"n\">doc</span><span class=\"bp\">/</span><span class=\"n\">declarations</span><span class=\"bp\">/</span><span class=\"n\">header</span><span class=\"bp\">-</span><span class=\"n\">data.bmp</span> <span class=\"n\">is</span> <span class=\"mi\">449</span><span class=\"bp\">.</span><span class=\"mi\">71</span> <span class=\"n\">MB</span><span class=\"bp\">;</span> <span class=\"n\">this</span> <span class=\"n\">exceeds</span> <span class=\"n\">GitHub's</span> <span class=\"n\">file</span> <span class=\"n\">size</span> <span class=\"n\">limit</span> <span class=\"n\">of</span> <span class=\"mi\">100</span><span class=\"bp\">.</span><span class=\"mi\">00</span> <span class=\"n\">MB</span>\n  <span class=\"n\">remote</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">GH001</span><span class=\"o\">:</span> <span class=\"n\">Large</span> <span class=\"n\">files</span> <span class=\"n\">detected.</span> <span class=\"n\">You</span> <span class=\"n\">may</span> <span class=\"n\">want</span> <span class=\"n\">to</span> <span class=\"n\">try</span> <span class=\"n\">Git</span> <span class=\"n\">Large</span> <span class=\"n\">File</span> <span class=\"n\">Storage</span> <span class=\"bp\">-</span> <span class=\"n\">https</span><span class=\"o\">:</span><span class=\"bp\">//</span><span class=\"n\">git</span><span class=\"bp\">-</span><span class=\"n\">lfs.github.com.</span>\n  <span class=\"n\">To</span> <span class=\"n\">https</span><span class=\"o\">:</span><span class=\"bp\">//</span><span class=\"n\">github.com</span><span class=\"bp\">/</span><span class=\"n\">utensil</span><span class=\"bp\">/</span><span class=\"n\">LeanBlueprintExample.git</span>\n   <span class=\"bp\">!</span> <span class=\"o\">[</span><span class=\"n\">remote</span> <span class=\"n\">rejected</span><span class=\"o\">]</span> <span class=\"n\">gh</span><span class=\"bp\">-</span><span class=\"n\">pages</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">gh</span><span class=\"bp\">-</span><span class=\"n\">pages</span> <span class=\"o\">(</span><span class=\"n\">pre</span><span class=\"bp\">-</span><span class=\"n\">receive</span> <span class=\"n\">hook</span> <span class=\"n\">declined</span><span class=\"o\">)</span>\n  <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">push</span> <span class=\"n\">some</span> <span class=\"n\">refs</span> <span class=\"n\">to</span> <span class=\"bp\">'</span><span class=\"n\">https</span><span class=\"o\">:</span><span class=\"bp\">//</span><span class=\"n\">github.com</span><span class=\"bp\">/</span><span class=\"n\">utensil</span><span class=\"bp\">/</span><span class=\"n\">LeanBlueprintExample.git'</span>\n  <span class=\"n\">Error</span><span class=\"o\">:</span> <span class=\"n\">Action</span> <span class=\"n\">failed</span> <span class=\"k\">with</span> <span class=\"s2\">\"The process '/usr/bin/git' failed with exit code 1\"</span>\n</code></pre></div>\n<p>so using gh-pages is probably no longer a good idea, should use <code>actions/deploy-pages</code> directly instead.</p>\n</blockquote>\n<p>These issues are solved in the mathlib4_docs repo</p>\n<p><span class=\"user-mention silent\" data-user-id=\"296911\">Utensil Song</span> <a href=\"#narrow/stream/113488-general/topic/Lean.204.20project.20blueprint/near/395420749\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"395550\">Henrik Böving</span>  As it's technically feasible, is it desired for doc-gen4 to generate imported part of Mathlib for a math project (with an addtional flag)?</p>\n<p>IMHO, a math project is better to host the exact version of Mathlib it uses, but only the part it uses instead of the whole Mathlib which might contain totally unrelated math branches. I estimate this should be able to reduce the size/build time to 1/3 or less, as a math project is likely only depend on that much of human math.</p>\n</blockquote>\n<p>Right now doc-gen is simply instructed by lake on what modules to build docs for and just does that. It is not intended for a doc-gen task for one module to build documentation for others due to two reasons:<br>\na) races with other lake tasks. Say you give lake two things that rely on some shared files in mathlib and use this discovery mechanism. You end up doing the same documentation computation twice for no reason.<br>\nb) this reduces parallelism drastically (this was the main motivator to use lake instead of orchestrating the build process on its own in this \"dynamically discover what to do fashion\" which was the previous implementation)<br>\nRegarding the parallelism, if you check the mathlib4_docs actions you will see that due to the large amount of cores that we have on these machines generating documentation for mathlib4 + all of its dependencies + core is a thing of just 20 minutes. If we fall back to this discovering mechanism we would in fact end up having worse run time compared to the current mechanism the larger of a mathlib fragment you depend on.</p>\n<p>Which is not to say that the idea of only building the stuff you need is necessarily invalid, but it should not be part of doc-gen itself to decide on what to build in order to keep making use of maximum parallelism.</p>",
        "id": 395422011,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1696686753
    },
    {
        "content": "<p>Oh and another comment/idea, the Mathlib import graph always seemed very densely connected to me from the pictures but you only did a benchmark using <code>Mathlib.Tactic</code> which is a mostly self contained meta programming part. How big are the savings that you get through this mechanism if you actually try to look at the transitive closure of some files that a mathematics interested consumer would import? So for example besides Mathlib.Tactic also import some important group theory/analysis/graph theory w/e</p>",
        "id": 395422344,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1696687002
    },
    {
        "content": "<blockquote>\n<p>These issues are solved in the mathlib4_docs repo</p>\n</blockquote>\n<p>Thanks, I'll check out mathlib4_docs's solution. Previously I thought these are just issues that can be mitigated, the crucial issue is to figure out the imported part so I went straight looking for a solution to do so. As I guess that the relevant code (to find the locations of all imported declarations) is already in doc-gen4, so porting the old decls from mathlibtools would not make sense, I went straight to the doc-gen4 source.</p>\n<blockquote>\n<p>It is not intended for a doc-gen task for one module to build documentation for others due to two reasons</p>\n</blockquote>\n<p>Thanks for the explanations, I understand these two reasons, and they make perfect sense for Mathlib itself, but for projects of small to medium size that depends on Mathlib, they are very irrelevant: </p>\n<ul>\n<li>issue a is less a problem due to the significantly lower complexities</li>\n<li>issue b: these project will have to use a low core free Github Actions runner, but can't afford a long CI runtime (of course this can be mitigated by running the Mathlib build nightly then cache the result, and the project only bumps to cached mathlib docs, so push/pr CI of the project itself can have a short run time); also there are simple technical solutions to increase parallelism or avoid duplications on the end of doc-gen4</li>\n</ul>\n<p>That said, as now the design decision has already been made to move these responsibilities to lake, and it's more efficient for Mathlib this way, I can see that it's not desired to go back to the \"discover\" design for doc-gen4, nor adding a flag to do so. For now I'll choose to only mitigate the CI run time issue.</p>",
        "id": 395424927,
        "sender_full_name": "Utensil Song",
        "timestamp": 1696688802
    },
    {
        "content": "<blockquote>\n<p>How big are the savings that you get through this mechanism if you actually try to look at the transitive closure of some files that a mathematics interested consumer would import? So for example besides Mathlib.Tactic also import some important group theory/analysis/graph theory w/e</p>\n</blockquote>\n<p>I assume more saving for a normal math project that use exact import for what it wants, as I know tactics imports quite some group theory/analysis/graph theory etc. I was trying <span class=\"user-mention\" data-user-id=\"389019\">@Chris Birkbeck</span> 's <a href=\"https://github.com/CBirkbeck/ModularForms_Lean4/\">https://github.com/CBirkbeck/ModularForms_Lean4/</a>, but it's only partly ported to Lean 4, so I don't have an actual figure yet.</p>\n<p>If we push this thought experiment further, when Lean has solved its transitive import issues ( A -&gt; B.b1 -&gt; C.c1 but Lean pulls all of A, B, C), this could be a much significant saving, compared to parallelism savings which, I might argue, are only time savings not computation power savings.</p>",
        "id": 395425493,
        "sender_full_name": "Utensil Song",
        "timestamp": 1696689162
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"296911\">Utensil Song</span> <a href=\"#narrow/stream/113488-general/topic/Lean.204.20project.20blueprint/near/395368751\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"389019\">Chris Birkbeck</span> I've tried this locally, the link and find seems to work. </p>\n<p>I'll try doing this in CI with the help from <a href=\"https://github.com/jlumbroso/free-disk-space\">https://github.com/jlumbroso/free-disk-space</a> .</p>\n</blockquote>\n<p>Ok nice, I'll try this locally as well then.</p>",
        "id": 395426756,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1696690044
    },
    {
        "content": "<p>I think the stuff in <a href=\"https://github.com/CBirkbeck/ModularForms_Lean4/\">https://github.com/CBirkbeck/ModularForms_Lean4/</a> is all in ported to lean 4, but has some new stuff in progress that need doing before starting to PRing. Maybe looking at the FTL regular repo <a href=\"https://github.com/leanprover-community/flt-regular\">here</a> might be more useful (there is a mathlib 4 branch containing the ported files)</p>",
        "id": 395426950,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1696690198
    },
    {
        "content": "<blockquote>\n<p>These issues are solved in the mathlib4_docs repo</p>\n</blockquote>\n<p>The solution at <a href=\"https://github.com/leanprover-community/mathlib4_docs/blob/main/.github/workflows/docs.yaml\">https://github.com/leanprover-community/mathlib4_docs/blob/main/.github/workflows/docs.yaml</a> is an easy fix for the bmp file size issue, but the build time is only solved with more powerful runner <span aria-label=\"joy\" class=\"emoji emoji-1f602\" role=\"img\" title=\"joy\">:joy:</span></p>",
        "id": 395427077,
        "sender_full_name": "Utensil Song",
        "timestamp": 1696690281
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"389019\">Chris Birkbeck</span> <a href=\"#narrow/stream/113488-general/topic/Lean.204.20project.20blueprint/near/395426950\">said</a>:</p>\n<blockquote>\n<p>I think the stuff in <a href=\"https://github.com/CBirkbeck/ModularForms_Lean4/\">https://github.com/CBirkbeck/ModularForms_Lean4/</a> is all in ported to lean 4, but some I have some new stuff in progress that need doing before starting to PRing. Maybe looking at the FTL regular repo <a href=\"https://github.com/leanprover-community/flt-regular\">here</a> might be more useful (there is a mathlib 4 branch containing the ported files)</p>\n</blockquote>\n<p>It seems that things under <code>Modformsported/ForMathlib/EisensteinSeries</code> are not ported yet.</p>",
        "id": 395427413,
        "sender_full_name": "Utensil Song",
        "timestamp": 1696690510
    },
    {
        "content": "<p>Hmm ok maybe I'm not sure what you mean by ported. All the code is in lean 4 right? but it has some things in progress which still have (or should have!) sorries</p>",
        "id": 395427689,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1696690734
    },
    {
        "content": "<p>In any case, the FLT repo is more stable at the moment, if that helps :)</p>",
        "id": 395427741,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1696690781
    },
    {
        "content": "<p>Thanks, I'll check FLT instead for now.</p>",
        "id": 395429126,
        "sender_full_name": "Utensil Song",
        "timestamp": 1696691718
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"296911\">Utensil Song</span> <a href=\"#narrow/stream/113488-general/topic/Lean.204.20project.20blueprint/near/395424927\">said</a>:</p>\n<blockquote>\n<blockquote>\n<p>These issues are solved in the mathlib4_docs repo</p>\n</blockquote>\n<p>Thanks, I'll check out mathlib4_docs's solution. Previously I thought these are just issues that can be mitigated, the crucial issue is to figure out the imported part so I went straight looking for a solution to do so. As I guess that the relevant code (to find the locations of all imported declarations) is already in doc-gen4, so porting the old decls from mathlibtools would not make sense, I went straight to the doc-gen4 source.</p>\n<blockquote>\n<p>It is not intended for a doc-gen task for one module to build documentation for others due to two reasons</p>\n</blockquote>\n<p>Thanks for the explanations, I understand these two reasons, and they make perfect sense for Mathlib itself, but for projects of small to medium size that depends on Mathlib, they are very irrelevant: </p>\n<ul>\n<li>issue a is less a problem due to the significantly lower complexities</li>\n<li>issue b: these project will have to use a low core free Github Actions runner, but can't afford a long CI runtime (of course this can be mitigated by running the Mathlib build nightly then cache the result, and the project only bumps to cached mathlib docs, so push/pr CI of the project itself can have a short run time); also there are simple technical solutions to increase parallelism or avoid duplications on the end of doc-gen4</li>\n</ul>\n<p>That said, as now the design decision has already been made to move these responsibilities to lake, and it's more efficient for Mathlib this way, I can see that it's not desired to go back to the \"discover\" design for doc-gen4, nor adding a flag to do so. For now I'll choose to only mitigate the CI run time issue.</p>\n</blockquote>\n<p>I would hope that we can teach the facet that doc-gen uses to build things (refer to doc-gens lakefile.lean for the implementation) about this \"only build the stuff you need feature\" somehow. My basic idea here would be like this: If we are in the <code>module_facet</code> of some module somehow get access to the dependency tree of our current module and request the doc facet to be built for all the imported modules in addition as well. This would effectively mimic the \"discover\" approach without the drawbacks that it has when doing this directly in doc-gen. But my lake-facet-fu is not sufficient to implement this. <span class=\"user-mention\" data-user-id=\"315577\">@Mac Malone</span> is what I am dreaming up here possible?</p>",
        "id": 395429873,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1696692206
    },
    {
        "content": "<p>That seems reasonable, doc-gen4 do the lite discovering, lake orchestrates the heavy lifting.</p>",
        "id": 395433954,
        "sender_full_name": "Utensil Song",
        "timestamp": 1696695174
    },
    {
        "content": "<p>A message was moved from this topic to <a class=\"stream-topic\" data-stream-id=\"113489\" href=\"/#narrow/stream/113489-new-members/topic/Help.20declaring.20Huntington.20postulates\">#new members &gt; Help declaring Huntington postulates</a> by <span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span>.</p>",
        "id": 395438258,
        "sender_full_name": "Notification Bot",
        "timestamp": 1696699173
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"395550\">Henrik Böving</span> <a href=\"#narrow/stream/113488-general/topic/Lean.204.20project.20blueprint/near/395429873\">said</a>:</p>\n<blockquote>\n<p>My basic idea here would be like this: If we are in the <code>module_facet</code> of some module somehow get access to the dependency tree of our current module and request the doc facet to be built for all the imported modules in addition as well. This would effectively mimic the \"discover\" approach without the drawbacks that it has when doing this directly in doc-gen. But my lake-facet-fu is not sufficient to implement this. <span class=\"user-mention silent\" data-user-id=\"315577\">Mac Malone</span> is what I am dreaming up here possible?</p>\n</blockquote>\n<p>Yes! After all, Lake needs to do this to a build a module's dependency tree in the first place. <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span>  The <code>mod.imports.fetch</code> will provide the ordered set of imports of  the module (as an Array). You can then loop through these and call <code>fetch &lt;| mod.facet `docs</code> to recursively generate the docs of the dependency tree.</p>",
        "id": 395438384,
        "sender_full_name": "Mac Malone",
        "timestamp": 1696699279
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"315577\">@Mac Malone</span> do I also get imports like <code>Init</code> and <code>Lean</code> in this thing? Or do I need to keep this job that always build the compiler documentation extra and is pulled in by every module job? My result so far indicate the latter.</p>",
        "id": 395445059,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1696705114
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"296911\">@Utensil Song</span> <a href=\"https://github.com/leanprover/doc-gen4/commit/fa8c9d771aa6a06e25468c92b049fecc3e482b99\">https://github.com/leanprover/doc-gen4/commit/fa8c9d771aa6a06e25468c92b049fecc3e482b99</a> When running <code>lake build DocGen4:docs</code> this also generates docs for all of the doc-gen4 deps, does it work for you as well?</p>",
        "id": 395446459,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1696705992
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"395550\">Henrik Böving</span> <a href=\"#narrow/stream/113488-general/topic/Lean.204.20project.20blueprint/near/395445059\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"315577\">Mac Malone</span> do I also get imports like <code>Init</code> and <code>Lean</code> in this thing? Or do I need to keep this job that always build the compiler documentation extra and is pulled in by every module job? My result so far indicate the latter.</p>\n</blockquote>\n<p>You are correct. <code>Init</code> and <code>Lean</code> are will note be caught by this because they are not proper modules in Lake.</p>",
        "id": 395446983,
        "sender_full_name": "Mac Malone",
        "timestamp": 1696706186
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"395550\">@Henrik Böving</span> <span class=\"user-mention\" data-user-id=\"315577\">@Mac Malone</span>  Amazing ! Thank you both, I'm giving it a try now.</p>",
        "id": 395475091,
        "sender_full_name": "Utensil Song",
        "timestamp": 1696729925
    },
    {
        "content": "<p>Cool, now doc build time is significantly reduced: <a href=\"https://github.com/utensil/LeanBlueprintExample/actions/runs/6445074155/job/17498727240\">1h19m ⇒ 28m</a> for LeanBlueprintExample only importing <code>Mathlib.Tactic</code>, and <a href=\"https://github.com/utensil/FltRegulartest/actions/runs/6445063349/job/17498703521\">1h12m ⇒ 37m</a> for FltRegular with actual mathematically interesting imports.</p>",
        "id": 395489084,
        "sender_full_name": "Utensil Song",
        "timestamp": 1696739990
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"389019\">@Chris Birkbeck</span> You can directly use my adjusted code at <a href=\"https://github.com/CBirkbeck/FltRegulartest/pull/1\">the PR here</a></p>",
        "id": 395489691,
        "sender_full_name": "Utensil Song",
        "timestamp": 1696740458
    },
    {
        "content": "<p>Or is the reduced build time partially caused by <a href=\"https://github.com/leanprover/doc-gen4/commit/fa8c9d771aa6a06e25468c92b049fecc3e482b99#r129427912\">https://github.com/leanprover/doc-gen4/commit/fa8c9d771aa6a06e25468c92b049fecc3e482b99#r129427912</a> ?</p>",
        "id": 395489879,
        "sender_full_name": "Utensil Song",
        "timestamp": 1696740588
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"296911\">@Utensil Song</span> I am not exactly sure what happens to jobs that are not waited on. I think they may be killed when Lake terminates but I am not certain. One way to check if that is the causes is to look through the generated docs and see if anything is missing / partially complete.</p>",
        "id": 395497865,
        "sender_full_name": "Mac Malone",
        "timestamp": 1696746126
    },
    {
        "content": "<p>I sample-walkthrough <a href=\"https://utensil.github.io/LeanBlueprintExample/doc//Mathlib/Tactic/Ring.html\">https://utensil.github.io/LeanBlueprintExample/doc//Mathlib/Tactic/Ring.html</a> (EDIT: and <a href=\"https://utensil.github.io/FltRegulartest/doc/FltRegular/FltRegular.html\">https://utensil.github.io/FltRegulartest/doc/FltRegular/FltRegular.html</a> ) and their imports, seems not missing anything. So maybe it's not terminated prematurely.</p>\n<p><del>But when I check <a href=\"https://utensil.github.io/FltRegulartest/blueprint/\">https://utensil.github.io/FltRegulartest/blueprint/</a> and <a href=\"https://utensil.github.io/FltRegulartest/doc/\">https://utensil.github.io/FltRegulartest/doc/</a> , mathlib doc is not there, I'm still investigating why. It uses exactly the same approach.</del>(EDIT: because <code>\\dochome</code> is still pointing to cbirkbeck's pages)</p>",
        "id": 395500140,
        "sender_full_name": "Utensil Song",
        "timestamp": 1696747854
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"395550\">@Henrik Böving</span>  I wonder if doc for theorems can be improved, showing <code>Prop</code> is not really helpful:</p>\n<p><a href=\"/user_uploads/3121/L4604LMtrorGORSo03WiwM8B/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/L4604LMtrorGORSo03WiwM8B/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/L4604LMtrorGORSo03WiwM8B/image.png\"></a></div><p>Is it possible to show the Lean statement for the Prop? It's quite readable:</p>\n<p><a href=\"/user_uploads/3121/00Qmeo00Wu-D8t63-01ntcj-/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/00Qmeo00Wu-D8t63-01ntcj-/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/00Qmeo00Wu-D8t63-01ntcj-/image.png\"></a></div>",
        "id": 395501241,
        "sender_full_name": "Utensil Song",
        "timestamp": 1696748698
    },
    {
        "content": "<p>Weird, other theorems seem to be doing fine:</p>\n<p><a href=\"/user_uploads/3121/3mut2RecfRN8Kpu-8fNBKWhZ/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/3mut2RecfRN8Kpu-8fNBKWhZ/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/3mut2RecfRN8Kpu-8fNBKWhZ/image.png\"></a></div><p>just not Fermat's last theorem <span aria-label=\"joy\" class=\"emoji emoji-1f602\" role=\"img\" title=\"joy\">:joy:</span></p>",
        "id": 395503741,
        "sender_full_name": "Utensil Song",
        "timestamp": 1696750584
    },
    {
        "content": "<p>Oh, I see, it has special treatment for <code>theorem</code>s, but not theorems defined by <code>def</code>.</p>",
        "id": 395503960,
        "sender_full_name": "Utensil Song",
        "timestamp": 1696750702
    },
    {
        "content": "<p>Yeah, it's not a <code>theorem</code>, it's a <code>def</code>. We used to be able to expand the definition of a <code>def</code> in the docs. But now we can't. It's a shame.</p>",
        "id": 395504119,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1696750818
    },
    {
        "content": "<p>Has anyone filed an issue about that?</p>",
        "id": 395505619,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1696751548
    },
    {
        "content": "<p>No, I searched issues with <code>def</code>, <code>theorem</code>, <code>Prop</code>, no result. Filing one.</p>",
        "id": 395506629,
        "sender_full_name": "Utensil Song",
        "timestamp": 1696752192
    },
    {
        "content": "<p>I think it's fixable by adding a branch for <code>DocGen4.Process.DocInfo.ofConstant</code> or <code>DocGen4.Process.DefinitionInfo.ofDefinitionVal</code>.</p>",
        "id": 395506808,
        "sender_full_name": "Utensil Song",
        "timestamp": 1696752294
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/doc-gen4/issues/155\">https://github.com/leanprover/doc-gen4/issues/155</a></p>",
        "id": 395510031,
        "sender_full_name": "Utensil Song",
        "timestamp": 1696754106
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/113488-general/topic/Lean.204.20project.20blueprint/near/395504119\">said</a>:</p>\n<blockquote>\n<p>Yeah, it's not a <code>theorem</code>, it's a <code>def</code>. We used to be able to expand the definition of a <code>def</code> in the docs. But now we can't. It's a shame.</p>\n</blockquote>\n<p>I had gotten rid of the feature to just expand definitions because for the majority of definitions I looked at it just produces unreadable garbage. But I guess I just look at programming definitions too much :D Added it back</p>",
        "id": 395517805,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1696757909
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"315577\">Mac Malone</span> <a href=\"#narrow/stream/113488-general/topic/Lean.204.20project.20blueprint/near/395497865\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"296911\">Utensil Song</span> I am not exactly sure what happens to jobs that are not waited on. I think they may be killed when Lake terminates but I am not certain. One way to check if that is the causes is to look through the generated docs and see if anything is missing / partially complete.</p>\n</blockquote>\n<p>And I fixed this but now I am a bit unsure. This does not accurately reflect the dependency graph anymore. If module A imports module B that does not mean I need to regenerate documentation for A if B changes, it only means I need to run the indexing again after I built B's doc...is there a way to reflect this as well?</p>",
        "id": 395518065,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1696758003
    },
    {
        "content": "<p>Deployed on mathlib4_docs now again</p>",
        "id": 395522843,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1696759524
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"296911\">Utensil Song</span> <a href=\"#narrow/stream/113488-general/topic/Lean.204.20project.20blueprint/near/395489691\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"389019\">Chris Birkbeck</span> You can directly use my adjusted code at <a href=\"https://github.com/CBirkbeck/FltRegulartest/pull/1\">the PR here</a></p>\n</blockquote>\n<p>Ah amazing, thank you! I've merged the PR now and will wait to see what come out after the workflow runs :)</p>",
        "id": 395528041,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1696761711
    },
    {
        "content": "<p>Ah you need to wait a bit</p>",
        "id": 395528576,
        "sender_full_name": "Utensil Song",
        "timestamp": 1696761899
    },
    {
        "content": "<p>I need to update doc-gen4 in it again</p>",
        "id": 395528612,
        "sender_full_name": "Utensil Song",
        "timestamp": 1696761911
    },
    {
        "content": "<p>Oh ok no worries :)</p>",
        "id": 395528657,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1696761933
    },
    {
        "content": "<p>to include the new fixes, particularly for the FLT <code>def</code></p>",
        "id": 395528826,
        "sender_full_name": "Utensil Song",
        "timestamp": 1696761988
    },
    {
        "content": "<p>I invited you to the repo in case that helps at all</p>",
        "id": 395528871,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1696762008
    },
    {
        "content": "<p>Re-PRed <span aria-label=\"handshake\" class=\"emoji emoji-1f91d\" role=\"img\" title=\"handshake\">:handshake:</span></p>",
        "id": 395529293,
        "sender_full_name": "Utensil Song",
        "timestamp": 1696762192
    },
    {
        "content": "<p>You may want to cancel the previous workflow to wait on the one after this merge</p>",
        "id": 395529402,
        "sender_full_name": "Utensil Song",
        "timestamp": 1696762224
    },
    {
        "content": "<p>Oh, the proposition is now shown in Equations, is there a reason or a background? Like when would it have multiple equations?</p>",
        "id": 395535147,
        "sender_full_name": "Utensil Song",
        "timestamp": 1696766449
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span> Is this what you expected?</p>",
        "id": 395535226,
        "sender_full_name": "Utensil Song",
        "timestamp": 1696766513
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/_HA83s6_aKCqQi7zuHcr3Apy/D1BF4B48-A111-42DC-9DF6-A6C51BB00520.jpg\">D1BF4B48-A111-42DC-9DF6-A6C51BB00520.jpg</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/_HA83s6_aKCqQi7zuHcr3Apy/D1BF4B48-A111-42DC-9DF6-A6C51BB00520.jpg\" title=\"D1BF4B48-A111-42DC-9DF6-A6C51BB00520.jpg\"><img src=\"/user_uploads/3121/_HA83s6_aKCqQi7zuHcr3Apy/D1BF4B48-A111-42DC-9DF6-A6C51BB00520.jpg\"></a></div>",
        "id": 395535287,
        "sender_full_name": "Utensil Song",
        "timestamp": 1696766533
    },
    {
        "content": "<p>Yes, why?</p>",
        "id": 395535297,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1696766546
    },
    {
        "content": "<p>It would have multiple equations if it were defined by pattern-matching, eg <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=List.length#doc\">docs#List.length</a></p>",
        "id": 395535336,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1696766588
    },
    {
        "content": "<p>Ah yes</p>",
        "id": 395535350,
        "sender_full_name": "Utensil Song",
        "timestamp": 1696766604
    },
    {
        "content": "<p>I guess showing equations is indeed better than showing raw pattern matching, the rationale is less obvious for a single definition</p>",
        "id": 395535498,
        "sender_full_name": "Utensil Song",
        "timestamp": 1696766721
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"389019\">@Chris Birkbeck</span> Hi, I merged my PR yesterday and the CI failed to deploy to Github Pages, the new workflow requires configuringthe settings, changing it from deploying from a branch <code>gh-pages</code> to deploy directly from the actions, the official guide is <a href=\"https://docs.github.com/en/pages/getting-started-with-github-pages/configuring-a-publishing-source-for-your-github-pages-site#publishing-with-a-custom-github-actions-workflow\">Publishing with a custom GitHub Actions workflow</a> and I've updated the example README to reflect this.</p>\n<p>Sorry I only checked the Pages build on my fork then went to work on other stuff and didn't realize this.</p>",
        "id": 395601579,
        "sender_full_name": "Utensil Song",
        "timestamp": 1696818855
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"296911\">@Utensil Song</span> I just pushed a doc-gen4 commit that pushes the doc-gen time from ~17min to ~9min on the mathlib4_docs runner, might wanna try your thing again^^</p>",
        "id": 395637926,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1696837336
    },
    {
        "content": "<p>OK no problem, I updated the setting to deploy from actions.</p>",
        "id": 395641585,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1696838766
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"395550\">Henrik Böving</span> <a href=\"#narrow/stream/113488-general/topic/Lean.204.20project.20blueprint/near/395637926\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"296911\">Utensil Song</span> I just pushed a doc-gen4 commit that pushes the doc-gen time from ~17min to ~9min on the mathlib4_docs runner, might wanna try your thing again^^</p>\n</blockquote>\n<p>Fantastic! I'll try it now.</p>",
        "id": 395642331,
        "sender_full_name": "Utensil Song",
        "timestamp": 1696839076
    },
    {
        "content": "<p>By the way, today I was trying to add <code>--ink</code> flag to the <code>single</code> command like the reverse modification of <a href=\"https://github.com/leanprover/doc-gen4/commit/9af4c720f08e9c694e574fc35cf59b385be47175\">https://github.com/leanprover/doc-gen4/commit/9af4c720f08e9c694e574fc35cf59b385be47175</a> and I got the panic when running this command</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">[</span><span class=\"mi\">620</span><span class=\"bp\">/</span><span class=\"mi\">2525</span><span class=\"o\">]</span> <span class=\"n\">Documenting</span> <span class=\"n\">module</span><span class=\"o\">:</span> <span class=\"n\">Qq.ForLean.ReduceEval</span>\n<span class=\"n\">LEAN_PATH</span><span class=\"bp\">=./</span><span class=\"n\">lake</span><span class=\"bp\">-</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">std</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">lib</span><span class=\"o\">:</span><span class=\"bp\">./</span><span class=\"n\">lake</span><span class=\"bp\">-</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">Qq</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">lib</span><span class=\"o\">:</span><span class=\"bp\">./</span><span class=\"n\">lake</span><span class=\"bp\">-</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">aesop</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">lib</span><span class=\"o\">:</span><span class=\"bp\">./</span><span class=\"n\">lake</span><span class=\"bp\">-</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">Cli</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">lib</span><span class=\"o\">:</span><span class=\"bp\">./</span><span class=\"n\">lake</span><span class=\"bp\">-</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">proofwidgets</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">lib</span><span class=\"o\">:</span><span class=\"bp\">./</span><span class=\"n\">lake</span><span class=\"bp\">-</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">mathlib</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">lib</span><span class=\"o\">:</span><span class=\"bp\">./</span><span class=\"n\">lake</span><span class=\"bp\">-</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">CMark</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">lib</span><span class=\"o\">:</span><span class=\"bp\">./</span><span class=\"n\">lake</span><span class=\"bp\">-</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">lean4</span><span class=\"bp\">-</span><span class=\"n\">unicode</span><span class=\"bp\">-</span><span class=\"n\">basic</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">lib</span><span class=\"o\">:</span><span class=\"bp\">./</span><span class=\"n\">lake</span><span class=\"bp\">-</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">leanInk</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">lib</span><span class=\"o\">:</span><span class=\"bp\">./</span><span class=\"n\">lake</span><span class=\"bp\">-</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">doc</span><span class=\"bp\">-</span><span class=\"n\">gen4</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">lib</span><span class=\"o\">:</span><span class=\"bp\">./</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">lib</span><span class=\"o\">:</span><span class=\"bp\">/</span><span class=\"n\">Users</span><span class=\"bp\">/</span><span class=\"n\">utensil</span><span class=\"bp\">/.</span><span class=\"n\">elan</span><span class=\"bp\">/</span><span class=\"n\">toolchains</span><span class=\"bp\">/</span><span class=\"n\">leanprover</span><span class=\"c1\">--lean4---v4.2.0-rc1/lib/lean lldb ./lake-packages/doc-gen4/build/bin/doc-gen4 -- single Qq.ForLean.ReduceEval --ink</span>\n<span class=\"n\">INTERNAL</span> <span class=\"n\">PANIC</span><span class=\"o\">:</span> <span class=\"n\">out</span> <span class=\"n\">of</span> <span class=\"n\">memory</span>\n</code></pre></div>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>LLDB bt result</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<p>(lldb) bt<br>\n* thread <a href=\"https://github.com/leanprover-community/mathlib4/pull/1\">#1</a>, queue = 'com.apple.main-thread', stop reason = EXC_BAD_ACCESS (code=1, address=0x0)<br>\n  * frame <a href=\"https://github.com/leanprover-community/mathlib4/pull/0\">#0</a>: 0x000000010270bee8 doc-gen4<code>lean_decode_io_error + 668\n    frame #1: 0x000000010270bc6c doc-gen4</code>lean_decode_io_error + 32<br>\n    frame <a href=\"https://github.com/leanprover-community/mathlib4/pull/2\">#2</a>: 0x0000000102710a70 doc-gen4<code>lean_io_process_child_wait + 108\n    frame #3: 0x0000000100480820 doc-gen4</code>l_IO_Process_output + 3040<br>\n    frame <a href=\"https://github.com/leanprover-community/mathlib4/pull/4\">#4</a>: 0x000000010282258c doc-gen4<code>l_Lake_findLeanSysroot_x3f + 92\n    frame #5: 0x0000000102825068 doc-gen4</code>l_Lake_findLeanInstall_x3f___lambda__1 + 28<br>\n    frame <a href=\"https://github.com/leanprover-community/mathlib4/pull/6\">#6</a>: 0x0000000102825c34 doc-gen4<code>l_Lake_findLeanInstall_x3f___lambda__1___boxed + 20\n    frame #7: 0x00000001026f7a9c doc-gen4</code>lean_apply_2 + 380<br>\n    frame <a href=\"https://github.com/leanprover-community/mathlib4/pull/8\">#8</a>: 0x0000000102826d10 doc-gen4<code>l_Lake_findInstall_x3f + 584\n    frame #9: 0x0000000100035e78 doc-gen4</code>l_DocGen4_lakeSetup + 24<br>\n    frame <a href=\"https://github.com/leanprover-community/mathlib4/pull/10\">#10</a>: 0x0000000100001170 doc-gen4`l_runSingleCmd + 144</p>\n</div></div>\n<p>which seems quite innocent, is this similar to the weird panic you mentioned in the commit log?</p>",
        "id": 395643376,
        "sender_full_name": "Utensil Song",
        "timestamp": 1696839458
    },
    {
        "content": "<p>No the panics were coming from LeanInk itself, I would not expect a panic to occur at this position</p>",
        "id": 395644420,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1696839784
    },
    {
        "content": "<p>OK, so this is something different, maybe only related to Mac M1, I'll try this on Ubuntu later.</p>",
        "id": 395644776,
        "sender_full_name": "Utensil Song",
        "timestamp": 1696839893
    },
    {
        "content": "<p>Blazing fast: 187.18s for a local doc build</p>",
        "id": 395644859,
        "sender_full_name": "Utensil Song",
        "timestamp": 1696839917
    },
    {
        "content": "<p>I'm in general surprised that this would panic only wiht --ink as this code path should definitely not be influenced  by the flag. Either way this code path is removed in the new version as it doesn't talk with lake anymore from within DocGen</p>",
        "id": 395644962,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1696839958
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"296911\">Utensil Song</span> <a href=\"#narrow/stream/113488-general/topic/Lean.204.20project.20blueprint/near/395644859\">said</a>:</p>\n<blockquote>\n<p>Blazing fast: 187.18s for a local doc build</p>\n</blockquote>\n<p>what was the base line?</p>",
        "id": 395645045,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1696839977
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"395550\">Henrik Böving</span> <a href=\"#narrow/stream/113488-general/topic/Lean.204.20project.20blueprint/near/395644962\">said</a>:</p>\n<blockquote>\n<p>I'm in general surprised that this would panic only wiht --ink as this code path should definitely not be influenced  by the flag. Either way this code path is removed in the new version as it doesn't talk with lake anymore from within DocGen</p>\n</blockquote>\n<p>I've just noticed that the same panic also appear in the old doc-gen4 normal build (i.e. w/o <code>--ink</code>), it just won't terminate the whole process and proceed to other modules.</p>",
        "id": 395646119,
        "sender_full_name": "Utensil Song",
        "timestamp": 1696840330
    },
    {
        "content": "<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>It looks like this</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<p>[1028/3509] Documenting module: Qq.ForLean.ReduceEval<br>\n[1028/3509] Documenting module: Qq.ForLean.ToExpr<br>\n[1028/3509] Documenting module: Qq.Typ<br>\n[1031/3509] Documenting module: Mathlib.Lean.Linter<br>\n[1031/3509] Documenting module: Std.WF<br>\n[1034/3509] Documenting module: Std.Lean.InfoTree<br>\n[1036/3509] Documenting module: Std.Data.DList<br>\n[1036/3509] Documenting module: Std.Data.MLList.Basic<br>\nerror: &gt; LEAN_PATH=./lake-packages/std/build/lib:./lake-packages/Qq/build/lib:./lake-packages/aesop/build/lib:./lake-packages/Cli/build/lib:./lake-packages/proofwidgets/build/lib:./lake-packages/mathlib/build/lib:./lake-packages/CMark/build/lib:./lake-packages/lean4-unicode-basic/build/lib:./lake-packages/leanInk/build/lib:./lake-packages/doc-gen4/build/lib:./build/lib:/Users/utensil/.elan/toolchains/leanprover--lean4---v4.2.0-rc1/lib/lean ./lake-packages/doc-gen4/build/bin/doc-gen4 single Qq.ForLean.ReduceEval<br>\nerror: stderr:<br>\nINTERNAL PANIC: out of memory<br>\nerror: external command <code>./lake-packages/doc-gen4/build/bin/doc-gen4</code> exited with code 1<br>\n[1036/3509] Documenting module: Std.Lean.CoreM<br>\n[1036/3509] Documenting module: Std.Data.Prod.Lex<br>\n[1040/3509] Documenting module: Std.Lean.HashMap</p>\n</div></div>",
        "id": 395646226,
        "sender_full_name": "Utensil Song",
        "timestamp": 1696840375
    },
    {
        "content": "<p><del>and yes, I just read the code diff in the latest commit and the whole related code are gone</del></p>\n<p>EDIT: The same error is still there for normal doc build without <code>--ink</code>.</p>",
        "id": 395646318,
        "sender_full_name": "Utensil Song",
        "timestamp": 1696840406
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"395550\">Henrik Böving</span> <a href=\"#narrow/stream/113488-general/topic/Lean.204.20project.20blueprint/near/395645045\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"296911\">Utensil Song</span> <a href=\"#narrow/stream/113488-general/topic/Lean.204.20project.20blueprint/near/395644859\">said</a>:</p>\n<blockquote>\n<p>Blazing fast: 187.18s for a local doc build</p>\n</blockquote>\n<p>what was the base line?</p>\n</blockquote>\n<p>380.59s for commit 402cfda104da78727a4ead99992abe638b8c14ef</p>",
        "id": 395646483,
        "sender_full_name": "Utensil Song",
        "timestamp": 1696840450
    },
    {
        "content": "<p>418.96s → 231.37s for a full <code>lake -R -Kenv=dev build Mathlib:docs</code></p>",
        "id": 395649703,
        "sender_full_name": "Utensil Song",
        "timestamp": 1696841611
    },
    {
        "content": "<p>The PANIC issue is still there, but if I try to minimalize it to build docs for Qq as a standalone project, the PANIC is gone</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">quote4</span> <span class=\"bp\">%</span> <span class=\"kn\">export</span> <span class=\"n\">LEAN_HOME</span><span class=\"bp\">=~/.</span><span class=\"n\">elan</span><span class=\"bp\">/</span><span class=\"n\">toolchains</span><span class=\"bp\">/</span><span class=\"n\">leanprover</span><span class=\"c1\">--lean4---v4.2.0-rc1</span>\n<span class=\"n\">ELAN_HOME</span><span class=\"bp\">=~/.</span><span class=\"n\">elan</span> <span class=\"n\">ELAN_TOOLCHAIN</span><span class=\"bp\">=</span><span class=\"n\">leanprover</span><span class=\"bp\">/</span><span class=\"n\">lean4</span><span class=\"o\">:</span><span class=\"n\">v4.2.0</span><span class=\"bp\">-</span><span class=\"n\">rc1</span> <span class=\"n\">LAKE</span><span class=\"bp\">=$</span><span class=\"n\">LEAN_HOME</span><span class=\"bp\">/</span><span class=\"n\">bin</span><span class=\"bp\">/</span><span class=\"n\">lake</span> <span class=\"n\">LAKE_HOME</span><span class=\"bp\">=$</span><span class=\"n\">LEAN_HOME</span> <span class=\"n\">LEAN_SYSROOT</span><span class=\"bp\">=$</span><span class=\"n\">LEAN_HOME</span> <span class=\"n\">LEAN_AR</span><span class=\"bp\">=$</span><span class=\"n\">LEAN_HOME</span><span class=\"bp\">/</span><span class=\"n\">bin</span><span class=\"bp\">/</span><span class=\"n\">llvm</span><span class=\"bp\">-</span><span class=\"n\">ar</span> <span class=\"n\">LEAN_CC</span><span class=\"bp\">=</span> <span class=\"n\">LEAN_PATH</span><span class=\"bp\">=./</span><span class=\"n\">lake</span><span class=\"bp\">-</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">Cli</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">lib</span><span class=\"o\">:</span><span class=\"bp\">./</span><span class=\"n\">lake</span><span class=\"bp\">-</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">CMark</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">lib</span><span class=\"o\">:</span><span class=\"bp\">./</span><span class=\"n\">lake</span><span class=\"bp\">-</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">lean4</span><span class=\"bp\">-</span><span class=\"n\">unicode</span><span class=\"bp\">-</span><span class=\"n\">basic</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">lib</span><span class=\"o\">:</span><span class=\"bp\">./</span><span class=\"n\">lake</span><span class=\"bp\">-</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">leanInk</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">lib</span><span class=\"o\">:</span><span class=\"bp\">./</span><span class=\"n\">lake</span><span class=\"bp\">-</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">doc</span><span class=\"bp\">-</span><span class=\"n\">gen4</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">lib</span><span class=\"o\">:</span><span class=\"bp\">./</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">lib</span><span class=\"o\">:</span><span class=\"bp\">$</span><span class=\"n\">LEAN_HOME</span><span class=\"bp\">/</span><span class=\"n\">lib</span><span class=\"bp\">/</span><span class=\"n\">lean</span> <span class=\"n\">LEAN_SRC_PATH</span><span class=\"bp\">=./</span><span class=\"n\">lake</span><span class=\"bp\">-</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">Cli</span><span class=\"bp\">/./.</span><span class=\"o\">:</span><span class=\"bp\">./</span><span class=\"n\">lake</span><span class=\"bp\">-</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">CMark</span><span class=\"bp\">/./.</span><span class=\"o\">:</span><span class=\"bp\">./</span><span class=\"n\">lake</span><span class=\"bp\">-</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">lean4</span><span class=\"bp\">-</span><span class=\"n\">unicode</span><span class=\"bp\">-</span><span class=\"n\">basic</span><span class=\"bp\">/./.</span><span class=\"o\">:</span><span class=\"bp\">./</span><span class=\"n\">lake</span><span class=\"bp\">-</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">leanInk</span><span class=\"bp\">/./.</span><span class=\"o\">:</span><span class=\"bp\">./</span><span class=\"n\">lake</span><span class=\"bp\">-</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">doc</span><span class=\"bp\">-</span><span class=\"n\">gen4</span><span class=\"bp\">/./.</span><span class=\"o\">:</span><span class=\"bp\">././.</span><span class=\"o\">:</span><span class=\"bp\">$</span><span class=\"n\">LEAN_HOME</span><span class=\"bp\">/</span><span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">lean</span><span class=\"bp\">/</span><span class=\"n\">lake</span> <span class=\"n\">DYLD_LIBRARY_PATH</span><span class=\"bp\">=./</span><span class=\"n\">lake</span><span class=\"bp\">-</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">std</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">lib</span><span class=\"o\">:</span><span class=\"bp\">./</span><span class=\"n\">lake</span><span class=\"bp\">-</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">Cli</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">lib</span><span class=\"o\">:</span><span class=\"bp\">./</span><span class=\"n\">lake</span><span class=\"bp\">-</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">CMark</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">lib</span><span class=\"o\">:</span><span class=\"bp\">./</span><span class=\"n\">lake</span><span class=\"bp\">-</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">lean4</span><span class=\"bp\">-</span><span class=\"n\">unicode</span><span class=\"bp\">-</span><span class=\"n\">basic</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">lib</span><span class=\"o\">:</span><span class=\"bp\">./</span><span class=\"n\">lake</span><span class=\"bp\">-</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">leanInk</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">lib</span><span class=\"o\">:</span><span class=\"bp\">./</span><span class=\"n\">lake</span><span class=\"bp\">-</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">doc</span><span class=\"bp\">-</span><span class=\"n\">gen4</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">lib</span><span class=\"o\">:</span><span class=\"bp\">./</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">lib</span><span class=\"o\">:</span><span class=\"bp\">$</span><span class=\"n\">LEAN_HOME</span><span class=\"bp\">/</span><span class=\"n\">lib</span><span class=\"bp\">/</span><span class=\"n\">lean</span><span class=\"o\">:</span><span class=\"bp\">$</span><span class=\"n\">LEAN_HOME</span><span class=\"bp\">/</span><span class=\"n\">lib</span> <span class=\"bp\">./</span><span class=\"n\">lake</span><span class=\"bp\">-</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">doc</span><span class=\"bp\">-</span><span class=\"n\">gen4</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">bin</span><span class=\"bp\">/</span><span class=\"n\">doc</span><span class=\"bp\">-</span><span class=\"n\">gen4</span> <span class=\"n\">single</span> <span class=\"n\">Qq.ForLean.ReduceEval</span> <span class=\"n\">https</span><span class=\"o\">:</span><span class=\"bp\">//</span><span class=\"n\">github.com</span><span class=\"bp\">/</span><span class=\"n\">gebner</span><span class=\"bp\">/</span><span class=\"n\">quote4</span><span class=\"bp\">/</span><span class=\"n\">blob</span><span class=\"bp\">/</span><span class=\"n\">a387c0eb611857e2460cf97a8e861c944286e6b2</span><span class=\"bp\">//</span><span class=\"n\">Qq</span><span class=\"bp\">/</span><span class=\"n\">ForLean</span><span class=\"bp\">/</span><span class=\"n\">ReduceEval.lean</span>\n</code></pre></div>\n<p>It runs fine.</p>",
        "id": 395653554,
        "sender_full_name": "Utensil Song",
        "timestamp": 1696842900
    },
    {
        "content": "<p>The github action seems to be breaking again, with the same error msg I had before <code>System.IO.IOException: No space left on device... </code>.  I don't think I've changed anything in the action, all I did was add more maths to the latex file.</p>",
        "id": 395844785,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1696931001
    },
    {
        "content": "<p>Did I maybe need to first run something locally?</p>",
        "id": 395845313,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1696931192
    },
    {
        "content": "<p>Weird, I'll check it now.</p>",
        "id": 395887231,
        "sender_full_name": "Utensil Song",
        "timestamp": 1696945574
    },
    {
        "content": "<p>I'm trying a new run <a href=\"https://github.com/utensil/FltRegulartest/actions/runs/6472017541\">here</a> which will free disk space <del>and install only <code>texlive-latex-extra</code> (<a href=\"https://tex.stackexchange.com/a/504566/75671\">ref</a> )</del></p>",
        "id": 395887583,
        "sender_full_name": "Utensil Song",
        "timestamp": 1696945681
    },
    {
        "content": "<p>It's green now, PRed and merged.</p>",
        "id": 395936423,
        "sender_full_name": "Utensil Song",
        "timestamp": 1696962218
    },
    {
        "content": "<p>Ok great!  thank you :) what was the problem?</p>",
        "id": 396034596,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1697012277
    },
    {
        "content": "<p>The main source of problem is the full installation of TeXLive. I tried using a less large installation <code>texlive-latex-extra</code> (<a href=\"https://tex.stackexchange.com/a/504566/75671\">ref</a> ) but it doesn't include xelatex. So I only mitigate the issue by deleting unnecessary stuff in the container images of a default Github runner with the help from <a href=\"https://github.com/jlumbroso/free-disk-space\">https://github.com/jlumbroso/free-disk-space</a> which I thought I did it for your repo but only my example repo.</p>",
        "id": 396040302,
        "sender_full_name": "Utensil Song",
        "timestamp": 1697014355
    },
    {
        "content": "<p>My personal blueprint CI uses less traditional TeX toolchain <a href=\"https://tectonic-typesetting.github.io/en-US/\">tectonic</a> which is rewritten in Rust, and incrementally download what is needed during compiling a LaTeX document from TeXLive distribution.</p>\n<p>It's much smaller and haven't failed me for compatibility yet, so I'm free of this disk space issue. You can check the <code>bp</code> task in my <code>task.py</code> <a href=\"https://github.com/utensil/lean-ga/blob/blueprint/tasks.py\">here</a> and its setup in CI <a href=\"https://github.com/utensil/lean-ga/blob/d0d793aec6bbe797308d6b1a5deb02e5ee4e96fa/.github/workflows/lean_build.yml#L80-L97\">here</a>.</p>",
        "id": 396041585,
        "sender_full_name": "Utensil Song",
        "timestamp": 1697014831
    },
    {
        "content": "<p>Another way to avoid this is to use <a href=\"https://github.com/CBirkbeck/ModularForms/blob/485be39051a18198eb89764e5c43990386717e20/.github/workflows/build.yml#L183-L196\">your old method</a>, run <code>xu-cheng/texlive-action/full@v1</code> which doesn't occupy your disk space, but the downside is to use <code>apk</code> instead of <code>apt</code> to install dependencies. Although I have done this before, I was too lazy and less motivated to use it (and fix potential compatibilitiy issues) when I made the example.</p>",
        "id": 396042168,
        "sender_full_name": "Utensil Song",
        "timestamp": 1697015012
    },
    {
        "content": "<p>Although depending on doc-gen4 minimized the implementation of blueprint, and it becomes more loosely couple to Lean (You may ask: why would some one want blueprint to be loosely coupled with Lean? Because it's indeed a good fit for formalization, even for pen-and-paper, that's why there was a <a href=\"https://github.com/PatrickMassot/leanblueprint/issues/4\">noleanblueprint</a>), and I'm comfortable with the solution, I still wish to parse Lean 4 and provide information to blueprint (although optionally this time), the main gain would be directly list the related Lean code in the blueprint.</p>\n<p>But there are quite some issues (e.g. evaluate if it's a good idea, what the code should look like, is it like the expaned version of doc-gen4? How to pull in the depended code? How to handle line-by-line comments inside the proof? Is <span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> 's <a href=\"#narrow/stream/113488-general/topic/learn.20maths.20with.20lean/near/390713720\">informal Lean</a> <a href=\"#narrow/stream/284757-job-postings/topic/Lean.20job.20in.20Orsay/near/280802739\">project</a> coming out recently? ) to address before this, so this would come later on my TODO list.</p>",
        "id": 396044518,
        "sender_full_name": "Utensil Song",
        "timestamp": 1697015788
    },
    {
        "content": "<p>Aha I see, thank you for the explanation and for getting it working again!</p>",
        "id": 396048090,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1697016957
    },
    {
        "content": "<p>Informal Lean isn't really making progress currently. We are too busy with other things. I know I also need to find time for the blueprint thing. But days aren't long enough.</p>",
        "id": 396081314,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1697028342
    },
    {
        "content": "<p>How would you imagine the blueprint for Lean 4 if you have time to work on it?</p>",
        "id": 396082903,
        "sender_full_name": "Utensil Song",
        "timestamp": 1697028858
    },
    {
        "content": "<p>The first target is to uncouple Lean and the graph generating stuff as much as possible. Then there is a bit of Lean meta-programming to do to get access to file position information for all declaration and then the python part must be adjusted.</p>",
        "id": 396086389,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1697030010
    },
    {
        "content": "<p>I thought graph generating stuff doesn't  depend on lean now. As for the Lean meta-programming code <code>decls</code>, similar code exists in doc-gen4, I hesitate to make a <a href=\"#narrow/stream/270676-lean4/topic/get.20filename.20.2B.20pos/near/396236501\">less maintained duplicate</a> without additional gain.</p>",
        "id": 396089722,
        "sender_full_name": "Utensil Song",
        "timestamp": 1697031057
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"296911\">Utensil Song</span> <a href=\"#narrow/stream/113488-general/topic/Lean.204.20project.20blueprint/near/395646226\">said</a>:</p>\n<blockquote>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>It looks like this</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<p>[1028/3509] Documenting module: Qq.ForLean.ReduceEval<br>\n[1028/3509] Documenting module: Qq.ForLean.ToExpr<br>\n[1028/3509] Documenting module: Qq.Typ<br>\n[1031/3509] Documenting module: Mathlib.Lean.Linter<br>\n[1031/3509] Documenting module: Std.WF<br>\n[1034/3509] Documenting module: Std.Lean.InfoTree<br>\n[1036/3509] Documenting module: Std.Data.DList<br>\n[1036/3509] Documenting module: Std.Data.MLList.Basic<br>\nerror: &gt; LEAN_PATH=./lake-packages/std/build/lib:./lake-packages/Qq/build/lib:./lake-packages/aesop/build/lib:./lake-packages/Cli/build/lib:./lake-packages/proofwidgets/build/lib:./lake-packages/mathlib/build/lib:./lake-packages/CMark/build/lib:./lake-packages/lean4-unicode-basic/build/lib:./lake-packages/leanInk/build/lib:./lake-packages/doc-gen4/build/lib:./build/lib:/Users/utensil/.elan/toolchains/leanprover--lean4---v4.2.0-rc1/lib/lean ./lake-packages/doc-gen4/build/bin/doc-gen4 single Qq.ForLean.ReduceEval<br>\nerror: stderr:<br>\nINTERNAL PANIC: out of memory<br>\nerror: external command <code>./lake-packages/doc-gen4/build/bin/doc-gen4</code> exited with code 1<br>\n[1036/3509] Documenting module: Std.Lean.CoreM<br>\n[1036/3509] Documenting module: Std.Data.Prod.Lex<br>\n[1040/3509] Documenting module: Std.Lean.HashMap</p>\n<p></div></div><br>\n</p>\n</blockquote>\n<p>Did you manage to fix this? I'm getting the exact same error when I run this locally to generate docs for a project that depends on mathlib.</p>",
        "id": 396313857,
        "sender_full_name": "Ramon Fernández Mir",
        "timestamp": 1697124729
    },
    {
        "content": "<p>For now, it does not interfere with normal doc gen without <code>--ink</code>, just a log, and failure to generate it for <code>Qq.ForLean.ReduceEval</code> so I haven't look into it yet.</p>",
        "id": 396315920,
        "sender_full_name": "Utensil Song",
        "timestamp": 1697125335
    },
    {
        "content": "<p>The coverage report seems to be broken, it's not linked from home, and the generated html doesn't render properly, this can be confirmed for:</p>\n<ul>\n<li><a href=\"https://leanprover-community.github.io/liquid/coverage.html\">The liquid tensor experiment blueprint</a></li>\n<li><a href=\"https://CBirkbeck.github.io/FltRegulartest/blueprint/coverage.html\">FltRegulartest</a></li>\n</ul>\n<p>The best rendered ones are</p>\n<ul>\n<li><a href=\"https://b-mehta.github.io/unit-fractions/blueprint/coverage.html\">unit-fractions</a></li>\n<li><a href=\"https://leanprover-community.github.io/sphere-eversion/blueprint/coverage.html\">sphere-eversion</a></li>\n</ul>\n<p>Will look into it later.</p>",
        "id": 396717534,
        "sender_full_name": "Utensil Song",
        "timestamp": 1697347179
    },
    {
        "content": "<p>Indeed I saw very early that this tool wasn't used, people used the graph directly. So I removed the link and then forgot to update the corresponding code when other things changed. The result is this became broken dead code that should be removed.</p>",
        "id": 396756995,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1697378568
    },
    {
        "content": "<p>In fact, <span class=\"user-mention\" data-user-id=\"492774\">@Sky Wilshaw</span> reimplemented something akin to your coverage for Con(NF).</p>",
        "id": 396761940,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1697382594
    },
    {
        "content": "<p>I don't think I remember doing anything like this - I did implement a dynamic sorry counter with markdown and GH actions.</p>",
        "id": 396762207,
        "sender_full_name": "Sky Wilshaw",
        "timestamp": 1697382797
    },
    {
        "content": "<p>The dynamic sorry counter is what I meant.</p>",
        "id": 396762323,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1697382908
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"296911\">Utensil Song</span> <a href=\"#narrow/stream/113488-general/topic/Lean.204.20project.20blueprint/near/396717534\">said</a>:</p>\n<blockquote>\n<p>The coverage report seems to be broken, it's not linked from home, and the generated html doesn't render properly, this can be confirmed for:</p>\n<ul>\n<li><a href=\"https://leanprover-community.github.io/liquid/coverage.html\">The liquid tensor experiment blueprint</a></li>\n<li><a href=\"https://CBirkbeck.github.io/FltRegulartest/blueprint/coverage.html\">FltRegulartest</a></li>\n</ul>\n<p>The best rendered ones are</p>\n<ul>\n<li><a href=\"https://b-mehta.github.io/unit-fractions/blueprint/coverage.html\">unit-fractions</a></li>\n<li><a href=\"https://leanprover-community.github.io/sphere-eversion/blueprint/coverage.html\">sphere-eversion</a></li>\n</ul>\n<p>Will look into it later.</p>\n</blockquote>\n<p>I'll be honest, I had no idea that the coverage page existed for unit-fractions! The only reason it works is because I copied the setup from sphere-eversion</p>",
        "id": 396781106,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1697401482
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"296911\">@Utensil Song</span>, what's the status of the Lean 4 blueprint? Is it usable now?</p>",
        "id": 397963523,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1697999048
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/113488-general/topic/Lean.204.20project.20blueprint/near/397963523\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"296911\">Utensil Song</span>, what's the status of the Lean 4 blueprint? Is it usable now?</p>\n</blockquote>\n<p>It's usable to the extent that</p>\n<ul>\n<li><a href=\"https://github.com/CBirkbeck/FltRegulartest\">https://github.com/CBirkbeck/FltRegulartest</a> is using it, and it works</li>\n<li><a href=\"https://github.com/utensil/LeanBlueprintExample\">https://github.com/utensil/LeanBlueprintExample</a> is there to demonstrate the usage</li>\n<li>I'm using it myself, and made <a href=\"https://github.com/utensil/leanblueprint/compare/lean4-only...utensil:leanblueprint:lean4-only-dev\">some minor improvements</a> to the original PR, so I'm not pinging the PR yet</li>\n</ul>\n<p>As the implementation is so simple, having consistent behaviors with its Lean 3 version, and mostly relying on doc-gen4, I think it will be future-proof to use it. If you run into any issue, I'm happy to assist.</p>",
        "id": 397964364,
        "sender_full_name": "Utensil Song",
        "timestamp": 1698000086
    },
    {
        "content": "<p>I think the problem here is that LeanAPAP contains a lot of tweaks to the CI which I don't want to just throw away.</p>",
        "id": 397964613,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1698000396
    },
    {
        "content": "<p>I'm out of Lean time for today but here's the repo if you want to try it out (and open a PR fixing my beautiful blueprint please <span aria-label=\"pray\" class=\"emoji emoji-1f64f\" role=\"img\" title=\"pray\">:pray:</span>): <a href=\"https://github.com/YaelDillies/LeanAPAP\">https://github.com/YaelDillies/LeanAPAP</a></p>",
        "id": 397964746,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1698000568
    },
    {
        "content": "<p>You don't need to throw away those CI tweaks to use it, just need to incorporate something from the example CI.</p>",
        "id": 397964807,
        "sender_full_name": "Utensil Song",
        "timestamp": 1698000609
    },
    {
        "content": "<p>Yes precisely. But it's not obvious to me what I should incorporate and what I should throw away. You will know, however.</p>",
        "id": 397964838,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1698000667
    },
    {
        "content": "<p>OK, I'll give it a try tomorrow.</p>",
        "id": 397964948,
        "sender_full_name": "Utensil Song",
        "timestamp": 1698000804
    },
    {
        "content": "<p><a href=\"https://github.com/YaelDillies/LeanAPAP/compare/master...utensil:LeanAPAP:master\">https://github.com/YaelDillies/LeanAPAP/compare/master...utensil:LeanAPAP:master</a></p>\n<p>It's pretty much what needs to be incorporated.</p>\n<p>I'm testing this on my Pages, but the build failed due to an undefined <code>\\C</code> in LaTeX, I believe it means <code>\\mathbb {C}</code> but not found in <code>blueprint/src/macros_common.tex</code> etc.</p>\n<p>Here is the build <a href=\"https://github.com/utensil/LeanAPAP/actions/runs/6606975999/job/17943760219\">log</a>. Now I'm testing locally.</p>\n<p>UPDATE: got past the LaTeX compilation, <a href=\"https://github.com/utensil/LeanAPAP/actions/runs/6608623018/job/17947600675\">new error building jekyll</a>: missing <code>sorries.md</code>.  I added an <a href=\"https://github.com/YaelDillies/LeanAPAP/commit/7ed4e366b6cf2314274b7fdeacb879e5fafb8eb4\">ad hoc fix</a>, CI running.</p>\n<p>UPDATE: CI passed, but published to wrong directory due to subtle reasons. Fixed, CI running.</p>",
        "id": 397986742,
        "sender_full_name": "Utensil Song",
        "timestamp": 1698023180
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span> CI passed and blueprint and doc are published to <a href=\"https://utensil.github.io/LeanAPAP/\">https://utensil.github.io/LeanAPAP/</a>.</p>\n<p>Links to <a href=\"https://utensil.github.io/LeanAPAP/blueprint/\">Blueprint</a> or <a href=\"https://utensil.github.io/LeanAPAP/docs/\">Documentation</a> are working, and jumping from blueprint/depgragh to doc is also working (for theorems, because their names are all in lower case, unchanged from Lean 3 to Lean 4).</p>\n<p>Please let me know if you have observed any issues. <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span></p>\n<p>( P.S. Starting from tomorrow, I have a 5-day trip involving hiking in a desert, so it's likely that I can only work on it when I'm back.)</p>",
        "id": 398052467,
        "sender_full_name": "Utensil Song",
        "timestamp": 1698055675
    },
    {
        "content": "<p>CI takes around 26min because I have cached the Mathlib doc. If you change <code>lake-manifest.json</code>, CI would be much longer ( + 15min ) .</p>",
        "id": 398053242,
        "sender_full_name": "Utensil Song",
        "timestamp": 1698055978
    },
    {
        "content": "<p>More info in <a href=\"https://github.com/YaelDillies/LeanAPAP/pull/2\">YaelDillies/LeanAPAP#2</a> , let's continue discussions there.</p>",
        "id": 398056264,
        "sender_full_name": "Utensil Song",
        "timestamp": 1698057270
    }
]