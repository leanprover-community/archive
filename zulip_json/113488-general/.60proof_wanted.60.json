[
    {
        "content": "<p>Just announcing a new feature that has just arrived: you can now write:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">proof_wanted</span> <span class=\"n\">my_result</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span>\n</code></pre></div>\n<p>and this will type check the statement, but then discard the result (so in particular it can't be used in later results).</p>",
        "id": 404557324,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1701153680
    },
    {
        "content": "<p>We are intending to use this to plan additions in the standard library. However Mathlib and downstream projects may find it useful as well, as a safer alternative to committing <code>sorry</code> to repositories.</p>",
        "id": 404557349,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1701153691
    },
    {
        "content": "<p>If you see a <code>proof_wanted</code> statement in a library, please feel free to PR the proof! That's what they are there for. :-)</p>",
        "id": 404557400,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1701153719
    },
    {
        "content": "<p>There's lots of fun tooling around <code>proof_wanted</code> that we'd love to see written as well. Some ideas:</p>\n<ul>\n<li>a code action that turns it into a <code>theorem</code> with <code>:= by sorry</code></li>\n<li>an environment extension that records all the <code>proof_wanted</code>s</li>\n<li>a tool that checks if <code>exact?</code> solves any recorded <code>proof_wanted</code>s</li>\n<li>a tool that posts new <code>proof_wanted</code> statements from projects to a zulip stream ...</li>\n<li>...</li>\n</ul>",
        "id": 404557930,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1701153983
    },
    {
        "content": "<p>As a library maintainer, what this adds is the ability to separate PRs adding API from PRs adding proofs. We will have to work out some kind of policy for how and when to do this. I'm curious to see where mathlib will take it, as it is a new iteration on the \"roadmap\" and \"formal abstracts\" ideas</p>",
        "id": 404558994,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1701154598
    },
    {
        "content": "<p>One consequence of the design of <code>proof_wanted</code> is that because the constants are not added to the environment, you can't stub out a whole theory, only the theorems. (Plus, <code>proof_wanted</code> is also explicitly restricted to <code>Prop</code>.)</p>",
        "id": 404559416,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1701154826
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/8674\">#8674</a> adds five <code>proof_wanted</code>'s to mathlib :)</p>",
        "id": 404589929,
        "sender_full_name": "Dagur Asgeirsson",
        "timestamp": 1701166142
    },
    {
        "content": "<p>Might be interesting to look though mathlib for \"TODO\" comments that could be written like this</p>",
        "id": 404591733,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1701166468
    },
    {
        "content": "<p>Should we make <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=FermatLastTheorem#doc\">docs#FermatLastTheorem</a> <code>proof_wanted</code>? :)</p>",
        "id": 404596891,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1701167535
    },
    {
        "content": "<p>Well then you wouldn't be able to prove that certain cases imply others for example! Or have it show up in docs</p>",
        "id": 404597811,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1701167742
    },
    {
        "content": "<p>We can still add <code>proof_wanted : FermatLastTheorem</code>, for whatever good that will do :)</p>",
        "id": 404598793,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1701167953
    },
    {
        "content": "<p>I am totally confused about how this is any different from <code>sorry</code>. It's just another way of saying <code>sorry</code>, and we're not allowed <code>sorry</code> in mathlib but we're allowed <code>proof_wanted</code>? Why don't we just allow <code>sorry</code>? </p>\n<p>I should add that I can absolutely see a use for this in the FLT project. I'm just confused about its use in mathlib.</p>",
        "id": 404617976,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1701172341
    },
    {
        "content": "<p>It's not a sorry, they're not usable elsewhere. They're a todo with a statement written.</p>",
        "id": 404619322,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1701172653
    },
    {
        "content": "<p>And also the stament written and typechecked to make sure it doesn't rot with mathlib</p>",
        "id": 404619550,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1701172696
    },
    {
        "content": "<p>I guess the typechecking is the main benefit over, say, just a <code>TODO: ....</code> comment. This means that if mathlib has a  <code>proof_wanted : foo 5 = 6</code> and the definition of <code>foo</code> changes for whatever reason, the person who changed it would have to also update the <code>proof_wanted</code> as part of their refactor. </p>\n<p>I do think it would be nice to be able to stub out whole theories. Are there any ideas/plans for making something like that work?</p>",
        "id": 404621491,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1701173262
    },
    {
        "content": "<p><code>proof_wanted</code> doesn't do this <em>yet</em>, but it can run arbitrary code, unlike a TODO. In particular, we can record the <code>proof_wanted</code> for later use (e.g. an automatically generated webpage).</p>",
        "id": 404621703,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1701173346
    },
    {
        "content": "<p>I guess one can write commands that just save and restore the environment, so in between them you can do whatever you like, and it gets rolled back. This is the sort of <code>Environment</code> hacking that <code>lean4checker</code> is meant to inhibit, but it is the benign version!</p>",
        "id": 404622067,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1701173490
    },
    {
        "content": "<p><code>dream</code> and <code>wake</code>?</p>",
        "id": 404622250,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1701173555
    },
    {
        "content": "<p>Also they can be compiled and sorted together in an automatic way - you'd be able to make something like <a href=\"https://github.com/leanprover-community/mathlib4/pull/7987\">#7987</a> automatically</p>",
        "id": 404622281,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1701173568
    },
    {
        "content": "<p>So many evil possibilities. :-)</p>",
        "id": 404622353,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1701173605
    },
    {
        "content": "<p>In fact, maybe one can even stash the contents of a <code>dream</code> / <code>wake</code> session into an extension, so it can be re-entered in a later file ...</p>",
        "id": 404622511,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1701173659
    },
    {
        "content": "<p>Oh, I thought that's what you meant :)</p>",
        "id": 404622550,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1701173677
    },
    {
        "content": "<p>You could have a whole \"dream\" environment where you could stub out whole theories with defs, theorems that depend on these defs, etc., all with no proofs or definitions, and eventually materialize them with proofs in the \"real\" world.</p>",
        "id": 404622723,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1701173752
    },
    {
        "content": "<p>Nested dreams for particularly dangerous sorries that you want to repress...?</p>",
        "id": 404622792,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1701173766
    },
    {
        "content": "<p>I think it would be nice if <code>proof_wanted</code> statements are stored in an environment extension, and a tactic like <code>apply?</code> can find them and give a result back \"I can prove what you want from this unproven result\").</p>",
        "id": 404628320,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1701175690
    },
    {
        "content": "<p>The tactic could be called <code>hallucinate</code> or something.</p>",
        "id": 404631469,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1701176638
    },
    {
        "content": "<p>Another side effect of the current implementation is that although it will check that the theorem name is not already taken, because the theorem is subsequently removed from the environment you can add the same theorem twice. Should <code>proof_wanted</code> act as permanent \"reservations\" in the environment so that you can't overwrite them like this? (Incidentally, I added the notion of reservations to <code>lean4lean</code> to represent the way the (safe) kernel looks at unsafe declarations: they don't count as definitions and error if you use them, but you still can't make another declaration with the name.)</p>",
        "id": 404737161,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1701213912
    },
    {
        "content": "<p>In fact, for stubbing out whole theories, it seems like you might actually want a viral <code>DeclarationSafety</code> marker just like <code>unsafe</code>: <code>dream theorem foo</code> can refer to <code>dream def</code>s but regular theorems act as though they don't exist (but they all live in a shared namespace, no name overlapping is allowed in any direction)</p>",
        "id": 404737633,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1701214159
    },
    {
        "content": "<p>You could even almost exploit <code>unsafe</code> itself for this purpose, except that lean is of the opinion that <code>unsafe theorem</code> is useless and you shouldn't be allowed to write it</p>",
        "id": 404738073,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1701214356
    },
    {
        "content": "<p><code>conjectural theorem foo</code>?<br>\nJust for the record: in informal maths it's not uncommon to have conjectural conjectures.</p>",
        "id": 404789177,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1701237258
    },
    {
        "content": "<p>I can imagine <code>conjectural section</code>; or <code>conjectural theory</code> (in analogy with <code>noncomputable theory</code>) at the top of a file</p>",
        "id": 404789242,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1701237320
    },
    {
        "content": "<p><code>proof_wanted</code> working as planned: <a href=\"https://github.com/leanprover/std4/pull/412\">std4#412</a> is a PR from a first time Std contributor, filling in two <code>proof_wanted</code>s!</p>",
        "id": 405293404,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1701414346
    },
    {
        "content": "<p>Would it make sense to have <code>conjecture</code> as an alias for <code>proof_wanted</code>?</p>",
        "id": 405584444,
        "sender_full_name": "Terence Tao",
        "timestamp": 1701565431
    },
    {
        "content": "<p>As a non-mathematician, I've written many tentative theorems in Lean that turned out wrong. <code>conjecture</code> feels to me more fitting than the slightly presumptuous <code>proof_wanted</code>. My 2¢</p>",
        "id": 405584814,
        "sender_full_name": "Winston Yin (尹維晨)",
        "timestamp": 1701565620
    },
    {
        "content": "<p>Doesn't <code>conjecture</code>  carry a different meaning, as a statement for which a proof of any sort remains unknown to the math community, as opposed to not knowing how to fit a possibly well known proof into lean?</p>",
        "id": 405585409,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1701565943
    },
    {
        "content": "<p>The initial intention for <code>proof_wanted</code> was not for tentative statements or conjectures, but for planning completion of the many lemmas needed to make definitions useful. </p>\n<p>That said, I think downstream projects could usefully make <code>conjecture</code> functionally equivalent to <code>proof_wanted</code>.</p>",
        "id": 405585962,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1701566302
    }
]