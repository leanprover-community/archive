[
    {
        "content": "<p>I'm trying to define regular representation and proving properties.  However, my code is super slow and make it hard to debug:<br>\nHere's a mwe: </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">representation_theory.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">representation_theory.Rep</span>\n<span class=\"kn\">import</span> <span class=\"n\">representation_theory.Action</span>\n<span class=\"kn\">import</span> <span class=\"n\">representation_theory.fdRep</span>\n<span class=\"kn\">import</span> <span class=\"n\">field_theory.is_alg_closed.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">representation_theory.invariants</span>\n<span class=\"kd\">noncomputable theory</span>\n\n<span class=\"kd\">universes</span> <span class=\"n\">u</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">classical</span> <span class=\"n\">big_operators</span> <span class=\"n\">polynomial</span>\n<span class=\"kn\">open</span> <span class=\"n\">representation</span>\n<span class=\"kn\">open</span> <span class=\"n\">fdRep</span>\n\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">k</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">is_alg_closed</span> <span class=\"n\">k</span><span class=\"o\">]</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">invertible</span> <span class=\"o\">(</span><span class=\"n\">fintype.card</span> <span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">k</span><span class=\"o\">)]</span>\n\n<span class=\"kd\">@[class]</span> <span class=\"kd\">instance</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">k</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">module.finite</span> <span class=\"n\">k</span> <span class=\"o\">(</span><span class=\"n\">monoid_algebra</span> <span class=\"n\">k</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">regular_fdrep</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">k</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">representation</span> <span class=\"n\">k</span> <span class=\"n\">G</span> <span class=\"o\">(</span><span class=\"n\">monoid_algebra</span> <span class=\"n\">k</span> <span class=\"n\">G</span><span class=\"o\">):=</span>\n<span class=\"o\">{</span> <span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">,</span> <span class=\"n\">linear_map.mul_left</span> <span class=\"n\">k</span> <span class=\"o\">(</span><span class=\"n\">finsupp.single</span> <span class=\"n\">g</span> <span class=\"mi\">1</span><span class=\"o\">),</span>\n  <span class=\"n\">map_one'</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span><span class=\"o\">{</span><span class=\"n\">tidy</span><span class=\"o\">},</span>\n  <span class=\"n\">map_mul'</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span><span class=\"o\">{</span><span class=\"n\">intros</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">ext</span><span class=\"o\">,</span> <span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"n\">group.mul_assoc</span><span class=\"o\">,</span> <span class=\"n\">refl</span><span class=\"o\">,}</span>\n<span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">regular_basis</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">k</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]:</span> <span class=\"o\">(</span><span class=\"n\">basis</span> <span class=\"n\">G</span> <span class=\"n\">k</span> <span class=\"o\">(</span><span class=\"n\">monoid_algebra</span> <span class=\"n\">k</span> <span class=\"n\">G</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"n\">finsupp.basis_single_one</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">regular_fdrep_act</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span><span class=\"n\">g</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">,</span> <span class=\"o\">((</span><span class=\"n\">regular_fdrep</span> <span class=\"n\">k</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">finsupp.single</span> <span class=\"n\">h</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">finsupp.single</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"bp\">*</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intros</span> <span class=\"n\">g</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"n\">regular_fdrep</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">linear_map.mul_left_apply</span><span class=\"o\">,</span><span class=\"n\">mul_one</span><span class=\"o\">,</span><span class=\"n\">eq_self_iff_true</span><span class=\"o\">,</span><span class=\"n\">monoid_hom.coe_mk</span><span class=\"o\">,</span><span class=\"n\">monoid_algebra.single_mul_single</span><span class=\"o\">],</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">regular_phi_linmap</span>  <span class=\"o\">(</span><span class=\"n\">W</span> <span class=\"o\">:</span> <span class=\"n\">fdRep</span> <span class=\"n\">k</span> <span class=\"n\">G</span><span class=\"o\">)</span>  <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">W</span><span class=\"o\">)</span>  <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">monoid_algebra</span> <span class=\"n\">k</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">k</span><span class=\"o\">]</span> <span class=\"n\">W</span> <span class=\"o\">:=</span>\n<span class=\"o\">((</span><span class=\"n\">regular_basis</span> <span class=\"n\">k</span> <span class=\"n\">G</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">constr</span> <span class=\"n\">k</span> <span class=\"o\">(</span><span class=\"bp\">λ</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">W.ρ</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">v</span><span class=\"o\">))</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">regular_fdrep_of_hom_eq</span> <span class=\"o\">:</span>\n<span class=\"o\">(</span><span class=\"n\">fdRep.of</span> <span class=\"o\">(</span><span class=\"n\">regular_fdrep</span> <span class=\"n\">k</span> <span class=\"n\">G</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">ρ</span> <span class=\"bp\">=</span> <span class=\"n\">regular_fdrep</span> <span class=\"n\">k</span> <span class=\"n\">G</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">refl</span><span class=\"o\">,</span> <span class=\"c1\">-- why is this refl taking so long time?</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">fdRep_assoc_apply</span> <span class=\"o\">(</span><span class=\"n\">W</span> <span class=\"o\">:</span> <span class=\"n\">fdRep</span> <span class=\"n\">k</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">W</span><span class=\"o\">):</span> <span class=\"o\">(</span><span class=\"n\">W.ρ</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">((</span><span class=\"n\">W.ρ</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">W.ρ</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"bp\">*</span> <span class=\"n\">h</span><span class=\"o\">))</span> <span class=\"n\">v</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">simp</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">regular_phi</span> <span class=\"o\">(</span><span class=\"n\">W</span> <span class=\"o\">:</span> <span class=\"n\">fdRep</span> <span class=\"n\">k</span> <span class=\"n\">G</span><span class=\"o\">)</span>  <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">W</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">basis</span> <span class=\"n\">G</span> <span class=\"n\">k</span> <span class=\"o\">(</span><span class=\"n\">monoid_algebra</span> <span class=\"n\">k</span> <span class=\"n\">G</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">fdRep.of</span> <span class=\"o\">(</span><span class=\"n\">regular_fdrep</span> <span class=\"n\">k</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"bp\">⟶</span> <span class=\"n\">W</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">hom</span> <span class=\"o\">:=</span> <span class=\"n\">regular_phi_linmap</span> <span class=\"n\">W</span> <span class=\"n\">v</span><span class=\"o\">,</span>\n  <span class=\"n\">comm'</span> <span class=\"o\">:=</span>\n  <span class=\"kd\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">s</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">fdRep.of_ρ</span><span class=\"o\">],</span>\n  <span class=\"n\">simp_rw</span> <span class=\"n\">category_theory.category_struct.comp</span><span class=\"o\">,</span>\n  <span class=\"n\">ext</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- `simp` here will run timeout</span>\n  <span class=\"n\">simp_rw</span> <span class=\"n\">linear_map.comp_apply</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">finsupp.lsingle_apply</span><span class=\"o\">],</span>\n  <span class=\"n\">rw</span> <span class=\"n\">regular_phi_linmap</span><span class=\"o\">,</span> <span class=\"n\">simp_rw</span> <span class=\"n\">basis.constr_apply</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">linear_map.map_finsupp_sum</span><span class=\"o\">],</span>\n  <span class=\"n\">rw</span> <span class=\"n\">regular_fdrep_act</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">finsupp.sum_fintype</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"n\">finsupp.sum_fintype</span><span class=\"o\">,</span> <span class=\"c1\">-- `simp_rw` or `simp only [finsupp.sum_fintype]` doesn't work here</span>\n  <span class=\"n\">simp_rw</span> <span class=\"n\">map_smul</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- `simp_rw fdRep_assoc_apply` here doesn't work, but after changing goal with `suffices` it works</span>\n  <span class=\"k\">suffices</span> <span class=\"o\">:</span> <span class=\"bp\">∑</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">),</span> <span class=\"o\">(((</span><span class=\"n\">regular_basis</span> <span class=\"n\">k</span> <span class=\"n\">G</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">repr</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">finsupp.single</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"bp\">*</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"n\">i</span> <span class=\"bp\">•</span> <span class=\"o\">((</span><span class=\"n\">W.ρ</span><span class=\"o\">)</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"n\">v</span> <span class=\"bp\">=</span>\n    <span class=\"bp\">∑</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">),</span> <span class=\"o\">(((</span><span class=\"n\">regular_basis</span> <span class=\"n\">k</span> <span class=\"n\">G</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">repr</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">finsupp.single</span> <span class=\"n\">a</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"n\">x</span> <span class=\"bp\">•</span> <span class=\"o\">((</span><span class=\"n\">W.ρ</span><span class=\"o\">)</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">(((</span><span class=\"n\">W.ρ</span><span class=\"o\">)</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">v</span><span class=\"o\">),</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">this</span> <span class=\"o\">},</span>\n  <span class=\"n\">simp_rw</span> <span class=\"n\">fdRep_assoc_apply</span><span class=\"o\">,</span>\n  <span class=\"kd\">end</span><span class=\"o\">,</span>\n<span class=\"o\">}</span>\n</code></pre></div>\n<p>On line 42, the refl is taking 10+ seconds to compute. Also in the proof of <code>regular_phi.comm'</code> , <code>simp</code> often run timeout, and <code>simp_rw</code> often fail to work (or does nothing). I think my approach of doing some categorical stuff might be wrong (or inefficient), is it the issue?</p>",
        "id": 338599834,
        "sender_full_name": "Chiyu Zhou",
        "timestamp": 1677594199
    },
    {
        "content": "<p>Even changing <code>refl</code> to <code>sorry</code> it takes a long time! I feel like people have seen this kind of thing before, but I don't know why it's so slow.</p>",
        "id": 338671532,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1677611835
    },
    {
        "content": "<p>Lean has trouble elaborating the type of the lemma. <br>\nThe computed type of the LHS is <code>G →* ↥(of (regular_fdrep k G)) →ₗ[k] ↥(of (regular_fdrep k G))</code>, and for some reason Lean has a hard time understanding that <code>regular_fdrep k G</code> has this type.<br>\nIf you replace the statement with <code>(fdRep.of (regular_fdrep k G)).ρ = by apply regular_fdrep k G</code>, then it will be instant.</p>",
        "id": 338675210,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1677612964
    },
    {
        "content": "<p>For the <code>simp</code> issue, it's unfortunately the case that in Lean 3, <code>simp</code> is very slow if you import a lot of files.<br>\nOne thing you can do is to run <code>simp?</code> or <code>squeeze_simp</code> (more expensive, but more reliable) with extra memory and a higher timeout, and then continue with the resulting <code>simp only</code>.<br>\nYou can set the timeout in VSCode by going to Settings with <code>ctrl+,</code> and searching for <code>Lean: Time Limit</code> (I have 500000).<br>\nThen, in your position, <code>squeeze_simp</code> still times out, but <code>simp?</code> gives<br>\n<code>simp only [function.comp_app, linear_map.coe_comp, regular_fdrep_act, finsupp.lsingle_apply],</code><br>\nIt's not ideal. I hope (and think) this will be better in Lean 4.</p>",
        "id": 338676045,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1677613237
    },
    {
        "content": "<p>(unrelated: remove the <code>@[class]</code>)</p>",
        "id": 338676137,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1677613263
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"111080\">Floris van Doorn</span> <a href=\"#narrow/stream/113488-general/topic/Why.20is.20my.20code.20so.20slow.3F/near/338676045\">said</a>:</p>\n<blockquote>\n<p>For the <code>simp</code> issue, it's unfortunately the case that in Lean 3, <code>simp</code> is very slow if you import a lot of files.<br>\nOne thing you can do is to run <code>simp?</code> or <code>squeeze_simp</code> (more expensive, but more reliable) with extra memory and a higher timeout, and then continue with the resulting <code>simp only</code>.<br>\nYou can set the timeout in VSCode by going to Settings with <code>ctrl+,</code> and searching for <code>Lean: Time Limit</code> (I have 500000).<br>\nThen, in your position, <code>squeeze_simp</code> still times out, but <code>simp?</code> gives<br>\n<code>simp only [function.comp_app, linear_map.coe_comp, regular_fdrep_act, finsupp.lsingle_apply],</code><br>\nIt's not ideal. I hope (and think) this will be better in Lean 4.</p>\n</blockquote>\n<p>Thank you! I removed some of unnecessary imports and the simp issue went better.</p>",
        "id": 338725041,
        "sender_full_name": "Chiyu Zhou",
        "timestamp": 1677633218
    }
]