[
    {
        "content": "<p>Hi all! I'm using Lean 3 and it's behaving in a way which has me absolutely baffled. Here's a mwe:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">namespace</span> <span class=\"n\">foo</span>\n  <span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span>\n\n  <span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">ex</span> <span class=\"o\">[</span><span class=\"n\">has_add</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n    <span class=\"bp\">`</span><span class=\"o\">[</span> <span class=\"k\">assume</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">,</span> <span class=\"k\">assume</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">+</span><span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">]</span>\n\n  <span class=\"kd\">def</span> <span class=\"n\">Term</span> <span class=\"o\">[</span><span class=\"n\">Add</span> <span class=\"o\">:</span> <span class=\"n\">has_add</span> <span class=\"n\">F</span><span class=\"o\">]:</span> <span class=\"n\">F</span> <span class=\"bp\">→</span> <span class=\"n\">F</span> <span class=\"bp\">→</span> <span class=\"n\">F</span> <span class=\"o\">:=</span>\n  <span class=\"kd\">begin</span>\n    <span class=\"c1\">-- let p := Add.add,</span>\n    <span class=\"bp\">@</span><span class=\"n\">ex</span> <span class=\"n\">F</span> <span class=\"n\">Add</span><span class=\"o\">,</span>\n  <span class=\"kd\">end</span>\n<span class=\"kd\">end</span> <span class=\"n\">foo</span>\n</code></pre></div>\n<p>It complains that the occurrence of <code>Add</code> after <code>@ex F</code> is undefined, even though the goal state is shown as</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">F</span><span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"n\">Add</span><span class=\"o\">:</span> <span class=\"n\">has_add</span> <span class=\"n\">F</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">F</span> <span class=\"bp\">→</span> <span class=\"n\">F</span> <span class=\"bp\">→</span> <span class=\"n\">F</span>\n</code></pre></div>\n<p>and the commented-out line defining <code>p</code> in terms of <code>Add</code> works fine. Can anyone explain what's going on? Is there something special about passing arguments to tactics which I'm not understanding?<br>\nThanks for the help!</p>",
        "id": 340085399,
        "sender_full_name": "Jacob Neumann",
        "timestamp": 1678189167
    },
    {
        "content": "<p>Hi! You'll find it much easier to get help after reading <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> and editing your question accordingly.</p>",
        "id": 340085695,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1678189253
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/113488-general/topic/Arguments.20to.20defined.20tactic/near/340085695\">said</a>:</p>\n<blockquote>\n<p>Hi! You'll find it much easier to get help after reading <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> and editing your question accordingly.</p>\n</blockquote>\n<p>Sorry. Been trying to reproduce the same behavior in a mwe but having trouble. I'll edit it if I can</p>",
        "id": 340086717,
        "sender_full_name": "Jacob Neumann",
        "timestamp": 1678189522
    },
    {
        "content": "<p>There is no need to be sorry. I'm not blaming you, I'm helping you getting help.</p>",
        "id": 340087139,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1678189620
    },
    {
        "content": "<p>\"minimal\" is far less important than \"working\"; if you want to just dump 200 lines of code enabling someone else to see the error at their end then this would still make the question much easier to answer. However my personal experience is that minimising can sometimes help you solve your own problem! You remove some \"irrelevant\" line which \"clearly\" has nothing to do with anything and your problem magically goes away, and then the penny drops.</p>",
        "id": 340087189,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1678189632
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"352951\">Jacob Neumann</span> <a href=\"#narrow/stream/113488-general/topic/Arguments.20to.20defined.20tactic/near/340086717\">said</a>:</p>\n<blockquote>\n<p>trying to reproduce the same behavior in a mwe but</p>\n</blockquote>\n<p>Been there!</p>",
        "id": 340087345,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1678189666
    },
    {
        "content": "<p>The answer to your question might be \"type class inference doesn't look in your local context; try <code>resetI</code> if you want it to know about what is there\" (but it might not be)</p>",
        "id": 340088548,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1678190022
    },
    {
        "content": "<p>Ok updated with mwe!</p>",
        "id": 340088817,
        "sender_full_name": "Jacob Neumann",
        "timestamp": 1678190097
    },
    {
        "content": "<p>This is simply not how tactic writing works in Lean 3.</p>",
        "id": 340091770,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1678190811
    },
    {
        "content": "<p>Did you read <a href=\"https://leanprover-community.github.io/extras/tactic_writing.html\">https://leanprover-community.github.io/extras/tactic_writing.html</a>?</p>",
        "id": 340091815,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1678190828
    },
    {
        "content": "<p>I need to go, but I'll write more later if nobody else does it in the mean time.</p>",
        "id": 340091875,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1678190851
    },
    {
        "content": "<p>The example is so minimized that it is hard to solve the <a href=\"https://en.wikipedia.org/wiki/XY_problem\">#xy</a> issue, but maybe meditating on the following will help a tiny bit:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">ex</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"k\">assume</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">,</span> <span class=\"k\">assume</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">+</span><span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Term</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Add</span> <span class=\"o\">:</span> <span class=\"n\">has_add</span> <span class=\"n\">F</span><span class=\"o\">]:</span> <span class=\"n\">F</span> <span class=\"bp\">→</span> <span class=\"n\">F</span> <span class=\"bp\">→</span> <span class=\"n\">F</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">ex</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 340097913,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1678192550
    },
    {
        "content": "<p>Yeah of course I've read the tutorial, but as far as I can tell it doesn't address this issue. I'm curious what you mean \"that's not how tactic writing works in Lean 3\"...to me it seems quite natural to write a tactic associated with a given type class, and to achieve this by taking in the instance as an argument to the tactic.  If there's a more proper way to do so, I'd definitely be interested to know it. Thanks</p>",
        "id": 340100831,
        "sender_full_name": "Jacob Neumann",
        "timestamp": 1678193410
    },
    {
        "content": "<p>This is not how you give arguments to tactics, as explained in the tutorial.</p>",
        "id": 340101467,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1678193569
    },
    {
        "content": "<p>Lean is both a proof assistant and a programming language. So a tactic, simply put is an executable program that produces proofs. When you write a def that takes an argument <code>has_add T</code> this produces executable code that when executed calls the addition function provided. The argument is basically a pointer to some other function that yours can call when you want it to. This is not the same as a representation of the same function you can prove things about, it’s just a pointer. What you want to do instead is write a tactic that parses an expression representing a function (in many cases this is essentially just its name), this expression can then be substituted wherever you want when building proofs about this function, but cannot be directly executed, the function may not be computable after all, or we could be doing a proof by contradiction and no such function exists!</p>",
        "id": 340105744,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1678194751
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/113488-general/topic/Arguments.20to.20defined.20tactic/near/340101467\">said</a>:</p>\n<blockquote>\n<p>This is not how you give arguments to tactics, as explained in the tutorial.</p>\n</blockquote>\n<p>Sorry but I don't see what you mean. The tutorial contains examples where arguments are passed in like normal function arguments as well as examples where the arguments are extracted from the local context using parsing identifiers. I assume the latter is what you intend, but it's still not clear to me (nor addressed in the tutorial) when to use the former and when to use the latter, and why having a tactic accept an argument like <code>Add</code> is forbidden.</p>",
        "id": 340110872,
        "sender_full_name": "Jacob Neumann",
        "timestamp": 1678196163
    },
    {
        "content": "<p>But in those examples the types of those arguments are usually something like <code>expr</code> or <code>parse ident</code>.</p>",
        "id": 340111245,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1678196271
    },
    {
        "content": "<p>That's not true for your MWE</p>",
        "id": 340111286,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1678196281
    },
    {
        "content": "<p>The example about reflection is an exception to that rule.</p>",
        "id": 340111492,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1678196330
    },
    {
        "content": "<p>Johan is right. Specifically you need to read again <a href=\"https://leanprover-community.github.io/extras/tactic_writing.html#parsing-locations-and-expressions\">https://leanprover-community.github.io/extras/tactic_writing.html#parsing-locations-and-expressions</a>.</p>",
        "id": 340111523,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1678196341
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/113488-general/topic/Arguments.20to.20defined.20tactic/near/340111245\">said</a>:</p>\n<blockquote>\n<p>But in those examples the types of those arguments are usually something like <code>expr</code> or <code>parse ident</code>.</p>\n</blockquote>\n<p>Sure but there are numerous examples where arguments of type <code>nat</code> or <code>list</code> are accepted. Why not <code>has_add F</code>?</p>",
        "id": 340112029,
        "sender_full_name": "Jacob Neumann",
        "timestamp": 1678196473
    },
    {
        "content": "<p>Where do you see those numerous examples?</p>",
        "id": 340112182,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1678196519
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/113488-general/topic/Arguments.20to.20defined.20tactic/near/340112182\">said</a>:</p>\n<blockquote>\n<p>Where do you see those numerous examples?</p>\n</blockquote>\n<p>In tactic.lean. Like<code>iterate_exactly</code> for instance</p>",
        "id": 340112489,
        "sender_full_name": "Jacob Neumann",
        "timestamp": 1678196608
    },
    {
        "content": "<p>Note that that is not an interactive tactic.</p>",
        "id": 340113402,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1678196844
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/113488-general/topic/Arguments.20to.20defined.20tactic/near/340113402\">said</a>:</p>\n<blockquote>\n<p>Note that that is not an interactive tactic.</p>\n</blockquote>\n<p>Oh okay so non-interactive tactics can take usual arguments, but interactive ones are confined to just <code>expr</code>, <code>parse ident</code> and the like? Is there a documentation of what can be passed to interactive tactics?</p>",
        "id": 340118543,
        "sender_full_name": "Jacob Neumann",
        "timestamp": 1678198198
    },
    {
        "content": "<p>Anything can be passed to anything. The question is whether it is useful. You probably want to use <code>expr</code> and <code>parse foo</code> as explained in the tutorial.</p>",
        "id": 340119295,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1678198396
    },
    {
        "content": "<p>Maybe it helps to realize that within a tactic, you don't have an actual term <code>F : Type</code>, you have the term <code> `(F) : expr </code></p>",
        "id": 340120104,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1678198578
    },
    {
        "content": "<p>In Lean 3, you're not really able to write tactic macros of the type you want using <code> `[...]</code> notation (Lean 4 lets you do something like that though.)</p>\n<p>It's not a very sophisticated way to make tactics, and you should just assume that everything in this notation has no access to any of the arguments to the function. I'm sure there are exceptions, but the tactic writing tutorial doesn't show any of them (in fact, it only mentions <code> `[...]</code> twice.)</p>",
        "id": 340123161,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1678199346
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/113488-general/topic/Arguments.20to.20defined.20tactic/near/340123161\">said</a>:</p>\n<blockquote>\n<p>In Lean 3, you're not really able to write tactic macros of the type you want using <code> `[...]</code> notation (Lean 4 lets you do something like that though.)</p>\n<p>It's not a very sophisticated way to make tactics, and you should just assume that everything in this notation has no access to any of the arguments to the function. I'm sure there are exceptions, but the tactic writing tutorial doesn't show any of them (in fact, it only mentions <code> `[...]</code> twice.)</p>\n</blockquote>\n<p>My original example is written as a <code>do</code> block, so that's just a feature of the mwe. But same result</p>",
        "id": 340124124,
        "sender_full_name": "Jacob Neumann",
        "timestamp": 1678199551
    },
    {
        "content": "<p>The tactic state lives in a symbolic world of terms, while the program of a tactic lives in a concrete world of runtime values. As it is not a priori possible to freely move values between these two phases, it does not make sense for a tactic to take a symbolic value such as <code>F</code> above. Other systems such as Ltac may behave very differently in this regard.</p>",
        "id": 340127511,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1678200297
    }
]