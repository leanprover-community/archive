[
    {
        "content": "<p>I hereby invite you to <a href=\"https://www.codewars.com/?language=lean\" title=\"https://www.codewars.com/?language=lean\">sign up for an account on Codewars</a>.</p>\n<p>Codewars is a training platform where programmers of all disciplines train on code challenges called kata in order to improve their programming skills, and <strong>we are now extending our invitation to Lean users of all levels (whether beginner, intermediate or expert) and disciplines (mathematicians and computer scientists alike) interested in computerized theorem proving</strong>.</p>\n<p>Lean support has been recently added to Codewars (late March / early April) and is now in the <em>Beta Phase</em> - we now have much more content compared to when we just started thanks to all of those who actively participated in the Round 1 invitation and generously contributed Lean kata to our site, but we are still looking forward to potential feedback on how the experience on Codewars can be improved (for Lean).</p>\n<p>In terms of Lean challenges, we now have <a href=\"https://www.codewars.com/kata/search/lean?q=&amp;beta=false\" title=\"https://www.codewars.com/kata/search/lean?q=&amp;beta=false\">11 approved kata</a> and <a href=\"https://www.codewars.com/kata/search/lean?q=&amp;beta=true\" title=\"https://www.codewars.com/kata/search/lean?q=&amp;beta=true\">20 beta kata</a> spanning topics on synthetic geometry, category theory, number theory, abstract algebra ... and more! Feel free to browse through the list of available challenges and train on whatever challenge you find of interest. Once you have 25 honor (a scoring system on Codewars), you will also be able to vote on Kata you have completed based on how satisfied you were with the experience, so <em>don't forget to cast your votes</em>! <span aria-label=\"smile\" class=\"emoji emoji-263a\" role=\"img\" title=\"smile\">:smile:</span> </p>\n<p>You may learn more about <a href=\"https://github.com/Codewars/codewars.com/wiki/Language-Lean\" title=\"https://github.com/Codewars/codewars.com/wiki/Language-Lean\">the Lean setup used on Codewars</a> on our Wiki, as well as the <a href=\"https://github.com/Codewars/codewars.com/wiki/Honor-&amp;-Ranks\" title=\"https://github.com/Codewars/codewars.com/wiki/Honor-&amp;-Ranks\">scoring system</a>, <a href=\"https://github.com/codewars/codewars.com/wiki/Privileges\" title=\"https://github.com/codewars/codewars.com/wiki/Privileges\">user privileges</a> and the <a href=\"https://github.com/codewars/codewars.com/wiki/Kata-Beta-Process\" title=\"https://github.com/codewars/codewars.com/wiki/Kata-Beta-Process\">beta process</a>. You may also wish to drop by <a href=\"https://gitter.im/Codewars/codewars.com/\" title=\"https://gitter.im/Codewars/codewars.com/\">our Gitter chat</a> if you have any questions about Codewars or would just like to chat in general.</p>\n<p>Happy sparring! <span aria-label=\"grinning face with smiling eyes\" class=\"emoji emoji-1f601\" role=\"img\" title=\"grinning face with smiling eyes\">:grinning_face_with_smiling_eyes:</span></p>",
        "id": 193780791,
        "sender_full_name": "Donald Sebastian Leung",
        "timestamp": 1586790300
    },
    {
        "content": "<p>Plasmodium: <a href=\"https://www.codewars.com/kata/5cc3d8c2312133001dea9b3d/lean\" title=\"https://www.codewars.com/kata/5cc3d8c2312133001dea9b3d/lean\">Program Verification #5: The sum of a geometric progression</a></p>",
        "id": 193821884,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1586812227
    },
    {
        "content": "<p>How does beta work? More specifically, how many votes does a beta kata need to get before begin approved?</p>",
        "id": 193859018,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1586849566
    },
    {
        "content": "<p>Generally, the number of satisfaction votes, rank assessments as well as the satisfaction rating required for a Beta kata to leave Beta decreases as 1) the average assessed rank of the kata is higher and 2) you get more and more kata approved. For example, if you currently have &lt; 10 approved kata and the average assessed rank of your Beta kata is in the <code>7-8 kyu</code> range then it will require 12 (satisfaction + ranking) votes with a satisfaction rating of &gt;= 80% in order to be eligible to leave Beta, but if its average assessed rank is <code>1-2 kyu</code> then it only requires 5 votes and &gt;= 70% satisfaction to leave Beta.</p>\n<p>You may learn more about the <a href=\"https://github.com/codewars/codewars.com/wiki/Kata-Beta-Process\" title=\"https://github.com/codewars/codewars.com/wiki/Kata-Beta-Process\">Beta Process</a> on our Wiki; specifically, the <a href=\"https://github.com/codewars/codewars.com/wiki/Kata-Beta-Process#kata-approval\" title=\"https://github.com/codewars/codewars.com/wiki/Kata-Beta-Process#kata-approval\">kata approval requirements</a>.</p>",
        "id": 193868443,
        "sender_full_name": "Donald Sebastian Leung",
        "timestamp": 1586855104
    },
    {
        "content": "<p>Is there a template for making new lean kata? For instance, how do I make sure the user didn't use any new axioms or sorry?</p>",
        "id": 194233919,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1586988278
    },
    {
        "content": "<p>In about 30 minutes I was going to ask exactly the same question. I've seen this issue several times in the discussions -- \"don't do it like that, it's trivial to hack\" :-/</p>",
        "id": 194234430,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586988556
    },
    {
        "content": "<p>OK so I am faced with having to supply 5 files:<br>\nComplete solution<br>\nInitial solution<br>\nPreloaded<br>\nTest cases<br>\nExample test cases</p>",
        "id": 194240075,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586992256
    },
    {
        "content": "<p>Say my kata is to prove <code>theorem easy : 2 + 2 = 4</code>. What now? Where does all this SUBMISSION go?</p>",
        "id": 194240135,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586992300
    },
    {
        "content": "<p>sorry, :D</p>",
        "id": 194243796,
        "sender_full_name": "orlando",
        "timestamp": 1586995559
    },
    {
        "content": "<p>oups i post in a bas section sorry :D</p>",
        "id": 194243877,
        "sender_full_name": "orlando",
        "timestamp": 1586995594
    },
    {
        "content": "<p><code> Final Solution is invalid. (lean) The solution should pass the provided test cases</code> What did I do wrong?</p>",
        "id": 194245423,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586997053
    },
    {
        "content": "<p>I might have got it working: <a href=\"https://www.codewars.com/kata/5e97af00b13ab700244eaae9/train/lean\" title=\"https://www.codewars.com/kata/5e97af00b13ab700244eaae9/train/lean\">elliptic curve question</a></p>",
        "id": 194247445,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586999153
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113488-general/topic/Invitation.20to.20join.20the.20Codewars.20Lean.20community.2C.20Round.202/near/194240135\" title=\"#narrow/stream/113488-general/topic/Invitation.20to.20join.20the.20Codewars.20Lean.20community.2C.20Round.202/near/194240135\">said</a>:</p>\n<blockquote>\n<p>Say my kata is to prove <code>theorem easy : 2 + 2 = 4</code>. What now? Where does all this SUBMISSION go?</p>\n</blockquote>\n<p>I think the way that some kata have done it is to have this in your tests</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">Preloaded</span> <span class=\"n\">Solution</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">easy&#39;</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">4</span> <span class=\"o\">:=</span> <span class=\"n\">easy</span>\n<span class=\"bp\">#</span><span class=\"kn\">print</span> <span class=\"n\">axioms</span> <span class=\"n\">easy&#39;</span>\n</pre></div>",
        "id": 194247498,
        "sender_full_name": "Shing Tak Lam",
        "timestamp": 1586999177
    },
    {
        "content": "<p>So do this instead of using <code>SUBMISSION</code></p>",
        "id": 194247540,
        "sender_full_name": "Shing Tak Lam",
        "timestamp": 1586999234
    },
    {
        "content": "<p>For <span class=\"user-mention\" data-user-id=\"246273\">@Bhavik Mehta</span> : the 5 Lean files I made are:<br>\n1) Complete solution: a bunch of working Lean 3.7.2 code containing <code>theorem zany_name : my_statement := &lt;proof&gt;</code><br>\n2) Initial solution:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">Preloaded</span>\n\n<span class=\"c1\">-- some comments</span>\n<span class=\"kn\">theorem</span> <span class=\"n\">zany_name</span> <span class=\"o\">:</span> <span class=\"n\">my_statement</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</pre></div>\n\n\n<p>3) Preloaded:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">imports</span><span class=\"bp\">-</span><span class=\"n\">needed</span><span class=\"bp\">-</span><span class=\"n\">to</span><span class=\"bp\">-</span><span class=\"n\">make</span><span class=\"bp\">-</span><span class=\"kn\">theorem</span><span class=\"bp\">-</span><span class=\"n\">statement</span><span class=\"bp\">-</span><span class=\"n\">compile</span>\n\n<span class=\"n\">def</span> <span class=\"n\">SUBMISSION</span> <span class=\"o\">:=</span> <span class=\"n\">my_statement</span>\n<span class=\"kn\">notation</span> <span class=\"bp\">`</span><span class=\"n\">SUBMISSION</span><span class=\"bp\">`</span> <span class=\"o\">:=</span> <span class=\"n\">SUBMISSION</span>\n</pre></div>\n\n\n<p>4) Test cases:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">Preloaded</span> <span class=\"n\">Solution</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">submission</span> <span class=\"o\">:</span> <span class=\"n\">SUBMISSION</span> <span class=\"o\">:=</span> <span class=\"n\">zany_name</span>\n<span class=\"bp\">#</span><span class=\"kn\">print</span> <span class=\"n\">axioms</span> <span class=\"n\">submission</span>\n</pre></div>\n\n\n<p>5) Example test cases: same as test cases.</p>\n<p>As an example: in the <a href=\"https://www.codewars.com/kata/5e987757eb3b570001edb6cd\" title=\"https://www.codewars.com/kata/5e987757eb3b570001edb6cd\">5^5^5^5^5 question</a>, <code>zany_name</code> is <code>fivefives</code> and <code>my_statement</code> is <code>¬ nat.prime ((5^5^5^5^5-1)/(5^5^(5^5^5-1)-1))</code></p>",
        "id": 194247727,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586999466
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"266440\">@Shing Tak Lam</span> does my kata look OK (I'm not asking about the maths, I'm just asking if I've made any dumb errors)</p>",
        "id": 194247838,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586999573
    },
    {
        "content": "<p>I think so? At least from comparing it to existing kata.</p>",
        "id": 194247960,
        "sender_full_name": "Shing Tak Lam",
        "timestamp": 1586999717
    },
    {
        "content": "<p>I mean if you put it into Codewars, the preloaded.lean should fail the tests and the completed solution should pass. So if that's the case then you're probably fine? Probably best to ask someone who actually knows this stuff (Donald)</p>",
        "id": 194248021,
        "sender_full_name": "Shing Tak Lam",
        "timestamp": 1586999781
    },
    {
        "content": "<p>I just had a weird time uploading it; the first time it seemed to fail, and then the second time it seemed to pass instantly.</p>",
        "id": 194248042,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586999832
    },
    {
        "content": "<p>Sometimes the Codewars servers does that. It seems to depend on the load the servers are under (the time of day)...</p>",
        "id": 194248096,
        "sender_full_name": "Shing Tak Lam",
        "timestamp": 1586999886
    },
    {
        "content": "<p>I like the good test coverage :)</p>",
        "id": 194248424,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587000338
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113488-general/topic/Invitation.20to.20join.20the.20Codewars.20Lean.20community.2C.20Round.202/near/194247445\" title=\"#narrow/stream/113488-general/topic/Invitation.20to.20join.20the.20Codewars.20Lean.20community.2C.20Round.202/near/194247445\">said</a>:</p>\n<blockquote>\n<p>I might have got it working: <a href=\"https://www.codewars.com/kata/5e97af00b13ab700244eaae9/train/lean\" title=\"https://www.codewars.com/kata/5e97af00b13ab700244eaae9/train/lean\">elliptic curve question</a></p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> Congrats on authoring your first kata on the site (as yourself)! <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span> </p>\n<p><span class=\"user-mention silent\" data-user-id=\"266440\">Shing Tak Lam</span> <a href=\"#narrow/stream/113488-general/topic/Invitation.20to.20join.20the.20Codewars.20Lean.20community.2C.20Round.202/near/194248021\" title=\"#narrow/stream/113488-general/topic/Invitation.20to.20join.20the.20Codewars.20Lean.20community.2C.20Round.202/near/194248021\">said</a>:</p>\n<blockquote>\n<p>I mean if you put it into Codewars, the preloaded.lean should fail the tests and the completed solution should pass. So if that's the case then you're probably fine? Probably best to ask someone who actually knows this stuff (Donald)</p>\n</blockquote>\n<p>That sounds about right, except that the initial solution should only fail the tests because of a wrong input (or in the case of Lean, a <code>sorry</code>) and not because of a compilation error. We don't want the solver to perform unnecessary debugging just to get their solution to compile. There are exceptions where the initial solution is designed to not compile (e.g. in a weird C++ kata involving compile-time metaprogramming) but those are extremely rare.</p>",
        "id": 194248828,
        "sender_full_name": "Donald Sebastian Leung",
        "timestamp": 1587000825
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113488-general/topic/Invitation.20to.20join.20the.20Codewars.20Lean.20community.2C.20Round.202/near/194248042\" title=\"#narrow/stream/113488-general/topic/Invitation.20to.20join.20the.20Codewars.20Lean.20community.2C.20Round.202/near/194248042\">said</a>:</p>\n<blockquote>\n<p>I just had a weird time uploading it; the first time it seemed to fail, and then the second time it seemed to pass instantly.</p>\n</blockquote>\n<p>Not sure if it's related here but I should probably mention this: there is a known long-standing bug on Codewars that when you publish your kata for the first time, the servers do not actually check if your kata is completable so can actually publish a broken kata that no one can possibly solve. But on every re-publish, the servers do the checking and prevents you from re-publishing if the kata becomes un-completable. The best way to ensure that you do not accidentally publish a broken kata is by clicking \"Validate Solution\" and making sure that the test output is green before publishing your kata.</p>",
        "id": 194249052,
        "sender_full_name": "Donald Sebastian Leung",
        "timestamp": 1587001128
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113488-general/topic/Invitation.20to.20join.20the.20Codewars.20Lean.20community.2C.20Round.202/near/194248424\" title=\"#narrow/stream/113488-general/topic/Invitation.20to.20join.20the.20Codewars.20Lean.20community.2C.20Round.202/near/194248424\">said</a>:</p>\n<blockquote>\n<p>I like the good test coverage :)</p>\n</blockquote>\n<p>IMO the two good things about authoring theorem-proving kata (as opposed to ordinary programming kata) on Codewars is 1) authoring a theorem-proving kata takes about the same effort as solving one, whereas authoring a programming kata requires substantially more effort in designing suitable fixed, edge and random tests and 2) the community generally give more favorable votes to theorem-proving kata (if only because there currently aren't that many and everyone wants to see more on the site), whereas, when authoring a programming kata, if you don't get it <em>just right</em> then you immediately get <del>cyber-bullied</del> shouted on by the community for all sorts of various issues and receive a flood of \"Not Satisfied\" votes (which could automatically retire your Beta kata, rendering it impossible to leave Beta).</p>",
        "id": 194249434,
        "sender_full_name": "Donald Sebastian Leung",
        "timestamp": 1587001460
    },
    {
        "content": "<p>Congrats <span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span> on your first approved kata: <a href=\"https://www.codewars.com/kata/5e90c3814af7f4002e2535af\" title=\"https://www.codewars.com/kata/5e90c3814af7f4002e2535af\">Show that there are two types that are unequal</a> <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span></p>",
        "id": 194309519,
        "sender_full_name": "Donald Sebastian Leung",
        "timestamp": 1587046155
    },
    {
        "content": "<p>Congrats <span class=\"user-mention\" data-user-id=\"246273\">@Bhavik Mehta</span> on your first approved kata: <a href=\"https://www.codewars.com/kata/5e9900b311efe00001996e26\" title=\"https://www.codewars.com/kata/5e9900b311efe00001996e26\">Every symmetric transitive relation is reflexive ... right?</a> <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span> </p>\n<p>And ... we now have <a href=\"https://www.codewars.com/collections/mathematical-analysis\" title=\"https://www.codewars.com/collections/mathematical-analysis\">4 new kata on limits of sequences</a>, check them out <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span></p>",
        "id": 194422429,
        "sender_full_name": "Donald Sebastian Leung",
        "timestamp": 1587120198
    },
    {
        "content": "<p>... which brings us up to 41 (Lean) kata in total</p>",
        "id": 194422813,
        "sender_full_name": "Donald Sebastian Leung",
        "timestamp": 1587120460
    },
    {
        "content": "<p>Math rendering at <a href=\"https://www.codewars.com/kata/5e997f77ea84170016600045\" title=\"https://www.codewars.com/kata/5e997f77ea84170016600045\">https://www.codewars.com/kata/5e997f77ea84170016600045</a> is painful to see. It brings back memories of the 90's.</p>",
        "id": 194425449,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1587122490
    },
    {
        "content": "<p>Why <code> ∀ ε &gt; 0, ∃ (N : ℝ), ∀ n : ℕ, ↑n &gt; N → abs (x n - l) &lt; ε</code>? Why would you want to ask N to be real??</p>",
        "id": 194425554,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1587122561
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/113488-general/topic/Invitation.20to.20join.20the.20Codewars.20Lean.20community.2C.20Round.202/near/194425449\" title=\"#narrow/stream/113488-general/topic/Invitation.20to.20join.20the.20Codewars.20Lean.20community.2C.20Round.202/near/194425449\">said</a>:</p>\n<blockquote>\n<p>Math rendering at <a href=\"https://www.codewars.com/kata/5e997f77ea84170016600045\" title=\"https://www.codewars.com/kata/5e997f77ea84170016600045\">https://www.codewars.com/kata/5e997f77ea84170016600045</a> is painful to see. It brings back memories of the 90's.</p>\n</blockquote>\n<p>Yeah, sorry about that, I don't think Codewars supports TeX / MathJAX or similar so I had to typeset the LaTeX in an external editor, take screenshots of the rendered output, upload them onto imgur and paste the images there.</p>\n<p>There might be a way to get rid of that white background by using SVGs but I'm not all too familiar with it.</p>",
        "id": 194439268,
        "sender_full_name": "Donald Sebastian Leung",
        "timestamp": 1587129947
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/113488-general/topic/Invitation.20to.20join.20the.20Codewars.20Lean.20community.2C.20Round.202/near/194425554\" title=\"#narrow/stream/113488-general/topic/Invitation.20to.20join.20the.20Codewars.20Lean.20community.2C.20Round.202/near/194425554\">said</a>:</p>\n<blockquote>\n<p>Why <code> ∀ ε &gt; 0, ∃ (N : ℝ), ∀ n : ℕ, ↑n &gt; N → abs (x n - l) &lt; ε</code>? Why would you want to ask N to be real??</p>\n</blockquote>\n<p>IMO it's easier to allow <code>N</code> to be real since otherwise one may have to round their value of <code>N</code> up to the nearest natural number in Lean after finding it by manipulating the inequality <code>abs (x n - l) &lt; ε</code> on paper. But I am definitely no expert in analysis / Lean so feel free to leave your suggestions in the discourse of the kata concerned and I'll see if I can implement your suggestions in my spare time.</p>",
        "id": 194440311,
        "sender_full_name": "Donald Sebastian Leung",
        "timestamp": 1587130344
    },
    {
        "content": "<p>I strongly suggest this is a very bad idea.</p>",
        "id": 194440480,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1587130417
    },
    {
        "content": "<p>And I've written dozens of \"Katas\" for my students on this topic of limits of sequences.</p>",
        "id": 194440555,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1587130443
    },
    {
        "content": "<p>Although I haven't tried to replace the word exercise with kata.</p>",
        "id": 194440615,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1587130475
    },
    {
        "content": "<p>It's true you can meet coercion hell with applying this definition on concrete sequence like <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi><mo>↦</mo><mn>1</mn><mi mathvariant=\"normal\">/</mi><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n \\mapsto 1/n</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.522em;vertical-align:-0.011em;\"></span><span class=\"mord mathdefault\">n</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">↦</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mord\">/</span><span class=\"mord mathdefault\">n</span></span></span></span>. But what you do is enforcing coercion hell <em>everywhere</em>.</p>",
        "id": 194440764,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1587130552
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/113488-general/topic/Invitation.20to.20join.20the.20Codewars.20Lean.20community.2C.20Round.202/near/194440764\" title=\"#narrow/stream/113488-general/topic/Invitation.20to.20join.20the.20Codewars.20Lean.20community.2C.20Round.202/near/194440764\">said</a>:</p>\n<blockquote>\n<p>It's true you can meet coercion hell with applying this definition on concrete sequence like <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi><mo>↦</mo><mn>1</mn><mi mathvariant=\"normal\">/</mi><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n \\mapsto 1/n</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.522em;vertical-align:-0.011em;\"></span><span class=\"mord mathdefault\">n</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">↦</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mord\">/</span><span class=\"mord mathdefault\">n</span></span></span></span>. But what you do is enforcing coercion hell <em>everywhere</em>.</p>\n</blockquote>\n<p>Thanks for your input, I have made a note to myself to fix this when I get around to it.</p>",
        "id": 194521928,
        "sender_full_name": "Donald Sebastian Leung",
        "timestamp": 1587177814
    },
    {
        "content": "<p>Here's one on matrices (specifically, special linear groups): <a href=\"https://www.codewars.com/kata/5c930224c4661143a6666add/lean\" title=\"https://www.codewars.com/kata/5c930224c4661143a6666add/lean\">A special set of matrices with unique representation</a></p>\n<p>And one on modular arithmetic: <a href=\"https://www.codewars.com/kata/5e59626530e9d00028bbe569/lean\" title=\"https://www.codewars.com/kata/5e59626530e9d00028bbe569/lean\">Times Three, Plus Five</a> (hint: <code>interval_cases</code> will definitely be of use here ;-)</p>",
        "id": 194578605,
        "sender_full_name": "Donald Sebastian Leung",
        "timestamp": 1587270832
    },
    {
        "content": "<p>Plasmodium: <a href=\"https://www.codewars.com/kata/5d0e57ec1c5fdd000146b7d9/lean\" title=\"https://www.codewars.com/kata/5d0e57ec1c5fdd000146b7d9/lean\">Verified Horner's method</a></p>",
        "id": 194587440,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1587287319
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"264734\">Donald Sebastian Leung</span> <a href=\"#narrow/stream/113488-general/topic/Invitation.20to.20join.20the.20Codewars.20Lean.20community.2C.20Round.202/near/194439268\" title=\"#narrow/stream/113488-general/topic/Invitation.20to.20join.20the.20Codewars.20Lean.20community.2C.20Round.202/near/194439268\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/113488-general/topic/Invitation.20to.20join.20the.20Codewars.20Lean.20community.2C.20Round.202/near/194425449\" title=\"#narrow/stream/113488-general/topic/Invitation.20to.20join.20the.20Codewars.20Lean.20community.2C.20Round.202/near/194425449\">said</a>:</p>\n<blockquote>\n<p>Math rendering at <a href=\"https://www.codewars.com/kata/5e997f77ea84170016600045\" title=\"https://www.codewars.com/kata/5e997f77ea84170016600045\">https://www.codewars.com/kata/5e997f77ea84170016600045</a> is painful to see. It brings back memories of the 90's.</p>\n</blockquote>\n<p>Yeah, sorry about that, I don't think Codewars supports TeX / MathJAX or similar so I had to typeset the LaTeX in an external editor, take screenshots of the rendered output, upload them onto imgur and paste the images there.</p>\n<p>There might be a way to get rid of that white background by using SVGs but I'm not all too familiar with it.</p>\n</blockquote>\n<p>png images support transparent backgrounds, which could help:<br>\n<a href=\"https://tex.stackexchange.com/questions/287481/using-latex-to-generate-png-images-of-an-equation\" title=\"https://tex.stackexchange.com/questions/287481/using-latex-to-generate-png-images-of-an-equation\">https://tex.stackexchange.com/questions/287481/using-latex-to-generate-png-images-of-an-equation</a><br>\nbut if there is dark mode and light mode in the settings, that could fail, since you either choose the text colour for the LaTeX to be black or white.</p>\n<p>Alternatively, you might be able to convert LaTeX into HTML and then put it in the page. I haven't used pandoc before, but I've heard it's a very powerful tool. Check out example 17 in this page : <a href=\"https://pandoc.org/demos.html\" title=\"https://pandoc.org/demos.html\">https://pandoc.org/demos.html</a></p>",
        "id": 194591208,
        "sender_full_name": "Mohammad Pedramfar",
        "timestamp": 1587293386
    },
    {
        "content": "<p>Converting LaTeX to HTML using pandoc or plasTeX or other heavy programs would be overkill. They simply need to use mathjax. Maybe they don't want mathjax on all their webpages but we would need to know many more details to give advice.</p>",
        "id": 194592201,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1587294814
    },
    {
        "content": "<p>Yes, MathJax is ideal and it canbe implemented with minimal hassle. Basically a few lines of code for the whole website, including the configurations.<br>\nWhat I was saying is only useful if the webpage is not changed and you can only write some html, and you can't inject javascript in the middle <span aria-label=\"grinning face with smiling eyes\" class=\"emoji emoji-1f601\" role=\"img\" title=\"grinning face with smiling eyes\">:grinning_face_with_smiling_eyes:</span></p>",
        "id": 194596351,
        "sender_full_name": "Mohammad Pedramfar",
        "timestamp": 1587300960
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/113488-general/topic/Invitation.20to.20join.20the.20Codewars.20Lean.20community.2C.20Round.202/near/194592201\" title=\"#narrow/stream/113488-general/topic/Invitation.20to.20join.20the.20Codewars.20Lean.20community.2C.20Round.202/near/194592201\">said</a>:</p>\n<blockquote>\n<p>Converting LaTeX to HTML using pandoc or plasTeX or other heavy programs would be overkill. They simply need to use mathjax. Maybe they don't want mathjax on all their webpages but we would need to know many more details to give advice.</p>\n</blockquote>\n<p>I've just checked and someone did make such a feature request back in mid-2018. Feel free to show your support by upvoting <a href=\"https://github.com/codewars/codewars.com/issues/1527\" title=\"https://github.com/codewars/codewars.com/issues/1527\">Codewars/codewars.com#1527</a> <span aria-label=\"grinning face with smiling eyes\" class=\"emoji emoji-1f601\" role=\"img\" title=\"grinning face with smiling eyes\">:grinning_face_with_smiling_eyes:</span></p>",
        "id": 194600111,
        "sender_full_name": "Donald Sebastian Leung",
        "timestamp": 1587306173
    },
    {
        "content": "<p>Prof. Buzzard your Easy Fermat kata was quite difficult.</p>",
        "id": 194600803,
        "sender_full_name": "Reid Barton",
        "timestamp": 1587307159
    },
    {
        "content": "<p>Was it easier than Fermat's last theorem though?</p>",
        "id": 194601932,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1587308616
    },
    {
        "content": "<p>I guess</p>",
        "id": 194602119,
        "sender_full_name": "Reid Barton",
        "timestamp": 1587308845
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span>  I've changed <code>N</code> to a natural number in my definition of the sequence limit throughout the kata series if you would like to take another look at it</p>\n<p>And thanks <span class=\"user-mention\" data-user-id=\"132175\">@Mohammad Pedramfar</span> for your amazing idea - the descriptions look a lot nicer now <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span></p>",
        "id": 194603250,
        "sender_full_name": "Donald Sebastian Leung",
        "timestamp": 1587310401
    },
    {
        "content": "<p>It clearly looks better.</p>",
        "id": 194603405,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1587310619
    },
    {
        "content": "<p>But I wouldn't know how to interpret those katas. What are you allowed to use from mathlib? Do you expect people redo them from scratch or crush them using the much more general versions from mathlib?</p>",
        "id": 194603442,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1587310675
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/113488-general/topic/Invitation.20to.20join.20the.20Codewars.20Lean.20community.2C.20Round.202/near/194603442\" title=\"#narrow/stream/113488-general/topic/Invitation.20to.20join.20the.20Codewars.20Lean.20community.2C.20Round.202/near/194603442\">said</a>:</p>\n<blockquote>\n<p>But I wouldn't know how to interpret those katas. What are you allowed to use from mathlib? Do you expect people redo them from scratch or crush them using the much more general versions from mathlib?</p>\n</blockquote>\n<p>Either approach is fine and there is currently no way to prevent certain parts of mathlib from being used on a per-kata basis. You may learn more about our Lean environment setup <a href=\"https://github.com/Codewars/codewars.com/wiki/Language-Lean\" title=\"https://github.com/Codewars/codewars.com/wiki/Language-Lean\">on our Wiki page</a>.</p>",
        "id": 194603578,
        "sender_full_name": "Donald Sebastian Leung",
        "timestamp": 1587310829
    },
    {
        "content": "<p>I think this is the reason why Kevin is writing less conventional katas</p>",
        "id": 194603609,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1587310895
    },
    {
        "content": "<p>BTW how easy would it be for a typical undergraduate mathematician to define \"transport lemmas\" between the general definition of a limit in mathlib and my specialized version and solve the kata by riding on results already proven in mathlib? Would it be easier than proving it from first principles?</p>",
        "id": 194603689,
        "sender_full_name": "Donald Sebastian Leung",
        "timestamp": 1587310993
    },
    {
        "content": "<p>A typical undergraduate mathematician doesn't use Lean</p>",
        "id": 194603772,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1587311117
    },
    {
        "content": "<p>I think this would be hard. Shing defined a custom <code>equiv</code> and then asked a bunch of questions which were already in mathlib for <code>equiv</code> but it seemed like less work to just reprove them all than to show that eg equiv.trans implied iso.trans</p>",
        "id": 194604098,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587311527
    },
    {
        "content": "<p>The first kata I was shown was the verified Horner's rule one and the second one was tail-recursive sum. Now that I look closer the second one uses a function but even if it used a list, it would literally be \"set x = 1 in Horner's rule\" but I think it's still easier to reprove it than to use the proof of Horner's rule.</p>",
        "id": 194604290,
        "sender_full_name": "Reid Barton",
        "timestamp": 1587311759
    },
    {
        "content": "<p>Well, probably equally easy.</p>",
        "id": 194604374,
        "sender_full_name": "Reid Barton",
        "timestamp": 1587311830
    },
    {
        "content": "<p>Donald, the transport lemmas already exist in mathlib. Except you created a difficulty by putting a strict inequality in a non-standard place in the definition of limit.</p>",
        "id": 194605167,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1587312725
    },
    {
        "content": "<p>In analysis, the convention is to put strict inequality only where necessary.</p>",
        "id": 194605184,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1587312747
    },
    {
        "content": "<p>For instance:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">topology</span><span class=\"bp\">.</span><span class=\"n\">metric_space</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"n\">attribute</span> <span class=\"o\">[</span><span class=\"kn\">instance</span><span class=\"o\">]</span> <span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">prop_decidable</span>\n\n<span class=\"n\">def</span> <span class=\"n\">lim_to_inf</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">∀</span> <span class=\"n\">ε</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">N</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"bp\">≥</span> <span class=\"n\">N</span><span class=\"o\">,</span> <span class=\"n\">abs</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"n\">ε</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">filter</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"n\">l</span><span class=\"o\">,</span>\n  <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">abs</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"n\">y</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">→</span>\n  <span class=\"n\">lim_to_inf</span> <span class=\"n\">y</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span>\n  <span class=\"n\">lim_to_inf</span> <span class=\"n\">x</span> <span class=\"n\">l</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">intros</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">l</span> <span class=\"n\">h</span> <span class=\"n\">hy</span><span class=\"o\">,</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">lim_to_inf</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">,</span>\n  <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"err\">←</span> <span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">dist_eq</span><span class=\"o\">,</span> <span class=\"err\">←</span> <span class=\"n\">metric</span><span class=\"bp\">.</span><span class=\"n\">tendsto_at_top</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">tendsto_iff_dist_tendsto_zero</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">tendsto_of_tendsto_of_tendsto_of_le_of_le</span> <span class=\"n\">tendsto_const_nhds</span> <span class=\"n\">hy</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">dist_nonneg</span> <span class=\"o\">:</span> <span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 194605320,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1587312896
    },
    {
        "content": "<p>Shouldn't it be <code>abs (x n - l) ≤ ε</code>? <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 194605411,
        "sender_full_name": "Reid Barton",
        "timestamp": 1587312968
    },
    {
        "content": "<p>Good point</p>",
        "id": 194605440,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1587312999
    },
    {
        "content": "<p>what on earth is \"Suppose x n ≤ l ≤ y n and lim n → ∞ ( x n − y n ) = 0 . Prove that lim n → ∞ x n = lim n → ∞ y n = l .\"?</p>",
        "id": 194610045,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1587318933
    },
    {
        "content": "<p>Plasmodium: <a href=\"https://www.codewars.com/kata/5e998b42dcf07b0001581def\" title=\"https://www.codewars.com/kata/5e998b42dcf07b0001581def\">Odd + Even = Odd? Even * Anything = Even? Prove it!</a></p>",
        "id": 194628310,
        "sender_full_name": "Donald Sebastian Leung",
        "timestamp": 1587349294
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110064\">Kenny Lau</span> <a href=\"#narrow/stream/113488-general/topic/Invitation.20to.20join.20the.20Codewars.20Lean.20community.2C.20Round.202/near/194610045\" title=\"#narrow/stream/113488-general/topic/Invitation.20to.20join.20the.20Codewars.20Lean.20community.2C.20Round.202/near/194610045\">said</a>:</p>\n<blockquote>\n<p>what on earth is \"Suppose x n ≤ l ≤ y n and lim n → ∞ ( x n − y n ) = 0 . Prove that lim n → ∞ x n = lim n → ∞ y n = l .\"?</p>\n</blockquote>\n<p>I'm not sure what you're getting at, would you care to elaborate?</p>",
        "id": 194628351,
        "sender_full_name": "Donald Sebastian Leung",
        "timestamp": 1587349335
    },
    {
        "content": "<p><a href=\"https://www.codewars.com/kata/5e997f77ea84170016600045\" title=\"https://www.codewars.com/kata/5e997f77ea84170016600045\">https://www.codewars.com/kata/5e997f77ea84170016600045</a></p>",
        "id": 194628363,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1587349434
    },
    {
        "content": "<p>I find it funny that in <a href=\"https://www.codewars.com/kata/599d973255342a0ce400009b\" title=\"https://www.codewars.com/kata/599d973255342a0ce400009b\">Odd + Even = Odd? Prove it!</a> they are rejecting translations of that (Haskell) kata to Coq/Lean/Agda as it is too easy. Is there a rule that katas can't be too easy?</p>",
        "id": 194628421,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587349500
    },
    {
        "content": "<p>We already have squeeze thm in <code>mathlib</code>. Is there any reason to use a different definition of the limit?</p>",
        "id": 194628431,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1587349552
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span> You need to use words</p>",
        "id": 194628432,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587349553
    },
    {
        "content": "<p>the plain text version of the maths seems to be worse than the picture rendering versions</p>",
        "id": 194628473,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1587349578
    },
    {
        "content": "<p>My guess is kenny is pointing out the bad formatting, but I see mathjax</p>",
        "id": 194628476,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587349586
    },
    {
        "content": "<p>oh what</p>",
        "id": 194628477,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1587349593
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113488-general/topic/Invitation.20to.20join.20the.20Codewars.20Lean.20community.2C.20Round.202/near/194628421\" title=\"#narrow/stream/113488-general/topic/Invitation.20to.20join.20the.20Codewars.20Lean.20community.2C.20Round.202/near/194628421\">said</a>:</p>\n<blockquote>\n<p>I find it funny that in <a href=\"https://www.codewars.com/kata/599d973255342a0ce400009b\" title=\"https://www.codewars.com/kata/599d973255342a0ce400009b\">Odd + Even = Odd? Prove it!</a> they are rejecting translations of that (Haskell) kata to Coq/Lean/Agda as it is too easy. Is there a rule that katas can't be too easy?</p>\n</blockquote>\n<p>It's often considered a bad idea to accept translations to languages when the difference in the difficulty between translations is significant.</p>\n<p>For example, sorting a list of numbers in ascending order would be <code>8 kyu</code> in most languages but around <code>4 kyu</code> in <a href=\"https://esolangs.org/wiki/Brainfuck\" title=\"https://esolangs.org/wiki/Brainfuck\">BF</a> so the recommended approach is to keep them two separate kata instead of making a BF translation to the existing <code>8 kyu</code></p>",
        "id": 194628491,
        "sender_full_name": "Donald Sebastian Leung",
        "timestamp": 1587349634
    },
    {
        "content": "<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/kYludeEVJ4yMh3eQqrAOulUh/2020-04-20-2.png\" title=\"/user_uploads/3121/kYludeEVJ4yMh3eQqrAOulUh/2020-04-20-2.png\"><img src=\"/user_uploads/3121/kYludeEVJ4yMh3eQqrAOulUh/2020-04-20-2.png\"></a></div>",
        "id": 194628495,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1587349643
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span> Looks better in my Firefox</p>",
        "id": 194628544,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1587349699
    },
    {
        "content": "<p>If I use the inspector on that piece of math, I see MathML</p>",
        "id": 194628545,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587349704
    },
    {
        "content": "<p>do you?</p>",
        "id": 194628546,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587349710
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110064\">Kenny Lau</span> <a href=\"#narrow/stream/113488-general/topic/Invitation.20to.20join.20the.20Codewars.20Lean.20community.2C.20Round.202/near/194628495\" title=\"#narrow/stream/113488-general/topic/Invitation.20to.20join.20the.20Codewars.20Lean.20community.2C.20Round.202/near/194628495\">said</a>:</p>\n<blockquote>\n<p><a href=\"/user_uploads/3121/kYludeEVJ4yMh3eQqrAOulUh/2020-04-20-2.png\" title=\"2020-04-20-2.png\">/user_uploads/3121/kYludeEVJ4yMh3eQqrAOulUh/2020-04-20-2.png</a></p>\n</blockquote>\n<p>It looks much nicer on Safari on my Mac:</p>\n<p><a href=\"/user_uploads/3121/gtIk8-w1TrYhGcPJzWhB0X21/螢幕截圖-2020-04-20-10.28.16.png\" title=\"螢幕截圖-2020-04-20-10.28.16.png\">螢幕截圖-2020-04-20-10.28.16.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/gtIk8-w1TrYhGcPJzWhB0X21/螢幕截圖-2020-04-20-10.28.16.png\" title=\"螢幕截圖-2020-04-20-10.28.16.png\"><img src=\"/user_uploads/3121/gtIk8-w1TrYhGcPJzWhB0X21/螢幕截圖-2020-04-20-10.28.16.png\"></a></div>",
        "id": 194628548,
        "sender_full_name": "Donald Sebastian Leung",
        "timestamp": 1587349722
    },
    {
        "content": "<p>it's possible that your browser doesn't support mathml</p>",
        "id": 194628549,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587349729
    },
    {
        "content": "<p>I'm using Chrome btw</p>",
        "id": 194628555,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1587349753
    },
    {
        "content": "<p>(I'm on FF)</p>",
        "id": 194628556,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587349755
    },
    {
        "content": "<p>I get plain text on chromium</p>",
        "id": 194628571,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587349801
    },
    {
        "content": "<p>AFAIR google removed mathml support from chrome</p>",
        "id": 194628605,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1587349805
    },
    {
        "content": "<p>interesting</p>",
        "id": 194628608,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1587349817
    },
    {
        "content": "<p>After they forked from webkit</p>",
        "id": 194628609,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1587349817
    },
    {
        "content": "<p>The reasoning sounded like \"it's half-working and we have mathjax\"</p>",
        "id": 194628617,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1587349852
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/113488-general/topic/Invitation.20to.20join.20the.20Codewars.20Lean.20community.2C.20Round.202/near/194605184\" title=\"#narrow/stream/113488-general/topic/Invitation.20to.20join.20the.20Codewars.20Lean.20community.2C.20Round.202/near/194605184\">said</a>:</p>\n<blockquote>\n<p>In analysis, the convention is to put strict inequality only where necessary.</p>\n</blockquote>\n<p>I just checked the <a href=\"https://en.wikipedia.org/wiki/Limit_of_a_sequence#Formal_definition\" title=\"https://en.wikipedia.org/wiki/Limit_of_a_sequence#Formal_definition\">formal definition of a limit according to Wikipedia</a> and it does have <code>n ≥ N</code>. I will fix my kata again shortly.</p>\n<p>As for <code>|x n - l| &lt; ε</code> vs. <code>|x n - l| ≤ ε</code>, I'll keep the former since that is what Wikipedia says (and what I have been taught in my analysis course).</p>",
        "id": 194628628,
        "sender_full_name": "Donald Sebastian Leung",
        "timestamp": 1587349891
    },
    {
        "content": "<p>And it agrees with the standard <code>nhds</code> filter</p>",
        "id": 194628669,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1587349928
    },
    {
        "content": "<p>Rather than requiring katas to state the definition of a limit a certain way or use a mathlib API that may advantage users with more library knowledge, we should have theorems proving the equivalence of mathlib's limit to a number of basic versions of it. That way you can convert your hypothesis to mathlib form in one line</p>",
        "id": 194628812,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587350254
    },
    {
        "content": "<p><a href=\"https://github.com/codewars/codewars.com/issues/1527#issuecomment-616308037\" title=\"https://github.com/codewars/codewars.com/issues/1527#issuecomment-616308037\">KaTeX support</a> has just been enabled for kata descriptions on Codewars <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span></p>",
        "id": 194634441,
        "sender_full_name": "Donald Sebastian Leung",
        "timestamp": 1587360523
    },
    {
        "content": "<p>Plasmodium: <a href=\"https://www.codewars.com/kata/5e10444e4225f3000123b9db\" title=\"https://www.codewars.com/kata/5e10444e4225f3000123b9db\">Duality in Boolean logic</a></p>",
        "id": 194661633,
        "sender_full_name": "Donald Sebastian Leung",
        "timestamp": 1587381883
    },
    {
        "content": "<p>Translated beta: <a href=\"https://www.codewars.com/kata/5e3c1eb312676f001eb41f1c/lean\" title=\"https://www.codewars.com/kata/5e3c1eb312676f001eb41f1c/lean\">But WHY is LEM unprovable?</a></p>",
        "id": 194727504,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1587414056
    },
    {
        "content": "<p>I think you left in a bit from Coq: \"A word of advice<br>\nDon't bother going through every axiom. Use Ltac instead.\"</p>",
        "id": 194735748,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1587418011
    },
    {
        "content": "<p>You also left in an inane comment: \"You can learn more about Heyting algebra and intuitionistic logic with the help of search engines.\". Can you give me an X such that you cannot learn more about X with the help of search engines? Nobody needs to be told this nowadays, surely.</p>",
        "id": 194738656,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587419778
    },
    {
        "content": "<p>X = search engines?</p>",
        "id": 194739577,
        "sender_full_name": "Reid Barton",
        "timestamp": 1587420426
    },
    {
        "content": "<p>Nice Goedelesque try but I'm not so sure. Anyway, in the mean time you should try my <a href=\"https://www.codewars.com/kata/5e9e1eb0a2b32800019a648a\" title=\"https://www.codewars.com/kata/5e9e1eb0a2b32800019a648a\">generalised Pell equation</a> <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>x</mi><mn>2</mn></msup><mo>−</mo><mn>37</mn><msup><mi>y</mi><mn>2</mn></msup><mo>=</mo><mn>3</mn></mrow><annotation encoding=\"application/x-tex\">x^2-37y^2=3</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.897438em;vertical-align:-0.08333em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.008548em;vertical-align:-0.19444em;\"></span><span class=\"mord\">3</span><span class=\"mord\">7</span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">y</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">3</span></span></span></span>. </p>\n<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> you mentioned my choice of Kata questions. Elementary number theory is a great source of questions which are easy to state but can be very hard to prove. I am just trying to come up with kata for which you have to know some number theory techniques in order to do the maths, and then there's still a challenge of formalising it in Lean within the time limit (16 seconds sounds like a lot but I am not convinced that their test servers have got too many cores...).</p>",
        "id": 194740379,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587421037
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/113488-general/topic/Invitation.20to.20join.20the.20Codewars.20Lean.20community.2C.20Round.202/near/194739577\" title=\"#narrow/stream/113488-general/topic/Invitation.20to.20join.20the.20Codewars.20Lean.20community.2C.20Round.202/near/194739577\">said</a>:</p>\n<blockquote>\n<p>X = search engines?</p>\n</blockquote>\n<p>To be fair, you can learn more about search engines using search engines</p>",
        "id": 194746563,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587426341
    },
    {
        "content": "<p>If I learned anything from the IT Crowd it's that you'd don't want to type Google in Google</p>",
        "id": 194747269,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1587426995
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> To be honest I feel a bit trolled by your katas. It's probably a difference in mentality, but I almost never do formal maths problems where I don't already more or less know the answer in regular maths. For me the interesting challenge is in figuring out how to structure that understanding into something that the computer will like. In programming katas I would think it is the same way; you are given a task, and you the programmer don't have any trouble understanding the task but your job is making the computer understand it too.</p>\n<p>With your maths puzzles, it's more like solving a Putnam problem, followed by a formalization problem. Which is fine as far as it goes, but somehow doesn't feel like \"what I signed up for\". My ability to come up with a good formal proof now depends on also coming up with the right mathematics, and here I don't think I can beat the many hundreds of years of effort already spent in this direction by others. Now I'm sure that most of this is your intent, I know you like maths puzzles like this, but I wonder whether it would be better to offer a solution or at least a pointer to where someone can learn the necessary tricks to solve the maths part of the problem to return the focus to the coding part (on a site like Codewars).</p>",
        "id": 194749199,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587428715
    },
    {
        "content": "<p>Here's an <a href=\"https://www.codewars.com/kata/5e9e9f39c58d260016b53116\" title=\"https://www.codewars.com/kata/5e9e9f39c58d260016b53116\">easy kata on continuous functions</a></p>",
        "id": 194768494,
        "sender_full_name": "Donald Sebastian Leung",
        "timestamp": 1587454038
    },
    {
        "content": "<p>Mario I completely agree with what you're saying, it is not at all clear how to do these hard number theory questions in maths. The reason I'm setting them is simply because as someone with a background in number theory and in Olympiad training as well as some Lean knowledge I am in a good position to be able to write Kata of this form. I can quite imagine that people like you will find them extremely hard for non-lean reasons but fortunately there are 40 Lean Kata out there not set by me and you can stick to them. I'm just offering something completely different because I know there are professional mathematicians out there who look at Putnam and IMO problems when they come out, and might be tempted to look at these too. You can often find the maths solutions by googling, and for the ones you can't perhaps a stackexchange question will appear or whatever. I'm intentionally offering something different, intended to appeal to different people to the usual.</p>",
        "id": 194770499,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587455704
    },
    {
        "content": "<p>By the way, I didn't want to suggest that I can't do them, I have some math competition background too ;) But I would not be surprised if your kata have extremely low solve rates, because you are probably targeting the wrong audience (which is to say, a different audience than the one that frequents the Codewars site).</p>",
        "id": 194771375,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587456296
    },
    {
        "content": "<p>I was specifically aiming for low solve rates</p>",
        "id": 194771577,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587456456
    },
    {
        "content": "<p>I have already been moaning on Twitter that someone other than me solved the 5^5^5^5^5 question</p>",
        "id": 194771667,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587456514
    },
    {
        "content": "<p>indeed, you might even be targeting a demographic that almost doesn't exist, namely people who are good at both maths and theorem provers</p>",
        "id": 194771684,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587456534
    },
    {
        "content": "<p>That's exactly what I'm doing</p>",
        "id": 194771707,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587456549
    },
    {
        "content": "<p>I totally agree that if I were the only person setting Lean Kata then this would be a terrible idea</p>",
        "id": 194771747,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587456580
    },
    {
        "content": "<p>is this a job application in disguise? :D</p>",
        "id": 194771802,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587456610
    },
    {
        "content": "<p>But to be honest the kind of Kata that annoy me are the ones which have no maths in at all beyond elementary school but which you can't solve with dec_trivial because it takes too long. There are far far more of these</p>",
        "id": 194771876,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587456692
    },
    {
        "content": "<p>I have no interest in algorithms</p>",
        "id": 194771899,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587456715
    },
    {
        "content": "<p>I think you and I Mario understand each other's interests quite well and we also are both very clear about where we diverge.</p>",
        "id": 194771977,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587456762
    },
    {
        "content": "<p>I'm not a big fan of problems that boil down to a large search. I think people gravitate to these because they think that's what computers are good for</p>",
        "id": 194771982,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587456768
    },
    {
        "content": "<p>I am happy to solve those in a CAS and worry about proving correctness of the CAS later</p>",
        "id": 194772040,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587456823
    },
    {
        "content": "<p>I guess as a side comment, my kata statements would be trivial to translate into e.g. Coq, but to get them onto Codewars you'll have to offer a Coq solution so you'll have to find a Coq version of me, and encouraging a Coq version of me to exist would be something else that I'd consider a step in the right direction.</p>",
        "id": 194772628,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587457257
    },
    {
        "content": "<p>As well as aiming for low solve rates I'm aiming to make a broader class of Kata than I'm seeing in the other languages</p>",
        "id": 194773383,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587457787
    },
    {
        "content": "<p>I see that we now have 51 Lean Kata in total.</p>\n<p>I saw someone moaning (on the codewars gitter chat maybe?) a week or two ago that it was silly to support all these obscure beta languages which had &lt; 100 kata, and at the time it occurred to me that perhaps Lean would end up as one of those languages. But 50 is a respectable number and it would be great to get it up to 100. If anyone has any quirky little maths questions which they have solved themselves in Lean and would like to see as a kata, they should feel free to get in touch with me and I can stick it up on the site and give them attribution. I am typically solving one kata a day at the minute, in the evenings after my day job is done; yesterday I proved that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>S</mi><msub><mi>L</mi><mn>2</mn></msub><mo stretchy=\"false\">(</mo><mi mathvariant=\"double-struck\">N</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">SL_2(\\mathbb{N})</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.05764em;\">S</span><span class=\"mord\"><span class=\"mord mathdefault\">L</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathbb\">N</span></span><span class=\"mclose\">)</span></span></span></span> was a free monoid on 2 generators in Lean (modulo an application of Euclid's algorithm which is left implicit in the question).</p>",
        "id": 195030254,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587629992
    },
    {
        "content": "<p>I just saw on Twitter that (a) Coq just moved from beta to stable in codewars, (b) Coq has been on Codewars for nearly a year and (c) they have 74 Coq kata in total.</p>",
        "id": 195068403,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587651990
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"243312\">@Jason KY.</span> I published your kata on limits of sequences in a metric space <a href=\"https://www.codewars.com/kata/5ea1f341014f0c0001ec7c5e\" title=\"https://www.codewars.com/kata/5ea1f341014f0c0001ec7c5e\">here</a>. It was more of a hassle than I had expected: I needed to do a <code>letI</code> dance in <code>Preloaded</code>, and an <code>@</code> dance in the test case, because the question involved a typeclass.</p>",
        "id": 195112346,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587672142
    },
    {
        "content": "<p>Thank you for publishing it! :D</p>",
        "id": 195112467,
        "sender_full_name": "Jason KY.",
        "timestamp": 1587672222
    }
]