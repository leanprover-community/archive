[
    {
        "content": "<p>has support for lean3 disappeared completely from the lean community website? (lean3 installation instructions, online version, etc)</p>",
        "id": 388858762,
        "sender_full_name": "Stavros",
        "timestamp": 1693772333
    },
    {
        "content": "<p>No, the old site is still there at <a href=\"https://leanprover-community.github.io/lean3/\">https://leanprover-community.github.io/lean3/</a></p>",
        "id": 388858803,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1693772375
    },
    {
        "content": "<p>There is a link on the main site landing page.</p>",
        "id": 388858820,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1693772388
    },
    {
        "content": "<p>But you should try really hard to switch to Lean 4. Lean 3 has no future at all.</p>",
        "id": 388858896,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1693772428
    },
    {
        "content": "<p>thank you. i considered switching to LEAN4 but i use LEAN for teaching undergrads, and there are some design choices in LEAN4 (e.g., elimination of begin .. end, elimination of some tactics like left/right, etc) which make it less appealing for teaching undergrads</p>",
        "id": 388859297,
        "sender_full_name": "Stavros",
        "timestamp": 1693772679
    },
    {
        "content": "<p>You can bring begin and end back. Lean 4 is flexible enough to handle that. And I don't understand what you say about left and right.</p>",
        "id": 388859376,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1693772750
    },
    {
        "content": "<p>Maybe left/right are only in Mathlib</p>",
        "id": 388859436,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1693772770
    },
    {
        "content": "<p>But even if you don't want to use Mathlib those particular tactics are trivial to write.</p>",
        "id": 388859461,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1693772798
    },
    {
        "content": "<p>Indeed they are in Mathlib: <a href=\"https://github.com/leanprover-community/mathlib4/blob/master/Mathlib/Tactic/LeftRight.lean\">https://github.com/leanprover-community/mathlib4/blob/master/Mathlib/Tactic/LeftRight.lean</a></p>",
        "id": 388859511,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1693772837
    },
    {
        "content": "<p>thanks. how do i \"bring begin and end back\"?</p>",
        "id": 388859659,
        "sender_full_name": "Stavros",
        "timestamp": 1693772947
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/lean4/blob/master/tests/lean/beginEndAsMacro.lean\">https://github.com/leanprover/lean4/blob/master/tests/lean/beginEndAsMacro.lean</a></p>",
        "id": 388860179,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1693773412
    },
    {
        "content": "<p>More generally, undergrad teaching is a rather important target for Lean, and Lean 4 is meant to be better than Lean 3 also for this (or least is meant to become better). So feel free to tell us more about what you need. There is a whole stream devoted to using <a href=\"#narrow/stream/187764-Lean-for-teaching\">Lean for teaching</a>.</p>",
        "id": 388860355,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1693773546
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"534025\">@Stavros</span> I just tell students that it's now called <code>by ... done</code>. The advantage of <code>done</code> is that if you're not done, then the error is on <code>done</code>, which is far easier or a beginner to spot than an error on <code>by</code>.</p>",
        "id": 388860537,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1693773704
    },
    {
        "content": "<p>If I were an undergrad student and were supposed to learn how to use some tool, I would want to use it the way that its community uses it. I wouldn't enjoy being taught Lean 3 if ppl are already using Lean 4. And I wouldn't want to be taught some different syntax when the community has already moved on</p>",
        "id": 388872159,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1693783529
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"451983\">Arthur Paulino</span> <a href=\"#narrow/stream/113488-general/topic/lean3.20support/near/388872159\">said</a>:</p>\n<blockquote>\n<p>If I were an undergrad student and were supposed to learn how to use some tool, I would want to use it the way that its community uses it. I wouldn't enjoy being taught Lean 3 if ppl are already using Lean 4. And I wouldn't want to be taught some different syntax when the community has already moved on</p>\n</blockquote>\n<p>true, but the purpose of my course is not to teach LEAN. the purpose is to teach formal specification and software verification to 2nd year undergraduate students. lean is just a means to an end. not an end in itself. </p>\n<p>in terms of language simplicity, lean4 in my view is a step backwards in terms of making this technology as accessible as possible to 2nd year undergraduates. in terms of installation simplicity, lean has always been more difficult than coq. compare the nightmare of lean installation to the simplicity of coq installation.</p>",
        "id": 388872976,
        "sender_full_name": "Stavros",
        "timestamp": 1693784336
    },
    {
        "content": "<p>Honest question: what do you feel is complicated about Lean 4 installation? Asking so we can consider improvements.</p>",
        "id": 388873256,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1693784623
    },
    {
        "content": "<p>Coq is also much older. Probably like two decades older?</p>\n<p>My take on Jireh's question: Rust has a close to ideal setup. It takes a 1-liner command on terminal to install basically everything needed. Then there's also a centralized host for packages and people can add dependencies by their names. Going in the direction of Rust setup would be a good target IMO.</p>\n<p>Imagine the following:</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>$ lake new foo\n$ cd foo\n$ lake add mathlib\n</code></pre></div>",
        "id": 388873631,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1693784962
    },
    {
        "content": "<p>If you already have <code>git</code> / <code>curl</code> / VS Code installed, then installing Lean just consists of:</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>curl<span class=\"w\"> </span>https://raw.githubusercontent.com/leanprover/elan/master/elan-init.sh<span class=\"w\"> </span>-sSf<span class=\"w\"> </span><span class=\"p\">|</span><span class=\"w\"> </span>sh\n</code></pre></div>\n<p>and</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>code<span class=\"w\"> </span>--install-extension<span class=\"w\"> </span>leanprover.lean4\n</code></pre></div>",
        "id": 388873861,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1693785172
    },
    {
        "content": "<p>And then</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">lake</span> <span class=\"n\">new</span> <span class=\"n\">my_project</span> <span class=\"n\">math</span>\n</code></pre></div>\n<p>for a new project.</p>",
        "id": 388873959,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1693785267
    },
    {
        "content": "<p><code>lake add mathlib4</code> is probably a good idea!</p>",
        "id": 388873991,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1693785291
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"197836\">Jireh Loreaux</span> <a href=\"#narrow/stream/113488-general/topic/lean3.20support/near/388873256\">said</a>:</p>\n<blockquote>\n<p>Honest question: what do you feel is complicated about Lean 4 installation? Asking so we can consider improvements.</p>\n</blockquote>\n<p>sorry, i was primarily referring to lean3. although i vaguely remember trying to install lean4 about 1 year ago and failing (and giving up). that was 1 year ago, so the situation is probably different now.</p>\n<p>btw, i'm using windows. not sure if this is the source of the complexity (it shouldn't be). but having something that runs fine, and coming 6 months later and seeing something different (squiggly blue lines where none were there, for example) is unacceptable user experience. and unforgiving student experience.</p>",
        "id": 388874118,
        "sender_full_name": "Stavros",
        "timestamp": 1693785402
    },
    {
        "content": "<p>The \"closer to ideal\" (in my opinion) would be dropping the dependency on Git and having something like a <code>lakes.io</code>. That would enable calling packages by their names more consistently.</p>\n<p><span class=\"user-mention\" data-user-id=\"534025\">@Stavros</span> Lean 4 is <em>still</em> new. We should expect even more changes for the better now that the Lean FRO is alive. If you don't want your dev environment to change, keep the toolchain file stable.</p>",
        "id": 388874577,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1693785734
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> here's another thing, but I apologize upfront for recurring to the Rust setup model so often (I just find it so organized and clean).</p>\n<p>If you go to the Rust setup page, it only teaches you how to install the core of the language support. It doesn't mention particular text editors or their extensions.</p>\n<p>The Lean 4 setup seems to take the opposite path and focuses on VS Code support. A more natural order (to me!) would teach the core language setup first and then present extra tooling: extensions for VS Code, Emacs and NeoVim</p>",
        "id": 388877680,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1693787512
    },
    {
        "content": "<p>I don't think this is a good idea. Using Lean for anything beyond \"hello world\" requires an editor with LSP support.</p>",
        "id": 388878501,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1693787917
    },
    {
        "content": "<p>Yes, and that can be explicitly mentioned. It's just that the order in which things are presented influences on how people understand the structure of what they're installing on their machines.</p>\n<p>If the instructions start with the extension, I imagine \"is Lean 4 a VS code extension?\". Then I see a command to install the backend (the language server) and all of a sudden it feels backwards</p>\n<p>Note that I am trying to make an effort to see this through the eyes of someone who has no preconceived ideas about the Lean 4 development environment</p>",
        "id": 388888764,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1693792476
    },
    {
        "content": "<p>There are two conflicting things going on here:</p>\n<ul>\n<li>we have users who would prefer (or we would prefer) not to use the command line</li>\n<li>we have users who very much understand the command line, and would like to know what is happening</li>\n</ul>\n<p>For non-command line users, the instructions:</p>\n<ul>\n<li>install VSCode</li>\n<li>install the Lean4 extension</li>\n<li>click OK in a dialogue asking if you want to install Lean4<br>\nhas a certain appeal!</li>\n</ul>",
        "id": 388893531,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1693795106
    },
    {
        "content": "<p>Often that second path is best even for the command line users, as otherwise they often start asking how to run lean non-interactively from the command line, and we have to explain how much harder this will make learning the language.</p>",
        "id": 388895459,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1693796262
    },
    {
        "content": "<p>(which is to say, we likely lose some of these users immediately post-installation)</p>",
        "id": 388895573,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1693796304
    },
    {
        "content": "<p>The issue with the install through VSCode path is that it doesn't play nice with getting the cache.</p>",
        "id": 388896132,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1693796626
    },
    {
        "content": "<p>I will say an idea because I don't think it's too radical: a mathlib vs code extension. It could do pretty much everything with buttons, from installing Lean 4, to downloading mathlib to getting the cache. Also: performing Git operations, running tests, linters, synchronizing <code>Mathlib.lean</code> etc etc</p>",
        "id": 388897451,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1693797349
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/113488-general/topic/lean3.20support/near/388896132\">said</a>:</p>\n<blockquote>\n<p>The issue with the install through VSCode path is that it doesn't play nice with getting the cache.</p>\n</blockquote>\n<p>This is something we are looking forward to fixing by getting <code>lake</code> and <code>cache</code> fast enough that we can just invoke <code>cache get</code> on every <code>lake build</code>, so users don't need to think about it.</p>",
        "id": 388898487,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1693797892
    },
    {
        "content": "<p>But we're not quite there.</p>",
        "id": 388898490,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1693797897
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"534025\">Stavros</span> <a href=\"#narrow/stream/113488-general/topic/lean3.20support/near/388872976\">said</a>:</p>\n<blockquote>\n<p>in terms of language simplicity, lean4 in my view is a step backwards in terms of making this technology as accessible as possible to 2nd year undergraduates.</p>\n</blockquote>\n<p>I must say Stavros has a point here. Lean 4 syntax is less forgiving, <code>refine</code> and <code>have</code> complain when they can't figure out metavariables instead of making them new goals (this is particularly harmful when figuring out a proof), error squiggles are often not placed where you would modify the proof to fix them, it's hard to know what to hover to see the info you want, etc...</p>",
        "id": 388914097,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1693807274
    },
    {
        "content": "<p>And those observations are corroborated by the level of questions asked by beginners at Lean workshops: they are much more basic now that we're on Lean 4 than when we we're in Lean 3.</p>",
        "id": 388914271,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1693807359
    },
    {
        "content": "<blockquote>\n<p><code>refine</code> and <code>have</code> complain when they can't figure out metavariables instead of making them new goals (this is particularly harmful when figuring out a proof)</p>\n</blockquote>\n<p>you can use <code>refine'</code> and <code>have'</code> , these are core tactics intended for the purpose</p>",
        "id": 388914529,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1693807516
    },
    {
        "content": "<blockquote>\n<p>error squiggles are often not placed where you would modify the proof to fix them</p>\n</blockquote>\n<p>I assume you are thinking of something specific for this</p>",
        "id": 388914649,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1693807577
    },
    {
        "content": "<p>As always, the answer to all of these problems is to come up with a particular (specific) solution and propose it in an RFC issue on lean 4</p>",
        "id": 388914870,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1693807692
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113488-general/topic/lean3.20support/near/388914529\">said</a>:</p>\n<blockquote>\n<p>you can use <code>refine'</code> and <code>have'</code> , these are core tactics intended for the purpose</p>\n</blockquote>\n<p>Okay but:</p>\n<ul>\n<li>You yourself said that you were hoping to kill them all in one fell swoop. Is that not on the roadmap anymore?</li>\n<li>Those tactics actually suffer the same problem that, when typeclass inference is stuck on a metavariable, they don't create new goals for the type and its typeclass assumptions, but instead fail and don't let me see the goal.</li>\n</ul>",
        "id": 388915235,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1693807896
    },
    {
        "content": "<p>The squiggle problem I'm thinking of typically appears when you use a focusing dot. If the focused goal isn't solved, the squiggle appears on the dog, which is not where you would modify the proof to finish off the focused goal! I appreciate that there's no closing curly bracket to put the squiggle on anymore, but I'd think that squiggling the last line of the focused goal is strictly better than squiggling the focusing dot.</p>",
        "id": 388915684,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1693808123
    },
    {
        "content": "<p>This is why I am constantly telling people to use <code>done</code> -- it solves that problem. The same issue existed in Lean 3 but people didn't notice it because <code>end</code> was compulsary whereas <code>done</code> is not.</p>",
        "id": 388917061,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1693808777
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span> Here's a frown operator for expressing displeasure about synthesis failure while at the same time turning failures into plain metavariables.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Fintype.Card</span>\n\n<span class=\"kn\">section</span>\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Elab</span> <span class=\"n\">Term</span> <span class=\"n\">Meta</span>\n\n<span class=\"sd\">/-- `:-( t` elaborate `t` but turn all synthesis problems into metavariables. -/</span>\n<span class=\"n\">syntax</span> <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"n\">frown</span><span class=\"o\">)</span> <span class=\"s2\">\":-( \"</span> <span class=\"n\">term</span> <span class=\"o\">:</span> <span class=\"n\">term</span>\n\n<span class=\"kd\">@[term_elab frown]</span>\n<span class=\"kd\">def</span> <span class=\"n\">elabFrown</span> <span class=\"o\">:</span> <span class=\"n\">TermElab</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">stx</span> <span class=\"n\">expectedType</span><span class=\"bp\">?</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"n\">withTheReader</span> <span class=\"n\">Term.Context</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">ctx</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">{</span> <span class=\"n\">ctx</span> <span class=\"k\">with</span> <span class=\"n\">ignoreTCFailures</span> <span class=\"o\">:=</span> <span class=\"n\">true</span> <span class=\"o\">})</span> <span class=\"k\">do</span>\n    <span class=\"n\">withSynthesize</span> <span class=\"k\">do</span>\n      <span class=\"k\">let</span> <span class=\"n\">e</span> <span class=\"bp\">←</span> <span class=\"n\">Term.elabTerm</span> <span class=\"n\">stx</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">]</span> <span class=\"n\">expectedType</span><span class=\"bp\">?</span>\n      <span class=\"n\">synthesizeSyntheticMVars</span> <span class=\"o\">(</span><span class=\"n\">mayPostpone</span> <span class=\"o\">:=</span> <span class=\"n\">false</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ignoreStuckTC</span> <span class=\"o\">:=</span> <span class=\"n\">true</span><span class=\"o\">)</span>\n      <span class=\"n\">return</span> <span class=\"n\">e</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">refine'</span> <span class=\"n\">_</span> <span class=\"bp\">+</span> <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"n\">_</span>\n  <span class=\"c\">/-</span>\n<span class=\"cm\">  typeclass instance problem is stuck, it is often due to metavariables</span>\n<span class=\"cm\">  HAdd ?m.1578 ?m.1579 ?m.1588</span>\n<span class=\"cm\">  -/</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">refine'</span> <span class=\"o\">:</span><span class=\"bp\">-</span><span class=\"o\">(</span> <span class=\"n\">_</span> <span class=\"bp\">+</span> <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"n\">_</span>\n  <span class=\"c\">/-</span>\n<span class=\"cm\">  case refine'_1</span>\n<span class=\"cm\">  ⊢ ?refine'_4</span>\n<span class=\"cm\">  case refine'_2</span>\n<span class=\"cm\">  ⊢ ?refine'_5</span>\n<span class=\"cm\">  case refine'_3</span>\n<span class=\"cm\">  ⊢ ?refine'_7</span>\n<span class=\"cm\">  case refine'_4</span>\n<span class=\"cm\">  ⊢ Type ?u.1896</span>\n<span class=\"cm\">  case refine'_5</span>\n<span class=\"cm\">  ⊢ Type ?u.1895</span>\n<span class=\"cm\">  case refine'_6</span>\n<span class=\"cm\">  ⊢ HAdd ?refine'_4 ?refine'_5 ?refine'_7</span>\n<span class=\"cm\">  case refine'_7</span>\n<span class=\"cm\">  ⊢ Type ?u.1894</span>\n<span class=\"cm\">  -/</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">True</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span><span class=\"bp\">'</span> <span class=\"o\">:=</span> <span class=\"o\">:</span><span class=\"bp\">-</span><span class=\"o\">(</span> <span class=\"n\">Fintype.card</span> <span class=\"n\">α</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span>\n  <span class=\"c\">/-</span>\n<span class=\"cm\">  case refine'_2</span>\n<span class=\"cm\">  α: Type ?u.1938</span>\n<span class=\"cm\">  this: Prop</span>\n<span class=\"cm\">  ⊢ True</span>\n<span class=\"cm\">  case refine'_1</span>\n<span class=\"cm\">  α: Type ?u.1938</span>\n<span class=\"cm\">  ⊢ Fintype α</span>\n<span class=\"cm\">  -/</span>\n</code></pre></div>",
        "id": 388917291,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1693808890
    },
    {
        "content": "<p>Thanks, I love it!</p>",
        "id": 388919796,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1693809933
    },
    {
        "content": "<p>This still doesn't quite match Lean 3 behavior, where the latter wouldn't work because we know there's no <code>Fintype alpha</code> in sight. But that works for my purposes!</p>",
        "id": 388919991,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1693810032
    },
    {
        "content": "<p>Running a tactic which you know wouldn't work is definitely not lean's problem :-)</p>",
        "id": 388922056,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1693811102
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/113488-general/topic/lean3.20support/near/388915235\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113488-general/topic/lean3.20support/near/388914529\">said</a>:</p>\n<blockquote>\n<p>you can use <code>refine'</code> and <code>have'</code> , these are core tactics intended for the purpose</p>\n</blockquote>\n<p>Okay but:</p>\n<ul>\n<li>You yourself said that you were hoping to kill them all in one fell swoop. Is that not on the roadmap anymore?</li>\n</ul>\n</blockquote>\n<p>That's something else. You said that they are useful for proof exploration, and I said that I want them to not be preferred in completed mathlib proofs. Both things can be true</p>",
        "id": 389065073,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1693869593
    },
    {
        "content": "<p><code>exact?</code> is also something that is useful for writing proofs that we don't want in mathlib</p>",
        "id": 389065130,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1693869616
    },
    {
        "content": "<p>Besides, if there is a code action that automatically converts your <code>refine'</code>s into <code>refine</code>s then there is no downside to just using them and letting the computer clean up afterward</p>",
        "id": 389065190,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1693869678
    },
    {
        "content": "<p>Ah! That I can stand behind. <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 389112494,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1693894169
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"534025\">Stavros</span> <a href=\"#narrow/stream/113488-general/topic/lean3.20support/near/388874118\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"197836\">Jireh Loreaux</span> <a href=\"#narrow/stream/113488-general/topic/lean3.20support/near/388873256\">said</a>:</p>\n<blockquote>\n<p>Honest question: what do you feel is complicated about Lean 4 installation? Asking so we can consider improvements.</p>\n</blockquote>\n<p>sorry, i was primarily referring to lean3. although i vaguely remember trying to install lean4 about 1 year ago and failing (and giving up). that was 1 year ago, so the situation is probably different now.</p>\n<p>btw, i'm using windows. not sure if this is the source of the complexity (it shouldn't be). but having something that runs fine, and coming 6 months later and seeing something different (squiggly blue lines where none were there, for example) is unacceptable user experience. and unforgiving student experience.</p>\n</blockquote>\n<p>Squiggly \"blue\" lines are usually suggestions of some sort (like with simp? And exact?). They are an upgrade, not a downgrade. </p>\n<p>I am surprised to hear that coq is considered easy to install. I had to fight with coq-platform for a few days before vscoq worked without a problem and even then I had to spend a lot of time to understand how to make _CoqProject files work. </p>\n<p>Point being, even though lean has much room for improvement, I think the install and UX experience is at least somewhat subjective, and maybe there is a generation gap (where generation does not refer to age, but to the tools a person first got comfortable with when they started out, like the paper tape generation, vim/emacs generation, the atom/vscode generation, etc).</p>",
        "id": 389150034,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1693907933
    },
    {
        "content": "<p>Shreyas, there was a bug about a year ago where the extension underlined <em>everything</em> in blue, which is super annoying. I think that's probably what the OP experienced.</p>",
        "id": 389170764,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1693914704
    },
    {
        "content": "<p>About the difficulty of installation, this thread is related:<br>\n<a href=\"#narrow/stream/113488-general/topic/trylean.20bundle.20for.20lean4\">https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/trylean.20bundle.20for.20lean4</a></p>",
        "id": 389189738,
        "sender_full_name": "Miguel Marco",
        "timestamp": 1693920459
    }
]