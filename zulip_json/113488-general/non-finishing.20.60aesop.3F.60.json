[
    {
        "content": "<p>Dear All,</p>\n<p>is there a way to get <code>aesop?</code> to print the steps that it took, even when it does not close the goal?</p>\n<p>For definiteness, here is an example where I may want to know what it is that <code>aesop</code> did: can I access it?</p>\n<p>Thanks!</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">∧</span> <span class=\"n\">False</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">False</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">aesop</span><span class=\"bp\">?</span>  <span class=\"c1\">-- can I get `aesop` to show what it did to reach this state?</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 404954901,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1701294240
    },
    {
        "content": "<p>Not currently, but I should really fix this. There's no conceptual problem with this, just technical issues.</p>",
        "id": 404955328,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1701294446
    },
    {
        "content": "<p>Ok, thanks!  Of course, the reason for asking is that <code>aesop</code> works <em>so</em> well that I want to use it even when it does not close the goal, but then I would like to replace it with the steps that it took!</p>",
        "id": 404955418,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1701294496
    },
    {
        "content": "<p>I wonder if there is a way to hackily get this on the user side by adding a super low priority \"give up and sorry rule\" that only runs when all other goals are exhausted, then <code>aesop</code> would always (\"succeed\")</p>",
        "id": 404956049,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1701294839
    },
    {
        "content": "<p>Are you thinking of something like wrapping <code>aesop</code> in <code>aesop &lt;;&gt; sorry</code>? EDITED.</p>",
        "id": 404956313,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1701294958
    },
    {
        "content": "<p><del>Ah, maybe this would backtrack, so I guess not this!</del></p>",
        "id": 404956412,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1701294981
    },
    {
        "content": "<p>I mean like this</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Aesop</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">aesop</span> <span class=\"mi\">1</span><span class=\"bp\">%</span> <span class=\"n\">unsafe</span> <span class=\"n\">apply</span><span class=\"kd\">]</span>\n<span class=\"kd\">def</span> <span class=\"n\">sooryeh</span> <span class=\"o\">{</span><span class=\"n\">A</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">trace.aesop</span> <span class=\"n\">true</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">∧</span> <span class=\"n\">False</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">False</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">aesop</span><span class=\"bp\">?</span> <span class=\"c1\">-- can I get `aesop` to show what it did to reach this state?</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 404962767,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1701297873
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"127136\">@Alex J. Best</span> this is a wonderful idea, thanks!</p>",
        "id": 404963563,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1701298273
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"127136\">@Alex J. Best</span> I agree this is brilliant. Maybe one can refine it with a variant of <code>sorry</code> that logs the goal state and then uses <code>sorry</code>.</p>",
        "id": 407912121,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1702544267
    }
]