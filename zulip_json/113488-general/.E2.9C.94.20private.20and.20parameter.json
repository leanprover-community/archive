[
    {
        "content": "<p>Consider this mwe</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">section</span>\n<span class=\"kd\">parameters</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n<span class=\"kn\">include</span> <span class=\"n\">α</span>\n\n<span class=\"kn\">private</span> <span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span> <span class=\"n\">α</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">foo</span> <span class=\"c\">/-</span><span class=\"cm\"> foo : Type -/</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span> <span class=\"n\">foo</span> <span class=\"c1\">-- OK</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">exact</span> <span class=\"n\">foo</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">invalid type ascription, term has type</span>\n<span class=\"cm\">  Type → Type</span>\n<span class=\"cm\">but is expected to have type</span>\n<span class=\"cm\">  Type</span>\n<span class=\"cm\">state:</span>\n<span class=\"cm\">α : Type</span>\n<span class=\"cm\">⊢ Type</span>\n<span class=\"cm\">-/</span>\n\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>Lean seems  to revert the parameters when private defs or lemmas are used in a tactic block.<br>\nIt successfully compiles if <code>private</code> is removed. Is it really the case or am I missing something?</p>",
        "id": 255158422,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1632802047
    },
    {
        "content": "<p>Given that using either <code>parameters</code> or <code>private</code> is discouraged, I'm not too surprised if there are bad interactions that haven't been noticed. :-(</p>",
        "id": 255158655,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1632802248
    },
    {
        "content": "<p>This is a known issue with parameters even without the <code>private</code>: parameters don't work inside tactics (they act like <code>variables</code> instead)</p>",
        "id": 255158764,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1632802366
    },
    {
        "content": "<p>It works fine for me without the <code>private</code> though.<br>\nWhy are they discouraged? And can I find anywhere a list of best practices or such?<br>\nThe community website seems to only contain subjects about style.</p>",
        "id": 255159320,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1632802859
    },
    {
        "content": "<p>the implementation of <code>parameter</code> in lean 3 is rather brittle and is unlikely to change with lean 4 on the horizon</p>",
        "id": 255159403,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1632802931
    },
    {
        "content": "<p>the usual style in mathlib is to just use <code>variables</code> and pass the variable as needed in dependent definitions</p>",
        "id": 255159435,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1632802977
    },
    {
        "content": "<p>(using implicit arguments helps with this)</p>",
        "id": 255159451,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1632802996
    },
    {
        "content": "<p>You can mimic the operation of <code>parameter</code> by defining local notations like <code>local notation `foo` := foo α</code></p>",
        "id": 255159554,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1632803079
    },
    {
        "content": "<p>If you want to use <code>parameter</code> anyway, I would suggest just passing the <code>α</code> argument when it asks you to</p>",
        "id": 255159660,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1632803177
    },
    {
        "content": "<p>Oh, I see. Thanks!<br>\nAnd how about <code>private</code>? Why is it discouraged as well?<br>\nI sometimes have some helper lemmas that needed to be defined, but the statement itself seems too subtle to be exposed as exports.</p>",
        "id": 255160010,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1632803551
    },
    {
        "content": "<p>It's just the usual problem with deciding that \"it's too subtle to be exposed\" --- someone later will come to a different conclusion, and have to jump through hoops and suffer if you made it private.</p>",
        "id": 255160290,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1632803831
    },
    {
        "content": "<p>Alright, I will export them I guess.<br>\nThanks as well!</p>",
        "id": 255160428,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1632803999
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"439483\">Andrew Yang</span> has marked this topic as resolved.</p>",
        "id": 255160431,
        "sender_full_name": "Notification Bot",
        "timestamp": 1632804001
    },
    {
        "content": "<p>Other reasons to discourage <code>private</code> [edited after the fact]:</p>\n<ul>\n<li>You cannot <code>#print</code> or <code>#check</code> them</li>\n<li>You cannot easily copy-paste a declaration that uses a private declaration to a new file (maybe you want to mimic/simplify the proof)</li>\n<li>Metaprogramming on private declarations is annoying, since you cannot find them with <code>get_decl</code>.</li>\n<li>If you are reading a proof on Github, you might want to search the documentation for a lemma used in the proof. This will fail if the lemma is private.</li>\n</ul>",
        "id": 255174835,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1632814801
    }
]