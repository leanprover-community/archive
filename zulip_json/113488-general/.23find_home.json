[
    {
        "content": "<p>How hard is it to write a <code>#find_home</code> tactic so that</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">myStuff</span> <span class=\"o\">:</span> <span class=\"n\">bla</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">proof</span>\n\n<span class=\"bp\">#</span><span class=\"n\">find_home</span> <span class=\"n\">bla</span>\n</code></pre></div>\n<p>gives a list of files where <code>myStuff</code> could live.</p>\n<p>In other words: find all the direct dependencies of <code>myStuff</code>. Figure out in which modules they live. Calculate a list (amongst all imported modules) of minimal modules that import all those prerequisites.</p>",
        "id": 372480308,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1688539331
    },
    {
        "content": "<p>What does the <code>home</code> in <code>#find_home</code> mean? Maybe something like <code>#find_uses</code> or <code>#print direct_dependents</code> might be clearer</p>",
        "id": 372489852,
        "sender_full_name": "Niels Voss",
        "timestamp": 1688542253
    },
    {
        "content": "<p>No, it's about finding a good home for a lemma.</p>",
        "id": 372490227,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1688542337
    },
    {
        "content": "<p>Suppose I'm in a file about manifolds, and I realise there is a lemma missing about topological spaces. So I write that lemma in the file that I'm currently working. But it shouldn't stay there. It should move to a file about topological spaces. But there are dozens of those. So which one is good? This command should give me a list of suitable candidate files.</p>",
        "id": 372490547,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1688542406
    },
    {
        "content": "<p>Oh nevermind I misinterpreted what you wrote. I thought you wanted to print a list of places where a <code>lemma</code> was used.</p>",
        "id": 372493924,
        "sender_full_name": "Niels Voss",
        "timestamp": 1688543282
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/5731\">#5731</a></p>",
        "id": 372553010,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1688555975
    },
    {
        "content": "<p>Is it a known issue that when terms have a <code>._proof_N</code> term, then it will pretty much malfunction by default?</p>",
        "id": 387115319,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1692893214
    },
    {
        "content": "<p>It is now, thanks! :-)</p>",
        "id": 387169534,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1692915360
    },
    {
        "content": "<p>Sorry, this was never tested much. I guess we need something like <a href=\"https://github.com/semorrison/lean-training-data/blob/master/scripts/premises.lean#L22\">https://github.com/semorrison/lean-training-data/blob/master/scripts/premises.lean#L22</a>, which has a variant of <code>findUsedConstants</code> that will unfold some class of constants it finds.</p>",
        "id": 387169770,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1692915501
    },
    {
        "content": "<p>I'm going to hope for now that someone else is interested in fixing this. If nothing happens I'll try to come back later!</p>",
        "id": 387169873,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1692915600
    }
]