[
    {
        "content": "<p>Here's a MWE of an interesting bug in Lean 3:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n\n<span class=\"kn\">include</span> <span class=\"n\">ha</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">ex</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">error:</span>\n<span class=\"cm\">kernel failed to type check declaration 'ex' this is usually due to a buggy tactic or a bug in the builtin elaborator</span>\n<span class=\"cm\">elaborated type:</span>\n<span class=\"cm\">  a = a → ℕ → ∀ (a : ℕ), a = a</span>\n<span class=\"cm\">elaborated value:</span>\n<span class=\"cm\">  λ (ha : a = a) (a a : ℕ), rfl</span>\n<span class=\"cm\">nested exception message:</span>\n<span class=\"cm\">failed to add declaration to environment, it contains local constants</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>",
        "id": 291327991,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1659102102
    },
    {
        "content": "<p>I think the conditions are:</p>\n<ul>\n<li>two <code>variables</code>, one depending on another</li>\n<li>the dependent one is <code>include</code>d, transitively <code>include</code>ing its dependency</li>\n<li>there is a local variable with the same name as the dependency</li>\n<li>the <code>include</code>d variables are not used in the declaration</li>\n</ul>",
        "id": 291328322,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1659102256
    },
    {
        "content": "<p>I assume the problem goes away if you avoid the name collision</p>",
        "id": 291328460,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1659102355
    },
    {
        "content": "<p>If I replace <code>include ha</code> with <code>include a</code>, or replace <code>ex (a : ℕ) : a = a</code> with <code>ex (b : ℕ) : b = b</code> (or <code>ex (b : ℕ) : a = a</code>), everything works.</p>",
        "id": 291328464,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1659102356
    },
    {
        "content": "<p>Probably worth making a github issue so this doesn't get forgotten</p>",
        "id": 291328810,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1659102539
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/lean/pull/751\">lean#751</a></p>",
        "id": 291329727,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1659102975
    },
    {
        "content": "<p>Here's a version without <code>include</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">foo</span> <span class=\"o\">[</span><span class=\"n\">has_add</span> <span class=\"n\">ℕ</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">true</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n<span class=\"c1\">--^ failed to add declaration to environment, it contains local constants</span>\n</code></pre></div>",
        "id": 342660056,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1679085114
    },
    {
        "content": "<p>Weirder yet:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">[</span><span class=\"n\">has_zero</span> <span class=\"n\">ℕ</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">true</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">trivial</span>  <span class=\"c1\">-- ok</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">[</span><span class=\"n\">has_one</span> <span class=\"n\">ℕ</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">true</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">trivial</span>  <span class=\"c1\">-- fails</span>\n</code></pre></div>",
        "id": 342689401,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1679100095
    },
    {
        "content": "<p>Presumably changing the order of the examples doesn't change the errors? This is a great one :-)</p>",
        "id": 342689519,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1679100173
    },
    {
        "content": "<p>Is it the same bug as Anne's above?</p>",
        "id": 342689657,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1679100260
    },
    {
        "content": "<p>Yep, changing the order make no difference</p>",
        "id": 342689664,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1679100263
    },
    {
        "content": "<p>I don't think it's quite the same, Anne gets a longer error message than I do</p>",
        "id": 342689676,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1679100277
    },
    {
        "content": "<p>Can you reproduce in lean 4?</p>",
        "id": 342689740,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1679100307
    },
    {
        "content": "<p>No</p>",
        "id": 342690170,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1679100596
    },
    {
        "content": "<p>Looks like this might be a <code>wontfix</code> then?</p>",
        "id": 342690236,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1679100621
    },
    {
        "content": "<p>As minimal as I can get it:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">prelude</span>\n<span class=\"kn\">import</span> <span class=\"n\">init.meta.tactic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">[</span><span class=\"n\">has_zero</span> <span class=\"n\">nat</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">true</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">tactic.admit</span>  <span class=\"c1\">-- ok</span>\n<span class=\"kd\">example</span> <span class=\"o\">[</span><span class=\"n\">has_one</span> <span class=\"n\">nat</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">true</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">tactic.admit</span>  <span class=\"c1\">-- fails</span>\n<span class=\"kd\">example</span> <span class=\"o\">[</span><span class=\"n\">has_add</span> <span class=\"n\">nat</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">true</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">tactic.admit</span>  <span class=\"c1\">-- fails</span>\n<span class=\"kd\">example</span> <span class=\"o\">[</span><span class=\"n\">has_mul</span> <span class=\"n\">nat</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">true</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">tactic.admit</span>  <span class=\"c1\">-- ok</span>\n<span class=\"kd\">example</span> <span class=\"o\">[</span><span class=\"n\">has_pow</span> <span class=\"n\">nat</span> <span class=\"n\">nat</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">true</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">tactic.admit</span>  <span class=\"c1\">-- ok</span>\n</code></pre></div>",
        "id": 342690525,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1679100771
    },
    {
        "content": "<p>This looks like a hashing bug of some kind</p>",
        "id": 342690564,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1679100797
    }
]