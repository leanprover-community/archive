[
    {
        "content": "<p>Once I have used  let X:=   something<br>\nand then I have a goal involving X,  how do I get X replaced by the original something?</p>",
        "id": 380893837,
        "sender_full_name": "Michael Beeson",
        "timestamp": 1690947078
    },
    {
        "content": "<p><code>dsimp [X]</code></p>",
        "id": 380893972,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1690947129
    },
    {
        "content": "<p>Yes, that worked!  TYVM!</p>",
        "id": 380894354,
        "sender_full_name": "Michael Beeson",
        "timestamp": 1690947305
    },
    {
        "content": "<p>Was there a way other than Zulip for me to have learned that?   Not mentioned in the manual where \"let\" is briefly discussed.</p>",
        "id": 380894433,
        "sender_full_name": "Michael Beeson",
        "timestamp": 1690947348
    },
    {
        "content": "<p>There was a thread on this somewhat recently: <a href=\"#narrow/stream/113488-general/topic/How.20to.20unwrap.20a.20let.20expression\">https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/How.20to.20unwrap.20a.20let.20expression</a><br>\nThere isn't really a good way to have found this information, but <code>dsimp</code> is not the only way to unfold the let expression</p>",
        "id": 380905727,
        "sender_full_name": "Niels Voss",
        "timestamp": 1690952868
    },
    {
        "content": "<p>The main difference between <code>let</code> and <code>have</code> is that when you do <code>let X := something</code> now <code>X</code> is definitionally equal to <code>something</code> so you can prove <code>X = something</code> with only <code>rfl</code></p>",
        "id": 380906118,
        "sender_full_name": "Niels Voss",
        "timestamp": 1690953026
    },
    {
        "content": "<p>Sometimes you don't even need to unfold X, since if the goal is <code>something = 37</code> then Lean will accept instead a proof that <code>X = 37</code> (in practice unfolding X often makes things simpler). I do wish this was documented somewhere though.</p>",
        "id": 380906440,
        "sender_full_name": "Niels Voss",
        "timestamp": 1690953191
    },
    {
        "content": "<p>You can also use <code>set</code>, as in <code>set X := something with hX</code>, then you will have a hypothesis <code>hX</code> in your context that says <code>X = something</code> and you can feed it to <code>rw</code>. In most cases <code>simp</code> and its friends will do the job, but this is still a useful trick sometimes.</p>",
        "id": 380961957,
        "sender_full_name": "Sophie Morel",
        "timestamp": 1690968231
    },
    {
        "content": "<p>Oops, this was already mentioned by Kevin in the linked thread. My bad.</p>",
        "id": 380962202,
        "sender_full_name": "Sophie Morel",
        "timestamp": 1690968280
    },
    {
        "content": "<p>If <a href=\"https://github.com/leanprover-community/mathlib4/pull/5717\">#5717</a> gets merged, then you'll be able to do <code>unfold_let X</code> (<a href=\"https://github.com/leanprover-community/mathlib4/pull/5717/files#diff-b9801aedd2c6c3f5f9351a1928476b8d0f232cc531ce8c2e7116187e6f1d1733R102\">docstring in PR</a>)</p>\n<p>This is like <code>dsimp</code> but it unfolds <code>X</code> without touching anything else. <code>dsimp</code> can do other reductions too.</p>",
        "id": 380969343,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1690969679
    }
]