[
    {
        "content": "<p>Now that mathlib has been finally ported, the only thing that pushes me to stay with lean3 for my general topology course is the difficulty that my students will find to install lean4+mathlib4, compared to just unpacking the trylean bundle with lean3.</p>\n<p>So I am considering creating a version of the trylean files with lean4 (which might be hard since i don't even have access to a windows or mac box). Anyways, i would need a hand. What are the steps i should follow to create it?</p>\n<p>My first idea would be to get the lean3 version, and start subsituting the components, but there might be a better approach.</p>",
        "id": 381420285,
        "sender_full_name": "Miguel Marco",
        "timestamp": 1691056227
    },
    {
        "content": "<p>Hello Miguel<br>\nAre you targeting a specific platform?</p>",
        "id": 381448623,
        "sender_full_name": "MohanadAhmed",
        "timestamp": 1691062459
    },
    {
        "content": "<p>If you're using bundles like this in a course then probably you'll have to target all the platforms because the students will have all the OSs (a maths course is unlikely to be running in a computer lab). </p>\n<p>However is it really true that it's not possible for the students to just to the <code>git clone</code> and <code>lake exe cache get</code> and <code>lake build</code> themselves?</p>\n<p>I for one would love to see this functionality being taken up by the VS code plugin. Mathematicians are in general very uneasy with the command line, for example they typically have no concept of the idea that it is running in a specific directory (or how to see or change that directory). But that's really the main problem I've had over the years. I don't think the change from lean 3 to lean 4 has made things any easier or harder.</p>",
        "id": 381451427,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1691063078
    },
    {
        "content": "<p>Ideally all of them, but the priority would be windows, since it is by far the most popular among my students.</p>",
        "id": 381451475,
        "sender_full_name": "Miguel Marco",
        "timestamp": 1691063094
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113488-general/topic/trylean.20bundle.20for.20lean4/near/381451427\">said</a>:</p>\n<blockquote>\n<p>If you're using bundles like this in a course then probably you'll have to target all the platforms because the students will have all the OSs (a maths course is unlikely to be running in a computer lab). </p>\n<p>However is it really true that it's not possible for the students to just to the <code>git clone</code> and <code>lake exe cache get</code> and <code>lake build</code> themselves?</p>\n<p>I for one would love to see this functionality being taken up by the VS code plugin. Mathematicians are in general very uneasy with the command line, for example they typically have no concept of the idea that it is running in a specific directory (or how to see or change that directory). But that's really the main problem I've had over the years. I don't think the change from lean 3 to lean 4 has made things any easier or harder.</p>\n</blockquote>\n<p>You are right of course. But I think it is easier to start by handling the issues on one platform, and then handle the minority cases as they come.</p>",
        "id": 381453956,
        "sender_full_name": "MohanadAhmed",
        "timestamp": 1691063589
    },
    {
        "content": "<p>I guess the issue is with the mental load:<br>\nYou need :</p>\n<ol>\n<li>Git (It also better to have a github account)</li>\n<li>VS Code (VS code gets you elan and elan gets you lean)</li>\n<li>Then you need <code>lake new</code> or 'lake init`</li>\n<li>Then you need <code>lake exe cache get</code></li>\n<li>Then lean takes some time to start up and you are not sure if you made a mistake or it is working.</li>\n</ol>\n<p>Also, if any step has a problem, a newcomer is not sure where they made the mistake.</p>",
        "id": 381455699,
        "sender_full_name": "MohanadAhmed",
        "timestamp": 1691063946
    },
    {
        "content": "<p>What I am trying to say is I see the value of a \"turn key\" type solution where you just unpack stuff and get to lean</p>",
        "id": 381455971,
        "sender_full_name": "MohanadAhmed",
        "timestamp": 1691064001
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113488-general/topic/trylean.20bundle.20for.20lean4/near/381451427\">said</a>:</p>\n<blockquote>\n<p>However is it really true that it's not possible for the students to just to the <code>git clone</code> and <code>lake exe cache get</code> and <code>lake build</code> themselves?<br>\n</p>\n</blockquote>\n<p>It deppends on what you mean by \"possible\". Given enough time spent both by me and them, eventually they would get it, but since this is not the main goal of the course (with already limited time available) , but just a small side experiment, we cannot afford to spend that time.</p>\n<p>Also, the problem is not only the use of command line (which is a problem in itself, but could be worth getting them used to it), but the many steps that they have to follow. If I tell them to follow the following multi-step process:</p>\n<ul>\n<li>Install vscode (which involves both downloading and running the installer)</li>\n<li>Install git for windows (again, download, install, configure..)</li>\n<li>Install the lean4 extension for vscode</li>\n<li>open the terminal and run<ul>\n<li>git clone</li>\n<li>lake exe cache get</li>\n</ul>\n</li>\n</ul>\n<p>they would probably feel overwhelmed, and maybe start with a negative feeling towards lean (or at least, a first impression consisting in \"it is a complicated thing\").</p>\n<p>On the other hand, if i just tell them: \"download this, unzip it, and you are done\", they wouldn't experience such a friction, and would probably start using lean with a first impression of \"it is basically like every other software we are used to\".</p>",
        "id": 381458255,
        "sender_full_name": "Miguel Marco",
        "timestamp": 1691064414
    },
    {
        "content": "<p>Both <code>Git</code> and <code>VSCode</code> support portable Mode with extensions inside the VSCode folder. The part that is missing for me is how to tell <code>vscode-lean</code> extension: \"Hey, Elan, lake and lean are in this location don't try to download\"</p>",
        "id": 381460106,
        "sender_full_name": "MohanadAhmed",
        "timestamp": 1691064796
    },
    {
        "content": "<p>I guess the two other possibilities are gitpod and codespaces. In my IISc repo <a href=\"https://github.com/kbuzzard/IISc-experiments\">https://github.com/kbuzzard/IISc-experiments</a> I made some notes to self in the README explaining how I set both of these up. In both cases you get a one click experience (assuming you have a github account I guess) which takes you to Lean running (fast) in the browser.</p>",
        "id": 381460700,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1691064899
    },
    {
        "content": "<p>How was the students experience with gitpod?</p>",
        "id": 381462273,
        "sender_full_name": "MohanadAhmed",
        "timestamp": 1691065208
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113488-general/topic/trylean.20bundle.20for.20lean4/near/381460700\">said</a>:</p>\n<blockquote>\n<p>I guess the two other possibilities are gitpod and codespaces. In my IISc repo <a href=\"https://github.com/kbuzzard/IISc-experiments\">https://github.com/kbuzzard/IISc-experiments</a> I made some notes to self in the README explaining how I set both of these up. In both cases you get a one click experience (assuming you have a github account I guess) which takes you to Lean running (fast) in the browser.</p>\n</blockquote>\n<p>I considered that too, but I don't like the idea of \"forcing\" my students to register in an external service.</p>\n<p>In fact, I managed to integrate vscode-server with lean in the jupyterlab server that we use for other courses (now I remember that I should probably docuemnt it), so that could be a great solution... if we had enough hardware resources: right now, we have a limit of 1GB of RAM per active user, which is totally insufficient to run lean. We could rise it, but then we risk running out of memory in the server during activity peaks.</p>",
        "id": 381462730,
        "sender_full_name": "Miguel Marco",
        "timestamp": 1691065304
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"497480\">@MohanadAhmed</span> I tried gitpod and it worked fine for me; I don't know if any students actually used it</p>",
        "id": 381539914,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1691078985
    },
    {
        "content": "<p>I had some gitpod trouble on a course unrelated to lean where they ran out of free compute budget; but the end result was that we had to show a few students how to install locally near the end of the course, rather than dealing with a whole classroom of setup problems at all once</p>",
        "id": 381551750,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1691081372
    },
    {
        "content": "<p>Miguel, you are totally right that you can't hope students will follow all these steps. This is exactly why I created the Lean 3 bundles. There is no obstruction to doing it for Lean4 but they will be much larger.</p>",
        "id": 381553804,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1691081770
    },
    {
        "content": "<p>This has been discussed many times on this Zulip. Thr script creating the bundles are on github, you simply need to adapt them to Lean 4. The painful part is to test them. You need access to (virtual) machines with every OS with a very minimal installation.</p>",
        "id": 381554757,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1691081958
    },
    {
        "content": "<p>About the size, i just tried compressing my lake-packages directory (which i guess, would be the biggest part of the bundle). It is about 1.2GB. So I guess we could get the full bundle under 2GB. It is big, but nothing extraordinary nowadays.</p>",
        "id": 381566673,
        "sender_full_name": "Miguel Marco",
        "timestamp": 1691084432
    },
    {
        "content": "<p>Lean toolchain it self is about 900MB</p>",
        "id": 381567807,
        "sender_full_name": "MohanadAhmed",
        "timestamp": 1691084710
    },
    {
        "content": "<p>added to your original 1.2GB i think it will be above 2GB</p>",
        "id": 381568435,
        "sender_full_name": "MohanadAhmed",
        "timestamp": 1691084876
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"497480\">MohanadAhmed</span> <a href=\"#narrow/stream/113488-general/topic/trylean.20bundle.20for.20lean4/near/381567807\">said</a>:</p>\n<blockquote>\n<p>Lean toolchain it self is about 900MB</p>\n</blockquote>\n<p>About 200MB when compressed.</p>",
        "id": 381592800,
        "sender_full_name": "Miguel Marco",
        "timestamp": 1691091312
    },
    {
        "content": "<p>I would just stick some stuff up and let the students test them</p>",
        "id": 381600662,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1691093748
    },
    {
        "content": "<p>Tell them you're going to do some bits of topology using a crazy computer system and you're looking for beta testers</p>",
        "id": 381600791,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1691093775
    },
    {
        "content": "<p>If you bundle a script that does <code>lake exe cache get</code>, there should be no need to bundle mathlib itself, which means it wouldn't be part of the download</p>",
        "id": 381664131,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1691121998
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"461731\">Miguel Marco</span> <a href=\"#narrow/stream/113488-general/topic/trylean.20bundle.20for.20lean4/near/381566673\">said</a>:</p>\n<blockquote>\n<p>About the size, i just tried compressing my lake-packages directory (which i guess, would be the biggest part of the bundle). It is about 1.2GB. So I guess we could get the full bundle under 2GB. It is big, but nothing extraordinary nowadays.</p>\n</blockquote>\n<p>In particular, <code>lake exe cache</code> uses a much more efficient compression than just zipping olean files. I think it would be better to run the cache download separately unless you can't rely on a network connection</p>",
        "id": 381664341,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1691122127
    },
    {
        "content": "<p>Does it only use the compressed format over the network, or store it locally too?</p>",
        "id": 381677177,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1691127190
    },
    {
        "content": "<p>you would need git installed on windows to run <code>lake exe cache get</code>right?</p>",
        "id": 381986431,
        "sender_full_name": "Miguel Marco",
        "timestamp": 1691187711
    },
    {
        "content": "<p>The installation of some tools can be automated through <code>winget</code> or another package manager (though <code>winget</code> is often not available on old computers or might not be in <code>$PATH</code>).<br>\nFor example, running <code>winget install Git.Git</code> would be much faster than downloading it manually. The same goes for <code>winget install Microsoft.VisualStudioCode</code>. Then these commands could be put into a script or listed all in one spot.</p>\n<p>I think the main disadvantage of this is that it installs a whole bunch of software that the user might not like. For example, I think it adds <code>Open in Git Bash</code> options to the right click menu, which are hard to get rid of. I also don't like the feeling of installing random programs for which I don't know what they do.</p>",
        "id": 381999370,
        "sender_full_name": "Niels Voss",
        "timestamp": 1691195082
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"461731\">Miguel Marco</span> <a href=\"#narrow/stream/113488-general/topic/trylean.20bundle.20for.20lean4/near/381986431\">said</a>:</p>\n<blockquote>\n<p>you would need git installed on windows to run <code>lake exe cache get</code>right?</p>\n</blockquote>\n<p>You shouldn't need <code>git</code> for <code>cache</code>, no.</p>",
        "id": 382080083,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1691227259
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/113488-general/topic/trylean.20bundle.20for.20lean4/near/382080083\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"461731\">Miguel Marco</span> <a href=\"#narrow/stream/113488-general/topic/trylean.20bundle.20for.20lean4/near/381986431\">said</a>:</p>\n<blockquote>\n<p>you would need git installed on windows to run <code>lake exe cache get</code>right?</p>\n</blockquote>\n<p>You shouldn't need <code>git</code> for <code>cache</code>, no.</p>\n</blockquote>\n<p>Well... it complains if i don't have git installed</p>",
        "id": 382138907,
        "sender_full_name": "Miguel Marco",
        "timestamp": 1691240754
    },
    {
        "content": "<p>Oh --- presumably your <code>lakefile</code> points to git repositories for dependencies. The error (could you show us?) is presumably coming from just <code>lake</code>, rather than from <code>cache</code>.</p>",
        "id": 382238367,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1691278306
    },
    {
        "content": "<p>If your lakefile instead pointed to local directories rather than git repositories for dependencies (is that even possible? perhaps not), then I'd hope that the <code>cache</code> step itself doesn't care about the presence of git.</p>",
        "id": 382238448,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1691278347
    },
    {
        "content": "<p>Regarding the last question, that's definitely possible. I think the syntax is something like <code>require mathlib from \"path\"/\"to\"/\"local\"/\"dependency\"</code> and I believe I once had such a setup and it worked fine with <code>lake exe cache</code></p>",
        "id": 382339828,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1691322250
    },
    {
        "content": "<p>does <code>lake exe cache get</code> work too without git?</p>",
        "id": 382341409,
        "sender_full_name": "Miguel Marco",
        "timestamp": 1691322678
    },
    {
        "content": "<p>I finally opted for including the installers of git, vscode and elan in a zip file, together with a couple of scripts to automate their installation and the setup of a project with lake. </p>\n<p>It can be downloaded from <a href=\"https://cloud.unizar.es/index.php/s/jkybmaLS3goSLLr\">https://cloud.unizar.es/index.php/s/jkybmaLS3goSLLr</a> if you want to test it</p>\n<p>To install it, it should be enough to run the <code>install_step_1.bat</code>file, and then the usual \"accept, ok...\" stuff to install programs. When it is finished, you run <code>install_step_2.bat</code> to setup the lean extension and create the new project, called <code>trylean</code>.</p>\n<p>It is still a bit more convoluted than the \"unzip and done\" approach, but I think it is less scary than following the steps by hand.</p>",
        "id": 382444323,
        "sender_full_name": "Miguel Marco",
        "timestamp": 1691358046
    },
    {
        "content": "<p>I worry that the last little bit to get it to \"double-click and click ok\" or \"just unzip\" is the essential thing missing here. Anything short of that and its yet another collection of hard to maintain scripts that some users are still going to be confused by.</p>",
        "id": 382485819,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1691379526
    },
    {
        "content": "<p>I agree the \"just unzip\" approach is the desirable one. But I tried to make it work, and wasn't able to get it. So this is my fallback option.</p>",
        "id": 382544787,
        "sender_full_name": "Miguel Marco",
        "timestamp": 1691398277
    },
    {
        "content": "<p>What was the obstacle to just unzipping? I guess it means you can't provide <code>git</code>, but I'd hope that just a portable VSCodium, and a repository with <code>require mathlib from \"path\"/\"to\"/\"local\"/\"dependency\"</code> could work.</p>",
        "id": 382554741,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1691400286
    },
    {
        "content": "<p>I tried that, but then, the first time you import something from mathlib, it tried to compile it. For some reason, it doesn't use the downloaded cache.</p>",
        "id": 382555578,
        "sender_full_name": "Miguel Marco",
        "timestamp": 1691400475
    },
    {
        "content": "<p>Ah --- that would be because the contents of the <code>lakefile</code> is hashed to determinate the validity of the cached oleans.</p>",
        "id": 382556810,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1691400706
    },
    {
        "content": "<p>So you'd have to recompile everything after changing the lakefile to have local imports, and before distributing the zip file.</p>",
        "id": 382557264,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1691400783
    },
    {
        "content": "<p>That sounds painful, but if we can get it to work we can just have CI prepare such a zip file at some interval.</p>",
        "id": 382557424,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1691400806
    },
    {
        "content": "<p>what is that hash compared against?</p>",
        "id": 382558433,
        "sender_full_name": "Miguel Marco",
        "timestamp": 1691400994
    },
    {
        "content": "<p><code>build/lib/*.trace</code></p>",
        "id": 382568795,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1691403164
    },
    {
        "content": "<p>I see, and that should match the hash (what kind of hash? it looks too short to be a md5 and too long to be a cksum) of <code>lakefile.lean</code> ?</p>",
        "id": 382572474,
        "sender_full_name": "Miguel Marco",
        "timestamp": 1691403864
    },
    {
        "content": "<p>No, it is a complicated (and unspecified) hash also of the contents of the file, and its transitive imports.</p>",
        "id": 382603205,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1691410029
    },
    {
        "content": "<p>I'm just saying you need to do a complete rebuild before zipping everything up.</p>",
        "id": 382603305,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1691410050
    },
    {
        "content": "<p>(That said, you can save a huge amount of space by compressing the oleans using Mario's <code>leangz</code> tool (in practice you would do this using the <code>cache</code> tool, I think) relative to just zipping everything.)</p>",
        "id": 382603746,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1691410125
    },
    {
        "content": "<p>(But that is something you could think about <em>after</em> getting some zip file to work at all. :-)</p>",
        "id": 382603847,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1691410145
    },
    {
        "content": "<p>I see. Would it be possible to compile it in a linux system and then copy (just the <code>lake-packages</code>directory) to windows? or the platform is also part of the hash?</p>",
        "id": 382606453,
        "sender_full_name": "Miguel Marco",
        "timestamp": 1691410679
    },
    {
        "content": "<p>It seems it must be compiled on the target platform: compiling it in linux and then copying to windows still triggers the compiling.</p>\n<p>I wonder if the specific path in the filesystem would cause recompilations too.</p>",
        "id": 382710677,
        "sender_full_name": "Miguel Marco",
        "timestamp": 1691428990
    },
    {
        "content": "<p>Is it possible to ship a modified version of lean which bypasses all the hash check of olean files?</p>",
        "id": 382719376,
        "sender_full_name": "Jz Pan",
        "timestamp": 1691431129
    },
    {
        "content": "<p>Or add a command line switch to lean which bypasses hash check</p>",
        "id": 382719555,
        "sender_full_name": "Jz Pan",
        "timestamp": 1691431182
    },
    {
        "content": "<p>Changing OS should not invalidate the oleans in any way. We only distribute one version of the oleans through <code>lake exe cache get</code>. Are you sure nothing else is changing in the directory?</p>",
        "id": 382776435,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1691449948
    },
    {
        "content": "<p>Hello <span class=\"user-mention\" data-user-id=\"461731\">@Miguel Marco</span> </p>\n<p>Here is my attempt it seems to work. I tested it on Windows 11 in a Virtual machine. So basically copy the script into a .bat file in an empty folder and then execute the script. (After a while - get a cup of coffee you should see VSCodium with a new lean project open).</p>\n<div class=\"codehilite\" data-code-language=\"Batchfile\"><pre><span></span><code><span class=\"p\">:</span><span class=\"c1\">: PrepareLean.bat</span>\n<span class=\"p\">@</span><span class=\"k\">ECHO</span> OFF\n\n<span class=\"p\">:</span><span class=\"c1\">:::::::::::::::::: Individual Components URLS:</span>\n<span class=\"p\">:</span><span class=\"c1\">: (1) 7z to extract git, (2) Git (3) VC Redistributable for Lean Tar (4) VSCodium the editor</span>\n<span class=\"p\">:</span><span class=\"c1\">: (5) Current Mathlibs Version of Lean (6) Elan Installer Script (7) Lean VSCode extension</span>\n<span class=\"k\">set</span> <span class=\"nv\">Z7Z_URL</span><span class=\"p\">=</span><span class=\"s2\">\"https://www.7-zip.org/a/7zr.exe\"</span>\n<span class=\"k\">set</span> <span class=\"nv\">GIT_URL</span><span class=\"p\">=</span><span class=\"s2\">\"https://github.com/git-for-windows/git/releases/download/v2.41.0.windows.3/PortableGit-2.41.0.3-64-bit.7z.exe\"</span>\n<span class=\"k\">set</span> <span class=\"nv\">VC_REDIST_URL</span><span class=\"p\">=</span><span class=\"s2\">\"https://aka.ms/vs/17/release/vc_redist.x64.exe\"</span>\n<span class=\"k\">set</span> <span class=\"nv\">VSCODIUM_URL</span><span class=\"p\">=</span><span class=\"s2\">\"https://github.com/VSCodium/vscodium/releases/download/1.81.0.23216/VSCodium-win32-x64-1.81.0.23216.zip\"</span>\n<span class=\"k\">set</span> <span class=\"nv\">MATHLIB_LEAN_TOOLCHAIN_URL</span><span class=\"p\">=</span><span class=\"s2\">\"https://raw.githubusercontent.com/leanprover-community/mathlib4/master/lean-toolchain\"</span>\n<span class=\"k\">set</span> <span class=\"nv\">ELAN_INSTALLER_URL</span><span class=\"p\">=</span><span class=\"s2\">\"https://raw.githubusercontent.com/leanprover/elan/master/elan-init.sh\"</span>\n<span class=\"k\">set</span> <span class=\"nv\">VSCODE_LEAN4_EXT_URL</span><span class=\"p\">=</span><span class=\"s2\">\"https://github.com/leanprover/vscode-lean4/releases/download/v0.0.108/lean4-0.0.108.vsix\"</span>\n<span class=\"p\">:</span><span class=\"c1\">: set VSCODE_URL=\"https://az764295.vo.msecnd.net/stable/6445d93c81ebe42c4cbd7a60712e0b17d9463e97/VSCode-win32-x64-1.81.0.zip\"</span>\n\n\n<span class=\"p\">:</span><span class=\"c1\">:::::::::::::::::: Download the Components</span>\ncurl -L -C - --output <span class=\"s2\">\"z7z.exe\"</span> <span class=\"nv\">%Z7Z_URL%</span>\ncurl -L -C - --output <span class=\"s2\">\"git-install.exe\"</span> <span class=\"nv\">%GIT_URL%</span>\ncurl -L -C - --output <span class=\"s2\">\"vc_redist.x64.exe\"</span> <span class=\"nv\">%VC_REDIST_URL%</span>\ncurl -L -C - --output <span class=\"s2\">\"lean-toolchain\"</span> <span class=\"nv\">%MATHLIB_LEAN_TOOLCHAIN_URL%</span>\ncurl -L -C - --output <span class=\"s2\">\"elan-init.sh\"</span> <span class=\"nv\">%ELAN_INSTALLER_URL%</span>\ncurl -L -C - --output <span class=\"s2\">\"vscodium.zip\"</span> <span class=\"nv\">%VSCODIUM_URL%</span>\ncurl -L -C - --output <span class=\"s2\">\"lean4ext.zip\"</span> <span class=\"nv\">%VSCODE_LEAN4_EXT_URL%</span>\n\n<span class=\"p\">:</span><span class=\"c1\">:::::::::::::::::: Extracting Components</span>\n\n<span class=\"p\">:</span><span class=\"c1\">: Extract Git Portable using 7zip</span>\nz7z.exe x <span class=\"s2\">\"git-install.exe\"</span> -o<span class=\"s2\">\".\\PortableGit\"</span>\n\n<span class=\"p\">:</span><span class=\"c1\">: Extract VSCodium and  Install vscode-lean4 extension</span>\n<span class=\"k\">if</span> <span class=\"k\">not</span> <span class=\"k\">exist</span> <span class=\"s2\">\"VSCodium\"</span> <span class=\"p\">(</span>\n    <span class=\"k\">mkdir</span> VSCodium\n    tar -x -f vscodium.zip -C <span class=\"s2\">\".\\VSCodium\"</span>\n<span class=\"p\">)</span>\n\n<span class=\"k\">if</span> <span class=\"k\">not</span> <span class=\"k\">exist</span> <span class=\"s2\">\"VSCodium\\leanext\"</span> <span class=\"p\">(</span>\n    <span class=\"k\">mkdir</span> VSCodium\\leanext\n    tar -x -f lean4ext.zip -C <span class=\"s2\">\".\\VSCodium\\leanext\"</span>\n    xcopy /E /I <span class=\"s2\">\".\\VSCodium\\leanext\\extension\"</span> <span class=\"s2\">\".\\VSCodium\\data\\extensions\\leanprover\"</span>\n    <span class=\"k\">rmdir</span> /S /Q <span class=\"s2\">\".\\VSCodium\\leanext\"</span>\n<span class=\"p\">)</span>\n\n<span class=\"p\">:</span><span class=\"c1\">: Use only if leantar in mathlib is 0.1.4 or less</span>\n<span class=\"p\">:</span><span class=\"c1\">: vc_redist.x64.exe /passive /quiet /norestart</span>\n\n<span class=\"p\">:</span><span class=\"c1\">: Lets get to Work!!</span>\n<span class=\"p\">:</span><span class=\"c1\">: Control Elan's location by ELAN_HOME and Cache Location by XDG_CACHE_HOME</span>\n<span class=\"p\">:</span><span class=\"c1\">:::::::::::::::::: Prepare Environment Variables and Clean Path</span>\n<span class=\"k\">set</span> <span class=\"nv\">Path</span><span class=\"p\">=</span>C:\\WINDOWS\\system32;C:\\WINDOWS;C:\\WINDOWS\\System32\\Wbem;C:\\WINDOWS\\System32\\WindowsPowerShell\\v1.0\\;<span class=\"nv\">%USERPROFILE%</span>\\AppData\\Local\\Microsoft\\WindowsApps;<span class=\"nv\">%CD%</span>;<span class=\"nv\">%CD%</span>\\PortableGit\\bin\\;<span class=\"nv\">%CD%</span>\\Elan\\bin\\\n<span class=\"k\">set</span> <span class=\"nv\">ELAN_HOME</span><span class=\"p\">=</span><span class=\"nv\">%CD%</span>\\Elan\n<span class=\"k\">set</span> <span class=\"nv\">XDG_CACHE_HOME</span><span class=\"p\">=</span><span class=\"nv\">%CD%</span>\\Cache\n<span class=\"k\">set</span> <span class=\"nv\">ELECTRON_EXTRA_LAUNCH_ARGS</span><span class=\"p\">=</span>--disable-gpu-sandbox\n<span class=\"k\">set</span> <span class=\"nv\">DEMOPROJ</span><span class=\"p\">=</span>DemoProj\n<span class=\"k\">set</span> <span class=\"k\">/p</span> <span class=\"nv\">LEAN_TOOLCHAIN_VERSION</span><span class=\"p\">=&lt;</span>lean-toolchain\n\n<span class=\"p\">:</span><span class=\"c1\">:::::::::::::::::: Installation of ELAN in Current Folder with Mathlibs Toolchain version</span>\nPortableGit\\bin\\bash.exe -c <span class=\"s2\">\"./elan-init.sh -y --no-modify-path --default-toolchain </span><span class=\"nv\">%LEAN_TOOLCHAIN_VERSION%</span><span class=\"s2\">\"</span>\n\n<span class=\"p\">:</span><span class=\"c1\">:::::::::::::::::: Create demo Project</span>\nlake new <span class=\"nv\">%DEMOPROJ%</span> math\nPortableGit\\bin\\bash.exe -c <span class=\"s2\">\"cd </span><span class=\"nv\">%DEMOPROJ%</span><span class=\"s2\"> &amp;&amp; lake update &amp;&amp; lake exe cache get\"</span>\n\n<span class=\"p\">:</span><span class=\"c1\">:::::::::::::::::: Star New Project in VSCodium</span>\nVSCodium\\VSCodium.exe <span class=\"nv\">%DEMOPROJ%</span>\n</code></pre></div>",
        "id": 382780255,
        "sender_full_name": "MohanadAhmed",
        "timestamp": 1691452198
    },
    {
        "content": "<p>Basically the script:</p>\n<ol>\n<li>Downloads:<p>- <code>7z.exe</code>: used to expand the Portable Git archive.<br>\n   - Portable Git<br>\n   - VSCodium<br>\n   - The current <code>mathlib4</code> <code>master/lean-toolchain</code> file.<br>\n   - Elan installer script <code>elan-init.sh</code><br>\n   - VSCode Lean4 Extension<br>\n   - VC Redistributable : to be used only if LeanTar version is less than 0.1.5 (manually uncomment to run) see PR <a href=\"https://github.com/leanprover-community/mathlib4/pull/6430\">#6430</a></p>\n</li>\n</ol>\n<p>All the downloads use <code>-L -C</code> options so that they can resume in case of interruption.</p>\n<ol start=\"2\">\n<li>\n<p>It then extracts Portable Git, VSCodium and extracts the lean extension in to VSCodium.</p>\n</li>\n<li>\n<p>It then sets two variables <code>ELAN_HOME</code> and <code>XDG_CACHE_HOME</code>. These control the locations of Elan and Lean Toolchains (<code>ELAN_HOME</code>) and the location of the olean cache files (<code>XDG_CACHE_HOME</code>). We also add Portable git and Elan Home to the path so that we can later use lean and lake. We then run the elan installer and pass in the version of the toolchain we want (the one used by <code>Mathlib4</code>'s master branch)</p>\n</li>\n<li>\n<p>We create a DemoProj using the typical lake sequence (<code>lake new DemoProj math</code>, <code>lake update</code>, <code>lake exe cache get</code>)</p>\n</li>\n<li>\n<p>Finally we start the VSCodium and pass in the newly created project.</p>\n</li>\n</ol>",
        "id": 382781218,
        "sender_full_name": "MohanadAhmed",
        "timestamp": 1691452720
    },
    {
        "content": "<p>The directory structure at the end of a successful script invocation should look like this:<br>\n<a href=\"/user_uploads/3121/p1iJpKdDOphKWpKlxGxroMZN/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/p1iJpKdDOphKWpKlxGxroMZN/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/p1iJpKdDOphKWpKlxGxroMZN/image.png\"></a></div>",
        "id": 382781484,
        "sender_full_name": "MohanadAhmed",
        "timestamp": 1691452840
    },
    {
        "content": "<p>You can also use this script to start VSCodium at later times:</p>\n<div class=\"codehilite\" data-code-language=\"Batchfile\"><pre><span></span><code><span class=\"p\">:</span><span class=\"c1\">: RunLean.bat Script</span>\n<span class=\"p\">@</span><span class=\"k\">ECHO</span> OFF\n<span class=\"p\">:</span><span class=\"c1\">: Lets get to Work!!</span>\n<span class=\"p\">:</span><span class=\"c1\">: Control Elan's location by ELAN_HOME and Cache Location by XDG_CACHE_HOME</span>\n<span class=\"p\">:</span><span class=\"c1\">:::::::::::::::::: Prepare Environment Variables and Clean Path</span>\n<span class=\"k\">set</span> <span class=\"nv\">Path</span><span class=\"p\">=</span>C:\\WINDOWS\\system32;C:\\WINDOWS;C:\\WINDOWS\\System32\\Wbem;C:\\WINDOWS\\System32\\WindowsPowerShell\\v1.0\\;<span class=\"nv\">%USERPROFILE%</span>\\AppData\\Local\\Microsoft\\WindowsApps;<span class=\"nv\">%CD%</span>;<span class=\"nv\">%CD%</span>\\PortableGit\\bin\\;<span class=\"nv\">%CD%</span>\\Elan\\bin\\\n<span class=\"k\">set</span> <span class=\"nv\">ELAN_HOME</span><span class=\"p\">=</span><span class=\"nv\">%CD%</span>\\Elan\n<span class=\"k\">set</span> <span class=\"nv\">XDG_CACHE_HOME</span><span class=\"p\">=</span><span class=\"nv\">%CD%</span>\\Cache\n<span class=\"k\">set</span> <span class=\"nv\">ELECTRON_EXTRA_LAUNCH_ARGS</span><span class=\"p\">=</span>--disable-gpu-sandbox\n<span class=\"k\">set</span> <span class=\"nv\">DEMOPROJ</span><span class=\"p\">=</span>DemoProj\n<span class=\"k\">set</span> <span class=\"k\">/p</span> <span class=\"nv\">LEAN_TOOLCHAIN_VERSION</span><span class=\"p\">=&lt;</span>lean-toolchain\n\n<span class=\"p\">:</span><span class=\"c1\">:::::::::::::::::: Star New Project in VSCodium</span>\nVSCodium\\VSCodium.exe <span class=\"nv\">%DEMOPROJ%</span>\n</code></pre></div>",
        "id": 382912227,
        "sender_full_name": "MohanadAhmed",
        "timestamp": 1691492393
    },
    {
        "content": "<p>If you just zip everything up at the end, how big a file is it?</p>",
        "id": 382913403,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1691492577
    },
    {
        "content": "<p>Trying it now</p>",
        "id": 382913558,
        "sender_full_name": "MohanadAhmed",
        "timestamp": 1691492611
    },
    {
        "content": "<p>If this script can be tested by others, it would be good to upload it to the community website, and include it as an alternative installation method.</p>",
        "id": 382913648,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1691492628
    },
    {
        "content": "<p>Zipping has been runnig for about 5 mins <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 382913685,
        "sender_full_name": "MohanadAhmed",
        "timestamp": 1691492639
    },
    {
        "content": "<p>If the zip file is manageable, we should arrange for a regular CI job to build the zip file and host it somewhere.</p>",
        "id": 382913804,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1691492653
    },
    {
        "content": "<p>For comparsion it took 3 mins form start of script to VScodium showing up with lean running</p>",
        "id": 382913900,
        "sender_full_name": "MohanadAhmed",
        "timestamp": 1691492673
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/113488-general/topic/trylean.20bundle.20for.20lean4/near/382913804\">said</a>:</p>\n<blockquote>\n<p>If the zip file is manageable, we should arrange for a regular CI job to build the zip file and host it somewhere.</p>\n</blockquote>\n<p>Yeah I think that is a great idea. !<br>\nHow big is manageable?<br>\nAlso the script will need a bit of polishing to make the hardcoded version URLs be less hardcoded</p>",
        "id": 382914654,
        "sender_full_name": "MohanadAhmed",
        "timestamp": 1691492823
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 382916606,
        "sender_full_name": "MohanadAhmed",
        "timestamp": 1691493215
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/113488-general/topic/trylean.20bundle.20for.20lean4/near/382913403\">said</a>:</p>\n<blockquote>\n<p>If you just zip everything up at the end, how big a file is it?</p>\n</blockquote>\n<p>1.82GB</p>",
        "id": 382916671,
        "sender_full_name": "MohanadAhmed",
        "timestamp": 1691493228
    },
    {
        "content": "<p>This the built-in Windows Zip program</p>",
        "id": 382917429,
        "sender_full_name": "MohanadAhmed",
        "timestamp": 1691493382
    },
    {
        "content": "<p>I will try now the 7z compressor</p>",
        "id": 382917461,
        "sender_full_name": "MohanadAhmed",
        "timestamp": 1691493391
    },
    {
        "content": "<p>That's not hopeless. :-) Some people at least would find it useful.</p>",
        "id": 382919418,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1691493814
    },
    {
        "content": "<p>To make a smaller zip file, make sure that you don't have any <code>.olean</code> files, but only the <code>.ltar</code> files in the cache. These are much smaller. The script that launches VSCode will need to run <code>lake exe cache get</code> itself, but it will only be unpacking the <code>.ltar</code> files, which is quite fast.</p>",
        "id": 382919912,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1691493935
    },
    {
        "content": "<p>I packed everything including the <code>.olean</code> files. I can try that next.</p>\n<p>7z Compressor produced 1.3 GB file (with oleans included)</p>",
        "id": 382920288,
        "sender_full_name": "MohanadAhmed",
        "timestamp": 1691494022
    },
    {
        "content": "<p>How do you tell <code>lake exe cache get</code> to only download but not unpack?</p>",
        "id": 382920673,
        "sender_full_name": "MohanadAhmed",
        "timestamp": 1691494096
    },
    {
        "content": "<p><code>lake exe cache get-</code></p>",
        "id": 382920849,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1691494145
    },
    {
        "content": "<p>I think we are of to a good start the folder size is down from 5.6 GB to 2.2 GB before compression. Waiting for compression to finish now</p>",
        "id": 382922132,
        "sender_full_name": "MohanadAhmed",
        "timestamp": 1691494443
    },
    {
        "content": "<p>OK down to 798MB for the final 7z archive</p>",
        "id": 382922826,
        "sender_full_name": "MohanadAhmed",
        "timestamp": 1691494584
    },
    {
        "content": "<p>Great. If you send it to me I can have a look over it for obvious redundancies.</p>",
        "id": 382923561,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1691494746
    },
    {
        "content": "<p>Oh I made a small mistake I packed the sources with it. I will try without the sources and see if it gets down further. </p>\n<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/113488-general/topic/trylean.20bundle.20for.20lean4/near/382923561\">said</a>:</p>\n<blockquote>\n<p>Great. If you send it to me I can have a look over it for obvious redundancies.</p>\n</blockquote>\n<p>Once I get the last archive I will send it. Does a google drive link work for you?</p>",
        "id": 382924078,
        "sender_full_name": "MohanadAhmed",
        "timestamp": 1691494868
    },
    {
        "content": "<p>Down to 604MB</p>",
        "id": 382924244,
        "sender_full_name": "MohanadAhmed",
        "timestamp": 1691494914
    },
    {
        "content": "<p>I think the right way to deploy this is:</p>\n<ul>\n<li>a script that lives in the <code>mathlib4</code> repository, say as <code>portable_windows.bat</code> or something, that anyone can download and run themselves</li>\n<li>a CI job on the mathlib4 repository that runs e.g. every 24 hours, and puts the zip file ... somewhere? I think we can provide azure hosting still? Others know that aspect of things better.</li>\n</ul>",
        "id": 382924630,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1691494991
    },
    {
        "content": "<p>I don't think it makes any sense to keep old copies around: you'll only be able to get the current nightly. If someone wants to use a consistent version for teaching then they can download and distribute a particular copy themselves.</p>",
        "id": 382924718,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1691495016
    },
    {
        "content": "<p>We might consider that this zipfile should give you three folders: <code>Mathlib</code>, <code>MIL</code>, and <code>MyProject</code>, so people have the choice of working in any of those three places. I think this would be very minimal overhead?</p>",
        "id": 382925281,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1691495152
    },
    {
        "content": "<p>Oh -- was your previous message saying you were leaving out the Mathlib sources? That's not a good idea. Jump to definition is essential.</p>",
        "id": 382925427,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1691495180
    },
    {
        "content": "<p>Not the mathlib sources. Just the Portable Git, VSCodium, 7z and elan installer ... setup executables etc</p>",
        "id": 382925779,
        "sender_full_name": "MohanadAhmed",
        "timestamp": 1691495257
    },
    {
        "content": "<p>Here is the 7z archive (604MB)<br>\n<a href=\"https://drive.google.com/file/d/1Ih3268qtXWZENti7IkJ7qSu2zshluMbB/view?usp=sharing\">https://drive.google.com/file/d/1Ih3268qtXWZENti7IkJ7qSu2zshluMbB/view?usp=sharing</a></p>",
        "id": 382926294,
        "sender_full_name": "MohanadAhmed",
        "timestamp": 1691495360
    },
    {
        "content": "<p>Here is a zip archive (778 MB)<br>\n<a href=\"https://drive.google.com/file/d/1aLzHU3QWuOF6O2SUkdULlAoLOJ4CooJN/view?usp=sharing\">https://drive.google.com/file/d/1aLzHU3QWuOF6O2SUkdULlAoLOJ4CooJN/view?usp=sharing</a></p>",
        "id": 382926540,
        "sender_full_name": "MohanadAhmed",
        "timestamp": 1691495403
    },
    {
        "content": "<p>There are two scripts inside <code>PrepareLean.bat</code> and <code>RunLean.bat</code>.  </p>\n<p>The <code>RunLean.bat</code> starts VSCodium with the Empty DemoProj.</p>",
        "id": 382927964,
        "sender_full_name": "MohanadAhmed",
        "timestamp": 1691495644
    },
    {
        "content": "<p>My inclination is that the additional savings for the <code>7z</code> version are not worth the slight extra difficulty. The point of this bundle is to be the absolute lowest bar installation method on windows: let's not assume that anyone has <code>7z</code>.</p>",
        "id": 382929669,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1691495983
    },
    {
        "content": "<p>If you really wanted to shrink further, you could traverse the <code>Elan/toolchains/...</code> directories, and compress every <code>.olean</code> using <code>leangz</code>, and then have the first step of <code>RunLean.bat</code> undo this. This would probably result in a further big saving, but maybe this is premature optimization. :-)</p>",
        "id": 382931454,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1691496323
    },
    {
        "content": "<p>It's clear that the 778mb zip file is easily good enough --- the main priority should be to get this reviewed and into the repository + a CI workflow.</p>",
        "id": 382931568,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1691496350
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/113488-general/topic/trylean.20bundle.20for.20lean4/near/382931568\">said</a>:</p>\n<blockquote>\n<p>It's clear that the 778mb zip file is easily good enough --- the main priority should be to get this reviewed and into the repository + a CI workflow.</p>\n</blockquote>\n<p>I think a good first step is to get some confirmation that it works on other machines. Then we can smooth out the rough edges for CI.</p>",
        "id": 382938825,
        "sender_full_name": "MohanadAhmed",
        "timestamp": 1691497850
    },
    {
        "content": "<p>I'm about to be off for the day, but I can try this on a virtual machine tomorrow if no one has got there first.</p>",
        "id": 382942643,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1691498633
    },
    {
        "content": "<p>I may have missed this: if the Git issue is solved now, what's the reason for including the cache in the archive instead of doing a regular <code>cache get</code>?</p>",
        "id": 382959724,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1691501804
    },
    {
        "content": "<p>I guess one point is the archive now becomes usable without an internet connection.</p>",
        "id": 382971045,
        "sender_full_name": "MohanadAhmed",
        "timestamp": 1691503713
    },
    {
        "content": "<p>Instead of typing <code>lake exe cache get</code>, could we annotate the dependency in the lakefile with something like <code>preferCached</code>, so it will download the cached version automatically? That would be one less command to run.</p>",
        "id": 382984941,
        "sender_full_name": "Max Nowak 🐉",
        "timestamp": 1691506211
    },
    {
        "content": "<p>I find hand-crafted “bundles” or scripts to actually be more confusing than having a solid vscode extension which handles all the tool chain setup and downloading of dependencies automatically. Downloading vscode, installing the extension, opening a project, which then automatically sets up the tool chain and downloads the mathlib cache doesn’t seem too much to ask. But then again I’m not a mathematician <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span> . </p>\n<p>I like having one root manifest (lakefiles in our case) which already has all the setup info, and then solid tooling (vscode extension) to make that manifest “just work”.</p>",
        "id": 382987851,
        "sender_full_name": "Max Nowak 🐉",
        "timestamp": 1691506772
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"497480\">MohanadAhmed</span> <a href=\"#narrow/stream/113488-general/topic/trylean.20bundle.20for.20lean4/near/382927964\">said</a>:</p>\n<blockquote>\n<p>There are two scripts inside <code>PrepareLean.bat</code> and <code>RunLean.bat</code>.  </p>\n<p>The <code>RunLean.bat</code> starts VSCodium with the Empty DemoProj.</p>\n</blockquote>\n<p>What does the <code>PrepareLean.bat</code> file do exactly?  I get it should be run just once after decompressing, right?</p>",
        "id": 382990880,
        "sender_full_name": "Miguel Marco",
        "timestamp": 1691507316
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"416280\">Max Nowak 🐺</span> <a href=\"#narrow/stream/113488-general/topic/trylean.20bundle.20for.20lean4/near/382987851\">said</a>:</p>\n<blockquote>\n<p>I find hand-crafted “bundles” or scripts to actually be more confusing than having a solid vscode extension which handles all the tool chain setup and downloading of dependencies automatically. </p>\n</blockquote>\n<p>If it were possible to get the VS Code Lean 4 extension to download and correctly install projects (e.g. if it offered the user a sample list of projects ranging from a basic Hello World project to the full Mathematics In Lean download together with mathlib + oleans, which were just a one click install) then that would be absolutely great. But I am used to dealing with mathematicians with slow Windows machines who have no git, no python, and have literally never seen a command line and have no idea how to navigate to a given directory within it. Right now my solution for these people is just to direct them to gitpod (and to ensure that all my projects are gitpod-ready); the only real objection I've heard to that solution is that you have to make an account on github (and then make ssh keys work, and soon you'll also have to set up 2FA, if you want to actually do anything like saving your work easily).</p>",
        "id": 382994507,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1691507994
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"461731\">Miguel Marco</span> <a href=\"#narrow/stream/113488-general/topic/trylean.20bundle.20for.20lean4/near/382990880\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"497480\">MohanadAhmed</span> <a href=\"#narrow/stream/113488-general/topic/trylean.20bundle.20for.20lean4/near/382927964\">said</a>:</p>\n<blockquote>\n<p>There are two scripts inside <code>PrepareLean.bat</code> and <code>RunLean.bat</code>.  </p>\n<p>The <code>RunLean.bat</code> starts VSCodium with the Empty DemoProj.</p>\n</blockquote>\n<p>What does the <code>PrepareLean.bat</code> file do exactly?  I get it should be run just once after decompressing, right?</p>\n</blockquote>\n<p>It is the script that creates/prepares the bundle folder.<br>\nSo if you want to change the version of VSCodium or git and so on.</p>\n<p>But if you already have the bundle and just want to run Lean and get to proving then <code>RunLean.bat</code> is the script you want</p>",
        "id": 383006621,
        "sender_full_name": "MohanadAhmed",
        "timestamp": 1691510219
    },
    {
        "content": "<p>If you think it is confusing to users I can remove it</p>",
        "id": 383007212,
        "sender_full_name": "MohanadAhmed",
        "timestamp": 1691510345
    },
    {
        "content": "<p>So, the users that download the 778MB file should just unzip it and run <code>RunLean.bat</code>?</p>",
        "id": 383009397,
        "sender_full_name": "Miguel Marco",
        "timestamp": 1691510714
    },
    {
        "content": "<p>Yes</p>",
        "id": 383009774,
        "sender_full_name": "MohanadAhmed",
        "timestamp": 1691510798
    },
    {
        "content": "<p>Did it work?</p>",
        "id": 383009851,
        "sender_full_name": "MohanadAhmed",
        "timestamp": 1691510820
    },
    {
        "content": "<p>It  shows this message in the command prompt :</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">no</span> <span class=\"n\">such</span> <span class=\"n\">file</span> <span class=\"n\">or</span> <span class=\"n\">directory</span> <span class=\"o\">(</span><span class=\"n\">error</span> <span class=\"n\">code</span><span class=\"o\">:</span> <span class=\"mi\">2</span><span class=\"o\">)</span>\n  <span class=\"n\">file</span><span class=\"o\">:</span> <span class=\"bp\">.\\</span><span class=\"n\">lakefile.lean</span>\n</code></pre></div>\n<p>and then this error message in the VSdode output:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">[{</span>\n    <span class=\"s2\">\"resource\"</span><span class=\"o\">:</span> <span class=\"s2\">\"/C:/Users/User/Desktop/LeanPackNoOlean/LeanPackNoOlean/DemoProj/DemoProj.lean\"</span><span class=\"o\">,</span>\n    <span class=\"s2\">\"owner\"</span><span class=\"o\">:</span> <span class=\"s2\">\"_generated_diagnostic_collection_name_#2\"</span><span class=\"o\">,</span>\n    <span class=\"s2\">\"severity\"</span><span class=\"o\">:</span> <span class=\"mi\">8</span><span class=\"o\">,</span>\n    <span class=\"s2\">\"message\"</span><span class=\"o\">:</span> <span class=\"s2\">\"`c:</span><span class=\"se\">\\\\</span><span class=\"s2\">Users</span><span class=\"se\">\\\\</span><span class=\"s2\">User</span><span class=\"se\">\\\\</span><span class=\"s2\">Desktop</span><span class=\"se\">\\\\</span><span class=\"s2\">LeanPackNoOlean</span><span class=\"se\">\\\\</span><span class=\"s2\">LeanPackNoOlean</span><span class=\"se\">\\\\</span><span class=\"s2\">Elan</span><span class=\"se\">\\\\</span><span class=\"s2\">toolchains</span><span class=\"se\">\\\\</span><span class=\"s2\">leanprover--lean4---nightly-2023-08-05</span><span class=\"se\">\\\\</span><span class=\"s2\">bin</span><span class=\"se\">\\\\</span><span class=\"s2\">lake.exe print-paths Init` failed:</span><span class=\"se\">\\n\\n</span><span class=\"s2\">stderr:</span><span class=\"se\">\\n</span><span class=\"s2\">info: mathlib: URL has changed; you might need to delete .</span><span class=\"se\">\\\\</span><span class=\"s2\">lake-packages</span><span class=\"se\">\\\\</span><span class=\"s2\">mathlib manually</span><span class=\"se\">\\n</span><span class=\"s2\">error: &gt; git fetch origin    # in directory .</span><span class=\"se\">\\\\</span><span class=\"s2\">lake-packages</span><span class=\"se\">\\\\</span><span class=\"s2\">mathlib</span><span class=\"se\">\\n</span><span class=\"s2\">error: stderr:</span><span class=\"se\">\\n</span><span class=\"s2\">fatal: 'origin' does not appear to be a git repository</span><span class=\"se\">\\n</span><span class=\"s2\">fatal: Could not read from remote repository.</span><span class=\"se\">\\n\\n</span><span class=\"s2\">Please make sure you have the correct access rights</span><span class=\"se\">\\n</span><span class=\"s2\">and the repository exists.</span><span class=\"se\">\\n</span><span class=\"s2\">error: external command `git` exited with code 128</span><span class=\"se\">\\n</span><span class=\"s2\">Invalid Lake configuration.  Please restart the server after fixing the Lake configuration file.</span><span class=\"se\">\\n</span><span class=\"s2\">\"</span><span class=\"o\">,</span>\n    <span class=\"s2\">\"source\"</span><span class=\"o\">:</span> <span class=\"s2\">\"Lean 4\"</span><span class=\"o\">,</span>\n    <span class=\"s2\">\"startLineNumber\"</span><span class=\"o\">:</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n    <span class=\"s2\">\"startColumn\"</span><span class=\"o\">:</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n    <span class=\"s2\">\"endLineNumber\"</span><span class=\"o\">:</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n    <span class=\"s2\">\"endColumn\"</span><span class=\"o\">:</span> <span class=\"mi\">1</span>\n<span class=\"o\">}]</span>\n</code></pre></div>",
        "id": 383027847,
        "sender_full_name": "Miguel Marco",
        "timestamp": 1691514921
    },
    {
        "content": "<p>Sorry that was my mistake.<br>\nCan you please replace the contents of the RunLean.bat file with the following and rerun:</p>\n<div class=\"codehilite\" data-code-language=\"Batchfile\"><pre><span></span><code><span class=\"p\">@</span><span class=\"k\">ECHO</span> OFF\n<span class=\"p\">:</span><span class=\"c1\">: Lets get to Work!!</span>\n<span class=\"p\">:</span><span class=\"c1\">: Control Elan's location by ELAN_HOME and Cache Location by XDG_CACHE_HOME</span>\n<span class=\"p\">:</span><span class=\"c1\">:::::::::::::::::: Prepare Environment Variables and Clean Path</span>\n<span class=\"k\">set</span> <span class=\"nv\">Path</span><span class=\"p\">=</span>C:\\WINDOWS\\system32;C:\\WINDOWS;C:\\WINDOWS\\System32\\Wbem;C:\\WINDOWS\\System32\\WindowsPowerShell\\v1.0\\;<span class=\"nv\">%USERPROFILE%</span>\\AppData\\Local\\Microsoft\\WindowsApps;<span class=\"nv\">%CD%</span>;<span class=\"nv\">%CD%</span>\\PortableGit\\bin\\;<span class=\"nv\">%CD%</span>\\Elan\\bin\\\n<span class=\"k\">set</span> <span class=\"nv\">ELAN_HOME</span><span class=\"p\">=</span><span class=\"nv\">%CD%</span>\\Elan\n<span class=\"k\">set</span> <span class=\"nv\">XDG_CACHE_HOME</span><span class=\"p\">=</span><span class=\"nv\">%CD%</span>\\Cache\n<span class=\"k\">set</span> <span class=\"nv\">ELECTRON_EXTRA_LAUNCH_ARGS</span><span class=\"p\">=</span>--disable-gpu-sandbox\n<span class=\"k\">set</span> <span class=\"nv\">DEMOPROJ</span><span class=\"p\">=</span>DemoProj\n<span class=\"k\">set</span> <span class=\"k\">/p</span> <span class=\"nv\">LEAN_TOOLCHAIN_VERSION</span><span class=\"p\">=&lt;</span>lean-toolchain\n\n<span class=\"p\">:</span><span class=\"c1\">:::::::::::::::::: Star New Project in VSCodium</span>\n<span class=\"k\">cd</span> <span class=\"nv\">%DEMOPROJ%</span>\nlake exe cache unpack\n<span class=\"k\">cd</span> ..\nVSCodium\\VSCodium.exe <span class=\"nv\">%DEMOPROJ%</span>\n</code></pre></div>",
        "id": 383057702,
        "sender_full_name": "MohanadAhmed",
        "timestamp": 1691522518
    },
    {
        "content": "<p>I updated the <code>7z</code> version with Scott Morrison's suggestion to unpack the <code>olean</code> files later but did not properly update <code>RunLean.bat</code> in the <code>zip</code> file</p>",
        "id": 383058054,
        "sender_full_name": "MohanadAhmed",
        "timestamp": 1691522608
    },
    {
        "content": "<p>Now I get this error:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">`</span><span class=\"n\">c</span><span class=\"o\">:</span><span class=\"bp\">\\</span><span class=\"n\">Users</span><span class=\"bp\">\\</span><span class=\"n\">User</span><span class=\"bp\">\\</span><span class=\"n\">Desktop</span><span class=\"bp\">\\</span><span class=\"n\">LeanPackNoOlean</span><span class=\"bp\">\\</span><span class=\"n\">LeanPackNoOlean</span><span class=\"bp\">\\</span><span class=\"n\">Elan</span><span class=\"bp\">\\</span><span class=\"n\">toolchains</span><span class=\"bp\">\\</span><span class=\"n\">leanprover</span><span class=\"c1\">--lean4---nightly-2023-08-05\\bin\\lake.exe print-paths Init` failed:</span>\n\n<span class=\"n\">stderr</span><span class=\"o\">:</span>\n<span class=\"n\">info</span><span class=\"o\">:</span> <span class=\"n\">mathlib</span><span class=\"o\">:</span> <span class=\"n\">URL</span> <span class=\"n\">has</span> <span class=\"n\">changed</span><span class=\"bp\">;</span> <span class=\"n\">you</span> <span class=\"n\">might</span> <span class=\"n\">need</span> <span class=\"n\">to</span> <span class=\"n\">delete</span> <span class=\"bp\">.\\</span><span class=\"n\">lake</span><span class=\"bp\">-</span><span class=\"n\">packages</span><span class=\"bp\">\\</span><span class=\"n\">mathlib</span> <span class=\"n\">manually</span>\n<span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"bp\">&gt;</span> <span class=\"n\">git</span> <span class=\"n\">fetch</span> <span class=\"n\">origin</span>    <span class=\"bp\">#</span> <span class=\"k\">in</span> <span class=\"n\">directory</span> <span class=\"bp\">.\\</span><span class=\"n\">lake</span><span class=\"bp\">-</span><span class=\"n\">packages</span><span class=\"bp\">\\</span><span class=\"n\">mathlib</span>\n<span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">stderr</span><span class=\"o\">:</span>\n<span class=\"n\">fatal</span><span class=\"o\">:</span> <span class=\"bp\">'</span><span class=\"n\">origin'</span> <span class=\"n\">does</span> <span class=\"n\">not</span> <span class=\"n\">appear</span> <span class=\"n\">to</span> <span class=\"n\">be</span> <span class=\"n\">a</span> <span class=\"n\">git</span> <span class=\"n\">repository</span>\n<span class=\"n\">fatal</span><span class=\"o\">:</span> <span class=\"n\">Could</span> <span class=\"n\">not</span> <span class=\"n\">read</span> <span class=\"k\">from</span> <span class=\"n\">remote</span> <span class=\"n\">repository.</span>\n\n<span class=\"n\">Please</span> <span class=\"n\">make</span> <span class=\"n\">sure</span> <span class=\"n\">you</span> <span class=\"k\">have</span> <span class=\"n\">the</span> <span class=\"n\">correct</span> <span class=\"n\">access</span> <span class=\"n\">rights</span>\n<span class=\"n\">and</span> <span class=\"n\">the</span> <span class=\"n\">repository</span> <span class=\"n\">exists.</span>\n<span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">external</span> <span class=\"n\">command</span> <span class=\"bp\">`</span><span class=\"n\">git</span><span class=\"bp\">`</span> <span class=\"n\">exited</span> <span class=\"k\">with</span> <span class=\"n\">code</span> <span class=\"mi\">128</span>\n<span class=\"n\">Invalid</span> <span class=\"n\">Lake</span> <span class=\"n\">configuration.</span>  <span class=\"n\">Please</span> <span class=\"n\">restart</span> <span class=\"n\">the</span> <span class=\"n\">server</span> <span class=\"n\">after</span> <span class=\"n\">fixing</span> <span class=\"n\">the</span> <span class=\"n\">Lake</span> <span class=\"n\">configuration</span> <span class=\"n\">file.</span>\n</code></pre></div>",
        "id": 383086176,
        "sender_full_name": "Miguel Marco",
        "timestamp": 1691531099
    },
    {
        "content": "<p>I was able to reproduce it on windows 10. I am not sure what exactly the issue is but the Self Extracting archives work without issues on Windows 11, Windows 10 and even Windows 8.1 (if you install VC_redist).</p>\n<p><a href=\"/user_uploads/3121/HRlcTtg7IS8UD3xAsp9kCIaP/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/HRlcTtg7IS8UD3xAsp9kCIaP/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/HRlcTtg7IS8UD3xAsp9kCIaP/image.png\"></a></div>",
        "id": 383325983,
        "sender_full_name": "MohanadAhmed",
        "timestamp": 1691594481
    },
    {
        "content": "<p>Here is a link to the Self extracting archive <a href=\"https://drive.google.com/file/d/1Ws7-t185QXL262-S7MPGu3wm_ZzAwwha/view?usp=sharing\">https://drive.google.com/file/d/1Ws7-t185QXL262-S7MPGu3wm_ZzAwwha/view?usp=sharing</a></p>",
        "id": 383326160,
        "sender_full_name": "MohanadAhmed",
        "timestamp": 1691594512
    },
    {
        "content": "<p>If anyone has WIndows and can help by trying it that would be great.</p>",
        "id": 383326406,
        "sender_full_name": "MohanadAhmed",
        "timestamp": 1691594549
    },
    {
        "content": "<p>I tried it in a fresh VM, and it seems to work ok (it takes some time to unpack, but otherwise it works).</p>\n<p>As a note, i would remove the <code>PrepareLean</code> script from the file that would be shipped to the end user, to prevent confussions. I would also maybe add a small message at the beginning of the <code>RunLean</code> scirpt stating that Lean is opening, and that it might take some time the first time it is run.</p>",
        "id": 384511116,
        "sender_full_name": "Miguel Marco",
        "timestamp": 1691937277
    },
    {
        "content": "<p>Does someone have access to a Mac to try to create something similar?</p>",
        "id": 385553625,
        "sender_full_name": "Miguel Marco",
        "timestamp": 1692225901
    },
    {
        "content": "<p>Yes, it would be great to get this for Macs, but the only one I have access to is stuck on High Sierra <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span>, so it probably shouldn't be me. I guess we'll probably need both Intel and M versions? <span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span>, did we start hosting the above archive for Windows anywhere yet?</p>",
        "id": 386640652,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1692719425
    },
    {
        "content": "<p>Shouldn't such a bundle for MacOS be pretty much independent of the version? </p>\n<p>Different processor architecture is another issue.</p>",
        "id": 387303316,
        "sender_full_name": "Miguel Marco",
        "timestamp": 1692979214
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/113488-general/topic/trylean.20bundle.20for.20lean4/near/382924630\">said</a>:</p>\n<blockquote>\n<p>I think the right way to deploy this is:</p>\n<ul>\n<li>a script that lives in the <code>mathlib4</code> repository, say as <code>portable_windows.bat</code> or something, that anyone can download and run themselves</li>\n<li>a CI job on the mathlib4 repository that runs e.g. every 24 hours, and puts the zip file ... somewhere? I think we can provide azure hosting still? Others know that aspect of things better.</li>\n</ul>\n</blockquote>\n<p>If you still think this is a good idea I think I can make a PR for it. <br>\nI took a look at the CI files on <code>mathlib</code>. If I understand correctly the CI always runs on <code>ubuntu-latest</code> right?<br>\nIs it possible to run a particular job on windows?</p>\n<p>Or is it better to adapt the scripts above to run on bash shell on ubuntu.</p>",
        "id": 387858378,
        "sender_full_name": "MohanadAhmed",
        "timestamp": 1693306949
    },
    {
        "content": "<p>Yes. Just use <code>runs-on: windows-2022</code>.</p>",
        "id": 387858703,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1693307074
    },
    {
        "content": "<p>(e.g. Lean4 CI runs jobs on Windows)</p>",
        "id": 387858742,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1693307087
    },
    {
        "content": "<p>Oh Ok I guess you answered my question before I even asked it <span aria-label=\"joy\" class=\"emoji emoji-1f602\" role=\"img\" title=\"joy\">:joy:</span></p>",
        "id": 387858832,
        "sender_full_name": "MohanadAhmed",
        "timestamp": 1693307125
    },
    {
        "content": "<p>Any place I can store the final output bundle so that it is available after CI finishes?</p>",
        "id": 387860733,
        "sender_full_name": "MohanadAhmed",
        "timestamp": 1693307798
    },
    {
        "content": "<p>Two choices:</p>\n<ol>\n<li>store it as a release on github (probably not on mathlib4 itself, but maybe a mathlib4-bundles repo?)</li>\n<li>push it to azure, e.g. following the CI code that mathlib3 used:</li>\n</ol>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>      <span class=\"bp\">-</span> <span class=\"n\">name</span><span class=\"o\">:</span> <span class=\"n\">push</span> <span class=\"n\">release</span> <span class=\"n\">to</span> <span class=\"n\">azure</span>\n        <span class=\"k\">if</span><span class=\"o\">:</span> <span class=\"n\">always</span><span class=\"o\">()</span> <span class=\"bp\">&amp;&amp;</span> <span class=\"n\">github.repository</span> <span class=\"bp\">==</span> <span class=\"bp\">'</span><span class=\"n\">leanprover</span><span class=\"bp\">-</span><span class=\"n\">community</span><span class=\"bp\">/</span><span class=\"n\">mathlib'</span> <span class=\"bp\">&amp;&amp;</span> <span class=\"n\">steps.build.outputs.started</span> <span class=\"bp\">==</span> <span class=\"bp\">'</span><span class=\"n\">true'</span>\n        <span class=\"n\">run</span><span class=\"o\">:</span> <span class=\"bp\">|</span>\n          <span class=\"n\">archive_name</span><span class=\"bp\">=</span><span class=\"s2\">\"$(git rev-parse HEAD).tar.gz\"</span>\n          <span class=\"n\">find</span> <span class=\"n\">src</span><span class=\"bp\">/</span> <span class=\"bp\">-</span><span class=\"n\">name</span> <span class=\"s2\">\"*.olean\"</span> <span class=\"bp\">-</span><span class=\"n\">o</span> <span class=\"bp\">-</span><span class=\"n\">name</span> <span class=\"s2\">\".noisy_files\"</span> <span class=\"bp\">|</span> <span class=\"n\">tar</span> <span class=\"n\">czf</span> <span class=\"s2\">\"$archive_name\"</span> <span class=\"bp\">-</span><span class=\"n\">T</span> <span class=\"bp\">-</span>\n          <span class=\"n\">azcopy</span> <span class=\"n\">copy</span> <span class=\"s2\">\"$archive_name\"</span> <span class=\"s2\">\"${{ secrets.AZURE_SAS_TOKEN }}\"</span> <span class=\"c1\">--block-size-mb 99 --overwrite false</span>\n          <span class=\"n\">archive_name</span><span class=\"bp\">=</span><span class=\"s2\">\"$(git rev-parse HEAD).tar.xz\"</span>\n          <span class=\"n\">find</span> <span class=\"n\">src</span><span class=\"bp\">/</span> <span class=\"bp\">-</span><span class=\"n\">name</span> <span class=\"s2\">\"*.olean\"</span> <span class=\"bp\">-</span><span class=\"n\">o</span> <span class=\"bp\">-</span><span class=\"n\">name</span> <span class=\"s2\">\".noisy_files\"</span> <span class=\"bp\">|</span> <span class=\"n\">tar</span> <span class=\"n\">cJf</span> <span class=\"s2\">\"$archive_name\"</span> <span class=\"bp\">-</span><span class=\"n\">T</span> <span class=\"bp\">-</span>\n          <span class=\"n\">azcopy</span> <span class=\"n\">copy</span> <span class=\"s2\">\"$archive_name\"</span> <span class=\"s2\">\"${{ secrets.AZURE_SAS_TOKEN }}\"</span> <span class=\"c1\">--block-size-mb 99 --overwrite false</span>\n</code></pre></div>",
        "id": 387861335,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1693308040
    },
    {
        "content": "<p>Unfortunately the <code>AZURE_SAS_TOKEN</code> has not been migrated from mathlib3 to mathlib4, so we'd have to look into that.</p>",
        "id": 387861591,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1693308144
    },
    {
        "content": "<p>I don't think this bundle is something that we need to keep old versions of.</p>",
        "id": 387861702,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1693308192
    },
    {
        "content": "<p>So possibly just a single \"release\" on the mathlib4 repo is okay, that we keep overwriting.</p>",
        "id": 387861744,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1693308208
    },
    {
        "content": "<p>If you want all your students to use the same version of mathlib when giving some lectures, it would be good to have archived versions of the bundle.</p>",
        "id": 387865377,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1693309637
    },
    {
        "content": "<p>Excellent point. It is going to be a big bundle, so we can't do this nightly. Let's initially set this up for weekly, and we can tweak as necessary. (Ideally synchronizing with Mathlib moving to each new stable release of Lean!)</p>",
        "id": 387866440,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1693309936
    },
    {
        "content": "<p>Yes, one version for each stable release of Lean would be perfect.</p>",
        "id": 387866594,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1693310000
    },
    {
        "content": "<p>I think my preference is to avoid using Azure, just to minimize the necesary infrastructure, and instead just push a release to the mathlib4 repo itself.</p>",
        "id": 387866688,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1693310041
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"497480\">@MohanadAhmed</span>, do you think you could make a PR that adds a workflow that runs on a cron job weekly, and creates a tag (perhaps name the tag whatever is in the <code>lean-toolchain</code>?) and pushes a release?</p>",
        "id": 387866916,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1693310135
    },
    {
        "content": "<p>I have been working on workflows a lot the last few days, so I can definitely point to examples, help, take over parts, etc.</p>",
        "id": 387866958,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1693310158
    },
    {
        "content": "<p>I started on it</p>",
        "id": 387868862,
        "sender_full_name": "MohanadAhmed",
        "timestamp": 1693310821
    },
    {
        "content": "<p>PR <a href=\"https://github.com/leanprover-community/mathlib4/pull/6859\">#6859</a></p>",
        "id": 387992164,
        "sender_full_name": "MohanadAhmed",
        "timestamp": 1693353767
    },
    {
        "content": "<p>So I worked on in an external repo and the script and the yml CI file in this repo (<a href=\"https://github.com/MohanadAhmed/TryLean4Bundle\">https://github.com/MohanadAhmed/TryLean4Bundle</a>). The created bundle is on the releases page (<a href=\"https://github.com/MohanadAhmed/TryLean4Bundle/releases\">https://github.com/MohanadAhmed/TryLean4Bundle/releases</a>)</p>\n<p>I copied these two into PR <a href=\"https://github.com/leanprover-community/mathlib4/pull/6859\">#6859</a>. <span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> I think I will need your help in figuring out how to get the added yaml file to show up in mathlib4 Workflows. Does the yml file have to be in master or can we run it from a branch?</p>",
        "id": 387992876,
        "sender_full_name": "MohanadAhmed",
        "timestamp": 1693354053
    },
    {
        "content": "<p>The cron job won't run from a branch.</p>",
        "id": 387994090,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1693354591
    },
    {
        "content": "<p>For testing purposes we may want to run this on push, until we're ready to merge.</p>",
        "id": 387994143,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1693354617
    },
    {
        "content": "<p>Further, I think the CI should not only assemble the bundle, but also run it and do some amount of verification -- we can't check everything but we're headless so can't actually launch VSCode, but verifying that git and lean (and possibly a command line interface to VSCode) work would be great.</p>",
        "id": 387994401,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1693354728
    },
    {
        "content": "<p>We really don't want to be in the situation of only knowing that bundles are broken because users are reporting problems.</p>",
        "id": 387994473,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1693354763
    },
    {
        "content": "<p>Would the push work from a branch?<br>\nThe yml file currently has two triggers: <code>schedule</code> for timed and <code>workflow_dispatch</code> for manual testing.</p>",
        "id": 387994482,
        "sender_full_name": "MohanadAhmed",
        "timestamp": 1693354765
    },
    {
        "content": "<p>If the branch is on the main repository, then<code>push</code> should trigger.</p>",
        "id": 387994564,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1693354798
    },
    {
        "content": "<p>I don't know the rules for <code>workflow_dispatch</code>, unfortunately. But that would be ideal!</p>",
        "id": 387994779,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1693354867
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/113488-general/topic/trylean.20bundle.20for.20lean4/near/387994779\">said</a>:</p>\n<blockquote>\n<p>I don't know the rules for <code>workflow_dispatch</code>, unfortunately. But that would be ideal!</p>\n</blockquote>\n<p>As far as I understand, it just means someone has to click \"Run Workflow\".</p>",
        "id": 387994956,
        "sender_full_name": "MohanadAhmed",
        "timestamp": 1693354933
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/113488-general/topic/trylean.20bundle.20for.20lean4/near/387994401\">said</a>:</p>\n<blockquote>\n<p>Further, I think the CI should not only assemble the bundle, but also run it and do some amount of verification -- we can't check everything but we're headless so can't actually launch VSCode, but verifying that git and lean (and possibly a command line interface to VSCode) work would be great.</p>\n</blockquote>\n<p>Would unpacking the bundle and then issuing <code>lake --version</code> <code>lean --version</code>  be enough or you are thinking of something more involved?</p>",
        "id": 387995204,
        "sender_full_name": "MohanadAhmed",
        "timestamp": 1693355050
    },
    {
        "content": "<p>That's a pretty good start. Ideally they would be one test per component we install. So maybe <code>git --version</code> and <code>code --version</code> (if that even exists)?</p>",
        "id": 388010678,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1693360760
    },
    {
        "content": "<p>Can we ask <code>code</code> for the list of installed extensions from the command line?</p>",
        "id": 388010731,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1693360784
    },
    {
        "content": "<p><code>code --list-extensions</code></p>",
        "id": 388010929,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1693360852
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/113488-general/topic/trylean.20bundle.20for.20lean4/near/388010929\">said</a>:</p>\n<blockquote>\n<p><code>code --list-extensions</code></p>\n</blockquote>\n<p>Thanks <span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> </p>\n<p>I am currently using VSCodium (like in your trylean3 bundle). But I assume the command is probably very similar and I will find it.</p>\n<p>By the way I am currently using a blank demo project. But it occurs to me that for a typical user interested in doing maths proofs, having the book \"Mathematics in Lean\" in the bundle might be a better starter? What do you think?</p>",
        "id": 388094889,
        "sender_full_name": "MohanadAhmed",
        "timestamp": 1693398463
    },
    {
        "content": "<p>In the Lean 3 days we shipped the tutorials project with those bundles. Indeed we could use MIL now. One could argue this won't be interesting to people who want to use Lean for non-mathematics but:</p>\n<ol>\n<li>those people probably want to do computer science or programming so they are probably not afraid of the full install procedure</li>\n<li>MIL alone isn't large, the bundle size comes from Mathlib</li>\n<li>We don't have anything else to include.</li>\n</ol>",
        "id": 388103065,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1693400739
    },
    {
        "content": "<p>Very much in favour of including MIL in the bundle.</p>",
        "id": 388225863,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1693445303
    },
    {
        "content": "<p>Can we add also bundles for linux and Mac?</p>",
        "id": 388344188,
        "sender_full_name": "Miguel Marco",
        "timestamp": 1693494060
    },
    {
        "content": "<p>There's slightly less need, and it is slightly weirder to do so, for linux and mac, on account of there being standard package managers for both. Nevertheless, yes, I hope someone will do them!</p>",
        "id": 388414006,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1693520229
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/113488-general/topic/trylean.20bundle.20for.20lean4/near/388414006\">said</a>:</p>\n<blockquote>\n<p>There's slightly less need, and it is slightly weirder to do so, for linux and mac, on account of there being standard package managers for both. Nevertheless, yes, I hope someone will do them!</p>\n</blockquote>\n<p>What exactly do you have in mind about the package managers? Do you mean that you can install git with the package manager and then use the usual vscode/extension install and <code>lake new</code> <code>lake exe cache get</code> ..?</p>",
        "id": 396509519,
        "sender_full_name": "Miguel Marco",
        "timestamp": 1697204927
    },
    {
        "content": "<p>I think what Scott hints at is that the installation instruction on Linux is a one-liner shell script (thanks to the existing package manager) while the 2-3 students in a class that still struggle with the installation after an hour of trying are always on Windows.</p>",
        "id": 396521579,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1697208959
    },
    {
        "content": "<p>One advantage of Linux is that it tends to come with a command line ;-) Another is that a Linux user tends to know how to fire it up. All the time I am dealing with Windows users who have no idea what a command line is. If anything this problem is getting worse not better.</p>",
        "id": 396522174,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1697209142
    },
    {
        "content": "<p>Yes, i am not worried about linux users (at the very least, they don't get intimidated by the idea of using the command line). Mac users is another story though.</p>",
        "id": 396567223,
        "sender_full_name": "Miguel Marco",
        "timestamp": 1697228973
    }
]