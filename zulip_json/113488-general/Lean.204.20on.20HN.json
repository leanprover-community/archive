[
    {
        "content": "<p>It seems news about the stable version announcement have hit the first page of Hacker news: <a href=\"https://news.ycombinator.com/item?id=37429938\">https://news.ycombinator.com/item?id=37429938</a></p>\n<p>Check it out if you care to answer people's questions.</p>",
        "id": 389870451,
        "sender_full_name": "Ioannis Konstantoulas",
        "timestamp": 1694175314
    },
    {
        "content": "<p><strong>kristopolous</strong> <a href=\"https://news.ycombinator.com/item?id=37432792\">said</a>:</p>\n<blockquote>\n<p>…The point is as an answer to the basic question \"what is this and why should I care?\" Responding with something over 10 pages is likely unadvisable, yet alone over 100. \"Over 100\" here is effectively equivalent to \"over 5,000\". The target should be like 0.25-5, and closer to the 0.25.</p>\n<p>Elevator pitch it.</p>\n<ol>\n<li>\n<p>For (target customers)</p>\n</li>\n<li>\n<p>Who are dissatisfied with (the current market alternative)</p>\n</li>\n<li>\n<p>Lean is a (new product category)</p>\n</li>\n<li>\n<p>That provides (key problem-solving capability).</p>\n</li>\n<li>\n<p>Unlike (the product alternative),</p>\n</li>\n<li>\n<p>Lean (describe the key product features).</p>\n</li>\n</ol>\n<p><a href=\"https://www.elevatorpitchessentials.com/essays/CrossingTheChasmElevatorPitchTemplate.html\">https://www.elevatorpitchessentials.com/essays/CrossingTheChasmElevatorPitchTemplate.html</a></p>\n</blockquote>\n<p>I'm trying to elevator-pitch Lean.</p>",
        "id": 389891484,
        "sender_full_name": "Bulhwi Cha",
        "timestamp": 1694182980
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"417769\">Bulhwi Cha</span> <a href=\"#narrow/stream/113488-general/topic/Lean.204.20on.20HN/near/389891484\">said</a>:</p>\n<blockquote>\n<p>I'm trying to elevator-pitch Lean.</p>\n</blockquote>\n<p>Why should research projects have elevator pitches?</p>",
        "id": 389895912,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1694184493
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"417769\">Bulhwi Cha</span> <a href=\"#narrow/stream/113488-general/topic/Lean.204.20on.20HN/near/389891484\">said</a>:</p>\n<blockquote>\n<p><strong>kristopolous</strong> <a href=\"https://news.ycombinator.com/item?id=37432792\">said</a>:</p>\n<blockquote>\n<p>The point is as an answer to the basic question \"what is this and why should I care?\" Responding with something over 10 pages is likely unadvisable, yet alone over 100. \"Over 100\" here is effectively equivalent to \"over 5,000\". The target should be like 0.25-5, and closer to the 0.25.</p>\n<p>Elevator pitch it.</p>\n<ol>\n<li>\n<p>For (target customers)</p>\n</li>\n<li>\n<p>Who are dissatisfied with (the current market alternative)</p>\n</li>\n<li>\n<p>Lean is a (new product category)</p>\n</li>\n<li>\n<p>That provides (key problem-solving capability).</p>\n</li>\n<li>\n<p>Unlike (the product alternative),</p>\n</li>\n<li>\n<p>Lean (describe the key product features).</p>\n</li>\n</ol>\n<p><a href=\"https://www.elevatorpitchessentials.com/essays/CrossingTheChasmElevatorPitchTemplate.html\">https://www.elevatorpitchessentials.com/essays/CrossingTheChasmElevatorPitchTemplate.html</a></p>\n</blockquote>\n<p>I'm trying to elevator-pitch Lean.</p>\n</blockquote>\n<p>Is this Reviewer 2?</p>",
        "id": 389896048,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1694184547
    },
    {
        "content": "<p>This is worse than the typical reviewer 2 who might at least appreciate that there is more to a paper than its title.</p>",
        "id": 389897425,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1694184967
    },
    {
        "content": "<p>Everyone should learn how to elevator pitch their research! If you have 2 minutes with someone and you want to make an impression, you should be prepared! Otherwise, you'll miss opportunities. Not everyone has lots of time to explore what you care about, but with a good elevator pitch, you might be able to persuade them to spend that time.</p>\n<p>For me, my audience is almost always scientists and engineers, especially in computational chemistry. My elevator pitch is first and foremost about bug-free code with rigorously checked mathematics. My pitch is essentially:</p>\n<p>When you write code with popular programming languages like Python, you get instant feedback when you make little syntax errors, like failing to close parentheses. But more nuanced bugs, like \"missing a minus sign in one of the equations\" or \"switching indices in a matrix calculation\" won't be caught  until runtime, or worse, until the program finishes and a human inspects the results and notices something is off. Lean is a new programming language, built by mathematicians, with a type system that allows it to state and prove theorems in math. This makes it unique from languages like Python, in that it can catch math errors before running the program, and provide broad guarantees that code doesn't have bugs.\" (time for me to say this is &lt; 1 minute)</p>\n<p>More specifically, if I'm pitching to this folks at NIST (who really care about nit-picky high standards), I'll point to their current repositories of molecular simulation code that's \"state of the art\" in terms of rigor, transparency, and reproducibility, and explain how we could do better with Lean.</p>",
        "id": 389898786,
        "sender_full_name": "Tyler Josephson ⚛️",
        "timestamp": 1694185390
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"417769\">Bulhwi Cha</span> <a href=\"https://news.ycombinator.com/item?id=37434846\">said</a>:</p>\n<blockquote>\n<p>Lean is an interactive theorem prover. It can verify proofs written in Lean by humans. Mathlib is a monolithic library of classical mathematics written in Lean. Mathematicians contributing to Mathlib love it because it has all the interconnected subdisciplines they need in one place, and most of them aren't huge fans of constructive mathematics or univalent mathematics.</p>\n<p>Lean is also a strict pure functional programming language with dependent types. You can write correct and maintainable programs in Lean. You can also write proofs showing that a program terminates or it computes the desired answer, etc. Some computer scientists and programmers <del>praised</del> praise Lean's extensible syntax and editor support.</p>\n<p>See also: <a href=\"#narrow/stream/113488-general/topic/Lean.204.20on.20HN/near/389898786\">https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/Lean.204.20on.20HN/near/389898786</a></p>\n</blockquote>\n<p>Well, I tried. If there's any grammatical mistake in the above explanation, please let me know!</p>",
        "id": 389901621,
        "sender_full_name": "Bulhwi Cha",
        "timestamp": 1694186300
    },
    {
        "content": "<p>Who's your audience? What do they know / care about? </p>\n<p>One thing to watch out for is jargon. If your audience doesn't know \"univalent mathematics\" or \"dependent types,\" then you can either think about a substitute or try explaining in a different way. For example, \"dependent types\" doesn't mean anything to my audience and trips them up, so I describe it in looser terms, as \"type system that allows it to state and prove theorems\" -- but even saying \"type system\" is too technical for an audience that doesn't know some programming already.</p>\n<p>Small grammar thing: \"praised\" to either \"praise\" or \"are praising\" or \"like\" - present tense is more exciting/forward-leaning.</p>",
        "id": 389903422,
        "sender_full_name": "Tyler Josephson ⚛️",
        "timestamp": 1694186879
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"424214\">Tyler Josephson ⚛️</span> <a href=\"#narrow/stream/113488-general/topic/Lean.204.20on.20HN/near/389898786\">said</a>:</p>\n<blockquote>\n<p>Everyone should learn how to elevator pitch their research! </p>\n</blockquote>\n<p>I have a few problems with this pitch:</p>\n<ol>\n<li>your pitch works for any formal verification project, and there are a gazillion of them.</li>\n<li>You compare Lean with python. But the exact same arguments would also justify funding a whole lot of other theorem provers. Why should the agency fund lean over Coq, Agda, or F*.</li>\n<li>People have been saying this \"prove broad guarantees that code doesn't have bugs\" bit for a few decades. How's your pitch different? How would you catch people's attention?</li>\n</ol>",
        "id": 389903441,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1694186882
    },
    {
        "content": "<p>In general the issue with asking for an elevator pitch is, it needs to be brief and skip over enough technical details that it resembles the pitch for other products. And then it wouldn't meet the \"new product category\" criterion mentioned above.</p>",
        "id": 389904081,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1694187080
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"466334\">Shreyas Srinivas</span> <a href=\"#narrow/stream/113488-general/topic/Lean.204.20on.20HN/near/389903441\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"424214\">Tyler Josephson ⚛️</span> <a href=\"#narrow/stream/113488-general/topic/Lean.204.20on.20HN/near/389898786\">said</a>:</p>\n<blockquote>\n<p>Everyone should learn how to elevator pitch their research! </p>\n</blockquote>\n<p>I have a few problems with this pitch:</p>\n<ol>\n<li>your pitch works for any formal verification project, and there are a gazillion of them</li>\n<li>You compare Lean with python. But the exact same arguments would also justify funding a whole lot of other theorem provers. Why should the agency fund lean over Coq, Agda, or F*.</li>\n<li>People have been saying this \"prove broad guarantees that code doesn't have bugs\" bit for a few decades. How's your pitch different?</li>\n</ol>\n</blockquote>\n<p>Oh absolutely, on all three points. But, my audience doesn't know anything about formal verification, so this is about the right level for them. A pitch to an audience that's familiar with Coq would need to hit a bunch of entirely different points. Elevator pitches ought to be tailored for the audience - I'm in a fun cross-disciplinary position that I get to introduce formal methods to people who don't know anything about it.</p>",
        "id": 389904622,
        "sender_full_name": "Tyler Josephson ⚛️",
        "timestamp": 1694187223
    },
    {
        "content": "<p>If the audience is already familiar with Coq, then start over the with elevator pitch. I have much less practice with this one, but I think the points to hit might be the functional-but-in-place features of Lean 4, the large math library (not actually a great point, since other provers have their own, but the nuanced point is that Lean's is growing faster / has more popularity right now?), the straightforward extraction of executable C code.</p>",
        "id": 389905225,
        "sender_full_name": "Tyler Josephson ⚛️",
        "timestamp": 1694187400
    },
    {
        "content": "<p>I think Tyler's main point is crucial. Just look at the history of Lean itself and you'll see that the struggle to keep a project alive is real - especially if its nature is not inherently commercial.</p>\n<p>The Lean FRO is a huge victory for the entire community for sure. But the long term success is still reliant on getting more people out there (not only mathematicians, but also software engineers, I'd say) to know and experiment Lean 4.</p>",
        "id": 389905275,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1694187417
    },
    {
        "content": "<p>But I'd love to hear what y'all say - because I did have one person that I talked to say, \"but I think you should do your research program with Isabelle/HOL instead,\" and I really wasn't sure what to say to that</p>",
        "id": 389905278,
        "sender_full_name": "Tyler Josephson ⚛️",
        "timestamp": 1694187419
    },
    {
        "content": "<p>Agreed. But I find it easier to pitch ideas in a conversation with a few people since it allows for immediate follow-up questions and clarifications, since your target audience is small. HN, being a public forum attracts a large variety of people, especially if passive readers are included. So what would the target audience be. If you write a pitch for one type of person, another might be unimpressed and since this is the internet, they might add a dismissive and authoritative sounding comment.</p>",
        "id": 389905508,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1694187486
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"466334\">Shreyas Srinivas</span> <a href=\"#narrow/stream/113488-general/topic/Lean.204.20on.20HN/near/389905508\">said</a>:</p>\n<blockquote>\n<p>Agreed. But I find it easier to pitch ideas in a conversation with a few people since it allows for immediate follow-up questions and clarifications, since your target audience is small. HN, being a public forum attracts a large variety of people, especially if passive readers are included. So what would the target audience be. If you write a pitch for one type of person, another might be unimpressed and since this is the internet, they might add a dismissive and authoritative sounding comment.</p>\n</blockquote>\n<p>Mmm. Indeed. Super fine line to walk when the audience is \"anyone on the Internet who might stop by.\"</p>",
        "id": 389905752,
        "sender_full_name": "Tyler Josephson ⚛️",
        "timestamp": 1694187569
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"424214\">Tyler Josephson ⚛️</span> <a href=\"#narrow/stream/113488-general/topic/Lean.204.20on.20HN/near/389905225\">said</a>:</p>\n<blockquote>\n<p>If the audience is already familiar with Coq, then start over the with elevator pitch. I have much less practice with this one, but I think the points to hit might be the functional-but-in-place features of Lean 4, the large math library (not actually a great point, since other provers have their own, but the nuanced point is that Lean's is growing faster / has more popularity right now?), the straightforward extraction of executable C code.</p>\n</blockquote>\n<p>I have heard this Isabelle argument with algorithms formalisation. My response would be that Isabelle is a nightmare from a usability perspective. For just one example, one is forced to work on jedit or isabelle's own crippled version of vscodium. Another is the difficulty of metaprogramming (I might be biased on this one, but I found lean metaprogramming easier to learn thanks to the book).</p>",
        "id": 389907061,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1694188031
    },
    {
        "content": "<p>One can perhaps give (semi-)technical reasons for lean. Being easier to work with classical basic math out of the box is a major plus point for lean (specifically mathlib), since most systems are analysed with such math. For example, if I am designing a control system,  I seriously cannot care one tiny bit about constructivism or even trying to work out which axioms are \"fine\". I just want to write a good old fashioned math proof that my system does what it should. Another plus point for lean is the functional programming aspect. Coq users might point out how programming language stuff and verification is easy on Coq, or more abstruse aspects like not implicitly including axioms, guarantees on strong normalisation, coinductive types etc. Isabelle and F* seem to have more powerful automation (although, optimistically  it is a matter of time before other provers catch up). </p>\n<p>But in the end I doubt any of these technical issues are such difficult barriers that they cannot be overcome in other theorem provers for practical use cases. For instance, Isabelle might have its  sledgehammer but coq has coqhammer and lean will hopefully have a hammer soon. One of the basic promises of a theorem prover is that some day it will assist us in working with math. This promise cannot be met without addressing usability issues for programmers and mathematicians who are new to this stuff. This often conflicts with the needs of existing power users who cannot be ignored, and who have fallen in love with the current ways of using the system. So any established prover will have a difficult time overhauling its UX. It can get even harder if aspects of the UX are tightly coupled with the system and disentangling them is hard. In that sense, Lean's separation of concerns is a major plus.</p>",
        "id": 389911199,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1694189595
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 389913328,
        "sender_full_name": "Sven Nilsen",
        "timestamp": 1694190434
    },
    {
        "content": "<p>For algorithms, if your goal is to verify algorithms, Isabelle is great. If you want to build a unified library of algorithms that eventually attracts contributors from the algorithms community who have never seen a theorem prover before, the choice becomes less clear.</p>",
        "id": 389914247,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1694190790
    }
]