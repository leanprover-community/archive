[
    {
        "content": "<p><a href=\"#narrow/stream/270676-lean4/topic/.60autoImplicit.20true.60.20is.20evil/near/355142480\">Various</a> <a href=\"#narrow/stream/113488-general/topic/autoimplicit.20and.20Type*/near/383878932\">Zulip</a> <a href=\"#narrow/stream/270676-lean4/topic/.5BRFC.5D.20Make.20autoImplicit.20default.20to.20false.20on.20non-greek/near/317125914\">threads</a> have complained that <code>autoImplicit true</code> (the status quo in mathlib4) is a repeated footgun for newcomers and experienced users alike.</p>",
        "id": 384204178,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1691832973
    },
    {
        "content": "<p>I understand that this opinion is not universally held, so I am not proposing _banning_ <code>autoImplicit true</code> in mathlib. What I propose instead is having the footgun not be pointed at our feet by default, and that mathlib4 files announce that they are in footgun mode with <code>set_option autoImplicit true</code>.</p>",
        "id": 384204203,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1691832980
    },
    {
        "content": "<p>I've created <a href=\"https://github.com/leanprover-community/mathlib4/pull/6528\">#6528</a> (which includes a slightly longer justification), which changes the default in mathlib4 to be <code>autoImplicit false</code>. To make this build, 317 files gained <code>set_option autoImplicit true</code>.</p>",
        "id": 384204628,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1691833084
    },
    {
        "content": "<p>/poll What should mathlib4's stance on <code>autoImplicit</code> be, assuming we keep <code>relaxedAutoImplicit false</code></p>\n<ul>\n<li><code>true</code> by default, <code>set_option autoImplicit false</code> discouraged</li>\n<li><code>true</code> by default, <code>set_option autoImplicit false</code> allowed</li>\n<li><code>false</code> by default, <code>set_option autoImplicit true</code> allowed</li>\n<li><code>false</code> by default, <code>set_option autoImplicit true</code> discouraged</li>\n</ul>",
        "id": 384265143,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1691846764
    },
    {
        "content": "<p>(as a reminder, if we leave <code>relaxedAutoImplicit</code> the same, then <code>autoImplicit true</code> means  \"create single-letter variables automatically\" and <code>autoImplicit false</code> means \"give an error if I refer to a single-letter variable I forgot to declare\")</p>",
        "id": 384265393,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1691846825
    },
    {
        "content": "<p>I think we need to know if there is a performance drag with auto implicits.</p>",
        "id": 384271412,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1691848329
    },
    {
        "content": "<p>If there is a performance drag with them I will change my vote.</p>",
        "id": 384283150,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1691851299
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 384286283,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1691852007
    },
    {
        "content": "<p>To give one performance data point: replacing <code>Type _</code> with <code>Type*</code> was an overall wall time speedup of ~3%. If <em>all</em> of mathlib used autoimplicits (which generate <code>Type _</code>), then it would have not been possible to replace any of these.</p>",
        "id": 384418641,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1691913216
    },
    {
        "content": "<p>I would caution against using this performance argument against <code>Type _</code> vs <code>Type*</code>, because I think there is an alternative solution (level metavars -&gt; vars at the <code>:=</code>) which will get a similar speedup without needing <code>Type*</code> and which also applies to autoimplicits</p>",
        "id": 384419017,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1691913354
    },
    {
        "content": "<p>About 10% of files currently use autoImplicit; so a reasonable estimate would be that purging it entirely (an extreme interpretation of option 4) would only gain us another 0.3% wall time, which I don't think justifies doing so.</p>",
        "id": 384419021,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1691913355
    },
    {
        "content": "<p>I don't think performance improvements should be the main motivation here; switching to <code>Type*</code> from <code>Type _</code> distances us from a particularly surprising class of foot gun, just as changing the default for <code>autoImplicit</code> would.</p>",
        "id": 384419498,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1691913490
    },
    {
        "content": "<p>the alternative solution also prevents the footgun issue</p>",
        "id": 384419575,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1691913525
    },
    {
        "content": "<p>I don't agree, it just takes us back to the weaker version of it we had in lean 3</p>",
        "id": 384419644,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1691913553
    },
    {
        "content": "<p>remind me?</p>",
        "id": 384419719,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1691913576
    },
    {
        "content": "<p>we would occasionally end up with declarations that unified to <code>max u v</code> everywhere instead of separate u and v universes. We had a linter that could catch the obvious cases, but it wasn't perfect.</p>",
        "id": 384419911,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1691913640
    },
    {
        "content": "<p>And it could be triggered by things before the <code>:=</code></p>",
        "id": 384420051,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1691913696
    },
    {
        "content": "<p><code>Type*</code> will fix that, I'm just not convinced that it's a sufficiently big deal to make it mandatory even in basic files that don't have these universe issues</p>",
        "id": 384420619,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1691913870
    },
    {
        "content": "<p>(we still have the <code>max u v</code> linter BTW)</p>",
        "id": 384420840,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1691913945
    },
    {
        "content": "<p>Yes, hopefully the structure of the poll above makes it clear that I am not proposing making anything mandatory</p>",
        "id": 384421256,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1691914072
    },
    {
        "content": "<p>I'm a bit against <code>set_option autoImplicit</code> in mathlib files, because it means that you don't know when opening a random file whether autoimplicits are legal or not and this makes interpreting statements harder</p>",
        "id": 384421843,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1691914246
    },
    {
        "content": "<p>I don't think we have precedent for that kind of \"stylistic choice\" on a per-file basis in mathlib</p>",
        "id": 384422227,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1691914367
    },
    {
        "content": "<p>We already have that stylistic choice now, but without a marker to indicate that it's been made or CI to enforce it remain consistent. Files from mathport typically use the <code>variables</code> style, a handful of new files presumably use autoImplicits only</p>",
        "id": 384422484,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1691914458
    },
    {
        "content": "<p>If it is used, it should be because of some actual behavioral difference relevant to the content of the file (e.g. a pattern which frequently causes the <code>max u v</code> bug in that file), not because of the author's stylistic preference</p>",
        "id": 384422543,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1691914499
    },
    {
        "content": "<p>I think \"authors stylistic preference\" is better than the status quo of \"authors stylistic preference âˆª authors accident\"</p>",
        "id": 384422819,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1691914598
    },
    {
        "content": "<p>I would exclude mathport-isms as just slightly shoddy style which will get cleaned up in time. But we should try to have a uniform style prescription, existing violations notwithstanding</p>",
        "id": 384422977,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1691914653
    },
    {
        "content": "<p>besides, any decision here isn't going to decrease the number of mathportisms in mathlib</p>",
        "id": 384423339,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1691914740
    },
    {
        "content": "<p>unless we take mathport style as gospel, and even then it wouldn't really work because mathport style changed over the course of the port</p>",
        "id": 384423585,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1691914801
    },
    {
        "content": "<p>No, but a decision here makes a clear marker that labels a file that uses mathportisms from one that doesn't</p>",
        "id": 384423691,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1691914821
    },
    {
        "content": "<p>that sounds a little scary, like we would have a second wave of \"style porting\" mathlib</p>",
        "id": 384423843,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1691914868
    },
    {
        "content": "<p>What are we considering a mathport-ism here?</p>",
        "id": 384423846,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1691914870
    },
    {
        "content": "<p>We already have that second wave lined up with things like <code>refine'</code> vs <code>refine</code>, right?</p>",
        "id": 384423939,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1691914896
    },
    {
        "content": "<p>A mathport-ism is when mathport's output doesn't match idiomatic lean 4 style. This term is only as well-defined as the notion of lean 4 idiomatic style itself</p>",
        "id": 384424183,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1691914952
    },
    {
        "content": "<p>Yes, <code>refine'</code> is a mathport-ism</p>",
        "id": 384424294,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1691914985
    },
    {
        "content": "<p>also <code>cases'</code> and <code>induction'</code></p>",
        "id": 384424320,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1691914992
    },
    {
        "content": "<p>I still anticipate we can eliminate all cases of <code>refine'</code> et al in one fell swoop once we fix the technical hurdles to doing mass AST rewrites</p>",
        "id": 384425270,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1691915244
    },
    {
        "content": "<p>I am very much in favour of keeping <code>refine'</code> around for the reason I already mentioned: When I'm writing a proof and apply lemma <code>x</code>, I don't want to try the <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mn>2</mn><mi>n</mi></msup></mrow><annotation encoding=\"application/x-tex\">2^n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6644em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6644em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span></span></span></span></span></span></span> combinations of <code>_</code> and <code>?_</code> where <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span> is the number of explicit arguments to <code>x</code>. In short, <code>refine</code> is a good idea for proof-reading, but a terrible one for proof-writing (at least in the current situation where there's no automation for introducing the <code>_</code> and <code>?_</code> in the right spots).</p>",
        "id": 384475549,
        "sender_full_name": "YaÃ«l Dillies",
        "timestamp": 1691928192
    },
    {
        "content": "<p>That sounds like an argument for <code>refine'</code> to have a <code>try this</code> action</p>",
        "id": 384475943,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1691928290
    },
    {
        "content": "<p>A summary of the poll so far as it relates to <a href=\"https://github.com/leanprover-community/mathlib4/pull/6528\">#6528</a>:</p>\n<ul>\n<li>5 people prefer <code>autoImplicit true</code> as default (the status quo) (<code>p2 \\ p3</code>)</li>\n<li>5 people do not care what the default is as long as we're permissive (<code>p2 \\inter p3</code>)</li>\n<li>18 people prefer <code>autoImplicit false</code> as the default (<code>p3 \\union p4 / p2</code>), of which 10 (<code>p4 / p3</code>) feel very strongly</li>\n</ul>",
        "id": 384478207,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1691928845
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">YaÃ«l Dillies</span> <a href=\"#narrow/stream/113488-general/topic/mathlib4.3A.20autoImplicit.20false.20by.20default.3F/near/384475549\">said</a>:</p>\n<blockquote>\n<p>I am very much in favour of keeping <code>refine'</code> around for the reason I already mentioned: When I'm writing a proof and apply lemma <code>x</code>, I don't want to try the <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mn>2</mn><mi>n</mi></msup></mrow><annotation encoding=\"application/x-tex\">2^n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6644em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6644em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span></span></span></span></span></span></span> combinations of <code>_</code> and <code>?_</code> where <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span> is the number of explicit arguments to <code>x</code>. In short, <code>refine</code> is a good idea for proof-reading, but a terrible one for proof-writing (at least in the current situation where there's no automation for introducing the <code>_</code> and <code>?_</code> in the right spots).</p>\n</blockquote>\n<p>Note that you can just write <code>_</code> everywhere and see where Lean complains. But I'm not claiming it's a perfect solution</p>",
        "id": 384496170,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1691933286
    },
    {
        "content": "<p>Given <a href=\"#narrow/stream/113488-general/topic/mathlib4.3A.20autoImplicit.20false.20by.20default.3F/near/384265143\">the vote</a> and <a href=\"#narrow/stream/113488-general/topic/mathlib4.3A.20autoImplicit.20false.20by.20default.3F/near/384478207\">my aggregation</a> above, I propose we merge/delegate <a href=\"https://github.com/leanprover-community/mathlib4/pull/6528\">#6528</a>. It's likely to go stale fast, and every time it gets fixed it effectively starts with a fresh cache.</p>\n<p>It's worth noting that it is very easy to revert <a href=\"https://github.com/leanprover-community/mathlib4/pull/6528\">#6528</a> if we change our minds later with a simple find and replace.</p>",
        "id": 384780205,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1692020024
    },
    {
        "content": "<p>I kicked it on the queue</p>",
        "id": 384785881,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1692021067
    },
    {
        "content": "<p>I wouldn't be surprised if the build fails in one or two place due to rot in the last 3 days, but I guess we'll find out!</p>",
        "id": 384787718,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1692021406
    },
    {
        "content": "<p>It turns out this is picking up conflicts faster than I can fix them!</p>",
        "id": 384822939,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1692027676
    },
    {
        "content": "<p>3 hours of babysitting (and distracting bors from interfering) from when it first hit the queue and it finally passes CI</p>",
        "id": 384841739,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1692031466
    }
]