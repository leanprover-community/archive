[
    {
        "content": "<p>I would like to start a conversation about PRing my work on <a href=\"https://github.com/asouther4/lean-social-choice\">Social Choice Theory in Lean</a>. Right now, my repo has two main files: </p>\n<ol>\n<li>\n<p>In the <code>basic</code> file, I have been slowly formalizing the first chapter of <a href=\"https://www.hup.harvard.edu/catalog.php?isbn=9780674919211\">Collective Choice and Social Welfare</a> by Amartya Sen.  I have just been working through and formalizing each definition and lemma as they come, without much thought yet towards building a user-friendly library. </p>\n</li>\n<li>\n<p>In the <code>arrows_theorem</code> file, I have formalized a proof of <a href=\"https://en.wikipedia.org/wiki/Arrow%27s_impossibility_theorem\">Arrow's Impossibility Theorem</a>. </p>\n</li>\n</ol>\n<p>Some maintainers have expressed interest in getting this work on mathlib. What should a PR look like for this work? Should I start with Arrow's Theorem and then PR bit-by-bit from there if people are interested in more? Where should I even plan to put these files? </p>\n<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> once  suggested putting social choice theory and combinatorial game theory in their own home. I have long-term hopes to formalize more results in social choice theory, game theory, and microeconomic theory if that affects how we think about this.</p>",
        "id": 262196373,
        "sender_full_name": "Andrew  Souther",
        "timestamp": 1637431483
    },
    {
        "content": "<p>Start by opening some PR for the preliminary lemmas. Then you can PR Arrow's theorem in several go. I don't quite know where it belongs. <code>combinatorics.social</code> or <code>order.social</code> both sound like decent places to me.</p>",
        "id": 262196638,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1637431824
    },
    {
        "content": "<p>Also, I have been in contact with Eric Pacuit and Wesley Holliday who wrote <a href=\"https://arxiv.org/abs/2110.08453\">this paper</a> on Voting Theory in Lean. In the next few months, we plan to merge our code into one unified framework. They are real experts in social choice theory (I am not), and they have offered to help guide the conversation about design choices for a useful social choice library going forward.</p>",
        "id": 262196750,
        "sender_full_name": "Andrew  Souther",
        "timestamp": 1637431972
    },
    {
        "content": "<p>Then I would advise you to coordinate with them first. You do not have a huge amount of code, so PRing to mathlib should go smoothly. I see <span class=\"user-mention silent\" data-user-id=\"414747\">Eric Pacuit</span> is already here, by the way!</p>",
        "id": 262197147,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1637432451
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"366882\">@Andrew  Souther</span> I have a proof of arrow's theorem from Sen's book as well (so, the first three chapters) in Lean 4 where I made everything I could computable. What's the status on your work?</p>",
        "id": 389366134,
        "sender_full_name": "Adrien Champion",
        "timestamp": 1693989259
    },
    {
        "content": "<p>As far as I can tell it's not in mathlib 4 is it?</p>",
        "id": 389366187,
        "sender_full_name": "Adrien Champion",
        "timestamp": 1693989278
    },
    {
        "content": "<p>I haven't worked on this project much since I was a student in 2021. You're right, it never made it into mathlib. It's just sitting in an old GitHub repo. Congrats on your proof!</p>",
        "id": 389409102,
        "sender_full_name": "Andrew  Souther",
        "timestamp": 1694003438
    },
    {
        "content": "<p>I see thanks! I'm working towards publishing my version but I want to clean it up first, I'll update this thread once I have</p>",
        "id": 389426092,
        "sender_full_name": "Adrien Champion",
        "timestamp": 1694008202
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"282271\">@Bolton Bailey</span> don't be sad there's a brand new proof in Lean 4 <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span></p>",
        "id": 389426176,
        "sender_full_name": "Adrien Champion",
        "timestamp": 1694008220
    },
    {
        "content": "<p>Are you going to PR it?</p>",
        "id": 389562949,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1694059323
    },
    {
        "content": "<p>Well once I improve the presentation and documentation I'd rather get feedback first. This is my first time working a proof that big, so I'm not sure it'll be up to mathlib's standards</p>",
        "id": 389929008,
        "sender_full_name": "Adrien Champion",
        "timestamp": 1694197326
    },
    {
        "content": "<p>I'm actually very confident it won't, starting with the syntax as I did not try to follow mathlib's conventions mostly because I don't know them</p>",
        "id": 389929274,
        "sender_full_name": "Adrien Champion",
        "timestamp": 1694197447
    },
    {
        "content": "<p>Actually the best way to get your code to mathlib standards is probably to open a pull request. Of course it’s better if you can start the job on your own, but you’ll probably get a lot more feedback by opening PRs than by sending some code on Zulip</p>",
        "id": 389940265,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1694202393
    },
    {
        "content": "<p>It just hit me that, since I'm doing the whole book (well, just the first three chapters currently), I'm using mostly custom typeclasses. For preorder/quasi-order/order for instance (though they imply mathlib's). So instead of cleaning everything I did I should probably just rewrite Arrow without custom classes</p>",
        "id": 390012265,
        "sender_full_name": "Adrien Champion",
        "timestamp": 1694249950
    },
    {
        "content": "<p>In particular I have a custom notion of <code>Finite</code>-ness, as I struggled to get a computable one from Mathlib. The main issue here is that it's my first time using Mathlib at all, in everything else I did I depended only on core and sometimes std4</p>",
        "id": 390012443,
        "sender_full_name": "Adrien Champion",
        "timestamp": 1694250071
    },
    {
        "content": "<p>What I'm saying is that I realize now we will probably never merge anything based on what I have right now, but I can try to write a version that's more Mathlib-friendly. The issue being time/energy/actual job <span aria-label=\"confused\" class=\"emoji emoji-1f615\" role=\"img\" title=\"confused\">:confused:</span></p>",
        "id": 390013705,
        "sender_full_name": "Adrien Champion",
        "timestamp": 1694250998
    },
    {
        "content": "<p>My repository is public now. It's far from where I wanted it to be before sharing it, but hopefully it will make the conversation easier</p>\n<ul>\n<li><a href=\"https://github.com/AdrienChampion/collChoSoWel\">https://github.com/AdrienChampion/collChoSoWel</a></li>\n</ul>",
        "id": 390014134,
        "sender_full_name": "Adrien Champion",
        "timestamp": 1694251333
    },
    {
        "content": "<p>For finite, was <code>Fintype</code> (maybe with decidable_eq and such) not good enough for you?</p>",
        "id": 390033590,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1694264640
    },
    {
        "content": "<p>Well the thing is, I needed a notion of finiteness early on and at that point I was still avoiding to depend on Mathlib...</p>",
        "id": 390045227,
        "sender_full_name": "Adrien Champion",
        "timestamp": 1694274339
    },
    {
        "content": "<p>In any case, I'll try my best to write a Mathlib-friendly version as soon as I find enough time, most likely using <code>Fintype</code> since my <code>Finite</code> class is kind of based on it</p>",
        "id": 390045419,
        "sender_full_name": "Adrien Champion",
        "timestamp": 1694274523
    }
]