[
    {
        "content": "<p>I'm on Power World 7/10 (<a href=\"https://adam.math.hhu.de/#/g/hhu-adam/NNG4/world/Power/level/7\">https://adam.math.hhu.de/#/g/hhu-adam/NNG4/world/Power/level/7</a>)<br>\nand I would like to use <code>nth_rewrite</code> with <code>mul_comm</code> to help move the terms around easier.</p>\n<p>I'm here:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Current</span> <span class=\"n\">Goal</span>\n<span class=\"n\">Objects</span><span class=\"o\">:</span>\n<span class=\"n\">abn_1</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span>\n<span class=\"n\">Assumptions</span><span class=\"o\">:</span>\n<span class=\"n\">n_ih</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"n\">n_1</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">^</span> <span class=\"n\">n_1</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">^</span> <span class=\"n\">n_1</span>\n<span class=\"n\">Goal</span><span class=\"o\">:</span>\n<span class=\"n\">a</span> <span class=\"bp\">^</span> <span class=\"n\">n_1</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">^</span> <span class=\"n\">n_1</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">^</span> <span class=\"n\">n_1</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">^</span> <span class=\"n\">n_1</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>But <code>nth_rewrite X [mul_comm]</code> only does something when X=1. The error under <code>mul_comm</code> for X&gt;1 is</p>\n<blockquote>\n<p>tactic 'rewrite' failed, did not find instance of the pattern in the target expression</p>\n</blockquote>\n<p>Even though there are plenty of multiplications to commute on the lhs. Am I using it wrong?</p>",
        "id": 397988808,
        "sender_full_name": "Alex Sweeney",
        "timestamp": 1698024422
    },
    {
        "content": "<p>No, this is a known problem: <a href=\"https://github.com/leanprover/lean4/pull/2538\">lean4#2538</a>, with a fix at <a href=\"https://github.com/leanprover-community/lean/pull/2539\">lean#2539</a> that is stalled in review.</p>\n<p>For now most people provide extra arguments, e.g. <code>rw [mul_comm x]</code>.</p>",
        "id": 397991051,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1698025842
    },
    {
        "content": "<p>Can we have <code>Natural number game high prio</code> tag on the issue? ;-)</p>\n<p><span class=\"user-mention\" data-user-id=\"544521\">@Alex Sweeney</span> sorry about this :-)</p>",
        "id": 398013635,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1698039433
    },
    {
        "content": "<p>(<a href=\"https://github.com/leanprover/lean4/pull/2539\">lean4#2539</a> I guess)</p>",
        "id": 398013666,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1698039480
    },
    {
        "content": "<p>Part of making things high priority is to +1 the issue/PR, and even leave a comment explaining why you want it.</p>\n<p>So far I have only wanted this for internal use in <code>rw?</code> and <code>rw_search</code>.</p>",
        "id": 398027303,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1698046125
    },
    {
        "content": "<p>I'm putting together some \"tips &amp; tricks\" for the students in my formalization \"seminar\". I was thinking of mentioning <code>nth_rw</code> as an alternative to <code>rw</code> when there are several places matching the lhs and more selective rewriting is desired. But in the current state, I feel that I can't do this, as explaining how it works precisely would be rather confusing. <span aria-label=\"frown\" class=\"emoji emoji-1f641\" role=\"img\" title=\"frown\">:frown:</span></p>",
        "id": 398899444,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1698413467
    },
    {
        "content": "<p>BTW there is also <code>rw (occs := n)</code> for doing nth rewrite, I'm not sure if it still has the same issues that motivated <code>nth_rw</code> in lean 3</p>",
        "id": 398899682,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1698413541
    },
    {
        "content": "<p>Michael you can use <code>conv</code> to do that. This is now easier using the <code>conv?</code> widget.</p>",
        "id": 398899810,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1698413593
    },
    {
        "content": "<p><em>I</em> can certainly find some work-around. I'm complaining on behalf of my students <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span> .</p>",
        "id": 398899949,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1698413633
    },
    {
        "content": "<p>I understand, but I'm pointing out that conv is now a lot easier to use.</p>",
        "id": 398900050,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1698413662
    },
    {
        "content": "<p><code>rw (occs := 2) [pow_two]</code> gives me an \"unexpected token '('\" error. What would be correct syntax?</p>",
        "id": 398900279,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1698413751
    },
    {
        "content": "<p>Doing <code>conv?</code> in the example above and then shift-clicking the lhs of the equality and then clicking on \"Generate conv\" results in</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"n\">x</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"bp\">*</span><span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">conv</span> <span class=\"bp\">=&gt;</span>\n   <span class=\"n\">enter</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>but then the widget is gone and I cannot zoom in further.</p>",
        "id": 398901072,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1698414013
    },
    {
        "content": "<p>This works as intended, you can now operate on what you clicked on.</p>",
        "id": 398902514,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1698414555
    },
    {
        "content": "<p>But indeed we could add a <code>conv</code> version of <code>conv?</code> to repeatedly zoom. However the current tool should be enough for most situations for your students.</p>",
        "id": 398902750,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1698414629
    },
    {
        "content": "<p>But how can I use the widget now to get from <code>x^2 + y^2</code> to <code>y^2</code>?</p>",
        "id": 398902758,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1698414632
    },
    {
        "content": "<p>Ah, OK; I have to do it in <em>one</em> step.</p>",
        "id": 398902867,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1698414675
    },
    {
        "content": "<p>You can't without have a conv version of the <code>conv?</code> tactic. I don't know how to write <code>conv</code>-mode tactics, but this shouldn't be hard.</p>",
        "id": 398902878,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1698414679
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"479359\">Michael Stoll</span> <a href=\"#narrow/stream/113488-general/topic/How.20to.20use.20nth_rewrite.20in.20NNG4.3F/near/398900279\">said</a>:</p>\n<blockquote>\n<p><code>rw (occs := 2) [pow_two]</code> gives me an \"unexpected token '('\" error. What would be correct syntax?</p>\n</blockquote>\n<p><code>rw [pow_two] (occs := 2)</code> I believe?</p>",
        "id": 398911742,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1698417627
    },
    {
        "content": "<p>Nope, same error.</p>",
        "id": 398922791,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1698421183
    },
    {
        "content": "<p><code>rw [pos_two] (config := {occs := .pos [2]})</code>, sadly</p>",
        "id": 399140165,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1698575535
    },
    {
        "content": "<p>It still suffers from the same problem that necessitated <code>nth_rewrite</code> in Lean 3, please see <a href=\"https://github.com/leanprover/lean4/pull/2539\">lean4#2539</a>.</p>\n<p>Note that the <code>nth_rewrite</code> implemented in Mathlib is just a wrapper around <code>occs</code>, and in particular is not at all a re-implementation of my <code>nth_rewrite</code> from Lean 3.</p>\n<p>We'll get this functionality back when <a href=\"https://github.com/leanprover/lean4/pull/2539\">lean4#2539</a> is merged.</p>",
        "id": 399140278,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1698575642
    }
]