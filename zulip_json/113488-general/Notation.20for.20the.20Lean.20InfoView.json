[
    {
        "content": "<p>Hey all, I was wondering how to alter the Lean Infoview so that it displays a nickname for a concept.<br>\nAs an example if I wrote an inductive type </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">BoolExpr</span> <span class=\"n\">where</span>\n<span class=\"bp\">...</span>\n  <span class=\"bp\">|</span> <span class=\"n\">val</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span><span class=\"o\">)</span> <span class=\"c1\">-- special values, T or F</span>\n<span class=\"bp\">...</span>\n</code></pre></div>\n<p>Then I might like <code>BoolExpr.val true</code> to be displayed in the infoview as <code>T</code>. Is there a way to do this? Thanks so much in advance!</p>",
        "id": 408076651,
        "sender_full_name": "Brandon Sisler",
        "timestamp": 1702601991
    },
    {
        "content": "<p>you can declare <code>notation \"T\" =&gt; val true</code></p>",
        "id": 408077001,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1702602115
    },
    {
        "content": "<p>I did try <code>notation:max \"T\" =&gt; BoolExpr.val true</code> but the issue is that while I can use that notation in the Lean file, that the infoview still displays  <code> BoolExpr.val true</code>.</p>",
        "id": 408077761,
        "sender_full_name": "Brandon Sisler",
        "timestamp": 1702602464
    },
    {
        "content": "<p>It tends to do that if you #eval</p>",
        "id": 408080049,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1702603867
    },
    {
        "content": "<p>Try using the #reduce command instead</p>",
        "id": 408080066,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1702603887
    },
    {
        "content": "<p>Wow, good tip, thanks!</p>",
        "id": 408080089,
        "sender_full_name": "Brandon Sisler",
        "timestamp": 1702603918
    },
    {
        "content": "<p>Oh good catch</p>",
        "id": 408080242,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1702604003
    },
    {
        "content": "<p>Note that #reduce can be much slower than #eval because #reduce is done by the kernel as opposed to the (not formally verified) VM. At least this was the case in lean 3...</p>",
        "id": 408080260,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1702604013
    },
    {
        "content": "<p><code>#eval</code> uses <code>Repr</code> to print the term, unlike in the tactic mode view or expected type view where you are looking at expressions directly</p>",
        "id": 408080357,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1702604052
    },
    {
        "content": "<p>You can also customize <code>Repr</code> to show <code>T</code> if you want</p>",
        "id": 408080375,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1702604069
    },
    {
        "content": "<p>I think it would be great if there was a crossover <del>tactic</del> command that evaluated like #eval and displayed using the unexpanders like #reduce. Customising Repr feels overkill</p>",
        "id": 408080615,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1702604210
    },
    {
        "content": "<p>You can use <code>ToExpr</code> instead of <code>Repr</code>, I posted code doing that here a little while ago</p>",
        "id": 408080784,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1702604301
    },
    {
        "content": "<p><a href=\"#narrow/stream/270676-lean4/topic/Prettyprinting.20the.20result.20of.20an.20.23eval/near/403048023\">https://leanprover.zulipchat.com/#narrow/stream/270676-lean4/topic/Prettyprinting.20the.20result.20of.20an.20.23eval/near/403048023</a></p>",
        "id": 408080842,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1702604337
    },
    {
        "content": "<p>You will also want to use <code>Mathlib.Tactic.DeriveToExpr</code></p>",
        "id": 408080893,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1702604371
    },
    {
        "content": "<p>Why is this in mathlib though? Sounds useful for other stuff too.</p>",
        "id": 408081087,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1702604488
    },
    {
        "content": "<p>The story is that Scott tried to upstream it to Std, but that stalled out due to objections by Mario and Eric since there was the possibility of a Qq version in Std sometime in the future. <a href=\"#narrow/stream/348111-std4/topic/ToExpr.20derive.20handler/near/386191925\">https://leanprover.zulipchat.com/#narrow/stream/348111-std4/topic/ToExpr.20derive.20handler/near/386191925</a></p>\n<p>Mario's opinion back then was that ToExpr was \"just some bootstrapping thing that no one else should need to care about\" and that if you need the handler \"you should either depend on mathlib or copy that handler into your project\".</p>\n<p>I'm hoping to potentially upstream it to Lean to enable using ToExpr instead of Repr for <code>#eval</code> as a default, since that would provide a nicer user experience (and we could fix the bugs in universe level handling in the core ToExpr instances), but I have no idea if or when this would happen.</p>",
        "id": 408091268,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1702608171
    },
    {
        "content": "<p>The fact that there are level bugs in some ToExpr instances especially contributes to this sense that it shouldn't be depended on too widely</p>",
        "id": 408091522,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1702608248
    },
    {
        "content": "<p>The bug is that levels aren't handled at all</p>",
        "id": 408091593,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1702608268
    },
    {
        "content": "<p>exactly</p>",
        "id": 408091617,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1702608278
    },
    {
        "content": "<p>if those were fixed I'd feel better about having <code>DeriveToExpr</code> in std or core</p>",
        "id": 408091699,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1702608304
    },
    {
        "content": "<p>They're fixed in DeriveToExpr</p>",
        "id": 408091725,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1702608316
    },
    {
        "content": "<p>yes, but then you have a mix of instances and only some combinations of them work</p>",
        "id": 408091782,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1702608338
    },
    {
        "content": "<p>All the core instances are overridden in mathlib, but yes, it would be good if core handled these correctly. This requires upstreaming ToLevel to core</p>",
        "id": 408091916,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1702608379
    },
    {
        "content": "<p>they are overridden with instances which have more assumptions, I think that means the bad ones will still be used if those assumptions are not satisfied</p>",
        "id": 408092061,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1702608438
    },
    {
        "content": "<p>Yes, that's a bug, and it would be good to remove the <code>instance</code> attribute from the core ones for the mathlib instances to be completely correct.</p>",
        "id": 408092173,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1702608473
    },
    {
        "content": "<p>\"Upstreaming to core\" of course would mean fixing core's instances using ToLevel rather than monkeypatching.</p>",
        "id": 408092836,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1702608701
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/113488-general/topic/Notation.20for.20the.20Lean.20InfoView/near/408092173\">said</a>:</p>\n<blockquote>\n<p>Yes, that's a bug, and it would be good to remove the <code>instance</code> attribute from the core ones for the mathlib instances to be completely correct.</p>\n</blockquote>\n<p>Correction: I already did remove the <code>instance</code> attribute from core instances, so there is no bug, assuming there have been no new ToExpr instances.</p>\n<p><a href=\"https://github.com/leanprover-community/mathlib4/blob/ce9ef8bea420e374f6daf1089ae6a2c8a7dcedd4//Mathlib/Tactic/ToExpr.lean\">https://github.com/leanprover-community/mathlib4/blob/ce9ef8bea420e374f6daf1089ae6a2c8a7dcedd4//Mathlib/Tactic/ToExpr.lean</a></p>",
        "id": 408094544,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1702609244
    },
    {
        "content": "<p>does that actually work? I thought attribute removal is local only</p>",
        "id": 408095575,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1702609525
    },
    {
        "content": "<p>Guess it doesn't, so correction correction, there's a bug.</p>\n<p>I wonder if there's a way to make ToLevel more robust. I know one issue is that it can go off the rails if there are metavariables. In the following, <code>α</code> ends up specializing to <code>α : Type 125</code>. </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.ToExpr</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Lean.ToExpr</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">Lean.ToExpr.toExpr</span> <span class=\"o\">([]</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 408099936,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1702611110
    },
    {
        "content": "<p>we would need to have a way to indicate that the universe is an outparam</p>",
        "id": 408100374,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1702611274
    },
    {
        "content": "<p>that doesn't seem likely in the near term so I would be inclined to just live with it</p>",
        "id": 408100427,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1702611298
    },
    {
        "content": "<p>I think this is another good example of a typeclass that wants to run custom logic</p>",
        "id": 408100633,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1702611377
    },
    {
        "content": "<p>I still think it was a bad idea to not make the typeclass system extensible in that way</p>",
        "id": 408100744,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1702611407
    }
]