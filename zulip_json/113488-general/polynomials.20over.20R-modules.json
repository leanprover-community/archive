[
    {
        "content": "<p>I was trying to formalize a slide from a presentation and I came to the concept of \"A (multivariable) polynomial over an R-module\". Mathlib says that <code>mv_polynomial</code>s are defined over rings. I guess you could define a polynomial over an R-module and evaluate it for values of R, though you just wouldn't be able to multiply such polynomials. Would it be reasonable to change the definition of <code>mv_polynomial</code> to allow this?</p>",
        "id": 275929717,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1647724079
    },
    {
        "content": "<p>Yeah, I guess that's certainly possible.</p>",
        "id": 275929886,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1647724318
    },
    {
        "content": "<p>You can also take polynomials over the tensor algebra of your module.</p>",
        "id": 275930481,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1647725126
    },
    {
        "content": "<p>This is referring to polynomials that evaluate as <code>u + x • v + x^2 • w + ...</code>?</p>",
        "id": 275931796,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1647726854
    },
    {
        "content": "<p>try using the tensor product of the mv_polynomial over the ring with the module?</p>",
        "id": 275931809,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1647726880
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243562\">Adam Topaz</span> <a href=\"#narrow/stream/113488-general/topic/polynomials.20over.20R-modules/near/275930481\">said</a>:</p>\n<blockquote>\n<p>You can also take polynomials over the tensor algebra of your module.</p>\n</blockquote>\n<p>But that would force you to view the “polynomial module” inside a big polynomial ring (the grade 1 part under the natural graduation), which is not really convenient.</p>",
        "id": 364306818,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1686149785
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"224323\">Junyan Xu</span> <a href=\"#narrow/stream/113488-general/topic/polynomials.20over.20R-modules/near/275931809\">said</a>:</p>\n<blockquote>\n<p>try using the tensor product of the mv_polynomial over the ring with the module?</p>\n</blockquote>\n<p>As a module, this is exactly that, but it has a tensor product which hides its “free” nature<br>\n<code>(\\sigma \\to_0 \\nat) \\to_0 M</code>.</p>",
        "id": 364307043,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1686149840
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=MvPolynomial#doc\">docs4#MvPolynomial</a></p>",
        "id": 364341955,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1686157001
    },
    {
        "content": "<p>Oh we really do demand <code>CommSemiring</code>. One could imagine weakening this to <code>AddCommMonoid</code> initially, and then either going down the ring route or the module route.</p>",
        "id": 364342211,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1686157054
    },
    {
        "content": "<p>I'm struggling to imagine that, because there wouldn't be any multiplication and so you just have finsupp</p>",
        "id": 364422915,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1686187092
    },
    {
        "content": "<p>I guess the point is that there's no finsupp.eval</p>",
        "id": 364423111,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1686187242
    },
    {
        "content": "<p>You would have a multiplication from <code>MvPolynomial</code> of anything that has an action on your module.</p>",
        "id": 366899025,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1686935367
    },
    {
        "content": "<p>Can you write the type of that out in pseudocode?</p>",
        "id": 367014369,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1686954666
    },
    {
        "content": "<p>If M is an R-module then M[[X]] is an R[[X]]-module and M[[sigma]] is an R[[sigma]] module</p>",
        "id": 367015063,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1686955021
    },
    {
        "content": "<p>Set <code>M = R[X]</code> and now you have that <code>R[X][X]</code> is an <code>R[X]</code> module in two incompatible ways...</p>",
        "id": 367046419,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1686971512
    },
    {
        "content": "<p>Yes. That's a maths fact</p>",
        "id": 367083717,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1686988300
    },
    {
        "content": "<p>That would be exactly why we wouldn't call both variables <code>X</code></p>",
        "id": 367083922,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1686988363
    },
    {
        "content": "<p>I thought Bourbaki would have defined that, but they didn't go that far, except for a definition of M[X] (Algebra, chapter 4) using tensor product. I used that in Lean, when I formalized coefficients of  a “polynomial map” between two modules, but that's awkward.</p>",
        "id": 367109435,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1686994508
    }
]