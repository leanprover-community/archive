[
    {
        "content": "<p>I am having a problem with the following mwe. I want to use <code>Polynomial.card_roots'</code> but I am getting an error. What am I doing wrong here?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.MvPolynomial.Equiv</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Polynomial.RingDivision</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">mwe</span> <span class=\"o\">(</span><span class=\"n\">F</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span><span class=\"o\">:</span> <span class=\"n\">MvPolynomial</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"o\">(</span><span class=\"n\">Nat.succ</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">false</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">let</span> <span class=\"n\">p'</span><span class=\"o\">:</span> <span class=\"n\">Polynomial</span> <span class=\"o\">(</span><span class=\"n\">MvPolynomial</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">MvPolynomial.finSuccEquiv</span> <span class=\"n\">F</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">p</span>\n  <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">Polynomial.card_roots'</span> <span class=\"n\">p'</span>\n</code></pre></div>\n<p>The error message:</p>\n<div class=\"codehilite\" data-code-language=\"txt\"><pre><span></span><code>application type mismatch\n  Polynomial.card_roots' p'\nargument\n  p'\nhas type\n  @Polynomial (MvPolynomial (Fin n) F)\n    (@CommSemiring.toSemiring (MvPolynomial (Fin n) F) MvPolynomial.commSemiring) : Type\nbut is expected to have type\n  @Polynomial (MvPolynomial (Fin n) F)\n    (@CommSemiring.toSemiring (MvPolynomial (Fin n) F) CommRing.toCommSemiring) : Type\n</code></pre></div>",
        "id": 384062626,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1691778738
    },
    {
        "content": "<p>I would guess we screwed up structure inheritance?</p>",
        "id": 384067006,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1691779955
    },
    {
        "content": "<p>Can you make a smaller mwe that is a failing <code>rfl</code>?</p>",
        "id": 384067152,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1691780008
    },
    {
        "content": "<p>Not sure how to do that, give I can't get the <code>Polynomial.card_roots' ((MvPolynomial.finSuccEquiv F n) p)</code> to work.</p>",
        "id": 384068145,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1691780313
    },
    {
        "content": "<p>Maybe simpler is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.MvPolynomial.Equiv</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.MvPolynomial.CommRing</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Polynomial.RingDivision</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">mwe</span> <span class=\"o\">(</span><span class=\"n\">F</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span><span class=\"o\">:</span> <span class=\"n\">MvPolynomial</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"o\">(</span><span class=\"n\">Nat.succ</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">false</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">let</span> <span class=\"n\">foo</span> <span class=\"o\">:=</span> <span class=\"n\">Polynomial.roots</span> <span class=\"o\">((</span><span class=\"n\">MvPolynomial.finSuccEquiv</span> <span class=\"n\">F</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">p</span><span class=\"o\">)</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>This one complains about something different</p>\n<div class=\"codehilite\" data-code-language=\"Todotxt\"><pre><span></span><code>failed to synthesize instance\n<span class=\"err\">  </span>IsDomain (MvPolynomial (Fin n) F)\n</code></pre></div>",
        "id": 384069470,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1691780683
    },
    {
        "content": "<p>Is this instance true? Do we just not have it? Do I just not know where it is? (Update, it's <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=MvPolynomial.instIsDomainMvPolynomialToCommSemiringToSemiringCommSemiring#doc\">docs#MvPolynomial.instIsDomainMvPolynomialToCommSemiringToSemiringCommSemiring</a>)</p>",
        "id": 384069945,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1691780808
    },
    {
        "content": "<p>Having to import <code>CommRing</code> is such a footgun. I always expect the instances for the types I work with to be present wherever the types are.</p>",
        "id": 384071574,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1691781270
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"282271\">Bolton Bailey</span> has marked this topic as resolved.</p>",
        "id": 384073282,
        "sender_full_name": "Notification Bot",
        "timestamp": 1691781786
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"282271\">Bolton Bailey</span> <a href=\"#narrow/stream/113488-general/topic/.E2.9C.94.20Diamond.20using.20Polynomial.2Ecard_roots'/near/384071574\">said</a>:</p>\n<blockquote>\n<p>Having to import <code>CommRing</code> is such a footgun. I always expect the instances for the types I work with to be present wherever the types are.</p>\n</blockquote>\n<p>Unfortunately this doesn't really work in general, but we could certainly fix it for this specific case</p>",
        "id": 384084065,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1691784954
    },
    {
        "content": "<p>A more general solution is to keep a window open with a clean project and a file just containing <code>import Mathlib</code>, and do you <code>#synth</code> and <code>exact?</code> queries there.</p>",
        "id": 384109243,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1691795346
    }
]