[
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113488-general/topic/djb's.20formalization.20of.20McEliece/near/384313356\">said</a>:</p>\n<blockquote>\n<p>But if lean had a proof mode like HOL light's <code>e(...)</code> steps broken out as separate lean commands then you would certainly get back the speed benefits you are seeing in HOL Light</p>\n</blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113488-general/topic/djb's.20formalization.20of.20McEliece/near/384313940\">said</a>:</p>\n<blockquote>\n<p>now I think I want to try to demo something like that in lean</p>\n</blockquote>\n<p>Here's what I was talking about <span class=\"user-mention\" data-user-id=\"630204\">@D. J. Bernstein</span> : This is a prototype implementation of a \"proof mode\" in which you can save the context of a proof in a <code>by</code> block by writing <code>start_proof</code>, and then you can start writing tactics in separate commands thereafter using <code>##</code> before each tactic (or group of tactics). Because lean automatically snapshots between commands, you get the benefits of a line-by-line proof like in Coq or HOL light in terms of general responsiveness. This may be considered as an alternative to the <code>save</code> tactic, which tries to do something similar but without linearizing the AST structure.</p>",
        "id": 384324558,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1691862732
    },
    {
        "content": "<p><code>Mathlib.Tactic.ProofMode</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">ProofState</span> <span class=\"n\">where</span>\n  <span class=\"n\">tacCtx</span> <span class=\"o\">:</span> <span class=\"n\">Elab.Tactic.Context</span>\n  <span class=\"n\">tacState</span> <span class=\"o\">:</span> <span class=\"n\">Elab.Tactic.State</span>\n  <span class=\"n\">termCtx</span> <span class=\"o\">:</span> <span class=\"n\">Elab.Term.Context</span>\n  <span class=\"n\">termState</span> <span class=\"o\">:</span> <span class=\"n\">Elab.Term.State</span>\n  <span class=\"n\">metaCtx</span> <span class=\"o\">:</span> <span class=\"n\">Meta.Context</span>\n  <span class=\"n\">metaState</span> <span class=\"o\">:</span> <span class=\"n\">Meta.State</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">ProofState.get</span> <span class=\"o\">:</span> <span class=\"n\">Elab.Tactic.TacticM</span> <span class=\"n\">ProofState</span> <span class=\"o\">:=</span>\n  <span class=\"k\">fun</span> <span class=\"n\">tacCtx</span> <span class=\"n\">tacState</span> <span class=\"n\">termCtx</span> <span class=\"n\">termState</span> <span class=\"n\">metaCtx</span> <span class=\"n\">metaState</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">tacState</span> <span class=\"bp\">‚Üê</span> <span class=\"n\">tacState.get</span>\n    <span class=\"k\">let</span> <span class=\"n\">termState</span> <span class=\"bp\">‚Üê</span> <span class=\"n\">termState.get</span>\n    <span class=\"k\">let</span> <span class=\"n\">metaState</span> <span class=\"bp\">‚Üê</span> <span class=\"n\">metaState.get</span>\n    <span class=\"n\">return</span> <span class=\"o\">{</span> <span class=\"n\">tacCtx</span><span class=\"o\">,</span> <span class=\"n\">tacState</span><span class=\"o\">,</span> <span class=\"n\">termCtx</span><span class=\"o\">,</span> <span class=\"n\">termState</span><span class=\"o\">,</span> <span class=\"n\">metaCtx</span><span class=\"o\">,</span> <span class=\"n\">metaState</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">ProofState.with</span> <span class=\"o\">:</span> <span class=\"n\">ProofState</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">Elab.Tactic.TacticM</span> <span class=\"n\">Œ±</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">CoreM</span> <span class=\"n\">Œ±</span> <span class=\"o\">:=</span>\n  <span class=\"k\">fun</span> <span class=\"o\">{</span> <span class=\"n\">tacCtx</span><span class=\"o\">,</span> <span class=\"n\">tacState</span><span class=\"o\">,</span> <span class=\"n\">termCtx</span><span class=\"o\">,</span> <span class=\"n\">termState</span><span class=\"o\">,</span> <span class=\"n\">metaCtx</span><span class=\"o\">,</span> <span class=\"n\">metaState</span> <span class=\"o\">}</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">tacState</span> <span class=\"bp\">‚Üê</span> <span class=\"n\">IO.mkRef</span> <span class=\"n\">tacState</span>\n    <span class=\"k\">let</span> <span class=\"n\">termState</span> <span class=\"bp\">‚Üê</span> <span class=\"n\">IO.mkRef</span> <span class=\"n\">termState</span>\n    <span class=\"k\">let</span> <span class=\"n\">metaState</span> <span class=\"bp\">‚Üê</span> <span class=\"n\">IO.mkRef</span> <span class=\"n\">metaState</span>\n    <span class=\"n\">x</span> <span class=\"n\">tacCtx</span> <span class=\"n\">tacState</span> <span class=\"n\">termCtx</span> <span class=\"n\">termState</span> <span class=\"n\">metaCtx</span> <span class=\"n\">metaState</span>\n\n<span class=\"n\">initialize</span> <span class=\"n\">proofStateExt</span> <span class=\"o\">:</span> <span class=\"n\">EnvExtension</span> <span class=\"o\">(</span><span class=\"n\">List</span> <span class=\"n\">ProofState</span><span class=\"o\">)</span> <span class=\"bp\">‚Üê</span> <span class=\"n\">registerEnvExtension</span> <span class=\"o\">(</span><span class=\"n\">pure</span> <span class=\"o\">[])</span>\n\n<span class=\"n\">elab</span> <span class=\"s2\">\"start_proof\"</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">state</span> <span class=\"bp\">‚Üê</span> <span class=\"n\">ProofState.get</span>\n  <span class=\"n\">modifyEnv</span> <span class=\"o\">(</span><span class=\"n\">proofStateExt.modifyState</span> <span class=\"bp\">¬∑</span> <span class=\"o\">(</span><span class=\"n\">state</span> <span class=\"o\">::</span> <span class=\"bp\">¬∑</span><span class=\"o\">))</span>\n  <span class=\"n\">Elab.Tactic.evalTactic</span> <span class=\"o\">(</span><span class=\"bp\">‚Üê</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">repeat</span> <span class=\"gr\">sorry</span><span class=\"o\">))</span>\n\n<span class=\"n\">elab</span> <span class=\"n\">tk</span><span class=\"o\">:</span><span class=\"s2\">\"##\"</span> <span class=\"n\">tac</span><span class=\"o\">:(</span><span class=\"n\">tacticSeq</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"o\">:</span> <span class=\"n\">command</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">state</span> <span class=\"o\">::</span> <span class=\"n\">rest</span> <span class=\"o\">:=</span> <span class=\"n\">proofStateExt.getState</span> <span class=\"o\">(</span><span class=\"bp\">‚Üê</span> <span class=\"n\">getEnv</span><span class=\"o\">)</span>\n    <span class=\"bp\">|</span> <span class=\"n\">throwError</span> <span class=\"s2\">\"proof mode not started, use `start_proof`\"</span>\n  <span class=\"n\">Elab.Command.liftTermElabM</span> <span class=\"k\">do</span>\n    <span class=\"n\">state.with</span> <span class=\"k\">do</span>\n      <span class=\"n\">Elab.Tactic.withTacticInfoContext</span> <span class=\"n\">tk</span> <span class=\"k\">do</span>\n        <span class=\"k\">if</span> <span class=\"k\">let</span> <span class=\"n\">some</span> <span class=\"n\">tac</span> <span class=\"o\">:=</span> <span class=\"n\">tac</span> <span class=\"k\">then</span>\n          <span class=\"n\">Elab.Tactic.evalTactic</span> <span class=\"n\">tac</span>\n      <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"bp\">‚Üê</span> <span class=\"n\">Elab.Tactic.getUnsolvedGoals</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">isEmpty</span> <span class=\"k\">then</span>\n        <span class=\"n\">logInfoAt</span> <span class=\"n\">tk</span> <span class=\"s2\">\"Goals accomplished üéâ\"</span>\n        <span class=\"n\">modifyEnv</span> <span class=\"o\">(</span><span class=\"n\">proofStateExt.setState</span> <span class=\"bp\">¬∑</span> <span class=\"n\">rest</span><span class=\"o\">)</span>\n      <span class=\"k\">else</span>\n        <span class=\"n\">modifyEnv</span> <span class=\"o\">(</span><span class=\"n\">proofStateExt.setState</span> <span class=\"bp\">¬∑</span> <span class=\"o\">((</span><span class=\"bp\">‚Üê</span> <span class=\"n\">ProofState.get</span><span class=\"o\">)</span> <span class=\"o\">::</span> <span class=\"n\">rest</span><span class=\"o\">))</span>\n</code></pre></div>",
        "id": 384324747,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1691862802
    },
    {
        "content": "<p>test file:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.ProofMode</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"bp\">‚àÉ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">constructor</span>\n  <span class=\"n\">start_proof</span> <span class=\"c1\">-- this pushes the current proof state (note, it doesn't work in `example`)</span>\n\n<span class=\"bp\">##</span> <span class=\"c1\">-- cursor here to see proof state</span>\n<span class=\"bp\">##</span> <span class=\"n\">refine</span> <span class=\"n\">Nat.lt_succ_self</span> <span class=\"bp\">?</span><span class=\"n\">_</span> <span class=\"c1\">-- you can write a tactic or tactic block here</span>\n<span class=\"bp\">##</span> <span class=\"n\">exact</span> <span class=\"mi\">1</span> <span class=\"c1\">-- when the goal is finished, it pops the proof state and reports \"Goals accomplished üéâ\"</span>\n</code></pre></div>",
        "id": 384324958,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1691862889
    },
    {
        "content": "<p>It would be nice to get some experience reports with this from people who like to write long tactic proofs and struggle to keep things responsive</p>",
        "id": 384335780,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1691866936
    },
    {
        "content": "<p>Will try with my next Lean project, thanks!</p>",
        "id": 384337699,
        "sender_full_name": "D. J. Bernstein",
        "timestamp": 1691867843
    }
]