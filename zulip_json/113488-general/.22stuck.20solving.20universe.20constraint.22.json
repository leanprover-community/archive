[
    {
        "content": "<p>Here's an excerpt from my code:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">universe</span> <span class=\"n\">w</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">horizontal_composition</span> <span class=\"o\">(</span><span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">w</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">w</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">w</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">φ</span> <span class=\"o\">:</span> <span class=\"n\">T</span> <span class=\"bp\">→</span> <span class=\"n\">S</span> <span class=\"bp\">→</span> <span class=\"n\">R</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">horizontal_composition₀</span> <span class=\"o\">{</span><span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">w</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">w</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">w</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"bp\">Φ</span> <span class=\"o\">:</span> <span class=\"n\">horizontal_composition</span> <span class=\"n\">T</span> <span class=\"n\">S</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">T</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"o\">:=</span> <span class=\"bp\">Φ.</span><span class=\"n\">φ</span> <span class=\"n\">t</span> <span class=\"n\">s</span>\n\n<span class=\"kd\">notation</span> <span class=\"n\">t</span> <span class=\"s2\">\"•\"</span> <span class=\"n\">s</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">horizontal_composition₀</span> <span class=\"n\">t</span> <span class=\"n\">s</span>\n\n\n<span class=\"kd\">instance</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">categories</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">D</span> <span class=\"o\">:</span> <span class=\"n\">categories</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"n\">categories</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">F₁</span> <span class=\"o\">:</span> <span class=\"n\">functors</span> <span class=\"n\">C</span> <span class=\"n\">D</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">F₂</span> <span class=\"o\">:</span> <span class=\"n\">functors</span> <span class=\"n\">C</span> <span class=\"n\">D</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">G₁</span> <span class=\"o\">:</span> <span class=\"n\">functors</span> <span class=\"n\">D</span> <span class=\"n\">E</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">G₂</span> <span class=\"o\">:</span> <span class=\"n\">functors</span> <span class=\"n\">D</span> <span class=\"n\">E</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">horizontal_composition₀</span> <span class=\"o\">(</span><span class=\"n\">Cat_Hom_Hom</span> <span class=\"n\">C</span> <span class=\"n\">D</span> <span class=\"n\">F₁</span> <span class=\"n\">F₂</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Cat_Hom_Hom</span> <span class=\"n\">D</span> <span class=\"n\">E</span> <span class=\"n\">G₁</span> <span class=\"n\">G₂</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Cat_Hom_Hom</span> <span class=\"n\">C</span> <span class=\"n\">E</span> <span class=\"o\">(</span><span class=\"n\">Cat.composition</span> <span class=\"n\">C</span> <span class=\"n\">D</span> <span class=\"n\">E</span> <span class=\"n\">F₁</span> <span class=\"n\">G₁</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Cat.composition</span> <span class=\"n\">C</span> <span class=\"n\">D</span> <span class=\"n\">E</span> <span class=\"n\">F₂</span> <span class=\"n\">G₂</span><span class=\"o\">))</span> <span class=\"n\">where</span>\n  <span class=\"n\">φ</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span><span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">Cat_Hom_Hom</span> <span class=\"n\">C</span> <span class=\"n\">D</span> <span class=\"n\">F₁</span> <span class=\"n\">F₂</span><span class=\"o\">)</span><span class=\"bp\">=&gt;</span><span class=\"k\">fun</span><span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">Cat_Hom_Hom</span> <span class=\"n\">D</span> <span class=\"n\">E</span> <span class=\"n\">G₁</span> <span class=\"n\">G₂</span><span class=\"o\">)</span><span class=\"bp\">=&gt;</span><span class=\"o\">(</span><span class=\"n\">horizontal_composition₃</span> <span class=\"n\">C</span> <span class=\"n\">D</span> <span class=\"n\">E</span> <span class=\"n\">F₁</span> <span class=\"n\">F₂</span> <span class=\"n\">G₁</span> <span class=\"n\">G₂</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>previously I had declared 2 universes:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">universe</span> <span class=\"n\">u</span>\n<span class=\"kd\">universe</span> <span class=\"n\">v</span>\n</code></pre></div>\n<p>I get an error:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Main.lean</span><span class=\"o\">:</span><span class=\"mi\">276</span><span class=\"o\">:</span><span class=\"mi\">142</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"kd\">instance</span>\n  <span class=\"n\">horizontal_composition</span> <span class=\"o\">(</span><span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"bp\">?</span><span class=\"n\">u.17105</span> <span class=\"bp\">?</span><span class=\"n\">u.17108</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"bp\">?</span><span class=\"n\">u.17109</span> <span class=\"bp\">?</span><span class=\"n\">u.17112</span><span class=\"o\">))</span> <span class=\"bp\">?</span><span class=\"n\">m.17143</span>\n<span class=\"n\">Main.lean</span><span class=\"o\">:</span><span class=\"mi\">276</span><span class=\"o\">:</span><span class=\"mi\">0</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">stuck</span> <span class=\"n\">at</span> <span class=\"n\">solving</span> <span class=\"kd\">universe</span> <span class=\"n\">constraint</span>\n  <span class=\"n\">max</span> <span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">u.17105</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">u.17108</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=?=</span> <span class=\"n\">max</span> <span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">u.17109</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">u.17112</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span>\n<span class=\"n\">while</span> <span class=\"n\">trying</span> <span class=\"n\">to</span> <span class=\"n\">unify</span>\n  <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"bp\">?</span><span class=\"n\">u.17109</span> <span class=\"bp\">?</span><span class=\"n\">u.17112</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">u.17109</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">u.17112</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span>\n<span class=\"k\">with</span>\n  <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"bp\">?</span><span class=\"n\">u.17109</span> <span class=\"bp\">?</span><span class=\"n\">u.17112</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">u.17109</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">u.17112</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span>\n</code></pre></div>\n<p>What does this error message entail?</p>\n<p>What is \"solving a universe constraint\"?</p>\n<p>How do I fix these sorts of errors?</p>",
        "id": 339252394,
        "sender_full_name": "Dean Young",
        "timestamp": 1677817991
    },
    {
        "content": "<p>Nevermind the example - I fixed it on my own. </p>\n<p>But I still have questions about universes.</p>\n<p>Firstly, exactly how big  is the difference between Sort and Type? Is the only difference that a class is a sort but not a type?</p>\n<p>And I am still interested in exactly what this error message is telling me. What is a universe constraint exactly? Something to do with cardinal arithmetic it seems.</p>",
        "id": 339252778,
        "sender_full_name": "Dean Young",
        "timestamp": 1677818361
    },
    {
        "content": "<p>Sort of but not really. It just means that if we need <code>Type u</code> and <code>Type v</code> to be the same, then <code>u</code> and <code>v</code> had better be the same.</p>",
        "id": 339258609,
        "sender_full_name": "Reid Barton",
        "timestamp": 1677822888
    }
]