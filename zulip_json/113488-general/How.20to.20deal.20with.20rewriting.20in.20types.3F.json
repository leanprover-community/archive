[
    {
        "content": "<p>I try to complete the proof of the following theorem but I'm already stuck at left_inv. The problem is that I can't find a way to use the fact heq. rw, simp_rw, conv, nothing seems to work .</p>\n<p>Edit: just to clarify, this is Lean 3.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.zmod.basic</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Pi_append_equiv_prod</span> <span class=\"o\">(</span><span class=\"n\">l1</span> <span class=\"n\">l2</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">zmod</span> <span class=\"o\">((</span><span class=\"n\">l1</span> <span class=\"bp\">++</span> <span class=\"n\">l2</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">nthd</span> <span class=\"n\">i</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"bp\">≃+*</span>\n  <span class=\"o\">(</span><span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">zmod</span> <span class=\"o\">(</span><span class=\"n\">l1.nthd</span> <span class=\"n\">i</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"bp\">×</span> <span class=\"o\">(</span><span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">zmod</span> <span class=\"o\">(</span><span class=\"n\">l2.nthd</span> <span class=\"n\">i</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">to_fun</span> <span class=\"o\">:=</span>\n  <span class=\"kd\">begin</span>\n    <span class=\"n\">intro</span> <span class=\"n\">d</span><span class=\"o\">,</span>\n    <span class=\"n\">split</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">i</span><span class=\"o\">,</span>\n      <span class=\"n\">by_cases</span> <span class=\"n\">hi</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">&lt;</span> <span class=\"n\">list.length</span> <span class=\"n\">l1</span><span class=\"o\">,</span>\n      <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"bp\">←</span><span class=\"n\">list.nthd_append</span> <span class=\"n\">_</span> <span class=\"n\">l2</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">hi</span><span class=\"o\">,</span>\n        <span class=\"n\">exact</span> <span class=\"n\">d</span> <span class=\"n\">i</span><span class=\"o\">,},</span>\n      <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"mi\">0</span><span class=\"o\">,},},</span>\n    <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">i</span><span class=\"o\">,</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">nat.add_sub_cancel_left</span> <span class=\"o\">(</span><span class=\"n\">list.length</span> <span class=\"n\">l1</span><span class=\"o\">)</span> <span class=\"n\">i</span><span class=\"o\">,</span>\n        <span class=\"bp\">←</span><span class=\"n\">list.nthd_append_right</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">nat.le_add_right</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)],</span>\n      <span class=\"n\">exact</span> <span class=\"n\">d</span> <span class=\"o\">(</span><span class=\"n\">list.length</span> <span class=\"n\">l1</span> <span class=\"bp\">+</span> <span class=\"n\">i</span><span class=\"o\">),},</span>\n  <span class=\"kd\">end</span><span class=\"o\">,</span>\n  <span class=\"n\">inv_fun</span> <span class=\"o\">:=</span>\n  <span class=\"kd\">begin</span>\n    <span class=\"n\">rintro</span> <span class=\"o\">⟨</span><span class=\"n\">d1</span><span class=\"o\">,</span> <span class=\"n\">d2</span><span class=\"o\">⟩,</span>\n    <span class=\"n\">intro</span> <span class=\"n\">i</span><span class=\"o\">,</span>\n    <span class=\"n\">by_cases</span> <span class=\"n\">hi</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">&lt;</span> <span class=\"n\">list.length</span> <span class=\"n\">l1</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">list.nthd_append</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">hi</span><span class=\"o\">,</span>\n      <span class=\"n\">exact</span> <span class=\"n\">d1</span> <span class=\"n\">i</span><span class=\"o\">,},</span>\n    <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">list.nthd_append_right</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">not_lt.mp</span> <span class=\"n\">hi</span><span class=\"o\">),</span>\n      <span class=\"n\">exact</span> <span class=\"n\">d2</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">-</span> <span class=\"n\">list.length</span> <span class=\"n\">l1</span><span class=\"o\">),},</span>\n  <span class=\"kd\">end</span><span class=\"o\">,</span>\n  <span class=\"n\">left_inv</span> <span class=\"o\">:=</span>\n  <span class=\"kd\">begin</span>\n    <span class=\"n\">intro</span> <span class=\"n\">d</span><span class=\"o\">,</span>\n    <span class=\"n\">funext</span> <span class=\"n\">i</span><span class=\"o\">,</span>\n    <span class=\"n\">dsimp</span> <span class=\"n\">only</span><span class=\"o\">,</span>\n    <span class=\"n\">split_ifs</span> <span class=\"k\">with</span> <span class=\"n\">hif</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">eq_mpr_eq_cast</span><span class=\"o\">,</span> <span class=\"n\">eq_mpr_eq_cast</span><span class=\"o\">,</span> <span class=\"n\">cast_cast</span><span class=\"o\">,</span> <span class=\"n\">cast_eq</span><span class=\"o\">],},</span>\n    <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">eq_mpr_eq_cast</span><span class=\"o\">,</span> <span class=\"n\">eq_mpr_eq_cast</span><span class=\"o\">,</span> <span class=\"n\">eq_mpr_eq_cast</span><span class=\"o\">,</span> <span class=\"n\">cast_cast</span><span class=\"o\">,</span> <span class=\"n\">cast_cast</span><span class=\"o\">],</span>\n      <span class=\"k\">have</span> <span class=\"n\">heq</span> <span class=\"o\">:</span> <span class=\"n\">l1.length</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">-</span> <span class=\"n\">l1.length</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">i</span><span class=\"o\">,</span>\n      <span class=\"kd\">begin</span>\n        <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">nat.add_sub_assoc</span> <span class=\"o\">(</span><span class=\"n\">not_lt.mp</span> <span class=\"n\">hif</span><span class=\"o\">),</span> <span class=\"n\">nat.add_sub_cancel_left</span><span class=\"o\">],</span>\n      <span class=\"kd\">end</span><span class=\"o\">,</span>\n\n      <span class=\"gr\">sorry</span><span class=\"o\">,},</span>\n  <span class=\"kd\">end</span><span class=\"o\">,</span>\n  <span class=\"n\">right_inv</span> <span class=\"o\">:=</span>\n  <span class=\"kd\">begin</span>\n    <span class=\"n\">intro</span> <span class=\"n\">d</span><span class=\"o\">,</span>\n    <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n  <span class=\"kd\">end</span><span class=\"o\">,</span>\n  <span class=\"n\">map_mul'</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">map_add'</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span><span class=\"o\">,}</span>\n</code></pre></div>",
        "id": 387942642,
        "sender_full_name": "Mario Weitzer",
        "timestamp": 1693334687
    },
    {
        "content": "<p>For <code>left_inv</code>, you can replace the <code>sorry</code> with <code>apply eq_of_heq, rw [cast, rec_heq_iff_heq, heq]</code></p>",
        "id": 387945541,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1693335758
    },
    {
        "content": "<p>Maybe I don't understand the weird statement involving lists, but that doesn't seem provable to me. It read like a Chinese remainder theorem without assumption.</p>",
        "id": 387946081,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1693335983
    },
    {
        "content": "<p>For some reason I don't have rec_heq_iff_heq but I used apply rec_heq_of_heq instead and it worked, thank you! I will think about what happened here and try to prove the remaining stuff.</p>",
        "id": 387946296,
        "sender_full_name": "Mario Weitzer",
        "timestamp": 1693336079
    },
    {
        "content": "<p>Your mathlib must be older than february then: <a href=\"https://mathlib-changelog.org/theorem/heq_rec_iff_heq\">https://mathlib-changelog.org/theorem/heq_rec_iff_heq</a></p>",
        "id": 387946435,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1693336136
    },
    {
        "content": "<p>I don't think so, Patrick. I must say the statement is a bit weird, but it's basically saying that  <code>(zmod a₁ × ... × zmod aₘ × a_bunch_of_trivial_factors) × (zmod b₁ × ... × zmod bₙ × a_bunch_of_trivial_factors)</code>  is the same as <code>zmod a₁ × ... × zmod aₘ × zmod b₁ × ... × zmod bₙ × a_bunch_of_trivial_factors</code>.</p>",
        "id": 387946505,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1693336168
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span><br>\nThe point is that in the default case I use zmod 1 which is a singleton.</p>",
        "id": 387946510,
        "sender_full_name": "Mario Weitzer",
        "timestamp": 1693336171
    },
    {
        "content": "<p>Ok good. From a distance it really looked like Chinese remainders without coprimeness asumptions, but I didn't take time to decipher it properly. Sorry about the noise!</p>",
        "id": 387947129,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1693336455
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span><br>\nExactly, that's the idea. I know it's strange but I found no cleaner way to spilt a (de facto finite) Pi-product into a prod of two Pi-products. I guess I could make the Pi only index over the elements of the list l1 ++ l2 but I don't know how to do this properly. Use a finite set as the index set and use list.nth_le instead of list.nthd? This version might look strange but at least it's quite succinct.</p>",
        "id": 387948037,
        "sender_full_name": "Mario Weitzer",
        "timestamp": 1693336810
    },
    {
        "content": "<p>What's your end goal?</p>",
        "id": 387948206,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1693336884
    },
    {
        "content": "<p>Is there an equiv version of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/fin.append\">docs3#fin.append</a> ? That seems like it'd be better than using lists, and it's more general than a zmod-specific version.</p>",
        "id": 387948989,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1693337169
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span><br>\nThis is a part of a larger theorem about equivalent rings (in my case it isn't zmods, I just used them here for a short working example). What I really need is exactly what you described, but without the \"a_bunch_of_trivial_factors\", so</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">...</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">R</span> <span class=\"n\">i</span> <span class=\"bp\">≃+*</span> <span class=\"o\">(</span><span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">...</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"n\">R</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">×</span> <span class=\"o\">(</span><span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">...</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">R</span> <span class=\"n\">i</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>where the R i are comm_rings.</p>",
        "id": 387950184,
        "sender_full_name": "Mario Weitzer",
        "timestamp": 1693337524
    },
    {
        "content": "<p>Okay then I would highly suggest you use equivalences of the form <code>(Π x : α ⊕ β, R x) ≃ (Π a : α, R (Sum.inl a)) × (Π b : β, R (Sum.inr b))</code>. This is morally equivalent to what you're trying to do, but it's much more idiomatic for formalisation.</p>",
        "id": 387950560,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1693337639
    },
    {
        "content": "<p>I see, I will look into it. Thank you!</p>",
        "id": 387950955,
        "sender_full_name": "Mario Weitzer",
        "timestamp": 1693337753
    },
    {
        "content": "<p>!loogle (?a -&gt; ?R) × (?b -&gt; R) ≃ (?a ⊕ ?b -&gt; R)</p>",
        "id": 387951054,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1693337779
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"644391\">@loogle</span> (?a -&gt; ?R) × (?b -&gt; R) ≃ (?a ⊕ ?b -&gt; R)</p>",
        "id": 387951118,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1693337810
    },
    {
        "content": "<p><span aria-label=\"exclamation\" class=\"emoji emoji-2757\" role=\"img\" title=\"exclamation\">:exclamation:</span> unknown identifier 'R'</p>",
        "id": 387951121,
        "sender_full_name": "loogle",
        "timestamp": 1693337811
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"644391\">@loogle</span> (?a -&gt; ?R) × (?b -&gt; ?R) ≃ (?a ⊕ ?b -&gt; ?R)</p>",
        "id": 387951159,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1693337825
    },
    {
        "content": "<p><span aria-label=\"exclamation\" class=\"emoji emoji-2757\" role=\"img\" title=\"exclamation\">:exclamation:</span></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">stuck</span> <span class=\"n\">at</span> <span class=\"n\">solving</span> <span class=\"kd\">universe</span> <span class=\"n\">constraint</span>\n  <span class=\"n\">imax</span> <span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">u.15836743</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">?</span><span class=\"n\">u.15836734</span> <span class=\"bp\">=?=</span> <span class=\"bp\">?</span><span class=\"n\">u.15836731</span><span class=\"bp\">+</span><span class=\"mi\">1</span>\n<span class=\"n\">while</span> <span class=\"n\">trying</span> <span class=\"n\">to</span> <span class=\"n\">unify</span>\n  <span class=\"kt\">Sort</span> <span class=\"o\">(</span><span class=\"n\">imax</span> <span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">u.15836743</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">?</span><span class=\"n\">u.15836734</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">imax</span> <span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">u.15836743</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">?</span><span class=\"n\">u.15836734</span><span class=\"o\">)</span>\n<span class=\"k\">with</span>\n  <span class=\"kt\">Type</span> <span class=\"bp\">?</span><span class=\"n\">u.15836731</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">u.15836731</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 387951162,
        "sender_full_name": "loogle",
        "timestamp": 1693337825
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"470149\">@Joachim Breitner</span>, I broke it :(</p>",
        "id": 387951233,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1693337852
    },
    {
        "content": "<p>Probably you're using <code>Type*</code> instead of <code>Type _</code> somewhere?</p>",
        "id": 387951293,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1693337876
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/113488-general/topic/How.20to.20deal.20with.20rewriting.20in.20types.3F/near/387948989\">said</a>:</p>\n<blockquote>\n<p>Is there an equiv version of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/fin.append\">docs3#fin.append</a> ? That seems like it'd be better than using lists, and it's more general than a zmod-specific version.</p>\n</blockquote>\n<p>I think <span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span>  had one in their Lean 3 tuple PR.</p>",
        "id": 387953458,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1693338526
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"644391\">@loogle</span> (?a -&gt; (?R : Type _)) × (?b -&gt; ?R) ≃ (?a ⊕ ?b -&gt; ?R)</p>",
        "id": 388027578,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1693368648
    },
    {
        "content": "<p><span aria-label=\"search\" class=\"emoji emoji-1f50d\" role=\"img\" title=\"search\">:search:</span> <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Equiv.sumArrowEquivProdArrow_symm_apply_inl#doc\">docs#Equiv.sumArrowEquivProdArrow_symm_apply_inl</a>, <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Equiv.sumArrowEquivProdArrow_symm_apply_inr#doc\">docs#Equiv.sumArrowEquivProdArrow_symm_apply_inr</a></p>",
        "id": 388027580,
        "sender_full_name": "loogle",
        "timestamp": 1693368650
    }
]