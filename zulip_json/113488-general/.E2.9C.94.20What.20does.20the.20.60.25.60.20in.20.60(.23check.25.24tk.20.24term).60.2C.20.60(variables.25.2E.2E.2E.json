[
    {
        "content": "<p>Consider the declarations</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[</span><span class=\"n\">command_elab</span> <span class=\"bp\">«</span><span class=\"n\">variables</span><span class=\"bp\">»</span><span class=\"kd\">]</span> <span class=\"kd\">def</span> <span class=\"n\">elabVariables</span> <span class=\"o\">:</span> <span class=\"n\">CommandElab</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"kd\">variables</span><span class=\"bp\">%$</span><span class=\"n\">pos</span> <span class=\"bp\">$</span><span class=\"n\">binders</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n    <span class=\"n\">logWarningAt</span> <span class=\"n\">pos</span> <span class=\"s2\">\"'variables' has been replaced by 'variable' in lean 4\"</span>\n    <span class=\"n\">elabVariable</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"kd\">variable</span><span class=\"bp\">%$</span><span class=\"n\">pos</span> <span class=\"bp\">$</span><span class=\"n\">binders</span><span class=\"bp\">*</span><span class=\"o\">))</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">throwUnsupportedSyntax</span>\n\n\n<span class=\"kd\">def</span> <span class=\"n\">elabCheckCore</span> <span class=\"o\">(</span><span class=\"n\">ignoreStuckTC</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">CommandElab</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"k\">#check</span><span class=\"bp\">%$</span><span class=\"n\">tk</span> <span class=\"bp\">$</span><span class=\"n\">term</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">withoutModifyingEnv</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">runTermElabM</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Term.withDeclName</span> <span class=\"bp\">`</span><span class=\"n\">_check</span> <span class=\"k\">do</span>\n    <span class=\"c1\">-- show signature for `#check id`/`#check @id`</span>\n    <span class=\"k\">if</span> <span class=\"k\">let</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">_</span><span class=\"o\">:</span><span class=\"n\">ident</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">term</span> <span class=\"k\">then</span>\n</code></pre></div>\n<p>In the above declarations, I am wondering</p>\n<ul>\n<li>\n<p>In the syntax patterns, how can we call the parsers <code>syntax (name := «variables») \"variables\" (ppSpace bracketedBinder)* : command\n</code> and <code>@[builtin_command_parser] def check  := leading_parser \"#check \" &gt;&gt; termParser</code> without prefix <code>(command| </code>?</p>\n</li>\n<li>\n<p>What is the <code>%</code> symbol here, and how does <code>pos</code>, <code>tk</code> works? Where are they been documented if exist?</p>\n</li>\n</ul>",
        "id": 399045042,
        "sender_full_name": "Alissa Tung",
        "timestamp": 1698495154
    },
    {
        "content": "<p><code>%</code> lets you give a name to the syntax for some explicit token like <code>variables</code> which is useful mostly to log information such as errors or hovers there.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Meta</span>\n<span class=\"n\">elab_rules</span> <span class=\"o\">:</span> <span class=\"n\">command</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"kd\">variable</span><span class=\"bp\">%$</span><span class=\"n\">pos</span> <span class=\"bp\">$</span><span class=\"n\">binders</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"n\">logInfoAt</span> <span class=\"n\">pos</span> <span class=\"s2\">\"hi im variables\"</span>\n  <span class=\"n\">logInfoAt</span> <span class=\"n\">binders</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">]</span><span class=\"bp\">!</span> <span class=\"s2\">\"hi im binders\"</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 399050593,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1698499221
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"127136\">Alex J. Best</span> <a href=\"#narrow/stream/113488-general/topic/What.20does.20the.20.60.25.60.20in.20.60.28.23check.25.24tk.20.24term.29.60.2C.20.60.28variables.25.60.20.20do/near/399050593\">发言道</a>：</p>\n<blockquote>\n<p><code>%</code> lets you give a name to the syntax for some explicit token like <code>variables</code> which is useful mostly to log information such as errors or hovers there.</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Meta</span>\n<span class=\"n\">elab_rules</span> <span class=\"o\">:</span> <span class=\"n\">command</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"kd\">variable</span><span class=\"bp\">%$</span><span class=\"n\">pos</span> <span class=\"bp\">$</span><span class=\"n\">binders</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"n\">logInfoAt</span> <span class=\"n\">pos</span> <span class=\"s2\">\"hi im variables\"</span>\n  <span class=\"n\">logInfoAt</span> <span class=\"n\">binders</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">]</span><span class=\"bp\">!</span> <span class=\"s2\">\"hi im binders\"</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>Thank you. Seems that my command parser can run when matching <code>Syntax command</code> terms without calling command parser explicitly with <code>(command| </code>, and I don't why it fails before asking the question. Thank you!</p>",
        "id": 399070439,
        "sender_full_name": "Alissa Tung",
        "timestamp": 1698515094
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"662001\">Alissa Tung</span> has marked this topic as resolved.</p>",
        "id": 399070470,
        "sender_full_name": "Notification Bot",
        "timestamp": 1698515132
    },
    {
        "content": "<p>Is there any way that we can show a relevant docstring on the % token with the quotation?</p>",
        "id": 399087843,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1698532814
    },
    {
        "content": "<p>I wondered about this too. All I could find is <a href=\"https://arxiv.org/pdf/2001.10490.pdf#page=13\">this</a>. It is not very enlightening unless you already know what it means, but at least it is a clue.</p>\n<p>There is an example of its use in <code>setDeprecatedTarget</code> in \"Std/Tactic/Alias.lean\". It is part of the mechanism that marks the name <code>a</code> as <code>machineApplicableDeprecated</code> when there is a command of the form <code>@[deprecated] alias a := b</code>.</p>",
        "id": 399089855,
        "sender_full_name": "Richard Copley",
        "timestamp": 1698534862
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113488-general/topic/.E2.9C.94.20What.20does.20the.20.60.25.60.20in.20.60.28.23check.25.24tk.20.24term.29.60.2C.20.60.28variables.25.2E.2E.2E/near/399087843\">said</a>:</p>\n<blockquote>\n<p>Is there any way that we can show a relevant docstring on the % token with the quotation?</p>\n</blockquote>\n<p>What's \"a relevant docstring\" for a token? Otherwise yes, we could put something there</p>",
        "id": 399105290,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1698546112
    }
]