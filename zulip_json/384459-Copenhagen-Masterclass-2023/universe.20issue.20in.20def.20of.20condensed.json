[
    {
        "content": "<p>I note that we currently have</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Condensed.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">,</span> <span class=\"n\">u_1</span><span class=\"o\">,</span> <span class=\"n\">u_2</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">inst</span><span class=\"bp\">‚úù</span> <span class=\"o\">:</span> <span class=\"n\">CategoryTheory.Category</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">u_1</span><span class=\"o\">)</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"n\">u_2</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>That's a lot of universes. Is it true that when we talk about \"condensed X\" we always have X a large category? The universe of the solution isn't even optimally expressed, there's a u and u+1 in there.</p>",
        "id": 370577927,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1687987228
    },
    {
        "content": "<p>If you don't specalize to large categories, you should at least change the order of universe parameters. <code>u_1</code> if inferred from <code>C</code>, but <code>u_2</code> is presumably the morphism level and so should come first.</p>",
        "id": 370588954,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1687991130
    },
    {
        "content": "<p>fixed in  <a href=\"https://github.com/leanprover-community/mathlib4/pull/5574\">#5574</a></p>",
        "id": 370630543,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1688014072
    }
]