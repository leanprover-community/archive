[
    {
        "content": "<p><a href=\"https://www.ams.org/journals/proc/1959-010-05/S0002-9939-1959-0123290-8/S0002-9939-1959-0123290-8.pdf\">Here</a> is a two-pages long with the argument for Gleason by Rainwater, and I am happy to work on this.</p>",
        "id": 369657723,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1687777747
    },
    {
        "content": "<p>I'm down.</p>",
        "id": 369658054,
        "sender_full_name": "Nikolas Kuhn",
        "timestamp": 1687777812
    },
    {
        "content": "<p>I'll join</p>",
        "id": 369658770,
        "sender_full_name": "Dagur Asgeirsson",
        "timestamp": 1687777961
    },
    {
        "content": "<p>I'm interested in joining - where is everybody?</p>",
        "id": 369661384,
        "sender_full_name": "David Ang",
        "timestamp": 1687778485
    },
    {
        "content": "<p>In the ground floor in some room</p>",
        "id": 369662356,
        "sender_full_name": "Nikolas Kuhn",
        "timestamp": 1687778670
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/Topology/ExtremallyDisconnected.html#CompactT2.Projective.extremallyDisconnected\">https://leanprover-community.github.io/mathlib4_docs/Mathlib/Topology/ExtremallyDisconnected.html#CompactT2.Projective.extremallyDisconnected</a></p>",
        "id": 369663977,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1687778950
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/bmaV0JELrEzHnJ64o6Uy5bJ5/1255454110.pdf\">1255454110.pdf</a><br>\nGleason's paper</p>",
        "id": 369666339,
        "sender_full_name": "Dagur Asgeirsson",
        "timestamp": 1687779297
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"519559\">@Dagur Ásgeirsson</span>  It seems that everything in <code>E</code> is implicit now...does it make sense to you? I think <span class=\"user-mention\" data-user-id=\"464700\">@David Ang</span> is trying to work with it....</p>",
        "id": 369737596,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1687792023
    },
    {
        "content": "<p>No it should depend on the same things as <code>three</code></p>",
        "id": 369738737,
        "sender_full_name": "Dagur Asgeirsson",
        "timestamp": 1687792193
    },
    {
        "content": "<p><code>three</code> must use continuity of f and phi, right?</p>",
        "id": 369738976,
        "sender_full_name": "Dagur Asgeirsson",
        "timestamp": 1687792227
    },
    {
        "content": "<p>Maybe not with the sorried proof as is, but eventually it will</p>",
        "id": 369739208,
        "sender_full_name": "Dagur Asgeirsson",
        "timestamp": 1687792260
    },
    {
        "content": "<p>Let me check...</p>",
        "id": 369739376,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1687792289
    },
    {
        "content": "<p>I'll leave it to <span class=\"user-mention\" data-user-id=\"464700\">@David Ang</span> who is left to me</p>",
        "id": 369739744,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1687792346
    },
    {
        "content": "<p><code>f</code> and <code>phi</code> are also implicit in <code>three</code></p>",
        "id": 369742195,
        "sender_full_name": "David Ang",
        "timestamp": 1687792778
    },
    {
        "content": "<p>Yes but once the proof is done it will have used hf and hphi</p>",
        "id": 369742510,
        "sender_full_name": "Dagur Asgeirsson",
        "timestamp": 1687792827
    },
    {
        "content": "<p>Yes, it will use that preimages of points in D -&gt; A are closed. So technically, it only uses that pi_1 is continuous, which we might want to state anyway?</p>",
        "id": 369749205,
        "sender_full_name": "Nikolas Kuhn",
        "timestamp": 1687793835
    },
    {
        "content": "<p>OK, I have destructured the proof of the existence of <code>ρ</code> into <code>gleason21</code>, <code>gleason22</code> and <em>three</em> lemmas for <code>gleason23_?</code>. <span class=\"user-mention\" data-user-id=\"464700\">@David Ang</span>  is picking up <code>gleason21</code>.</p>",
        "id": 369749318,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1687793856
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"496319\">@Nikolas Kuhn</span> , I think we need to align the statement of <code>three</code> with the hypothesis <code>h_subsets</code> that shows up in <code>gleason_inj</code> and <code>gleason_cont</code>.</p>",
        "id": 369749594,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1687793896
    },
    {
        "content": "<p>But I do not want to touch the statement without your agreement.</p>",
        "id": 369749764,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1687793925
    },
    {
        "content": "<p>Now the first is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">E₀</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"o\">(</span><span class=\"n\">D</span> <span class=\"n\">φ</span> <span class=\"n\">f</span><span class=\"o\">)),</span>\n <span class=\"n\">E₀</span> <span class=\"bp\">⊂</span> <span class=\"n\">E</span> <span class=\"bp\">→</span> <span class=\"n\">CompactSpace</span> <span class=\"n\">E₀</span> <span class=\"bp\">→</span> <span class=\"bp\">¬</span> <span class=\"o\">((</span><span class=\"n\">π₁</span> <span class=\"n\">φ</span> <span class=\"n\">f</span><span class=\"o\">)</span><span class=\"bp\">''</span> <span class=\"n\">E₀</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">Set.univ</span>\n</code></pre></div>\n<p>and the second is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">(</span><span class=\"n\">h_subsets</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">E₀</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">E</span><span class=\"o\">),</span> <span class=\"bp\">¬</span> <span class=\"n\">E₀</span> <span class=\"bp\">=</span> <span class=\"bp\">⊤</span> <span class=\"bp\">→</span> <span class=\"n\">IsClosed</span> <span class=\"n\">E₀</span> <span class=\"bp\">→</span> <span class=\"bp\">¬</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"bp\">''</span> <span class=\"n\">E₀</span> <span class=\"bp\">=</span> <span class=\"bp\">⊤</span><span class=\"o\">))</span>\n</code></pre></div>",
        "id": 369750134,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1687793997
    },
    {
        "content": "<p>I pushed the last version, so feel free to change things around</p>",
        "id": 369750595,
        "sender_full_name": "Nikolas Kuhn",
        "timestamp": 1687794059
    },
    {
        "content": "<p>Ok, let me have a look</p>",
        "id": 369750692,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1687794072
    },
    {
        "content": "<p>I recommend making the statement for E and the one for E_0 so that they are compatible via Zorn's lemma.</p>",
        "id": 369750789,
        "sender_full_name": "Nikolas Kuhn",
        "timestamp": 1687794088
    },
    {
        "content": "<p>I.e. so that <code>apply zorn_superset</code> just works.</p>",
        "id": 369750919,
        "sender_full_name": "Nikolas Kuhn",
        "timestamp": 1687794113
    },
    {
        "content": "<p>What do you mean?</p>",
        "id": 369750950,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1687794119
    },
    {
        "content": "<p>I have pulled</p>",
        "id": 369751078,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1687794131
    },
    {
        "content": "<p>OK, I think my questions are:</p>\n<ol>\n<li>In the statement of <code>three</code>, would it be painful to replace <code>E₀ ⊂ E </code> with <code>¬ E₀ = ⊤</code>?</li>\n<li>And to replace <code>CompactSpace E₀</code> with <code>IsClosed E₀</code></li>\n<li>(Surely not, but to replace <code>Set.univ</code> with <code>⊤</code>)?</li>\n</ol>",
        "id": 369751836,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1687794263
    },
    {
        "content": "<ol>\n<li>would require some effort.</li>\n<li>is actually better.</li>\n</ol>",
        "id": 369753174,
        "sender_full_name": "Nikolas Kuhn",
        "timestamp": 1687794509
    },
    {
        "content": "<p>So, what do you suggest?</p>",
        "id": 369754126,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1687794669
    },
    {
        "content": "<p>I can live with the strict inclusion if you so prefer. For 2., what is better?</p>",
        "id": 369754275,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1687794699
    },
    {
        "content": "<p>IsClosed is better. Right now I'm converting to that anyway.</p>",
        "id": 369757498,
        "sender_full_name": "Nikolas Kuhn",
        "timestamp": 1687795290
    },
    {
        "content": "<p>Ooh but you want it to be closed in E? That would not be straightforward</p>",
        "id": 369757855,
        "sender_full_name": "Nikolas Kuhn",
        "timestamp": 1687795354
    },
    {
        "content": "<p>It’s probably best prove whatever is most compatible with Zorn first, and if we need some modification of the statement we should easily be able to deduce it, right?</p>",
        "id": 369773218,
        "sender_full_name": "Dagur Asgeirsson",
        "timestamp": 1687798360
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"300245\">Filippo A. E. Nuccio</span> <a href=\"#narrow/stream/384459-Copenhagen-Masterclass-2023/topic/Gleason/near/369749318\">said</a>:</p>\n<blockquote>\n<p>OK, I have destructured the proof of the existence of <code>ρ</code> into <code>gleason21</code>, <code>gleason22</code> and <em>three</em> lemmas for <code>gleason23_?</code>. <span class=\"user-mention silent\" data-user-id=\"464700\">David Ang</span>  is picking up <code>gleason21</code>.</p>\n</blockquote>\n<p>Working on <code>gleason22</code>. Also it was missing openness hypotheses</p>",
        "id": 369808972,
        "sender_full_name": "Dagur Asgeirsson",
        "timestamp": 1687806886
    },
    {
        "content": "<p><code>gleason22</code> is done</p>",
        "id": 369810123,
        "sender_full_name": "Dagur Asgeirsson",
        "timestamp": 1687807196
    },
    {
        "content": "<p>I'll start working on the sorries in <code>gleason23_inj</code></p>",
        "id": 369810795,
        "sender_full_name": "Dagur Asgeirsson",
        "timestamp": 1687807371
    },
    {
        "content": "<p><code>gleason23_inj</code> done</p>",
        "id": 369814703,
        "sender_full_name": "Dagur Asgeirsson",
        "timestamp": 1687808222
    },
    {
        "content": "<p><code>gleason23_cont</code> was true by assumption</p>",
        "id": 369815942,
        "sender_full_name": "Dagur Asgeirsson",
        "timestamp": 1687808445
    },
    {
        "content": "<p>I've pushed a commit where now everything actually depends on variables and we have no red errors left</p>",
        "id": 369817736,
        "sender_full_name": "Dagur Asgeirsson",
        "timestamp": 1687808954
    },
    {
        "content": "<p>OK, I'm done for tonight. I made some progress defining the homeomorphism but we need to decide what to do with phrasing of <code>three</code> before we can continue.</p>",
        "id": 369826516,
        "sender_full_name": "Dagur Asgeirsson",
        "timestamp": 1687811406
    },
    {
        "content": "<p>I just pushed some version of three with some sorries.</p>\n<p>I didn't find a good existing Lemma for showing that a chain of nonempty closed subsets of a compact space has nonempty intersection.</p>",
        "id": 369838539,
        "sender_full_name": "Nikolas Kuhn",
        "timestamp": 1687814852
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"519559\">@Dagur Ásgeirsson</span>  impressive! We will discuss tomorrow, thanks.</p>",
        "id": 369838540,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1687814853
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"496319\">Nikolas Kuhn</span> <a href=\"#narrow/stream/384459-Copenhagen-Masterclass-2023/topic/Gleason/near/369838539\">said</a>:</p>\n<blockquote>\n<p>I just pushed some version of three with some sorries.</p>\n<p>I didn't find a good existing Lemma for showing that a chain of nonempty closed subsets of a compact space has nonempty intersection.</p>\n</blockquote>\n<p>So, the Lemma we discussed today was not enough?</p>",
        "id": 369838559,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1687814875
    },
    {
        "content": "<p>It's enough, but filling out the assumptions is complicated.</p>",
        "id": 369838675,
        "sender_full_name": "Nikolas Kuhn",
        "timestamp": 1687814921
    },
    {
        "content": "<p>Is it in the <code>push</code>ed version?</p>",
        "id": 369838718,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1687814939
    },
    {
        "content": "<p>yes, it should be up now. It also added a hf' hypothesis to everything. In the last proof one needs to introduce some argument that shows Epi f \\to Function.Surjective _</p>",
        "id": 369838931,
        "sender_full_name": "Nikolas Kuhn",
        "timestamp": 1687815013
    },
    {
        "content": "<p>can you point to the line?</p>",
        "id": 369838995,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1687815042
    },
    {
        "content": "<p>I added some <code>sorry</code>s there.</p>",
        "id": 369839034,
        "sender_full_name": "Nikolas Kuhn",
        "timestamp": 1687815059
    },
    {
        "content": "<p>212 and 214</p>",
        "id": 369839100,
        "sender_full_name": "Nikolas Kuhn",
        "timestamp": 1687815088
    },
    {
        "content": "<p>Showing this is probably necessary from a math viewpoint</p>",
        "id": 369839170,
        "sender_full_name": "Nikolas Kuhn",
        "timestamp": 1687815122
    },
    {
        "content": "<p>but are you speaking about the <code>lemma gleason</code>? I thought you were working on <code>three</code></p>",
        "id": 369839626,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1687815160
    },
    {
        "content": "<p>Yes I am, I just fixed the points that broke through my update (inserting the variable  <code>hf'</code> in various places, since it is now used in <code>three</code>).</p>",
        "id": 369840425,
        "sender_full_name": "Nikolas Kuhn",
        "timestamp": 1687815484
    },
    {
        "content": "<p>three compiles now without sorries. Will clean it up a bit later. I added a lemma that <code>\\pi_1</code> is continuous, which is needed:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">two_half</span> <span class=\"o\">:</span> <span class=\"n\">Continuous</span> <span class=\"o\">(</span><span class=\"n\">π₁</span> <span class=\"n\">φ</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>Anyone is welcome to fill that in.</p>",
        "id": 369913436,
        "sender_full_name": "Nikolas Kuhn",
        "timestamp": 1687844387
    },
    {
        "content": "<p>It’s easy, something like <code>Continuous.comp continuous_fst continuously_subtype_val</code></p>",
        "id": 369913823,
        "sender_full_name": "Dagur Asgeirsson",
        "timestamp": 1687844511
    },
    {
        "content": "<p>Just pushed a proof of lemma <code>five</code></p>",
        "id": 369932628,
        "sender_full_name": "Dagur Asgeirsson",
        "timestamp": 1687849176
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"464700\">@David Ang</span> How is it going with the PR?</p>",
        "id": 370077597,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1687874768
    },
    {
        "content": "<p>Still refactoring!</p>",
        "id": 370077677,
        "sender_full_name": "David Ang",
        "timestamp": 1687874783
    },
    {
        "content": "<p>I pushed a bit of stuff for now</p>",
        "id": 370078045,
        "sender_full_name": "David Ang",
        "timestamp": 1687874845
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 370083151,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1687875683
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/5634\">#5634</a> is ready for review, but the location of the coercion lemmas are probably not the best</p>",
        "id": 373553622,
        "sender_full_name": "David Ang",
        "timestamp": 1688845153
    },
    {
        "content": "<p>I had a look, is there something in particular that bothers you?</p>",
        "id": 373936934,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1688990729
    },
    {
        "content": "<p>Nothing in particular. There is not much API for doing these kinds of monadic coercion, and the lemmas I wrote down are the minimal necessary for the proof. As such I sprinkled them in random locations (e.g. in <code>Data.Set.Functor</code> just for the <code>Monad</code> instance).</p>",
        "id": 374020666,
        "sender_full_name": "David Ang",
        "timestamp": 1689006615
    }
]