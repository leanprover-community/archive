[
    {
        "content": "<p>Here's to work on TFAE statement regarding finite families of epimorphisms in ProFinite and ExtrDisc</p>",
        "id": 369659404,
        "sender_full_name": "Boris Kjær",
        "timestamp": 1687778089
    },
    {
        "content": "<p>Created branch <code>bbolvig/families-of-effective-epis</code></p>",
        "id": 369663672,
        "sender_full_name": "Boris Kjær",
        "timestamp": 1687778917
    },
    {
        "content": "<p>Can you push a sorried statement? We need it to prove that <code>Profinite</code> is precoherent</p>",
        "id": 369665297,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1687779126
    },
    {
        "content": "<p>Well, in practice we are doing the same thing... are you working on it?</p>",
        "id": 369665757,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1687779194
    },
    {
        "content": "<p>yes, the statement has been added in Profinite/Epi.lean</p>",
        "id": 369667084,
        "sender_full_name": "Boris Kjær",
        "timestamp": 1687779416
    },
    {
        "content": "<p>Is that working for you guys?</p>",
        "id": 369670577,
        "sender_full_name": "Boris Kjær",
        "timestamp": 1687780054
    },
    {
        "content": "<p>Yes thanks</p>",
        "id": 369670999,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1687780127
    },
    {
        "content": "<p>For profinite</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">Profinite.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">⟶</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">Y</span> <span class=\"bp\">⟶</span> <span class=\"n\">B</span><span class=\"o\">)</span>\n\n<span class=\"sd\">/--</span>\n<span class=\"sd\">The pullback of two morphisms `f,g` in `Profinite`, constructed explicitly as the set of</span>\n<span class=\"sd\">pairs `(x,y)` such that `f x = g y`, with the topology induced by the product.</span>\n<span class=\"sd\">-/</span>\n<span class=\"kd\">def</span> <span class=\"n\">pullback</span> <span class=\"o\">:</span> <span class=\"n\">Profinite.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">:=</span>\n  <span class=\"n\">letI</span> <span class=\"n\">set</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">xy</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">×</span> <span class=\"n\">Y</span> <span class=\"bp\">|</span> <span class=\"n\">f</span> <span class=\"n\">xy.fst</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"n\">xy.snd</span> <span class=\"o\">}</span>\n  <span class=\"n\">haveI</span> <span class=\"o\">:</span> <span class=\"n\">CompactSpace</span> <span class=\"n\">set</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">isCompact_iff_compactSpace</span><span class=\"o\">]</span>\n    <span class=\"n\">apply</span> <span class=\"n\">IsClosed.isCompact</span>\n    <span class=\"n\">exact</span> <span class=\"n\">isClosed_eq</span> <span class=\"o\">(</span><span class=\"n\">f.continuous.comp</span> <span class=\"n\">continuous_fst</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g.continuous.comp</span> <span class=\"n\">continuous_snd</span><span class=\"o\">)</span>\n  <span class=\"n\">Profinite.of</span> <span class=\"n\">set</span>\n</code></pre></div>\n<p>works</p>",
        "id": 369671157,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1687780155
    },
    {
        "content": "<p>I think you also need it</p>",
        "id": 369671182,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1687780160
    },
    {
        "content": "<p>totally golfed code ;)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"n\">intro</span> <span class=\"n\">x</span> <span class=\"n\">hx</span> <span class=\"n\">y</span> <span class=\"n\">hy</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">Set.Subsingleton</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n  <span class=\"k\">have</span> <span class=\"n\">a₁</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">f.inv</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">∈</span> <span class=\"bp\">↑</span><span class=\"n\">f.hom</span> <span class=\"bp\">⁻¹'</span> <span class=\"n\">t</span>\n  <span class=\"bp\">·</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Set.mem_preimage</span><span class=\"o\">]</span>\n    <span class=\"n\">simpa</span>\n  <span class=\"k\">have</span> <span class=\"n\">a₂</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">f.inv</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">∈</span> <span class=\"bp\">↑</span><span class=\"n\">f.hom</span> <span class=\"bp\">⁻¹'</span> <span class=\"n\">t</span>\n  <span class=\"bp\">·</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Set.mem_preimage</span><span class=\"o\">]</span>\n    <span class=\"n\">simpa</span>\n  <span class=\"n\">specialize</span> <span class=\"n\">h</span> <span class=\"n\">a₁</span> <span class=\"n\">a₂</span>\n  <span class=\"n\">replace</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"n\">congr_arg</span> <span class=\"n\">f.hom</span> <span class=\"n\">h</span>\n  <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n  <span class=\"n\">assumption</span>\n</code></pre></div>",
        "id": 369797898,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1687804142
    },
    {
        "content": "<p>Template with the statements:<br>\n<a href=\"https://github.com/adamtopaz/CopenhagenMasterclass2023/pull/9\">https://github.com/adamtopaz/CopenhagenMasterclass2023/pull/9</a></p>\n<p><span class=\"user-mention\" data-user-id=\"130384\">@Riccardo Brasca</span></p>",
        "id": 370009951,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1687862823
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 370009993,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1687862829
    }
]