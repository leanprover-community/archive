[
    {
        "content": "<p>Adam and I have got through pretty much all of the material that we sketched out in the plan for the week. What should I be doing at 9am on Thursday? Shall I just take a random sorry in the repo and we can solve it together?</p>",
        "id": 370416047,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1687956465
    },
    {
        "content": "<p>One option that came up in discussions over dinner yesterday: interpreting topological spaces, groups, etc, as condensed sets, condensed groups, etc. </p>\n<p>Any other suggestions?</p>",
        "id": 370423050,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1687957651
    },
    {
        "content": "<p>How far are we from doing any solid stuff <span class=\"user-mention\" data-user-id=\"519559\">@Dagur Ásgeirsson</span> ?</p>",
        "id": 370424288,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1687957878
    },
    {
        "content": "<p>I could definitely work on the functor from top spaces to condensed sets. Do we have the notion of a qcqs object</p>",
        "id": 370424813,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1687957969
    },
    {
        "content": "<p>No re qcqs, but we could aim for that def as well</p>",
        "id": 370425197,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1687958038
    },
    {
        "content": "<p>In my lecture today I didn’t get quite as far as I had expected. If not much progress was made on today’s targets, I could also pick it up where I left off today.</p>",
        "id": 370427243,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1687958394
    },
    {
        "content": "<p>Regarding the functor from topological spaces to condensed sets:</p>\n<p>I would like both functors <code>Top.{u+1} --&gt; CondensedSet.{u}</code> and <code>Profinite.{u} --&gt; CondensedSet.{u+1}</code>. In LTE, both were defined only from universe level u, but it surely exists for Top.{u+1} (I have some old lean 3 code for this, but we could as well do it from scratch). </p>\n<p>The reason I still want the one from Profinite.{u} is that I want to be able to say that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>X</mi><mo stretchy=\"false\">(</mo><mi>S</mi><mo stretchy=\"false\">)</mo><mo>≅</mo><mi>H</mi><mi>o</mi><msub><mi>m</mi><mrow><mi>C</mi><mi>o</mi><mi>n</mi><mi>d</mi><mi>e</mi><mi>n</mi><mi>s</mi><mi>e</mi><mi>d</mi><mi>S</mi><mi>e</mi><mi>t</mi></mrow></msub><mo stretchy=\"false\">(</mo><mi>S</mi><mo separator=\"true\">,</mo><mi>X</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">X(S) \\cong Hom_{CondensedSet}(S,X)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≅</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">Ho</span><span class=\"mord\"><span class=\"mord mathnormal\">m</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3361em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.07153em;\">C</span><span class=\"mord mathnormal mtight\">o</span><span class=\"mord mathnormal mtight\">n</span><span class=\"mord mathnormal mtight\">d</span><span class=\"mord mathnormal mtight\">e</span><span class=\"mord mathnormal mtight\">n</span><span class=\"mord mathnormal mtight\">se</span><span class=\"mord mathnormal mtight\">d</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.05764em;\">S</span><span class=\"mord mathnormal mtight\">e</span><span class=\"mord mathnormal mtight\">t</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"mclose\">)</span></span></span></span> for a profinite <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>S</mi></mrow><annotation encoding=\"application/x-tex\">S</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span></span></span></span>  and condensed set <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>X</mi></mrow><annotation encoding=\"application/x-tex\">X</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span></span></span></span>. </p>\n<p>For solid, we need <br>\n(1) the category of condensed abelian groups to have all limits required to define right Kan extensions, <br>\n(2) the functor from Profinite.{u} mentioned above (or at least a functor from Fintype.{u}), and <br>\n(3) to be able to define \"free condensed abelian groups\" (at least on a finite set, but we should really define the left adjoint to the forgetful functor from CondAb to CondSet)</p>",
        "id": 370427704,
        "sender_full_name": "Dagur Asgeirsson",
        "timestamp": 1687958474
    },
    {
        "content": "<p>Limits for condab is easy and done in my file from today (maybe just as an example?)</p>",
        "id": 370427990,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1687958525
    },
    {
        "content": "<p>Free cond ab is a matter of finding the right def from mathlib, there’s something about making adjunction a for sheaf cats from adjunctions for the target cats</p>",
        "id": 370428222,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1687958567
    },
    {
        "content": "<p>Some things which came up over snacks this afternoon: if C and D are equivalent, then Cond(C) and Cond(D) are equivalent :-) What properties if any do you need on a functor from C to D in order to get a functor from Cond(C) to Cond(D)? If C has a monoidal structure, does Cond(C)?</p>",
        "id": 370428861,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1687958681
    },
    {
        "content": "<p>Maybe for the next two days we can just go through the suggestions in this stream one by one ;)</p>",
        "id": 370429314,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1687958761
    },
    {
        "content": "<p>That would be fine by me</p>",
        "id": 370429410,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1687958771
    },
    {
        "content": "<p>Aka a tour of mathlib4 category theory</p>",
        "id": 370429474,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1687958781
    },
    {
        "content": "<p>Announcement: We will have a visitor tomorrow. <span class=\"user-mention\" data-user-id=\"354934\">@David Thrane Christiansen</span>  will come (Thursday) and say hello and maybe say a few words about his <a href=\"https://leanprover.github.io/functional_programming_in_lean/title.html\">book</a> on Lean 4 and perhaps even say what a monad transformer is. This would take place after Adam's lecture before we go for lunch.</p>",
        "id": 370437521,
        "sender_full_name": "Boris Kjær",
        "timestamp": 1687960126
    },
    {
        "content": "<p><span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span></p>",
        "id": 370437682,
        "sender_full_name": "David Thrane Christiansen",
        "timestamp": 1687960157
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"243562\">@Adam Topaz</span>  What about sketching a proof that <code>Ab</code> has AB5?</p>",
        "id": 370460688,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1687963896
    }
]