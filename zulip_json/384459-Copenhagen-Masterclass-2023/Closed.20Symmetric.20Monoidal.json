[
    {
        "content": "<p>Consider the <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> below. Does anybody know if the last two <code>sorry</code>s are solved easily using some results from the library?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">universe</span> <span class=\"n\">u</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kn\">section</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">CategoryTheory</span> <span class=\"n\">Limits</span>\n\n<span class=\"sd\">/-- `Ab` is the category of `ℤ`-modules -/</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">moduleCat_int_equiv_ab</span> <span class=\"o\">:</span> <span class=\"n\">ModuleCat.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">ULift.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">≌</span> <span class=\"n\">Ab.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"sd\">/-- The monoidal structure on `Ab` is induced by the one on `ℤ`-modules. -/</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">MonoidalCategory</span> <span class=\"n\">Ab</span> <span class=\"o\">:=</span> <span class=\"n\">Monoidal.transport</span> <span class=\"n\">moduleCat_int_equiv_ab</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"> Move Limits across the iso above. This should be straight forward -/</span>\n<span class=\"bp\">#</span><span class=\"n\">synth</span> <span class=\"n\">PreservesLimits</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">forget</span> <span class=\"o\">(</span><span class=\"n\">ModuleCat.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">ULift.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">ℤ</span><span class=\"o\">))</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">PreservesLimits</span> <span class=\"o\">(</span><span class=\"n\">forget</span> <span class=\"n\">Ab.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">})</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)}</span> <span class=\"o\">[</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">Category.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">J</span> <span class=\"o\">:</span> <span class=\"n\">GrothendieckTopology</span> <span class=\"n\">C</span><span class=\"o\">)</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">MonoidalCategory</span>\n\n<span class=\"sd\">/-- `S(SF ⊗ G) ≅ S(F ⊗ G)` where `S` is the sheafification. -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">helper_1</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"bp\">ᵒᵖ</span> <span class=\"bp\">⥤</span> <span class=\"n\">Ab.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">})</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"n\">presheafToSheaf</span> <span class=\"n\">J</span> <span class=\"n\">Ab</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">obj</span> <span class=\"o\">(</span><span class=\"n\">tensorObj</span> <span class=\"o\">(</span><span class=\"n\">J.sheafify</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"bp\">≅</span>\n    <span class=\"o\">(</span><span class=\"n\">presheafToSheaf</span> <span class=\"n\">J</span> <span class=\"n\">Ab</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">obj</span> <span class=\"o\">(</span><span class=\"n\">tensorObj</span> <span class=\"n\">F</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"gr\">sorry</span> <span class=\"c1\">-- HERE: Does the library have something related?</span>\n\n\n<span class=\"sd\">/-- `S(F ⊗ SG) ≅ S(F ⊗ G)` where `S` is the sheafification. -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">helper_2</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"bp\">ᵒᵖ</span> <span class=\"bp\">⥤</span> <span class=\"n\">Ab.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">})</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"n\">presheafToSheaf</span> <span class=\"n\">J</span> <span class=\"n\">Ab</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">obj</span> <span class=\"o\">(</span><span class=\"n\">tensorObj</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"n\">J.sheafify</span> <span class=\"n\">G</span><span class=\"o\">))</span> <span class=\"bp\">≅</span>\n    <span class=\"o\">(</span><span class=\"n\">presheafToSheaf</span> <span class=\"n\">J</span> <span class=\"n\">Ab</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">obj</span> <span class=\"o\">(</span><span class=\"n\">tensorObj</span> <span class=\"n\">F</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"gr\">sorry</span> <span class=\"c1\">-- HERE: Does the library have something related?</span>\n</code></pre></div>",
        "id": 371477734,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1688216932
    },
    {
        "content": "<p>If you show that the category of presheaves is <em>closed</em> monoidal, then I think you can get quite far by using the tensor-hom adjunction.</p>",
        "id": 371479674,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1688217366
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 371480224,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1688217489
    },
    {
        "content": "<p>ok we already have the result that the category od presheaves is closed monoidal, thats good</p>",
        "id": 371481031,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1688217666
    },
    {
        "content": "<p>my internet... :(</p>",
        "id": 371481033,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1688217667
    }
]