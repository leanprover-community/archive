[
    {
        "content": "<p>I was seeing what went into constructing the functor from top spaces to condensed sets. A sheaf condition needs to be checked. Right now I have this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">X</span><span class=\"o\">:</span> <span class=\"n\">TopCat</span>\n<span class=\"n\">S</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span>\n<span class=\"n\">B</span><span class=\"o\">:</span> <span class=\"n\">CompHaus</span>\n<span class=\"n\">α</span><span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"n\">inst</span><span class=\"bp\">✝</span><span class=\"o\">:</span> <span class=\"n\">Fintype</span> <span class=\"n\">α</span>\n<span class=\"n\">Y</span><span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">CompHaus</span>\n<span class=\"n\">F</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span> <span class=\"n\">a</span> <span class=\"bp\">⟶</span> <span class=\"n\">B</span>\n<span class=\"n\">hF</span><span class=\"o\">:</span> <span class=\"n\">EffectiveEpiFamily</span> <span class=\"n\">Y</span> <span class=\"n\">F</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">Presieve.IsSheafFor</span> <span class=\"o\">((</span><span class=\"n\">Functor.op</span> <span class=\"n\">compHausToTop</span> <span class=\"bp\">⋙</span> <span class=\"n\">yoneda.obj</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"bp\">⋙</span> <span class=\"n\">coyoneda.obj</span> <span class=\"n\">S.op</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Presieve.ofArrows</span> <span class=\"n\">Y</span> <span class=\"n\">F</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>I don't know whether introducing <code>S</code> was a good idea. Do we have that a sheaf T on Top is just one satisfying T(finite coprod) = finite prod, and T well-behaved on pullback maps coming from quotients?</p>",
        "id": 370588668,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1687990987
    },
    {
        "content": "<p>The characterization with equalizers is <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=CategoryTheory.Presheaf.isSheaf_iff_isSheaf%27#doc\">docs#CategoryTheory.Presheaf.isSheaf_iff_isSheaf'</a> and friends</p>",
        "id": 370588923,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1687991117
    },
    {
        "content": "<p>We have several related notions and I am playing quite a lot with them for <code>ExtrDiscr</code> (that complicates things since it doesn't have pullbacks)</p>",
        "id": 370589027,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1687991163
    },
    {
        "content": "<p>Note that you can get rid of <code>yoneda</code> using <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=CategoryTheory.Presheaf.isSheaf_iff_isSheaf_forget#doc\">docs#CategoryTheory.Presheaf.isSheaf_iff_isSheaf_forget</a></p>",
        "id": 370589118,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1687991194
    },
    {
        "content": "<p>I was trying to do precisely this but Lean complains that it can't find <code>Full (yoneda.obj X)</code></p>",
        "id": 370591006,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1687992030
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=CategoryTheory.Yoneda.yonedaFull#doc\">docs#CategoryTheory.Yoneda.yonedaFull</a></p>",
        "id": 370631116,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1688014270
    },
    {
        "content": "<p>Shouldn’t we use the easy <code>ExtrDisc</code> sheaf condition when defining this functor?</p>",
        "id": 370635594,
        "sender_full_name": "Dagur Asgeirsson",
        "timestamp": 1688015631
    },
    {
        "content": "<p>Yeah probably</p>",
        "id": 370636046,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1688015772
    },
    {
        "content": "<p>It would be much easier to check the sheaf condition</p>",
        "id": 370636122,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1688015802
    },
    {
        "content": "<p>Much easier means essentially trivial once we know that extrdisc to top preserves finite coproducts (which is still missing IIRC)</p>",
        "id": 370636412,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1688015883
    },
    {
        "content": "<p>We still might want to prove the sheaf condition for <code>CompHaus</code> (or <code>Profinite</code>) to know the S-valued points of a topological space regarded as a condensed set, for <code>S : CompHaus</code>. Or is there an easier way to do that? If we just define a presheaf on <code>ExtrDisc</code> and prove that it’s a sheaf, then we only know that the associated condensed set, when regarded as a presheaf on <code>CompHaus</code> is right Kan extended from the one on <code>ExtrDisc</code></p>",
        "id": 370638355,
        "sender_full_name": "Dagur Asgeirsson",
        "timestamp": 1688016383
    },
    {
        "content": "<p>Yeah good point. How close is “dagurification”?</p>",
        "id": 370641155,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1688017125
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243562\">Adam Topaz</span> <a href=\"#narrow/stream/384459-Copenhagen-Masterclass-2023/topic/functor.20from.20top.20spaces.20to.20condensed.20sets/near/370631116\">said</a>:</p>\n<blockquote>\n<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=CategoryTheory.Yoneda.yonedaFull#doc\">docs#CategoryTheory.Yoneda.yonedaFull</a></p>\n</blockquote>\n<p>That's proving that yoneda is full, not (yoneda S).</p>",
        "id": 370644669,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1688018099
    },
    {
        "content": "<p>whoops</p>",
        "id": 370644706,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1688018107
    },
    {
        "content": "<p>Why don't you use the multiequalizer condition instead?</p>",
        "id": 370645085,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1688018225
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"130384\">Riccardo Brasca</span> <a href=\"#narrow/stream/384459-Copenhagen-Masterclass-2023/topic/functor.20from.20top.20spaces.20to.20condensed.20sets/near/370589118\">said</a>:</p>\n<blockquote>\n<p>Note that you can get rid of <code>yoneda</code> using <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=CategoryTheory.Presheaf.isSheaf_iff_isSheaf_forget#doc\">docs#CategoryTheory.Presheaf.isSheaf_iff_isSheaf_forget</a></p>\n</blockquote>\n<p>This turned out to be more interesting than I imagined! The type of this (with universes switched on) is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">CategoryTheory.Presheaf.isSheaf_iff_isSheaf_forget.</span><span class=\"o\">{</span><span class=\"n\">v₁</span><span class=\"o\">,</span> <span class=\"n\">u₁</span><span class=\"o\">,</span> <span class=\"n\">u₂</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u₁</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">inst</span><span class=\"bp\">✝</span> <span class=\"o\">:</span> <span class=\"n\">Category.</span><span class=\"o\">{</span><span class=\"n\">v₁</span><span class=\"o\">,</span> <span class=\"n\">u₁</span><span class=\"o\">}</span> <span class=\"n\">C</span><span class=\"o\">]</span>\n  <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u₂</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">inst</span><span class=\"bp\">✝¹</span> <span class=\"o\">:</span> <span class=\"n\">Category.</span><span class=\"o\">{</span><span class=\"n\">max</span> <span class=\"n\">v₁</span> <span class=\"n\">u₁</span><span class=\"o\">,</span> <span class=\"n\">u₂</span><span class=\"o\">}</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">J</span> <span class=\"o\">:</span> <span class=\"n\">GrothendieckTopology.</span><span class=\"o\">{</span><span class=\"n\">v₁</span><span class=\"o\">,</span> <span class=\"n\">u₁</span><span class=\"o\">}</span> <span class=\"n\">C</span><span class=\"o\">)</span>\n<span class=\"bp\">...</span>\n</code></pre></div>\n<p>and we want to apply it with <code>C = CompHaus.{u}</code> (so v1=u and u1=u+1, it's a large category) and <code>A = Type u</code> (because we have <code>X : CompHaus.{u}</code> and the morphism from C^op to A is <code>yoneda.obj X</code>). But this is not possible! Because the category instance on A has morphisms in <code>Type u</code> but the universes in the declaration force the morphisms to be in type <code>Max v1 u1</code> which is <code>Type (u+1)</code> in the application :-)</p>",
        "id": 370808769,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1688049423
    },
    {
        "content": "<p>In fact the declaration itself is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">isSheaf_iff_isSheaf_forget</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">⥤</span> <span class=\"kt\">Type</span> <span class=\"n\">max</span> <span class=\"n\">v₁</span> <span class=\"n\">u₁</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">HasLimits</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">PreservesLimits</span> <span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">...</span>\n</code></pre></div>\n<p>!</p>",
        "id": 370814504,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1688050377
    },
    {
        "content": "<p>While you've all been thinking about sheaves, I've been totally nerdsniped and am wrestling with universes, trying to make Dagur's <a href=\"#narrow/stream/384459-Copenhagen-Masterclass-2023/topic/Suggestions.20for.20Thursday.20.2F.20Friday.20lectures/near/370427704\">strange-looking wish</a> come true (universes may go down as well as up). Right now this is kind of impossible to do in mathlib master because some choices of universes meant that we had to solve u=u+1 :-/ I'm currently trying to generalise things (i.e. fix them up) at branch <a href=\"https://github.com/leanprover-community/mathlib4/compare/kbuzzard-universe-gen\">kbuzzard-universe-gen</a>.</p>",
        "id": 370932950,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1688075232
    },
    {
        "content": "<p>Note that this same definition is implicated in the whole \"forwarding porting <a href=\"https://github.com/leanprover-community/mathlib/pull/19153\">!3#19153</a> is a nightmare / can we <a href=\"https://github.com/leanprover/lean4/issues/2297\">modify</a> Lean's universe unification\" train wreck that has been occupying too much of my attention. :-)</p>",
        "id": 370946724,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1688080997
    },
    {
        "content": "<p>Scott what do you think of the changes in my branch? I've got not idea whether it's nearly compiling or hopeless.</p>",
        "id": 370949874,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1688082657
    }
]