[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> is it possible that leancrawler makes a mistake if a lemma is used in a definition? In particular, I see that <a href=\"https://github.com/leanprover-community/lean-liquid/blob/a1f009de0f88731492e998e4fd8f27de3f6952af/src/thm95/default.lean#L76\">NSC</a> appears in the connected component leading to <code>liquid_tensor_experiment</code>, but <code>thm95.col_exact</code>, that it is used to give the definition, does not.</p>",
        "id": 298433007,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1663005343
    },
    {
        "content": "<p>Indeed, if I do <code>lib['NSC']</code>, I see <code>col_exact := _</code>, instead of</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">col_exact</span> <span class=\"o\">:=</span>\n  <span class=\"kd\">begin</span>\n <span class=\"bp\">...</span>\n    <span class=\"n\">refine</span> <span class=\"n\">thm95.col_exact</span> <span class=\"n\">BD.data</span> <span class=\"n\">κ</span> <span class=\"n\">r</span> <span class=\"n\">r'</span> <span class=\"n\">V</span> <span class=\"bp\">Λ</span> <span class=\"n\">M</span> <span class=\"n\">N</span> <span class=\"n\">j</span> <span class=\"o\">(</span><span class=\"n\">lem98.d</span> <span class=\"bp\">Λ</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">k₁_sqrt</span> <span class=\"n\">κ'</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"n\">m</span> <span class=\"n\">_</span> <span class=\"n\">_</span>\n      <span class=\"o\">(</span><span class=\"n\">k₁</span> <span class=\"n\">κ'</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">K₁</span> <span class=\"n\">r</span> <span class=\"n\">r'</span> <span class=\"n\">BD</span> <span class=\"n\">κ'</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">le_of_eq</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">c₀</span> <span class=\"n\">r</span> <span class=\"n\">r'</span> <span class=\"n\">BD</span> <span class=\"n\">κ</span> <span class=\"n\">κ'</span> <span class=\"n\">m</span> <span class=\"bp\">Λ</span><span class=\"o\">)</span> <span class=\"o\">⟨</span><span class=\"n\">le_rfl</span><span class=\"o\">⟩</span> <span class=\"n\">infer_instance</span> <span class=\"o\">⟨</span><span class=\"n\">le_rfl</span><span class=\"o\">⟩,</span>\n<span class=\"bp\">...</span>\n  <span class=\"kd\">end</span>\n</code></pre></div>\n<p>so the need for <code>thm95.col_exact</code> seems to be forgotten.</p>",
        "id": 298443646,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1663008663
    },
    {
        "content": "<p>Could it have to do something with this flag: <a href=\"https://github.com/leanprover-community/leancrawler/blob/master/leancrawler/crawler.py#L275\">https://github.com/leanprover-community/leancrawler/blob/master/leancrawler/crawler.py#L275</a> ?</p>",
        "id": 298549002,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1663063069
    },
    {
        "content": "<p>I am having lunch, then I will try to produce a MWE</p>",
        "id": 298549925,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1663063457
    },
    {
        "content": "<p>I've tried with something as simple as</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">init.data.nat.lemmas</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">crawler</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">add</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span> <span class=\"n\">add</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">test</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">crawler.add</span> <span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">add</span> <span class=\"o\">:=</span>\n  <span class=\"kd\">begin</span>\n    <span class=\"n\">exact</span> <span class=\"n\">nat.add_comm</span> <span class=\"n\">n</span> <span class=\"n\">m</span>\n  <span class=\"kd\">end</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">crawler</span>\n</code></pre></div>\n<p>but then <code>lib['crawler.test']</code> shows</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">LeanDecl</span><span class=\"o\">(</span><span class=\"n\">name</span><span class=\"bp\">='</span><span class=\"n\">crawler.test'</span><span class=\"o\">,</span> <span class=\"n\">filename</span><span class=\"bp\">='/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">brasca</span><span class=\"bp\">/</span><span class=\"n\">lean</span><span class=\"bp\">/</span><span class=\"n\">test_crawl</span><span class=\"bp\">/</span><span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">test_crawl.lean'</span><span class=\"o\">,</span>\n<span class=\"n\">line_nb</span><span class=\"bp\">=</span><span class=\"mi\">7</span><span class=\"o\">,</span> <span class=\"n\">kind</span><span class=\"bp\">='</span><span class=\"kd\">definition</span><span class=\"bp\">'</span><span class=\"o\">,</span> <span class=\"n\">is_inductive</span><span class=\"bp\">=</span><span class=\"n\">False</span><span class=\"o\">,</span> <span class=\"n\">is_structure</span><span class=\"bp\">=</span><span class=\"n\">False</span><span class=\"o\">,</span> <span class=\"n\">is_structure_field</span><span class=\"bp\">=</span><span class=\"n\">False</span><span class=\"o\">,</span>\n<span class=\"n\">is_class</span><span class=\"bp\">=</span><span class=\"n\">False</span><span class=\"o\">,</span> <span class=\"n\">is_instance</span><span class=\"bp\">=</span><span class=\"n\">False</span><span class=\"o\">,</span> <span class=\"n\">is_recursor</span><span class=\"bp\">=</span><span class=\"n\">False</span><span class=\"o\">,</span> <span class=\"n\">is_constructor</span><span class=\"bp\">=</span><span class=\"n\">False</span><span class=\"o\">,</span> <span class=\"kt\">Type</span><span class=\"bp\">='Π</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span>\n<span class=\"n\">crawler.add</span> <span class=\"n\">n</span> <span class=\"n\">m'</span><span class=\"o\">,</span> <span class=\"n\">type_uses_proofs</span><span class=\"bp\">=</span><span class=\"n\">set</span><span class=\"o\">(),</span> <span class=\"n\">type_uses_others</span><span class=\"bp\">=</span><span class=\"o\">{</span><span class=\"bp\">'</span><span class=\"n\">crawler.add'</span><span class=\"o\">,</span> <span class=\"bp\">'</span><span class=\"n\">nat'</span><span class=\"o\">},</span> <span class=\"n\">type_size</span><span class=\"bp\">=</span><span class=\"mi\">0</span><span class=\"o\">,</span>\n<span class=\"n\">type_dedup_size</span><span class=\"bp\">=</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">type_pp_size</span><span class=\"bp\">=</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">Value</span><span class=\"bp\">='λ</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"o\">{</span><span class=\"n\">add</span> <span class=\"o\">:=</span> <span class=\"n\">_</span><span class=\"o\">}</span><span class=\"bp\">'</span><span class=\"o\">,</span> <span class=\"n\">value_uses_proofs</span><span class=\"bp\">=</span><span class=\"o\">{</span><span class=\"bp\">'</span><span class=\"n\">nat.add_comm'</span><span class=\"o\">},</span>\n<span class=\"n\">value_uses_others</span><span class=\"bp\">=</span><span class=\"o\">{</span><span class=\"bp\">'</span><span class=\"n\">crawler.add.mk'</span><span class=\"o\">,</span> <span class=\"bp\">'</span><span class=\"n\">nat'</span><span class=\"o\">},</span> <span class=\"n\">value_size</span><span class=\"bp\">=</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">value_dedup_size</span><span class=\"bp\">=</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">value_pp_size</span><span class=\"bp\">=</span><span class=\"mi\">0</span><span class=\"o\">,</span>\n<span class=\"n\">target_class</span><span class=\"bp\">=</span><span class=\"n\">None</span><span class=\"o\">,</span> <span class=\"n\">parent</span><span class=\"bp\">=</span><span class=\"n\">None</span><span class=\"o\">,</span> <span class=\"n\">fields</span><span class=\"bp\">=</span><span class=\"o\">[])</span>\n</code></pre></div>\n<p>and <code>nat.add</code> appears as expected in the field <code> value_uses_proofs</code>. On the other way, the full output of <code>lib['NSC']</code> is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">...</span>\n<span class=\"n\">value_uses_proofs</span><span class=\"bp\">=</span><span class=\"o\">{</span><span class=\"bp\">'</span><span class=\"n\">NSC._proof_15'</span><span class=\"o\">,</span> <span class=\"bp\">'</span><span class=\"n\">NSC._proof_18'</span><span class=\"o\">,</span> <span class=\"bp\">'</span><span class=\"n\">NSC._proof_10'</span><span class=\"o\">,</span> <span class=\"bp\">'</span><span class=\"n\">NSC._proof_16'</span><span class=\"o\">,</span> <span class=\"bp\">'</span><span class=\"n\">NSC._proof_12'</span><span class=\"o\">,</span>\n<span class=\"bp\">'</span><span class=\"n\">NSC._proof_11'</span><span class=\"o\">,</span> <span class=\"bp\">'</span><span class=\"n\">NSC._proof_13'</span><span class=\"o\">,</span> <span class=\"bp\">'</span><span class=\"n\">NSC._proof_14'</span><span class=\"o\">,</span> <span class=\"bp\">'</span><span class=\"n\">NSC._proof_19'</span><span class=\"o\">,</span> <span class=\"bp\">'</span><span class=\"n\">NSC._proof_20'</span><span class=\"o\">,</span>\n<span class=\"s2\">\"thm95.universal_constants.one_le_k'\"</span><span class=\"o\">,</span> <span class=\"bp\">'</span><span class=\"n\">NSC_row_exact'</span><span class=\"o\">,</span> <span class=\"bp\">'</span><span class=\"n\">NSC._proof_17'</span><span class=\"o\">}</span>\n<span class=\"bp\">...</span>\n</code></pre></div>",
        "id": 298556355,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1663065974
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 298556491,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1663066011
    },
    {
        "content": "<p>I think <code>col_exact</code> is hidden in one of these <code>NSC._proof_</code></p>",
        "id": 298558221,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1663066609
    },
    {
        "content": "<p>OK, I've a simple example. </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">init.data.nat.lemmas</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">crawler</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">comm</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">)</span>\n<span class=\"o\">(</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">)</span>\n<span class=\"o\">(</span> <span class=\"n\">comm</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">test</span> <span class=\"o\">:</span> <span class=\"n\">crawler.comm</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"mi\">2</span><span class=\"o\">,</span>\n  <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"mi\">5</span><span class=\"o\">,</span>\n  <span class=\"n\">comm</span> <span class=\"o\">:=</span> <span class=\"n\">nat.add_comm</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">stupid</span> <span class=\"o\">:</span> <span class=\"n\">test.1</span> <span class=\"bp\">+</span> <span class=\"n\">test.2</span> <span class=\"bp\">=</span> <span class=\"n\">test.2</span> <span class=\"bp\">+</span> <span class=\"n\">test.1</span> <span class=\"o\">:=</span> <span class=\"n\">test.comm</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">crawler</span>\n</code></pre></div>",
        "id": 298560477,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1663067467
    },
    {
        "content": "<p><code>lib['crawler.stupid']</code> gives</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">LeanDecl</span><span class=\"o\">(</span><span class=\"n\">name</span><span class=\"bp\">='</span><span class=\"n\">crawler.stupid'</span><span class=\"o\">,</span> <span class=\"n\">filename</span><span class=\"bp\">='/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">brasca</span><span class=\"bp\">/</span><span class=\"n\">lean</span><span class=\"bp\">/</span><span class=\"n\">test_crawl</span><span class=\"bp\">/</span><span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">test_crawl.lean'</span><span class=\"o\">,</span> <span class=\"n\">line_nb</span><span class=\"bp\">=</span><span class=\"mi\">15</span><span class=\"o\">,</span> <span class=\"n\">kind</span><span class=\"bp\">='</span><span class=\"kd\">lemma</span><span class=\"bp\">'</span><span class=\"o\">,</span> <span class=\"n\">is_inductive</span><span class=\"bp\">=</span><span class=\"n\">False</span><span class=\"o\">,</span>\n<span class=\"n\">is_structure</span><span class=\"bp\">=</span><span class=\"n\">False</span><span class=\"o\">,</span> <span class=\"n\">is_structure_field</span><span class=\"bp\">=</span><span class=\"n\">False</span><span class=\"o\">,</span> <span class=\"n\">is_class</span><span class=\"bp\">=</span><span class=\"n\">False</span><span class=\"o\">,</span> <span class=\"n\">is_instance</span><span class=\"bp\">=</span><span class=\"n\">False</span><span class=\"o\">,</span> <span class=\"n\">is_recursor</span><span class=\"bp\">=</span><span class=\"n\">False</span><span class=\"o\">,</span> <span class=\"n\">is_constructor</span><span class=\"bp\">=</span><span class=\"n\">False</span><span class=\"o\">,</span>\n<span class=\"kt\">Type</span><span class=\"bp\">='</span><span class=\"n\">crawler.test.x</span> <span class=\"bp\">+</span> <span class=\"n\">crawler.test.y</span> <span class=\"bp\">=</span> <span class=\"n\">crawler.test.y</span> <span class=\"bp\">+</span> <span class=\"n\">crawler.test.x'</span><span class=\"o\">,</span> <span class=\"n\">type_uses_proofs</span><span class=\"bp\">=</span><span class=\"n\">set</span><span class=\"o\">(),</span>\n<span class=\"n\">type_uses_others</span><span class=\"bp\">=</span><span class=\"o\">{</span><span class=\"bp\">'</span><span class=\"n\">crawler.comm.x'</span><span class=\"o\">,</span> <span class=\"bp\">'</span><span class=\"n\">eq'</span><span class=\"o\">,</span> <span class=\"bp\">'</span><span class=\"n\">crawler.comm.y'</span><span class=\"o\">,</span> <span class=\"bp\">'</span><span class=\"n\">has_add.add'</span><span class=\"o\">,</span> <span class=\"bp\">'</span><span class=\"n\">crawler.test'</span><span class=\"o\">,</span> <span class=\"bp\">'</span><span class=\"n\">nat.has_add'</span><span class=\"o\">,</span> <span class=\"bp\">'</span><span class=\"n\">nat'</span><span class=\"o\">},</span> <span class=\"n\">type_size</span><span class=\"bp\">=</span><span class=\"mi\">0</span><span class=\"o\">,</span>\n<span class=\"n\">type_dedup_size</span><span class=\"bp\">=</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">type_pp_size</span><span class=\"bp\">=</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">Value</span><span class=\"bp\">='</span><span class=\"n\">crawler.test.comm'</span><span class=\"o\">,</span> <span class=\"n\">value_uses_proofs</span><span class=\"bp\">=</span><span class=\"o\">{</span><span class=\"bp\">'</span><span class=\"n\">crawler.comm.comm'</span><span class=\"o\">},</span>\n<span class=\"n\">value_uses_others</span><span class=\"bp\">=</span><span class=\"o\">{</span><span class=\"bp\">'</span><span class=\"n\">crawler.test'</span><span class=\"o\">},</span> <span class=\"n\">value_size</span><span class=\"bp\">=</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">value_dedup_size</span><span class=\"bp\">=</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">value_pp_size</span><span class=\"bp\">=</span><span class=\"mi\">0</span><span class=\"o\">,</span>\n<span class=\"n\">target_class</span><span class=\"bp\">=</span><span class=\"n\">None</span><span class=\"o\">,</span> <span class=\"n\">parent</span><span class=\"bp\">=</span><span class=\"n\">None</span><span class=\"o\">,</span> <span class=\"n\">fields</span><span class=\"bp\">=</span><span class=\"o\">[])</span>\n</code></pre></div>",
        "id": 298560644,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1663067527
    },
    {
        "content": "<p><code>nat.add_comm</code> is never mentioned.</p>",
        "id": 298560668,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1663067539
    },
    {
        "content": "<p>CC <span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span></p>",
        "id": 298561978,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1663068063
    },
    {
        "content": "<p>Thanks for creating an easy case. I will investigate this but time is currently a very very scarce resource for me.</p>",
        "id": 298562891,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1663068438
    },
    {
        "content": "<p>I'll try anyway at some point in the near future since it could be useful for our project paper writing</p>",
        "id": 298562954,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1663068476
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"130384\">@Riccardo Brasca</span> Thanks for minimizing!</p>",
        "id": 298563100,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1663068531
    },
    {
        "content": "<p>I am opening a separate discussion, maybe someone else is interested in this.</p>",
        "id": 298563148,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1663068547
    },
    {
        "content": "<p>Wait, I don't understand the complain. Your example mentions <code>crawler.comm.comm</code> whose dependencies should mention <code>nat.add_comm</code></p>",
        "id": 298563432,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1663068674
    },
    {
        "content": "<p>That is my complain, I don't see anywhere <code>nat.add_comm</code></p>",
        "id": 298563470,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1663068700
    },
    {
        "content": "<p>What you are printing here are only the direct dependencies, you need the full graph to see transitive dependencies</p>",
        "id": 298563484,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1663068711
    },
    {
        "content": "<p>What does it says about <code>test</code>?</p>",
        "id": 298563585,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1663068747
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">In</span> <span class=\"o\">[</span><span class=\"mi\">3</span><span class=\"o\">]:</span> <span class=\"n\">lib</span><span class=\"o\">[</span><span class=\"bp\">'</span><span class=\"n\">crawler.test'</span><span class=\"o\">]</span>\n\n<span class=\"n\">Out</span><span class=\"o\">[</span><span class=\"mi\">3</span><span class=\"o\">]:</span> <span class=\"n\">LeanDecl</span><span class=\"o\">(</span><span class=\"n\">name</span><span class=\"bp\">='</span><span class=\"n\">crawler.test'</span><span class=\"o\">,</span> <span class=\"n\">filename</span><span class=\"bp\">='/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">brasca</span><span class=\"bp\">/</span><span class=\"n\">lean</span><span class=\"bp\">/</span><span class=\"n\">test_crawl</span><span class=\"bp\">/</span><span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">test_crawl.lean'</span><span class=\"o\">,</span> <span class=\"n\">line_nb</span><span class=\"bp\">=</span><span class=\"mi\">10</span><span class=\"o\">,</span> <span class=\"n\">kind</span><span class=\"bp\">='</span><span class=\"kd\">definition</span><span class=\"bp\">'</span><span class=\"o\">,</span>\n<span class=\"n\">is_inductive</span><span class=\"bp\">=</span><span class=\"n\">False</span><span class=\"o\">,</span> <span class=\"n\">is_structure</span><span class=\"bp\">=</span><span class=\"n\">False</span><span class=\"o\">,</span> <span class=\"n\">is_structure_field</span><span class=\"bp\">=</span><span class=\"n\">False</span><span class=\"o\">,</span> <span class=\"n\">is_class</span><span class=\"bp\">=</span><span class=\"n\">False</span><span class=\"o\">,</span> <span class=\"n\">is_instance</span><span class=\"bp\">=</span><span class=\"n\">False</span><span class=\"o\">,</span> <span class=\"n\">is_recursor</span><span class=\"bp\">=</span><span class=\"n\">False</span><span class=\"o\">,</span>\n<span class=\"n\">is_constructor</span><span class=\"bp\">=</span><span class=\"n\">False</span><span class=\"o\">,</span> <span class=\"kt\">Type</span><span class=\"bp\">='</span><span class=\"n\">crawler.comm'</span><span class=\"o\">,</span> <span class=\"n\">type_uses_proofs</span><span class=\"bp\">=</span><span class=\"n\">set</span><span class=\"o\">(),</span> <span class=\"n\">type_uses_others</span><span class=\"bp\">=</span><span class=\"o\">{</span><span class=\"bp\">'</span><span class=\"n\">crawler.comm'</span><span class=\"o\">},</span> <span class=\"n\">type_size</span><span class=\"bp\">=</span><span class=\"mi\">0</span><span class=\"o\">,</span>\n<span class=\"n\">type_dedup_size</span><span class=\"bp\">=</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">type_pp_size</span><span class=\"bp\">=</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">Value</span><span class=\"bp\">='</span><span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"mi\">5</span><span class=\"o\">,</span> <span class=\"n\">comm</span> <span class=\"o\">:=</span> <span class=\"n\">crawler.test._proof_1</span><span class=\"o\">}</span><span class=\"bp\">'</span><span class=\"o\">,</span>\n<span class=\"n\">value_uses_proofs</span><span class=\"bp\">=</span><span class=\"o\">{</span><span class=\"bp\">'</span><span class=\"n\">crawler.test._proof_1'</span><span class=\"o\">},</span> <span class=\"n\">value_uses_others</span><span class=\"bp\">=</span><span class=\"o\">{</span><span class=\"bp\">'</span><span class=\"n\">nat.has_add'</span><span class=\"o\">,</span> <span class=\"bp\">'</span><span class=\"n\">bit1'</span><span class=\"o\">,</span> <span class=\"bp\">'</span><span class=\"n\">nat.has_one'</span><span class=\"o\">,</span> <span class=\"bp\">'</span><span class=\"n\">bit0'</span><span class=\"o\">,</span> <span class=\"bp\">'</span><span class=\"n\">crawler.comm.mk'</span><span class=\"o\">,</span>\n<span class=\"bp\">'</span><span class=\"n\">nat'</span><span class=\"o\">,</span> <span class=\"bp\">'</span><span class=\"n\">has_one.one'</span><span class=\"o\">},</span> <span class=\"n\">value_size</span><span class=\"bp\">=</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">value_dedup_size</span><span class=\"bp\">=</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">value_pp_size</span><span class=\"bp\">=</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">target_class</span><span class=\"bp\">=</span><span class=\"n\">None</span><span class=\"o\">,</span> <span class=\"n\">parent</span><span class=\"bp\">=</span><span class=\"n\">None</span><span class=\"o\">,</span> <span class=\"n\">fields</span><span class=\"bp\">=</span><span class=\"o\">[])</span>\n</code></pre></div>",
        "id": 298563744,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1663068827
    },
    {
        "content": "<p>Ok, and for <code>crawler.test._proof_1</code>?</p>",
        "id": 298563864,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1663068865
    },
    {
        "content": "<p>it's not happy.</p>",
        "id": 298563933,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1663068897
    },
    {
        "content": "<p>Meaning it gives an error</p>",
        "id": 298563971,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1663068910
    },
    {
        "content": "<p>So maybe that's the issue? Because I guess that is where <code>nat.add_comm</code> is supposed to show up.</p>",
        "id": 298564076,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1663068952
    },
    {
        "content": "<p><code>nat.add_comm</code> is indeed present in the full graph, but not in the connected component of <code>crwaler.stupid</code>. Maybe I don't understand something, but it should show up, right?</p>",
        "id": 298564356,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1663069062
    },
    {
        "content": "<p>I mean, it is needed</p>",
        "id": 298564369,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1663069066
    },
    {
        "content": "<p>Right, so somehow the code fails to add an edge. And it might be related to the fact that you got an error when querying about <code>._proof_1</code>?</p>",
        "id": 298564741,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1663069185
    },
    {
        "content": "<p>I think the error is there, but I have no idea  how the script works. In any case</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">nx.shortest_path</span><span class=\"o\">(</span><span class=\"n\">G</span><span class=\"o\">,</span> <span class=\"bp\">'</span><span class=\"n\">nat.add_comm'</span><span class=\"o\">,</span> <span class=\"bp\">'</span><span class=\"n\">crawler.stupid'</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>gives</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">...</span>\n<span class=\"n\">NetworkXNoPath</span><span class=\"o\">:</span> <span class=\"n\">No</span> <span class=\"n\">path</span> <span class=\"n\">between</span> <span class=\"n\">nat.add_comm</span> <span class=\"n\">and</span> <span class=\"n\">crawler.stupid</span>\n</code></pre></div>",
        "id": 298565022,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1663069311
    },
    {
        "content": "<p>Ok, there is a clear bug here. Floris and I will try to fix it soon.</p>",
        "id": 298565152,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1663069361
    },
    {
        "content": "<p>Thanks for you help!</p>",
        "id": 298565163,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1663069368
    },
    {
        "content": "<p>The full graph has 5177 nodes. To prove that <code>2+3=3+2</code>. Crazy.</p>",
        "id": 298565802,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1663069593
    },
    {
        "content": "<p>Lean has proved that math is hard!</p>",
        "id": 298583493,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1663075484
    },
    {
        "content": "<p>to be fair, there is a proof of <code>2+3=3+2</code> that involves only <code>eq.refl</code>, <code>nat.zero</code> and <code>nat.succ</code></p>",
        "id": 298583653,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1663075528
    },
    {
        "content": "<p>Maybe this is because I used <code>structure</code>. In any case it is not so important.</p>",
        "id": 298584315,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1663075753
    },
    {
        "content": "<p>And it is the full set of declarations used in <code>init.data.nat.lemmas</code> I think.</p>",
        "id": 298584471,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1663075804
    },
    {
        "content": "<p>This should be fixed in <a href=\"https://github.com/leanprover-community/leancrawler/pull/7\">leancrawler#7</a>.<br>\nYou can already test this by manually changing your <code>crawl.lean</code> file.</p>",
        "id": 298637098,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1663091658
    },
    {
        "content": "<p>Cool! Thanks for hacking on this! Should Riccardo's MWE be recorded as a test in the repo?</p>",
        "id": 298637551,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1663091817
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"130384\">@Riccardo Brasca</span> Can you now calculate how many definitions go into LTE? (As opposed to lemmas.)</p>",
        "id": 298716324,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1663140308
    },
    {
        "content": "<p>Maybe I actually want to know this for the statement, instead of the entire proof.</p>",
        "id": 298716355,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1663140323
    },
    {
        "content": "<p>I guess we should prepare a <code>def statement : Prop := ...</code> to do that.</p>",
        "id": 298716528,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1663140402
    },
    {
        "content": "<p>Yes I am going to run it against the LTE to gather the stats as before</p>",
        "id": 298719799,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1663141997
    },
    {
        "content": "<p>But you'll have to wait until this afternoon for the results I think</p>",
        "id": 298719956,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1663142086
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> do you like this statement?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">liquid_tensor_experiment_statement</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">Profinite.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">})</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"n\">pBanach.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">is_zero</span> <span class=\"o\">(</span><span class=\"n\">Ext</span> <span class=\"n\">i</span> <span class=\"o\">(</span><span class=\"n\">ℳ_</span><span class=\"o\">{</span><span class=\"n\">p'</span><span class=\"o\">}</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"n\">V</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 298724608,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1663144123
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"130384\">@Riccardo Brasca</span> LGTM</p>",
        "id": 298726286,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1663144886
    },
    {
        "content": "<p>You could just copy the statement from <code>challenge.lean</code></p>",
        "id": 298726314,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1663144902
    },
    {
        "content": "<p>I think it uses <code>\\iso 0</code>, instead of <code>is_zero</code>.</p>",
        "id": 298726336,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1663144919
    },
    {
        "content": "<p>But that shouldn't really have any effect on the nr of defs used in the statement.</p>",
        "id": 298726406,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1663144938
    }
]