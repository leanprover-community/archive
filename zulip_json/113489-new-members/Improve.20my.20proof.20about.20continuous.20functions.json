[
    {
        "content": "<p>Here's a proof that a constant times a continuous function is also continuous.  I would have thought there was already a proof of this in mathlib, but I couldn't find it.   Also, the proof seems a little long, any thoughts on simplifying it?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Topology.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Topology.Algebra.Monoid</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Set.Intervals.Basic</span>\n\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Real.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Topology.Instances.Real</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">Continuous</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">):</span> <span class=\"n\">Continuous</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">((</span><span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">this</span><span class=\"o\">]</span>\n  <span class=\"k\">have</span> <span class=\"n\">hconst</span> <span class=\"o\">:</span> <span class=\"n\">Continuous</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">continuous_const</span>\n  <span class=\"n\">apply</span> <span class=\"n\">hconst.mul</span> <span class=\"n\">hf</span>\n</code></pre></div>",
        "id": 403656263,
        "sender_full_name": "Martin C. Martin",
        "timestamp": 1700682593
    },
    {
        "content": "<p>You could use the <code>continuity</code> tactic:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">Continuous</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">):</span> <span class=\"n\">Continuous</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">continuity</span>\n</code></pre></div>",
        "id": 403656589,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1700682724
    },
    {
        "content": "<p>If you use <code>by?</code> you can see what it came up with, for curiosity's sake:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">Continuous</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">):</span> <span class=\"n\">Continuous</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n  <span class=\"n\">Continuous.comp'</span> <span class=\"o\">(</span><span class=\"n\">continuous_mul_left</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">of_eq_true</span> <span class=\"o\">(</span><span class=\"n\">eq_true</span> <span class=\"n\">hf</span><span class=\"o\">))</span>\n</code></pre></div>",
        "id": 403656666,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1700682766
    },
    {
        "content": "<p>wow that's shorter lol!  Is there a way to get a \"trace\" of what theorems it uses?</p>",
        "id": 403656679,
        "sender_full_name": "Martin C. Martin",
        "timestamp": 1700682775
    },
    {
        "content": "<p>I think you sent that question about the trace right when I sent that last message -- does that answer your question?</p>",
        "id": 403656811,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1700682840
    },
    {
        "content": "<p>Yes you're right.  :)  What is <code>by?</code> and how do I use it?  Just using <code>:= by by?</code> or <code>:= by?</code> gives syntax error.</p>",
        "id": 403656928,
        "sender_full_name": "Martin C. Martin",
        "timestamp": 1700682901
    },
    {
        "content": "<p>You just use <code>by?</code> instead of <code>by</code></p>",
        "id": 403657163,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1700683018
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Topology.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Topology.Algebra.Monoid</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Set.Intervals.Basic</span>\n\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Real.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Topology.Instances.Real</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">Continuous</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">):</span> <span class=\"n\">Continuous</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span><span class=\"bp\">?</span>\n  <span class=\"n\">continuity</span>\n</code></pre></div>",
        "id": 403657196,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1700683043
    },
    {
        "content": "<p>Alternatively, you should be able to put <code>show_term</code> before either the tactic or before the <code>by</code></p>",
        "id": 403657231,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1700683062
    },
    {
        "content": "<p>This isn't a trace per se, but it does show you what proof term it came up with, and you can read off the lemmas from there.</p>",
        "id": 403657276,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1700683083
    },
    {
        "content": "<p>TIL about <code>by?</code></p>",
        "id": 403658043,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1700683413
    },
    {
        "content": "<p>I'm going to start putting question marks everywhere in Lean code from today on.</p>",
        "id": 403665173,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1700687064
    },
    {
        "content": "<p><code>by sorry?</code></p>",
        "id": 403665262,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1700687128
    },
    {
        "content": "<p>I like <code>sorry?</code> as an alias for <code>hint</code></p>",
        "id": 403744854,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1700730170
    },
    {
        "content": "<p>Very easy for beginners to remember too</p>",
        "id": 403751095,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1700732424
    }
]