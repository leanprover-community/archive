[
    {
        "content": "<p>Hi all! We are working on a graph theorem and came across the following situation which we can't see a solution for right now: We have two graphs, which we know to be equal from a lemma, and we have and need to make statements about edges, paths, etc. in both of these graphs. However, when rewriting, for example, the type of a path, all hypotheses about this path become useless, because they do not refer to the updated <code>P</code>, but to the old <code>P✝</code>. A somewhat minimal example of this would be the following:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Combinatorics.SimpleGraph.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Combinatorics.SimpleGraph.Connectivity</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Foo</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">SimpleGraph</span> <span class=\"n\">V</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">G.Dart</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">foo_of_eq_of_foo</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">foo_of_eq_of_foo</span>\n    <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"n\">G'</span> <span class=\"o\">:</span> <span class=\"n\">SimpleGraph</span> <span class=\"n\">V</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">heq</span> <span class=\"o\">:</span> <span class=\"n\">G</span> <span class=\"bp\">=</span> <span class=\"n\">G'</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">G.Walk</span> <span class=\"n\">u</span> <span class=\"n\">v</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">G.Dart</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">hd</span> <span class=\"o\">:</span> <span class=\"n\">d</span> <span class=\"bp\">∈</span> <span class=\"n\">P.darts</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">d</span> <span class=\"bp\">∈</span> <span class=\"n\">P.darts</span><span class=\"o\">,</span> <span class=\"n\">Foo</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"bp\">∃</span> <span class=\"n\">d'</span> <span class=\"o\">:</span> <span class=\"n\">G'.Dart</span><span class=\"o\">,</span> <span class=\"n\">Foo</span> <span class=\"n\">d'</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span><span class=\"o\">[</span><span class=\"n\">heq</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">d</span>\n  <span class=\"n\">use</span> <span class=\"n\">d</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>(The actual problem we encountered is at <a href=\"https://github.com/niklasmohrin/lean-seminar-2023/blob/fa94a00386d443387a6686d8c3ac015ea5baddc6/FlowEquivalentForest/Matrix.lean#L253-L256\">https://github.com/niklasmohrin/lean-seminar-2023/blob/fa94a00386d443387a6686d8c3ac015ea5baddc6/FlowEquivalentForest/Matrix.lean#L253-L256</a> , but a solution to the example above should also be applicable there too)</p>\n<p>Does anyone know if there is a way to also update these hypotheses attached to the objects? Thanks!</p>",
        "id": 405141576,
        "sender_full_name": "Niklas Mohrin",
        "timestamp": 1701358115
    },
    {
        "content": "<p><code>subst heq</code> ?</p>",
        "id": 405142241,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1701358306
    },
    {
        "content": "<p>(I edited the question, now it should actually be a correct statement)<br>\nAh, nice, using <code>subst</code> on the goal instead of <code>rw</code> on the variable works in this case (<code>subst heq; use d; exact h d hd</code>). Is there any way to <code>subst</code> on a hypothesis instead of the goal? <code>subst heq at d</code> doesn't seem to work</p>",
        "id": 405144844,
        "sender_full_name": "Niklas Mohrin",
        "timestamp": 1701359105
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 405145779,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1701359355
    },
    {
        "content": "<p><code>subst</code> replaces all occurrences of one of the two variables by the other, and then discards the first completely, so it has to be a global operation.</p>",
        "id": 405145906,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1701359396
    },
    {
        "content": "<p>Ah, got it. I am still struggling to apply it in the full code right now, with</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">have</span> <span class=\"n\">xyz</span> <span class=\"o\">:</span> <span class=\"n\">UndirectedNetwork.asSimpleGraph</span> <span class=\"n\">N</span> <span class=\"bp\">=</span> <span class=\"n\">g.val.val</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">[</span><span class=\"n\">mkFrom_asSimpleGraph_eq</span><span class=\"o\">]</span>\n<span class=\"n\">subst</span> <span class=\"n\">xyz</span>\n</code></pre></div>\n<p>I am getting</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">tactic</span> <span class=\"bp\">'</span><span class=\"n\">subst'</span> <span class=\"n\">failed</span><span class=\"o\">,</span> <span class=\"n\">invalid</span> <span class=\"n\">equality</span> <span class=\"n\">proof</span><span class=\"o\">,</span> <span class=\"n\">it</span> <span class=\"n\">is</span> <span class=\"n\">not</span> <span class=\"n\">of</span> <span class=\"n\">the</span> <span class=\"n\">form</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"n\">or</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"bp\">=</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n     <span class=\"n\">UndirectedNetwork.asSimpleGraph</span> <span class=\"n\">N</span> <span class=\"bp\">=</span> <span class=\"bp\">↑↑</span><span class=\"n\">g</span>\n</code></pre></div>\n<p>... but it behaves as you describe in my example :D I will try to reproduce in the small example</p>",
        "id": 405147578,
        "sender_full_name": "Niklas Mohrin",
        "timestamp": 1701359905
    },
    {
        "content": "<p><code>subst</code> only works if one of the sides is a free variable</p>",
        "id": 405149731,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1701360417
    },
    {
        "content": "<p>Worst case you can extract the thing you need into a separate lemma like your example</p>",
        "id": 405149879,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1701360447
    },
    {
        "content": "<p>Also maybe <code>simp_rw</code> might work?</p>",
        "id": 405149932,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1701360461
    },
    {
        "content": "<p>Ah, that explains it</p>",
        "id": 405150446,
        "sender_full_name": "Niklas Mohrin",
        "timestamp": 1701360593
    },
    {
        "content": "<p>So <code>simp_rw[mkFrom_asSimpleGraph_eq] at e P he</code> does not touch <code>he</code> and still leaves me with <code>he : e✝ ∈ Walk.darts ↑P✝</code></p>",
        "id": 405151364,
        "sender_full_name": "Niklas Mohrin",
        "timestamp": 1701360876
    },
    {
        "content": "<p>I played around with <code>Eq.subst</code> and <code>\\t</code> a bit, but it didn't really lead anywhere either :( I suppose we will really have to write it in a separate lemma if we can't find a better way. Thanks anyways to all!</p>",
        "id": 405156536,
        "sender_full_name": "Niklas Mohrin",
        "timestamp": 1701362521
    },
    {
        "content": "<p>Stating a separate lemma like this (or stating a result as a <code>have</code> inside of your proof) where you generalize everything involved to be actual variables is one of the standard ways of dealing with dependent type issues.</p>\n<p>There's also the <code>generalize</code> tactic, which you can sometimes use to generalize things in situ.</p>",
        "id": 405184198,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1701371807
    },
    {
        "content": "<p>To close this, here are the results for anyone interested:</p>\n<p>First, there is a solution where we take the graph in question as an extra parameter of the <code>have</code> and <code>subst</code> right away: <a href=\"https://github.com/niklasmohrin/lean-seminar-2023/blob/cdd9596428981e44b7ee226734b288991bf2bebc/FlowEquivalentForest/Matrix.lean#L243-L286\">https://github.com/niklasmohrin/lean-seminar-2023/blob/cdd9596428981e44b7ee226734b288991bf2bebc/FlowEquivalentForest/Matrix.lean#L243-L286</a><br>\nSecond, it turns out that <code>generalize</code> did work in this case and makes it a bit tidier: <a href=\"https://github.com/niklasmohrin/lean-seminar-2023/blob/0082d932d4d9ae02ad905727191edd3b382d9732/FlowEquivalentForest/Matrix.lean#L257-L259\">https://github.com/niklasmohrin/lean-seminar-2023/blob/0082d932d4d9ae02ad905727191edd3b382d9732/FlowEquivalentForest/Matrix.lean#L257-L259</a></p>\n<p>Thanks to everyone helping!</p>\n<p>Final thing: What first got me confused about <code>subst</code> was that when hovering it in my editor, I get the following help:</p>\n<blockquote>\n<p><code>subst x...</code> substitutes each <code>x</code> with <code>e</code> in the goal if there is a hypothesis of type <code>x = e</code> or <code>e = x</code>. If <code>x</code> is itself a hypothesis of type <code>y = e</code> or <code>e = y</code>, <code>y</code> is substituted instead.</p>\n</blockquote>\n<p>Should this maybe be rephrased to something like \"substitutes each <code>x</code> with <code>e</code> <strong>globally</strong>\"? Because substituting just in the goal sounds like a plain <code>rw</code> to me</p>",
        "id": 406317003,
        "sender_full_name": "Niklas Mohrin",
        "timestamp": 1701872739
    },
    {
        "content": "<p>Yeah, that \"in the goal\" makes no sense to me either</p>",
        "id": 406331369,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1701876910
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"660493\">Niklas Mohrin</span> has marked this topic as resolved.</p>",
        "id": 406406597,
        "sender_full_name": "Notification Bot",
        "timestamp": 1701904811
    }
]