[
    {
        "content": "<p>In the type signature of a function, how can I restrict a type to any type which is an instance of a particular type class, such as a Monad ?</p>",
        "id": 343714928,
        "sender_full_name": "Miguel Negrão",
        "timestamp": 1679499573
    },
    {
        "content": "<p>Ask for <code>[Monad X]</code>?</p>",
        "id": 343715250,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1679499658
    },
    {
        "content": "<p>This example is a bit silly, but how would I constrain m such that it must be a Monad ?</p>\n<div class=\"codehilite\"><pre><span></span><code>def A (m : Type → Type) (y : Type) : Type := m y\n</code></pre></div>\n\n<p>I don't quite get how to use the [ ] syntax you mention. Thanks !</p>",
        "id": 343718161,
        "sender_full_name": "Miguel Negrão",
        "timestamp": 1679500325
    },
    {
        "content": "<p>Ok, I think I got it !</p>\n<div class=\"codehilite\"><pre><span></span><code>def A (m : Type → Type) [Monad m] (y : Type) : Type := m y\n</code></pre></div>",
        "id": 343719345,
        "sender_full_name": "Miguel Negrão",
        "timestamp": 1679500625
    }
]