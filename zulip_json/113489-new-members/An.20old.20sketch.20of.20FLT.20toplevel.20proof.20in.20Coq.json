[
    {
        "content": "<p>Described here: <a href=\"https://www.cs.rug.nl/~wim/fermat/wilesEnglish.html\">https://www.cs.rug.nl/~wim/fermat/wilesEnglish.html</a></p>\n<p>Implemented here: <a href=\"https://github.com/kaustubherttre/coq-proofs/blob/master/some-coq-proofs/fermat-last-theorem.v\">https://github.com/kaustubherttre/coq-proofs/blob/master/some-coq-proofs/fermat-last-theorem.v</a></p>",
        "id": 359790310,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1684542607
    },
    {
        "content": "<p>Exponents 3 and 4 in Isabelle, done in 2007: <a href=\"https://fse.studenttheses.ub.rug.nl/8392/1/Roelof_Oosterhuis_doctoraal.pdf\">https://fse.studenttheses.ub.rug.nl/8392/1/Roelof_Oosterhuis_doctoraal.pdf</a></p>",
        "id": 359790468,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1684542734
    },
    {
        "content": "<p>Group law for elliptic curves done in Isabelle in 2022: <a href=\"https://www.isa-afp.org/browser_info/current/AFP/Elliptic_Curves_Group_Law/document.pdf\">https://www.isa-afp.org/browser_info/current/AFP/Elliptic_Curves_Group_Law/document.pdf</a></p>",
        "id": 359790695,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1684542918
    },
    {
        "content": "<p>There seems to be a lot done in elliptic curves in Isabelle and Coq because it is useful for cryptography, so funding comes from entities interested in cryptography applications.</p>",
        "id": 359790807,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1684542998
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"364351\">@Lars Ericson</span> I'm not sure I really understand what thesis you're trying to support regarding FLT. I'm inferring that you're hoping to get people interested in working on formalizing FLT itself, and that you're trying to be a problem solver and eliminate what you yourself are perceiving to be impediments toward this work.</p>\n<p>Have you had a chance to look at <a href=\"https://leanprover-community.github.io/mathlib-overview.html\">mathlib</a> yet? This is the main project we're working on, which is an attempt to formalize all basic undergraduate and research mathematics in a single library. There's a lot of math to do, and not having FLT yet does not mean that work isn't progressing ever-so-incrementally toward such targets. As that first link you shared says, \"On the other hand, I do think that the challenge [to formalize FLT] is doable, and that it will be done in the coming fifty years. It is definitely not within reach. The project will have to cover large parts of current pure mathematics. Its scope is comparable with the Bourbaki project, where between 1950 and 1970 almost all of pure mathematics got a new foundation.\" Mathlib is quite young.</p>\n<p>There's an ongoing project to prove FLT in the case of regular primes: <a href=\"https://github.com/leanprover-community/flt-regular\">https://github.com/leanprover-community/flt-regular</a></p>",
        "id": 359792925,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1684544697
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span> my own sense of easy-to-hard-part is:</p>\n<ul>\n<li>Define the structures like elliptic curve and modular form that the Wiles proof talks about</li>\n<li>State the top-level flow with <code>sorry</code>s of the main proof</li>\n<li>Finish the proof on initial parts of the proof if these have already been done</li>\n<li>Separate out the hard parts and frame these as separate subgoals</li>\n</ul>\n<p>I'm looking at the past efforts in this regard, in Lean and related ancestors of Lean like Coq and Isabelle.  For reasons I don't understand, Lean seems to have an open community which is 100x larger and 100x more active than the Coq/Isabelle communities.  Historically I don't know why this is the case.  But it definitely seems like Lean is where it's at.</p>\n<p>I know that these steps are, from an expert's point of view, uncomfortably trivial.  I don't really agree.  I think it is useful work to have the language available to state the top level of the proof, which looks easy, because the statement of FLT is something that anyone can grasp, because that makes it easier to frame the hard parts on their own terms, which will be terms that only specialists can grasp, which makes it easier for people like me who are non-specialists to say \"Oh right, that does look hard\" and walk away.  So a statement like \"A remarkable elliptic curve cannot be modular\" is clearly cognitively far enough away from \"there is no <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi><mo>&gt;</mo><mn>2</mn></mrow><annotation encoding=\"application/x-tex\">n&gt;2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">&gt;</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">2</span></span></span></span> such that  <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>x</mi><mi>n</mi></msup><mo>+</mo><msup><mi>y</mi><mi>n</mi></msup><mo>=</mo><msup><mi>z</mi><mi>n</mi></msup></mrow><annotation encoding=\"application/x-tex\">x^n+y^n=z^n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7477em;vertical-align:-0.0833em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6644em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8588em;vertical-align:-0.1944em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6644em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6644em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.04398em;\">z</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6644em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span></span></span></span></span></span></span>\" that I can look at it and say \"oh that does look hard and I don't understand it and I don't want to understand it but it's good that someone else is thinking about it\".</p>\n<p>There is another moving part though which is the redesign of Lean 3 to Lean 4.  Google Bard told me I should work in Lean 4:</p>\n<p><a href=\"/user_uploads/3121/egLRXCauFG62OBIlEdZvryfO/Screenshot-from-2023-05-20-08-07-02.png\">Screenshot-from-2023-05-20-08-07-02.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/egLRXCauFG62OBIlEdZvryfO/Screenshot-from-2023-05-20-08-07-02.png\" title=\"Screenshot-from-2023-05-20-08-07-02.png\"><img src=\"/user_uploads/3121/egLRXCauFG62OBIlEdZvryfO/Screenshot-from-2023-05-20-08-07-02.png\"></a></div><p>So in that regard I have done <code>scripts/start_port.sh Mathlib/RingTheory/PowerSeries/Basic.lean</code> and I will focus on that.  If I can't make that file typecheck on my PC, I will promptly give up on the larger outline above.  I don't expect anybody else to follow that approach, it just seems like the right path to me.</p>",
        "id": 359878128,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1684584800
    },
    {
        "content": "<p>Regarding the project to prove FLT for regular primes, that leaves the subgoal of proving it for irregular primes.  <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> commented <a href=\"#narrow/stream/219941-Machine-Learning-for-Theorem-Proving/topic/Getting.20GPT3.20chatbots.20to.20write.20ZFC.20in.20Lean4/near/358155724\">here</a> that \"Wiles' proof does not distinguish between the regular and irregular case. He proves semistable Taniyama-Shiumura, which doesn't have a prime in its statement.\"  This is exactly why I think we should state the top-level flow of the version of Wile's proof that we really want to end up at. That is, either you commit to a proof which does regular and then irregular primes, which is different from Wile's proof, or start at least with a top-level outline which you think is achievable and correct of what you think Wile's proof does in a flow that Wile likes.</p>",
        "id": 359885816,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1684586984
    },
    {
        "content": "<p>The man's name is Wiles, btw, not Wile. You could start by trying to state Taniyama–Shimura, with or without the semistability hypothesis.</p>",
        "id": 359888302,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1684587788
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"389019\">@Chris Birkbeck</span> already stated Taniyama-Shimura in Lean.</p>",
        "id": 359890261,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1684588340
    },
    {
        "content": "<p>TIL - I guess that would be here: <a href=\"https://github.com/CBirkbeck/ModularForms/blob/master/src/mod_forms/modularity_conjecture.lean\">https://github.com/CBirkbeck/ModularForms/blob/master/src/mod_forms/modularity_conjecture.lean</a></p>",
        "id": 359892633,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1684589134
    }
]