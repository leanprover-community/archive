[
    {
        "content": "<p>Functions such as <code>log</code> or division are defined in Mathlib on all of the reals and \"garbage values\" (often zero) are used where the common mathematical definition would not define such functions at all. This leads to a lot of \"theorems\" which aren't true in mathematics. How does one deal with that?</p>\n<p>One way is to accept that <code>Real.log</code> isn't the same as the logarithm function used in mathematics, <code>log 0 = 0 / 0 = 0</code> really holds and make all theorems as general as possible. Another way is to \"pretend\" that these functions are the same as in math and try to \"never divide by zero\". I think the second way is very hard to maintain (tactics would need to know this? Does that then defeat the purpose of formally verifying stuff?) and there are a lot of theorems in mathlib already which use the definitions as they are (e.g. unnecessary differentiability assumptions are omitted).</p>\n<p>On the other hand, there seem to be theorems in Mathlib that could be generalized but weren't, perhaps due to not being \"true in math\".</p>\n<p>For example, I'm reasonably sure (my recent question on this didn't receive answers) that <code>Continuous fun x =&gt; x * Real.log x</code>. Is that something that could go into Mathlib if proven, or is it a \"bad theorem\"?</p>",
        "id": 396576634,
        "sender_full_name": "Adomas Baliuka",
        "timestamp": 1697234685
    },
    {
        "content": "<p>You say \"I think the second way is very hard to maintain\" but 10^6+ lines of mathlib code is evidence against that claim, right?</p>\n<p>There are certainly theorems in mathlib like <code>(a+b)/c=a/c+b/c</code> which are true more generally in Lean than in real maths, and your continuity statement is another such example, so I don't see why it couldn't go in mathlib.</p>",
        "id": 396577356,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1697235126
    },
    {
        "content": "<p>So which is the way this is dealt with? Is it \"neither, there's more nuance than choosing one approach\"?</p>\n<p>You seem to be implying that there is something about this that needs to be maintained manually (presumably, that theorem statements don't stray too far from what's true in standard math) but my example would be OK despite not being true in normal math? I don't quite understand. Are there \"evil theorems\" that typecheck but aren't \"true\" in some sense relevant to Mathlib and would be bad to include (I'm not talking about \"theorems that break tactics\" or \"trivial theorems that just clutter the code\")? Is it true to say that a theorem that's already in Mathlib should always be as general as possible (have the weakest possible assumptions)?</p>",
        "id": 396632590,
        "sender_full_name": "Adomas Baliuka",
        "timestamp": 1697274763
    },
    {
        "content": "<p>Have you read the Xena blog post about division by zero?</p>",
        "id": 396636118,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1697277729
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"307953\">Ruben Van de Velde</span> <a href=\"#narrow/stream/113489-new-members/topic/Proofs.20about.20garbage.20values.3F/near/396636118\">said</a>:</p>\n<blockquote>\n<p>Have you read the Xena blog post about division by zero?</p>\n</blockquote>\n<p>Yes, the way I understand it it has the same tension between \"mathematicians never divide by zero\" (I would think this implies that my continuity statement is \"bad\") and \"division as defined in Lean is not the same as in Math\" (which I would think means my continuity statement is OK)</p>",
        "id": 396636524,
        "sender_full_name": "Adomas Baliuka",
        "timestamp": 1697278045
    },
    {
        "content": "<p>Basically yes, I'd say you want to expect that lean definitions can be somewhat more general than you'd usually make them in mathematics. I'm not sure I'd talk about theorems that are false in mathematics: they're theorems whose statement is meaningless in most \"informal\" mathematics</p>",
        "id": 396637026,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1697278428
    },
    {
        "content": "<p>If you really want you can prove \"false\" theorems, for example: there exist a rational <code>x</code> such that <code>1 / x = 2 / x</code>.</p>",
        "id": 396637394,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1697278700
    },
    {
        "content": "<p>I mean, theorems that a mathematician would say are false.</p>",
        "id": 396637427,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1697278736
    },
    {
        "content": "<p>I think it's actually in the spirit of mathlib to prove statements that are generally true given the garbage value. Often the garbage value is chosen so that some good amount of theorems are true in this case (e.g. why do we have <code>(2 : Nat) - 4 = 0</code> instead of <code>37</code>?) and some of the beauty of this is creating really nice api that requires slightly less than usual, as it saves keystrokes, assumptions and pain. (The <code>tsub</code> API is a good example of this).</p>",
        "id": 396637468,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1697278777
    },
    {
        "content": "<p>These sometimes orchestrate in a nice way for advanced maths, too; in flt-regular Riccardo has proved a nice formula for the discriminant of <code>Q[zeta_p^n]</code> that unifies all cases (even <code>p^k = 1, 2</code>) whilst the \"usual\" way the formula is presented is with cases. We've often found that the cardinality of infinite groups being set to zero can be really helpful due to divisibility orderings also having zero as the top element.</p>",
        "id": 396637655,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1697278921
    },
    {
        "content": "<p>I proved</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">continuous_log_mul_rpow</span> <span class=\"o\">{</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñù</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hr</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">r</span><span class=\"o\">)</span>\n<span class=\"o\">:</span> <span class=\"n\">Continuous</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñù</span><span class=\"o\">)</span> <span class=\"bp\">‚Ü¶</span> <span class=\"n\">log</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"n\">r</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>I'm sure this is about 10x longer and more ugly than what someone familiar with Lean/Mathlib would have written, but here it is:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c\">/-</span>\n<span class=\"cm\">Copyright (c) 2023 Adomas Baliuka. All rights reserved.</span>\n<span class=\"cm\">Released under Apache 2.0 license as described in the file LICENSE.</span>\n<span class=\"cm\">Authors: Adomas Baliuka</span>\n<span class=\"cm\">-/</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Analysis.SpecialFunctions.Pow.Asymptotics</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Analysis.SpecialFunctions.Pow.Continuity</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Classical</span>\n<span class=\"kn\">open</span> <span class=\"n\">Filter</span>\n<span class=\"kn\">open</span> <span class=\"n\">Set</span>\n<span class=\"kn\">open</span> <span class=\"n\">Topology</span>\n\n<span class=\"c\">/-</span><span class=\"cm\">!</span>\n<span class=\"cm\"># Assymptotics of `x^r * log x` near zero</span>\n\n<span class=\"cm\">In Mathlib, the Real natural logarithm is defined as `log |‚¨ù|` (and zero at zero).</span>\n<span class=\"cm\">Real powers are defined such that</span>\n<span class=\"cm\">    ¬∑ For `x &gt; 0`, `x ^ y = exp (y log x)`.</span>\n<span class=\"cm\">    ¬∑ For `x &lt; 0`, `x ^ y = exp (y log x) cos (œÄ y)`</span>\n\n<span class=\"cm\">Together, this implies that for `r &gt; 0` the funciton `x ‚Ü¶ x^r * log x` is continuous over ‚Ñù.</span>\n<span class=\"cm\">For `x &gt; 0`, this is proved in `tendsto_log_mul_rpow_nhds_zero`</span>\n<span class=\"cm\">(see `Mathlib.Analysis.SpecialFunctions.Pow.Asymptotics`)</span>\n<span class=\"cm\">This file generalizes to arbitrary `x : ‚Ñù`.</span>\n\n<span class=\"cm\">The main result is `continuous_log_mul_rpow`.</span>\n<span class=\"cm\">Also provided are two generalizations of `tendsto_log_mul_rpow_nhds_zero`:</span>\n<span class=\"cm\">`tendsto_log_mul_rpow_nhds_zero'` (replaces `ùìù[&gt;]` by `ùìù[‚â•]`)</span>\n<span class=\"cm\">`tendsto_log_mul_rpow_nhds_zero''` (replaces `ndhdsWithin` by `nhds`)</span>\n<span class=\"cm\">Probably only the second, most general should be kept? TODO</span>\n\n<span class=\"cm\">## Tags</span>\n\n<span class=\"cm\">limit, log, logarithm, xlogx, asymptotics, asymptotic, real, continuous, zero</span>\n\n<span class=\"cm\">-/</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">AssymptoticsXPowlogX</span>\n\n<span class=\"kn\">section</span> <span class=\"n\">SetStuff</span>  <span class=\"c1\">------------------------------------------------------------------------</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span> <span class=\"kd\">lemma</span> <span class=\"n\">intersect_Ici_x_singleton</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñù</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">Ici</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñù</span><span class=\"o\">)</span> <span class=\"bp\">‚à©</span> <span class=\"o\">{</span><span class=\"n\">x</span><span class=\"o\">}</span> <span class=\"bp\">=</span> <span class=\"o\">{</span><span class=\"n\">x</span><span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">inters_subset_of_subset</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">Œ±</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"bp\">‚äÜ</span> <span class=\"n\">t</span><span class=\"o\">)</span>\n    <span class=\"o\">:</span> <span class=\"n\">U</span> <span class=\"bp\">‚à©</span> <span class=\"n\">s</span> <span class=\"bp\">‚äÜ</span> <span class=\"n\">t</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">intro</span> <span class=\"n\">x</span> <span class=\"n\">hx</span>\n    <span class=\"n\">simp_all</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">mem_inter_iff</span><span class=\"o\">]</span>\n    <span class=\"n\">apply</span> <span class=\"n\">h</span>\n    <span class=\"n\">simp_all</span> <span class=\"n\">only</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">Ioi_subset_iff_Iio_subset_neg</span> <span class=\"o\">{</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">‚Ñù</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">Ioi</span> <span class=\"mi\">0</span> <span class=\"bp\">‚äÜ</span> <span class=\"n\">b</span> <span class=\"bp\">‚Üî</span> <span class=\"n\">Iio</span> <span class=\"mi\">0</span> <span class=\"bp\">‚äÜ</span> <span class=\"bp\">-</span><span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"k\">have</span> <span class=\"n\">subset_neg</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">‚Ñù</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">‚äÜ</span> <span class=\"n\">B</span> <span class=\"bp\">‚Üî</span> <span class=\"bp\">-</span><span class=\"n\">A</span> <span class=\"bp\">‚äÜ</span> <span class=\"bp\">-</span><span class=\"n\">B</span> <span class=\"o\">:=</span> <span class=\"n\">Iff.symm</span> <span class=\"n\">neg_subset_neg</span>\n    <span class=\"n\">convert</span> <span class=\"n\">subset_neg</span> <span class=\"bp\">?</span><span class=\"n\">_</span> <span class=\"n\">b</span>\n    <span class=\"n\">simp</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">Iio_zero_subset_iff_Ioi_subset_neg</span> <span class=\"o\">{</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">‚Ñù</span><span class=\"o\">}</span>\n<span class=\"o\">:</span> <span class=\"n\">Iio</span> <span class=\"mi\">0</span> <span class=\"bp\">‚äÜ</span> <span class=\"n\">b</span> <span class=\"bp\">‚Üî</span> <span class=\"n\">Ioi</span> <span class=\"mi\">0</span> <span class=\"bp\">‚äÜ</span> <span class=\"bp\">-</span><span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"k\">have</span> <span class=\"n\">subset_neg</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">‚Ñù</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">‚äÜ</span> <span class=\"n\">B</span> <span class=\"bp\">‚Üî</span> <span class=\"bp\">-</span><span class=\"n\">A</span> <span class=\"bp\">‚äÜ</span> <span class=\"bp\">-</span><span class=\"n\">B</span> <span class=\"o\">:=</span> <span class=\"n\">Iff.symm</span> <span class=\"n\">neg_subset_neg</span>\n    <span class=\"n\">convert</span> <span class=\"n\">subset_neg</span> <span class=\"bp\">?</span><span class=\"n\">_</span> <span class=\"n\">b</span>\n    <span class=\"n\">simp</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">SetStuff</span>\n\n<span class=\"kn\">section</span> <span class=\"n\">TendstoHelpers</span> <span class=\"c1\">-------------------------------------------------------------------</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">helper_tendsto_within_ge0</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñù</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">‚Ñù</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">Tendsto</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"bp\">ùìù</span><span class=\"o\">[</span><span class=\"bp\">&gt;</span><span class=\"o\">]</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">ùìù</span> <span class=\"mi\">0</span><span class=\"o\">))</span>\n<span class=\"o\">:</span> <span class=\"n\">Tendsto</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"bp\">ùìù</span><span class=\"o\">[</span><span class=\"n\">Ici</span> <span class=\"mi\">0</span> <span class=\"bp\">‚à©</span> <span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span><span class=\"bp\">·∂ú</span><span class=\"o\">]</span> <span class=\"mi\">0</span> <span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">ùìù</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">Ici</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñù</span><span class=\"o\">)</span> <span class=\"bp\">‚à©</span> <span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span><span class=\"bp\">·∂ú</span> <span class=\"bp\">=</span> <span class=\"n\">Ioi</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n        <span class=\"n\">ext</span> <span class=\"n\">x</span>\n        <span class=\"n\">constructor</span>\n        <span class=\"n\">rintro</span> <span class=\"o\">‚ü®</span><span class=\"n\">hl</span><span class=\"o\">,</span> <span class=\"n\">hr</span><span class=\"o\">‚ü©</span>\n        <span class=\"n\">exact</span> <span class=\"n\">Ne.lt_of_le'</span> <span class=\"n\">hr</span> <span class=\"n\">hl</span>\n        <span class=\"n\">intro</span>\n        <span class=\"n\">simp_all</span>\n        <span class=\"n\">constructor</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">linarith</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">this</span><span class=\"o\">]</span>\n    <span class=\"n\">exact</span> <span class=\"n\">h</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">tendsto_of_union_tendstoWithin'</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñù</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">‚Ñù</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">Filter</span> <span class=\"n\">‚Ñù</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">s1</span> <span class=\"n\">s2</span> <span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">‚Ñù</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñù</span><span class=\"o\">}</span>\n    <span class=\"o\">(</span><span class=\"n\">h_union</span> <span class=\"o\">:</span> <span class=\"n\">s1</span> <span class=\"bp\">‚à™</span> <span class=\"n\">s2</span> <span class=\"bp\">=</span> <span class=\"n\">U</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">hl</span> <span class=\"o\">:</span> <span class=\"n\">Tendsto</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"bp\">ùìù</span><span class=\"o\">[</span><span class=\"n\">s1</span><span class=\"o\">]</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">l</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">hr</span> <span class=\"o\">:</span> <span class=\"n\">Tendsto</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"bp\">ùìù</span><span class=\"o\">[</span><span class=\"n\">s2</span><span class=\"o\">]</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">l</span><span class=\"o\">)</span>\n    <span class=\"o\">:</span> <span class=\"n\">Tendsto</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"bp\">ùìù</span><span class=\"o\">[</span><span class=\"n\">U</span><span class=\"o\">]</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">l</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"k\">let</span> <span class=\"n\">S</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">s2</span> <span class=\"bp\">\\</span> <span class=\"n\">s1</span><span class=\"o\">)</span>\n    <span class=\"k\">have</span> <span class=\"n\">Ssubs2</span> <span class=\"o\">:</span> <span class=\"n\">U</span> <span class=\"bp\">‚à©</span> <span class=\"n\">S</span> <span class=\"bp\">‚äÜ</span> <span class=\"n\">s2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n        <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">diff_subset</span> <span class=\"n\">s2</span> <span class=\"n\">s1</span>\n        <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">S</span><span class=\"o\">]</span>\n        <span class=\"n\">exact</span> <span class=\"n\">inters_subset_of_subset</span> <span class=\"n\">this</span>\n    <span class=\"k\">have</span> <span class=\"n\">Scomplsubs1</span> <span class=\"o\">:</span> <span class=\"n\">U</span> <span class=\"bp\">‚à©</span> <span class=\"n\">S</span><span class=\"bp\">·∂ú</span> <span class=\"bp\">‚äÜ</span> <span class=\"n\">s1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n        <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"bp\">*</span>\n        <span class=\"n\">intro</span> <span class=\"n\">x</span> <span class=\"n\">hx</span>\n        <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">‚Üê</span><span class=\"n\">h_union</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"bp\">*</span>\n        <span class=\"n\">simp_all</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">compl_sdiff</span><span class=\"o\">,</span> <span class=\"n\">mem_inter_iff</span><span class=\"o\">,</span> <span class=\"n\">mem_union</span><span class=\"o\">]</span>\n        <span class=\"k\">have</span> <span class=\"n\">hx1</span> <span class=\"o\">:=</span> <span class=\"n\">hx.1</span>\n        <span class=\"k\">have</span> <span class=\"n\">hx2</span> <span class=\"o\">:=</span> <span class=\"n\">hx.2</span>\n        <span class=\"n\">cases</span> <span class=\"n\">hx1</span>\n        <span class=\"bp\">¬∑</span> <span class=\"n\">simp_all</span> <span class=\"n\">only</span>\n        <span class=\"bp\">¬∑</span> <span class=\"n\">apply</span> <span class=\"n\">hx2</span>\n          <span class=\"n\">assumption</span>\n    <span class=\"k\">have</span> <span class=\"n\">hl</span> <span class=\"o\">:</span> <span class=\"n\">Tendsto</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"bp\">ùìù</span><span class=\"o\">[</span><span class=\"n\">U</span> <span class=\"bp\">‚à©</span> <span class=\"n\">S</span><span class=\"bp\">·∂ú</span><span class=\"o\">]</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">l</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n        <span class=\"n\">apply</span> <span class=\"n\">tendsto_nhdsWithin_mono_left</span> <span class=\"n\">Scomplsubs1</span> <span class=\"n\">hl</span>\n    <span class=\"k\">have</span> <span class=\"n\">hr</span> <span class=\"o\">:</span> <span class=\"n\">Tendsto</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"bp\">ùìù</span><span class=\"o\">[</span><span class=\"n\">U</span> <span class=\"bp\">‚à©</span> <span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">l</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n        <span class=\"n\">apply</span> <span class=\"n\">tendsto_nhdsWithin_mono_left</span> <span class=\"n\">Ssubs2</span> <span class=\"n\">hr</span>\n    <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">Tendsto.piecewise_nhdsWithin</span> <span class=\"n\">hr</span> <span class=\"n\">hl</span>\n    <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">this</span>\n    <span class=\"n\">exact</span> <span class=\"n\">this</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">tendsto_of_union_tendstoWithin</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñù</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">‚Ñù</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">Filter</span> <span class=\"n\">‚Ñù</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">s1</span> <span class=\"n\">s2</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">‚Ñù</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñù</span><span class=\"o\">}</span>\n    <span class=\"o\">(</span><span class=\"n\">h_union</span> <span class=\"o\">:</span> <span class=\"n\">s1</span> <span class=\"bp\">‚à™</span> <span class=\"n\">s2</span> <span class=\"bp\">=</span> <span class=\"n\">univ</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">hl</span> <span class=\"o\">:</span> <span class=\"n\">Tendsto</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"bp\">ùìù</span><span class=\"o\">[</span><span class=\"n\">s1</span><span class=\"o\">]</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">l</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">hr</span> <span class=\"o\">:</span> <span class=\"n\">Tendsto</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"bp\">ùìù</span><span class=\"o\">[</span><span class=\"n\">s2</span><span class=\"o\">]</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">l</span><span class=\"o\">)</span>\n    <span class=\"o\">:</span> <span class=\"n\">Tendsto</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"bp\">ùìù</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">l</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">convert</span> <span class=\"n\">tendsto_of_union_tendstoWithin'</span> <span class=\"n\">h_union</span> <span class=\"n\">hl</span> <span class=\"n\">hr</span>\n    <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">nhdsWithin_univ</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">union_Ici_Iic_univ</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñù</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">Ici</span> <span class=\"n\">x</span> <span class=\"bp\">‚à™</span> <span class=\"n\">Iic</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">univ</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">ext</span> <span class=\"n\">a</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">mem_union</span><span class=\"o\">,</span> <span class=\"n\">mem_Ici</span><span class=\"o\">,</span> <span class=\"n\">mem_Iic</span><span class=\"o\">,</span> <span class=\"n\">mem_univ</span><span class=\"o\">,</span> <span class=\"n\">iff_true</span><span class=\"o\">]</span>\n    <span class=\"n\">exact</span> <span class=\"n\">le_total</span> <span class=\"n\">x</span> <span class=\"n\">a</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">tendsto_ge_of_tendsto_gt_funvalue</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñù</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">‚Ñù</span><span class=\"o\">}</span>\n    <span class=\"o\">(</span><span class=\"n\">tenF</span> <span class=\"o\">:</span> <span class=\"n\">Tendsto</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"bp\">ùìù</span><span class=\"o\">[</span><span class=\"bp\">&gt;</span><span class=\"o\">]</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">ùìù</span> <span class=\"mi\">0</span><span class=\"o\">))</span>\n    <span class=\"o\">(</span><span class=\"n\">tenG</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n<span class=\"o\">:</span> <span class=\"n\">Tendsto</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"bp\">ùìù</span><span class=\"o\">[</span><span class=\"bp\">‚â•</span><span class=\"o\">]</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">ùìù</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"k\">have</span> <span class=\"n\">h1</span> <span class=\"o\">:=</span> <span class=\"n\">helper_tendsto_within_ge0</span> <span class=\"n\">f</span> <span class=\"n\">tenF</span>\n    <span class=\"k\">have</span> <span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">Tendsto</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"bp\">ùìù</span><span class=\"o\">[</span><span class=\"n\">Ici</span> <span class=\"mi\">0</span> <span class=\"bp\">‚à©</span> <span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}]</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">ùìù</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n        <span class=\"n\">simp</span>\n        <span class=\"n\">exact</span> <span class=\"n\">EventuallyEq.tendsto</span> <span class=\"n\">tenG</span>\n    <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">Tendsto.piecewise_nhdsWithin</span> <span class=\"n\">h2</span> <span class=\"n\">h1</span>\n    <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">this</span>\n    <span class=\"n\">exact</span> <span class=\"n\">this</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">tendsto_zero_of_abs_tendsto_zero</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñù</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">‚Ñù</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">Filter</span> <span class=\"n\">‚Ñù</span><span class=\"o\">}</span>\n    <span class=\"o\">(</span><span class=\"n\">tenF</span> <span class=\"o\">:</span> <span class=\"n\">Tendsto</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">‚Ü¶</span> <span class=\"bp\">|</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"bp\">|</span><span class=\"o\">)</span> <span class=\"n\">l</span> <span class=\"o\">(</span><span class=\"bp\">ùìù</span> <span class=\"mi\">0</span><span class=\"o\">))</span>\n    <span class=\"o\">:</span> <span class=\"n\">Tendsto</span> <span class=\"n\">f</span> <span class=\"n\">l</span> <span class=\"o\">(</span><span class=\"bp\">ùìù</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">tendsto_zero_iff_abs_tendsto_zero</span> <span class=\"n\">f</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mpr</span> <span class=\"n\">tenF</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">zero_le_abs_fun</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñù</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">‚Ñù</span><span class=\"o\">)</span>  <span class=\"o\">:</span>\n   <span class=\"mi\">0</span> <span class=\"bp\">‚â§</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">|</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"bp\">|</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n   <span class=\"n\">intro</span> <span class=\"n\">x</span>\n   <span class=\"n\">simp</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">tendsto_zero_of_abs_le_tendsto_zero</span> <span class=\"o\">{</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñù</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">‚Ñù</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Filter</span> <span class=\"n\">‚Ñù</span><span class=\"o\">}</span>\n    <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñù</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">‚Ñù</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">gLeF</span> <span class=\"o\">:</span> <span class=\"bp\">|</span><span class=\"n\">g</span><span class=\"bp\">|</span> <span class=\"bp\">‚â§</span> <span class=\"n\">f</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">tenF</span> <span class=\"o\">:</span> <span class=\"n\">Tendsto</span> <span class=\"n\">f</span> <span class=\"n\">b</span> <span class=\"o\">(</span><span class=\"bp\">ùìù</span> <span class=\"mi\">0</span><span class=\"o\">))</span>\n    <span class=\"o\">:</span> <span class=\"n\">Tendsto</span> <span class=\"n\">g</span> <span class=\"n\">b</span> <span class=\"o\">(</span><span class=\"bp\">ùìù</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">apply</span> <span class=\"n\">tendsto_zero_of_abs_tendsto_zero</span>\n    <span class=\"k\">have</span> <span class=\"n\">hg</span> <span class=\"o\">:</span> <span class=\"n\">Tendsto</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñù</span><span class=\"o\">)</span> <span class=\"bp\">‚Ü¶</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñù</span><span class=\"o\">))</span> <span class=\"n\">b</span> <span class=\"o\">(</span><span class=\"bp\">ùìù</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">tendsto_const_nhds</span>\n    <span class=\"n\">refine</span> <span class=\"n\">tendsto_of_tendsto_of_tendsto_of_le_of_le</span> <span class=\"n\">hg</span> <span class=\"n\">tenF</span> <span class=\"bp\">?</span><span class=\"n\">_</span> <span class=\"n\">gLeF</span>\n    <span class=\"n\">refine</span> <span class=\"n\">le_of_sub_nonneg</span> <span class=\"bp\">?</span><span class=\"n\">tenF.hgf.a</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">|</span><span class=\"n\">g</span> <span class=\"n\">x</span><span class=\"bp\">|</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">|</span><span class=\"n\">g</span> <span class=\"n\">x</span><span class=\"bp\">|</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n        <span class=\"n\">ext</span>\n        <span class=\"n\">simp</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">this</span><span class=\"o\">]</span>\n    <span class=\"n\">exact</span> <span class=\"n\">zero_le_abs_fun</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">g</span> <span class=\"n\">x</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">preim_neg_nhdsWithin_zero</span> <span class=\"o\">{</span><span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">‚Ñù</span><span class=\"o\">}</span>\n    <span class=\"o\">:</span> <span class=\"n\">Neg.neg</span> <span class=\"bp\">‚Åª¬π'</span> <span class=\"n\">U</span> <span class=\"bp\">‚àà</span> <span class=\"bp\">ùìù</span><span class=\"o\">[</span><span class=\"bp\">&gt;</span><span class=\"o\">]</span> <span class=\"mi\">0</span> <span class=\"bp\">‚Üî</span> <span class=\"n\">U</span> <span class=\"bp\">‚àà</span> <span class=\"bp\">ùìù</span><span class=\"o\">[</span><span class=\"bp\">&lt;</span><span class=\"o\">]</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n        <span class=\"n\">simp_all</span>\n        <span class=\"n\">constructor</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">intro</span> <span class=\"n\">h</span>\n        <span class=\"bp\">¬∑</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">nhdsWithin</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"bp\">*</span>\n          <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">Inf.inf</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"bp\">*</span>\n          <span class=\"n\">rcases</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"o\">‚ü®</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"o\">‚ü®</span><span class=\"n\">ha</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"o\">‚ü®</span><span class=\"n\">hb1</span><span class=\"o\">,</span> <span class=\"n\">hb2</span><span class=\"o\">‚ü©‚ü©‚ü©</span>\n          <span class=\"n\">use</span> <span class=\"bp\">-</span><span class=\"n\">a</span>\n          <span class=\"n\">constructor</span>\n          <span class=\"bp\">¬∑</span> <span class=\"n\">exact</span> <span class=\"n\">neg_mem_nhds_zero</span> <span class=\"n\">‚Ñù</span> <span class=\"n\">ha</span>\n          <span class=\"bp\">¬∑</span> <span class=\"n\">use</span> <span class=\"bp\">-</span><span class=\"n\">b</span>\n            <span class=\"n\">constructor</span>\n            <span class=\"bp\">¬∑</span> <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">Ioi_subset_iff_Iio_subset_neg</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mp</span> <span class=\"n\">hb1</span>\n            <span class=\"bp\">¬∑</span> <span class=\"n\">exact</span> <span class=\"n\">neg_eq_iff_eq_neg.mp</span> <span class=\"n\">hb2</span>\n        <span class=\"bp\">¬∑</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">nhdsWithin</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"bp\">*</span>\n          <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">Inf.inf</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"bp\">*</span>\n          <span class=\"n\">rcases</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"o\">‚ü®</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"o\">‚ü®</span><span class=\"n\">ha</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"o\">‚ü®</span><span class=\"n\">hb1</span><span class=\"o\">,</span> <span class=\"n\">hb2</span><span class=\"o\">‚ü©‚ü©‚ü©</span>\n          <span class=\"n\">use</span> <span class=\"bp\">-</span><span class=\"n\">a</span>\n          <span class=\"n\">constructor</span>\n          <span class=\"bp\">¬∑</span> <span class=\"n\">exact</span> <span class=\"n\">neg_mem_nhds_zero</span> <span class=\"n\">‚Ñù</span> <span class=\"n\">ha</span>\n          <span class=\"bp\">¬∑</span> <span class=\"n\">use</span> <span class=\"bp\">-</span><span class=\"n\">b</span>\n            <span class=\"n\">constructor</span>\n            <span class=\"bp\">¬∑</span> <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">Iio_zero_subset_iff_Ioi_subset_neg</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mp</span> <span class=\"n\">hb1</span>\n            <span class=\"bp\">¬∑</span> <span class=\"n\">simp_all</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">inter_neg</span><span class=\"o\">]</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">tendsto_nhdsWithin_of_tendsto_nhdsWithin_neg</span>\n   <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñù</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">‚Ñù</span><span class=\"o\">}</span>\n   <span class=\"o\">{</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">Filter</span> <span class=\"n\">‚Ñù</span><span class=\"o\">}</span>\n   <span class=\"o\">:</span> <span class=\"n\">Tendsto</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"bp\">ùìù</span><span class=\"o\">[</span><span class=\"bp\">&lt;</span><span class=\"o\">]</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"n\">l</span>\n   <span class=\"bp\">‚Üî</span> <span class=\"n\">Tendsto</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">‚Ü¶</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"bp\">ùìù</span><span class=\"o\">[</span><span class=\"bp\">&gt;</span><span class=\"o\">]</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"n\">l</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñù</span><span class=\"o\">)</span> <span class=\"bp\">‚Ü¶</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"bp\">‚àò</span> <span class=\"n\">Neg.neg</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">ext</span><span class=\"bp\">;</span> <span class=\"n\">simp</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">this</span><span class=\"o\">]</span>\n    <span class=\"n\">constructor</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">intro</span> <span class=\"n\">h</span>\n    <span class=\"bp\">¬∑</span> <span class=\"n\">apply</span> <span class=\"n\">Tendsto.comp</span> <span class=\"n\">h</span>\n      <span class=\"n\">convert</span> <span class=\"n\">tendsto_neg_nhdsWithin_Ioi</span>\n      <span class=\"n\">simp</span><span class=\"bp\">;</span> <span class=\"n\">simp</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">TopologicalRing.toContinuousNeg</span>\n    <span class=\"bp\">¬∑</span> <span class=\"n\">intro</span> <span class=\"n\">U</span> <span class=\"n\">hU</span>\n      <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">Tendsto</span><span class=\"o\">,</span> <span class=\"n\">LE.le</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n      <span class=\"n\">simp_all</span>\n      <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">h</span> <span class=\"n\">hU</span>\n      <span class=\"k\">have</span> <span class=\"n\">preim_comp</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"bp\">‚àò</span> <span class=\"n\">Neg.neg</span> <span class=\"bp\">‚Åª¬π'</span> <span class=\"n\">U</span> <span class=\"bp\">=</span> <span class=\"n\">Neg.neg</span> <span class=\"bp\">‚Åª¬π'</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">‚Åª¬π'</span> <span class=\"n\">U</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rfl</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">preim_comp</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">this</span>\n      <span class=\"n\">exact</span> <span class=\"n\">preim_neg_nhdsWithin_zero.mp</span> <span class=\"n\">this</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">zero_mem_iff_zero_mem_neg</span> <span class=\"o\">(</span><span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">‚Ñù</span><span class=\"o\">)</span>\n    <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">‚àà</span> <span class=\"n\">U</span> <span class=\"bp\">‚Üî</span> <span class=\"mi\">0</span> <span class=\"bp\">‚àà</span> <span class=\"bp\">-</span><span class=\"n\">U</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">simp_all</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">Set.mem_neg</span><span class=\"o\">,</span> <span class=\"n\">neg_zero</span><span class=\"o\">]</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">TendstoHelpers</span>\n\n<span class=\"kn\">section</span> <span class=\"n\">XLogX</span> <span class=\"c1\">--------------------------------------------------------------------------</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Real</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">tendsto_rpow_neg</span> <span class=\"o\">{</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñù</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hr</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">r</span><span class=\"o\">)</span>\n <span class=\"o\">:</span> <span class=\"n\">Tendsto</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">log</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">ùìù</span><span class=\"o\">[</span><span class=\"bp\">&gt;</span><span class=\"o\">]</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">ùìù</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">apply</span> <span class=\"n\">tendsto_zero_of_abs_tendsto_zero</span>\n    <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">abs_mul</span><span class=\"o\">]</span>\n    <span class=\"n\">apply</span> <span class=\"n\">tendsto_zero_of_abs_le_tendsto_zero</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">‚Ü¶</span> <span class=\"bp\">|</span><span class=\"n\">log</span> <span class=\"n\">x</span><span class=\"bp\">|</span> <span class=\"bp\">*</span> <span class=\"bp\">|</span><span class=\"n\">x</span><span class=\"bp\">|</span> <span class=\"bp\">^</span> <span class=\"n\">r</span><span class=\"o\">)</span>\n    <span class=\"n\">intro</span> <span class=\"n\">x</span>\n    <span class=\"n\">simp</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">abs</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">|</span><span class=\"n\">log</span> <span class=\"n\">x</span><span class=\"bp\">|</span> <span class=\"bp\">*</span> <span class=\"bp\">|</span><span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"n\">r</span><span class=\"bp\">|</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"bp\">|</span><span class=\"n\">log</span> <span class=\"n\">x</span><span class=\"bp\">|</span> <span class=\"bp\">*</span> <span class=\"bp\">|</span><span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"n\">r</span><span class=\"bp\">|</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n        <span class=\"k\">have</span> <span class=\"n\">abs_fun_applied</span> <span class=\"o\">(</span><span class=\"n\">f</span><span class=\"o\">:</span> <span class=\"n\">‚Ñù</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">‚Ñù</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñù</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">abs</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"bp\">|</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"bp\">|</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n        <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">abs_fun_applied</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">|</span><span class=\"n\">log</span> <span class=\"n\">x</span><span class=\"bp\">|</span> <span class=\"bp\">*</span> <span class=\"bp\">|</span><span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"n\">r</span><span class=\"bp\">|</span><span class=\"o\">)</span> <span class=\"n\">x</span><span class=\"o\">]</span>\n        <span class=\"n\">simp</span>\n        <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">‚Üê</span><span class=\"n\">abs_mul</span><span class=\"o\">]</span>\n        <span class=\"n\">exact</span> <span class=\"n\">abs_nonneg</span> <span class=\"o\">(</span><span class=\"n\">log</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"n\">r</span><span class=\"o\">)</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">this</span><span class=\"o\">]</span>\n    <span class=\"bp\">¬∑</span> <span class=\"n\">gcongr</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"k\">show</span> <span class=\"bp\">|</span><span class=\"n\">x</span><span class=\"bp\">|</span> <span class=\"bp\">=</span> <span class=\"bp\">|-</span><span class=\"n\">x</span><span class=\"bp\">|</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">]</span>\n      <span class=\"n\">apply</span> <span class=\"n\">Real.abs_rpow_le_abs_rpow</span>\n    <span class=\"bp\">¬∑</span> <span class=\"n\">convert</span> <span class=\"o\">(</span><span class=\"n\">tendsto_log_mul_rpow_nhds_zero</span> <span class=\"n\">hr</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">norm.congr'</span> <span class=\"bp\">?</span><span class=\"n\">_</span>\n      <span class=\"bp\">¬∑</span> <span class=\"n\">simp</span>\n      <span class=\"bp\">¬∑</span> <span class=\"n\">filter_upwards</span> <span class=\"o\">[</span><span class=\"n\">self_mem_nhdsWithin</span><span class=\"o\">]</span> <span class=\"k\">with</span> <span class=\"n\">x</span> <span class=\"n\">hx</span>\n        <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">norm_mul</span><span class=\"o\">,</span> <span class=\"n\">norm_rpow_of_nonneg</span> <span class=\"o\">(</span><span class=\"n\">mem_Ioi.mp</span> <span class=\"n\">hx</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">le</span><span class=\"o\">,</span> <span class=\"n\">norm_eq_abs</span><span class=\"o\">]</span>\n\n<span class=\"sd\">/-- This is a direct generalization of `tendsto_log_mul_rpow_nhds_zero`</span>\n<span class=\"sd\">(replaces `&gt;` by `‚â•`) -/</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">tendsto_log_mul_rpow_nhds_zero'</span> <span class=\"o\">{</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñù</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hr</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">Tendsto</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">log</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">ùìù</span><span class=\"o\">[</span><span class=\"bp\">‚â•</span><span class=\"o\">]</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">ùìù</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n        <span class=\"n\">apply</span> <span class=\"n\">tendsto_ge_of_tendsto_gt_funvalue</span>\n        <span class=\"n\">apply</span> <span class=\"n\">tendsto_log_mul_rpow_nhds_zero</span>\n        <span class=\"n\">exact</span> <span class=\"n\">hr</span>\n        <span class=\"n\">norm_num</span>\n\n<span class=\"sd\">/-- This is a generalization of `tendsto_log_mul_rpow_nhds_zero`</span>\n<span class=\"sd\">(replaces `ndhdsWithin` by `nhds`) -/</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">tendsto_log_mul_rpow_nhds_zero''</span> <span class=\"o\">{</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñù</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hr</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">Tendsto</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">log</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">ùìù</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">ùìù</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n        <span class=\"k\">have</span> <span class=\"n\">union_tozero_fromzero</span> <span class=\"o\">:</span> <span class=\"n\">Iio</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñù</span><span class=\"o\">)</span> <span class=\"bp\">‚à™</span> <span class=\"n\">Ici</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"n\">univ</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span>\n        <span class=\"n\">refine</span> <span class=\"n\">tendsto_of_union_tendstoWithin</span> <span class=\"n\">union_tozero_fromzero</span> <span class=\"bp\">?</span><span class=\"n\">_</span> <span class=\"bp\">?</span><span class=\"n\">_</span>\n        <span class=\"bp\">¬∑</span> <span class=\"n\">apply</span> <span class=\"n\">tendsto_nhdsWithin_of_tendsto_nhdsWithin_neg.mpr</span>\n          <span class=\"n\">convert</span> <span class=\"n\">tendsto_rpow_neg</span> <span class=\"n\">hr</span> <span class=\"n\">using</span> <span class=\"mi\">1</span>\n          <span class=\"n\">simp</span>\n        <span class=\"n\">exact</span> <span class=\"n\">tendsto_log_mul_rpow_nhds_zero'</span> <span class=\"n\">hr</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">continuousAt_zero_log_mul_rpow</span> <span class=\"o\">{</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñù</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hr</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">r</span><span class=\"o\">)</span>\n<span class=\"o\">:</span> <span class=\"n\">ContinuousAt</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñù</span><span class=\"o\">)</span> <span class=\"bp\">‚Ü¶</span> <span class=\"n\">log</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">apply</span> <span class=\"n\">continuousAt_of_tendsto_nhds</span> <span class=\"o\">(</span><span class=\"n\">y</span><span class=\"o\">:=</span><span class=\"mi\">0</span><span class=\"o\">)</span>\n    <span class=\"n\">exact</span> <span class=\"n\">tendsto_log_mul_rpow_nhds_zero''</span> <span class=\"n\">hr</span>\n\n<span class=\"sd\">/--</span>\n<span class=\"sd\">In Mathlib, the Real natural logarithm is defined as `log |‚¨ù|` (and zero at zero).</span>\n<span class=\"sd\">Real powers are defined such that</span>\n<span class=\"sd\">    ¬∑ For `x &gt; 0`, `x ^ y = exp (y log x)`.</span>\n<span class=\"sd\">    ¬∑ For `x &lt; 0`, `x ^ y = exp (y log x) cos (œÄ y)`</span>\n\n<span class=\"sd\">Together, this implies that for `r &gt; 0` the funciton `x ‚Ü¶ x^r * log x` is continuous over ‚Ñù.</span>\n<span class=\"sd\">-/</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">continuous_log_mul_rpow</span> <span class=\"o\">{</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñù</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hr</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">r</span><span class=\"o\">)</span>\n<span class=\"o\">:</span> <span class=\"n\">Continuous</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñù</span><span class=\"o\">)</span> <span class=\"bp\">‚Ü¶</span> <span class=\"n\">log</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">apply</span> <span class=\"n\">continuous_iff_continuousAt.mpr</span>\n    <span class=\"n\">intro</span> <span class=\"n\">x</span>\n    <span class=\"n\">by_cases</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n    <span class=\"bp\">¬∑</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]</span>\n      <span class=\"n\">exact</span> <span class=\"n\">continuousAt_zero_log_mul_rpow</span> <span class=\"n\">hr</span>\n    <span class=\"bp\">¬∑</span> <span class=\"n\">apply</span> <span class=\"n\">ContinuousAt.mul</span>\n      <span class=\"n\">apply</span> <span class=\"n\">ContinuousAt.log</span>\n      <span class=\"n\">apply</span> <span class=\"n\">continuousAt_id</span>\n      <span class=\"n\">apply</span> <span class=\"n\">h</span>\n      <span class=\"n\">refine</span> <span class=\"n\">continuousAt_rpow_const</span> <span class=\"n\">x</span> <span class=\"n\">r</span> <span class=\"bp\">?</span><span class=\"n\">_</span>\n      <span class=\"n\">left</span><span class=\"bp\">;</span> <span class=\"n\">assumption</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">XLogX</span>\n</code></pre></div>",
        "id": 405454081,
        "sender_full_name": "Adomas Baliuka",
        "timestamp": 1701473437
    },
    {
        "content": "<p>Good practice for me! I got it down to 43 lines, not quite the 10x reduction you were looking for but here you go.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Analysis.SpecialFunctions.Pow.Continuity</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Filter</span> <span class=\"n\">Topology</span> <span class=\"n\">Real</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">neg_nhds_right_eq_nhds_left</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">ùìù</span><span class=\"o\">[</span><span class=\"bp\">&gt;</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñù</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">Neg.neg</span> <span class=\"bp\">=</span> <span class=\"bp\">ùìù</span><span class=\"o\">[</span><span class=\"bp\">&lt;</span><span class=\"o\">]</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">nhdsWithin</span><span class=\"o\">,</span> <span class=\"n\">Filter.map_inf</span> <span class=\"n\">neg_injective</span><span class=\"o\">,</span> <span class=\"n\">map_principal</span><span class=\"o\">,</span> <span class=\"n\">Set.image_neg_Ioi</span><span class=\"o\">,</span> <span class=\"n\">neg_zero</span><span class=\"o\">]</span>\n  <span class=\"n\">congr</span> <span class=\"mi\">1</span>\n  <span class=\"n\">exact</span> <span class=\"n\">nhds_zero_symm'</span> <span class=\"n\">‚Ñù</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">neg_nhds_left_eq_nhds_right</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">ùìù</span><span class=\"o\">[</span><span class=\"bp\">&lt;</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñù</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">Neg.neg</span> <span class=\"bp\">=</span> <span class=\"bp\">ùìù</span><span class=\"o\">[</span><span class=\"bp\">&gt;</span><span class=\"o\">]</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">nhdsWithin</span><span class=\"o\">,</span> <span class=\"n\">Filter.map_inf</span> <span class=\"n\">neg_injective</span><span class=\"o\">,</span> <span class=\"n\">map_principal</span><span class=\"o\">,</span> <span class=\"n\">Set.image_neg_Iio</span><span class=\"o\">,</span> <span class=\"n\">neg_zero</span><span class=\"o\">]</span>\n  <span class=\"n\">congr</span> <span class=\"mi\">1</span>\n  <span class=\"n\">exact</span> <span class=\"n\">nhds_zero_symm'</span> <span class=\"n\">‚Ñù</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">tendsto_nhdsWithin_iff_neg</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñù</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">‚Ñù</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">ùìù</span><span class=\"o\">[</span><span class=\"bp\">&lt;</span><span class=\"o\">]</span> <span class=\"mi\">0</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">Tendsto</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"bp\">ùìù</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">‚Üî</span> <span class=\"o\">(</span><span class=\"bp\">ùìù</span><span class=\"o\">[</span><span class=\"bp\">&gt;</span><span class=\"o\">]</span> <span class=\"mi\">0</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">Tendsto</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"bp\">ùìù</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">constructor</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">intro</span> <span class=\"n\">h</span>\n  <span class=\"bp\">.</span> <span class=\"n\">exact</span> <span class=\"n\">h.comp</span> <span class=\"o\">(</span><span class=\"n\">le_of_eq</span> <span class=\"n\">neg_nhds_right_eq_nhds_left</span><span class=\"o\">)</span>\n  <span class=\"bp\">.</span> <span class=\"k\">suffices</span> <span class=\"n\">Tendsto</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">‚àò</span> <span class=\"n\">Neg.neg</span> <span class=\"bp\">‚àò</span> <span class=\"n\">Neg.neg</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">ùìù</span><span class=\"o\">[</span><span class=\"bp\">&lt;</span><span class=\"o\">]</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">ùìù</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"kd\">by</span>\n      <span class=\"n\">simpa</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">neg_involutive</span><span class=\"o\">,</span> <span class=\"n\">Function.Involutive.comp_self</span><span class=\"o\">,</span> <span class=\"n\">Function.comp.right_id</span><span class=\"o\">]</span> <span class=\"n\">using</span> <span class=\"n\">this</span>\n    <span class=\"n\">exact</span> <span class=\"n\">h.comp</span> <span class=\"o\">(</span><span class=\"n\">le_of_eq</span> <span class=\"n\">neg_nhds_left_eq_nhds_right</span><span class=\"o\">)</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">continuous_log_mul_rpow</span> <span class=\"o\">{</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñù</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hr</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Continuous</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñù</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">log</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">continuous_iff_continuousAt</span><span class=\"o\">]</span>\n  <span class=\"n\">intro</span> <span class=\"n\">x</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n  <span class=\"bp\">.</span> <span class=\"n\">subst</span> <span class=\"n\">h</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">continuousAt_iff_continuous_left'_right'</span><span class=\"o\">,</span> <span class=\"n\">ContinuousWithinAt</span><span class=\"o\">,</span> <span class=\"n\">ContinuousWithinAt</span><span class=\"o\">]</span>\n    <span class=\"n\">norm_num</span>\n    <span class=\"n\">constructor</span>\n    <span class=\"bp\">.</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">tendsto_nhdsWithin_iff_neg</span><span class=\"o\">,</span> <span class=\"n\">log_neg_eq_log</span><span class=\"o\">]</span>\n      <span class=\"k\">have</span> <span class=\"n\">bound</span> <span class=\"o\">:</span> <span class=\"bp\">‚àÄ</span> <span class=\"n\">x</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"bp\">‚Äñ</span><span class=\"n\">log</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"n\">r</span><span class=\"bp\">‚Äñ</span> <span class=\"bp\">‚â§</span> <span class=\"bp\">|</span><span class=\"n\">log</span> <span class=\"n\">x</span><span class=\"bp\">|</span> <span class=\"bp\">*</span> <span class=\"bp\">|</span><span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"n\">r</span><span class=\"bp\">|</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n        <span class=\"n\">intro</span> <span class=\"n\">x</span> <span class=\"n\">xpos</span>\n        <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">norm_mul</span><span class=\"o\">,</span> <span class=\"n\">norm_eq_abs</span><span class=\"o\">,</span> <span class=\"n\">gt_iff_lt</span><span class=\"o\">,</span> <span class=\"n\">abs_pos</span><span class=\"o\">,</span> <span class=\"n\">ne_eq</span><span class=\"o\">,</span> <span class=\"n\">log_eq_zero</span><span class=\"o\">,</span> <span class=\"n\">abs_of_pos</span> <span class=\"o\">(</span><span class=\"n\">rpow_pos_of_pos</span> <span class=\"n\">xpos</span> <span class=\"n\">r</span><span class=\"o\">)]</span>\n        <span class=\"n\">gcongr</span>\n        <span class=\"n\">nth_rw</span> <span class=\"mi\">2</span> <span class=\"o\">[</span><span class=\"bp\">‚Üê</span> <span class=\"n\">abs_of_pos</span> <span class=\"n\">xpos</span><span class=\"o\">]</span>\n        <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">‚Üê</span> <span class=\"n\">abs_neg</span> <span class=\"n\">x</span><span class=\"o\">]</span>\n        <span class=\"n\">exact</span> <span class=\"n\">abs_rpow_le_abs_rpow</span> <span class=\"n\">_</span> <span class=\"n\">_</span>\n      <span class=\"n\">apply</span> <span class=\"n\">squeeze_zero_norm'</span> <span class=\"o\">(</span><span class=\"n\">eventually_nhdsWithin_of_forall</span> <span class=\"n\">bound</span><span class=\"o\">)</span>\n      <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"bp\">‚Üê</span> <span class=\"n\">norm_eq_abs</span><span class=\"o\">,</span> <span class=\"bp\">‚Üê</span> <span class=\"n\">norm_mul</span><span class=\"o\">,</span> <span class=\"bp\">‚Üê</span> <span class=\"n\">tendsto_zero_iff_norm_tendsto_zero</span><span class=\"o\">]</span>\n      <span class=\"n\">exact</span> <span class=\"n\">tendsto_log_mul_rpow_nhds_zero</span> <span class=\"n\">hr</span>\n    <span class=\"bp\">.</span> <span class=\"n\">exact</span> <span class=\"n\">tendsto_log_mul_rpow_nhds_zero</span> <span class=\"n\">hr</span>\n  <span class=\"bp\">.</span> <span class=\"n\">push_neg</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n    <span class=\"n\">exact</span> <span class=\"n\">Real.continuousAt_log</span> <span class=\"n\">h</span> <span class=\"bp\">|&gt;.</span><span class=\"n\">mul</span> <span class=\"o\">(</span><span class=\"n\">Real.continuousAt_rpow_const</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">Or.inl</span> <span class=\"n\">h</span><span class=\"o\">))</span>\n</code></pre></div>",
        "id": 405473523,
        "sender_full_name": "Yongyi Chen",
        "timestamp": 1701483178
    },
    {
        "content": "<p>I played with this a bit, but not too much:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Analysis.SpecialFunctions.Pow.Asymptotics</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Filter</span> <span class=\"n\">Topology</span> <span class=\"n\">Real</span> <span class=\"n\">Asymptotics</span> <span class=\"n\">Bornology</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">isLittleO_log_rpow_cobounded</span> <span class=\"o\">{</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñù</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hr</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">log</span> <span class=\"bp\">=</span><span class=\"n\">o</span><span class=\"o\">[</span><span class=\"n\">cobounded</span> <span class=\"n\">‚Ñù</span><span class=\"o\">]</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">‚Äñ</span><span class=\"n\">x</span><span class=\"bp\">‚Äñ</span> <span class=\"bp\">^</span> <span class=\"n\">r</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Real.cobounded_eq</span><span class=\"o\">,</span> <span class=\"n\">isLittleO_sup</span><span class=\"o\">]</span>\n  <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"k\">calc</span>\n    <span class=\"n\">log</span> <span class=\"bp\">=</span><span class=\"n\">o</span><span class=\"o\">[</span><span class=\"n\">atTop</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"bp\">¬∑</span> <span class=\"bp\">^</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">isLittleO_log_rpow_atTop</span> <span class=\"n\">hr</span>\n    <span class=\"n\">_</span>   <span class=\"bp\">=·∂†</span><span class=\"o\">[</span><span class=\"n\">atTop</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"bp\">‚Äñ¬∑‚Äñ</span> <span class=\"bp\">^</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n      <span class=\"n\">filter_upwards</span> <span class=\"o\">[</span><span class=\"n\">Ici_mem_atTop</span> <span class=\"mi\">0</span><span class=\"o\">]</span> <span class=\"k\">with</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">‚â§</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">using</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">norm_of_nonneg</span> <span class=\"n\">hx</span><span class=\"o\">]</span>\n  <span class=\"n\">refine</span> <span class=\"o\">‚ü®</span><span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">this</span><span class=\"o\">‚ü©</span>\n  <span class=\"n\">convert</span> <span class=\"n\">this.comp_tendsto</span> <span class=\"n\">tendsto_neg_atBot_atTop</span> <span class=\"n\">using</span> <span class=\"mi\">1</span>\n  <span class=\"n\">all_goals</span> <span class=\"n\">apply</span> <span class=\"n\">funext</span><span class=\"bp\">;</span> <span class=\"n\">simp</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">norm_rpow_le</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñù</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"bp\">‚Äñ</span><span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"n\">y</span><span class=\"bp\">‚Äñ</span> <span class=\"bp\">‚â§</span> <span class=\"bp\">‚Äñ</span><span class=\"n\">x</span><span class=\"bp\">‚Äñ</span> <span class=\"bp\">^</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">(</span><span class=\"n\">hx</span><span class=\"bp\">|</span><span class=\"n\">hx</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">lt_or_le</span> <span class=\"n\">x</span> <span class=\"mi\">0</span>\n  <span class=\"bp\">¬∑</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">rpow_def_of_neg</span> <span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"n\">rpow_def_of_pos</span> <span class=\"o\">(</span><span class=\"n\">norm_pos_iff.mpr</span> <span class=\"n\">hx.ne</span><span class=\"o\">)]</span>\n    <span class=\"n\">simpa</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">norm_mul</span><span class=\"o\">,</span> <span class=\"n\">norm_eq_abs</span><span class=\"o\">,</span> <span class=\"n\">abs_exp</span><span class=\"o\">,</span> <span class=\"n\">log_abs</span><span class=\"o\">,</span> <span class=\"n\">mul_le_iff_le_one_right</span> <span class=\"o\">(</span><span class=\"n\">exp_pos</span> <span class=\"n\">_</span><span class=\"o\">)]</span>\n      <span class=\"n\">using</span> <span class=\"n\">abs_cos_le_one</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"n\">œÄ</span><span class=\"o\">)</span>\n  <span class=\"bp\">¬∑</span> <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">norm_rpow_of_nonneg</span> <span class=\"n\">hx</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">le</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">Real.tendsto_log_cobounded</span> <span class=\"o\">:</span> <span class=\"n\">Tendsto</span> <span class=\"n\">log</span> <span class=\"o\">(</span><span class=\"n\">cobounded</span> <span class=\"n\">‚Ñù</span><span class=\"o\">)</span> <span class=\"n\">atTop</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Real.cobounded_eq</span><span class=\"o\">,</span> <span class=\"n\">tendsto_sup</span><span class=\"o\">]</span>\n  <span class=\"n\">refine</span> <span class=\"o\">‚ü®</span><span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">tendsto_log_atTop</span><span class=\"o\">‚ü©</span>\n  <span class=\"n\">convert</span> <span class=\"n\">Real.tendsto_log_atTop.comp</span> <span class=\"n\">tendsto_neg_atBot_atTop</span>\n  <span class=\"n\">funext</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">Function.comp_apply</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 405512760,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1701505799
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"197836\">@Jireh Loreaux</span> that's not \"garbage values\" though, is it? I'm a bit surprised (assuming what I just learned about Bornology was right) this wasn't in Mathlib yet. (Also, the Bornology pages would definitely benefit from more docs. A lot of people don't learn about bornology, same as filters. How about adding \"used e.g. to talk about limits towards infinity\" to <code>cobounded</code> docs?)</p>",
        "id": 405518329,
        "sender_full_name": "Adomas Baliuka",
        "timestamp": 1701510763
    },
    {
        "content": "<p>Please feel free to make docstring PRs! If you see something in mathlib which could be better, you can just make it better and people are very receptive to this approach.</p>",
        "id": 405518490,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1701510908
    },
    {
        "content": "<p>You can use it to get the version you want with a bit more work. Note that <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=isLittleO_log_rpow_atTop#doc\">docs#isLittleO_log_rpow_atTop</a> is the first step toward proving the existing log mul rpow result.</p>",
        "id": 405518659,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1701511048
    },
    {
        "content": "<p>You're welcome to PR anything I wrote if you feel like it.</p>",
        "id": 405518777,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1701511167
    }
]