[
    {
        "content": "<p>Happy weekend everyone,<br>\nI have a general question about Github links. Sometimes people send links in which they have proved or are working on proving something.<br>\nI am not sure how to approach it, since they are updates and different files. The example I am trying to understand is the following link <a href=\"https://github.com/leanprover-community/mathlib/pull/18649\">#18649</a>. I would like to look at the results on my Visual Studio but I am not sure how :D <br>\nKind regards,<br>\nSonia</p>",
        "id": 344532411,
        "sender_full_name": "rtertr (Sonia)",
        "timestamp": 1679765501
    },
    {
        "content": "<p>A key line there is \"mcdoll wants to merge 3 commits into master from mcdoll/schwartz_mul\". This is saying that the contents of the PR are in the branch <code>mcdoll/schwartz_mul</code>. If you already have a mathlib repository locally, you can do <code>git checkout mcdoll/schwartz_mul</code> (maybe after a <code>git fetch</code> to synchronize what your local repository knows about all these branches).</p>",
        "id": 344533150,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1679765821
    },
    {
        "content": "<p>Then you can do something like <code>leanproject get-cache</code> to get the branch's olean cache, so you don't have to recompile everything yourself.</p>",
        "id": 344533323,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1679765889
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/113489-new-members/topic/Understanding.20PR.20github.20links/near/344533150\">said</a>:</p>\n<blockquote>\n<p>If you already have a mathlib repository locally, you can do <code>git checkout mcdoll/schwartz_mul</code> (maybe after a <code>git fetch</code> to synchronize what your local repository knows about all these branches).</p>\n</blockquote>\n<p>I guess I have a local mathlib repository from January. What is a git checkout or fitch? Do I do that on my Visual Studio?:)</p>",
        "id": 344534078,
        "sender_full_name": "rtertr (Sonia)",
        "timestamp": 1679766184
    },
    {
        "content": "<p>In VS Code, you can go over to Source Control, click the \"...\" menu, then click Fetch to do the synchronization</p>",
        "id": 344534351,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1679766295
    },
    {
        "content": "<p>I don't really use VS Code for git, but I <em>think</em> to checkout a particular branch it's \"Checkout to\" in the same menu?</p>",
        "id": 344534617,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1679766382
    },
    {
        "content": "<p>Solution I found, in case people in the future are interested.<br>\nClicked on 'files changed'. Under the green button 'review changes', clicked on the three dots, and clicked 'view file'. Copied the file to my Visual Studio :D</p>",
        "id": 344536375,
        "sender_full_name": "rtertr (Sonia)",
        "timestamp": 1679767217
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"590693\">rtertr (Sonia)</span> has marked this topic as resolved.</p>",
        "id": 344536380,
        "sender_full_name": "Notification Bot",
        "timestamp": 1679767219
    },
    {
        "content": "<p>That's not a good solution because the file you're looking at is compatible with a different version of mathlib to the one you randomly pasted it into. The correct approach is the one Kyle explained.</p>",
        "id": 344538201,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1679768202
    },
    {
        "content": "<p>Mathlib undates several times a day and it's important to learn how to keep your local version updated and to get the compiled binaries for it. Within VS Code you can open a terminal at the bottom of your screen (pull up on the blue bar if it's not there) and then use <code>leanproject</code> in that command line.</p>",
        "id": 344538389,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1679768322
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"590693\">rtertr (Sonia)</span> has marked this topic as unresolved.</p>",
        "id": 344538779,
        "sender_full_name": "Notification Bot",
        "timestamp": 1679768600
    },
    {
        "content": "<p>Okay, great, and then I say upgrade-mathlib? :D</p>",
        "id": 344538907,
        "sender_full_name": "rtertr (Sonia)",
        "timestamp": 1679768670
    },
    {
        "content": "<p>nonono, the only reason you would ever say that is if you are working on a project of your own that has mathlib as a dependency and you want to update the version of mathlib it depends on to get the shiny new goodies that appeared recently.</p>\n<p>Can you explain again exactly what it is you want to do? Have you managed to open a terminal in VS Code? It is not hard to do this but if you mess around with random git or leanproject commands then you can really screw up your Lean set-up.</p>",
        "id": 344544806,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1679771859
    },
    {
        "content": "<p>Do you understand how git works? (it's OK if not, I just don't want to mansplain if you do)</p>",
        "id": 344544835,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1679771879
    },
    {
        "content": "<p>Hello again <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span> <br>\nNo, I don't understand how it works at all. Not familiar with Visual Studio or GitHub, just had a TA help me install Lean on my computer.<br>\nI would love to be able to update my library everyday, as I find there are packages I cannot import at the moment. <br>\nI tried to make a new project, and import the library again, but when I checked #import topology, it did not find it, so now I went back to my old folder :) I would love to work on GitHub instead of on my computer as well!<br>\nKind regards,<br>\nSonia</p>",
        "id": 344648352,
        "sender_full_name": "rtertr (Sonia)",
        "timestamp": 1679832901
    },
    {
        "content": "<p>So you can think of those github pages as links to \"branches\" of mathlib. There is a main, or \"master\" branch, which grows every day, and then other branches come off it where people are experimenting with new additions. If the new additions look good to the person who wrote them, they make a pull request and then the material in the branches is discussed by various people in the community and maybe changes are suggested. When everyone's happy, the relevant branch is \"merged\" into the master branch and growth continues.</p>\n<p>You can't use mathlib without lean files but you also can't use it without olean files, which are compiled lean files. If you try using mathlib without the right olean files then you will end up in \"orange bar hell\", where the orange \"compiling\" bars never disappear and Lean become unresponsive.</p>\n<p>Usually you just want to stick with the <code>master</code> branch, because this is a non-experimental branch on which everything is guaranteed to work. Lean doesn't work properly unless you're working in a project. There are two kinds of mathematics projects. There is <code>mathlib</code> itself, and then there are projects which depend on <code>mathlib</code>. If you are working on a project which depends on mathlib and you want to start using an experimental branch then this is quite complicated (but possible) so here's the (easier) description of how to work with <code>mathlib</code> itself.</p>\n<p>Here's a picture of mathlib open with my cursor on the bottom blue bar. </p>\n<p><a href=\"/user_uploads/3121/_eyhCY1sUdn6JtGscbWXeRBG/mathlibterm.png\">mathlibterm.png</a> </p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/_eyhCY1sUdn6JtGscbWXeRBG/mathlibterm.png\" title=\"mathlibterm.png\"><img src=\"/user_uploads/3121/_eyhCY1sUdn6JtGscbWXeRBG/mathlibterm.png\"></a></div><p>You can pull that blue bar up to get a terminal (click on \"terminal\" if it opens on another tab).</p>\n<p><a href=\"/user_uploads/3121/17KL08oeXO5LmS3S79gC_KvO/mathlibterm2.png\">mathlibterm2.png</a> </p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/17KL08oeXO5LmS3S79gC_KvO/mathlibterm2.png\" title=\"mathlibterm2.png\"><img src=\"/user_uploads/3121/17KL08oeXO5LmS3S79gC_KvO/mathlibterm2.png\"></a></div><p>In this terminal you can type the commands which Kyle described above. Common ones for me are:</p>\n<p><code>git pull</code> (to update all your lean files, note that now your oleans are incompatible and you'll be in orange bar hell until you do the next thing)</p>\n<p><code>leanproject get-cache</code> (this will download the oleans for the branch you're on)</p>\n<p>You usually want to be on the <code>master</code> branch:</p>\n<p><code>git checkout master</code> (again this will put you in orange bar hell unless you follow with <code>leanproject get-cache</code>)</p>\n<p><code>git checkout mcdoll/schwartz_mul</code> (this will put you on the branch for the PR you mentioned above).</p>\n<p>After changing branches I always do <code>git pull</code> (to get the branch up to date) and then <code>leanproject get-cache</code> (to get the olean files). When you've finished with the terminal you can just close it with the X in the top right of the pane.</p>",
        "id": 344652274,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1679834139
    },
    {
        "content": "<p>That's great! But when I do git pull I get this message:<br>\n$ git pull<br>\nThere is no tracking information for the current branch.</p>\n<div class=\"codehilite\" data-code-language=\"please\"><pre><span></span><code>See git-pull(1) for details.\n\n    git pull &lt;remote&gt; &lt;branch&gt;\n\nIf you wish to set tracking information for this branch you can do so with:\n\n    git branch --set-upstream-to=&lt;remote&gt;/&lt;branch&gt; master\n</code></pre></div>\n<p>Then if I do this, I get </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">$</span> <span class=\"n\">git</span> <span class=\"n\">branch</span> <span class=\"c1\">--set-upstream-to=&lt;remote&gt;/&lt;branch&gt; master</span>\n<span class=\"n\">bash</span><span class=\"o\">:</span> <span class=\"n\">remote</span><span class=\"o\">:</span> <span class=\"n\">No</span> <span class=\"n\">such</span> <span class=\"n\">file</span> <span class=\"n\">or</span> <span class=\"n\">directory</span>\n</code></pre></div>\n<p>Also I tried get-cache </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">$</span> <span class=\"n\">leanproject</span> <span class=\"n\">get</span><span class=\"bp\">-</span><span class=\"n\">cache</span>\n<span class=\"n\">Reference</span> <span class=\"n\">at</span> <span class=\"bp\">'</span><span class=\"n\">refs</span><span class=\"bp\">/</span><span class=\"n\">heads</span><span class=\"bp\">/</span><span class=\"n\">master'</span> <span class=\"n\">does</span> <span class=\"n\">not</span> <span class=\"n\">exist</span>\n</code></pre></div>",
        "id": 344657609,
        "sender_full_name": "rtertr (Sonia)",
        "timestamp": 1679835931
    },
    {
        "content": "<p>What does <code>git checkout master</code> then <code>git pull</code> do?</p>",
        "id": 344658009,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1679836080
    },
    {
        "content": "<p>And more importantly what is your project? Is it mathlib or a project which depends on mathlib? What are the contents of your <code>leanpkg.toml</code>? That file contains this sort of data.</p>",
        "id": 344658128,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1679836117
    },
    {
        "content": "<p>If you are on a project of your own which depends on mathlib then you can do <code>leanproject upgrade-mathlib</code> and this will get you back on track with today's mathlib master branch, but playing with a different branch of mathlib in your own project is harder; it's easier just to wait for the mathlib PR to be merged to master.</p>",
        "id": 344658296,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1679836198
    },
    {
        "content": "<p>it gives </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">$</span> <span class=\"n\">git</span> <span class=\"n\">checkout</span> <span class=\"n\">master</span>\n<span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">pathspec</span> <span class=\"bp\">'</span><span class=\"n\">master'</span> <span class=\"n\">did</span> <span class=\"n\">not</span> <span class=\"k\">match</span> <span class=\"n\">any</span> <span class=\"n\">file</span><span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"n\">known</span> <span class=\"n\">to</span> <span class=\"n\">git</span>\n</code></pre></div>\n<p>and then the same message as before</p>",
        "id": 344658858,
        "sender_full_name": "rtertr (Sonia)",
        "timestamp": 1679836415
    },
    {
        "content": "<p>under <code>leanpkg.toml</code> it states</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">[</span><span class=\"n\">package</span><span class=\"o\">]</span>\n<span class=\"n\">name</span> <span class=\"bp\">=</span> <span class=\"s2\">\"my_project\"</span>\n<span class=\"n\">version</span> <span class=\"bp\">=</span> <span class=\"s2\">\"0.1\"</span>\n<span class=\"n\">lean_version</span> <span class=\"bp\">=</span> <span class=\"s2\">\"leanprover-community/lean:3.50.3\"</span>\n<span class=\"n\">path</span> <span class=\"bp\">=</span> <span class=\"s2\">\"src\"</span>\n\n<span class=\"o\">[</span><span class=\"n\">dependencies</span><span class=\"o\">]</span>\n<span class=\"n\">mathlib</span> <span class=\"bp\">=</span> <span class=\"o\">{</span><span class=\"n\">git</span> <span class=\"bp\">=</span> <span class=\"s2\">\"https://github.com/leanprover-community/mathlib\"</span><span class=\"o\">,</span> <span class=\"n\">rev</span> <span class=\"bp\">=</span> <span class=\"s2\">\"d7943885503965d07ccaeb390d65fbc3f45962e6\"</span><span class=\"o\">}</span>\n</code></pre></div>",
        "id": 344659183,
        "sender_full_name": "rtertr (Sonia)",
        "timestamp": 1679836532
    },
    {
        "content": "<p>now it is running <code>leanproject upgrade-mathlib</code></p>",
        "id": 344659366,
        "sender_full_name": "rtertr (Sonia)",
        "timestamp": 1679836586
    },
    {
        "content": "<p>Now I can import new pages such as <code>analysis.fourier.fourier_transform</code> so that's great:)</p>",
        "id": 344660236,
        "sender_full_name": "rtertr (Sonia)",
        "timestamp": 1679836888
    },
    {
        "content": "<p>But yeah, I would love to start a new project where I could look at the current updates</p>",
        "id": 344660347,
        "sender_full_name": "rtertr (Sonia)",
        "timestamp": 1679836925
    },
    {
        "content": "<p>Yeah you are not working in mathlib, you are working on a project which depends on mathlib.</p>\n<p>Why not just get yourself a copy of mathlib itself, by changing directory on the command line to a directory which is not inside your project (e.g. <code>cd ..</code> will put you in the directory where <code>my_project</code> is) and then <code>leanproject get mathlib</code> wil get you a copy of today's mathlib. Then you can open that folder in VS Code and switch between mathlib branches.</p>",
        "id": 344662397,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1679837602
    },
    {
        "content": "<p>yes, that might be the right thing to do :D</p>",
        "id": 344670714,
        "sender_full_name": "rtertr (Sonia)",
        "timestamp": 1679840646
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"590693\">rtertr (Sonia)</span> <a href=\"#narrow/stream/113489-new-members/topic/Understanding.20PR.20github.20links/near/344657609\">said</a>:</p>\n<blockquote>\n<p>Then if I do this, I get </p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">$</span> <span class=\"n\">git</span> <span class=\"n\">branch</span> <span class=\"c1\">--set-upstream-to=&lt;remote&gt;/&lt;branch&gt; master</span>\n<span class=\"n\">bash</span><span class=\"o\">:</span> <span class=\"n\">remote</span><span class=\"o\">:</span> <span class=\"n\">No</span> <span class=\"n\">such</span> <span class=\"n\">file</span> <span class=\"n\">or</span> <span class=\"n\">directory</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>The message was expecting you to replace the placeholders <code>&lt;remote&gt;</code> and <code>&lt;branch&gt;</code>. You didn't replace them, so bash is now getting confused by the <code>&lt;&gt;</code>s</p>",
        "id": 344674078,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1679841725
    },
    {
        "content": "<p>hmm, I see :D I am currently stuck, it is orange for quite some time now :(</p>",
        "id": 344674431,
        "sender_full_name": "rtertr (Sonia)",
        "timestamp": 1679841846
    },
    {
        "content": "<p>What should I replace them by? :)</p>",
        "id": 344674611,
        "sender_full_name": "rtertr (Sonia)",
        "timestamp": 1679841914
    },
    {
        "content": "<p>It is just running in orange now :'(</p>",
        "id": 344675666,
        "sender_full_name": "rtertr (Sonia)",
        "timestamp": 1679842314
    },
    {
        "content": "<p>right, you're in orange bar hell. If this is a project which depends on mathlib then <code>leanproject get-mathlib-cache</code> will fix it. If it's mathlib itself then <code>leanproject get-cache</code> will fix it. In both cases you should restart VS Code after the command has finished (it may take a minute or so, depending on things like your internet speed; don't close the terminal until you have a new prompt).</p>",
        "id": 344676437,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1679842587
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"590693\">@rtertr (Sonia)</span> I didn't carefully read all that discussion but I think people are making things more complicated than they need to be. If you simply want to play with code from Moritz then you can open a terminal and type <code>leanproject get mathlib:mcdoll/schwartz_mul</code>. This will create a folder <code>mathlib_mcdoll/schwartz_mul</code> with the content of mathlib as it appears in this PR, including compiled oleans. Then you can simply type <code>code mathlib_mcdoll/schwartz_mul</code> and start exploring files.</p>",
        "id": 344679410,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1679843640
    },
    {
        "content": "<p>Note that the PR page also contains a link \"Open in gitpod\" that is very often sufficient to explore the changes interactively.</p>",
        "id": 344679571,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1679843703
    }
]