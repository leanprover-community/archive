[
    {
        "content": "<p>I'm re-implementing vector spaces and sub spaces.  In mathlib's <code>submodule</code>, we show that <a href=\"https://github.com/leanprover-community/mathlib/blob/master/src/algebra/module/submodule/basic.lean#L228\">a submodule is a module</a>.  I'm trying to do the same thing, but running into a difference that I don't understand.</p>\n<p><code>#check submodule.module' </code>: returns<br>\n<code>  Π (p : submodule ?M_2 ?M_3) [_inst_3 : semiring ?M_1] [_inst_4 : has_smul ?M_1 ?M_2] [_inst_5 : module ?M_1 ?M_3]\n  [_inst_6 : is_scalar_tower ?M_1 ?M_2 ?M_3], module ?M_1 ↥p </code><br>\ni.e. there are implicit arguments for all the algebraic structure objects.  However, in my code, I just get:<br>\n<code>#check #check subspace.vector_space'</code> returns<br>\n<code>subspace.vector_space' : Π (q : subspace ?M_1 ?M_2), vector_space ?M_1 ↥q</code></p>\n<p>In particular, there's no requirement for <code>[field ?M_1]</code>.</p>\n<p>Why doesn't that show up?<br>\nMy <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>, sorry it's so long:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.module.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.set_like.basic</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">old_structure_cmd</span> <span class=\"n\">true</span>\n\n\n<span class=\"kn\">namespace</span> <span class=\"n\">LADR</span>\n\n<span class=\"kd\">@[ext]</span>\n<span class=\"kd\">class</span> <span class=\"n\">vector_space</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">V</span><span class=\"o\">]</span>\n  <span class=\"kd\">extends</span> <span class=\"n\">has_smul</span> <span class=\"n\">F</span> <span class=\"n\">V</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">smul_assoc</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">•</span> <span class=\"n\">v</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">•</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">•</span> <span class=\"n\">v</span><span class=\"o\">))</span>\n<span class=\"o\">(</span><span class=\"n\">mul_ident</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"bp\">•</span> <span class=\"n\">v</span> <span class=\"bp\">=</span> <span class=\"n\">v</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">left_distrib</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">•</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"bp\">+</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">•</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">•</span> <span class=\"n\">v</span><span class=\"o\">))</span>\n<span class=\"o\">(</span><span class=\"n\">right_distrib</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span><span class=\"n\">F</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">•</span> <span class=\"n\">v</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">•</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">•</span> <span class=\"n\">v</span><span class=\"o\">))</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">F</span><span class=\"o\">]</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">vector_space</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">vector_space</span> <span class=\"n\">F</span> <span class=\"n\">V</span><span class=\"o\">]</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">neg_one_smul_is_neg</span> <span class=\"o\">{</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"bp\">•</span> <span class=\"n\">v</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span> <span class=\"n\">v</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">vector_space</span>\n\n\n\n<span class=\"kd\">structure</span> <span class=\"n\">add_comm_subgroup</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">carrier</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">V</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">add_mem'</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">},</span> <span class=\"n\">u</span> <span class=\"bp\">∈</span> <span class=\"n\">carrier</span> <span class=\"bp\">→</span> <span class=\"n\">v</span> <span class=\"bp\">∈</span> <span class=\"n\">carrier</span> <span class=\"bp\">→</span> <span class=\"n\">u</span> <span class=\"bp\">+</span> <span class=\"n\">v</span> <span class=\"bp\">∈</span> <span class=\"n\">carrier</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">zero_mem'</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"bp\">∈</span> <span class=\"n\">carrier</span><span class=\"o\">)</span>\n\n\n<span class=\"c1\">-- **********  BOILERPLATE FOR set_like  **********</span>\n<span class=\"kn\">namespace</span> <span class=\"n\">add_comm_subgroup</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">}</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">set_like</span> <span class=\"o\">(</span><span class=\"n\">add_comm_subgroup</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"n\">V</span> <span class=\"o\">:=</span>\n<span class=\"o\">⟨</span> <span class=\"n\">add_comm_subgroup.carrier</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">cases</span> <span class=\"n\">p</span><span class=\"bp\">;</span> <span class=\"n\">cases</span> <span class=\"n\">q</span><span class=\"bp\">;</span> <span class=\"n\">congr'</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">mem_carrier</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">add_comm_subgroup</span> <span class=\"n\">V</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">v</span> <span class=\"bp\">∈</span> <span class=\"n\">p.carrier</span> <span class=\"bp\">↔</span> <span class=\"n\">v</span> <span class=\"bp\">∈</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">iff.rfl</span>\n\n<span class=\"kd\">@[ext]</span> <span class=\"kd\">theorem</span> <span class=\"n\">ext</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">add_comm_subgroup</span> <span class=\"n\">V</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">v</span> <span class=\"bp\">∈</span> <span class=\"n\">p</span> <span class=\"bp\">↔</span> <span class=\"n\">v</span> <span class=\"bp\">∈</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"n\">q</span> <span class=\"o\">:=</span> <span class=\"n\">set_like.ext</span> <span class=\"n\">h</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">add_comm_subgroup</span>\n<span class=\"c1\">-- **********  BOILERPLATE ENDS  **********</span>\n\n\n<span class=\"kd\">structure</span> <span class=\"n\">subspace</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span>\n  <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">vector_space</span> <span class=\"n\">F</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"kd\">extends</span> <span class=\"n\">add_comm_subgroup</span> <span class=\"n\">V</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">smul_mem'</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">},</span> <span class=\"n\">v</span> <span class=\"bp\">∈</span> <span class=\"n\">carrier</span> <span class=\"bp\">→</span> <span class=\"n\">c</span> <span class=\"bp\">•</span> <span class=\"n\">v</span> <span class=\"bp\">∈</span> <span class=\"n\">carrier</span> <span class=\"o\">)</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">subspace</span>\n\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">vector_space</span> <span class=\"n\">F</span> <span class=\"n\">V</span><span class=\"o\">]</span>\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">}</span>\n\n<span class=\"c1\">-- **********  BOILERPLATE FOR set_like  **********</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">set_like</span> <span class=\"o\">(</span><span class=\"n\">subspace</span> <span class=\"n\">F</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"n\">V</span> <span class=\"o\">:=</span>\n<span class=\"o\">⟨</span><span class=\"n\">subspace.carrier</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">cases</span> <span class=\"n\">p</span><span class=\"bp\">;</span> <span class=\"n\">cases</span> <span class=\"n\">q</span><span class=\"bp\">;</span> <span class=\"n\">congr'</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">mem_carrier</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">subspace</span> <span class=\"n\">F</span> <span class=\"n\">V</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">v</span> <span class=\"bp\">∈</span> <span class=\"n\">p.carrier</span> <span class=\"bp\">↔</span> <span class=\"n\">v</span> <span class=\"bp\">∈</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">iff.rfl</span>\n\n<span class=\"kd\">@[ext]</span> <span class=\"kd\">theorem</span> <span class=\"n\">ext</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">subspace</span> <span class=\"n\">F</span> <span class=\"n\">V</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">v</span> <span class=\"bp\">∈</span> <span class=\"n\">p</span> <span class=\"bp\">↔</span> <span class=\"n\">v</span> <span class=\"bp\">∈</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"n\">q</span> <span class=\"o\">:=</span> <span class=\"n\">set_like.ext</span> <span class=\"n\">h</span>\n<span class=\"c1\">-- **********  BOILERPLATE ENDS  **********</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">subspace</span> <span class=\"n\">F</span> <span class=\"n\">V</span><span class=\"o\">)</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">fooblah</span> <span class=\"o\">:</span> <span class=\"n\">add_comm_group</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"o\">{</span>\n  <span class=\"n\">add</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">u</span> <span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"o\">⟨</span> <span class=\"n\">u.1</span> <span class=\"bp\">+</span> <span class=\"n\">v.1</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">p.add_mem'</span><span class=\"o\">,</span> <span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"n\">simp</span><span class=\"o\">}</span> <span class=\"o\">⟩,</span>\n  <span class=\"n\">zero</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">p.zero_mem'</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">neg</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"bp\">-</span><span class=\"n\">v.1</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"bp\">@</span><span class=\"n\">vector_space.neg_one_smul_is_neg</span> <span class=\"n\">F</span> <span class=\"n\">_</span> <span class=\"n\">V</span><span class=\"o\">,</span> <span class=\"n\">apply</span> <span class=\"n\">p.smul_mem'</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"o\">}⟩,</span>\n\n  <span class=\"n\">add_comm</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">add_assoc</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">add_zero</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">zero_add</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">add_left_neg</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"o\">}</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">vector_space'</span> <span class=\"o\">:</span> <span class=\"n\">vector_space</span> <span class=\"n\">F</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"o\">{</span>\n  <span class=\"n\">smul</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">s</span> <span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"o\">⟨</span> <span class=\"n\">s</span> <span class=\"bp\">•</span> <span class=\"n\">v.1</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">p.smul_mem'</span><span class=\"o\">,</span> <span class=\"n\">simp</span><span class=\"o\">}</span> <span class=\"o\">⟩,</span>\n  <span class=\"n\">smul_assoc</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span><span class=\"n\">intros</span><span class=\"o\">,</span> <span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"n\">apply</span> <span class=\"n\">vector_space.smul_assoc</span><span class=\"o\">},</span>\n  <span class=\"n\">mul_ident</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span><span class=\"n\">intros</span><span class=\"o\">,</span> <span class=\"n\">ext</span><span class=\"o\">,</span> <span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"n\">vector_space.mul_ident</span><span class=\"o\">},</span>\n  <span class=\"n\">left_distrib</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">right_distrib</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"o\">}</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">subspace.vector_space'</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">vector_space</span> <span class=\"n\">F</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"n\">p.vector_space'</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">subspace</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">LADR</span>\n</code></pre></div>",
        "id": 380826231,
        "sender_full_name": "Martin C. Martin",
        "timestamp": 1690920673
    },
    {
        "content": "<p>You want <code>#check @subspace.vector_space'</code> not <code>#check subspace.vector_space'</code></p>",
        "id": 380853751,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1690929434
    },
    {
        "content": "<p>Note Lean 4 does this automatically for you</p>",
        "id": 380853762,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1690929439
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113489-new-members/topic/Why.20is.20.5Bfield.20F.5D.20not.20an.20implicit.20argument.3F/near/380853751\">said</a>:</p>\n<blockquote>\n<p>You want <code>#check @subspace.vector_space'</code> not <code>#check subspace.vector_space'</code></p>\n</blockquote>\n<p>Ah, thanks!  But why does <code>[_inst_3 : semiring ?M_1] </code> show up for <code>module'</code>, without the @,  but the equivalent not show up for <code>vector_space'</code>?  Just some quirk of the printing logic, or is there something deeper, like the difference between <code>variable</code> and <code>constant</code>?</p>",
        "id": 380865148,
        "sender_full_name": "Martin C. Martin",
        "timestamp": 1690934401
    },
    {
        "content": "<p>Could I ask why you're doing this in Lean 3 rather than Lean 4?</p>",
        "id": 380872993,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1690937858
    },
    {
        "content": "<p>It shows up for one but not the other because one uses <code>(p : submodule ...)</code> and the other uses <code>{p : submodule ...}</code></p>",
        "id": 380877480,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1690940094
    },
    {
        "content": "<p>Roughly speaking, Lean fills in <code>{}</code> and <code>[]</code> until it hits the first <code>()</code> argument. <code>@</code> tells it not to do this.</p>",
        "id": 380877628,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1690940128
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113489-new-members/topic/Why.20is.20.5Bfield.20F.5D.20not.20an.20implicit.20argument.3F/near/380877628\">said</a>:</p>\n<blockquote>\n<p>Roughly speaking, Lean fills in <code>{}</code> and <code>[]</code> until it hits the first <code>()</code> argument. <code>@</code> tells it not to do this.</p>\n</blockquote>\n<p>Oh interesting!  Is this documented somewhere?  Such as the <a href=\"https://leanprover.github.io/reference/\">Lean reference manual?</a></p>",
        "id": 380993948,
        "sender_full_name": "Martin C. Martin",
        "timestamp": 1690974179
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/113489-new-members/topic/Why.20is.20.5Bfield.20F.5D.20not.20an.20implicit.20argument.3F/near/380872993\">said</a>:</p>\n<blockquote>\n<p>Could I ask why you're doing this in Lean 3 rather than Lean 4?</p>\n</blockquote>\n<p>Which one is considered the best to use for new projects these days?  How far along is the Lean 4 port of mathlib?  Do enough people here on Zulip know about Lean 4 and can help?</p>",
        "id": 381244770,
        "sender_full_name": "Martin C. Martin",
        "timestamp": 1690997785
    },
    {
        "content": "<p>All of mathlib is ported as of a couple weeks ago, and mathlib4 is now accepting contributions of new material</p>",
        "id": 381245889,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1690998040
    },
    {
        "content": "<p>Awesome!  I guess I'll switch to that.  Is there a document on the difference, \"Lean 4 for the Lean 3 worker\"?</p>",
        "id": 381246568,
        "sender_full_name": "Martin C. Martin",
        "timestamp": 1690998204
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"348963\">Martin C. Martin</span> <a href=\"#narrow/stream/113489-new-members/topic/Why.20is.20.5Bfield.20F.5D.20not.20an.20implicit.20argument.3F/near/381246568\">said</a>:</p>\n<blockquote>\n<p>Awesome!  I guess I'll switch to that.  Is there a document on the difference, \"Lean 4 for the Lean 3 worker\"?</p>\n</blockquote>\n<p>Maybe this <a href=\"https://leanprover.github.io/lean4/doc/lean3changes.html\">https://leanprover.github.io/lean4/doc/lean3changes.html</a></p>",
        "id": 381247650,
        "sender_full_name": "Peter Hansen",
        "timestamp": 1690998471
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"348963\">Martin C. Martin</span> <a href=\"#narrow/stream/113489-new-members/topic/Why.20is.20.5Bfield.20F.5D.20not.20an.20implicit.20argument.3F/near/381246568\">said</a>:</p>\n<blockquote>\n<p>Awesome!  I guess I'll switch to that.  Is there a document on the difference, \"Lean 4 for the Lean 3 worker\"?</p>\n</blockquote>\n<p>And the <a href=\"https://github.com/leanprover-community/mathlib4/wiki/Lean-4-survival-guide-for-Lean-3-users\">Lean 4 survival guide for Lean 3 users</a>.</p>",
        "id": 381247795,
        "sender_full_name": "Pedro Sánchez Terraf",
        "timestamp": 1690998500
    },
    {
        "content": "<p>How long before we start porting mathlib to Lean 5?  <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span></p>",
        "id": 381262237,
        "sender_full_name": "Martin C. Martin",
        "timestamp": 1691001680
    },
    {
        "content": "<p>Do you want to give people nightmares?</p>",
        "id": 381263309,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1691001945
    },
    {
        "content": "<p>Is there a tool for converting Lean 3 projects to Lean 4, like Python's 2to3?</p>",
        "id": 381265876,
        "sender_full_name": "Martin C. Martin",
        "timestamp": 1691002529
    },
    {
        "content": "<p>Yes, you can use mathport (the same tool that helped drive the mathlib port). I haven't used it myself yet, but I've seen these instructions: <a href=\"https://github.com/leanprover-community/mathport/blob/master/Oneshot/README.md\">https://github.com/leanprover-community/mathport/blob/master/Oneshot/README.md</a></p>",
        "id": 381269098,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1691003196
    },
    {
        "content": "<p>That link is for porting single files at a time. If you'd like to try a whole project (it's been done twice to my knowledge so far, besides mathlib) see that main mathport README.</p>",
        "id": 381345594,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1691034586
    }
]