[
    {
        "content": "<p>Hi, I'm pretty new to Lean (mainly a Coq user). Today I was formalizing some stuff using Lean4, and I run into a seemingly weird unification error:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">CommRing</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n<span class=\"kd\">def</span> <span class=\"n\">Spec</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Semiring</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Algebra</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"n\">A</span> <span class=\"bp\">→ₐ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">R</span>\n<span class=\"kd\">structure</span> <span class=\"n\">Z</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">where</span>\n  <span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Semiring</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Algebra</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">FinitePresentation</span> <span class=\"n\">A</span><span class=\"o\">},</span>\n    <span class=\"n\">Spec</span> <span class=\"n\">A</span> <span class=\"bp\">→+</span> <span class=\"n\">R</span>\n</code></pre></div>\n<p>Say I try to write this code. Then it tells me that it failed to synthesize instance Semiring A, but I have just given it in the forall!</p>",
        "id": 398868929,
        "sender_full_name": "Xuanrui Qi",
        "timestamp": 1698401956
    },
    {
        "content": "<p>I tried to pass it the instances explicitly, then it tells me:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">application</span> <span class=\"n\">type</span> <span class=\"n\">mismatch</span>\n  <span class=\"bp\">@</span><span class=\"n\">Spec</span> <span class=\"n\">R</span> <span class=\"bp\">?</span><span class=\"n\">m.3666</span> <span class=\"n\">A</span> <span class=\"n\">sr</span>\n<span class=\"n\">argument</span>\n  <span class=\"n\">sr</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">Semiring</span> <span class=\"n\">A</span><span class=\"bp\">✝</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_2</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"n\">Semiring</span> <span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_2</span>\n</code></pre></div>\n<p>which is even weirder to me! Where did this dagger come from?</p>\n<p>Likely, this is due to my misunderstanding of how type classes and instances work in Lean. Could anyone help me out?</p>",
        "id": 398869216,
        "sender_full_name": "Xuanrui Qi",
        "timestamp": 1698402069
    },
    {
        "content": "<p>I think that there are several issues at play here.  First of all, what should <code>Spec A →+ R</code> means?  It seems that <code>Spec A</code> is the type of algebra maps from A to R, while <code>→+</code> expects to have an additive monoid on the left.</p>",
        "id": 398873238,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1698403653
    },
    {
        "content": "<p>Also, <code>import</code>s and <code>open</code>s are missing in your code above.</p>",
        "id": 398873307,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1698403677
    },
    {
        "content": "<p>Moreover, I think that <code>R</code> should be explicit in <code>Spec</code>, since I do not think that <code>Spec A</code> will find <code>R</code>, even with the <code>Algebra R A</code> assumption floating around.</p>",
        "id": 398873495,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1698403744
    },
    {
        "content": "<p>Finally, the <code>Type</code> in <code>Z</code> is also messing Lean up, since the resulting structure will live in a higher universe.</p>",
        "id": 398873835,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1698403880
    },
    {
        "content": "<p>As for the specific error:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">{</span><span class=\"n\">FinitePresentation</span> <span class=\"n\">A</span><span class=\"o\">}</span>\n</code></pre></div>\n<p>This is a declaration of two variables <code>FinitePresentation</code> and <code>A</code> with inferred type</p>",
        "id": 398873899,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1698403903
    },
    {
        "content": "<p>Maybe this is what you wanted?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Algebra</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">CommRing</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Spec</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Semiring</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Algebra</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"n\">A</span> <span class=\"bp\">→ₐ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">R</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">Z</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span> <span class=\"n\">where</span>  <span class=\"c1\">--  &lt;--- `Type _`, so Lean figures out the right universe level</span>\n  <span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Semiring</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Algebra</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">],</span> <span class=\"n\">FinitePresentation</span> <span class=\"n\">R</span> <span class=\"n\">A</span> <span class=\"bp\">→</span>\n    <span class=\"n\">Spec</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:=</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"n\">A</span>  <span class=\"c1\">--  &lt;--- you have to tell Lean what `R` you are thinking of</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">Z</span>\n</code></pre></div>",
        "id": 398874122,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1698403989
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110024\">Sebastian Ullrich</span> <a href=\"#narrow/stream/113489-new-members/topic/Seemingly.20weird.20unification.20problem/near/398873899\">said</a>:</p>\n<blockquote>\n<p>As for the specific error:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">{</span><span class=\"n\">FinitePresentation</span> <span class=\"n\">A</span><span class=\"o\">}</span>\n</code></pre></div>\n<p>This is a declaration of two variables <code>FinitePresentation</code> and <code>A</code> with inferred type</p>\n</blockquote>\n<p>Ah, I had forgotten that I added an <code>R</code> there as well!</p>",
        "id": 398874167,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1698404012
    },
    {
        "content": "<p>Imports were omitted. All required modules have been imported.</p>",
        "id": 398878490,
        "sender_full_name": "Xuanrui Qi",
        "timestamp": 1698405631
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110024\">Sebastian Ullrich</span> <a href=\"#narrow/stream/113489-new-members/topic/Seemingly.20weird.20unification.20problem/near/398873899\">said</a>:</p>\n<blockquote>\n<p>As for the specific error:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">{</span><span class=\"n\">FinitePresentation</span> <span class=\"n\">A</span><span class=\"o\">}</span>\n</code></pre></div>\n<p>This is a declaration of two variables <code>FinitePresentation</code> and <code>A</code> with inferred type</p>\n</blockquote>\n<p>Thanks! This looks like the problem  indeed</p>",
        "id": 398878944,
        "sender_full_name": "Xuanrui Qi",
        "timestamp": 1698405826
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"662526\">Xuanrui Qi</span> <a href=\"#narrow/stream/113489-new-members/topic/Seemingly.20weird.20unification.20problem/near/398878490\">said</a>:</p>\n<blockquote>\n<p>Imports were omitted. All required modules have been imported.</p>\n</blockquote>\n<p>This does not help whoever is trying to help you, though!  <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a></p>",
        "id": 398879555,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1698406075
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"662526\">Xuanrui Qi</span> <a href=\"#narrow/stream/113489-new-members/topic/Seemingly.20weird.20unification.20problem/near/398869216\">said</a>:</p>\n<blockquote>\n<p>I tried to pass it the instances explicitly, then it tells me:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">application</span> <span class=\"n\">type</span> <span class=\"n\">mismatch</span>\n  <span class=\"bp\">@</span><span class=\"n\">Spec</span> <span class=\"n\">R</span> <span class=\"bp\">?</span><span class=\"n\">m.3666</span> <span class=\"n\">A</span> <span class=\"n\">sr</span>\n<span class=\"n\">argument</span>\n  <span class=\"n\">sr</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">Semiring</span> <span class=\"n\">A</span><span class=\"bp\">✝</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_2</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"n\">Semiring</span> <span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_2</span>\n</code></pre></div>\n<p>which is even weirder to me! Where did this dagger come from?</p>\n<p>Likely, this is due to my misunderstanding of how type classes and instances work in Lean. Could anyone help me out?</p>\n</blockquote>\n<p>Note the dagger symbol after one of your A's in the error message. That means there are two things called A in your context</p>",
        "id": 398880203,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1698406353
    }
]