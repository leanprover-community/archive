[
    {
        "content": "<p>Hi everyone!<br>\nI was trying to prove some <code>≤</code> relation on some quotient type is a total order. I find that I need to fill a term: <code>decidable_le : decidable_rel (≤)</code>. So what does this decidable property really means? And how should I provide a proof for it? I tried to read the definition of <code>decidable_rel</code> in <code>init.core</code> but got totally lost on how to prove something is decidable by myself  <span aria-label=\"broken heart\" class=\"emoji emoji-1f494\" role=\"img\" title=\"broken heart\">:broken_heart:</span> Thanks for any help!</p>",
        "id": 363270120,
        "sender_full_name": "Jiang Jiedong",
        "timestamp": 1685789103
    },
    {
        "content": "<p>By the way, what does it mean when some relation is undecidable? Is there any example?</p>",
        "id": 363271600,
        "sender_full_name": "Jiang Jiedong",
        "timestamp": 1685789526
    },
    {
        "content": "<p>a relation that is not decidable is one where there is no algorithm that can give a Bool result and is always equivalent to the proposition</p>",
        "id": 363273809,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685790125
    },
    {
        "content": "<p>Classically, there always exists such an algorithm, since one of <code>return true</code> or <code>return false</code> will work, but we often care specifically about ways to prove <code>decidable</code> results that are not <code>noncomputable</code> so that lean can actually eval the result</p>",
        "id": 363274488,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685790212
    },
    {
        "content": "<p>Usually the approach to proved decidability is to say \"this expression is equivalent to some simpler expression, and we already know how to decide that one\"</p>",
        "id": 363275041,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1685790312
    },
    {
        "content": "<p>For quotient types, you would usually start with <a href=\"https://leanprover-community.github.io/mathlib_docs/init/data/quot.html#quotient.rec_on_subsingleton%E2%82%82\"><code>quotient.rec_on_subsingleton₂ </code></a></p>",
        "id": 363275299,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1685790336
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/localization.decidable_le/src\">src#localization.decidable_le</a> might be a good example</p>",
        "id": 363278221,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1685790908
    },
    {
        "content": "<p>Less precisely, think of the total order on the set {True, False} in which True comes before False if and only if the Riemann hypothesis is true. This is a perfectly valid total order, but it is pretty hard to write a <code>decidable</code> instance (that is, a provably-correct algorithm which terminates and returns whether a &lt; b for a, b elements of the set {True, False}) for this total order. Note that this does not mean that this is undecidable, though, just that no one currently knows how to write a decision procedure for it.</p>",
        "id": 363280419,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1685791537
    },
    {
        "content": "<p>Thanks! Now I has moved out from quotient types, but still stuck at this point:<br>\nLet <code> Γ₀</code> be a <code>linear_ordered_comm_monoid</code>, I am trying to define a relation <code>r.le</code> on <code>Γ₀ × ℕ+</code>.  (Think elements <code>x = (x.fst, x.snd) : Γ₀ × ℕ+</code>as a representation of <code>x.fst^(1/x.snd)</code>.) So I define</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code> <span class=\"kd\">def</span> <span class=\"n\">r.le</span> <span class=\"o\">[</span><span class=\"n\">linear_ordered_comm_monoid</span> <span class=\"bp\">Γ₀</span><span class=\"o\">]:</span> <span class=\"o\">(</span><span class=\"bp\">Γ₀</span> <span class=\"bp\">×</span> <span class=\"n\">ℕ</span><span class=\"bp\">+</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">Γ₀</span> <span class=\"bp\">×</span> <span class=\"n\">ℕ</span><span class=\"bp\">+</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"bp\">+</span><span class=\"o\">),</span> <span class=\"n\">x.fst</span><span class=\"bp\">^</span><span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"n\">y.snd</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"n\">y.fst</span><span class=\"bp\">^</span><span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"n\">x.snd</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>How to show such a relation is decidable?  I cannot find the correct theorem in mathlib tells me how <code>decidable</code> property interact with existence.</p>",
        "id": 363373390,
        "sender_full_name": "Jiang Jiedong",
        "timestamp": 1685822002
    },
    {
        "content": "<p>Maybe more importantly, is it decidable or not? If not, can I avoid this decidable problem? I wonder why a <code>linear_order</code> is required to be decidable in the first place? <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 363373846,
        "sender_full_name": "Jiang Jiedong",
        "timestamp": 1685822236
    },
    {
        "content": "<p>Or could I impose some mild condition on  <code>Γ₀</code> to make this relation decidable?</p>",
        "id": 363374594,
        "sender_full_name": "Jiang Jiedong",
        "timestamp": 1685822611
    },
    {
        "content": "<p>Note you always have the option of cheating and writing <code>classical.dec_rel _ -- TODO: is this decidable?</code></p>",
        "id": 363381112,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1685825996
    },
    {
        "content": "<p>This is what we do with equality on the real numbers, which we know is not decidable</p>",
        "id": 363381192,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1685826021
    },
    {
        "content": "<p>Isn't</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"bp\">+</span><span class=\"o\">),</span> <span class=\"n\">x.fst</span><span class=\"bp\">^</span><span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"n\">y.snd</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"n\">y.fst</span><span class=\"bp\">^</span><span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"n\">x.snd</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>the same as</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"bp\">+</span><span class=\"o\">),</span> <span class=\"n\">x.fst</span><span class=\"bp\">^</span><span class=\"o\">(</span><span class=\"n\">y.snd</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"n\">y.fst</span><span class=\"bp\">^</span><span class=\"o\">(</span><span class=\"n\">x.snd</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>which is the same as the following?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">x.fst</span><span class=\"bp\">^</span><span class=\"o\">(</span><span class=\"n\">y.snd</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"n\">y.fst</span><span class=\"bp\">^</span><span class=\"o\">(</span><span class=\"n\">x.snd</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 363382407,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1685826724
    },
    {
        "content": "<p>If so then you're done because that inequality is already decidable thanks to <code>linear_ordered_comm_monoid</code>!</p>",
        "id": 363382455,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1685826779
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113489-new-members/topic/decidable_rel.20in.20total_order/near/363382407\">said</a>:</p>\n<blockquote>\n<p>Isn't</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"bp\">+</span><span class=\"o\">),</span> <span class=\"n\">x.fst</span><span class=\"bp\">^</span><span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"n\">y.snd</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"n\">y.fst</span><span class=\"bp\">^</span><span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"n\">x.snd</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>the same as</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"bp\">+</span><span class=\"o\">),</span> <span class=\"n\">x.fst</span><span class=\"bp\">^</span><span class=\"o\">(</span><span class=\"n\">y.snd</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"n\">y.fst</span><span class=\"bp\">^</span><span class=\"o\">(</span><span class=\"n\">x.snd</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>which is the same as the following?</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">x.fst</span><span class=\"bp\">^</span><span class=\"o\">(</span><span class=\"n\">y.snd</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"n\">y.fst</span><span class=\"bp\">^</span><span class=\"o\">(</span><span class=\"n\">x.snd</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>For linear ordered group, this is true, however for linear ordered monoid this fails. Here is an additive example. Consider the following set <code>Γ₀  = {1,2,...,n-1,+∞}</code> equipped with the obvious total order, and set all additive equations with results greater the <code>n</code> to <code>+∞</code>. Then for any <code>x y : Γ₀ × ℕ+</code>, we have <code>r.le x y</code> since we can always find <code>n</code> such that<code>(n * y.snd) ⬝ x.fst = (n * x.snd) ⬝ y.fst = +∞</code>, but <code>(y.snd : ℕ) ⬝ x.fst ≤ (x.snd : ℕ) ⬝ y.fst</code> may not hold.</p>",
        "id": 363416989,
        "sender_full_name": "Jiang Jiedong",
        "timestamp": 1685850932
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113489-new-members/topic/decidable_rel.20in.20total_order/near/363381112\">said</a>:</p>\n<blockquote>\n<p>Note you always have the option of cheating and writing <code>classical.dec_rel _ -- TODO: is this decidable?</code></p>\n</blockquote>\n<p>Thank you very much! This <code>classical.dec_rel _ -- TODO: is this decidable?</code> is exactly what I want!</p>",
        "id": 363417256,
        "sender_full_name": "Jiang Jiedong",
        "timestamp": 1685851118
    }
]