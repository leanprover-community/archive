[
    {
        "content": "<p>Hi, I am trying the follow code, but I am not sure why it says \"don't know how to synthesize placeholder\". Isn't the required condition in the global scope (or whatever it's called)? Also, when I click on the error, the <code>hf : monotone f</code> is in the context as well.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">set</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">big_operators</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">seq</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">monotone</span> <span class=\"n\">f</span><span class=\"o\">}</span>\n<span class=\"kn\">include</span> <span class=\"n\">hf</span>\n\n<span class=\"c1\">-- Property indicating a number which is the sum of subsequence of f</span>\n<span class=\"kd\">def</span> <span class=\"n\">summable</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"bp\">∑</span> <span class=\"n\">s</span> <span class=\"k\">in</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">x</span>\n\n<span class=\"c1\">-- The set of subset sums is numbers which is the sum of subsequence of f</span>\n<span class=\"kd\">def</span> <span class=\"n\">subset_sums</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">|</span> <span class=\"n\">summable</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 328496648,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1676647473
    },
    {
        "content": "<p>Oh, and also writing it as <code>@summable f hf x</code> fixes the problem? Which makes it even more confusing, since <code>hf</code> is literally in the scope</p>",
        "id": 328496962,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1676647559
    },
    {
        "content": "<p>Lean doesn't try to fill placeholders with stuff from the environment, even when (as I'm assuming is the case here) it's a proposition so it could be a sensible thing to do.</p>",
        "id": 328497797,
        "sender_full_name": "Reid Barton",
        "timestamp": 1676647765
    },
    {
        "content": "<p>I recommend making <code>hf</code> explicit. Otherwise it will be annoying anyways when, eventually, you have to actually provide it somewhere.</p>",
        "id": 328497985,
        "sender_full_name": "Reid Barton",
        "timestamp": 1676647811
    },
    {
        "content": "<p>Ah okay, so replace <code>{}</code> with <code>()</code> then write <code>summable f hf x</code>?</p>",
        "id": 328498616,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1676647981
    },
    {
        "content": "<p>Or simply remove it, as it's a useless assumption.</p>",
        "id": 328498775,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1676648023
    },
    {
        "content": "<p>I need it for later lemmas</p>",
        "id": 328498807,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1676648033
    },
    {
        "content": "<p>Yes, but the <em>definition</em> doesn't need it.</p>",
        "id": 328499800,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1676648262
    },
    {
        "content": "<p>Oh, I see what you mean now\\</p>",
        "id": 328504038,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1676649389
    },
    {
        "content": "<p>Another question, I think I am slightly confused. For the following definitions:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">complete</span>  <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">N</span><span class=\"o\">),</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">N</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span><span class=\"o\">),</span> <span class=\"n\">summable</span> <span class=\"n\">f</span> <span class=\"n\">n</span>\n<span class=\"kd\">def</span> <span class=\"n\">complete'</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">N</span><span class=\"o\">),</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">N</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">summable</span> <span class=\"n\">f</span> <span class=\"n\">n</span>\n</code></pre></div>\n<p>Are these two definitions different? And is the second definition the correct style to write it, or is there some better syntax</p>",
        "id": 328529671,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1676656174
    },
    {
        "content": "<p>The first one is inadvertently incorrect. If you did</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">complete</span>  <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">N</span><span class=\"o\">),</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">N</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span><span class=\"o\">),</span> <span class=\"n\">summable</span> <span class=\"n\">f</span> <span class=\"n\">n</span>\n</code></pre></div>\n<p>then it'd be equivalent to the second one.</p>\n<p>Instead, it's the same as</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">complete</span>  <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">N</span><span class=\"o\">),</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">N</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span><span class=\"o\">),</span> <span class=\"n\">summable</span> <span class=\"n\">f</span> <span class=\"n\">n</span>\n</code></pre></div>\n<p>and that <code>N</code> in the for-all shadows the <code>N</code> from the there-exists. This is how the \"cute binders\" feature works when applied to <code>(N ≤ n)</code>.</p>",
        "id": 328531709,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1676656814
    },
    {
        "content": "<p>Oh, now I understand. No wonder my proof didn't work :P</p>",
        "id": 328582952,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1676677240
    }
]