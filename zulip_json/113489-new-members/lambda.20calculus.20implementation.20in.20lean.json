[
    {
        "content": "<p>Hi all, is there a recommended implementation of lambda calculus in lean ? Can be either the untyped or simply typed, named variables or with indexes. thanks !</p>",
        "id": 366731106,
        "sender_full_name": "Miguel Negrão",
        "timestamp": 1686903177
    },
    {
        "content": "<p>And a somewhat unrelated question (but related to implementing a function for free variables in a term), does Lean or the Std library(version 4) have sets, i.e., colections without duplicates, or do I need mathlib ?</p>",
        "id": 366934905,
        "sender_full_name": "Miguel Negrão",
        "timestamp": 1686945366
    },
    {
        "content": "<p>Is it the case that set was part of Lean 3 but was removed in Lean 4 ? I find it in the docs for lean 3 (<a href=\"https://leanprover-community.github.io/mathlib_docs/init/data/set.html#set\">https://leanprover-community.github.io/mathlib_docs/init/data/set.html#set</a>) but not for lean 4.</p>",
        "id": 367023229,
        "sender_full_name": "Miguel Negrão",
        "timestamp": 1686959036
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Set#doc\">docs4#Set</a></p>",
        "id": 367025882,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1686960558
    },
    {
        "content": "<p>Looks like it's in mathlib4</p>",
        "id": 367026075,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1686960660
    },
    {
        "content": "<p>Lean 4 core has an extremely minimal library: what is needed for the language itself. Std4 is intended to be a standard library, i.e. just the intersection of what mathematicians and programmers might want. <code>Set</code> is not exactly a \"collection\" in the programming sense, so I think it correctly belongs in mathlib for now.</p>",
        "id": 367088426,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1686989426
    },
    {
        "content": "<p>Great, thanks ! Is it not possible to display the contents of a set ?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">set1</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"mi\">0</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">set2</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"n\">set1</span> <span class=\"bp\">∪</span> <span class=\"o\">{</span> <span class=\"mi\">0</span> <span class=\"o\">}</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">set2</span>\n<span class=\"kd\">def</span> <span class=\"n\">set1</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"mi\">0</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">set2</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"n\">set1</span> <span class=\"bp\">∪</span> <span class=\"o\">{</span> <span class=\"mi\">0</span> <span class=\"o\">}</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">set2</span>\n</code></pre></div>",
        "id": 367109900,
        "sender_full_name": "Miguel Negrão",
        "timestamp": 1686994618
    },
    {
        "content": "<p>No because it might be uncountably infinite</p>",
        "id": 367110502,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1686994769
    },
    {
        "content": "<p>Can a set of naturals be uncountably infinite? Still, countably infinite might be an issue too</p>",
        "id": 367110926,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1686994877
    },
    {
        "content": "<p>Countably uninfinite? <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 367110994,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1686994906
    },
    {
        "content": "<p>I was explaining why you can't hope for there to be a general function which prints sets. No, no set of naturals can be uncountably infinite.</p>",
        "id": 367111308,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1686994982
    },
    {
        "content": "<p>Ok, I think <code>Finset</code> is enough for what I need, and that I can print.</p>",
        "id": 367115756,
        "sender_full_name": "Miguel Negrão",
        "timestamp": 1686995959
    },
    {
        "content": "<p>Yeah you can't get uncountable finsets :-)</p>",
        "id": 367118042,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1686996477
    },
    {
        "content": "<p>Is it possible to convert a Finset String to List String ?</p>",
        "id": 367137044,
        "sender_full_name": "Miguel Negrão",
        "timestamp": 1687000293
    },
    {
        "content": "<p>You'll need to define some order, but then <a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/Data/Finset/Sort.html#Finset.sort\">https://leanprover-community.github.io/mathlib4_docs/Mathlib/Data/Finset/Sort.html#Finset.sort</a> should work</p>",
        "id": 367140840,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1687001073
    },
    {
        "content": "<p>And it is not possible to do structural recursion on a Finset, is it ?</p>",
        "id": 367141965,
        "sender_full_name": "Miguel Negrão",
        "timestamp": 1687001298
    },
    {
        "content": "<p>No, but there is <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Finset.induction_on#doc\">docs4#Finset.induction_on</a> for proving.</p>",
        "id": 367209348,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1687018182
    },
    {
        "content": "<p>What inductive definition of Finest are you imagining, exactly?</p>",
        "id": 367209523,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1687018243
    },
    {
        "content": "<p>Something with empty and Finset.cons, but I imagine that as <span class=\"user-mention\" data-user-id=\"307953\">@Ruben Van de Velde</span> mentioned that would require some specific order for the elements.</p>",
        "id": 367877388,
        "sender_full_name": "Miguel Negrão",
        "timestamp": 1687257375
    },
    {
        "content": "<p>That doesn't give you finite sets because <code>a :: b</code> is different to <code>b :: a</code> and <code>a</code> is different to <code>a :: a</code>. Unless you're using a nonstandard definition of \"finite set\".</p>",
        "id": 367879124,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1687257782
    },
    {
        "content": "<p>I think Finset.sort is the way to go for what I wanted.</p>",
        "id": 367884057,
        "sender_full_name": "Miguel Negrão",
        "timestamp": 1687258927
    },
    {
        "content": "<p>with Finset.cons a :: {b} and b :: {a} are the same set:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">finset5</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"mi\">2</span><span class=\"o\">}</span>\n<span class=\"kd\">def</span> <span class=\"n\">finset6</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"mi\">1</span><span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">finseth2</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"mi\">1</span> <span class=\"bp\">∈</span> <span class=\"n\">finset5</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[]</span>\n<span class=\"kd\">def</span> <span class=\"n\">finseth3</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"mi\">2</span> <span class=\"bp\">∈</span> <span class=\"n\">finset6</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">finset7</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"n\">Finset.cons</span> <span class=\"mi\">1</span> <span class=\"n\">finset5</span> <span class=\"n\">finseth2</span>\n<span class=\"kd\">def</span> <span class=\"n\">finset8</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"n\">Finset.cons</span> <span class=\"mi\">2</span> <span class=\"n\">finset6</span> <span class=\"n\">finseth3</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">finseth4</span> <span class=\"o\">:</span> <span class=\"n\">finset7</span> <span class=\"bp\">=</span> <span class=\"n\">finset8</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span>\n</code></pre></div>",
        "id": 367887071,
        "sender_full_name": "Miguel Negrão",
        "timestamp": 1687259575
    },
    {
        "content": "<p>The order is needed to convert a finset to a list in a reproducible way, not so much for doing other things with it. Not sure I made that clear before</p>",
        "id": 367891259,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1687260386
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"583642\">Miguel Negrão</span> <a href=\"#narrow/stream/113489-new-members/topic/lambda.20calculus.20implementation.20in.20lean/near/367887071\">said</a>:</p>\n<blockquote>\n<p>with Finset.cons a :: {b} and b :: {a} are the same set:</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">finset5</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"mi\">2</span><span class=\"o\">}</span>\n<span class=\"kd\">def</span> <span class=\"n\">finset6</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"mi\">1</span><span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">finseth2</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"mi\">1</span> <span class=\"bp\">∈</span> <span class=\"n\">finset5</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[]</span>\n<span class=\"kd\">def</span> <span class=\"n\">finseth3</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"mi\">2</span> <span class=\"bp\">∈</span> <span class=\"n\">finset6</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">finset7</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"n\">Finset.cons</span> <span class=\"mi\">1</span> <span class=\"n\">finset5</span> <span class=\"n\">finseth2</span>\n<span class=\"kd\">def</span> <span class=\"n\">finset8</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"n\">Finset.cons</span> <span class=\"mi\">2</span> <span class=\"n\">finset6</span> <span class=\"n\">finseth3</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">finseth4</span> <span class=\"o\">:</span> <span class=\"n\">finset7</span> <span class=\"bp\">=</span> <span class=\"n\">finset8</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>Yes absolutely, with <em>mathlib's</em> (non-inductively defined) finsets, but the question was \"what inductive definition of <code>Finset</code> are you imagining\" and your answer was \"something with <code>empty</code> and <code>Finset.cons</code>\", and my point is that if you <em>define</em> <code>Finset</code> to be an inductive type with those constructors (which is what you would have to do to make the concept of structural recursion even make sense) then the code above won't work.</p>",
        "id": 367904377,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1687263215
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span>  got it, thanks !</p>",
        "id": 367916352,
        "sender_full_name": "Miguel Negrão",
        "timestamp": 1687265635
    },
    {
        "content": "<p>There's definitely a <code>Finset.cons</code> induction principal though: <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Finset.cons_induction#doc\">docs4#Finset.cons_induction</a></p>",
        "id": 368002833,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1687281712
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"583642\">@Miguel Negrão</span> What are you doing with <code>Finset</code>? If you find you need <code>Finset.sort</code> to turn them into lists, that suggests to me it might be the wrong type. They're not the best (though not the worst) for doing actual computations, and depending on what you're doing you might be better served by something else.</p>\n<p>It would be nice if we had a version of <code>Finset</code> that was for ordered types, where the terms are strictly increasing lists of elements. (So, a subtype rather than a subtype of a quotient type.) There are better structures still in this case; I think red-black trees would give better all-around performance, though a tradeoff is that there are multiple representations of the same set as a red-black tree so you'd need quotients again to get them to be mathematical finite sets.</p>",
        "id": 368004718,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1687282151
    },
    {
        "content": "<p>I was trying to implement the evaluation of expressions in the untyped lambda calculus ULC, for my own learning. I was using variables with names, and was trying to generate new names when doing substitution if needed for bound variables. I was using Finset for the set of free variables.  I think I will just use de bruijn indexes, seems easier to implement.</p>",
        "id": 368010064,
        "sender_full_name": "Miguel Negrão",
        "timestamp": 1687283385
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span> <a href=\"#narrow/stream/113489-new-members/topic/lambda.20calculus.20implementation.20in.20lean/near/368004718\">said</a>:</p>\n<blockquote>\n<p>It would be nice if we had a version of <code>Finset</code> that was for ordered types, where the terms are strictly increasing lists of elements. (So, a subtype rather than a subtype of a quotient type.)</p>\n</blockquote>\n<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=StrictSeries#doc\">docs4#StrictSeries</a> ?</p>",
        "id": 368063178,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1687298840
    },
    {
        "content": "<p>That's mathematically fine, but for computation you'd rather have a concrete <code>List</code> rather than a function so that the data is actually stored somewhere.</p>",
        "id": 368063844,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1687299164
    },
    {
        "content": "<p>Agreed. See <a href=\"https://github.com/leanprover-community/mathlib4/pull/3878\">!4#3878</a> for related discussion.</p>",
        "id": 368065782,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1687300133
    }
]