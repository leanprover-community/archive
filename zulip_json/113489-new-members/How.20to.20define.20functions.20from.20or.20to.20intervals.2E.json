[
    {
        "content": "<p>Hi everybody :)</p>\n<p>I want to prove statements like this in Lean 4:<br>\nShow that \\R and (√2, +∞) have equal cardinality by describing a bijection from one to the other. Describe your bijection with a formula.</p>\n<p>I already know how to show that a function is injective and surjective, but I don’t know how to define a function from \\R to (√2, +∞) in Lean.<br>\nIs that possible? I want to use the function f(x) = √2 + e^x.</p>\n<p>Thank you all in advance!</p>",
        "id": 401516032,
        "sender_full_name": "Mattia Bottoni",
        "timestamp": 1699713530
    },
    {
        "content": "<p>You can use <code> ℝ → Set.Ioi (Real.sqrt 2)</code>  as the type of the function</p>",
        "id": 401516416,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1699713955
    },
    {
        "content": "<p>(<a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Set.Ioi#doc\">docs#Set.Ioi</a>)</p>",
        "id": 401516468,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1699713988
    },
    {
        "content": "<p>Alternatively, write something like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span> <span class=\"n\">Real.sqrt</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">Real.exp</span> <span class=\"n\">x</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">Set.MapsTo</span> <span class=\"n\">f</span> <span class=\"n\">Set.univ</span> <span class=\"o\">(</span><span class=\"n\">Set.Ioi</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">Real.sqrt</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 401516492,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1699714034
    },
    {
        "content": "<p>Or more to the point,</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span> <span class=\"n\">Real.sqrt</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">Real.exp</span> <span class=\"n\">x</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">Set.BijOn</span> <span class=\"n\">f</span> <span class=\"n\">Set.univ</span> <span class=\"o\">(</span><span class=\"n\">Set.Ioi</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">Real.sqrt</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 401516547,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1699714084
    },
    {
        "content": "<p>Is this missing from mathlib?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">C</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span>  <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">Set.SurjOn</span> <span class=\"n\">g</span> <span class=\"n\">s</span> <span class=\"o\">(</span><span class=\"n\">Set.Ioi</span> <span class=\"mi\">0</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Set.SurjOn</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">g</span> <span class=\"bp\">·</span><span class=\"o\">)</span> <span class=\"n\">s</span> <span class=\"o\">(</span><span class=\"n\">Set.Ioi</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">x</span> <span class=\"n\">hx</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">Set.Ioi</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">simpa</span> <span class=\"n\">using</span> <span class=\"n\">hx</span>\n  <span class=\"n\">simpa</span> <span class=\"o\">[</span><span class=\"n\">eq_sub_iff_add_eq'</span><span class=\"o\">]</span> <span class=\"n\">using</span> <span class=\"n\">h</span> <span class=\"n\">this</span>\n</code></pre></div>\n<p>(can be generalized, presumably)</p>",
        "id": 401518680,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1699716128
    },
    {
        "content": "<p>This is basically just composition with a bijective function. But it's not in mathlib verbatim.</p>",
        "id": 401518853,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1699716246
    },
    {
        "content": "<p>Thanks for the pointer; the other function doesn't even need to be bijective (or surjective):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">C</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span>  <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">Set.SurjOn</span> <span class=\"n\">g</span> <span class=\"n\">s</span> <span class=\"o\">(</span><span class=\"n\">Set.Ioi</span> <span class=\"mi\">0</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Set.SurjOn</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">g</span> <span class=\"bp\">·</span><span class=\"o\">)</span> <span class=\"n\">s</span> <span class=\"o\">(</span><span class=\"n\">Set.Ioi</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simpa</span> <span class=\"n\">using</span> <span class=\"n\">h.comp_left</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"bp\">·</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 401538082,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1699731762
    },
    {
        "content": "<p>I'm also surprised we don't seem to have</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">Set.SurjOn</span> <span class=\"n\">g</span> <span class=\"n\">Set.univ</span> <span class=\"o\">(</span><span class=\"n\">Set.range</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">x</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">Set.image_univ</span><span class=\"o\">,</span> <span class=\"n\">imp_self</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 401538335,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1699731973
    },
    {
        "content": "<p>It's a corollary of <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Set.surjOn_image#doc\">docs#Set.surjOn_image</a></p>",
        "id": 401538372,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1699732021
    },
    {
        "content": "<p>Thanks again, Yaëlsearch :)</p>",
        "id": 401538611,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1699732296
    },
    {
        "content": "<p>Thank you all for your efforts :)</p>",
        "id": 401608500,
        "sender_full_name": "Mattia Bottoni",
        "timestamp": 1699790803
    }
]