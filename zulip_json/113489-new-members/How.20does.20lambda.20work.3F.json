[
    {
        "content": "<p>Hey, I have been trying to use a basic lambda expression in Lean. If I have something like <code>(λx : N, x) m </code>and <code>m : N</code>, then how can I simplify this expression to just m?</p>",
        "id": 324343988,
        "sender_full_name": "Boldizsar Mann",
        "timestamp": 1674936192
    },
    {
        "content": "<p>In tactic mode <code>dsimp</code> should work.</p>",
        "id": 324344260,
        "sender_full_name": "Kalle Kytölä",
        "timestamp": 1674936394
    },
    {
        "content": "<p>Oh thanks!</p>",
        "id": 324344363,
        "sender_full_name": "Boldizsar Mann",
        "timestamp": 1674936482
    },
    {
        "content": "<p>Also <code>simp</code> should do this, I believe, but it might also do other things. As far as I understand, <code>dsimp</code> is meant to do only the type of things that you asked for.</p>",
        "id": 324344433,
        "sender_full_name": "Kalle Kytölä",
        "timestamp": 1674936539
    },
    {
        "content": "<p>Note that they are definitionally equal, so you should be able to use them interchangeably in a term mode proof.</p>",
        "id": 324362777,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1674951440
    },
    {
        "content": "<p>The simp tactic looks for applicable facts to apply the replace tactic with. In this case, what fact is applied here?</p>",
        "id": 324407944,
        "sender_full_name": "Boldizsar Mann",
        "timestamp": 1674985722
    },
    {
        "content": "<p>Simp also performs beta and eta reduction (and a few other reductions).<br>\nThe expression <code>(λ (x : N), x) m</code> beta-reduces to <code>m</code>.</p>",
        "id": 324411420,
        "sender_full_name": "Patrick Johnson",
        "timestamp": 1674987579
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"373986\">Kalle Kytölä</span> <a href=\"#narrow/stream/113489-new-members/topic/How.20does.20lambda.20work.3F/near/324344433\">said</a>:</p>\n<blockquote>\n<p>Also <code>simp</code> should do this, I believe, but it might also do other things. As far as I understand, <code>dsimp</code> is meant to do only the type of things that you asked for.</p>\n</blockquote>\n<p><code>dsimp</code> will rewrite with all <code>@[simp]</code> lemmas that are proven by reflexivity. <code>dsimp only</code> will not do this, and can be used to just do reduction/computation that are built into the type theory. This doesn't involve applying any lemmas, just computing. The list of computations Lean can perform without applying any lemmas is here: <a href=\"https://leanprover.github.io/reference/expressions.html#computation\">https://leanprover.github.io/reference/expressions.html#computation</a></p>",
        "id": 324418193,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1674991171
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"408733\">Boldizsar Mann</span> <a href=\"#narrow/stream/113489-new-members/topic/How.20does.20lambda.20work.3F/near/324407944\">said</a>:</p>\n<blockquote>\n<p>The simp tactic looks for applicable facts to apply the replace tactic with. In this case, what fact is applied here?</p>\n</blockquote>\n<p><code>simp</code>, <code>simp only</code>, <code>dsimp</code>, <code>dsimp only</code> will all do computation (and some of them will also rewrite with lemmas), see my previous message.</p>",
        "id": 324418356,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1674991240
    },
    {
        "content": "<blockquote>\n<p>This doesn't involve applying any lemmas, just computing</p>\n</blockquote>\n<p>You could probably argue that <code>dsimp</code> doesn't \"apply\" any lemmas: it uses lemmas to inform what the new goal should be, but then ultimately lets the kernel compute that the result and original are the same by definition, and doesn't attempt to build up a proof one lemma at a time.</p>",
        "id": 324483749,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1675022474
    }
]