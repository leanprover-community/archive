[
    {
        "content": "<p>Hi, suppose I have goal <code>α → β</code> and an hypothesis <code>γ → β</code>. Is there a tactic that converts the goal to <code>α → γ</code> and then solves with a syllogism? It's easy to do that with <code>intros</code> and <code>apply</code>, but it really seems a common enough schema that it would warrant a tactic on its own. For example, a particular case of that would be then you're dealing with negations and <code>β</code> is <code>false</code>.</p>",
        "id": 353165540,
        "sender_full_name": "Giovanni Mascellani",
        "timestamp": 1682584696
    },
    {
        "content": "<p>You can write</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">γ</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">γ</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">apply</span> <span class=\"n\">implies.trans</span> <span class=\"n\">_</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>to change the goal to <code>implies α γ</code> which is defined to be <code>a → b</code>. If you want to use it with <code>false</code>, you also have <code>apply not.intro</code>.</p>",
        "id": 353236566,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1682594589
    },
    {
        "content": "<p>Why not just this? Note that this version also works with <code>Type*</code> or with <code>¬ γ</code> and <code>¬ β</code> where <code>β γ : Prop</code>.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">γ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">γ</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">refine</span> <span class=\"n\">h</span> <span class=\"bp\">∘</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 353325244,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1682605787
    },
    {
        "content": "<p>Thanks to both. In the end I decided that in general I really want to do <code>intros α</code> anyway, so I am not saving many keystrokes anyway and, in a sense, my original question was not what I really needed. But thanks for taking the time to answer anyway.</p>",
        "id": 354031490,
        "sender_full_name": "Giovanni Mascellani",
        "timestamp": 1682708829
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"246262\">Giovanni Mascellani</span> has marked this topic as resolved.</p>",
        "id": 354031501,
        "sender_full_name": "Notification Bot",
        "timestamp": 1682708834
    }
]