[
    {
        "content": "<p>I want to prove the theorem about the number of graphs over some fintype, To get familliar with this kind of proofs I started with simplified version.<br>\nAssuming the folowing definitions</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.fintype.big_operators</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n\n<span class=\"kd\">@[ext]</span>\n<span class=\"kd\">structure</span> <span class=\"n\">func</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">V</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">fintype</span>\n\n<span class=\"kd\">@[instance]</span>\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">func.fintype</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">fintype</span> <span class=\"o\">(</span><span class=\"n\">func</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n   <span class=\"n\">classical</span><span class=\"o\">,</span>\n   <span class=\"n\">exact</span> <span class=\"n\">of_injective</span> <span class=\"n\">func.f</span> <span class=\"n\">func.ext</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>prove that <br>\n<code> theorem my_card_func [fintype V] : card (func V) = 2 ^ card V := sorry</code></p>\n<p>I did it with isomerphism as follow</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">on_f</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">card</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"bp\">^</span> <span class=\"n\">card</span> <span class=\"n\">V</span> <span class=\"o\">:=</span> <span class=\"n\">card_fun</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">theorem</span> <span class=\"n\">func_def</span> <span class=\"o\">(</span><span class=\"n\">fu</span> <span class=\"o\">:</span> <span class=\"n\">V</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">func.mk</span> <span class=\"n\">fu</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">fu</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">left_inv</span> <span class=\"o\">:</span> <span class=\"n\">function.left_inverse</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">func.mk</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">func.f</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intros</span> <span class=\"n\">funcV</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">func.ext</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">right_inv</span> <span class=\"o\">:</span> <span class=\"n\">function.right_inverse</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">func.mk</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">func.f</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intros</span> <span class=\"n\">funcV</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">func_iso_f</span> <span class=\"o\">:</span> <span class=\"n\">func</span> <span class=\"n\">V</span> <span class=\"bp\">≃</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span><span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"n\">func.f</span><span class=\"o\">,</span> <span class=\"n\">inv_fun</span> <span class=\"o\">:=</span> <span class=\"n\">func.mk</span><span class=\"o\">,</span> <span class=\"n\">left_inv</span> <span class=\"o\">:=</span> <span class=\"n\">left_inv</span><span class=\"o\">,</span> <span class=\"n\">right_inv</span> <span class=\"o\">:=</span> <span class=\"n\">right_inv</span><span class=\"o\">}</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">my_card_func</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">card</span> <span class=\"o\">(</span><span class=\"n\">func</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"bp\">^</span> <span class=\"n\">card</span> <span class=\"n\">V</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[(</span><span class=\"n\">fintype.card_congr</span> <span class=\"n\">func_iso_f</span><span class=\"o\">)],</span>\n  <span class=\"n\">exact</span> <span class=\"n\">on_f</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>There is a way to simplify the proof?</p>",
        "id": 362154911,
        "sender_full_name": "Shimon Cohen",
        "timestamp": 1685446731
    },
    {
        "content": "<p>I would recommend using <code>func_iso_f</code> to define the <code>: fintype (func V)</code> instance in the first place (via <a href=\"https://leanprover-community.github.io/mathlib_docs/find/fintype.of_equiv\">docs#fintype.of_equiv</a>)</p>",
        "id": 362155504,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1685446873
    }
]