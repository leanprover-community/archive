[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Analysis.Convex.Function</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Real.EReal</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Topology.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Topology.Sequences</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Order.Filter.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Order.LiminfLimsup</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Set.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Logic.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Order.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Topology.Sets.Closeds</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Topology.Bases</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">EReal</span> <span class=\"n\">Function</span> <span class=\"n\">Topology</span> <span class=\"n\">Filter</span> <span class=\"n\">Set</span> <span class=\"n\">TopologicalSpace</span>\n\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"bp\">𝕜</span> <span class=\"n\">E</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"n\">OrderedSemiring</span> <span class=\"bp\">𝕜</span><span class=\"o\">]</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"n\">AddCommMonoid</span> <span class=\"n\">E</span><span class=\"o\">]</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"bp\">𝕜</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">E</span> <span class=\"bp\">→</span> <span class=\"n\">EReal</span><span class=\"o\">)[</span><span class=\"n\">SMul</span> <span class=\"bp\">𝕜</span> <span class=\"n\">E</span><span class=\"o\">]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">properfun</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"bp\">⊤</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">&gt;</span> <span class=\"bp\">⊥</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">dom</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">E</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"bp\">|</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"bp\">⊤</span><span class=\"o\">}</span> <span class=\"bp\">∩</span> <span class=\"n\">s</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">sublevel</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">EReal</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">E</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span> <span class=\"bp\">|</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">r</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">uplevel</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">EReal</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">E</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span> <span class=\"bp\">|</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">&gt;</span> <span class=\"n\">r</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">epigraph</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">E</span> <span class=\"bp\">×</span> <span class=\"n\">EReal</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">E</span> <span class=\"bp\">×</span> <span class=\"n\">EReal</span> <span class=\"bp\">|</span> <span class=\"n\">p.1</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span> <span class=\"bp\">∧</span> <span class=\"n\">f</span> <span class=\"n\">p.1</span> <span class=\"bp\">≤</span> <span class=\"n\">p.2</span><span class=\"o\">}</span>\n<span class=\"c1\">-- {p : E × β | p.1 ∈ s ∧ f p.1 ≤ p.2}</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"n\">TopologicalSpace</span> <span class=\"bp\">𝕜</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">PseudoMetricSpace</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">TopologicalSpace</span> <span class=\"n\">EReal</span><span class=\"o\">]</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"n\">SequentialSpace</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">SequentialSpace</span> <span class=\"n\">EReal</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">SequentialSpace</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">E</span> <span class=\"bp\">×</span> <span class=\"n\">EReal</span><span class=\"o\">]</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"n\">OrderTopology</span> <span class=\"n\">EReal</span><span class=\"o\">]</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"n\">FirstCountableTopology</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">FirstCountableTopology</span> <span class=\"n\">EReal</span><span class=\"o\">]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">closedfunc</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"n\">IsClosed</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">epigraph</span> <span class=\"n\">s</span> <span class=\"n\">f</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">lo_semicontinuous</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"o\">(</span><span class=\"n\">liminf</span> <span class=\"n\">f</span> <span class=\"bp\">&lt;|</span> <span class=\"bp\">𝓝</span><span class=\"o\">[</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n\n<span class=\"kn\">section</span> <span class=\"n\">IsClosed</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Closeds</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">E</span> <span class=\"bp\">→</span> <span class=\"n\">EReal</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">SMul</span> <span class=\"bp\">𝕜</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">SMul</span> <span class=\"bp\">𝕜</span> <span class=\"n\">EReal</span><span class=\"o\">]</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">aux12</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">EReal</span><span class=\"o\">),</span> <span class=\"n\">IsClosed</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">sublevel</span> <span class=\"n\">s</span> <span class=\"n\">f</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">lo_semicontinuous</span> <span class=\"n\">s</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">by_contra</span> <span class=\"n\">h</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">lo_semicontinuous</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n  <span class=\"n\">push_neg</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">hx</span><span class=\"o\">⟩⟩</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">exists_between</span> <span class=\"n\">hx</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">ltt</span><span class=\"o\">,</span> <span class=\"n\">tlt</span><span class=\"o\">⟩⟩</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">sublevel</span> <span class=\"n\">s</span> <span class=\"n\">f</span> <span class=\"n\">t</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">apply</span> <span class=\"o\">(</span><span class=\"n\">isClosed_iff_frequently.mp</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n    <span class=\"k\">have</span> <span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"bp\">∃ᶠ</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"k\">in</span> <span class=\"bp\">𝓝</span><span class=\"o\">[</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">y</span> <span class=\"bp\">&lt;</span> <span class=\"n\">t</span> <span class=\"o\">:=</span> <span class=\"n\">frequently_lt_of_liminf_lt</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">isBoundedDefault</span><span class=\"o\">)</span> <span class=\"n\">ltt</span>\n    <span class=\"k\">have</span> <span class=\"n\">h1'</span> <span class=\"o\">:</span> <span class=\"bp\">∃ᶠ</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"k\">in</span> <span class=\"bp\">𝓝</span><span class=\"o\">[</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">y</span> <span class=\"bp\">≤</span> <span class=\"n\">t</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n      <span class=\"n\">apply</span> <span class=\"n\">frequently_iff.mpr</span>\n      <span class=\"n\">intro</span> <span class=\"n\">_</span> <span class=\"n\">hu</span>\n      <span class=\"n\">rcases</span> <span class=\"o\">((</span><span class=\"n\">frequently_iff.mp</span> <span class=\"n\">h1</span><span class=\"o\">)</span> <span class=\"n\">hu</span><span class=\"o\">)</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">xu</span><span class=\"o\">,</span> <span class=\"n\">fx</span><span class=\"o\">⟩</span>\n      <span class=\"n\">exact</span> <span class=\"n\">Exists.intro</span> <span class=\"n\">x</span> <span class=\"o\">{</span> <span class=\"n\">left</span> <span class=\"o\">:=</span> <span class=\"n\">xu</span><span class=\"o\">,</span> <span class=\"n\">right</span> <span class=\"o\">:=</span> <span class=\"n\">LT.lt.le</span> <span class=\"n\">fx</span> <span class=\"o\">}</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"bp\">∃ᶠ</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"k\">in</span> <span class=\"bp\">𝓝</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">y</span> <span class=\"bp\">≤</span> <span class=\"n\">t</span> <span class=\"bp\">∧</span> <span class=\"n\">y</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span> <span class=\"o\">:=</span> <span class=\"n\">frequently_nhdsWithin_iff.mp</span> <span class=\"n\">h1'</span>\n    <span class=\"n\">apply</span> <span class=\"n\">frequently_iff.mpr</span>\n    <span class=\"n\">intro</span> <span class=\"n\">_</span> <span class=\"n\">hu</span>\n    <span class=\"n\">rcases</span> <span class=\"o\">((</span><span class=\"n\">frequently_iff.mp</span> <span class=\"n\">this</span><span class=\"o\">)</span> <span class=\"n\">hu</span><span class=\"o\">)</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">xu</span><span class=\"o\">,</span> <span class=\"n\">fx</span><span class=\"o\">,</span> <span class=\"n\">xs</span><span class=\"o\">⟩</span>\n    <span class=\"n\">exact</span> <span class=\"n\">Exists.intro</span> <span class=\"n\">x</span> <span class=\"o\">{</span> <span class=\"n\">left</span> <span class=\"o\">:=</span> <span class=\"n\">xu</span><span class=\"o\">,</span> <span class=\"n\">right</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">left</span> <span class=\"o\">:=</span> <span class=\"n\">xs</span><span class=\"o\">,</span> <span class=\"n\">right</span> <span class=\"o\">:=</span> <span class=\"n\">fx</span> <span class=\"o\">}</span> <span class=\"o\">}</span>\n  <span class=\"n\">apply</span> <span class=\"n\">not_le_of_gt</span> <span class=\"n\">tlt</span> <span class=\"o\">(</span><span class=\"n\">mem_setOf.mp</span> <span class=\"n\">this</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">2</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">aux23</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">lo_semicontinuous</span> <span class=\"n\">s</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">closedfunc</span> <span class=\"n\">s</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">apply</span> <span class=\"n\">IsSeqClosed.isClosed</span>\n  <span class=\"n\">intro</span> <span class=\"n\">f'</span> <span class=\"o\">⟨</span><span class=\"n\">x'</span><span class=\"o\">,</span> <span class=\"n\">y'</span><span class=\"o\">⟩</span> <span class=\"n\">hxy</span> <span class=\"n\">cxy</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Prod.tendsto_iff</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">cxy</span>\n  <span class=\"k\">let</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">E</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">f'</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span>\n  <span class=\"k\">have</span> <span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">x</span> <span class=\"n\">n</span> <span class=\"bp\">∈</span> <span class=\"bp\">↑</span> <span class=\"n\">s</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span>  <span class=\"o\">(</span><span class=\"n\">hxy</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span>\n  <span class=\"k\">have</span> <span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">x'</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span> <span class=\"o\">:=</span>\n    <span class=\"n\">SetLike.mem_coe.mp</span> <span class=\"o\">((</span><span class=\"n\">isSeqClosed_iff_isClosed.mpr</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">Closeds.closed</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"n\">hx</span> <span class=\"n\">cxy.1</span><span class=\"o\">)</span>\n  <span class=\"k\">have</span> <span class=\"n\">cx</span> <span class=\"o\">:</span> <span class=\"n\">Tendsto</span> <span class=\"n\">x</span> <span class=\"n\">atTop</span> <span class=\"o\">(</span><span class=\"bp\">𝓝</span><span class=\"o\">[</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"n\">x'</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n    <span class=\"n\">tendsto_nhdsWithin_iff.mpr</span> <span class=\"o\">⟨</span><span class=\"n\">cxy.1</span><span class=\"o\">,</span> <span class=\"n\">eventually_of_forall</span> <span class=\"n\">hx</span><span class=\"o\">⟩</span>\n  <span class=\"k\">let</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">EReal</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">f'</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">2</span>\n  <span class=\"k\">have</span> <span class=\"n\">xley</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">∘</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">n</span> <span class=\"bp\">≤</span> <span class=\"n\">y</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n    <span class=\"k\">fun</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Trans.trans</span> <span class=\"o\">(</span><span class=\"n\">Trans.trans</span> <span class=\"o\">(</span><span class=\"n\">Eq.refl</span> <span class=\"o\">((</span><span class=\"n\">f</span> <span class=\"bp\">∘</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">hxy</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Eq.refl</span> <span class=\"o\">(</span><span class=\"n\">f'</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">)</span>\n  <span class=\"k\">have</span> <span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">x'</span> <span class=\"bp\">≤</span> <span class=\"n\">y'</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"k\">calc</span>\n      <span class=\"n\">f</span> <span class=\"n\">x'</span> <span class=\"bp\">≤</span> <span class=\"n\">liminf</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"bp\">𝓝</span><span class=\"o\">[</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"n\">x'</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">hf</span> <span class=\"n\">x'</span> <span class=\"n\">h1</span>\n      <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"n\">sSup</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"bp\">|</span> <span class=\"bp\">∀ᶠ</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"k\">in</span> <span class=\"bp\">𝓝</span><span class=\"o\">[</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"n\">x'</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">f</span> <span class=\"n\">n</span><span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span><span class=\"o\">[</span><span class=\"n\">liminf_eq</span><span class=\"o\">]</span>\n      <span class=\"n\">_</span> <span class=\"bp\">≤</span> <span class=\"n\">sSup</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"bp\">|</span> <span class=\"bp\">∀ᶠ</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"k\">in</span> <span class=\"n\">atTop</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">∘</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">n</span><span class=\"o\">}</span> <span class=\"o\">:=</span>\n        <span class=\"n\">sSup_le_sSup</span>\n        <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"n\">fa</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">mem_setOf.mpr</span> <span class=\"o\">((</span><span class=\"n\">eventually_iff_seq_eventually.mp</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">mem_setOf.mp</span> <span class=\"n\">fa</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"n\">cx</span><span class=\"o\">)</span>\n      <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"n\">liminf</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">∘</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">atTop</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span><span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">liminf_eq</span><span class=\"o\">]</span>\n      <span class=\"n\">_</span> <span class=\"bp\">≤</span> <span class=\"n\">liminf</span> <span class=\"n\">y</span> <span class=\"n\">atTop</span> <span class=\"o\">:=</span> <span class=\"n\">liminf_le_liminf</span> <span class=\"o\">(</span><span class=\"n\">eventually_of_forall</span> <span class=\"n\">xley</span><span class=\"o\">)</span>\n      <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"n\">y'</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">cxy.2</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">liminf_eq</span>\n  <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">h1</span><span class=\"o\">,</span> <span class=\"n\">h2</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">aux31</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">closedfunc</span> <span class=\"n\">s</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">EReal</span><span class=\"o\">),</span> <span class=\"n\">IsClosed</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">sublevel</span> <span class=\"n\">s</span> <span class=\"n\">f</span> <span class=\"n\">r</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">r</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">isSeqClosed_iff_isClosed</span><span class=\"o\">]</span>\n  <span class=\"n\">intro</span> <span class=\"n\">x</span> <span class=\"n\">x'</span> <span class=\"n\">xns</span> <span class=\"n\">cx</span>\n  <span class=\"n\">exact</span> <span class=\"n\">IsClosed.isSeqClosed</span> <span class=\"n\">hf</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">xns</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Tendsto.prod_mk_nhds</span> <span class=\"n\">cx</span> <span class=\"n\">tendsto_const_nhds</span><span class=\"o\">)</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">aux31'</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">E</span> <span class=\"bp\">→</span> <span class=\"n\">EReal</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">closedfunc</span> <span class=\"n\">s</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">EReal</span><span class=\"o\">),</span> <span class=\"n\">IsClosed</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">sublevel</span> <span class=\"n\">s</span> <span class=\"n\">f</span> <span class=\"n\">r</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">r</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">isSeqClosed_iff_isClosed</span><span class=\"o\">]</span>\n  <span class=\"n\">intro</span> <span class=\"n\">x</span> <span class=\"n\">x'</span> <span class=\"n\">xns</span> <span class=\"n\">cx</span>\n  <span class=\"n\">exact</span> <span class=\"n\">IsClosed.isSeqClosed</span> <span class=\"n\">hf</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">xns</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Tendsto.prod_mk_nhds</span> <span class=\"n\">cx</span> <span class=\"n\">tendsto_const_nhds</span><span class=\"o\">)</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">eq12</span> <span class=\"o\">:</span>  <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">EReal</span><span class=\"o\">),</span> <span class=\"n\">IsClosed</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">sublevel</span> <span class=\"n\">s</span> <span class=\"n\">f</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"n\">lo_semicontinuous</span> <span class=\"n\">s</span> <span class=\"n\">f</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨</span><span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">aux12</span> <span class=\"n\">s</span> <span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">aux31</span> <span class=\"n\">s</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">aux23</span> <span class=\"n\">s</span> <span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">)⟩</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">eq23</span> <span class=\"o\">:</span> <span class=\"n\">lo_semicontinuous</span> <span class=\"n\">s</span> <span class=\"n\">f</span> <span class=\"bp\">↔</span> <span class=\"n\">closedfunc</span> <span class=\"n\">s</span> <span class=\"n\">f</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨</span><span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">aux23</span> <span class=\"n\">s</span> <span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">aux12</span> <span class=\"n\">s</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">aux31</span> <span class=\"n\">s</span> <span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">)⟩</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">eq31</span> <span class=\"o\">:</span> <span class=\"n\">closedfunc</span> <span class=\"n\">s</span> <span class=\"n\">f</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">EReal</span><span class=\"o\">),</span> <span class=\"n\">IsClosed</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">sublevel</span> <span class=\"n\">s</span> <span class=\"n\">f</span> <span class=\"n\">r</span><span class=\"o\">):=</span>\n  <span class=\"o\">⟨</span><span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">aux31</span> <span class=\"n\">s</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"o\">,</span> <span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">aux23</span> <span class=\"n\">s</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">aux12</span> <span class=\"n\">s</span> <span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">)⟩</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">IsClosed</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">closed_of_continuous</span> <span class=\"o\">(</span><span class=\"n\">hs</span> <span class=\"o\">:</span> <span class=\"n\">IsClosed</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">Continuous</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">closedfunc</span> <span class=\"n\">s</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">apply</span> <span class=\"n\">IsSeqClosed.isClosed</span>\n  <span class=\"n\">intro</span> <span class=\"n\">xt</span> <span class=\"n\">prod</span> <span class=\"n\">h</span> <span class=\"n\">cxt</span>\n  <span class=\"n\">rcases</span> <span class=\"o\">(</span><span class=\"n\">Prod.tendsto_iff</span> <span class=\"n\">xt</span> <span class=\"n\">prod</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mp</span> <span class=\"n\">cxt</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">cx</span><span class=\"o\">,</span> <span class=\"n\">ct</span><span class=\"o\">⟩</span>\n  <span class=\"k\">have</span> <span class=\"n\">cfx</span> <span class=\"o\">:</span> <span class=\"n\">Tendsto</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"bp\">𝓝</span> <span class=\"n\">prod.1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">𝓝</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">prod.1</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"n\">Continuous.continuousAt</span> <span class=\"n\">hf</span>\n  <span class=\"n\">constructor</span>\n  <span class=\"bp\">·</span> <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">IsClosed.isSeqClosed</span> <span class=\"n\">hs</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">cx</span>\n  <span class=\"bp\">·</span> <span class=\"n\">exact</span> <span class=\"n\">le_of_tendsto_of_tendsto'</span> <span class=\"o\">(</span><span class=\"n\">Tendsto.comp</span> <span class=\"n\">cfx</span> <span class=\"n\">cx</span><span class=\"o\">)</span> <span class=\"n\">ct</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">)</span>\n\n\n<span class=\"k\">#check</span> <span class=\"bp\">@</span><span class=\"n\">le_of_tendsto_of_tendsto'</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">aux</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span>  <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">EReal</span><span class=\"o\">),</span> <span class=\"n\">IsClosed</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">sublevel</span> <span class=\"n\">s</span> <span class=\"n\">f</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">closedfunc</span> <span class=\"n\">s</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n\n\n<span class=\"kd\">theorem</span> <span class=\"n\">sup_closed</span> <span class=\"o\">:</span> <span class=\"n\">closedfunc</span> <span class=\"n\">s</span> <span class=\"o\">(</span><span class=\"n\">sSup</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">E</span> <span class=\"bp\">→</span> <span class=\"n\">EReal</span> <span class=\"bp\">|</span> <span class=\"n\">closedfunc</span> <span class=\"n\">s</span> <span class=\"n\">f</span><span class=\"o\">})</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:(</span><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">EReal</span><span class=\"o\">),</span> <span class=\"n\">IsClosed</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">sublevel</span> <span class=\"n\">s</span> <span class=\"o\">(</span><span class=\"n\">sSup</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">E</span> <span class=\"bp\">→</span> <span class=\"n\">EReal</span> <span class=\"bp\">|</span> <span class=\"n\">closedfunc</span> <span class=\"n\">s</span> <span class=\"n\">f</span><span class=\"o\">})</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"k\">have</span> <span class=\"n\">h1</span> <span class=\"o\">:(</span><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">EReal</span><span class=\"o\">),</span> <span class=\"bp\">∀</span> <span class=\"n\">f</span> <span class=\"bp\">∈</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">E</span> <span class=\"bp\">→</span> <span class=\"n\">EReal</span> <span class=\"bp\">|</span> <span class=\"n\">closedfunc</span> <span class=\"n\">s</span> <span class=\"n\">f</span><span class=\"o\">},</span> <span class=\"n\">IsClosed</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">sublevel</span> <span class=\"n\">s</span> <span class=\"n\">f</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n      <span class=\"n\">exact</span> <span class=\"k\">fun</span> <span class=\"n\">r</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">aux31'</span> <span class=\"n\">s</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"n\">r</span>\n    <span class=\"gr\">sorry</span>\n  <span class=\"n\">exact</span> <span class=\"n\">aux</span> <span class=\"n\">s</span> <span class=\"o\">(</span><span class=\"n\">sSup</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"bp\">|</span> <span class=\"n\">closedfunc</span> <span class=\"n\">s</span> <span class=\"n\">f</span><span class=\"o\">})</span> <span class=\"n\">h</span>\n</code></pre></div>\n<p>Maybe someone knows how to make up the last sorry, I think this involves the problem of infinite union, which is obvious in mathematics but I don't know how to do it in lean.</p>",
        "id": 387615267,
        "sender_full_name": "tsuki  hao",
        "timestamp": 1693208175
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"631681\">tsuki  hao</span> has marked this topic as resolved.</p>",
        "id": 387620095,
        "sender_full_name": "Notification Bot",
        "timestamp": 1693210334
    }
]