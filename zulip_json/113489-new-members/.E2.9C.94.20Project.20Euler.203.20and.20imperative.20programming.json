[
    {
        "content": "<p>Some time ago I tried to solve the 3rd exercise of Project Euler or, more specifically, prove the correctness of <a href=\"https://raw.githubusercontent.com/LessnessRandomness/PE/main/EulerProject3.c\">this tiny C program</a> using Coq and VST (Verified Software Toolchain). I got stuck, which is probably not surprising.</p>\n<p>Now I had sudden idea to write the corresponding imperative style program in Lean (using monads etc.) with the end goal of posting it as challenge - for challengers to prove that it actually works correctly - and then learning from them and finishing my Coq proof about C program if possible.</p>\n<p>So, the first question is, probably, if there is some tutorial for the first step - writing such Lean function/program?</p>",
        "id": 404044038,
        "sender_full_name": "Lessness",
        "timestamp": 1700877400
    },
    {
        "content": "<p>Ok, so this is the same algorithm in Haskell, quite simple actually (I was expecting smth more terrifying because I was scared by global variable at first):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">repeatedDiv</span> <span class=\"n\">n</span> <span class=\"n\">f</span> <span class=\"n\">highest</span>\n    <span class=\"bp\">|</span> <span class=\"n\">n</span> <span class=\"bp\">`</span><span class=\"n\">mod</span><span class=\"bp\">`</span> <span class=\"n\">f</span> <span class=\"bp\">/=</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">highest</span><span class=\"o\">)</span>\n    <span class=\"bp\">|</span> <span class=\"n\">otherwise</span>      <span class=\"bp\">=</span> <span class=\"n\">repeatedDiv</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">`</span><span class=\"n\">div</span><span class=\"bp\">`</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">f</span> <span class=\"n\">highest</span><span class=\"o\">)</span>\n\n<span class=\"n\">loop</span> <span class=\"n\">n</span> <span class=\"n\">f</span> <span class=\"n\">highest</span>\n    <span class=\"bp\">|</span> <span class=\"n\">f</span> <span class=\"bp\">*</span> <span class=\"n\">f</span> <span class=\"bp\">&lt;=</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">n1</span><span class=\"o\">,</span> <span class=\"n\">highest1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">repeatedDiv</span> <span class=\"n\">n</span> <span class=\"n\">f</span> <span class=\"n\">highest</span> <span class=\"k\">in</span>\n                   <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">n2</span><span class=\"o\">,</span> <span class=\"n\">highest2</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">repeatedDiv</span> <span class=\"n\">n1</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"n\">highest1</span> <span class=\"k\">in</span>\n                   <span class=\"n\">loop</span> <span class=\"n\">n2</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">+</span> <span class=\"mi\">6</span><span class=\"o\">)</span> <span class=\"n\">highest2</span>\n    <span class=\"bp\">|</span> <span class=\"n\">otherwise</span>  <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">highest</span><span class=\"o\">)</span>\n\n<span class=\"n\">find</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">n1</span><span class=\"o\">,</span> <span class=\"n\">highest1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">repeatedDiv</span> <span class=\"n\">n</span> <span class=\"mi\">2</span> <span class=\"mi\">1</span> <span class=\"k\">in</span>\n         <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">n2</span><span class=\"o\">,</span> <span class=\"n\">highest2</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">repeatedDiv</span> <span class=\"n\">n1</span> <span class=\"mi\">3</span> <span class=\"n\">highest1</span> <span class=\"k\">in</span>\n         <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">n3</span><span class=\"o\">,</span> <span class=\"n\">highest3</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">loop</span> <span class=\"n\">n2</span> <span class=\"mi\">5</span> <span class=\"n\">highest2</span> <span class=\"k\">in</span>\n         <span class=\"k\">if</span> <span class=\"n\">n3</span> <span class=\"bp\">/=</span> <span class=\"mi\">1</span> <span class=\"k\">then</span> <span class=\"n\">n3</span> <span class=\"k\">else</span> <span class=\"n\">highest3</span>\n\n<span class=\"n\">main</span> <span class=\"bp\">=</span> <span class=\"n\">print</span> <span class=\"o\">(</span><span class=\"n\">find</span> <span class=\"mi\">600851475143</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>Next step to write this in Lean.</p>",
        "id": 404314623,
        "sender_full_name": "Lessness",
        "timestamp": 1701050646
    },
    {
        "content": "<p>Done (I believe?).</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">partial</span> <span class=\"kd\">def</span> <span class=\"n\">repeatedDiv</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">f</span> <span class=\"n\">highest</span><span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">):</span> <span class=\"n\">Prod</span> <span class=\"n\">Nat</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span>\n    <span class=\"k\">match</span> <span class=\"n\">n</span> <span class=\"bp\">%</span> <span class=\"n\">f</span> <span class=\"bp\">==</span> <span class=\"mi\">0</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"n\">true</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">repeatedDiv</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">/</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">f</span> <span class=\"n\">highest</span><span class=\"o\">)</span>\n    <span class=\"bp\">|</span> <span class=\"n\">false</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">highest</span><span class=\"o\">)</span>\n\n<span class=\"n\">partial</span> <span class=\"kd\">def</span> <span class=\"n\">loop</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">f</span> <span class=\"n\">highest</span><span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">):</span> <span class=\"n\">Prod</span> <span class=\"n\">Nat</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span>\n    <span class=\"k\">match</span> <span class=\"n\">true</span> <span class=\"bp\">==</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">*</span> <span class=\"n\">f</span> <span class=\"bp\">&lt;=</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"n\">true</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">match</span> <span class=\"n\">repeatedDiv</span> <span class=\"n\">n</span> <span class=\"n\">f</span> <span class=\"n\">highest</span> <span class=\"k\">with</span>\n              <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n1</span><span class=\"o\">,</span> <span class=\"n\">highest1</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">match</span> <span class=\"n\">repeatedDiv</span> <span class=\"n\">n1</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"n\">highest1</span> <span class=\"k\">with</span>\n                                  <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n2</span><span class=\"o\">,</span> <span class=\"n\">highest2</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">loop</span> <span class=\"n\">n2</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">+</span> <span class=\"mi\">6</span><span class=\"o\">)</span> <span class=\"n\">highest2</span>\n    <span class=\"bp\">|</span> <span class=\"n\">false</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">highest</span><span class=\"o\">)</span>\n\n<span class=\"n\">partial</span> <span class=\"kd\">def</span> <span class=\"n\">find</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">):</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span>\n    <span class=\"k\">match</span> <span class=\"n\">repeatedDiv</span> <span class=\"n\">n</span> <span class=\"mi\">2</span> <span class=\"mi\">1</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n1</span><span class=\"o\">,</span> <span class=\"n\">highest1</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">match</span> <span class=\"n\">repeatedDiv</span> <span class=\"n\">n1</span> <span class=\"mi\">3</span> <span class=\"n\">highest1</span> <span class=\"k\">with</span>\n                        <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n2</span><span class=\"o\">,</span> <span class=\"n\">highest2</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">match</span> <span class=\"n\">loop</span> <span class=\"n\">n2</span> <span class=\"mi\">5</span> <span class=\"n\">highest2</span> <span class=\"k\">with</span>\n                                            <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n3</span><span class=\"o\">,</span> <span class=\"n\">highest3</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">match</span> <span class=\"n\">n3</span> <span class=\"bp\">==</span> <span class=\"mi\">1</span> <span class=\"k\">with</span>\n                                                                <span class=\"bp\">|</span> <span class=\"n\">true</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">highest3</span>\n                                                                <span class=\"bp\">|</span> <span class=\"n\">false</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">n3</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">main</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span>\n    <span class=\"n\">IO.println</span> <span class=\"o\">(</span><span class=\"n\">find</span> <span class=\"mi\">600851475143</span><span class=\"o\">)</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">main</span>\n</code></pre></div>",
        "id": 404322340,
        "sender_full_name": "Lessness",
        "timestamp": 1701053777
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"658873\">Lessness</span> has marked this topic as resolved.</p>",
        "id": 404624082,
        "sender_full_name": "Notification Bot",
        "timestamp": 1701174271
    }
]