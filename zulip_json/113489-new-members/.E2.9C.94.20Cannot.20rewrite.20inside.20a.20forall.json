[
    {
        "content": "<p>Why does this give an error?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">φ</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">):</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">),</span> <span class=\"n\">φ</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">V</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">mem_preimage.symm</span><span class=\"o\">,</span>   <span class=\"c1\">-- error</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>It says it cannot find an instance of the pattern (<code>_ _ ∈ _</code>), but that instance seems to be there. I noticed that if I removed the forall then it works, but wouldn't <code>rw</code> be supposed to rewrite also deep in a formula? Is rewriting a biimplication different from rewriting an equality in this respect?</p>",
        "id": 357675620,
        "sender_full_name": "Giovanni Mascellani",
        "timestamp": 1683831317
    },
    {
        "content": "<p>Does <code>simp_rw</code> work?</p>",
        "id": 357676831,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1683831707
    },
    {
        "content": "<p><code>rw</code> is a little special with binders.  Sometimes, you need to focus using <code>conv</code> to perform the rewrite.</p>",
        "id": 357677103,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1683831803
    },
    {
        "content": "<p>Thanks! I don't know anything about <code>conv</code> yet, but <code>simp_rw</code> did what I wanted.</p>",
        "id": 357678092,
        "sender_full_name": "Giovanni Mascellani",
        "timestamp": 1683832122
    },
    {
        "content": "<p><code>rw</code> can't touch any subexpression that contains a bound variable. It has to do with it's core algorithm, where it computes a \"motive\", which is a sort of description of which subterms are getting rewritten.</p>\n<p><code>simp_rw</code> on the other hand operates using congruence lemmas. These let <code>simp</code> navigate into most subexpressions, even inside foralls and lambdas.</p>",
        "id": 357678094,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1683832123
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"246262\">Giovanni Mascellani</span> has marked this topic as resolved.</p>",
        "id": 357678184,
        "sender_full_name": "Notification Bot",
        "timestamp": 1683832155
    },
    {
        "content": "<p><code>conv</code> is an interactive tool to navigate into expressions using the same sorts of congruence lemmas that <code>simp</code> has access to.</p>",
        "id": 357678185,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1683832155
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> has marked this topic as resolved.</p>",
        "id": 357678242,
        "sender_full_name": "Notification Bot",
        "timestamp": 1683832183
    },
    {
        "content": "<p>(Weird, if you send a message at the exact same moment that a topic is resolved, it creates a new topic! I just moved that last message here.)</p>",
        "id": 357678344,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1683832212
    },
    {
        "content": "<p>For a mental model of how congruence lemmas work, it's like you rewrite the entire goal with the likes of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/congr\">docs#congr</a>, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/congr_fun\">docs#congr_fun</a>, and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/funext\">docs#funext</a>, and these give you new sub-goals that let you rewrite individual parts of expressions. <code>simp</code> is able to generate more sophisticated congruence lemmas than these, but in the end the sophistication is just to handle functions with complicated dependent types.</p>",
        "id": 357678968,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1683832446
    }
]