[
    {
        "content": "<p>This message has no topic</p>",
        "id": 123002439,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1519661640
    },
    {
        "content": "<p>yes, you need to reply to threads explicitly, but small questions need not have their own topic, it seems</p>",
        "id": 123002488,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1519661698
    },
    {
        "content": "<p>previously people were doing @person | quote \"...\" and then their reply</p>",
        "id": 123002561,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1519661787
    },
    {
        "content": "<p>this is definitely better for a larger chat room. which hopefully will happen since Lean is going to be super popular</p>",
        "id": 123002571,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1519661809
    },
    {
        "content": "<p>I mean, the Gitter one is already larger than I can care to follow</p>",
        "id": 123002590,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1519661843
    },
    {
        "content": "<p>are you ferinko</p>",
        "id": 123002682,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1519661948
    },
    {
        "content": "<p>I was going to ask that! It will be weird referring to people by name instead of handle</p>",
        "id": 123002699,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1519661991
    },
    {
        "content": "<p>Hi everyone!</p>",
        "id": 123002750,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1519662010
    },
    {
        "content": "<p>well, Moses isn't actually his name either, haha</p>",
        "id": 123002751,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1519662010
    },
    {
        "content": "<p>well, this is just the new members room, I didn't want to pollute #general with off topic comments</p>",
        "id": 123002793,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1519662094
    },
    {
        "content": "<p>It is?</p>",
        "id": 123002797,
        "sender_full_name": "Moses Schönfinkel",
        "timestamp": 1519662108
    },
    {
        "content": "<p>Interesting. I was apparently using the \"all messages\" tab which somehow forwarded to New Members automatically.</p>",
        "id": 123002867,
        "sender_full_name": "Moses Schönfinkel",
        "timestamp": 1519662218
    },
    {
        "content": "<p>Well this is very modern.</p>",
        "id": 123005614,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1519666644
    },
    {
        "content": "<p>I had trouble logging in with github, I had to go back a forth a while, but we got there in the end</p>",
        "id": 123005621,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1519666673
    },
    {
        "content": "<p>The design isn't exactly modern <span class=\"emoji emoji-1f606\" title=\"laughing\">:laughing:</span> . But other than that, I like it.</p>",
        "id": 123005744,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1519666811
    },
    {
        "content": "<p>i wonder if there's an option to customize the css styling anywhere</p>",
        "id": 123005767,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1519666915
    },
    {
        "content": "<p>I also had trouble registering and signing in. Had to figure out which cookies to allow.</p>",
        "id": 123008714,
        "sender_full_name": "Sean Leather",
        "timestamp": 1519671908
    },
    {
        "content": "<p>What does the gray text mean?</p>",
        "id": 123008724,
        "sender_full_name": "Sean Leather",
        "timestamp": 1519671937
    },
    {
        "content": "<p>Oh, I think I see. It's a different channel?</p>",
        "id": 123008774,
        "sender_full_name": "Sean Leather",
        "timestamp": 1519671967
    },
    {
        "content": "<p>everything on zulip is filtered by topic and stream</p>",
        "id": 123008778,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1519671981
    },
    {
        "content": "<p>Yeah, it's confusing to see different streams interleaved on one page.</p>",
        "id": 123008794,
        "sender_full_name": "Sean Leather",
        "timestamp": 1519672033
    },
    {
        "content": "<p>If you click on a topic, you'll only see the messages that belong to that topic</p>",
        "id": 123008810,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1519672078
    },
    {
        "content": "<p>probably want to deselect \"all messages\" at the top left of your screen then</p>",
        "id": 123008811,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1519672080
    },
    {
        "content": "<p>zulip is what i think happened when a bulletin board and irc server had a lovechild</p>",
        "id": 123008872,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1519672148
    },
    {
        "content": "<p>It's the <a class=\"stream\" data-stream-id=\"113489\" href=\"/#narrow/stream/113489-new-members\">#new members</a> view that I'm on. I don't yet know what topics I'm interested in, so I'm not sure which ones to look at.</p>",
        "id": 123008884,
        "sender_full_name": "Sean Leather",
        "timestamp": 1519672190
    },
    {
        "content": "<p>I don't see a way to merge topics. That would probably help.</p>",
        "id": 123008946,
        "sender_full_name": "Sean Leather",
        "timestamp": 1519672219
    },
    {
        "content": "<p>if topics share something in common they should probably be filtered at the stream level</p>",
        "id": 123008955,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1519672243
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 192186978,
        "sender_full_name": "Dan Abolafia",
        "timestamp": 1585505765
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 192866166,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585949322
    },
    {
        "content": "<p>somehow that line still worked ;).</p>",
        "id": 193673777,
        "sender_full_name": "Nam",
        "timestamp": 1586630811
    },
    {
        "content": "<p>You just changed thread. I am surprised it worked actually!</p>",
        "id": 193673785,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586630835
    },
    {
        "content": "<p>darn. i apologize. this tool needs some time to get used to.</p>",
        "id": 193673791,
        "sender_full_name": "Nam",
        "timestamp": 1586630870
    },
    {
        "content": "<p>Hello,</p>\n<p>I want to proof the following case:</p>\n<div class=\"codehilite\"><pre><span></span>case mynat.succ\nt b d : mynat,\ndh : t * (d + b) = t * d + t * b\n⊢ t * (succ d + b) = t * succ d + t * b\n</pre></div>\n\n\n<p>my idea is to <code>rw dh</code> to get <code>t * succ d + t * b</code> on the left side. I think it should work because <code>succ d</code> should also be a <code>mynat</code>.</p>\n<p>However I get </p>\n<div class=\"codehilite\"><pre><span></span>tactic failed, there are unsolved goals\nstate:\ncase mynat.succ\nt b d : mynat,\ndh : t * (d + b) = t * d + t * b\n⊢ t * (succ d + b) = t * succ d + t * b\n</pre></div>\n\n\n<p>Did I missunderstood something or do I have to give an additional hint in the <code>rw</code> step?</p>",
        "id": 193674081,
        "sender_full_name": "Lukas",
        "timestamp": 1586631163
    },
    {
        "content": "<p>You definitely can't do <code>rw dh</code></p>",
        "id": 193674098,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586631198
    },
    {
        "content": "<p>If <code>dh : A = B</code> then <code>rw dh</code> will only work when there is something exactly equal to A in the goal</p>",
        "id": 193674115,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586631232
    },
    {
        "content": "<p>i.e. you really need exactly the symbols <code>t * (d + b)</code> in the goal for <code>rw dh</code> to work.</p>",
        "id": 193674163,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586631264
    },
    {
        "content": "<p>If <code>dh</code> said something like <code>∀ d, t * (d + b) = t * d + t * b</code> then you would be OK. But it doesn't.</p>",
        "id": 193674185,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586631315
    },
    {
        "content": "<p><code>dh</code> just says that something is true for that one specific d, not all d.</p>",
        "id": 193674196,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586631336
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/(no.20topic)/near/193674163\" title=\"#narrow/stream/113489-new-members/topic/(no.20topic)/near/193674163\">said</a>:</p>\n<blockquote>\n<p>i.e. you really need exactly the symbols <code>t * (d + b)</code> in the goal for <code>rw dh</code> to work.</p>\n</blockquote>\n<p>okay thanks,</p>\n<p>can I somehow substitute the <code>succ d</code> into a new variable and then it will work - or is that the wrong direction?</p>",
        "id": 193674237,
        "sender_full_name": "Lukas",
        "timestamp": 1586631363
    },
    {
        "content": "<p>If induction was that easy, then you would be able to prove pretty much any statement by induction.</p>",
        "id": 193674240,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586631364
    },
    {
        "content": "<p>you have <em>fixed</em> naturals <code>t</code> and <code>b</code> and <code>d</code>, and <code>dh</code> is only a statement about those fixed naturals.</p>",
        "id": 193674249,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586631398
    },
    {
        "content": "<p>Look, here is a proof that for every natural number <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">n</span></span></span></span>, we have <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi><mo>=</mo><msup><mi>n</mi><mn>2</mn></msup></mrow><annotation encoding=\"application/x-tex\">n=n^2</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">n</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span></span></span>.</p>",
        "id": 193674258,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586631419
    },
    {
        "content": "<p>Let's prove it by induction.</p>",
        "id": 193674262,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586631426
    },
    {
        "content": "<p>The base case is fine -- because <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>0</mn><mo>=</mo><msup><mn>0</mn><mn>2</mn></msup></mrow><annotation encoding=\"application/x-tex\">0=0^2</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span></span></span>.</p>",
        "id": 193674268,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586631439
    },
    {
        "content": "<p>Now for the inductive step, let <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">n</span></span></span></span> be any natural at all.</p>",
        "id": 193674274,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586631456
    },
    {
        "content": "<p>Let's assume <code>h : n = n^2</code> and try and deduce <code>succ n = (succ n)^2</code></p>",
        "id": 193674281,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586631480
    },
    {
        "content": "<p>By your way of thinking, n is an arbitrary natural number, so we can let it be <code>succ n</code> and use <code>h</code> to prove what we want to prove.</p>",
        "id": 193674323,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586631510
    },
    {
        "content": "<p>That can't be how induction works though, because what we're trying to prove isn't true.</p>",
        "id": 193674346,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586631531
    },
    {
        "content": "<p>okay thanks for the explanation</p>",
        "id": 193674376,
        "sender_full_name": "Lukas",
        "timestamp": 1586631593
    }
]