[
    {
        "content": "<p>Is there a way to prove that Int can't be a group? The math argument would be that 0 does not have an inverse, as 0 = 0 * 0^-1 = 1 otherwise. But when I tried to translate this into lean, it shows that they cannot be equated because the multiplication by <code>*</code> are different.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">Group</span> <span class=\"n\">ℤ</span> <span class=\"bp\">→</span> <span class=\"n\">False</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">z_group</span>\n\n  <span class=\"k\">let</span> <span class=\"n\">zero_inv</span> <span class=\"o\">:=</span> <span class=\"n\">z_group.inv</span> <span class=\"mi\">0</span>\n  <span class=\"k\">let</span> <span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">one_ne_zero</span>\n  <span class=\"k\">let</span> <span class=\"n\">h₂</span> <span class=\"o\">:=</span> <span class=\"n\">z_group.mul_left_inv</span> <span class=\"mi\">0</span>\n  <span class=\"k\">let</span> <span class=\"n\">h₃</span> <span class=\"o\">:=</span> <span class=\"n\">Int.mul_zero</span> <span class=\"n\">zero_inv</span>\n\n  <span class=\"n\">apply</span> <span class=\"n\">h₁</span>\n  <span class=\"k\">have</span> <span class=\"n\">h₄</span> <span class=\"o\">:=</span> <span class=\"k\">calc</span>\n    <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"n\">zero_inv</span> <span class=\"bp\">*</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">h₃.symm</span>\n    <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"n\">h₂</span> <span class=\"c1\">-- error here</span>\n\n  <span class=\"n\">exact</span> <span class=\"n\">h₄.symm</span>\n</code></pre></div>\n<p>Error:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">type</span> <span class=\"n\">mismatch</span>\n  <span class=\"n\">h₂</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"bp\">@</span><span class=\"n\">HMul.hMul</span> <span class=\"n\">ℤ</span> <span class=\"n\">ℤ</span> <span class=\"n\">ℤ</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">instHMul</span> <span class=\"n\">ℤ</span> <span class=\"n\">Semigroup.toMul</span><span class=\"o\">)</span> <span class=\"mi\">0</span><span class=\"bp\">⁻¹</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"bp\">@</span><span class=\"n\">HMul.hMul</span> <span class=\"n\">ℤ</span> <span class=\"n\">ℤ</span> <span class=\"n\">ℤ</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">instHMul</span> <span class=\"n\">ℤ</span> <span class=\"n\">Int.instMulInt</span><span class=\"o\">)</span> <span class=\"n\">zero_inv</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n</code></pre></div>\n<p>Do I need some extra hypothesis that <code>Int.instMulInt = Semigroup.toMul</code>?</p>",
        "id": 403365937,
        "sender_full_name": "SaNoy SaKnoi",
        "timestamp": 1700568006
    },
    {
        "content": "<p>This is not the statement you intended. You tell Lean that Int has no group structure at all, which is false.</p>",
        "id": 403368700,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1700569032
    },
    {
        "content": "<p>This topic was moved here from <a class=\"stream-topic\" data-stream-id=\"270676\" href=\"/#narrow/stream/270676-lean4/topic/Proving.20Int.20is.20not.20a.20Group\">#lean4 &gt; Proving Int is not a Group</a> by <span class=\"user-mention silent\" data-user-id=\"130384\">Riccardo Brasca</span>.</p>",
        "id": 403370196,
        "sender_full_name": "Notification Bot",
        "timestamp": 1700569499
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"667038\">@SaNoy SaKnoi</span> What you mean is probably the following: there is no group structure on <code>ℤ</code> <em>compatible with the usual multiplication</em>.</p>",
        "id": 403370322,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1700569540
    },
    {
        "content": "<p>So what I understand is, I shouldn't prove \"There are no Group structures for Int\", and instead show \"(Int, *) is not a group with the usual multiplication\" specifically.<br>\nThis seems to align with making the two multiplications the same, but how would I go about making them equal?</p>\n<p>Giving myself <code>(h: Int.instMulInt = Semigroup.toMul)</code> doesn't help, as it seems you cannot hotswap the functions out due to the chain of implicit functions:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"k\">let</span> <span class=\"n\">h₇</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">HMul.hMul</span> <span class=\"n\">ℤ</span> <span class=\"n\">ℤ</span> <span class=\"n\">ℤ</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">instHMul</span> <span class=\"n\">ℤ</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Semigroup.toMul</span> <span class=\"n\">ℤ</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Monoid.toSemigroup</span> <span class=\"n\">ℤ</span> <span class=\"n\">DivInvMonoid.toMonoid</span><span class=\"o\">)))</span> <span class=\"mi\">0</span><span class=\"bp\">⁻¹</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">OfNat.ofNat</span> <span class=\"n\">ℤ</span> <span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">One.toOfNat1</span> <span class=\"n\">ℤ</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Monoid.toOne</span> <span class=\"n\">ℤ</span> <span class=\"n\">DivInvMonoid.toMonoid</span><span class=\"o\">)))</span> <span class=\"o\">:=</span> <span class=\"n\">h₂</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h₇</span>\n</code></pre></div>",
        "id": 403372702,
        "sender_full_name": "SaNoy SaKnoi",
        "timestamp": 1700570439
    },
    {
        "content": "<p>You shouldn't prove \"There are no Group structures for Int\" because it is a false statement.</p>",
        "id": 403376020,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1700571624
    },
    {
        "content": "<p>For example this works</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">Group</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">HS</span> <span class=\"o\">:</span> <span class=\"n\">S.mul</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">·</span> <span class=\"bp\">*</span> <span class=\"bp\">·</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">False</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">IsUnit</span> <span class=\"n\">ℤ</span> <span class=\"o\">(</span><span class=\"n\">S.toMonoid</span><span class=\"o\">)</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"n\">Group.isUnit</span> <span class=\"mi\">2</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Monoid.ext</span> <span class=\"n\">HS</span><span class=\"o\">,</span> <span class=\"n\">Int.isUnit_iff</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">this</span>\n  <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">this</span>\n</code></pre></div>",
        "id": 403376094,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1700571650
    },
    {
        "content": "<p>I use <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Monoid.ext#doc\">docs#Monoid.ext</a> that says that two monoid structures are the same if their multiplications agree</p>",
        "id": 403376218,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1700571684
    },
    {
        "content": "<p>A little golf.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">Group</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">HS</span> <span class=\"o\">:</span> <span class=\"n\">S.mul</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">·</span> <span class=\"bp\">*</span> <span class=\"bp\">·</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">False</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simpa</span> <span class=\"o\">[</span><span class=\"n\">Monoid.ext</span> <span class=\"n\">HS</span><span class=\"o\">,</span> <span class=\"n\">Int.isUnit_iff</span><span class=\"o\">]</span> <span class=\"n\">using</span> <span class=\"n\">Group.isUnit</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 403376593,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1700571778
    },
    {
        "content": "<p>I suggest you to read <a href=\"#narrow/stream/113489-new-members/topic/Showing.20group.20operation.20is.20closed.20on.20a.20subset.2E\">this</a> conversation to understand how we treat groups (or similar objects) in mathlib. It is not exactly about your question, but it is related.</p>",
        "id": 403377624,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1700572163
    },
    {
        "content": "<p>In particular, as we dont use <code>isSubgroup</code> for a subset, we don't use <code>isGroup</code> for a <code>Monoid</code>, that is probably what you have in mind.</p>",
        "id": 403377757,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1700572208
    },
    {
        "content": "<p>And as for <code>isSubgroup</code>, there is nothing fundamental preventing this, we just find the current approach more convinient.</p>",
        "id": 403377878,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1700572263
    },
    {
        "content": "<p>Thank you for taking the time to write this up.</p>\n<p>Ah, Monoid was how you mark them as equal, I wasn't aware of that. Moving the <code>Group Z</code> to the assumptions also allows you to reason about the properties of the same object, which is nice.</p>\n<p>The conversation you linked was an interesting read, thank you for linking it! I think the reason I reached for <code>Group Z -&gt; false</code> is similar, I was thinking about <code>Group u</code> as a \"property\" of <code>u</code>, that can either apply or not apply, echoing your message (here)[https://leanprover.zulipchat.com/#narrow/stream/113489-new-members/topic/Showing.20group.20operation.20is.20closed.20on.20a.20subset.2E/near/400945362].</p>",
        "id": 403409117,
        "sender_full_name": "SaNoy SaKnoi",
        "timestamp": 1700581125
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"667038\">SaNoy SaKnoi</span> has marked this topic as resolved.</p>",
        "id": 403409130,
        "sender_full_name": "Notification Bot",
        "timestamp": 1700581127
    }
]