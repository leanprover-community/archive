[
    {
        "content": "<p>See \"/lake-packages/mathlib/Mathlib/Data/Matrix/Basic.lean\"  below,   the theorem \"mul_apply\" only use \"rfl\" to be proved.<br>\nHow can I unfold the definition \"  hMul M N : l → n → α :=<br>\n    fun i k =&gt;<br>\n      (fun j =&gt; M i j) ⬝ᵥ (fun j =&gt; N j k)\" to prove this ,  instead of only using \"rfl\"?<br>\nIn this way , it would be more convenient to compare with the right side of the equation \" ∑ j, M i j * N j k\".Right?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[</span><span class=\"n\">default_instance</span> <span class=\"mi\">100</span><span class=\"kd\">]</span>\n<span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Mul</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">AddCommMonoid</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">HMul</span> <span class=\"o\">(</span><span class=\"n\">Matrix</span> <span class=\"n\">l</span> <span class=\"n\">m</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Matrix</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Matrix</span> <span class=\"n\">l</span> <span class=\"n\">n</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">hMul</span> <span class=\"n\">M</span> <span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"n\">l</span> <span class=\"bp\">→</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n    <span class=\"k\">fun</span> <span class=\"n\">i</span> <span class=\"n\">k</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">j</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">M</span> <span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"bp\">⬝ᵥ</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">j</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">N</span> <span class=\"n\">j</span> <span class=\"n\">k</span><span class=\"o\">)</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">mul_apply</span> <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Mul</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">AddCommMonoid</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">Matrix</span> <span class=\"n\">l</span> <span class=\"n\">m</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"n\">Matrix</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">i</span> <span class=\"n\">k</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"bp\">*</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"n\">i</span> <span class=\"n\">k</span> <span class=\"bp\">=</span> <span class=\"bp\">∑</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">M</span> <span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"bp\">*</span> <span class=\"n\">N</span> <span class=\"n\">j</span> <span class=\"n\">k</span>\n<span class=\"o\">:=</span>\n  <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 407384783,
        "sender_full_name": "chenjulang",
        "timestamp": 1702357181
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 407385025,
        "sender_full_name": "chenjulang",
        "timestamp": 1702357267
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 407385111,
        "sender_full_name": "chenjulang",
        "timestamp": 1702357295
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 407385131,
        "sender_full_name": "chenjulang",
        "timestamp": 1702357306
    },
    {
        "content": "<p><span aria-label=\"sad\" class=\"emoji emoji-2639\" role=\"img\" title=\"sad\">:sad:</span></p>",
        "id": 407492179,
        "sender_full_name": "chenjulang",
        "timestamp": 1702392205
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">BigOperators</span> <span class=\"n\">Matrix</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">mul_apply</span> <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Mul</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">AddCommMonoid</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">Matrix</span> <span class=\"n\">l</span> <span class=\"n\">m</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"n\">Matrix</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">i</span> <span class=\"n\">k</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"bp\">*</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"n\">i</span> <span class=\"n\">k</span> <span class=\"bp\">=</span> <span class=\"bp\">∑</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">M</span> <span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"bp\">*</span> <span class=\"n\">N</span> <span class=\"n\">j</span> <span class=\"n\">k</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">HMul.hMul</span>\n  <span class=\"c1\">-- ⊢ instHMulMatrixMatrixMatrix ...</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">instHMulMatrixMatrixMatrix</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span>\n  <span class=\"c1\">-- possibly what you want?</span>\n  <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 407496797,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1702393296
    },
    {
        "content": "<p>Yes , helps a lot!!!!!!!!!!!!!!!</p>",
        "id": 407504508,
        "sender_full_name": "chenjulang",
        "timestamp": 1702395230
    },
    {
        "content": "<p>you are genius</p>",
        "id": 407504646,
        "sender_full_name": "chenjulang",
        "timestamp": 1702395267
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"665035\">chenjulang</span> has marked this topic as resolved.</p>",
        "id": 407504754,
        "sender_full_name": "Notification Bot",
        "timestamp": 1702395300
    },
    {
        "content": "<p>There's also the <code>unfold_projs</code> tactic</p>",
        "id": 407520205,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1702399886
    },
    {
        "content": "<p>Ok</p>",
        "id": 407608862,
        "sender_full_name": "chenjulang",
        "timestamp": 1702432385
    }
]