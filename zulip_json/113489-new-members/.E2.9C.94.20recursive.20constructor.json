[
    {
        "content": "<p>When I have <code>p q r : Prop</code> and a goal of the form <code>p ∧ q ∧ r</code>, I usually want to solve each of these separately. Is there a recursive constructor tactic that turns this intro three goals <code>p</code>, <code>q</code> and <code>r</code>? Currently I just call <code>constructor</code> multiple times, which does not feel ideal, i.e.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hq</span> <span class=\"o\">:</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hr</span> <span class=\"o\">:</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"n\">q</span> <span class=\"bp\">∧</span> <span class=\"n\">r</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">constructor</span>\n  <span class=\"n\">assumption</span>\n  <span class=\"n\">constructor</span>\n  <span class=\"n\">assumption</span>\n  <span class=\"n\">assumption</span>\n</code></pre></div>\n<p>I would like to write:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hq</span> <span class=\"o\">:</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hr</span> <span class=\"o\">:</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"n\">q</span> <span class=\"bp\">∧</span> <span class=\"n\">r</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rconstructor</span>\n  <span class=\"n\">repeat</span> <span class=\"n\">assumption</span>\n</code></pre></div>",
        "id": 399066679,
        "sender_full_name": "Christian Merten",
        "timestamp": 1698511438
    },
    {
        "content": "<p>You can do <code>refine ⟨?_, ?_, ?_⟩ </code>, which is the usual approach to this issue. I think that a true <code>rconstructor</code> might have unexpected consequences. For example it might take a natural apart forever, and therefore there will perhaps be some Props which it will take apart forever. It might also take something far more apart than you want (that won't happen for abstract (p : Prop) but most Props aren't abstract...)</p>\n<p>It would be a cool tactic-writing exercise to write one though!</p>",
        "id": 399067510,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1698512276
    },
    {
        "content": "<p>Thanks! I can definitely see <code>rconstructor</code> doing too much, maybe there needs to be a list of constructors that it is allowed to decompose, or possibly as an argument: Along the lines of <code>rconstruct only [And.intro]</code>.</p>",
        "id": 399068313,
        "sender_full_name": "Christian Merten",
        "timestamp": 1698512976
    },
    {
        "content": "<p>We already have <code>repeat' apply And.intro</code> for that (in Mathlib).</p>",
        "id": 399068432,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1698513072
    },
    {
        "content": "<p>So then also this should work <code>repeat' constructor</code> ?</p>",
        "id": 399068641,
        "sender_full_name": "Christian Merten",
        "timestamp": 1698513248
    },
    {
        "content": "<p>And I just tried using this and it immediatly produced 8 goals out of a simple <code>∧</code> <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span>.</p>",
        "id": 399069160,
        "sender_full_name": "Christian Merten",
        "timestamp": 1698513770
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"648495\">Christian Merten</span> has marked this topic as resolved.</p>",
        "id": 399069184,
        "sender_full_name": "Notification Bot",
        "timestamp": 1698513801
    }
]