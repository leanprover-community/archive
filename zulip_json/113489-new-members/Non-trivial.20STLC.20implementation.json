[
    {
        "content": "<p>Hi folks, I am interested in doing some mechanized proofs about some relatively simple extensions to the simply-typed lambda calculus. Are there any good examples/repositories of reasoning about STLC with at least polymorphic types? I found the examples in the Lean4 docs like <a href=\"https://leanprover.github.io/lean4/doc/examples/tc.lean.html\">\"A Certified Type Checker\"</a> helpful, but I'm struggling to generalize some of these proof techniques as I add more features.</p>",
        "id": 366653049,
        "sender_full_name": "Will Crichton",
        "timestamp": 1686874498
    },
    {
        "content": "<p>(Sorry, this is probably more appropriate for the new members channel, but Zulip does not permit me to move the topic...)</p>",
        "id": 366657110,
        "sender_full_name": "Will Crichton",
        "timestamp": 1686876392
    },
    {
        "content": "<p>This topic was moved here from <a class=\"stream-topic\" data-stream-id=\"270676\" href=\"/#narrow/stream/270676-lean4/topic/Non-trivial.20STLC.20implementation\">#lean4 &gt; Non-trivial STLC implementation</a> by <span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span>.</p>",
        "id": 366658285,
        "sender_full_name": "Notification Bot",
        "timestamp": 1686876835
    },
    {
        "content": "<p>This has been done in a few places as an example or the like but I don't have anywhere in particular to point. Maybe you could show what you have and where you got stuck?</p>",
        "id": 366658473,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686876903
    }
]