[
    {
        "content": "<p>Hi, I have something like this, which is a common thing in Haskell</p>\n<div class=\"codehilite\" data-code-language=\"Haskell\"><pre><span></span><code><span class=\"kr\">data</span><span class=\"w\"> </span><span class=\"kt\">Bla</span><span class=\"w\"> </span><span class=\"kr\">where</span>\n<span class=\"w\">  </span><span class=\"kt\">A</span><span class=\"w\"> </span><span class=\"ow\">::</span><span class=\"w\"> </span><span class=\"kt\">Bla</span>\n\n<span class=\"nf\">a</span><span class=\"w\"> </span><span class=\"ow\">::</span><span class=\"w\"> </span><span class=\"kr\">_</span>\n<span class=\"nf\">a</span><span class=\"w\"> </span><span class=\"ow\">=</span><span class=\"w\"> </span><span class=\"kr\">_</span>\n</code></pre></div>\n<p>now in lean I will have something like </p>\n<div class=\"codehilite\" data-code-language=\"Haskell\"><pre><span></span><code><span class=\"nf\">inductive</span><span class=\"w\"> </span><span class=\"kt\">Bla</span><span class=\"w\"> </span><span class=\"kr\">where</span>\n<span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"kt\">:</span><span class=\"w\"> </span><span class=\"kt\">Bla</span>\n\n<span class=\"nf\">namespace</span><span class=\"w\"> </span><span class=\"kt\">Bla</span>\n<span class=\"nf\">def</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"kt\">:</span><span class=\"w\"> </span><span class=\"kr\">_</span><span class=\"w\">  </span><span class=\"kt\">:=</span><span class=\"w\"> </span><span class=\"n\">sorry</span>\n<span class=\"nf\">end</span><span class=\"w\"> </span><span class=\"kt\">Bla</span>\n</code></pre></div>\n<p>how do I name the function/ the constructor in an idiomatic way? In my case I would really like the function to have the name <code>a</code></p>",
        "id": 387286863,
        "sender_full_name": "MangoIV",
        "timestamp": 1692973165
    },
    {
        "content": "<p>it's hard to tell without more context</p>",
        "id": 387287009,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1692973214
    },
    {
        "content": "<p>why do you have two things with the same name in haskell?</p>",
        "id": 387287035,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1692973226
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113489-new-members/topic/naming.20constructors.20and.20functions.20with.20the.20same.20name/near/387287035\">said</a>:</p>\n<blockquote>\n<p>why do you have two things with the same name in haskell?</p>\n</blockquote>\n<p>the concrete example is: </p>\n<div class=\"codehilite\" data-code-language=\"Haskell\"><pre><span></span><code><span class=\"kr\">data</span><span class=\"w\"> </span><span class=\"kt\">Reader</span><span class=\"w\"> </span><span class=\"n\">r</span><span class=\"w\"> </span><span class=\"n\">m</span><span class=\"w\"> </span><span class=\"n\">k</span><span class=\"w\"> </span><span class=\"kr\">where</span>\n<span class=\"w\">  </span><span class=\"kt\">Ask</span><span class=\"w\"> </span><span class=\"ow\">::</span><span class=\"w\"> </span><span class=\"kt\">Reader</span><span class=\"w\"> </span><span class=\"n\">r</span><span class=\"w\"> </span><span class=\"n\">m</span><span class=\"w\"> </span><span class=\"n\">r</span>\n\n<span class=\"nf\">ask</span><span class=\"w\"> </span><span class=\"ow\">::</span><span class=\"w\"> </span><span class=\"kt\">Has</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">Reader</span><span class=\"w\"> </span><span class=\"n\">r</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">sig</span><span class=\"w\"> </span><span class=\"n\">m</span><span class=\"w\"> </span><span class=\"ow\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">m</span><span class=\"w\"> </span><span class=\"n\">r</span>\n</code></pre></div>",
        "id": 387287964,
        "sender_full_name": "MangoIV",
        "timestamp": 1692973539
    },
    {
        "content": "<p>the second <code>ask</code> doesn't seem like it would be in the <code>Reader</code> namespace</p>",
        "id": 387288288,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1692973653
    },
    {
        "content": "<p>I'm pretty suspicious of using a verb for a constructor name though</p>",
        "id": 387288394,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1692973687
    },
    {
        "content": "<p>if the constructor is an internal thing which is equivalent to (but less general than) the <code>ask</code> function then you could call it <code>ask'</code></p>",
        "id": 387288657,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1692973794
    },
    {
        "content": "<blockquote>\n<p>the second ask doesn't seem like it would be in the Reader namespace</p>\n</blockquote>\n<p>are you sure? I would expect something like </p>\n<div class=\"codehilite\" data-code-language=\"Haskell\"><pre><span></span><code><span class=\"kr\">import</span><span class=\"w\"> </span><span class=\"nn\">Effect.Reader</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nf\">ask</span><span class=\"p\">)</span>\n</code></pre></div>\n<p>and I'm not sure whether <code>Ask</code> should be \"internal\" either, because I want to be able to expose it for interpretation with custom carriers for the user.</p>",
        "id": 387289503,
        "sender_full_name": "MangoIV",
        "timestamp": 1692974093
    },
    {
        "content": "<p>I think I will make a new namespace <code>Effect.Signature</code> and put <code>inductive Reader</code> in there.</p>",
        "id": 387289936,
        "sender_full_name": "MangoIV",
        "timestamp": 1692974251
    },
    {
        "content": "<p>haskell handles namespaces a bit differently from lean</p>",
        "id": 387290681,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1692974492
    },
    {
        "content": "<p>both of those functions would be in the same namespace in haskell because they are defined in the same file</p>",
        "id": 387290734,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1692974512
    },
    {
        "content": "<p>in lean namespaces are used for logical grouping and convenience, they are not connected to file scope</p>",
        "id": 387290816,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1692974528
    },
    {
        "content": "<p>I mean in Haskell you put things in the same module such that they are in the same namespace, but yeah, due to this organizational difference, I'm asking for what the idiomatic way to do it in lean would be.</p>",
        "id": 387290979,
        "sender_full_name": "MangoIV",
        "timestamp": 1692974592
    },
    {
        "content": "<p>also calling it <code>ask'</code> doesn't mean it can't be used, there is also <code>private</code> and we aren't using that here</p>",
        "id": 387291065,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1692974628
    },
    {
        "content": "<p>it just means that <code>ask</code> is the preferred form</p>",
        "id": 387291139,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1692974647
    },
    {
        "content": "<p>assuming that these two functions are intended to have the same effect; the signatures look pretty different but I'm sure there is some typeclass magic going on</p>",
        "id": 387291273,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1692974694
    },
    {
        "content": "<p>[offtopic] You can use <code>lean</code> formatting to write code blocks with syntax highlight here on Zulip. Or you can just elide it because it's the default. Check the source of this message</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">goo</span> <span class=\"o\">:</span> <span class=\"n\">String</span> <span class=\"o\">:=</span> <span class=\"s2\">\"hi\"</span>\n</code></pre></div>",
        "id": 387291681,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1692974824
    },
    {
        "content": "<p>Perhaps you're used to Discord where <code>lean</code> isn't supported and <code>haskell</code> is the only option available</p>",
        "id": 387291930,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1692974922
    },
    {
        "content": "<p>I actually just typo'd ^^' </p>\n<blockquote>\n<p>it just means that ask is the preferred form</p>\n</blockquote>\n<p>yeah, that makes sense. I have it like this now:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Leff.Control.Algebra</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">Effect</span>\n<span class=\"kn\">namespace</span> <span class=\"n\">Signature</span>\n<span class=\"kd\">inductive</span> <span class=\"n\">Reader</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span> <span class=\"bp\">â†’</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span> <span class=\"bp\">â†’</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span> <span class=\"n\">where</span>\n<span class=\"bp\">|</span> <span class=\"n\">ask</span> <span class=\"o\">:</span> <span class=\"n\">Reader</span> <span class=\"n\">r</span> <span class=\"n\">m</span> <span class=\"n\">r</span>\n<span class=\"bp\">|</span> <span class=\"n\">loc</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"bp\">â†’</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">â†’</span> <span class=\"n\">m</span> <span class=\"n\">Î±</span> <span class=\"bp\">â†’</span> <span class=\"n\">Reader</span> <span class=\"n\">r</span> <span class=\"n\">m</span> <span class=\"n\">Î±</span>\n<span class=\"kd\">end</span> <span class=\"n\">Signature</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">Reader</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Algebra</span>\n<span class=\"kn\">open</span> <span class=\"n\">Signature</span>\n\n<span class=\"sd\">/--</span>\n<span class=\"sd\">  Ask for the environment of the Reader</span>\n<span class=\"sd\">-/</span>\n<span class=\"kd\">def</span> <span class=\"n\">ask</span> <span class=\"o\">[</span><span class=\"n\">Reader</span> <span class=\"n\">r</span> <span class=\"k\">in</span> <span class=\"n\">sig</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Algebra</span> <span class=\"n\">sig</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"n\">r</span> <span class=\"o\">:=</span> <span class=\"n\">send</span> <span class=\"n\">Signature.Reader.ask</span>\n\n<span class=\"sd\">/--</span>\n<span class=\"sd\">  Obtain the environment modified by a function f</span>\n<span class=\"sd\">-/</span>\n<span class=\"kd\">def</span> <span class=\"n\">asks</span> <span class=\"o\">[</span><span class=\"n\">Reader</span> <span class=\"n\">r</span> <span class=\"k\">in</span> <span class=\"n\">sig</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Algebra</span> <span class=\"n\">sig</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">r</span> <span class=\"bp\">â†’</span> <span class=\"n\">Î±</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"n\">Î±</span> <span class=\"o\">:=</span> <span class=\"n\">f</span> <span class=\"bp\">&lt;$&gt;</span> <span class=\"n\">ask</span>\n\n<span class=\"sd\">/--</span>\n<span class=\"sd\">  Run a locally modified computation</span>\n<span class=\"sd\">-/</span>\n<span class=\"kd\">def</span> <span class=\"n\">loc</span> <span class=\"o\">[</span><span class=\"n\">Reader</span> <span class=\"n\">r</span> <span class=\"k\">in</span> <span class=\"n\">sig</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Algebra</span> <span class=\"n\">sig</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">r</span> <span class=\"bp\">â†’</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">action</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"n\">Î±</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"n\">Î±</span> <span class=\"o\">:=</span>\n  <span class=\"n\">send</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">Signature.Reader.loc</span> <span class=\"n\">f</span> <span class=\"n\">action</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">Reader</span>\n<span class=\"kd\">end</span> <span class=\"n\">Effect</span>\n</code></pre></div>",
        "id": 387293026,
        "sender_full_name": "MangoIV",
        "timestamp": 1692975385
    },
    {
        "content": "<p>So if you want to implement own carriers, you <code>open Effect.Signature</code> and if you actually want to use <code>Reader</code>, you <code>open Effect.Reader</code></p>",
        "id": 387293215,
        "sender_full_name": "MangoIV",
        "timestamp": 1692975466
    },
    {
        "content": "<p>What's the <code>in</code> notation here?</p>",
        "id": 387294624,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1692975948
    },
    {
        "content": "<p>I think it's supposed to be the equivalent of the <code>Has</code> typeclass?</p>",
        "id": 387296059,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1692976431
    },
    {
        "content": "<p>it's actually <code>Member</code>, Has takes three arguments, I will have to think about proper notation for that.</p>",
        "id": 387302510,
        "sender_full_name": "MangoIV",
        "timestamp": 1692978837
    },
    {
        "content": "<blockquote>\n<p>takes three arguments</p>\n</blockquote>\n<p>the signature sig to interpret, the carrier m to interpret the signature in and the effect that you need the signature to contain.</p>",
        "id": 387303051,
        "sender_full_name": "MangoIV",
        "timestamp": 1692979100
    },
    {
        "content": "<p>I actually wanted to have the \\in notation but thatâ€™s not possible because we cannot hide existing notation.</p>",
        "id": 387307362,
        "sender_full_name": "MangoIV",
        "timestamp": 1692980782
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"586938\">MangoIV</span> has marked this topic as resolved.</p>",
        "id": 387318378,
        "sender_full_name": "Notification Bot",
        "timestamp": 1692985705
    }
]