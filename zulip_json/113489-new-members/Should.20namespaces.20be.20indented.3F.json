[
    {
        "content": "<p>I think in Mathlib namespaces are generally not indented, but in the Lean Manual in the <a href=\"https://lean-lang.org/lean4/doc/namespaces.html?highlight=namespace#namespaces\">section on namespaces</a> they are indented. The  <a href=\"https://leanprover-community.github.io/contribute/style.html\">#style</a> guide is silent on this issue.</p>",
        "id": 396467823,
        "sender_full_name": "Markus Schmaus",
        "timestamp": 1697189601
    },
    {
        "content": "<p>Mathlib is pretty non-silent about the issue in some sense :-) I am not sure I've ever seen an indented namespace in mathlib, and I've seen a lot of namespaces.</p>",
        "id": 396475751,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1697192179
    },
    {
        "content": "<p>To follow up what Kevin said, this is a sample of the counts of <code>(total line count, lines in a namespace)</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Mathlib</span><span class=\"bp\">/</span><span class=\"n\">RingTheory</span><span class=\"bp\">/</span><span class=\"n\">Polynomial</span><span class=\"bp\">/</span><span class=\"n\">IntegralNormalization.lean</span>                         <span class=\"o\">(</span><span class=\"mi\">157</span><span class=\"o\">,</span>   <span class=\"mi\">137</span><span class=\"o\">)</span>\n<span class=\"n\">Mathlib</span><span class=\"bp\">/</span><span class=\"n\">RingTheory</span><span class=\"bp\">/</span><span class=\"n\">Polynomial</span><span class=\"bp\">/</span><span class=\"n\">Nilpotent.lean</span>                                     <span class=\"o\">(</span><span class=\"mi\">169</span><span class=\"o\">,</span>   <span class=\"mi\">151</span><span class=\"o\">)</span>\n<span class=\"n\">Mathlib</span><span class=\"bp\">/</span><span class=\"n\">RingTheory</span><span class=\"bp\">/</span><span class=\"n\">Polynomial</span><span class=\"bp\">/</span><span class=\"n\">Opposites.lean</span>                                     <span class=\"o\">(</span><span class=\"mi\">123</span><span class=\"o\">,</span>   <span class=\"mi\">99</span><span class=\"o\">)</span>\n<span class=\"n\">Mathlib</span><span class=\"bp\">/</span><span class=\"n\">RingTheory</span><span class=\"bp\">/</span><span class=\"n\">Polynomial</span><span class=\"bp\">/</span><span class=\"n\">Pochhammer.lean</span>                                    <span class=\"o\">(</span><span class=\"mi\">367</span><span class=\"o\">,</span>   <span class=\"mi\">0</span><span class=\"o\">)</span>\n<span class=\"n\">Mathlib</span><span class=\"bp\">/</span><span class=\"n\">RingTheory</span><span class=\"bp\">/</span><span class=\"n\">Polynomial</span><span class=\"bp\">/</span><span class=\"n\">Quotient.lean</span>                                      <span class=\"o\">(</span><span class=\"mi\">287</span><span class=\"o\">,</span>   <span class=\"mi\">265</span><span class=\"o\">)</span>\n<span class=\"n\">Mathlib</span><span class=\"bp\">/</span><span class=\"n\">RingTheory</span><span class=\"bp\">/</span><span class=\"n\">Polynomial</span><span class=\"bp\">/</span><span class=\"n\">RationalRoot.lean</span>                                  <span class=\"o\">(</span><span class=\"mi\">139</span><span class=\"o\">,</span>   <span class=\"mi\">12</span><span class=\"o\">)</span>\n<span class=\"n\">Mathlib</span><span class=\"bp\">/</span><span class=\"n\">RingTheory</span><span class=\"bp\">/</span><span class=\"n\">Polynomial</span><span class=\"bp\">/</span><span class=\"n\">ScaleRoots.lean</span>                                    <span class=\"o\">(</span><span class=\"mi\">157</span><span class=\"o\">,</span>   <span class=\"mi\">137</span><span class=\"o\">)</span>\n<span class=\"n\">Mathlib</span><span class=\"bp\">/</span><span class=\"n\">RingTheory</span><span class=\"bp\">/</span><span class=\"n\">Polynomial</span><span class=\"bp\">/</span><span class=\"n\">Selmer.lean</span>                                        <span class=\"o\">(</span><span class=\"mi\">88</span><span class=\"o\">,</span>    <span class=\"mi\">64</span><span class=\"o\">)</span>\n<span class=\"n\">Mathlib</span><span class=\"bp\">/</span><span class=\"n\">RingTheory</span><span class=\"bp\">/</span><span class=\"n\">Polynomial</span><span class=\"bp\">/</span><span class=\"n\">Tower.lean</span>                                         <span class=\"o\">(</span><span class=\"mi\">92</span><span class=\"o\">,</span>    <span class=\"mi\">65</span><span class=\"o\">)</span>\n<span class=\"n\">Mathlib</span><span class=\"bp\">/</span><span class=\"n\">RingTheory</span><span class=\"bp\">/</span><span class=\"n\">Polynomial</span><span class=\"bp\">/</span><span class=\"n\">Vieta.lean</span>                                         <span class=\"o\">(</span><span class=\"mi\">195</span><span class=\"o\">,</span>   <span class=\"mi\">128</span><span class=\"o\">)</span>\n<span class=\"n\">Mathlib</span><span class=\"bp\">/</span><span class=\"n\">RingTheory</span><span class=\"bp\">/</span><span class=\"n\">PolynomialAlgebra.lean</span>                                        <span class=\"o\">(</span><span class=\"mi\">295</span><span class=\"o\">,</span>   <span class=\"mi\">142</span><span class=\"o\">)</span>\n<span class=\"n\">Mathlib</span><span class=\"bp\">/</span><span class=\"n\">RingTheory</span><span class=\"bp\">/</span><span class=\"n\">PowerBasis.lean</span>                                               <span class=\"o\">(</span><span class=\"mi\">517</span><span class=\"o\">,</span>   <span class=\"mi\">413</span><span class=\"o\">)</span>\n<span class=\"n\">Mathlib</span><span class=\"bp\">/</span><span class=\"n\">RingTheory</span><span class=\"bp\">/</span><span class=\"n\">PowerSeries</span><span class=\"bp\">/</span><span class=\"n\">Basic.lean</span>                                        <span class=\"o\">(</span><span class=\"mi\">2840</span><span class=\"o\">,</span>  <span class=\"mi\">2749</span><span class=\"o\">)</span>\n<span class=\"n\">Mathlib</span><span class=\"bp\">/</span><span class=\"n\">RingTheory</span><span class=\"bp\">/</span><span class=\"n\">PowerSeries</span><span class=\"bp\">/</span><span class=\"n\">WellKnown.lean</span>                                    <span class=\"o\">(</span><span class=\"mi\">209</span><span class=\"o\">,</span>   <span class=\"mi\">185</span><span class=\"o\">)</span>\n<span class=\"n\">Mathlib</span><span class=\"bp\">/</span><span class=\"n\">RingTheory</span><span class=\"bp\">/</span><span class=\"n\">Prime.lean</span>                                                    <span class=\"o\">(</span><span class=\"mi\">77</span><span class=\"o\">,</span>    <span class=\"mi\">0</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>I would say that this is quite common:</p>\n<ul>\n<li>either, there is <code>namespace X</code> at the beginning, right after copyright and module docs and everything is in the namespace,</li>\n<li>or everything is in <code>_root_</code>.</li>\n</ul>\n<p>Indenting namespaces would essentially mean indenting almost all lines of almost all files, which seems undesirable.</p>",
        "id": 396478621,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1697193276
    },
    {
        "content": "<p>I think that if a namespace (or section etc) contains enough code to span multiple screenfuls, then indenting it doesn't really add readability (and it makes the coveted 1-line proofs harder to get).</p>",
        "id": 396478925,
        "sender_full_name": "David Loeffler",
        "timestamp": 1697193407
    },
    {
        "content": "<p>Fun fact: the <em>only</em> indented <code>theorem</code> that I could find in Mathlib is <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=QuotientGroup.mk_prod#doc\">docs#QuotientGroup.mk_prod</a> and it looks like a typo!</p>",
        "id": 396479628,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1697193664
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/7659\">#7659</a>: let's see whether this is desirable un-indentation!  <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 396480311,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1697193947
    },
    {
        "content": "<p>I don't think anyone is advocating for the one-space indentation we see there!</p>",
        "id": 396480964,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1697194218
    },
    {
        "content": "<p>This makes sense and confirms my understanding about namespaces in Mathlib. And I guess the recommendation is to follow Mathlib. If this is the case, it would be less confusing for new members if the Lean Manual used this style as well, and maybe include it in the <a href=\"https://leanprover-community.github.io/contribute/style.html\">#style</a> guide.</p>",
        "id": 396482524,
        "sender_full_name": "Markus Schmaus",
        "timestamp": 1697194775
    },
    {
        "content": "<p>My impression is there were explicit explanation of why it should not indent namespaces (and sections) in Lean, back in Lean 3 materials, even for nested namespaces. I could not find it now.</p>",
        "id": 396484687,
        "sender_full_name": "Utensil Song",
        "timestamp": 1697195659
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/lean4/pull/2681\">lean4#2681</a></p>",
        "id": 396486919,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1697196604
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"654733\">@Markus Schmaus</span> thanks for pointing out this omission in <a href=\"https://leanprover-community.github.io/contribute/style.html\">#style</a>. I have created a PR to address it.</p>",
        "id": 396509822,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1697205030
    },
    {
        "content": "<p>I think a good way to think about this, although it's my own personal idea not necessarily sanctioned by the devs / community,  is that anything that naturally alters the <code>Environment</code> (e.g., <code>def</code>, <code>theorem</code>, <code>notation</code>, etc.) should be a top-level (i.e., flush-left) item in the editor.</p>",
        "id": 396509867,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1697205049
    },
    {
        "content": "<p>By the way, one thing that really made it clear to me that it wouldn't really work to have indented namespaces, is that <code>namespace</code>/<code>end</code> are <em>not</em> scoping constructs in lean 4, unlike lean 3. People are probably aware that you can omit <code>end</code> at the end of files, so \"your brackets don't have to match\", but it's more than that: <code>namespace</code> and <code>section</code> commands don't really have to be paired with <code>end</code> at all, unless you imagine them as macro expanding to bracket clusters:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">namespace</span> <span class=\"n\">A</span>\n  <span class=\"kn\">namespace</span> <span class=\"n\">B.C</span>\n      <span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n    <span class=\"kd\">end</span> <span class=\"n\">C</span>\n    <span class=\"kn\">namespace</span> <span class=\"n\">D.E</span>\n        <span class=\"kd\">def</span> <span class=\"n\">bar</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n  <span class=\"kd\">end</span> <span class=\"n\">B.D.E</span>\n  <span class=\"kn\">section</span> <span class=\"n\">F</span>\n    <span class=\"kn\">section</span>\n      <span class=\"kd\">def</span> <span class=\"n\">baz</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n<span class=\"kd\">end</span> <span class=\"n\">A.F.</span><span class=\"bp\">«»</span>\n</code></pre></div>",
        "id": 400540244,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1699280169
    },
    {
        "content": "<p>(needless to say, you shouldn't write code like that <span aria-label=\"point up\" class=\"emoji emoji-1f446\" role=\"img\" title=\"point up\">:point_up:</span> )</p>",
        "id": 400540941,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1699280394
    },
    {
        "content": "<blockquote>\n<p>People are probably aware that you can omit <code>end</code> at the end of files,</p>\n</blockquote>\n<p>This seems like a bad thing to me; I've had merge conflicts introduce <code>section Foo section Foo</code>, and  not noticed because there was no corresponding end marker to flag the issue</p>",
        "id": 400541108,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1699280433
    },
    {
        "content": "<p>you could end up with the same merge conflict on the end markers though, right?</p>",
        "id": 400541258,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1699280483
    },
    {
        "content": "<p>Yes, but it's less likely</p>",
        "id": 400541362,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1699280522
    },
    {
        "content": "<p>one advantage is that it means that you can always just truncate a file between commands and get something that is valid</p>",
        "id": 400541681,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1699280609
    },
    {
        "content": "<p>you would need some kind of <code>#where</code> like command to do that otherwise</p>",
        "id": 400541763,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1699280640
    }
]