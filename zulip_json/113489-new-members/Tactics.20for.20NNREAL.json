[
    {
        "content": "<p>As a practice, I am trying to prove the arithmetic mean geometric mean inequality of 2 positive real numbers.</p>\n<p>I tried to prove the <code>\\R</code> and NNREAL (non-negative real) version respectively. I find that many tactics, including <code>linarith</code> and <code>ring</code> doesn't work for NNREAL but works for <code>\\R</code>. I am wondering why this is the case? I looked it up and NNREAL is just <code>def nnreal := {r: real // r &gt;= 0}</code></p>\n<p>Here are the codes, as shown, I could not use <code>linarith</code> for the nnreal case.</p>\n<p>real version:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">amgm</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">,</span> <span class=\"mi\">4</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"bp\">≤</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">x</span> <span class=\"n\">y</span>\n  <span class=\"k\">let</span> <span class=\"n\">z</span><span class=\"o\">:=</span> <span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">y</span>\n  <span class=\"k\">calc</span>\n      <span class=\"mi\">4</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"bp\">≤</span> <span class=\"n\">z</span> <span class=\"bp\">*</span> <span class=\"n\">z</span> <span class=\"bp\">+</span> <span class=\"mi\">4</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">linarith</span> <span class=\"o\">[</span><span class=\"n\">mul_self_nonneg</span> <span class=\"n\">z</span><span class=\"o\">]</span>\n      <span class=\"n\">_</span> <span class=\"bp\">≤</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">4</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span>  <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">z</span><span class=\"o\">]</span>\n      <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">linarith</span>\n</code></pre></div>\n<p>nnreal version</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">AMGM</span> <span class=\"o\">:</span>  <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">:</span> <span class=\"n\">NNReal</span><span class=\"o\">,</span> <span class=\"n\">NNReal.sqrt</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">≤</span>  <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"o\">)</span><span class=\"bp\">/</span><span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">x</span> <span class=\"n\">y</span>\n  <span class=\"k\">have</span> <span class=\"n\">sq_amgm</span><span class=\"o\">:</span> <span class=\"mi\">4</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"bp\">≤</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n    <span class=\"k\">let</span> <span class=\"n\">z</span><span class=\"o\">:=</span> <span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">y</span>\n    <span class=\"k\">calc</span>\n      <span class=\"mi\">4</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"bp\">≤</span> <span class=\"n\">z</span> <span class=\"bp\">*</span> <span class=\"n\">z</span> <span class=\"bp\">+</span> <span class=\"mi\">4</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>   <span class=\"c1\">-- cannot use linarith here.</span>\n        <span class=\"k\">have</span> <span class=\"n\">z_sq_pos</span><span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">z</span> <span class=\"bp\">*</span> <span class=\"n\">z</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n          <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">z</span><span class=\"o\">,</span> <span class=\"n\">mul_self_nonneg</span><span class=\"o\">]</span>\n        <span class=\"n\">apply</span> <span class=\"n\">le_add_of_nonneg_left</span> <span class=\"n\">z_sq_pos</span>\n      <span class=\"n\">_</span> <span class=\"bp\">≤</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">+</span>  <span class=\"mi\">4</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">z</span><span class=\"o\">]</span>\n      <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"bp\">-</span> <span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"bp\">+</span>  <span class=\"mi\">4</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span> <span class=\"c1\">-- cannot use linarith here.</span>\n</code></pre></div>",
        "id": 408998637,
        "sender_full_name": "Yunong Shi",
        "timestamp": 1703012590
    },
    {
        "content": "<p>This works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>      <span class=\"mi\">4</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"bp\">≤</span> <span class=\"n\">z</span> <span class=\"bp\">*</span> <span class=\"n\">z</span> <span class=\"bp\">+</span> <span class=\"mi\">4</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n        <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">NNReal.coe_le_coe</span><span class=\"o\">]</span>\n        <span class=\"n\">push_cast</span>\n        <span class=\"n\">nlinarith</span>\n</code></pre></div>",
        "id": 409000051,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1703013125
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113489-new-members/topic/Tactics.20for.20NNREAL/near/409000051\">said</a>:</p>\n<blockquote>\n<p>This works:</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>      <span class=\"mi\">4</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"bp\">≤</span> <span class=\"n\">z</span> <span class=\"bp\">*</span> <span class=\"n\">z</span> <span class=\"bp\">+</span> <span class=\"mi\">4</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n        <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">NNReal.coe_le_coe</span><span class=\"o\">]</span>\n        <span class=\"n\">push_cast</span>\n        <span class=\"n\">nlinarith</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>Thanks! <span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> .  What about the last line (with <code>sorry</code>)?</p>\n<p>On a high-level, why do I need to use different tactics for NNReal and R? and how do I find out which tactics that I can use with NNReal?</p>",
        "id": 409000432,
        "sender_full_name": "Yunong Shi",
        "timestamp": 1703013266
    },
    {
        "content": "<p>The main issue is that NNReal is not a field (or even a ring).</p>",
        "id": 409001981,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1703013857
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/113489-new-members/topic/Tactics.20for.20NNREAL/near/409001981\">said</a>:</p>\n<blockquote>\n<p>The main issue is that NNReal is not a field (or even a ring).</p>\n</blockquote>\n<p>Got it, makes sense! Probably I'd better off use <code>Real</code> together with <code>x &gt;= 0</code> rather than <code>NReal</code> I assume.</p>",
        "id": 409002181,
        "sender_full_name": "Yunong Shi",
        "timestamp": 1703013955
    },
    {
        "content": "<p>NNReal is often the better choice; just know how to convert back to real mid-proof when you need to</p>",
        "id": 409004144,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1703014762
    },
    {
        "content": "<p>(Which I did above with a suitable <code>rw</code> and <code>push_cast</code>)</p>",
        "id": 409004191,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1703014789
    },
    {
        "content": "<p>Honestly I'm not so convinced that NNReal is often the better choice. I spent a lot of time last week helping students suffering with this and the gain wasn't clear at all. And it was a nightmare in LTE.</p>",
        "id": 409004447,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1703014913
    },
    {
        "content": "<p>The main advantage of NNReal is that it saves you from getting the same side goals about positivity over and over again</p>",
        "id": 409006986,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1703015955
    },
    {
        "content": "<p>And it's often convenient to have OrderBot when working with  iSup</p>",
        "id": 409007211,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1703016035
    },
    {
        "content": "<p>Yeah but we have <code>positivity</code> now.</p>",
        "id": 409018608,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1703021030
    },
    {
        "content": "<p>No, it is still quite a pain in <code>simp</code> and <code>simp_rw</code></p>",
        "id": 409018682,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1703021061
    }
]