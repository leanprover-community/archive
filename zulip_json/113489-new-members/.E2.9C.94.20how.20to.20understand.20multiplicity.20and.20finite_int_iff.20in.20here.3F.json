[
    {
        "content": "<p>how to understand the hypothesis \"hv\"? Can anyone split it into a few independent proposition？</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">irrational_nrt_of_n_not_dvd_multiplicity</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hm</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n    <span class=\"o\">[</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">Fact</span> <span class=\"n\">p.Prime</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">hxr</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">m</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">hv</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">multiplicity</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"n\">m</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">get</span> <span class=\"o\">(</span><span class=\"n\">finite_int_iff.2</span> <span class=\"o\">⟨</span><span class=\"n\">hp.1.ne_one</span><span class=\"o\">,</span> <span class=\"n\">hm</span><span class=\"o\">⟩)</span> <span class=\"bp\">%</span> <span class=\"n\">n</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">Irrational</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">Nat.eq_zero_or_pos</span> <span class=\"n\">n</span> <span class=\"k\">with</span> <span class=\"o\">(</span><span class=\"n\">rfl</span> <span class=\"bp\">|</span> <span class=\"n\">hnpos</span><span class=\"o\">)</span>\n  <span class=\"bp\">·</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">eq_comm</span><span class=\"o\">,</span> <span class=\"n\">pow_zero</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">Int.cast_one</span><span class=\"o\">,</span> <span class=\"n\">Int.cast_inj</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hxr</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">hxr</span><span class=\"o\">,</span>\n      <span class=\"n\">multiplicity.one_right</span> <span class=\"o\">(</span><span class=\"n\">mt</span> <span class=\"n\">isUnit_iff_dvd_one.1</span> <span class=\"o\">(</span><span class=\"n\">mt</span> <span class=\"n\">Int.coe_nat_dvd.1</span> <span class=\"n\">hp.1.not_dvd_one</span><span class=\"o\">)),</span>\n      <span class=\"n\">Nat.zero_mod</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hv</span>\n  <span class=\"n\">refine'</span> <span class=\"n\">irrational_nrt_of_notint_nrt</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">hxr</span> <span class=\"n\">_</span> <span class=\"n\">hnpos</span>\n  <span class=\"n\">rintro</span> <span class=\"o\">⟨</span><span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">Int.cast_pow</span><span class=\"o\">,</span> <span class=\"n\">Int.cast_inj</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hxr</span>\n  <span class=\"n\">subst</span> <span class=\"n\">m</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">rintro</span> <span class=\"n\">rfl</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">zero_pow</span> <span class=\"n\">hnpos</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hm</span>\n    <span class=\"n\">exact</span> <span class=\"n\">hm</span> <span class=\"n\">rfl</span>\n  <span class=\"n\">erw</span> <span class=\"o\">[</span><span class=\"n\">multiplicity.pow'</span> <span class=\"o\">(</span><span class=\"n\">Nat.prime_iff_prime_int.1</span> <span class=\"n\">hp.1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">finite_int_iff.2</span> <span class=\"o\">⟨</span><span class=\"n\">hp.1.ne_one</span><span class=\"o\">,</span> <span class=\"n\">this</span><span class=\"o\">⟩),</span>\n    <span class=\"n\">Nat.mul_mod_right</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hv</span>\n  <span class=\"n\">exact</span> <span class=\"n\">hv</span> <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 404348327,
        "sender_full_name": "chenjulang",
        "timestamp": 1701068937
    },
    {
        "content": "<p>Waiting  For Help......</p>",
        "id": 404348382,
        "sender_full_name": "chenjulang",
        "timestamp": 1701068969
    },
    {
        "content": "<p>Could you include imports and open statements?  As is, your code does not compile.</p>",
        "id": 404348589,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1701069099
    },
    {
        "content": "<p>The docstring is pretty clear \"If x^n = m is an integer and n does not divide the multiplicity p m, then x is irrational.\"</p>\n<p>Or do you want to understand all the <code>Part.get...</code> stuff?</p>",
        "id": 404348710,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1701069177
    },
    {
        "content": "<p>ok wait</p>",
        "id": 404348721,
        "sender_full_name": "chenjulang",
        "timestamp": 1701069183
    },
    {
        "content": "<p>The theorem is <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=irrational_nrt_of_n_not_dvd_multiplicity#doc\">docs#irrational_nrt_of_n_not_dvd_multiplicity</a> (why there is no <code>Real</code> in the name?!)</p>",
        "id": 404348759,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1701069207
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Rat.Sqrt</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Real.Sqrt</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.RingTheory.Algebraic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.RingTheory.Int.Basic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Rat</span> <span class=\"n\">Real</span> <span class=\"n\">multiplicity</span>\n\n<span class=\"c1\">-- 类似定义“无理数”这个映射 ℝ → Prop</span>\n<span class=\"kd\">def</span> <span class=\"n\">Irrational</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">x</span> <span class=\"bp\">∉</span> <span class=\"n\">Set.range</span> <span class=\"o\">((</span><span class=\"bp\">↑</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n  <span class=\"c1\">-- have reflect1 : ℚ → ℝ := (↑)</span>\n  <span class=\"c1\">-- have set1 : Set ℝ := Set.range (reflect1)</span>\n  <span class=\"c1\">-- ¬ x ∈ set1</span>\n\n<span class=\"c1\">-- #check Rat.cast</span>\n<span class=\"c1\">-- #check (Irrational)</span>\n\n<span class=\"c1\">-- 定理描述：x是实数，n是自然数，m、y是整数；</span>\n<span class=\"c1\">-- x的n次方等于m；</span>\n<span class=\"c1\">-- x等于某个y不可能；</span>\n<span class=\"c1\">-- n大于0；</span>\n<span class=\"c1\">---&gt;（推出）</span>\n<span class=\"c1\">-- x是无理数</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">irrational_nrt_of_notint_nrt</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hxr</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">m</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">hv</span> <span class=\"o\">:</span> <span class=\"bp\">¬∃</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hnpos</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Irrational</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">H_x_In_Rat</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">H_x_In_Rat</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">X_Rat</span><span class=\"o\">,</span><span class=\"n\">X_Rat_CanCastTo_Real</span><span class=\"o\">⟩</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">X_Rat</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">N</span><span class=\"o\">,</span><span class=\"n\">D</span><span class=\"o\">,</span><span class=\"n\">P</span><span class=\"o\">,</span><span class=\"n\">C</span><span class=\"o\">⟩</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">symm</span> <span class=\"n\">X_Rat_CanCastTo_Real</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hxr</span>\n  <span class=\"c1\">-- rintro ⟨⟨N, D, P, C⟩, rfl⟩ -- 这一行可以代替上面4行</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">cast_pow</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hxr</span>\n  <span class=\"k\">have</span> <span class=\"n\">c1</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"n\">D</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Int.cast_ne_zero</span><span class=\"o\">,</span> <span class=\"n\">Int.coe_nat_ne_zero</span><span class=\"o\">]</span>\n    <span class=\"n\">exact</span> <span class=\"n\">P</span>\n  <span class=\"k\">have</span> <span class=\"n\">c2</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"n\">D</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">exact</span> <span class=\"n\">pow_ne_zero</span> <span class=\"n\">n</span> <span class=\"n\">c1</span>\n  <span class=\"c1\">-- have c2 : ((D : ℤ) : ℝ) ^ n ≠ 0 := pow_ne_zero _ c1 -- 写个_，让程序自己猜可以用哪个</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">num_den'</span><span class=\"o\">,</span> <span class=\"n\">cast_pow</span><span class=\"o\">,</span> <span class=\"n\">cast_mk</span><span class=\"o\">,</span> <span class=\"n\">div_pow</span><span class=\"o\">,</span> <span class=\"n\">div_eq_iff_mul_eq</span> <span class=\"n\">c2</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">Int.cast_pow</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">Int.cast_pow</span><span class=\"o\">,</span>\n    <span class=\"bp\">←</span> <span class=\"n\">Int.cast_mul</span><span class=\"o\">,</span> <span class=\"n\">Int.cast_inj</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hxr</span>\n  <span class=\"k\">have</span> <span class=\"n\">hdivn</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">D</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"bp\">∣</span> <span class=\"n\">N</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">set</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"n\">m</span>\n    <span class=\"n\">set</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"n\">hxr</span> <span class=\"c1\">-- 加上这两行这样比较好读对于新手的我</span>\n    <span class=\"n\">exact</span> <span class=\"n\">Dvd.intro_left</span> <span class=\"n\">c</span> <span class=\"n\">h</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">Int.dvd_natAbs</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">Int.coe_nat_pow</span><span class=\"o\">,</span> <span class=\"n\">Int.coe_nat_dvd</span><span class=\"o\">,</span> <span class=\"n\">Int.natAbs_pow</span><span class=\"o\">,</span>\n    <span class=\"n\">Nat.pow_dvd_pow_iff</span> <span class=\"n\">hnpos</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hdivn</span>\n  <span class=\"k\">have</span> <span class=\"n\">D_eq_one</span> <span class=\"o\">:</span> <span class=\"n\">D</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">Nat.gcd_eq_right</span> <span class=\"n\">hdivn</span><span class=\"o\">,</span> <span class=\"n\">C.gcd_eq_one</span><span class=\"o\">]</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">D_eq_one</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">P</span> <span class=\"n\">C</span> <span class=\"n\">hxr</span> <span class=\"n\">c1</span> <span class=\"n\">c2</span> <span class=\"n\">hdivn</span>\n  <span class=\"c1\">-- obtain rfl : D = 1 := by  --这里可以代替上面的3行</span>\n  <span class=\"c1\">--   rw [← Nat.gcd_eq_right hdivn, C.gcd_eq_one]</span>\n  <span class=\"n\">apply</span> <span class=\"n\">absurd</span> <span class=\"n\">hv</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">not_exists</span><span class=\"o\">,</span> <span class=\"n\">not_forall</span><span class=\"o\">,</span> <span class=\"n\">not_not</span><span class=\"o\">]</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"bp\">↑</span><span class=\"n\">N</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">symm</span> <span class=\"n\">X_Rat_CanCastTo_Real</span><span class=\"o\">]</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">num_den'</span><span class=\"o\">,</span><span class=\"n\">D_eq_one</span><span class=\"o\">,</span> <span class=\"n\">Int.ofNat_one</span><span class=\"o\">,</span> <span class=\"n\">divInt_one</span><span class=\"o\">,</span> <span class=\"n\">cast_coe_int</span><span class=\"o\">]</span>\n  <span class=\"n\">use</span> <span class=\"bp\">↑</span><span class=\"n\">N</span>\n  <span class=\"c1\">-- refine' hv ⟨N, _⟩ --这里可以代替上面的6行</span>\n  <span class=\"n\">done</span>\n<span class=\"c1\">-- #align irrational_nrt_of_notint_nrt irrational_nrt_of_notint_nrt</span>\n\n<span class=\"c1\">-- 定理描述：n、p是自然数，m是整数，x是实数</span>\n<span class=\"c1\">-- m不等于0</span>\n<span class=\"c1\">-- p是素数</span>\n<span class=\"c1\">-- x的n次方等于m</span>\n<span class=\"c1\">--</span>\n<span class=\"c1\">-- --&gt;推出</span>\n<span class=\"c1\">-- x是无理数</span>\n<span class=\"c1\">-- section</span>\n<span class=\"c1\">--   variable (p : ℕ)(m : ℤ)</span>\n<span class=\"c1\">--   def h1 (hp : Prime p):  Int.natAbs p ≠ 1 := by</span>\n<span class=\"c1\">--     simp only [Int.natAbs_ofNat, ne_eq]</span>\n<span class=\"c1\">--     apply Prime.ne_one</span>\n<span class=\"c1\">--     exact hp</span>\n<span class=\"c1\">--   -- def h2 (hm : m ≠ 0)  : m ≠ 0 := by</span>\n<span class=\"c1\">--   --   exact hm</span>\n<span class=\"c1\">--   -- def h3 : apply [finite_int_iff.2] (h1∧h2)</span>\n<span class=\"c1\">--   --   finite_int_iff</span>\n<span class=\"c1\">--   -- def hv [hp : Fact p.Prime] (hm : m ≠ 0) (n : ℕ)</span>\n<span class=\"c1\">--   --   : (multiplicity (p : ℤ) m).get (finite_int_iff.2 ⟨hp.1.ne_one, hm⟩) % n := by sorry</span>\n<span class=\"c1\">--   -- def h4 {m : ℤ} (p : ℕ)</span>\n<span class=\"c1\">--   --   := (multiplicity (p : ℤ) m).get</span>\n<span class=\"c1\">--   -- def h5 (hm : m ≠ 0) [hp : Fact p.Prime] (n : ℕ)</span>\n<span class=\"c1\">--   --   := finite_int_iff.2 ⟨h1, hm⟩</span>\n\n<span class=\"c1\">-- end</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">irrational_nrt_of_n_not_dvd_multiplicity</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hm</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n    <span class=\"o\">[</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">Fact</span> <span class=\"n\">p.Prime</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">hxr</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">m</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">hv</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">multiplicity</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"n\">m</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">get</span> <span class=\"o\">(</span><span class=\"n\">finite_int_iff.2</span> <span class=\"o\">⟨</span><span class=\"n\">hp.1.ne_one</span><span class=\"o\">,</span> <span class=\"n\">hm</span><span class=\"o\">⟩)</span> <span class=\"bp\">%</span> <span class=\"n\">n</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">Irrational</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">Nat.eq_zero_or_pos</span> <span class=\"n\">n</span> <span class=\"k\">with</span> <span class=\"o\">(</span><span class=\"n\">rfl</span> <span class=\"bp\">|</span> <span class=\"n\">hnpos</span><span class=\"o\">)</span>\n  <span class=\"bp\">·</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">eq_comm</span><span class=\"o\">,</span> <span class=\"n\">pow_zero</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">Int.cast_one</span><span class=\"o\">,</span> <span class=\"n\">Int.cast_inj</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hxr</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">hxr</span><span class=\"o\">,</span>\n      <span class=\"n\">multiplicity.one_right</span> <span class=\"o\">(</span><span class=\"n\">mt</span> <span class=\"n\">isUnit_iff_dvd_one.1</span> <span class=\"o\">(</span><span class=\"n\">mt</span> <span class=\"n\">Int.coe_nat_dvd.1</span> <span class=\"n\">hp.1.not_dvd_one</span><span class=\"o\">)),</span>\n      <span class=\"n\">Nat.zero_mod</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hv</span>\n  <span class=\"n\">refine'</span> <span class=\"n\">irrational_nrt_of_notint_nrt</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">hxr</span> <span class=\"n\">_</span> <span class=\"n\">hnpos</span>\n  <span class=\"n\">rintro</span> <span class=\"o\">⟨</span><span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">Int.cast_pow</span><span class=\"o\">,</span> <span class=\"n\">Int.cast_inj</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hxr</span>\n  <span class=\"n\">subst</span> <span class=\"n\">m</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">rintro</span> <span class=\"n\">rfl</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">zero_pow</span> <span class=\"n\">hnpos</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hm</span>\n    <span class=\"n\">exact</span> <span class=\"n\">hm</span> <span class=\"n\">rfl</span>\n  <span class=\"n\">erw</span> <span class=\"o\">[</span><span class=\"n\">multiplicity.pow'</span> <span class=\"o\">(</span><span class=\"n\">Nat.prime_iff_prime_int.1</span> <span class=\"n\">hp.1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">finite_int_iff.2</span> <span class=\"o\">⟨</span><span class=\"n\">hp.1.ne_one</span><span class=\"o\">,</span> <span class=\"n\">this</span><span class=\"o\">⟩),</span>\n    <span class=\"n\">Nat.mul_mod_right</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hv</span>\n  <span class=\"n\">exact</span> <span class=\"n\">hv</span> <span class=\"n\">rfl</span>\n<span class=\"c1\">-- #align irrational_nrt_of_n_not_dvd_multiplicity irrational_nrt_of_n_not_dvd_multiplicity</span>\n\n\n<span class=\"kd\">theorem</span> <span class=\"n\">irrational_sqrt_of_multiplicity_odd</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hm</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">Fact</span> <span class=\"n\">p.Prime</span><span class=\"o\">]</span>\n    <span class=\"o\">(</span><span class=\"n\">Hpv</span> <span class=\"o\">:</span>\n      <span class=\"o\">(</span><span class=\"n\">multiplicity</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"n\">m</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">get</span> <span class=\"o\">(</span><span class=\"n\">finite_int_iff.2</span> <span class=\"o\">⟨</span><span class=\"n\">hp.1.ne_one</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">ne_of_lt</span> <span class=\"n\">hm</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">⟩)</span> <span class=\"bp\">%</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">Irrational</span> <span class=\"o\">(</span><span class=\"n\">Real.sqrt</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">@</span><span class=\"n\">irrational_nrt_of_n_not_dvd_multiplicity</span> <span class=\"n\">_</span> <span class=\"mi\">2</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">Ne.symm</span> <span class=\"o\">(</span><span class=\"n\">ne_of_lt</span> <span class=\"n\">hm</span><span class=\"o\">))</span> <span class=\"n\">p</span> <span class=\"n\">hp</span>\n    <span class=\"o\">(</span><span class=\"n\">sq_sqrt</span> <span class=\"o\">(</span><span class=\"n\">Int.cast_nonneg.2</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">le_of_lt</span> <span class=\"n\">hm</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Hpv</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">one_ne_zero</span><span class=\"o\">)</span>\n<span class=\"c1\">-- #align irrational_sqrt_of_multiplicity_odd irrational_sqrt_of_multiplicity_odd</span>\n\n\n<span class=\"kd\">theorem</span> <span class=\"n\">irrational_sqrt</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">Nat.Prime</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Irrational</span> <span class=\"o\">(</span><span class=\"n\">Real.sqrt</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">@</span><span class=\"n\">irrational_sqrt_of_multiplicity_odd</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">Int.coe_nat_pos.2</span> <span class=\"n\">hp.pos</span><span class=\"o\">)</span> <span class=\"n\">p</span> <span class=\"o\">⟨</span><span class=\"n\">hp</span><span class=\"o\">⟩</span> <span class=\"bp\">&lt;|</span> <span class=\"kd\">by</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">multiplicity.multiplicity_self</span>\n      <span class=\"o\">(</span><span class=\"n\">mt</span> <span class=\"n\">isUnit_iff_dvd_one.1</span> <span class=\"o\">(</span><span class=\"n\">mt</span> <span class=\"n\">Int.coe_nat_dvd.1</span> <span class=\"n\">hp.not_dvd_one</span><span class=\"o\">))]</span>\n\n<span class=\"c1\">-- def prime2 : Nat.Prime 2 := by</span>\n<span class=\"c1\">--     exact Nat.prime_two</span>\n<span class=\"c1\">-- #check Nat.Prime.irrational_sqrt prime2</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">irrational_sqrt_two</span> <span class=\"o\">:</span> <span class=\"n\">Irrational</span> <span class=\"o\">(</span><span class=\"n\">Real.sqrt</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"n\">prime2</span> <span class=\"o\">:</span> <span class=\"n\">Nat.Prime</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">exact</span> <span class=\"n\">Nat.prime_two</span>\n  <span class=\"n\">apply</span> <span class=\"n\">irrational_sqrt</span> <span class=\"n\">at</span> <span class=\"n\">prime2</span>\n  <span class=\"n\">exact</span> <span class=\"n\">prime2</span>\n  <span class=\"n\">done</span>\n  <span class=\"c1\">-- simpa using Nat.prime_two.irrational_sqrt</span>\n</code></pre></div>",
        "id": 404348798,
        "sender_full_name": "chenjulang",
        "timestamp": 1701069240
    },
    {
        "content": "<p>This is the file i am using for learning.I am tring to prove Irrational 2 in here.<br>\nI was trying to make hv easier , by spliting it into a few hypothesis.<br>\nBut I got stuck.</p>",
        "id": 404349121,
        "sender_full_name": "chenjulang",
        "timestamp": 1701069404
    },
    {
        "content": "<p>Do you understand the mathematical statement?</p>",
        "id": 404349215,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1701069457
    },
    {
        "content": "<p>The one written in the docstring.</p>",
        "id": 404349234,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1701069467
    },
    {
        "content": "<p>The condition is there because <code>3^2=9</code> but <code>3</code> is rational.</p>",
        "id": 404349364,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1701069538
    },
    {
        "content": "<p>In other words, Can you define a propasition  using only \"multiplicity\"?<br>\nAnd then  define another propasition  using only \"finite_int_iff\"?</p>",
        "id": 404349651,
        "sender_full_name": "chenjulang",
        "timestamp": 1701069688
    },
    {
        "content": "<p>I cannot understand this line :<br>\n (hv : (multiplicity (p : ℤ) m).get (finite_int_iff.2 ⟨hp.1.ne_one, hm⟩) % n ≠ 0)</p>",
        "id": 404349753,
        "sender_full_name": "chenjulang",
        "timestamp": 1701069740
    },
    {
        "content": "<p>I have to teach and I don't have time to write a precise answer, but the point is that <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=multiplicity#doc\">docs#multiplicity</a> is defined on any <code>Monoid</code>, where mathematically we usually would not use it (meaning where it is infinite or something similar). There is a theorem that says that for the integers it is always a natural number (the one you think it is) and all that stuff are there because of this reason.</p>",
        "id": 404349866,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1701069814
    },
    {
        "content": "<p>Because in general <code>multiplicity a b</code> is not a natural number, but a term of type <code>PartENat</code></p>",
        "id": 404349896,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1701069837
    },
    {
        "content": "<p><code>PartENat</code> is the natural number plus infinity, but for Lean is a new type, its term are <em>not</em> natural numbers.</p>",
        "id": 404349991,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1701069877
    },
    {
        "content": "<p>em......</p>",
        "id": 404350648,
        "sender_full_name": "chenjulang",
        "timestamp": 1701070139
    },
    {
        "content": "<p>Let me clear up my clues：</p>\n<ol>\n<li>“multiplicity a b”   returns the largest natural number n such that a ^ n ∣ b</li>\n<li>“ finite_int_iff.2 ⟨hp.1.ne_one, hm⟩   ” implies this kind of proposition  \" multiplicity.Finite a b\"<br>\nBut Why can \" (multiplicity (p : ℤ) m).get (finite_int_iff.2 ⟨hp.1.ne_one, hm⟩)\"  returns a Nat ?</li>\n</ol>",
        "id": 404352166,
        "sender_full_name": "chenjulang",
        "timestamp": 1701070511
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"130384\">Riccardo Brasca</span> <a href=\"#narrow/stream/113489-new-members/topic/how.20to.20understand.20multiplicity.20and.20finite_int_iff.20in.20here.3F/near/404348759\">said</a>:</p>\n<blockquote>\n<p>The theorem is <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=irrational_nrt_of_n_not_dvd_multiplicity#doc\">docs#irrational_nrt_of_n_not_dvd_multiplicity</a> (why there is no <code>Real</code> in the name?!)</p>\n</blockquote>\n<p>I delete it...hahaha...But it still works in my single file.</p>",
        "id": 404353455,
        "sender_full_name": "chenjulang",
        "timestamp": 1701071114
    },
    {
        "content": "<p>But Why can \" (multiplicity (p : ℤ) m).get (finite_int_iff.2 ⟨hp.1.ne_one, hm⟩)\" returns a Nat ?<br>\nWaiting For help........Still...</p>",
        "id": 404353937,
        "sender_full_name": "chenjulang",
        "timestamp": 1701071253
    },
    {
        "content": "<p><code>multiplicity a b</code> returns an <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=PartENat#doc\">docs#PartENat</a> (i.e. <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">N</mi><mo>∪</mo><mo stretchy=\"false\">{</mo><mi mathvariant=\"normal\">∞</mi><mo stretchy=\"false\">}</mo></mrow><annotation encoding=\"application/x-tex\">\\mathbb{N} \\cup \\{\\infty\\}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6889em;\"></span><span class=\"mord mathbb\">N</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">∪</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">{</span><span class=\"mord\">∞</span><span class=\"mclose\">}</span></span></span></span>). Also see <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Part.get#doc\">docs#Part.get</a>.</p>",
        "id": 404355374,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1701071854
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=multiplicity#doc\">docs#multiplicity</a> returns either a natural number or \"infinity\". You can then use <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Part.get#doc\">docs#Part.get</a> to give you an actual natural number given a proof that the multiplicity is not \"infinity\"</p>",
        "id": 404355379,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1701071855
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"439483\">@Andrew Yang</span> <span class=\"user-mention\" data-user-id=\"307953\">@Ruben Van de Velde</span>  OK. And How about this line , how do you understand it :<br>\n“ (multiplicity (p : ℤ) m).get (finite_int_iff.2 ⟨hp.1.ne_one ，hm⟩)\"</p>",
        "id": 404355836,
        "sender_full_name": "chenjulang",
        "timestamp": 1701072065
    },
    {
        "content": "<p><code>(multiplicity (p : ℤ) m).get</code> is shorthand for <code>Part.get (multiplicity (p : ℤ) m)</code>. This is called dot notation / field notation.</p>",
        "id": 404356566,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1701072406
    },
    {
        "content": "<p>ok,i see</p>",
        "id": 404356646,
        "sender_full_name": "chenjulang",
        "timestamp": 1701072444
    },
    {
        "content": "<p>How about the remaining part \"(finite_int_iff.2 ⟨hp.1.ne_one, hm⟩)\"?</p>",
        "id": 404356854,
        "sender_full_name": "chenjulang",
        "timestamp": 1701072576
    },
    {
        "content": "<p>It produces the <code>Part.Dom</code> (i.e. it is actually finite) argument needed for <code>Part.get</code>.</p>",
        "id": 404357736,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1701073079
    },
    {
        "content": "<p>oh,oh...</p>",
        "id": 404357832,
        "sender_full_name": "chenjulang",
        "timestamp": 1701073106
    },
    {
        "content": "<p>原来如此</p>",
        "id": 404357878,
        "sender_full_name": "chenjulang",
        "timestamp": 1701073132
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"439483\">@Andrew Yang</span>  Thanks a lot !!!!!!!</p>",
        "id": 404357973,
        "sender_full_name": "chenjulang",
        "timestamp": 1701073191
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"665035\">chenjulang</span> has marked this topic as resolved.</p>",
        "id": 404358088,
        "sender_full_name": "Notification Bot",
        "timestamp": 1701073231
    },
    {
        "content": "<p>The point is that, by definition, <code>multiplicity a b</code> is <em>never</em> a natural number. But sometimes you can transform it to a natural number. That is what that line is doing.</p>",
        "id": 404366752,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1701076503
    },
    {
        "content": "<p>ok，thanks</p>",
        "id": 404366834,
        "sender_full_name": "chenjulang",
        "timestamp": 1701076538
    }
]