[
    {
        "content": "<p>I am struggling to prove the following theorem (which seems correct from the mathlib4 definition).</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Logic.Equiv.List</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">h</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">Encodable.fintypeEquivFin</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">cast</span> <span class=\"n\">h</span> <span class=\"bp\">=</span> <span class=\"n\">i</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>Is there any theorem to prove this? Or shouldn't I prove such a theorem that depends on the specific definition of <code>Encodable.fintypeEquivFin</code>?</p>",
        "id": 390691668,
        "sender_full_name": "Palalansoukî",
        "timestamp": 1694600650
    },
    {
        "content": "<p>Can you please post a full <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> ?</p>",
        "id": 390692770,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1694601058
    },
    {
        "content": "<p>Sorry. I have corrected the post.</p>",
        "id": 390694110,
        "sender_full_name": "Palalansoukî",
        "timestamp": 1694601592
    },
    {
        "content": "<p>It's true but it seems we're missing a lot of API; here's most of a proof that just unfolds an awful lot of things:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Logic.Equiv.List</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">theorem</span> <span class=\"n\">Fin.sort_univ</span> <span class=\"o\">{</span><span class=\"n\">n</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">Finset.univ.sort</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">List.finRange</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">theorem</span> <span class=\"n\">List.indexOf_finRange</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">List.finRange</span> <span class=\"n\">k</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">indexOf</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">i</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">Encodable.fintypeEquivFin</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">cast</span> <span class=\"o\">(</span><span class=\"n\">Fintype.card_fin</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">i</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">ext</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">Encodable.fintypeEquivFin</span><span class=\"o\">,</span> <span class=\"n\">Fin.cast_eq_cast'</span><span class=\"o\">,</span>\n    <span class=\"bp\">←</span><span class=\"n\">Fin.castIso_eq_cast</span><span class=\"o\">,</span> <span class=\"n\">Fin.encodable</span><span class=\"o\">,</span> <span class=\"n\">List.Nodup.getEquivOfForallMemList</span><span class=\"o\">,</span> <span class=\"n\">Encodable.ofEquiv</span><span class=\"o\">,</span> <span class=\"n\">Encodable.ofLeftInverse</span><span class=\"o\">,</span>\n    <span class=\"n\">Encodable.sortedUniv</span><span class=\"o\">,</span> <span class=\"n\">Encodable.ofLeftInjection</span><span class=\"o\">,</span> <span class=\"n\">Encodable.encode'</span><span class=\"o\">,</span>\n    <span class=\"n\">Subtype.encodable</span><span class=\"o\">,</span> <span class=\"n\">Encodable.encodeSubtype</span><span class=\"o\">]</span>\n  <span class=\"n\">convert</span> <span class=\"n\">List.indexOf_finRange</span> <span class=\"n\">i</span>\n</code></pre></div>",
        "id": 390695962,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1694602251
    },
    {
        "content": "<p>Those first two lemmas would make a good PR to mathlib, I think that last one probably needs some more thought</p>",
        "id": 390697119,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1694602655
    },
    {
        "content": "<p>Your advice helped me to prove it. Thank you very much.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Logic.Equiv.List</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">Fin.sort_univ</span> <span class=\"o\">{</span><span class=\"n\">n</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">Finset.univ.sort</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">List.finRange</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n  <span class=\"n\">List.eq_of_perm_of_sorted</span>\n    <span class=\"o\">(</span><span class=\"n\">List.perm_of_nodup_nodup_toFinset_eq</span> <span class=\"o\">(</span><span class=\"n\">Finset.sort_nodup</span> <span class=\"n\">_</span> <span class=\"n\">Finset.univ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">List.nodup_finRange</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">ext</span> <span class=\"n\">i</span><span class=\"bp\">;</span> <span class=\"n\">simp</span><span class=\"o\">))</span>\n    <span class=\"o\">(</span><span class=\"n\">Finset.sort_sorted</span> <span class=\"n\">LE.le</span> <span class=\"n\">Finset.univ</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">List.Pairwise.pmap</span> <span class=\"o\">(</span><span class=\"n\">List.pairwise_le_range</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">))</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">List.indexOf_finRange</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">List.finRange</span> <span class=\"n\">k</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">indexOf</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">i</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">List.finRange</span> <span class=\"n\">k</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">indexOf</span> <span class=\"n\">i</span> <span class=\"bp\">&lt;</span> <span class=\"o\">(</span><span class=\"n\">List.finRange</span> <span class=\"n\">k</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">length</span> <span class=\"o\">:=</span> <span class=\"n\">List.indexOf_lt_length.mpr</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">)</span>\n  <span class=\"k\">have</span> <span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">List.finRange</span> <span class=\"n\">k</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">get</span> <span class=\"o\">⟨(</span><span class=\"n\">List.finRange</span> <span class=\"n\">k</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">indexOf</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">this</span><span class=\"o\">⟩</span> <span class=\"bp\">=</span> <span class=\"n\">i</span> <span class=\"o\">:=</span> <span class=\"n\">List.indexOf_get</span> <span class=\"n\">this</span>\n  <span class=\"k\">have</span> <span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">List.finRange</span> <span class=\"n\">k</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">get</span> <span class=\"o\">⟨</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">⟩</span> <span class=\"bp\">=</span> <span class=\"n\">i</span> <span class=\"o\">:=</span> <span class=\"n\">List.get_finRange</span> <span class=\"n\">_</span>\n  <span class=\"n\">simpa</span> <span class=\"n\">using</span> <span class=\"o\">(</span><span class=\"n\">List.Nodup.get_inj_iff</span> <span class=\"o\">(</span><span class=\"n\">List.nodup_finRange</span> <span class=\"n\">k</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">mp</span> <span class=\"o\">(</span><span class=\"n\">Eq.trans</span> <span class=\"n\">h₁</span> <span class=\"n\">h₂.symm</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">Encodable.fintypeEquivFin</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">cast</span> <span class=\"o\">(</span><span class=\"n\">Fintype.card_fin</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">i</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">ext</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">Encodable.fintypeEquivFin</span><span class=\"o\">,</span> <span class=\"n\">Fin.cast_eq_cast'</span><span class=\"o\">,</span>\n    <span class=\"bp\">←</span><span class=\"n\">Fin.castIso_eq_cast</span><span class=\"o\">,</span> <span class=\"n\">Fin.encodable</span><span class=\"o\">,</span> <span class=\"n\">List.Nodup.getEquivOfForallMemList</span><span class=\"o\">,</span>\n    <span class=\"n\">Encodable.sortedUniv</span><span class=\"o\">,</span> <span class=\"n\">Encodable.encode'</span><span class=\"o\">]</span>\n  <span class=\"n\">convert</span> <span class=\"n\">List.indexOf_finRange</span> <span class=\"n\">i</span>\n  <span class=\"n\">exact</span> <span class=\"n\">Fin.sort_univ</span>\n</code></pre></div>",
        "id": 390712080,
        "sender_full_name": "Palalansoukî",
        "timestamp": 1694607992
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"414485\">palalansoukî</span> has marked this topic as resolved.</p>",
        "id": 390773248,
        "sender_full_name": "Notification Bot",
        "timestamp": 1694627530
    },
    {
        "content": "<p>Would you min making a PR for those first two lemmas?</p>",
        "id": 390790279,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1694634092
    },
    {
        "content": "<p>I created the PR <a href=\"https://github.com/leanprover-community/mathlib4/pull/7177\">https://github.com/leanprover-community/mathlib4/pull/7177</a>. This is my first PR, so I apologize if it is incomplete.</p>",
        "id": 391117506,
        "sender_full_name": "Palalansoukî",
        "timestamp": 1694768664
    },
    {
        "content": "<p>I'm afraid that for CI to run, you'll need to close that and re-open it from a branch of mathlib4 itself (rather than a fork)</p>",
        "id": 391120951,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1694769718
    },
    {
        "content": "<p>I've given you (<code>iehality</code>) write permission</p>",
        "id": 391121035,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1694769730
    },
    {
        "content": "<p>Thank you. I reopened the PR.</p>",
        "id": 391154173,
        "sender_full_name": "Palalansoukî",
        "timestamp": 1694780241
    }
]