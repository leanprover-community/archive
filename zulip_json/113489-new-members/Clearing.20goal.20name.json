[
    {
        "content": "<p>How can I clear the name on a current goal? Sometimes after doing a few <code>cases</code> and so on I have a goal named like <code>neg.intro</code> or something, and then further cases get silly tags like <code>neg.intro.pos</code> and <code>neg.intro.neg</code> and I'd prefer to just be able to refer to them as <code>pos</code> and <code>neg</code>. Alternately, if there's a syntax like <code>case _pos =&gt;</code> or <code>case *.pos =&gt;</code>, that's fine too</p>",
        "id": 405846489,
        "sender_full_name": "Alex Meiburg",
        "timestamp": 1701702966
    },
    {
        "content": "<p>Doesn't <code>case pos</code> work? I didn't try, but vaguely remember that the case name only has to be a suffix of the goal name as displayed in the info view.</p>",
        "id": 405852895,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1701704682
    },
    {
        "content": "<p>nope, it doesn't. It complains that there's no \"pos\" tag, just \"neg.intro.pos\" (and others)</p>",
        "id": 405852979,
        "sender_full_name": "Alex Meiburg",
        "timestamp": 1701704702
    },
    {
        "content": "<p>Ok, sorry for the noise then.</p>",
        "id": 405853098,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1701704728
    },
    {
        "content": "<p>It should work -- <code>cases</code> looks for an exact match, and if that fails a suffix, and if that fails a prefix.</p>",
        "id": 405884539,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1701713037
    },
    {
        "content": "<p>Could you make a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> of it not working?</p>",
        "id": 405884733,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1701713105
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Polynomial.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Sign</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">foobar</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">LinearOrderedField</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">η</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">≥</span>  <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">by_cases</span> <span class=\"n\">hd0</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">η</span> <span class=\"bp\">=</span> <span class=\"mi\">37</span><span class=\"o\">)</span>\n    <span class=\"n\">case</span> <span class=\"n\">pos</span> <span class=\"bp\">=&gt;</span> <span class=\"gr\">sorry</span>\n    <span class=\"n\">case</span> <span class=\"n\">neg</span>\n    <span class=\"o\">{</span>\n      <span class=\"n\">cases</span> <span class=\"n\">hcsq1</span> <span class=\"o\">:</span> <span class=\"n\">SignType.sign</span> <span class=\"n\">η</span>\n      <span class=\"n\">case</span> <span class=\"n\">zero</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">{</span> <span class=\"c1\">--zero</span>\n        <span class=\"gr\">sorry</span>\n      <span class=\"o\">}</span>\n      <span class=\"n\">case</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">{</span><span class=\"c1\">--neg</span>\n        <span class=\"gr\">sorry</span>\n      <span class=\"o\">}</span>\n      <span class=\"n\">case</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">{</span><span class=\"c1\">--pos</span>\n        <span class=\"gr\">sorry</span>\n      <span class=\"o\">}</span>\n    <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 405892151,
        "sender_full_name": "Alex Meiburg",
        "timestamp": 1701715936
    },
    {
        "content": "<p>Thanks, the error message hints at the problem</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Available</span> <span class=\"n\">tags</span><span class=\"o\">:</span> <span class=\"bp\">'</span><span class=\"n\">neg.zero._</span><span class=\"bp\">@.</span><span class=\"n\">Mathlib.foo._hyg.16'</span><span class=\"o\">,</span> <span class=\"bp\">'</span><span class=\"n\">neg.neg._</span><span class=\"bp\">@.</span><span class=\"n\">Mathlib.foo._hyg.16'</span><span class=\"o\">,</span> <span class=\"bp\">'</span><span class=\"n\">neg.pos._</span><span class=\"bp\">@.</span><span class=\"n\">Mathlib.foo._hyg.16'</span>\n</code></pre></div>\n<p>Either <code>case</code> needs to be fixed to be able to handle hygienic names, or <code>cases</code> needs to be fixed to not generate tags with hygienic names. I'm not sure which is the right thing, but I'm sure that in any case <code>case zero</code> <em>should</em> work.</p>",
        "id": 405899898,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1701718986
    },
    {
        "content": "<p>alright haha. Yeah, I'll admit I have no idea what \"hygenic tags\" are so I'll leave that for someone else to deal with :) But, since prefixes <em>do</em> work, is there a way for me to clear the tag on the current goal? -- so that instead of '<a href=\"mailto:neg.zero._@.Mathlib.foo._hyg.16\">neg.zero._@.Mathlib.foo._hyg.16</a>' the tag gets named '<a href=\"mailto:zero._@.Mathlib.foo._hyg.16\">zero._@.Mathlib.foo._hyg.16</a>' and then <code>case</code> works</p>",
        "id": 405907370,
        "sender_full_name": "Alex Meiburg",
        "timestamp": 1701722161
    },
    {
        "content": "<p>I'm not sure there's already a tactic for it, but here's one hot off the presses:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Polynomial.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Sign</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Elab</span> <span class=\"n\">Tactic</span> <span class=\"k\">in</span>\n<span class=\"n\">elab</span> <span class=\"s2\">\"clear_tag\"</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">g</span> <span class=\"bp\">←</span> <span class=\"n\">getMainGoal</span>\n  <span class=\"n\">g.setTag</span> <span class=\"n\">Name.anonymous</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">foobar</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">LinearOrderedField</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">η</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">≥</span>  <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">by_cases</span> <span class=\"n\">hd0</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">η</span> <span class=\"bp\">=</span> <span class=\"mi\">37</span><span class=\"o\">)</span>\n    <span class=\"n\">case</span> <span class=\"n\">pos</span> <span class=\"bp\">=&gt;</span> <span class=\"gr\">sorry</span>\n    <span class=\"n\">case</span> <span class=\"n\">neg</span>\n    <span class=\"o\">{</span>\n      <span class=\"n\">clear_tag</span>\n      <span class=\"n\">cases</span> <span class=\"n\">hcsq1</span> <span class=\"o\">:</span> <span class=\"n\">SignType.sign</span> <span class=\"n\">η</span>\n      <span class=\"n\">case</span> <span class=\"n\">zero</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">{</span> <span class=\"c1\">--zero</span>\n        <span class=\"gr\">sorry</span>\n      <span class=\"o\">}</span>\n      <span class=\"n\">case</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">{</span><span class=\"c1\">--neg</span>\n        <span class=\"gr\">sorry</span>\n      <span class=\"o\">}</span>\n      <span class=\"n\">case</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">{</span><span class=\"c1\">--pos</span>\n        <span class=\"gr\">sorry</span>\n      <span class=\"o\">}</span>\n    <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 405908262,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1701722580
    },
    {
        "content": "<p>Snazzy! :) Thanks!</p>",
        "id": 405908831,
        "sender_full_name": "Alex Meiburg",
        "timestamp": 1701722835
    },
    {
        "content": "<p>I'll leave this marked \"unresolved\" in case someone else knows of one in mathlib, or wants to add your <code>clear_tag</code> in a PR. Anyone else, free to close it if desired</p>",
        "id": 405908899,
        "sender_full_name": "Alex Meiburg",
        "timestamp": 1701722876
    }
]