[
    {
        "content": "<p>Hi<br>\nHow do I define a list of length n in Lean 4 if I know each element in terms of its index? I asked chatGPT and I got something that doesn't quite work :|. It said <code>def list_of_length_n (x : nat) (n : nat) : list nat := [x | _ in 1..n]</code>.<br>\nI can do it inductively but I believe there's a better way. Also, for questions like this what reference can I look at in the future so that I don't have to bug y'all?</p>",
        "id": 325350998,
        "sender_full_name": "Ben Nale",
        "timestamp": 1675330772
    },
    {
        "content": "<p>this can't be <em>that</em> hard <span aria-label=\"eyes\" class=\"emoji emoji-1f440\" role=\"img\" title=\"eyes\">:eyes:</span></p>",
        "id": 325352348,
        "sender_full_name": "Ben Nale",
        "timestamp": 1675331200
    },
    {
        "content": "<p>Do you mean that you want to turn a function <code>Fin n -&gt; X</code> into a <code>List X</code>?</p>",
        "id": 325352850,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1675331357
    },
    {
        "content": "<p>I want to do something like <code>def list_foo (n : nat) : list nat := [2^i | i in 1..n]</code></p>",
        "id": 325353276,
        "sender_full_name": "Ben Nale",
        "timestamp": 1675331477
    },
    {
        "content": "<p>oh yes , I get you! that <em>is</em> what i want</p>",
        "id": 325353544,
        "sender_full_name": "Ben Nale",
        "timestamp": 1675331552
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=List.ofFn#doc\">docs4#List.ofFn</a></p>",
        "id": 325353703,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1675331602
    },
    {
        "content": "<p>cheers!</p>",
        "id": 325354174,
        "sender_full_name": "Ben Nale",
        "timestamp": 1675331736
    },
    {
        "content": "<p>Another option:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[specialize]</span> <span class=\"kd\">def</span> <span class=\"n\">mkListWith</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n  <span class=\"n\">List.range</span> <span class=\"n\">n</span> <span class=\"bp\">|&gt;.</span><span class=\"n\">map</span> <span class=\"n\">f</span>\n</code></pre></div>",
        "id": 325354180,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1675331737
    },
    {
        "content": "<p>nice. Since I'm not using mathlib I'll go with this option :)</p>",
        "id": 325354361,
        "sender_full_name": "Ben Nale",
        "timestamp": 1675331782
    },
    {
        "content": "<p>what's a good resource for learning things like this btw?</p>",
        "id": 325354569,
        "sender_full_name": "Ben Nale",
        "timestamp": 1675331841
    },
    {
        "content": "<p>Probably this stream on Zulip (-;</p>",
        "id": 325354609,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1675331855
    },
    {
        "content": "<p>The version Johan linked is from <code>std4</code>, so if you're already able to <code>import Std...</code> that will be in <code>import Std.Data.List.Basic</code></p>",
        "id": 325354660,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1675331875
    },
    {
        "content": "<p>thanks so much</p>",
        "id": 325355175,
        "sender_full_name": "Ben Nale",
        "timestamp": 1675332012
    },
    {
        "content": "<p>Like in the example above I tried to define a list, but the problem I get that it doesn't seem to accept the function I would like to use.</p>\n<p>ConFracDenom ξ definitely returns an element of ℤ. </p>\n<p>It underlines \"expansion\" and says <code>IR check failed at 'expansion', error: unknown declaration 'aux'</code></p>\n<p>What am I doing wrong?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">aux</span> <span class=\"o\">(</span><span class=\"n\">ξ</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℤ</span> <span class=\"o\">:=</span> <span class=\"n\">ConFracDenom</span> <span class=\"n\">ξ</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n<span class=\"k\">#check</span> <span class=\"n\">aux</span> <span class=\"n\">r</span> <span class=\"c1\">-- ℕ → ℤ</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">expansion'</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">ℤ</span> <span class=\"o\">:=</span>\n  <span class=\"n\">List.range</span> <span class=\"n\">n</span> <span class=\"bp\">|&gt;.</span><span class=\"n\">map</span> <span class=\"n\">f</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">expansion</span> <span class=\"o\">(</span><span class=\"n\">ξ</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">ℤ</span> <span class=\"o\">:=</span>\n  <span class=\"n\">expansion'</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">aux</span> <span class=\"n\">ξ</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 399450338,
        "sender_full_name": "Chris Miller",
        "timestamp": 1698740876
    },
    {
        "content": "<p>Sounds like you need to add more <code>noncomputable</code> keywords</p>",
        "id": 399452082,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1698741684
    },
    {
        "content": "<p>It is known that this error is bad</p>",
        "id": 399452108,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1698741698
    },
    {
        "content": "<p>Thank you, that worked. <br>\nI thought it had a problem with aux itself...<br>\nWhat does IR check mean?</p>",
        "id": 399452884,
        "sender_full_name": "Chris Miller",
        "timestamp": 1698742080
    },
    {
        "content": "<p>IR is \"intermediate representation\", which is a step in compiling the definition to machine code. But because <code>aux</code> is not compiled, it can't be used from compiled code</p>",
        "id": 399453067,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1698742161
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/lean4/pull/1785\">lean4#1785</a> tracks this issue.</p>",
        "id": 399526534,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1698760561
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"127136\">@Alex J. Best</span> should you change the title of the issue so that it doesn't mention <code>find</code> any more? This threw me off the scent when I was searching for the issue.</p>",
        "id": 399526716,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1698760609
    },
    {
        "content": "<p>Done. I'm not sure I have a better name for it though</p>",
        "id": 399527699,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1698760876
    }
]