[
    {
        "content": "<p>Hi, still new to Lean4.</p>\n<p>I have a hypothesis <code>h : A -&gt; B</code>, in tactic mode, I'd like to write something like <code>pose (h _)</code>, this should:</p>\n<ul>\n<li>Create a new goal / proof obligation for A</li>\n<li>After this new goal / proof obligation is performed, add B to the hypotheses</li>\n</ul>\n<p>If there's no equivalent, I'd like to know what is an equivalent to <code>assert A</code> in Coq.  ChatGPT gives me old syntax, and I still haven't found a guide of \"Lean4 for the old Coq-er\"</p>\n<p>Thanks!</p>",
        "id": 401043544,
        "sender_full_name": "Gabriel Alfour",
        "timestamp": 1699488414
    },
    {
        "content": "<p>I have found the equivalent of <code>assert A</code>, which is <code>have _ : A := show ...</code>!<br>\nI am still looking for something like <code>pose (h _)</code></p>",
        "id": 401043745,
        "sender_full_name": "Gabriel Alfour",
        "timestamp": 1699488521
    },
    {
        "content": "<p>I think that's just <code>have := h ?_</code></p>",
        "id": 401043915,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1699488603
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> nice, thx! Is there an equivalent that reverses the two goals? (So that I have to prove the implicit obligation from <code>?_</code> first?)</p>",
        "id": 401044318,
        "sender_full_name": "Gabriel Alfour",
        "timestamp": 1699488813
    },
    {
        "content": "<p>Yes, it's <code>suffices</code></p>",
        "id": 401044363,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1699488839
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span> I'm sorry, I don't get it. What is the equivalent of <code>have h_applied := h ?_</code> with <code>suffices</code>?</p>",
        "id": 401044557,
        "sender_full_name": "Gabriel Alfour",
        "timestamp": 1699488925
    },
    {
        "content": "<p>This topic was moved here from <a class=\"stream-topic\" data-stream-id=\"113488\" href=\"/#narrow/stream/113488-general/topic/Add.20new.20goal.20and.20hypothesis.20at.20the.20same.20time\">#general &gt; Add new goal and hypothesis at the same time</a> by <span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span>.</p>",
        "id": 401045542,
        "sender_full_name": "Notification Bot",
        "timestamp": 1699489483
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"665332\">@Gabriel Alfour</span> Something we like around here to ground questions is an <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> -- if you can create a little <code>example</code>s to accompany your questions that set up some sort of context that illustrates what you're talking about, then people can fill it in with a concrete suggestion.</p>",
        "id": 401045630,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1699489553
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span> sgtm</p>\n<p>I tried to share from the Lean4 Editor, but the URL is unwieldy, should I just copy-paste the code like so?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">ast</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">Lam</span> <span class=\"o\">:</span> <span class=\"n\">String</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">ast</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">ast</span>\n<span class=\"bp\">|</span> <span class=\"n\">Var</span> <span class=\"o\">:</span> <span class=\"n\">String</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">ast</span>\n<span class=\"bp\">|</span> <span class=\"n\">App</span> <span class=\"o\">:</span> <span class=\"n\">ast</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">ast</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">ast</span>\n\n\n<span class=\"c1\">-- rewriting</span>\n<span class=\"kd\">inductive</span> <span class=\"n\">rewrite_step_result</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">Finish</span>\n<span class=\"bp\">|</span> <span class=\"n\">Next</span> <span class=\"o\">:</span> <span class=\"n\">ast</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">rewrite_step_result</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">ast</span>\n<span class=\"kn\">open</span> <span class=\"n\">rewrite_step_result</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">substitute</span> <span class=\"o\">(</span><span class=\"n\">expr</span> <span class=\"o\">:</span> <span class=\"n\">ast</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">var</span> <span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">sub</span> <span class=\"o\">:</span> <span class=\"n\">ast</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">expr</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Var</span> <span class=\"n\">var'</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">if</span> <span class=\"n\">var</span> <span class=\"bp\">=</span> <span class=\"n\">var'</span> <span class=\"k\">then</span> <span class=\"n\">sub</span> <span class=\"k\">else</span> <span class=\"n\">Var</span> <span class=\"n\">var'</span>\n  <span class=\"bp\">|</span> <span class=\"n\">App</span> <span class=\"n\">f</span> <span class=\"n\">arg</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">App</span> <span class=\"o\">(</span><span class=\"n\">substitute</span> <span class=\"n\">f</span> <span class=\"n\">var</span> <span class=\"n\">sub</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">substitute</span> <span class=\"n\">arg</span> <span class=\"n\">var</span> <span class=\"n\">sub</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Lam</span> <span class=\"n\">var'</span> <span class=\"n\">body</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">if</span> <span class=\"n\">var</span> <span class=\"bp\">=</span> <span class=\"n\">var'</span> <span class=\"k\">then</span> <span class=\"n\">Lam</span> <span class=\"n\">var'</span> <span class=\"n\">body</span> <span class=\"k\">else</span> <span class=\"n\">Lam</span> <span class=\"n\">var'</span> <span class=\"o\">(</span><span class=\"n\">substitute</span> <span class=\"n\">body</span> <span class=\"n\">var</span> <span class=\"n\">sub</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">rewrite_step</span> <span class=\"o\">:</span> <span class=\"n\">ast</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">rewrite_step_result</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Var</span> <span class=\"n\">_var</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Finish</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Lam</span> <span class=\"n\">_var</span> <span class=\"n\">_body</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Finish</span>\n  <span class=\"bp\">|</span> <span class=\"n\">App</span> <span class=\"n\">f</span> <span class=\"n\">arg</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span>\n    <span class=\"k\">match</span> <span class=\"n\">rewrite_step</span> <span class=\"n\">f</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"n\">Finish</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span>\n      <span class=\"k\">match</span> <span class=\"n\">rewrite_step</span> <span class=\"n\">arg</span> <span class=\"k\">with</span>\n      <span class=\"bp\">|</span> <span class=\"n\">Finish</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span>\n        <span class=\"k\">match</span> <span class=\"n\">f</span> <span class=\"k\">with</span>\n        <span class=\"bp\">|</span> <span class=\"n\">Lam</span> <span class=\"n\">var</span> <span class=\"n\">body</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Next</span> <span class=\"o\">(</span><span class=\"n\">substitute</span> <span class=\"n\">body</span> <span class=\"n\">var</span> <span class=\"n\">arg</span><span class=\"o\">)</span>\n        <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Finish</span>\n      <span class=\"o\">)</span>\n      <span class=\"bp\">|</span> <span class=\"n\">Next</span> <span class=\"n\">arg'</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Next</span> <span class=\"o\">(</span><span class=\"n\">App</span> <span class=\"n\">f</span> <span class=\"n\">arg'</span><span class=\"o\">)</span>\n    <span class=\"o\">)</span>\n    <span class=\"bp\">|</span> <span class=\"n\">Next</span> <span class=\"n\">f'</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Next</span> <span class=\"o\">(</span><span class=\"n\">App</span> <span class=\"n\">f'</span> <span class=\"n\">arg</span><span class=\"o\">)</span>\n  <span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">is_normal</span> <span class=\"o\">(</span><span class=\"n\">expr</span> <span class=\"o\">:</span> <span class=\"n\">ast</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">rewrite_step</span> <span class=\"n\">expr</span> <span class=\"bp\">=</span> <span class=\"n\">Finish</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Nat</span>\n<span class=\"kd\">def</span> <span class=\"n\">rewrite_n_steps</span> <span class=\"o\">(</span><span class=\"n\">expr</span> <span class=\"o\">:</span> <span class=\"n\">ast</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">n</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Next</span> <span class=\"n\">expr</span>\n  <span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"n\">n'</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span>\n    <span class=\"k\">match</span> <span class=\"n\">rewrite_step</span> <span class=\"n\">expr</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"n\">Finish</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Finish</span>\n    <span class=\"bp\">|</span> <span class=\"n\">Next</span> <span class=\"n\">expr'</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rewrite_n_steps</span> <span class=\"n\">expr'</span> <span class=\"n\">n'</span>\n  <span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">terminates</span> <span class=\"o\">(</span><span class=\"n\">expr</span> <span class=\"o\">:</span> <span class=\"n\">ast</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">∃</span> <span class=\"n\">n</span> <span class=\"o\">,</span> <span class=\"n\">rewrite_n_steps</span> <span class=\"n\">expr</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">Finish</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">looper</span> <span class=\"o\">:</span> <span class=\"n\">ast</span> <span class=\"o\">:=</span>\n  <span class=\"n\">App</span> <span class=\"o\">(</span><span class=\"n\">Lam</span> <span class=\"s2\">\"x\"</span> <span class=\"o\">(</span><span class=\"n\">App</span> <span class=\"o\">(</span><span class=\"n\">Var</span> <span class=\"s2\">\"x\"</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Var</span> <span class=\"s2\">\"x\"</span><span class=\"o\">)))</span> <span class=\"o\">(</span><span class=\"n\">Lam</span> <span class=\"s2\">\"x\"</span> <span class=\"o\">(</span><span class=\"n\">App</span> <span class=\"o\">(</span><span class=\"n\">Var</span> <span class=\"s2\">\"x\"</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Var</span> <span class=\"s2\">\"x\"</span><span class=\"o\">)))</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">looper_loops</span> <span class=\"o\">:</span> <span class=\"n\">rewrite_n_steps</span> <span class=\"n\">looper</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">Next</span> <span class=\"n\">looper</span> <span class=\"o\">:=</span>\n  <span class=\"kd\">by</span>\n  <span class=\"n\">eq_refl</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">looper_loops_forever</span> <span class=\"o\">:</span> <span class=\"k\">forall</span> <span class=\"n\">n</span> <span class=\"o\">,</span> <span class=\"n\">rewrite_n_steps</span> <span class=\"n\">looper</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">Next</span> <span class=\"n\">looper</span> <span class=\"o\">:=</span>\n  <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">n</span>\n  <span class=\"n\">induction</span> <span class=\"n\">n</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">eq_refl</span>\n  <span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"n\">_</span> <span class=\"n\">ih</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">exact</span> <span class=\"n\">ih</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">non_terminating</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">expr</span> <span class=\"o\">:</span> <span class=\"n\">ast</span><span class=\"o\">)</span> <span class=\"o\">,</span> <span class=\"bp\">¬</span><span class=\"n\">terminates</span> <span class=\"n\">expr</span> <span class=\"o\">:=</span>\n  <span class=\"kd\">by</span>\n  <span class=\"n\">exists</span> <span class=\"n\">looper</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">terminates</span>\n  <span class=\"n\">intro</span> <span class=\"n\">tl</span>\n  <span class=\"k\">let</span> <span class=\"o\">⟨</span> <span class=\"n\">n</span> <span class=\"o\">,</span> <span class=\"n\">ih</span> <span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">tl</span>\n  <span class=\"k\">have</span> <span class=\"n\">ih'</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">rewrite_n_steps</span> <span class=\"n\">looper</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">Next</span> <span class=\"n\">looper</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">looper_loops_forever</span> <span class=\"n\">n</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">ih</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">ih'</span>\n  <span class=\"n\">contradiction</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">Typed</span>\n\n  <span class=\"kd\">inductive</span> <span class=\"n\">type</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Nat</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Fun</span> <span class=\"o\">:</span> <span class=\"n\">type</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">type</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">type</span>\n  <span class=\"n\">deriving</span> <span class=\"n\">DecidableEq</span>\n\n  <span class=\"kd\">inductive</span> <span class=\"n\">tast</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n  <span class=\"bp\">|</span> <span class=\"n\">TVar</span> <span class=\"o\">:</span> <span class=\"n\">String</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">tast</span>\n  <span class=\"bp\">|</span> <span class=\"n\">TApp</span> <span class=\"o\">:</span> <span class=\"n\">tast</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">tast</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">tast</span>\n  <span class=\"bp\">|</span> <span class=\"n\">TLam</span> <span class=\"o\">:</span> <span class=\"n\">String</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">type</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">tast</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">tast</span>\n\n  <span class=\"kn\">open</span> <span class=\"n\">tast</span>\n  <span class=\"kd\">def</span> <span class=\"n\">remove_types</span> <span class=\"o\">:</span> <span class=\"n\">tast</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">ast</span>\n  <span class=\"bp\">|</span> <span class=\"n\">TLam</span> <span class=\"n\">v</span> <span class=\"n\">_ty</span> <span class=\"n\">body</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Lam</span> <span class=\"n\">v</span> <span class=\"o\">(</span><span class=\"n\">remove_types</span> <span class=\"n\">body</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">TVar</span> <span class=\"n\">v</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Var</span> <span class=\"n\">v</span>\n  <span class=\"bp\">|</span> <span class=\"n\">TApp</span> <span class=\"n\">f</span> <span class=\"n\">arg</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">App</span> <span class=\"o\">(</span><span class=\"n\">remove_types</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">remove_types</span> <span class=\"n\">arg</span><span class=\"o\">)</span>\n\n  <span class=\"kn\">namespace</span> <span class=\"n\">Typecheck</span>\n\n    <span class=\"kd\">inductive</span> <span class=\"n\">result</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n    <span class=\"bp\">|</span> <span class=\"n\">Fail</span>\n    <span class=\"bp\">|</span> <span class=\"n\">Succeed</span> <span class=\"o\">:</span> <span class=\"n\">type</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">result</span>\n\n    <span class=\"kd\">def</span> <span class=\"n\">context</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">String</span> <span class=\"bp\">×</span> <span class=\"n\">type</span><span class=\"o\">)</span>\n\n    <span class=\"kn\">open</span> <span class=\"n\">result</span>\n    <span class=\"kn\">open</span> <span class=\"n\">type</span>\n    <span class=\"kd\">def</span> <span class=\"n\">main</span> <span class=\"o\">(</span><span class=\"n\">ctx</span> <span class=\"o\">:</span> <span class=\"n\">context</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tast</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">result</span>\n    <span class=\"bp\">|</span> <span class=\"n\">TVar</span> <span class=\"n\">v</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span>\n      <span class=\"k\">match</span> <span class=\"n\">List.lookup</span> <span class=\"n\">v</span> <span class=\"n\">ctx</span> <span class=\"k\">with</span>\n      <span class=\"bp\">|</span> <span class=\"n\">none</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Fail</span>\n      <span class=\"bp\">|</span> <span class=\"n\">some</span> <span class=\"n\">ty</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Succeed</span> <span class=\"n\">ty</span>\n    <span class=\"o\">)</span>\n    <span class=\"bp\">|</span> <span class=\"n\">TLam</span> <span class=\"n\">v</span> <span class=\"n\">ty</span> <span class=\"n\">body</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span>\n      <span class=\"k\">let</span> <span class=\"n\">ctx</span> <span class=\"o\">:=</span> <span class=\"n\">List.cons</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">,</span> <span class=\"n\">ty</span><span class=\"o\">)</span> <span class=\"n\">ctx</span>\n      <span class=\"n\">main</span> <span class=\"n\">ctx</span> <span class=\"n\">body</span>\n    <span class=\"o\">)</span>\n    <span class=\"bp\">|</span> <span class=\"n\">TApp</span> <span class=\"n\">f</span> <span class=\"n\">arg</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span>\n      <span class=\"k\">match</span> <span class=\"n\">main</span> <span class=\"n\">ctx</span> <span class=\"n\">arg</span> <span class=\"k\">with</span>\n      <span class=\"bp\">|</span> <span class=\"n\">Fail</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Fail</span>\n      <span class=\"bp\">|</span> <span class=\"n\">Succeed</span> <span class=\"n\">arg_ty</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span>\n        <span class=\"k\">match</span> <span class=\"n\">main</span> <span class=\"n\">ctx</span> <span class=\"n\">f</span> <span class=\"k\">with</span>\n        <span class=\"bp\">|</span> <span class=\"n\">Fail</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Fail</span>\n        <span class=\"bp\">|</span> <span class=\"n\">Succeed</span> <span class=\"n\">f'</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span>\n          <span class=\"k\">match</span> <span class=\"n\">f'</span> <span class=\"k\">with</span>\n          <span class=\"bp\">|</span> <span class=\"n\">Fun</span> <span class=\"n\">in_ty</span> <span class=\"n\">out_ty</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span>\n            <span class=\"k\">if</span> <span class=\"n\">in_ty</span> <span class=\"bp\">=</span> <span class=\"n\">arg_ty</span> <span class=\"k\">then</span> <span class=\"n\">Succeed</span> <span class=\"n\">out_ty</span>\n            <span class=\"k\">else</span> <span class=\"n\">Fail</span>\n          <span class=\"o\">)</span>\n          <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Fail</span>\n        <span class=\"o\">)</span>\n      <span class=\"o\">)</span>\n    <span class=\"o\">)</span>\n\n  <span class=\"kd\">end</span> <span class=\"n\">Typecheck</span>\n\n  <span class=\"kn\">open</span> <span class=\"n\">Typecheck</span>\n\n  <span class=\"kd\">theorem</span> <span class=\"n\">stlc_terminate</span> <span class=\"o\">:</span>\n    <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">ctx</span> <span class=\"o\">:</span> <span class=\"n\">context</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">tast</span> <span class=\"o\">:</span> <span class=\"n\">tast</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ty</span> <span class=\"o\">:</span> <span class=\"n\">type</span><span class=\"o\">)</span> <span class=\"o\">,</span>\n      <span class=\"n\">main</span> <span class=\"n\">ctx</span> <span class=\"n\">tast</span> <span class=\"bp\">=</span> <span class=\"n\">result.Succeed</span> <span class=\"n\">ty</span> <span class=\"bp\">-&gt;</span> <span class=\"bp\">∃</span> <span class=\"n\">n</span> <span class=\"o\">,</span>\n      <span class=\"n\">rewrite_n_steps</span> <span class=\"o\">(</span><span class=\"n\">remove_types</span> <span class=\"n\">tast</span><span class=\"o\">)</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">Finish</span> <span class=\"o\">:=</span>\n  <span class=\"kd\">by</span>\n    <span class=\"n\">intros</span> <span class=\"n\">ctx</span> <span class=\"n\">tast</span> <span class=\"n\">ty</span> <span class=\"n\">success</span>\n    <span class=\"n\">induction</span> <span class=\"n\">tast</span>\n    <span class=\"bp\">.</span> <span class=\"n\">exists</span> <span class=\"mi\">1</span>\n    <span class=\"bp\">.</span> <span class=\"n\">rename_i</span> <span class=\"n\">f</span> <span class=\"n\">arg</span> <span class=\"n\">f_ih</span> <span class=\"n\">arg_ih</span>\n      <span class=\"c1\">-- in the following line, I'd like the two goals generated to be reversed</span>\n      <span class=\"k\">have</span> <span class=\"n\">f_ih_r</span> <span class=\"o\">:=</span> <span class=\"n\">f_ih</span> <span class=\"bp\">?</span><span class=\"n\">_</span>\n      <span class=\"bp\">.</span> <span class=\"gr\">admit</span>\n      <span class=\"bp\">.</span> <span class=\"n\">unfold</span> <span class=\"n\">main</span> <span class=\"n\">at</span> <span class=\"n\">success</span>\n        <span class=\"c1\">--- This is where in Coq, I would do `destruct (main ctx arg)`, and it would get rewritten in all assumptions</span>\n\n\n<span class=\"kd\">end</span> <span class=\"n\">Typed</span>\n</code></pre></div>",
        "id": 401046232,
        "sender_full_name": "Gabriel Alfour",
        "timestamp": 1699489891
    },
    {
        "content": "<p>Code blocks like that are preferred. There's even a web editor link in the upper-right corner.</p>",
        "id": 401048087,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1699490872
    },
    {
        "content": "<p>One feature you might use here are named metavariables:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>      <span class=\"k\">have</span> <span class=\"n\">f_ih_r</span> <span class=\"o\">:=</span> <span class=\"n\">f_ih</span> <span class=\"bp\">?</span><span class=\"n\">g</span>\n      <span class=\"n\">case</span> <span class=\"n\">g</span> <span class=\"bp\">=&gt;</span>\n        <span class=\"n\">unfold</span> <span class=\"n\">main</span> <span class=\"n\">at</span> <span class=\"n\">success</span>\n      <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 401048146,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1699490886
    },
    {
        "content": "<p>(Lean tradition is to use <code>sorry</code> to apologize for not being done yet rather than using <code>admit</code> to concede the argument <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span>)</p>",
        "id": 401048274,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1699490968
    },
    {
        "content": "<p>You can also <code>swap</code> the goals</p>",
        "id": 401048437,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1699491050
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span> Thanks!</p>",
        "id": 401107641,
        "sender_full_name": "Gabriel Alfour",
        "timestamp": 1699520279
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span> <code>swap</code> is not recognized</p>",
        "id": 401138786,
        "sender_full_name": "Gabriel Alfour",
        "timestamp": 1699529754
    },
    {
        "content": "<p>and can't find it online</p>",
        "id": 401138793,
        "sender_full_name": "Gabriel Alfour",
        "timestamp": 1699529761
    },
    {
        "content": "<p>You'll need <code>import Mathlib.Tactic</code>, though probably there's a smaller file you could import</p>",
        "id": 401139410,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1699530004
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.PermuteGoals</span>\n</code></pre></div>",
        "id": 401145059,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1699532406
    },
    {
        "content": "<p>Or <code>Mathlib.Tactic.Common</code>.</p>\n<blockquote>\n<p>This file imports all tactics which do not have significant theory imports,<br>\nand hence can be imported very low in the theory import hierarchy,<br>\nthereby making tactics widely available without needing specific imports.</p>\n</blockquote>\n<p>So, including it in user code is not exactly what it is meant for, but one can argue that user code that does not have many imports is also \"low in the theory import hierarchy\".</p>",
        "id": 401145953,
        "sender_full_name": "Richard Copley",
        "timestamp": 1699532806
    }
]