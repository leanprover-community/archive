[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.List.Perm</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">True</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">bar</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span>\n  <span class=\"n\">baz</span> <span class=\"o\">:</span> <span class=\"n\">foo</span> <span class=\"n\">a</span> <span class=\"n\">b</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">perm_bar</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">bar</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">perm</span><span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">~</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">bar</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">induction</span> <span class=\"n\">perm</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">nil</span> <span class=\"bp\">=&gt;</span> <span class=\"gr\">sorry</span>\n  <span class=\"bp\">|</span> <span class=\"n\">cons</span> <span class=\"bp\">=&gt;</span> <span class=\"gr\">sorry</span>\n  <span class=\"bp\">|</span> <span class=\"n\">swap</span> <span class=\"bp\">=&gt;</span> <span class=\"gr\">sorry</span>\n  <span class=\"bp\">|</span> <span class=\"n\">trans</span> <span class=\"bp\">=&gt;</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>In the above example, <code>induction</code> fails with the following error:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">type</span> <span class=\"n\">mismatch</span> <span class=\"n\">when</span> <span class=\"n\">assigning</span> <span class=\"n\">motive</span>\n  <span class=\"k\">fun</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">}</span> <span class=\"n\">perm</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">bar</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">bar</span> <span class=\"n\">b</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">~</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"bp\">?</span><span class=\"n\">u.391</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">u.391</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">a_1</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">~</span> <span class=\"n\">a_1</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">?</span><span class=\"n\">u.391</span>\n</code></pre></div>\n<p>and  the same goes for <code>cases</code> (<code>match</code> fails with <code>tag not found</code>, which might be unrelated). <br>\nWhat would be the proper way to instantiate <code>bar b</code>, while making use of the inductively defined <code>perm</code>?</p>",
        "id": 371595172,
        "sender_full_name": "Vláďa Sedláček",
        "timestamp": 1688257225
    },
    {
        "content": "<p>It looks like what it's indirectly letting you know is that <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=List.Perm#doc\">docs#List.Perm</a> is a <code>Prop</code>, so you can't induct on it to create data.</p>",
        "id": 371595981,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1688257569
    },
    {
        "content": "<p>You could prove <code>Nonempty (bar b)</code> inductively for example, since this is a proposition.</p>",
        "id": 371596044,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1688257600
    },
    {
        "content": "<p>The hint in the motive type is that the computed motive has that <code>Type ?u.391</code> in it, but the expected type of the motive (as controlled by <code>List.Perm</code>) has <code>Prop</code> in its place.</p>",
        "id": 371596186,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1688257680
    }
]