[
    {
        "content": "<p>Are there any in-depth guides on writing notations for lean3? All I've found are <a href=\"https://leanprover.github.io/theorem_proving_in_lean/interacting_with_lean.html#notation\">https://leanprover.github.io/theorem_proving_in_lean/interacting_with_lean.html#notation</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/data/buffer/parser.html\">https://leanprover-community.github.io/mathlib_docs/data/buffer/parser.html</a>; the former doesn't really cover anything complicated like folding and the latter is just definitions without much explanation of how to effectively use them.</p>",
        "id": 368658116,
        "sender_full_name": "Ricardo Prado Cunha",
        "timestamp": 1687458136
    },
    {
        "content": "<p>I know you mentioned lean 3 specifically, but is migrating to lean 4 an option? It has a great macro system (<a href=\"https://arxiv.org/pdf/2001.10490.pdf\">https://arxiv.org/pdf/2001.10490.pdf</a>), and a lot of people will test the \"migration flow\" now that mathlib3 is less than a month away from being frozen.</p>",
        "id": 368659649,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1687458514
    },
    {
        "content": "<p>For Lean 3, I'm not sure if the notation command is documented, but if you search through the mathlib source for examples you might be able to hack something together. Note that that second link has nothing to do with the Lean 3 notation parsing. The parser is all written in C++.</p>",
        "id": 368661776,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1687459114
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"325367\">Mauricio Collares</span> <a href=\"#narrow/stream/113489-new-members/topic/Guide.20for.20writing.20notations/near/368659649\">said</a>:</p>\n<blockquote>\n<p>I know you mentioned lean 3 specifically, but is migrating to lean 4 an option? It has a great macro system (<a href=\"https://arxiv.org/pdf/2001.10490.pdf\">https://arxiv.org/pdf/2001.10490.pdf</a>), and a lot of people will test the \"migration flow\" now that mathlib3 is less than a month away from being frozen.</p>\n</blockquote>\n<p>We're already using lean3 and migrating to lean4 isn't really an option currently, although it's good to hear that mathlib3 is close to being frozen (which I assume means lean4 is close to having a proper full release rather than just milestone releases? Once that's properly done I might bite the bullet and try to migrate everything over).</p>",
        "id": 368677800,
        "sender_full_name": "Ricardo Prado Cunha",
        "timestamp": 1687463238
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/113489-new-members/topic/Guide.20for.20writing.20notations/near/368661776\">said</a>:</p>\n<blockquote>\n<p>For Lean 3, I'm not sure if the notation command is documented, but if you search through the mathlib source for examples you might be able to hack something together. Note that that second link has nothing to do with the Lean 3 notation parsing. The parser is all written in C++.</p>\n</blockquote>\n<p>Yeah I've been trying to emulate the mathlib source but that's been difficult. Also good to know that data.buffer.parser isn't actually what's used (in hindsight that makes sense since it's not even in core).</p>",
        "id": 368678150,
        "sender_full_name": "Ricardo Prado Cunha",
        "timestamp": 1687463346
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"620085\">Ricardo Prado Cunha</span> <a href=\"#narrow/stream/113489-new-members/topic/Guide.20for.20writing.20notations/near/368677800\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"325367\">Mauricio Collares</span> <a href=\"#narrow/stream/113489-new-members/topic/Guide.20for.20writing.20notations/near/368659649\">said</a>:<br>\n it's good to hear that mathlib3 is close to being frozen (which I assume means lean4 is close to having a proper full release rather than just milestone releases?).</p>\n</blockquote>\n<p>Those are completely independent events.</p>",
        "id": 368679601,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1687463734
    },
    {
        "content": "<p>From what I understand, I don't think they are completely independent because mathlib3 frozen means mathlib4 (almost) ported which means Lean 4 will <em>consider</em> a stable release. So I think the former is essentially a prerequisite for the latter.</p>",
        "id": 368679930,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1687463851
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/113489-new-members/topic/Guide.20for.20writing.20notations/near/368679601\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"620085\">Ricardo Prado Cunha</span> <a href=\"#narrow/stream/113489-new-members/topic/Guide.20for.20writing.20notations/near/368677800\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"325367\">Mauricio Collares</span> <a href=\"#narrow/stream/113489-new-members/topic/Guide.20for.20writing.20notations/near/368659649\">said</a>:<br>\n it's good to hear that mathlib3 is close to being frozen (which I assume means lean4 is close to having a proper full release rather than just milestone releases?).</p>\n</blockquote>\n<p>Those are completely independent events.</p>\n</blockquote>\n<p>I think I misunderstood what freezing means. I interpreted it as meaning that development on mathlib3 will stop, and presumably people will migrate to using mathlib4, which to my knowledge only works with lean4; and I also presume that many people wouldn't want to switch to lean4 if it's far from release.</p>",
        "id": 368680480,
        "sender_full_name": "Ricardo Prado Cunha",
        "timestamp": 1687464006
    },
    {
        "content": "<p>I think your last clause is incorrect, at least for people involved in mathlib</p>",
        "id": 368681132,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1687464168
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"620085\">Ricardo Prado Cunha</span> <a href=\"#narrow/stream/113489-new-members/topic/Guide.20for.20writing.20notations/near/368678150\">said</a>:</p>\n<blockquote>\n<p>Yeah I've been trying to emulate the mathlib source but that's been difficult.</p>\n</blockquote>\n<p>The next best thing is explaining what sort of syntax you want to have and someone here might help you write a notation to support it.</p>",
        "id": 368683019,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1687464661
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/113489-new-members/topic/Guide.20for.20writing.20notations/near/368683019\">said</a>:</p>\n<blockquote>\n<p>The next best thing is explaining what sort of syntax you want to have and someone here might help you write a notation to support it.</p>\n</blockquote>\n<p>There's this syntax I've been able to get to sort of work. Basically I want <code>α ^ n</code> = <code>tuple α n</code>, <code>α ^ n × m</code> = <code>tuple (tuple α n) m</code>, <code>α ^ n × m × j</code> = <code>tuple (tuple (tuple α n) m) j</code>, etc. (where <code>tuple (α : Type u) : ℕ → Type u</code> is a custom inductive type I've made).<br>\nI've gotten it to work with parentheses (i.e., <code>(α ^ n × m)</code>) using <code>notation:min `(` t:79 ` ^ `:79 d:(foldl:34 ` × `:34 (n x, tuple x n) t `)` ) := d</code>, but ideally it'd be possible to use without parentheses. Not sure if that's even possible since that might lead to ambiguity in parsing.<br>\nAs a bit of a workaround I'm also using <code>instance : has_pow (Type u) ℕ := ⟨tuple⟩</code> since that allows it to work without parentheses for rank 1 (i.e., <code>α ^ n</code> but not <code>α ^ n × m</code>).</p>",
        "id": 368687515,
        "sender_full_name": "Ricardo Prado Cunha",
        "timestamp": 1687465936
    },
    {
        "content": "<p>Yeah, I think you either need parentheses, or, better, you could choose new symbols for <code>^</code> and <code>×</code> so that they don't conflict with pre-existing notation. I'm not sure whether it's OK to use <code>(</code> in your notation like that (and definitely this notation will affect how <code>(2 ^ 3)</code> would be parsed).</p>\n<p>The notation line looks right given your description, but I can't say for certain whether or not you got the precedences right, I always needed to experiment.</p>",
        "id": 368690425,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1687466775
    },
    {
        "content": "<p>You might consider avoiding notation and instead using a function where <code>mkTuple [m,n] α = tuple (tuple α n) m</code></p>\n<p>Or you could define a new arrow with right associativity, where say <code>m --&gt; n --&gt; α</code> is <code>tuple (tuple α n) m</code></p>",
        "id": 368690867,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1687466923
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/113489-new-members/topic/Guide.20for.20writing.20notations/near/368690425\">said</a>:</p>\n<blockquote>\n<p>Yeah, I think you either need parentheses, or, better, you could choose new symbols for <code>^</code> and <code>×</code> so that they don't conflict with pre-existing notation. I'm not sure whether it's OK to use <code>(</code> in your notation like that (and definitely this notation will affect how <code>(2 ^ 3)</code> would be parsed).</p>\n</blockquote>\n<p>Yeah I wasn't too confident I could omit the parentheses. Although this doesn't seem to affect things like <code>(2 ^ 3)</code> (doing an <code>#eval</code> on that still gives me <code>8</code>), probably due to me setting it to precedence <code>:min</code>.<br>\nI did use to have it with <code>^^</code> and <code>××</code>, which I don't think have any other definitions, but I still wasn't able to get it to work without parentheses. Removing the open parenthesis says \"invalid notation declaration, symbol expected\" and removing the closing parenthesis causes it to say <code>invalid expression, `)` expected</code> when I try to actually use it. Removing both makes Lean even more confused.</p>",
        "id": 368713468,
        "sender_full_name": "Ricardo Prado Cunha",
        "timestamp": 1687476028
    }
]