[
    {
        "content": "<p><a href=\"https://leanprover.github.io/functional_programming_in_lean/type-classes/indexing.html\">The example code at the bottom of this chapter</a>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">PPoint</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span>\n  <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span>\n<span class=\"n\">deriving</span> <span class=\"n\">Repr</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">GetElem</span> <span class=\"o\">(</span><span class=\"n\">PPoint</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"n\">Bool</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">True</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">getElem</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">PPoint</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span><span class=\"o\">)</span> <span class=\"n\">_</span> <span class=\"o\">:=</span>\n    <span class=\"k\">if</span> <span class=\"n\">not</span> <span class=\"n\">i</span> <span class=\"k\">then</span> <span class=\"n\">p.x</span> <span class=\"k\">else</span> <span class=\"n\">p.y</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:=</span> <span class=\"o\">({</span><span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"mi\">2</span><span class=\"o\">}:</span> <span class=\"n\">PPoint</span> <span class=\"n\">Nat</span><span class=\"o\">)</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">foo</span><span class=\"o\">[</span><span class=\"n\">False</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>Leads to this error:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">hw_lists2.lean</span><span class=\"o\">:</span><span class=\"mi\">12</span><span class=\"o\">:</span><span class=\"mi\">7</span>\n<span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"kd\">instance</span>\n  <span class=\"n\">GetElem</span> <span class=\"o\">(</span><span class=\"n\">PPoint</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"kt\">Prop</span> <span class=\"bp\">?</span><span class=\"n\">m.1822</span> <span class=\"bp\">?</span><span class=\"n\">m.1823</span>\n<span class=\"n\">hw_lists2.lean</span><span class=\"o\">:</span><span class=\"mi\">12</span><span class=\"o\">:</span><span class=\"mi\">7</span>\n<span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">prove</span> <span class=\"n\">index</span> <span class=\"n\">is</span> <span class=\"n\">valid</span><span class=\"o\">,</span> <span class=\"n\">possible</span> <span class=\"n\">solutions</span><span class=\"o\">:</span>\n  <span class=\"bp\">-</span> <span class=\"n\">Use</span> <span class=\"bp\">`</span><span class=\"k\">have</span><span class=\"bp\">`-</span><span class=\"n\">expressions</span> <span class=\"n\">to</span> <span class=\"n\">prove</span> <span class=\"n\">the</span> <span class=\"n\">index</span> <span class=\"n\">is</span> <span class=\"n\">valid</span>\n  <span class=\"bp\">-</span> <span class=\"n\">Use</span> <span class=\"bp\">`</span><span class=\"n\">a</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]</span><span class=\"bp\">!`</span> <span class=\"kd\">notation</span> <span class=\"n\">instead</span><span class=\"o\">,</span> <span class=\"n\">runtime</span> <span class=\"n\">check</span> <span class=\"n\">is</span> <span class=\"n\">perfomed</span><span class=\"o\">,</span> <span class=\"n\">and</span> <span class=\"bp\">'</span><span class=\"n\">Panic'</span> <span class=\"n\">error</span> <span class=\"n\">message</span> <span class=\"n\">is</span> <span class=\"n\">produced</span> <span class=\"k\">if</span> <span class=\"n\">index</span> <span class=\"n\">is</span> <span class=\"n\">not</span> <span class=\"n\">valid</span>\n  <span class=\"bp\">-</span> <span class=\"n\">Use</span> <span class=\"bp\">`</span><span class=\"n\">a</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]</span><span class=\"bp\">?`</span> <span class=\"kd\">notation</span> <span class=\"n\">instead</span><span class=\"o\">,</span> <span class=\"n\">result</span> <span class=\"n\">is</span> <span class=\"n\">an</span> <span class=\"bp\">`</span><span class=\"n\">Option</span><span class=\"bp\">`</span> <span class=\"n\">type</span>\n  <span class=\"bp\">-</span> <span class=\"n\">Use</span> <span class=\"bp\">`</span><span class=\"n\">a</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]</span><span class=\"bp\">'</span><span class=\"n\">h</span><span class=\"bp\">`</span> <span class=\"kd\">notation</span> <span class=\"n\">instead</span><span class=\"o\">,</span> <span class=\"n\">where</span> <span class=\"bp\">`</span><span class=\"n\">h</span><span class=\"bp\">`</span> <span class=\"n\">is</span> <span class=\"n\">a</span> <span class=\"n\">proof</span> <span class=\"n\">that</span> <span class=\"n\">index</span> <span class=\"n\">is</span> <span class=\"n\">valid</span>\n<span class=\"bp\">⊢</span> <span class=\"bp\">?</span><span class=\"n\">m.1823</span> <span class=\"n\">foo</span> <span class=\"n\">False</span>\n</code></pre></div>\n<p>Is the example incorrect or am I missing something?</p>",
        "id": 376327456,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1689682667
    },
    {
        "content": "<p>Try <code>#check False</code> and compare with <code>#check false</code>.</p>",
        "id": 376328401,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1689682845
    }
]