[
    {
        "content": "<p>Mathematics in Lean's chapter on Number Theory says \"<code>nat.factorization n p</code> returns the multiplicity of <code>p</code> in the prime factorization of <code>n</code>.\"  However:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.nat.gcd</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">nat.factorization</span> <span class=\"mi\">72</span> <span class=\"mi\">2</span>\n</code></pre></div>\n<p>gives me \"code generation failed, VM does not have code for 'classical.choice'\".</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.nat.gcd</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">nat.factorization</span> <span class=\"mi\">72</span> <span class=\"mi\">2</span>  <span class=\"bp\">=</span> <span class=\"mi\">3</span>\n</code></pre></div>\n<p>gives me \"result type does not have an instance of type class 'has_repr', dumping internal representation\".</p>\n<p>How can I have Lean compute <code>nat.factorization 72 2</code> and give me the answer <code>3</code>?</p>",
        "id": 338449901,
        "sender_full_name": "Martin C. Martin",
        "timestamp": 1677531862
    },
    {
        "content": "<p>I'm not sure we're really meant to rely on <code>nat.factorization</code> being <code>#eval</code>-computable, but I found this worked:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.nat.squarefree</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">nat.factorization</span> <span class=\"mi\">72</span> <span class=\"mi\">2</span>\n<span class=\"c1\">-- 3</span>\n</code></pre></div>",
        "id": 338451433,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1677532435
    },
    {
        "content": "<p>I just imported <code>data.nat.squarefree</code> because <code>data.nat.gcd</code> didn't seem to exist in whatever version of mathlib I have right now.</p>",
        "id": 338451577,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1677532483
    },
    {
        "content": "<p>Ideally, there would be a <code>norm_num</code> plugin so that this would give a reduced result, rather than just this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">#</span><span class=\"n\">norm_num</span> <span class=\"n\">nat.factorization</span> <span class=\"mi\">72</span> <span class=\"mi\">2</span>\n<span class=\"c1\">-- ⇑(72.factorization) 2</span>\n</code></pre></div>\n<p>What <code>norm_num</code> does is give a provably correct result, but it takes writing evaluation strategies (these \"plugins\") for it.</p>",
        "id": 338451692,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1677532537
    },
    {
        "content": "<p>It looks that <code>Prop</code>s can't be printed</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#eval</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n<span class=\"c\">/-</span>\n<span class=\"cm\">result type does not have an instance of type class 'has_repr', dumping internal representation</span>\n<span class=\"cm\">-/</span>\n\n<span class=\"c1\">-- casting to `bool`,</span>\n\n<span class=\"k\">#eval</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">bool</span><span class=\"o\">)</span>\n<span class=\"c\">/-</span>\n<span class=\"cm\">tt</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>\n<p>Actually, Kyle addressed this <a href=\"#narrow/stream/113489-new-members/topic/Trivial.20tactic.20not.20working.20as.20I.20expected.20it.20to/near/320959579\">here</a>.</p>",
        "id": 338457217,
        "sender_full_name": "Pedro Sánchez Terraf",
        "timestamp": 1677534676
    }
]