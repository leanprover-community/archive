[
    {
        "content": "<p>Say in Coq, I can write something as follows to try a bunch of inductive constructors (those EvalSkip EvalAssign).</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"n\">Ltac</span> <span class=\"n\">eval1</span> <span class=\"o\">:=</span>\n    <span class=\"n\">apply</span> <span class=\"n\">EvalSkip</span> <span class=\"bp\">||</span> <span class=\"n\">apply</span> <span class=\"n\">EvalAssign</span> <span class=\"bp\">||</span> <span class=\"n\">eapply</span> <span class=\"n\">EvalSeq</span>\n    <span class=\"bp\">||</span> <span class=\"o\">(</span><span class=\"n\">apply</span> <span class=\"n\">EvalIfTrue</span><span class=\"bp\">;</span> <span class=\"o\">[</span> <span class=\"n\">simplify</span><span class=\"bp\">;</span> <span class=\"n\">equality</span> <span class=\"bp\">|</span> <span class=\"o\">])</span>\n    <span class=\"bp\">||</span> <span class=\"o\">(</span><span class=\"n\">apply</span> <span class=\"n\">EvalIfFalse</span><span class=\"bp\">;</span> <span class=\"o\">[</span> <span class=\"n\">simplify</span><span class=\"bp\">;</span> <span class=\"n\">equality</span> <span class=\"bp\">|</span> <span class=\"o\">])</span>\n    <span class=\"bp\">||</span> <span class=\"o\">(</span><span class=\"n\">eapply</span> <span class=\"n\">EvalWhileTrue</span><span class=\"bp\">;</span> <span class=\"o\">[</span> <span class=\"n\">simplify</span><span class=\"bp\">;</span> <span class=\"n\">equality</span> <span class=\"bp\">|</span> <span class=\"bp\">|</span> <span class=\"o\">])</span>\n    <span class=\"bp\">||</span> <span class=\"o\">(</span><span class=\"n\">apply</span> <span class=\"n\">EvalWhileFalse</span><span class=\"bp\">;</span> <span class=\"o\">[</span> <span class=\"n\">simplify</span><span class=\"bp\">;</span> <span class=\"n\">equality</span> <span class=\"o\">])</span><span class=\"bp\">.</span>\n  <span class=\"n\">Ltac</span> <span class=\"n\">evaluate</span> <span class=\"o\">:=</span> <span class=\"n\">simplify</span><span class=\"bp\">;</span> <span class=\"n\">try</span> <span class=\"n\">equality</span><span class=\"bp\">;</span> <span class=\"n\">repeat</span> <span class=\"n\">eval1.</span>\n</code></pre></div>\n<p>I'm wondering if there is an easy way where we could do that in Lean. Currently I can think of the meta programming utilities where we define new macros/elab rules etc, but that seems an overkill.</p>",
        "id": 399454155,
        "sender_full_name": "Z. Wu",
        "timestamp": 1698742626
    },
    {
        "content": "<p>A macro rule can do exactly that (and more), merely with a slightly different syntax</p>",
        "id": 399455486,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1698743062
    },
    {
        "content": "<p>the slightly different syntax looks something like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Std.Tactic.Basic</span>\n\n<span class=\"n\">macro</span> <span class=\"s2\">\"eval1\"</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span>\n<span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span>\n    <span class=\"n\">first</span>\n    <span class=\"bp\">|</span> <span class=\"n\">apply</span> <span class=\"n\">EvalSkip</span> <span class=\"bp\">|</span> <span class=\"n\">apply</span> <span class=\"n\">EvalAssign</span> <span class=\"bp\">|</span> <span class=\"n\">eapply</span> <span class=\"n\">EvalSeq</span>\n    <span class=\"bp\">|</span> <span class=\"n\">apply</span> <span class=\"n\">EvalIfTrue</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"o\">[(</span><span class=\"n\">simp</span><span class=\"bp\">;</span> <span class=\"n\">subst_vars</span><span class=\"o\">)</span><span class=\"bp\">;</span> <span class=\"n\">skip</span><span class=\"o\">]</span>\n    <span class=\"bp\">|</span> <span class=\"n\">apply</span> <span class=\"n\">EvalIfFalse</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"o\">[(</span><span class=\"n\">simp</span><span class=\"bp\">;</span> <span class=\"n\">subst_vars</span><span class=\"o\">)</span><span class=\"bp\">;</span> <span class=\"n\">skip</span><span class=\"o\">]</span>\n    <span class=\"bp\">|</span> <span class=\"n\">eapply</span> <span class=\"n\">EvalWhileTrue</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"bp\">;</span> <span class=\"n\">subst_vars</span><span class=\"bp\">;</span> <span class=\"n\">skip</span><span class=\"bp\">;</span> <span class=\"n\">skip</span><span class=\"o\">]</span>\n    <span class=\"bp\">|</span> <span class=\"n\">apply</span> <span class=\"n\">EvalWhileFalse</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"bp\">;</span> <span class=\"n\">subst_vars</span><span class=\"o\">])</span>\n<span class=\"n\">macro</span> <span class=\"s2\">\"evaluate\"</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">simp</span><span class=\"bp\">;</span> <span class=\"o\">(</span><span class=\"n\">try</span> <span class=\"n\">subst_vars</span><span class=\"o\">)</span><span class=\"bp\">;</span> <span class=\"n\">repeat</span> <span class=\"n\">eval1</span><span class=\"o\">))</span>\n</code></pre></div>",
        "id": 399457444,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1698743845
    },
    {
        "content": "<p>thanks for the suggestions and the example, i guess it's time for me to learn to use macros :&gt;</p>",
        "id": 399460736,
        "sender_full_name": "Z. Wu",
        "timestamp": 1698745125
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"649880\">Zwu</span> has marked this topic as resolved.</p>",
        "id": 399460753,
        "sender_full_name": "Notification Bot",
        "timestamp": 1698745130
    }
]