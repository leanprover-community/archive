[
    {
        "content": "<p>Hello, I was working with square root of numbers to prove a theorem.  I was trying to prove that the square root of a number squared is the number itself. I am unable to come up with any tactic to solve the goal. Do you have any ideas? Thank you.</p>\n<p>'''<br>\nimport Mathlib.Data.Real.Sqrt</p>\n<p>example { p : ℝ} (h1: p&gt;0) :<br>\n p= Real.sqrt (p^2) :=<br>\n calc<br>\n  p= p := by ring<br>\n  _= Real.sqrt ((p)^2) := by ring</p>\n<p>'''<br>\nSquare roots usually give you two solutions and I was wondering if we could ensure that the codes accepted the positive root.</p>",
        "id": 379646749,
        "sender_full_name": "Adhithi Varadarajan⚛️",
        "timestamp": 1690582353
    },
    {
        "content": "<p>Could your fix your code using (the right) <a href=\"https://github.com/leanprover-community/mathlib/wiki/Code-in-backticks\">#backticks</a> please?</p>",
        "id": 379647453,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1690582683
    },
    {
        "content": "<p>This is true for any positive real number including zero.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Real.Sqrt</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h1</span><span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"n\">Real.sqrt</span> <span class=\"o\">(</span><span class=\"n\">p</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"k\">calc</span>\n  <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">ring</span>\n  <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"n\">Real.sqrt</span> <span class=\"o\">((</span><span class=\"n\">p</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">symm</span> <span class=\"o\">(</span><span class=\"n\">Real.sqrt_sq</span> <span class=\"n\">h1</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 379648114,
        "sender_full_name": "Peter Hansen",
        "timestamp": 1690582949
    },
    {
        "content": "<p>Indeed here you're not looking for a tactic but for a result in the library, and <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Real.sqrt_sq#doc\">docs#Real.sqrt_sq</a> is that result.</p>",
        "id": 379648336,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1690583057
    },
    {
        "content": "<p>Peter's answer is probably correct but can be shorten a lot:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Real.Sqrt</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h1</span><span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"n\">Real.sqrt</span> <span class=\"o\">(</span><span class=\"n\">p</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n <span class=\"o\">(</span><span class=\"n\">Real.sqrt_sq</span> <span class=\"n\">h1</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span>\n</code></pre></div>",
        "id": 379648470,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1690583127
    },
    {
        "content": "<p>And of course:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Real.Sqrt</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h1</span><span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"n\">Real.sqrt</span> <span class=\"o\">(</span><span class=\"n\">p</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">exact</span><span class=\"bp\">?</span>\n</code></pre></div>\n<p>is the canonical way to find this lemma.</p>",
        "id": 379684886,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1690602302
    }
]