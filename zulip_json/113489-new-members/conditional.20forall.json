[
    {
        "content": "<p>Hey yall, doing the lean4 tutorial and working on the exercises for chapter 4. just wondering how to write goldbach conjecture in a way that properly encodes it; I've written it as <code>∀ (x: Nat) (x_gt_2: x &gt; 2) (x_even: even x), ∃ (a b: Nat), prime a ∧ prime b ∧ a + b = x</code> and my editor tells me <code>x_gt_2</code> and <code>x_even</code> are unused values, which indeed they are. is this correct? also, how would I write a meta-assertion that I've asserted goldbach's conjecture correctly, given that I don't intend to try my hand at proving or disproving the conjecture itself today?</p>",
        "id": 383314424,
        "sender_full_name": "heather",
        "timestamp": 1691592722
    },
    {
        "content": "<p>What you have seens fine to me, except that you seem to have a mix of lean 3 and lean 4 style names. (i.e. Nat with a capital and even with a lowercase, did you define those yourself?)</p>\n<p>You can write</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">statement_of_goldbach</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>  <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x_gt_2</span><span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x_even</span><span class=\"o\">:</span> <span class=\"n\">even</span> <span class=\"n\">x</span><span class=\"o\">),</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">),</span> <span class=\"n\">prime</span> <span class=\"n\">a</span> <span class=\"bp\">∧</span> <span class=\"n\">prime</span> <span class=\"n\">b</span> <span class=\"bp\">∧</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">x</span>\n</code></pre></div>\n<p>which just adds a specific named statement without any attempt at proof or disproof. The only meta-assertion here is that the name refers to the right thing. This may also complain about unused arguments but thats fine really</p>",
        "id": 383316433,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1691593017
    },
    {
        "content": "<p>even was from the tutorial, yes. <a href=\"https://leanprover.github.io/theorem_proving_in_lean4/quantifiers_and_equality.html#exercises\">https://leanprover.github.io/theorem_proving_in_lean4/quantifiers_and_equality.html#exercises</a> - my solutions so far are:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">even</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"bp\">∃</span> <span class=\"n\">k</span><span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">,</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">k</span> <span class=\"bp\">=</span> <span class=\"n\">n</span>\n<span class=\"kd\">def</span> <span class=\"n\">prime</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"bp\">¬</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">j</span><span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">k</span><span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">*</span> <span class=\"n\">j</span> <span class=\"bp\">=</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n<span class=\"kd\">def</span> <span class=\"n\">infinitely_many_primes</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span><span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">b</span><span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">,</span> <span class=\"n\">b</span> <span class=\"bp\">&gt;</span> <span class=\"n\">a</span> <span class=\"bp\">∧</span> <span class=\"n\">prime</span> <span class=\"n\">b</span>\n<span class=\"kd\">def</span> <span class=\"n\">Fermat_number</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"bp\">∃</span> <span class=\"n\">k</span><span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"bp\">^</span><span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"bp\">^</span><span class=\"n\">k</span><span class=\"o\">))</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">n</span>\n<span class=\"kd\">def</span> <span class=\"n\">Fermat_prime</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"n\">Fermat_number</span> <span class=\"n\">n</span> <span class=\"bp\">∧</span> <span class=\"n\">prime</span> <span class=\"n\">n</span>\n<span class=\"kd\">def</span> <span class=\"n\">infinitely_many_Fermat_primes</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span><span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">b</span><span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">,</span> <span class=\"n\">b</span> <span class=\"bp\">&gt;</span> <span class=\"n\">a</span> <span class=\"bp\">∧</span> <span class=\"n\">Fermat_prime</span> <span class=\"n\">b</span>\n<span class=\"kd\">def</span> <span class=\"n\">goldbach_conjecture</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x_gt_2</span><span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x_even</span><span class=\"o\">:</span> <span class=\"n\">even</span> <span class=\"n\">x</span><span class=\"o\">),</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">),</span> <span class=\"n\">prime</span> <span class=\"n\">a</span> <span class=\"bp\">∧</span> <span class=\"n\">prime</span> <span class=\"n\">b</span> <span class=\"bp\">∧</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">x</span>\n</code></pre></div>\n<p>copied literally from the tutorial, which uses these names exactly. I was just wondering, since I'm not sure of myself about syntax yet, whether there's any way to check definition correctness that is weaker than proof but stronger than just writing it down, like, idk, well I'm not sure what it'd be besides asking a human, to be honest, heh.</p>",
        "id": 383321482,
        "sender_full_name": "heather",
        "timestamp": 1691593760
    },
    {
        "content": "<p>Interesting! That book was originally written in Lean 3, the conventions in Lean 4 now would be <code>Even</code> etc.</p>",
        "id": 383385973,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1691606063
    },
    {
        "content": "<p>The unused \"values message\" is just a warning. You can resolve it either by replacing <code>(x_even : even x)</code> with <code>(_ : even x)</code> or by using an implication like <code>∀ (x : Nat), x &gt; 2 → even x → ∃ (a b: Nat), prime a ∧ prime b ∧ a + b = x</code>.</p>\n<p>There's generally no easy way to check to see if you have formalized a statement correctly (this is especially hard if you don't try to prove it). Sometimes you can use <code>by slim_check</code> to try to get Lean to generate counterexamples, but I think this won't work in this case because of the existential quantifier.</p>",
        "id": 383405711,
        "sender_full_name": "Niels Voss",
        "timestamp": 1691611352
    }
]