[
    {
        "content": "<p>Hi everyone,</p>\n<p>I am trying to prove that the vector <code>[0,0,1]</code> is a an eigenvector of the matrix <code>[2,0,0; 0, 1, 0; 0, 0, 1]</code>. I am stuck with the compositions of the vec_head and vec_tail functions as can be seen below. Lean seems to know how to evaluate them as you can see from the <code>#eval</code> below them. Any help appreciated</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.complex.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.matrix.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.fintype.card</span>\n<span class=\"kn\">import</span> <span class=\"n\">linear_algebra.matrix.to_lin</span>\n<span class=\"kn\">import</span> <span class=\"n\">linear_algebra.eigenspace</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">M</span>  <span class=\"o\">:=</span> <span class=\"bp\">!!</span><span class=\"o\">[(</span><span class=\"mi\">2</span><span class=\"o\">:</span><span class=\"n\">ℂ</span><span class=\"o\">),</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"bp\">;</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"bp\">;</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">]</span>\n<span class=\"kd\">def</span> <span class=\"n\">v</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">ℂ</span> <span class=\"o\">:=</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">]</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">module.End.eigenvalues</span>\n<span class=\"kn\">open</span> <span class=\"n\">module.End</span>\n<span class=\"kn\">open</span> <span class=\"n\">matrix</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">has_eigenvector</span> <span class=\"o\">(</span><span class=\"n\">matrix.to_lin'</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"n\">v</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">M</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"n\">v</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">module.End.has_eigenvector</span><span class=\"o\">,</span> <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span>\n    <span class=\"n\">rw</span> <span class=\"n\">mem_eigenspace_iff</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"n\">matrix.to_lin'_apply</span><span class=\"o\">,</span>\n    <span class=\"c1\">-- rw matrix.mul_vec_cons, rw zero_smul, rw one_smul,</span>\n    <span class=\"c1\">-- rw zero_add, rw matrix.mul_vec_cons,</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span>\n      <span class=\"n\">matrix.mul_vec_cons</span><span class=\"o\">,</span> <span class=\"n\">zero_smul</span><span class=\"o\">,</span> <span class=\"n\">one_smul</span><span class=\"o\">,</span>\n      <span class=\"n\">matrix.mul_vec_empty</span><span class=\"o\">,</span> <span class=\"n\">add_zero</span><span class=\"o\">,</span> <span class=\"n\">zero_add</span>\n    <span class=\"o\">],</span>\n    <span class=\"gr\">sorry</span><span class=\"o\">,</span>      <span class=\"c1\">-- Here is where the vec_head vec_tail compositions appear</span>\n  <span class=\"o\">},</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">ne.def</span><span class=\"o\">,</span> <span class=\"n\">cons_eq_zero_iff</span><span class=\"o\">,</span> <span class=\"n\">one_ne_zero</span><span class=\"o\">,</span> <span class=\"n\">false_and</span><span class=\"o\">,</span> <span class=\"n\">and_false</span><span class=\"o\">,</span> <span class=\"n\">not_false_iff</span><span class=\"o\">],</span>\n<span class=\"kd\">end</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">vec_head</span> <span class=\"bp\">∘</span> <span class=\"n\">vec_tail</span> <span class=\"bp\">∘</span> <span class=\"n\">vec_tail</span> <span class=\"bp\">∘</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">],</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">],</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">]]</span>\n<span class=\"k\">#eval</span> <span class=\"n\">vec_head</span> <span class=\"bp\">∘</span> <span class=\"n\">vec_tail</span> <span class=\"bp\">∘</span> <span class=\"n\">vec_tail</span> <span class=\"bp\">∘</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">],</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">],</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">]]</span>\n</code></pre></div>",
        "id": 348572663,
        "sender_full_name": "MohanadAhmed",
        "timestamp": 1681252230
    },
    {
        "content": "<p>Note you should write <code>M</code> using <code>!![2,0,0; ...]</code> not <code>![![2,0,0], ...]</code>; the latter has the wrong type.</p>",
        "id": 348582114,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1681256628
    },
    {
        "content": "<p>What goal are you left with at the <code>sorry</code>?</p>",
        "id": 348582284,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1681256690
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113489-new-members/topic/Simple.20eigenvector.20problem/near/348582114\">said</a>:</p>\n<blockquote>\n<p>Note you should write <code>M</code> using <code>!![2,0,0; ...]</code> not <code>![![2,0,0], ...]</code>; the latter has the wrong type.</p>\n</blockquote>\n<p>The single exclamation mark \"array of arrays\" is the result of applying the simplifier i.e. after </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span>\n      <span class=\"n\">matrix.mul_vec_cons</span><span class=\"o\">,</span> <span class=\"n\">zero_smul</span><span class=\"o\">,</span> <span class=\"n\">one_smul</span><span class=\"o\">,</span>\n      <span class=\"n\">matrix.mul_vec_empty</span><span class=\"o\">,</span> <span class=\"n\">add_zero</span><span class=\"o\">,</span> <span class=\"n\">zero_add</span>\n    <span class=\"o\">],</span>\n</code></pre></div>\n<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113489-new-members/topic/Simple.20eigenvector.20problem/near/348582284\">said</a>:</p>\n<blockquote>\n<p>What goal are you left with at the <code>sorry</code>?</p>\n</blockquote>\n<p>The goal at the sorry is <br>\n<code>vec_head ∘ vec_tail ∘ vec_tail ∘ ![![2, 0, 0], ![0, 1, 0], ![0, 0, 1]]</code></p>\n<p>After a lot of just trying stuff randomly and then using the simplifier, the code below seems to get it done. </p>\n<p>The simplifier originally applied <code>mul_vec_cons</code>. I replaced that with repeated application of <code>cons_mul_vec</code> followed by <code>vec3_dot_product</code> then calling the simplifier.</p>\n<p>But this small problem cannot (or should not be!) that hard. What am I missing? Is the API to matrices and vectors too brittle or is the simplifier missing some lemmas?<br>\nIs there a shorter way?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.complex.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.matrix.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.matrix.notation</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.fin.vec_notation</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.fintype.vector</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.fintype.card</span>\n<span class=\"kn\">import</span> <span class=\"n\">linear_algebra.matrix.to_lin</span>\n<span class=\"kn\">import</span> <span class=\"n\">linear_algebra.eigenspace</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">M</span>  <span class=\"o\">:=</span> <span class=\"bp\">!!</span><span class=\"o\">[(</span><span class=\"mi\">2</span><span class=\"o\">:</span><span class=\"n\">ℂ</span><span class=\"o\">),</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"bp\">;</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"bp\">;</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">]</span>\n<span class=\"kd\">def</span> <span class=\"n\">v</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">ℂ</span> <span class=\"o\">:=</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">]</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">module.End.eigenvalues</span>\n<span class=\"kn\">open</span> <span class=\"n\">module.End</span>\n<span class=\"kn\">open</span> <span class=\"n\">matrix</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">matrix</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">has_eigenvector</span> <span class=\"o\">(</span><span class=\"n\">matrix.to_lin'</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"n\">v</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">M</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"n\">v</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">module.End.has_eigenvector</span><span class=\"o\">,</span> <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span>\n    <span class=\"n\">rw</span> <span class=\"n\">mem_eigenspace_iff</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"n\">matrix.to_lin'_apply</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">matrix.cons_mul_vec</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">matrix.cons_mul_vec</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">matrix.cons_mul_vec</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">vec3_dot_product</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">vec3_dot_product</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">vec3_dot_product</span><span class=\"o\">,</span>\n     <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span> <span class=\"n\">one_smul</span><span class=\"o\">],</span>\n     <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">cons_val_zero</span><span class=\"o\">,</span> <span class=\"n\">mul_zero</span><span class=\"o\">,</span> <span class=\"n\">cons_val_one</span><span class=\"o\">,</span> <span class=\"n\">head_cons</span><span class=\"o\">,</span> <span class=\"n\">cons_vec_bit0_eq_alt0</span><span class=\"o\">,</span> <span class=\"n\">cons_vec_append</span><span class=\"o\">,</span> <span class=\"n\">empty_vec_append</span><span class=\"o\">,</span>\n  <span class=\"n\">cons_vec_alt0</span><span class=\"o\">,</span> <span class=\"n\">mul_one</span><span class=\"o\">,</span> <span class=\"n\">zero_add</span><span class=\"o\">,</span> <span class=\"n\">mul_vec_cons</span><span class=\"o\">,</span> <span class=\"n\">empty_add_empty</span><span class=\"o\">],</span>\n  <span class=\"o\">},</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">ne.def</span><span class=\"o\">,</span> <span class=\"n\">cons_eq_zero_iff</span><span class=\"o\">,</span> <span class=\"n\">one_ne_zero</span><span class=\"o\">,</span> <span class=\"n\">false_and</span><span class=\"o\">,</span> <span class=\"n\">and_false</span><span class=\"o\">,</span> <span class=\"n\">not_false_iff</span><span class=\"o\">],</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 348594981,
        "sender_full_name": "MohanadAhmed",
        "timestamp": 1681263355
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"497480\">MohanadAhmed</span> <a href=\"#narrow/stream/113489-new-members/topic/Simple.20eigenvector.20problem/near/348594981\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113489-new-members/topic/Simple.20eigenvector.20problem/near/348582284\">said</a>:</p>\n<blockquote>\n<p>What goal are you left with at the <code>sorry</code>?</p>\n</blockquote>\n<p>The goal at the sorry is <br>\n<code>vec_head ∘ vec_tail ∘ vec_tail ∘ ![![2, 0, 0], ![0, 1, 0], ![0, 0, 1]]</code></p>\n</blockquote>\n<p>I don't believe you, that goal doesn't have an <code>=</code> in it!</p>",
        "id": 348629303,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1681281798
    },
    {
        "content": "<p>Sorry I forgot to copy the RHS <br>\n<code>vec_head ∘ vec_tail ∘ vec_tail ∘ ![![2, 0, 0], ![0, 1, 0], ![0, 0, 1]] = ![0, 0, 1]</code></p>\n<p>I did the eval below it ,just to check if lean can calculate the LHS to be the same as the RHS.</p>",
        "id": 348684423,
        "sender_full_name": "MohanadAhmed",
        "timestamp": 1681295354
    },
    {
        "content": "<p>So <code>#eval vec_head ∘ vec_tail ∘ vec_tail ∘ ![![2, 0, 0], ![0, 1, 0], ![0, 0, 1]]</code> evaluates to <code>![0, 0, 1]</code></p>",
        "id": 348684626,
        "sender_full_name": "MohanadAhmed",
        "timestamp": 1681295405
    },
    {
        "content": "<p>The ones you used in <code>#eval</code> are <code>0, 1, 2 : Nat</code>, not <code>0, 1, 2 : R</code>; lean doesn't know what <code>R</code> is so can't evaluate it</p>",
        "id": 348687413,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1681296231
    },
    {
        "content": "<p>At any rate, I think <code>ext, simp</code> should make progress</p>",
        "id": 348687487,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1681296244
    },
    {
        "content": "<p>With <a href=\"https://github.com/leanprover-community/mathlib/pull/18805\">#18805</a> (edit: <img alt=\":merge:\" class=\"emoji\" src=\"https://zulip-avatars.s3.amazonaws.com/3121/emoji/images/18527.png\" title=\"merge\">), you can prove it as</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">has_eigenvector</span> <span class=\"o\">(</span><span class=\"n\">matrix.to_lin'</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"n\">v</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">module.End.has_eigenvector</span><span class=\"o\">],</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mem_eigenspace_iff</span><span class=\"o\">,</span> <span class=\"n\">matrix.to_lin'_apply</span><span class=\"o\">],</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">M.mul_vec</span> <span class=\"n\">v</span> <span class=\"bp\">=</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"mi\">0</span><span class=\"bp\">*</span><span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"mi\">0</span><span class=\"bp\">*</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"bp\">*</span><span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"bp\">*</span><span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"mi\">0</span><span class=\"bp\">*</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"bp\">*</span><span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"mi\">0</span><span class=\"bp\">*</span><span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"bp\">*</span><span class=\"mi\">1</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n      <span class=\"o\">(</span><span class=\"n\">mul_vec</span><span class=\"bp\">ᵣ</span><span class=\"n\">_eq</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">this</span><span class=\"o\">,</span> <span class=\"n\">v</span><span class=\"o\">],</span>\n    <span class=\"n\">simp</span> <span class=\"o\">},</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">ne.def</span><span class=\"o\">,</span> <span class=\"n\">cons_eq_zero_iff</span><span class=\"o\">,</span> <span class=\"n\">one_ne_zero</span><span class=\"o\">,</span> <span class=\"n\">false_and</span><span class=\"o\">,</span> <span class=\"n\">and_false</span><span class=\"o\">,</span> <span class=\"n\">not_false_iff</span><span class=\"o\">],</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/matrix.mul_vecᵣ_eq\"><code>matrix.mul_vecᵣ_eq</code></a> does all the boring expansion into the form you expect; you just have to write out the target expression.</p>",
        "id": 349147917,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1681400701
    },
    {
        "content": "<p>Could this be a job for <code>norm_num</code>?</p>",
        "id": 349219476,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1681423154
    },
    {
        "content": "<p>Perhaps. Note that with <a href=\"https://github.com/leanprover-community/mathlib/pull/15738\">#15738</a> it's just a job for <code>rw</code></p>",
        "id": 349228110,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1681427059
    }
]