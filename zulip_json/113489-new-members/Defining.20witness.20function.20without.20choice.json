[
    {
        "content": "<p>How can I fill these sorrys</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"bp\">∃!</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">spec</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>so that the definition of f and the theorem don't use the axiom of choice? I'm hoping there's a simple way to just \"pick that y,\" but I can't figure out how.</p>",
        "id": 388722352,
        "sender_full_name": "Nir Paz",
        "timestamp": 1693683243
    },
    {
        "content": "<p>I think the closest you can get is <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Fintype.choose#doc\">docs#Fintype.choose</a></p>",
        "id": 388722429,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1693683325
    },
    {
        "content": "<p>You can't</p>",
        "id": 388723024,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1693683893
    },
    {
        "content": "<p>In set theory you wouldn't need AC but in type theory you do because you're moving from Prop (the statement that something exists) to Type (the thing that exists) and in lean's type theory this is impossible to do computably.</p>",
        "id": 388726440,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1693686532
    }
]