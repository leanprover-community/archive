[
    {
        "content": "<p>I am looking for some design advice about using inductive families.  </p>\n<p>I have a mathematical structure like this: A binary tree where each node has two children l and r, an associated finite type T,  and an associated function f : ( Sum T  (Sum l.T r.T ) -&gt; Nat. For a leaf node T is Empty.</p>\n<p>I will use this structure in computation, and also prove things about it. </p>\n<p>I already have a working version of my computation, based on a representation which does not enforce much of the mathematical structure in the type system. <br>\nI currently just define a tree as Sigma (numNodes : Nat), Sigma (m : Nat), Fin numNodes -&gt; Fin m -&gt; Nat where m is the length of all the Ts of the tree appended together, and the values of each function are zero for all of the values of Fin m that they should not be able to see. </p>\n<p>This works fine, but I would like to build more of the tree structure into Lean's type system. The properties I want to prove depend on the fact that the function associated with each node is 0 for all m not in T or T.l or T.r, so my proof has to include a whole lot of extra stuff about ensuring indicies are correct. If I could embed the structure of my tree in the type system, I would not have to worry about this.</p>\n<p>(Please ask for clarification if any of that was unclear. What I say there leaves out a lot of detail, since I am trying to give the minimum context required to get a good answer. However, I may have left out too much detail.)</p>\n<p>I am trying to represent my tree with an inductive family (this may be the wrong approach). Here is what I have:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span>\n  <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">γ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span>\n  <span class=\"o\">[</span><span class=\"n\">Repr</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">γ</span><span class=\"o\">)]</span>\n  <span class=\"o\">[</span><span class=\"n\">Repr</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">γ</span><span class=\"o\">)]</span> <span class=\"o\">:</span> <span class=\"n\">Repr</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">⊕</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">γ</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n   <span class=\"n\">reprPrec</span> <span class=\"n\">f</span> <span class=\"n\">_</span> <span class=\"o\">:=</span>\n    <span class=\"k\">let</span> <span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">γ</span> <span class=\"o\">:=</span>\n      <span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">Sum.inl</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n    <span class=\"k\">let</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">γ</span> <span class=\"o\">:=</span>\n      <span class=\"bp\">λ</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">Sum.inr</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n    <span class=\"s2\">\"(\"</span> <span class=\"bp\">++</span> <span class=\"n\">repr</span> <span class=\"n\">l</span> <span class=\"bp\">++</span> <span class=\"s2\">\" ⊕ \"</span> <span class=\"bp\">++</span> <span class=\"n\">repr</span> <span class=\"n\">r</span> <span class=\"bp\">++</span> <span class=\"s2\">\")\"</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">_Tree</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">nil</span> <span class=\"o\">:</span>\n    <span class=\"n\">_Tree</span> <span class=\"mi\">0</span>\n  <span class=\"bp\">|</span> <span class=\"n\">ind</span>\n    <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">_Tree</span> <span class=\"n\">j</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">_Tree</span> <span class=\"n\">k</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">s</span> <span class=\"bp\">⊕</span> <span class=\"n\">Fin</span> <span class=\"n\">j</span> <span class=\"bp\">⊕</span> <span class=\"n\">Fin</span> <span class=\"n\">k</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span><span class=\"o\">)</span>\n    <span class=\"o\">:</span> <span class=\"n\">_Tree</span> <span class=\"n\">s</span>\n    <span class=\"n\">deriving</span> <span class=\"n\">Repr</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">_nil</span> <span class=\"o\">:=</span> <span class=\"n\">_Tree.nil</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">_ind</span> <span class=\"o\">:=</span> <span class=\"n\">_Tree.ind</span> <span class=\"n\">_nil</span> <span class=\"n\">_nil</span>\n  <span class=\"o\">(</span><span class=\"bp\">λ|</span> <span class=\"bp\">.</span><span class=\"n\">inl</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">1</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">inl</span> <span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">2</span>\n    <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">0</span>\n    <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"mi\">2</span> <span class=\"bp\">⊕</span> <span class=\"n\">Fin</span> <span class=\"mi\">0</span> <span class=\"bp\">⊕</span> <span class=\"n\">Fin</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">_ind'</span> <span class=\"o\">:=</span> <span class=\"n\">_Tree.ind</span> <span class=\"n\">_ind</span> <span class=\"n\">_ind</span>\n  <span class=\"o\">(</span><span class=\"bp\">λ|</span> <span class=\"bp\">.</span><span class=\"n\">inl</span> <span class=\"mi\">2</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">3</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">1</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">inl</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">2</span>\n    <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">0</span>\n    <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"mi\">3</span> <span class=\"bp\">⊕</span> <span class=\"n\">Fin</span> <span class=\"mi\">2</span> <span class=\"bp\">⊕</span> <span class=\"n\">Fin</span> <span class=\"mi\">2</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span><span class=\"o\">)</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">_ind'</span>\n</code></pre></div>\n<p>This all seems to work, and _ind' is what I am hoping to see. However, I am having trouble defining a function on _Tree.</p>\n<p>Here is my attempt to define a function which takes my new inductive family representation, and converts it back to my old representation (which is something I will want to be able to do).</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">flatten</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">_Tree</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">Σ</span> <span class=\"n\">numNodes</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">,</span> <span class=\"bp\">Σ</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">,</span> <span class=\"n\">Fin</span> <span class=\"n\">numNodes</span> <span class=\"bp\">→</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">f</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_Tree.nil</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">⟨</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">0</span><span class=\"o\">⟩</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_Tree.ind</span> <span class=\"n\">l</span> <span class=\"n\">r</span> <span class=\"n\">f</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">let</span> <span class=\"o\">⟨</span><span class=\"n\">lnodes</span><span class=\"o\">,</span> <span class=\"n\">ln</span><span class=\"o\">,</span> <span class=\"n\">lf</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">flatten</span> <span class=\"n\">l</span>\n    <span class=\"k\">let</span> <span class=\"o\">⟨</span><span class=\"n\">rnodes</span><span class=\"o\">,</span> <span class=\"n\">rn</span><span class=\"o\">,</span> <span class=\"n\">rf</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">flatten</span> <span class=\"n\">r</span>\n    <span class=\"o\">⟨</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">lnodes</span> <span class=\"bp\">+</span> <span class=\"n\">rnodes</span><span class=\"o\">,</span>\n      <span class=\"n\">s</span> <span class=\"bp\">+</span> <span class=\"n\">ln</span> <span class=\"bp\">+</span> <span class=\"n\">rn</span><span class=\"o\">,</span>\n      <span class=\"bp\">λ</span> <span class=\"n\">j</span> <span class=\"n\">k</span> <span class=\"bp\">=&gt;</span>\n        <span class=\"k\">let</span> <span class=\"n\">j'</span> <span class=\"o\">:=</span>\n          <span class=\"n\">finSumFinEquiv.invFun</span> <span class=\"o\">(</span><span class=\"n\">Fin.cast</span> <span class=\"o\">(</span><span class=\"n\">Nat.add_assoc</span> <span class=\"mi\">1</span> <span class=\"n\">lnodes</span> <span class=\"n\">rnodes</span><span class=\"o\">)</span> <span class=\"n\">j</span><span class=\"o\">)</span>\n          <span class=\"bp\">|&gt;</span> <span class=\"n\">Sum.map</span> <span class=\"n\">id</span> <span class=\"n\">finSumFinEquiv.invFun</span>\n        <span class=\"k\">let</span> <span class=\"n\">k'</span> <span class=\"o\">:=</span>\n          <span class=\"n\">finSumFinEquiv.invFun</span> <span class=\"o\">(</span><span class=\"n\">Fin.cast</span> <span class=\"o\">(</span><span class=\"n\">Nat.add_assoc</span> <span class=\"n\">s</span> <span class=\"n\">ln</span> <span class=\"n\">rn</span><span class=\"o\">)</span> <span class=\"n\">k</span><span class=\"o\">)</span>\n          <span class=\"bp\">|&gt;</span> <span class=\"n\">Sum.map</span> <span class=\"n\">id</span> <span class=\"n\">finSumFinEquiv.invFun</span>\n        <span class=\"k\">match</span> <span class=\"n\">j'</span><span class=\"o\">,</span> <span class=\"n\">k'</span> <span class=\"k\">with</span>\n        <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">inl</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"bp\">.</span><span class=\"n\">inl</span> <span class=\"n\">s'</span> <span class=\"bp\">=&gt;</span>\n          <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">inl</span> <span class=\"n\">s'</span><span class=\"o\">)</span>\n        <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">inl</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">inl</span> <span class=\"n\">ln'</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>\n          <span class=\"k\">if</span> <span class=\"n\">ln'</span> <span class=\"bp\">&lt;</span> <span class=\"o\">⟨</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"gr\">sorry</span><span class=\"o\">⟩</span> <span class=\"c1\">-- ln' &lt; j✝</span>\n          <span class=\"k\">then</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">inl</span> <span class=\"o\">(</span><span class=\"n\">Fin.cast</span> <span class=\"gr\">sorry</span> <span class=\"n\">ln'</span><span class=\"o\">)))</span>\n          <span class=\"k\">else</span> <span class=\"mi\">0</span>\n        <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">inl</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"n\">rn'</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>\n          <span class=\"k\">if</span> <span class=\"n\">rn'</span> <span class=\"bp\">&lt;</span> <span class=\"o\">⟨</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"gr\">sorry</span><span class=\"o\">⟩</span> <span class=\"c1\">-- rn' &lt; k✝</span>\n          <span class=\"k\">then</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"o\">(</span><span class=\"n\">Fin.cast</span> <span class=\"gr\">sorry</span> <span class=\"n\">rn'</span><span class=\"o\">)))</span>\n          <span class=\"k\">else</span> <span class=\"mi\">0</span>\n        <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">inl</span> <span class=\"n\">lnodes'</span><span class=\"o\">),</span> <span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">inl</span> <span class=\"n\">ln'</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>\n          <span class=\"n\">lf</span> <span class=\"n\">lnodes'</span> <span class=\"n\">ln'</span>\n        <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"n\">rnodes'</span><span class=\"o\">),</span> <span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"n\">rn'</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>\n          <span class=\"n\">rf</span> <span class=\"n\">rnodes'</span> <span class=\"n\">rn'</span>\n        <span class=\"bp\">|</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">0</span>\n      <span class=\"o\">⟩</span>\n</code></pre></div>\n<p>The second two cases of the second match are giving me trouble. Those cases handle the fact that a node can see the Ts associated with it's two child nodes. Where I have ln' &lt; 0, what it should say is ln' is less than ls, where the left child has type _Tree ls. Currently, the info view tells me that the left child has type _Tree  j✝. I don't know how to name j✝ to get access to it, or if that is possible. </p>\n<p>Is my problem clear? Please ask for follow up clarification if not.</p>\n<p>Is there some easy solution that I am missing, or is this approach to representing my tree with an inductive family fundamentally misguided?</p>",
        "id": 401625961,
        "sender_full_name": "Jesse Slater",
        "timestamp": 1699807475
    },
    {
        "content": "<p>Ok, I seem to have gotten it working. I just needed to name  j✝ and  k✝ by disabling implicit arguments of _Tree.ind.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">flatten</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">_Tree</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">Σ</span> <span class=\"n\">numNodes</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">,</span> <span class=\"bp\">Σ</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">,</span> <span class=\"n\">Fin</span> <span class=\"n\">numNodes</span> <span class=\"bp\">→</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">t</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_Tree.nil</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">⟨</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">0</span><span class=\"o\">⟩</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">@</span><span class=\"n\">_Tree.ind</span> <span class=\"n\">ls</span> <span class=\"n\">rs</span> <span class=\"n\">_</span> <span class=\"n\">l</span> <span class=\"n\">r</span> <span class=\"n\">f</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">let</span> <span class=\"o\">⟨</span><span class=\"n\">lnodes</span><span class=\"o\">,</span> <span class=\"n\">ln</span><span class=\"o\">,</span> <span class=\"n\">lf</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">flatten</span> <span class=\"n\">l</span>\n    <span class=\"k\">let</span> <span class=\"o\">⟨</span><span class=\"n\">rnodes</span><span class=\"o\">,</span> <span class=\"n\">rn</span><span class=\"o\">,</span> <span class=\"n\">rf</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">flatten</span> <span class=\"n\">r</span>\n    <span class=\"o\">⟨</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">lnodes</span> <span class=\"bp\">+</span> <span class=\"n\">rnodes</span><span class=\"o\">,</span>\n      <span class=\"n\">s</span> <span class=\"bp\">+</span> <span class=\"n\">ln</span> <span class=\"bp\">+</span> <span class=\"n\">rn</span><span class=\"o\">,</span>\n      <span class=\"bp\">λ</span> <span class=\"n\">j</span> <span class=\"n\">k</span> <span class=\"bp\">=&gt;</span>\n        <span class=\"k\">let</span> <span class=\"n\">j'</span> <span class=\"o\">:=</span>\n          <span class=\"n\">finSumFinEquiv.invFun</span> <span class=\"o\">(</span><span class=\"n\">Fin.cast</span> <span class=\"o\">(</span><span class=\"n\">Nat.add_assoc</span> <span class=\"mi\">1</span> <span class=\"n\">lnodes</span> <span class=\"n\">rnodes</span><span class=\"o\">)</span> <span class=\"n\">j</span><span class=\"o\">)</span>\n          <span class=\"bp\">|&gt;</span> <span class=\"n\">Sum.map</span> <span class=\"n\">id</span> <span class=\"n\">finSumFinEquiv.invFun</span>\n        <span class=\"k\">let</span> <span class=\"n\">k'</span> <span class=\"o\">:=</span>\n          <span class=\"n\">finSumFinEquiv.invFun</span> <span class=\"o\">(</span><span class=\"n\">Fin.cast</span> <span class=\"o\">(</span><span class=\"n\">Nat.add_assoc</span> <span class=\"n\">s</span> <span class=\"n\">ln</span> <span class=\"n\">rn</span><span class=\"o\">)</span> <span class=\"n\">k</span><span class=\"o\">)</span>\n          <span class=\"bp\">|&gt;</span> <span class=\"n\">Sum.map</span> <span class=\"n\">id</span> <span class=\"n\">finSumFinEquiv.invFun</span>\n        <span class=\"k\">match</span> <span class=\"n\">j'</span><span class=\"o\">,</span> <span class=\"n\">k'</span> <span class=\"k\">with</span>\n        <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">inl</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"bp\">.</span><span class=\"n\">inl</span> <span class=\"n\">s'</span> <span class=\"bp\">=&gt;</span>\n          <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">inl</span> <span class=\"n\">s'</span><span class=\"o\">)</span>\n        <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">inl</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">inl</span> <span class=\"n\">ln'</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>\n          <span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">ln'</span> <span class=\"bp\">&lt;</span> <span class=\"n\">ls</span> <span class=\"c1\">-- ln' &lt; j✝</span>\n          <span class=\"k\">then</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">inl</span> <span class=\"o\">(</span><span class=\"n\">Fin.castLT</span> <span class=\"n\">ln'</span> <span class=\"n\">h</span><span class=\"o\">)))</span>\n          <span class=\"k\">else</span> <span class=\"mi\">0</span>\n        <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">inl</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"n\">rn'</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>\n          <span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">rn'</span> <span class=\"bp\">&lt;</span> <span class=\"n\">rs</span> <span class=\"c1\">-- rn' &lt; k✝</span>\n          <span class=\"k\">then</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"o\">(</span><span class=\"n\">Fin.castLT</span> <span class=\"n\">rn'</span> <span class=\"n\">h</span><span class=\"o\">)))</span>\n          <span class=\"k\">else</span> <span class=\"mi\">0</span>\n        <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">inl</span> <span class=\"n\">lnodes'</span><span class=\"o\">),</span> <span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">inl</span> <span class=\"n\">ln'</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>\n          <span class=\"n\">lf</span> <span class=\"n\">lnodes'</span> <span class=\"n\">ln'</span>\n        <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"n\">rnodes'</span><span class=\"o\">),</span> <span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"n\">rn'</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>\n          <span class=\"n\">rf</span> <span class=\"n\">rnodes'</span> <span class=\"n\">rn'</span>\n        <span class=\"bp\">|</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">0</span>\n      <span class=\"o\">⟩</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">flatten</span> <span class=\"n\">_ind'</span>\n</code></pre></div>\n<p>This seems to work how I would expect.</p>\n<p>I would still like design advice. Is this a good way to represent this structure? Are there any problems I am going to run into when I try to prove things about this representation?</p>",
        "id": 401630630,
        "sender_full_name": "Jesse Slater",
        "timestamp": 1699812451
    },
    {
        "content": "<p>Also, I am a bit concerned that there is something I am not understanding.  What is the difference between these two definitions?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">flatten</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">_Tree</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">Σ</span> <span class=\"n\">numNodes</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">,</span> <span class=\"bp\">Σ</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">,</span> <span class=\"n\">Fin</span> <span class=\"n\">numNodes</span> <span class=\"bp\">→</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">t</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_Tree.nil</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">⟨</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">0</span><span class=\"o\">⟩</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">@</span><span class=\"n\">_Tree.ind</span> <span class=\"n\">ls</span> <span class=\"n\">rs</span> <span class=\"n\">_</span> <span class=\"n\">l</span> <span class=\"n\">r</span> <span class=\"n\">f</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">let</span> <span class=\"o\">⟨</span><span class=\"n\">lnodes</span><span class=\"o\">,</span> <span class=\"n\">ln</span><span class=\"o\">,</span> <span class=\"n\">lf</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">flatten</span> <span class=\"n\">l</span>\n    <span class=\"k\">let</span> <span class=\"o\">⟨</span><span class=\"n\">rnodes</span><span class=\"o\">,</span> <span class=\"n\">rn</span><span class=\"o\">,</span> <span class=\"n\">rf</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">flatten</span> <span class=\"n\">r</span>\n    <span class=\"o\">⟨</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">lnodes</span> <span class=\"bp\">+</span> <span class=\"n\">rnodes</span><span class=\"o\">,</span>\n      <span class=\"n\">s</span> <span class=\"bp\">+</span> <span class=\"n\">ln</span> <span class=\"bp\">+</span> <span class=\"n\">rn</span><span class=\"o\">,</span>\n      <span class=\"bp\">λ</span> <span class=\"n\">j</span> <span class=\"n\">k</span> <span class=\"bp\">=&gt;</span>\n        <span class=\"k\">let</span> <span class=\"n\">j'</span> <span class=\"o\">:=</span>\n          <span class=\"n\">finSumFinEquiv.invFun</span> <span class=\"o\">(</span><span class=\"n\">Fin.cast</span> <span class=\"o\">(</span><span class=\"n\">Nat.add_assoc</span> <span class=\"mi\">1</span> <span class=\"n\">lnodes</span> <span class=\"n\">rnodes</span><span class=\"o\">)</span> <span class=\"n\">j</span><span class=\"o\">)</span>\n          <span class=\"bp\">|&gt;</span> <span class=\"n\">Sum.map</span> <span class=\"n\">id</span> <span class=\"n\">finSumFinEquiv.invFun</span>\n        <span class=\"k\">let</span> <span class=\"n\">k'</span> <span class=\"o\">:=</span>\n          <span class=\"n\">finSumFinEquiv.invFun</span> <span class=\"o\">(</span><span class=\"n\">Fin.cast</span> <span class=\"o\">(</span><span class=\"n\">Nat.add_assoc</span> <span class=\"n\">s</span> <span class=\"n\">ln</span> <span class=\"n\">rn</span><span class=\"o\">)</span> <span class=\"n\">k</span><span class=\"o\">)</span>\n          <span class=\"bp\">|&gt;</span> <span class=\"n\">Sum.map</span> <span class=\"n\">id</span> <span class=\"n\">finSumFinEquiv.invFun</span>\n        <span class=\"k\">match</span> <span class=\"n\">j'</span><span class=\"o\">,</span> <span class=\"n\">k'</span> <span class=\"k\">with</span>\n        <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">inl</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"bp\">.</span><span class=\"n\">inl</span> <span class=\"n\">s'</span> <span class=\"bp\">=&gt;</span>\n          <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">inl</span> <span class=\"n\">s'</span><span class=\"o\">)</span>\n        <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">inl</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">inl</span> <span class=\"n\">ln'</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>\n          <span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">ln'</span> <span class=\"bp\">&lt;</span> <span class=\"n\">ls</span> <span class=\"c1\">-- ln' &lt; j✝</span>\n          <span class=\"k\">then</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">inl</span> <span class=\"o\">(</span><span class=\"n\">Fin.castLT</span> <span class=\"n\">ln'</span> <span class=\"n\">h</span><span class=\"o\">)))</span>\n          <span class=\"k\">else</span> <span class=\"mi\">0</span>\n        <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">inl</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"n\">rn'</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>\n          <span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">rn'</span> <span class=\"bp\">&lt;</span> <span class=\"n\">rs</span> <span class=\"c1\">-- rn' &lt; k✝</span>\n          <span class=\"k\">then</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"o\">(</span><span class=\"n\">Fin.castLT</span> <span class=\"n\">rn'</span> <span class=\"n\">h</span><span class=\"o\">)))</span>\n          <span class=\"k\">else</span> <span class=\"mi\">0</span>\n        <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">inl</span> <span class=\"n\">lnodes'</span><span class=\"o\">),</span> <span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">inl</span> <span class=\"n\">ln'</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>\n          <span class=\"n\">lf</span> <span class=\"n\">lnodes'</span> <span class=\"n\">ln'</span>\n        <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"n\">rnodes'</span><span class=\"o\">),</span> <span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"n\">rn'</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>\n          <span class=\"n\">rf</span> <span class=\"n\">rnodes'</span> <span class=\"n\">rn'</span>\n        <span class=\"bp\">|</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">0</span>\n      <span class=\"o\">⟩</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">flatten'</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">_Tree</span> <span class=\"n\">__</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">Σ</span> <span class=\"n\">numNodes</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">,</span> <span class=\"bp\">Σ</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">,</span> <span class=\"n\">Fin</span> <span class=\"n\">numNodes</span> <span class=\"bp\">→</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">t</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_Tree.nil</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">⟨</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">0</span><span class=\"o\">⟩</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">@</span><span class=\"n\">_Tree.ind</span> <span class=\"n\">ls</span> <span class=\"n\">rs</span> <span class=\"n\">s</span> <span class=\"n\">l</span> <span class=\"n\">r</span> <span class=\"n\">f</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">let</span> <span class=\"o\">⟨</span><span class=\"n\">lnodes</span><span class=\"o\">,</span> <span class=\"n\">ln</span><span class=\"o\">,</span> <span class=\"n\">lf</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">flatten</span> <span class=\"n\">l</span>\n    <span class=\"k\">let</span> <span class=\"o\">⟨</span><span class=\"n\">rnodes</span><span class=\"o\">,</span> <span class=\"n\">rn</span><span class=\"o\">,</span> <span class=\"n\">rf</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">flatten</span> <span class=\"n\">r</span>\n    <span class=\"o\">⟨</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">lnodes</span> <span class=\"bp\">+</span> <span class=\"n\">rnodes</span><span class=\"o\">,</span>\n      <span class=\"n\">s</span> <span class=\"bp\">+</span> <span class=\"n\">ln</span> <span class=\"bp\">+</span> <span class=\"n\">rn</span><span class=\"o\">,</span>\n      <span class=\"bp\">λ</span> <span class=\"n\">j</span> <span class=\"n\">k</span> <span class=\"bp\">=&gt;</span>\n        <span class=\"k\">let</span> <span class=\"n\">j'</span> <span class=\"o\">:=</span>\n          <span class=\"n\">finSumFinEquiv.invFun</span> <span class=\"o\">(</span><span class=\"n\">Fin.cast</span> <span class=\"o\">(</span><span class=\"n\">Nat.add_assoc</span> <span class=\"mi\">1</span> <span class=\"n\">lnodes</span> <span class=\"n\">rnodes</span><span class=\"o\">)</span> <span class=\"n\">j</span><span class=\"o\">)</span>\n          <span class=\"bp\">|&gt;</span> <span class=\"n\">Sum.map</span> <span class=\"n\">id</span> <span class=\"n\">finSumFinEquiv.invFun</span>\n        <span class=\"k\">let</span> <span class=\"n\">k'</span> <span class=\"o\">:=</span>\n          <span class=\"n\">finSumFinEquiv.invFun</span> <span class=\"o\">(</span><span class=\"n\">Fin.cast</span> <span class=\"o\">(</span><span class=\"n\">Nat.add_assoc</span> <span class=\"n\">s</span> <span class=\"n\">ln</span> <span class=\"n\">rn</span><span class=\"o\">)</span> <span class=\"n\">k</span><span class=\"o\">)</span>\n          <span class=\"bp\">|&gt;</span> <span class=\"n\">Sum.map</span> <span class=\"n\">id</span> <span class=\"n\">finSumFinEquiv.invFun</span>\n        <span class=\"k\">match</span> <span class=\"n\">j'</span><span class=\"o\">,</span> <span class=\"n\">k'</span> <span class=\"k\">with</span>\n        <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">inl</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"bp\">.</span><span class=\"n\">inl</span> <span class=\"n\">s'</span> <span class=\"bp\">=&gt;</span>\n          <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">inl</span> <span class=\"n\">s'</span><span class=\"o\">)</span>\n        <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">inl</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">inl</span> <span class=\"n\">ln'</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>\n          <span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">ln'</span> <span class=\"bp\">&lt;</span> <span class=\"n\">ls</span> <span class=\"c1\">-- ln' &lt; j✝</span>\n          <span class=\"k\">then</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">inl</span> <span class=\"o\">(</span><span class=\"n\">Fin.castLT</span> <span class=\"n\">ln'</span> <span class=\"n\">h</span><span class=\"o\">)))</span>\n          <span class=\"k\">else</span> <span class=\"mi\">0</span>\n        <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">inl</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"n\">rn'</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>\n          <span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">rn'</span> <span class=\"bp\">&lt;</span> <span class=\"n\">rs</span> <span class=\"c1\">-- rn' &lt; k✝</span>\n          <span class=\"k\">then</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"o\">(</span><span class=\"n\">Fin.castLT</span> <span class=\"n\">rn'</span> <span class=\"n\">h</span><span class=\"o\">)))</span>\n          <span class=\"k\">else</span> <span class=\"mi\">0</span>\n        <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">inl</span> <span class=\"n\">lnodes'</span><span class=\"o\">),</span> <span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">inl</span> <span class=\"n\">ln'</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>\n          <span class=\"n\">lf</span> <span class=\"n\">lnodes'</span> <span class=\"n\">ln'</span>\n        <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"n\">rnodes'</span><span class=\"o\">),</span> <span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"n\">rn'</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>\n          <span class=\"n\">rf</span> <span class=\"n\">rnodes'</span> <span class=\"n\">rn'</span>\n        <span class=\"bp\">|</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">0</span>\n      <span class=\"o\">⟩</span>\n<span class=\"k\">#eval</span> <span class=\"n\">flatten</span> <span class=\"n\">_ind'</span>\n<span class=\"k\">#eval</span> <span class=\"n\">flatten'</span> <span class=\"n\">_ind'</span>\n</code></pre></div>\n<p>They appear to do the same thing. Does it change anything that I name s in different places? I feel like I am missing something about how inductive families work.</p>",
        "id": 401630916,
        "sender_full_name": "Jesse Slater",
        "timestamp": 1699812781
    }
]