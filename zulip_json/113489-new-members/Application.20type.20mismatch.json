[
    {
        "content": "<p>Hi,</p>\n<p>Still trying to figure out how lean works ... so I have a function defined under the condition that some predicate holds on the argument, something like</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">good</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">whatever</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"n\">something</span>\n<span class=\"n\">def</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">whatever</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">good</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">blah</span>\n</pre></div>\n\n\n<p>and I would like to rewrite the argument <code>x</code> in <code>f x h</code>, but I get the error <code>[check] application type mismatch at ...</code> stating, if I understand the message correctly, that after rewriting the <code>x</code> to some <code>y</code>, then we would get <code>f y h</code> with <code>h : good x</code> instead of <code>good y</code>. Certainly doing the same rewrite inside of <code>h</code> would make it fit, but if I understand it right, <code>rw</code> only acts at one location at a time.</p>\n<p>What is the right way to do this rewrite? Is that what <code>simp only</code> is for? Is that kind of issue the reason why <code>1/0=0</code>?</p>",
        "id": 181635755,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1574428368
    },
    {
        "content": "<p>OK, more explicit example:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">good</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"mi\">3</span> <span class=\"err\">∣</span> <span class=\"n\">n</span>\n<span class=\"n\">def</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">good</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">n</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">toto</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"o\">{</span> <span class=\"n\">norm_num</span> <span class=\"o\">}</span>\n<span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">good</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">3</span> <span class=\"err\">∣</span> <span class=\"n\">f</span> <span class=\"n\">n</span> <span class=\"n\">h</span> <span class=\"o\">:=</span>\n    <span class=\"k\">begin</span>\n        <span class=\"n\">rw</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">toto</span> <span class=\"n\">n</span><span class=\"o\">),</span>\n        <span class=\"n\">sorry</span>\n    <span class=\"kn\">end</span>\n</pre></div>",
        "id": 181635787,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1574428405
    },
    {
        "content": "<blockquote>\n<p>Is that kind of issue the reason why <code>1/0=0</code>?</p>\n</blockquote>\n<p>Yes, this is certainly one of the reasons</p>",
        "id": 181636725,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1574429050
    },
    {
        "content": "<p>This example will work if you <code>revert h</code> before the rewrite. Then both occurrences of <code>n</code> will get rewritten at the same time. But in general, this will be frustrating, and yes it is the reason why 1/0=0.</p>",
        "id": 181636737,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1574429059
    },
    {
        "content": "<p>In mathlib we generally prefer to \"totalize\" f, that is, to give it a default value when <code>good n</code> doesn't hold. Something like</p>",
        "id": 181636771,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1574429092
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"242586\">@Vincent Beffara</span> It turns out that it is often easier to define your function in such a way that it garbage whenever the input is garbage, instead of defining a partial function</p>",
        "id": 181636777,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1574429097
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">derive</span> <span class=\"n\">decidable</span><span class=\"o\">]</span> <span class=\"n\">def</span> <span class=\"n\">good</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"mi\">3</span> <span class=\"err\">∣</span> <span class=\"n\">n</span>\n\n<span class=\"n\">def</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"o\">:=</span> <span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">good</span> <span class=\"n\">n</span> <span class=\"k\">then</span> <span class=\"n\">n</span> <span class=\"k\">else</span> <span class=\"n\">default</span> <span class=\"bp\">_</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">f_val</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">good</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">]</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">toto</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"o\">{</span> <span class=\"n\">norm_num</span> <span class=\"o\">}</span>\n<span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">good</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">3</span> <span class=\"err\">∣</span> <span class=\"n\">f</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n    <span class=\"k\">begin</span>\n        <span class=\"n\">rw</span> <span class=\"o\">[(</span><span class=\"bp\">@</span><span class=\"n\">toto</span> <span class=\"n\">n</span><span class=\"o\">)]</span> <span class=\"n\">at</span> <span class=\"n\">h</span> <span class=\"err\">⊢</span><span class=\"o\">,</span>\n        <span class=\"n\">sorry</span>\n    <span class=\"kn\">end</span>\n</pre></div>",
        "id": 181636778,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1574429098
    },
    {
        "content": "<p>You only need to check <code>good x</code> on theorems that need it, but not on the function itself.<br>\nIf you can make the \"output garbage\" somewhat useful even if the input is garbage, that's even better, because it will allow you to drop some checks of <code>good x</code>. That's the reason why <code>1/0 = 0</code> and not <code>1/0 = 37</code> even though Kevin would have liked that.</p>",
        "id": 181636915,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1574429183
    },
    {
        "content": "<p>Here's another trick which is sometimes helpful:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">norm_num</span>\n\n<span class=\"n\">def</span> <span class=\"n\">good</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"mi\">3</span> <span class=\"err\">∣</span> <span class=\"n\">n</span>\n<span class=\"n\">def</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">good</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">n</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">toto</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"o\">{</span> <span class=\"n\">norm_num</span> <span class=\"o\">}</span>\n<span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">good</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">3</span> <span class=\"err\">∣</span> <span class=\"n\">f</span> <span class=\"n\">n</span> <span class=\"n\">h</span> <span class=\"o\">:=</span>\n  <span class=\"k\">begin</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"mi\">3</span> <span class=\"err\">∣</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">sorry</span><span class=\"o\">,</span>\n    <span class=\"n\">convert</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n  <span class=\"kn\">end</span>\n</pre></div>",
        "id": 181637090,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1574429324
    },
    {
        "content": "<p><code>toto</code> is true by <code>rfl</code> but had this not been the case, the goal would have changed to <code>n = n + 1 - 1</code>. Possibly.</p>",
        "id": 181637130,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1574429373
    },
    {
        "content": "<blockquote>\n<p>This example will work if you <code>revert h</code> before the rewrite. Then both occurrences of <code>n</code> will get rewritten at the same time. But in general, this will be frustrating, and yes it is the reason why 1/0=0.</p>\n</blockquote>\n<p>Ah, that is nice to know. So how can I tell whether <code>rw</code> will rewrite the first occurrence of <code>n</code> or all of them at once?</p>\n<p>And a related question, if the <code>h</code> is not part of my environment but a field in some structure somewhere (and the <code>n</code> is in another field of the same structure), does all that mean that I will have to deconstruct the whole structure before I can apply <code>rw</code> then?</p>",
        "id": 181652488,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1574439380
    },
    {
        "content": "<blockquote>\n<p>You only need to check <code>good x</code> on theorems that need it, but not on the function itself.<br>\nIf you can make the \"output garbage\" somewhat useful even if the input is garbage, that's even better, because it will allow you to drop some checks of <code>good x</code>. That's the reason why <code>1/0 = 0</code> and not <code>1/0 = 37</code> even though Kevin would have liked that.</p>\n</blockquote>\n<p>It's morally dishonest to prove theorems about junk.</p>",
        "id": 181652576,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1574439453
    },
    {
        "content": "<p>You can target which <code>n</code>s <code>rw</code> will rewrite, it's somewhat arcane but it's possible.</p>",
        "id": 181652653,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1574439493
    },
    {
        "content": "<p>See <a href=\"https://github.com/leanprover-community/mathlib/blob/master/docs/extras/conv.md\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/blob/master/docs/extras/conv.md\">https://github.com/leanprover-community/mathlib/blob/master/docs/extras/conv.md</a></p>",
        "id": 181652711,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1574439542
    },
    {
        "content": "<p>Is it arcane even if I want to target \"all the <code>n</code>s even those hidden in assumptions that show up as <code>_</code>\"?</p>",
        "id": 181652739,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1574439564
    },
    {
        "content": "<p>I just usually proceed by trial and error :-/ I try <code>rw</code>, <code>erw</code>, <code>simp only</code> and then I ask here :D</p>",
        "id": 181652837,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1574439618
    },
    {
        "content": "<blockquote>\n<p>See <a href=\"https://github.com/leanprover-community/mathlib/blob/master/docs/extras/conv.md\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/blob/master/docs/extras/conv.md\">https://github.com/leanprover-community/mathlib/blob/master/docs/extras/conv.md</a></p>\n</blockquote>\n<p>Feels a bit brittle to navigate through the expression and tag all the occurrences one by one ...</p>",
        "id": 181652932,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1574439692
    },
    {
        "content": "<p>The slightly confusing rule is: <code>rw</code> rewrites every occurrence but it has to be the exact same rewriting. For instance, if your goal contains <code>((a+b)+ (c+d)) + (a + b)</code>, <code>rw add_comm</code> will perform only one rewrite, although there are five additions, because it will see the outermost addition (second to last one in left to right order), specialize the <code>add_comm</code> lemma to <code>add_comm ((a+b)+(c+d)) (a+b)</code> and perform all rewrite using that specialized lemma.  On the other hand <code>rw add_comm a b</code> will perform two rewriting, because that specific lemma matches two subterms in the goal.</p>",
        "id": 181654564,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1574440619
    },
    {
        "content": "<p>I'm working my way through <em>Theorem Proving in Lean4</em>.  In the <a href=\"https://lean-lang.org/theorem_proving_in_lean4/inductive_types.html#other-recursive-data-types\">Other Recursive Data Types</a> section I'm trying to follow along in Visual Studio.</p>\n<p>However, this code</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">Hidden</span>\n<span class=\"kd\">universe</span> <span class=\"n\">u</span>\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">nil</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span>\n  <span class=\"bp\">|</span> <span class=\"n\">cons</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">List</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">List</span> <span class=\"n\">α</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">List</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">append</span> <span class=\"o\">(</span><span class=\"n\">as</span> <span class=\"n\">bs</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">as</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">nil</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">bs</span>\n  <span class=\"bp\">|</span> <span class=\"n\">cons</span> <span class=\"n\">a</span> <span class=\"n\">as</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">cons</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">append</span> <span class=\"n\">as</span> <span class=\"n\">bs</span><span class=\"o\">)</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">nil_append</span> <span class=\"o\">(</span><span class=\"n\">as</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">append</span> <span class=\"n\">nil</span> <span class=\"n\">as</span> <span class=\"bp\">=</span> <span class=\"n\">as</span> <span class=\"o\">:=</span>\n  <span class=\"n\">rfl</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">cons_append</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">as</span> <span class=\"n\">bs</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n  <span class=\"o\">:</span> <span class=\"n\">append</span> <span class=\"o\">(</span><span class=\"n\">cons</span> <span class=\"n\">a</span> <span class=\"n\">as</span><span class=\"o\">)</span> <span class=\"n\">bs</span> <span class=\"bp\">=</span> <span class=\"n\">cons</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">append</span> <span class=\"n\">as</span> <span class=\"n\">bs</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">rfl</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">List</span>\n</code></pre></div>\n<p>which is mostly copied from the tutorial gives a few syntax errors:</p>\n<p>in</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">nil_append</span> <span class=\"o\">(</span><span class=\"n\">as</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">append</span> <span class=\"n\">nil</span> <span class=\"n\">as</span> <span class=\"bp\">=</span> <span class=\"n\">as</span> <span class=\"o\">:=</span>\n  <span class=\"n\">rfl</span>\n</code></pre></div>\n<p>the <code>nil</code> is underlined in red with the error message </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">application</span> <span class=\"n\">type</span> <span class=\"n\">mismatch</span>\n  <span class=\"n\">append</span> <span class=\"n\">nil</span>\n<span class=\"n\">argument</span>\n  <span class=\"n\">nil</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">List</span> <span class=\"bp\">?</span><span class=\"n\">m.6804</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">?</span><span class=\"n\">u.6803</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"kt\">Type</span> <span class=\"bp\">?</span><span class=\"n\">u.6802</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">u.6802</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>and then in</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">cons_append</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">as</span> <span class=\"n\">bs</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n  <span class=\"o\">:</span> <span class=\"n\">append</span> <span class=\"o\">(</span><span class=\"n\">cons</span> <span class=\"n\">a</span> <span class=\"n\">as</span><span class=\"o\">)</span> <span class=\"n\">bs</span> <span class=\"bp\">=</span> <span class=\"n\">cons</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">append</span> <span class=\"n\">as</span> <span class=\"n\">bs</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">rfl</span>\n</code></pre></div>\n<p><code>cons a as</code><br>\nand<br>\n<code>as</code> in <code>append as bs</code><br>\ngive the following errors:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">application</span> <span class=\"n\">type</span> <span class=\"n\">mismatch</span>\n  <span class=\"n\">append</span> <span class=\"o\">(</span><span class=\"n\">cons</span> <span class=\"n\">a</span> <span class=\"n\">as</span><span class=\"o\">)</span>\n<span class=\"n\">argument</span>\n  <span class=\"n\">cons</span> <span class=\"n\">a</span> <span class=\"n\">as</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">List</span> <span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"kt\">Type</span> <span class=\"bp\">?</span><span class=\"n\">u.508830</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">u.508830</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>and</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">application</span> <span class=\"n\">type</span> <span class=\"n\">mismatch</span>\n  <span class=\"n\">append</span> <span class=\"n\">as</span>\n<span class=\"n\">argument</span>\n  <span class=\"n\">as</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">List</span> <span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"kt\">Type</span> <span class=\"bp\">?</span><span class=\"n\">u.675344</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">u.675344</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>Anyone know what's going on here and how to fix the sytax errors?</p>",
        "id": 402712788,
        "sender_full_name": "Mike",
        "timestamp": 1700232140
    },
    {
        "content": "<p>The variable is declared as explicit. You can change it to <code>variable {α : Type u}</code> and it will probably help.</p>",
        "id": 402714355,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1700232641
    },
    {
        "content": "<p>Note that if you're outside Mathlib and you don't declare the variable at all, it gets automatically declared as implicit. If you are inside Mathlib, you can do <code>set_option autoImplicit true</code> to revert to vanilla Lean behaviour (but be aware that typos can be very confusing if you don't pay attention to the syntax highlighting colours).</p>",
        "id": 402714884,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1700232815
    },
    {
        "content": "<p>Thank you <span class=\"user-mention\" data-user-id=\"325367\">@Mauricio Collares</span> That worked!!</p>",
        "id": 402720540,
        "sender_full_name": "Mike",
        "timestamp": 1700234432
    },
    {
        "content": "<p>In the next section, I'm getting a new syntax error in a definition:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">BinaryTree</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">leaf</span> <span class=\"o\">:</span> <span class=\"n\">BinaryTree</span>\n  <span class=\"bp\">|</span> <span class=\"n\">node</span> <span class=\"o\">:</span> <span class=\"n\">BinaryTree</span> <span class=\"bp\">→</span> <span class=\"n\">BinaryTree</span> <span class=\"bp\">→</span> <span class=\"n\">BinaryTree</span>\n</code></pre></div>\n<p>in the last line <code>  | node : BinaryTree → BinaryTree → BinaryTree</code>, the third <code>BinaryTree</code> is underlined in red with this error message:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">function</span> <span class=\"n\">expected</span> <span class=\"n\">at</span>\n  <span class=\"n\">BinaryTree</span>\n<span class=\"n\">term</span> <span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"kt\">Sort</span> <span class=\"bp\">?</span><span class=\"n\">u.7194</span>\n</code></pre></div>\n<p>Anyone have an idea of what's going on here?</p>",
        "id": 402725654,
        "sender_full_name": "Mike",
        "timestamp": 1700235866
    },
    {
        "content": "<p>Click on the \"Launch in Lean 4 playground\" icon on your quoted Lean code. You will see that it contains no error.<br>\nBut now try the same thing with this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">BinaryTree</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">leaf</span> <span class=\"o\">:</span> <span class=\"n\">BinaryTree</span>\n  <span class=\"bp\">|</span> <span class=\"n\">node</span> <span class=\"o\">:</span> <span class=\"n\">BinaryTree</span> <span class=\"bp\">→</span> <span class=\"n\">BinaryTree</span> <span class=\"bp\">→</span> <span class=\"n\">BinaryTree</span>\n         <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>There's a token whose indentation is such that it is being treated as an argument to 'BinarySearch', which requires no arguments.</p>",
        "id": 402726247,
        "sender_full_name": "Richard Copley",
        "timestamp": 1700236083
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"400544\">@Richard Copley</span> ! I have no idea what was happening. The error went away after a little while. I will have to be more careful about indentation.</p>",
        "id": 402728101,
        "sender_full_name": "Mike",
        "timestamp": 1700236700
    }
]