[
    {
        "content": "<p>Hi. How should I express that a real number is an integer, in the sense that there exists an integer that casts to it? I wrote it as it is right now <code>∃ N : ℕ, ↑N = r</code>, but I was wondering if there were better ways.</p>",
        "id": 326285714,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1675748098
    },
    {
        "content": "<p>In particular, if I want to prove this statement for some <code>r</code>, then I will have to construct <code>N</code>, but sometimes I cannot</p>",
        "id": 326285820,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1675748172
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"579936\">@Gareth Ma</span> I think this is the best way. If you don't want to construct an <code>N</code> what other method would you like to use instead? (You can give an informal mathematical answer, no Lean code required.)</p>",
        "id": 326291657,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1675752294
    },
    {
        "content": "<p>Here is my actual use case:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">aux_exp_mul_int</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n<span class=\"bp\">∃</span> <span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"bp\">↑</span><span class=\"n\">N</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">Icc</span> <span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">lcm</span> <span class=\"o\">(</span><span class=\"n\">coe</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"bp\">∫</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"k\">in</span> <span class=\"mi\">0</span><span class=\"bp\">..</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>I don't know how to provide a more minimal example to demonstrate the complexity. The idea is that the term <code>x ^ n * (1 - x) ^ n</code> is a polynomial in <code>x</code> with degree <code>2n</code>, so after integrating and evaluating at 1, it is a rational number where the denominator dives lcm(1, ..., 2n + 1), or more specifically sum of fractions with denominators &lt;= (2n + 1). and hence the whole thing is an integer.</p>",
        "id": 326291786,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1675752388
    },
    {
        "content": "<p>I think you should first simplify away that integral.</p>",
        "id": 326292073,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1675752551
    },
    {
        "content": "<p>After that, you will still have a polynomial expression. But you will be able to show that it is equal to <code>polynomial.eval</code> of an explicit polynomial with rational coefficients.</p>",
        "id": 326292130,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1675752599
    },
    {
        "content": "<p>After more simplifications, you'll get to a point where you can actually plug in the <code>N</code>.</p>",
        "id": 326292260,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1675752666
    },
    {
        "content": "<p>That sounds scary but I will try that!</p>",
        "id": 326292300,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1675752697
    },
    {
        "content": "<p>So essentially \"just do it explicitly\"</p>",
        "id": 326292386,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1675752730
    },
    {
        "content": "<p>We currently don't have tactic support for these calculations, unfortunately.</p>",
        "id": 326292431,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1675752754
    },
    {
        "content": "<p>But do we already have the theory to simplify that integral?</p>",
        "id": 326292621,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1675752861
    },
    {
        "content": "<p>We essentially want something like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">eval_integral_thing_idk</span> <span class=\"o\">{</span><span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n<span class=\"bp\">∫</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"k\">in</span> <span class=\"mi\">0</span><span class=\"bp\">..</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">∑</span> <span class=\"n\">n</span> <span class=\"k\">in</span> <span class=\"n\">range</span> <span class=\"n\">N</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"bp\">∑</span> <span class=\"n\">n</span> <span class=\"k\">in</span> <span class=\"n\">range</span> <span class=\"o\">(</span><span class=\"n\">N</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"n\">n</span> <span class=\"bp\">/</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>Which seems quite easy?</p>",
        "id": 326293438,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1675753389
    },
    {
        "content": "<p>binomial theorem exists in <code>add_pow</code></p>",
        "id": 326293453,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1675753400
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">eval_integral_thing_idk</span> <span class=\"o\">{</span><span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n<span class=\"bp\">∫</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"k\">in</span> <span class=\"mi\">0</span><span class=\"bp\">..</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">∑</span> <span class=\"n\">n</span> <span class=\"k\">in</span> <span class=\"n\">range</span> <span class=\"n\">N</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"bp\">∑</span> <span class=\"n\">n</span> <span class=\"k\">in</span> <span class=\"n\">range</span> <span class=\"n\">N</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"n\">n</span> <span class=\"bp\">/</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">interval_integral.integral_finset_sum</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- swap signs since it's finite sum</span>\n  <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">integral_const_mul</span><span class=\"o\">,</span> <span class=\"n\">nat.cast_add</span><span class=\"o\">,</span> <span class=\"n\">algebra_map.coe_one</span><span class=\"o\">,</span> <span class=\"n\">integral_pow</span><span class=\"o\">,</span> <span class=\"n\">one_pow</span><span class=\"o\">,</span>\n           <span class=\"n\">zero_pow</span> <span class=\"o\">(</span><span class=\"n\">nat.zero_lt_succ</span> <span class=\"n\">_</span><span class=\"o\">),</span> <span class=\"n\">sub_zero</span><span class=\"o\">,</span> <span class=\"n\">mul_div</span><span class=\"o\">,</span> <span class=\"n\">mul_one</span><span class=\"o\">],</span>\n  <span class=\"c1\">-- prove integrable</span>\n  <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">k</span> <span class=\"n\">hk</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">interval_integral.interval_integrable.const_mul</span><span class=\"o\">,</span> <span class=\"n\">interval_integrable_pow</span><span class=\"o\">],</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 326294341,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1675753920
    }
]