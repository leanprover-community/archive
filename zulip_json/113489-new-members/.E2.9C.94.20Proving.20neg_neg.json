[
    {
        "content": "<p>Hi, I'm just getting started with the Mathematics in Lean book. I'm having some difficulty proving <code>neg_neg</code>. Here is what I have so far:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">neg_neg</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">-</span> <span class=\"bp\">-</span><span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"bp\">-</span><span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">add_right_neg</span><span class=\"o\">]</span>\n  <span class=\"n\">apply</span> <span class=\"n\">eq_neg_of_add_eq_zero</span> <span class=\"n\">h</span>\n</code></pre></div>\n<p>At this point the vscode extension tells me I have an error: </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">tactic</span> <span class=\"bp\">'</span><span class=\"n\">apply'</span> <span class=\"n\">failed</span><span class=\"o\">,</span> <span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">unify</span>\n  <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span> <span class=\"bp\">-</span><span class=\"n\">a</span>\n<span class=\"k\">with</span>\n  <span class=\"bp\">-</span> <span class=\"bp\">-</span><span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a</span>\n</code></pre></div>\n<p>Is anyone able to lend a hand?<br>\nFor reference the <code>eq_neg_of_add_eq_zero</code> theorem shows: <code>(h : a + b = 0) : a = -b</code></p>",
        "id": 390281301,
        "sender_full_name": "Jesse",
        "timestamp": 1694428648
    },
    {
        "content": "<p>You could try putting in <code>apply Eq.symm</code> to swap the LHS and RHS of the goal. The error is telling you that the theorem you're applying has the LHS and RHS reversed from what is expected.</p>",
        "id": 390284103,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1694429645
    },
    {
        "content": "<p>Lean is very pedantic. Try and understand the error message -- it is correctly pointing out that your proof is wrong.</p>",
        "id": 390284495,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1694429774
    },
    {
        "content": "<p>Thanks, adding in <code>apply Eq.symm</code> worked, as did a slight rewrite</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">neg_neg</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">-</span> <span class=\"bp\">-</span><span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"bp\">-</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">add_left_neg</span><span class=\"o\">]</span>\n  <span class=\"n\">apply</span> <span class=\"n\">neg_eq_of_add_eq_zero</span> <span class=\"n\">h</span>\n</code></pre></div>\n<p>Do I conclude that the <code>=</code> relation is directional in Lean?</p>",
        "id": 390286054,
        "sender_full_name": "Jesse",
        "timestamp": 1694430347
    },
    {
        "content": "<p>If you are asking \"is X=Y equal to Y=X\" then the answer is indeed \"no\". Remember that Lean is a computer, these are just symbols and they're not the same symbols so they're not equal. <code>Eq.symm</code>is the theorem that if X=Y then Y=X.</p>",
        "id": 390287154,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1694430741
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"648676\">Jesse</span> has marked this topic as resolved.</p>",
        "id": 390289006,
        "sender_full_name": "Notification Bot",
        "timestamp": 1694431475
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> (Since we're being pedantic, in Lean we have X=Y is equal to Y=X <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span> just not a defeq of course)</p>",
        "id": 390293708,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1694433159
    },
    {
        "content": "<p>Yeah, there are several different kinds of equals at play here :-)</p>",
        "id": 390294239,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1694433355
    },
    {
        "content": "<p>Fermat's Last Theorem is equal to 2+2=4, right? :-)</p>",
        "id": 390294314,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1694433369
    }
]