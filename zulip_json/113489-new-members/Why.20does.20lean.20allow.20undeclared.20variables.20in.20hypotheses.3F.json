[
    {
        "content": "<p>What is the usefulness of something like this compiling?</p>\n<p><code>example (_ : n = m) : True := trivial</code></p>\n<p>Is this kind of thing used in mathlib? It has some disadvantages, I just spent a while trying to figure out why in a case similar to this</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">nonemp</span> <span class=\"o\">:</span> <span class=\"n\">Set.Nonempty</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"n\">sSup</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">True</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">exists_lt_of_lt_csSup</span> <span class=\"n\">nonemp</span> <span class=\"n\">h</span>\n  <span class=\"n\">trivial</span>\n</code></pre></div>\n<p>lean couldn't synth an instance on ℝ, because I flipped the order of the first 2 hypotheses. I was surprised it didn't just throw an error at the first line once I figured it out.</p>",
        "id": 401201920,
        "sender_full_name": "Nir Paz",
        "timestamp": 1699550103
    },
    {
        "content": "<p>You can disable this behavior with <code>set_option autoImplicit false</code></p>",
        "id": 401202487,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1699550320
    },
    {
        "content": "<p>In mathlib it's disabled by default, but in your own project you have to disable it yourself</p>",
        "id": 401202547,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1699550354
    },
    {
        "content": "<p>I think <code>autoImplicit false</code> should be a default default.</p>",
        "id": 401202613,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1699550385
    },
    {
        "content": "<p>This is probably the 3rd or 4th time I see this suggestion come up. Here's an idea: have a global config so users could set their own default settings. I think it's totally understandable that not everybody likes <code>autoImplicit</code> due to the fear of being setting footguns with typos. And temporarily setting that to <code>false</code> on every working file in a project whose default value is <code>true</code> is an annoying solution</p>",
        "id": 401203951,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1699550890
    },
    {
        "content": "<p>How would that global config be different to the configuration we have in the mathlib lakefile?</p>",
        "id": 401204074,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1699550948
    },
    {
        "content": "<p>It needs to be per-project, otherwise you won't be able to open someone else's code that uses <code>autoImplicit</code></p>",
        "id": 401204135,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1699550979
    },
    {
        "content": "<p>Yeah, idk... I think the issue here is that <code>autoImplicit</code> feels more like a programming style preference than something that should be defined per project.</p>\n<p>This gets ugly, but <em>maybe</em>, just maybe, <code>autoImplicit</code> could be front-end thing. So you'd code as if you didn't care and Lean would warn you that something was interpreted as auto-implicit, offering a button to concretize it</p>",
        "id": 401204969,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1699551338
    },
    {
        "content": "<p>Ah; so you're suggesting that it should be impossible to turn <code>autoImplicit</code> off, but it should be possible to make it a linter warning/error?</p>",
        "id": 401205418,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1699551520
    },
    {
        "content": "<p>That's probably a better solution. I was suggesting something more radical: there would be no such thing as \"auto-implicit\", concretely speaking. But Lean would still be able to allow (but warn) that it's being used as a front-end trick</p>",
        "id": 401205755,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1699551658
    },
    {
        "content": "<p>that sounds like auto-implicit exists</p>",
        "id": 401205851,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1699551695
    },
    {
        "content": "<p>lean is the front end</p>",
        "id": 401205879,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1699551711
    },
    {
        "content": "<p>so if it accepts code with auto implicits then they exist</p>",
        "id": 401205955,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1699551727
    },
    {
        "content": "<p>So this can be <em>the</em> global config: warn me about autoimplicits</p>\n<p>But it has to be done in a friendly way so it's not too spammy</p>",
        "id": 401206001,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1699551756
    },
    {
        "content": "<p>Sure that can be done</p>",
        "id": 401206036,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1699551777
    },
    {
        "content": "<p>it would only be spammy if you turn it on in a project that doesn't care</p>",
        "id": 401206081,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1699551796
    },
    {
        "content": "<p>but a linter warning would still be tantamount to banning it, for the most part</p>",
        "id": 401206164,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1699551831
    },
    {
        "content": "<p>you might get slightly better (or worse) error messages if you allow it to lint and continue with the interpretation of the variable as an autoImplicit instead of immediately dying with an unresolved name error like it normally does</p>",
        "id": 401206357,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1699551904
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113489-new-members/topic/Why.20does.20lean.20allow.20undeclared.20variables.20in.20hypotheses.3F/near/401206164\">said</a>:</p>\n<blockquote>\n<p>but a linter warning would still be tantamount to banning it, for the most part</p>\n</blockquote>\n<p>Demoting from an error to a linter warning would at least mean that the setting no longer breaks the build / browsing in vscode</p>",
        "id": 401206959,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1699552179
    },
    {
        "content": "<p>What would be <em>really</em> nice is if it could be a linter warning (akin to unused variables, the core Lean version, not the Mathlib one), and that warning could be set / overridden locally within a project in VS Code. Then we could have autoimplicits in mathlib again.</p>\n<p>We would turn them on, and disable the linter. But then users who think autoimplicit is a footgun could have it enabled locally. IMHO, that would be the best of all possible worlds regarding autoimplicits.</p>",
        "id": 401208099,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1699552614
    },
    {
        "content": "<blockquote>\n<p>We would turn them on, and disable the linter. But then users who think autoimplicit is a footgun could have it enabled locally. IMHO, that would be the best of all possible worlds regarding autoimplicits.</p>\n</blockquote>\n<p>The downside of this approach is that reviewers cannot tell (from github) if someone has ignored the linter warnings deliberately or accidentally</p>",
        "id": 401208922,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1699552896
    },
    {
        "content": "<p>I don't see how that's a problem.</p>",
        "id": 401210185,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1699553368
    },
    {
        "content": "<p>One of the job of review is to check if someone has already blown their foot off; sometimes it's hard to tell from the source code alone. Of course, if every PR is reviewed in a live workspace, that's not an issue.</p>",
        "id": 401210900,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1699553674
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113489-new-members/topic/Why.20does.20lean.20allow.20undeclared.20variables.20in.20hypotheses.3F/near/401202547\">said</a>:</p>\n<blockquote>\n<p>In mathlib it's disabled by default, but in your own project you have to disable it yourself</p>\n</blockquote>\n<p>In every new project I create in Lean 4, I add to <code>lakefile.lean</code> the settings <code>moreServerArgs := #[\"-DautoImplicit=false\"]</code> for the package and <code>moreLeanArgs := #[\"-DautoImplicit=false\"]</code> for the default target. For example:<br>\n<a href=\"https://github.com/madvorak/thue/blob/main/lakefile.lean\">https://github.com/madvorak/thue/blob/main/lakefile.lean</a></p>",
        "id": 401214223,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1699554918
    },
    {
        "content": "<p>I recommend you add <code>pp.proofs.withType false</code> to that list too</p>",
        "id": 401214859,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1699555181
    },
    {
        "content": "<blockquote>\n<p>This is probably the 3rd or 4th time I see this suggestion come up. </p>\n</blockquote>\n<p>I guess I missed the previous instances of that discussion. I can’t write five lines of lean without stumbling confusedly and then turning <code>autoImplicit off.</code>… so I am genuinely curious what the arguments for <code>autoImplicit</code> as a default are.</p>\n<p>(Or is this a contentious topic with flaring tempers best to avoid?)</p>",
        "id": 401218051,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1699556395
    },
    {
        "content": "<p>Previous discussions:</p>\n<ul>\n<li><a href=\"#narrow/stream/270676-lean4/topic/.60autoImplicit.20true.60.20is.20evil\">https://leanprover.zulipchat.com/#narrow/stream/270676-lean4/topic/.60autoImplicit.20true.60.20is.20evil</a></li>\n<li><a href=\"#narrow/stream/270676-lean4/topic/.5BRFC.5D.20Make.20autoImplicit.20default.20to.20false.20on.20non-greek\">https://leanprover.zulipchat.com/#narrow/stream/270676-lean4/topic/.5BRFC.5D.20Make.20autoImplicit.20default.20to.20false.20on.20non-greek</a></li>\n</ul>",
        "id": 401218697,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1699556564
    },
    {
        "content": "<ul>\n<li><a href=\"#narrow/stream/113488-general/topic/mathlib4.3A.20autoImplicit.20false.20by.20default.3F/near/384204178\">https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/mathlib4.3A.20autoImplicit.20false.20by.20default.3F/near/384204178</a>, where a vote happened</li>\n</ul>",
        "id": 401220358,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1699557213
    },
    {
        "content": "<p>We should do another voting, about setting <code>autoImplicit false</code> default <strong>for Lean</strong>.</p>",
        "id": 401220717,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1699557378
    },
    {
        "content": "<p>I'm not going to be the one to write the RFC</p>",
        "id": 401220796,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1699557425
    },
    {
        "content": "<p>(decisions in this space aren't made by a vote, they are made by convincing the devs)</p>",
        "id": 401220960,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1699557485
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"470149\">Joachim Breitner</span> <a href=\"#narrow/stream/113489-new-members/topic/Why.20does.20lean.20allow.20undeclared.20variables.20in.20hypotheses.3F/near/401218051\">said</a>:</p>\n<blockquote>\n<blockquote>\n<p>This is probably the 3rd or 4th time I see this suggestion come up. </p>\n</blockquote>\n<p>I guess I missed the previous instances of that discussion. I can’t write five lines of lean without stumbling confusedly and then turning <code>autoImplicit off.</code>… so I am genuinely curious what the arguments for <code>autoImplicit</code> as a default are.</p>\n<p>(Or is this a contentious topic with flaring tempers best to avoid?)</p>\n</blockquote>\n<p>I thought this issue was settled in favour of relaxed autoImplicit for mathlib (single char variables) and letting everyone have their settings for others.</p>",
        "id": 401221301,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1699557661
    },
    {
        "content": "<p>mathlib has no autoImplicits at all</p>",
        "id": 401221401,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1699557712
    },
    {
        "content": "<p>it was relaxed for a while but then there was another vote and now it's none</p>",
        "id": 401221495,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1699557740
    },
    {
        "content": "<p>Does keeping autoImplicit off remove Haskell/ML style type variable introduction?</p>",
        "id": 401221511,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1699557749
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113489-new-members/topic/Why.20does.20lean.20allow.20undeclared.20variables.20in.20hypotheses.3F/near/401221401\">said</a>:</p>\n<blockquote>\n<p>mathlib has no autoImplicits at all</p>\n</blockquote>\n<p>That's not quite true, it has to ask for them via <code>set_option</code>, but <em>is</em> allowed to do so</p>",
        "id": 401221513,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1699557751
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"466334\">@Shreyas Srinivas</span> yes</p>",
        "id": 401221549,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1699557769
    },
    {
        "content": "<p>Still relevant here is <a href=\"https://github.com/leanprover/lean4/pull/2456\">lean4#2456</a>, which is needed to fix an annoyance where turning off autoImplicit in mathlib also turns it off for Std when browsing in vscode</p>",
        "id": 401221604,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1699557795
    },
    {
        "content": "<p>IIRC I asked this once before and you said the same back then and that's why I voted in favour of keeping them</p>",
        "id": 401221636,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1699557809
    },
    {
        "content": "<p>The polls are really split on this matter, it's clear no choice of default or default default will settle the problem for good</p>",
        "id": 401221784,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1699557873
    },
    {
        "content": "<p>Has the following idea been already considered:  a new class of warnings called \"gentle warnings\" in the infoview which  that can be configured to be turned on or off in the vscode extension settings/lake settings. If turned on users are told about all the autoimplicit variables in their declaration and other such footguns.</p>",
        "id": 401222531,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1699558181
    },
    {
        "content": "<p>those are just regular warnings</p>",
        "id": 401224663,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1699559095
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"451983\">@Arthur Paulino</span> I like the idea of <code>autoImplicit false</code> being a warning rather than an error. (Or maybe another setting, <code>autoImplicit warn</code>?) There's already a hint of whether a variable is auto-implicit in the editor (it's a slighly different color), and having a per-project global option to make it noisier makes sense.</p>\n<p>This is more friendly than making it be a strict error, since at least you can still finish some definition/theorem and then deal with the warnings. Mathlib doesn't accept code with warnings, so it's like <code>autoImplicit false</code>.</p>\n<p>Unrelated, but I'm wondering, could there be a code action to add the implied implicit variables?</p>",
        "id": 401233510,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1699562753
    },
    {
        "content": "<p><strong>Mini-RFC:</strong> add a <code>autoImplicitWarn</code> option with a <code>Bool</code> value. When set to <code>true</code>, then whenever the auto-implicit feature is activated, it generates a warning message for the introduced variable. (If easy to implement:) The location of the warning is at the location of one of the occurrences of the auto-implicit. (If not:) The location of the warning is at the current syntax ref inside <code>withAutoBoundImplicit</code> (so commands can choose to at least have the warning appear at the <code>variable</code>, <code>theorem</code>, <code>def</code>, etc.)</p>\n<p>Hastily-written rationale: many users report finding <code>autoImplicit</code> to lead to confusing situations, and libraries such as mathlib have elected to turn auto-implicits off entirely. However, making auto-implicits be a hard error is stronger than necessary, since auto-implicits can also be viewed as a mechanism to allow elaboration to continue despite potential errors by the user -- similar to automatic <code>sorry</code> insertion. Allowing auto-implicits to function while raising the use of auto-implicits to warnings should give users some of the benefits of auto-implicits minus most of the confusion.</p>",
        "id": 401234390,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1699563174
    },
    {
        "content": "<p>suggestion: rename <code>autoImplicitWarn</code> to <code>linter.autoImplicit</code> with default value <code>false</code></p>",
        "id": 401236883,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1699563925
    },
    {
        "content": "<p>it is easy to make this appear at the first occurrence of the autoImplicit, as this is the current ref when processing the autoImplicit</p>",
        "id": 401237063,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1699563994
    },
    {
        "content": "<p>otherwise LGTM (but I'm still not volunteering to write the RFC <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span> )</p>",
        "id": 401237383,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1699564139
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"470149\">Joachim Breitner</span> <a href=\"#narrow/stream/113489-new-members/topic/Why.20does.20lean.20allow.20undeclared.20variables.20in.20hypotheses.3F/near/401218051\">said</a>:</p>\n<blockquote>\n<p>I guess I missed the previous instances of that discussion. I can’t write five lines of lean without stumbling confusedly and then turning <code>autoImplicit off.</code>… so I am genuinely curious what the arguments for <code>autoImplicit</code> as a default are.</p>\n</blockquote>\n<p>Did you try allowing only one-letter long auto-implicits? The should solve 99% of your confusion and still leave you the benefits.</p>",
        "id": 401237854,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1699564364
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113489-new-members/topic/Why.20does.20lean.20allow.20undeclared.20variables.20in.20hypotheses.3F/near/401237383\">said</a>:</p>\n<blockquote>\n<p>otherwise LGTM (but I'm still not volunteering to write the RFC <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span> )</p>\n</blockquote>\n<p>I'm happy to write the RFC at some point</p>",
        "id": 401238131,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1699564495
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/113489-new-members/topic/Why.20does.20lean.20allow.20undeclared.20variables.20in.20hypotheses.3F/near/401237854\">said</a>:</p>\n<blockquote>\n<p>Did you try allowing only one-letter long auto-implicits? The should solve 99% of your confusion and still leave you the benefits.</p>\n</blockquote>\n<p>No, whenever I hit this issue I'm already briefly frustrated and just slap the shorter <code>set_option</code> to the top of the file. I am aware that this variant exists and if that was the default, I'd probably stumble much less often.</p>\n<p>Also when back at the computer I have to verify the claim that implicit parameters have a different color. Maybe the colorscheme isn't great for certain color perceptions. <span aria-label=\"red square\" class=\"emoji emoji-1f7e5\" role=\"img\" title=\"red square\">:red_square:</span><span aria-label=\"green large square\" class=\"emoji emoji-1f7e9\" role=\"img\" title=\"green large square\">:green_large_square:</span><span aria-label=\"see no evil\" class=\"emoji emoji-1f648\" role=\"img\" title=\"see no evil\">:see_no_evil:</span></p>",
        "id": 401241125,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1699565917
    },
    {
        "content": "<p>Please read <a href=\"https://lean-lang.org/lean4/doc/semantic_highlighting.html\">https://lean-lang.org/lean4/doc/semantic_highlighting.html</a> about colors.</p>",
        "id": 401241779,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1699566245
    },
    {
        "content": "<p>I honestly don't see the issue with autoImplicit in your example <span class=\"user-mention\" data-user-id=\"565854\">@Nir Paz</span> . In your example the tactic state is:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">α</span><span class=\"bp\">✝</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">?</span><span class=\"n\">u.8</span>\n<span class=\"n\">s</span><span class=\"bp\">✝</span><span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"bp\">✝</span>\n<span class=\"n\">nonemp</span><span class=\"o\">:</span> <span class=\"n\">Set.Nonempty</span> <span class=\"n\">s</span><span class=\"bp\">✝</span>\n<span class=\"n\">s</span><span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">ℝ</span>\n<span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"n\">ℝ</span>\n<span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"n\">sSup</span> <span class=\"n\">s</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">True</span>\n</code></pre></div>",
        "id": 401242781,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1699566802
    },
    {
        "content": "<p>whereas in the example with the first and second hypothesis flipped ,it is :</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">s</span><span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">ℝ</span>\n<span class=\"n\">nonemp</span><span class=\"o\">:</span> <span class=\"n\">Set.Nonempty</span> <span class=\"n\">s</span>\n<span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"n\">ℝ</span>\n<span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"n\">sSup</span> <span class=\"n\">s</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">True</span>\n</code></pre></div>",
        "id": 401242870,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1699566842
    },
    {
        "content": "<p>There is a clear difference between the first and the second example that immediately tells me that lean has inserted another variable s\\dagger</p>",
        "id": 401242949,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1699566872
    },
    {
        "content": "<p>This is why I don't understand the fuss about autoImplicit. On the one hand, it solves  the hassle of manually adding type variables  in programming defs. In tactic mode, even when it kicks in, lean is very upfront about the fact that it is creating new variables in the infoview</p>",
        "id": 401243084,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1699566951
    },
    {
        "content": "<p>I guess if I'd known about this in the first place it would have been obvious, but as a beginner my eyes tend to skip daggers and I focused on the specific errors I got and went down a rabbit hole. It feels to me that this is one of those thing that end up frustrating new people in this way (there are many such things in lean) so I wanted to hear about the benefits, but I wasn't making a stand against it or anything</p>",
        "id": 401249047,
        "sender_full_name": "Nir Paz",
        "timestamp": 1699569877
    },
    {
        "content": "<p>That's fair. What I am saying is that this can be explained in one of the learning materials or documentation. These examples don't make the case that autoimplicit is some extremely evil feature, which is an implication that has come up in these discussions in the past.</p>",
        "id": 401249647,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1699570272
    }
]