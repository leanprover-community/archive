[
    {
        "content": "<p>I have a definition of <code>vector_space F V</code> that extends <code>has_zero V</code>.  I want to show that any subset of the vector space, where the subset itself is a vector space, contains zero.  But I think I'm struggling with the syntax.</p>\n<p>I'm using <code>set_like</code> so I can treat my subset as a type:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">subset_of_vector_space</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span>\n  <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">vector_space</span> <span class=\"n\">F</span> <span class=\"n\">V</span><span class=\"o\">]:=</span>\n<span class=\"o\">(</span><span class=\"n\">carrier</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">V</span><span class=\"o\">)</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">subset_of_vector_space</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">vector_space</span> <span class=\"n\">F</span> <span class=\"n\">V</span><span class=\"o\">]</span>\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">}</span>\n\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">set_like</span> <span class=\"o\">(</span><span class=\"n\">subset_of_vector_space</span> <span class=\"n\">F</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"n\">V</span> <span class=\"o\">:=</span>\n<span class=\"o\">⟨</span> <span class=\"n\">subset_of_vector_space.carrier</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">cases</span> <span class=\"n\">p</span><span class=\"bp\">;</span> <span class=\"n\">cases</span> <span class=\"n\">q</span><span class=\"bp\">;</span> <span class=\"n\">congr'</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">mem_carrier</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">subset_of_vector_space</span> <span class=\"n\">F</span> <span class=\"n\">V</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">v</span> <span class=\"bp\">∈</span> <span class=\"n\">p.carrier</span> <span class=\"bp\">↔</span> <span class=\"n\">v</span> <span class=\"bp\">∈</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">iff.rfl</span>\n\n<span class=\"kd\">@[ext]</span> <span class=\"kd\">theorem</span> <span class=\"n\">ext</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">subset_of_vector_space</span> <span class=\"n\">F</span> <span class=\"n\">V</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">v</span> <span class=\"bp\">∈</span> <span class=\"n\">p</span> <span class=\"bp\">↔</span> <span class=\"n\">v</span> <span class=\"bp\">∈</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"n\">q</span> <span class=\"o\">:=</span> <span class=\"n\">set_like.ext</span> <span class=\"n\">h</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">contains_zero</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">subset_of_vector_space</span> <span class=\"n\">F</span> <span class=\"n\">V</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">vector_space</span> <span class=\"n\">F</span> <span class=\"n\">p</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"bp\">∈</span> <span class=\"n\">p</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">subset_of_vector_space</span>\n</code></pre></div>\n<p>Neither <code>rw has_zero V</code> nor <code>use h.zero</code> work.  Should I be stating the theorem differently?  Am I missing a ↥ somewhere? How can I prove this?</p>",
        "id": 364098304,
        "sender_full_name": "Martin C. Martin",
        "timestamp": 1686080032
    },
    {
        "content": "<p>The problem is that you're providing a new vector space structure to <code>p</code>, completely unrelated to <code>V</code></p>",
        "id": 364099570,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1686080388
    },
    {
        "content": "<p>If you want a predicate saying that a subset is a subspace you have to define it by hand I think (meaning it's not in mathlib, not even in <code>deprecated</code>)</p>",
        "id": 364099896,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1686080480
    },
    {
        "content": "<blockquote>\n<p><code> vector_space F V</code> that extends <code>has_zero V</code></p>\n</blockquote>\n<p>This is a \"dangerous instance\", and won't actually work</p>",
        "id": 364104438,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1686081830
    },
    {
        "content": "<p>See <a href=\"https://arxiv.org/abs/2202.01629\">https://arxiv.org/abs/2202.01629</a> for a short explanation</p>",
        "id": 364104533,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1686081847
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113489-new-members/topic/Showing.20a.20subset.20that's.20a.20vector.20space.20contains.20zero/near/364104438\">said</a>:</p>\n<blockquote>\n<blockquote>\n<p><code> vector_space F V</code> that extends <code>has_zero V</code></p>\n</blockquote>\n<p>This is a \"dangerous instance\", and won't actually work</p>\n</blockquote>\n<p>Isn't this what mathlib does with groups?  For example: <a href=\"https://github.com/leanprover-community/mathlib/blob/36938f775671ff28bea1c0310f1608e4afbb22e0/src/algebra/group/defs.lean#L312\">https://github.com/leanprover-community/mathlib/blob/36938f775671ff28bea1c0310f1608e4afbb22e0/src/algebra/group/defs.lean#L312</a></p>",
        "id": 364107945,
        "sender_full_name": "Martin C. Martin",
        "timestamp": 1686082945
    },
    {
        "content": "<p>Yes, but that's not comparable. A group involves a single type. A vector space involves two: the additive group and the field of scalars. Your instance applies to the additive group for any (understand \"unknown to Lean\") field of scalars.</p>",
        "id": 364113227,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1686084782
    },
    {
        "content": "<p>Martin, to understand the problem, imagine it from Lean's perspective. The user gives you some type <code>V</code> and then later uses <code>0 : V</code>. In order for this to make sense, you (i.e., Lean) need to find a <code>has_zero V</code> instance. If you have one on hand, great, but what if you need to go hunting? You look around at what you have available, and you see that if you can find a <code>vector_space F V</code> instance on <code>V</code>, that will entail a <code>has_zero V</code> instance. But you weren't given <code>F</code> when the user specified <code>0 : V</code>. So which <code>F</code> should you pick? Well, you're Lean, so you go hunting forever trying to see whether <code>V</code> is a vector space over <em>any possible choice of <code>F</code></em>, which is generally doomed to failure (or at least an unimaginably long search). You may even give up and say, \"I have no idea how in the world to choose <code>F</code>\". This is the essence of the <em>dangerous instance</em> issue.</p>",
        "id": 364115421,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1686085607
    },
    {
        "content": "<p>Note how the instance <code>add_group V → has_zero V</code> does not exhibit the same problem (as Yaël mentioned) because there are no unspecified parameters.</p>",
        "id": 364115739,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1686085739
    },
    {
        "content": "<p>Ah got it, thanks!</p>",
        "id": 364116097,
        "sender_full_name": "Martin C. Martin",
        "timestamp": 1686085868
    },
    {
        "content": "<p>The fact that <code>module F V</code> doesn't directly specify the group structure on <code>V</code>, but kind of expects the user to provide that separately, means you don't have the problem there?</p>",
        "id": 364116598,
        "sender_full_name": "Martin C. Martin",
        "timestamp": 1686086074
    },
    {
        "content": "<p>I see that <code>module</code> doesn't <code>extends add_comm_monoid</code>, but rather has it in square brackets <code>[add_comm_monoid M]</code>.  Interesting, thanks.</p>",
        "id": 364330308,
        "sender_full_name": "Martin C. Martin",
        "timestamp": 1686154509
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"197836\">Jireh Loreaux</span> <a href=\"#narrow/stream/113489-new-members/topic/Showing.20a.20subset.20that's.20a.20vector.20space.20contains.20zero/near/364115421\">said</a>:</p>\n<blockquote>\n<p>Martin, to understand the problem, </p>\n</blockquote>\n<p>Thanks, it was very help to read this explanation, rather than skimming an 18 page short explanation.</p>",
        "id": 364331923,
        "sender_full_name": "Martin C. Martin",
        "timestamp": 1686154865
    },
    {
        "content": "<p>So I'm updating my <code>vector_space</code> definition to pull out <code>has_add</code>, <code>has_zero</code> and <code>has_neg</code>.  However, now any theorem about vector spaces, e.g. that the additive identity is unique, no longer has just <code>[vector_space F V]</code>, but rather <code>[has_add V] [has_zero V] [has_neg V] [vs : vector_space F V]</code>.  Is there a way to encapsulate all those into a single definition, so I don't need to repeat all 4 on every theorem?  Is this what <code>abbreviation</code> does?</p>",
        "id": 364338546,
        "sender_full_name": "Martin C. Martin",
        "timestamp": 1686156283
    },
    {
        "content": "<p>In mathlib3 you would just do <code>[add_comm_group V] [vector_space F V]</code>. In mathlib4 you can use the <code>variable!</code> command to avoid even <code>[add_comm_group V]</code>.</p>",
        "id": 364343353,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1686157300
    },
    {
        "content": "<p>Thanks Kevin.  Not wanting to bring in abstract algebra concepts, I defined my own class that extends those three, with nothing else.  However, now when I try to use a lemma, something fails:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.field.basic</span>\n\n\n<span class=\"kd\">@[ext]</span>\n<span class=\"kd\">class</span> <span class=\"n\">add_zero_neg</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">has_add</span> <span class=\"n\">V</span><span class=\"o\">,</span> <span class=\"n\">has_zero</span> <span class=\"n\">V</span><span class=\"o\">,</span> <span class=\"n\">has_neg</span> <span class=\"n\">V</span>\n\n<span class=\"kd\">@[ext]</span>\n<span class=\"kd\">class</span> <span class=\"n\">vector_space</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_zero_neg</span> <span class=\"n\">V</span><span class=\"o\">]</span>\n  <span class=\"kd\">extends</span> <span class=\"n\">has_smul</span> <span class=\"n\">F</span> <span class=\"n\">V</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">add_comm</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">,</span> <span class=\"n\">u</span> <span class=\"bp\">+</span> <span class=\"n\">v</span> <span class=\"bp\">=</span> <span class=\"n\">v</span> <span class=\"bp\">+</span> <span class=\"n\">u</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">add_assoc</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"bp\">+</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">w</span> <span class=\"bp\">=</span> <span class=\"n\">u</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"bp\">+</span> <span class=\"n\">w</span><span class=\"o\">))</span>\n<span class=\"o\">(</span><span class=\"n\">add_zero</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">,</span> <span class=\"n\">v</span> <span class=\"bp\">+</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"n\">v</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">add_right_inv</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">,</span> <span class=\"n\">v</span> <span class=\"bp\">+</span> <span class=\"bp\">-</span><span class=\"n\">v</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n<span class=\"c1\">-- Deleted all unused vector space axioms, to make a minimal example.</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">F</span><span class=\"o\">]</span>\n\n\n<span class=\"kn\">namespace</span> <span class=\"n\">vector_space</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">zero_add</span> <span class=\"o\">{</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_zero_neg</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">vs</span><span class=\"o\">:</span> <span class=\"n\">vector_space</span> <span class=\"n\">F</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"n\">v</span> <span class=\"bp\">=</span> <span class=\"n\">v</span> <span class=\"o\">:=</span>\n<span class=\"gr\">sorry</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">unique_add_inv</span> <span class=\"o\">{</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">add_zero_neg</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">vs</span> <span class=\"o\">:</span> <span class=\"n\">vector_space</span> <span class=\"n\">F</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">):</span>\n  <span class=\"n\">v</span> <span class=\"bp\">+</span> <span class=\"n\">w</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"n\">w</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span><span class=\"n\">v</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"k\">calc</span> <span class=\"n\">w</span> <span class=\"bp\">=</span> <span class=\"n\">w</span> <span class=\"bp\">+</span> <span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"n\">vs.add_zero</span>\n  <span class=\"bp\">...</span>    <span class=\"bp\">=</span> <span class=\"n\">w</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"bp\">+</span> <span class=\"bp\">-</span><span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">vs.add_right_inv</span>\n  <span class=\"bp\">...</span>    <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">w</span> <span class=\"bp\">+</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"bp\">-</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"n\">vs.add_assoc</span>\n  <span class=\"bp\">...</span>    <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"bp\">+</span> <span class=\"n\">w</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"bp\">-</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"n\">vs.add_comm</span> <span class=\"n\">w</span> <span class=\"n\">v</span>\n  <span class=\"bp\">...</span>    <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"bp\">-</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"n\">h</span>\n  <span class=\"bp\">...</span>    <span class=\"bp\">=</span> <span class=\"bp\">-</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"n\">zero_add</span> <span class=\"c1\">-- \"failed to synthesize type class instance for field ?m_1\"</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">vector_space</span>\n</code></pre></div>\n<p>If I make the field an explicit argument to zero_add, I get \"there are unsolved goals, vector_space F V\".  How can I proceed?</p>",
        "id": 364532817,
        "sender_full_name": "Martin C. Martin",
        "timestamp": 1686224747
    },
    {
        "content": "<p>The problem is that you are proving <code>zero_add</code> for vector spaces when it's a theorem about <code>add_comm_group</code>s, so Lean is having to find a field and it doesn't know where to look. If you insist on not developing the theory of <code>add_comm_group</code>s then you will have to make <code>F</code> an explicit input to <code>zero_add</code> (like it is to <code>vector_space</code>) and then <code>zero_add</code> will become usable.</p>",
        "id": 364534399,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1686225111
    },
    {
        "content": "<p>The easiest solution is just to add <code>zero_add</code> and <code>add_left_inv</code> as axioms for <code>vector_space</code>. By omitting them you are saying \"I will develop some of the theory of <code>add_comm_group</code> myself\" but you seem to be resistant to this.</p>",
        "id": 364534737,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1686225184
    },
    {
        "content": "<p>Thanks.  Making the <code>field</code> explicit didn't work, but making the <code>vector_space</code> explicit did work.  I guess I still think of <code>V</code> as the vector space, as we tend to do in math, and forget that the <code>vector_space</code> is a separate object in Lean.</p>\n<p>I'm trying to formalize  Linear Algebra Done Right, and want to stick as close as I can to its pedagogy.  It doesn't bring in the concept of group, presumably considering it an extra complication, so I'd like to keep thing simple in the same way, if possible.</p>\n<p>Note that there must be something else going on here than just \"can't find the <code>vector_space</code>\", since if I get rid of  my <code>add_zero_neg</code> class and explicitly list <code>[has_add V] [has_zero V] [has_neg V]</code> everywhere, everything works.  So it's something about collecting those three into their own class that's confusing it.</p>",
        "id": 364553144,
        "sender_full_name": "Martin C. Martin",
        "timestamp": 1686229052
    },
    {
        "content": "<blockquote>\n<p>It doesn't bring in the concept of group, presumably considering it an extra complication, so I'd like to keep thing simple in the same way, if possible.</p>\n</blockquote>\n<p>In that case I'd recommend two typeclasses, <code>vector_space_aux V</code> and <code>[field K] [vector_space_aux V] : vector_space K V</code>. You don't need to worry about the mathematical meaning of the second, but Lean is going to be annoying if you write lemmas about <code>vector_space K V</code> which have nothing to do with <code>K</code>.</p>",
        "id": 364558132,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1686230030
    },
    {
        "content": "<blockquote>\n<p>Note that there must be something else going on here </p>\n</blockquote>\n<p>Without a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> with your changes it's hard to help you diagnose</p>",
        "id": 364558449,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1686230104
    },
    {
        "content": "<p>Thanks Eric.  My code above is an <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>, does it not work in Lean 3 for you?</p>",
        "id": 364558775,
        "sender_full_name": "Martin C. Martin",
        "timestamp": 1686230159
    },
    {
        "content": "<p>Martin, my point is that you say in your message above that you tried a bunch of things that did and didn't work, but you didn't show the code for them; I think making <code>K</code> explicit would work, so my assumption is that you're not actually doing what I'm thinking of.</p>",
        "id": 364559281,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1686230273
    },
    {
        "content": "<p>Your earlier post is a great <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>, but it doesn't help once you start having problems with a modified version!</p>",
        "id": 364559577,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1686230334
    },
    {
        "content": "<p>This is wrong:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">F</span><span class=\"o\">]</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">vector_space</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">zero_add</span> <span class=\"o\">{</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_zero_neg</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">vs</span><span class=\"o\">:</span> <span class=\"n\">vector_space</span> <span class=\"n\">F</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"n\">v</span> <span class=\"bp\">=</span> <span class=\"n\">v</span> <span class=\"o\">:=</span>\n</code></pre></div>\n<p>You wrote <code>[field F]</code> twice, so this means \"let <code>F</code> have two unrelated field structures; two different <code>0</code>s, two different <code>+</code>s, etc\"</p>",
        "id": 364560007,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1686230414
    },
    {
        "content": "<p>Ah, thanks.  Let me see if I can recreate things, and give all variants as <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> s.</p>",
        "id": 364560564,
        "sender_full_name": "Martin C. Martin",
        "timestamp": 1686230532
    },
    {
        "content": "<p>Here's the answer to your problem anyway; to make it work you need <code>rw zero_add F (_ : V)</code> instead of <code>rw zero_add</code> (after making <code>F</code> and <code>v</code> explicit)</p>",
        "id": 364560730,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1686230570
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"348963\">Martin C. Martin</span> <a href=\"#narrow/stream/113489-new-members/topic/Showing.20a.20subset.20that's.20a.20vector.20space.20contains.20zero/near/364553144\">said</a>:</p>\n<blockquote>\n<p>I'm trying to formalize  Linear Algebra Done Right, and want to stick as close as I can to its pedagogy.</p>\n</blockquote>\n<p>I think Axler is great for giving motivating theory and building good intuition on the topic. But following a pedagogical style might not be easy because it might clash with the requirements of formalization. For example, consider the difficulty in formalizing the concept of dimension and existence of maximally linearly independent sets. I don't think, for Axler, diving into Zorn and AC is that critical.</p>\n<p>Another example is something that is very familiar from elementary school arithmetic - decimal notation for numbers. We write 1/3 = 0.666... or 0.66 bar, and that 0.99 bar is 1, but actually formalizing that decimal expansions represent the same real or rational, don't add anything to an understanding of addition.</p>",
        "id": 364566835,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1686231845
    },
    {
        "content": "<p>Martin, the main problem I see with your approach of eschewing mathlib is that you will end up developing an entire linear algebra library on your own, and if the mathlib community has spent years developing this library with lots of contributors, that means such a task is a <em>lot</em> of work. Moreover, if people learn from the library you build, their knowledge (of the formalized version in Lean) won't transfer that well to mathlib.</p>",
        "id": 364578192,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1686233937
    },
    {
        "content": "<p>Jireh, thanks for the insight.  The project is to cast the book Linear Algebra Done Right into Lean.  The goal is for those who are familiar with linear algebra from their undergraduate education, but not familiar with Lean, to see how something familiar to them would be cast in Lean.  Like a Rosetta stone.  A second goal is to discover any missing parts of mathlib that are needed to prove all the theorems in LADR.</p>\n<p>As such, the plan is to \"build it and throw away.\"  So once we've defined <code>vector_space</code> as a way to show how to build structures in mathlib, and prove some basic theorems such as the uniqueness of the inverse, we throw it away and use the built in mathlib <code>module</code>.  This is the technique followed in e.g. Theorem Proving In Lean and The Complex Numbers Game.</p>\n<p>I guess a third goal is for me to learn how all this stuff works, so I can contribute to mathlib some day.  :)</p>",
        "id": 364629917,
        "sender_full_name": "Martin C. Martin",
        "timestamp": 1686244352
    },
    {
        "content": "<p>So it seems the best tradeoff is to split <code>vector_space</code> into to classes and create an <code>add_comm_group</code> class, and put all the relevant <code>vector_space</code> axioms in there, leaving just the ones involving scalar multiplication in <code>vector_space</code>.  Like mathlib but unlike Axler.  The alternative is to make the <code>vector_space</code> argument to various theorems explicit, but that seems worse.</p>",
        "id": 364632426,
        "sender_full_name": "Martin C. Martin",
        "timestamp": 1686245012
    },
    {
        "content": "<p>There is pedagogical advantage to doing the split the mathlib way also: it forces students to confront the fact that a bunch of these axioms are only about <code>+, 0, -</code>! This is something I try to emphasize whenever I teach linear algebra, but they don't seem to strongly grasp; most of the time they just think of the axioms as a big list all lumped together and they have trouble remembering them.</p>",
        "id": 364633824,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1686245406
    },
    {
        "content": "<blockquote>\n<p>Like mathlib but unlike Axler.</p>\n</blockquote>\n<p>I would guess that Axler says nothing about <code>class</code>; so</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">vector_space.aux</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">has_add</span> <span class=\"n\">V</span><span class=\"o\">,</span> <span class=\"n\">has_neg</span> <span class=\"n\">V</span><span class=\"o\">,</span> <span class=\"n\">has_zero</span> <span class=\"n\">V</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">add_comm</span> <span class=\"o\">:</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"c1\">-- etc</span>\n<span class=\"kd\">class</span> <span class=\"n\">vector_space</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">vector_space.aux</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"kd\">extends</span> <span class=\"n\">has_smul</span> <span class=\"n\">K</span> <span class=\"n\">V</span> <span class=\"o\">:=</span>\n<span class=\"c1\">-- etc</span>\n</code></pre></div>\n<p>is not really any less accurate a translation than the one that uses <code>class</code> just once.</p>\n<p>Of course, it's mathematically more useful to call that <code>add_comm_group</code> rather than <code>vector_space.aux</code>, but if you really wanted to you could stick with the <code>aux</code> name and insist on not using mathematical words that are avoided by Axler.</p>",
        "id": 364650767,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1686250065
    },
    {
        "content": "<p>Thank you to everyone in this thread, the feedback has been very helpful.  Here's the <a href=\"https://github.com/martincmartin/linear_algebra_done_right/blob/master/src/chapter1/section1B.lean\">latest rendering</a> of <code>vector_space</code>, as defined in section 1.B of LADR.  Any other feedback, insights or improvements?</p>",
        "id": 364660301,
        "sender_full_name": "Martin C. Martin",
        "timestamp": 1686252779
    },
    {
        "content": "<p>Another approach would be to write a document that states all the theorems from Axler (more generally, your favourite elementary textbook), giving as proofs the appropriate invocations of mathlib lemmas, or short proofs in terms of mathlib lemmas if a single lemma isn't available. Presumably you'll find the occasional statement where you really need to work, and then those can be contributed back to mathlib.</p>\n<p>At the end you get a document that:</p>\n<ul>\n<li>is perhaps accessible to someone who knows that book but not mathlib</li>\n<li>perhaps is helpful to learning what is in mathlib and how to make use of it</li>\n<li>demonstrates that mathlib has sufficient coverage to formalise the book</li>\n</ul>\n<p>This approach, however, relies on a certain amount of pedagogical flexibility, because it will only really work if you use mathlib's definitions, and don't make any attempt to replace them with hand-rolled versions.</p>",
        "id": 365098675,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1686397832
    },
    {
        "content": "<p>I made some attempt at following this approach in the mathlib file <a href=\"https://github.com/leanprover-community/mathlib/blob/master/docs/tutorial/representation_theory/etingof.lean\">docs/tutorial/representation_theory/etingof.lean</a> (formalising Etingof's excellent <a href=\"https://klein.mit.edu/~etingof/repb.pdf\">book</a> on representation theory), although didn't get nearly as far as I'd hoped.</p>\n<p>(Partly because this was more advanced material, that mathlib doesn't have yet, so I was formalising as I went along, and partly because other priorities got in the way.)</p>",
        "id": 365099365,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1686397997
    },
    {
        "content": "<p>That's also what I've been doing with <a href=\"https://github.com/eric-wieser/lean-matrix-cookbook\">https://github.com/eric-wieser/lean-matrix-cookbook</a>; but if your goal is to demonstrate <em>how</em> to prove things, and not just that mathlib already knows the proof, it might not be as pedagogically useful</p>",
        "id": 365099614,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1686398053
    }
]