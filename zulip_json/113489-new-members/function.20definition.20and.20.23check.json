[
    {
        "content": "<p>I have defined a function g as follows:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">φ</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span>  <span class=\"bp\">→</span> <span class=\"kt\">Prop</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n<span class=\"kd\">def</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">φ</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">φ</span>\n</code></pre></div>\n<p>But #check g a φ gives the error message <br>\n\"g (sorryAx Type true)   (sorryAx Type true) : (sorryAx Type true → sorryAx Type true → Prop → Prop) → sorryAx Type true → Prop → Prop\".<br>\nHowever, #check g α β f a φ does work. But why should I give more arguments to g than the two in the definition of g?</p>",
        "id": 396729374,
        "sender_full_name": "Huub Vromen",
        "timestamp": 1697356894
    },
    {
        "content": "<p>because you wrote <code>variable (α β : Type)</code>, not <code>variable {α β : Type}</code></p>",
        "id": 396729457,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1697356954
    },
    {
        "content": "<p>You can edit your original post to use <a href=\"https://github.com/leanprover-community/mathlib/wiki/Code-in-backticks\">#backticks</a> to make it easier to read</p>",
        "id": 396729499,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1697356994
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 396731713,
        "sender_full_name": "Huub Vromen",
        "timestamp": 1697358918
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 396754605,
        "sender_full_name": "Huub Vromen",
        "timestamp": 1697376849
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 396758450,
        "sender_full_name": "Huub Vromen",
        "timestamp": 1697379900
    },
    {
        "content": "<p>Note that your \"solution\" means something else entirely: it's now generic over any <code>g</code> rather than referring to your <code>def g</code>. What's the error you get?</p>",
        "id": 396758506,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1697379951
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/113489-new-members/topic/function.20definition.20and.20.23check/near/396729457\">said</a>:</p>\n<blockquote>\n<p>because you wrote <code>variable (α β : Type)</code>, not <code>variable {α β : Type}</code></p>\n</blockquote>\n<p>Thank you! The definition of g now works fine. My next problem is that the definition of h1 gives an error message.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span>\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">φ</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span>  <span class=\"bp\">→</span> <span class=\"kt\">Prop</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span>\n<span class=\"kd\">def</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">φ</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">φ</span>\n<span class=\"kd\">def</span> <span class=\"n\">h1</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">φ</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ψ</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"n\">g</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">φ</span> <span class=\"bp\">→</span> <span class=\"n\">ψ</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>I can solve the problem by writing </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">h2</span> <span class=\"o\">{</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span> <span class=\"bp\">→</span>  <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">φ</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ψ</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"n\">g</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">φ</span> <span class=\"bp\">→</span> <span class=\"n\">ψ</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>But this gets cumbersome if I have to define another function that, for example, refers to f and g. Is there another way to solve the problem with h1?</p>",
        "id": 396758509,
        "sender_full_name": "Huub Vromen",
        "timestamp": 1697379955
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"307953\">Ruben Van de Velde</span> <a href=\"#narrow/stream/113489-new-members/topic/function.20definition.20and.20.23check/near/396758506\">said</a>:</p>\n<blockquote>\n<p>Note that your \"solution\" means something else entirely: it's now generic over any <code>g</code> rather than referring to your <code>def g</code>. What's the error you get?</p>\n</blockquote>\n<p>don't know how to synthesize implicit argument @g</p>",
        "id": 396758622,
        "sender_full_name": "Huub Vromen",
        "timestamp": 1697380052
    },
    {
        "content": "<p>So <code>g</code> takes an implicit argument <code>f</code> but there's no way for lean to know which <code>f</code> to use. You can write <code>g (f := f) a ...</code></p>",
        "id": 396758866,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1697380251
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"321254\">@Huub Vromen</span> I suggest you read about explicit and implicit inputs to functions in a standard source like <a href=\"https://leanprover.github.io/theorem_proving_in_lean4/\">#tpil</a> . It's covered very carefully in chapter 2.</p>",
        "id": 396760375,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1697381509
    }
]