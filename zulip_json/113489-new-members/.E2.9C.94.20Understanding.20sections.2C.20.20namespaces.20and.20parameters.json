[
    {
        "content": "<p>I'm having trouble understanding the rules in Lean 3 for when to supply parameters explicitly to a result that depends on them. Here's some example code that demonstrates my confusion:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">namespace</span> <span class=\"n\">veltkamp</span>\n<span class=\"kn\">section</span>\n\n  <span class=\"kd\">parameters</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">â„•</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s_pos</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">s</span><span class=\"o\">)</span>\n  <span class=\"kn\">include</span> <span class=\"n\">s_pos</span>\n\n  <span class=\"kd\">lemma</span> <span class=\"n\">important_result</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">&lt;</span> <span class=\"n\">s</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"n\">nat.succ_lt_succ</span> <span class=\"n\">s_pos</span>\n\n  <span class=\"k\">#check</span> <span class=\"bp\">@</span><span class=\"n\">important_result</span>\n  <span class=\"c\">/-</span>\n<span class=\"cm\">  important_result : 1 &lt; s + 1</span>\n<span class=\"cm\">  -/</span>\n\n  <span class=\"kd\">lemma</span> <span class=\"n\">derived_result</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">&lt;</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n    <span class=\"n\">refine</span> <span class=\"n\">nat.add_lt_add_right</span> <span class=\"n\">_</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n    <span class=\"c1\">-- exact important_result         -- expected this to work</span>\n    <span class=\"n\">exact</span> <span class=\"n\">important_result</span> <span class=\"n\">s</span> <span class=\"n\">s_pos</span>    <span class=\"c1\">-- but need this instead</span>\n    <span class=\"c1\">-- exact veltkamp.important_result   -- this works, too</span>\n  <span class=\"kd\">end</span>\n\n  <span class=\"c1\">-- no need for the extra parameters outside tactic mode</span>\n  <span class=\"kd\">lemma</span> <span class=\"n\">derived_result'</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">&lt;</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n    <span class=\"n\">nat.add_lt_add_right</span> <span class=\"n\">important_result</span> <span class=\"mi\">1</span>\n\n<span class=\"kd\">end</span>\n<span class=\"kd\">end</span> <span class=\"n\">veltkamp</span>\n</code></pre></div>\n<p>After defining <code>important_result</code>, what are the rules dictating when the parameters <code>s</code> and <code>s_pos</code> need to be supplied when using it?  From experimentation:</p>\n<ul>\n<li><code>#check important_result</code> doesn't show the parameters, neither does <code>#check @important_result</code></li>\n<li>Within the tactic-driven proof of <code>derived_result</code>, I _do_ need to provide <code>s</code> and <code>s_pos</code> explicitly.</li>\n<li>With the non-tactic driven proof of the same result (<code>derived_result'</code>), <code>s</code> and <code>s_pos</code> are supplied implicitly and must not be given explicitly</li>\n<li>If I remove the surrounding namespace, then the tactic-driven proof breaks, and now it seems the right thing to do is not to supply <code>s</code> and <code>s_pos</code>.</li>\n<li>Within the namespace, using the full-qualified name <code>veltkamp.important_result</code> means that <code>s</code> and <code>s_pos</code> are again supplied implicitly.</li>\n</ul>\n<p>I'm failing to discern what the underlying principle or rule is in the above. Can anyone give me some hints, or pointers to the relevant parts of the reference manual?</p>",
        "id": 349986754,
        "sender_full_name": "Mark Dickinson",
        "timestamp": 1681487348
    },
    {
        "content": "<p>The simple answer is: dont use <code>parameter</code>.</p>",
        "id": 349987163,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1681487469
    },
    {
        "content": "<p>At least in your example, it is very clear that you meant <code>variables</code> instead of <code>parameters</code>.</p>",
        "id": 349987353,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1681487522
    },
    {
        "content": "<p>Thanks. So in general, <code>parameter</code> should be avoided altogether? </p>\n<p>The example is of course unrealistic; it's cut down from a much larger piece of working code where <code>parameter</code> _did_ seem like the right thing. (It's a proof of correctness of floating-point Veltkamp splitting, and <code>s</code> was originally the number of bits being split from the float. So there's about a thousand lines of proof, and <code>s</code> stays fixed for all of them.)</p>",
        "id": 349987966,
        "sender_full_name": "Mark Dickinson",
        "timestamp": 1681487691
    },
    {
        "content": "<p>Here are two statistics to consider: mathlib currently has over a million lines of Lean 3 code and uses <code>parameter</code> or <code>parameters</code> less than 100 times.</p>",
        "id": 349988932,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1681487929
    },
    {
        "content": "<p>By comparison <code>variable</code> is used 18000 times.</p>",
        "id": 349989376,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1681488029
    },
    {
        "content": "<p><code>variable</code> it is, then! Thank you.</p>",
        "id": 349989637,
        "sender_full_name": "Mark Dickinson",
        "timestamp": 1681488094
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"133189\">Mark Dickinson</span> has marked this topic as resolved.</p>",
        "id": 349991256,
        "sender_full_name": "Notification Bot",
        "timestamp": 1681488468
    }
]