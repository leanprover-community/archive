[
    {
        "content": "<p>Hello Everyone,</p>\n<h1>What I am trying to do?</h1>\n<p>I am trying to formalize matrix identities that are related to eigenvalues. Two examples here are: Trace of a matrix is the sum of eigenvalues and determinant of matrix is product of eigenvalues.</p>\n<p>For Hermitian case I was able to make use of the <code>is_hermitian</code> lemmas to do most of the work. <a href=\"https://leanprover-community.github.io/mathlib_docs/find/matrix.is_hermitian.eigenvalues\">docs#matrix.is_hermitian.eigenvalues</a>. In the case of non-hermitian matrices there seems to be still a disconnect in mathlib. Eigenvalues are defined for Endomorphisms in <a href=\"https://leanprover-community.github.io/mathlib_docs/find/module.End.eigenvalues\">docs#module.End.eigenvalues</a>. These are defined in such a way that they would even work for infinite dimensions. But for finite matrices they may not be the best. One particular issue is the information about multiplicity is lost, which makes talking about Trace and Determinant identities more difficult.</p>\n<p>The plan I have in mind is as follows:</p>\n<ol>\n<li>Define eigenvalue multiplicity as the multiplicity of the root of the characteristic polynomial.</li>\n<li>Similar to <a href=\"https://leanprover-community.github.io/mathlib_docs/find/polynomial.exists_multiset_root\">docs#polynomial.exists_multiset_root</a> we define <code>exists_multiset_eigs</code> which says that there is a multiset of eigenvalues with the correct multiplicities.</li>\n<li>By <code>classical.some</code> we get a handle on one such set. This is defined as <code>eigs</code>.</li>\n<li>Show that every eigenvalue in the multiset is also satisfies <code>module.End.has_eigenvalue (matrix.to_lin' A) μ</code></li>\n<li>Show that the whole set of elements in <code>(eigenvalues.fintype (matrix.to_lin' A)).elems</code></li>\n</ol>\n<p>Then get to the proofs of <code>det_eq_prod_eigs</code> and <code>trace_eq_sum_eigs</code>. Before diving into this plan, I thought I would get some opinions on it.</p>\n<h1>Big Question</h1>\n<p>Does this plan sound reasonable? <br>\nIs it just completely wrong? <br>\nIf it is not just that bad <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span> , any suggestions on easier, simpler ways to do this?</p>\n<h1>Smaller Problems:</h1>\n<ol>\n<li>Cannot get <code>μ ∈ eigenvaluesA</code> to type check. The type of eigenvalues is <code>finset(eigenvalues ...)</code>. The full error message is</li>\n</ol>\n<blockquote>\n<p>failed to synthesize type class instance for<br>\nn : Type u_1,<br>\n_inst_1 : fintype n,<br>\n_inst_2 : decidable_eq n,<br>\n_inst_3 : nonempty n,<br>\nA : matrix n n ℂ,<br>\nμ : ℂ,<br>\neigenvaluesA : finset (eigenvalues (⇑to_lin' A)) := fintype.elems (eigenvalues (⇑to_lin' A))<br>\n⊢ has_mem ℂ (finset (eigenvalues (⇑to_lin' A)))</p>\n</blockquote>\n<p>This seems to make sense <code>ℂ</code> and <code>eigenvalues (⇑to_lin' A)</code> are not the same thing. But how do I convince lean to convert them. From docs <a href=\"https://leanprover-community.github.io/mathlib_docs/find/module.End.has_coe\">docs#module.End.has_coe</a>  should do some conversion, but I don't know how to use it.</p>\n<ol start=\"2\">\n<li>How would one show that the <code>nth - 1</code> coefficient is the sum of all the roots.</li>\n</ol>\n<p>The lean code I have so far is below</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">linear_algebra.matrix.spectrum</span>\n<span class=\"kn\">import</span> <span class=\"n\">linear_algebra.eigenspace</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.complex.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">linear_algebra.matrix.charpoly.coeff</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}[</span><span class=\"n\">fintype</span> <span class=\"n\">n</span><span class=\"o\">][</span><span class=\"n\">decidable_eq</span> <span class=\"n\">n</span><span class=\"o\">][</span><span class=\"n\">nonempty</span> <span class=\"n\">n</span><span class=\"o\">]</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">matrix</span> <span class=\"n\">polynomial</span>\n<span class=\"kn\">open</span> <span class=\"n\">module.End</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">classical</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">matrix</span> <span class=\"n\">big_operators</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">eig_multiplicity</span> <span class=\"o\">(</span><span class=\"n\">A</span><span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"n\">n</span> <span class=\"n\">n</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">μ</span><span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span>\n  <span class=\"n\">polynomial.root_multiplicity</span> <span class=\"n\">μ</span> <span class=\"o\">(</span><span class=\"n\">matrix.charpoly</span> <span class=\"n\">A</span><span class=\"o\">)</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">exists_multiset_eigs</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"n\">n</span> <span class=\"n\">n</span> <span class=\"n\">ℂ</span><span class=\"o\">}</span>  <span class=\"o\">(</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∃</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">multiset</span> <span class=\"n\">ℂ</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">s.card</span> <span class=\"o\">:</span> <span class=\"n\">with_bot</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"n\">fintype.card</span> <span class=\"n\">n</span> <span class=\"bp\">∧</span> <span class=\"bp\">∀</span> <span class=\"n\">μ</span><span class=\"o\">,</span> <span class=\"n\">s.count</span> <span class=\"n\">μ</span> <span class=\"bp\">=</span> <span class=\"n\">eig_multiplicity</span> <span class=\"n\">A</span> <span class=\"n\">μ</span>\n  <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">eig_multiplicity</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">p_nz</span> <span class=\"o\">:</span> <span class=\"n\">matrix.charpoly</span> <span class=\"n\">A</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"o\">{</span>\n    <span class=\"n\">by_contra</span><span class=\"o\">,</span> <span class=\"n\">replace</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"n\">congr_arg</span> <span class=\"n\">nat_degree</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">nat_degree_zero</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">p_deg</span> <span class=\"o\">:=</span> <span class=\"n\">matrix.charpoly_nat_degree_eq_dim</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"n\">p_deg</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">hn</span><span class=\"o\">:</span> <span class=\"n\">fintype.card</span> <span class=\"n\">n</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"o\">{</span><span class=\"n\">exact</span> <span class=\"n\">fintype.card_ne_zero</span><span class=\"o\">,},</span>\n    <span class=\"n\">exact</span> <span class=\"n\">hn</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"o\">},</span>\n  <span class=\"k\">have</span> <span class=\"n\">Adeg</span> <span class=\"o\">:=</span> <span class=\"n\">matrix.charpoly_degree_eq_dim</span> <span class=\"n\">A</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">zeta</span> <span class=\"o\">:=</span> <span class=\"n\">exists_multiset_roots</span> <span class=\"n\">p_nz</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">Adeg</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">zeta</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">eigs</span> <span class=\"o\">(</span><span class=\"n\">A</span><span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"n\">n</span> <span class=\"n\">n</span> <span class=\"n\">ℂ</span><span class=\"o\">):</span> <span class=\"n\">multiset</span> <span class=\"n\">ℂ</span> <span class=\"o\">:=</span>\n  <span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>  <span class=\"k\">then</span> <span class=\"bp\">∅</span>\n  <span class=\"k\">else</span> <span class=\"n\">classical.some</span> <span class=\"o\">(</span><span class=\"n\">exists_multiset_eigs</span> <span class=\"n\">h</span><span class=\"o\">)</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">eig_is_eigenvalue</span> <span class=\"o\">(</span><span class=\"n\">A</span><span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"n\">n</span> <span class=\"n\">n</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">μ</span><span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">μ</span> <span class=\"bp\">∈</span> <span class=\"n\">eigs</span> <span class=\"n\">A</span> <span class=\"bp\">↔</span>  <span class=\"n\">module.End.has_eigenvalue</span> <span class=\"o\">(</span><span class=\"n\">matrix.to_lin'</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"n\">μ</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">eigs_are_eigenvalues</span> <span class=\"o\">(</span><span class=\"n\">A</span><span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"n\">n</span> <span class=\"n\">n</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span><span class=\"o\">(</span><span class=\"n\">μ</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">),</span>\n  <span class=\"k\">let</span> <span class=\"n\">eigenvaluesA</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">eigenvalues.fintype</span> <span class=\"o\">(</span><span class=\"n\">matrix.to_lin'</span> <span class=\"n\">A</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">elems</span> <span class=\"k\">in</span>\n  <span class=\"n\">μ</span> <span class=\"bp\">∈</span> <span class=\"n\">eigenvaluesA</span> <span class=\"bp\">↔</span> <span class=\"n\">μ</span> <span class=\"bp\">∈</span> <span class=\"n\">eigs</span> <span class=\"n\">A</span>  <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"c\">/-</span><span class=\"cm\">Useful Lemmas -/</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">det_eq_prod_eigs</span> <span class=\"o\">(</span><span class=\"n\">A</span><span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"n\">n</span> <span class=\"n\">n</span> <span class=\"n\">ℂ</span><span class=\"o\">):</span> <span class=\"n\">A.det</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">eigs</span> <span class=\"n\">A</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">prod</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">trace_eq_sum_eigs</span> <span class=\"o\">(</span><span class=\"n\">A</span><span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"n\">n</span> <span class=\"n\">n</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">hn</span><span class=\"o\">:</span> <span class=\"n\">nonempty</span> <span class=\"n\">n</span><span class=\"o\">}:</span> <span class=\"n\">A.trace</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">eigs</span> <span class=\"n\">A</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">sum</span> <span class=\"o\">:=</span> <span class=\"c1\">--sorry</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">hAz</span><span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"n\">hAz</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"n\">trace_zero</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"n\">eigs</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">multiset.empty_eq_zero</span><span class=\"o\">,</span> <span class=\"n\">dif_pos</span><span class=\"o\">,</span> <span class=\"n\">multiset.sum_zero</span><span class=\"o\">],</span>\n\n  <span class=\"c1\">-- A ≠ 0 Case</span>\n  <span class=\"n\">rw</span> <span class=\"n\">trace_eq_neg_charpoly_coeff</span> <span class=\"n\">A</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- have:</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 358301987,
        "sender_full_name": "MohanadAhmed",
        "timestamp": 1684088645
    },
    {
        "content": "<p>In the finite rank case the natural definition would be the multiset of eigenvalues of an endomorphism, defined as the multiset of roots of the char poly, which would make sense if the base ring is an integral domain. You don't necessarily need to carry around the multiplicities, you can just sum over the multiset.</p>",
        "id": 358307242,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1684090983
    },
    {
        "content": "<p>Do you mean something like in this line:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">trace_eq_sum_eigs</span> <span class=\"o\">(</span><span class=\"n\">A</span><span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"n\">n</span> <span class=\"n\">n</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">hn</span><span class=\"o\">:</span> <span class=\"n\">nonempty</span> <span class=\"n\">n</span><span class=\"o\">}:</span> <span class=\"n\">A.trace</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">eigs</span> <span class=\"n\">A</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">sum</span>\n</code></pre></div>\n<ul>\n<li>If what I understand is correct the multiset carries the multiplicities around, hence when it is constructed, we need to provide that piece of information right?</li>\n</ul>",
        "id": 358309330,
        "sender_full_name": "MohanadAhmed",
        "timestamp": 1684091932
    },
    {
        "content": "<p>Yes sorry! I glanced at your code but didn't grok that you were doing exactly what I had in mind already! Sorry.</p>",
        "id": 358314844,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1684094949
    },
    {
        "content": "<p>You shouldn't need <code>nonempty n</code> and you shouldn't need to work over the complexes (the theorem is true in characteristic p for example, it's pure algebra not analysis)</p>",
        "id": 358314962,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1684095015
    },
    {
        "content": "<p>I don't really see why you're not just using the multiset of roots of the polynomial rather than using the axiom of choice in this artificial way</p>",
        "id": 358315024,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1684095070
    },
    {
        "content": "<p>Do we not have the multiset of roots of a polynomial? (Guessing <a href=\"https://leanprover-community.github.io/mathlib_docs/find/polynomial.roots\">docs#polynomial.roots</a>)</p>",
        "id": 358315089,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1684095111
    },
    {
        "content": "<p>Yeah it's there already, you don't have to make it again</p>",
        "id": 358315175,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1684095146
    },
    {
        "content": "<p>And it correctly has just the assumption that R is an integral domain. Just apply that to the char poly.</p>",
        "id": 358315253,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1684095205
    },
    {
        "content": "<p>Furthermore I'd suggest that you don't work with matrices but instead focus on endomorphisms of finite rank modules for as long as possible. There is absolutely no need to pick a basis here.</p>",
        "id": 358315352,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1684095287
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/linear_map.charpoly\">docs#linear_map.charpoly</a> should be the generality (plus R an integral domain so that you can take the multiset of roots)</p>",
        "id": 358315688,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1684095490
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/Eigenvalues.20of.20matrices.3A.20Trace.20Determinants.20and.20others/near/358315352\">said</a>:</p>\n<blockquote>\n<p>Furthermore I'd suggest that you don't work with matrices but instead focus on endomorphisms of finite rank modules for as long as possible. There is absolutely no need to pick a basis here.</p>\n</blockquote>\n<p>Though note that both trace and determinant are defined on endomorphisms via matrices, so it might be marginally easier to prove results about those on matrices first</p>",
        "id": 358319633,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684098207
    },
    {
        "content": "<blockquote>\n<p>Cannot get <code>μ ∈ eigenvaluesA</code> to type check. The type of eigenvalues is <code>finset(eigenvalues ...)</code>.</p>\n</blockquote>\n<p>You need to use <code>μ ∈ eigenvaluesA.image coe</code>, which converts the RHS into <code>finset complex</code></p>",
        "id": 358323965,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684101732
    },
    {
        "content": "<p>For now it seems lean is convinced that the trace is the sum of eigenvalues and determinant is the product of eigenvalues. However I still did not link the eigenvalues defined as roots of charpoly to the eigenvalues as defined in mathlib (which is the root of the minpoly). I am struggling with proving that the root of a characteristic polynomial is also the root of a minimal polymial. Any help or pointers to what lemmas in mathlib to use appreciated.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">linear_algebra.matrix.spectrum</span>\n<span class=\"kn\">import</span> <span class=\"n\">linear_algebra.eigenspace</span>\n<span class=\"kn\">import</span> <span class=\"n\">linear_algebra.charpoly.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">linear_algebra.matrix.charpoly.coeff</span>\n<span class=\"kn\">import</span> <span class=\"n\">linear_algebra.charpoly.to_matrix</span>\n<span class=\"kn\">import</span> <span class=\"n\">linear_algebra.matrix.charpoly.minpoly</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.complex.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">analysis.complex.polynomial</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}[</span><span class=\"n\">fintype</span> <span class=\"n\">n</span><span class=\"o\">][</span><span class=\"n\">decidable_eq</span> <span class=\"n\">n</span><span class=\"o\">][</span><span class=\"n\">nonempty</span> <span class=\"n\">n</span><span class=\"o\">]</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">R</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}[</span><span class=\"n\">field</span> <span class=\"n\">R</span><span class=\"o\">][</span><span class=\"n\">is_alg_closed</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">matrix</span> <span class=\"n\">polynomial</span>\n<span class=\"kn\">open</span> <span class=\"n\">linear_map</span> <span class=\"n\">module.End</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">matrix</span> <span class=\"n\">big_operators</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">eigs</span> <span class=\"o\">(</span><span class=\"n\">A</span><span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"n\">n</span> <span class=\"n\">n</span> <span class=\"n\">R</span><span class=\"o\">):</span> <span class=\"n\">multiset</span> <span class=\"n\">R</span> <span class=\"o\">:=</span>\n  <span class=\"n\">polynomial.roots</span> <span class=\"o\">(</span><span class=\"n\">matrix.charpoly</span> <span class=\"n\">A</span><span class=\"o\">)</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">is_root_minpoly_iff_is_root_charpoly</span> <span class=\"o\">(</span><span class=\"n\">A</span><span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"n\">n</span> <span class=\"n\">n</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">μ</span><span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">is_root</span> <span class=\"o\">(</span><span class=\"n\">matrix.charpoly</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"n\">μ</span> <span class=\"bp\">↔</span> <span class=\"n\">is_root</span> <span class=\"o\">(</span><span class=\"n\">minpoly</span> <span class=\"n\">ℂ</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"n\">μ</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">set</span> <span class=\"n\">mp</span> <span class=\"o\">:=</span> <span class=\"n\">minpoly</span> <span class=\"n\">ℂ</span> <span class=\"n\">A</span><span class=\"o\">,</span>\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span> <span class=\"c1\">-- HERE is where I am out of attempts!!!</span>\n\n  <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">is_root.dvd</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">matrix.minpoly_dvd_charpoly</span> <span class=\"n\">A</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n\n<span class=\"kd\">lemma</span> <span class=\"n\">det_eq_prod_eigs</span> <span class=\"o\">(</span><span class=\"n\">A</span><span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"n\">n</span> <span class=\"n\">n</span> <span class=\"n\">R</span><span class=\"o\">):</span>\n  <span class=\"n\">A.det</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">eigs</span> <span class=\"n\">A</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">prod</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">eigs</span><span class=\"o\">,</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">hn</span><span class=\"o\">:</span> <span class=\"n\">nonempty</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"o\">{</span>\n    <span class=\"n\">rw</span> <span class=\"n\">det_eq_sign_charpoly_coeff</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">hdeg</span> <span class=\"o\">:=</span> <span class=\"n\">charpoly_nat_degree_eq_dim</span> <span class=\"n\">A</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">hdeg</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">polynomial.prod_roots_eq_coeff_zero_of_monic_of_split</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">mul_assoc</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">pow_two</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">pow_mul</span><span class=\"o\">,</span>\n    <span class=\"n\">by_cases</span> <span class=\"n\">h2</span><span class=\"o\">:</span> <span class=\"n\">ring_char</span> <span class=\"n\">R</span> <span class=\"bp\">≠</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"o\">{</span>\n      <span class=\"k\">have</span> <span class=\"n\">hstupid</span><span class=\"o\">:</span> <span class=\"bp\">-</span><span class=\"mi\">1</span> <span class=\"bp\">≠</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"n\">R</span><span class=\"o\">),</span>\n        <span class=\"o\">{</span><span class=\"n\">exact</span> <span class=\"n\">ring.neg_one_ne_one_of_char_ne_two</span> <span class=\"n\">h2</span><span class=\"o\">,},</span>\n      <span class=\"k\">have</span> <span class=\"n\">hs2</span> <span class=\"o\">:</span> <span class=\"n\">even</span><span class=\"o\">(</span><span class=\"n\">A.charpoly.nat_degree</span><span class=\"bp\">*</span><span class=\"mi\">2</span><span class=\"o\">),</span>\n        <span class=\"o\">{</span><span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">even.mul_left</span><span class=\"o\">,</span> <span class=\"n\">even_two</span><span class=\"o\">],},</span>\n        <span class=\"n\">rw</span> <span class=\"o\">(</span><span class=\"n\">neg_one_pow_eq_one_iff_even</span> <span class=\"n\">hstupid</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"n\">hs2</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"n\">one_mul</span><span class=\"o\">,</span>\n    <span class=\"o\">},{</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">ne.def</span><span class=\"o\">,</span> <span class=\"n\">not_not</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h2</span><span class=\"o\">,</span>\n      <span class=\"n\">rw</span> <span class=\"n\">neg_one_eq_one_iff.2</span> <span class=\"n\">h2</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"n\">one_pow</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"n\">one_mul</span><span class=\"o\">,</span>\n    <span class=\"o\">},</span>\n    <span class=\"n\">apply</span> <span class=\"n\">matrix.charpoly_monic</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">is_alg_closed.splits</span> <span class=\"n\">A.charpoly</span><span class=\"o\">,</span>\n  <span class=\"o\">},</span> <span class=\"o\">{</span>\n    <span class=\"n\">rw</span> <span class=\"n\">not_nonempty_iff</span> <span class=\"n\">at</span> <span class=\"n\">hn</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">matrix.charpoly</span><span class=\"o\">,</span>\n    <span class=\"n\">repeat</span> <span class=\"o\">{</span><span class=\"n\">rw</span> <span class=\"n\">det_eq_one_of_card_eq_zero</span> <span class=\"o\">(</span><span class=\"n\">fintype.card_eq_zero_iff.2</span> <span class=\"n\">hn</span><span class=\"o\">)},</span>\n    <span class=\"n\">rw</span> <span class=\"n\">polynomial.roots_one</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">multiset.empty_eq_zero</span><span class=\"o\">,</span> <span class=\"n\">multiset.prod_zero</span><span class=\"o\">],</span>\n  <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">trace_eq_sum_eigs</span> <span class=\"o\">(</span><span class=\"n\">A</span><span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"n\">n</span> <span class=\"n\">n</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">A.trace</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">eigs</span> <span class=\"n\">A</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">sum</span> <span class=\"o\">:=</span> <span class=\"c1\">--sorry</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">eigs</span><span class=\"o\">,</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">hn</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">nonempty</span> <span class=\"n\">n</span><span class=\"o\">),</span> <span class=\"o\">{</span>\n    <span class=\"n\">apply_fun</span> <span class=\"o\">(</span><span class=\"n\">has_neg.neg</span><span class=\"o\">),</span>\n    <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">polynomial.sum_roots_eq_next_coeff_of_monic_of_split</span> <span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">trace_eq_neg_charpoly_coeff</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"n\">next_coeff</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">neg_neg</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"n\">charpoly_nat_degree_eq_dim</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">fn</span><span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">fintype.card</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">apply</span> <span class=\"o\">(</span><span class=\"n\">fintype.card_pos</span><span class=\"o\">),</span>\n    <span class=\"k\">have</span> <span class=\"n\">fne</span> <span class=\"o\">:=</span> <span class=\"n\">ne_of_lt</span> <span class=\"n\">fn</span><span class=\"o\">,</span>\n    <span class=\"n\">symmetry'</span> <span class=\"n\">at</span> <span class=\"n\">fne</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"n\">ne.def</span> <span class=\"n\">at</span> <span class=\"n\">fne</span><span class=\"o\">,</span>\n    <span class=\"n\">split_ifs</span><span class=\"o\">,</span> <span class=\"n\">refl</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">matrix.charpoly_monic</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">is_alg_closed.splits</span> <span class=\"n\">A.charpoly</span><span class=\"o\">,</span>\n    <span class=\"n\">rintros</span> <span class=\"n\">a</span> <span class=\"n\">x</span> <span class=\"n\">hax</span><span class=\"o\">,</span> <span class=\"n\">rwa</span> <span class=\"n\">neg_inj</span> <span class=\"n\">at</span> <span class=\"n\">hax</span><span class=\"o\">,</span>\n  <span class=\"o\">},</span> <span class=\"o\">{</span>\n    <span class=\"n\">rw</span> <span class=\"n\">not_nonempty_iff</span> <span class=\"n\">at</span> <span class=\"n\">hn</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">matrix.trace</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">fintype.sum_empty</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">rotate</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">hn</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">matrix.charpoly</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">det_eq_one_of_card_eq_zero</span> <span class=\"o\">(</span><span class=\"n\">fintype.card_eq_zero_iff.2</span> <span class=\"n\">hn</span><span class=\"o\">),</span>\n    <span class=\"n\">rw</span> <span class=\"n\">polynomial.roots_one</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">multiset.empty_eq_zero</span><span class=\"o\">,</span> <span class=\"n\">multiset.sum_zero</span><span class=\"o\">],</span>\n  <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 358500784,
        "sender_full_name": "MohanadAhmed",
        "timestamp": 1684165973
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/module.End.is_root_of_has_eigenvalue\">docs#module.End.is_root_of_has_eigenvalue</a></p>",
        "id": 358504728,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1684166768
    },
    {
        "content": "<p>Maybe not actually helpful, since I couldn't find API for the connection between eigenvalues and roots of the characteristic polynomial</p>",
        "id": 358506005,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1684167052
    },
    {
        "content": "<p>Hello <span class=\"user-mention\" data-user-id=\"325367\">@Mauricio Collares</span> . <br>\nThe link I am missing is between the roots of characteristic polynomial and the minimal polynomial. I can show that a root of the minimal polynomial is a root of the characeristic polynomial, using <a href=\"https://leanprover-community.github.io/mathlib_docs/find/is_root.dvd\">docs#is_root.dvd</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/matrix.minpoly_dvd_charpoly\">docs#matrix.minpoly_dvd_charpoly</a>. However I cannot go back. If I know the root of the characteristic I am not able to prove that it is the root of the minimal</p>\n<p>Perhaps to make it clearer here is a diagram of where I am missing<br>\n<a href=\"/user_uploads/3121/1WzXOwSTlCUhC_j7xtyeKzxA/Picture1.png\">Picture1.png</a><br>\neigs &lt;---&gt; charpoly.roots    ?????  minpoly.roots &lt;------&gt;  has_eigenvalue</p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/1WzXOwSTlCUhC_j7xtyeKzxA/Picture1.png\" title=\"Picture1.png\"><img src=\"/user_uploads/3121/1WzXOwSTlCUhC_j7xtyeKzxA/Picture1.png\"></a></div>",
        "id": 358509051,
        "sender_full_name": "MohanadAhmed",
        "timestamp": 1684167726
    },
    {
        "content": "<p>The red arrow is the one I am missing</p>",
        "id": 358509139,
        "sender_full_name": "MohanadAhmed",
        "timestamp": 1684167746
    },
    {
        "content": "<p><a href=\"https://math.stackexchange.com/a/262341/1896\">This post</a> and <a href=\"https://math.stackexchange.com/q/101275/1896\">this one</a> may be of interest</p>",
        "id": 358513935,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684168761
    }
]