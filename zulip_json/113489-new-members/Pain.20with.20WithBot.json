[
    {
        "content": "<p>I have the following code, which works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">progression</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">δ</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">List</span> <span class=\"n\">ℝ</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">[</span><span class=\"n\">a</span><span class=\"o\">]</span>\n<span class=\"bp\">|</span> <span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">a</span> <span class=\"o\">::</span> <span class=\"n\">progression</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">δ</span><span class=\"o\">)</span> <span class=\"n\">δ</span> <span class=\"n\">n</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">maximum_progression</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">δ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">progression</span> <span class=\"n\">a</span> <span class=\"n\">δ</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">maximum</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"n\">δ</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">induction</span> <span class=\"n\">n</span> <span class=\"n\">generalizing</span> <span class=\"n\">a</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">progression</span><span class=\"o\">]</span>\n  <span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"n\">n</span> <span class=\"n\">ih</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">progression</span><span class=\"o\">,</span> <span class=\"n\">List.maximum_cons</span><span class=\"o\">,</span> <span class=\"n\">ih</span><span class=\"o\">,</span> <span class=\"n\">Nat.cast_succ</span><span class=\"o\">]</span>\n    <span class=\"k\">have</span> <span class=\"n\">e1</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">WithBot</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">((</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">norm_cast</span>\n    <span class=\"k\">have</span> <span class=\"n\">e2</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">WithBot</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">norm_cast</span>\n    <span class=\"k\">have</span> <span class=\"n\">e3</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">n.cast_nonneg</span>\n    <span class=\"n\">convert</span> <span class=\"n\">max_eq_right</span> <span class=\"bp\">?</span><span class=\"n\">_</span> <span class=\"n\">using</span> <span class=\"mi\">1</span>\n    <span class=\"bp\">·</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">e1</span><span class=\"o\">,</span> <span class=\"n\">e2</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">WithBot.coe_mul</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">WithBot.coe_add</span><span class=\"o\">,</span> <span class=\"n\">WithBot.coe_eq_coe</span><span class=\"o\">]</span>\n      <span class=\"n\">ring</span>\n    <span class=\"bp\">·</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">e1</span><span class=\"o\">,</span> <span class=\"n\">e2</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">WithBot.coe_mul</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">WithBot.coe_add</span><span class=\"o\">,</span> <span class=\"n\">WithBot.coe_le_coe</span><span class=\"o\">]</span>\n      <span class=\"n\">nlinarith</span> <span class=\"o\">[</span><span class=\"n\">e3</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>However, most of it is wrangling with <code>WithBot.coe</code> and convincing lean that everything is happening in the reals where it is obvious. Somehow I get the feeling that <code>norm_cast</code> is pushing in the wrong direction when I try to use it instead of applying <code>coe_add</code> and <code>coe_mul</code> backwards by hand. What am I doing wrong?</p>",
        "id": 390743180,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1694617245
    },
    {
        "content": "<p>This isn't exactly an answer to your question, but here are my initial thoughts.</p>\n<ol>\n<li>I probably would have defined <code>progression</code> as:</li>\n</ol>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">progression</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">δ</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span> <span class=\"n\">List.range</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">|&gt;.</span><span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"o\">((</span><span class=\"bp\">↑</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">·</span> <span class=\"bp\">*</span> <span class=\"n\">δ</span><span class=\"o\">)</span>\n</code></pre></div>\n<ol start=\"2\">\n<li>Then I would want to apply two library lemmas, but I don't think either of them exists currently. My suggestion: prove the following lemmas and use them to prove the result with the definition I gave of <code>progression</code> above.</li>\n</ol>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">List.maximum_range_succ</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">List.range</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">|&gt;.</span><span class=\"n\">maximum</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">List.maximum_map</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Preorder</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Preorder</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">DecidableRel</span> <span class=\"o\">((</span><span class=\"bp\">·</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"bp\">·</span><span class=\"o\">)]</span>\n    <span class=\"o\">[</span><span class=\"n\">DecidableRel</span> <span class=\"o\">((</span><span class=\"bp\">·</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"bp\">·</span><span class=\"o\">)]</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">Monotone</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"n\">l.map</span> <span class=\"n\">f</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">maximum</span> <span class=\"bp\">=</span> <span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">f</span> <span class=\"n\">l.maximum</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 390772949,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1694627411
    },
    {
        "content": "<p>As an attempt to rewrite your proof slightly, I might  do something like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">maximum_progression</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">δ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">progression</span> <span class=\"n\">a</span> <span class=\"n\">δ</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">maximum</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"n\">δ</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">induction</span> <span class=\"n\">n</span> <span class=\"n\">generalizing</span> <span class=\"n\">a</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">progression</span><span class=\"o\">]</span>\n  <span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"n\">n</span> <span class=\"n\">ih</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">progression</span><span class=\"o\">,</span> <span class=\"n\">List.maximum_cons</span><span class=\"o\">,</span> <span class=\"n\">ih</span><span class=\"o\">,</span> <span class=\"n\">Nat.cast_succ</span><span class=\"o\">]</span>\n    <span class=\"n\">convert</span> <span class=\"n\">max_eq_right</span> <span class=\"bp\">?</span><span class=\"n\">_</span> <span class=\"n\">using</span> <span class=\"mi\">1</span>\n    <span class=\"bp\">·</span> <span class=\"n\">congr</span> <span class=\"mi\">1</span><span class=\"bp\">;</span> <span class=\"n\">push_cast</span><span class=\"bp\">;</span> <span class=\"n\">ring</span>\n    <span class=\"bp\">·</span> <span class=\"n\">norm_cast</span><span class=\"bp\">;</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">add_assoc</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">add_zero</span> <span class=\"n\">a</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm.trans_le</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">gcongr</span><span class=\"bp\">;</span> <span class=\"n\">positivity</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>Note that it would have been nice if the last line could have been <code>norm_cast; rw [add_assoc]; gcongr</code>; I'm not sure why it needed <code>positivity</code>, but I think I know why it needed the <code>add_zero</code> bit.</p>",
        "id": 390776403,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1694628528
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"260507\">@Heather Macbeth</span> (a) do you know why <code>gcongr</code> didn't automatically use <code>positivity</code> above? (b) I guess there's no way to make <code>le_add_of_nonneg_right</code> into a <code>gcongr</code> lemma because there is no head symbol (besides <code>a</code>) on the left-hand side? <span aria-label=\"sad\" class=\"emoji emoji-2639\" role=\"img\" title=\"sad\">:sad:</span></p>",
        "id": 390776663,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1694628608
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"197836\">Jireh Loreaux</span> <a href=\"#narrow/stream/113489-new-members/topic/Pain.20with.20WithBot/near/390776663\">said</a>:</p>\n<blockquote>\n<p>(b) I guess there's no way to make <code>le_add_of_nonneg_right</code> into a <code>gcongr</code> lemma because there is no head symbol (besides <code>a</code>) on the left-hand side? <span aria-label=\"sad\" class=\"emoji emoji-2639\" role=\"img\" title=\"sad\">:sad:</span></p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"197836\">@Jireh Loreaux</span> The goal here is </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">⊢</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">δ</span> <span class=\"bp\">+</span> <span class=\"bp\">↑</span><span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"n\">δ</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>and that's not a generalized-congruence-type goal!</p>\n<p>Actually, I have a teaching tactic called <code>extra</code> which solves this kind of goal, see <a href=\"https://hrmacbeth.github.io/math2001/01_Proofs_by_Calculation.html#sq-nonneg\">Examples 1.4.7-1.4.10</a> and <a href=\"https://hrmacbeth.github.io/math2001/03_Parity_and_Divisibility.html#id34\">Examples 3.4.2-3.4.4</a> in my lecture notes.  (It indeed wraps lemmas like <code>le_add_of_nonneg_right</code>.) I have been on the fence about whether to PR it -- it's currently hacky and would need a rewrite for robustness first.</p>",
        "id": 390822253,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1694650432
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"197836\">Jireh Loreaux</span> <a href=\"#narrow/stream/113489-new-members/topic/Pain.20with.20WithBot/near/390776663\">said</a>:</p>\n<blockquote>\n<p>(a) do you know why <code>gcongr</code> didn't automatically use <code>positivity</code> above? </p>\n</blockquote>\n<p>The initial goal at the point you're asking about is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">⊢</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">δ</span> <span class=\"bp\">+</span> <span class=\"bp\">↑</span><span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"n\">δ</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>and so the goal <code> 0 ≤ δ + ↑n * δ</code> generated by <code>gcongr</code> acting on it is a \"main\" rather than \"side\" goal -- <code>gcongr</code> uses <code>positivity</code> as a discharger only on \"side\" goals, not \"main\" goals (and I claim this is better, for predictability and speed).</p>",
        "id": 390822802,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1694650798
    },
    {
        "content": "<p>Understood about positivity as only being automatically applied to side goals. That makes sense.</p>\n<p>Yes, I know it isn't technically a <code>gcongr' form, I was just hoping it might be able to insert the </code>+ 0`, or to apply that lemma, but I understand that's likely scope creep.</p>",
        "id": 390824458,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1694651852
    }
]