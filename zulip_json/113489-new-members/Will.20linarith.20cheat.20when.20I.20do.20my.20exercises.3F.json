[
    {
        "content": "<p>Hi, I am studying 'mathematics in lean' and doing exercises.</p>\n<p>My question is that will <code>linarith</code> cheat and use theorem that what I should proof in the exercises and give me a illusion that I solved the question but actually not?</p>\n<p>Like this question, is that OK to use <code>linarith</code> here?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">le_abs_self</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"bp\">|</span><span class=\"n\">x</span><span class=\"bp\">|</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">cases</span> <span class=\"n\">le_or_gt</span> <span class=\"mi\">0</span> <span class=\"n\">x</span>\n  <span class=\"n\">case</span> <span class=\"n\">inl</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">abs_of_nonneg</span> <span class=\"n\">h</span><span class=\"o\">]</span>\n  <span class=\"n\">case</span> <span class=\"n\">inr</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">abs_of_neg</span> <span class=\"n\">h</span><span class=\"o\">]</span>\n    <span class=\"n\">linarith</span>\n</code></pre></div>\n<p>Sometimes I found <code>apply?</code> is useless for it searched exactly what I shall proof (for this is an exercise). Then I wonder that if the same happens in other more complex tactics.</p>",
        "id": 396232418,
        "sender_full_name": "ZHAO Jiecheng",
        "timestamp": 1697096377
    },
    {
        "content": "<p>This is a good question. And yes, I think you should avoid using <code>linarith</code> in these kinds of exercises.</p>",
        "id": 396233320,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1697096779
    },
    {
        "content": "<p>At least it doesn't hurt to find a \"more elementary\" proof in cases like this.</p>",
        "id": 396233359,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1697096808
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/113489-new-members/topic/Will.20linarith.20cheat.20when.20I.20do.20my.20exercises.3F/near/396233359\">said</a>:</p>\n<blockquote>\n<p>At least it doesn't hurt to find a \"more elementary\" proof in cases like this.</p>\n</blockquote>\n<p>After rewriting the code as shown below, I noticed that the generated code given by <code>#print</code> is much shorter. In this case, it is O.K. However, I may still not  sure about the dependencies I used in other exercises.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">le_abs_self</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"bp\">|</span><span class=\"n\">x</span><span class=\"bp\">|</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">cases</span> <span class=\"n\">le_or_gt</span> <span class=\"mi\">0</span> <span class=\"n\">x</span>\n  <span class=\"n\">case</span> <span class=\"n\">inl</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">abs_of_nonneg</span> <span class=\"n\">h</span><span class=\"o\">]</span>\n  <span class=\"n\">case</span> <span class=\"n\">inr</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">abs_of_neg</span> <span class=\"n\">h</span><span class=\"o\">]</span>\n    <span class=\"k\">have</span> <span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"bp\">-</span><span class=\"n\">x</span> <span class=\"o\">:=</span>  <span class=\"n\">Iff.mpr</span> <span class=\"n\">neg_pos</span> <span class=\"n\">h</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"bp\">-</span><span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">lt_trans</span> <span class=\"n\">h</span> <span class=\"n\">h1</span>\n    <span class=\"n\">exact</span> <span class=\"n\">le_of_lt</span> <span class=\"n\">this</span>\n</code></pre></div>",
        "id": 396236829,
        "sender_full_name": "ZHAO Jiecheng",
        "timestamp": 1697098205
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"250110\">ZHAO Jiecheng</span> has marked this topic as resolved.</p>",
        "id": 396241135,
        "sender_full_name": "Notification Bot",
        "timestamp": 1697099783
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"250110\">ZHAO Jiecheng</span> has marked this topic as unresolved.</p>",
        "id": 396241141,
        "sender_full_name": "Notification Bot",
        "timestamp": 1697099787
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"250110\">ZHAO Jiecheng</span> has marked this topic as resolved.</p>",
        "id": 396241148,
        "sender_full_name": "Notification Bot",
        "timestamp": 1697099792
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"250110\">ZHAO Jiecheng</span> has marked this topic as unresolved.</p>",
        "id": 396242753,
        "sender_full_name": "Notification Bot",
        "timestamp": 1697100345
    },
    {
        "content": "<p>I found that the solution uses linarith as well, and linarith generates a long code. Is there a tool that can help me check whether the generated code touches something I should not touch? I believe this would be useful if we intend to use Lean as a teaching and learning tool.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">le_abs_self</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"bp\">|</span><span class=\"n\">x</span><span class=\"bp\">|</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">le_or_gt</span> <span class=\"mi\">0</span> <span class=\"n\">x</span> <span class=\"k\">with</span> <span class=\"n\">h</span> <span class=\"bp\">|</span> <span class=\"n\">h</span>\n  <span class=\"bp\">·</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">abs_of_nonneg</span> <span class=\"n\">h</span><span class=\"o\">]</span>\n  <span class=\"bp\">.</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">abs_of_neg</span> <span class=\"n\">h</span><span class=\"o\">]</span>\n    <span class=\"n\">linarith</span>\n</code></pre></div>",
        "id": 396244360,
        "sender_full_name": "ZHAO Jiecheng",
        "timestamp": 1697100882
    },
    {
        "content": "<p>What do you mean for something you shouldn't touch? Any examples</p>",
        "id": 396244490,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1697100925
    },
    {
        "content": "<p>Theorem that exactly the question itself or something proved by the question. For usually the question is a theorem in the lib.</p>",
        "id": 396246894,
        "sender_full_name": "ZHAO Jiecheng",
        "timestamp": 1697101732
    }
]