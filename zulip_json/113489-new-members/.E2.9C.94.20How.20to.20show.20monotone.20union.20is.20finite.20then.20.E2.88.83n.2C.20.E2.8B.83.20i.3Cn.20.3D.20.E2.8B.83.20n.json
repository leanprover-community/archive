[
    {
        "content": "<p>If the union of a sequence of non-decreasing sets is itself finite, then there exists some index n such that the sequence attains the value of the union at n.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">exists_bunion</span><span class=\"bp\">ᵢ</span><span class=\"n\">_eq_union</span><span class=\"bp\">ᵢ</span><span class=\"n\">_if_finite</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"o\">(</span><span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">)}</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">Set</span> <span class=\"o\">(</span><span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">)}</span>\n  <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">a.Finite</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">mono</span> <span class=\"o\">:</span> <span class=\"n\">Monotone</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">⋃</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">s</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∃</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">⋃</span> <span class=\"n\">i</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">s</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 350931436,
        "sender_full_name": "MonadMaverick",
        "timestamp": 1681875385
    },
    {
        "content": "<p>Do you have a sufficiently detailed pen and paper proof?</p>",
        "id": 350943157,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1681882565
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">exists_bunion</span><span class=\"bp\">ᵢ</span><span class=\"n\">_eq_union</span><span class=\"bp\">ᵢ</span><span class=\"n\">_if_finite</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"o\">(</span><span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">)}</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">Set</span> <span class=\"o\">(</span><span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">)}</span>\n  <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">a.Finite</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">mono</span> <span class=\"o\">:</span> <span class=\"n\">Monotone</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">⋃</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">s</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∃</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">⋃</span> <span class=\"n\">i</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">s</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"k\">have</span> <span class=\"n\">he</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">e</span> <span class=\"bp\">∈</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">e</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span> <span class=\"n\">i</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"n\">h'</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">Set.mem_union</span><span class=\"bp\">ᵢ</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">h'</span>\n\n    <span class=\"c1\">--pseudo code now:</span>\n\n    <span class=\"k\">let</span> <span class=\"n\">ns</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">e</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">if</span> <span class=\"n\">e</span> <span class=\"bp\">∈</span> <span class=\"n\">a</span> <span class=\"k\">then</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">choose</span> <span class=\"n\">i</span> <span class=\"n\">hi</span> <span class=\"n\">using</span> <span class=\"n\">he</span> <span class=\"n\">e</span> <span class=\"n\">_</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"k\">else</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">&lt;$&gt;</span> <span class=\"n\">a</span>\n\n    <span class=\"k\">have</span> <span class=\"n\">fns</span> <span class=\"o\">:</span> <span class=\"n\">ns.Finite</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n    <span class=\"k\">let</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"n\">supₛ</span> <span class=\"n\">ns</span>\n\n    <span class=\"k\">have</span> <span class=\"n\">n_in</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">∈</span> <span class=\"n\">fns</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n    <span class=\"n\">exists</span> <span class=\"n\">n</span>\n\n    <span class=\"c1\">--use Monotone to show the rest</span>\n</code></pre></div>\n<p>I think I'll be fine once I can get to \"exists n\"</p>",
        "id": 350945866,
        "sender_full_name": "MonadMaverick",
        "timestamp": 1681883653
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">given</span><span class=\"o\">:</span> <span class=\"bp\">|∪</span><span class=\"o\">{</span><span class=\"n\">An</span><span class=\"o\">,</span> <span class=\"n\">n</span><span class=\"bp\">=</span><span class=\"mi\">0</span><span class=\"bp\">..∞</span><span class=\"o\">}</span><span class=\"bp\">|</span><span class=\"n\">_card</span> <span class=\"bp\">&lt;</span> <span class=\"bp\">∞;</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">An</span> <span class=\"bp\">⊆</span> <span class=\"n\">An</span><span class=\"bp\">+</span><span class=\"mi\">1</span>\n<span class=\"k\">show</span><span class=\"o\">:</span> <span class=\"bp\">∃</span><span class=\"n\">m</span><span class=\"bp\">&lt;∞</span> <span class=\"n\">s.t.</span> <span class=\"bp\">∪</span><span class=\"o\">{</span><span class=\"n\">Ai</span><span class=\"o\">,</span> <span class=\"n\">i</span><span class=\"bp\">=</span><span class=\"mi\">0</span><span class=\"bp\">..</span><span class=\"n\">m</span><span class=\"o\">}</span> <span class=\"bp\">=</span> <span class=\"bp\">∪</span><span class=\"o\">{</span><span class=\"n\">An</span><span class=\"o\">,</span> <span class=\"n\">n</span><span class=\"bp\">=</span><span class=\"mi\">0</span><span class=\"bp\">..∞</span><span class=\"o\">}</span>\n\n<span class=\"n\">proof</span><span class=\"o\">:</span>\n<span class=\"k\">let</span> <span class=\"n\">A</span> <span class=\"bp\">=</span> <span class=\"bp\">∪</span><span class=\"o\">{</span><span class=\"n\">An</span><span class=\"o\">,</span> <span class=\"n\">n</span><span class=\"bp\">=</span><span class=\"mi\">0</span><span class=\"bp\">..∞</span><span class=\"o\">}</span>\n\n<span class=\"n\">we</span> <span class=\"n\">first</span> <span class=\"k\">show</span> <span class=\"bp\">∪</span><span class=\"o\">{</span><span class=\"n\">Ai</span><span class=\"o\">,</span> <span class=\"n\">i</span><span class=\"bp\">=</span><span class=\"mi\">0</span><span class=\"bp\">..</span><span class=\"n\">m</span><span class=\"o\">}</span> <span class=\"bp\">⊆</span> <span class=\"n\">A</span>\n<span class=\"n\">A</span> <span class=\"bp\">=</span> <span class=\"bp\">∪</span><span class=\"o\">{</span><span class=\"n\">An</span><span class=\"o\">,</span> <span class=\"n\">n</span><span class=\"bp\">=</span><span class=\"mi\">0</span><span class=\"bp\">..∞</span><span class=\"o\">}</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">∪</span><span class=\"o\">{</span><span class=\"n\">Ai</span><span class=\"o\">,</span> <span class=\"n\">i</span><span class=\"bp\">=</span><span class=\"mi\">0</span><span class=\"bp\">..</span><span class=\"n\">m</span><span class=\"o\">})</span> <span class=\"bp\">∪</span> <span class=\"o\">(</span><span class=\"bp\">∪</span><span class=\"o\">{</span><span class=\"n\">Ai</span><span class=\"o\">,</span> <span class=\"n\">i</span><span class=\"bp\">=</span><span class=\"n\">m</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"bp\">..∞</span><span class=\"o\">})</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">∪</span><span class=\"o\">{</span><span class=\"n\">Ai</span><span class=\"o\">,</span> <span class=\"n\">i</span><span class=\"bp\">=</span><span class=\"mi\">0</span><span class=\"bp\">..</span><span class=\"n\">m</span><span class=\"o\">}</span> <span class=\"bp\">⊆</span> <span class=\"n\">A</span>\n\n<span class=\"n\">next</span> <span class=\"n\">we</span> <span class=\"k\">show</span> <span class=\"n\">A</span> <span class=\"bp\">⊆</span> <span class=\"bp\">∪</span><span class=\"o\">{</span><span class=\"n\">Ai</span><span class=\"o\">,</span> <span class=\"n\">i</span><span class=\"bp\">=</span><span class=\"mi\">0</span><span class=\"bp\">..</span><span class=\"n\">m</span><span class=\"o\">}</span>\n<span class=\"n\">we</span> <span class=\"k\">have</span><span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">j</span> <span class=\"n\">s.t.</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">Aj</span>\n<span class=\"n\">we</span> <span class=\"n\">can</span> <span class=\"n\">define</span> <span class=\"n\">a</span> <span class=\"n\">mapping</span> <span class=\"n\">f</span> <span class=\"n\">that</span> <span class=\"n\">maps</span> <span class=\"n\">each</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">A</span> <span class=\"n\">to</span> <span class=\"n\">an</span> <span class=\"n\">index</span> <span class=\"n\">j</span> <span class=\"n\">of</span> <span class=\"n\">the</span> <span class=\"n\">sequence</span> <span class=\"o\">{</span><span class=\"n\">An</span><span class=\"o\">}</span> <span class=\"n\">s.t.</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">Aj</span>\n<span class=\"n\">f</span> <span class=\"n\">is</span> <span class=\"n\">clearly</span> <span class=\"n\">surjective</span>\n<span class=\"k\">let</span> <span class=\"n\">M</span> <span class=\"bp\">=</span> <span class=\"n\">f</span><span class=\"o\">(</span><span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">{</span> <span class=\"n\">all</span> <span class=\"n\">j</span> <span class=\"bp\">|</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">Aj</span> <span class=\"o\">}</span><span class=\"bp\">;</span>\n<span class=\"n\">M</span> <span class=\"n\">has</span> <span class=\"n\">finite</span> <span class=\"n\">elements</span> <span class=\"n\">since</span> <span class=\"n\">f</span> <span class=\"n\">is</span> <span class=\"n\">surjective</span> <span class=\"n\">and</span> <span class=\"n\">A</span> <span class=\"n\">has</span> <span class=\"n\">finite</span> <span class=\"n\">elements</span>\n<span class=\"k\">let</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"n\">max</span><span class=\"o\">(</span><span class=\"n\">M</span><span class=\"o\">)</span><span class=\"bp\">;</span>\n<span class=\"bp\">∀</span> <span class=\"n\">j</span> <span class=\"bp\">∈</span> <span class=\"n\">M</span><span class=\"o\">,</span> <span class=\"n\">we</span> <span class=\"k\">have</span> <span class=\"n\">j</span> <span class=\"bp\">≤</span> <span class=\"n\">m</span>\n  <span class=\"bp\">=&gt;</span> <span class=\"n\">Aj</span> <span class=\"bp\">⊆</span> <span class=\"n\">Am</span> <span class=\"n\">since</span> <span class=\"o\">{</span><span class=\"n\">An</span><span class=\"o\">}</span> <span class=\"n\">is</span> <span class=\"n\">Monotone</span>\n  <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">Aj</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">Am</span>\n<span class=\"n\">Thus</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">Am</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">A</span> <span class=\"bp\">⊆</span> <span class=\"n\">Am</span> <span class=\"bp\">⊆</span> <span class=\"bp\">∪</span><span class=\"o\">{</span><span class=\"n\">Ai</span><span class=\"o\">,</span> <span class=\"n\">i</span><span class=\"bp\">=</span><span class=\"mi\">0</span><span class=\"bp\">..</span><span class=\"n\">m</span><span class=\"o\">}</span>\n</code></pre></div>",
        "id": 350949364,
        "sender_full_name": "MonadMaverick",
        "timestamp": 1681885079
    },
    {
        "content": "<p>Let me suggest that instead you simply use <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Set.Finite.induction_on#doc\">docs4#Set.Finite.induction_on</a></p>",
        "id": 350949847,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1681885248
    },
    {
        "content": "<p>If you get unprovable goals, first do <code>revert s</code></p>",
        "id": 350950462,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1681885509
    },
    {
        "content": "<p>Going along with Jireh's suggestion, I would suggest your induction hypothesis to be <code>a ⊆ (⋃ i, s i) → ∃ n, a ⊆ ⋃ i &lt; n, s i</code> (by induction on <code>a</code>)</p>",
        "id": 350954749,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1681887046
    },
    {
        "content": "<p>Also, <span class=\"user-mention\" data-user-id=\"604291\">@MonadMaverick</span>, I think you have a typo in your statement, it should be <code>⋃ i &lt; n, s i</code>.</p>",
        "id": 350958060,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1681888156
    },
    {
        "content": "<p>Also your \"sufficiently detailed pen and paper proof\" is incorrect -- n is not in fns when a is empty.</p>",
        "id": 350958345,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1681888242
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/How.20to.20show.20monotone.20union.20is.20finite.20then.20.E2.88.83n.2C.20.E2.8B.83.20i.3Cn.20.3D.20.E2.8B.83.20n/near/350958345\">said</a>:</p>\n<blockquote>\n<p>Also your \"sufficiently detailed pen and paper proof\" is incorrect -- n is not in fns when a is empty.</p>\n</blockquote>\n<p>Yes. This is the beauty of using lean. When I claim n ∈ ns <em>library_search</em> shows that I should prove Nonempty ns</p>",
        "id": 350959599,
        "sender_full_name": "MonadMaverick",
        "timestamp": 1681888668
    },
    {
        "content": "<p>You don't need to prove this and furthermore given the &lt; in your code I guess you should be using n+1.</p>",
        "id": 350961240,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1681889104
    },
    {
        "content": "<p>I've got it. Thank you Ruben, Jireh, Mario and Kevin!</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Set</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">exists_bunion</span><span class=\"bp\">ᵢ</span><span class=\"n\">_eq_union</span><span class=\"bp\">ᵢ</span><span class=\"n\">_if_finite</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"o\">(</span><span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">)}</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">Set</span> <span class=\"o\">(</span><span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">)}</span>\n  <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">a.Finite</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">mono</span> <span class=\"o\">:</span> <span class=\"n\">Monotone</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">⋃</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">s</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∃</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">⋃</span> <span class=\"n\">i</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">s</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"k\">have</span> <span class=\"n\">he</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">e</span> <span class=\"bp\">∈</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">e</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span> <span class=\"n\">i</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"n\">h'</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">mem_union</span><span class=\"bp\">ᵢ</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">h'</span>\n\n    <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">Finite.induction_on'</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">t</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">∃</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">t</span> <span class=\"bp\">⊆</span> <span class=\"n\">s</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">a</span> <span class=\"n\">ha</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"kd\">by</span>\n      <span class=\"n\">intro</span> <span class=\"n\">x</span> <span class=\"n\">xs</span> <span class=\"n\">x_in</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">ih</span>\n      <span class=\"n\">choose</span> <span class=\"n\">i</span> <span class=\"n\">hi</span> <span class=\"n\">using</span> <span class=\"n\">ih</span>\n      <span class=\"n\">choose</span> <span class=\"n\">j</span> <span class=\"n\">hj</span> <span class=\"n\">using</span> <span class=\"n\">he</span> <span class=\"n\">x</span> <span class=\"n\">x_in</span>\n      <span class=\"n\">exists</span> <span class=\"n\">max</span> <span class=\"n\">i</span> <span class=\"n\">j</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">insert_subset</span><span class=\"o\">]</span>\n      <span class=\"n\">apply</span> <span class=\"n\">And.intro</span>\n      <span class=\"k\">have</span> <span class=\"n\">jle</span> <span class=\"o\">:</span> <span class=\"n\">j</span> <span class=\"bp\">≤</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span>\n      <span class=\"n\">apply</span> <span class=\"n\">mem_of_subset_of_mem</span> <span class=\"o\">(</span><span class=\"n\">mono</span> <span class=\"n\">jle</span><span class=\"o\">)</span>\n      <span class=\"n\">exact</span> <span class=\"n\">hj</span>\n      <span class=\"n\">trans</span> <span class=\"n\">s</span> <span class=\"n\">i</span>\n      <span class=\"n\">exact</span> <span class=\"n\">hi</span>\n      <span class=\"k\">have</span> <span class=\"n\">ile</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">≤</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span>\n      <span class=\"n\">apply</span> <span class=\"n\">mono</span> <span class=\"n\">ile</span>\n    <span class=\"o\">)</span>\n\n    <span class=\"n\">choose</span> <span class=\"n\">m</span> <span class=\"n\">hm</span> <span class=\"n\">using</span> <span class=\"n\">this</span>\n    <span class=\"n\">exists</span> <span class=\"n\">m</span><span class=\"bp\">+</span><span class=\"mi\">1</span>\n    <span class=\"n\">apply</span> <span class=\"n\">Subset.antisymm</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">h</span><span class=\"o\">]</span>\n    <span class=\"n\">apply</span> <span class=\"n\">union</span><span class=\"bp\">ᵢ₂</span><span class=\"n\">_subset</span> <span class=\"bp\">λ</span> <span class=\"n\">i</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span> <span class=\"n\">apply</span> <span class=\"n\">subset_union</span><span class=\"bp\">ᵢ</span><span class=\"n\">_of_subset</span> <span class=\"n\">i</span> <span class=\"o\">(</span><span class=\"n\">Subset.refl</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n    <span class=\"n\">trans</span> <span class=\"n\">s</span> <span class=\"n\">m</span>\n    <span class=\"n\">exact</span> <span class=\"n\">hm</span>\n    <span class=\"n\">apply</span> <span class=\"n\">subset_union</span><span class=\"bp\">ᵢ₂</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">i</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">s</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"n\">m</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 350965757,
        "sender_full_name": "MonadMaverick",
        "timestamp": 1681890364
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"604291\">MonadMaverick</span> has marked this topic as resolved.</p>",
        "id": 350965906,
        "sender_full_name": "Notification Bot",
        "timestamp": 1681890410
    }
]