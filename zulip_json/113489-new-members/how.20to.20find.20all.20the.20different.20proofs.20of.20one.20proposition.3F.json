[
    {
        "content": "<p>how to find all the different proofs of one proposition?Like this proposition, we have two ways to prove, but how to find? :<br>\nexample : {1, 2} ∪ {2, 4} = {1, 2, 4} := by<br>\n  ext n<br>\n  dsimp<br>\n  constructor<br>\n  · intro h<br>\n    obtain (h | h) | (h | h) := h<br>\n    · left<br>\n      apply h<br>\n    · right<br>\n      left<br>\n      apply h<br>\n  -- and much, much more<br>\n    · sorry<br>\n    · sorry<br>\n  · sorry<br>\n但还有更好的方法：这是纯粹的命题逻辑，该策略tauto（参见 示例 8.1.8）就是针对这种情况而设计的。</p>\n<p>example : {2, 1} ∪ {2, 4} = {1, 2, 4} := by<br>\n  ext n<br>\n  dsimp<br>\n  tauto</p>",
        "id": 403529646,
        "sender_full_name": "chenjulang",
        "timestamp": 1700635456
    },
    {
        "content": "<p>Please check out <a href=\"https://github.com/leanprover-community/mathlib/wiki/Code-in-backticks\">#backticks</a></p>",
        "id": 403537381,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1700639215
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">}</span> <span class=\"bp\">∪</span> <span class=\"o\">{</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">4</span><span class=\"o\">}</span> <span class=\"bp\">=</span> <span class=\"o\">{</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">4</span><span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">ext</span> <span class=\"n\">n</span>\n  <span class=\"n\">dsimp</span>\n  <span class=\"n\">constructor</span>\n  <span class=\"bp\">·</span> <span class=\"n\">intro</span> <span class=\"n\">h</span>\n    <span class=\"n\">obtain</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"bp\">|</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"bp\">|</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">h</span>\n    <span class=\"bp\">·</span> <span class=\"n\">left</span>\n      <span class=\"n\">apply</span> <span class=\"n\">h</span>\n    <span class=\"bp\">·</span> <span class=\"n\">right</span>\n      <span class=\"n\">left</span>\n      <span class=\"n\">apply</span> <span class=\"n\">h</span>\n  <span class=\"c1\">-- and much, much more</span>\n    <span class=\"bp\">·</span> <span class=\"gr\">sorry</span>\n    <span class=\"bp\">·</span> <span class=\"gr\">sorry</span>\n  <span class=\"bp\">·</span> <span class=\"gr\">sorry</span>\n\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"bp\">∪</span> <span class=\"o\">{</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">4</span><span class=\"o\">}</span> <span class=\"bp\">=</span> <span class=\"o\">{</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">4</span><span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">ext</span> <span class=\"n\">n</span>\n  <span class=\"n\">dsimp</span>\n  <span class=\"n\">tauto</span>\n</code></pre></div>",
        "id": 403539699,
        "sender_full_name": "chenjulang",
        "timestamp": 1700640365
    },
    {
        "content": "<p>This question has two ways to prove like the above. </p>\n<p>But how do we find different proofs of any other problems ?</p>",
        "id": 403539834,
        "sender_full_name": "chenjulang",
        "timestamp": 1700640453
    },
    {
        "content": "<p>For Students , more ways to prove  a new problem , is better for them to understand or fall in love with maths. Right?</p>",
        "id": 403540216,
        "sender_full_name": "chenjulang",
        "timestamp": 1700640633
    },
    {
        "content": "<p>I think an algorithm to find all proofs of something is even harder to make than an algorithm which finds one proof of something, and this easier algorithm is already out of reach in practice.</p>",
        "id": 403543455,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1700641999
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"665035\">chenjulang</span> <a href=\"#narrow/stream/113489-new-members/topic/how.20to.20find.20all.20the.20different.20proofs.20of.20one.20proposition.3F/near/403540216\">said</a>:</p>\n<blockquote>\n<p>For Students , more ways to prove  a new problem , is better for them to understand or fall in love with maths. Right?</p>\n</blockquote>\n<p>This problem of \"finding new / all (whatever that means) proofs for a problem\" is hard even in normal maths. We constantly discover new proofs for classical problems, so it's the same in Lean too.</p>\n<p>However for your original question, you probably mean how to find the tactics <code>ext n ; dsimp ; tauto</code>. Apart from the obvious answer \"write more code and read more code\", there is a tactic called <a href=\"https://github.com/leanprover-community/mathlib4/pull/8363\"><code>hint</code></a> that was implemented very recently. It is meant to do exactly what you want - propose suggestions to close goals. For example, in your case:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"bp\">∪</span> <span class=\"o\">{</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">4</span><span class=\"o\">}</span> <span class=\"bp\">=</span> <span class=\"o\">({</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">4</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">hint</span>\n\n<span class=\"c\">/-</span>\n<span class=\"cm\">Try these:</span>\n<span class=\"cm\">• decide</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>\n<p>Actually gives you a one-liner instead of your 3-liner :)</p>",
        "id": 403544983,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1700642604
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"579936\">Gareth Ma</span> <a href=\"#narrow/stream/113489-new-members/topic/how.20to.20find.20all.20the.20different.20proofs.20of.20one.20proposition.3F/near/403544983\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"665035\">chenjulang</span> <a href=\"#narrow/stream/113489-new-members/topic/how.20to.20find.20all.20the.20different.20proofs.20of.20one.20proposition.3F/near/403540216\">said</a>:</p>\n<blockquote>\n<p>For Students , more ways to prove  a new problem , is better for them to understand or fall in love with maths. Right?</p>\n</blockquote>\n<p>This problem of \"finding new / all (whatever that means) proofs for a problem\" is hard even in normal maths. We constantly discover new proofs for classical problems, so it's the same in Lean too.</p>\n<p>However for your original question, you probably mean how to find the tactics <code>ext n ; dsimp ; tauto</code>. Apart from the obvious answer \"write more code and read more code\", there is a tactic called <a href=\"https://github.com/leanprover-community/mathlib4/pull/8363\"><code>hint</code></a> that was implemented very recently. It is meant to do exactly what you want - propose suggestions to close goals. For example, in your case:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"bp\">∪</span> <span class=\"o\">{</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">4</span><span class=\"o\">}</span> <span class=\"bp\">=</span> <span class=\"o\">({</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">4</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">hint</span>\n\n<span class=\"c\">/-</span>\n<span class=\"cm\">Try these:</span>\n<span class=\"cm\">• decide</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>\n<p>Actually gives you a one-liner instead of your 3-liner :)</p>\n</blockquote>\n<p>thanks！Benefited a lot！</p>",
        "id": 403548400,
        "sender_full_name": "chenjulang",
        "timestamp": 1700643846
    }
]