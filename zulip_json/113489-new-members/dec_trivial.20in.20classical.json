[
    {
        "content": "<p>how to make <code>dec_trivial</code> work when I have an instance of all propositions decidable? MWE:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">coprime</span> <span class=\"mi\">127</span> <span class=\"mi\">128</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">classical</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">dec_trivial</span>\n</pre></div>",
        "id": 193701447,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1586680466
    },
    {
        "content": "<p>oh wow I thought this stuff had been solved.</p>",
        "id": 193701463,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586680510
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"c\">/-</span><span class=\"cm\">! -/</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">classical</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">coprime</span> <span class=\"mi\">127</span> <span class=\"mi\">128</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">exact</span> <span class=\"n\">dec_trivial</span>\n</pre></div>\n\n\n<p>Oh I see. This works</p>",
        "id": 193701475,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586680544
    },
    {
        "content": "<p>The <code>classical</code> tactic adds <code>_inst : Î  (a : Prop), decidable a</code> to the type class inference system but ideally it would add it with priority 10</p>",
        "id": 193701518,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586680599
    },
    {
        "content": "<p><code>classical</code> puts decidability in your context, and I think that gets maximum precedence</p>",
        "id": 193701521,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586680614
    },
    {
        "content": "<p>Could <code>classical</code> instead do what <code>open_locale classical</code> does?</p>",
        "id": 193701586,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586680699
    },
    {
        "content": "<p>I don't think so? Changing declarations in the environment in the middle of a proof is kind of weird</p>",
        "id": 193701595,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586680743
    },
    {
        "content": "<p>Certainly it can't do everything that <code>open_locale</code> can do because <code>open_locale</code> runs in the parser monad and hence has the ability to inject commands into the file that tactics can't do</p>",
        "id": 193701664,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586680813
    },
    {
        "content": "<p>but maybe <code>open_locale classical</code> just sets some precedences and those might be doable</p>",
        "id": 193701669,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586680841
    }
]