[
    {
        "content": "<p>Here is an odd type inference error with <code>differentiable_at.div_const</code>. <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">analysis.calculus.deriv</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">differentiable_at</span> <span class=\"n\">ℝ</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">),</span> <span class=\"n\">y</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">apply</span> <span class=\"n\">differentiable_at.div_const</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">differentiable_at_id</span><span class=\"o\">,</span> <span class=\"c1\">-- This works fine.</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>Whereas the following one-line proofs fail:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"n\">exact</span> <span class=\"n\">differentiable_at_id.div_const</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"c1\">-- type mismatch at application</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"n\">apply</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">differentiable_at_id</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">div_const</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"c1\">-- type mismatch at application</span>\n</code></pre></div>\n<p>I think <code>div_const</code> is failing to infer one of the implicit parameters, because the following do work:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"c1\">-- these all work:</span>\n  <span class=\"n\">apply</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">differentiable_at_id</span> <span class=\"n\">ℝ</span> <span class=\"n\">_</span> <span class=\"n\">ℝ</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">div_const</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">differentiable_at_id</span> <span class=\"n\">ℝ</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">div_const</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">differentiable_at_id</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">ℝ</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">div_const</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">differentiable_at_id</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">div_const</span><span class=\"o\">,</span>\n</code></pre></div>\n<p>Changing <code>2</code> to <code>(c : ℝ)</code> gives the same errors, as does using <code>differentiable_at_id'</code>. The <code>show_term</code> tactic suggests <code>exact differentiable_at_id.div_const 2</code> which generates an error.</p>\n<p>The error message is:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">type</span> <span class=\"n\">mismatch</span> <span class=\"n\">at</span> <span class=\"n\">application</span>\n  <span class=\"n\">differentiable_at_id.div_const</span>\n<span class=\"n\">term</span>\n  <span class=\"n\">differentiable_at_id</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">differentiable_at</span> <span class=\"bp\">?</span><span class=\"n\">m_1</span> <span class=\"n\">id</span> <span class=\"bp\">?</span><span class=\"n\">m_6</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"n\">differentiable_at</span> <span class=\"bp\">?</span><span class=\"n\">m_1</span> <span class=\"bp\">?</span><span class=\"n\">m_6</span> <span class=\"bp\">?</span><span class=\"n\">m_7</span>\n</code></pre></div>",
        "id": 356178186,
        "sender_full_name": "Jake Levinson",
        "timestamp": 1683327488
    },
    {
        "content": "<p>Not sure what's going on with it.</p>",
        "id": 356179460,
        "sender_full_name": "Jake Levinson",
        "timestamp": 1683328216
    },
    {
        "content": "<p>That is indeed surprising, it seems that Lean cannot elaborate <code>differentiable_at.div_const differentiable_at_id (2 : ℝ)</code> without knowing the expected type. Not sure what is causing that.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">analysis.calculus.deriv</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">differentiable_at</span> <span class=\"n\">ℝ</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">),</span> <span class=\"n\">y</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"c1\">-- have := differentiable_at.div_const differentiable_at_id (2 : ℝ), -- fails</span>\n  <span class=\"c1\">-- exact differentiable_at.div_const differentiable_at_id (2 : ℝ) -- succeeds</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 356675989,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1683546177
    },
    {
        "content": "<p>I think <code>differentiable_at_id</code> needs an explicit type argument?</p>",
        "id": 356677834,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1683546548
    },
    {
        "content": "<p>Yeah, that would solve it.</p>",
        "id": 356689593,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1683549317
    },
    {
        "content": "<p>I think some other lemmas like <code>differentiable_at_pow</code> also have the same problem.</p>",
        "id": 356745370,
        "sender_full_name": "Jake Levinson",
        "timestamp": 1683559733
    }
]