[
    {
        "content": "<p>I'm trying to find key-value based abstract data structures (with interfaces similar to <code>Lean.Data.HashMap</code>) that allows me to prove properties as follows with ease:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span><span class=\"o\">:</span> <span class=\"bp\">âˆ€</span><span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">Lean.HashMap</span> <span class=\"n\">String</span> <span class=\"n\">Nat</span><span class=\"o\">),</span> <span class=\"n\">Lean.HashMap.find</span><span class=\"bp\">!</span> <span class=\"o\">(</span><span class=\"n\">Lean.HashMap.insert</span> <span class=\"n\">h</span> <span class=\"s2\">\"x\"</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"s2\">\"x\"</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>By with ease I mean with some basic theorems I could leverage to prove these simple facts.</p>\n<p>I'm wondering what I should use in this case, e.g. is there some KVMap-like class/structure with some basic theorems in mathlib/standard library? A quick search with keywords like \"KVMap\" returns results for concrete types.</p>",
        "id": 399331846,
        "sender_full_name": "Z. Wu",
        "timestamp": 1698681520
    },
    {
        "content": "<p>For a purely abstract model of KVMaps, you might be able to use something like <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Finsupp#doc\">docs#Finsupp</a>, where <code>Finsupp String (Option Nat)</code> would be analogous to <code>HashMap String Nat</code>, assuming you add a <code>Zero (Option _)</code> instance. Then a \"KVMap\" might be some type with an (injective?) function to this, as well as a proof that it's compatible with <code>insert</code> (on the Finsupp side this is <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Finsupp.update#doc\">docs#Finsupp.update</a>).</p>\n<p>The idea is that the <code>find?</code> function characterizes the current state of the KVMap (modulo implementation details that might make different KVMaps with the same key/value pairs non-equal), and the <code>find?</code> function is finitely supported in the sense that there are only finitely many inputs for which its output is non-<code>none</code>.</p>",
        "id": 399337078,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1698683148
    },
    {
        "content": "<p>I think this is what I'm looking for, and many thanks for the pointer and the detailed explanation of the connection b/w Finsupp and HashMap!</p>",
        "id": 399339156,
        "sender_full_name": "Z. Wu",
        "timestamp": 1698683865
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"649880\">Zwu</span> has marked this topic as resolved.</p>",
        "id": 399339182,
        "sender_full_name": "Notification Bot",
        "timestamp": 1698683875
    }
]