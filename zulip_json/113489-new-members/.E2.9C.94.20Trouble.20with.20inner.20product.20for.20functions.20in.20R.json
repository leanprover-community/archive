[
    {
        "content": "<p>Hello everyone,<br>\nI am trying to prove the following lemma using <code>inner_zero_left</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Analysis.InnerProductSpace.Basic</span>\n<span class=\"kn\">open</span> <span class=\"n\">scoped</span> <span class=\"n\">RealInnerProductSpace</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">inner_zero</span> <span class=\"o\">{</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">NormedAddCommGroup</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)]</span> <span class=\"o\">[</span><span class=\"n\">InnerProductSpace</span> <span class=\"n\">ℝ</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">H</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">⟪</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">a</span><span class=\"bp\">⟫</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">inner_zero_left</span> <span class=\"n\">a</span>\n</code></pre></div>\n<p>However, it does not work. The error is </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">type</span> <span class=\"n\">mismatch</span>\n  <span class=\"n\">inner_zero_left</span> <span class=\"n\">a</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">inner</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">OfNat.ofNat</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"mi\">0</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Zero.toOfNat0</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"n\">NegZeroClass.toZero</span><span class=\"o\">))</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"n\">inner</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">OfNat.ofNat</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"mi\">0</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Zero.toOfNat0</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"k\">Pi</span><span class=\"bp\">.</span><span class=\"n\">instZero</span><span class=\"o\">))</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n</code></pre></div>\n<p>If I change ℝ but any other abstract type, it works though. Any ideas? Thank you!</p>",
        "id": 380264785,
        "sender_full_name": "Gaëtan Serré",
        "timestamp": 1690796429
    },
    {
        "content": "<p>The <code>[NormedAddCommGroup (H → ℝ)]</code> and <code>[InnerProductSpace ℝ (H → ℝ)]</code> are suspicious: this means you assume any structure on <code>H → ℝ</code> so they will not match the existing structures on <code>→</code> types. In particular, looks like Lean wants to give <code>0</code> its interpretation of the function that is constant <code>0</code> everywhere (<code>Pi.instZero</code>) but this is conflicting with <code>[NormedAddCommGroup (H → ℝ)]</code> saying, essentially \"just give me any function and we'll call it <code>0</code>\".</p>",
        "id": 380266859,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1690796797
    },
    {
        "content": "<p>Would it not work if we removed the <code>[]</code> assumptions completely?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Analysis.InnerProductSpace.Basic</span>\n<span class=\"kn\">open</span> <span class=\"n\">scoped</span> <span class=\"n\">RealInnerProductSpace</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">inner_zero</span> <span class=\"o\">{</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">H</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">⟪</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">a</span><span class=\"bp\">⟫</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">inner_zero_left</span> <span class=\"n\">a</span>\n</code></pre></div>",
        "id": 380267075,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1690796834
    },
    {
        "content": "<p>Ah no, first of all we'd need that <code>H</code> is finite, so <code>[Fintype H]</code>. And then I think we need some extra imports to get the inner product on function types...</p>",
        "id": 380268242,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1690797057
    },
    {
        "content": "<p>Thank you very much for your help <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 380268684,
        "sender_full_name": "Gaëtan Serré",
        "timestamp": 1690797146
    },
    {
        "content": "<p>So I think this is the right way to write this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Analysis.InnerProductSpace.PiL2</span>\n<span class=\"kn\">open</span> <span class=\"n\">scoped</span> <span class=\"n\">RealInnerProductSpace</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">inner_zero</span> <span class=\"o\">{</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">H</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">EuclideanSpace</span> <span class=\"n\">ℝ</span> <span class=\"n\">H</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">⟪</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">a</span><span class=\"bp\">⟫</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">inner_zero_left</span> <span class=\"n\">a</span>\n</code></pre></div>\n<p>We use <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=EuclideanSpace#doc\">docs#EuclideanSpace</a> instead of <code>H → ℝ</code> because there are quite a few norms we can put on <code>H → ℝ</code>, especially when <code>H</code> is infinite.</p>",
        "id": 380268802,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1690797166
    },
    {
        "content": "<p>Thank you so much!</p>",
        "id": 380269113,
        "sender_full_name": "Gaëtan Serré",
        "timestamp": 1690797225
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"635099\">Gaëtan Serré</span> has marked this topic as resolved.</p>",
        "id": 380269309,
        "sender_full_name": "Notification Bot",
        "timestamp": 1690797260
    },
    {
        "content": "<p>You're welcome!</p>\n<p>FYI: marking topics as resolved tends to break because the topic name changes. So no need to do so in the future :)</p>",
        "id": 380271500,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1690797654
    }
]