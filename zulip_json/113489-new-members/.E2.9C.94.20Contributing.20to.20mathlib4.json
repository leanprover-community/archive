[
    {
        "content": "<p>Hi!<br>\nI am learning computational algebraic geometry and formalizing what I have learned. (There is a previous topic <a href=\"#narrow/stream/113489-new-members/topic/formalizing.20something.20of.20algebraic.20geometry/near/346595985\">https://leanprover.zulipchat.com/#narrow/stream/113489-new-members/topic/formalizing.20something.20of.20algebraic.20geometry/near/346595985</a>.)<br>\nI'd like to try to contribute them to Mathlib4, and have read <a href=\"https://leanprover-community.github.io/contribute/index.html\">How to contribute to mathlib</a>. My GitHub username is <a href=\"https://github.com/Hagb\">Hagb</a>. Could anyone give me write access to non-master branches of Mathlib4 please? I'd like to start with:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.MvPolynomial.Basic</span>\n<span class=\"kn\">namespace</span> <span class=\"n\">MvPolynomial</span>\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">σ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">a'</span> <span class=\"n\">a₁</span> <span class=\"n\">a₂</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">CommSemiring</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">σ</span> <span class=\"bp\">→₀</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span>\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">p</span><span class=\"o\">:</span> <span class=\"n\">MvPolynomial</span> <span class=\"n\">σ</span> <span class=\"n\">R</span><span class=\"o\">)</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">smul_monomial</span><span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">•</span> <span class=\"n\">monomial</span> <span class=\"n\">s</span> <span class=\"n\">a'</span> <span class=\"bp\">=</span> <span class=\"n\">monomial</span> <span class=\"n\">s</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">a'</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">...</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">support_zero_iff</span><span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">↔</span> <span class=\"n\">p.support</span> <span class=\"bp\">=</span> <span class=\"bp\">∅</span> <span class=\"o\">:=</span> <span class=\"bp\">...</span>\n<span class=\"kd\">theorem</span>\n  <span class=\"n\">support_smul_eq</span> <span class=\"o\">[</span><span class=\"n\">NoZeroDivisors</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">ha</span><span class=\"o\">:</span> <span class=\"n\">a</span><span class=\"bp\">≠</span><span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">f</span><span class=\"o\">:</span> <span class=\"n\">MvPolynomial</span> <span class=\"n\">σ</span> <span class=\"n\">R</span><span class=\"o\">}:</span>\n  <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">•</span> <span class=\"n\">f</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">support</span> <span class=\"bp\">=</span> <span class=\"n\">f.support</span> <span class=\"o\">:=</span> <span class=\"bp\">...</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">support_mul_monomial</span> <span class=\"o\">[</span><span class=\"n\">NoZeroDivisors</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">a</span><span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">ha</span><span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">):</span>\n    <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">monomial</span> <span class=\"n\">s</span> <span class=\"n\">a</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">support</span> <span class=\"bp\">=</span> <span class=\"n\">p.support.map</span> <span class=\"o\">(</span><span class=\"n\">addRightEmbedding</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"bp\">...</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">support_monomial_mul</span> <span class=\"o\">[</span><span class=\"n\">NoZeroDivisors</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">a</span><span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">ha</span><span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">):</span>\n   <span class=\"o\">((</span><span class=\"n\">monomial</span> <span class=\"n\">s</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">p</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">support</span> <span class=\"bp\">=</span> <span class=\"n\">p.support.map</span> <span class=\"o\">(</span><span class=\"n\">addRightEmbedding</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:=</span><span class=\"bp\">...</span>\n</code></pre></div>\n<p>I have formalized the definition of multidegree of multivariate polynomial (It seems to work, but I don't know if it is good or bad) and some simple properties of it.(<a href=\"https://github.com/Hagb/lean-trying-multivariable\">https://github.com/Hagb/lean-trying-multivariable</a>) And my final goal is to formalize Gröbner bases and some of its important properties.<br>\nAnd I have some questions:</p>\n<ol>\n<li>Could I contribute to Mathlib4 without a Mathlib(3) port of the contribution?</li>\n<li>I plan to achieve my goal about Gröbner basis within these two months. Should I make draft PR(s) before that even if it is frequently updated and not fit the Style Guidelines at this stage? (Or maybe I shouldn't consider them until my first few easy PRs.)</li>\n</ol>",
        "id": 351685575,
        "sender_full_name": "Hagb (Junyu Guo)",
        "timestamp": 1682096430
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"331356\">@Hagb (Junyu Guo)</span> Welcome! See <a href=\"https://github.com/leanprover-community/mathlib4/invitations\">https://github.com/leanprover-community/mathlib4/invitations</a></p>\n<ol>\n<li>Yes, you can certainly contribute.</li>\n<li>We often make draft PRs for similar purposes. But it's also fine to flesh out your project in a separate repo without having an open PR.</li>\n</ol>\n<p>As you are probably aware, we are in the middle of porting mathlib3 to Lean 4. For this reason, it is not really possible to make tiny changes to existing material in mathlib4. (Or at least, the same changes will have to be made in mathlib3, until the port is done.)</p>\n<p>Did you check whether the material that you want to contribute does not yet exist in mathlib3? If it exists there already, it will probably be ported in the next few weeks. Feel free to help with that!<br>\nIf the material already exists in mathlib3, then we will not accept a \"from-scratch/ad-hoc\" approach in mathlib4. Because that will create headaches when it comes to porting the corresponding file from mathlib3 to mathlib4.</p>\n<p>Adding material that is really new is also fine. Certainly if it is clearly flagged as new material.<br>\nI suggest that you write <code>-- Porting note: new theorem</code> above every new theorem that you add to an existing file. If you create a new file, then you don't really need to do anything.</p>",
        "id": 351776186,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1682137735
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span><br>\nThanks!</p>\n<blockquote>\n<p>As you are probably aware, we are in the middle of porting mathlib3 to Lean 4. For this reason, it is not really possible to make tiny changes to existing material in mathlib4. (Or at least, the same changes will have to be made in mathlib3, until the port is done.)</p>\n</blockquote>\n<p>Could you please also grant me the write access to mathlib3? So that I could also contribute to mathlib3.</p>\n<blockquote>\n<p>Did you check whether the material that you want to contribute does not yet exist in mathlib3? If it exists there already, it will probably be ported in the next few weeks. Feel free to help with that!<br>\nIf the material already exists in mathlib3, then we will not accept a \"from-scratch/ad-hoc\" approach in mathlib4. Because that will create headaches when it comes to porting the corresponding file from mathlib3 to mathlib4.</p>\n</blockquote>\n<p>If I didn't miss anything, most of the material that I want to contribute does not yet exist in mathlib3. And the material that has been in mathlib3 has also been ported to Mathlib4.</p>",
        "id": 351788326,
        "sender_full_name": "Hagb (Junyu Guo)",
        "timestamp": 1682144864
    },
    {
        "content": "<p>Voila: <a href=\"https://github.com/leanprover-community/mathlib/invitations\">https://github.com/leanprover-community/mathlib/invitations</a></p>",
        "id": 351797731,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1682147874
    },
    {
        "content": "<p>Thank you</p>",
        "id": 351840755,
        "sender_full_name": "Hagb (Junyu Guo)",
        "timestamp": 1682159630
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"331356\">Hagb (Junyu Guo)</span> has marked this topic as resolved.</p>",
        "id": 351862739,
        "sender_full_name": "Notification Bot",
        "timestamp": 1682165920
    },
    {
        "content": "<p>Hi! I've contributed to mathlib3 before, but now I'd like to able to contribute to mathlib4, making pull requests and such. May I be granted this permission? <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 401257874,
        "sender_full_name": "Jack McKoen",
        "timestamp": 1699575334
    },
    {
        "content": "<p>What is your GitHub username?</p>",
        "id": 401261871,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1699577215
    },
    {
        "content": "<p>Nevermind, found it from the mathlib3 repo, invite sent! <a href=\"https://github.com/leanprover-community/mathlib4/invitations\">https://github.com/leanprover-community/mathlib4/invitations</a></p>",
        "id": 401262393,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1699577451
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"488744\">Jack McKoen</span> has marked this topic as resolved.</p>",
        "id": 401292160,
        "sender_full_name": "Notification Bot",
        "timestamp": 1699595363
    }
]