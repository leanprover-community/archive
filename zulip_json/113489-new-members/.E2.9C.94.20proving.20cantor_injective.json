[
    {
        "content": "<p>How can I prove this goal?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">α</span><span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"n\">f</span><span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span>\n<span class=\"n\">B</span><span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">|</span> <span class=\"n\">x</span> <span class=\"bp\">∉</span> <span class=\"n\">range</span> <span class=\"n\">f</span><span class=\"o\">}</span>\n<span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">function.injective</span> <span class=\"n\">f</span>\n<span class=\"n\">ξ</span><span class=\"o\">:</span> <span class=\"n\">α</span>\n<span class=\"n\">fx</span><span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">B</span> <span class=\"bp\">=</span> <span class=\"n\">ξ</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">ξ</span> <span class=\"bp\">∈</span> <span class=\"n\">B</span> <span class=\"bp\">↔</span> <span class=\"n\">f</span> <span class=\"n\">B</span> <span class=\"bp\">∉</span> <span class=\"n\">B</span>\n</code></pre></div>\n<p>here is the proof so far:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">cantor_injective</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">¬</span><span class=\"n\">function.injective</span> <span class=\"n\">f</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">set</span> <span class=\"n\">B</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">|</span> <span class=\"n\">x</span> <span class=\"bp\">∉</span> <span class=\"n\">range</span> <span class=\"n\">f</span><span class=\"o\">},</span>\n  <span class=\"n\">by_contradiction</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">ξ</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"n\">B</span> <span class=\"bp\">=</span> <span class=\"n\">ξ</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">exists_eq'</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">rcases</span> <span class=\"n\">this</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">ξ</span><span class=\"o\">,</span> <span class=\"n\">fx</span><span class=\"o\">⟩,</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">ξ</span> <span class=\"bp\">∈</span> <span class=\"n\">B</span> <span class=\"bp\">↔</span> <span class=\"n\">f</span> <span class=\"n\">B</span> <span class=\"bp\">∉</span> <span class=\"n\">B</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">fx</span> <span class=\"n\">at</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n      <span class=\"n\">exact</span> <span class=\"n\">not_p_iff_not_p</span> <span class=\"n\">_</span> <span class=\"n\">this</span><span class=\"o\">,</span> <span class=\"o\">}}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>the proof of this goal should go in the <code>sorry</code><br>\nthanks in advance</p>",
        "id": 280767929,
        "sender_full_name": "Joseph O",
        "timestamp": 1651371479
    },
    {
        "content": "<p>It's a bit easier on us if you include imports in the code section to make it an <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a></p>",
        "id": 280773089,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1651378658
    },
    {
        "content": "<p>It's not clear to me that there's a simple way of doing this from here. Presumably you want to use the injectivity in some way. So you need some statement of the form <code>f A = f B</code> for which <code>A</code> is not <code>B</code>. But <code>B</code> here won't necessarily work for that: You could imagine the function <code>f</code> on <code>set nat</code> that maps finite sets to their cardinality, and infinite sets to 17. In that case every nat is in the range, so <code>B</code> would be the empty set. But now you can't find a collision because <code>B</code> is the only thing that <code>f</code> maps to 0.</p>",
        "id": 280775035,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1651381740
    },
    {
        "content": "<p>Are you following a Maths proof that you already know here? It seems unlikely to me that the <code>have... exists_eq' ... cases this</code> is an accurate translation, as it's entirely vacuous mathematically</p>",
        "id": 280783013,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1651395217
    },
    {
        "content": "<p>You can replace those three lines with <code>set ξ := f B with hx</code></p>",
        "id": 280783082,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1651395347
    },
    {
        "content": "<p>I think I know how to fix it, thanks.</p>",
        "id": 280787673,
        "sender_full_name": "Joseph O",
        "timestamp": 1651402005
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"467926\">Joseph O</span> has marked this topic as resolved.</p>",
        "id": 280787674,
        "sender_full_name": "Notification Bot",
        "timestamp": 1651402010
    },
    {
        "content": "<p>Can anyone tell me why this doesnt work?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">set</span> <span class=\"n\">B</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">f</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">|</span> <span class=\"n\">f</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">∉</span> <span class=\"n\">x</span> <span class=\"bp\">∧</span> <span class=\"n\">x</span> <span class=\"bp\">⊆</span> <span class=\"n\">α</span><span class=\"o\">},</span>\n</code></pre></div>",
        "id": 280796004,
        "sender_full_name": "Joseph O",
        "timestamp": 1651413709
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">invalid</span> <span class=\"sc\">'{'</span> <span class=\"n\">expression</span><span class=\"o\">,</span> <span class=\"sc\">','</span><span class=\"o\">,</span> <span class=\"sc\">'}'</span><span class=\"o\">,</span> <span class=\"bp\">'..'</span><span class=\"o\">,</span> <span class=\"bp\">`//`</span> <span class=\"n\">or</span> <span class=\"bp\">`|`</span> <span class=\"n\">expected</span>\n</code></pre></div>",
        "id": 280796009,
        "sender_full_name": "Joseph O",
        "timestamp": 1651413715
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"467926\">Joseph O</span> has marked this topic as unresolved.</p>",
        "id": 280796085,
        "sender_full_name": "Notification Bot",
        "timestamp": 1651413804
    },
    {
        "content": "<p><code>(f : set α → α)</code></p>",
        "id": 280796099,
        "sender_full_name": "Joseph O",
        "timestamp": 1651413831
    },
    {
        "content": "<p>Even adding type signatures didnt help</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">set</span> <span class=\"n\">B</span> <span class=\"o\">:=</span> <span class=\"o\">{(</span><span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">∉</span> <span class=\"n\">x</span> <span class=\"bp\">∧</span> <span class=\"n\">x</span> <span class=\"bp\">⊆</span> <span class=\"n\">α</span><span class=\"o\">},</span>\n</code></pre></div>",
        "id": 280796616,
        "sender_full_name": "Joseph O",
        "timestamp": 1651414452
    },
    {
        "content": "<p>You're not allowed to put expressions to the left of <code>|</code> in a set literal</p>",
        "id": 280796815,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1651414722
    },
    {
        "content": "<p>The thing to the left of <code>|</code> is a variable name</p>",
        "id": 280796817,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1651414732
    },
    {
        "content": "<p>I'm not sure what the expression is supposed to mean, which makes it hard to figure out what to tell lean</p>",
        "id": 280796841,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1651414799
    },
    {
        "content": "<p>I would guess the intent is \"the set of <code>y</code> such that there exists an <code>x</code> satisfying <code>f x = y</code> and (rest of the conditions)\"</p>",
        "id": 280796907,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1651414893
    },
    {
        "content": "<p>^ this</p>",
        "id": 280797427,
        "sender_full_name": "Joseph O",
        "timestamp": 1651415624
    },
    {
        "content": "<p>Well then you need to write it out like that, complete with spelling out the <code>exists</code></p>",
        "id": 280797484,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1651415665
    },
    {
        "content": "<p>Why? This is what I want I think</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">set</span> <span class=\"n\">B</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span> <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">∉</span> <span class=\"n\">x</span><span class=\"o\">},</span>\n</code></pre></div>",
        "id": 280797516,
        "sender_full_name": "Joseph O",
        "timestamp": 1651415738
    },
    {
        "content": "<p>Well actually not really</p>",
        "id": 280797587,
        "sender_full_name": "Joseph O",
        "timestamp": 1651415841
    },
    {
        "content": "<p>Its of type <code>set (set a)</code>, but I want it to be of type <code>set a</code></p>",
        "id": 280797603,
        "sender_full_name": "Joseph O",
        "timestamp": 1651415859
    },
    {
        "content": "<p>seems like its counting <code>x : set α</code> as elements</p>",
        "id": 280797657,
        "sender_full_name": "Joseph O",
        "timestamp": 1651415888
    },
    {
        "content": "<p>Yes, because when you write <code>{x : A | p x}</code>, that means \"I am giving you a set of <code>A</code>s\"</p>",
        "id": 280797669,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1651415916
    },
    {
        "content": "<p>I need <code>x</code> to be some <code>set a</code>, and <code>B</code> to be a set of <code>a</code>s where each element is not in <code>x</code></p>",
        "id": 280797743,
        "sender_full_name": "Joseph O",
        "timestamp": 1651416012
    },
    {
        "content": "<p>Idea on how to do this?</p>",
        "id": 280797888,
        "sender_full_name": "Joseph O",
        "timestamp": 1651416253
    },
    {
        "content": "<p>Do you have an English proof you can paste?</p>",
        "id": 280797938,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1651416353
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"467926\">Joseph O</span> <a href=\"#narrow/stream/113489-new-members/topic/how.20to.20prove.20this.3F/near/280797888\">said</a>:</p>\n<blockquote>\n<p>Idea on how to do this?</p>\n</blockquote>\n<p>Yes, try translating this into lean, since you said it was what you meant</p>\n<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113489-new-members/topic/how.20to.20prove.20this.3F/near/280796907\">said</a>:</p>\n<blockquote>\n<p>I would guess the intent is \"the set of <code>y</code> such that there exists an <code>x</code> satisfying <code>f x = y</code> and (rest of the conditions)\"</p>\n</blockquote>",
        "id": 280798079,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1651416510
    },
    {
        "content": "<p>Your translation should include an <code>exists</code> symbol</p>",
        "id": 280798090,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1651416525
    },
    {
        "content": "<p>Like this? </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">have</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n</code></pre></div>",
        "id": 280798184,
        "sender_full_name": "Joseph O",
        "timestamp": 1651416655
    },
    {
        "content": "<p>You've not include the \"set of\" bit</p>",
        "id": 280798203,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1651416681
    },
    {
        "content": "<p>\"the set of <code>y: α</code> such that ...\" is spelt <code>{y : α| ... }</code></p>",
        "id": 280798211,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1651416709
    },
    {
        "content": "<p>You also should be writing <code>B :=</code> not <code>B :</code></p>",
        "id": 280798252,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1651416730
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113489-new-members/topic/how.20to.20prove.20this.3F/near/280798211\">said</a>:</p>\n<blockquote>\n<p>\"the set of <code>y: α</code> such that ...\" is spelt <code>{y : α| ... }</code></p>\n</blockquote>\n<p>But then I can't do the <code>x : set a</code> part</p>",
        "id": 280798287,
        "sender_full_name": "Joseph O",
        "timestamp": 1651416803
    },
    {
        "content": "<p>Yes you can, put the <code>∃ x : set α</code> inside the <code>...</code></p>",
        "id": 280798291,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1651416823
    },
    {
        "content": "<p>I see</p>",
        "id": 280798334,
        "sender_full_name": "Joseph O",
        "timestamp": 1651416856
    },
    {
        "content": "<p>So its this</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">set</span> <span class=\"n\">B</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span><span class=\"o\">},</span>\n</code></pre></div>",
        "id": 280798355,
        "sender_full_name": "Joseph O",
        "timestamp": 1651416903
    },
    {
        "content": "<p>You wanted to add <code>∧ (f x) ∉ x</code> too though, right?</p>",
        "id": 280798379,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1651416954
    },
    {
        "content": "<p>So far, is the math here right?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">cantor_injective</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">¬</span><span class=\"n\">function.injective</span> <span class=\"n\">f</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">set</span> <span class=\"n\">B</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"bp\">∧</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">∉</span> <span class=\"n\">x</span><span class=\"o\">},</span>\n  <span class=\"n\">by_contradiction</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">ξ</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">τ</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">ξ</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">τ</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 280798451,
        "sender_full_name": "Joseph O",
        "timestamp": 1651417041
    },
    {
        "content": "<p>The <code>have</code> looks like nonsense, it's obviously true (pick <code>ξ  = τ = empty</code>) and isn't going to help with the rest of the proof</p>",
        "id": 280798522,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1651417092
    },
    {
        "content": "<p>I was trying to follow the definition of injective functions</p>",
        "id": 280798535,
        "sender_full_name": "Joseph O",
        "timestamp": 1651417124
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/init/function.html#function.injective\">doc#function.injective</a></p>",
        "id": 280798550,
        "sender_full_name": "Joseph O",
        "timestamp": 1651417150
    },
    {
        "content": "<p>You should go back to your pen and paper proof and check you've translated it accurately</p>",
        "id": 280798675,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1651417252
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"467926\">@Joseph O</span> it is very <em>very</em> difficult to formalize some math if you haven't already understood it perfectly. Formalization, even if it is of course useful, tends to add problems rather than solving them. In particular you should first of all write a very detailed pen and paper proof.</p>",
        "id": 280798787,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1651417399
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113489-new-members/topic/how.20to.20prove.20this.3F/near/280796815\">said</a>:</p>\n<blockquote>\n<p>You're not allowed to put expressions to the left of <code>|</code> in a set literal</p>\n</blockquote>\n<p>Since <a href=\"https://github.com/leanprover-community/lean/pull/402\">lean#402</a> there is a very important special case where this is allowed though. But I don't think this is completely general</p>",
        "id": 280800257,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1651419390
    },
    {
        "content": "<p>I remembered seeing that but had totally forgotten you needed the parens for it to work</p>",
        "id": 280800704,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1651420014
    },
    {
        "content": "<p>It's in the file of \"all the things that start with <code>{</code>\" <a href=\"https://github.com/leanprover-community/lean/blob/master/src/frontends/lean/brackets.cpp\">https://github.com/leanprover-community/lean/blob/master/src/frontends/lean/brackets.cpp</a> (see <code>parse_set_replacement</code>)</p>",
        "id": 280802765,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1651422838
    },
    {
        "content": "<p>Here's a way to write Joseph's set from earlier: <code>{ (f x) | (x : set α) (h : f x ∉ x) }</code>. You can put any binders you want after the <code>|</code>.</p>",
        "id": 280803015,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1651423132
    },
    {
        "content": "<p>That gets interpreted as <code>{_x : α | ∃ (x : set α) (h : f x ∉ x), f x = _x}</code></p>",
        "id": 280803042,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1651423170
    },
    {
        "content": "<p>I guess you can also use union notation to build that kind of set. <code>⋃ (x : set α) (h : f x ∉ x), {f x}</code></p>",
        "id": 280803288,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1651423500
    },
    {
        "content": "<p>how would the mathematical proof for the <code>sorry</code> go?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">cantor_injective</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">¬</span><span class=\"n\">function.injective</span> <span class=\"n\">f</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">set</span> <span class=\"n\">B</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span> <span class=\"bp\">|</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">∉</span> <span class=\"n\">x</span><span class=\"o\">},</span>\n  <span class=\"n\">set</span> <span class=\"n\">B'</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"bp\">∧</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">B</span><span class=\"o\">},</span>\n  <span class=\"n\">by_contradiction</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">ξ</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"n\">B'</span> <span class=\"bp\">=</span> <span class=\"n\">ξ</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">exists_eq'</span><span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">rcases</span> <span class=\"n\">this</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">ξ</span><span class=\"o\">,</span> <span class=\"n\">fx</span><span class=\"o\">⟩,</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">f</span><span class=\"o\">(</span><span class=\"n\">B'</span><span class=\"o\">)</span> <span class=\"bp\">∈</span> <span class=\"n\">B'</span> <span class=\"bp\">↔</span> <span class=\"n\">f</span><span class=\"o\">(</span><span class=\"n\">B'</span><span class=\"o\">)</span> <span class=\"bp\">∉</span> <span class=\"n\">B'</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">fx</span> <span class=\"n\">at</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n      <span class=\"n\">exact</span> <span class=\"n\">not_p_iff_not_p</span> <span class=\"n\">_</span> <span class=\"n\">this</span><span class=\"o\">,</span> <span class=\"o\">}</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>the goal is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">α</span><span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"n\">f</span><span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span>\n<span class=\"n\">B</span><span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span> <span class=\"bp\">|</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">∉</span> <span class=\"n\">x</span><span class=\"o\">}</span>\n<span class=\"n\">B'</span><span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"bp\">∧</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">B</span><span class=\"o\">}</span>\n<span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">function.injective</span> <span class=\"n\">f</span>\n<span class=\"n\">ξ</span><span class=\"o\">:</span> <span class=\"n\">α</span>\n<span class=\"n\">fx</span><span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">B'</span> <span class=\"bp\">=</span> <span class=\"n\">ξ</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">f</span> <span class=\"n\">B'</span> <span class=\"bp\">∈</span> <span class=\"n\">B'</span> <span class=\"bp\">↔</span> <span class=\"n\">f</span> <span class=\"n\">B'</span> <span class=\"bp\">∉</span> <span class=\"n\">B'</span>\n</code></pre></div>",
        "id": 280818598,
        "sender_full_name": "Joseph O",
        "timestamp": 1651445785
    },
    {
        "content": "<p>Didn't you ask exactly that question at the top of the thread? I feel like we're going in circles a bit here...</p>",
        "id": 280819337,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1651446890
    },
    {
        "content": "<p>Hmm you are right, except my proof is now different. Let me go take a look again,</p>",
        "id": 280820640,
        "sender_full_name": "Joseph O",
        "timestamp": 1651449154
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113489-new-members/topic/how.20to.20prove.20this.3F/near/280783013\">said</a>:</p>\n<blockquote>\n<p>Are you following a Maths proof that you already know here? It seems unlikely to me that the <code>have... exists_eq' ... cases this</code> is an accurate translation, as it's entirely vacuous mathematically</p>\n</blockquote>\n<p>Though that is how the proof went for surjective functions</p>",
        "id": 280873365,
        "sender_full_name": "Joseph O",
        "timestamp": 1651498185
    },
    {
        "content": "<p>But I am going to try <code>set ξ := f B' with hx,</code></p>",
        "id": 280873395,
        "sender_full_name": "Joseph O",
        "timestamp": 1651498201
    },
    {
        "content": "<p>What do you mean by \"how the proof went\"? Which proof? Your own proof, or one you're following?</p>",
        "id": 280877256,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1651500112
    },
    {
        "content": "<p>Oh sorry, so here was the proof for surjective functions</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">cantor_surjective</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">¬</span><span class=\"n\">function.surjective</span> <span class=\"n\">f</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">set</span> <span class=\"n\">B</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">|</span> <span class=\"n\">x</span> <span class=\"bp\">∉</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">},</span>\n  <span class=\"n\">by_contradiction</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">ξ</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"n\">ξ</span> <span class=\"bp\">=</span> <span class=\"n\">B</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">h</span> <span class=\"n\">B</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">rcases</span> <span class=\"n\">this</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">ξ</span><span class=\"o\">,</span> <span class=\"n\">fx</span><span class=\"o\">⟩,</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">ξ</span> <span class=\"bp\">∈</span> <span class=\"n\">B</span> <span class=\"bp\">↔</span> <span class=\"n\">ξ</span> <span class=\"bp\">∉</span> <span class=\"n\">f</span><span class=\"o\">(</span><span class=\"n\">ξ</span><span class=\"o\">),</span>\n    <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">mem_set_of</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">fx</span> <span class=\"n\">at</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n      <span class=\"n\">exact</span> <span class=\"n\">not_p_iff_not_p</span> <span class=\"n\">_</span> <span class=\"n\">this</span><span class=\"o\">,</span> <span class=\"o\">}}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 280877696,
        "sender_full_name": "Joseph O",
        "timestamp": 1651500313
    },
    {
        "content": "<p>Someone told me the proof for injective functions should be very similar</p>",
        "id": 280878785,
        "sender_full_name": "Joseph O",
        "timestamp": 1651500924
    },
    {
        "content": "<p>Following <span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> 's suggestion in the second reply,</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">cantor_injective</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">¬</span><span class=\"n\">function.injective</span> <span class=\"n\">f</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">set</span> <span class=\"n\">B</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span> <span class=\"bp\">|</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">∉</span> <span class=\"n\">x</span><span class=\"o\">},</span>\n  <span class=\"n\">set</span> <span class=\"n\">B'</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"bp\">∧</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">B</span><span class=\"o\">},</span>\n  <span class=\"n\">by_contradiction</span><span class=\"o\">,</span>\n  <span class=\"n\">set</span> <span class=\"n\">ξ</span> <span class=\"o\">:=</span> <span class=\"n\">f</span> <span class=\"n\">B'</span> <span class=\"k\">with</span> <span class=\"n\">hx</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>and this gives a goal of </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">α</span><span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"n\">f</span><span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span>\n<span class=\"n\">B</span><span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span> <span class=\"bp\">|</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">∉</span> <span class=\"n\">x</span><span class=\"o\">}</span>\n<span class=\"n\">B'</span><span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"bp\">∧</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">B</span><span class=\"o\">}</span>\n<span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">function.injective</span> <span class=\"n\">f</span>\n<span class=\"n\">ξ</span><span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">f</span> <span class=\"n\">B'</span>\n<span class=\"n\">hx</span><span class=\"o\">:</span> <span class=\"n\">ξ</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">B'</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">false</span>\n</code></pre></div>\n<p>which I dont know if it makes things any better?</p>",
        "id": 280880016,
        "sender_full_name": "Joseph O",
        "timestamp": 1651501526
    },
    {
        "content": "<p>The lean code is at least short. But it sounds like your problem is that you don't know the maths proof? To make any progress there, you need to come up with something (an equality of two <code>α </code> terms of the form <code>f _ = f _</code>) to apply <code>h</code> to.</p>",
        "id": 280880266,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1651501663
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113489-new-members/topic/how.20to.20prove.20this.3F/near/280880266\">said</a>:</p>\n<blockquote>\n<p>The lean code is at least short. But it sounds like your problem is that you don't know the maths proof? To make any progress there, you need to come up with something (an equality of two <code>α </code> terms of the form <code>f _ = f _</code>) to apply <code>h</code> to.</p>\n</blockquote>\n<p>Does this look fine?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">τ</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"n\">τ</span> <span class=\"bp\">=</span> <span class=\"n\">ξ</span><span class=\"o\">,</span>\n</code></pre></div>",
        "id": 280900609,
        "sender_full_name": "Joseph O",
        "timestamp": 1651510362
    },
    {
        "content": "<p>But for some reason applying <code>h</code> doesnt really work</p>",
        "id": 280900634,
        "sender_full_name": "Joseph O",
        "timestamp": 1651510379
    },
    {
        "content": "<p>I get two goals. The first one I was able to close off with <code>exact Exists.intro B' rfl,</code>,</p>",
        "id": 280900697,
        "sender_full_name": "Joseph O",
        "timestamp": 1651510407
    },
    {
        "content": "<p>The reason applying <code>h</code> doesnt work is because the goal is to result in <code>false</code></p>",
        "id": 280900956,
        "sender_full_name": "Joseph O",
        "timestamp": 1651510515
    },
    {
        "content": "<p>Maybe I shouldnt do a contradiction</p>",
        "id": 280901018,
        "sender_full_name": "Joseph O",
        "timestamp": 1651510540
    },
    {
        "content": "<p>Here is the error and goal I get:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">invalid</span> <span class=\"n\">apply</span> <span class=\"n\">tactic</span><span class=\"o\">,</span> <span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">unify</span>\n  <span class=\"n\">false</span>\n<span class=\"k\">with</span>\n  <span class=\"bp\">?</span><span class=\"n\">m_1</span> <span class=\"bp\">=</span> <span class=\"bp\">?</span><span class=\"n\">m_2</span>\n<span class=\"n\">state</span><span class=\"o\">:</span>\n<span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">,</span>\n<span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">,</span>\n<span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span> <span class=\"bp\">|</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">∉</span> <span class=\"n\">x</span><span class=\"o\">},</span>\n<span class=\"n\">B'</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"bp\">∧</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">B</span><span class=\"o\">},</span>\n<span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">function.injective</span> <span class=\"n\">f</span><span class=\"o\">,</span>\n<span class=\"n\">ξ</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">f</span> <span class=\"n\">B'</span><span class=\"o\">,</span>\n<span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">ξ</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">B'</span><span class=\"o\">,</span>\n<span class=\"n\">this</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">τ</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"n\">τ</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">B'</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">false</span>\n</code></pre></div>",
        "id": 280901261,
        "sender_full_name": "Joseph O",
        "timestamp": 1651510631
    },
    {
        "content": "<p>You did not make progress. You already knew that there was some <code>\\tau</code> such that <code>f \\tau = \\xi</code>. Just take <code>B'</code>.</p>",
        "id": 280902663,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1651511210
    },
    {
        "content": "<p>What do you mean by \"just take <code>B'</code>\"?</p>",
        "id": 280902801,
        "sender_full_name": "Joseph O",
        "timestamp": 1651511266
    },
    {
        "content": "<p>What is the next step of the proof in <strong>words</strong>?</p>",
        "id": 280902959,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1651511319
    },
    {
        "content": "<p>We have an equality of <code>f τ = f B'</code>, and since <code>h</code> says that <code>f</code> is injective, if we apply it, we get a proof that <code>τ = B'</code>.</p>",
        "id": 280903929,
        "sender_full_name": "Joseph O",
        "timestamp": 1651511687
    },
    {
        "content": "<p>Great! But you <em>picked</em> <code>\\tau = B'</code> in the first place, so you did not learn anything.</p>",
        "id": 280905669,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1651512439
    },
    {
        "content": "<p>By the way, while the proof of <code>cantor_surjective</code> in mathlib is the classic one, I had not seen the proof of <code>cantor_injective</code> before and it was based on a proof on nLab</p>",
        "id": 280908097,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1651513528
    },
    {
        "content": "<p>I don't think it is easy to come up with that proof on your own (the classic proof uses <code>inv_surj</code> and the axiom of choice and is probably easier to guess)</p>",
        "id": 280908336,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1651513642
    },
    {
        "content": "<p>Hmm... I personally tried them for fun a while back and figured that both proofs were pretty similar (I only knew the surjective one and came up with the injective version myself).</p>",
        "id": 280918538,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1651518301
    },
    {
        "content": "<p>Yeah they should be very similar</p>",
        "id": 280918822,
        "sender_full_name": "Joseph O",
        "timestamp": 1651518416
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"467926\">Joseph O</span> has marked this topic as resolved.</p>",
        "id": 281015584,
        "sender_full_name": "Notification Bot",
        "timestamp": 1651585879
    },
    {
        "content": "<p>So I have this proof, with two sorrys. I am currently worried about the first, in between the <code>begin ... end</code></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">cantor_injective</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">¬</span><span class=\"n\">function.injective</span> <span class=\"n\">f</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">set</span> <span class=\"n\">B</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span> <span class=\"bp\">|</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">∉</span> <span class=\"n\">x</span><span class=\"o\">},</span>\n  <span class=\"n\">set</span> <span class=\"n\">B'</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"bp\">∧</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">B</span><span class=\"o\">},</span>\n  <span class=\"n\">by_contradiction</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">p_equiv_np_implies_false</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">B'</span> <span class=\"bp\">∈</span> <span class=\"n\">B'</span><span class=\"o\">),</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">fi</span> <span class=\"n\">fn</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">f</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span><span class=\"o\">(</span><span class=\"n\">B'</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">B</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"o\">(</span><span class=\"n\">mem_set_of.mp</span> <span class=\"n\">fi</span><span class=\"o\">),</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">rcases</span> <span class=\"n\">this</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">fs_eq_gB'</span><span class=\"o\">,</span> <span class=\"n\">x_in_B</span><span class=\"o\">⟩,</span>\n      <span class=\"k\">have</span> <span class=\"n\">fB'_notin_B'</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">B'</span> <span class=\"bp\">∉</span> <span class=\"n\">B'</span> <span class=\"o\">:=</span>\n      <span class=\"kd\">begin</span>\n        <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n      <span class=\"kd\">end</span><span class=\"o\">,</span>\n      <span class=\"n\">exact</span> <span class=\"n\">x_in_B</span> <span class=\"o\">(</span><span class=\"n\">false.rec</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fB'_notin_B'</span> <span class=\"n\">fi</span><span class=\"o\">)),</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">fn</span><span class=\"o\">,</span>\n    <span class=\"n\">refine</span> <span class=\"n\">mem_set_of.mpr</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n    <span class=\"n\">by_contradiction</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"o\">(</span><span class=\"n\">mem_set_of.mpr</span> <span class=\"n\">fn</span><span class=\"o\">),</span>\n    <span class=\"gr\">sorry</span><span class=\"o\">,</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>So before I start implementing it in lean, im still confused how the math proof will go.</p>",
        "id": 281094295,
        "sender_full_name": "Joseph O",
        "timestamp": 1651621842
    },
    {
        "content": "<p>That's not a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> (it has no imports and <code>p_equiv_np_implies_false </code> is presumably your own code), so it will be difficult for anyone to help you</p>",
        "id": 281096914,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1651623890
    },
    {
        "content": "<p>This topic was moved here from <a class=\"stream-topic\" data-stream-id=\"116395\" href=\"/#narrow/stream/116395-maths/topic/Stuck.20on.20mathematical.20proof\">#maths &gt; Stuck on mathematical proof</a> by <span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span>.</p>",
        "id": 281096937,
        "sender_full_name": "Notification Bot",
        "timestamp": 1651623913
    },
    {
        "content": "<p>(I've move the thread to <a class=\"stream\" data-stream-id=\"113489\" href=\"/#narrow/stream/113489-new-members\">#new members</a> since this is more a request for help with lean and proving rather than a more in-depth question about formalizing a specific piece of math)</p>",
        "id": 281097071,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1651624026
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113489-new-members/topic/proving.20cantor_injective/near/281096914\">said</a>:</p>\n<blockquote>\n<p>That's not a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> (it has no imports and <code>p_equiv_np_implies_false </code> is presumably your own code), so it will be difficult for anyone to help you</p>\n</blockquote>\n<p>Sure. </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">init.data.set</span>\n<span class=\"kn\">import</span> <span class=\"n\">set_theory.cardinal.basic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">set</span>\n<span class=\"kn\">open</span> <span class=\"n\">nat</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">p_equiv_np_implies_false</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">P</span><span class=\"o\">,</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"bp\">↔</span> <span class=\"bp\">¬</span><span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">P</span><span class=\"o\">,</span>\n  <span class=\"n\">by_contradiction</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"n\">classical.em</span> <span class=\"n\">P</span><span class=\"o\">,</span> <span class=\"n\">cases</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"k\">have</span> <span class=\"n\">np</span> <span class=\"o\">:=</span> <span class=\"n\">h.mp</span> <span class=\"n\">h_1</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"o\">(</span><span class=\"n\">np</span> <span class=\"n\">h_1</span><span class=\"o\">),</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"k\">have</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"n\">h.mpr</span> <span class=\"n\">h_1</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"o\">(</span><span class=\"n\">h_1</span> <span class=\"n\">p</span><span class=\"o\">),</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">cantor_injective</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">¬</span><span class=\"n\">function.injective</span> <span class=\"n\">f</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">set</span> <span class=\"n\">B</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span> <span class=\"bp\">|</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">∉</span> <span class=\"n\">x</span><span class=\"o\">},</span>\n  <span class=\"n\">set</span> <span class=\"n\">B'</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"bp\">∧</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">B</span><span class=\"o\">},</span>\n  <span class=\"n\">by_contradiction</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">p_equiv_np_implies_false</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">B'</span> <span class=\"bp\">∈</span> <span class=\"n\">B'</span><span class=\"o\">),</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">fi</span> <span class=\"n\">fn</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">f</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span><span class=\"o\">(</span><span class=\"n\">B'</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">B</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"o\">(</span><span class=\"n\">mem_set_of.mp</span> <span class=\"n\">fi</span><span class=\"o\">),</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">rcases</span> <span class=\"n\">this</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">fs_eq_gB'</span><span class=\"o\">,</span> <span class=\"n\">x_in_B</span><span class=\"o\">⟩,</span>\n      <span class=\"k\">have</span> <span class=\"n\">fB'_notin_B'</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">B'</span> <span class=\"bp\">∉</span> <span class=\"n\">B'</span> <span class=\"o\">:=</span>\n      <span class=\"kd\">begin</span>\n        <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n      <span class=\"kd\">end</span><span class=\"o\">,</span>\n      <span class=\"n\">exact</span> <span class=\"n\">x_in_B</span> <span class=\"o\">(</span><span class=\"n\">false.rec</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fB'_notin_B'</span> <span class=\"n\">fi</span><span class=\"o\">)),</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">fn</span><span class=\"o\">,</span>\n    <span class=\"n\">refine</span> <span class=\"n\">mem_set_of.mpr</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n    <span class=\"n\">by_contradiction</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"o\">(</span><span class=\"n\">mem_set_of.mpr</span> <span class=\"n\">fn</span><span class=\"o\">),</span>\n    <span class=\"gr\">sorry</span><span class=\"o\">,</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 281097500,
        "sender_full_name": "Joseph O",
        "timestamp": 1651624421
    },
    {
        "content": "<p>Your proof is going nowhere - the key piece of information you have is the <code>h</code> introduced by <code>by_contradiction</code> (normally you'd write <code>by_contradiction h</code> to make that clear). You need to come up with a clever way to apply <code>h</code>. The statement is impossible to prove without <code>h</code>.</p>",
        "id": 281097713,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1651624601
    },
    {
        "content": "<p>I havent found a way to apply <code>h</code></p>",
        "id": 281097972,
        "sender_full_name": "Joseph O",
        "timestamp": 1651624847
    },
    {
        "content": "<p>I suggest you try and work that out on paper where it's sometimes easier to see you're going in circles</p>",
        "id": 281098113,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1651624996
    },
    {
        "content": "<p>Are you trying to find a proof from scratch, or trying to formalize a \"paper\" one you've seen  elsewhere?</p>",
        "id": 281098150,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1651625032
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113489-new-members/topic/proving.20cantor_injective/near/281098150\">said</a>:</p>\n<blockquote>\n<p>Are you trying to find a proof from scratch, or trying to formalize a \"paper\" one you've seen  elsewhere?</p>\n</blockquote>\n<p>The proof I am trying to formalize currently was given to me by someone, not from a paper</p>",
        "id": 281098445,
        "sender_full_name": "Joseph O",
        "timestamp": 1651625329
    },
    {
        "content": "<p>This was it:</p>\n<p>First notice that B' ⊆ A. Now suppose f(B') ∈ B, then there is X ⊆ A such that f(B') = f(X) with f(X) ∉ X, but f is injective by assumption and so B' = X. So together with f(X) ∉ X we get f(B') ∉ B'. Conversely if f(B') ∉ B' then combined with B' ⊆ A and f(B') = f(B') we have that ∃X [f(B') = f(X) ∧ f(X) ∉ X ∧ X ⊆ A], namely X = B'. But that means that f(B') ∈ B.</p>",
        "id": 281098589,
        "sender_full_name": "Joseph O",
        "timestamp": 1651625460
    },
    {
        "content": "<p>Ah so when you wanted to prove <code>∃ X, f B' = f X</code>, what you were really after was <code>∃ X, f B' = f X ∧ f X ∉ X</code>!</p>",
        "id": 281098714,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1651625570
    },
    {
        "content": "<p>yes!</p>",
        "id": 281098740,
        "sender_full_name": "Joseph O",
        "timestamp": 1651625603
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">cantor_injective</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">¬</span><span class=\"n\">function.injective</span> <span class=\"n\">f</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">set</span> <span class=\"n\">B</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span> <span class=\"bp\">|</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">∉</span> <span class=\"n\">x</span><span class=\"o\">},</span>\n  <span class=\"n\">set</span> <span class=\"n\">B'</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"bp\">∧</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">B</span><span class=\"o\">},</span>\n  <span class=\"n\">by_contradiction</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">f</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span><span class=\"o\">(</span><span class=\"n\">B'</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"n\">f</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">∉</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>i still feel like ive seen this before... am i going around in circles?</p>",
        "id": 281098947,
        "sender_full_name": "Joseph O",
        "timestamp": 1651625840
    },
    {
        "content": "<p>Note that \"now suppose P (and then later not P)\" is captured best with <code>by_cases hp : P</code></p>",
        "id": 281098954,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1651625849
    },
    {
        "content": "<p>In particular, your \"paper\" proof says you need to do that <em>before</em> you can construct that existential</p>",
        "id": 281099052,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1651625957
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113489-new-members/topic/proving.20cantor_injective/near/281098954\">said</a>:</p>\n<blockquote>\n<p>Note that \"now suppose P (and then later not P)\" is captured best with <code>by_cases hp : P</code></p>\n</blockquote>\n<p>That would probably be <code>by_cases hp : f(B') ∈ B',</code></p>",
        "id": 281099245,
        "sender_full_name": "Joseph O",
        "timestamp": 1651626081
    },
    {
        "content": "<p>Lets see how far in I can get</p>",
        "id": 281099770,
        "sender_full_name": "Joseph O",
        "timestamp": 1651626657
    },
    {
        "content": "<p>Wait this made three goals</p>",
        "id": 281099945,
        "sender_full_name": "Joseph O",
        "timestamp": 1651626863
    },
    {
        "content": "<p>so i closed off the first</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">cantor_injective</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">¬</span><span class=\"n\">function.injective</span> <span class=\"n\">f</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">set</span> <span class=\"n\">B</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span> <span class=\"bp\">|</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">∉</span> <span class=\"n\">x</span><span class=\"o\">},</span>\n  <span class=\"n\">set</span> <span class=\"n\">B'</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"bp\">∧</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">B</span><span class=\"o\">},</span>\n  <span class=\"n\">by_contradiction</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">f</span><span class=\"o\">(</span><span class=\"n\">B'</span><span class=\"o\">)</span> <span class=\"bp\">∈</span> <span class=\"n\">B'</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">f</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span><span class=\"o\">(</span><span class=\"n\">B'</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"n\">f</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">∉</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"o\">(</span><span class=\"n\">mem_set_of.mp</span> <span class=\"n\">hp</span><span class=\"o\">),</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 281099952,
        "sender_full_name": "Joseph O",
        "timestamp": 1651626884
    },
    {
        "content": "<p><code>by_cases</code> turns a goal into two. Then, when trying to prove the first, you used <code>have</code> without providing a proof term, which creates another goal</p>",
        "id": 281100174,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1651627172
    },
    {
        "content": "<p>Makes sense</p>",
        "id": 281100562,
        "sender_full_name": "Joseph O",
        "timestamp": 1651627586
    },
    {
        "content": "<p>So the next part of the proof says</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">but</span> <span class=\"n\">f</span> <span class=\"n\">is</span> <span class=\"n\">injective</span> <span class=\"kd\">by</span> <span class=\"n\">assumption</span> <span class=\"n\">and</span> <span class=\"n\">so</span> <span class=\"n\">B'</span> <span class=\"bp\">=</span> <span class=\"n\">X.</span>\n</code></pre></div>\n<p>this is most likely the part where we apply <code>h</code>, but I'm not exactly sure where and how to do that with the proof in it's current state</p>",
        "id": 281101688,
        "sender_full_name": "Joseph O",
        "timestamp": 1651628960
    },
    {
        "content": "<p>Any thoughts?</p>",
        "id": 281142649,
        "sender_full_name": "Joseph O",
        "timestamp": 1651664403
    },
    {
        "content": "<p>I haven't tested your code, but if <code>but f is injective by assumption and so B' = X.</code> should work at this point, it sounds like the <code>contradiction</code> tactic to me</p>",
        "id": 281142868,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1651664556
    },
    {
        "content": "<p>That is, you have two contradictory hypotheses in your context</p>",
        "id": 281142915,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1651664598
    },
    {
        "content": "<p><code>have := h the_proof_that_f_B'_eq_f_X</code> is the next step forward</p>",
        "id": 281142920,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1651664601
    },
    {
        "content": "<p>I don't think it's that immediate, Arthur. We still need to use injectivity.</p>",
        "id": 281142953,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1651664628
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">cases</span> <span class=\"n\">this</span> <span class=\"k\">with</span> <span class=\"n\">s</span> <span class=\"n\">hs</span><span class=\"o\">,</span> <span class=\"c1\">-- extracts an `s` and `hs : P s` from \"exists s such that `P s`\"</span>\n<span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"n\">hs.1</span><span class=\"o\">)</span> <span class=\"n\">at</span> <span class=\"n\">hp</span><span class=\"o\">,</span>  <span class=\"c1\">-- uses injectivity</span>\n<span class=\"k\">have</span> <span class=\"n\">hp'</span> <span class=\"o\">:=</span> <span class=\"n\">hs.2</span><span class=\"o\">,</span>     <span class=\"c1\">-- `hp': f s ∉ s`, which contradicts `hp: f s ∈ s`</span>\n<span class=\"n\">contradiction</span><span class=\"o\">,</span>\n</code></pre></div>",
        "id": 281144113,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1651665349
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/113489-new-members/topic/proving.20cantor_injective/near/281142920\">said</a>:</p>\n<blockquote>\n<p><code>have := h the_proof_that_f_B'_eq_f_X</code> is the next step forward</p>\n</blockquote>\n<p>So I have to extract that proof</p>",
        "id": 281146291,
        "sender_full_name": "Joseph O",
        "timestamp": 1651666721
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"451983\">Arthur Paulino</span> <a href=\"#narrow/stream/113489-new-members/topic/proving.20cantor_injective/near/281144113\">said</a>:</p>\n<blockquote>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">cases</span> <span class=\"n\">this</span> <span class=\"k\">with</span> <span class=\"n\">s</span> <span class=\"n\">hs</span><span class=\"o\">,</span> <span class=\"c1\">-- extracts an `s` and `hs : P s` from \"exists s such that `P s`\"</span>\n<span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"n\">hs.1</span><span class=\"o\">)</span> <span class=\"n\">at</span> <span class=\"n\">hp</span><span class=\"o\">,</span>  <span class=\"c1\">-- uses injectivity</span>\n<span class=\"k\">have</span> <span class=\"n\">hp'</span> <span class=\"o\">:=</span> <span class=\"n\">hs.2</span><span class=\"o\">,</span>     <span class=\"c1\">-- `hp': f s ∉ s`, which contradicts `hp: f s ∈ s`</span>\n<span class=\"n\">contradiction</span><span class=\"o\">,</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>I never knew you could do <code>hs.1</code>, that's cool</p>",
        "id": 281146471,
        "sender_full_name": "Joseph O",
        "timestamp": 1651666816
    },
    {
        "content": "<p>Wow thanks for helping out, and I never knew the <code>contradiction</code> tactic existed.</p>",
        "id": 281146600,
        "sender_full_name": "Joseph O",
        "timestamp": 1651666905
    },
    {
        "content": "<p>Now the goal of the last sorry is </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">α</span><span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"n\">f</span><span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span>\n<span class=\"n\">B</span><span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span> <span class=\"bp\">|</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">∉</span> <span class=\"n\">x</span><span class=\"o\">}</span>\n<span class=\"n\">B'</span><span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"bp\">∧</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">B</span><span class=\"o\">}</span>\n<span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">function.injective</span> <span class=\"n\">f</span>\n<span class=\"n\">hp</span><span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">B'</span> <span class=\"bp\">∉</span> <span class=\"n\">B'</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">false</span>\n</code></pre></div>\n<p>I would like to try to figure this one out myself, though I am a bit confused which  part of the written proof this corresponds to.</p>",
        "id": 281146929,
        "sender_full_name": "Joseph O",
        "timestamp": 1651667076
    },
    {
        "content": "<p>\"Conversely if f(B') ∉ B'...\"</p>",
        "id": 281147044,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1651667145
    },
    {
        "content": "<p>You're now on the complementary side of the <code>by_cases</code> tactic</p>",
        "id": 281147194,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1651667235
    },
    {
        "content": "<p>Right</p>",
        "id": 281150927,
        "sender_full_name": "Joseph O",
        "timestamp": 1651669186
    },
    {
        "content": "<p>Then next line says <code>we have that ∃X [f(B') = f(X) ∧ f(X) ∉ X ∧ X ⊆ A],</code>, which is essentially <code>have : ∃ X, f(X) = f(B') ∧ f(X) ∉ X,</code> all over again</p>",
        "id": 281167352,
        "sender_full_name": "Joseph O",
        "timestamp": 1651676117
    },
    {
        "content": "<p>This is what I was able to get so far on the last part. Does it look good so far?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">cantor_injective</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">¬</span><span class=\"n\">function.injective</span> <span class=\"n\">f</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">set</span> <span class=\"n\">B</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span> <span class=\"bp\">|</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">∉</span> <span class=\"n\">x</span><span class=\"o\">},</span>\n  <span class=\"n\">set</span> <span class=\"n\">B'</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"bp\">∧</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">B</span><span class=\"o\">},</span>\n  <span class=\"n\">by_contradiction</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">f</span><span class=\"o\">(</span><span class=\"n\">B'</span><span class=\"o\">)</span> <span class=\"bp\">∈</span> <span class=\"n\">B'</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"n\">f</span><span class=\"o\">(</span><span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span><span class=\"o\">(</span><span class=\"n\">B'</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"n\">f</span><span class=\"o\">(</span><span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"bp\">∉</span> <span class=\"n\">X</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"o\">(</span><span class=\"n\">mem_set_of.mp</span> <span class=\"n\">hp</span><span class=\"o\">),</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">cases</span> <span class=\"n\">this</span> <span class=\"k\">with</span> <span class=\"n\">s</span> <span class=\"n\">hs</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"n\">hs.1</span><span class=\"o\">)</span> <span class=\"n\">at</span> <span class=\"n\">hp</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">hp'</span> <span class=\"o\">:=</span> <span class=\"n\">hs.2</span><span class=\"o\">,</span>\n    <span class=\"n\">contradiction</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"k\">have</span> <span class=\"n\">hB'</span> <span class=\"o\">:</span> <span class=\"n\">f</span><span class=\"o\">(</span><span class=\"n\">B'</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span><span class=\"o\">(</span><span class=\"n\">B'</span><span class=\"o\">),</span>\n    <span class=\"n\">refl</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"n\">X</span> <span class=\"bp\">=</span> <span class=\"n\">B'</span><span class=\"o\">,</span>\n    <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n    <span class=\"gr\">sorry</span><span class=\"o\">,</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 281170015,
        "sender_full_name": "Joseph O",
        "timestamp": 1651677169
    },
    {
        "content": "<p>What do you want to do with <code>hB'</code>? It doesn't seem to bring in much value</p>",
        "id": 281170778,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1651677519
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"451983\">Arthur Paulino</span> <a href=\"#narrow/stream/113489-new-members/topic/proving.20cantor_injective/near/281170778\">said</a>:</p>\n<blockquote>\n<p>What do you want to do with <code>hB'</code>? It doesn't seem to bring in much value</p>\n</blockquote>\n<p>I don't know either. I am just trying to follow the proof. </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- Conversely if f(B') ∉ B' then combined with B' ⊆ A and f(B') = f(B'),</span>\n<span class=\"c1\">-- we have that ∃X [f(B') = f(X) ∧ f(X) ∉ X ∧ X ⊆ A],</span>\n<span class=\"c1\">-- namely X = B'. But that means that f(B') ∈ B.</span>\n</code></pre></div>",
        "id": 281171022,
        "sender_full_name": "Joseph O",
        "timestamp": 1651677621
    },
    {
        "content": "<p>I also dont want to do <code>have : ∃ X, f(X) = f(B') ∧ f(X) ∉ X,</code> again</p>",
        "id": 281171577,
        "sender_full_name": "Joseph O",
        "timestamp": 1651677866
    },
    {
        "content": "<p>Then place it before <code>by_cases</code> (and bring its proof along)</p>",
        "id": 281171698,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1651677925
    },
    {
        "content": "<p>Oh ok</p>",
        "id": 281171715,
        "sender_full_name": "Joseph O",
        "timestamp": 1651677936
    },
    {
        "content": "<p>But then things get really moved around</p>",
        "id": 281171919,
        "sender_full_name": "Joseph O",
        "timestamp": 1651678029
    },
    {
        "content": "<p>Like for this goal:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">α</span><span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"n\">f</span><span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span>\n<span class=\"n\">B</span><span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span> <span class=\"bp\">|</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">∉</span> <span class=\"n\">x</span><span class=\"o\">}</span>\n<span class=\"n\">B'</span><span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"bp\">∧</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">B</span><span class=\"o\">}</span>\n<span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">function.injective</span> <span class=\"n\">f</span>\n<span class=\"n\">this</span><span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"n\">X</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">B'</span> <span class=\"bp\">∧</span> <span class=\"n\">f</span> <span class=\"n\">X</span> <span class=\"bp\">∉</span> <span class=\"n\">X</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">false</span>\n</code></pre></div>\n<p>this proof doesnt work anymore because the is no <code>hp</code> anymore</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">cases</span> <span class=\"n\">this</span> <span class=\"k\">with</span> <span class=\"n\">s</span> <span class=\"n\">hs</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"n\">hs.1</span><span class=\"o\">)</span> <span class=\"n\">at</span> <span class=\"n\">hp</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">hp'</span> <span class=\"o\">:=</span> <span class=\"n\">hs.2</span><span class=\"o\">,</span>\n    <span class=\"n\">contradiction</span><span class=\"o\">,</span>\n</code></pre></div>",
        "id": 281171996,
        "sender_full_name": "Joseph O",
        "timestamp": 1651678072
    },
    {
        "content": "<p>Wait, if you need <code>f(B') ∈ B'</code> to be true in order to prove that <code>∃ X, f(X) = f(B') ∧ f(X) ∉ X</code> then how would you prove it in the other <code>by_cases</code> section, supposing you were willing to do it \"all over again\"?</p>",
        "id": 281172694,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1651678379
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"451983\">@Arthur Paulino</span> well we have these three goals:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"mi\">3</span> <span class=\"n\">goals</span>\n<span class=\"n\">α</span><span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"n\">f</span><span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span>\n<span class=\"n\">B</span><span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span> <span class=\"bp\">|</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">∉</span> <span class=\"n\">x</span><span class=\"o\">}</span>\n<span class=\"n\">B'</span><span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"bp\">∧</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">B</span><span class=\"o\">}</span>\n<span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">function.injective</span> <span class=\"n\">f</span>\n<span class=\"n\">hp</span><span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">B'</span> <span class=\"bp\">∈</span> <span class=\"n\">B'</span>\n<span class=\"bp\">⊢</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"n\">X</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">B'</span> <span class=\"bp\">∧</span> <span class=\"n\">f</span> <span class=\"n\">X</span> <span class=\"bp\">∉</span> <span class=\"n\">X</span>\n<span class=\"n\">α</span><span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"n\">f</span><span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span>\n<span class=\"n\">B</span><span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span> <span class=\"bp\">|</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">∉</span> <span class=\"n\">x</span><span class=\"o\">}</span>\n<span class=\"n\">B'</span><span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"bp\">∧</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">B</span><span class=\"o\">}</span>\n<span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">function.injective</span> <span class=\"n\">f</span>\n<span class=\"n\">hp</span><span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">B'</span> <span class=\"bp\">∉</span> <span class=\"n\">B'</span>\n<span class=\"bp\">⊢</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"n\">X</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">B'</span> <span class=\"bp\">∧</span> <span class=\"n\">f</span> <span class=\"n\">X</span> <span class=\"bp\">∉</span> <span class=\"n\">X</span>\n<span class=\"n\">α</span><span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"n\">f</span><span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span>\n<span class=\"n\">B</span><span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span> <span class=\"bp\">|</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">∉</span> <span class=\"n\">x</span><span class=\"o\">}</span>\n<span class=\"n\">B'</span><span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"bp\">∧</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">B</span><span class=\"o\">}</span>\n<span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">function.injective</span> <span class=\"n\">f</span>\n<span class=\"n\">this</span><span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"n\">X</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">B'</span> <span class=\"bp\">∧</span> <span class=\"n\">f</span> <span class=\"n\">X</span> <span class=\"bp\">∉</span> <span class=\"n\">X</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">false</span>\n</code></pre></div>",
        "id": 281173498,
        "sender_full_name": "Joseph O",
        "timestamp": 1651678752
    },
    {
        "content": "<p>Hm, can you come up with a proof of your own? I feel like syntactically following that proof (rather than semantically) is getting you more lost</p>",
        "id": 281173955,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1651678930
    },
    {
        "content": "<p>I don't have a proof of my own.</p>",
        "id": 281174060,
        "sender_full_name": "Joseph O",
        "timestamp": 1651678978
    },
    {
        "content": "<p>Can you write the one you have with your own words? As if you were explaining it to someone</p>",
        "id": 281174226,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1651679043
    },
    {
        "content": "<p>Ok so going back to </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">cantor_injective</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">¬</span><span class=\"n\">function.injective</span> <span class=\"n\">f</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">set</span> <span class=\"n\">B</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span> <span class=\"bp\">|</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">∉</span> <span class=\"n\">x</span><span class=\"o\">},</span>\n  <span class=\"n\">set</span> <span class=\"n\">B'</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"bp\">∧</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">B</span><span class=\"o\">},</span>\n  <span class=\"n\">by_contradiction</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">f</span><span class=\"o\">(</span><span class=\"n\">B'</span><span class=\"o\">)</span> <span class=\"bp\">∈</span> <span class=\"n\">B'</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"n\">f</span><span class=\"o\">(</span><span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span><span class=\"o\">(</span><span class=\"n\">B'</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"n\">f</span><span class=\"o\">(</span><span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"bp\">∉</span> <span class=\"n\">X</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"o\">(</span><span class=\"n\">mem_set_of.mp</span> <span class=\"n\">hp</span><span class=\"o\">),</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">cases</span> <span class=\"n\">this</span> <span class=\"k\">with</span> <span class=\"n\">s</span> <span class=\"n\">hs</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"n\">hs.1</span><span class=\"o\">)</span> <span class=\"n\">at</span> <span class=\"n\">hp</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">hp'</span> <span class=\"o\">:=</span> <span class=\"n\">hs.2</span><span class=\"o\">,</span>\n    <span class=\"n\">contradiction</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"n\">X</span> <span class=\"bp\">=</span> <span class=\"n\">B'</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">exists_eq</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span> <span class=\"o\">}</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>the last <code>sorry</code> has a goal of </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">α</span><span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"n\">f</span><span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span>\n<span class=\"n\">B</span><span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span> <span class=\"bp\">|</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">∉</span> <span class=\"n\">x</span><span class=\"o\">}</span>\n<span class=\"n\">B'</span><span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"bp\">∧</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">B</span><span class=\"o\">}</span>\n<span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">function.injective</span> <span class=\"n\">f</span>\n<span class=\"n\">hp</span><span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">B'</span> <span class=\"bp\">∉</span> <span class=\"n\">B'</span>\n<span class=\"n\">this</span><span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">X</span> <span class=\"bp\">=</span> <span class=\"n\">B'</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">false</span>\n</code></pre></div>\n<p>and this corresponds with </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">namely</span> <span class=\"n\">X</span> <span class=\"bp\">=</span> <span class=\"n\">B'.</span> <span class=\"n\">But</span> <span class=\"n\">that</span> <span class=\"n\">means</span> <span class=\"n\">that</span> <span class=\"n\">f</span><span class=\"o\">(</span><span class=\"n\">B'</span><span class=\"o\">)</span> <span class=\"bp\">∈</span> <span class=\"n\">B.</span>\n</code></pre></div>\n<p>Do you know how to get <code>f(B') ∈ B</code> out of the current goal</p>",
        "id": 281174351,
        "sender_full_name": "Joseph O",
        "timestamp": 1651679092
    },
    {
        "content": "<p><code>exact hp</code></p>",
        "id": 281174877,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1651679324
    },
    {
        "content": "<p>That doesnt work.</p>",
        "id": 281174970,
        "sender_full_name": "Joseph O",
        "timestamp": 1651679365
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">invalid</span> <span class=\"n\">type</span> <span class=\"n\">ascription</span><span class=\"o\">,</span> <span class=\"n\">term</span> <span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">f</span> <span class=\"n\">B'</span> <span class=\"bp\">∉</span> <span class=\"n\">B'</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"n\">false</span>\n</code></pre></div>",
        "id": 281174981,
        "sender_full_name": "Joseph O",
        "timestamp": 1651679374
    },
    {
        "content": "<p>Your proof starts off as \"First notice that B' ⊆ A\". What is <code>A</code>?</p>",
        "id": 281176474,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1651679996
    },
    {
        "content": "<p>I think it's <code>set.univ : set α</code></p>",
        "id": 281177291,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1651680261
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"467926\">@Joseph O</span>, note that when you use <code>by_cases</code> it splits into two goals - you should have two pairs of <code>{}</code> at that point to keep things clear</p>",
        "id": 281177359,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1651680292
    },
    {
        "content": "<p><span aria-label=\"point up\" class=\"emoji emoji-1f446\" role=\"img\" title=\"point up\">:point_up:</span> </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">set_theory.cardinal.basic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">set</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">cantor_injective</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">¬</span><span class=\"n\">function.injective</span> <span class=\"n\">f</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">set</span> <span class=\"n\">B</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span> <span class=\"bp\">|</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">∉</span> <span class=\"n\">x</span><span class=\"o\">},</span>\n  <span class=\"n\">set</span> <span class=\"n\">B'</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"bp\">∧</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">B</span><span class=\"o\">},</span>\n  <span class=\"n\">by_contradiction</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">f</span><span class=\"o\">(</span><span class=\"n\">B'</span><span class=\"o\">)</span> <span class=\"bp\">∈</span> <span class=\"n\">B'</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"n\">f</span><span class=\"o\">(</span><span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span><span class=\"o\">(</span><span class=\"n\">B'</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"n\">f</span><span class=\"o\">(</span><span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"bp\">∉</span> <span class=\"n\">X</span> <span class=\"o\">:=</span> <span class=\"n\">mem_set_of.mp</span> <span class=\"n\">hp</span><span class=\"o\">,</span>\n    <span class=\"n\">cases</span> <span class=\"n\">this</span> <span class=\"k\">with</span> <span class=\"n\">s</span> <span class=\"n\">hs</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"n\">hs.1</span><span class=\"o\">)</span> <span class=\"n\">at</span> <span class=\"n\">hp</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">hp'</span> <span class=\"o\">:=</span> <span class=\"n\">hs.2</span><span class=\"o\">,</span>\n    <span class=\"n\">contradiction</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"n\">X</span> <span class=\"bp\">=</span> <span class=\"n\">B'</span> <span class=\"o\">:=</span> <span class=\"n\">exists_eq</span><span class=\"o\">,</span>\n    <span class=\"gr\">sorry</span><span class=\"o\">,</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 281177957,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1651680545
    },
    {
        "content": "<p>Oh right I see, that was my mistake</p>",
        "id": 281193890,
        "sender_full_name": "Joseph O",
        "timestamp": 1651686773
    },
    {
        "content": "<p>Thanks</p>",
        "id": 281193894,
        "sender_full_name": "Joseph O",
        "timestamp": 1651686775
    },
    {
        "content": "<p>Im still confused on how to translate <code>But that means that f(B') ∈ B.</code> into lean</p>",
        "id": 281196333,
        "sender_full_name": "Joseph O",
        "timestamp": 1651687699
    },
    {
        "content": "<p>From </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">{</span> <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"n\">X</span> <span class=\"bp\">=</span> <span class=\"n\">B'</span> <span class=\"o\">:=</span> <span class=\"n\">exists_eq</span><span class=\"o\">,</span>\n    <span class=\"gr\">sorry</span><span class=\"o\">,</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 281196353,
        "sender_full_name": "Joseph O",
        "timestamp": 1651687708
    },
    {
        "content": "<p>Do you understand why that is so in a math level? Note: I'm not claiming that it's true nor that I understand. I'm just saying that this will be a super hard task if you don't see it as true and understand precisely why it is</p>",
        "id": 281196688,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1651687824
    },
    {
        "content": "<p>Well we have this hypothesis: <code>hp: f B' ∉ B'</code>, which seems contradictory</p>",
        "id": 281197091,
        "sender_full_name": "Joseph O",
        "timestamp": 1651687986
    },
    {
        "content": "<p>Why is it so?</p>",
        "id": 281197158,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1651688013
    },
    {
        "content": "<p>Because we are saying that <code>f B' ∈ B'</code></p>",
        "id": 281197414,
        "sender_full_name": "Joseph O",
        "timestamp": 1651688111
    },
    {
        "content": "<p>or we are trying to prove that</p>",
        "id": 281197434,
        "sender_full_name": "Joseph O",
        "timestamp": 1651688121
    },
    {
        "content": "<p>Well, what im confused is how they got <code>f B' ∈ B'</code> from <code>X = B'</code></p>",
        "id": 281197566,
        "sender_full_name": "Joseph O",
        "timestamp": 1651688172
    },
    {
        "content": "<p>Did it say anywhere that <code>f X ∈ X</code></p>",
        "id": 281197866,
        "sender_full_name": "Joseph O",
        "timestamp": 1651688321
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"467926\">Joseph O</span> <a href=\"#narrow/stream/113489-new-members/topic/proving.20cantor_injective/near/281197414\">said</a>:</p>\n<blockquote>\n<p>Because we are saying that <code>f B' ∈ B'</code></p>\n</blockquote>\n<p>Are you talking about <code>hp</code>? Because <code>by_cases hp : ⋯</code> is not like saying that <code>hp</code> is true. It's a way to prove what you want in both scenarios (when it's true and when it's false)</p>",
        "id": 281198097,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1651688421
    },
    {
        "content": "<p>Well does this look correct so far?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">cantor_injective</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">¬</span><span class=\"n\">function.injective</span> <span class=\"n\">f</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">set</span> <span class=\"n\">B</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span> <span class=\"bp\">|</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">∉</span> <span class=\"n\">x</span><span class=\"o\">},</span>\n  <span class=\"n\">set</span> <span class=\"n\">B'</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"bp\">∧</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">B</span><span class=\"o\">},</span>\n  <span class=\"n\">by_contradiction</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">f</span><span class=\"o\">(</span><span class=\"n\">B'</span><span class=\"o\">)</span> <span class=\"bp\">∈</span> <span class=\"n\">B'</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"n\">f</span><span class=\"o\">(</span><span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span><span class=\"o\">(</span><span class=\"n\">B'</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"n\">f</span><span class=\"o\">(</span><span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"bp\">∉</span> <span class=\"n\">X</span> <span class=\"o\">:=</span> <span class=\"n\">mem_set_of.mp</span> <span class=\"n\">hp</span><span class=\"o\">,</span>\n    <span class=\"n\">cases</span> <span class=\"n\">this</span> <span class=\"k\">with</span> <span class=\"n\">s</span> <span class=\"n\">hs</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"n\">hs.1</span><span class=\"o\">)</span> <span class=\"n\">at</span> <span class=\"n\">hp</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">hp'</span> <span class=\"o\">:=</span> <span class=\"n\">hs.2</span><span class=\"o\">,</span>\n    <span class=\"n\">contradiction</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"n\">X</span> <span class=\"bp\">=</span> <span class=\"n\">B'</span> <span class=\"o\">:=</span> <span class=\"n\">exists_eq</span><span class=\"o\">,</span>\n    <span class=\"n\">cases</span> <span class=\"n\">this</span> <span class=\"k\">with</span> <span class=\"n\">X</span> <span class=\"n\">hXB'</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">hI</span> <span class=\"o\">:</span> <span class=\"n\">f</span><span class=\"o\">(</span><span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"bp\">∈</span> <span class=\"n\">X</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">hXB'</span> <span class=\"n\">at</span> <span class=\"n\">hI</span><span class=\"o\">,</span>\n      <span class=\"n\">contradiction</span><span class=\"o\">,</span> <span class=\"o\">}</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>the goal of the last sorry is </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">α</span><span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"n\">f</span><span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span>\n<span class=\"n\">B</span><span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span> <span class=\"bp\">|</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">∉</span> <span class=\"n\">x</span><span class=\"o\">}</span>\n<span class=\"n\">B'</span><span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"bp\">∧</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">B</span><span class=\"o\">}</span>\n<span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">function.injective</span> <span class=\"n\">f</span>\n<span class=\"n\">hp</span><span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">B'</span> <span class=\"bp\">∉</span> <span class=\"n\">B'</span>\n<span class=\"n\">X</span><span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span>\n<span class=\"n\">hXB'</span><span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">=</span> <span class=\"n\">B'</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">f</span> <span class=\"n\">X</span> <span class=\"bp\">∈</span> <span class=\"n\">X</span>\n</code></pre></div>\n<p>which I have no idea how to prove</p>",
        "id": 281198353,
        "sender_full_name": "Joseph O",
        "timestamp": 1651688523
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"467926\">Joseph O</span> <a href=\"#narrow/stream/113489-new-members/topic/proving.20cantor_injective/near/281197566\">said</a>:</p>\n<blockquote>\n<p>Well, what im confused is how they got <code>f B' ∈ B'</code> from <code>X = B'</code></p>\n</blockquote>\n<p>If that part of the proof is too mysterious for you, then ask for more detailed steps. Think of it as a convincing game. You're trying to prove something you're not convinced of. And this path is a painful one</p>",
        "id": 281198698,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1651688683
    },
    {
        "content": "<p>Once you're convinced, then you'll have a better chance at convincing a machine</p>",
        "id": 281199080,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1651688878
    },
    {
        "content": "<p>Sure Im asking them about it</p>",
        "id": 281199131,
        "sender_full_name": "Joseph O",
        "timestamp": 1651688888
    },
    {
        "content": "<p>I feel like introducing X here only confuses things - do you agree the proof is finished if you can prove <code>f B' ∈ B'</code>?</p>",
        "id": 281200646,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1651689535
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"307953\">Ruben Van de Velde</span> <a href=\"#narrow/stream/113489-new-members/topic/proving.20cantor_injective/near/281200646\">said</a>:</p>\n<blockquote>\n<p>I feel like introducing X here only confuses things - do you agree the proof is finished if you can prove <code>f B' ∈ B'</code>?</p>\n</blockquote>\n<p>Yes</p>",
        "id": 281201792,
        "sender_full_name": "Joseph O",
        "timestamp": 1651689971
    },
    {
        "content": "<p>Now the question is how do we prove that.</p>",
        "id": 281201871,
        "sender_full_name": "Joseph O",
        "timestamp": 1651690010
    },
    {
        "content": "<p>If you need to prove that something is an element of a set defined by <code>{ a | something about a }</code>, the lemma <code>set.mem_set_of_eq</code> is a good first step</p>",
        "id": 281202266,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1651690178
    },
    {
        "content": "<p><code>B'</code> is defined as <code>set B' := {y : α | ∃ x : set α, f x = y ∧ x ∈ B},</code> so would it work?</p>",
        "id": 281202740,
        "sender_full_name": "Joseph O",
        "timestamp": 1651690379
    },
    {
        "content": "<p>Because with </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">f</span><span class=\"o\">(</span><span class=\"n\">B'</span><span class=\"o\">)</span> <span class=\"bp\">∈</span> <span class=\"n\">B'</span> <span class=\"o\">:=</span>\n    <span class=\"kd\">begin</span>\n      <span class=\"n\">mem_set_of_eq</span><span class=\"o\">,</span>\n    <span class=\"kd\">end</span><span class=\"o\">,</span>\n</code></pre></div>\n<p>i get sortof an ugly error</p>",
        "id": 281202799,
        "sender_full_name": "Joseph O",
        "timestamp": 1651690405
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">type</span> <span class=\"n\">mismatch</span> <span class=\"n\">at</span> <span class=\"n\">application</span>\n  <span class=\"n\">tactic.istep</span> <span class=\"mi\">54</span> <span class=\"mi\">6</span> <span class=\"mi\">54</span> <span class=\"mi\">6</span> <span class=\"mi\">182</span> <span class=\"n\">mem_set_of_eq</span>\n<span class=\"n\">term</span>\n  <span class=\"n\">mem_set_of_eq</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"bp\">?</span><span class=\"n\">m_2</span> <span class=\"bp\">∈</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">?</span><span class=\"n\">m_1</span> <span class=\"bp\">|</span> <span class=\"bp\">?</span><span class=\"n\">m_3</span> <span class=\"n\">x</span><span class=\"o\">}</span> <span class=\"bp\">=</span> <span class=\"bp\">?</span><span class=\"n\">m_3</span> <span class=\"bp\">?</span><span class=\"n\">m_2</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"n\">tactic</span> <span class=\"bp\">?</span><span class=\"n\">m_1</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">?</span>\n<span class=\"n\">state</span><span class=\"o\">:</span>\n<span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">,</span>\n<span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">,</span>\n<span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span> <span class=\"bp\">|</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">∉</span> <span class=\"n\">x</span><span class=\"o\">},</span>\n<span class=\"n\">B'</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"bp\">∧</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">B</span><span class=\"o\">},</span>\n<span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">function.injective</span> <span class=\"n\">f</span><span class=\"o\">,</span>\n<span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">B'</span> <span class=\"bp\">∉</span> <span class=\"n\">B'</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">false</span>\n</code></pre></div>",
        "id": 281202841,
        "sender_full_name": "Joseph O",
        "timestamp": 1651690425
    },
    {
        "content": "<p>Right, <code>mem_set_of_eq</code> is a lemma, so you'd write <code>rw mem_set_of_eq</code></p>",
        "id": 281202927,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1651690446
    },
    {
        "content": "<p>Oh right</p>",
        "id": 281202943,
        "sender_full_name": "Joseph O",
        "timestamp": 1651690453
    },
    {
        "content": "<p>Now our goal is </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">α</span><span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"n\">f</span><span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span>\n<span class=\"n\">B</span><span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span> <span class=\"bp\">|</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">∉</span> <span class=\"n\">x</span><span class=\"o\">}</span>\n<span class=\"n\">B'</span><span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"bp\">∧</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">B</span><span class=\"o\">}</span>\n<span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">function.injective</span> <span class=\"n\">f</span>\n<span class=\"n\">hp</span><span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">B'</span> <span class=\"bp\">∉</span> <span class=\"n\">B'</span>\n<span class=\"bp\">⊢</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">B'</span> <span class=\"bp\">∧</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">B</span>\n</code></pre></div>",
        "id": 281203113,
        "sender_full_name": "Joseph O",
        "timestamp": 1651690538
    },
    {
        "content": "<p>Okay, so how do you prove an existential?</p>",
        "id": 281203254,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1651690598
    },
    {
        "content": "<p><code>mem_set_of</code></p>",
        "id": 281203490,
        "sender_full_name": "Joseph O",
        "timestamp": 1651690705
    },
    {
        "content": "<p>I believe</p>",
        "id": 281203536,
        "sender_full_name": "Joseph O",
        "timestamp": 1651690730
    },
    {
        "content": "<p>How would you prove this?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">10</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 281203811,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1651690828
    },
    {
        "content": "<p>I honestly dont know.</p>",
        "id": 281204299,
        "sender_full_name": "Joseph O",
        "timestamp": 1651691036
    },
    {
        "content": "<p>Is there a tactic for that?</p>",
        "id": 281204602,
        "sender_full_name": "Joseph O",
        "timestamp": 1651691171
    },
    {
        "content": "<p>Generally, the easiest way to prove something exists with some property is by saying \"look, this object works\", and the tactic is <code>use B'</code></p>",
        "id": 281204729,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1651691253
    },
    {
        "content": "<p>Or in Arthur's example, <code>use 5</code></p>",
        "id": 281204898,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1651691330
    },
    {
        "content": "<p>I see.</p>",
        "id": 281205078,
        "sender_full_name": "Joseph O",
        "timestamp": 1651691414
    },
    {
        "content": "<p>Now the goal is </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">α</span><span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"n\">f</span><span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span>\n<span class=\"n\">B</span><span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span> <span class=\"bp\">|</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">∉</span> <span class=\"n\">x</span><span class=\"o\">}</span>\n<span class=\"n\">B'</span><span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"bp\">∧</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">B</span><span class=\"o\">}</span>\n<span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">function.injective</span> <span class=\"n\">f</span>\n<span class=\"n\">hp</span><span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">B'</span> <span class=\"bp\">∉</span> <span class=\"n\">B'</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">f</span> <span class=\"n\">B'</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">B'</span> <span class=\"bp\">∧</span> <span class=\"n\">B'</span> <span class=\"bp\">∈</span> <span class=\"n\">B</span>\n</code></pre></div>",
        "id": 281205154,
        "sender_full_name": "Joseph O",
        "timestamp": 1651691458
    },
    {
        "content": "<p>If you do <code>use 5</code> Lean will close the goal automatically because the property is too simple. But that's not always the case. If Lean can't prove the property automatically, it will turn the property into a goal for you to prove it</p>",
        "id": 281205177,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1651691471
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"467926\">Joseph O</span> <a href=\"#narrow/stream/113489-new-members/topic/proving.20cantor_injective/near/281205154\">said</a>:</p>\n<blockquote>\n<p>Now the goal is </p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">α</span><span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"n\">f</span><span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span>\n<span class=\"n\">B</span><span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span> <span class=\"bp\">|</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">∉</span> <span class=\"n\">x</span><span class=\"o\">}</span>\n<span class=\"n\">B'</span><span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"bp\">∧</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">B</span><span class=\"o\">}</span>\n<span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">function.injective</span> <span class=\"n\">f</span>\n<span class=\"n\">hp</span><span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">B'</span> <span class=\"bp\">∉</span> <span class=\"n\">B'</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">f</span> <span class=\"n\">B'</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">B'</span> <span class=\"bp\">∧</span> <span class=\"n\">B'</span> <span class=\"bp\">∈</span> <span class=\"n\">B</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>If we split the goal the first can be proved with <code>refl</code>, but the second...</p>",
        "id": 281205348,
        "sender_full_name": "Joseph O",
        "timestamp": 1651691552
    },
    {
        "content": "<p>The second is again of the form something in { ... | ... }</p>",
        "id": 281205442,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1651691607
    },
    {
        "content": "<p>Oh we can use <code>mem_set_of_eq</code></p>",
        "id": 281205467,
        "sender_full_name": "Joseph O",
        "timestamp": 1651691624
    },
    {
        "content": "<p>Ok i proved it</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">f</span><span class=\"o\">(</span><span class=\"n\">B'</span><span class=\"o\">)</span> <span class=\"bp\">∈</span> <span class=\"n\">B'</span> <span class=\"o\">:=</span>\n    <span class=\"kd\">begin</span>\n      <span class=\"n\">rw</span> <span class=\"n\">mem_set_of_eq</span><span class=\"o\">,</span>\n      <span class=\"n\">use</span> <span class=\"n\">B'</span><span class=\"o\">,</span>\n      <span class=\"n\">split</span><span class=\"o\">,</span>\n      <span class=\"o\">{</span> <span class=\"n\">refl</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n      <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">mem_set_of_eq</span><span class=\"o\">,</span>\n        <span class=\"n\">exact</span> <span class=\"n\">hp</span><span class=\"o\">,</span> <span class=\"o\">}</span>\n    <span class=\"kd\">end</span><span class=\"o\">,</span>\n</code></pre></div>",
        "id": 281205616,
        "sender_full_name": "Joseph O",
        "timestamp": 1651691692
    },
    {
        "content": "<p>The final proof, completed!</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">cantor_injective</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">¬</span><span class=\"n\">function.injective</span> <span class=\"n\">f</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">set</span> <span class=\"n\">B</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span> <span class=\"bp\">|</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">∉</span> <span class=\"n\">x</span><span class=\"o\">},</span>\n  <span class=\"n\">set</span> <span class=\"n\">B'</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"bp\">∧</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">B</span><span class=\"o\">},</span>\n  <span class=\"n\">by_contradiction</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">f</span><span class=\"o\">(</span><span class=\"n\">B'</span><span class=\"o\">)</span> <span class=\"bp\">∈</span> <span class=\"n\">B'</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"n\">f</span><span class=\"o\">(</span><span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span><span class=\"o\">(</span><span class=\"n\">B'</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"n\">f</span><span class=\"o\">(</span><span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"bp\">∉</span> <span class=\"n\">X</span> <span class=\"o\">:=</span> <span class=\"n\">mem_set_of.mp</span> <span class=\"n\">hp</span><span class=\"o\">,</span>\n    <span class=\"n\">cases</span> <span class=\"n\">this</span> <span class=\"k\">with</span> <span class=\"n\">s</span> <span class=\"n\">hs</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"n\">hs.1</span><span class=\"o\">)</span> <span class=\"n\">at</span> <span class=\"n\">hp</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">hp'</span> <span class=\"o\">:=</span> <span class=\"n\">hs.2</span><span class=\"o\">,</span>\n    <span class=\"n\">contradiction</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">f</span><span class=\"o\">(</span><span class=\"n\">B'</span><span class=\"o\">)</span> <span class=\"bp\">∈</span> <span class=\"n\">B'</span> <span class=\"o\">:=</span>\n    <span class=\"kd\">begin</span>\n      <span class=\"n\">rw</span> <span class=\"n\">mem_set_of_eq</span><span class=\"o\">,</span>\n      <span class=\"n\">use</span> <span class=\"n\">B'</span><span class=\"o\">,</span>\n      <span class=\"n\">split</span><span class=\"o\">,</span>\n      <span class=\"o\">{</span> <span class=\"n\">refl</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n      <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">mem_set_of_eq</span><span class=\"o\">,</span>\n        <span class=\"n\">exact</span> <span class=\"n\">hp</span><span class=\"o\">,</span> <span class=\"o\">}</span>\n    <span class=\"kd\">end</span><span class=\"o\">,</span>\n    <span class=\"n\">contradiction</span><span class=\"o\">,</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 281205678,
        "sender_full_name": "Joseph O",
        "timestamp": 1651691725
    },
    {
        "content": "<p>and lean says its correct!</p>",
        "id": 281205687,
        "sender_full_name": "Joseph O",
        "timestamp": 1651691730
    },
    {
        "content": "<p>(I'm not sure why we have both <code>mem_set_of</code> and <code>mem_set_of_eq</code>, but either works here)</p>",
        "id": 281205967,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1651691882
    },
    {
        "content": "<p>This is the formatting you'll see more often in mathlib:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">cantor_injective</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">¬</span><span class=\"n\">function.injective</span> <span class=\"n\">f</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">set</span> <span class=\"n\">B</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span> <span class=\"bp\">|</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">∉</span> <span class=\"n\">x</span><span class=\"o\">},</span>\n  <span class=\"n\">set</span> <span class=\"n\">B'</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"bp\">∧</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">B</span><span class=\"o\">},</span>\n  <span class=\"n\">by_contradiction</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">f</span><span class=\"o\">(</span><span class=\"n\">B'</span><span class=\"o\">)</span> <span class=\"bp\">∈</span> <span class=\"n\">B'</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"n\">f</span><span class=\"o\">(</span><span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span><span class=\"o\">(</span><span class=\"n\">B'</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"n\">f</span><span class=\"o\">(</span><span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"bp\">∉</span> <span class=\"n\">X</span> <span class=\"o\">:=</span> <span class=\"n\">mem_set_of.mp</span> <span class=\"n\">hp</span><span class=\"o\">,</span>\n    <span class=\"n\">cases</span> <span class=\"n\">this</span> <span class=\"k\">with</span> <span class=\"n\">s</span> <span class=\"n\">hs</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"n\">hs.1</span><span class=\"o\">)</span> <span class=\"n\">at</span> <span class=\"n\">hp</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">hp'</span> <span class=\"o\">:=</span> <span class=\"n\">hs.2</span><span class=\"o\">,</span>\n    <span class=\"n\">contradiction</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">f</span><span class=\"o\">(</span><span class=\"n\">B'</span><span class=\"o\">)</span> <span class=\"bp\">∈</span> <span class=\"n\">B'</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">mem_set_of_eq</span><span class=\"o\">,</span>\n      <span class=\"n\">use</span> <span class=\"n\">B'</span><span class=\"o\">,</span>\n      <span class=\"n\">split</span><span class=\"o\">,</span>\n      <span class=\"o\">{</span> <span class=\"n\">refl</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n      <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">mem_set_of_eq</span><span class=\"o\">,</span>\n        <span class=\"n\">exact</span> <span class=\"n\">hp</span><span class=\"o\">,</span> <span class=\"o\">},</span> <span class=\"o\">},</span>\n    <span class=\"n\">contradiction</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 281206115,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1651691967
    },
    {
        "content": "<p>(<a href=\"https://leanprover-community.github.io/mathlib_docs/find/set.mem_set_of_eq\">docs#set.mem_set_of_eq</a> is <del>in core, and</del> stated weirdly; <a href=\"https://leanprover-community.github.io/mathlib_docs/find/set.mem_set_of\">docs#set.mem_set_of</a> is newer and is less weird)</p>",
        "id": 281206225,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1651692040
    },
    {
        "content": "<p>Yeah I switched them all to <code>mem_set_of</code></p>",
        "id": 281206311,
        "sender_full_name": "Joseph O",
        "timestamp": 1651692092
    },
    {
        "content": "<p>Now this is something I recall reading from one of those backstage interviews: that sometimes the focus on typechecking can obfuscate the bigger mathematical picture. Now that you've proven it in Lean, would you be able to write a proof of your own, with your words?</p>",
        "id": 281206664,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1651692262
    },
    {
        "content": "<p>Not that I'm saying that you should post it here. It's an investigation that you can do on your own. It's definitely something I do</p>",
        "id": 281206940,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1651692410
    },
    {
        "content": "<p>Optional: you might be able to learn some tricks by comparing your version with this shorter version:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">cantor_injective</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">¬</span><span class=\"n\">function.injective</span> <span class=\"n\">f</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">set</span> <span class=\"n\">B</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span> <span class=\"bp\">|</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">∉</span> <span class=\"n\">x</span><span class=\"o\">},</span>\n  <span class=\"n\">set</span> <span class=\"n\">B'</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"bp\">∧</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">B</span><span class=\"o\">},</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">B'</span> <span class=\"bp\">∈</span> <span class=\"n\">B'</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">hs</span><span class=\"o\">⟩</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">X</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">B'</span> <span class=\"bp\">∧</span> <span class=\"n\">f</span> <span class=\"n\">X</span> <span class=\"bp\">∉</span> <span class=\"n\">X</span> <span class=\"o\">:=</span> <span class=\"n\">set.mem_set_of_eq.mp</span> <span class=\"n\">hp</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"n\">hs.1</span><span class=\"o\">)</span> <span class=\"n\">at</span> <span class=\"n\">hp</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">hs.2</span> <span class=\"n\">hp</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">hp</span> <span class=\"o\">⟨</span><span class=\"n\">B'</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">,</span> <span class=\"n\">hp</span><span class=\"o\">⟩,</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 281207040,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1651692463
    },
    {
        "content": "<p>Oh man thats crazy</p>",
        "id": 281210155,
        "sender_full_name": "Joseph O",
        "timestamp": 1651693724
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"307953\">Ruben Van de Velde</span> <a href=\"#narrow/stream/113489-new-members/topic/proving.20cantor_injective/near/281207040\">said</a>:</p>\n<blockquote>\n<p>Optional: you might be able to learn some tricks by comparing your version with this shorter version:</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">cantor_injective</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">¬</span><span class=\"n\">function.injective</span> <span class=\"n\">f</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">set</span> <span class=\"n\">B</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span> <span class=\"bp\">|</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">∉</span> <span class=\"n\">x</span><span class=\"o\">},</span>\n  <span class=\"n\">set</span> <span class=\"n\">B'</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"bp\">∧</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">B</span><span class=\"o\">},</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">B'</span> <span class=\"bp\">∈</span> <span class=\"n\">B'</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">hs</span><span class=\"o\">⟩</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">X</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">B'</span> <span class=\"bp\">∧</span> <span class=\"n\">f</span> <span class=\"n\">X</span> <span class=\"bp\">∉</span> <span class=\"n\">X</span> <span class=\"o\">:=</span> <span class=\"n\">set.mem_set_of_eq.mp</span> <span class=\"n\">hp</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"n\">hs.1</span><span class=\"o\">)</span> <span class=\"n\">at</span> <span class=\"n\">hp</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">hs.2</span> <span class=\"n\">hp</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">hp</span> <span class=\"o\">⟨</span><span class=\"n\">B'</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">,</span> <span class=\"n\">hp</span><span class=\"o\">⟩,</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>Ill keep this on the side as a shorter variation, though I will stick to my version for now as a beginner and its more expressive despite being verbose</p>",
        "id": 281210220,
        "sender_full_name": "Joseph O",
        "timestamp": 1651693769
    },
    {
        "content": "<p>deleted</p>",
        "id": 281210375,
        "sender_full_name": "Joseph O",
        "timestamp": 1651693819
    },
    {
        "content": "<p>There are so many things I dont understand about the proof though</p>",
        "id": 281210712,
        "sender_full_name": "Joseph O",
        "timestamp": 1651693985
    },
    {
        "content": "<p>Well actually I understand it</p>",
        "id": 281210809,
        "sender_full_name": "Joseph O",
        "timestamp": 1651694029
    },
    {
        "content": "<p>My biggest question is how </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">⟨</span><span class=\"n\">B'</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">,</span> <span class=\"n\">hp</span><span class=\"o\">⟩</span>\n</code></pre></div>\n<p>is equivalent to </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">f</span><span class=\"o\">(</span><span class=\"n\">B'</span><span class=\"o\">)</span> <span class=\"bp\">∈</span> <span class=\"n\">B'</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">mem_set_of</span><span class=\"o\">,</span>\n      <span class=\"n\">use</span> <span class=\"n\">B'</span><span class=\"o\">,</span>\n      <span class=\"n\">split</span><span class=\"o\">,</span>\n      <span class=\"o\">{</span> <span class=\"n\">refl</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n      <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">mem_set_of</span><span class=\"o\">,</span>\n        <span class=\"n\">exact</span> <span class=\"n\">hp</span><span class=\"o\">,</span> <span class=\"o\">},</span> <span class=\"o\">},</span>\n</code></pre></div>",
        "id": 281210926,
        "sender_full_name": "Joseph O",
        "timestamp": 1651694072
    },
    {
        "content": "<p>Thats it</p>",
        "id": 281210940,
        "sender_full_name": "Joseph O",
        "timestamp": 1651694076
    },
    {
        "content": "<p><code>rw mem_set_of</code> is a \"no-op\" because its proof is <code>iff.rfl</code>, that is both sides are definitionally equal. <code>use B'</code>, is the same as <code>refine ⟨B', _⟩</code>, <code>split</code> is the same as <code>refine ⟨_, _⟩</code>.</p>",
        "id": 281211166,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1651694178
    },
    {
        "content": "<p>That makes sense, though Im still confused how <code>rw mem_set_of</code> is implicitly applied</p>",
        "id": 281211907,
        "sender_full_name": "Joseph O",
        "timestamp": 1651694480
    },
    {
        "content": "<p>It's not applied or anything. It's simply that, when you give Lean something, it tries to \"unify\" it, which means performing a bunch of operations, notably replacing everything by its definition.</p>",
        "id": 281212176,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1651694583
    },
    {
        "content": "<p>The <em>definition</em> of <code>f B' ∈ B'</code> is <code>f B' ∈ {y : α | ∃ x : set α, f x = y ∧ x ∈ B}</code>, whose <em>definition</em> is <code>∃ x : set α, f x = f B' ∧ x ∈ B}</code>.</p>",
        "id": 281212330,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1651694663
    },
    {
        "content": "<p>Yes</p>",
        "id": 281214094,
        "sender_full_name": "Joseph O",
        "timestamp": 1651695578
    },
    {
        "content": "<p>That makes sense</p>",
        "id": 281214107,
        "sender_full_name": "Joseph O",
        "timestamp": 1651695588
    },
    {
        "content": "<p>How could we use some shortcuts on this proof?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">cantor_surjective'</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">¬</span><span class=\"n\">function.surjective</span> <span class=\"n\">f</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">set</span> <span class=\"n\">B</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">|</span> <span class=\"n\">x</span> <span class=\"bp\">∉</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">},</span>\n  <span class=\"n\">by_contradiction</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">ξ</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"n\">ξ</span> <span class=\"bp\">=</span> <span class=\"n\">B</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">h</span> <span class=\"n\">B</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">rcases</span> <span class=\"n\">this</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">ξ</span><span class=\"o\">,</span> <span class=\"n\">fx</span><span class=\"o\">⟩,</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">ξ</span> <span class=\"bp\">∈</span> <span class=\"n\">B</span> <span class=\"bp\">↔</span> <span class=\"n\">ξ</span> <span class=\"bp\">∉</span> <span class=\"n\">f</span><span class=\"o\">(</span><span class=\"n\">ξ</span><span class=\"o\">),</span>\n    <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">mem_set_of</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">fx</span> <span class=\"n\">at</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n      <span class=\"n\">exact</span> <span class=\"n\">p_equiv_np_implies_false</span> <span class=\"n\">_</span> <span class=\"n\">this</span><span class=\"o\">,</span> <span class=\"o\">}}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 281214428,
        "sender_full_name": "Joseph O",
        "timestamp": 1651695740
    },
    {
        "content": "<p>But still keeping the overall structure</p>",
        "id": 281214438,
        "sender_full_name": "Joseph O",
        "timestamp": 1651695747
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">cantor_surjective'</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">¬</span><span class=\"n\">function.surjective</span> <span class=\"n\">f</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">set</span> <span class=\"n\">B</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">|</span> <span class=\"n\">x</span> <span class=\"bp\">∉</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">},</span>\n  <span class=\"n\">by_contradiction</span><span class=\"o\">,</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">ξ</span><span class=\"o\">,</span> <span class=\"n\">fx</span><span class=\"o\">⟩</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">ξ</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">ξ</span> <span class=\"bp\">=</span> <span class=\"n\">B</span> <span class=\"o\">:=</span> <span class=\"n\">h</span> <span class=\"n\">B</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">ξ</span> <span class=\"bp\">∈</span> <span class=\"n\">B</span> <span class=\"bp\">↔</span> <span class=\"n\">ξ</span> <span class=\"bp\">∉</span> <span class=\"n\">f</span><span class=\"o\">(</span><span class=\"n\">ξ</span><span class=\"o\">),</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">mem_set_of</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">fx</span> <span class=\"n\">at</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">p_equiv_np_implies_false</span> <span class=\"n\">_</span> <span class=\"n\">this</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 281214661,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1651695864
    },
    {
        "content": "<p>Ah yes I was looking for a way to use obtain</p>",
        "id": 281214885,
        "sender_full_name": "Joseph O",
        "timestamp": 1651695981
    },
    {
        "content": "<p>Thanks for the help everyone</p>",
        "id": 281217928,
        "sender_full_name": "Joseph O",
        "timestamp": 1651697609
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"467926\">Joseph O</span> has marked this topic as resolved.</p>",
        "id": 281217935,
        "sender_full_name": "Notification Bot",
        "timestamp": 1651697613
    },
    {
        "content": "<p>By the way, would you suggest <code>intro h</code> or <code>by_contradiction h</code>. I think the latter expresses the intent more</p>",
        "id": 281238798,
        "sender_full_name": "Joseph O",
        "timestamp": 1651710439
    },
    {
        "content": "<p>Those mean/do very different things in general. I guess in this particular case they have the same effect though via double negation elimination? I would choose <code>intro h</code> and only use <code>by_contradiction</code> for when it is actually needed, but mathlib doesn't care too much about constructive mathematics so it's not that important.</p>",
        "id": 281245893,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1651718565
    },
    {
        "content": "<p>I've never seen a slow <code>intro</code>, but I've experienced a slow <code>by_contradiction</code> before</p>",
        "id": 281246554,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1651719257
    },
    {
        "content": "<p>Pro tip: if you're stuck on a proof you know, write it down on paper, then translate into Lean</p>",
        "id": 281246595,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1651719313
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"197836\">Jireh Loreaux</span> <a href=\"#narrow/stream/113489-new-members/topic/.E2.9C.94.20proving.20cantor_injective/near/281245893\">said</a>:</p>\n<blockquote>\n<p>Those mean/do very different things in general. I guess in this particular case they have the same effect though via double negation elimination? I would choose <code>intro h</code> and only use <code>by_contradiction</code> for when it is actually needed, but mathlib doesn't care too much about constructive mathematics so it's not that important.</p>\n</blockquote>\n<p>That makes sense</p>",
        "id": 281292301,
        "sender_full_name": "Joseph O",
        "timestamp": 1651754190
    },
    {
        "content": "<p>Like in the shorter version provided by <span class=\"user-mention\" data-user-id=\"307953\">@Ruben Van de Velde</span>, <code>intro h</code> was used instead of <code>by_contradiction h</code>, and they did the same thing</p>",
        "id": 281292358,
        "sender_full_name": "Joseph O",
        "timestamp": 1651754222
    },
    {
        "content": "<p>I believe <code>by_contra</code> just checks if it's applied to a negation and uses <code>intro</code> instead in that case</p>",
        "id": 281292461,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1651754279
    },
    {
        "content": "<p>Another way too think about <code>by_contra</code> is that it applies <a href=\"https://leanprover-community.github.io/mathlib_docs/find/of_not_not\">docs#of_not_not</a> if the goal doesn't start with ¬ (<a href=\"https://leanprover-community.github.io/mathlib_docs/find/not\">docs#not</a>) to make it so that it does, and then applies <code>intro</code></p>",
        "id": 281293740,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1651754848
    }
]