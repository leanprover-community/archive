[
    {
        "content": "<p>Why doesn't the local context where the first <code>sorry</code> is <code>meet</code> below reflect <code>rec_on</code>'s current case, which I think should be <code>x=zero</code> or something like that?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">universe</span> <span class=\"n\">u</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">P</span> <span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">flats_lattice</span>  <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"o\">:</span> <span class=\"n\">flats_lattice</span>\n<span class=\"bp\">|</span> <span class=\"n\">one</span> <span class=\"o\">:</span> <span class=\"n\">flats_lattice</span>\n<span class=\"bp\">|</span> <span class=\"n\">points</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">flats_lattice</span>\n<span class=\"bp\">|</span> <span class=\"n\">lines</span>  <span class=\"o\">(</span><span class=\"n\">l</span><span class=\"o\">:</span> <span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">flats_lattice</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">flats_lattice</span>\n\n\n<span class=\"kd\">def</span> <span class=\"n\">meet</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">flats_lattice</span> <span class=\"n\">P</span> <span class=\"n\">L</span><span class=\"o\">)</span>  <span class=\"o\">:</span> <span class=\"n\">flats_lattice</span> <span class=\"n\">P</span> <span class=\"n\">L</span> <span class=\"o\">:=</span> <span class=\"n\">flats_lattice.rec_on</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"gr\">sorry</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"gr\">sorry</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"gr\">sorry</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"gr\">sorry</span><span class=\"o\">)</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">flats_lattice</span>\n</code></pre></div>",
        "id": 342789528,
        "sender_full_name": "Quinn Culver",
        "timestamp": 1679148828
    },
    {
        "content": "<p>This looks to me like it's working as intended. Everything is a function and if you hover over function names you'll see what inputs they're expecting. What exactly are you confused about?</p>",
        "id": 342796446,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1679151364
    },
    {
        "content": "<p><code>flats_lattice.rec_on</code> does not let you <em>substitute</em> <code>zero</code> for <code>x</code>. Instead it lets you define a function <code>f : flats_lattice P L → α</code> such that <code>f zero</code> is whatever you gave <code>flats_lattice.rec_on</code>.</p>",
        "id": 342801051,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1679153041
    },
    {
        "content": "<p>If <code>x</code> appeared in the result type of <code>meet</code>, then it would have <code>zero</code>, etc. substituted for it in the different branches, but here the result type is always <code>flats_lattice P L</code>.</p>",
        "id": 342801732,
        "sender_full_name": "Reid Barton",
        "timestamp": 1679153273
    },
    {
        "content": "<p>I'm confused because the local context only shows <code>x y : flats_lattice P L</code> where I expect it to indicate somehow that I'm defining the function in the case where <code>x</code> is <code>zero</code>.</p>",
        "id": 342803788,
        "sender_full_name": "Quinn Culver",
        "timestamp": 1679154021
    },
    {
        "content": "<p>If I replace that first <code>sorry</code> by <code>(λ f, zero)</code>, have I correctly defined that <code>meet zero y = zero</code> for every <code>y</code>?</p>",
        "id": 342803796,
        "sender_full_name": "Quinn Culver",
        "timestamp": 1679154024
    },
    {
        "content": "<p>I would not recommend using <code>rec_on</code> manually</p>",
        "id": 342805601,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1679154761
    },
    {
        "content": "<p>Use the equation compiler instead</p>",
        "id": 342805607,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1679154765
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">meet</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">flats_lattice</span> <span class=\"n\">P</span> <span class=\"n\">L</span><span class=\"o\">),</span> <span class=\"n\">flats_lattice</span> <span class=\"n\">P</span>\n<span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">zero</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"n\">zero</span> <span class=\"o\">:=</span> <span class=\"n\">zero</span>\n<span class=\"bp\">|</span> <span class=\"n\">one</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">x</span>\n<span class=\"bp\">|</span> <span class=\"n\">x</span> <span class=\"n\">one</span> <span class=\"o\">:=</span> <span class=\"n\">x</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">point</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">point</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">if</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"n\">q</span> <span class=\"k\">then</span> <span class=\"n\">point</span> <span class=\"n\">p</span> <span class=\"k\">else</span> <span class=\"n\">line</span> <span class=\"n\">_</span>\n<span class=\"c1\">-- etc. Don't trust anything I wrote on the right of `:=`!</span>\n</code></pre></div>",
        "id": 342805694,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1679154820
    },
    {
        "content": "<p>You'll then get an error message for each case you forget to cover</p>",
        "id": 342805755,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1679154842
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"245476\">Quinn Culver</span> has marked this topic as resolved.</p>",
        "id": 342937888,
        "sender_full_name": "Notification Bot",
        "timestamp": 1679233771
    }
]