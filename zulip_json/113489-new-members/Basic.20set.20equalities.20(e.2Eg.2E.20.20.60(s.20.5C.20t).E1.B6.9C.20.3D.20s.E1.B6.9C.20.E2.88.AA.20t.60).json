[
    {
        "content": "<p>I needed the set equality <code>(s \\ t)ᶜ = sᶜ ∪ t</code>, which doesn't seem to be in Mathlib, although it seems common (Wikipedia's \"Set Complement\" mentions it). That should mean it's very easy?! I did it eventually (see below for completeness) but isn't there a simple way to prove this in one line? The tactics I usually try <code>exact?, aesop, simp_all, rfl, trivial, apply?</code> couldn't do it...</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n<span class=\"kn\">open</span> <span class=\"n\">Set</span>\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">mem_and_notmem_of_in_diff</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span> <span class=\"bp\">\\</span> <span class=\"n\">t</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span> <span class=\"bp\">∧</span> <span class=\"n\">x</span> <span class=\"bp\">∉</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">mem_and_notmem_of_notin_diff</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∉</span> <span class=\"n\">s</span> <span class=\"bp\">\\</span> <span class=\"n\">t</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">∉</span> <span class=\"n\">s</span> <span class=\"bp\">∨</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">Iff.not</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">mem_and_notmem_of_in_diff</span> <span class=\"n\">α</span> <span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n    <span class=\"n\">push_neg</span> <span class=\"n\">at</span> <span class=\"n\">this</span>\n    <span class=\"n\">convert</span> <span class=\"n\">this</span> <span class=\"c1\">-- I was hoping to be done here...</span>\n    <span class=\"n\">constructor</span>\n    <span class=\"n\">intro</span> <span class=\"n\">h</span> <span class=\"n\">xins</span>\n    <span class=\"n\">simp_all</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">false_or</span><span class=\"o\">]</span>\n    <span class=\"n\">intro</span> <span class=\"n\">h</span>\n    <span class=\"n\">by_cases</span> <span class=\"n\">xins</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span>\n    <span class=\"bp\">·</span> <span class=\"n\">right</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">h</span> <span class=\"n\">xins</span>\n    <span class=\"bp\">·</span> <span class=\"n\">left</span><span class=\"bp\">;</span> <span class=\"n\">assumption</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">compl_diff_eq_union_compl</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"bp\">\\</span> <span class=\"n\">t</span><span class=\"o\">)</span><span class=\"bp\">ᶜ</span> <span class=\"bp\">=</span> <span class=\"n\">s</span><span class=\"bp\">ᶜ</span> <span class=\"bp\">∪</span> <span class=\"n\">t</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">ext</span> <span class=\"n\">x</span>\n    <span class=\"n\">constructor</span>\n    <span class=\"bp\">·</span> <span class=\"n\">intro</span> <span class=\"n\">h</span>\n      <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">Set.mem_compl_iff</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"bp\">\\</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mp</span> <span class=\"n\">h</span>\n      <span class=\"n\">exact</span> <span class=\"n\">mem_and_notmem_of_notin_diff.mp</span> <span class=\"n\">this</span>\n    <span class=\"bp\">·</span> <span class=\"n\">intro</span> <span class=\"n\">h</span>\n      <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n      <span class=\"n\">apply</span> <span class=\"n\">mem_compl</span>\n      <span class=\"n\">apply</span> <span class=\"n\">mem_and_notmem_of_notin_diff.mpr</span>\n      <span class=\"n\">exact</span> <span class=\"n\">h</span>\n</code></pre></div>",
        "id": 400206624,
        "sender_full_name": "Adomas Baliuka",
        "timestamp": 1699046467
    },
    {
        "content": "<p>This</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Set</span>\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">compl_diff_eq_union_compl</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"bp\">\\</span> <span class=\"n\">t</span><span class=\"o\">)</span><span class=\"bp\">ᶜ</span> <span class=\"bp\">=</span> <span class=\"n\">s</span><span class=\"bp\">ᶜ</span> <span class=\"bp\">∪</span> <span class=\"n\">t</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">nth_rewrite</span> <span class=\"mi\">2</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">compl_compl</span> <span class=\"n\">t</span><span class=\"o\">]</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">compl_inter</span><span class=\"o\">]</span>\n    <span class=\"n\">rfl</span>\n</code></pre></div>\n<p>also works, let me see if I find the exact statement you want.</p>",
        "id": 400209124,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1699048161
    },
    {
        "content": "<p>Alternatively, we can do</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Set.Basic</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">compl_diff_eq_union_compl</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"bp\">\\</span> <span class=\"n\">t</span><span class=\"o\">)</span><span class=\"bp\">ᶜ</span> <span class=\"bp\">=</span> <span class=\"n\">s</span><span class=\"bp\">ᶜ</span> <span class=\"bp\">∪</span> <span class=\"n\">t</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">ext</span> <span class=\"n\">x</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">compl_sdiff</span><span class=\"o\">,</span> <span class=\"n\">Set.mem_union</span><span class=\"o\">,</span> <span class=\"n\">Set.mem_compl_iff</span><span class=\"o\">]</span>\n  <span class=\"n\">tauto</span>\n</code></pre></div>",
        "id": 400209537,
        "sender_full_name": "Joël Riou",
        "timestamp": 1699048399
    },
    {
        "content": "<p>How did you do this so quickly? I don't assume it's by having all these lemma names memorized.</p>",
        "id": 400209660,
        "sender_full_name": "Adomas Baliuka",
        "timestamp": 1699048473
    },
    {
        "content": "<p>I did <code>ext; simp?; tauto</code>!</p>",
        "id": 400209710,
        "sender_full_name": "Joël Riou",
        "timestamp": 1699048507
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Set</span>\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">compl_diff_eq_union_compl</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"bp\">\\</span> <span class=\"n\">t</span><span class=\"o\">)</span><span class=\"bp\">ᶜ</span> <span class=\"bp\">=</span> <span class=\"n\">s</span><span class=\"bp\">ᶜ</span> <span class=\"bp\">∪</span> <span class=\"n\">t</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">himp_eq</span><span class=\"o\">,</span> <span class=\"n\">Set.union_comm</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 400209954,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1699048641
    },
    {
        "content": "<p>OK let's stop the golfing competition... but it's a result we surely want.</p>",
        "id": 400210054,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1699048689
    },
    {
        "content": "<p>Thanks! I guess the takeaway for me is to add <code>simp?</code> to my \"list of things to try\". (Could one make a multi-threaded tactic that just tries all of <code>exact?, aesop, simp_all, rfl, trivial, apply?, simp?</code> at the same time and shows the first hit (or fails)?)</p>\n<p>Actually, maybe my goal does exist in Mathlib after all as <code>compl_sdiff</code>. It uses a \"Heyting implication\" (the reason I didn't find it using loogle), which I've never heard of before...</p>",
        "id": 400210220,
        "sender_full_name": "Adomas Baliuka",
        "timestamp": 1699048797
    },
    {
        "content": "<p>Yeah, this is a more serious question. Heyting implication is something in Boolean algebra (and <code>Set  α</code> is a Boolean algebra), so <code>simp</code> is applying <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=compl_sdiff#doc\">docs#compl_sdiff</a>, that says</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">\\</span> <span class=\"n\">y</span><span class=\"o\">)</span><span class=\"bp\">ᶜ</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">⇨</span> <span class=\"n\">y</span>\n</code></pre></div>\n<p>Now, for sets it is completely ridiculous to say that the RHS is simpler than the LHS.</p>",
        "id": 400210633,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1699048942
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span> what do you think? (pinging you because git blames you as the author of <code>compl_sdiff</code>, but it can be wrong).</p>",
        "id": 400211107,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1699049178
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"130384\">Riccardo Brasca</span> <a href=\"#narrow/stream/113489-new-members/topic/Basic.20set.20equalities.20.28e.2Eg.2E.20.20.60.28s.20.5C.20t.29.E1.B6.9C.20.3D.20s.E1.B6.9C.20.E2.88.AA.20t.60.29/near/400210633\">said</a>:</p>\n<blockquote>\n<p>Now, for sets it is completely ridiculous to say that the RHS is simpler than the LHS.</p>\n</blockquote>\n<p>You're free to add</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span> <span class=\"kd\">lemma</span> <span class=\"n\">Set.himp_eq</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"bp\">⇨</span> <span class=\"n\">t</span> <span class=\"bp\">=</span> <span class=\"n\">t</span> <span class=\"bp\">∪</span> <span class=\"n\">s</span><span class=\"bp\">ᶜ</span> <span class=\"o\">:=</span> <span class=\"n\">himp_eq</span>\n</code></pre></div>",
        "id": 400213252,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1699050579
    },
    {
        "content": "<p>I think it's a bit of a shame since <code>s ⇨ t</code> has a very nice interpretation: elements of <code>s ⇨ t</code> exactly are the elements <code>a</code> such that <code>a ∈ s → a ∈ t</code>.</p>",
        "id": 400213436,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1699050720
    },
    {
        "content": "<p>That seems like it might be a good example to add to the docstring for <code>himp</code></p>",
        "id": 400216624,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1699052719
    },
    {
        "content": "<p>I swear I wrote that example in a docstring somewhere already, but I'm happy to make it more prominent!</p>",
        "id": 400217685,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1699053355
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=HImp.himp#doc\">docs#HImp.himp</a></p>",
        "id": 400218853,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1699054272
    }
]