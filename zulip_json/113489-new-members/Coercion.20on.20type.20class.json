[
    {
        "content": "<p>I have defined the following type class:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">ToFloat</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">toFloat</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">Float</span>\n</code></pre></div>\n<p>I did expect this to work:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">ToFloat</span> <span class=\"n\">α</span><span class=\"o\">]:</span> <span class=\"n\">Coe</span> <span class=\"n\">α</span> <span class=\"n\">Float</span> <span class=\"n\">where</span>\n  <span class=\"n\">coe</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">ToFloat.toFloat</span> <span class=\"n\">x</span>\n</code></pre></div>\n<p>But I'm getting</p>\n<blockquote>\n<p>cannot find synthesization order for instance @instCoeFloat with type<br>\n  {α : Type u_1} → [inst : ToFloat α] → Coe α Float<br>\nall remaining arguments have metavariables:<br>\n  ToFloat ?α</p>\n</blockquote>\n<p>What does this mean, is it not possible?</p>",
        "id": 397711737,
        "sender_full_name": "Alexander Niederbühl",
        "timestamp": 1697809064
    },
    {
        "content": "<p>This is as <code>Coe</code> has the first argument (alpha), as a semi-out param (meaning that Lean will go looking for instances even if alpha is not yet known when inserting Coes). You probably should use <code>CoeHead</code> in place of <code>Coe</code></p>",
        "id": 397718455,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1697811105
    },
    {
        "content": "<p>Great, that works. Thanks you!</p>",
        "id": 397852052,
        "sender_full_name": "Alexander Niederbühl",
        "timestamp": 1697896628
    }
]