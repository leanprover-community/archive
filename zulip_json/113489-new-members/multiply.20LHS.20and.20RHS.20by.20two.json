[
    {
        "content": "<p>Silly question: how do I multiply the left and right hand sides of a proposition by <code>2</code>?</p>\n<p>I'm trying to get a proof for <code>sin (ω * x) * sin (ω * y) = (cos ( ω *(x - y))-cos (ω * (x + y)))/2</code>, I have so far</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">ω</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span><span class=\"n\">ℝ</span> <span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">sin</span> <span class=\"o\">(</span><span class=\"n\">ω</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">sin</span> <span class=\"o\">(</span><span class=\"n\">ω</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">cos</span> <span class=\"o\">(</span> <span class=\"n\">ω</span> <span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">y</span><span class=\"o\">))</span><span class=\"bp\">-</span><span class=\"n\">cos</span> <span class=\"o\">(</span><span class=\"n\">ω</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"o\">)))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">ring_nf</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">cos_add</span><span class=\"o\">,</span><span class=\"n\">cos_sub</span><span class=\"o\">]</span>\n  <span class=\"n\">simp</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mul_two</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 404092853,
        "sender_full_name": "Nicholas Wilson",
        "timestamp": 1700907631
    },
    {
        "content": "<p>also how do I solve </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"o\">):</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">+</span><span class=\"o\">(</span><span class=\"n\">b</span><span class=\"bp\">*</span><span class=\"mi\">2</span><span class=\"o\">)</span><span class=\"bp\">/</span><span class=\"mi\">4</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">+</span><span class=\"n\">b</span><span class=\"o\">)</span><span class=\"bp\">/</span><span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>simp failed. <code>ring</code> does work, but as a tactic converts <code>(1/2)</code> to <code>(↑(Int.ofNat 1) / ↑2)</code> (or <code>(↑(Int.negOfNat 1) / ↑2</code> depending on the sign. Is there a different tactic that will work here other than <code>ring</code> (which for the above reasons I'd prefer to avoid)?</p>",
        "id": 404106530,
        "sender_full_name": "Nicholas Wilson",
        "timestamp": 1700913868
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"o\">):</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">+</span><span class=\"o\">(</span><span class=\"n\">b</span><span class=\"bp\">*</span><span class=\"mi\">2</span><span class=\"o\">)</span><span class=\"bp\">/</span><span class=\"mi\">4</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">+</span><span class=\"n\">b</span><span class=\"o\">)</span><span class=\"bp\">/</span><span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">field_simp</span>\n  <span class=\"n\">ring</span>\n  <span class=\"n\">done</span> <span class=\"c1\">-- error here. From the tactic state, you can see the claim is wrong.</span>\n</code></pre></div>",
        "id": 404106602,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1700913957
    },
    {
        "content": "<p>argh, I forgot to recopy the corrected parens, sorry. <code>example (a b : ℝ ): ((a*2) +(b*2))/4 = (a+b)/2 := by ring</code> was what I meant.</p>",
        "id": 404106709,
        "sender_full_name": "Nicholas Wilson",
        "timestamp": 1700914029
    },
    {
        "content": "<p>Then the example is complete:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"o\">):</span> <span class=\"o\">((</span><span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">+</span><span class=\"o\">(</span><span class=\"n\">b</span><span class=\"bp\">*</span><span class=\"mi\">2</span><span class=\"o\">))</span><span class=\"bp\">/</span><span class=\"mi\">4</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">+</span><span class=\"n\">b</span><span class=\"o\">)</span><span class=\"bp\">/</span><span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">field_simp</span>\n  <span class=\"n\">ring</span>\n  <span class=\"n\">done</span>\n</code></pre></div>",
        "id": 404106946,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1700914259
    },
    {
        "content": "<p>If you want to avoid typing in <code>field_simp</code> followed by <code>ring</code> many times, you can use a simple macro:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n\n<span class=\"n\">macro</span> <span class=\"s2\">\"field\"</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span><span class=\"o\">(</span>\n      <span class=\"n\">field_simp</span>\n      <span class=\"n\">ring_nf</span>\n  <span class=\"o\">))</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"o\">):</span> <span class=\"o\">((</span><span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">+</span><span class=\"o\">(</span><span class=\"n\">b</span><span class=\"bp\">*</span><span class=\"mi\">2</span><span class=\"o\">))</span><span class=\"bp\">/</span><span class=\"mi\">4</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">+</span><span class=\"n\">b</span><span class=\"o\">)</span><span class=\"bp\">/</span><span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">field</span>\n  <span class=\"n\">done</span>\n</code></pre></div>",
        "id": 404107027,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1700914331
    },
    {
        "content": "<p>Thanks. For some reason <code>field_simp</code> works fine on <a href=\"http://live.lean-lang.org\">live.lean-lang.org</a>, but locally I get <code>unexpected identifier; expected command</code>. The imports are the same.</p>",
        "id": 404107174,
        "sender_full_name": "Nicholas Wilson",
        "timestamp": 1700914538
    },
    {
        "content": "<p>Are you on a particularly old version of mathlib?</p>",
        "id": 404107277,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1700914625
    },
    {
        "content": "<p>I _ believe_ I am on <code>4.3-rc1</code>.</p>",
        "id": 404107515,
        "sender_full_name": "Nicholas Wilson",
        "timestamp": 1700914863
    },
    {
        "content": "<p>Is there a way to check (I'm using VSCode, not the command line).</p>",
        "id": 404107616,
        "sender_full_name": "Nicholas Wilson",
        "timestamp": 1700914944
    },
    {
        "content": "<p>That's a lean version, not a mathlib version. I'm on mobile right now, so can't check how to figure it out in detail</p>",
        "id": 404107656,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1700914990
    },
    {
        "content": "<p>check the imports.</p>",
        "id": 404108035,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1700915373
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"663331\">Nicholas Wilson</span> <a href=\"#narrow/stream/113489-new-members/topic/multiply.20LHS.20and.20RHS.20by.20two/near/404107616\">said</a>:</p>\n<blockquote>\n<p>Is there a way to check (I'm using VSCode, not the command line).</p>\n</blockquote>\n<p><code>#eval Lean.versionString</code></p>",
        "id": 404128263,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1700932236
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"466334\">Shreyas Srinivas</span> <a href=\"#narrow/stream/113489-new-members/topic/multiply.20LHS.20and.20RHS.20by.20two/near/404106946\">said</a>:</p>\n<blockquote>\n<p>Then the example is complete:</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"o\">):</span> <span class=\"o\">((</span><span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">+</span><span class=\"o\">(</span><span class=\"n\">b</span><span class=\"bp\">*</span><span class=\"mi\">2</span><span class=\"o\">))</span><span class=\"bp\">/</span><span class=\"mi\">4</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">+</span><span class=\"n\">b</span><span class=\"o\">)</span><span class=\"bp\">/</span><span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">field_simp</span>\n  <span class=\"n\">ring</span>\n  <span class=\"n\">done</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>Linarith knows how to cancel denominators if they're constants.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"o\">):</span> <span class=\"o\">((</span><span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">+</span><span class=\"o\">(</span><span class=\"n\">b</span><span class=\"bp\">*</span><span class=\"mi\">2</span><span class=\"o\">))</span><span class=\"bp\">/</span><span class=\"mi\">4</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">+</span><span class=\"n\">b</span><span class=\"o\">)</span><span class=\"bp\">/</span><span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">linarith</span>\n</code></pre></div>",
        "id": 404128495,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1700932410
    },
    {
        "content": "<p>Thanks, I can confirm I am on Lean \"4.3.0-rc1\", but as noted that is not a Mathlib version</p>",
        "id": 404174014,
        "sender_full_name": "Nicholas Wilson",
        "timestamp": 1700955594
    },
    {
        "content": "<p>Silly question: can you not use <code>linarith</code> in a <code>conv</code>?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">...</span>\n<span class=\"n\">conv</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"n\">enter</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">2</span><span class=\"o\">]</span><span class=\"bp\">;</span><span class=\"n\">ext</span><span class=\"bp\">;</span><span class=\"n\">enter</span> <span class=\"o\">[</span><span class=\"mi\">2</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">ext</span><span class=\"bp\">;</span>\n  <span class=\"n\">enter</span> <span class=\"o\">[</span><span class=\"mi\">2</span><span class=\"o\">]</span>\n  <span class=\"n\">conv</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">enter</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">]</span>\n    <span class=\"n\">ring_nf</span>\n  <span class=\"n\">linarith</span>\n</code></pre></div>\n<p>fails with <code>unexpected identifier; expected command</code>, replacing <code>linarith</code> with <code>simp</code> or <code>ring_nf</code> \"works\" (but doesn't do what I want)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">...</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">linarith</span>\n</code></pre></div>\n<p>works (assuming the example can be proved by linarith), in the same file.</p>",
        "id": 404174311,
        "sender_full_name": "Nicholas Wilson",
        "timestamp": 1700955864
    },
    {
        "content": "<p>How did you set up the project?</p>",
        "id": 404254202,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1701002234
    },
    {
        "content": "<p>Is Mathlib available as a dependency?</p>\n<p>(Also : linarith is not a conv tactic so that is expected)</p>",
        "id": 404254217,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1701002249
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 404255785,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1701003469
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 404255786,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1701003469
    },
    {
        "content": "<blockquote>\n<p>How did you set up the project?</p>\n</blockquote>\n<p>I think it was \"create a Mathlib dependent VSCode project\", with a VSCode wizard for the configuration. I have Mathllib as a dependency of that project.</p>",
        "id": 404297361,
        "sender_full_name": "Nicholas Wilson",
        "timestamp": 1701039564
    },
    {
        "content": "<p>Okay, in that case, if you still have this import issue, I suggest raising it in a fresh thread. I just checked the setup and it works for me. Do make sure that you are not trying to create the project in a folder that already contains a lean project.</p>",
        "id": 404345014,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1701067444
    }
]