[
    {
        "content": "<p>It feels like this should be an existing theorem but I can't figure it out. What am I doing wrong?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Fintype.Basic</span>\n<span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">V</span><span class=\"o\">]</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">Fintype</span> <span class=\"o\">(</span><span class=\"n\">Sym2</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">apply</span><span class=\"bp\">?</span> <span class=\"c1\">-- gives `exact Fintype.ofFinite (Sym2 V)`</span>\n  <span class=\"c1\">-- still have an unfinished goal</span>\n</code></pre></div>",
        "id": 400366117,
        "sender_full_name": "Vasily Ilin",
        "timestamp": 1699165637
    },
    {
        "content": "<p>I think if you add <code>[DecidableEq V]</code> you get <code>Fintype (Sym2 V)</code></p>",
        "id": 400366220,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1699165725
    },
    {
        "content": "<p>You need another import too:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Sym.Card</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Fintype.Basic</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">V</span><span class=\"o\">]</span>\n\n<span class=\"bp\">#</span><span class=\"n\">synth</span> <span class=\"n\">Fintype</span> <span class=\"o\">(</span><span class=\"n\">Sym2</span> <span class=\"n\">V</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 400366334,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1699165818
    },
    {
        "content": "<p>It works!</p>",
        "id": 400366341,
        "sender_full_name": "Vasily Ilin",
        "timestamp": 1699165827
    },
    {
        "content": "<p>Why do  I need <code>DecidableEq V</code> here? It feels like it should not be needed since <code>V × V</code> is a Fintype and taking a quotient can only shrink the size.</p>",
        "id": 400366473,
        "sender_full_name": "Vasily Ilin",
        "timestamp": 1699165969
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Quotient.fintype#doc\">docs#Quotient.fintype</a> needs the relation to be decidable. The data of a <code>Fintype</code> is an actual list that has all the elements, and that needs to be computed.</p>\n<p>The <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Finite#doc\">docs#Finite</a> typeclass is the mere fact a type is finite.</p>",
        "id": 400366808,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1699166322
    },
    {
        "content": "<p>I don't think <code>Sym2</code> needs <code>DecidableEq</code> for a <code>Fintype</code> instance though, if you write a custom one.</p>",
        "id": 400366828,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1699166357
    },
    {
        "content": "<p>I don't quite understand but in order to not exhaust my budget of questions to ask I will leave it there. Thank you for making the code work!</p>",
        "id": 400366948,
        "sender_full_name": "Vasily Ilin",
        "timestamp": 1699166503
    },
    {
        "content": "<p><code>Quotient.fintype</code> works by calculating a set of representatives, which it does by removing elements one at a time that are related to other elements by the relation your quotienting by. That requires decidable equality to do the computation for Sym2</p>",
        "id": 400367171,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1699166760
    },
    {
        "content": "<p>So it has to do with the implementation, not whether it's possible to prove that a quotient of a finite type is finite (seems mathmatically obvious)</p>",
        "id": 400367248,
        "sender_full_name": "Vasily Ilin",
        "timestamp": 1699166836
    },
    {
        "content": "<p>Indeed:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Sym.Card</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Set.Finite</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Finite</span> <span class=\"n\">V</span><span class=\"o\">]</span>\n\n<span class=\"bp\">#</span><span class=\"n\">synth</span> <span class=\"n\">Finite</span> <span class=\"o\">(</span><span class=\"n\">Sym2</span> <span class=\"n\">V</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 400367493,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1699167069
    },
    {
        "content": "<p>The reason <code>Sym2</code> should be a <code>Fintype</code> without needing DecidableEq is because there's this function that can enumerate elements.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">subtriangle</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">[]</span>\n  <span class=\"bp\">|</span> <span class=\"n\">x</span><span class=\"o\">::</span><span class=\"n\">xs</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">((</span><span class=\"n\">x</span><span class=\"o\">::</span><span class=\"n\">xs</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"k\">fun</span> <span class=\"n\">y</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">))</span> <span class=\"bp\">++</span> <span class=\"n\">subtriangle</span> <span class=\"n\">xs</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">subtriangle</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">2</span><span class=\"o\">,</span><span class=\"mi\">3</span><span class=\"o\">]</span>\n<span class=\"c1\">-- [(1, 1), (1, 2), (1, 3), (2, 2), (2, 3), (3, 3)]</span>\n</code></pre></div>\n<p>I wonder if this exists in mathlib somewhere already?</p>",
        "id": 400367558,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1699167136
    },
    {
        "content": "<p>Here's the fintype instance minus proofs</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Sym.Card</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Set.Finite</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">List.subtriangle</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">Sym2</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">[]</span>\n  <span class=\"bp\">|</span> <span class=\"n\">x</span><span class=\"o\">::</span><span class=\"n\">xs</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">((</span><span class=\"n\">x</span><span class=\"o\">::</span><span class=\"n\">xs</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"k\">fun</span> <span class=\"n\">y</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Quotient.mk'</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">))</span> <span class=\"bp\">++</span> <span class=\"n\">subtriangle</span> <span class=\"n\">xs</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">List.subtriangle.perm</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">xs</span> <span class=\"n\">ys</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">xs</span> <span class=\"bp\">~</span> <span class=\"n\">ys</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">xs.subtriangle</span> <span class=\"bp\">~</span> <span class=\"n\">ys.subtriangle</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">List.Nodup.subtriangle</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">xs</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">xs.Nodup</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">xs.subtriangle.Nodup</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Multiset.subtriangle</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">Multiset</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Multiset</span> <span class=\"o\">(</span><span class=\"n\">Sym2</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">m.liftOn</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">xs</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">xs.subtriangle</span><span class=\"o\">)</span> <span class=\"bp\">&lt;|</span> <span class=\"kd\">by</span>\n    <span class=\"n\">intro</span> <span class=\"n\">xs</span> <span class=\"n\">ys</span> <span class=\"n\">h</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">coe_eq_coe</span><span class=\"o\">]</span>\n    <span class=\"n\">exact</span> <span class=\"n\">List.subtriangle.perm</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">h</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Finset.subtriangle</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"o\">(</span><span class=\"n\">Sym2</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">val</span> <span class=\"o\">:=</span> <span class=\"n\">s.val.subtriangle</span>\n  <span class=\"n\">nodup</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">cases'</span> <span class=\"n\">s</span> <span class=\"k\">with</span> <span class=\"n\">val</span> <span class=\"n\">nodup</span>\n    <span class=\"n\">revert</span> <span class=\"n\">nodup</span>\n    <span class=\"n\">refine</span> <span class=\"n\">val.recOnSubsingleton</span> <span class=\"bp\">?</span><span class=\"n\">_</span>\n    <span class=\"n\">intro</span> <span class=\"n\">_</span> <span class=\"n\">nodup</span>\n    <span class=\"n\">exact</span> <span class=\"n\">nodup.subtriangle</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Fintype</span> <span class=\"o\">(</span><span class=\"n\">Sym2</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">elems</span> <span class=\"o\">:=</span> <span class=\"n\">Finset.univ.subtriangle</span>\n  <span class=\"n\">complete</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 400369121,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1699168611
    },
    {
        "content": "<p>Kyle, you just solved a problem that <span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> and I couldn't solve a year ago! Do you mind opening a PR that fixes <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Finset.sym2#doc\">docs#Finset.sym2</a> ?</p>",
        "id": 400376611,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1699175811
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"414458\">Vasily Ilin</span> <a href=\"#narrow/stream/113489-new-members/topic/Sym2.20of.20Fintype.20is.20Fintype/near/400367248\">said</a>:</p>\n<blockquote>\n<p>So it has to do with the implementation, not whether it's possible to prove that a quotient of a finite type is finite (seems mathmatically obvious)</p>\n</blockquote>\n<p>It might be obvious to you but it's not true constructively, and <code>Fintype</code> is constructive finiteness -- <code>Fintype V</code> is not a Prop, it's data. It's not a true/false statement.</p>",
        "id": 400376766,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1699175941
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span> I just created a PR: <a href=\"https://github.com/leanprover-community/mathlib4/pull/8211\">#8211</a> (Feel free to golf)</p>",
        "id": 400419647,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1699214637
    },
    {
        "content": "<p>I just pushed some fixes to take into account how <code>Quotient.mk</code> vs <code>Quotient.mk''</code> is a mess right now... I think we ought to finally switch to <code>Sym2.mk</code> and maybe make notation like <code>s(a, b)</code> for <code>Sym2.mk a b</code> (or maybe <code>u(a, b)</code> for \"unordered pair\"?)</p>",
        "id": 400421198,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1699216550
    }
]