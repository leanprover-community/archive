[
    {
        "content": "<p>Why are both instances of <code>flats_lattice</code> in the function <code>meet</code> below returning the following error (four times; presumably once for each constructor)?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">don't</span> <span class=\"n\">know</span> <span class=\"n\">how</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"n\">placeholder</span> <span class=\"n\">context</span><span class=\"o\">:</span>\n<span class=\"bp\">‚ä¢</span> <span class=\"kt\">Type</span> <span class=\"bp\">?</span>\n</code></pre></div>\n<p>Here's the code:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">P</span> <span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">flats_lattice</span>\n<span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"o\">:</span> <span class=\"n\">flats_lattice</span>\n<span class=\"bp\">|</span> <span class=\"n\">one</span> <span class=\"o\">:</span> <span class=\"n\">flats_lattice</span>\n<span class=\"bp\">|</span> <span class=\"n\">points</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">flats_lattice</span>\n<span class=\"bp\">|</span> <span class=\"n\">lines</span>  <span class=\"o\">(</span><span class=\"n\">l</span><span class=\"o\">:</span> <span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">flats_lattice</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">flats_lattice</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">meet</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">flats_lattice</span><span class=\"o\">)</span>  <span class=\"o\">:</span> <span class=\"n\">flats_lattice</span>  <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">flats_lattice</span>\n</code></pre></div>",
        "id": 342580638,
        "sender_full_name": "Quinn Culver",
        "timestamp": 1679064117
    },
    {
        "content": "<p>Because lean doens't know which <code>P</code> and <code>L</code> flats_lattice refers to for x and y</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">universe</span> <span class=\"n\">u</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">flats_lattice</span>  <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"o\">:</span> <span class=\"n\">flats_lattice</span>\n<span class=\"bp\">|</span> <span class=\"n\">one</span> <span class=\"o\">:</span> <span class=\"n\">flats_lattice</span>\n<span class=\"bp\">|</span> <span class=\"n\">points</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">flats_lattice</span>\n<span class=\"bp\">|</span> <span class=\"n\">lines</span>  <span class=\"o\">(</span><span class=\"n\">l</span><span class=\"o\">:</span> <span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">flats_lattice</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">flats_lattice</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">P</span> <span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span>\n\n\n<span class=\"kd\">def</span> <span class=\"n\">meet</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">flats_lattice</span> <span class=\"n\">P</span> <span class=\"n\">L</span><span class=\"o\">)</span>  <span class=\"o\">:</span> <span class=\"n\">flats_lattice</span> <span class=\"n\">P</span> <span class=\"n\">L</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">flats_lattice</span>\n</code></pre></div>",
        "id": 342582285,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1679064530
    },
    {
        "content": "<p>So 4 is really 2 * 2 (once for P and L for each of x y)</p>",
        "id": 342582492,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1679064579
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"245476\">Quinn Culver</span> has marked this topic as resolved.</p>",
        "id": 342604081,
        "sender_full_name": "Notification Bot",
        "timestamp": 1679068885
    },
    {
        "content": "<p>Why did you move  <code>variables {P L : Type u}</code> to after the inductive type's definition <span class=\"user-mention\" data-user-id=\"127136\">@Alex J. Best</span> ?</p>",
        "id": 342787217,
        "sender_full_name": "Quinn Culver",
        "timestamp": 1679147966
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"245476\">Quinn Culver</span> has marked this topic as unresolved.</p>",
        "id": 342787235,
        "sender_full_name": "Notification Bot",
        "timestamp": 1679147976
    },
    {
        "content": "<p>It doesn't matter where the variables are defined.</p>",
        "id": 342796631,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1679151447
    },
    {
        "content": "<p>Yeah i wanted P L to be explicit for the definition of flats lattice, but implicit for the later lemma (as they can be inferred from the type of x y) there are many ways of organising the code to achieve this but moving the variables line and adding explicit variables is one way to do jt</p>",
        "id": 342818504,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1679160763
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"245476\">Quinn Culver</span> has marked this topic as resolved.</p>",
        "id": 342870917,
        "sender_full_name": "Notification Bot",
        "timestamp": 1679196761
    }
]