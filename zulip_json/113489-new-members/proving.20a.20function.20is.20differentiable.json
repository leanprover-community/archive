[
    {
        "content": "<p>I have a local function that I'm computing derivatives on. How do I prove it is actually differentiable?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Real.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Complex.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Complex.Exponential</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Analysis.SpecialFunctions.Trigonometric.Deriv</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Analysis.Calculus.Deriv.Pow</span>\n<span class=\"kn\">open</span> <span class=\"n\">Complex</span>\n<span class=\"kn\">open</span> <span class=\"n\">Real</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">whatever</span> <span class=\"o\">(</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">:</span> <span class=\"n\">‚Ñù</span> <span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">True</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">let</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">w</span><span class=\"o\">:</span><span class=\"n\">‚Ñù</span><span class=\"o\">)</span>  <span class=\"bp\">‚Ü¶</span> <span class=\"o\">(</span><span class=\"n\">normSq</span> <span class=\"o\">(</span><span class=\"n\">sin</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">+</span><span class=\"n\">w</span><span class=\"bp\">*</span><span class=\"n\">I</span> <span class=\"o\">)))</span>\n  <span class=\"k\">let</span> <span class=\"n\">df</span> <span class=\"o\">:=</span> <span class=\"n\">deriv</span> <span class=\"n\">f</span> <span class=\"n\">y</span>\n  <span class=\"k\">have</span> <span class=\"n\">hfd</span> <span class=\"o\">:</span> <span class=\"n\">Differentiable</span> <span class=\"n\">‚Ñù</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span> <span class=\"c1\">-- how to prove this?</span>\n  <span class=\"n\">trivial</span>\n</code></pre></div>",
        "id": 400920255,
        "sender_full_name": "Nicholas Wilson",
        "timestamp": 1699441175
    },
    {
        "content": "<p>I only seem to have succeeded in reducing it to a less obvious goal:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Real.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Complex.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Complex.Exponential</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Analysis.SpecialFunctions.Trigonometric.Deriv</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Analysis.Calculus.Deriv.Pow</span>\n\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Analysis.InnerProductSpace.Calculus</span> <span class=\"c1\">-- added</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Complex</span>\n<span class=\"kn\">open</span> <span class=\"n\">Real</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">whatever</span> <span class=\"o\">(</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">:</span> <span class=\"n\">‚Ñù</span> <span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">True</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">let</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">w</span><span class=\"o\">:</span><span class=\"n\">‚Ñù</span><span class=\"o\">)</span>  <span class=\"bp\">‚Ü¶</span> <span class=\"o\">(</span><span class=\"n\">normSq</span> <span class=\"o\">(</span><span class=\"n\">sin</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">+</span><span class=\"n\">w</span><span class=\"bp\">*</span><span class=\"n\">I</span> <span class=\"o\">)))</span>\n  <span class=\"k\">let</span> <span class=\"n\">df</span> <span class=\"o\">:=</span> <span class=\"n\">deriv</span> <span class=\"n\">f</span> <span class=\"n\">y</span>\n  <span class=\"k\">have</span> <span class=\"n\">hfd</span> <span class=\"o\">:</span> <span class=\"n\">Differentiable</span> <span class=\"n\">‚Ñù</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">normSq_eq_abs</span><span class=\"o\">,</span> <span class=\"bp\">‚Üê</span> <span class=\"n\">Complex.norm_eq_abs</span><span class=\"o\">]</span>\n    <span class=\"c1\">-- apply? suggests</span>\n    <span class=\"c1\">-- refine Differentiable.norm_sq ?ùïú ?hf</span>\n    <span class=\"c1\">-- but get stuck on finding an instance before ?ùïú is filled in, so specify it</span>\n    <span class=\"n\">refine</span> <span class=\"n\">Differentiable.norm_sq</span> <span class=\"n\">‚ÑÇ</span> <span class=\"bp\">?</span><span class=\"n\">hf</span>\n    <span class=\"k\">suffices</span> <span class=\"n\">Differentiable</span> <span class=\"n\">‚ÑÇ</span> <span class=\"k\">fun</span> <span class=\"n\">w</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Complex.sin</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">w</span> <span class=\"bp\">*</span> <span class=\"n\">I</span><span class=\"o\">)</span> <span class=\"kd\">by</span>\n      <span class=\"c1\">-- Is this true?</span>\n      <span class=\"gr\">sorry</span>\n    <span class=\"n\">refine</span> <span class=\"n\">Differentiable.csin</span> <span class=\"bp\">?</span><span class=\"n\">hf.hc</span> <span class=\"c1\">-- apply?</span>\n    <span class=\"n\">refine</span> <span class=\"n\">Differentiable.const_add</span> <span class=\"bp\">?</span><span class=\"n\">hf.hc.hf</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">‚ÑÇ</span><span class=\"o\">)</span> <span class=\"c1\">-- apply?</span>\n    <span class=\"n\">refine</span> <span class=\"n\">Differentiable.mul_const</span> <span class=\"bp\">?</span><span class=\"n\">hf.hc.hf.ha</span> <span class=\"n\">I</span> <span class=\"c1\">-- apply?</span>\n    <span class=\"n\">exact</span> <span class=\"n\">differentiable_id'</span> <span class=\"c1\">-- apply?</span>\n  <span class=\"n\">trivial</span>\n</code></pre></div>",
        "id": 400934847,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1699446973
    },
    {
        "content": "<p>I recommend you jump straight to showing <code>HasDerivAt</code>, as <a href=\"#narrow/stream/113489-new-members/topic/.E2.9C.94.20evaluating.20derivatives/near/400841296\">I did here</a></p>",
        "id": 400936153,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1699447456
    },
    {
        "content": "<p>That looks as follows:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Real.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Complex.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Complex.Exponential</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Analysis.SpecialFunctions.Trigonometric.Deriv</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Analysis.Calculus.Deriv.Pow</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Analysis.InnerProductSpace.Calculus</span> <span class=\"c1\">-- added</span>\n<span class=\"kn\">open</span> <span class=\"n\">Complex</span>\n<span class=\"kn\">open</span> <span class=\"n\">Real</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">whatever</span> <span class=\"o\">(</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">:</span> <span class=\"n\">‚Ñù</span> <span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">True</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">let</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">w</span><span class=\"o\">:</span><span class=\"n\">‚Ñù</span><span class=\"o\">)</span>  <span class=\"bp\">‚Ü¶</span> <span class=\"o\">(</span><span class=\"n\">normSq</span> <span class=\"o\">(</span><span class=\"n\">sin</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">+</span><span class=\"n\">w</span><span class=\"bp\">*</span><span class=\"n\">I</span> <span class=\"o\">)))</span>\n  <span class=\"k\">have</span> <span class=\"n\">hfd</span> <span class=\"o\">:</span> <span class=\"bp\">‚àÄ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">HasDerivAt</span> <span class=\"n\">f</span> <span class=\"n\">_</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">intro</span> <span class=\"n\">x</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">normSq_eq_abs</span><span class=\"o\">,</span> <span class=\"bp\">‚Üê</span> <span class=\"n\">Complex.norm_eq_abs</span><span class=\"o\">]</span>\n    <span class=\"c1\">-- we are missing `HasDerivAt.norm_sq`: #8268 !</span>\n    <span class=\"n\">apply</span> <span class=\"n\">HasFDerivAt.hasDerivAt</span><span class=\"bp\">;</span> <span class=\"n\">apply</span> <span class=\"n\">HasFDerivAt.norm_sq</span><span class=\"bp\">;</span> <span class=\"n\">apply</span> <span class=\"n\">HasDerivAt.hasFDerivAt</span>\n    <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"bp\">‚Üê</span><span class=\"n\">Function.comp_def</span> <span class=\"n\">Complex.sin</span><span class=\"o\">]</span>\n    <span class=\"n\">apply</span> <span class=\"n\">HasDerivAt.comp</span>\n    <span class=\"bp\">¬∑</span> <span class=\"n\">apply</span> <span class=\"n\">Complex.hasDerivAt_sin</span>\n    <span class=\"bp\">¬∑</span> <span class=\"n\">apply</span> <span class=\"n\">HasDerivAt.const_add</span>\n      <span class=\"n\">apply</span> <span class=\"n\">HasDerivAt.mul_const</span>\n      <span class=\"n\">apply</span> <span class=\"n\">HasDerivAt.ofReal_comp</span>\n      <span class=\"n\">apply</span> <span class=\"n\">hasDerivAt_id</span>\n  <span class=\"c1\">-- the `()` here are a workaround for a Lean bug</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[(</span><span class=\"n\">ContinuousLinearMap.comp_apply</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">ContinuousLinearMap.smulRight_apply</span><span class=\"o\">)]</span> <span class=\"n\">at</span> <span class=\"n\">hfd</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">Differentiable</span> <span class=\"n\">‚Ñù</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">hfd</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">differentiableAt</span>\n  <span class=\"k\">have</span> <span class=\"n\">hd_eq</span> <span class=\"o\">:=</span> <span class=\"n\">deriv_eq</span> <span class=\"n\">hfd</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 400938933,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1699448424
    },
    {
        "content": "<p>(<a href=\"https://github.com/leanprover-community/mathlib4/pull/8267\">#8267</a> makes the <code>simp</code> more poweful, but doesn't fix the bug)</p>",
        "id": 400942770,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1699449630
    }
]