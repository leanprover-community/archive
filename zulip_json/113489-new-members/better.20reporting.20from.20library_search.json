[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> : MWE:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"n\">noncomputable</span> <span class=\"n\">def</span> <span class=\"n\">star</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span>\n<span class=\"bp\">|</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span> <span class=\"bp\">-</span> <span class=\"err\">⌊</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span> <span class=\"err\">⌋</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">star_closed</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"err\">∈</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">Ico</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hb</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"err\">∈</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">Ico</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">star</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"err\">∈</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">Ico</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">star</span><span class=\"o\">,</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">try</span> <span class=\"o\">{</span> <span class=\"n\">library_search</span> <span class=\"o\">},</span> <span class=\"c1\">-- library_search fails</span>\n    <span class=\"n\">suggest</span><span class=\"o\">,</span> <span class=\"c1\">-- but suggest works: Try this: exact fract_nonneg (a + b)</span>\n    <span class=\"n\">sorry</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">try</span> <span class=\"o\">{</span> <span class=\"n\">library_search</span> <span class=\"o\">},</span>\n    <span class=\"n\">suggest</span><span class=\"o\">,</span>\n    <span class=\"n\">sorry</span> <span class=\"o\">},</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 201801142,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1592958934
    },
    {
        "content": "<p>:-(</p>",
        "id": 201801201,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1592958966
    },
    {
        "content": "<p>Oh... does <code>library_search!</code> work?</p>",
        "id": 201801217,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1592958989
    },
    {
        "content": "<p>Ooh, it does!</p>",
        "id": 201801233,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1592959004
    },
    {
        "content": "<p>We made <code>library_search</code> _less powerful_ recently, in order to get it to produce more useful results.</p>",
        "id": 201801245,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1592959025
    },
    {
        "content": "<p>(We reduced the level of irreducibility that <code>apply</code> is allowed to blast through.)</p>",
        "id": 201801256,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1592959049
    },
    {
        "content": "<p>I guess <code>suggest</code> is still running on the higher settings.</p>",
        "id": 201801258,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1592959057
    },
    {
        "content": "<p>Ah, I see.</p>",
        "id": 201801261,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1592959060
    },
    {
        "content": "<p>I considered have <code>library_search</code> always run in <code>library_search!</code> mode if the first pass failed.</p>",
        "id": 201801271,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1592959074
    },
    {
        "content": "<p>But I had so few test cases where it was failing at all I decided not to do this.</p>",
        "id": 201801315,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1592959085
    },
    {
        "content": "<p>Given that <code>library_search</code> timing out is scarcely worse than it failing, perhaps we should always do the second pass.</p>",
        "id": 201801335,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1592959115
    },
    {
        "content": "<p>Opinions welcome.</p>",
        "id": 201801352,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1592959153
    },
    {
        "content": "<p>It is a bit of hassle to remember to have to try again with <code>!</code>.</p>",
        "id": 201801361,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1592959174
    },
    {
        "content": "<p>How is doing a first weaker pass and then a second stronger pass different from always just doing the stronger pass?</p>",
        "id": 201801373,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1592959194
    },
    {
        "content": "<p>Nevermind, I see, probably the weaker pass often gives something more useful which occurs later in the search with the stronger pass.</p>",
        "id": 201801449,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1592959277
    },
    {
        "content": "<p>Yeah I've felt library search be a bit weaker recently, but wondered if it was just me being silly / asking it harder questions than I used to, I had no idea it had actually changed in this way. I think either a second pass, or at least a message \"failed: try library_search!\" rather than just \"failed\" would be good.</p>",
        "id": 201801916,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1592959751
    },
    {
        "content": "<p>Actually I think we should avoid the \"failed\" error message entirely. It's really a placeholder for actual error reporting</p>",
        "id": 201802989,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1592960964
    },
    {
        "content": "<p>In the case of <code>library_search</code>, it would be good if the failure message gave a lot more information, like a tutorial. Keep in mind that newbies are a major part of the user base for <code>library_search</code></p>",
        "id": 201803096,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1592961058
    },
    {
        "content": "<p>does the information you want to display depend on what the failed goal was?</p>",
        "id": 201803415,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1592961470
    },
    {
        "content": "<p>a basic troubleshooting guide would be good</p>\n<blockquote>\n<p><code>library_search</code> failed. If you aren't sure what to do next, you can also try <code>library_search!</code>, <code>suggest</code>, or <code>hint</code>. Possible reasons why library_search failed:</p>\n<ul>\n<li>\n<p>The goal should be provable by direct application of a lemma from the library. If you haven't already, try stating the theorem you want in its own lemma.</p>\n</li>\n<li>\n<p>Sometimes the library has one version of a lemma but not a very similar version obtained by permuting arguments. Try replacing <code>a + b</code> with <code>b + a</code>, or <code>a - b &lt; c</code> with <code>a &lt; b + c</code>, to see if maybe the lemma exists but isn't stated quite the way you would like.</p>\n</li>\n<li>\n<p>Make sure that you have all the side conditions for your theorem to be true. For example you won't find <code>a - b + b = a</code> in the library because it's false! Search for <code>b &lt;= a -&gt; a - b + b = a</code> instead.</p>\n</li>\n<li>\n<p>If a definition you made is in the lemma, you won't find any theorems about it in the library. Try unfolding the definition using <code>unfold my_definition</code></p>\n</li>\n<li>\n<p>If all else fails, ask on <a href=\"\">https://leanprover.zulipchat.com/</a>, and maybe we can improve the library and/or <code>library_search</code> for next time.</p>\n</li>\n</ul>\n</blockquote>",
        "id": 201803478,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1592961548
    },
    {
        "content": "<p>This sounds great. I'm not sure what \"The goal should be provable by direct application of a lemma from the library.\" means though. Is this intended to remind the reader what the scope of <code>library_search</code> is?</p>",
        "id": 201805470,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1592964420
    },
    {
        "content": "<p>Yes, does \"one-step proof\" make more sense?</p>",
        "id": 201807207,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1592967069
    },
    {
        "content": "<p>That is, it's not a general decision procedure, it's not <code>simp</code></p>",
        "id": 201807215,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1592967091
    },
    {
        "content": "<p>it should be thought of as a search function for the library (which hopefully the name already makes clear)</p>",
        "id": 201807230,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1592967120
    },
    {
        "content": "<p>but I can imagine someone confusing it for <code>sledgehammer</code> and needs to be told otherwise</p>",
        "id": 201807285,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1592967156
    }
]