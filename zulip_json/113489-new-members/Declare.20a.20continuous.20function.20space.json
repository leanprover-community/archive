[
    {
        "content": "<p>Hi,<br>\nI would like to define a continuous function space. In lean3 that worked with <code>def C := map_continuous (Icc 0 1) ℝ</code> how does work in lean4? I've been looking through mathlib4 but couldn't find an equivalent. Maybe I'm just missing the correct import path.<br>\nregards</p>",
        "id": 394367324,
        "sender_full_name": "Robert hackman",
        "timestamp": 1696237229
    },
    {
        "content": "<p>Are you sure that worked in lean 3?</p>",
        "id": 394375118,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1696239137
    },
    {
        "content": "<p>I think you have the name backwards</p>",
        "id": 394375152,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1696239151
    },
    {
        "content": "<p><code>#lookup3 continuous_map</code> is how to find the Lean 4 version of things</p>",
        "id": 394375488,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1696239242
    },
    {
        "content": "<p>yeah I'm uncertain if <code>map_continuous</code> is even a thing in lean3, it's from an old code base. Let's rephrase the question: How do I define a continuous function space as \"described\" above?</p>",
        "id": 394375679,
        "sender_full_name": "Robert hackman",
        "timestamp": 1696239279
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113489-new-members/topic/Declare.20a.20continuous.20function.20space/near/394375488\">said</a>:</p>\n<blockquote>\n<p><code>#lookup3 continuous_map</code> is how to find the Lean 4 version of things</p>\n</blockquote>\n<p>uh didn't know that thx</p>",
        "id": 394375707,
        "sender_full_name": "Robert hackman",
        "timestamp": 1696239289
    },
    {
        "content": "<p>Did that work for you?</p>",
        "id": 394376096,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1696239402
    },
    {
        "content": "<p>nope, didn't find any equivalent. Could very well be that it was some internal definition...</p>",
        "id": 394376742,
        "sender_full_name": "Robert hackman",
        "timestamp": 1696239582
    },
    {
        "content": "<p>Is <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=ContinuousMap#doc\">docs#ContinuousMap</a> what you want?</p>",
        "id": 394389505,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1696242806
    },
    {
        "content": "<p>uff that was so obvious(to find in the docs). thx though!</p>",
        "id": 394392213,
        "sender_full_name": "Robert hackman",
        "timestamp": 1696243518
    },
    {
        "content": "<p>I'm surprised that my line of code above did not lead to exactly that</p>",
        "id": 394515404,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1696282033
    },
    {
        "content": "<p>Eric, indeed:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n\n<span class=\"bp\">#</span><span class=\"n\">lookup3</span> <span class=\"n\">continuous_map</span>  <span class=\"c1\">-- ContinuousMap</span>\n</code></pre></div>",
        "id": 394517470,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1696283154
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113489-new-members/topic/Declare.20a.20continuous.20function.20space/near/394515404\">said</a>:</p>\n<blockquote>\n<p>I'm surprised that my line of code above did not lead to exactly that</p>\n</blockquote>\n<p>my fault sry</p>",
        "id": 394823586,
        "sender_full_name": "Robert hackman",
        "timestamp": 1696420433
    },
    {
        "content": "<p>So I'm still fighting with the next line (lol):</p>\n<p>Mve:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.MeasureTheory.Integral.SetIntegral</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Set.Intervals.Basic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Function</span>\n<span class=\"kn\">open</span> <span class=\"n\">MeasureTheory</span>\n\n<span class=\"c1\">-- Define the space of continuous functions on [0, 1]</span>\n<span class=\"kd\">def</span> <span class=\"n\">C</span> <span class=\"o\">:=</span> <span class=\"n\">ContinuousMap</span> <span class=\"o\">(</span><span class=\"n\">Set.Icc</span> <span class=\"mi\">0</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">ℝ</span>\n\n<span class=\"c1\">-- Define the L1 norm on C([0, 1])</span>\n<span class=\"kd\">def</span> <span class=\"n\">L1_norm</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span> <span class=\"bp\">∫</span> <span class=\"n\">x</span> <span class=\"k\">in</span> <span class=\"o\">(</span><span class=\"n\">Set.Icc</span> <span class=\"mi\">0</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"bp\">|</span><span class=\"n\">f.toFun</span> <span class=\"n\">x</span><span class=\"bp\">|</span> <span class=\"n\">dx</span>\n</code></pre></div>\n<p>Where the last line throws: <code>failed to synthesize instance\n  MeasureSpace ↑(Set.Icc 0 1) </code> and <code>function expected at\n  |ContinuousMap.toFun f x|\nterm has type\n  ℝ</code> but I think the latter is a symptom of the first error.<br>\nI kind of understand why it throws the error, I know that the <code>MeasureSpace ↑(Set.Icc 0 1)</code>relates to the set defined used in the C def but I really don't know why it cannot synth. the instance. regards</p>",
        "id": 394824319,
        "sender_full_name": "Robert hackman",
        "timestamp": 1696420709
    },
    {
        "content": "<p>I guess all your sets are in natural numbers since you never put any type information about 0 and 1.</p>",
        "id": 394834089,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1696424033
    },
    {
        "content": "<p>and <code>dx</code> is not part of the integral notation.</p>",
        "id": 394834326,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1696424097
    },
    {
        "content": "<p>But I guess this won't be enough since x won't have the correct type in your integral.</p>",
        "id": 394834451,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1696424136
    },
    {
        "content": "<p>I would recommend replacing <code>def C :=</code> with <code>abbrev C :=</code>, as the former makes lean forget a lot of things about continuous maps</p>",
        "id": 394984542,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1696492508
    },
    {
        "content": "<p>Notably your can then drop the toFun</p>",
        "id": 394984723,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1696492585
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.MeasureTheory.Integral.SetIntegral</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Set.Intervals.Basic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Function</span>\n<span class=\"kn\">open</span> <span class=\"n\">MeasureTheory</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">I01</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">Set.Icc</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">))</span>\n\n<span class=\"n\">abbrev</span> <span class=\"n\">C</span> <span class=\"o\">:=</span> <span class=\"n\">ContinuousMap</span> <span class=\"n\">I01</span> <span class=\"n\">ℝ</span>\n\n<span class=\"kd\">noncomputable</span>\n<span class=\"kd\">def</span> <span class=\"n\">L1_norm</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span> <span class=\"bp\">∫</span> <span class=\"n\">x</span> <span class=\"k\">in</span> <span class=\"n\">I01</span><span class=\"o\">,</span> <span class=\"bp\">|</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"bp\">|</span>\n</code></pre></div>\n<p>ok thank you, the above is the current state so that's already a lot better but as <span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span>  already said, x has the wrong type because it's of type ℝ. One solution is to change I01 to ℝ but then I've got a different definition (I think). Because what I want is the L1 Norm over all fn C[0 1] and not ℝ. Another possible solution I thought of was changing the I01(for the L1_norm only) to a Set of Sets or smth like that</p>",
        "id": 394994398,
        "sender_full_name": "Robert hackman",
        "timestamp": 1696496291
    },
    {
        "content": "<p>You should use <code>abbrev</code> for I01 too</p>",
        "id": 394996360,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1696496978
    },
    {
        "content": "<p>Using <code>def</code> for types is usually a bad choice</p>",
        "id": 394996397,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1696496991
    },
    {
        "content": "<p>Does removing the <code>in I01</code> work?</p>",
        "id": 394996857,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1696497158
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"640752\">@Robert hackman</span> It is more convenient to work on types than subtypes in Lean. If you decide to handle functions defined on <code>Icc</code>, you could try using the <code>Function.toval'</code> I defined in this PR: <a href=\"https://github.com/leanprover-community/mathlib4/pull/7449\">https://github.com/leanprover-community/mathlib4/pull/7449</a></p>",
        "id": 394996910,
        "sender_full_name": "Wen Yang",
        "timestamp": 1696497180
    },
    {
        "content": "<p>I don't think I agree with that: sticking with subtypes is often just fine.</p>",
        "id": 394997273,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1696497318
    },
    {
        "content": "<p>By the way, <code>unitInterval</code> has been defined in mathlib4</p>",
        "id": 394997816,
        "sender_full_name": "Wen Yang",
        "timestamp": 1696497528
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=unitInterval#doc\">docs#unitInterval</a></p>",
        "id": 394998275,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1696497697
    },
    {
        "content": "<p>Note it is an <code>abbrev</code> as I suggest above; this means Lean doesn't care whether you write <code>Icc 0 1</code> or <code>unitInterval</code>, it knows to treat them as the same</p>",
        "id": 394998477,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1696497772
    },
    {
        "content": "<p>ok so just removed <code>in I01</code>from the Integral and that makes it work, I guess it just infers what to use a function input. Thanks!</p>",
        "id": 394998799,
        "sender_full_name": "Robert hackman",
        "timestamp": 1696497890
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"416034\">Wen Yang</span> <a href=\"#narrow/stream/113489-new-members/topic/Declare.20a.20continuous.20function.20space/near/394996910\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"640752\">Robert hackman</span> It is more convenient to work on types than subtypes in Lean. If you decide to handle functions defined on <code>Icc</code>, you could try using the <code>Function.toval'</code> I defined in this PR: <a href=\"https://github.com/leanprover-community/mathlib4/pull/7449\">https://github.com/leanprover-community/mathlib4/pull/7449</a></p>\n</blockquote>\n<p>what would <code>toVal</code> do, it's not in the docs?</p>",
        "id": 394999618,
        "sender_full_name": "Robert hackman",
        "timestamp": 1696498202
    },
    {
        "content": "<p>Removing <code>in I01</code> is the same as replacing it with <code>: I01</code></p>",
        "id": 395000532,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1696498559
    },
    {
        "content": "<p>But indeed, Lean infers the latter automatically</p>",
        "id": 395000625,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1696498576
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"640752\">Robert hackman</span> <a href=\"#narrow/stream/113489-new-members/topic/Declare.20a.20continuous.20function.20space/near/394999618\">said</a>:</p>\n<blockquote>\n<p>what would <code>toVal</code> do, it's not in the docs?</p>\n</blockquote>\n<p>It could help you to extend the function from unitInterval to R. But it has not been accepted to merge into master branch yet, so it is not in the docs.</p>",
        "id": 395001126,
        "sender_full_name": "Wen Yang",
        "timestamp": 1696498758
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113489-new-members/topic/Declare.20a.20continuous.20function.20space/near/395000532\">said</a>:</p>\n<blockquote>\n<p>Removing <code>in I01</code> is the same as replacing it with <code>: I01</code></p>\n</blockquote>\n<p>ah I tried just removing the <code>in</code> but that didn't work, I'm not yet used to the syntax</p>",
        "id": 395001430,
        "sender_full_name": "Robert hackman",
        "timestamp": 1696498877
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"640752\">@Robert hackman</span> in Lean's type theory it's often convenient to have functions which are defined on all of a type rather than just a subset of it. This is why, for example, division by zero is defined and produces a \"junk value\" (but nonetheless a value, namely 1/0=0). So one approach for studying functions on <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">[</mo><mn>0</mn><mo separator=\"true\">,</mo><mn>1</mn><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">[0,1]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">[</span><span class=\"mord\">0</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">]</span></span></span></span> is to study functions on all of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">R</mi></mrow><annotation encoding=\"application/x-tex\">\\R</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6889em;\"></span><span class=\"mord mathbb\">R</span></span></span></span> and then just ignore their values outside <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">[</mo><mn>0</mn><mo separator=\"true\">,</mo><mn>1</mn><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">[0,1]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">[</span><span class=\"mord\">0</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">]</span></span></span></span>, like how we use division (a mathematician never divides by 0). The advantage of this is that if you have <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mo separator=\"true\">,</mo><mi>y</mi><mo>∈</mo><mi mathvariant=\"double-struck\">R</mi></mrow><annotation encoding=\"application/x-tex\">x,y\\in\\R</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7335em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6889em;\"></span><span class=\"mord mathbb\">R</span></span></span></span> then things like <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mi>x</mi><mo>+</mo><mi>y</mi><mo stretchy=\"false\">)</mo><mi mathvariant=\"normal\">/</mi><mn>2</mn></mrow><annotation encoding=\"application/x-tex\">(x+y)/2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mclose\">)</span><span class=\"mord\">/2</span></span></span></span> make sense and <code>linarith</code> will work with goals. If you have <code>x y : unitInterval</code> then <code>(x + y) / 2</code> will probably not typecheck and <code>linarith</code> will probably not prove that if <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mo>≤</mo><mi>y</mi></mrow><annotation encoding=\"application/x-tex\">x\\leq y</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7719em;vertical-align:-0.136em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>y</mi><mo>≤</mo><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">y\\leq x</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8304em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">x</span></span></span></span> then <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mo>=</mo><mi>y</mi></mrow><annotation encoding=\"application/x-tex\">x=y</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span></span></span></span> (if indeed that question even typechecks): you would have to move to the reals and then move back. However there is a disadvantage too, namely that if you have two functions <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">R</mi><mo>→</mo><mi mathvariant=\"double-struck\">R</mi></mrow><annotation encoding=\"application/x-tex\">\\R\\to\\R</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6889em;\"></span><span class=\"mord mathbb\">R</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6889em;\"></span><span class=\"mord mathbb\">R</span></span></span></span> which agree on <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">[</mo><mn>0</mn><mo separator=\"true\">,</mo><mn>1</mn><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">[0,1]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">[</span><span class=\"mord\">0</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">]</span></span></span></span> but disagree somewhere else then Lean will not think that they are equal, even though they're equal on your domain of interest, so you might end up having to quotient out by an equivalence relation, which adds an extra layer of noise (rather like how using the subtype adds an extra layer of noise). So whether you use functions defined on the type <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">R</mi></mrow><annotation encoding=\"application/x-tex\">\\R</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6889em;\"></span><span class=\"mord mathbb\">R</span></span></span></span> or the subtype <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">[</mo><mn>0</mn><mo separator=\"true\">,</mo><mn>1</mn><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">[0,1]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">[</span><span class=\"mord\">0</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">]</span></span></span></span> is a design decision which needs some thought.</p>",
        "id": 395002024,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1696499146
    },
    {
        "content": "<p>Ah very interesting, very engineering like design thing to think about... I'm also a fan of having everything explicit, so having junk types or keeping generality with explicit exceptions instead of making the type \"implicitly coerce\" to one attribute.</p>",
        "id": 395003042,
        "sender_full_name": "Robert hackman",
        "timestamp": 1696499547
    },
    {
        "content": "<p>You can always write the coercions explicitly</p>",
        "id": 395017698,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1696504150
    }
]