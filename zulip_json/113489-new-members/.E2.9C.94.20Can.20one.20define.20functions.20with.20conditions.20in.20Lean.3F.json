[
    {
        "content": "<p>I just finished Natural Numbers Game and while looking what to do next I found that in Lean <code>1 / 0 = 0</code>. I wonder is it possible to define a function that will take somemathematical precondition?. Something like <code>forall q1 : Q forall q2 : Q q2 != 0 implies q1 / q2 : Q and q1 / q2 != 0</code>. Same for predicates: is it possible to define <code>forall p : N if p &gt;= 2 then p is prime iff forall m in N n in N if m &gt;=2 and n &gt;= 1 and p = mn =&gt; n = 1</code>?</p>",
        "id": 393772785,
        "sender_full_name": "Alexander Belov",
        "timestamp": 1695922269
    },
    {
        "content": "<p>Yes you can do all of these things, it's just that in practice they're harder to use because whenever you do division you have to supply the proof that what you're dividing by is nonzero, even if you just supplied it on the line before, and the line before that, ...</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">MyDiv</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hb</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span> <span class=\"o\">:=</span> <span class=\"n\">a</span> <span class=\"bp\">/</span> <span class=\"n\">b</span>\n</code></pre></div>\n<p>If you think about this from a computer science point of view, then you are running a function which already exists (Mathlib's <code>/</code>) but arbitrarily putting an extra hypothesis on one of the inputs, so you have made a function which has three inputs and one of them is simply being ignored. So from a computer science point of view this function is ridiculous.</p>\n<p>Lean even tells you this when you type the definition in: </p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>unused variable `hb` [linter.unusedVariables]\n</code></pre></div>",
        "id": 393774689,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1695922917
    },
    {
        "content": "<p>Okay, you answer have returned me into the mood. Before that I was quite upset (and so angry I wanted to punch somebody in the face)  because of these junk values. Last time I quit Lean it was 3 years ago because tutorials were uncomprehensible. Even before that I tried and quit Mizar because they forced you to make a proof that every type that you define is inhabited (so basically every set, which is a completely ridiculous idea). This time I found your game and it was a perfect start  to Lean. Maybe you can recommend some Lean teaching material that I can move on to next? I think I'm only missing the theory on how to make definitions in Lean right now and then I can start doing maths.</p>",
        "id": 393779363,
        "sender_full_name": "Alexander Belov",
        "timestamp": 1695924461
    },
    {
        "content": "<p>Depending on your background, <a href=\"https://leanprover-community.github.io/mathematics_in_lean/\">#mil</a> is probably a good choice.</p>",
        "id": 393780240,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1695924777
    },
    {
        "content": "<p>Depending on your background maybe <a href=\"https://hrmacbeth.github.io/math2001/index.html\">https://hrmacbeth.github.io/math2001/index.html</a> or <a href=\"https://leanprover-community.github.io/mathematics_in_lean/\">#mil</a> darn Jireh is inb4ing me all the time today :-)</p>",
        "id": 393780302,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1695924796
    },
    {
        "content": "<p>Re: division by 0 making you angry. I was a bit upset/confused by this at the time, and I wrote my own real square root function which would only accept nonnegative inputs (this was back in 2017 when Lean had no square root function, indeed it had only just got the real numbers!). And then I tried to formally prove that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msqrt><mn>2</mn></msqrt><mo>+</mo><msqrt><mn>3</mn></msqrt><mo>&lt;</mo><msqrt><mn>10</mn></msqrt></mrow><annotation encoding=\"application/x-tex\">\\sqrt{2}+\\sqrt{3}&lt;\\sqrt{10}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.04em;vertical-align:-0.1328em;\"></span><span class=\"mord sqrt\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.9072em;\"><span class=\"svg-align\" style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\" style=\"padding-left:0.833em;\"><span class=\"mord\">2</span></span></span><span style=\"top:-2.8672em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"hide-tail\" style=\"min-width:0.853em;height:1.08em;\"><svg xmlns=\"http://www.w3.org/2000/svg\" width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702\nc-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14\nc0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54\nc44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10\ns173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429\nc69,-144,104.5,-217.7,106.5,-221\nl0 -0\nc5.3,-9.3,12,-14,20,-14\nH400000v40H845.2724\ns-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7\nc-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47z\nM834 80h400000v40h-400000z'/></svg></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1328em;\"><span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.04em;vertical-align:-0.1328em;\"></span><span class=\"mord sqrt\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.9072em;\"><span class=\"svg-align\" style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\" style=\"padding-left:0.833em;\"><span class=\"mord\">3</span></span></span><span style=\"top:-2.8672em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"hide-tail\" style=\"min-width:0.853em;height:1.08em;\"><svg xmlns=\"http://www.w3.org/2000/svg\" width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702\nc-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14\nc0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54\nc44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10\ns173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429\nc69,-144,104.5,-217.7,106.5,-221\nl0 -0\nc5.3,-9.3,12,-14,20,-14\nH400000v40H845.2724\ns-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7\nc-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47z\nM834 80h400000v40h-400000z'/></svg></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1328em;\"><span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.04em;vertical-align:-0.1328em;\"></span><span class=\"mord sqrt\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.9072em;\"><span class=\"svg-align\" style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\" style=\"padding-left:0.833em;\"><span class=\"mord\">10</span></span></span><span style=\"top:-2.8672em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"hide-tail\" style=\"min-width:0.853em;height:1.08em;\"><svg xmlns=\"http://www.w3.org/2000/svg\" width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702\nc-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14\nc0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54\nc44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10\ns173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429\nc69,-144,104.5,-217.7,106.5,-221\nl0 -0\nc5.3,-9.3,12,-14,20,-14\nH400000v40H845.2724\ns-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7\nc-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47z\nM834 80h400000v40h-400000z'/></svg></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1328em;\"><span></span></span></span></span></span></span></span></span> using my definition and it was really awful. I quickly came round to the weird way of thinking. After collecting my thoughts I wrote this blog post <a href=\"https://xenaproject.wordpress.com/2020/07/05/division-by-zero-in-type-theory-a-faq/\">https://xenaproject.wordpress.com/2020/07/05/division-by-zero-in-type-theory-a-faq/</a> which maybe helps?</p>",
        "id": 393780937,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1695925010
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"216358\">Alexander Belov</span> has marked this topic as resolved.</p>",
        "id": 393784871,
        "sender_full_name": "Notification Bot",
        "timestamp": 1695926388
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"216358\">Alexander Belov</span> has marked this topic as unresolved.</p>",
        "id": 393794984,
        "sender_full_name": "Notification Bot",
        "timestamp": 1695930604
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"216358\">Alexander Belov</span> has marked this topic as resolved.</p>",
        "id": 393795833,
        "sender_full_name": "Notification Bot",
        "timestamp": 1695930954
    }
]