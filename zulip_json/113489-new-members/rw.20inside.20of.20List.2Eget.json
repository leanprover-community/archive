[
    {
        "content": "<p>I have two lists that are equal and I want to simplify a <code>List.get</code> expression using this. My understanding is that <code>rw</code> can't do this, because of the dependent typing of the <code>i</code> argument to get? So, I understand the problem, but not how to resolve it. :) Any help?</p>\n<p>mwe of the problem I'm facing (obviously a very silly looking example, but mwe's usually are):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">foobar</span> <span class=\"o\">{</span><span class=\"n\">l₁</span> <span class=\"n\">l₂</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">l₁</span> <span class=\"bp\">=</span> <span class=\"n\">l₂</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">l₁</span> <span class=\"bp\">=</span> <span class=\"n\">l₂</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">apply</span> <span class=\"n\">List.ext_get</span>\n  <span class=\"n\">case</span> <span class=\"n\">hl</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]</span>\n  <span class=\"n\">intro</span> <span class=\"n\">n</span> <span class=\"n\">hn₁</span> <span class=\"n\">hn₂</span>\n  <span class=\"c1\">-- rw [h]</span>\n  <span class=\"c1\">-- nope, \"tactic 'rewrite' failed, motive is not type correct\"</span>\n\n  <span class=\"c1\">-- simp [h]</span>\n  <span class=\"c1\">-- nope, \"simp made no progress\"</span>\n\n  <span class=\"c1\">-- conv =&gt;</span>\n  <span class=\"c1\">--   lhs</span>\n  <span class=\"c1\">--   arg 1</span>\n  <span class=\"c1\">-- nope, \"cannot select argument\"</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 405583288,
        "sender_full_name": "Alex Meiburg",
        "timestamp": 1701564929
    },
    {
        "content": "<p><code>subst h</code> followed by <code>rfl</code> worked for me. Wonder what <code>subst h; rfl</code> would expand to (rather, what its tactic equivalent would be) without using the <code>subst</code> tactic though.</p>",
        "id": 405584141,
        "sender_full_name": "Yongyi Chen",
        "timestamp": 1701565320
    },
    {
        "content": "<p>ah, that's what I needed! I guess when I use <code>rw</code> I'm really usually just using it for <code>subst</code>. I wasn't aware that <code>subst</code> could \"go in\" where rw can't. Thanks!</p>",
        "id": 405584388,
        "sender_full_name": "Alex Meiburg",
        "timestamp": 1701565398
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"448405\">Alex Meiburg</span> has marked this topic as resolved.</p>",
        "id": 405584402,
        "sender_full_name": "Notification Bot",
        "timestamp": 1701565407
    },
    {
        "content": "<p>If <code>subst h</code> doesn't work (because it's an equality between list expressions that aren't variables) you could try <code>congr!</code>, which works here</p>",
        "id": 405584429,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1701565423
    },
    {
        "content": "<p>It seems like every day I learn a few new tactics that I wish I had known about for a while now :')</p>",
        "id": 405584434,
        "sender_full_name": "Alex Meiburg",
        "timestamp": 1701565424
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"448405\">Alex Meiburg</span> has marked this topic as unresolved.</p>",
        "id": 405584527,
        "sender_full_name": "Notification Bot",
        "timestamp": 1701565458
    },
    {
        "content": "<p><code>congr!</code> can \"select\" arguments that are hard to select. It closes the goal because it uses <code>assumption</code> to try to clean things up.</p>",
        "id": 405584560,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1701565482
    },
    {
        "content": "<p>oops, yes, this actually isn't what I need. I forgot that subst only works on equalities of variables. Really, I want to rewrite that <code>l1 = a::ls</code>, and then do quite a bit further manipulation... so my mwe doesn't capture either of those issues. I'll try to make a better mwe I guess?</p>",
        "id": 405584636,
        "sender_full_name": "Alex Meiburg",
        "timestamp": 1701565528
    },
    {
        "content": "<p>When you have functions that don't work right with <code>simp</code>, you can write <code>@[congr]</code> lemmas to help it rewrite at each argument. Here's a possible one for <code>List.get</code>, but a downside with this particular one is that it inserts <code>Fin.cast</code> expressions, which isn't great.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">congr</span><span class=\"kd\">]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">List.congr_get</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">l₁</span> <span class=\"n\">l₂</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">l₁</span> <span class=\"bp\">=</span> <span class=\"n\">l₂</span><span class=\"o\">)</span>\n    <span class=\"o\">{</span><span class=\"n\">i₁</span> <span class=\"n\">i₂</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">l₁.length</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hi</span> <span class=\"o\">:</span> <span class=\"n\">i₁</span> <span class=\"bp\">=</span> <span class=\"n\">i₂</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">l₁.get</span> <span class=\"n\">i₁</span> <span class=\"bp\">=</span> <span class=\"n\">l₂.get</span> <span class=\"o\">(</span><span class=\"n\">i₂.cast</span> <span class=\"n\">congr</span><span class=\"o\">(</span><span class=\"n\">length</span> <span class=\"bp\">$</span><span class=\"n\">h</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">subst_vars</span>\n  <span class=\"n\">rfl</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">foobar</span> <span class=\"o\">{</span><span class=\"n\">l₁</span> <span class=\"n\">l₂</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">l₁</span> <span class=\"bp\">=</span> <span class=\"n\">l₂</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">l₁</span> <span class=\"bp\">=</span> <span class=\"n\">l₂</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">apply</span> <span class=\"n\">List.ext_get</span>\n  <span class=\"n\">case</span> <span class=\"n\">hl</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]</span>\n  <span class=\"n\">intro</span> <span class=\"n\">n</span> <span class=\"n\">hn₁</span> <span class=\"n\">hn₂</span>\n  <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]</span>\n  <span class=\"c\">/-</span>\n<span class=\"cm\">  ⊢ List.get l₂ (Fin.cast _ { val := n, isLt := hn₁ }) = List.get l₂ { val := n, isLt := hn₂ }</span>\n<span class=\"cm\">  -/</span>\n</code></pre></div>",
        "id": 405585058,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1701565750
    },
    {
        "content": "<p>I guess you could also use this <code>congr</code> lemma, which could be better, since it ought to at least let <code>simp</code> eliminate the <code>Fin.cast</code> a bit earlier (though it won't in your example).</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[</span><span class=\"n\">congr</span><span class=\"kd\">]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">List.congr_get</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">l₁</span> <span class=\"n\">l₂</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">l₁</span> <span class=\"bp\">=</span> <span class=\"n\">l₂</span><span class=\"o\">)</span>\n    <span class=\"o\">{</span><span class=\"n\">i₁</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">l₁.length</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">i₂</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">l₂.length</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hi</span> <span class=\"o\">:</span> <span class=\"n\">i₁.cast</span> <span class=\"n\">congr</span><span class=\"o\">(</span><span class=\"n\">length</span> <span class=\"bp\">$</span><span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">i₂</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">l₁.get</span> <span class=\"n\">i₁</span> <span class=\"bp\">=</span> <span class=\"n\">l₂.get</span> <span class=\"n\">i₂</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">subst_vars</span>\n  <span class=\"n\">rfl</span>\n</code></pre></div>\n<p>(I didn't know this was a legal <code>congr</code> lemma until now!)</p>",
        "id": 405585431,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1701565969
    },
    {
        "content": "<p>Well, I can't say I totally understand why that lets <code>congr</code> solve things it otherwise couldn't, but cool thanks! :) It seems like it does resolve my issue, I think...</p>",
        "id": 405586075,
        "sender_full_name": "Alex Meiburg",
        "timestamp": 1701566393
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"448405\">Alex Meiburg</span> has marked this topic as resolved.</p>",
        "id": 405586077,
        "sender_full_name": "Notification Bot",
        "timestamp": 1701566395
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"448405\">@Alex Meiburg</span> It's not for <code>congr</code>, but for <code>simp</code> (and <code>simp_rw</code>). Here's a model for you for how <code>simp</code> does its rewriting. Say you want to run <code>simp</code> on a goal <code>e</code>. What <code>simp</code>'s job is is to come up with an equality <code>e = e'</code> with <code>e'</code> the result of simplification, and then it rewrites <code>e</code> using this equality.</p>\n<p>So, it sets up the goal <code>e = ?e'</code> with the RHS a metavariable, and then it does the following recursive procedure. It finds an appropriate \"congruence lemma\" given specific features of <code>e</code> (it is able to generate its own, but you can give it custom congruence lemmas like I did for <code>List.get</code> when it needs help). Then it essentially uses <code>apply</code> with this congruence lemma. This results in some number of hypotheses (two in the case of <code>List.congr_get</code>) of the same <code>x = ?x'</code> form, corresponding to sub-parts of <code>e</code>, and then it recurses.</p>",
        "id": 405587197,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1701566894
    },
    {
        "content": "<p>Somewhere in here it uses <code>@[simp]</code> lemmas to actually come up with simplifications to particular subexpressions, rather than just using the congruence lemmas to navigate into the subexpressions.</p>",
        "id": 405587389,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1701567034
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"448405\">Alex Meiburg</span> has marked this topic as unresolved.</p>",
        "id": 405587845,
        "sender_full_name": "Notification Bot",
        "timestamp": 1701567363
    },
    {
        "content": "<p>I see, okay. I'm still struggling with anything involving List.get, I think the dependent types or something are just making my life miserable. My state looks like this (modulo some irrelevant hypotheses):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">α</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_2</span>\n<span class=\"n\">inst</span><span class=\"o\">:</span> <span class=\"n\">Semiring</span> <span class=\"n\">α</span>\n<span class=\"n\">P</span><span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">]</span>\n<span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span>\n<span class=\"n\">hn</span><span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"n\">natDegree</span> <span class=\"n\">P</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n<span class=\"n\">this</span><span class=\"o\">:</span> <span class=\"n\">natDegree</span> <span class=\"n\">P</span> <span class=\"bp\">≥</span> <span class=\"mi\">1</span>\n<span class=\"n\">hn₂</span><span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">coeff</span> <span class=\"n\">P</span>\n    <span class=\"o\">(</span><span class=\"n\">List.get</span> <span class=\"o\">(</span><span class=\"n\">List.reverse</span> <span class=\"o\">(</span><span class=\"n\">List.range</span> <span class=\"o\">(</span><span class=\"n\">natDegree</span> <span class=\"n\">P</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)))</span>\n      <span class=\"o\">{</span> <span class=\"n\">val</span> <span class=\"o\">:=</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">isLt</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"n\">List.length</span> <span class=\"o\">(</span><span class=\"n\">List.reverse</span> <span class=\"o\">(</span><span class=\"n\">List.range</span> <span class=\"o\">(</span><span class=\"n\">natDegree</span> <span class=\"n\">P</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))))</span> <span class=\"o\">})</span> <span class=\"bp\">=</span>\n  <span class=\"n\">List.get</span> <span class=\"o\">(</span><span class=\"n\">leadingCoeff</span> <span class=\"n\">P</span> <span class=\"o\">::</span> <span class=\"n\">List.replicate</span> <span class=\"o\">(</span><span class=\"n\">natDegree</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n    <span class=\"o\">{</span> <span class=\"n\">val</span> <span class=\"o\">:=</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">isLt</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"n\">Nat.succ</span> <span class=\"o\">(</span><span class=\"n\">List.length</span> <span class=\"o\">(</span><span class=\"n\">List.replicate</span> <span class=\"o\">(</span><span class=\"n\">natDegree</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"mi\">0</span><span class=\"o\">)))</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>There's all these nice lemmas about List.get, like <code>List.get_reverse</code>, but I can't seem to apply any of them. Or like, if I have that <code>n=0</code>, then I would like to use <code>List.get_cons_zero</code> since I have <code>List.get (... :: ...) { val := 0, ... }</code>, but I can't seem to apply it. The congr lemma you shared fixed some issues but it's still saying no every step of the way...</p>\n<p>I think maybe I'm just fundamentally ignorant about how to handle things when the <code>Fin</code> argument to <code>get</code> are dependent on the list, and then the <code>Fin.isLt</code> is dependent on the <code>Fin.val</code>... ugh</p>",
        "id": 405587852,
        "sender_full_name": "Alex Meiburg",
        "timestamp": 1701567364
    },
    {
        "content": "<p>I see, okay. I'm still struggling with anything involving List.get, I think the dependent types or something are just making my life miserable. My state looks like this (modulo some irrelevant hypotheses):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">α</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_2</span>\n<span class=\"n\">inst</span><span class=\"o\">:</span> <span class=\"n\">Semiring</span> <span class=\"n\">α</span>\n<span class=\"n\">P</span><span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">]</span>\n<span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span>\n<span class=\"n\">hn</span><span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"n\">natDegree</span> <span class=\"n\">P</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n<span class=\"n\">this</span><span class=\"o\">:</span> <span class=\"n\">natDegree</span> <span class=\"n\">P</span> <span class=\"bp\">≥</span> <span class=\"mi\">1</span>\n<span class=\"n\">hn₂</span><span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">coeff</span> <span class=\"n\">P</span>\n    <span class=\"o\">(</span><span class=\"n\">List.get</span> <span class=\"o\">(</span><span class=\"n\">List.reverse</span> <span class=\"o\">(</span><span class=\"n\">List.range</span> <span class=\"o\">(</span><span class=\"n\">natDegree</span> <span class=\"n\">P</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)))</span>\n      <span class=\"o\">{</span> <span class=\"n\">val</span> <span class=\"o\">:=</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">isLt</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"n\">List.length</span> <span class=\"o\">(</span><span class=\"n\">List.reverse</span> <span class=\"o\">(</span><span class=\"n\">List.range</span> <span class=\"o\">(</span><span class=\"n\">natDegree</span> <span class=\"n\">P</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))))</span> <span class=\"o\">})</span> <span class=\"bp\">=</span>\n  <span class=\"n\">List.get</span> <span class=\"o\">(</span><span class=\"n\">leadingCoeff</span> <span class=\"n\">P</span> <span class=\"o\">::</span> <span class=\"n\">List.replicate</span> <span class=\"o\">(</span><span class=\"n\">natDegree</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n    <span class=\"o\">{</span> <span class=\"n\">val</span> <span class=\"o\">:=</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">isLt</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"n\">Nat.succ</span> <span class=\"o\">(</span><span class=\"n\">List.length</span> <span class=\"o\">(</span><span class=\"n\">List.replicate</span> <span class=\"o\">(</span><span class=\"n\">natDegree</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"mi\">0</span><span class=\"o\">)))</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>There's all these nice lemmas about List.get, like <code>List.get_reverse</code>, but I can't seem to apply any of them. Or like, if I have that <code>n=0</code>, then I would like to use <code>List.get_cons_zero</code> since I have <code>List.get (... :: ...) { val := 0, ... }</code>, but I can't seem to apply it. The congr lemma you shared fixed some issues but it's still saying no every step of the way...</p>\n<p>I think maybe I'm just fundamentally ignorant about how to handle things when the <code>Fin</code> argument to <code>get</code> are dependent on the list, and then the <code>Fin.isLt</code> is dependent on the <code>Fin.val</code>... ugh</p>",
        "id": 405587910,
        "sender_full_name": "Alex Meiburg",
        "timestamp": 1701567400
    },
    {
        "content": "<p>At this point I don't even know how to make a good mwe. I can't even use the proof state as an example because of the underscores in the goal... and I don't know how to handle those :(</p>",
        "id": 405587996,
        "sender_full_name": "Alex Meiburg",
        "timestamp": 1701567470
    },
    {
        "content": "<p>Could you use <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=List.get%21#doc\">docs#List.get!</a> instead of <code>List.get</code> so that you could avoid dependent types?</p>",
        "id": 405588077,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1701567513
    },
    {
        "content": "<p>Maybe. I really want to use <code>List.ext_get</code>, and there doesn't seem to be a <code>List.ext_get!</code> -- <em>yet</em>. (Say that three times quickly...) Maybe I'll just prove a <code>List.ext_get!</code> and then use that. Doesn't seem like it should be too bad! And then I can avoid this madness haha</p>",
        "id": 405588671,
        "sender_full_name": "Alex Meiburg",
        "timestamp": 1701567940
    },
    {
        "content": "<p>By the way, here's another way I found that's really tricky (path induction):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">induction</span> <span class=\"n\">h</span> <span class=\"k\">with</span>\n<span class=\"bp\">|</span> <span class=\"n\">refl</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 405589085,
        "sender_full_name": "Yongyi Chen",
        "timestamp": 1701568209
    },
    {
        "content": "<p>I think this is similar to <code>subst h</code> under the hood, but they're different in one way: induction uses <code>Eq.rec</code> while subst uses <code>Eq.ndrec</code> (at least in this case).</p>",
        "id": 405589205,
        "sender_full_name": "Yongyi Chen",
        "timestamp": 1701568306
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"582393\">Yongyi Chen</span> has marked this topic as unresolved.</p>",
        "id": 405589503,
        "sender_full_name": "Notification Bot",
        "timestamp": 1701568523
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"582393\">@Yongyi Chen</span> Is that different from doing <code>cases h</code>? That's a common trick for handling the case when <code>h</code> is an equality involving constructors</p>",
        "id": 405589596,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1701568569
    },
    {
        "content": "<p>Using <code>by?</code> I see that the expansion of <code>cases h</code> also uses <code>Eq.ndrec</code> but also wraps the expression in an <code>Eq.casesOn</code>.</p>",
        "id": 405589650,
        "sender_full_name": "Yongyi Chen",
        "timestamp": 1701568619
    },
    {
        "content": "<p>(I think the big difference between <code>subst</code> and <code>cases</code> is that the latter does \"dependent elimination\", meaning it can handle more equalities than just those with a free variable on one side. <code>induction</code> is very similar to <code>cases</code>, maybe even the same in what it can do)</p>",
        "id": 405589769,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1701568690
    },
    {
        "content": "<p>Makes sense, <code>subst h</code> and <code>rcases h with rfl</code> expand to the same thing. So <code>rcases</code> (or <code>cases</code>) is more general.</p>",
        "id": 405589827,
        "sender_full_name": "Yongyi Chen",
        "timestamp": 1701568747
    },
    {
        "content": "<p>Is there some inference about <code>subst</code> vs <code>induction</code> that you're drawing regarding <code>Eq.rec</code> vs <code>Eq.ndrec</code>? Or is that a difference you noticed between them?</p>",
        "id": 405589968,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1701568825
    },
    {
        "content": "<p>I noticed the difference using <code>by?</code>. I don't claim to understand too much.</p>",
        "id": 405590122,
        "sender_full_name": "Yongyi Chen",
        "timestamp": 1701568892
    },
    {
        "content": "<p>Induction doesn't seem to be too happy in this example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">10</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hb</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">10</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">Fin.mk</span> <span class=\"n\">a</span> <span class=\"n\">ha</span> <span class=\"bp\">=</span> <span class=\"n\">Fin.mk</span> <span class=\"n\">b</span> <span class=\"n\">hb</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">induction</span> <span class=\"n\">h</span> <span class=\"k\">with</span>\n  <span class=\"c\">/-</span>\n<span class=\"cm\">  index in target's type is not a variable (consider using the `cases` tactic instead)</span>\n<span class=\"cm\">    { val := b, isLt := hb }</span>\n<span class=\"cm\">  -/</span>\n  <span class=\"bp\">|</span> <span class=\"n\">refl</span> <span class=\"bp\">=&gt;</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 405590505,
        "sender_full_name": "Yongyi Chen",
        "timestamp": 1701569091
    },
    {
        "content": "<p>Ah, ok, <code>induction</code> has a <code>subst</code>-like restriction. (The \"indices\" for the <code>Eq</code> type are the <code>x</code> and <code>y</code> in <code>x = y</code>). It's <code>cases</code> that knows how to carry out dependent elimination, where it sees that <code>h</code> is the same as <code>a = b</code> and <code>ha = hb</code> (though <code>ha</code> and <code>hb</code> are propositions, so it might just ignore them)</p>",
        "id": 405590680,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1701569222
    },
    {
        "content": "<p>(I don't <em>really</em> know what dependent elimination is beyond having experience with Lean's error messages that complain when <code>cases</code> can't do it.)</p>",
        "id": 405590830,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1701569321
    },
    {
        "content": "<p>The first step to sanity</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- If two lists are the same length and get! is the same on all indices, the lists are equal. -/</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">List.ext_get</span><span class=\"bp\">!</span> <span class=\"o\">[</span><span class=\"n\">Inhabited</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">hl</span> <span class=\"o\">:</span> <span class=\"n\">length</span> <span class=\"n\">l₁</span> <span class=\"bp\">=</span> <span class=\"n\">length</span> <span class=\"n\">l₂</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">get</span><span class=\"bp\">!</span> <span class=\"n\">l₁</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">get</span><span class=\"bp\">!</span> <span class=\"n\">l₂</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">l₁</span> <span class=\"bp\">=</span> <span class=\"n\">l₂</span> <span class=\"o\">:=</span>\n  <span class=\"n\">ext</span> <span class=\"k\">fun</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span>\n      <span class=\"n\">cases</span> <span class=\"n\">h₃</span> <span class=\"o\">:</span> <span class=\"n\">get</span><span class=\"bp\">?</span> <span class=\"n\">l₁</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">cases</span> <span class=\"n\">h₄</span> <span class=\"o\">:</span> <span class=\"n\">get</span><span class=\"bp\">?</span> <span class=\"n\">l₂</span> <span class=\"n\">n</span>\n      <span class=\"n\">case</span> <span class=\"n\">none.none</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rfl</span>\n      <span class=\"n\">case</span> <span class=\"n\">none.some</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">exfalso</span><span class=\"bp\">;</span> <span class=\"n\">linarith</span> <span class=\"o\">[</span><span class=\"n\">get</span><span class=\"bp\">?</span><span class=\"n\">_eq_none.mp</span> <span class=\"n\">h₃</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">get</span><span class=\"bp\">?</span><span class=\"n\">_eq_some.mp</span> <span class=\"n\">h₄</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">]</span>\n      <span class=\"n\">case</span> <span class=\"n\">some.none</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">exfalso</span><span class=\"bp\">;</span> <span class=\"n\">linarith</span> <span class=\"o\">[</span><span class=\"n\">get</span><span class=\"bp\">?</span><span class=\"n\">_eq_none.mp</span> <span class=\"n\">h₄</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">get</span><span class=\"bp\">?</span><span class=\"n\">_eq_some.mp</span> <span class=\"n\">h₃</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">]</span>\n      <span class=\"n\">case</span> <span class=\"n\">some.some</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">congr</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">get</span><span class=\"bp\">!</span><span class=\"n\">_of_get</span><span class=\"bp\">?</span> <span class=\"n\">h₃</span><span class=\"o\">)</span> <span class=\"bp\">▸</span> <span class=\"o\">(</span><span class=\"n\">get</span><span class=\"bp\">!</span><span class=\"n\">_of_get</span><span class=\"bp\">?</span> <span class=\"n\">h₄</span><span class=\"o\">)</span> <span class=\"bp\">▸</span> <span class=\"n\">h</span> <span class=\"n\">n</span>\n</code></pre></div>",
        "id": 405590992,
        "sender_full_name": "Alex Meiburg",
        "timestamp": 1701569442
    }
]