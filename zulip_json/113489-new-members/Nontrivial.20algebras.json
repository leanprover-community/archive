[
    {
        "content": "<p>[Edit: rewrite] What is the classy proof of this example? (Is there an <code>NeZero (1)</code> instance for the algebra?)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Real.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.LinearAlgebra.ExteriorAlgebra.Basic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">ExteriorAlgebra</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">AddCommGroup</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Module</span> <span class=\"n\">ℝ</span> <span class=\"n\">V</span><span class=\"o\">]</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ExteriorAlgebra</span> <span class=\"n\">ℝ</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">let</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"n\">algebraMap</span> <span class=\"n\">ℝ</span> <span class=\"o\">(</span><span class=\"n\">ExteriorAlgebra</span> <span class=\"n\">ℝ</span> <span class=\"n\">V</span><span class=\"o\">)</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">RingHom.map_one</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">RingHom.map_zero</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">algebraMap_inj</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n  <span class=\"n\">exact</span> <span class=\"n\">one_ne_zero</span> <span class=\"n\">h</span>\n</code></pre></div>",
        "id": 398854745,
        "sender_full_name": "Richard Copley",
        "timestamp": 1698396880
    },
    {
        "content": "<p>Maybe <code>Nontrivial</code>?</p>",
        "id": 398864379,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1698400345
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"644391\">@loogle</span> Nontrivial, ExteriorAlgebra</p>",
        "id": 398865448,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1698400733
    },
    {
        "content": "<p><span aria-label=\"search\" class=\"emoji emoji-1f50d\" role=\"img\" title=\"search\">:search:</span> <a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/LinearAlgebra/ExteriorAlgebra/Basic.html#ExteriorAlgebra.%CE%B9_ne_one\">ExteriorAlgebra.ι_ne_one</a></p>",
        "id": 398865455,
        "sender_full_name": "loogle",
        "timestamp": 1698400735
    },
    {
        "content": "<p>I'm now confused about the maths going on here [why are <code>iota</code> and <code>algebraMap</code> completely different?) but I think it's totally fine to put a <code>Nontrivial</code> instance on <code>ExteriorAlgebra</code> depending on <code>R</code> being nontrivial, which should give this result for free? Or maybe it needs to be a lemma, as R isn't an outparam based on V....</p>",
        "id": 398866684,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1698401080
    },
    {
        "content": "<p>It could be added for R/C explicitly, of course</p>",
        "id": 398866712,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1698401088
    },
    {
        "content": "<p><code>CliffordAlgebra.ι</code> is from the module (<code>V</code>), <code>Algebra.algebraMap</code> from the base ring (<code>ℝ</code>)</p>",
        "id": 398866841,
        "sender_full_name": "Richard Copley",
        "timestamp": 1698401141
    },
    {
        "content": "<p>I thought I added this result...</p>",
        "id": 398867165,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1698401278
    },
    {
        "content": "<p>It should be trivial from <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=ExteriorAlgebra.algebraMap_leftInverse#doc\">docs#ExteriorAlgebra.algebraMap_leftInverse</a></p>",
        "id": 398867336,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1698401339
    },
    {
        "content": "<p><code>.injective.nontrivial</code> should do it</p>",
        "id": 398867660,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1698401468
    },
    {
        "content": "<p>Is there something broken with casting?  Shouldn't the following work, by <code>Algebra.cast</code>?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#check</span> <span class=\"o\">((</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ExteriorAlgebra</span> <span class=\"n\">ℝ</span> <span class=\"n\">V</span><span class=\"o\">)</span>\n<span class=\"c1\">-- type mismatch</span>\n<span class=\"c1\">--   1</span>\n<span class=\"c1\">-- has type</span>\n<span class=\"c1\">--   ℝ : Type</span>\n<span class=\"c1\">-- but is expected to have type</span>\n<span class=\"c1\">--   ExteriorAlgebra ℝ V : Type u_1</span>\n</code></pre></div>",
        "id": 398867746,
        "sender_full_name": "Richard Copley",
        "timestamp": 1698401507
    },
    {
        "content": "<p>I think Eric is confused, this would be fine as an instance (please PR it!)</p>",
        "id": 398867755,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1698401510
    },
    {
        "content": "<p>I thought we eliminated <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Algebra.cast#doc\">docs#Algebra.cast</a> during porting</p>",
        "id": 398867879,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1698401544
    },
    {
        "content": "<p>Ah, we just de-instanced it</p>",
        "id": 398867937,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1698401567
    },
    {
        "content": "<p>The correct spelling is unfortunately the rather clunky <code>algebraMap _ _ (1 : ℝ)</code></p>",
        "id": 398868003,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1698401597
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113489-new-members/topic/Nontrivial.20algebras/near/398867755\">said</a>:</p>\n<blockquote>\n<p>I think Eric is confused, this would be fine as an instance (please PR it!)</p>\n</blockquote>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">AddCommGroup</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">CommRing</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Module</span> <span class=\"n\">R</span> <span class=\"n\">V</span><span class=\"o\">]</span>\n<span class=\"o\">:</span> <span class=\"n\">NeZero</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ExteriorAlgebra</span> <span class=\"n\">R</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>?</p>",
        "id": 398868407,
        "sender_full_name": "Richard Copley",
        "timestamp": 1698401734
    },
    {
        "content": "<p>No,</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">AddCommGroup</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">CommRing</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Nontrivial</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Module</span> <span class=\"n\">R</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"n\">Nontrivial</span> <span class=\"o\">(</span><span class=\"n\">ExteriorAlgebra</span> <span class=\"n\">R</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 398868674,
        "sender_full_name": "Richard Copley",
        "timestamp": 1698401844
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113489-new-members/topic/Nontrivial.20algebras/near/398867755\">said</a>:</p>\n<blockquote>\n<p>I think Eric is confused, this would be fine as an instance (please PR it!)</p>\n</blockquote>\n<p>ah, as R and V are explicit in the definition of exterior algebra... clearly low on the awakeness part :)</p>",
        "id": 398869374,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1698402143
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"400544\">Richard Copley</span> <a href=\"#narrow/stream/113489-new-members/topic/Nontrivial.20algebras/near/398868407\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113489-new-members/topic/Nontrivial.20algebras/near/398867755\">said</a>:</p>\n<blockquote>\n<p>I think Eric is confused, this would be fine as an instance (please PR it!)</p>\n</blockquote>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">AddCommGroup</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">CommRing</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Module</span> <span class=\"n\">R</span> <span class=\"n\">V</span><span class=\"o\">]</span>\n<span class=\"o\">:</span> <span class=\"n\">NeZero</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ExteriorAlgebra</span> <span class=\"n\">R</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>?</p>\n</blockquote>\n<p>this will come from <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=NeZero.one#doc\">docs#NeZero.one</a></p>",
        "id": 398869414,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1698402158
    },
    {
        "content": "<p>Ugh, is this true in a <code>CliffordAlgebra</code> too? I'll think about that.</p>",
        "id": 398870048,
        "sender_full_name": "Richard Copley",
        "timestamp": 1698402423
    },
    {
        "content": "<p>In characteristic not two, yes</p>",
        "id": 398870568,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1698402680
    },
    {
        "content": "<p>(go via <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=CliffordAlgebra.equivExterior#doc\">docs#CliffordAlgebra.equivExterior</a>)</p>",
        "id": 398870656,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1698402714
    },
    {
        "content": "<p>Or even more generally when you can write <code>Q</code> as <code>B.toQuadraticForm</code> (which would be easy to generalize to, but maybe isn't worth the awkwardness it creates)</p>",
        "id": 398874205,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1698404032
    },
    {
        "content": "<p>You might find <a href=\"https://github.com/leanprover-community/mathlib4/pull/6657\">#6657</a> interesting</p>",
        "id": 398877475,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1698405216
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"400544\">Richard Copley</span> <a href=\"#narrow/stream/113489-new-members/topic/Nontrivial.20algebras/near/398870048\">said</a>:</p>\n<blockquote>\n<p>Ugh, is this true in a <code>CliffordAlgebra</code> too? I'll think about that.</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span>, thank you for not letting me start thinking about that <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 398879382,
        "sender_full_name": "Richard Copley",
        "timestamp": 1698405999
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113489-new-members/topic/Nontrivial.20algebras/near/398867755\">said</a>:</p>\n<blockquote>\n<p>I think Eric is confused, this would be fine as an instance (please PR it!)</p>\n</blockquote>\n<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/7985\">#7985</a></p>",
        "id": 398897958,
        "sender_full_name": "Richard Copley",
        "timestamp": 1698412938
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 398900740,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1698413893
    },
    {
        "content": "<p>Thank you for the help and encouragement. Works for me:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Real.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.LinearAlgebra.ExteriorAlgebra.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.LinearAlgebra.CliffordAlgebra.Contraction</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">AddCommGroup</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Module</span> <span class=\"n\">ℝ</span> <span class=\"n\">V</span><span class=\"o\">]</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ExteriorAlgebra</span> <span class=\"n\">ℝ</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">exact</span><span class=\"bp\">?</span> <span class=\"n\">says</span> <span class=\"n\">exact</span> <span class=\"n\">one_ne_zero</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">Q</span> <span class=\"o\">:</span> <span class=\"n\">QuadraticForm</span> <span class=\"n\">ℝ</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">CliffordAlgebra</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">haveI</span> <span class=\"o\">:</span> <span class=\"n\">Invertible</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">invertibleOfNonzero</span> <span class=\"n\">two_ne_zero</span>\n  <span class=\"n\">exact</span><span class=\"bp\">?</span> <span class=\"n\">says</span> <span class=\"n\">exact</span> <span class=\"n\">one_ne_zero</span>\n</code></pre></div>",
        "id": 398913931,
        "sender_full_name": "Richard Copley",
        "timestamp": 1698418422
    },
    {
        "content": "<p>Nice! I'd be curious to know what applications of <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=CliffordAlgebra#doc\">docs#CliffordAlgebra</a> you have in mind; especially since I might have some results in other branches that I could try to prioritize.</p>",
        "id": 398914865,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1698418735
    },
    {
        "content": "<p>It's a bit round-about. I want the inner product on the exterior algebra (which you will recall is defined in terms of the Gram determinant), so I can define the Hodge star operator, because I want the cross product on a real inner product space, because I want to check an old draft of a (fairly silly) argument about rotations in three-dimensional space. Low-brow stuff, ultimately, but I'd like to do it nicely.</p>\n<p>I might one day try to get some of the theory of spinors clear in my mind, for which Clifford algebra will be needed. But I'm not about to start that soon.</p>",
        "id": 398916726,
        "sender_full_name": "Richard Copley",
        "timestamp": 1698419296
    },
    {
        "content": "<p>I think the inner product on the exterior algebra is probably hiding in <code>Mathlib.LinearAlgebra.CliffordAlgebra.Contraction</code> somewhere</p>",
        "id": 398916879,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1698419360
    },
    {
        "content": "<p>Note that we have <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=crossProduct#doc\">docs#crossProduct</a> already, but I assume you want to stay in general n-dimensional space as long as possible</p>",
        "id": 398917161,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1698419445
    },
    {
        "content": "<p>Yes, I saw that, thanks. That and a few positively oriented orthonormal bases would almost certainly do everything I need. I suppose I just feel it's less expressive, and not as much fun.</p>",
        "id": 398918784,
        "sender_full_name": "Richard Copley",
        "timestamp": 1698419972
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"400544\">Richard Copley</span> <a href=\"#narrow/stream/113489-new-members/topic/Nontrivial.20algebras/near/398916726\">said</a>:</p>\n<blockquote>\n<p>I want the inner product on the exterior algebra (which you will recall is defined in terms of the Gram determinant), so I can define the Hodge star operator, because I want the cross product on a real inner product space,</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"400544\">@Richard Copley</span> I did the cross product for the sphere eversion project but it didn't make it to mathlib yet.  It is morally by the method you describe, although not literally.  You can see the code (it's only ~100 lines) at<br>\n<a href=\"https://github.com/leanprover-community/sphere-eversion/blob/lean4/SphereEversion/ToMathlib/Analysis/InnerProductSpace/CrossProduct.lean\">https://github.com/leanprover-community/sphere-eversion/blob/lean4/SphereEversion/ToMathlib/Analysis/InnerProductSpace/CrossProduct.lean</a></p>",
        "id": 398974977,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1698444833
    },
    {
        "content": "<p>Lovely! I think that is all I need. </p>\n<p>Under those appropriate hypotheses (for instance, if <code>E</code> is an oriented three-dimensional real inner product space), the map <code>f=crossProduct</code> taking <code>u∈E</code> to an element <code>f(u)=(u × ·)</code> of <code>𝔰𝔬(E)</code> is not only an isomorphism of Lie algebras, but also an equivalence of representations from the standard representation <code>id</code> of the Lie algebra <code>𝔰𝔬(E)</code>to the adjoint representation: <code>f(f(u)v) = (ad_{f(u)})(f(v)) = f(u)f(v)-f(v)f(u)</code> (the Jacobi identity).</p>\n<p>Just wanted to get that off my chest <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 398978016,
        "sender_full_name": "Richard Copley",
        "timestamp": 1698447240
    },
    {
        "content": "<p>(<code>f(u×v)=[f(u),f(v)]</code> is a nicer way to put it.)</p>",
        "id": 398978683,
        "sender_full_name": "Richard Copley",
        "timestamp": 1698447674
    }
]