[
    {
        "content": "<p>I'm trying to write an induction over the degree of a polynomial. I define a variable, <code>deg</code>, and then do induction \"generalizing\" the polynomial. I expected something like a hypothesis that <code>deg = 0</code> and <code>deg = succ deg_1</code> or something as my two cases, but there's just ... no such hypotheses on deg. The <code>zero</code> case for the induction gets no new hypotheses, and the <code>succ</code> cases gets the inductive hypothesis but no information about the degree.</p>\n<p>In particular, the <code>succ</code> case gets as the inductive hypothesis that the theorem is true for <em>all</em> polynomials, not just ones of the given degree, so that leaves me back at square one. Not sure what I'm messing up here.</p>\n<p>Example code:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">ex1</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>  <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">α</span><span class=\"o\">](</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">Polynomial</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">centrality</span> <span class=\"n\">P</span> <span class=\"bp\">=</span> <span class=\"n\">vieta_k</span> <span class=\"n\">P</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"k\">let</span> <span class=\"n\">deg</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"n\">P.natDegree</span><span class=\"bp\">;</span>\n    <span class=\"n\">induction</span> <span class=\"n\">deg</span> <span class=\"n\">generalizing</span> <span class=\"n\">P</span>\n    <span class=\"c1\">--zero</span>\n    <span class=\"gr\">sorry</span>\n    <span class=\"c1\">--succ</span>\n    <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 403036840,
        "sender_full_name": "Alex Meiburg",
        "timestamp": 1700416775
    },
    {
        "content": "<p>This might just be me totally not understanding how to use \"let\".</p>",
        "id": 403036971,
        "sender_full_name": "Alex Meiburg",
        "timestamp": 1700416847
    },
    {
        "content": "<p>Would you make that a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>, with all necessary imports, please?</p>",
        "id": 403037366,
        "sender_full_name": "Richard Copley",
        "timestamp": 1700417055
    },
    {
        "content": "<p>Sure, one minute</p>",
        "id": 403037385,
        "sender_full_name": "Alex Meiburg",
        "timestamp": 1700417067
    },
    {
        "content": "<p>Alright, how about this</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Polynomial.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Polynomial.Degree.Definitions</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">id'</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">Polynomial</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">P</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">ex1</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">Polynomial</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">id'</span> <span class=\"n\">P</span> <span class=\"bp\">=</span> <span class=\"n\">P</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"k\">let</span> <span class=\"n\">deg</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"n\">P.natDegree</span><span class=\"bp\">;</span>\n    <span class=\"n\">induction</span> <span class=\"n\">deg</span> <span class=\"n\">generalizing</span> <span class=\"n\">P</span>\n    <span class=\"c1\">--zero</span>\n    <span class=\"gr\">sorry</span>\n    <span class=\"c1\">--succ</span>\n    <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 403037700,
        "sender_full_name": "Alex Meiburg",
        "timestamp": 1700417234
    },
    {
        "content": "<p>The <code>case zero</code> state looks like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">case</span> <span class=\"n\">zero</span>\n<span class=\"n\">α</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span>\n<span class=\"n\">inst</span><span class=\"bp\">✝</span><span class=\"o\">:</span> <span class=\"n\">Field</span> <span class=\"n\">α</span>\n<span class=\"n\">P</span><span class=\"o\">:</span> <span class=\"n\">Polynomial</span> <span class=\"n\">α</span>\n<span class=\"n\">deg</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"n\">Polynomial.natDegree</span> <span class=\"n\">P</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">id'</span> <span class=\"n\">P</span> <span class=\"bp\">=</span> <span class=\"n\">P</span>\n</code></pre></div>\n<p>but I would expect to see some <code>h: deg = 0</code></p>",
        "id": 403037746,
        "sender_full_name": "Alex Meiburg",
        "timestamp": 1700417264
    },
    {
        "content": "<p>And then</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">case</span> <span class=\"n\">succ</span>\n<span class=\"n\">α</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span>\n<span class=\"n\">inst</span><span class=\"bp\">✝</span><span class=\"o\">:</span> <span class=\"n\">Field</span> <span class=\"n\">α</span>\n<span class=\"n\">n</span><span class=\"bp\">✝</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span>\n<span class=\"n\">n_ih</span><span class=\"bp\">✝</span><span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">Polynomial</span> <span class=\"n\">α</span><span class=\"o\">),</span>\n  <span class=\"k\">let</span> <span class=\"n\">deg</span> <span class=\"o\">:=</span> <span class=\"n\">Polynomial.natDegree</span> <span class=\"n\">P</span><span class=\"bp\">;</span>\n  <span class=\"n\">id'</span> <span class=\"n\">P</span> <span class=\"bp\">=</span> <span class=\"n\">P</span>\n<span class=\"n\">P</span><span class=\"o\">:</span> <span class=\"n\">Polynomial</span> <span class=\"n\">α</span>\n<span class=\"n\">deg</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"n\">Polynomial.natDegree</span> <span class=\"n\">P</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">id'</span> <span class=\"n\">P</span> <span class=\"bp\">=</span> <span class=\"n\">P</span>\n</code></pre></div>\n<p>so the <code>n_ih✝</code> looks like it's asserting the original theorem <code>ex1</code> for <em>all</em> polynomials P. What I'd really want is something like,</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">n_ih</span><span class=\"bp\">✝</span><span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">Polynomial</span> <span class=\"n\">α</span><span class=\"o\">),</span>\n  <span class=\"k\">let</span> <span class=\"n\">deg'</span> <span class=\"o\">:=</span> <span class=\"n\">Polynomial.natDegree</span> <span class=\"n\">P</span><span class=\"bp\">;</span>\n  <span class=\"o\">(</span><span class=\"n\">deg</span> <span class=\"bp\">=</span> <span class=\"n\">succ</span> <span class=\"n\">deg'</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">id'</span> <span class=\"n\">P</span> <span class=\"bp\">=</span> <span class=\"n\">P</span>\n</code></pre></div>",
        "id": 403038097,
        "sender_full_name": "Alex Meiburg",
        "timestamp": 1700417467
    },
    {
        "content": "<p>I understand the temptation to try that with the <code>let</code>. Not sure I can put into words exactly what's wrong with it. This works, I think:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">ex1</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">Polynomial</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">P.natDegree</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">id'</span> <span class=\"n\">P</span> <span class=\"bp\">=</span> <span class=\"n\">P</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">induction</span> <span class=\"n\">n</span>\n  <span class=\"n\">case</span> <span class=\"n\">zero</span>\n  <span class=\"gr\">sorry</span>\n  <span class=\"n\">case</span> <span class=\"n\">succ</span> <span class=\"n\">k</span> <span class=\"n\">ih</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 403038216,
        "sender_full_name": "Richard Copley",
        "timestamp": 1700417534
    },
    {
        "content": "<p>I see... so anything I want to do induction over, has to be a parameter to the theorem? That seems unfortunate (but I understand why it could be necessary)</p>",
        "id": 403038317,
        "sender_full_name": "Alex Meiburg",
        "timestamp": 1700417597
    },
    {
        "content": "<p>I guess that could be theorem <code>ex1'</code> and then I define the \"real\" <code>ex1</code> which plugs in those arguments for me... :)</p>",
        "id": 403038374,
        "sender_full_name": "Alex Meiburg",
        "timestamp": 1700417641
    },
    {
        "content": "<blockquote>\n<p>has to be a parameter</p>\n</blockquote>\n<p>Not exactly that, no. For example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">ex1</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">Polynomial</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">id'</span> <span class=\"n\">P</span> <span class=\"bp\">=</span> <span class=\"n\">P</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">set</span> <span class=\"n\">deg</span> <span class=\"o\">:=</span> <span class=\"n\">P.natDegree</span> <span class=\"k\">with</span> <span class=\"n\">h</span>\n  <span class=\"n\">clear_value</span> <span class=\"n\">deg</span>\n  <span class=\"n\">induction</span> <span class=\"n\">deg</span> <span class=\"n\">generalizing</span> <span class=\"n\">P</span>\n  <span class=\"n\">case</span> <span class=\"n\">zero</span>\n  <span class=\"gr\">sorry</span>\n  <span class=\"n\">case</span> <span class=\"n\">succ</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 403038621,
        "sender_full_name": "Richard Copley",
        "timestamp": 1700417777
    },
    {
        "content": "<p>Like this?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Polynomial.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Polynomial.Degree.Definitions</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">id'</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">Polynomial</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">P</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">ex1</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">Polynomial</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">id'</span> <span class=\"n\">P</span> <span class=\"bp\">=</span> <span class=\"n\">P</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">induction'</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">P.natDegree</span> <span class=\"n\">generalizing</span> <span class=\"n\">P</span>\n    <span class=\"c1\">--zero</span>\n    <span class=\"gr\">sorry</span>\n    <span class=\"c1\">--succ</span>\n    <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 403038684,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1700417831
    },
    {
        "content": "<p>:o those are both constructions I'm not familiar with. Thanks!</p>",
        "id": 403038738,
        "sender_full_name": "Alex Meiburg",
        "timestamp": 1700417867
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"448405\">Alex Meiburg</span> has marked this topic as resolved.</p>",
        "id": 403038739,
        "sender_full_name": "Notification Bot",
        "timestamp": 1700417869
    }
]