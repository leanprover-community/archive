[
    {
        "content": "<p>Hi, why isn't <code>Real.intCast.intCast 0</code> definitionally equal to <code>0 : Real</code>? For instance, if I do:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Real.Basic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">Rat.ofInt</span> <span class=\"o\">(</span><span class=\"n\">Int.ofNat</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span> <span class=\"c1\">-- ok</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">Real.intCast.intCast</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span> <span class=\"c1\">-- type mismatch on rfl</span>\n</code></pre></div>\n<p>Is there another casting function that won't have this problem?</p>",
        "id": 403369536,
        "sender_full_name": "Tomaz Gomes",
        "timestamp": 1700569328
    },
    {
        "content": "<p>Why do you care about such implementation details? We have tactics which deal with all of this such as <code>norm_cast</code>.</p>",
        "id": 403379889,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1700572959
    },
    {
        "content": "<p>I am implementing my own tactic, which involves casting variables from <code>Int</code> to <code>Real</code>. I will perform some operations on these variables, and I got some errors by assuming the equality I described. Also, I am curious about this :)</p>",
        "id": 403381025,
        "sender_full_name": "Tomaz Gomes",
        "timestamp": 1700573318
    },
    {
        "content": "<p>The reason they're not defeq is that <a href=\"https://github.com/leanprover-community/mathlib4/blob/c6979569edc545f999b82d8a833b190c918aec2e//Mathlib/Data/Real/Basic.lean#L78-L79\">we deliberately marked them as <code>irreducible_def</code></a> so that lean is not allowed to know that secretly they're defeq after all</p>",
        "id": 403383127,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1700574065
    }
]