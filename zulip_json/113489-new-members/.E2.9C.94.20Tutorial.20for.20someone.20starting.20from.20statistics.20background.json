[
    {
        "content": "<p>Hi, I'm new to Lean and also MathLib. I've just completed the tutorial Theorem Proving in Lean 4. <br>\nAs someone coming from statistics/machine learning background, I have forgotten a lot about foundations of mathematics. Many things people do in statistics/machine learning only deal with multivariate calculus, a bit analysis, linear algebra and some probability. <br>\nDo you any suggestions of tutorials that teach someone to use lean with a focus on \"multivariate calculus, a bit real analysis, linear algebra and some probability \" on a real space and temporarily ignoring other more foundational notions?<br>\nFor example, suggestions for the basic libraries to import and some examples for proving theorems with the above focus?</p>\n<p>To give a sense of the level of linear algebra and probability needed, you may take a look at the review materials suggested before taking CS229 machine learning course at Stanford. <br>\nLinear algebra <a href=\"http://cs229.stanford.edu/section/cs229-linalg.pdf\">http://cs229.stanford.edu/section/cs229-linalg.pdf</a><br>\nProbability <a href=\"http://cs229.stanford.edu/section/cs229-prob.pdf\">http://cs229.stanford.edu/section/cs229-prob.pdf</a></p>",
        "id": 367472463,
        "sender_full_name": "Yuansi Chen",
        "timestamp": 1687131504
    },
    {
        "content": "<p>is there a language reference (separate to the lean4 manual guide)?</p>",
        "id": 367484313,
        "sender_full_name": "cvlvxi",
        "timestamp": 1687138409
    },
    {
        "content": "<p>Another tutorial that starts going into what's in mathlib is <a href=\"https://leanprover-community.github.io/mathematics_in_lean/\">Mathematics in Lean</a></p>",
        "id": 367486162,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1687139545
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span> is there a language ref? i'm seeing examples use terms like rfl but i want to know what it means?</p>",
        "id": 367487130,
        "sender_full_name": "cvlvxi",
        "timestamp": 1687140169
    },
    {
        "content": "<p>Note, multivariable calculus and probability are just on the forefront of formalization.  While they are taught to freshman, the actual foundations require a lot of work to develop correctly.</p>",
        "id": 367489700,
        "sender_full_name": "Jason Rute",
        "timestamp": 1687141767
    },
    {
        "content": "<p>You may also want to check out <a href=\"https://github.com/IBM/FormalML\">https://github.com/IBM/FormalML</a> even though it is in Coq.  (The papers are linked in the README.)</p>",
        "id": 367490039,
        "sender_full_name": "Jason Rute",
        "timestamp": 1687141968
    },
    {
        "content": "<p>I think <span class=\"user-mention\" data-user-id=\"243312\">@Jason KY.</span> is one of the main authors of Lean’s probability library.  He might have some advice for you.</p>",
        "id": 367490200,
        "sender_full_name": "Jason Rute",
        "timestamp": 1687142063
    },
    {
        "content": "<p>Thank you very much for your reply. That is very helpful. <br>\nDo you know how far are we in completing the Lean Probability? (sorry this question might sound rude, mainly because I did not read the source code carefully)<br>\nDo you have suggestions on materials explaining the hierarchy of the mathematical objects or code in this probability part? Are there any guidelines that you would recommend?</p>",
        "id": 367787060,
        "sender_full_name": "Yuansi Chen",
        "timestamp": 1687229410
    },
    {
        "content": "<p>Unfortunately I don't think you're going to find anything particularly friendlier than just trying to read the <code>Mathlib/MeasureTheory/</code> and <code>Mathlib/Probability/</code> directories in the mathlib4 repository.</p>",
        "id": 367802398,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1687238417
    },
    {
        "content": "<p>We also have the mathlib overview page for mathlib3 <a href=\"https://leanprover-community.github.io/mathlib-overview.html\">here</a> which has a small section on probability</p>",
        "id": 367901192,
        "sender_full_name": "Jason KY.",
        "timestamp": 1687262484
    },
    {
        "content": "<p>Thanks for your reply!<br>\nI apologize for my naive questions. <br>\nWhen I start to learn more about Lean Mathlib, I realize that it is written in an encyclopedia fashion that tries to cover all of math. I understand its importance to cover all. However, the encyclopedia fashion is quite different from the way most textbook is written, which usually has a focus on very specific object (say Euclidean space with the usual topology, inner product and calculus), a focus on conveying intuitions and usually has a clear set of prerequisites. <br>\nSometimes when looking at the breadth of Lean Mathlib, it makes me wonder whether I really learnt anything during my undergraduate and graduate studies :P </p>\n<p>May I ask if there is a starter-kit (a few lines of code) for focusing on multivariate-calculus in R^d with the usual topology?<br>\nLet me ask for a concrete example, how would you start with Lean if you were to formulate the Universal approximation theorem for neural networks in R^d (<a href=\"https://en.wikipedia.org/wiki/Universal_approximation_theorem\">wiki</a>) ?</p>\n<p>It will probably have a similar proof strategy as the <a href=\"https://github.com/leanprover-community/mathlib/blob/master/src/topology/continuous_function/stone_weierstrass.lean\">Stone–Weierstrass theorem</a> that is proved in Lean. <br>\nBut I don't need it in the most generic form, that is, I would be happy to have it on a d-dimensional Euclidean space. Could you provide some guidelines? <span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span></p>",
        "id": 368307858,
        "sender_full_name": "Yuansi Chen",
        "timestamp": 1687367255
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"625855\">@Yuansi Chen</span> Here's a Lean statement of the difficult direction of the theorem at that Wikipedia page.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Analysis.NormedSpace.FiniteDimension</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Topology.ContinuousFunction.Compact</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">IsPolynomial</span> <span class=\"o\">(</span><span class=\"n\">σ</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">∃</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">Polynomial</span> <span class=\"n\">ℝ</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">,</span> <span class=\"n\">σ</span> <span class=\"n\">t</span> <span class=\"bp\">=</span> <span class=\"n\">p.eval</span> <span class=\"n\">t</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">neuralNetwork</span> <span class=\"o\">(</span><span class=\"n\">σ</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">(</span><span class=\"n\">ℝ</span><span class=\"o\">,</span> <span class=\"n\">ℝ</span><span class=\"o\">))</span> <span class=\"o\">{</span><span class=\"n\">E</span> <span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span>\n    <span class=\"o\">[</span><span class=\"n\">NormedAddCommGroup</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">NormedSpace</span> <span class=\"n\">ℝ</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">FiniteDimensional</span> <span class=\"n\">ℝ</span> <span class=\"n\">E</span><span class=\"o\">]</span>\n    <span class=\"o\">[</span><span class=\"n\">NormedAddCommGroup</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">NormedSpace</span> <span class=\"n\">ℝ</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">FiniteDimensional</span> <span class=\"n\">ℝ</span> <span class=\"n\">F</span><span class=\"o\">]</span>\n    <span class=\"o\">{</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">E</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">ℝ</span><span class=\"o\">]</span> <span class=\"n\">Fin</span> <span class=\"n\">k</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">k</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">k</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">ℝ</span><span class=\"o\">]</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">C</span><span class=\"o\">(</span><span class=\"n\">K</span><span class=\"o\">,</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">toFun</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">K</span> <span class=\"bp\">↦</span> <span class=\"n\">C</span> <span class=\"o\">(</span><span class=\"n\">σ</span> <span class=\"bp\">∘</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">))</span>\n  <span class=\"n\">continuous_toFun</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">σ</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">(</span><span class=\"n\">ℝ</span><span class=\"o\">,</span> <span class=\"n\">ℝ</span><span class=\"o\">)}</span> <span class=\"o\">(</span><span class=\"n\">hσ</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"n\">IsPolynomial</span> <span class=\"n\">σ</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">E</span> <span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span>\n    <span class=\"o\">[</span><span class=\"n\">NormedAddCommGroup</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">NormedSpace</span> <span class=\"n\">ℝ</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">FiniteDimensional</span> <span class=\"n\">ℝ</span> <span class=\"n\">E</span><span class=\"o\">]</span>\n    <span class=\"o\">[</span><span class=\"n\">NormedAddCommGroup</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">NormedSpace</span> <span class=\"n\">ℝ</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">FiniteDimensional</span> <span class=\"n\">ℝ</span> <span class=\"n\">F</span><span class=\"o\">]</span>\n    <span class=\"o\">{</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">E</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hK</span> <span class=\"o\">:</span> <span class=\"n\">IsCompact</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">(</span><span class=\"n\">K</span><span class=\"o\">,</span> <span class=\"n\">F</span><span class=\"o\">))</span> <span class=\"o\">{</span><span class=\"n\">ε</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hε</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">ε</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"bp\">∃</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">E</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">ℝ</span><span class=\"o\">]</span> <span class=\"n\">Fin</span> <span class=\"n\">k</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">k</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">k</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">ℝ</span><span class=\"o\">]</span> <span class=\"n\">F</span><span class=\"o\">),</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">CompactSpace</span> <span class=\"n\">K</span> <span class=\"o\">:=</span> <span class=\"n\">isCompact_iff_compactSpace.mp</span> <span class=\"n\">hK</span><span class=\"bp\">;</span>\n    <span class=\"bp\">‖</span><span class=\"n\">f</span> <span class=\"bp\">-</span> <span class=\"n\">neuralNetwork</span> <span class=\"n\">σ</span> <span class=\"n\">K</span> <span class=\"n\">A</span> <span class=\"n\">b</span> <span class=\"n\">C</span><span class=\"bp\">‖</span> <span class=\"bp\">&lt;</span> <span class=\"n\">ε</span> <span class=\"o\">:=</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 368730905,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1687484864
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"625855\">Yuansi Chen</span> <a href=\"#narrow/stream/113489-new-members/topic/Tutorial.20for.20someone.20starting.20from.20statistics.20background/near/368307858\">said</a>:</p>\n<blockquote>\n<p>May I ask if there is a starter-kit (a few lines of code) for focusing on multivariate-calculus in R^d with the usual topology?</p>\n</blockquote>\n<p>For this, have you seen <a href=\"https://avigad.github.io/mathematics_in_lean/C09_Differential_Calculus.html\">this chapter</a> of the textbook <em>Mathematics in Lean</em>?</p>",
        "id": 368731514,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1687485134
    },
    {
        "content": "<p>Wow! <br>\n<span class=\"user-mention\" data-user-id=\"260507\">@Heather Macbeth</span> , you are amazing! <br>\nBefore your response, I was wondering whether we have enough to formulate this kind of problems and struggle with which library to import and exactly which \"[ ]\" to put.  But now I am more optimistic about \"the power of Lean\"!</p>\n<p>I have not finished \"Mathematics in Lean\" yet, i'm still at chapter 4. I will continue to learn from that. <br>\nThank you for the pointer and for providing this example!</p>",
        "id": 368733715,
        "sender_full_name": "Yuansi Chen",
        "timestamp": 1687486306
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"625855\">Yuansi Chen</span> has marked this topic as resolved.</p>",
        "id": 368733866,
        "sender_full_name": "Notification Bot",
        "timestamp": 1687486389
    },
    {
        "content": "<p>You're welcome.  I think a lot of beginners can benefit from a \"Rosetta stone\" like this, a few lines of code in their own very specific area of interest.</p>",
        "id": 368734297,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1687486641
    },
    {
        "content": "<p>I would like to add here the \"natural number game\" as a beginners tutorial. Its lean3 but has been fun for me <a href=\"https://www.ma.imperial.ac.uk/~buzzard/xena/natural_number_game\">https://www.ma.imperial.ac.uk/~buzzard/xena/natural_number_game</a></p>",
        "id": 368771309,
        "sender_full_name": "Markus Heimerl",
        "timestamp": 1687501795
    },
    {
        "content": "<p>There is also a Lean 4 version: <a href=\"https://adam.math.hhu.de\">https://adam.math.hhu.de</a></p>",
        "id": 368778732,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1687503739
    }
]