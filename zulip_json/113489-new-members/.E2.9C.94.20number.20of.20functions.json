[
    {
        "content": "<p>How to prove that the number of function from and onto finite type (a nd b respectivley) is |b| ^ |a|?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.fintype.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.fintype.card</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">cardinality_functions_finite</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">b</span><span class=\"o\">)]</span> <span class=\"o\">:</span>\n  <span class=\"n\">fintype.card</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">fintype.card</span> <span class=\"n\">b</span> <span class=\"bp\">^</span> <span class=\"n\">fintype.card</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 361939471,
        "sender_full_name": "Shimon Cohen",
        "timestamp": 1685363772
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/fintype.card_fun\">docs#fintype.card_fun</a></p>",
        "id": 361940725,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1685364107
    },
    {
        "content": "<p>Notice the line above what Eric sent:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- FIXME ouch, this should be in the main file.</span>\n</code></pre></div>",
        "id": 361941441,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1685364274
    },
    {
        "content": "<p>You should import <code>data.fintype.big_operators</code> as well.</p>",
        "id": 361941515,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1685364293
    },
    {
        "content": "<p>It's not working with error:<br>\ninvalid type ascription, term has type<br>\n  fintype.card (?m_1 → ?m_2) = fintype.card ?m_2 ^ fintype.card ?m_1<br>\nbut is expected to have type<br>\n  fintype.card (a → b) = fintype.card b ^ fintype.card a</p>",
        "id": 361946139,
        "sender_full_name": "Shimon Cohen",
        "timestamp": 1685365443
    },
    {
        "content": "<p>Do you have <code>[decidable_eq a]</code>?</p>",
        "id": 361946540,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1685365537
    },
    {
        "content": "<p>You should not assume <code>fintype</code> on the functions, but on the types <code>a</code> and <code>b</code>.</p>",
        "id": 361946621,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1685365556
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"321459\">@Damiano Testa</span> Thanks. it's so weird that addnig restriction cause it to fail</p>",
        "id": 361947518,
        "sender_full_name": "Shimon Cohen",
        "timestamp": 1685365748
    },
    {
        "content": "<p>These are the quirks of typeclasses, when they do not work (which is very rare).  Here is what you could do, if you also wanted to include the explicit assumption on the function types (not recommended!):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.fintype.big_operators</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">a</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">b</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">a</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">b</span><span class=\"o\">)]</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">cardinality_functions_finite</span> <span class=\"o\">:</span> <span class=\"n\">fintype.card</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">fintype.card</span> <span class=\"n\">b</span> <span class=\"bp\">^</span> <span class=\"n\">fintype.card</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">fintype.card_fun</span><span class=\"o\">,</span>\n  <span class=\"n\">congr</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 361948600,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1685366023
    },
    {
        "content": "<p>In this specific case, I would say that you \"tricked\" the typeclass mechanism into a trap: it can find <code>[fintype (a → b)]</code> on its own, so it is never a good idea to provide it separately.</p>",
        "id": 361948817,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1685366078
    },
    {
        "content": "<p>(And of course, if I say never, it probably means: <em>sometimes</em> you may want it, but if you do want it, you should be doing it very explicitly.)</p>",
        "id": 361948977,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1685366125
    },
    {
        "content": "<p>Note that Lean didn't even accept the <em>statement</em> of your original code because it didn't know what you meant by <code>fintype.card b</code>. What would you want it to mean for <code>b = Nat</code>?</p>",
        "id": 361955319,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1685367745
    },
    {
        "content": "<p>Eric, I see that you are using Lean4's <code>autoImplicit</code> feature for Lean3: the original statement wondered about <code>a</code> and <code>b</code>!  <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 361955837,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1685367872
    },
    {
        "content": "<p>well until the web editor arises from the dead...</p>",
        "id": 361956757,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1685368086
    },
    {
        "content": "<p>It's often worth writing these lemmas in the form <code>[fintype X]</code> for any <code>fintype</code> mentioned in a <code>fintype.card</code>, but it's hard and annoying to do because often the best way to do it is to prove the general theorem and then do <code>by convert X</code></p>",
        "id": 361957366,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1685368223
    },
    {
        "content": "<p>If you don't want to deal with decidability, consider the <code>finite</code> class and <code>nat.card</code>.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">set_theory.cardinal.finite</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">cardinality_functions_finite</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">finite</span> <span class=\"n\">a</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"n\">nat.card</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">nat.card</span> <span class=\"n\">b</span> <span class=\"bp\">^</span> <span class=\"n\">nat.card</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">nat.card_fun</span>\n</code></pre></div>",
        "id": 361964136,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1685369852
    },
    {
        "content": "<p>Or if you don't want to deal with finiteness at all, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/cardinal.mk_pi\">docs#cardinal.mk_pi</a>!</p>",
        "id": 361970362,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1685371436
    },
    {
        "content": "<p>Though I can't see the non-dependent specialization</p>",
        "id": 361970416,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1685371443
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"615364\">Shimon Cohen</span> has marked this topic as resolved.</p>",
        "id": 362103138,
        "sender_full_name": "Notification Bot",
        "timestamp": 1685433951
    }
]