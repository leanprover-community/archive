[
    {
        "content": "<p>I'd like to be able to use the fact that  a ∏ over a range is the last thing times the prod of all the other things, something like :</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">prod_unroll</span> <span class=\"o\">{</span><span class=\"n\">R</span><span class=\"o\">:</span><span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">hyp</span><span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span><span class=\"o\">:</span><span class=\"n\">R</span><span class=\"bp\">→</span><span class=\"n\">ℕ</span><span class=\"bp\">→</span><span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">R</span><span class=\"o\">):</span>\n<span class=\"o\">(</span><span class=\"bp\">∏</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"n\">range</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"n\">i</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"o\">(</span>\n    <span class=\"o\">(</span><span class=\"bp\">∏</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"n\">range</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"n\">i</span><span class=\"o\">))</span>\n    <span class=\"bp\">*</span>\n    <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">)</span>\n<span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n<span class=\"n\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n\n<p>but I'm stumped as to how to prove this.</p>",
        "id": 213719798,
        "sender_full_name": "Jake Kesinger",
        "timestamp": 1603047245
    },
    {
        "content": "<p>See <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finset.prod_range_succ\">docs#finset.prod_range_succ</a></p>",
        "id": 213720320,
        "sender_full_name": "Reid Barton",
        "timestamp": 1603047916
    },
    {
        "content": "<p>oh and it was right there too.  Thanks!</p>",
        "id": 213720420,
        "sender_full_name": "Jake Kesinger",
        "timestamp": 1603048037
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/wiki/Code-in-backticks\">#backticks</a></p>",
        "id": 213721757,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603049877
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 213723219,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1603051731
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 213723231,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1603051756
    }
]