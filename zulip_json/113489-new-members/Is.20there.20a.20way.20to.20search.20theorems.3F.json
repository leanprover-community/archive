[
    {
        "content": "<p>Hi, I just discovered Lean and Mathlib. As I understand it, Mathlib is a library of mathematical knowledge, verified in Lean. So my question is, suppose I see a theorem from a \"standard\" literature (say, a well-known book),  how can I know if it is already verified in Lean? I imagine there would be some kind of search engine where you enter the theorem, either the statement itself, or \"theorem <em>X</em> in literature <em>Y</em>\", and it tells you whether it's in Mathlib or not. Although rare, some good books do contain erroneous results. Also, if you want to add new theorems to mathlib, you need to know if it is there to begin with, right?</p>\n<p>I tried to read some portions of the source code, and it was a pain to my untrained eyes.</p>\n<p>I am an amateur math lover. Please bear with me if this question is off-topic or trivial. Thanks.</p>",
        "id": 402857683,
        "sender_full_name": "SL",
        "timestamp": 1700301505
    },
    {
        "content": "<p><a href=\"https://www.moogle.ai\">#moogle</a> is a website on which you can look for theorems in natural language.<br>\n<a href=\"https://loogle.lean-lang.org/\">#loogle</a>  is for searching using Lean pattern and names.<br>\n<a href=\"https://leanprover-community.github.io/mathlib4_docs/index.html\">https://leanprover-community.github.io/mathlib4_docs/index.html</a> is where you will find the whole list of results in mathlib, organized by area (browse the Matblib category on the left). That website has a search bar on the top right.</p>",
        "id": 402858501,
        "sender_full_name": "Rémy Degenne",
        "timestamp": 1700302016
    },
    {
        "content": "<p>If the theorem has a well established name, you should be able to search the documentation Rémy linked to for that as well</p>",
        "id": 402858672,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1700302109
    },
    {
        "content": "<p>When you get used to the #namingconvention (I hope that links), you may also be able to guess the name</p>",
        "id": 402858732,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1700302157
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/contribute/naming.html\">https://leanprover-community.github.io/contribute/naming.html</a></p>",
        "id": 402858774,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1700302201
    },
    {
        "content": "<p>And if you can formalise the<em>statement</em> of the theorem, you can use <code>by apply?</code>, which might find it</p>",
        "id": 402858907,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1700302284
    },
    {
        "content": "<p>Occasionally people try to go through a book and formalise the theorems one by one, depending on mathlib for the proofs, but I don't know if anybody started one of those in lean 4</p>",
        "id": 402859069,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1700302381
    },
    {
        "content": "<p>And last but not least, there's the \"Is there code for X?\" stream on this zulip, which has the secret weapon Yaël</p>",
        "id": 402859278,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1700302531
    },
    {
        "content": "<p>A trick that sometimes works for me is to write down the statement and try to solve it by <code>apply?</code>.</p>",
        "id": 402876491,
        "sender_full_name": "Miguel Marco",
        "timestamp": 1700313958
    },
    {
        "content": "<p>For me <code>apply?</code> rarely works when <code>exact?</code> doesn't. I get a bunch of <code>refine &lt;this and that&gt;</code> which takes me no closer to solving this goal.</p>",
        "id": 402877392,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1700314654
    },
    {
        "content": "<p>Sometimes it does, sometimes not so much. Depends on what the goal looks like and what the right step is</p>",
        "id": 402878772,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1700315848
    },
    {
        "content": "<p>I would say \"<code>apply?</code> <em>and scan carefully all left-over goals of every suggestion</em>\" is much more useful than \"<code>apply?</code> and no further processing\".</p>",
        "id": 402887959,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1700322423
    },
    {
        "content": "<p>That for sure!</p>",
        "id": 402890790,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1700324244
    },
    {
        "content": "<p>I just typed the statement of the mean value theorem into Moogle. It returns a lot of results, the closest one being Rolle's theorem. Don't know if this means that the mean value theorem is not in mathlib, or if it is considered a simple corollary of Rolle's theorem and thus not worthy of a separate entry.</p>",
        "id": 402938323,
        "sender_full_name": "SL",
        "timestamp": 1700357810
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"668134\">SL</span> <a href=\"#narrow/stream/113489-new-members/topic/Is.20there.20a.20way.20to.20search.20theorems.3F/near/402938323\">said</a>:</p>\n<blockquote>\n<p>I just typed the statement of the mean value theorem into Moogle. It returns a lot of results, the closest one being Rolle's theorem. Don't know if this means that the mean value theorem is not in mathlib, or if it is considered a simple corollary of Rolle's theorem and thus not worthy of a separate entry.</p>\n</blockquote>\n<p><a href=\"https://github.com/leanprover-community/mathlib4/blob/8666bd82efec40b8b3a5abca02dc9b24bbdf2652/Mathlib/Analysis/Calculus/MeanValue.lean#L796\">https://github.com/leanprover-community/mathlib4/blob/8666bd82efec40b8b3a5abca02dc9b24bbdf2652/Mathlib/Analysis/Calculus/MeanValue.lean#L796</a></p>",
        "id": 402938814,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1700358054
    },
    {
        "content": "<p>My search term on #moogle : mean value theorem derivative</p>",
        "id": 402938868,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1700358078
    },
    {
        "content": "<p>OK, but most results in a book are not named. I guess that currently, Moogle, or any AI, is still not powerful enough to accurately identify the statement of a theorem with an entry in mathlib. I remember asking ChatGPT a few months ago about theorem 1.1 from a famous book (that has only one edition, so no possibility of confusion; also the book is in ChatGPT's training dataset), and it gave me a completely wrong answer.</p>",
        "id": 402940561,
        "sender_full_name": "SL",
        "timestamp": 1700358698
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"668134\">SL</span> <a href=\"#narrow/stream/113489-new-members/topic/Is.20there.20a.20way.20to.20search.20theorems.3F/near/402940561\">said</a>:</p>\n<blockquote>\n<p>OK, but most results in a book are not named. I guess that currently, Moogle, or any AI, is still not powerful enough to accurately identify the statement of a theorem with an entry in mathlib. I remember asking ChatGPT a few months ago about theorem 1.1 from a famous book (that has only one edition, so no possibility of confusion; also the book is in ChatGPT's training dataset), and it gave me a completely wrong answer.</p>\n</blockquote>\n<p>I don't know if Moogle uses ChatGPT's training set. But apart from that, famous or not, books that don't name relevant theorems are really annoying from a practical perspective. An old algebra book did just that and almost cost me an interview. Further, to do such a search reliably the books need to be indexed in many ways.</p>",
        "id": 402942002,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1700359652
    }
]