[
    {
        "content": "<p>Hello, I recently started learning Lean and this is my first post here.</p>\n<p>I am trying to prove some things about εNFA currently and I got stuck on this definition.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.FinEnum</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Option.Basic</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">εNFA</span> <span class=\"o\">(</span><span class=\"n\">σ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span>                    <span class=\"c1\">-- states</span>\n  <span class=\"n\">init</span> <span class=\"o\">:</span> <span class=\"n\">q</span>                      <span class=\"c1\">-- initial state</span>\n  <span class=\"n\">fs</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">q</span>                 <span class=\"c1\">-- accepting states</span>\n  <span class=\"n\">δ</span> <span class=\"o\">:</span> <span class=\"n\">q</span> <span class=\"bp\">→</span> <span class=\"n\">Option</span> <span class=\"n\">σ</span> <span class=\"bp\">→</span> <span class=\"n\">Finset</span> <span class=\"n\">q</span>   <span class=\"c1\">-- transition function</span>\n  <span class=\"o\">[</span><span class=\"n\">fq</span> <span class=\"o\">:</span> <span class=\"n\">FinEnum</span> <span class=\"n\">q</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">fσ</span> <span class=\"o\">:</span> <span class=\"n\">FinEnum</span> <span class=\"n\">σ</span><span class=\"o\">]</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">σ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">FinEnum</span> <span class=\"n\">σ</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">tn</span> <span class=\"o\">:</span> <span class=\"n\">εNFA</span> <span class=\"n\">σ</span><span class=\"o\">)</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">εclosure</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">tn.q</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tn.q</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">base</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">tn.q</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">εclosure</span> <span class=\"n\">a</span> <span class=\"n\">a</span>\n  <span class=\"bp\">|</span> <span class=\"n\">step</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">tn.q</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">εclosure</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"bp\">∀</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">tn.δ</span> <span class=\"n\">b</span> <span class=\"n\">none</span><span class=\"o\">)</span> <span class=\"o\">,</span> <span class=\"n\">εclosure</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">c.1</span><span class=\"o\">)</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">DecidableRel</span> <span class=\"o\">(</span><span class=\"n\">εclosure</span> <span class=\"n\">tn</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>I am fairly sure that the inductive relationship should be Decidable, but I'm not sure how to prove it.</p>\n<p>So far I tried separating it into a = b, a ≠ b as well as using that tn.q is FinEnum and doing induction on List or Finset of tn.q<br>\nbut I got stuck on the former and I'm not sure the latter would be of much help and if it was, I think it wouldn't be a nice solution.</p>\n<p>What would be a good way of proving Decidable (εclosure tn a b) or should I change the definition of εclosure? Is it even truly Decidable?</p>",
        "id": 383310663,
        "sender_full_name": "Filip Hovorka",
        "timestamp": 1691592087
    },
    {
        "content": "<p>Can you make that a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> with imports?</p>",
        "id": 383311146,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1691592164
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113489-new-members/topic/Proving.20Decidable.20on.20inductive.20Prop/near/383311146\">said</a>:</p>\n<blockquote>\n<p>Can you make that a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> with imports?</p>\n</blockquote>\n<p>Oh sorry, I'll edit it now</p>",
        "id": 383312214,
        "sender_full_name": "Filip Hovorka",
        "timestamp": 1691592360
    },
    {
        "content": "<p>Usually the best way to prove this type of thing is write a lemma of the form <code>εclosure tn a b ↔ _</code>, where the <code>_</code> is some obviously enumerable expression</p>",
        "id": 383319993,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1691593528
    },
    {
        "content": "<p>Your <code>base (_ : tn.q) : εclosure a a</code> constructor looks wonky to me; what's the point in the <code>_</code> variable?</p>",
        "id": 383320786,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1691593659
    },
    {
        "content": "<p>Your <code>[FinEnum α]</code> is also suspicious, as you don't ever use <code>α</code></p>",
        "id": 383321306,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1691593735
    },
    {
        "content": "<p>I see, so I  can just leave <code>| base : εclosure a a</code>?<br>\nI used <code>α</code> in a different part of the code so now I realize that I shouldn't probably include that, sorry.<br>\nI also tried doing the <code>↔</code> lemma and I came up with <code>lemma εclosure_iff_exists (a b : tn.q) : εclosure tn a b ↔ (∃ c : tn.q , εclosure tn a c ∧ b ∈ tn.δ c none) ∨ a = b</code> but I suppose I just have to come up with something better.</p>",
        "id": 383328632,
        "sender_full_name": "Filip Hovorka",
        "timestamp": 1691594899
    },
    {
        "content": "<p>that doesn't seem very decidable to me, that lemma</p>",
        "id": 383330231,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1691595152
    },
    {
        "content": "<p>To answer your earlier question, here's an example of how to case on <code>a = b</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">tn.q</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">DecidableRel</span> <span class=\"o\">(</span><span class=\"n\">εclosure</span> <span class=\"n\">tn</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"k\">then</span>\n    <span class=\"bp\">.</span><span class=\"n\">isTrue</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"bp\">▸</span> <span class=\"bp\">.</span><span class=\"n\">base</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n  <span class=\"k\">else</span>\n    <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 383331002,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1691595252
    },
    {
        "content": "<p>But it seems like this is useless because your construction doesn't look like it ever is going to use <code>a ≠ b</code></p>",
        "id": 383331279,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1691595292
    },
    {
        "content": "<p>Perhaps the easier thing to do is write a function that computes as a <code>Bool</code> whether <code>εclosure</code> is true, and then prove it agrees with the inductive definition</p>",
        "id": 383331896,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1691595388
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"284160\">Eric Rodriguez</span> <a href=\"#narrow/stream/113489-new-members/topic/Proving.20Decidable.20on.20inductive.20Prop/near/383330231\">said</a>:</p>\n<blockquote>\n<p>that doesn't seem very decidable to me, that lemma</p>\n</blockquote>\n<p>Do you mean that the <code>εclosure</code> doesn't seem decidable to you or the lemma doesn't imply decidable? I don't think the lemma is very useful so that's why I said I need something better.</p>",
        "id": 383331946,
        "sender_full_name": "Filip Hovorka",
        "timestamp": 1691595397
    },
    {
        "content": "<p>One algorithm is:</p>\n<ul>\n<li>Compute the transitive closure of <code>q → Finset q</code> starting at <code>a</code> (which you can do in at most <code>Fintype.card q</code> iterations)</li>\n<li><code>εclosure a b</code> is true if <code>b</code> is in this set (which is decidable)</li>\n</ul>",
        "id": 383332830,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1691595552
    },
    {
        "content": "<p>Do we have DFS/BFS of directed graphs?</p>",
        "id": 383333328,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1691595632
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113489-new-members/topic/Proving.20Decidable.20on.20inductive.20Prop/near/383332830\">said</a>:</p>\n<blockquote>\n<p>One algorithm is:</p>\n<ul>\n<li>Compute the transitive closure of <code>q → Finset q</code> starting at <code>a</code> (which you can do in at most <code>Fintype.card q</code> iterations)</li>\n<li><code>εclosure a b</code> is true if <code>b</code> is in this set (which is decidable)</li>\n</ul>\n</blockquote>\n<p>I see, thanks. I was thinking about these sort of solutions and I guess I was mainly asking to see whether there is some way to use the fact that <code>εclosure</code> is inductive. I was thinking that perhaps I could somehow prove for the base case that it is Decidable and then for <code>step</code> which would mean it is Decidable</p>",
        "id": 383334426,
        "sender_full_name": "Filip Hovorka",
        "timestamp": 1691595840
    },
    {
        "content": "<p>It's just that I didn't anticipate this part (the fact that εclosure is Decidable) to be troublesome but it is more tricky than I expected</p>",
        "id": 383335701,
        "sender_full_name": "Filip Hovorka",
        "timestamp": 1691596090
    }
]