[
    {
        "content": "<p>Hi all,</p>\n<p>Very new to Lean. I have a concrete number <code>p =  8444461749428370424248824938781546531375899335154063827935233455917409239041</code> that is very probably prime. I'm trying to convince lean that <code>p</code> is prime, but <code>p</code> is large so the standard approach doesn't work, and <code>mathlib</code> lacks the deterministic AKS test. A workaround would be to tell lean that <code>p</code> is prime, and instead of proving it just have Lean \"trust\" me, for example via an axiom. My existing attempts are below, but I'm not sure they actually work. Is there a way to do this? Thank you for your help!</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"mi\">8444461749428370424248824938781546531375899335154063827935233455917409239041</span>\n<span class=\"kd\">axiom</span> <span class=\"n\">p_is_prime</span> <span class=\"o\">:</span> <span class=\"n\">nat.prime</span> <span class=\"n\">p</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span> <span class=\"n\">zmod</span> <span class=\"n\">p</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"n\">p.prime</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">p_is_prime</span><span class=\"o\">⟩</span>\n\n<span class=\"c1\">-- failed to synthesize type class instance for field k</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">field</span> <span class=\"n\">k</span> <span class=\"o\">:=</span> <span class=\"n\">infer_instance</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">k</span>\n</code></pre></div>",
        "id": 340233220,
        "sender_full_name": "Pratyush Mishra",
        "timestamp": 1678230940
    },
    {
        "content": "<p>Mathlib already has a declaration called <code>field</code> so <code>field</code> isn't a good name for your type. What's this <code>bls12_377_scalar</code> business? I'm not at a computer right now but does your code actually typecheck? You're talking about the <code>Field</code> typeclass in your comment -- are you using lean 3 or lean 4? The imports say Lean 3, the capital letter says lean 4. Finally the typeclass inference system will not know that your type is a field because the system doesn't have access to the axiom. Did you check the number was prime in a CAS by the way?</p>",
        "id": 340234057,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1678231330
    },
    {
        "content": "<p>Let me rename your structure <code>k</code>. The way to check if the system knows <code>k</code> is a field in lewn 3 is <code>example : field k := infer_instance</code> but as I say I think this is doomed to failure. You might get a higher chance by adding <code>instance : fact (p.prime) := \\&lt;p_is_prime\\&gt;</code></p>",
        "id": 340234410,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1678231502
    },
    {
        "content": "<p>Thanks for the help!</p>\n<blockquote>\n<p>Mathlib already has a declaration called field so field isn't a good name for your type. What's this bls12_377_scalar business? I'm not at a computer right now but does your code actually typecheck? You're talking about the Field typeclass in your comment -- are you using lean 3 or lean 4? The imports say Lean 3, the capital letter says lean 4. Finally the typeclass inference system will not know that your type is a field because the system doesn't have access to the axiom. Did you check the number was prime in a CAS by the way?</p>\n</blockquote>\n<p>Apologies, was trying to clean up the code in the chat box, and didn't check that it made sense before hitting send.</p>\n<blockquote>\n<p>Let me rename your structure <code>k</code>. The way to check if the system knows k is a field in lewn 3 is <code>example : field k := infer_instance</code> but as I say I think this is doomed to failure. You might get a higher chance by adding <code>instance : fact (p.prime) := \\&lt;p_is_prime\\&gt;</code></p>\n</blockquote>\n<p>I've edited the code example with your suggestions, but unfortunately it's still failing.</p>",
        "id": 340236381,
        "sender_full_name": "Pratyush Mishra",
        "timestamp": 1678232593
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/Declaring.20primality.20as.20an.20axiom/near/340234057\">said</a>:</p>\n<blockquote>\n<p>Did you check the number was prime in a CAS by the way?</p>\n</blockquote>\n<p>Mathematica says yes, although I'm not 100% sure it isn't actually using a probable prime test (the documentation doesn't say anything about using a probabilistic test but you never know)</p>",
        "id": 340236704,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1678232820
    },
    {
        "content": "<p>The new type <code>k</code> can't infer the instance from zmod p, because it's a new type. You can make k an abbreviation, or unfold k before trying to infer an instance</p>",
        "id": 340236832,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1678232886
    },
    {
        "content": "<p>Are you planning on doing any actual calculations with <code>p</code>? If not, you might consider introducing <code>p</code> as an axiom without any concrete value.</p>",
        "id": 340237222,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1678233106
    },
    {
        "content": "<blockquote>\n<p>Did you check the number was prime in a CAS by the way?</p>\n</blockquote>\n<p>Yes, in Sage, but the better evidence is that <code>p</code> is prime by construction: it is is the order of the largest prime-order subgroup of a particular curve in the BLS12 family of pairing-friendly curves (see <a href=\"https://eprint.iacr.org/2012/072\">Section 4 here</a>)</p>",
        "id": 340237951,
        "sender_full_name": "Pratyush Mishra",
        "timestamp": 1678233431
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"308899\">Yakov Pechersky</span> <a href=\"#narrow/stream/113489-new-members/topic/Declaring.20primality.20as.20an.20axiom/near/340236832\">said</a>:</p>\n<blockquote>\n<p>The new type <code>k</code> can't infer the instance from zmod p, because it's a new type. You can make k an abbreviation, or unfold k before trying to infer an instance</p>\n</blockquote>\n<p>Ooh fantastic, this works! Thank you!</p>",
        "id": 340238133,
        "sender_full_name": "Pratyush Mishra",
        "timestamp": 1678233509
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"596810\">Pratyush Mishra</span> has marked this topic as resolved.</p>",
        "id": 340238224,
        "sender_full_name": "Notification Bot",
        "timestamp": 1678233564
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/113489-new-members/topic/.E2.9C.94.20Declaring.20primality.20as.20an.20axiom/near/340237222\">said</a>:</p>\n<blockquote>\n<p>Are you planning on doing any actual calculations with <code>p</code>? If not, you might consider introducing <code>p</code> as an axiom without any concrete value.</p>\n</blockquote>\n<p>The theorems I intend to write should work for any prime field, and eventually I want to write these theorems in their full generality. </p>\n<p>Initially however I wanted to work with a concrete instance to start making some progress without getting too bogged down learning the intricacies of mathlib and lean</p>",
        "id": 340238647,
        "sender_full_name": "Pratyush Mishra",
        "timestamp": 1678233727
    },
    {
        "content": "<p>I think you can use <a href=\"https://en.wikipedia.org/wiki/Pocklington_primality_test\">pocklington certificates</a> to prove this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"mi\">8444461749428370424248824938781546531375899335154063827935233455917409239041</span>\n<span class=\"n\">p</span> <span class=\"n\">is</span> <span class=\"n\">prime</span> <span class=\"n\">because</span><span class=\"o\">:</span>\n\n<span class=\"n\">q</span> <span class=\"bp\">=</span> <span class=\"mi\">9586122913090633729</span>\n<span class=\"n\">Observe</span><span class=\"o\">:</span>\n<span class=\"n\">q</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">&gt;</span> <span class=\"n\">sqrt</span><span class=\"o\">(</span><span class=\"n\">p</span><span class=\"o\">)</span>\n<span class=\"n\">q</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n<span class=\"mi\">2</span><span class=\"bp\">^</span><span class=\"o\">(</span><span class=\"n\">p</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">==</span> <span class=\"mi\">1</span> <span class=\"o\">[</span><span class=\"n\">mod</span> <span class=\"n\">p</span><span class=\"o\">]</span>\n<span class=\"n\">gcd</span><span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"bp\">^</span><span class=\"o\">((</span><span class=\"n\">p</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span>\n<span class=\"n\">q</span> <span class=\"n\">is</span> <span class=\"n\">prime</span> <span class=\"n\">because</span><span class=\"o\">:</span>\n\n<span class=\"n\">Observe</span><span class=\"o\">:</span>\n<span class=\"mi\">2</span><span class=\"bp\">^</span><span class=\"mi\">46</span> <span class=\"bp\">&gt;</span> <span class=\"n\">sqrt</span><span class=\"o\">(</span><span class=\"n\">q</span><span class=\"o\">)</span>\n<span class=\"mi\">2</span><span class=\"bp\">^</span><span class=\"mi\">46</span> <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n<span class=\"mi\">11</span><span class=\"bp\">^</span><span class=\"o\">(</span><span class=\"n\">q</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">==</span> <span class=\"mi\">1</span> <span class=\"o\">[</span><span class=\"n\">mod</span> <span class=\"n\">q</span><span class=\"o\">]</span>\n<span class=\"n\">gcd</span><span class=\"o\">(</span><span class=\"mi\">11</span><span class=\"bp\">^</span><span class=\"o\">((</span><span class=\"n\">q</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span>\n<span class=\"mi\">2</span> <span class=\"n\">is</span> <span class=\"n\">prime</span>\n</code></pre></div>",
        "id": 340239559,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1678234165
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"596810\">Pratyush Mishra</span> <a href=\"#narrow/stream/113489-new-members/topic/.E2.9C.94.20Declaring.20primality.20as.20an.20axiom/near/340238647\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/113489-new-members/topic/.E2.9C.94.20Declaring.20primality.20as.20an.20axiom/near/340237222\">said</a>:</p>\n<blockquote>\n<p>Are you planning on doing any actual calculations with <code>p</code>? If not, you might consider introducing <code>p</code> as an axiom without any concrete value.</p>\n</blockquote>\n<p>The theorems I intend to write should work for any prime field, and eventually I want to write these theorems in their full generality. </p>\n<p>Initially however I wanted to work with a concrete instance to start making some progress without getting too bogged down learning the intricacies of mathlib and lean</p>\n</blockquote>\n<p>I hate to break it to you, but theorems about any prime field are a <em>lot</em> easier than proving things about very specific large numbers</p>",
        "id": 340240091,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1678234390
    },
    {
        "content": "<p>this takes some getting used to, we like to think about computers as being good at these kinds of computations, but in the ITP world it's just the opposite, abstract math is easy and calculations are hard</p>",
        "id": 340240273,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1678234466
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113489-new-members/topic/.E2.9C.94.20Declaring.20primality.20as.20an.20axiom/near/340239559\">said</a>:</p>\n<blockquote>\n<p>I think you can use <a href=\"https://en.wikipedia.org/wiki/Pocklington_primality_test\">pocklington certificates</a> to prove this:</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"mi\">8444461749428370424248824938781546531375899335154063827935233455917409239041</span>\n<span class=\"n\">p</span> <span class=\"n\">is</span> <span class=\"n\">prime</span> <span class=\"n\">because</span><span class=\"o\">:</span>\n\n<span class=\"n\">q</span> <span class=\"bp\">=</span> <span class=\"mi\">9586122913090633729</span>\n<span class=\"n\">Observe</span><span class=\"o\">:</span>\n<span class=\"n\">q</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">&gt;</span> <span class=\"n\">sqrt</span><span class=\"o\">(</span><span class=\"n\">p</span><span class=\"o\">)</span>\n<span class=\"n\">q</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n<span class=\"mi\">2</span><span class=\"bp\">^</span><span class=\"o\">(</span><span class=\"n\">p</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">==</span> <span class=\"mi\">1</span> <span class=\"o\">[</span><span class=\"n\">mod</span> <span class=\"n\">p</span><span class=\"o\">]</span>\n<span class=\"n\">gcd</span><span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"bp\">^</span><span class=\"o\">((</span><span class=\"n\">p</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span>\n<span class=\"n\">q</span> <span class=\"n\">is</span> <span class=\"n\">prime</span> <span class=\"n\">because</span><span class=\"o\">:</span>\n\n<span class=\"n\">Observe</span><span class=\"o\">:</span>\n<span class=\"mi\">2</span><span class=\"bp\">^</span><span class=\"mi\">46</span> <span class=\"bp\">&gt;</span> <span class=\"n\">sqrt</span><span class=\"o\">(</span><span class=\"n\">q</span><span class=\"o\">)</span>\n<span class=\"mi\">2</span><span class=\"bp\">^</span><span class=\"mi\">46</span> <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n<span class=\"mi\">11</span><span class=\"bp\">^</span><span class=\"o\">(</span><span class=\"n\">q</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">==</span> <span class=\"mi\">1</span> <span class=\"o\">[</span><span class=\"n\">mod</span> <span class=\"n\">q</span><span class=\"o\">]</span>\n<span class=\"n\">gcd</span><span class=\"o\">(</span><span class=\"mi\">11</span><span class=\"bp\">^</span><span class=\"o\">((</span><span class=\"n\">q</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span>\n<span class=\"mi\">2</span> <span class=\"n\">is</span> <span class=\"n\">prime</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>That's a good point that I only need to prove primality, not check it. I'll think about implementing this primality check in Lean =)</p>",
        "id": 340243560,
        "sender_full_name": "Pratyush Mishra",
        "timestamp": 1678236124
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113489-new-members/topic/.E2.9C.94.20Declaring.20primality.20as.20an.20axiom/near/340240273\">said</a>:</p>\n<blockquote>\n<p>this takes some getting used to, we like to think about computers as being good at these kinds of computations, but in the ITP world it's just the opposite, abstract math is easy and calculations are hard</p>\n</blockquote>\n<p>Yes, that's what I've been slowly encountering. I'll have to adapt my \"traditional\" computer science approach for this different world. Thanks for the advice!</p>",
        "id": 340243678,
        "sender_full_name": "Pratyush Mishra",
        "timestamp": 1678236202
    },
    {
        "content": "<p>By the way, another bit of compression you can do here is to note that <code>p = q^4 - q^2 + 1</code>; if you define <code>p</code> this way then some of those facts come for free</p>",
        "id": 340244268,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1678236554
    }
]