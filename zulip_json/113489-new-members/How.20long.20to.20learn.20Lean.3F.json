[
    {
        "content": "<p>I'm curious to hear people's intuitions for how long it takes to learn Lean. To make this question more constrained, let's say the person is a senior math major, and they're comfortable with at least one programming language (but not a functional language). How long would it take before they could use Lean to, for example, verify that their homework proofs are correct?</p>",
        "id": 394530086,
        "sender_full_name": "Alex Altair",
        "timestamp": 1696291416
    },
    {
        "content": "<p>Nobody can answer this question. It depends on people, on how much effort is put into learning and on the homework.</p>",
        "id": 394541655,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1696297764
    },
    {
        "content": "<p>If you want the perspective of another math student, I can give my experience. I spent a couple of months of fairly regular self study reading the books last year. I have the prior experience of being a computer science student as well, so I have a fair amount of experience with functional programming. I was able to get the basics down, but still found writing proofs to be very hard. Now I have just done the first month of a college class studying Coq, and now I am starting to get a good handle on writing proofs. I don't think I would be able to verify most of the proofs I do in math  classes though, without a suggnificant amount of extra work.</p>\n<p>I found it very hard to self study, and don't think I would have made  much more progress without a class structure. You may have a different experience, but I would recommend looking for a set of lectures. Also, I would recommend the Software Foundations series of textbooks from UPenn. Its free online and covers Coq, which is very similar to Lean. Coq is much older, so the resources online are more developed, so studying it might be a good place to start.</p>\n<p>Good luck on your journey!</p>",
        "id": 394544002,
        "sender_full_name": "Jesse Slater",
        "timestamp": 1696299085
    },
    {
        "content": "<p>The Software Foundations series of textbooks is known to be fantastic if you want to learn software verification but it is completely irrelevant for mathematics.</p>",
        "id": 394544584,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1696299414
    },
    {
        "content": "<p>I'm a university dropout and don't know how to program. I've read only some part of math textbooks before. It took me more than 300 hours to read <a href=\"https://leanprover.github.io/theorem_proving_in_lean4/\">#tpil</a> and solve all exercises in the book.</p>\n<p><strong>Theorem Proving in Lean 4</strong></p>\n<ul>\n<li>Jan 2022–Feb 2023, 11 months of learning</li>\n<li>Translated 498 terms into Korean</li>\n<li>Note 1: I estimated times spent reading Chapters 3 and 4 at 20 h and 23 h, respectively; times spent translating terms in these chapters at 6 h 45 min and 6 h, respectively.</li>\n<li>Note 2: times spent reading other materials, such as core Lean files, are included in the “Reading the text” activity.</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>Activity</th>\n<th style=\"text-align: right;\">Time ([h]:mm)</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Reading the text</td>\n<td style=\"text-align: right;\">236:20</td>\n</tr>\n<tr>\n<td>Translating terms</td>\n<td style=\"text-align: right;\">64:10</td>\n</tr>\n<tr>\n<td>Solving exercises</td>\n<td style=\"text-align: right;\">73:05</td>\n</tr>\n<tr>\n<td><strong>Total</strong></td>\n<td style=\"text-align: right;\"><strong>373:35</strong></td>\n</tr>\n</tbody>\n</table>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>Times spent for each chapter of TPiL</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<h1>Theorem Proving in Lean 4</h1>\n<h2>Chapters 1–2: 52 h (Jan–Feb 2022)</h2>\n<ul>\n<li>Reading the text: 32 h 20 min</li>\n<li>Translating terms: 19 h 40 min</li>\n</ul>\n<h2>Chapter 3: 36 h 20 min (May 2022)</h2>\n<ul>\n<li>Reading the text: 20 h (estimated)</li>\n<li>Translating terms: 6 h 45 min (estimated)</li>\n<li>Solving exercises: 9 h 35 min</li>\n</ul>\n<h2>Chapter 4: 46 h 10 min (Jun 2022)</h2>\n<ul>\n<li>Reading the text: 23 h (estimated)</li>\n<li>Translating terms: 6 h (estimated)</li>\n<li>Solving exercises: 17 h 10 min</li>\n</ul>\n<h2>Chapter 5: 25 h 10 min (Aug–Sep 2022)</h2>\n<ul>\n<li>Reading the text: 15 h 20 min</li>\n<li>Translating terms: 4 h 45 min</li>\n<li>Solving exercises: 5 h 5 min<ul>\n<li>Chapter 3: 2 h 55 min</li>\n<li>Chapter 4: 2 h 10 min</li>\n</ul>\n</li>\n</ul>\n<h2>Chapter 6: 15 h 45 min (Sep–Oct 2022)</h2>\n<ul>\n<li>Reading the text: 9 h 10 min</li>\n<li>Translating terms: 6 h 35 min</li>\n</ul>\n<h2>Chapter 7: 51 h 25 min (Oct–Nov 2022)</h2>\n<ul>\n<li>Reading the text: 27 h 30 min</li>\n<li>Translating terms: 3 h 20 min</li>\n<li>Solving exercises: 20 h 35 min</li>\n</ul>\n<h2>Chapter 8: 89 h 50 min (Nov 2022–Jan 2023)</h2>\n<ul>\n<li>Reading the text: 64 h 50 min (spent lots of time reading core Lean files)</li>\n<li>Translating terms: 4 h 40 min</li>\n<li>Solving exercises: 20 h 20 min</li>\n</ul>\n<h2>Chapter 9: 3 h 15 min (Jan 2023)</h2>\n<ul>\n<li>Reading the text: 2 h 10 min</li>\n<li>Translating terms: 1 h 5 min</li>\n</ul>\n<h2>Chapter 10: 26 h 10 min (Jan–Feb 2023)</h2>\n<ul>\n<li>Reading the text: 19 h 35 min</li>\n<li>Translating terms: 6 h 15 min</li>\n<li>Solving exercises: 20 min</li>\n</ul>\n<h2>Chapter 11: 2 h 5 min (Feb 2023)</h2>\n<ul>\n<li>Reading the text: 1 h 20 min</li>\n<li>Translating terms: 45 min</li>\n</ul>\n<h2>Chapter 12: 25 h 25 min (Feb 2023)</h2>\n<ul>\n<li>Reading the text: 21 h 5 min</li>\n<li>Translating terms: 4 h 20 min</li>\n</ul>\n</div></div>",
        "id": 394549144,
        "sender_full_name": "Bulhwi Cha",
        "timestamp": 1696301787
    },
    {
        "content": "<p>I started in summer 2017 and created a self-study program where I read <a href=\"https://leanprover.github.io/theorem_proving_in_lean4/\">#tpil</a> and did all the exercises, then formalised about 100 problems in very basic 1st year undergraduate mathematics (and asked a ton of questions on the Zulip) and then I formalised the definition of a scheme as a group project. Six months later in winter 2017 I felt I was competent. This process could definitely be streamlined now though because back then there were no teaching materials for mathematicians other than <a href=\"https://leanprover.github.io/theorem_proving_in_lean4/\">#tpil</a> .</p>",
        "id": 394562356,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1696310986
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> <a href=\"#narrow/stream/113489-new-members/topic/How.20long.20to.20learn.20Lean.3F/near/394544584\">said</a>:</p>\n<blockquote>\n<p>The Software Foundations series of textbooks is known to be fantastic if you want to learn software verification but it is completely irrelevant for mathematics.</p>\n</blockquote>\n<p>I have no interest whatsoever learning Coq, but I am interested in learning about software verification. I have about been studying lean for pretty much full time since March ..  If the Coq material in SF is self contained (i.e. I do not need to pick up some other book/resource to learn Coq before studying SF), I would be willing to study SF. Is SF self contained in that way?</p>",
        "id": 394585958,
        "sender_full_name": "Somo S.",
        "timestamp": 1696322169
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"582386\">Somo S.</span> <a href=\"#narrow/stream/113489-new-members/topic/How.20long.20to.20learn.20Lean.3F/near/394585958\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/113489-new-members/topic/How.20long.20to.20learn.20Lean.3F/near/394544584\">said</a>:</p>\n<blockquote>\n<p>The Software Foundations series of textbooks is known to be fantastic if you want to learn software verification but it is completely irrelevant for mathematics.</p>\n</blockquote>\n<p>I have no interest whatsoever learning Coq, but I am interested in learning about software verification. I have about been studying lean for pretty much full time since March ..  If the Coq material in SF is self contained (i.e. I do not need to pick up some other book/resource to learn Coq before studying SF), I would be willing to study SF. Is SF self contained in that way?</p>\n</blockquote>\n<p>It is.</p>",
        "id": 394593404,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1696325031
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> Nice! Was that six-month period more like full-time Lean study or part time?</p>",
        "id": 394647774,
        "sender_full_name": "Alex Altair",
        "timestamp": 1696343279
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"417769\">@Bulhwi Cha</span> Love how much data you took on that, thanks for sharing!</p>",
        "id": 394648082,
        "sender_full_name": "Alex Altair",
        "timestamp": 1696343379
    },
    {
        "content": "<p>I don't think one should spend too much time to \"learn\" Lean. I did read Lean manual, <a href=\"https://leanprover.github.io/theorem_proving_in_lean4/\">#tpil</a>, <a href=\"https://leanprover-community.github.io/mathematics_in_lean/\">#mil</a>, <a href=\"https://leanprover.github.io/functional_programming_in_lean/\">#fpil</a>, <a href=\"https://hrmacbeth.github.io/math2001/\">#tmop</a> for Lean 3 and Lean 4 etc. and major Lean papers, spent quite some time to fight with some exercise proofs to get to the bottom of them. The time is way less than months, basically just weeks in part time. But these are only the starting point. I've learned much more from chats on Zulip about solve different levels of problems, and reading source code of many Lean projects, usually with a question \"how to do X in Lean (idiomatically)?\", that's also the most time-consuming part, proportional to the reward. (Well, I don't claim to know Lean, as I believe it's more of a life-time endeavor, frankly so far I can only use Lean to do a fraction of what I want to do)</p>\n<p>As for \"How long would it take before they could use Lean to, for example, verify that their homework proofs are correct?\", this greatly depends on the homework. One (that \"is a senior math major, and comfortable with at least one programming language\") can already do this halfway through <a href=\"https://leanprover.github.io/theorem_proving_in_lean4/\">#tpil</a> if they make good use of the materials known to them at that time. But if the homework touched topics that the whole community hasn't been working on, it could be way harder than just finishing reading books and doing exercises and even asking on Zulip, since it might involve new ways to do math in Lean, or knowing how to properly ask that question with a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> .</p>",
        "id": 394650357,
        "sender_full_name": "Utensil Song",
        "timestamp": 1696344169
    },
    {
        "content": "<p>I would say that \"learn Lean\" is a pretty wide gate. There are many layers to it.</p>\n<p>For example, one can use Lean 4 as a programming language and end up facing pretty much none of the real challenges involved in formalizing mathematics.</p>\n<p>Now, if you're referring to using Lean 4 as a theorem prover specifically, part of it may be broadly summarized as \"learning the <code>by</code> DSL\", which includes understanding tactics. But you'll need just enough type theory so you can understand definitions, create your own and state your theorems.</p>\n<p>And there's the metaprogramming approach, which allows you to extend the <code>by</code> DSL, create your own custom commands and much more.</p>",
        "id": 394652563,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1696344916
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"296911\">@Utensil Song</span> Curious if you have any examples in mind for topics that the community hasn't been working on</p>",
        "id": 394662796,
        "sender_full_name": "Alex Altair",
        "timestamp": 1696348125
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"451983\">@Arthur Paulino</span> Nice, I like that breakdown between learning Lean qua programming vs theorem proving vs metaprogramming. (I'm personally interested in the theorem proving branch, though happy for this question to serve as a place for people to give answers to the other parts too)</p>",
        "id": 394663161,
        "sender_full_name": "Alex Altair",
        "timestamp": 1696348227
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"644656\">Alex Altair</span> <a href=\"#narrow/stream/113489-new-members/topic/How.20long.20to.20learn.20Lean.3F/near/394647774\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> Nice! Was that six-month period more like full-time Lean study or part time?</p>\n</blockquote>\n<p>Oh I had a full time job throughout that period, this was evenings and weekends, although it became somewhat of an obsession (and still is)</p>",
        "id": 394674305,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1696352153
    },
    {
        "content": "<p>PS to Somo S: as part of my 6 month induction process I worked through a bunch of material in the first volume of SF, just translating it directly into Lean and solving the exercises, and I could do this with very little background (I was doing it right at the start of my learning process). But it was so far from the kind of stuff I was interested in that I moved onto undergraduate problem sheets from my own intro to proof class.</p>",
        "id": 394674583,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1696352267
    },
    {
        "content": "<p>At the beginning, I was playing NNG and solving tutorial exercises. I had no major problems there — these exercises were designed to be easy.</p>\n<p>When I started working on my own projects, I was getting lost all the time. I was free to write definitions however I wanted, and I could set my own goals (both in the literal and abstract sense). I was not able to handle such an amount of freedom. I eventually managed to write my definitions correctly (w.r.t. the informal definitions, not necessarily in a Lean-and-mathlib-friendly way), but proving stuff was a real issue — I knew I was supposed to look beyond the tools I was using when solving beginner exercises, but there was \"too much out there\". I ended up using many tools in a very suboptimal manner. Almost everything was a footgun in my hands at that time.</p>\n<p>My progress wasn't smooth, but the experience was pretty rewarding. There were moments when certain things just clicked and I could suddenly see that \"I can do this kind of easy things with ease\". Overall, it took me about half year of full-time study to reach a point when my projects started to have a direction and my proofs stopped feeling like eventually deleting most of the lines I wrote.</p>\n<p>Right after finishing ITP paper, I switched to Lean 4. There was a transition period during which I was temporarily very clumsy again and during which the syntax of Lean 3 was creeping into my Lean 4 code. It took me about a month to get somewhat comfortable again. However, I believe I am now slightly more fluent in Lean 4 than I ever was in Lean 3.</p>",
        "id": 394690754,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1696358781
    },
    {
        "content": "<p>You should try the last level at <a href=\"https://adam.math.hhu.de/#/g/hhu-adam/NNG4\">https://adam.math.hhu.de/#/g/hhu-adam/NNG4</a> , that's not designed to be easy :-)</p>",
        "id": 394694392,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1696360344
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/How.20long.20to.20learn.20Lean.3F/near/394694392\">said</a>:</p>\n<blockquote>\n<p>You should try the last level at <a href=\"https://adam.math.hhu.de/#/g/hhu-adam/NNG4\">https://adam.math.hhu.de/#/g/hhu-adam/NNG4</a> , that's not designed to be easy :-)</p>\n</blockquote>\n<p><a href=\"/user_uploads/3121/TtH4GJ6E2akbDLV8r9RsYwsq/image.png\">image.png</a><br>\ncant make it :P</p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/TtH4GJ6E2akbDLV8r9RsYwsq/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/TtH4GJ6E2akbDLV8r9RsYwsq/image.png\"></a></div>",
        "id": 394711941,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1696367494
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"129120\">@Alexander Bentkamp</span> . Henrik you probably need to clear your cache, unfortunately.</p>",
        "id": 394716822,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1696370430
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"395550\">@Henrik Böving</span> ideally, send me the content of your local storage before you delete it.</p>",
        "id": 394764602,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1696399423
    },
    {
        "content": "<p>Too late for that already I'm afraid :(</p>",
        "id": 394765151,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1696399692
    },
    {
        "content": "<p>But it did help^^</p>",
        "id": 394765158,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1696399699
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"644656\">Alex Altair</span> <a href=\"#narrow/stream/113489-new-members/topic/How.20long.20to.20learn.20Lean.3F/near/394662796\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"296911\">Utensil Song</span> Curious if you have any examples in mind for topics that the community hasn't been working on</p>\n</blockquote>\n<p>To name a few that would be challenging:</p>\n<ul>\n<li><a href=\"https://leanprover-community.github.io/100-missing.html\">Missing theorems from Freek Wiedijk's list of 100 theorems</a></li>\n<li><a href=\"#narrow/stream/287929-mathlib4/topic/Noncommutative.20ring.20things\">Two sided ideals etc.</a></li>\n<li><a href=\"#narrow/stream/113489-new-members/topic/Trivial.20calculations.20with.20Reals.3F\">Calculations with Reals</a> or <a href=\"#narrow/stream/270676-lean4/topic/IEEE.20754.20Float/near/395452257\">with</a> <a href=\"#narrow/stream/270676-lean4/topic/Printing.20all.20float.20digits\">Floats</a> or <a href=\"#narrow/stream/116395-maths/topic/literals.20in.20int\">with Int</a></li>\n<li><a href=\"#narrow/stream/116395-maths/topic/tarski.20axiom.20geometry\">Geometry</a></li>\n<li><a href=\"#narrow/stream/113489-new-members/topic/knot.20theory\">knot theory</a></li>\n<li><a href=\"#narrow/stream/113488-general/topic/learn.20maths.20with.20lean/near/390713720\">Converting Lean proofs to informal proofs</a></li>\n<li><a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Temporal.20Logic\">Temporal Logic</a></li>\n<li><a href=\"#narrow/stream/270676-lean4/topic/GPU.20kernel.20generation.20and.20use.3F\">GPU kernel generation</a></li>\n<li><a href=\"#narrow/stream/395462-Natural-sciences/topic/Undergraduate.20Physics\">Undergraduate Physics</a>, see also <a href=\"https://github.com/lecopivo/SciLean\">SciLean</a></li>\n<li><a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Information.20theory\">Information theory</a></li>\n<li><a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Complexity.20theory\">Complexity theory</a></li>\n<li><a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Markov.20chains.20.3F\">Markov chains</a></li>\n<li><a href=\"https://blog.codeminer42.com/overcoming-challenges-and-crafting-in-the-uncharted-territory-of-lean4/\">Use Lean 4 to write a backend server</a></li>\n<li><a href=\"https://github.com/utensil/ginac-lean/blob/main/doc/ffi.md\">C++ bindings</a></li>\n<li><a href=\"#narrow/stream/113488-general/topic/Formalizing.20St.2E.20Anselm's.20ontological.20argument\">Formalized philosophy</a></li>\n</ul>\n<p>Not that no one is working on them, but few are working/exploring on them, or the work could be paused anytime, or how to approach them remains an open question, unlike certain topics that have a group of experts working on and are continuously evolving, based on some established design.</p>",
        "id": 394891119,
        "sender_full_name": "Utensil Song",
        "timestamp": 1696442415
    },
    {
        "content": "<p>I am reading GimpseOfLean and MIL. How can I tell what depends on tactics of the two books but not of mathlib4?</p>",
        "id": 395262214,
        "sender_full_name": "Ming Li",
        "timestamp": 1696599449
    },
    {
        "content": "<p>Those have no specific tactics.</p>",
        "id": 395282693,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1696606022
    },
    {
        "content": "<p>I moved the file Basic.lean of GlimpseOfLean to Mathlib4. Why does the part after \"Open BigOperators\" cause some error?</p>",
        "id": 395356401,
        "sender_full_name": "Ming Li",
        "timestamp": 1696644126
    },
    {
        "content": "<p>It is because of incompatible option. You can add <code>set_option autoImplicit true</code> somewhere near the beginning of the file.</p>",
        "id": 395361440,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1696647510
    },
    {
        "content": "<p>This option enables a cool feature of Lean 4 which can be a bit confusing. After a lot of discussion, people temporarily decided to switch it off in mathlib.</p>",
        "id": 395361549,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1696647560
    },
    {
        "content": "<p>You may also find a couple of lemma in that file that have been recently incorporated into mathlib, so Lean will complain. I will update GlimpseOfLean when I'll have time. But none of this is about new tactics.</p>",
        "id": 395361692,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1696647620
    },
    {
        "content": "<p>It did solve my concern in big time. Thanks a lot.</p>",
        "id": 395363470,
        "sender_full_name": "Ming Li",
        "timestamp": 1696648724
    },
    {
        "content": "<p>I just played the natural numbers game in a few hours and learned Lean :). So to answer your question, it takes a few hours.</p>",
        "id": 395629498,
        "sender_full_name": "Ben Nale",
        "timestamp": 1696833885
    },
    {
        "content": "<p>NNG doesn't teach you how to make structures or how to use the typeclass inference system. Those I learnt after doing a maths project myself.</p>",
        "id": 395640339,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1696838298
    }
]