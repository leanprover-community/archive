[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"354934\">@David Thrane Christiansen</span> ,  <a href=\"https://leanprover.github.io/functional_programming_in_lean/type-classes/coercion.html#aside-json-as-a-string\">this example</a> needs an <code>import Lean.Data.Json</code> to run, not currently in the text:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean.Data.Json</span> <span class=\"c1\">-- required</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">JSON</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">true</span> <span class=\"o\">:</span> <span class=\"n\">JSON</span>\n  <span class=\"bp\">|</span> <span class=\"n\">false</span> <span class=\"o\">:</span> <span class=\"n\">JSON</span>\n  <span class=\"bp\">|</span> <span class=\"n\">null</span> <span class=\"o\">:</span> <span class=\"n\">JSON</span>\n  <span class=\"bp\">|</span> <span class=\"n\">string</span> <span class=\"o\">:</span> <span class=\"n\">String</span> <span class=\"bp\">→</span> <span class=\"n\">JSON</span>\n  <span class=\"bp\">|</span> <span class=\"n\">number</span> <span class=\"o\">:</span> <span class=\"n\">Float</span> <span class=\"bp\">→</span> <span class=\"n\">JSON</span>\n  <span class=\"bp\">|</span> <span class=\"n\">object</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">String</span> <span class=\"bp\">×</span> <span class=\"n\">JSON</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">JSON</span>\n  <span class=\"bp\">|</span> <span class=\"n\">array</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">JSON</span> <span class=\"bp\">→</span> <span class=\"n\">JSON</span>\n<span class=\"n\">deriving</span> <span class=\"n\">Repr</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">Serializer</span> <span class=\"n\">where</span>\n  <span class=\"n\">Contents</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n  <span class=\"n\">serialize</span> <span class=\"o\">:</span> <span class=\"n\">Contents</span> <span class=\"bp\">→</span> <span class=\"n\">JSON</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Str</span> <span class=\"o\">:</span> <span class=\"n\">Serializer</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span> <span class=\"n\">Contents</span> <span class=\"o\">:=</span> <span class=\"n\">String</span><span class=\"o\">,</span>\n    <span class=\"n\">serialize</span> <span class=\"o\">:=</span> <span class=\"n\">JSON.string</span>\n  <span class=\"o\">}</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">CoeFun</span> <span class=\"n\">Serializer</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">s</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">s.Contents</span> <span class=\"bp\">→</span> <span class=\"n\">JSON</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">coe</span> <span class=\"n\">s</span> <span class=\"o\">:=</span> <span class=\"n\">s.serialize</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">buildResponse</span> <span class=\"o\">(</span><span class=\"n\">title</span> <span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"n\">Serializer</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">record</span> <span class=\"o\">:</span> <span class=\"n\">R.Contents</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">JSON</span> <span class=\"o\">:=</span>\n  <span class=\"n\">JSON.object</span> <span class=\"o\">[</span>\n    <span class=\"o\">(</span><span class=\"s2\">\"title\"</span><span class=\"o\">,</span> <span class=\"n\">JSON.string</span> <span class=\"n\">title</span><span class=\"o\">),</span>\n    <span class=\"o\">(</span><span class=\"s2\">\"status\"</span><span class=\"o\">,</span> <span class=\"n\">JSON.number</span> <span class=\"mi\">200</span><span class=\"o\">),</span>\n    <span class=\"o\">(</span><span class=\"s2\">\"record\"</span><span class=\"o\">,</span> <span class=\"n\">R</span> <span class=\"n\">record</span><span class=\"o\">)</span>\n  <span class=\"o\">]</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">buildResponse</span> <span class=\"s2\">\"Functional Programming in Lean\"</span> <span class=\"n\">Str</span> <span class=\"s2\">\"Programming is fun!\"</span>\n\n<span class=\"k\">#eval</span> <span class=\"o\">(</span><span class=\"mi\">5</span> <span class=\"o\">:</span> <span class=\"n\">Float</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">toString</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">dropDecimals</span> <span class=\"o\">(</span><span class=\"n\">numString</span> <span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">String</span> <span class=\"o\">:=</span>\n  <span class=\"k\">if</span> <span class=\"n\">numString.contains</span> <span class=\"sc\">'.'</span> <span class=\"k\">then</span>\n    <span class=\"k\">let</span> <span class=\"n\">noTrailingZeros</span> <span class=\"o\">:=</span> <span class=\"n\">numString.dropRightWhile</span> <span class=\"o\">(</span><span class=\"bp\">·</span> <span class=\"bp\">==</span> <span class=\"sc\">'0'</span><span class=\"o\">)</span>\n    <span class=\"n\">noTrailingZeros.dropRightWhile</span> <span class=\"o\">(</span><span class=\"bp\">·</span> <span class=\"bp\">==</span> <span class=\"sc\">'.'</span><span class=\"o\">)</span>\n  <span class=\"k\">else</span> <span class=\"n\">numString</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">String.separate</span> <span class=\"o\">(</span><span class=\"n\">sep</span> <span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">strings</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">String</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">strings</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"bp\">=&gt;</span> <span class=\"s2\">\"\"</span>\n  <span class=\"bp\">|</span> <span class=\"n\">x</span> <span class=\"o\">::</span> <span class=\"n\">xs</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">String.join</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">::</span> <span class=\"n\">xs.map</span> <span class=\"o\">(</span><span class=\"n\">sep</span> <span class=\"bp\">++</span> <span class=\"bp\">·</span><span class=\"o\">))</span>\n\n<span class=\"n\">partial</span> <span class=\"kd\">def</span> <span class=\"n\">JSON.asString</span> <span class=\"o\">(</span><span class=\"n\">val</span> <span class=\"o\">:</span> <span class=\"n\">JSON</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">String</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">val</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">true</span> <span class=\"bp\">=&gt;</span> <span class=\"s2\">\"true\"</span>\n  <span class=\"bp\">|</span> <span class=\"n\">false</span> <span class=\"bp\">=&gt;</span> <span class=\"s2\">\"false\"</span>\n  <span class=\"bp\">|</span> <span class=\"n\">null</span> <span class=\"bp\">=&gt;</span> <span class=\"s2\">\"null\"</span>\n  <span class=\"bp\">|</span> <span class=\"n\">string</span> <span class=\"n\">s</span> <span class=\"bp\">=&gt;</span> <span class=\"s2\">\"</span><span class=\"se\">\\\"</span><span class=\"s2\">\"</span> <span class=\"bp\">++</span> <span class=\"n\">Lean.Json.escape</span> <span class=\"n\">s</span> <span class=\"bp\">++</span> <span class=\"s2\">\"</span><span class=\"se\">\\\"</span><span class=\"s2\">\"</span>\n  <span class=\"bp\">|</span> <span class=\"n\">number</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">dropDecimals</span> <span class=\"n\">n.toString</span>\n  <span class=\"bp\">|</span> <span class=\"n\">object</span> <span class=\"n\">members</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">let</span> <span class=\"n\">memberToString</span> <span class=\"n\">mem</span> <span class=\"o\">:=</span>\n      <span class=\"s2\">\"</span><span class=\"se\">\\\"</span><span class=\"s2\">\"</span> <span class=\"bp\">++</span> <span class=\"n\">Lean.Json.escape</span> <span class=\"n\">mem.fst</span> <span class=\"bp\">++</span> <span class=\"s2\">\"</span><span class=\"se\">\\\"</span><span class=\"s2\">: \"</span> <span class=\"bp\">++</span> <span class=\"n\">asString</span> <span class=\"n\">mem.snd</span>\n    <span class=\"s2\">\"{\"</span> <span class=\"bp\">++</span> <span class=\"s2\">\", \"</span><span class=\"bp\">.</span><span class=\"n\">separate</span> <span class=\"o\">(</span><span class=\"n\">members.map</span> <span class=\"n\">memberToString</span><span class=\"o\">)</span> <span class=\"bp\">++</span> <span class=\"s2\">\"}\"</span>\n  <span class=\"bp\">|</span> <span class=\"n\">array</span> <span class=\"n\">elements</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"s2\">\"[\"</span> <span class=\"bp\">++</span> <span class=\"s2\">\", \"</span><span class=\"bp\">.</span><span class=\"n\">separate</span> <span class=\"o\">(</span><span class=\"n\">elements.map</span> <span class=\"n\">asString</span><span class=\"o\">)</span> <span class=\"bp\">++</span> <span class=\"s2\">\"]\"</span>\n\n<span class=\"k\">#eval</span> <span class=\"o\">(</span><span class=\"n\">buildResponse</span> <span class=\"s2\">\"Functional Programming in Lean\"</span> <span class=\"n\">Str</span> <span class=\"s2\">\"Programming is fun!\"</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">asString</span>\n</code></pre></div>",
        "id": 381269406,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1691003279
    },
    {
        "content": "<p>Thanks for letting me know! The source code for that chapter's examples doesn't include this line, but it's loading something else that results in that library being available. I'm really busy right now, and I'll fix this when I can - in the meantime, it's tracked here: <a href=\"https://github.com/leanprover/fp-lean/issues/122\">https://github.com/leanprover/fp-lean/issues/122</a></p>\n<p>Thanks again!</p>",
        "id": 382427173,
        "sender_full_name": "David Thrane Christiansen",
        "timestamp": 1691348958
    },
    {
        "content": "<p>This is fixed - the improvement will be in the upcoming release. Thanks!</p>",
        "id": 394577685,
        "sender_full_name": "David Thrane Christiansen",
        "timestamp": 1696318905
    }
]