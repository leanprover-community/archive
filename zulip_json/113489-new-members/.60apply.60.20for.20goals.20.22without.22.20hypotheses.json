[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> In Formalising Mathematics p. 36 you write</p>\n<blockquote>\n<p><code>apply h</code> will not work unless <code>h</code> is of the form <code>P → Q</code>.</p>\n</blockquote>\n<p>but in MiL p. 18, there is <code>apply min_le_right</code> which is not an implication. My guess is that this works because the goal <code>Q</code> is implicitly <code>True → Q</code> so <code>True</code> becomes the new goal and is immediately proved. Correct or would you reword the quote?</p>",
        "id": 408943848,
        "sender_full_name": "Moti Ben-Ari",
        "timestamp": 1702995682
    },
    {
        "content": "<p>Does <code>exact min_le_right _ _</code> work in this case? This is what <code>apply</code> does.</p>",
        "id": 408944203,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1702995776
    },
    {
        "content": "<p>What <code>apply</code> does under the wood is the following: <code>min_le_right</code> has the right conclusion, and wants two variables (here it is strange to say that it wants to assumptions, since the two terms are not of type <code>Prop</code>, but Lean doesn't care), so it creates to new goals. Then Lean realizes that the two goals can be solved automatically, and it does so.</p>",
        "id": 408944615,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1702995915
    },
    {
        "content": "<p>If you think to <code>min_le_right</code> as a function <code>α → α → ...</code> you see that <code>apply</code> makes sense. The difference is that the two variables can be found automatically (looking at the goal)</p>",
        "id": 408945004,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1702996062
    },
    {
        "content": "<p>In fact, <code>apply</code> even works when the goal matches directly (that is, in cases where <code>exact</code> would also work)</p>",
        "id": 408946658,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1702996558
    }
]