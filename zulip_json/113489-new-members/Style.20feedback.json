[
    {
        "content": "<p>Section 2.5 in \"Mathematics in Lean\" has us prove:</p>\n<p><code>(h : a ≤ b) (h' : 0 ≤ c) : a * c ≤ b * c </code></p>\n<p>Here's my proof, but it feels a little verbose and awkward.  Is there a simpler / more readable / more canonical proof?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">ordered_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n<span class=\"kd\">variables</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">R</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h'</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">nth_rewrite</span> <span class=\"mi\">0</span> <span class=\"bp\">←</span> <span class=\"n\">add_zero</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">c</span><span class=\"o\">),</span>\n  <span class=\"k\">have</span> <span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">-</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">c</span><span class=\"o\">,</span>\n  <span class=\"kd\">by</span> <span class=\"n\">noncomm_ring</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">h1</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">add_le_add_left</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">mul_nonneg</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">h</span> <span class=\"o\">},</span>\n  <span class=\"n\">exact</span> <span class=\"n\">h'</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 325470870,
        "sender_full_name": "Martin C. Martin",
        "timestamp": 1675363369
    },
    {
        "content": "<p>What are the types of a,b,c?</p>",
        "id": 325488361,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1675368550
    },
    {
        "content": "<p>(Edit: Actually, an <code>ordered_ring</code>.) Sorry, updated.  They're in a <code>metric_space</code>.</p>",
        "id": 325492844,
        "sender_full_name": "Martin C. Martin",
        "timestamp": 1675370182
    },
    {
        "content": "<p>I just noticed that Mathematics in Lean comes with solutions!  Here's their solution to the problem:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">aux1</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"bp\">-</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">sub_self</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">sub_eq_add_neg</span><span class=\"o\">,</span> <span class=\"n\">sub_eq_add_neg</span><span class=\"o\">,</span> <span class=\"n\">add_comm</span><span class=\"o\">,</span> <span class=\"n\">add_comm</span> <span class=\"n\">b</span><span class=\"o\">],</span>\n  <span class=\"n\">apply</span> <span class=\"n\">add_le_add_left</span> <span class=\"n\">h</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">aux2</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"bp\">-</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">add_zero</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"bp\">←</span><span class=\"n\">sub_add_cancel</span> <span class=\"n\">b</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">add_comm</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">-</span> <span class=\"n\">a</span><span class=\"o\">)],</span>\n  <span class=\"n\">apply</span> <span class=\"n\">add_le_add_left</span> <span class=\"n\">h</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h'</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">-</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">c</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">mul_nonneg</span> <span class=\"o\">(</span><span class=\"n\">aux1</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"n\">h'</span> <span class=\"o\">},</span>\n  <span class=\"n\">rw</span> <span class=\"n\">sub_mul</span> <span class=\"n\">at</span> <span class=\"n\">h1</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">aux2</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">h1</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 325494059,
        "sender_full_name": "Martin C. Martin",
        "timestamp": 1675370659
    },
    {
        "content": "<p>Not a <code>metric_space</code> (at least not by itself), there's no <code>dist</code> here. It's an <code>ordered_ring R</code> with <code>a b c : R</code></p>",
        "id": 325494838,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1675370959
    },
    {
        "content": "<p>Note that the solutions named the first two <code>example</code>s (and changed to <code>theorem</code>) so that they could be used in the proof of the third one.</p>",
        "id": 325495132,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1675371065
    },
    {
        "content": "<p>Ugh!  Sorry, I got it mixed up with the next question.  :)  Yes, this is an ordered_ring, I updated my example.</p>",
        "id": 325495158,
        "sender_full_name": "Martin C. Martin",
        "timestamp": 1675371075
    },
    {
        "content": "<p>Here are a few ways I would consider doing it (of course, the last one is cheating in some sense). Note that <code>sub_nonneg</code> is an <code>↔</code> combining <code>aux1</code> and <code>aux2</code>. the <code>positivity</code> tactic is pretty cool in case you haven't learned about it yet.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic.positivity</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">ordered_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n<span class=\"kd\">variables</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">R</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h'</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"bp\">←</span><span class=\"n\">sub_nonneg</span> <span class=\"n\">at</span> <span class=\"n\">h</span> <span class=\"bp\">⊢</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"bp\">←</span><span class=\"n\">sub_mul</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">mul_nonneg</span> <span class=\"n\">h</span> <span class=\"n\">h'</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h'</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"bp\">←</span><span class=\"n\">sub_nonneg</span> <span class=\"n\">at</span> <span class=\"n\">h</span> <span class=\"bp\">⊢</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"bp\">←</span><span class=\"n\">sub_mul</span><span class=\"o\">,</span>\n  <span class=\"n\">positivity</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h'</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"o\">:=</span>\n<span class=\"n\">mul_le_mul_of_nonneg_right</span> <span class=\"n\">h</span> <span class=\"n\">h'</span>\n</code></pre></div>",
        "id": 325496955,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1675371743
    },
    {
        "content": "<p>Thanks, those are much better!  And I hadn't heard of the positivity tactic, thanks for the tip.</p>",
        "id": 325696568,
        "sender_full_name": "Martin C. Martin",
        "timestamp": 1675448366
    },
    {
        "content": "<p>When working forward (i.e. adding new things to the context from what we already know, as opposed to working backward from the goal), is there a way to add a hypothesis without stating it's type?  For example, in</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">metric_space</span> <span class=\"n\">X</span><span class=\"o\">]</span>\n<span class=\"kd\">variables</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">X</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">dist</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">dist</span> <span class=\"n\">x</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"o\">(</span><span class=\"n\">dist</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">dist</span> <span class=\"n\">y</span> <span class=\"n\">x</span><span class=\"o\">),</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">dist_triangle</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">x</span><span class=\"o\">},</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>that's kind of a lot of typing to just say h1 is <code>dist_triangle x y x</code>.</p>",
        "id": 325699134,
        "sender_full_name": "Martin C. Martin",
        "timestamp": 1675449151
    },
    {
        "content": "<p>You probably can do <code>have h1 := dist_triangle x y x</code> here</p>",
        "id": 325699466,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1675449260
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">metric_space</span> <span class=\"n\">X</span><span class=\"o\">]</span>\n<span class=\"kd\">variables</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">X</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">dist</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">h1</span> <span class=\"o\">:=</span> <span class=\"n\">dist_triangle</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 325699992,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1675449424
    },
    {
        "content": "<p>Dude!  So the \": type\" is optional, I thought I tried leaving that out and it didn't work, but it's working now.  :)  It seems also <code>have h1 :=</code> is the same as <code>have h1, from</code>?</p>",
        "id": 325701057,
        "sender_full_name": "Martin C. Martin",
        "timestamp": 1675449794
    },
    {
        "content": "<p>.</p>",
        "id": 325702135,
        "sender_full_name": "Martin C. Martin",
        "timestamp": 1675450152
    },
    {
        "content": "<p>It's optional if Lean can infer the type from the term you provided. Sometimes this doesn't work if the term you provided has metavariables.</p>",
        "id": 325709374,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1675452648
    },
    {
        "content": "<p>Although on second thought, I think it still \"works\" it's just that <code>h1</code> is pretty useless because it has metavariables in its type.</p>",
        "id": 325709467,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1675452685
    },
    {
        "content": "<p>Although it's not great style, <code>h1</code> is not useless if it has metavariables in its type -- you can sometimes just continue and  they'll be unified later on (and the random non-Prop goals will magically disappear).</p>",
        "id": 325710077,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1675452906
    },
    {
        "content": "<p>This is sometimes true, but in practice I frequently find that unification fails in those situations.</p>",
        "id": 325713576,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1675454192
    },
    {
        "content": "<p>Maybe this is because the metavariables I have include some TC goals that depend on how they unify? I'm not sure, I don't have an example at hand.</p>",
        "id": 325713688,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1675454241
    }
]