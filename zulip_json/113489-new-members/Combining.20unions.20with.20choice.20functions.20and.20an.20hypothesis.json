[
    {
        "content": "<p>One more question, I have defined a choice function 'r' and would like to take the union over the function applications on a set, i.e. {r s | s in S}. However, 'r' needs that s in S; how do I feed it this information? The example in the MWE does not work. </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">universe</span> <span class=\"n\">u</span> <span class=\"n\">v</span>\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">X</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"o\">(</span><span class=\"n\">Set</span> <span class=\"n\">X</span><span class=\"o\">)}</span>\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">s</span> <span class=\"bp\">∈</span> <span class=\"n\">S</span> <span class=\"bp\">→</span> <span class=\"n\">Set</span> <span class=\"n\">ι</span><span class=\"o\">}</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">⋃</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hs</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"bp\">∈</span> <span class=\"n\">S</span><span class=\"o\">),</span> <span class=\"n\">r</span> <span class=\"n\">s</span> <span class=\"n\">hs</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 408930471,
        "sender_full_name": "Josha Dekker",
        "timestamp": 1702991258
    },
    {
        "content": "<p>Note this is not a MWE because if I paste it in an empty file I get <code>unknown identifier \"Set\"</code>.</p>",
        "id": 408930748,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1702991345
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Set.Lattice</span>\n\n<span class=\"kd\">universe</span> <span class=\"n\">u</span> <span class=\"n\">v</span>\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">X</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"o\">(</span><span class=\"n\">Set</span> <span class=\"n\">X</span><span class=\"o\">)}</span>\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">s</span> <span class=\"bp\">∈</span> <span class=\"n\">S</span> <span class=\"bp\">→</span> <span class=\"n\">Set</span> <span class=\"n\">ι</span><span class=\"o\">}</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">⋃</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hs</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"bp\">∈</span> <span class=\"n\">S</span><span class=\"o\">),</span> <span class=\"n\">r</span> <span class=\"n\">s</span> <span class=\"n\">hs</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>works for me</p>",
        "id": 408930809,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1702991368
    },
    {
        "content": "<p>Oops, forgot the top line indeed. The definition works, but if you unfold it, you see that lean treats the example as 'union over s, union over hs, r s hs', which I think is not correct?</p>",
        "id": 408931113,
        "sender_full_name": "Josha Dekker",
        "timestamp": 1702991493
    },
    {
        "content": "<p>What would you have expected?</p>",
        "id": 408931295,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1702991556
    },
    {
        "content": "<p>intuitively, I would expect to have 'union over s in S, r s', where lean uses (s in S) to eliminate that hypothesis from r, if you get what I mean?</p>",
        "id": 408931585,
        "sender_full_name": "Josha Dekker",
        "timestamp": 1702991665
    },
    {
        "content": "<p>Taking a union over proofs is counterintuitive but logically equivalent to what you're writing.</p>",
        "id": 408931612,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1702991678
    },
    {
        "content": "<p>Okay, then I'll probably need to do something different in the proof I'm writing! Thanks!</p>",
        "id": 408931753,
        "sender_full_name": "Josha Dekker",
        "timestamp": 1702991733
    },
    {
        "content": "<p>This is a tricky question. The above is correct only because <code>Set X</code> is a complete lattice, not merely conditionally complete like <code>ℝ</code>.</p>",
        "id": 408932756,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1702992101
    },
    {
        "content": "<p>I don't think you need to change anything to the proof you're writing. The above is correct and idiomatic.</p>",
        "id": 408932828,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1702992123
    },
    {
        "content": "<p>I see that using choose! instead of choose to define r in the first place got rid of the part (s in S), which was what I needed; I think that is somewhat easier to work with in my situation rather than the 'double union'</p>",
        "id": 408933448,
        "sender_full_name": "Josha Dekker",
        "timestamp": 1702992324
    },
    {
        "content": "<p>I've been playing around a bit with a reduced version of the problem that I need to prove, but I can't quite seem to get it right in Lean / I can't figure out how to prove the last sorry, perhaps my construction (what I \"use\") is not the thing I should be using? The 'refine' statements were produced by running \"apply?\". Any pointers on how to proceed? </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Set.Countable</span>\n<span class=\"kn\">open</span> <span class=\"n\">Set</span>\n\n<span class=\"kd\">universe</span> <span class=\"n\">u</span> <span class=\"n\">v</span>\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">X</span><span class=\"o\">}</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">aux</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">Set</span> <span class=\"n\">X</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">hsU</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"bp\">⊆</span> <span class=\"bp\">⋃</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">U</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"o\">(</span><span class=\"n\">Set</span> <span class=\"n\">X</span><span class=\"o\">)),</span> <span class=\"n\">S.Countable</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">s</span> <span class=\"bp\">∈</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">ι</span><span class=\"o\">,</span> <span class=\"n\">r.Countable</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"bp\">⊆</span> <span class=\"bp\">⋃</span> <span class=\"n\">i</span> <span class=\"bp\">∈</span> <span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"n\">U</span> <span class=\"n\">i</span><span class=\"o\">))</span>\n    <span class=\"bp\">→</span> <span class=\"bp\">∃</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">ι</span><span class=\"o\">,</span> <span class=\"n\">r.Countable</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"bp\">⋃</span> <span class=\"n\">s</span> <span class=\"bp\">∈</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"n\">s</span> <span class=\"bp\">⊆</span> <span class=\"bp\">⋃</span> <span class=\"n\">i</span> <span class=\"bp\">∈</span> <span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"n\">U</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">S</span> <span class=\"n\">hS</span> <span class=\"n\">hsr</span>\n  <span class=\"n\">choose</span><span class=\"bp\">!</span> <span class=\"n\">r</span> <span class=\"n\">hr</span> <span class=\"n\">using</span> <span class=\"n\">hsr</span>\n  <span class=\"n\">use</span> <span class=\"bp\">⋃</span> <span class=\"n\">s</span> <span class=\"bp\">∈</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"n\">r</span> <span class=\"n\">s</span>\n  <span class=\"n\">constructor</span>\n  <span class=\"bp\">·</span> <span class=\"n\">refine</span> <span class=\"o\">(</span><span class=\"n\">Countable.biUnion_iff</span> <span class=\"n\">hS</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mpr</span> <span class=\"bp\">?</span><span class=\"n\">h.left.a</span>\n    <span class=\"n\">intro</span> <span class=\"n\">s</span> <span class=\"n\">hs</span>\n    <span class=\"n\">apply</span> <span class=\"o\">(</span><span class=\"n\">hr</span> <span class=\"n\">s</span> <span class=\"n\">hs</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span>\n  <span class=\"bp\">·</span> <span class=\"n\">refine</span> <span class=\"n\">iUnion_subset</span> <span class=\"bp\">?</span><span class=\"n\">h.right.h</span>\n    <span class=\"n\">intro</span> <span class=\"n\">i</span>\n    <span class=\"n\">simp</span>\n    <span class=\"n\">intro</span> <span class=\"n\">is</span>\n    <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">hr</span> <span class=\"n\">i</span> <span class=\"n\">is</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">2</span>\n    <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 409121029,
        "sender_full_name": "Josha Dekker",
        "timestamp": 1703061608
    },
    {
        "content": "<p>In math terms, I use the fact that a countable union of countable sets (the r(s)) remains countable; both countability of 'r' constructed in this way and the fact that each element of the union over (s in S) is included in one of the unions over countable sets provides the desired result.</p>",
        "id": 409121423,
        "sender_full_name": "Josha Dekker",
        "timestamp": 1703061795
    },
    {
        "content": "<p>Try:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>    <span class=\"n\">intro</span> <span class=\"n\">x</span> <span class=\"n\">hx</span>\n    <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">this</span> <span class=\"n\">hx</span>\n    <span class=\"n\">apply</span><span class=\"bp\">?</span>\n</code></pre></div>",
        "id": 409126900,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1703063898
    },
    {
        "content": "<p>Thanks, that worked! That was the last missing piece of the puzzle that shows that the definition of a Lindelöf space in terms of filters indeed guarantees the countable subcover property, so I'll probably make a PR for that soon!</p>",
        "id": 409128475,
        "sender_full_name": "Josha Dekker",
        "timestamp": 1703064417
    }
]