[
    {
        "content": "<p>Hi again,</p>\n<p>I'd like to give my program Floats, and then maybe convert them to something like Rat or Real that's easier to reason about.  I don't mind if the things I prove about Rat or Real aren't actually true of the Float, it's an illusion I'm happy to maintain.  (At the end of the day, I'd like to be able to <em>both</em> evaluate my Floats <em>and</em> prove things about numbers that they approximate.)</p>\n<p>I've looked around in the Zulip archive, and I've found several threads where others mention using Reals instead of Floats.  But I'm having trouble figuring out how to actually cast between them.  I've looked in <a href=\"https://leanprover-community.github.io/mathlib4_docs/Init/Data/OfScientific.html#OfScientific\">Init.Data.OfScientific</a>, <a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/Data/Real/Basic.html#Real\">Mathlib.Data.Real.Basic</a>, and <a href=\"https://leanprover-community.github.io/mathlib4_docs/Std/Data/Rat/Basic.html#Rat\">Std.Data.Rat.Basic</a>.</p>\n<p>Am I just looking in the wrong places?  Am I approaching this the wrong way?<br>\nThanks,<br>\nCaleb</p>",
        "id": 344961978,
        "sender_full_name": "Caleb Schultz Kisby",
        "timestamp": 1679948901
    },
    {
        "content": "<p>To achieve this I currently take an axiomatic approach. I just create a new type that wraps around Float and state that it is a field. Here is a code that just postulates that such type is commutative ring</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.Ring.Basic</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">MyReal</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">where</span>\n  <span class=\"n\">val</span> <span class=\"o\">:</span> <span class=\"n\">Float</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">_root_.Int.toFloat</span> <span class=\"o\">:</span> <span class=\"n\">Int</span> <span class=\"bp\">→</span> <span class=\"n\">Float</span>\n<span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">ofNat</span> <span class=\"n\">z'</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">z'.toFloat</span>\n<span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">negSucc</span> <span class=\"n\">z'</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"n\">z'</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">toFloat</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">commRing</span> <span class=\"o\">:</span> <span class=\"n\">CommRing</span> <span class=\"n\">MyReal</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">refine'</span> <span class=\"o\">{</span> <span class=\"n\">natCast</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">⟨</span><span class=\"n\">n.toFloat</span><span class=\"o\">⟩</span>\n            <span class=\"n\">intCast</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">z</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">⟨</span><span class=\"n\">z.toFloat</span><span class=\"o\">⟩</span>\n            <span class=\"n\">zero</span> <span class=\"o\">:=</span> <span class=\"o\">⟨(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">Float</span><span class=\"o\">)⟩</span>\n            <span class=\"n\">one</span> <span class=\"o\">:=</span> <span class=\"o\">⟨(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">Float</span><span class=\"o\">)⟩</span>\n            <span class=\"n\">mul</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">⟨</span><span class=\"n\">x.1</span> <span class=\"bp\">*</span> <span class=\"n\">y.1</span><span class=\"o\">⟩</span>\n            <span class=\"n\">add</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">⟨</span><span class=\"n\">x.1</span> <span class=\"bp\">+</span> <span class=\"n\">y.1</span><span class=\"o\">⟩</span>\n            <span class=\"n\">neg</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">⟨</span><span class=\"bp\">-</span><span class=\"n\">x.1</span><span class=\"o\">⟩</span>\n            <span class=\"n\">sub</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">⟨</span><span class=\"n\">x.1</span> <span class=\"bp\">-</span> <span class=\"n\">y.1</span><span class=\"o\">⟩</span>\n            <span class=\"n\">npow</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">n</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">⟨</span><span class=\"n\">x.1</span><span class=\"bp\">^</span><span class=\"n\">n.toFloat</span><span class=\"o\">⟩</span>\n            <span class=\"n\">nsmul</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">n</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">⟨</span><span class=\"n\">n.toFloat</span> <span class=\"bp\">*</span> <span class=\"n\">x.1</span><span class=\"o\">⟩</span>\n            <span class=\"n\">zsmul</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">z</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">⟨</span><span class=\"n\">z.toFloat</span> <span class=\"bp\">*</span> <span class=\"n\">x.1</span><span class=\"o\">⟩,</span>\n            <span class=\"bp\">..</span> <span class=\"o\">}</span>\n  <span class=\"n\">all_goals</span> <span class=\"gr\">admit</span>  <span class=\"c1\">-- Just assume that all the laws are true</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">OfScientific</span> <span class=\"n\">MyReal</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">m</span> <span class=\"n\">s</span> <span class=\"n\">e</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">⟨(</span><span class=\"n\">OfScientific.ofScientific</span> <span class=\"n\">m</span> <span class=\"n\">s</span> <span class=\"n\">e</span><span class=\"o\">)⟩⟩</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">ToString</span> <span class=\"n\">MyReal</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x.1.toString</span><span class=\"o\">⟩</span>\n\n<span class=\"k\">#eval</span> <span class=\"o\">(</span><span class=\"mi\">42</span><span class=\"bp\">.</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">MyReal</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">123456</span> <span class=\"o\">:</span> <span class=\"n\">MyReal</span><span class=\"o\">)</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">LE</span> <span class=\"n\">MyReal</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x.1</span> <span class=\"bp\">≤</span> <span class=\"n\">y.1</span><span class=\"o\">⟩</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">LT</span> <span class=\"n\">MyReal</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x.1</span> <span class=\"bp\">&lt;</span> <span class=\"n\">y.1</span><span class=\"o\">⟩</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">DecidableRel</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">MyReal</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x.1</span> <span class=\"bp\">≤</span> <span class=\"n\">y.1</span> <span class=\"k\">then</span> <span class=\"n\">isTrue</span> <span class=\"n\">h</span> <span class=\"k\">else</span> <span class=\"n\">isFalse</span> <span class=\"n\">h</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">DecidableRel</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">MyReal</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x.1</span> <span class=\"bp\">&lt;</span> <span class=\"n\">y.1</span> <span class=\"k\">then</span> <span class=\"n\">isTrue</span> <span class=\"n\">h</span> <span class=\"k\">else</span> <span class=\"n\">isFalse</span> <span class=\"n\">h</span>\n\n<span class=\"kd\">example</span>\n  <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">MyReal</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">00000000000000001</span> <span class=\"o\">:</span> <span class=\"n\">MyReal</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">native_decide</span>\n\n<span class=\"kd\">example</span>\n  <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">MyReal</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">00000000000000001</span> <span class=\"o\">:</span> <span class=\"n\">MyReal</span><span class=\"o\">)</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span><span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">add_assoc</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">native_decide</span>\n</code></pre></div>\n<p>The end shows that you can get into trouble once you start playing around with <code>native_decide</code> and decidable inequalities. Here is a <a href=\"#narrow/stream/270676-lean4/topic/Treating.20.60Float.60.20as.20reals.2C.20inconsistent.3F\">thread</a> discussing this inconsistency.</p>",
        "id": 344976489,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1679955233
    },
    {
        "content": "<p>Another approach I'm experimenting with now, is where I provide the compiler with different definitions of operations on reals. This can be done with <code>impelmented_by</code> attribute. </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Real.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Complex.Exponential</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">MyReal</span> <span class=\"o\">:=</span> <span class=\"n\">Real</span>\n\n<span class=\"c1\">-- `MyReal` and mathlib's reals `ℝ` are defeq</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">MyReal</span> <span class=\"bp\">=</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rfl</span>\n\n<span class=\"c1\">-- To convert from float to real we just perform unsafe cast</span>\n<span class=\"c1\">-- We have to make sure that any operation on `MyReal` has its implementaion</span>\n<span class=\"c1\">-- overridden by corresponding implementation with Floats</span>\n<span class=\"n\">unsafe</span> <span class=\"kd\">def</span> <span class=\"n\">MyReal.toFloat</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">MyReal</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Float</span> <span class=\"o\">:=</span> <span class=\"n\">unsafeCast</span> <span class=\"n\">x</span>\n<span class=\"n\">unsafe</span> <span class=\"kd\">def</span> <span class=\"n\">Float.toMyReal</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Float</span><span class=\"o\">)</span>  <span class=\"o\">:</span> <span class=\"n\">MyReal</span> <span class=\"o\">:=</span> <span class=\"n\">unsafeCast</span> <span class=\"n\">x</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">MyReal</span>\n\n<span class=\"n\">unsafe</span> <span class=\"kd\">def</span> <span class=\"n\">Impl.add</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">MyReal</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">MyReal</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">x.toFloat</span> <span class=\"bp\">+</span> <span class=\"n\">y.toFloat</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">toMyReal</span>\n\n<span class=\"kd\">@[implemented_by Impl.add]</span>\n<span class=\"kd\">def</span> <span class=\"n\">add</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">MyReal</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">MyReal</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">x.1</span> <span class=\"bp\">+</span> <span class=\"n\">y.1</span><span class=\"o\">⟩</span>\n\n<span class=\"n\">unsafe</span> <span class=\"kd\">def</span> <span class=\"n\">Impl.ofScientific</span> <span class=\"o\">(</span><span class=\"n\">mantissa</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">exponentSign</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">decimalExponent</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">MyReal</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">OfScientific.ofScientific</span> <span class=\"n\">mantissa</span> <span class=\"n\">exponentSign</span> <span class=\"n\">decimalExponent</span> <span class=\"o\">:</span> <span class=\"n\">Float</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">toMyReal</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Add</span> <span class=\"n\">MyReal</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">add</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">@[implemented_by Impl.ofScientific]</span>\n<span class=\"kd\">def</span> <span class=\"n\">ofScientific</span> <span class=\"o\">(</span><span class=\"n\">mantissa</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">exponentSign</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">decimalExponent</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">MyReal</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"n\">exp</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"mi\">10</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"n\">decimalExponent</span>\n  <span class=\"k\">if</span> <span class=\"n\">exponentSign</span> <span class=\"k\">then</span>\n    <span class=\"o\">(</span><span class=\"n\">mantissa</span> <span class=\"bp\">/</span> <span class=\"n\">exp</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n  <span class=\"k\">else</span>\n    <span class=\"o\">(</span><span class=\"n\">mantissa</span> <span class=\"bp\">*</span> <span class=\"n\">exp</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">OfScientific</span> <span class=\"n\">MyReal</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">ofScientific</span>\n<span class=\"o\">⟩</span>\n<span class=\"n\">unsafe</span> <span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">ToString</span> <span class=\"n\">MyReal</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x.toFloat.toString</span><span class=\"o\">⟩</span>\n\n<span class=\"k\">#eval</span> <span class=\"o\">(</span><span class=\"mi\">42</span><span class=\"bp\">.</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">MyReal</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">123456</span> <span class=\"o\">:</span> <span class=\"n\">MyReal</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>However, I'm unable to show that <code>MyReal</code> is a field without doing lots of work.</p>",
        "id": 344977702,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1679955787
    },
    {
        "content": "<p>Ah, thank you so much!  This is perfect.  The inconsistency with <code>native_decide</code> is fine, and is what I'd expect (since you're evaluating the <code>Float</code>s).  I'll just avoid evaluating <code>Float</code> in the proofs.</p>",
        "id": 345003394,
        "sender_full_name": "Caleb Schultz Kisby",
        "timestamp": 1679965777
    },
    {
        "content": "<p>Also, I didn't know about <code>native_decide</code> until now (I'm back to learning Lean again!).  I used to use Agda, and so I'm unfamiliar with the tactic language.  But things like this make it hard to go back to just terms :-)</p>",
        "id": 345003531,
        "sender_full_name": "Caleb Schultz Kisby",
        "timestamp": 1679965846
    },
    {
        "content": "<p>If you don't want to evaluate the floats then why don't you just use reals instead?</p>",
        "id": 345037903,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1679985062
    },
    {
        "content": "<p>Evaluating floats via <code>native_decide</code> in a proof and running a program with floats are two different things.</p>",
        "id": 345123571,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1680008108
    },
    {
        "content": "<p>If I can ask a follow-up question -- is there any official plan for handling this sort of cast/conversion in the Lean4 mathlib?  (Again, I'm new to Lean, so I'm not familiar with mathlib development.  I'm just curious, and I'd also like to avoid writing code that will look archaic in 5 years!)</p>",
        "id": 345177048,
        "sender_full_name": "Caleb Schultz Kisby",
        "timestamp": 1680019230
    },
    {
        "content": "<p>Mathematicians are not interested in floats afaik. Some library other than Mathlib4 might incorporate it tho.</p>",
        "id": 345177543,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1680019324
    },
    {
        "content": "<p>Oh whoops, good point.  I forgot that <code>Float</code> is dealt with in <code>Init.Data.Float</code> and <code>Init.Data.OfScientific</code> anyway <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 345178063,
        "sender_full_name": "Caleb Schultz Kisby",
        "timestamp": 1680019431
    },
    {
        "content": "<p>For sure mathlib is not interested in defs which make the system inconsistent :-)</p>",
        "id": 345180577,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1680019968
    },
    {
        "content": "<p>Applied mathematicians of a certain type are plenty interested in floats. If we come up with some useful way to talk about the relationship between idealized calculations with real numbers and actual algorithms with floats, I think it would be within scope for mathlib. But of course it would have to be done in a way that doesn't involve adding false axioms.<br>\nAt the moment there isn't any plan to do so though, or even any concrete idea of how to do so really.</p>",
        "id": 345192409,
        "sender_full_name": "Reid Barton",
        "timestamp": 1680022874
    },
    {
        "content": "<p>Presumably the way to do this is to have some kind of interval arithmetic and a map from <code>Float</code> to that? Did anyone ever write down precise functions <code>lower_bound</code> and <code>upper_bound</code> from <code>Float</code> to <code>Rat</code> which have some kind of useful meaning?</p>",
        "id": 345208957,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1680027779
    },
    {
        "content": "<p>Do we have <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Float.toRat#doc\">docs4#Float.toRat</a> ?</p>",
        "id": 345236231,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1680035440
    },
    {
        "content": "<p>I'm not sure the lower/upper bound is that interesting, it's probably just half-way between the adjacent Floats, perhaps with a different definition for each rounding mode</p>",
        "id": 345236404,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1680035505
    },
    {
        "content": "<p>Is it even possible to prove things about <code>Float</code> in lean4? It looks like you can't actually access the underlying bits</p>",
        "id": 345236710,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1680035638
    },
    {
        "content": "<p>you can prove things about concrete Floats using <code>native_decide</code> (which can see through <code>opaque</code> and hence is a proper axiomatic extension), but that's not good enough for doing general properties about float representation. I would probably do full IEEE modeling by having a <code>FP.Float</code> type a la <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=FP.Float#doc\">docs4#FP.Float</a> and axiomatize the bijection between them (this may require additional functions in core if necessary to define the bijection)</p>",
        "id": 345267750,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1680049922
    },
    {
        "content": "<p>Why would we need the bijection to be axiomatized? We don't have any such axiomatization for things like <code>Uint64</code></p>",
        "id": 345268087,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1680050107
    },
    {
        "content": "<p>because <code>Float</code> is opaque</p>",
        "id": 345269578,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1680050803
    },
    {
        "content": "<p>I'm talking under the assumption that the definition of <code>Float</code> in core does not change</p>",
        "id": 345269651,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1680050852
    },
    {
        "content": "<p>The type <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=FloatSpec#doc\">docs4#FloatSpec</a> which gives the properties of the float type itself are not sufficient to establish e.g. its cardinality</p>",
        "id": 345269973,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1680051005
    },
    {
        "content": "<p>you can introduce the \"to\" and \"from\" functions using <code>opaque</code>, similar to most float ops, but any assertions about those functions would need to be <code>axiom</code>, for example <code>(Float.add x y).toFP = FP.Float.add x.toFP y.toFP</code></p>",
        "id": 345270266,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1680051120
    },
    {
        "content": "<p>It would be possible to have <code>structure Float where ofFP :: toFP : FP.Float</code> though in core; the <code>toFP</code> and <code>ofFP</code> functions would be overridden in this case such that <code>Float</code> has the ABI of a <code>f32</code> while <code>FP.Float</code> is a regular lean inductive containing the \"unpacked\" components</p>",
        "id": 345270645,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1680051291
    },
    {
        "content": "<p>I think that was the version I was expecting</p>",
        "id": 345277307,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1680055241
    },
    {
        "content": "<p>But maybe that's asking too much of core especially if we want implementations of all the float functions within the theory</p>",
        "id": 345277444,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1680055358
    },
    {
        "content": "<p>This is a long shot, but...</p>\n<p>I'd like to do <em>computation</em> with matrices over approximate complex numbers (where the real part is a <code>Float</code> and the imaginary part is a <code>Float</code> as well) and I would prefer not to define everything myself. Does Lean 3 or Lean 4 provide anything useful for my purpose?</p>",
        "id": 348492224,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1681226351
    },
    {
        "content": "<p>I think the short answer is \"no\" :)</p>",
        "id": 348492380,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1681226384
    },
    {
        "content": "<p>Not sure if there's a longer answer yet</p>",
        "id": 348492472,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1681226403
    },
    {
        "content": "<p>I've argued before that we should have such a construction, since it would absorb <a href=\"https://leanprover-community.github.io/mathlib_docs/find/gaussian_int\">docs#gaussian_int</a></p>",
        "id": 348497069,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1681227349
    },
    {
        "content": "<p>In the meantime, you could use a <code>clifford_algebra</code>!</p>",
        "id": 348497209,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1681227373
    },
    {
        "content": "<p>You should check out <a href=\"https://github.com/lecopivo/SciLean\">https://github.com/lecopivo/SciLean</a></p>",
        "id": 348508094,
        "sender_full_name": "Reid Barton",
        "timestamp": 1681230053
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"417654\">Martin Dvořák</span> <a href=\"#narrow/stream/113489-new-members/topic/Casting.20to.20and.20from.20Floats/near/348492224\">said</a>:</p>\n<blockquote>\n<p>This is a long shot, but...</p>\n<p>I'd like to do <em>computation</em> with matrices over approximate complex numbers (where the real part is a <code>Float</code> and the imaginary part is a <code>Float</code> as well) and I would prefer not to define everything myself. Does Lean 3 or Lean 4 provide anything useful for my purpose?</p>\n</blockquote>\n<p>If you dont want to prove anything you can just do <code>Array (Array (Prod Float Float))</code> orr am I overlooking something?</p>",
        "id": 348666178,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1681291264
    },
    {
        "content": "<p>I think this is \"defining everything myself\"</p>",
        "id": 348667555,
        "sender_full_name": "Reid Barton",
        "timestamp": 1681291484
    },
    {
        "content": "<p>I would imagine that you can use <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Matrix#doc\">docs4#Matrix</a> even if you can't use <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=complex#doc\">docs4#complex</a>. Though for computation you'll want to occasionally un-lazy the matrix by converting to nested arrays and back</p>",
        "id": 348669453,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1681291861
    },
    {
        "content": "<p>Probably closer to \"always\" than \"occasionally\".</p>",
        "id": 348670046,
        "sender_full_name": "Reid Barton",
        "timestamp": 1681291999
    },
    {
        "content": "<p>The Mul instance needs some well-behavedness of the underlying ring, which you would need to assert (even though it's false).</p>",
        "id": 348670268,
        "sender_full_name": "Reid Barton",
        "timestamp": 1681292042
    },
    {
        "content": "<p>If you don't want to prove theorems then rolling your own seems better in pretty much every respect</p>",
        "id": 348670487,
        "sender_full_name": "Reid Barton",
        "timestamp": 1681292076
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/113489-new-members/topic/Casting.20to.20and.20from.20Floats/near/348670268\">said</a>:</p>\n<blockquote>\n<p>The Mul instance needs some well-behavedness of the underlying ring, which you would need to assert (even though it's false).</p>\n</blockquote>\n<p>Ah, right; because we use <code>finset.univ.sum</code> to collect the terms, but that's only well-defined if addition is associative.</p>",
        "id": 348671442,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1681292269
    },
    {
        "content": "<p>Which is unavoidable I think, because it only assumes a <code>fintype</code> instance on the indexing types</p>",
        "id": 348671717,
        "sender_full_name": "Reid Barton",
        "timestamp": 1681292322
    },
    {
        "content": "<p>Also, some good old-fashioned for loops are likely to be a lot more efficient than <code>finset.univ.sum</code>, depending on how good Lean is at inlining</p>",
        "id": 348673161,
        "sender_full_name": "Reid Barton",
        "timestamp": 1681292651
    },
    {
        "content": "<p>When the body of the loop is two fetches and an <code>fmadd</code>, there is a lot of room to make it slow.</p>",
        "id": 348673739,
        "sender_full_name": "Reid Barton",
        "timestamp": 1681292773
    }
]