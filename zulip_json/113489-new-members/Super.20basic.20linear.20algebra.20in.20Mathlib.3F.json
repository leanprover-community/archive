[
    {
        "content": "<p>Back at doing Axler in Lean, and I realize that I know next to nothing about how to put the Mathlib4 parts together. If I wanted to show that vectors in $R^n$ form a vector space, what is the most basic Mathlib setup?</p>",
        "id": 405204598,
        "sender_full_name": "Arien Malec",
        "timestamp": 1701378860
    },
    {
        "content": "<p>Maybe this?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.LinearAlgebra.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Real.Basic</span>\n\n<span class=\"bp\">#</span><span class=\"n\">synth</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">Module</span> <span class=\"n\">ℝ</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>There's some mention of modules in <a href=\"https://leanprover-community.github.io/mathematics_in_lean/C08_Groups_and_Rings.html#ideals-and-quotients\">Section 8.2 of Mathematics in Lean 4</a>, but the promised chapter on linear algebra doesn't appear to be there yet, unless I missed something.</p>",
        "id": 405212270,
        "sender_full_name": "Richard Copley",
        "timestamp": 1701380877
    },
    {
        "content": "<p>(deleted: Richard posted a better version of the same thing!)</p>",
        "id": 405212272,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1701380879
    },
    {
        "content": "<p>Though in case it's unclear, you could also write:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n\n<span class=\"bp\">#</span><span class=\"n\">synth</span> <span class=\"n\">Module</span> <span class=\"n\">ℝ</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 405212438,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1701380957
    },
    {
        "content": "<p>Cool -- but seems like magic? I get <code>fun n =&gt; Pi.module (Fin n) (fun a =&gt; ℝ) ℝ</code> -- have I gotten for free proofs of the various laws for vector addition and scalar multiplication? If so, where did they come from? How might I have done them myself? There's this weird space in Mathlib where doing things from first principles is easy, and doing hard things is possible but doing easy things is seemingly hard....</p>",
        "id": 405223588,
        "sender_full_name": "Arien Malec",
        "timestamp": 1701385328
    },
    {
        "content": "<p>Yes, you did indeed get them all for free! The message is telling you where the laws for scalar multiplication came from; <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Pi.module#doc\">docs#Pi.module</a></p>",
        "id": 405223820,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1701385408
    },
    {
        "content": "<p><code>#synth AddCommGroup ℝ (Fin n → ℝ)</code> will tell you where the laws for addition came from</p>",
        "id": 405223875,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1701385427
    },
    {
        "content": "<p>Though the source code for either will not be particularly insightful</p>",
        "id": 405224063,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1701385502
    },
    {
        "content": "<p>Yeah, that was my first stop....</p>",
        "id": 405224099,
        "sender_full_name": "Arien Malec",
        "timestamp": 1701385520
    },
    {
        "content": "<p><a href=\"https://www.youtube.com/watch?v=L_VDsP9_ty8\">https://www.youtube.com/watch?v=L_VDsP9_ty8</a> or <a href=\"https://leanprover-community.github.io/mathematics_in_lean/C06_Structures.html#algebraic-structures\">https://leanprover-community.github.io/mathematics_in_lean/C06_Structures.html#algebraic-structures</a> has an exercise that has you prove that <code>{x, y, z}</code> structures form an additive group</p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"L_VDsP9_ty8\" href=\"https://www.youtube.com/watch?v=L_VDsP9_ty8\"><img src=\"https://uploads.zulipusercontent.net/12549a0f1ee6ee2d7049d90104195169c0d2a3d3/68747470733a2f2f692e7974696d672e636f6d2f76692f4c5f56447350395f7479382f64656661756c742e6a7067\"></a></div>",
        "id": 405224874,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1701385909
    },
    {
        "content": "<p>I don't know if we have any exercises for doing the analogous thing for vector spaces</p>",
        "id": 405224952,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1701385933
    },
    {
        "content": "<p>(note that both links come with corresponding exercise files)</p>",
        "id": 405225037,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1701385975
    },
    {
        "content": "<p>Where did the instance for <code>Add</code> and <code>SMul</code> for <code>(Fin n → ℝ)</code> come from?</p>",
        "id": 405228367,
        "sender_full_name": "Arien Malec",
        "timestamp": 1701387816
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Pi.instAdd#doc\">docs#Pi.instAdd</a> <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Pi.instSMul#doc\">docs#Pi.instSMul</a></p>",
        "id": 405246177,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1701394809
    },
    {
        "content": "<p>Basically, when the codomain has some operation, you can put an operation onto the functions by just defining that operation pointwise.</p>",
        "id": 405246520,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1701395007
    },
    {
        "content": "<p>If I've got this right, this is the non-magic version?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">ext</span><span class=\"kd\">]</span>\n<span class=\"kd\">structure</span> <span class=\"n\">Rn</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">term</span><span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">addRn</span><span class=\"o\">:</span> <span class=\"n\">Add</span> <span class=\"o\">(</span><span class=\"n\">Rn</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">add</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"k\">fun</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">a.term</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">b.term</span> <span class=\"n\">n</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">add_ext</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">Rn</span> <span class=\"n\">n</span><span class=\"o\">)}</span> <span class=\"o\">{</span><span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">}:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">term</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">a.term</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">b.term</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">smulRn</span><span class=\"o\">:</span> <span class=\"n\">SMul</span> <span class=\"n\">ℝ</span> <span class=\"o\">(</span><span class=\"n\">Rn</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">smul</span> <span class=\"n\">x</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"k\">fun</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">a.term</span> <span class=\"n\">n</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">smul_ext</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Rn</span> <span class=\"n\">n</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">y</span><span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">}:</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">•</span> <span class=\"n\">a</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">term</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">•</span> <span class=\"o\">(</span><span class=\"n\">a.term</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">zeroRn</span><span class=\"o\">:</span> <span class=\"n\">Zero</span> <span class=\"o\">(</span><span class=\"n\">Rn</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">zero</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">0</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">zero_ext</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span><span class=\"n\">Rn</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">term</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">addCommMonoidRn</span><span class=\"o\">:</span> <span class=\"n\">AddCommMonoid</span> <span class=\"o\">(</span><span class=\"n\">Rn</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">add_comm</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>  <span class=\"n\">ext</span> <span class=\"bp\">;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">add_comm</span><span class=\"o\">]</span>\n  <span class=\"n\">add_assoc</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">ext</span> <span class=\"bp\">;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">add_assoc</span><span class=\"o\">]</span>\n  <span class=\"n\">zero</span> <span class=\"o\">:=</span> <span class=\"n\">zeroRn.zero</span>\n  <span class=\"n\">add_zero</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">ext</span> <span class=\"bp\">;</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">add_ext</span><span class=\"o\">,</span> <span class=\"n\">add_zero</span><span class=\"o\">,</span> <span class=\"n\">zero_ext</span><span class=\"o\">]</span>\n  <span class=\"n\">zero_add</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">ext</span> <span class=\"bp\">;</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">add_ext</span><span class=\"o\">,</span> <span class=\"n\">zero_add</span><span class=\"o\">,</span> <span class=\"n\">zero_ext</span><span class=\"o\">]</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">moduleRn</span><span class=\"o\">:</span> <span class=\"n\">Module</span> <span class=\"n\">ℝ</span> <span class=\"o\">(</span><span class=\"n\">Rn</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">one_smul</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">ext</span><span class=\"bp\">;</span> <span class=\"n\">simp</span>\n  <span class=\"n\">zero_smul</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">ext</span><span class=\"bp\">;</span> <span class=\"n\">simp</span>\n  <span class=\"n\">smul_zero</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">ext</span><span class=\"bp\">;</span> <span class=\"n\">simp</span>\n  <span class=\"n\">smul_add</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">ext</span><span class=\"bp\">;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">mul_add</span><span class=\"o\">]</span>\n  <span class=\"n\">add_smul</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">ext</span><span class=\"bp\">;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">add_mul</span><span class=\"o\">]</span>\n  <span class=\"n\">mul_smul</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">ext</span><span class=\"bp\">;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">mul_assoc</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 405442690,
        "sender_full_name": "Arien Malec",
        "timestamp": 1701467133
    },
    {
        "content": "<p>That looks good to me: though your lemmas are strangely named, we would normally call your <code>add_ext</code> <code>term_add_apply</code> since it's applying <code>term</code> to <code>add</code></p>",
        "id": 405444728,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1701468128
    },
    {
        "content": "<p>How would I generalize the declaration of <code>Rn</code> to <code>Fn</code> where it works across any field? Axler wants proofs that work for what he defines as <code>F</code> which is real or complex (I know there's a \"real or complex\" type somewhere in Mathlib as well).</p>\n<p>If I do</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.Field.Basic</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">ext</span><span class=\"kd\">]</span>\n<span class=\"kd\">structure</span> <span class=\"n\">Rn</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">term</span><span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">F</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">addRn</span><span class=\"o\">:</span> <span class=\"n\">Add</span> <span class=\"o\">(</span><span class=\"n\">Rn</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">add</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"k\">fun</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">a.term</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">b.term</span> <span class=\"n\">n</span><span class=\"o\">⟩</span>\n</code></pre></div>\n<p>I get a typeclass instance stuck issue.</p>",
        "id": 405550872,
        "sender_full_name": "Arien Malec",
        "timestamp": 1701537460
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">addRn</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Add</span> <span class=\"o\">(</span><span class=\"n\">Rn</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">add</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"k\">fun</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">a.term</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">b.term</span> <span class=\"n\">n</span><span class=\"o\">⟩</span>\n</code></pre></div>",
        "id": 405552454,
        "sender_full_name": "Richard Copley",
        "timestamp": 1701538802
    },
    {
        "content": "<p>Surely that doesn't work Richard; does lean really guess F?</p>",
        "id": 405554052,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1701540015
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"542196\">@Arien Malec</span>: can you add imports and any <code>variable</code>s to your example?</p>",
        "id": 405554095,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1701540039
    },
    {
        "content": "<p>Oops, forgot the MWE norms. Done.</p>",
        "id": 405556371,
        "sender_full_name": "Arien Malec",
        "timestamp": 1701541771
    },
    {
        "content": "<p>Can confirm adding <code>[Field F]</code> doesn't work...</p>",
        "id": 405556450,
        "sender_full_name": "Arien Malec",
        "timestamp": 1701541833
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113489-new-members/topic/Super.20basic.20linear.20algebra.20in.20Mathlib.3F/near/405554052\">said</a>:</p>\n<blockquote>\n<p>Surely that doesn't work Richard; does lean really guess F?</p>\n</blockquote>\n<p>I assumed there was a <code>variable {F : Type*}</code> somewhere, rather than the <code>F</code> in <code>Rn</code> being an autoImplicit.</p>\n<p><span class=\"user-mention\" data-user-id=\"542196\">@Arien Malec</span>, since the <code>F</code> you're implicitly passing to <code>Rn</code> has no name in <code>addRn</code>, there's no way to tell Lean that it is a field. Something like this should work:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.Field.Basic</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">autoImplicit</span> <span class=\"n\">false</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">ext</span><span class=\"kd\">]</span>\n<span class=\"kd\">structure</span> <span class=\"n\">Rn</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">term</span><span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">F</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">addRn</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Add</span> <span class=\"o\">(</span><span class=\"n\">Rn</span> <span class=\"n\">F</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">add</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"k\">fun</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">a.term</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">b.term</span> <span class=\"n\">n</span><span class=\"o\">⟩</span>\n</code></pre></div>",
        "id": 405559030,
        "sender_full_name": "Richard Copley",
        "timestamp": 1701544042
    },
    {
        "content": "<p>Was racking my brain trying to see the difference between what I did and this until I saw the explicit <code>F</code>... Thanks!</p>",
        "id": 405560598,
        "sender_full_name": "Arien Malec",
        "timestamp": 1701545561
    },
    {
        "content": "<p>Also realized you need to change <code>F</code> from being explicit to being implicit....</p>",
        "id": 405565306,
        "sender_full_name": "Arien Malec",
        "timestamp": 1701549851
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.Field.Basic</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">F</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n<span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">F</span><span class=\"o\">]</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">ext</span><span class=\"kd\">]</span>\n<span class=\"kd\">structure</span> <span class=\"n\">Fn</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">term</span><span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">F</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">F</span><span class=\"o\">}</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">addRn</span> <span class=\"o\">{</span><span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}:</span> <span class=\"n\">Add</span> <span class=\"o\">(</span><span class=\"n\">Fn</span> <span class=\"n\">F</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">add</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"k\">fun</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">a.term</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">b.term</span> <span class=\"n\">n</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">term_add_apply</span> <span class=\"o\">{</span><span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">Fn</span> <span class=\"n\">F</span> <span class=\"n\">n</span><span class=\"o\">)}</span> <span class=\"o\">{</span><span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">}:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">term</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">a.term</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">b.term</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">smulRn</span><span class=\"o\">:</span> <span class=\"n\">SMul</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"n\">Fn</span> <span class=\"n\">F</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">smul</span> <span class=\"n\">x</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"k\">fun</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">a.term</span> <span class=\"n\">n</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">term_smul_apply</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Fn</span> <span class=\"n\">F</span> <span class=\"n\">n</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">y</span><span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">}:</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">•</span> <span class=\"n\">a</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">term</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">•</span> <span class=\"o\">(</span><span class=\"n\">a.term</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">zeroRn</span><span class=\"o\">:</span> <span class=\"n\">Zero</span> <span class=\"o\">(</span><span class=\"n\">Fn</span> <span class=\"n\">F</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">zero</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">0</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">zero_term</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span><span class=\"n\">Fn</span> <span class=\"n\">F</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">term</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">addCommMonoidRn</span><span class=\"o\">:</span> <span class=\"n\">AddCommMonoid</span> <span class=\"o\">(</span><span class=\"n\">Fn</span> <span class=\"n\">F</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">add_comm</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>  <span class=\"n\">ext</span> <span class=\"bp\">;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">add_comm</span><span class=\"o\">]</span>\n  <span class=\"n\">add_assoc</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">ext</span> <span class=\"bp\">;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">add_assoc</span><span class=\"o\">]</span>\n  <span class=\"n\">zero</span> <span class=\"o\">:=</span> <span class=\"n\">zeroRn.zero</span>\n  <span class=\"n\">add_zero</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">ext</span> <span class=\"bp\">;</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">term_add_apply</span><span class=\"o\">,</span> <span class=\"n\">add_zero</span><span class=\"o\">,</span> <span class=\"n\">zero_term</span><span class=\"o\">]</span>\n  <span class=\"n\">zero_add</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">ext</span> <span class=\"bp\">;</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">term_add_apply</span><span class=\"o\">,</span> <span class=\"n\">zero_add</span><span class=\"o\">,</span> <span class=\"n\">zero_term</span><span class=\"o\">]</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">moduleRn</span><span class=\"o\">:</span> <span class=\"n\">Module</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"n\">Fn</span> <span class=\"n\">F</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">one_smul</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">ext</span><span class=\"bp\">;</span> <span class=\"n\">simp</span>\n  <span class=\"n\">zero_smul</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">ext</span><span class=\"bp\">;</span> <span class=\"n\">simp</span>\n  <span class=\"n\">smul_zero</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">ext</span><span class=\"bp\">;</span> <span class=\"n\">simp</span>\n  <span class=\"n\">smul_add</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">ext</span><span class=\"bp\">;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">mul_add</span><span class=\"o\">]</span>\n  <span class=\"n\">add_smul</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">ext</span><span class=\"bp\">;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">add_mul</span><span class=\"o\">]</span>\n  <span class=\"n\">mul_smul</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">ext</span><span class=\"bp\">;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">mul_assoc</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 405565363,
        "sender_full_name": "Arien Malec",
        "timestamp": 1701549928
    },
    {
        "content": "<p>Where again the automagic version is<br>\n<code>#synth (n: ℕ) → Module F (Fin n → F)</code></p>",
        "id": 405565468,
        "sender_full_name": "Arien Malec",
        "timestamp": 1701550023
    }
]