[
    {
        "content": "<p>I'd like to know how to tackle the following problem: I have a set S, and know that for each element of this set, there is some r such that a given property holds. I would then like to create a new set by taking the union over S:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">universe</span> <span class=\"n\">u</span> <span class=\"n\">v</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"o\">(</span><span class=\"n\">Set</span> <span class=\"n\">X</span><span class=\"o\">)}</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">hsr</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">s</span> <span class=\"bp\">∈</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"n\">r.Countable</span> <span class=\"bp\">∧</span> <span class=\"n\">Nonempty</span> <span class=\"o\">(</span><span class=\"n\">r.inter</span> <span class=\"n\">s</span><span class=\"o\">)))</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">s</span> <span class=\"bp\">∈</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"n\">Nonempty</span> <span class=\"o\">(</span><span class=\"n\">R.inter</span> <span class=\"n\">s</span><span class=\"o\">)</span>  <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>It is slightly rephrased to get a workable MWE, so I'm only interested in constructing the set R efficiently, as <br>\nR = {r | r follows from hsr applied to s}.</p>",
        "id": 408898441,
        "sender_full_name": "Josha Dekker",
        "timestamp": 1702983653
    },
    {
        "content": "<p>I'm surprised <code>p r</code> typechecks. And I'm surprised <code>r \\in s</code> typechecks.On phone so can't check...</p>",
        "id": 408899893,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1702983872
    },
    {
        "content": "<p>My bad, incorrectly simplified the MWE. Let me correct</p>",
        "id": 408900524,
        "sender_full_name": "Josha Dekker",
        "timestamp": 1702983979
    },
    {
        "content": "<p>It does, but <code>r ∈ s</code> doesn't</p>",
        "id": 408900573,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1702983985
    },
    {
        "content": "<p>Updated the original message, this typechecks now. My question is on a clean way of defining R, because this statement will not be true in general.</p>",
        "id": 408902400,
        "sender_full_name": "Josha Dekker",
        "timestamp": 1702984295
    },
    {
        "content": "<p>New version: just let R be all of X.</p>",
        "id": 408906546,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1702984998
    },
    {
        "content": "<p>Right, I didn't add the countability hypothesis to R indeed. My actual question is: How to write R = {r | r follows from hsr applied to s, s in S} in Lean?</p>",
        "id": 408909471,
        "sender_full_name": "Josha Dekker",
        "timestamp": 1702985512
    },
    {
        "content": "<p>That's the axiom of choice!</p>",
        "id": 408910152,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1702985632
    },
    {
        "content": "<p>See <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Classical.axiom_of_choice#doc\">docs#Classical.axiom_of_choice</a>. If you're within a proof, you can use the tactic <code>choose</code>, as in <code>choose R hR using hsr</code>.</p>",
        "id": 408910496,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1702985687
    },
    {
        "content": "<p>Great, thank you!</p>",
        "id": 408910652,
        "sender_full_name": "Josha Dekker",
        "timestamp": 1702985725
    }
]