[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">Knapsack</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">List</span>\n\n<span class=\"c\">/-</span><span class=\"cm\">!</span>\n<span class=\"cm\">  ## The definition of Knapsack problem</span>\n<span class=\"cm\">-/</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">Item</span> <span class=\"n\">where</span>\n  <span class=\"sd\">/-- the weight of item -/</span>\n  <span class=\"n\">weight</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span>\n  <span class=\"sd\">/-- the price of item -/</span>\n  <span class=\"n\">price</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span>\n  <span class=\"n\">deriving</span> <span class=\"n\">Repr</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">Problem</span> <span class=\"n\">where</span>\n  <span class=\"sd\">/-- the list of items -/</span>\n  <span class=\"n\">items</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Item</span>\n  <span class=\"sd\">/-- the capacity of the knapsack -/</span>\n  <span class=\"n\">capacity</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span>\n  <span class=\"n\">deriving</span> <span class=\"n\">Repr</span>\n\n<span class=\"c\">/-</span><span class=\"cm\">!</span>\n<span class=\"cm\">  ## The Basic Functions</span>\n<span class=\"cm\">-/</span>\n\n<span class=\"n\">abbrev</span> <span class=\"n\">ItemList</span> <span class=\"o\">:=</span> <span class=\"n\">List</span> <span class=\"n\">Item</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">ItemList.price</span> <span class=\"o\">(</span><span class=\"n\">items</span> <span class=\"o\">:</span> <span class=\"n\">ItemList</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">items.map</span> <span class=\"n\">Item.price</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">sum</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">ItemList.weight</span> <span class=\"o\">(</span><span class=\"n\">items</span> <span class=\"o\">:</span> <span class=\"n\">ItemList</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">items.map</span> <span class=\"n\">Item.weight</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">sum</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">ItemList.feasible</span> <span class=\"o\">(</span><span class=\"n\">items</span> <span class=\"o\">:</span> <span class=\"n\">ItemList</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">Problem</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span> <span class=\"o\">:=</span>\n  <span class=\"n\">items.weight</span> <span class=\"bp\">&lt;=</span> <span class=\"n\">P.capacity</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">ItemList.optimal</span> <span class=\"o\">(</span><span class=\"n\">items</span> <span class=\"o\">:</span> <span class=\"n\">ItemList</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">Problem</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"n\">items.feasible</span> <span class=\"n\">P</span> <span class=\"bp\">∧</span>\n  <span class=\"bp\">∀</span> <span class=\"n\">opp</span> <span class=\"o\">:</span> <span class=\"n\">ItemList</span><span class=\"o\">,</span> <span class=\"n\">opp.feasible</span> <span class=\"n\">P</span> <span class=\"bp\">→</span> <span class=\"n\">opp.price</span> <span class=\"bp\">≤</span> <span class=\"n\">items.price</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">exist_optimal</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">Problem</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">items</span> <span class=\"o\">:</span> <span class=\"n\">ItemList</span><span class=\"o\">,</span> <span class=\"n\">items.optimal</span> <span class=\"n\">P</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 400313401,
        "sender_full_name": "Asei Inoue",
        "timestamp": 1699116881
    },
    {
        "content": "<p>I am always grateful to those who answer my questions on Zulip. <span aria-label=\"pray\" class=\"emoji emoji-1f64f\" role=\"img\" title=\"pray\">:pray:</span> </p>\n<p>I have defined the Knapsack problem as described above. However, I am having trouble proving <code>an optimal solution exists</code>. How can I fill in the above <code>sorry</code>?</p>",
        "id": 400313461,
        "sender_full_name": "Asei Inoue",
        "timestamp": 1699116952
    },
    {
        "content": "<p>The existence of an optimal solution is obviously not a fact specific to the Knapsack problem. Would it be easier to define a more general 'discrete problem' and show for it...?</p>",
        "id": 400313664,
        "sender_full_name": "Asei Inoue",
        "timestamp": 1699117150
    },
    {
        "content": "<p>Isn't the theorem false? You didn't specify what <code>Item</code>s are available so I can always have an item of weight 0 with arbitrary price. Put that in an <code>ItemList</code> and you get arbitrarily high-price knapsacks.</p>",
        "id": 400314959,
        "sender_full_name": "Adomas Baliuka",
        "timestamp": 1699118336
    },
    {
        "content": "<p>In fact,</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">open</span> <span class=\"n\">ItemList</span> <span class=\"k\">in</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">not_exist_optimal</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">Problem</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">¬∃</span> <span class=\"n\">items</span> <span class=\"o\">:</span> <span class=\"n\">ItemList</span><span class=\"o\">,</span> <span class=\"n\">items.optimal</span> <span class=\"n\">P</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span>\n  <span class=\"n\">intro</span> <span class=\"n\">itl</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">optimal</span><span class=\"o\">,</span> <span class=\"n\">feasible</span><span class=\"o\">]</span>\n  <span class=\"n\">intro</span> <span class=\"n\">_incap</span>\n  <span class=\"n\">use</span> <span class=\"o\">[{</span><span class=\"n\">weight</span><span class=\"o\">:=</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">price</span><span class=\"o\">:=</span><span class=\"n\">itl.price</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">Item</span><span class=\"o\">}]</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">weight</span><span class=\"o\">,</span> <span class=\"n\">price</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 400315310,
        "sender_full_name": "Adomas Baliuka",
        "timestamp": 1699118742
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"638715\">@Adomas Baliuka</span> Thanks. I was careless ...</p>",
        "id": 400317356,
        "sender_full_name": "Asei Inoue",
        "timestamp": 1699120993
    },
    {
        "content": "<p>It seems that I have to edit the definition of <code>feasible</code>. </p>\n<p>But if I add <code>items ⊆ P.items</code> to the definition of <code>ItemList.feasible</code>, <code>fun items : ItemList ↦ items.feasible P</code> would not work.<br>\nIt is not immediately clear how to fix it.</p>",
        "id": 400317403,
        "sender_full_name": "Asei Inoue",
        "timestamp": 1699121032
    },
    {
        "content": "<p>I don't understand what \"would not work\".  What do you want this hypothetical <code>fun items</code> to do?</p>",
        "id": 400318236,
        "sender_full_name": "Adomas Baliuka",
        "timestamp": 1699122018
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"638715\">@Adomas Baliuka</span> <br>\nOh sorry... My whole code is here: </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">Knapsack</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">List</span>\n\n<span class=\"c\">/-</span><span class=\"cm\">!</span>\n<span class=\"cm\">  ## The definition of Knapsack problem</span>\n<span class=\"cm\">-/</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">Item</span> <span class=\"n\">where</span>\n  <span class=\"sd\">/-- the weight of item -/</span>\n  <span class=\"n\">weight</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span>\n  <span class=\"sd\">/-- the price of item -/</span>\n  <span class=\"n\">price</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span>\n  <span class=\"n\">deriving</span> <span class=\"n\">Repr</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">Problem</span> <span class=\"n\">where</span>\n  <span class=\"sd\">/-- the list of items -/</span>\n  <span class=\"n\">items</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Item</span>\n  <span class=\"sd\">/-- the capacity of the knapsack -/</span>\n  <span class=\"n\">capacity</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span>\n  <span class=\"n\">deriving</span> <span class=\"n\">Repr</span>\n\n<span class=\"c\">/-</span><span class=\"cm\">!</span>\n<span class=\"cm\">  ## The Basic Functions</span>\n<span class=\"cm\">-/</span>\n\n<span class=\"n\">abbrev</span> <span class=\"n\">ItemList</span> <span class=\"o\">:=</span> <span class=\"n\">List</span> <span class=\"n\">Item</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">ItemList.price</span> <span class=\"o\">(</span><span class=\"n\">items</span> <span class=\"o\">:</span> <span class=\"n\">ItemList</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">items.map</span> <span class=\"n\">Item.price</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">sum</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">ItemList.weight</span> <span class=\"o\">(</span><span class=\"n\">items</span> <span class=\"o\">:</span> <span class=\"n\">ItemList</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">items.map</span> <span class=\"n\">Item.weight</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">sum</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">ItemList.feasible</span> <span class=\"o\">(</span><span class=\"n\">items</span> <span class=\"o\">:</span> <span class=\"n\">ItemList</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">Problem</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"n\">items</span> <span class=\"bp\">⊆</span> <span class=\"n\">P.items</span> <span class=\"bp\">∧</span> <span class=\"n\">items.weight</span> <span class=\"bp\">&lt;=</span> <span class=\"n\">P.capacity</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">ItemList.optimal</span> <span class=\"o\">(</span><span class=\"n\">items</span> <span class=\"o\">:</span> <span class=\"n\">ItemList</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">Problem</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"n\">items.feasible</span> <span class=\"n\">P</span> <span class=\"bp\">∧</span>\n  <span class=\"bp\">∀</span> <span class=\"n\">opp</span> <span class=\"o\">:</span> <span class=\"n\">ItemList</span><span class=\"o\">,</span> <span class=\"n\">opp.feasible</span> <span class=\"n\">P</span> <span class=\"bp\">→</span> <span class=\"n\">opp.price</span> <span class=\"bp\">≤</span> <span class=\"n\">items.price</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">exist_optimal</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">Problem</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">items</span> <span class=\"o\">:</span> <span class=\"n\">ItemList</span><span class=\"o\">,</span> <span class=\"n\">items.optimal</span> <span class=\"n\">P</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n\n<span class=\"c\">/-</span><span class=\"cm\">!</span>\n<span class=\"cm\">  ## Examples for Test</span>\n<span class=\"cm\">  --------------------</span>\n<span class=\"cm\">-/</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">problem1</span> <span class=\"o\">:</span> <span class=\"n\">Problem</span> <span class=\"o\">:=</span> <span class=\"o\">{</span>\n    <span class=\"n\">items</span> <span class=\"o\">:=</span> <span class=\"o\">[</span><span class=\"n\">Item.mk</span> <span class=\"mi\">1</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"n\">Item.mk</span> <span class=\"mi\">2</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">Item.mk</span> <span class=\"mi\">3</span> <span class=\"mi\">4</span><span class=\"o\">]</span>\n    <span class=\"n\">capacity</span> <span class=\"o\">:=</span> <span class=\"mi\">5</span>\n  <span class=\"o\">}</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">problem1.items</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">sol1</span> <span class=\"o\">:</span> <span class=\"n\">ItemList</span> <span class=\"o\">:=</span> <span class=\"o\">[</span><span class=\"n\">Item.mk</span> <span class=\"mi\">1</span> <span class=\"mi\">2</span><span class=\"o\">]</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">sol1.price</span>\n\n<span class=\"c\">/-</span><span class=\"cm\">!</span>\n<span class=\"cm\">  ## Algorithm to Solve Knapsack Problem</span>\n<span class=\"cm\">  --------------------------------------</span>\n<span class=\"cm\">-/</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">LinearOrder</span> <span class=\"n\">β</span><span class=\"o\">]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">brute</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">Problem</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ItemList</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"n\">sublists</span> <span class=\"o\">:=</span> <span class=\"n\">P.items.sublists</span>\n  <span class=\"k\">let</span> <span class=\"n\">feasible_solutions</span> <span class=\"o\">:=</span> <span class=\"n\">sublists.filter</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">items</span> <span class=\"o\">:</span> <span class=\"n\">ItemList</span> <span class=\"bp\">↦</span> <span class=\"n\">items.feasible</span> <span class=\"n\">P</span><span class=\"o\">)</span>   <span class=\"c1\">-- error</span>\n  <span class=\"k\">let</span> <span class=\"n\">max_list</span> <span class=\"o\">:=</span> <span class=\"n\">argmax</span> <span class=\"n\">ItemList.price</span> <span class=\"n\">feasible_solutions</span>\n  <span class=\"k\">match</span> <span class=\"n\">max_list</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">none</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">[]</span>\n  <span class=\"bp\">|</span> <span class=\"n\">some</span> <span class=\"n\">opt</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">opt</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">brute</span> <span class=\"n\">problem1</span>\n</code></pre></div>",
        "id": 400318327,
        "sender_full_name": "Asei Inoue",
        "timestamp": 1699122142
    },
    {
        "content": "<blockquote>\n<p>What do you want this hypothetical fun items to do?</p>\n</blockquote>\n<p>I want to use <code>feasible</code> to filter items, but the function must return a Bool type instead of a Prop type.</p>",
        "id": 400318533,
        "sender_full_name": "Asei Inoue",
        "timestamp": 1699122412
    },
    {
        "content": "<p>However, if <code>items ⊆ P.items</code> is included in the definition, it will be of type Prop.</p>",
        "id": 400318567,
        "sender_full_name": "Asei Inoue",
        "timestamp": 1699122466
    },
    {
        "content": "<p>You cannot compute with <code>Prop</code> anyway.  Use <code>Bool</code> instead. I would separate the conditions \"within capacity\" (<code>Bool</code> so you can use it inside <code>brute</code>) and \"optimal\" still has to be <code>Prop</code> because you use a quantifier.</p>",
        "id": 400318823,
        "sender_full_name": "Adomas Baliuka",
        "timestamp": 1699122702
    },
    {
        "content": "<p>Certainly you can compute with Prop. You just need to provide a <code>Decidable</code> instance.</p>",
        "id": 400319583,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1699123552
    },
    {
        "content": "<p>I wrote a <code>Decidable</code> instance, seems to work:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">Knapsack</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">List</span>\n\n<span class=\"c\">/-</span><span class=\"cm\">!</span>\n<span class=\"cm\">  ## The definition of Knapsack problem</span>\n<span class=\"cm\">-/</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">Item</span> <span class=\"n\">where</span>\n  <span class=\"sd\">/-- the weight of item -/</span>\n  <span class=\"n\">weight</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span>\n  <span class=\"sd\">/-- the price of item -/</span>\n  <span class=\"n\">price</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span>\n  <span class=\"n\">deriving</span> <span class=\"n\">Repr</span><span class=\"o\">,</span> <span class=\"n\">DecidableEq</span> <span class=\"c1\">-- added this to make instance work !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">Problem</span> <span class=\"n\">where</span>\n  <span class=\"sd\">/-- the list of items -/</span>\n  <span class=\"n\">items</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Item</span>\n  <span class=\"sd\">/-- the capacity of the knapsack -/</span>\n  <span class=\"n\">capacity</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span>\n  <span class=\"n\">deriving</span> <span class=\"n\">Repr</span><span class=\"o\">,</span> <span class=\"n\">DecidableEq</span> <span class=\"c1\">-- added this too (probably won't ever get used) !!!!!!!!!!!!!!!!</span>\n\n\n\n<span class=\"c\">/-</span><span class=\"cm\">!</span>\n<span class=\"cm\">  ## The Basic Functions</span>\n<span class=\"cm\">-/</span>\n\n<span class=\"n\">abbrev</span> <span class=\"n\">ItemList</span> <span class=\"o\">:=</span> <span class=\"n\">List</span> <span class=\"n\">Item</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">ItemList.price</span> <span class=\"o\">(</span><span class=\"n\">items</span> <span class=\"o\">:</span> <span class=\"n\">ItemList</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">items.map</span> <span class=\"n\">Item.price</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">sum</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">ItemList.weight</span> <span class=\"o\">(</span><span class=\"n\">items</span> <span class=\"o\">:</span> <span class=\"n\">ItemList</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">items.map</span> <span class=\"n\">Item.weight</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">sum</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">ItemList.feasible</span> <span class=\"o\">(</span><span class=\"n\">items</span> <span class=\"o\">:</span> <span class=\"n\">ItemList</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">Problem</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"n\">items</span> <span class=\"bp\">⊆</span> <span class=\"n\">P.items</span> <span class=\"bp\">∧</span> <span class=\"n\">items.weight</span> <span class=\"bp\">&lt;=</span> <span class=\"n\">P.capacity</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">ItemList</span> <span class=\"k\">in</span>\n<span class=\"kd\">instance</span> <span class=\"n\">instDecidableFeasible</span> <span class=\"o\">(</span><span class=\"n\">items</span> <span class=\"o\">:</span> <span class=\"n\">ItemList</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">Problem</span><span class=\"o\">)</span>\n  <span class=\"o\">:</span> <span class=\"n\">Decidable</span> <span class=\"o\">(</span><span class=\"n\">ItemList.feasible</span> <span class=\"n\">items</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">feasible</span><span class=\"o\">,</span> <span class=\"n\">weight</span><span class=\"o\">]</span>\n    <span class=\"n\">infer_instance</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">ItemList.optimal</span> <span class=\"o\">(</span><span class=\"n\">items</span> <span class=\"o\">:</span> <span class=\"n\">ItemList</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">Problem</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"n\">items.feasible</span> <span class=\"n\">P</span> <span class=\"bp\">∧</span>\n  <span class=\"bp\">∀</span> <span class=\"n\">opp</span> <span class=\"o\">:</span> <span class=\"n\">ItemList</span><span class=\"o\">,</span> <span class=\"n\">opp.feasible</span> <span class=\"n\">P</span> <span class=\"bp\">→</span> <span class=\"n\">opp.price</span> <span class=\"bp\">≤</span> <span class=\"n\">items.price</span>\n\n\n<span class=\"kn\">open</span> <span class=\"n\">ItemList</span> <span class=\"k\">in</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">exist_optimal</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">Problem</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">nonem</span> <span class=\"o\">:</span> <span class=\"n\">P.items</span> <span class=\"bp\">≠</span> <span class=\"o\">[])</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">items</span> <span class=\"o\">:</span> <span class=\"n\">ItemList</span><span class=\"o\">,</span> <span class=\"n\">items.optimal</span> <span class=\"n\">P</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"c1\">-- something like this might help, although I also haven't proved it yet...</span>\n<span class=\"k\">#check</span> <span class=\"n\">Finset.exists_maximal</span>\n\n<span class=\"c\">/-</span><span class=\"cm\">!</span>\n<span class=\"cm\">  ## Examples for Test</span>\n<span class=\"cm\">  --------------------</span>\n<span class=\"cm\">-/</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">problem1</span> <span class=\"o\">:</span> <span class=\"n\">Problem</span> <span class=\"o\">:=</span> <span class=\"o\">{</span>\n    <span class=\"n\">items</span> <span class=\"o\">:=</span> <span class=\"o\">[⟨</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">⟩,</span> <span class=\"o\">⟨</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">⟩,</span> <span class=\"o\">⟨</span><span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"mi\">4</span><span class=\"o\">⟩]</span>\n    <span class=\"n\">capacity</span> <span class=\"o\">:=</span> <span class=\"mi\">5</span>\n  <span class=\"o\">}</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">problem1.items</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">sol1</span> <span class=\"o\">:</span> <span class=\"n\">ItemList</span> <span class=\"o\">:=</span> <span class=\"o\">[⟨</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">⟩]</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">sol1.price</span>\n\n<span class=\"c\">/-</span><span class=\"cm\">!</span>\n<span class=\"cm\">  ## Algorithm to Solve Knapsack Problem</span>\n<span class=\"cm\">  --------------------------------------</span>\n<span class=\"cm\">-/</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">LinearOrder</span> <span class=\"n\">β</span><span class=\"o\">]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">brute</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">Problem</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ItemList</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"n\">sublists</span> <span class=\"o\">:=</span> <span class=\"n\">P.items.sublists</span>\n  <span class=\"k\">let</span> <span class=\"n\">feasible_solutions</span> <span class=\"o\">:=</span> <span class=\"n\">sublists.filter</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">items</span> <span class=\"o\">:</span> <span class=\"n\">ItemList</span> <span class=\"bp\">↦</span> <span class=\"n\">decide</span> <span class=\"o\">(</span><span class=\"n\">items.feasible</span> <span class=\"n\">P</span><span class=\"o\">))</span>\n  <span class=\"k\">let</span> <span class=\"n\">max_list</span> <span class=\"o\">:=</span> <span class=\"n\">argmax</span> <span class=\"n\">ItemList.price</span> <span class=\"n\">feasible_solutions</span>\n  <span class=\"k\">match</span> <span class=\"n\">max_list</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">none</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">[]</span>\n  <span class=\"bp\">|</span> <span class=\"n\">some</span> <span class=\"n\">opt</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">opt</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">brute</span> <span class=\"n\">problem1</span>\n</code></pre></div>",
        "id": 400327186,
        "sender_full_name": "Adomas Baliuka",
        "timestamp": 1699132114
    },
    {
        "content": "<p>Not sure if it's appropriate here, but do you mind posting the final proof when you are done? <br>\nI'm interested to see the final version of this problem</p>",
        "id": 400348796,
        "sender_full_name": "Z. Wu",
        "timestamp": 1699151760
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"638715\">@Adomas Baliuka</span> <span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span> Thank you very much. I'm glad to know how to use `Decidable.</p>",
        "id": 400350731,
        "sender_full_name": "Asei Inoue",
        "timestamp": 1699152543
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"649880\">@Z. Wu</span> Thanks for your interest. I'll share the code here when it's completed.</p>",
        "id": 400351277,
        "sender_full_name": "Asei Inoue",
        "timestamp": 1699152755
    },
    {
        "content": "<h3>There is an optimal solution even if the item set is empty</h3>\n<p><span class=\"user-mention\" data-user-id=\"638715\">@Adomas Baliuka</span> Why did you add hypothesis <code>(nonem : P.items ≠ [])</code> ? If <code>P.items = []</code>, then <code>[]</code> is an optimal solution.</p>",
        "id": 400362333,
        "sender_full_name": "Asei Inoue",
        "timestamp": 1699162066
    },
    {
        "content": "<p>I can prove <code>optimal_of_empty</code> as followings.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">Knapsack</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">List</span>\n\n<span class=\"c\">/-</span><span class=\"cm\">!</span>\n<span class=\"cm\">  ## The definition of Knapsack problem</span>\n<span class=\"cm\">-/</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">Item</span> <span class=\"n\">where</span>\n  <span class=\"sd\">/-- the weight of item -/</span>\n  <span class=\"n\">weight</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span>\n  <span class=\"sd\">/-- the price of item -/</span>\n  <span class=\"n\">price</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span>\n  <span class=\"n\">deriving</span> <span class=\"n\">Repr</span><span class=\"o\">,</span> <span class=\"n\">DecidableEq</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">Problem</span> <span class=\"n\">where</span>\n  <span class=\"sd\">/-- the list of items -/</span>\n  <span class=\"n\">items</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Item</span>\n  <span class=\"sd\">/-- the capacity of the knapsack -/</span>\n  <span class=\"n\">capacity</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span>\n  <span class=\"n\">deriving</span> <span class=\"n\">Repr</span><span class=\"o\">,</span> <span class=\"n\">DecidableEq</span>\n\n<span class=\"c\">/-</span><span class=\"cm\">!</span>\n<span class=\"cm\">  ## The Basic Functions</span>\n<span class=\"cm\">-/</span>\n\n<span class=\"n\">abbrev</span> <span class=\"n\">ItemList</span> <span class=\"o\">:=</span> <span class=\"n\">List</span> <span class=\"n\">Item</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">ItemList.price</span> <span class=\"o\">(</span><span class=\"n\">items</span> <span class=\"o\">:</span> <span class=\"n\">ItemList</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">items.map</span> <span class=\"n\">Item.price</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">sum</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">ItemList.weight</span> <span class=\"o\">(</span><span class=\"n\">items</span> <span class=\"o\">:</span> <span class=\"n\">ItemList</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">items.map</span> <span class=\"n\">Item.weight</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">sum</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">ItemList.feasible</span> <span class=\"o\">(</span><span class=\"n\">items</span> <span class=\"o\">:</span> <span class=\"n\">ItemList</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">Problem</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"n\">items</span> <span class=\"bp\">⊆</span> <span class=\"n\">P.items</span> <span class=\"bp\">∧</span> <span class=\"n\">items.weight</span> <span class=\"bp\">&lt;=</span> <span class=\"n\">P.capacity</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">ItemList</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">instDecidableFeasible</span> <span class=\"o\">(</span><span class=\"n\">items</span> <span class=\"o\">:</span> <span class=\"n\">ItemList</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">Problem</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">Decidable</span> <span class=\"o\">(</span><span class=\"n\">ItemList.feasible</span> <span class=\"n\">items</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">feasible</span><span class=\"o\">,</span> <span class=\"n\">weight</span><span class=\"o\">]</span>\n  <span class=\"n\">infer_instance</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">ItemList.optimal</span> <span class=\"o\">(</span><span class=\"n\">items</span> <span class=\"o\">:</span> <span class=\"n\">ItemList</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">Problem</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"n\">items.feasible</span> <span class=\"n\">P</span> <span class=\"bp\">∧</span>\n  <span class=\"bp\">∀</span> <span class=\"n\">opp</span> <span class=\"o\">:</span> <span class=\"n\">ItemList</span><span class=\"o\">,</span> <span class=\"n\">opp.feasible</span> <span class=\"n\">P</span> <span class=\"bp\">→</span> <span class=\"n\">opp.price</span> <span class=\"bp\">≤</span> <span class=\"n\">items.price</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">optimal_of_empty</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">Problem</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">emp</span> <span class=\"o\">:</span> <span class=\"n\">P.items</span> <span class=\"bp\">=</span> <span class=\"o\">[])</span> <span class=\"o\">:</span> <span class=\"n\">optimal</span> <span class=\"o\">[]</span> <span class=\"n\">P</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">optimal</span><span class=\"o\">,</span> <span class=\"n\">feasible</span><span class=\"o\">,</span> <span class=\"n\">weight</span><span class=\"o\">,</span> <span class=\"n\">emp</span><span class=\"o\">]</span>\n  <span class=\"n\">intro</span> <span class=\"n\">opp</span> <span class=\"n\">hopp</span>\n  <span class=\"n\">replace</span> <span class=\"n\">hopp</span> <span class=\"o\">:</span> <span class=\"n\">opp</span> <span class=\"bp\">=</span> <span class=\"o\">[]</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">exact</span><span class=\"bp\">?</span> <span class=\"n\">says</span>\n      <span class=\"n\">exact</span> <span class=\"n\">subset_nil.mp</span> <span class=\"n\">hopp</span>\n  <span class=\"n\">simp</span><span class=\"bp\">?</span> <span class=\"o\">[</span><span class=\"n\">hopp</span><span class=\"o\">]</span> <span class=\"n\">says</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span>\n      <span class=\"n\">hopp</span><span class=\"o\">,</span>\n      <span class=\"n\">map_nil</span><span class=\"o\">,</span>\n      <span class=\"n\">sum_nil</span><span class=\"o\">,</span>\n      <span class=\"n\">zero_le</span><span class=\"o\">,</span>\n      <span class=\"n\">le_refl</span><span class=\"o\">,</span>\n      <span class=\"n\">forall_true_left</span>\n    <span class=\"o\">]</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">exist_optimal</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">Problem</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">items</span> <span class=\"o\">:</span> <span class=\"n\">ItemList</span><span class=\"o\">,</span> <span class=\"n\">items.optimal</span> <span class=\"n\">P</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">let</span> <span class=\"n\">sublists</span> <span class=\"o\">:=</span> <span class=\"n\">P.items.sublists</span>\n  <span class=\"k\">let</span> <span class=\"n\">feasible_solutions</span> <span class=\"o\">:=</span> <span class=\"n\">sublists.filter</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">items</span> <span class=\"o\">:</span> <span class=\"n\">ItemList</span> <span class=\"bp\">↦</span> <span class=\"n\">decide</span> <span class=\"o\">(</span><span class=\"n\">items.feasible</span> <span class=\"n\">P</span><span class=\"o\">))</span>\n\n  <span class=\"gr\">sorry</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"> Finset.exists_maximal.{u_4} {α : Type u_4} [inst✝ : Preorder α] (s : Finset α) (h : Finset.Nonempty s) :</span>\n<span class=\"cm\">  ∃ m ∈ s, ∀ x ∈ s, ¬m &lt; x -/</span>\n<span class=\"k\">#check</span> <span class=\"n\">Finset.exists_maximal</span>\n\n<span class=\"c\">/-</span><span class=\"cm\">!</span>\n<span class=\"cm\">  ## Examples for Test</span>\n<span class=\"cm\">  --------------------</span>\n<span class=\"cm\">-/</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">problem1</span> <span class=\"o\">:</span> <span class=\"n\">Problem</span> <span class=\"o\">:=</span> <span class=\"o\">{</span>\n    <span class=\"n\">items</span> <span class=\"o\">:=</span> <span class=\"o\">[⟨</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">⟩,</span> <span class=\"o\">⟨</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">⟩,</span> <span class=\"o\">⟨</span><span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"mi\">4</span><span class=\"o\">⟩]</span>\n    <span class=\"n\">capacity</span> <span class=\"o\">:=</span> <span class=\"mi\">5</span>\n  <span class=\"o\">}</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">problem1.items</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">sol1</span> <span class=\"o\">:</span> <span class=\"n\">ItemList</span> <span class=\"o\">:=</span> <span class=\"o\">[⟨</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">⟩]</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">sol1.price</span>\n\n<span class=\"c\">/-</span><span class=\"cm\">!</span>\n<span class=\"cm\">  ## Algorithm to Solve Knapsack Problem</span>\n<span class=\"cm\">  --------------------------------------</span>\n<span class=\"cm\">-/</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">LinearOrder</span> <span class=\"n\">β</span><span class=\"o\">]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">brute</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">Problem</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ItemList</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"n\">sublists</span> <span class=\"o\">:=</span> <span class=\"n\">P.items.sublists</span>\n  <span class=\"k\">let</span> <span class=\"n\">feasible_solutions</span> <span class=\"o\">:=</span> <span class=\"n\">sublists.filter</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">items</span> <span class=\"o\">:</span> <span class=\"n\">ItemList</span> <span class=\"bp\">↦</span> <span class=\"n\">decide</span> <span class=\"o\">(</span><span class=\"n\">items.feasible</span> <span class=\"n\">P</span><span class=\"o\">))</span>\n  <span class=\"k\">let</span> <span class=\"n\">max_list</span> <span class=\"o\">:=</span> <span class=\"n\">argmax</span> <span class=\"n\">ItemList.price</span> <span class=\"n\">feasible_solutions</span>\n  <span class=\"k\">match</span> <span class=\"n\">max_list</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">none</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">[]</span>\n  <span class=\"bp\">|</span> <span class=\"n\">some</span> <span class=\"n\">opt</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">opt</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">brute</span> <span class=\"n\">problem1</span>\n</code></pre></div>",
        "id": 400363978,
        "sender_full_name": "Asei Inoue",
        "timestamp": 1699163703
    },
    {
        "content": "<h3>finite set has an element that gives the maximum value of the function</h3>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- something like this might help, although I also haven't proved it yet...</span>\n<span class=\"k\">#check</span> <span class=\"n\">Finset.exists_maximal</span>\n</code></pre></div>\n<p>Thank you very much! I am sure your comments will be useful. But I want a proposition that shows that there exists an element in a finite set that maximises the value of a given function.</p>",
        "id": 400365403,
        "sender_full_name": "Asei Inoue",
        "timestamp": 1699164958
    },
    {
        "content": "<p>Unfortunately I don't find such a theorem. </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n\n<span class=\"bp\">#</span><span class=\"n\">find</span> <span class=\"n\">Finset</span> <span class=\"bp\">?</span><span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"bp\">?</span><span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"bp\">?</span><span class=\"n\">a</span>\n</code></pre></div>\n<p>I would like to ask if there is a similar theorem in mathlib.</p>",
        "id": 400365469,
        "sender_full_name": "Asei Inoue",
        "timestamp": 1699165011
    },
    {
        "content": "<p>(Finset.image f s).max' (hs.image _), where s is your finset and hs is your proof that it's not empty. This is the direct construction of the max. Then, Finset.max'_mem is the proof that that max is a member of the image. Use Finset.mem_image to rewrite that proof into the existential of the element in the original finset such that it maps to the max.</p>",
        "id": 400367036,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1699166615
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 400367046,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1699166631
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"308899\">@Yakov Pechersky</span> Thanks! I will try it.</p>",
        "id": 400368850,
        "sender_full_name": "Asei Inoue",
        "timestamp": 1699168330
    },
    {
        "content": "<p>How can I create a <code>Finset</code> term  from a list of lists?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">Knapsack</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">List</span>\n\n<span class=\"c\">/-</span><span class=\"cm\">!</span>\n<span class=\"cm\">  ## The definition of Knapsack problem</span>\n<span class=\"cm\">-/</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">Item</span> <span class=\"n\">where</span>\n  <span class=\"sd\">/-- the weight of item -/</span>\n  <span class=\"n\">weight</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span>\n  <span class=\"sd\">/-- the price of item -/</span>\n  <span class=\"n\">price</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span>\n  <span class=\"n\">deriving</span> <span class=\"n\">Repr</span><span class=\"o\">,</span> <span class=\"n\">DecidableEq</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">Problem</span> <span class=\"n\">where</span>\n  <span class=\"sd\">/-- the list of items -/</span>\n  <span class=\"n\">items</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Item</span>\n  <span class=\"sd\">/-- the capacity of the knapsack -/</span>\n  <span class=\"n\">capacity</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span>\n  <span class=\"n\">deriving</span> <span class=\"n\">Repr</span><span class=\"o\">,</span> <span class=\"n\">DecidableEq</span>\n\n<span class=\"c\">/-</span><span class=\"cm\">!</span>\n<span class=\"cm\">  ## The Basic Functions</span>\n<span class=\"cm\">-/</span>\n\n<span class=\"n\">abbrev</span> <span class=\"n\">ItemList</span> <span class=\"o\">:=</span> <span class=\"n\">List</span> <span class=\"n\">Item</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">ItemList.price</span> <span class=\"o\">(</span><span class=\"n\">items</span> <span class=\"o\">:</span> <span class=\"n\">ItemList</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">items.map</span> <span class=\"n\">Item.price</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">sum</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">ItemList.weight</span> <span class=\"o\">(</span><span class=\"n\">items</span> <span class=\"o\">:</span> <span class=\"n\">ItemList</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">items.map</span> <span class=\"n\">Item.weight</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">sum</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">ItemList.feasible</span> <span class=\"o\">(</span><span class=\"n\">items</span> <span class=\"o\">:</span> <span class=\"n\">ItemList</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">Problem</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"n\">items</span> <span class=\"bp\">⊆</span> <span class=\"n\">P.items</span> <span class=\"bp\">∧</span> <span class=\"n\">items.weight</span> <span class=\"bp\">&lt;=</span> <span class=\"n\">P.capacity</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">ItemList</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">instDecidableFeasible</span> <span class=\"o\">(</span><span class=\"n\">items</span> <span class=\"o\">:</span> <span class=\"n\">ItemList</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">Problem</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">Decidable</span> <span class=\"o\">(</span><span class=\"n\">ItemList.feasible</span> <span class=\"n\">items</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">feasible</span><span class=\"o\">,</span> <span class=\"n\">weight</span><span class=\"o\">]</span>\n  <span class=\"n\">infer_instance</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">ItemList.optimal</span> <span class=\"o\">(</span><span class=\"n\">items</span> <span class=\"o\">:</span> <span class=\"n\">ItemList</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">Problem</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"n\">items.feasible</span> <span class=\"n\">P</span> <span class=\"bp\">∧</span>\n  <span class=\"bp\">∀</span> <span class=\"n\">opp</span> <span class=\"o\">:</span> <span class=\"n\">ItemList</span><span class=\"o\">,</span> <span class=\"n\">opp.feasible</span> <span class=\"n\">P</span> <span class=\"bp\">→</span> <span class=\"n\">opp.price</span> <span class=\"bp\">≤</span> <span class=\"n\">items.price</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">optimal_of_empty</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">Problem</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">emp</span> <span class=\"o\">:</span> <span class=\"n\">P.items</span> <span class=\"bp\">=</span> <span class=\"o\">[])</span> <span class=\"o\">:</span> <span class=\"n\">optimal</span> <span class=\"o\">[]</span> <span class=\"n\">P</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">optimal</span><span class=\"o\">,</span> <span class=\"n\">feasible</span><span class=\"o\">,</span> <span class=\"n\">weight</span><span class=\"o\">,</span> <span class=\"n\">emp</span><span class=\"o\">]</span>\n  <span class=\"n\">intro</span> <span class=\"n\">opp</span> <span class=\"n\">hopp</span>\n  <span class=\"n\">replace</span> <span class=\"n\">hopp</span> <span class=\"o\">:</span> <span class=\"n\">opp</span> <span class=\"bp\">=</span> <span class=\"o\">[]</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">exact</span> <span class=\"n\">subset_nil.mp</span> <span class=\"n\">hopp</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">hopp</span><span class=\"o\">]</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">exist_optimal</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">Problem</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">items</span> <span class=\"o\">:</span> <span class=\"n\">ItemList</span><span class=\"o\">,</span> <span class=\"n\">items.optimal</span> <span class=\"n\">P</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">let</span> <span class=\"n\">sublists</span> <span class=\"o\">:=</span> <span class=\"n\">P.items.sublists</span>\n  <span class=\"k\">let</span> <span class=\"n\">feasible_solutions</span> <span class=\"o\">:=</span> <span class=\"n\">sublists.filter</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">items</span> <span class=\"o\">:</span> <span class=\"n\">ItemList</span> <span class=\"bp\">↦</span> <span class=\"n\">decide</span> <span class=\"o\">(</span><span class=\"n\">items.feasible</span> <span class=\"n\">P</span><span class=\"o\">))</span>\n  <span class=\"k\">let</span> <span class=\"n\">solutions</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"o\">(</span><span class=\"n\">P.items</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span> <span class=\"c1\">-- error!!!!!</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 400370012,
        "sender_full_name": "Asei Inoue",
        "timestamp": 1699169502
    },
    {
        "content": "<p>oh I have found a <code>List.toFinset</code> (<a href=\"https://loogle.lean-lang.org/?q=List+%3Fa+-%3E+Finset+%3Fa\">https://loogle.lean-lang.org/?q=List+%3Fa+-%3E+Finset+%3Fa</a>)</p>",
        "id": 400370248,
        "sender_full_name": "Asei Inoue",
        "timestamp": 1699169665
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"308899\">@Yakov Pechersky</span> Thanks for the advice. But I think it could be shown using the <code>argmax</code> of the List directly, without going through <code>Finset</code>.</p>",
        "id": 400372625,
        "sender_full_name": "Asei Inoue",
        "timestamp": 1699171888
    },
    {
        "content": "<p>my attempt: </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">Knapsack</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">List</span>\n\n<span class=\"c\">/-</span><span class=\"cm\">!</span>\n<span class=\"cm\">  ## The definition of Knapsack problem</span>\n<span class=\"cm\">-/</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">Item</span> <span class=\"n\">where</span>\n  <span class=\"sd\">/-- the weight of item -/</span>\n  <span class=\"n\">weight</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span>\n  <span class=\"sd\">/-- the price of item -/</span>\n  <span class=\"n\">price</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span>\n  <span class=\"n\">deriving</span> <span class=\"n\">Repr</span><span class=\"o\">,</span> <span class=\"n\">DecidableEq</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">Problem</span> <span class=\"n\">where</span>\n  <span class=\"sd\">/-- the list of items -/</span>\n  <span class=\"n\">items</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Item</span>\n  <span class=\"sd\">/-- the capacity of the knapsack -/</span>\n  <span class=\"n\">capacity</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span>\n  <span class=\"n\">deriving</span> <span class=\"n\">Repr</span><span class=\"o\">,</span> <span class=\"n\">DecidableEq</span>\n\n<span class=\"c\">/-</span><span class=\"cm\">!</span>\n<span class=\"cm\">  ## The Basic Functions</span>\n<span class=\"cm\">-/</span>\n\n<span class=\"n\">abbrev</span> <span class=\"n\">ItemList</span> <span class=\"o\">:=</span> <span class=\"n\">List</span> <span class=\"n\">Item</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">ItemList.price</span> <span class=\"o\">(</span><span class=\"n\">items</span> <span class=\"o\">:</span> <span class=\"n\">ItemList</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">items.map</span> <span class=\"n\">Item.price</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">sum</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">ItemList.weight</span> <span class=\"o\">(</span><span class=\"n\">items</span> <span class=\"o\">:</span> <span class=\"n\">ItemList</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">items.map</span> <span class=\"n\">Item.weight</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">sum</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">ItemList.feasible</span> <span class=\"o\">(</span><span class=\"n\">items</span> <span class=\"o\">:</span> <span class=\"n\">ItemList</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">Problem</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"n\">items</span> <span class=\"bp\">⊆</span> <span class=\"n\">P.items</span> <span class=\"bp\">∧</span> <span class=\"n\">items.weight</span> <span class=\"bp\">&lt;=</span> <span class=\"n\">P.capacity</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">ItemList</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">instDecidableFeasible</span> <span class=\"o\">(</span><span class=\"n\">items</span> <span class=\"o\">:</span> <span class=\"n\">ItemList</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">Problem</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">Decidable</span> <span class=\"o\">(</span><span class=\"n\">ItemList.feasible</span> <span class=\"n\">items</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">feasible</span><span class=\"o\">,</span> <span class=\"n\">weight</span><span class=\"o\">]</span>\n  <span class=\"n\">infer_instance</span>\n\n<span class=\"c\">/-</span><span class=\"cm\">!</span>\n<span class=\"cm\">  ### Optimality of a feasible solution</span>\n<span class=\"cm\">-/</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">ItemList.optimal</span> <span class=\"o\">(</span><span class=\"n\">items</span> <span class=\"o\">:</span> <span class=\"n\">ItemList</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">Problem</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"n\">items.feasible</span> <span class=\"n\">P</span> <span class=\"bp\">∧</span>\n  <span class=\"bp\">∀</span> <span class=\"n\">opp</span> <span class=\"o\">:</span> <span class=\"n\">ItemList</span><span class=\"o\">,</span> <span class=\"n\">opp.feasible</span> <span class=\"n\">P</span> <span class=\"bp\">→</span> <span class=\"n\">opp.price</span> <span class=\"bp\">≤</span> <span class=\"n\">items.price</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">optimal_of_empty</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">Problem</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">emp</span> <span class=\"o\">:</span> <span class=\"n\">P.items</span> <span class=\"bp\">=</span> <span class=\"o\">[])</span> <span class=\"o\">:</span> <span class=\"n\">optimal</span> <span class=\"o\">[]</span> <span class=\"n\">P</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">optimal</span><span class=\"o\">,</span> <span class=\"n\">feasible</span><span class=\"o\">,</span> <span class=\"n\">weight</span><span class=\"o\">,</span> <span class=\"n\">emp</span><span class=\"o\">]</span>\n  <span class=\"n\">intro</span> <span class=\"n\">opp</span> <span class=\"n\">hopp</span>\n  <span class=\"n\">replace</span> <span class=\"n\">hopp</span> <span class=\"o\">:</span> <span class=\"n\">opp</span> <span class=\"bp\">=</span> <span class=\"o\">[]</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">exact</span> <span class=\"n\">subset_nil.mp</span> <span class=\"n\">hopp</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">hopp</span><span class=\"o\">]</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">argmax</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">argmax</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">↦</span> <span class=\"bp\">-</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">5</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">]</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">exist_optimal</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">Problem</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">items</span> <span class=\"o\">:</span> <span class=\"n\">ItemList</span><span class=\"o\">,</span> <span class=\"n\">items.optimal</span> <span class=\"n\">P</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">let</span> <span class=\"n\">sublists</span> <span class=\"o\">:=</span> <span class=\"n\">P.items.sublists</span>\n  <span class=\"k\">let</span> <span class=\"n\">feasible_solution_list</span> <span class=\"o\">:=</span> <span class=\"n\">sublists.filter</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">items</span> <span class=\"o\">:</span> <span class=\"n\">ItemList</span> <span class=\"bp\">↦</span> <span class=\"n\">decide</span> <span class=\"o\">(</span><span class=\"n\">items.feasible</span> <span class=\"n\">P</span><span class=\"o\">))</span>\n\n  <span class=\"k\">have</span> <span class=\"n\">nonemp</span> <span class=\"o\">:</span> <span class=\"n\">feasible_solution_list</span> <span class=\"bp\">≠</span> <span class=\"o\">[]</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">feasible_solution_list</span><span class=\"o\">]</span>\n    <span class=\"n\">intro</span> <span class=\"n\">h</span>\n    <span class=\"n\">guard_hyp</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">filter</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">items</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">decide</span> <span class=\"o\">(</span><span class=\"n\">feasible</span> <span class=\"n\">items</span> <span class=\"n\">P</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">List.sublists</span> <span class=\"n\">P.items</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">[]</span>\n    <span class=\"c1\">-- how to get `[] : ItemList is not feasible solution of P` from `h`...?</span>\n    <span class=\"gr\">sorry</span>\n\n  <span class=\"k\">let</span> <span class=\"n\">optimal_solution</span> <span class=\"o\">:=</span> <span class=\"n\">argmax</span> <span class=\"n\">ItemList.price</span> <span class=\"n\">feasible_solution_list</span>\n  <span class=\"k\">match</span> <span class=\"n\">optimal_solution</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">none</span> <span class=\"bp\">=&gt;</span> <span class=\"gr\">sorry</span>\n  <span class=\"bp\">|</span> <span class=\"n\">some</span> <span class=\"n\">opt</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">exists</span> <span class=\"n\">opt</span>\n    <span class=\"n\">unfold</span> <span class=\"n\">optimal</span>\n    <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"bp\">?</span><span class=\"n\">feas</span><span class=\"o\">,</span> <span class=\"bp\">?</span><span class=\"n\">opt</span><span class=\"o\">⟩</span>\n\n    <span class=\"n\">case</span> <span class=\"n\">feas</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"gr\">sorry</span>\n\n    <span class=\"n\">case</span> <span class=\"n\">opt</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 400372671,
        "sender_full_name": "Asei Inoue",
        "timestamp": 1699171924
    },
    {
        "content": "<p>You asked about a Finset function, so I gave you a finset function.</p>",
        "id": 400372715,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1699171967
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"308899\">@Yakov Pechersky</span> Oh you're right. I didn't check enough ... Sorry ...</p>",
        "id": 400372814,
        "sender_full_name": "Asei Inoue",
        "timestamp": 1699172046
    },
    {
        "content": "<p>The same strategy of <code>max'</code>, <code>max'_mem</code>, and <code>mem_image</code> should work for the equivalent statements for lists.</p>",
        "id": 400372833,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1699172070
    },
    {
        "content": "<p>Suggestion: prove that <code>Itemlist.feasible [] P</code> for any <code>P</code>. Then you know for sure that <code>feasible_solution_list \\ne []</code> since <code>[]</code> is in any <code>sublists</code>.</p>",
        "id": 400373268,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1699172514
    },
    {
        "content": "<p>And use <code>refine</code> with <code>argmax</code>, thus leaving you with solely the <code>\\forall opp ...</code> goal. That goal should be dealt with using <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=List.le_of_mem_argmin#doc\">docs#List.le_of_mem_argmin</a>. Since you have that <code>opp \\subset P.items</code>, so <code>opp \\mem P.items.sublists</code> so <code>opp.price \\le (argmax ...).price</code>.</p>",
        "id": 400373529,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1699172794
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"626349\">Asei Inoue</span> <a href=\"#narrow/stream/113489-new-members/topic/Optimal.20solutions.20exist.20for.20discrete.20problems/near/400365403\">said</a>:</p>\n<blockquote>\n<p>But I want a proposition that shows that there exists an element in a finite set that maximises the value of a given function.</p>\n</blockquote>\n<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Finset.exists_max_image#doc\">docs#Finset.exists_max_image</a></p>",
        "id": 400376500,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1699175699
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">exist_optimal</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">Problem</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">items</span> <span class=\"o\">:</span> <span class=\"n\">ItemList</span><span class=\"o\">,</span> <span class=\"n\">items.optimal</span> <span class=\"n\">P</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">let</span> <span class=\"n\">sublists</span> <span class=\"o\">:=</span> <span class=\"n\">P.items.sublists</span>\n  <span class=\"k\">let</span> <span class=\"n\">feasible_solution_list</span> <span class=\"o\">:=</span> <span class=\"n\">sublists.filter</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">items</span> <span class=\"o\">:</span> <span class=\"n\">ItemList</span> <span class=\"bp\">↦</span> <span class=\"n\">decide</span> <span class=\"o\">(</span><span class=\"n\">items.feasible</span> <span class=\"n\">P</span><span class=\"o\">))</span>\n\n  <span class=\"k\">have</span> <span class=\"n\">nonemp</span> <span class=\"o\">:</span> <span class=\"n\">feasible_solution_list</span> <span class=\"bp\">≠</span> <span class=\"o\">[]</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">feasible_solution_list</span><span class=\"o\">]</span>\n    <span class=\"n\">intro</span> <span class=\"n\">h</span>\n    <span class=\"n\">set</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">items</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">decide</span> <span class=\"o\">(</span><span class=\"n\">feasible</span> <span class=\"n\">items</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"k\">with</span> <span class=\"n\">fh</span>\n    <span class=\"k\">have</span> <span class=\"n\">femp</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"o\">[]</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">f</span><span class=\"o\">]</span>\n    <span class=\"k\">have</span> <span class=\"n\">emp_sub</span> <span class=\"o\">:</span> <span class=\"o\">[]</span> <span class=\"bp\">∈</span> <span class=\"n\">P.items.sublists</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n      <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">sublists</span><span class=\"o\">]</span>\n    <span class=\"k\">have</span> <span class=\"n\">emp_mem</span> <span class=\"o\">:</span> <span class=\"o\">[]</span> <span class=\"bp\">∈</span> <span class=\"n\">filter</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">List.sublists</span> <span class=\"n\">P.items</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">exact</span> <span class=\"n\">mem_filter_of_mem</span> <span class=\"n\">emp_sub</span> <span class=\"n\">femp</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">emp_mem</span>\n    <span class=\"n\">contradiction</span>\n\n  <span class=\"k\">let</span> <span class=\"n\">feasible_solution_finset</span> <span class=\"o\">:=</span> <span class=\"n\">feasible_solution_list.toFinset</span>\n  <span class=\"k\">let</span> <span class=\"n\">optimal_solution</span> <span class=\"o\">:=</span> <span class=\"n\">argmax</span> <span class=\"n\">ItemList.price</span> <span class=\"n\">feasible_solution_list</span>\n  <span class=\"k\">match</span> <span class=\"n\">optimal_solution</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">none</span> <span class=\"bp\">=&gt;</span> <span class=\"gr\">sorry</span>\n  <span class=\"bp\">|</span> <span class=\"n\">some</span> <span class=\"n\">opt</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">exists</span> <span class=\"n\">opt</span>\n    <span class=\"n\">unfold</span> <span class=\"n\">optimal</span>\n    <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"bp\">?</span><span class=\"n\">feas</span><span class=\"o\">,</span> <span class=\"bp\">?</span><span class=\"n\">opt</span><span class=\"o\">⟩</span>\n\n    <span class=\"n\">case</span> <span class=\"n\">feas</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"gr\">sorry</span>\n\n    <span class=\"n\">case</span> <span class=\"n\">opt</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 400394832,
        "sender_full_name": "Asei Inoue",
        "timestamp": 1699190922
    },
    {
        "content": "<p>I am  finally able to show nonemp . Thanks.</p>",
        "id": 400394841,
        "sender_full_name": "Asei Inoue",
        "timestamp": 1699190940
    },
    {
        "content": "<p>I tried doing this proof yesterday and got stuck on the fact that <code>sublists</code> does not give you \"every feasible subset\" due to order. So using <code>Finset.exists_max_image</code> requires you to prove that \"for any feasible <em>subset</em> of available items, there is a <em>sublist</em> inside <code>feasible_solution_list</code> that has the same price (i.e., a reordering that is inside <code>feasible_solution_list</code>)\". Of course, this can be proved but it might take some work that I had not anticipated.</p>\n<p>Alternatively, one might use some function instead of <code>sublists</code> which gives you a list of \"all permutations of sublists\". I didn't find such a function in the library. If you want to prove eventually that <code>brute</code> gives an optimal solution, this approach might not be the way to go.</p>",
        "id": 400409044,
        "sender_full_name": "Adomas Baliuka",
        "timestamp": 1699204022
    },
    {
        "content": "<p>Here's what I did, just in case it helps you... I think I won't have time to play with this for a while</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">ItemList.emptyFeasible</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">Problem</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ItemList.feasible</span> <span class=\"o\">[]</span> <span class=\"n\">P</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">ItemList.feasible</span><span class=\"o\">,</span> <span class=\"n\">weight</span><span class=\"o\">]</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">mem_toFinset_pred</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n    <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">l.toFinset</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">simp_all</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">mem_toFinset</span><span class=\"o\">]</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">Finset.exists_max_image</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">List.exists_max_image</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">LinearOrder</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n    <span class=\"o\">{</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">l</span> <span class=\"bp\">≠</span> <span class=\"o\">[])</span>\n  <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">x'</span> <span class=\"bp\">∈</span> <span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x'</span> <span class=\"bp\">≤</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">apply</span> <span class=\"o\">(</span><span class=\"n\">mem_toFinset_pred</span> <span class=\"n\">l</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">m</span> <span class=\"bp\">↦</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">f</span> <span class=\"n\">m</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">mpr</span>\n    <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">mem_toFinset</span><span class=\"o\">]</span>\n    <span class=\"n\">apply</span> <span class=\"n\">Finset.exists_max_image</span>\n    <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">toFinset_nonempty_iff</span> <span class=\"n\">l</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mpr</span> <span class=\"n\">h</span>\n\n<span class=\"c1\">-- solution ∈ filter (fun items =&gt; decide (feasible items P)) (sublists P.items)</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">prop_of_filter_prop</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">DecidablePred</span> <span class=\"n\">P</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span>\n    <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">filter</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">a'</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">decide</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"n\">a'</span><span class=\"o\">))</span> <span class=\"n\">l</span><span class=\"o\">)</span>\n    <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">List.filter_subset</span> <span class=\"o\">(</span><span class=\"n\">p</span><span class=\"o\">:=(</span><span class=\"k\">fun</span> <span class=\"n\">a'</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">decide</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"n\">a'</span><span class=\"o\">)))</span> <span class=\"n\">l</span>\n    <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">List.mem_filter.mp</span> <span class=\"n\">h</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">2</span>\n    <span class=\"n\">simp_all</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">decide_eq_true_eq</span><span class=\"o\">]</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">ItemList</span> <span class=\"k\">in</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">exist_optimal</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">Problem</span><span class=\"o\">)</span>\n    <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">items</span> <span class=\"o\">:</span> <span class=\"n\">ItemList</span><span class=\"o\">,</span> <span class=\"n\">items.optimal</span> <span class=\"n\">P</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">let</span> <span class=\"n\">feasibles</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">P.items</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">sublists.filter</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">items</span> <span class=\"o\">:</span> <span class=\"n\">ItemList</span> <span class=\"bp\">↦</span> <span class=\"n\">decide</span> <span class=\"o\">(</span><span class=\"n\">items.feasible</span> <span class=\"n\">P</span><span class=\"o\">))</span>\n  <span class=\"k\">have</span> <span class=\"n\">sublnonempty</span> <span class=\"o\">:</span> <span class=\"n\">feasibles</span> <span class=\"bp\">≠</span> <span class=\"o\">[]</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">feasibles</span><span class=\"o\">]</span>\n    <span class=\"k\">have</span> <span class=\"n\">nil_mem_sublists</span> <span class=\"o\">:</span> <span class=\"o\">[]</span> <span class=\"bp\">∈</span> <span class=\"n\">P.items.sublists</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">mem_sublists</span><span class=\"o\">,</span> <span class=\"n\">nil_sublist</span><span class=\"o\">]</span>\n    <span class=\"n\">by_contra</span> <span class=\"n\">h</span>\n    <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">List.filter_eq_nil.mp</span> <span class=\"n\">h</span> <span class=\"o\">[]</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">)</span>\n    <span class=\"k\">have</span> <span class=\"n\">emptyFeas</span> <span class=\"o\">:=</span> <span class=\"n\">emptyFeasible</span> <span class=\"n\">P</span>\n    <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">this</span>\n    <span class=\"n\">contradiction</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">solution</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">isfeasible</span><span class=\"o\">,</span> <span class=\"n\">ismax</span><span class=\"o\">⟩⟩</span> <span class=\"o\">:=</span> <span class=\"n\">List.exists_max_image</span> <span class=\"n\">price</span> <span class=\"n\">sublnonempty</span>\n  <span class=\"n\">use</span> <span class=\"n\">solution</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">optimal</span><span class=\"o\">]</span>\n  <span class=\"n\">constructor</span>\n  <span class=\"bp\">·</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">feasibles</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">isfeasible</span>\n    <span class=\"n\">apply</span> <span class=\"n\">prop_of_filter_prop</span> <span class=\"n\">isfeasible</span>\n  <span class=\"bp\">·</span> <span class=\"n\">rintro</span> <span class=\"n\">opp</span> <span class=\"o\">⟨</span><span class=\"n\">opp_within</span><span class=\"o\">,</span> <span class=\"n\">opp_capac</span><span class=\"o\">⟩</span>\n    <span class=\"gr\">sorry</span> <span class=\"c1\">-- remains to prove that any feasible *subset* of P.items</span>\n    <span class=\"c1\">-- is a reordering of some *sublist* inside `feasibles`, and that</span>\n    <span class=\"c1\">-- `ItemList.price` is permutation-invariant.</span>\n</code></pre></div>",
        "id": 400409381,
        "sender_full_name": "Adomas Baliuka",
        "timestamp": 1699204351
    },
    {
        "content": "<p>(Also, of course, I was dumb and didn't use <code>List.argmax</code>, so I had to prove a version of <code>List.le_of_mem_argmax</code>, which you probably shouldn't copy...)</p>",
        "id": 400410564,
        "sender_full_name": "Adomas Baliuka",
        "timestamp": 1699205713
    },
    {
        "content": "<p>My argmax idea was wrong. Because what <code>feasible</code> is doesn't limit the number of times an Item can be duplicated. For example, I can have a problem of <code>{ items := [(1, 1)], capacity: 100 }</code>. Then the optimal items are that item x 100. That's never going to be in sublists.</p>",
        "id": 400414661,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1699209720
    },
    {
        "content": "<p>This is my way of building out the API:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">Knapsack</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">List</span>\n\n<span class=\"c\">/-</span><span class=\"cm\">!</span>\n<span class=\"cm\">  ## The definition of Knapsack problem</span>\n<span class=\"cm\">-/</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">Item</span> <span class=\"n\">where</span>\n  <span class=\"sd\">/-- the weight of item -/</span>\n  <span class=\"n\">weight</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span>\n  <span class=\"sd\">/-- the price of item -/</span>\n  <span class=\"n\">price</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span>\n  <span class=\"n\">deriving</span> <span class=\"n\">Repr</span><span class=\"o\">,</span> <span class=\"n\">DecidableEq</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">Problem</span> <span class=\"n\">where</span>\n  <span class=\"sd\">/-- the list of items -/</span>\n  <span class=\"n\">items</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Item</span>\n  <span class=\"sd\">/-- the capacity of the knapsack -/</span>\n  <span class=\"n\">capacity</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span>\n  <span class=\"n\">deriving</span> <span class=\"n\">Repr</span><span class=\"o\">,</span> <span class=\"n\">DecidableEq</span>\n\n<span class=\"c\">/-</span><span class=\"cm\">!</span>\n<span class=\"cm\">  ## The Basic Functions</span>\n<span class=\"cm\">-/</span>\n\n<span class=\"n\">abbrev</span> <span class=\"n\">ItemList</span> <span class=\"o\">:=</span> <span class=\"n\">List</span> <span class=\"n\">Item</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">ItemList.price</span> <span class=\"o\">(</span><span class=\"n\">items</span> <span class=\"o\">:</span> <span class=\"n\">ItemList</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">items.map</span> <span class=\"n\">Item.price</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">sum</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">ItemList.weight</span> <span class=\"o\">(</span><span class=\"n\">items</span> <span class=\"o\">:</span> <span class=\"n\">ItemList</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">items.map</span> <span class=\"n\">Item.weight</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">sum</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">ItemList.feasible</span> <span class=\"o\">(</span><span class=\"n\">items</span> <span class=\"o\">:</span> <span class=\"n\">ItemList</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">Problem</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"n\">items</span> <span class=\"bp\">⊆</span> <span class=\"n\">P.items</span> <span class=\"bp\">∧</span> <span class=\"n\">items.weight</span> <span class=\"bp\">&lt;=</span> <span class=\"n\">P.capacity</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">ItemList.feasible_iff</span> <span class=\"o\">{</span><span class=\"n\">items</span><span class=\"o\">:</span> <span class=\"n\">ItemList</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">Problem</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n    <span class=\"n\">items.feasible</span> <span class=\"n\">P</span> <span class=\"bp\">↔</span> <span class=\"n\">items</span> <span class=\"bp\">⊆</span> <span class=\"n\">P.items</span> <span class=\"bp\">∧</span> <span class=\"n\">items.weight</span> <span class=\"bp\">&lt;=</span> <span class=\"n\">P.capacity</span> <span class=\"o\">:=</span> <span class=\"n\">Iff.rfl</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">ItemList.feasible_nil</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">Problem</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ItemList.feasible</span> <span class=\"o\">[]</span> <span class=\"n\">P</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨</span><span class=\"n\">nil_subset</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">Nat.zero_le</span> <span class=\"n\">_</span><span class=\"o\">⟩</span>\n\n<span class=\"n\">abbrev</span> <span class=\"n\">Problem.empty</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">Problem</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"n\">P.items</span> <span class=\"bp\">=</span> <span class=\"o\">[]</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">ItemList.feasible_empty_iff</span> <span class=\"o\">{</span><span class=\"n\">items</span><span class=\"o\">:</span> <span class=\"n\">ItemList</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">Problem</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">P.empty</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">items.feasible</span> <span class=\"n\">P</span> <span class=\"bp\">↔</span> <span class=\"n\">items</span> <span class=\"bp\">=</span> <span class=\"o\">[]</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span> <span class=\"o\">(</span><span class=\"n\">config</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">contextual</span> <span class=\"o\">:=</span> <span class=\"n\">true</span> <span class=\"o\">})</span> <span class=\"o\">[</span><span class=\"n\">feasible_iff</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">List.subset_nil</span><span class=\"o\">,</span> <span class=\"n\">weight</span><span class=\"o\">]</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">ItemList.perm_price_eq</span> <span class=\"o\">{</span><span class=\"n\">items</span> <span class=\"n\">items'</span> <span class=\"o\">:</span> <span class=\"n\">ItemList</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">items</span> <span class=\"bp\">~</span> <span class=\"n\">items'</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">items.price</span> <span class=\"bp\">=</span> <span class=\"n\">items'.price</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">price</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">h.symm.map</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">sum_eq</span><span class=\"o\">]</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">ItemList.perm_weight_eq</span> <span class=\"o\">{</span><span class=\"n\">items</span> <span class=\"n\">items'</span> <span class=\"o\">:</span> <span class=\"n\">ItemList</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">items</span> <span class=\"bp\">~</span> <span class=\"n\">items'</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">items.weight</span> <span class=\"bp\">=</span> <span class=\"n\">items'.weight</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">weight</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">h.symm.map</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">sum_eq</span><span class=\"o\">]</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">ItemList.feasible.perm</span> <span class=\"o\">{</span><span class=\"n\">items</span> <span class=\"n\">items'</span> <span class=\"o\">:</span> <span class=\"n\">ItemList</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">Problem</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">items.feasible</span> <span class=\"n\">P</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">items</span> <span class=\"bp\">~</span> <span class=\"n\">items'</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">items'.feasible</span> <span class=\"n\">P</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨</span><span class=\"n\">hp.symm.subset.trans</span> <span class=\"n\">h.left</span><span class=\"o\">,</span> <span class=\"n\">h.right.trans'</span> <span class=\"o\">(</span><span class=\"n\">perm_weight_eq</span> <span class=\"n\">hp</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">ge</span><span class=\"o\">⟩</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">ItemList</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">instDecidableFeasible</span> <span class=\"o\">(</span><span class=\"n\">items</span> <span class=\"o\">:</span> <span class=\"n\">ItemList</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">Problem</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">Decidable</span> <span class=\"o\">(</span><span class=\"n\">ItemList.feasible</span> <span class=\"n\">items</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">decidable_of_iff'</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">ItemList.feasible_iff</span><span class=\"o\">)</span>\n\n<span class=\"c\">/-</span><span class=\"cm\">!</span>\n<span class=\"cm\">  ### Optimality of a feasible solution</span>\n<span class=\"cm\">-/</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">ItemList.optimal</span> <span class=\"o\">(</span><span class=\"n\">items</span> <span class=\"o\">:</span> <span class=\"n\">ItemList</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">Problem</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"n\">items.feasible</span> <span class=\"n\">P</span> <span class=\"bp\">∧</span>\n  <span class=\"bp\">∀</span> <span class=\"n\">opp</span> <span class=\"o\">:</span> <span class=\"n\">ItemList</span><span class=\"o\">,</span> <span class=\"n\">opp.feasible</span> <span class=\"n\">P</span> <span class=\"bp\">→</span> <span class=\"n\">opp.price</span> <span class=\"bp\">≤</span> <span class=\"n\">items.price</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">ItemList.optimal_iff</span> <span class=\"o\">{</span><span class=\"n\">items</span> <span class=\"o\">:</span> <span class=\"n\">ItemList</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">Problem</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n    <span class=\"n\">items.optimal</span> <span class=\"n\">P</span> <span class=\"bp\">↔</span>\n      <span class=\"n\">items.feasible</span> <span class=\"n\">P</span> <span class=\"bp\">∧</span> <span class=\"bp\">∀</span> <span class=\"n\">opp</span> <span class=\"o\">:</span> <span class=\"n\">ItemList</span><span class=\"o\">,</span> <span class=\"n\">opp.feasible</span> <span class=\"n\">P</span> <span class=\"bp\">→</span> <span class=\"n\">opp.price</span> <span class=\"bp\">≤</span> <span class=\"n\">items.price</span> <span class=\"o\">:=</span> <span class=\"n\">Iff.rfl</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">optimal_of_empty</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">Problem</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">emp</span> <span class=\"o\">:</span> <span class=\"n\">P.empty</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">optimal</span> <span class=\"o\">[]</span> <span class=\"n\">P</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">optimal_iff</span><span class=\"o\">,</span> <span class=\"n\">feasible_empty_iff</span> <span class=\"n\">emp</span><span class=\"o\">]</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">ItemList.optimal.perm</span> <span class=\"o\">{</span><span class=\"n\">items</span> <span class=\"n\">items'</span> <span class=\"o\">:</span> <span class=\"n\">ItemList</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">Problem</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">items.optimal</span> <span class=\"n\">P</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">items</span> <span class=\"bp\">~</span> <span class=\"n\">items'</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">items'.optimal</span> <span class=\"n\">P</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">optimal_iff</span><span class=\"o\">,</span> <span class=\"n\">items.perm_price_eq</span> <span class=\"n\">hp</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"bp\">*</span>\n  <span class=\"n\">exact</span> <span class=\"n\">h.imp</span> <span class=\"o\">(</span><span class=\"n\">ItemList.feasible.perm</span> <span class=\"bp\">·</span> <span class=\"n\">hp</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">)</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">_root_.List.sublists_ne_nil</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">l.sublists</span> <span class=\"bp\">≠</span> <span class=\"o\">[]</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">induction</span> <span class=\"n\">l</span>\n  <span class=\"n\">case</span> <span class=\"n\">nil</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">simp</span>\n  <span class=\"n\">case</span> <span class=\"n\">cons</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">sublists_cons</span><span class=\"o\">]</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">bind_eq_bind</span><span class=\"o\">,</span> <span class=\"n\">ne_eq</span><span class=\"o\">,</span> <span class=\"n\">bind_eq_nil</span><span class=\"o\">,</span> <span class=\"n\">mem_sublists</span><span class=\"o\">,</span> <span class=\"n\">not_forall</span><span class=\"o\">,</span> <span class=\"n\">exists_prop</span><span class=\"o\">,</span> <span class=\"n\">and_true</span><span class=\"o\">]</span>\n  <span class=\"n\">exact</span> <span class=\"o\">⟨[],</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">_root_.List.argmax_isSome_of_ne_nil</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Preorder</span> <span class=\"n\">β</span><span class=\"o\">]</span>\n    <span class=\"o\">[</span><span class=\"n\">DecidableRel</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">↦</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"n\">y</span><span class=\"o\">)]</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hl</span> <span class=\"o\">:</span> <span class=\"n\">l</span> <span class=\"bp\">≠</span> <span class=\"o\">[])</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"n\">l.argmax</span> <span class=\"n\">f</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">isSome</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">Option.ne_none_iff_isSome</span><span class=\"o\">,</span> <span class=\"n\">hl</span><span class=\"o\">]</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">_root_.List.argmin_isSome_of_ne_nil</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Preorder</span> <span class=\"n\">β</span><span class=\"o\">]</span>\n    <span class=\"o\">[</span><span class=\"n\">DecidableRel</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">↦</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"n\">y</span><span class=\"o\">)]</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hl</span> <span class=\"o\">:</span> <span class=\"n\">l</span> <span class=\"bp\">≠</span> <span class=\"o\">[])</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"n\">l.argmin</span> <span class=\"n\">f</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">isSome</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">Option.ne_none_iff_isSome</span><span class=\"o\">,</span> <span class=\"n\">hl</span><span class=\"o\">]</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">ItemList.feasible.exists_perm_mem_sublists</span> <span class=\"o\">{</span><span class=\"n\">items</span> <span class=\"o\">:</span> <span class=\"n\">ItemList</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">Problem</span><span class=\"o\">}</span>\n    <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">items.feasible</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"n\">items</span> <span class=\"bp\">~</span> <span class=\"n\">l</span> <span class=\"bp\">∧</span> <span class=\"n\">l</span> <span class=\"bp\">∈</span> <span class=\"n\">P.items.sublists</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">feasible_iff</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n  <span class=\"n\">contrapose</span><span class=\"bp\">!</span> <span class=\"n\">h</span>\n  <span class=\"n\">intro</span> <span class=\"n\">H</span>\n  <span class=\"gr\">sorry</span> <span class=\"c1\">-- fails here</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">exist_optimal</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">Problem</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">items</span> <span class=\"o\">:</span> <span class=\"n\">ItemList</span><span class=\"o\">,</span> <span class=\"n\">items.optimal</span> <span class=\"n\">P</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"n\">ha</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">P.items.sublists.filter</span> <span class=\"o\">(</span><span class=\"n\">ItemList.feasible</span> <span class=\"bp\">·</span> <span class=\"n\">P</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">argmax_isSome_of_ne_nil</span>\n    <span class=\"n\">ItemList.price</span> <span class=\"bp\">$</span> <span class=\"n\">List.ne_nil_of_mem</span>\n    <span class=\"o\">(</span><span class=\"n\">List.mem_filter_of_mem</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">decide_eq_true</span> <span class=\"o\">(</span><span class=\"n\">ItemList.feasible_nil</span> <span class=\"n\">_</span><span class=\"o\">)))</span>\n  <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"n\">Option.get</span> <span class=\"n\">_</span> <span class=\"n\">ha</span><span class=\"o\">,</span> <span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">⟩</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">l'</span><span class=\"o\">,</span> <span class=\"n\">hl</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">Option.isSome_iff_exists.mp</span> <span class=\"n\">ha</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">ha''</span><span class=\"o\">,</span> <span class=\"n\">hl'</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">Option.eq_some_iff_get_eq.mp</span> <span class=\"n\">hl</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">List.argmax_eq_some_iff</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hl</span>\n  <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">hl'</span><span class=\"o\">]</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">optimal_iff</span><span class=\"o\">]</span>\n  <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">⟩</span>\n  <span class=\"bp\">·</span> <span class=\"n\">simpa</span> <span class=\"n\">using</span> <span class=\"n\">List.of_mem_filter</span> <span class=\"n\">hl.left</span>\n  <span class=\"n\">intros</span> <span class=\"n\">opp</span> <span class=\"n\">hf</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">opp'</span><span class=\"o\">,</span> <span class=\"n\">hp</span><span class=\"o\">,</span> <span class=\"n\">hmem</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">hf.exists_perm_mem_sublists</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">opp.perm_price_eq</span> <span class=\"n\">hp</span><span class=\"o\">]</span>\n  <span class=\"n\">apply</span> <span class=\"n\">hl.right.left</span>\n  <span class=\"n\">exact</span> <span class=\"n\">List.mem_filter_of_mem</span> <span class=\"n\">hmem</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">simpa</span> <span class=\"n\">using</span> <span class=\"n\">hf.perm</span> <span class=\"n\">hp</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 400414927,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1699209867
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"308899\">Yakov Pechersky</span> <a href=\"#narrow/stream/113489-new-members/topic/Optimal.20solutions.20exist.20for.20discrete.20problems/near/400414661\">said</a>:</p>\n<blockquote>\n<p>My argmax idea was wrong. Because what <code>feasible</code> is doesn't limit the number of times an Item can be duplicated. For example, I can have a problem of <code>{ items := [(1, 1)], capacity: 100 }</code>. Then the optimal items are that item x 100. That's never going to be in sublists.</p>\n</blockquote>\n<p>I think that means the definition of <code>feasible</code> should be changed? Doesn't sound like the normal Knapsack problem. (Edit: never mind, it's called \"unbounded knapsack problem)</p>",
        "id": 400415646,
        "sender_full_name": "Adomas Baliuka",
        "timestamp": 1699210507
    },
    {
        "content": "<p>For the unbounded one, one brute force witness would be the argmax of sublists of Problem.items repeated capacity times (because we are over N). Of course, that's too loose, one could do <code>capacity / min weight over P.items</code> but the proof will probably be easier if you do with a plain repeated capacity times.</p>",
        "id": 400417248,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1699211832
    },
    {
        "content": "<p>But even that doesn't work here, because there is nothing constraining an Item to have greater than 0 weight.</p>",
        "id": 400417257,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1699211853
    },
    {
        "content": "<p>If I had such an item, then feasible items are unbounded.</p>",
        "id": 400417273,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1699211873
    },
    {
        "content": "<p>Maybe we should check first if this is really the problem <span class=\"user-mention\" data-user-id=\"626349\">@Asei Inoue</span> wants to work on. Did you mean to define an \"unbounded knapsack\"? The <code>brute</code> algorithm you wrote would suggest otherwise.</p>",
        "id": 400422568,
        "sender_full_name": "Adomas Baliuka",
        "timestamp": 1699218277
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"638715\">@Adomas Baliuka</span> </p>\n<blockquote>\n<p>Did you mean to define an \"unbounded knapsack\"?</p>\n</blockquote>\n<p>No. I thought I had defined the knapsack problem of non-reusable items.</p>",
        "id": 400558449,
        "sender_full_name": "Asei Inoue",
        "timestamp": 1699285216
    },
    {
        "content": "<p>My <code>brute</code> algorithm was designed with this assumption in mind, as you said</p>",
        "id": 400558822,
        "sender_full_name": "Asei Inoue",
        "timestamp": 1699285327
    },
    {
        "content": "<p>Then List.subset isn't the correct way to express the constraint. I think it would be fine if you used Multiset everywhere in place of List.</p>",
        "id": 400565919,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1699287170
    },
    {
        "content": "<p>It certainly doesn't seem like a good idea to have items as a list...</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n\n<span class=\"bp\">#</span><span class=\"n\">guard</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">]</span> <span class=\"bp\">⊆</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 400940292,
        "sender_full_name": "Asei Inoue",
        "timestamp": 1699448813
    },
    {
        "content": "<p>Is this better...?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">Knapsack</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">List</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">Item</span> <span class=\"n\">where</span>\n  <span class=\"sd\">/-- the weight of item -/</span>\n  <span class=\"n\">weight</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span>\n  <span class=\"sd\">/-- the price of item -/</span>\n  <span class=\"n\">price</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span>\n  <span class=\"n\">deriving</span> <span class=\"n\">Repr</span><span class=\"o\">,</span> <span class=\"n\">DecidableEq</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">Problem</span> <span class=\"n\">where</span>\n  <span class=\"sd\">/-- the group of items -/</span>\n  <span class=\"n\">items</span> <span class=\"o\">:</span> <span class=\"n\">Multiset</span> <span class=\"n\">Item</span>\n  <span class=\"sd\">/-- the capacity of the knapsack -/</span>\n  <span class=\"n\">capacity</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span>\n  <span class=\"n\">deriving</span> <span class=\"n\">DecidableEq</span>\n</code></pre></div>",
        "id": 400940734,
        "sender_full_name": "Asei Inoue",
        "timestamp": 1699448954
    },
    {
        "content": "<p>You also likely want to make items weigh a positive amount</p>",
        "id": 400952698,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1699452851
    },
    {
        "content": "<p>I guess the ways for doing that would be to either change the type of <code>weight</code>of include another field for the hypothesis. Which would you choose here <span class=\"user-mention\" data-user-id=\"308899\">@Yakov Pechersky</span>? I think in some cases such choices can turn out to make quite a difference for how easy it is to deal with later...</p>",
        "id": 401044590,
        "sender_full_name": "Adomas Baliuka",
        "timestamp": 1699488945
    },
    {
        "content": "<p>You can do make weight a pnat, you can add a property to Item, you can make a restriction in <code>feasible</code> to restrict items to ones with positive weight.</p>",
        "id": 401044838,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1699489089
    },
    {
        "content": "<p>Thanks to all who have helped me so far.<br>\nI won't have time for this problem for a while ...<br>\nIf anyone is interested in this problem, please feel free to work on it.</p>",
        "id": 401564073,
        "sender_full_name": "Asei Inoue",
        "timestamp": 1699756044
    }
]