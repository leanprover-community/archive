[
    {
        "content": "<p>I was trying to update some of the documentation about calculational proofs for Lean 4, but I couldn't get the Trans examples</p>\n<p>I get this error  on the <code>  trans := divides_trans</code> when trying to follow the example  in the Lean 4 version of theorem proving in Lean,</p>\n<p>How do I get it to not have the ∀ in the type?</p>\n<p>type mismatch<br>\n  divides_trans<br>\nhas type<br>\n  ∀ (x y z : ℕ), divides x y → divides y z → divides x z : Prop<br>\nbut is expected to have type<br>\n  divides a✝ b✝ → divides b✝ c✝ → divides a✝ c✝ : Prop<br>\nthe following variables have been introduced by the implicit lambda feature<br>\n  a✝ : ℕ<br>\n  b✝ : ℕ<br>\n  c✝ : ℕ<br>\nyou can disable implicit lambdas using <code>@</code> or writing a lambda expression with <code>{}</code> or <code>[]</code> binder annotations.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n<span class=\"kd\">def</span> <span class=\"n\">divides</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">∃</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">k</span><span class=\"bp\">*</span><span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">divides_trans</span> <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">divides</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"n\">divides</span> <span class=\"n\">y</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">divides</span> <span class=\"n\">x</span> <span class=\"n\">z</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"o\">⟨</span><span class=\"n\">k₁</span><span class=\"o\">,</span> <span class=\"n\">d₁</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">h₁</span>\n  <span class=\"k\">let</span> <span class=\"o\">⟨</span><span class=\"n\">k₂</span><span class=\"o\">,</span> <span class=\"n\">d₂</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">h₂</span>\n  <span class=\"o\">⟨</span><span class=\"n\">k₁</span> <span class=\"bp\">*</span> <span class=\"n\">k₂</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Nat.mul_comm</span> <span class=\"n\">k₁</span> <span class=\"n\">k₂</span><span class=\"o\">,</span> <span class=\"n\">Nat.mul_assoc</span><span class=\"o\">,</span> <span class=\"n\">d₁</span><span class=\"o\">,</span> <span class=\"n\">d₂</span><span class=\"o\">]⟩</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">divides_mul</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">divides</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">k</span><span class=\"bp\">*</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨</span><span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Trans</span> <span class=\"n\">divides</span> <span class=\"n\">divides</span> <span class=\"n\">divides</span> <span class=\"n\">where</span>\n  <span class=\"n\">trans</span> <span class=\"o\">:=</span> <span class=\"n\">divides_trans</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">divides</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">divides</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"k\">calc</span>\n    <span class=\"n\">divides</span> <span class=\"n\">x</span> <span class=\"n\">y</span>     <span class=\"o\">:=</span> <span class=\"n\">h₁</span>\n    <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"n\">z</span>           <span class=\"o\">:=</span> <span class=\"n\">h₂</span>\n    <span class=\"n\">divides</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">divides_mul</span> <span class=\"bp\">..</span>\n\n<span class=\"kd\">infix</span><span class=\"o\">:</span><span class=\"mi\">50</span> <span class=\"s2\">\" ∣ \"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">divides</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">divides</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">divides</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"k\">calc</span>\n    <span class=\"n\">x</span> <span class=\"bp\">∣</span> <span class=\"n\">y</span>   <span class=\"o\">:=</span> <span class=\"n\">h₁</span>\n    <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"n\">z</span>   <span class=\"o\">:=</span> <span class=\"n\">h₂</span>\n    <span class=\"n\">_</span> <span class=\"bp\">∣</span> <span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">z</span> <span class=\"o\">:=</span> <span class=\"n\">divides_mul</span> <span class=\"bp\">..</span>\n</code></pre></div>",
        "id": 398552314,
        "sender_full_name": "Leo Shine",
        "timestamp": 1698263874
    },
    {
        "content": "<p>You can either do</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Trans</span> <span class=\"n\">divides</span> <span class=\"n\">divides</span> <span class=\"n\">divides</span> <span class=\"n\">where</span>\n  <span class=\"n\">trans</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">divides_trans</span>\n</code></pre></div>\n<p>or</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Trans</span> <span class=\"n\">divides</span> <span class=\"n\">divides</span> <span class=\"n\">divides</span> <span class=\"n\">where</span>\n  <span class=\"n\">trans</span> <span class=\"o\">:=</span> <span class=\"n\">divides_trans</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span>\n</code></pre></div>",
        "id": 398552617,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1698264005
    },
    {
        "content": "<p>Cool thanks, which is more idiomatic?</p>",
        "id": 398552746,
        "sender_full_name": "Leo Shine",
        "timestamp": 1698264051
    },
    {
        "content": "<p>The _ seems less magical as this syntax comes up more often in beginner documentation</p>",
        "id": 398552940,
        "sender_full_name": "Leo Shine",
        "timestamp": 1698264119
    },
    {
        "content": "<p>I think I like the second more. There's also making the explicit/implicits match up better, which I like best:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">divides_trans</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">divides</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"n\">divides</span> <span class=\"n\">y</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">divides</span> <span class=\"n\">x</span> <span class=\"n\">z</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"o\">⟨</span><span class=\"n\">k₁</span><span class=\"o\">,</span> <span class=\"n\">d₁</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">h₁</span>\n  <span class=\"k\">let</span> <span class=\"o\">⟨</span><span class=\"n\">k₂</span><span class=\"o\">,</span> <span class=\"n\">d₂</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">h₂</span>\n  <span class=\"o\">⟨</span><span class=\"n\">k₁</span> <span class=\"bp\">*</span> <span class=\"n\">k₂</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Nat.mul_comm</span> <span class=\"n\">k₁</span> <span class=\"n\">k₂</span><span class=\"o\">,</span> <span class=\"n\">Nat.mul_assoc</span><span class=\"o\">,</span> <span class=\"n\">d₁</span><span class=\"o\">,</span> <span class=\"n\">d₂</span><span class=\"o\">]⟩</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Trans</span> <span class=\"n\">divides</span> <span class=\"n\">divides</span> <span class=\"n\">divides</span> <span class=\"n\">where</span>\n  <span class=\"n\">trans</span> <span class=\"o\">:=</span> <span class=\"n\">divides_trans</span>\n</code></pre></div>",
        "id": 398553445,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1698264287
    },
    {
        "content": "<p>Any idea why I get <br>\nambiguous, possible interpretations <br>\n  ?m.141806&amp;&amp;&amp;c : Prop</p>\n<p>?m.141812 &amp;&amp;&amp; c : Sort ?u.141804</p>\n<p>With this example? I don't know where the Sort ?u comes from all the relations are N -&gt; N-&gt; Prop</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"kd\">def</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"kd\">def</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"kd\">@[</span><span class=\"n\">trans</span><span class=\"kd\">]</span> <span class=\"kd\">theorem</span> <span class=\"n\">rst_trans</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">r</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">s</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"bp\">→</span> <span class=\"n\">t</span> <span class=\"n\">a</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"kd\">infix</span><span class=\"o\">:</span><span class=\"mi\">50</span> <span class=\"s2\">\"***\"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">r</span>\n<span class=\"kd\">infix</span><span class=\"o\">:</span><span class=\"mi\">50</span> <span class=\"s2\">\"&amp;&amp;&amp;\"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">s</span>\n<span class=\"kd\">infix</span><span class=\"o\">:</span><span class=\"mi\">50</span> <span class=\"s2\">\"%%%\"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">t</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Trans</span> <span class=\"n\">r</span> <span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"n\">where</span>\n  <span class=\"n\">trans</span> <span class=\"o\">:=</span> <span class=\"n\">rst_trans</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H1</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">***</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H2</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">&amp;&amp;&amp;</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">%%%</span> <span class=\"n\">c</span> <span class=\"o\">:=</span>\n<span class=\"k\">calc</span> <span class=\"n\">a</span> <span class=\"bp\">***</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"n\">H1</span>\n     <span class=\"n\">_</span> <span class=\"bp\">&amp;&amp;&amp;</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"n\">H2</span>\n</code></pre></div>",
        "id": 398557020,
        "sender_full_name": "Leo Shine",
        "timestamp": 1698266074
    },
    {
        "content": "<p><code>&amp;&amp;&amp;</code> is already a notation in core Lean for bitwise and</p>",
        "id": 398557141,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1698266151
    },
    {
        "content": "<p>Thanks</p>",
        "id": 398557233,
        "sender_full_name": "Leo Shine",
        "timestamp": 1698266190
    },
    {
        "content": "<p>Here's a workaround to break the tie:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">infix</span><span class=\"o\">:</span><span class=\"mi\">50</span> <span class=\"o\">(</span><span class=\"n\">priority</span> <span class=\"o\">:=</span> <span class=\"n\">high</span><span class=\"o\">)</span> <span class=\"s2\">\"&amp;&amp;&amp;\"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">s</span>\n</code></pre></div>",
        "id": 398557236,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1698266193
    },
    {
        "content": "<p>I'll just change the operators to have 4 characters instead</p>",
        "id": 398557353,
        "sender_full_name": "Leo Shine",
        "timestamp": 1698266272
    },
    {
        "content": "<p>Thanks for all your help</p>",
        "id": 398557746,
        "sender_full_name": "Leo Shine",
        "timestamp": 1698266491
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"217253\">Leo Shine</span> has marked this topic as resolved.</p>",
        "id": 398558378,
        "sender_full_name": "Notification Bot",
        "timestamp": 1698266832
    },
    {
        "content": "<p>Is this taken from some code I wrote in about 2018 demonstrating the use of the <code>calc</code> tactic?</p>",
        "id": 398567101,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1698271526
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"217253\">Leo Shine</span> has marked this topic as unresolved.</p>",
        "id": 398614320,
        "sender_full_name": "Notification Bot",
        "timestamp": 1698298533
    },
    {
        "content": "<p>Yes was trying to update it <a href=\"https://github.com/leanprover-community/leanprover-community.github.io/pull/391#pullrequestreview-1698592841\">https://github.com/leanprover-community/leanprover-community.github.io/pull/391#pullrequestreview-1698592841</a></p>",
        "id": 398614325,
        "sender_full_name": "Leo Shine",
        "timestamp": 1698298540
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"217253\">Leo Shine</span> has marked this topic as resolved.</p>",
        "id": 398615643,
        "sender_full_name": "Notification Bot",
        "timestamp": 1698299537
    },
    {
        "content": "<p>Feel free to not continually resolve and unresolve topics, it's not a feature we use on this Zulip.</p>\n<p>So yeah the correct thing to have now is an explanation of how the widget works. Calc is now super-powered compared to lean 3. Patrick has made at least two videos showing it off -- maybe on the leanprover-community YouTube channel?</p>",
        "id": 398627164,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1698304323
    }
]