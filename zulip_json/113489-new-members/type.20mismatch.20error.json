[
    {
        "content": "<ol>\n<li>I can see what it's saying in the first error but I don't know how to fix it.</li>\n<li>I don't understand the second error</li>\n</ol>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">analysis</span><span class=\"bp\">.</span><span class=\"n\">normed_space</span><span class=\"bp\">.</span><span class=\"n\">indicator_function</span>\n<span class=\"kn\">import</span> <span class=\"n\">measure_theory</span><span class=\"bp\">.</span><span class=\"n\">set_integral</span>\n<span class=\"kn\">import</span> <span class=\"n\">analysis</span><span class=\"bp\">.</span><span class=\"n\">specific_limits</span>\n<span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">geom_sum</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">fin_cases</span>\n<span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">measure_theory</span><span class=\"bp\">.</span><span class=\"n\">probability_mass_function</span>\n<span class=\"kn\">import</span> <span class=\"n\">set_theory</span><span class=\"bp\">.</span><span class=\"n\">cardinal_ordinal</span>\n\n\n<span class=\"kn\">universe</span> <span class=\"n\">u</span>\n<span class=\"kn\">variables</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span>\n\n\n\n<span class=\"n\">noncomputable</span> <span class=\"n\">def</span> <span class=\"n\">marginalize1</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">pmf</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">β</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">pmf</span> <span class=\"n\">β</span><span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"bp\">λ</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"err\">∑&#39;</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">))</span>\n\n<span class=\"c1\">-- type mismatch, term</span>\n<span class=\"c1\">--   λ (b : β), ∑&#39; (a : α), ⇑f (a, b)</span>\n<span class=\"c1\">-- has type</span>\n<span class=\"c1\">--   β → nnreal</span>\n<span class=\"c1\">-- but is expected to have type</span>\n<span class=\"c1\">--   pmf β</span>\n\n\n<span class=\"n\">noncomputable</span> <span class=\"n\">def</span> <span class=\"n\">marginalize2</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">pmf</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">β</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">pmf</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"bp\">λ</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"err\">∑&#39;</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">))</span>\n\n\n<span class=\"n\">def</span> <span class=\"n\">independent</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">pmf</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">β</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"bp\">∀</span> <span class=\"n\">a</span><span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">marginalize1</span> <span class=\"n\">f</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">marginalize2</span> <span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n\n<span class=\"c1\">-- type mismatch at application</span>\n<span class=\"c1\">--   marginalize1 f</span>\n<span class=\"c1\">-- term</span>\n<span class=\"c1\">--   f</span>\n<span class=\"c1\">-- has type</span>\n<span class=\"c1\">--   pmf (α × β) : Type u</span>\n<span class=\"c1\">-- but is expected to have type</span>\n<span class=\"c1\">--   Type ? : Type (?+1)</span>\n</code></pre></div>",
        "id": 207567406,
        "sender_full_name": "Iocta",
        "timestamp": 1597953478
    },
    {
        "content": "<p>The type <code>pmf α</code> is <code>{ f : α → nnreal // has_sum f 1 }</code> , so to construct a term you need a pair <code> α → nnreal</code> and a proof that the sum is 1, you can write this as a pair with langle rangle.</p>",
        "id": 207568037,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1597953774
    },
    {
        "content": "<p>Ok that makes sense</p>",
        "id": 207568244,
        "sender_full_name": "Iocta",
        "timestamp": 1597953885
    },
    {
        "content": "<p>Does that also explain the second error (how)?</p>",
        "id": 207569531,
        "sender_full_name": "Iocta",
        "timestamp": 1597954630
    },
    {
        "content": "<p>ie </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">analysis</span><span class=\"bp\">.</span><span class=\"n\">normed_space</span><span class=\"bp\">.</span><span class=\"n\">indicator_function</span>\n<span class=\"kn\">import</span> <span class=\"n\">measure_theory</span><span class=\"bp\">.</span><span class=\"n\">set_integral</span>\n<span class=\"kn\">import</span> <span class=\"n\">analysis</span><span class=\"bp\">.</span><span class=\"n\">specific_limits</span>\n<span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">geom_sum</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">fin_cases</span>\n<span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">measure_theory</span><span class=\"bp\">.</span><span class=\"n\">probability_mass_function</span>\n<span class=\"kn\">import</span> <span class=\"n\">set_theory</span><span class=\"bp\">.</span><span class=\"n\">cardinal_ordinal</span>\n\n\n<span class=\"kn\">universe</span> <span class=\"n\">u</span>\n<span class=\"kn\">variables</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span>\n\n\n\n<span class=\"n\">noncomputable</span> <span class=\"n\">def</span> <span class=\"n\">marginalize1</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">pmf</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">β</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">pmf</span> <span class=\"n\">β</span><span class=\"o\">:=</span>\n<span class=\"bp\">⟨</span>\n   <span class=\"o\">(</span><span class=\"bp\">λ</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"err\">∑&#39;</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">)),</span>\n   <span class=\"k\">begin</span>\n    <span class=\"n\">unfold</span> <span class=\"n\">pmf</span> <span class=\"n\">at</span> <span class=\"n\">f</span><span class=\"o\">,</span>\n    <span class=\"n\">cases</span> <span class=\"n\">f</span><span class=\"o\">,</span>\n    <span class=\"n\">sorry</span><span class=\"o\">,</span>\n   <span class=\"kn\">end</span>\n<span class=\"bp\">⟩</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"n\">nhds</span>\n\n\n<span class=\"n\">noncomputable</span> <span class=\"n\">def</span> <span class=\"n\">marginalize2</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">pmf</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">β</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">pmf</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"bp\">⟨</span> <span class=\"o\">(</span><span class=\"bp\">λ</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"err\">∑&#39;</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">)),</span> <span class=\"n\">sorry</span> <span class=\"bp\">⟩</span>\n\n\n<span class=\"n\">def</span> <span class=\"n\">independent</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">pmf</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">β</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"bp\">∀</span> <span class=\"n\">a</span><span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">marginalize1</span> <span class=\"n\">f</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">marginalize2</span> <span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n\n\n<span class=\"c1\">-- type mismatch at application</span>\n<span class=\"c1\">--   marginalize1 f</span>\n<span class=\"c1\">-- term</span>\n<span class=\"c1\">--   f</span>\n<span class=\"c1\">-- has type</span>\n<span class=\"c1\">--   pmf (α × β) : Type u</span>\n<span class=\"c1\">-- but is expected to have type</span>\n<span class=\"c1\">--   Type ? : Type (?+1)</span>\n</code></pre></div>",
        "id": 207569745,
        "sender_full_name": "Iocta",
        "timestamp": 1597954787
    },
    {
        "content": "<p>Did you get the first ones working? I'm not running lean right now so I can't check unfortunately, you might have to add <code>f.val</code> in some places too.</p>",
        "id": 207569751,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1597954797
    },
    {
        "content": "<p>Oh this is because <code>marginalize1</code> takes alpha and beta as explicit arguments (try <code>#check marginalize1</code> to see them).</p>",
        "id": 207570893,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1597955477
    },
    {
        "content": "<p>So you can change your variables line to <code>variables {α β : Type u}</code> to make them implicit.</p>",
        "id": 207570934,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1597955496
    },
    {
        "content": "<p>easy fix :-)</p>",
        "id": 207571025,
        "sender_full_name": "Iocta",
        "timestamp": 1597955526
    },
    {
        "content": "<p>I am getting a type mismatch error that somehow disappears if I change <code>variable {f : ℕ → ℝ≥0}</code> to <code>variable {f : ℕ → ℝ≥0∞}</code> that I am not sure how to resolve it.</p>\n<p>Here is a mwe for more detail:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Filter</span> <span class=\"n\">BigOperators</span> <span class=\"n\">ENNReal</span> <span class=\"n\">NNReal</span> <span class=\"n\">Topology</span> <span class=\"n\">Finset</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">Finset</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"o\">}</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">le_sum_schlomilch</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">⦃</span><span class=\"n\">m</span> <span class=\"n\">n</span><span class=\"o\">⦄,</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">m</span> <span class=\"bp\">→</span> <span class=\"n\">m</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">f</span> <span class=\"n\">n</span> <span class=\"bp\">≤</span> <span class=\"n\">f</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h_pos</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">u</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">h_u_mono</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">⦃</span><span class=\"n\">m</span> <span class=\"n\">n</span><span class=\"o\">⦄,</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">m</span> <span class=\"bp\">→</span> <span class=\"n\">m</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">u</span> <span class=\"n\">m</span> <span class=\"bp\">≤</span> <span class=\"n\">u</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"bp\">∑</span> <span class=\"n\">k</span> <span class=\"k\">in</span> <span class=\"n\">range</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"n\">n</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"bp\">∑</span> <span class=\"n\">k</span> <span class=\"k\">in</span> <span class=\"n\">range</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"mi\">0</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"bp\">∑</span> <span class=\"n\">k</span> <span class=\"k\">in</span> <span class=\"n\">range</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"n\">u</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">•</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">Finset</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">extracted_goal</span> <span class=\"o\">{</span><span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"bp\">∞</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">⦃</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">⦄,</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">m</span> <span class=\"bp\">→</span> <span class=\"n\">m</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">f</span> <span class=\"n\">n</span> <span class=\"bp\">≤</span> <span class=\"n\">f</span> <span class=\"n\">m</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h_pos</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">u</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h_u_mono</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">⦃</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">⦄,</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">m</span> <span class=\"bp\">→</span> <span class=\"n\">m</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">u</span> <span class=\"n\">m</span> <span class=\"bp\">≤</span> <span class=\"n\">u</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">⨆</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"bp\">∑</span> <span class=\"n\">a</span> <span class=\"k\">in</span> <span class=\"n\">range</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"n\">i</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"bp\">∑</span> <span class=\"n\">k</span> <span class=\"k\">in</span> <span class=\"n\">range</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"mi\">0</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"bp\">∑'</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"bp\">-</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"n\">k</span><span class=\"o\">))</span> <span class=\"bp\">*</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">refine'</span> <span class=\"n\">iSup_le</span> <span class=\"k\">fun</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">Finset.le_sum_schlomilch</span> <span class=\"n\">hf</span> <span class=\"n\">h_pos</span> <span class=\"n\">h_u_mono</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"o\">(</span><span class=\"n\">add_le_add_left</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>Thank you in advance for the help!</p>",
        "id": 396840023,
        "sender_full_name": "Jeremy Toh",
        "timestamp": 1697441385
    },
    {
        "content": "<p><code>iSup_le</code> requires a complete lattice, and according to</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">#</span><span class=\"n\">synth</span> <span class=\"n\">CompleteLattice</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"bp\">∞</span>\n\n<span class=\"bp\">#</span><span class=\"n\">synth</span> <span class=\"n\">CompleteLattice</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span>\n</code></pre></div>\n<p><code>NNReal</code> is not one but <code>ENNReal</code> is</p>",
        "id": 396891952,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1697459338
    },
    {
        "content": "<p>Ah, I see. Thank you! Is there anyway to fix it without changing it to <code>ℝ≥0∞</code></p>",
        "id": 396914263,
        "sender_full_name": "Jeremy Toh",
        "timestamp": 1697466083
    },
    {
        "content": "<p>Well you have to think about what you want mathematically, I didn't read it yet in detail, but the crux of the complaint is that in the nonnegative reals we have sequences that tend to infinity and hence have no supremum, when we have an infinity element we are allowed to take sups arbitrarily.<br>\nYou might want to look at <a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/Order/ConditionallyCompleteLattice/Basic.html#ConditionallyCompleteLattice\">https://leanprover-community.github.io/mathlib4_docs/Mathlib/Order/ConditionallyCompleteLattice/Basic.html#ConditionallyCompleteLattice</a> and use somethling like <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=ciSup_le#doc\">docs#ciSup_le</a> instead?</p>",
        "id": 396923455,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1697468683
    },
    {
        "content": "<p>that makes perfect sense! thank you!</p>",
        "id": 397013070,
        "sender_full_name": "Jeremy Toh",
        "timestamp": 1697510715
    },
    {
        "content": "<p>Is there anyway for me to coerce <code>f : ℕ → ℝ≥0</code> to <code>f : ℕ → ℝ≥0∞</code>? The error still remains with <code>ciSup_le</code>. If I did not interpret the error message wrongly, I think the problem lies in Lean expecting <code>f</code> to be <code>f : ℕ → ℝ≥0∞</code>but the <code>f</code> in <code>le_sum_schlomilch</code> is <code>f : ℕ → ℝ≥0</code> instead.</p>",
        "id": 397225732,
        "sender_full_name": "Jeremy Toh",
        "timestamp": 1697602320
    },
    {
        "content": "<p>Maybe we should back up a bit? You have your extracted goal about <code>ℝ≥0∞</code> and some theorem <code>le_sum_schlomilch</code> which you are changing from <code>ℝ≥0∞</code> to <code>ℝ≥0</code> if you can prove schlomilch for ennreal why not use it?</p>",
        "id": 397319067,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1697637460
    },
    {
        "content": "<p>If  you want a function to ennreal from one to nnreal you can use <code>(fun n =&gt; f n : ℕ → ℝ≥0∞)</code> but then youll need to prove hf h_pos etc, which should be easy enough but a bit verbose</p>",
        "id": 397319454,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1697637576
    },
    {
        "content": "<p>And it sounds like you actually want to go the other way? In the extracted goal you have an ennreal valued function but you want to apply a theorem about <code>nnreal</code> valued functions, this isn't a coercion at this point as the function really could equal infinity somewhere</p>",
        "id": 397320090,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1697637731
    },
    {
        "content": "<p>Ah you are right. I am actually trying to do the TODO in <a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/Analysis/PSeries.html\">PSeries</a> as an exercise in learning Lean. Currently, I am trying to adapt the structure of the proof to Schlömilch's. For the original code, it used <code>OrderedAddCommMonoid</code> but it was causing issues with HSub/HSMul/HMul and I took the easy way to use <code>ℝ≥0</code> instead for now. Maybe I should go back and look at what's the correct algebraic structure to use. Thanks for the help!</p>",
        "id": 397325702,
        "sender_full_name": "Jeremy Toh",
        "timestamp": 1697639320
    },
    {
        "content": "<p>Yeah it sounds like you should stick to <code>NNReal</code> or <code>Real</code> if you can and avoid <code>ENNReal</code>. Good luck with the project it sounds like a good one!</p>",
        "id": 397368516,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1697655437
    }
]