[
    {
        "content": "<p>If I define a reduced residue class as follows:<br>\n<code> def reduced_residue_class (n: nat):={ k : nat | k &lt; n \\and k.coprime n } </code></p>",
        "id": 191530108,
        "sender_full_name": "Brian Jiang",
        "timestamp": 1584994491
    },
    {
        "content": "<p>is there a way to get the size of this set?</p>",
        "id": 191530145,
        "sender_full_name": "Brian Jiang",
        "timestamp": 1584994506
    },
    {
        "content": "<p>also I would like to get the product of all elements in the set</p>",
        "id": 191530184,
        "sender_full_name": "Brian Jiang",
        "timestamp": 1584994524
    },
    {
        "content": "<p>Well.... Lean doesn't know yet that the set is finite...</p>",
        "id": 191530223,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1584994554
    },
    {
        "content": "<p>Even though it's obvious.</p>",
        "id": 191530276,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1584994562
    },
    {
        "content": "<p>This might be one reason to choose</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">rsc</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">nat</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">range</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">filter</span> <span class=\"err\">$</span> <span class=\"k\">assume</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">k</span><span class=\"bp\">.</span><span class=\"n\">coprime</span> <span class=\"n\">n</span>\n</pre></div>",
        "id": 191530368,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1584994620
    },
    {
        "content": "<p>Then you can talk about <code>finset.card _</code> afterwards</p>",
        "id": 191530405,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1584994640
    },
    {
        "content": "<p>is there any way around this? maybe by adding an assumption that says its finite?</p>",
        "id": 191530445,
        "sender_full_name": "Brian Jiang",
        "timestamp": 1584994660
    },
    {
        "content": "<p>is there any way around this? maybe by adding an assumption that says its finite?</p>",
        "id": 191530464,
        "sender_full_name": "Brian Jiang",
        "timestamp": 1584994671
    },
    {
        "content": "<p>ok thanks</p>",
        "id": 191530577,
        "sender_full_name": "Brian Jiang",
        "timestamp": 1584994710
    },
    {
        "content": "<p>can I get the product of all elements in this set somehow?</p>",
        "id": 191530638,
        "sender_full_name": "Brian Jiang",
        "timestamp": 1584994738
    },
    {
        "content": "<p>also</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">mem_rsc</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">k</span> <span class=\"err\">\\</span><span class=\"k\">in</span> <span class=\"n\">rsc</span> <span class=\"n\">n</span> <span class=\"err\">\\</span><span class=\"n\">iff</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"err\">\\</span><span class=\"n\">and</span> <span class=\"n\">k</span><span class=\"bp\">.</span><span class=\"n\">coprime</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</pre></div>",
        "id": 191530674,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1584994761
    },
    {
        "content": "<p>With the finset definition, the product is also easier.</p>",
        "id": 191530713,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1584994782
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">prod_rsc</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">nat</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">rsc</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">prod</span> <span class=\"n\">id</span>\n</pre></div>",
        "id": 191530830,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1584994831
    },
    {
        "content": "<p>what do I have to import for finset and prod?</p>",
        "id": 191531096,
        "sender_full_name": "Brian Jiang",
        "timestamp": 1584994936
    },
    {
        "content": "<p>You can't take the product until you define the multiplication.</p>",
        "id": 191531189,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584994991
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"269735\">Brian Jiang</span> <a href=\"#narrow/stream/113489-new-members/topic/working.20with.20sets/near/191531096\" title=\"#narrow/stream/113489-new-members/topic/working.20with.20sets/near/191531096\">said</a>:</p>\n<blockquote>\n<p>what do I have to import for finset and prod?</p>\n</blockquote>\n<p><code>algebra.big_operators</code></p>",
        "id": 191531429,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1584995118
    },
    {
        "content": "<p>@Kevin Buzzard : How may I define this multiplication?</p>",
        "id": 191532340,
        "sender_full_name": "Brian Jiang",
        "timestamp": 1584995596
    },
    {
        "content": "<p>also, would it be possible to define another set that has all the values of <code>rsc n </code> scaled by a factor of a?</p>",
        "id": 191532499,
        "sender_full_name": "Brian Jiang",
        "timestamp": 1584995658
    },
    {
        "content": "<p>Well you can do regular multiplication and then reduce mod n -- but then you have to prove that the result is coprime to n. If you want to roll your own then you will have to do work before you can even start multiplying.</p>\n<p>If you want to learn how to prove theorems in Lean than you could try working on the natural number game.</p>",
        "id": 191534533,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584996678
    }
]