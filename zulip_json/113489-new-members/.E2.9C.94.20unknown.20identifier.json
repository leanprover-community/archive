[
    {
        "content": "<p>As newbie I am confused. With a version of Lean4 dating back to december 2022 the following code was not marked as being wrong:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">q</span> <span class=\"bp\">∧</span> <span class=\"n\">p</span> <span class=\"o\">:=</span>\n  <span class=\"k\">have</span> <span class=\"o\">(</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">h.left</span>\n  <span class=\"k\">have</span> <span class=\"o\">(</span><span class=\"n\">hq</span> <span class=\"o\">:</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">h.right</span>\n  <span class=\"k\">show</span> <span class=\"n\">q</span> <span class=\"bp\">∧</span> <span class=\"n\">p</span> <span class=\"k\">from</span> <span class=\"n\">And.intro</span> <span class=\"n\">hq</span> <span class=\"n\">hp</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">h3nx</span> <span class=\"o\">:</span> <span class=\"bp\">¬¬¬</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">x</span> <span class=\"o\">:=</span>\n  <span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">have</span> <span class=\"o\">(</span><span class=\"n\">hnnx</span> <span class=\"o\">:</span> <span class=\"bp\">¬¬</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">hnx</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">show</span> <span class=\"n\">False</span> <span class=\"k\">from</span> <span class=\"n\">hnx</span> <span class=\"n\">hx</span>\n    <span class=\"k\">show</span> <span class=\"n\">False</span> <span class=\"k\">from</span> <span class=\"n\">absurd</span> <span class=\"n\">hnnx</span> <span class=\"n\">h3nx</span>\n</code></pre></div>\n<p>After updating Lean4 to 4.3.0-rc2 I get the message</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>unknown identifier 'hq'\n</code></pre></div>\n<p>not only for hq, but also for hp and hnnx. I observe the same behavior on <a href=\"https://live.lean-lang.org/\">https://live.lean-lang.org/</a>, so this seems not to be an issue of my local installation.</p>\n<p>I have no clue, what is going wrong. Therefore I would like to ask for some help on this issue.</p>",
        "id": 402878271,
        "sender_full_name": "Martin Stephan",
        "timestamp": 1700315358
    },
    {
        "content": "<p>I agree it's strange if that changed! But shouldn't it be written like this (without parentheses around the name in the <code>have</code>s)?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">q</span> <span class=\"bp\">∧</span> <span class=\"n\">p</span> <span class=\"o\">:=</span>\n  <span class=\"k\">have</span> <span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"n\">h.left</span>\n  <span class=\"k\">have</span> <span class=\"n\">hq</span> <span class=\"o\">:</span> <span class=\"n\">q</span> <span class=\"o\">:=</span> <span class=\"n\">h.right</span>\n  <span class=\"k\">show</span> <span class=\"n\">q</span> <span class=\"bp\">∧</span> <span class=\"n\">p</span> <span class=\"k\">from</span> <span class=\"n\">And.intro</span> <span class=\"n\">hq</span> <span class=\"n\">hp</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">h3nx</span> <span class=\"o\">:</span> <span class=\"bp\">¬¬¬</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">x</span> <span class=\"o\">:=</span>\n  <span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">have</span> <span class=\"n\">hnnx</span> <span class=\"o\">:</span> <span class=\"bp\">¬¬</span><span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">hnx</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">show</span> <span class=\"n\">False</span> <span class=\"k\">from</span> <span class=\"n\">hnx</span> <span class=\"n\">hx</span>\n    <span class=\"k\">show</span> <span class=\"n\">False</span> <span class=\"k\">from</span> <span class=\"n\">absurd</span> <span class=\"n\">hnnx</span> <span class=\"n\">h3nx</span>\n</code></pre></div>",
        "id": 402878645,
        "sender_full_name": "Richard Copley",
        "timestamp": 1700315720
    },
    {
        "content": "<p>Isn't it some kind of function syntax with the parentheses</p>",
        "id": 402878741,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1700315786
    },
    {
        "content": "<p><code>have (hp : p) := h.left</code> means <code>have := fun (hp : p) =&gt; h.left</code>.</p>",
        "id": 402879178,
        "sender_full_name": "Richard Copley",
        "timestamp": 1700316127
    },
    {
        "content": "<p>Thanks a lot. It's working without the parentheses. The only strange thing is that this was legal syntax in earlier versions. Nevertheless, this issue is obviously solved.</p>",
        "id": 402879300,
        "sender_full_name": "Martin Stephan",
        "timestamp": 1700316235
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"668156\">Martin Stephan</span> has marked this topic as resolved.</p>",
        "id": 402879301,
        "sender_full_name": "Notification Bot",
        "timestamp": 1700316240
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"668156\">Martin Stephan</span> <a href=\"#narrow/stream/113489-new-members/topic/.E2.9C.94.20unknown.20identifier/near/402879300\">said</a>:</p>\n<blockquote>\n<p>Thanks a lot. It's working without the parentheses. The only strange thing is that this was legal syntax in earlier versions. Nevertheless, this issue is obviously solved.</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"668156\">@Martin Stephan</span>  -- Lean is moving pretty fast at the minute. When the maths library was ported over the period Nov 2022 to June 2023 a lot happened. But now the maths library is ported so we have evidence that Lean is in good enough shape to support a one million line long project, and one might be optimistic that breaking changes to syntax will be rarer in the future.</p>",
        "id": 402880444,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1700317068
    }
]