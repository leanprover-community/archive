[
    {
        "content": "<p>I am trying to prove that if I have two non -equal fin N numbers then the result cannot  zero. I am stuck.  Any thoughts or help appreciated. </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span>\n  <span class=\"o\">{</span><span class=\"n\">hN</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">&lt;</span> <span class=\"n\">N</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">N</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">k</span> <span class=\"bp\">=</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hkn</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"n\">k</span><span class=\"o\">:</span><span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"bp\">↑</span><span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">false</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>This is part of proving that a complex exponential <code>exp(2*pi*I*(k - n)/N)</code> is not one unless k and n are the same. </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span>\n  <span class=\"o\">{</span><span class=\"n\">hN</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">&lt;</span> <span class=\"n\">N</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">N</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">k</span> <span class=\"bp\">=</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hc</span> <span class=\"o\">:</span> <span class=\"n\">exp</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"bp\">↑</span><span class=\"n\">π</span> <span class=\"bp\">*</span> <span class=\"n\">I</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"n\">k</span> <span class=\"bp\">-</span> <span class=\"bp\">↑</span><span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"bp\">↑</span><span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">false</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">complex.exp_eq_one_iff</span> <span class=\"n\">at</span> <span class=\"n\">hc</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">hc</span> <span class=\"k\">with</span> <span class=\"n\">M</span> <span class=\"n\">hM</span><span class=\"o\">,</span>\n<span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 354725663,
        "sender_full_name": "MohanadAhmed",
        "timestamp": 1682875366
    },
    {
        "content": "<p>I'd start with rewriting <code>hkn</code> with <a href=\"https://leanprover-community.github.io/mathlib_docs/find/sub_eq_zero\">docs#sub_eq_zero</a></p>",
        "id": 354726667,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1682875844
    },
    {
        "content": "<p>Also, <code>hN</code> is probably unnecessary.</p>",
        "id": 354727033,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1682876022
    },
    {
        "content": "<p>And then I'd assume there's something about injectivity of that coercion, but I'm not seeing where the coercion to int is defined</p>",
        "id": 354727506,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1682876232
    },
    {
        "content": "<p><code>h $ fin.coe_injective $ nat.cast_injective $ sub_eq_zero.mp hkn</code> works, though I admit is very implicit...</p>",
        "id": 354727719,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1682876307
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"307953\">@Ruben Van de Velde</span> </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span>\n  <span class=\"o\">{</span><span class=\"n\">hN</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">&lt;</span> <span class=\"n\">N</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">N</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">k</span> <span class=\"bp\">=</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hkn</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"n\">k</span><span class=\"o\">:</span><span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"bp\">↑</span><span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">false</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">int.sub_eq_zero_iff_eq</span> <span class=\"n\">at</span> <span class=\"n\">hkn</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">coe_coe</span><span class=\"o\">,</span> <span class=\"n\">nat.cast_inj</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">fin.coe_eq_coe</span> <span class=\"n\">at</span> <span class=\"n\">hkn</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">h</span> <span class=\"n\">hkn</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 354727735,
        "sender_full_name": "MohanadAhmed",
        "timestamp": 1682876312
    },
    {
        "content": "<p>This one worked!</p>",
        "id": 354727779,
        "sender_full_name": "MohanadAhmed",
        "timestamp": 1682876336
    },
    {
        "content": "<p>And indeed note that you never used <code>hN</code>, as you can easily see by deleting it and observing that the proof still works.</p>",
        "id": 354729220,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1682876967
    },
    {
        "content": "<p>Hello <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> . Yes you are right!<br>\nYeah this was the result of the <code>extract_goal</code>. The hN is needed in the next part where the complex exponential is not equal to 1.</p>",
        "id": 354730317,
        "sender_full_name": "MohanadAhmed",
        "timestamp": 1682877491
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"321459\">Damiano Testa</span> <a href=\"#narrow/stream/113489-new-members/topic/fin.20N.20subtraction.20of.20non.20equal.20nums.20cannot.20give.20zero/near/354727719\">said</a>:</p>\n<blockquote>\n<p><code>h $ fin.coe_injective $ nat.cast_injective $ sub_eq_zero.mp hkn</code> works, though I admit is very implicit...</p>\n</blockquote>\n<p>How do you read this statement? <br>\nAre the dollar signs separators?</p>\n<p>Does it have the same meaning as in for example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">W_N</span> <span class=\"o\">{</span><span class=\"n\">N</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}:</span> <span class=\"n\">matrix</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"n\">ℂ</span> <span class=\"o\">:=</span>\n<span class=\"n\">of</span> <span class=\"bp\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">k</span> <span class=\"n\">n</span><span class=\"o\">,</span>  <span class=\"n\">exp</span><span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">π</span> <span class=\"bp\">*</span> <span class=\"n\">I</span> <span class=\"bp\">*</span> <span class=\"n\">k</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">/</span> <span class=\"n\">N</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 354730742,
        "sender_full_name": "MohanadAhmed",
        "timestamp": 1682877678
    },
    {
        "content": "<p>That is the very implicit term-mode proof.</p>\n<p>The <code>$</code> is equivalent to opening a parenthesis and letting Lean figure out the latest position where it can close it: it helps to remove long sequences of closed parentheses at the end of the line.</p>",
        "id": 354731146,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1682877903
    },
    {
        "content": "<p>Essentially, <code>f $ g $ h i</code> means <code>f (g (h i))</code>.</p>",
        "id": 354731364,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1682877983
    },
    {
        "content": "<p>I would read that statement as saying:</p>\n<ul>\n<li>\n<p>apply <code>h</code> (like your last exact)<br>\n  [so now we are proving that <code>k = n</code>]</p>\n</li>\n<li>\n<p>After that, you apply a few injectivities of coercions (from <code>fin</code>s to <code>nat</code>s and from <code>nat</code>s to <code>int</code>s)</p>\n</li>\n<li>And you use the <code>sub_eq_zero</code> on your hypothesis with a subtraction.</li>\n</ul>",
        "id": 354731671,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1682878119
    }
]