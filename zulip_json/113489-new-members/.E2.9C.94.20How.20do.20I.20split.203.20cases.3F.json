[
    {
        "content": "<p>Hey I want to prove the MVT in lean 4. I found a proof I want to orient myself by: <a href=\"https://gist.github.com/mlyean/b6c6cf536236c2f5b23f7a07b680081c\">https://gist.github.com/mlyean/b6c6cf536236c2f5b23f7a07b680081c</a></p>\n<p>I don't understand how to do the proof by cases from h' …<br>\nI would like to continue with: let us assume f x &lt; 0 then we have a contradiction<br>\nand if f x = 0 then we obviously have a contradiction and for f x &gt; 0 the same</p>\n<p>And I already got the following:<br>\nimport Mathlib</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">continuous</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">∀</span> <span class=\"n\">x₀</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">ε</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">δ</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">abs</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">x₀</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"n\">δ</span> <span class=\"bp\">→</span> <span class=\"n\">abs</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">f</span> <span class=\"n\">x₀</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"n\">ε</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">intermediate_value_theorem</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hab</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">continuous</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hfa</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hfb</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">b</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span><span class=\"bp\">∃</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">Set.Icc</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">let</span> <span class=\"n\">S</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">y</span> <span class=\"bp\">|</span> <span class=\"n\">y</span> <span class=\"bp\">∈</span> <span class=\"n\">Set.Icc</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">∧</span> <span class=\"n\">f</span> <span class=\"n\">y</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">0</span><span class=\"o\">}</span>\n  <span class=\"k\">have</span> <span class=\"n\">a_in_S</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">S</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">simp</span>\n    <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">le_of_lt</span> <span class=\"n\">hab</span><span class=\"o\">,</span> <span class=\"n\">hfa</span><span class=\"o\">⟩</span>\n  <span class=\"k\">have</span> <span class=\"n\">hS_bdd</span> <span class=\"o\">:</span> <span class=\"n\">BddAbove</span> <span class=\"n\">S</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">use</span> <span class=\"n\">b</span>\n    <span class=\"n\">intro</span> <span class=\"n\">s</span> <span class=\"n\">hs</span>\n    <span class=\"n\">exact</span> <span class=\"n\">hs.1.2</span>\n  <span class=\"k\">let</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">sSup</span> <span class=\"n\">S</span>\n  <span class=\"k\">have</span> <span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">Set.Icc</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">constructor</span>\n    <span class=\"n\">exact</span> <span class=\"n\">le_csSup</span> <span class=\"n\">hS_bdd</span> <span class=\"n\">a_in_S</span>\n    <span class=\"bp\">·</span> <span class=\"n\">apply</span> <span class=\"n\">csSup_le</span>\n      <span class=\"bp\">·</span> <span class=\"n\">exact</span> <span class=\"n\">Set.nonempty_of_mem</span> <span class=\"n\">a_in_S</span>\n      <span class=\"bp\">·</span> <span class=\"n\">intro</span> <span class=\"n\">c</span> <span class=\"n\">hc</span>\n        <span class=\"n\">exact</span> <span class=\"n\">hc.1.2</span>\n  <span class=\"n\">use</span> <span class=\"n\">x</span>\n  <span class=\"n\">constructor</span>\n  <span class=\"n\">exact</span> <span class=\"n\">hx</span>\n  <span class=\"n\">by_contra</span> <span class=\"n\">h</span>\n  <span class=\"k\">have</span> <span class=\"n\">h'</span> <span class=\"o\">:=</span> <span class=\"n\">lt_trichotomy</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"mi\">0</span>\n\n\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 397078240,
        "sender_full_name": "Benjamin Unger",
        "timestamp": 1697538697
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"659511\">Benjamin Unger</span> has marked this topic as resolved.</p>",
        "id": 397078655,
        "sender_full_name": "Notification Bot",
        "timestamp": 1697538862
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"659511\">Benjamin Unger</span> has marked this topic as unresolved.</p>",
        "id": 397078752,
        "sender_full_name": "Notification Bot",
        "timestamp": 1697538913
    },
    {
        "content": "<p>I understand I need to use: <br>\nsplit h' with <br>\n | a inl =&gt; <br>\n | b inr =&gt;<br>\nbut I have two or operators and I don't understand what inl,  inr and the arrow =&gt; mean</p>",
        "id": 397079443,
        "sender_full_name": "Benjamin Unger",
        "timestamp": 1697539163
    },
    {
        "content": "<p>You need to read <a href=\"https://github.com/leanprover-community/mathlib/wiki/Code-in-backticks\">#backticks</a> and edit your post.</p>",
        "id": 397116984,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1697551623
    },
    {
        "content": "<p>And then the answer is <code>rcases h' with H|H|H</code></p>",
        "id": 397117181,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1697551674
    },
    {
        "content": "<p>But really it will a lot easier for you to learn Lean 4 by reading Lean 4 tutorials rather than trying to guess how to translate Lean 3 to Lean 4.</p>",
        "id": 397117333,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1697551706
    },
    {
        "content": "<p>Thanks I think it worked! And I edited the code:) I am very new to lean and will probably have more questions if this is the case is this the right stream to ask beginner questions?</p>",
        "id": 397119043,
        "sender_full_name": "Benjamin Unger",
        "timestamp": 1697552202
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"659511\">Benjamin Unger</span> has marked this topic as resolved.</p>",
        "id": 397133070,
        "sender_full_name": "Notification Bot",
        "timestamp": 1697556209
    }
]