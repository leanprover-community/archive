[
    {
        "content": "<p>Is there anyway to nicely align lean code with comments? such as a lean markdown? or a overleaf package with lean plug-in that kind of thing?</p>",
        "id": 390474107,
        "sender_full_name": "Yufei Liu",
        "timestamp": 1694508775
    },
    {
        "content": "<p>There are at least 3 things related to your question:</p>\n<ol>\n<li><a href=\"https://github.com/leanprover/doc-gen4\">doc-gen4</a> generates doc for Lean projects, <a href=\"https://leanprover-community.github.io/mathlib4_docs/\">Mathlib4 uses it</a>, it supports markdown with math. But it's \"API document\" style, that means you can't write <code>--</code> style comments inside a proof or a function and expect it renders markdown. You need to write Lean code block in Markdown like you write code in other languages in Markdown, so the Lean code block you are explaining step by step is not executable, thus less maintainable.</li>\n</ol>\n<p>This is the easiest way to get Lean work with Markdown, and has official and wide usage.</p>\n<ol start=\"2\">\n<li><a href=\"https://github.com/cpitclaudel/alectryon\">alectryon</a> supports literate programming for Coq and Lean in both direction: Lean in markup + markup in Lean, and the Lean is still executable in both cases. The downside is that it officially supports only <a href=\"https://www.sphinx-doc.org/en/master/usage/restructuredtext/index.html\">reStructuredText</a>, to use Markdown, you need to use this fork <a href=\"https://github.com/Kha/alectryon/tree/typeid\">Kha/alectryon@typeid</a> and follow <a href=\"https://github.com/leanprover/lean4/blob/master/doc/flake.nix#L11\">how Lean 4 Manual uses it</a>. I don't know if anyone has a simpler workflow for this, I have a simple setup <a href=\"https://github.com/utensil/lean-playground/blob/master/.github/workflows/lean4.yml\">here</a> inside <code>annotate_all.sh</code>. And a simple example is <a href=\"https://utensil.github.io/lean-playground/HelloMarkdown.html\">here</a>. Note that this way Markdown is pass-through, and you need to render Markdown yourself, like I have chosen <code>markdown-it-py</code> to do it.</li>\n</ol>\n<p>The major advantage of this method is that the reader can inspect types, tactic states and outputs by <code>#eval</code>, <code>#check</code> etc.</p>\n<p>It has the same issue that you can't comfortably mix Lean with Markdown. It supports only <code>/-!</code> style doc, and even if I hacked it to support <code>/--</code> style, the render result messed with the indentation because alectryon breaks a code block into code blocks and comment blocks, so indentations are eaten.</p>\n<p>A liter solution is to render annotations from LeanInk, which is JSON.</p>\n<p>This way is semi-official because Lean 4 Manual uses it, but it's not easy to use thus not widely adopted.</p>\n<ol start=\"3\">\n<li>Listing Lean code in LaTeX like on overleaf is officially supported and used by many papers (not sure if they are using the same method or each has some improvements, but this is the baseline solution): <a href=\"https://leanprover.github.io/lean4/doc/syntax_highlight_in_latex.html\">https://leanprover.github.io/lean4/doc/syntax_highlight_in_latex.html</a></li>\n</ol>\n<p>Other methods are mostly manual, you need to manually maintain the correctness of the Lean code and the tactic states, like in many online books about Lean.</p>",
        "id": 390488358,
        "sender_full_name": "Utensil Song",
        "timestamp": 1694513943
    },
    {
        "content": "<p>A variation on 2 which is worth mentioning is the framework developed by <span class=\"user-mention silent\" data-user-id=\"354934\">David Thrane Christiansen</span> for FPIL: <a href=\"https://github.com/leanprover/fp-lean\">https://github.com/leanprover/fp-lean</a> . I believe it is similar to the Lean 4 book but it has more features to check the correctness of code blocks against claimed outputs</p>",
        "id": 390490761,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694514958
    },
    {
        "content": "<p>thank you guys for such detailed reply, i'll check them out!</p>",
        "id": 390511425,
        "sender_full_name": "Yufei Liu",
        "timestamp": 1694522453
    },
    {
        "content": "<p>I've checked the features in <a href=\"https://github.com/leanprover/fp-lean\">https://github.com/leanprover/fp-lean</a> , but it requires writing the Lean proof in a style that's friendly to regex match but human readers, and deviates from normal Lean proof, thus less desirable.</p>\n<p>There's also a pain point that wrapping normal proofs in macros make it less \"clickable\" in VS Code. It's easy to click into the macro instead of the tactics, theorems etc.</p>",
        "id": 390635490,
        "sender_full_name": "Utensil Song",
        "timestamp": 1694574092
    }
]