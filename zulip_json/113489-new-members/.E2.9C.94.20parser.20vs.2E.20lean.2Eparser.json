[
    {
        "content": "<p>I am getting</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">ghrunner</span><span class=\"bp\">/</span><span class=\"n\">actions</span><span class=\"bp\">-</span><span class=\"n\">runner</span><span class=\"bp\">/</span><span class=\"n\">_work</span><span class=\"bp\">/</span><span class=\"n\">mathlib</span><span class=\"bp\">/</span><span class=\"n\">mathlib</span><span class=\"bp\">/</span><span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">tactic</span><span class=\"bp\">/</span><span class=\"n\">interactive.lean</span><span class=\"o\">:</span><span class=\"mi\">198</span><span class=\"o\">:</span><span class=\"mi\">48</span><span class=\"o\">:</span>\n<span class=\"n\">ambiguous</span> <span class=\"n\">overload</span><span class=\"o\">,</span> <span class=\"n\">possible</span> <span class=\"n\">interpretations</span>\n  <span class=\"n\">parser</span> <span class=\"o\">(</span><span class=\"n\">pexpr</span> <span class=\"bp\">×</span> <span class=\"n\">name</span><span class=\"o\">)</span>\n  <span class=\"n\">lean.parser</span> <span class=\"o\">(</span><span class=\"n\">pexpr</span> <span class=\"bp\">×</span> <span class=\"n\">name</span><span class=\"o\">)</span>\n<span class=\"n\">Additional</span> <span class=\"n\">information</span><span class=\"o\">:</span>\n<span class=\"bp\">/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">ghrunner</span><span class=\"bp\">/</span><span class=\"n\">actions</span><span class=\"bp\">-</span><span class=\"n\">runner</span><span class=\"bp\">/</span><span class=\"n\">_work</span><span class=\"bp\">/</span><span class=\"n\">mathlib</span><span class=\"bp\">/</span><span class=\"n\">mathlib</span><span class=\"bp\">/</span><span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">tactic</span><span class=\"bp\">/</span><span class=\"n\">interactive.lean</span><span class=\"o\">:</span><span class=\"mi\">198</span><span class=\"o\">:</span><span class=\"mi\">48</span><span class=\"o\">:</span> <span class=\"n\">context</span><span class=\"o\">:</span> <span class=\"n\">switched</span> <span class=\"n\">to</span> <span class=\"n\">basic</span> <span class=\"n\">overload</span> <span class=\"n\">resolution</span> <span class=\"n\">where</span> <span class=\"n\">arguments</span> <span class=\"n\">are</span> <span class=\"n\">elaborated</span> <span class=\"n\">without</span> <span class=\"n\">any</span> <span class=\"n\">information</span> <span class=\"n\">about</span> <span class=\"n\">the</span> <span class=\"n\">expected</span> <span class=\"n\">type</span> <span class=\"n\">because</span> <span class=\"n\">expected</span> <span class=\"n\">type</span> <span class=\"n\">was</span> <span class=\"n\">not</span> <span class=\"n\">available</span>\n</code></pre></div>\n<p>after what seems local and innocent changes in <code>to_additive</code> in <a href=\"https://github.com/leanprover-community/mathlib/pull/13330\">https://github.com/leanprover-community/mathlib/pull/13330</a>. How could I have broken that?</p>",
        "id": 278515037,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1649660849
    },
    {
        "content": "<p>Maybe simply adding an import would be enough. Before your changes were both <code>_root_.parser</code> and <code>lean.parser</code> available in interactive.lean?</p>",
        "id": 278518195,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1649663181
    },
    {
        "content": "<p>It's definitely also worth checking out how your change affects the import structure more generally. Does adding alias to to_additive add a lot of transitive imports early in the heierachy?</p>",
        "id": 278518286,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1649663264
    },
    {
        "content": "<p>Ah, I see: Adding the import to <code>to_additive</code> is problematic. Ok, I could have seen that :-)</p>",
        "id": 278518960,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1649663766
    },
    {
        "content": "<p><code>alias</code> (only) depends on <code>data.buffer.parser</code>, and that import is the problem (i.e. if I import that in <code>to_additive.lean</code> directly, I get the same errors)</p>",
        "id": 278519543,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1649664239
    },
    {
        "content": "<p>Can I import that in <code>alias.lean</code> without polluting downstream modules’ namespaces?</p>",
        "id": 278519666,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1649664318
    },
    {
        "content": "<p>Ah, I can just not use that parser in <code>alias</code> :-)</p>",
        "id": 278520224,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1649664704
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"470149\">Joachim Breitner</span> has marked this topic as resolved.</p>",
        "id": 278520629,
        "sender_full_name": "Notification Bot",
        "timestamp": 1649664989
    },
    {
        "content": "<p>Yeah I hit the same name ambiguity a while back. Don't quite remember the context though.</p>",
        "id": 278521058,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1649665274
    }
]