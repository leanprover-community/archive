[
    {
        "content": "<p>I'm trying to prove [actually something about 10 lemmas removed from] </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">minus_succ_eq_succ_minus</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">≤</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">Nat.succ</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">Nat.succ</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">-</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>and for some reason it's extremely frustrating to me that this is actually hard (read: that I am so stupid as to get stuck on something like this). My expectation was that it would be solved by <code>simp</code> or <code>apply?</code>. Half an hour of <code>induction</code> later, I'm kind of stuck. How does one approach this?</p>",
        "id": 388575515,
        "sender_full_name": "Adomas Baliuka",
        "timestamp": 1693591746
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Nat.succ_sub#doc\">docs#Nat.succ_sub</a></p>",
        "id": 388575711,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1693591825
    },
    {
        "content": "<p>(I searched the docs for <code>Nat.succ_sub</code> since I figured <code>succ_sub</code> would be a substring of its name, but it turned out to be exactly it's name)</p>",
        "id": 388575780,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1693591852
    },
    {
        "content": "<p><code>simp</code> doesn't work because it's not a simp lemma. I'm not sure why <code>apply?</code> wouldn't work.</p>",
        "id": 388575888,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1693591906
    },
    {
        "content": "<p>Does <code>exact?</code> not work either?</p>",
        "id": 388576135,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1693592007
    },
    {
        "content": "<p>I guess I was missing a <code>import Std.Data.Nat.Init.Lemmas</code>. Now <code>apply?</code> started to work.</p>",
        "id": 388576189,
        "sender_full_name": "Adomas Baliuka",
        "timestamp": 1693592031
    },
    {
        "content": "<p>At this point using <code>import Mathlib</code> can actually be quite manageable and is a sure way to make sure you don't miss anything!</p>",
        "id": 388576486,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1693592136
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"127136\">@Alex J. Best</span>  Thanks of this suggestion. I'm just following the Mathematics in Lean book and the book doesn't do that so I never thought of it.</p>",
        "id": 388576640,
        "sender_full_name": "Adomas Baliuka",
        "timestamp": 1693592192
    },
    {
        "content": "<p>Just of our curiosity, I looked at the proof of <code>succ_sub</code> and it uses <code>le.dest</code> to get existence of  the difference as a <code>Nat</code>, which I would never have thought of (because I haven't read that part of the book yet). It it actually necessary to use something like that, or is it actually also easy using <code>induction</code> and <code>rw</code> but I just failed to find it?</p>",
        "id": 388576950,
        "sender_full_name": "Adomas Baliuka",
        "timestamp": 1693592322
    },
    {
        "content": "<p>Here's a quick proof:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">minus_succ_eq_succ_minus</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">≤</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">Nat.succ</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">Nat.succ</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">-</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">induction</span> <span class=\"n\">n</span> <span class=\"n\">generalizing</span> <span class=\"n\">m</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rfl</span>\n  <span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"n\">n</span> <span class=\"n\">ih</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">cases</span> <span class=\"n\">m</span>\n    <span class=\"bp\">·</span> <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n    <span class=\"bp\">·</span> <span class=\"n\">simp</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">ih</span><span class=\"o\">]</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Nat.succ_le_succ_iff</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n      <span class=\"n\">exact</span> <span class=\"n\">h</span>\n</code></pre></div>",
        "id": 388577479,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1693592525
    },
    {
        "content": "<p>Thanks, I have much to learn :)</p>",
        "id": 388577695,
        "sender_full_name": "Adomas Baliuka",
        "timestamp": 1693592622
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"638715\">ab</span> has marked this topic as resolved.</p>",
        "id": 388577700,
        "sender_full_name": "Notification Bot",
        "timestamp": 1693592626
    },
    {
        "content": "<p>A hint that you need to generalize <code>m</code> is that in the <code>succ</code> case you have <code>succ m - succ n</code>, which simplifies to <code>m - succ n</code>, but the induction hypothesis has <code>succ m - n</code>. Generalizing <code>m</code> decouples the <code>m</code> in your goal from the <code>m</code> in the induction hypothesis, and then you're free to do a little case analysis.</p>",
        "id": 388578342,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1693592860
    }
]