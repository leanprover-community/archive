[
    {
        "content": "<p>Hello everyone,</p>\n<p>Can someone explain to me why in LEAN3, this won't close the goal?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">test</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">-</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n  <span class=\"kd\">begin</span>\n    <span class=\"n\">exact</span> <span class=\"n\">add_sub_cancel'_right</span><span class=\"o\">,</span>\n  <span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 385009471,
        "sender_full_name": "Zahir Bingen",
        "timestamp": 1692078895
    },
    {
        "content": "<p>I do not have a Lean3 at hand now, but this is probably since <code>add_sub_cancel</code> assumes that the ground Type is a group.  The natural numbers are not.  There might be a similar lemma with <code>nat.add_sub_cancel...</code> with some extra inequality to make it true.</p>",
        "id": 385010185,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1692079169
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"321459\">Damiano Testa</span> <a href=\"#narrow/stream/113489-new-members/topic/Usage.20of.20add_sub_cancel'_right/near/385010185\">said</a>:</p>\n<blockquote>\n<p>I do not have a Lean3 at hand now, but this is probably since <code>add_sub_cancel</code> assumes that the ground Type is a group.  The natural numbers are not.  There might be a similar lemma with <code>nat.add_sub_cancel...</code> with some extra inequality to make it true.</p>\n</blockquote>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">test'</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">-</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n  <span class=\"kd\">begin</span>\n    <span class=\"n\">exact</span> <span class=\"n\">nat.add_sub_cancel_left</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n  <span class=\"kd\">end</span>\n</code></pre></div>\n<p>I found this lemma that can proof the statement, but I don't know why it doesn't work when there are parantheses around (b-a), as in the example shown in my first message. Do I need some sort of lemma that eliminates parantheses?</p>",
        "id": 385010961,
        "sender_full_name": "Zahir Bingen",
        "timestamp": 1692079440
    },
    {
        "content": "<p><code>a + (b - a)</code> is not the same as <code>a + b - a</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#eval</span>  <span class=\"c1\">-- (1, 0)</span>\n  <span class=\"k\">let</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n  <span class=\"k\">let</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n  <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">-</span> <span class=\"n\">a</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">-</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>(works with Lean4, maybe also with Lean3)</p>",
        "id": 385011645,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1692079643
    },
    {
        "content": "<p>The lemma to convert between them is probably <a href=\"https://leanprover-community.github.io/mathlib_docs/find/nat.add_sub_assoc\">docs3#nat.add_sub_assoc</a>?</p>",
        "id": 385011861,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1692079697
    },
    {
        "content": "<p>The precedence between operations (<code>+</code> and <code>-</code> in this case) makes Lean parse <code>a + b - a</code> as <code>(a + b) - a</code>.</p>",
        "id": 385012092,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1692079777
    },
    {
        "content": "<p>By the way, are you sure that the code that you pasted works?  <code>exact</code> will want a proof of an inequality that you do not have.</p>",
        "id": 385012279,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1692079829
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"321459\">Damiano Testa</span> <a href=\"#narrow/stream/113489-new-members/topic/Usage.20of.20add_sub_cancel'_right/near/385012279\">said</a>:</p>\n<blockquote>\n<p>By the way, are you sure that the code that you pasted works?  <code>exact</code> will want a proof of an inequality that you do not have.</p>\n</blockquote>\n<p>Yes, the exact closed the goal. </p>\n<p><span class=\"user-mention silent\" data-user-id=\"321459\">Damiano Testa</span> <a href=\"#narrow/stream/113489-new-members/topic/Usage.20of.20add_sub_cancel'_right/near/385011645\">said</a>:</p>\n<blockquote>\n<p><code>a + (b - a)</code> is not the same as <code>a + b - a</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#eval</span>  <span class=\"c1\">-- (1, 0)</span>\n  <span class=\"k\">let</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n  <span class=\"k\">let</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n  <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">-</span> <span class=\"n\">a</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">-</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>(works with Lean4, maybe also with Lean3)</p>\n</blockquote>\n<p>This is something I do not quite understand. Why are they not the same?</p>",
        "id": 385012901,
        "sender_full_name": "Zahir Bingen",
        "timestamp": 1692080045
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"321459\">Damiano Testa</span> <a href=\"#narrow/stream/113489-new-members/topic/Usage.20of.20add_sub_cancel'_right/near/385012092\">said</a>:</p>\n<blockquote>\n<p>The precedence between operations (<code>+</code> and <code>-</code> in this case) makes Lean parse <code>a + b - a</code> as <code>(a + b) - a</code>.</p>\n</blockquote>",
        "id": 385013431,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1692080260
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"321459\">Damiano Testa</span> <a href=\"#narrow/stream/113489-new-members/topic/Usage.20of.20add_sub_cancel'_right/near/385013431\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"321459\">Damiano Testa</span> <a href=\"#narrow/stream/113489-new-members/topic/Usage.20of.20add_sub_cancel'_right/near/385012092\">said</a>:</p>\n<blockquote>\n<p>The precedence between operations (<code>+</code> and <code>-</code> in this case) makes Lean parse <code>a + b - a</code> as <code>(a + b) - a</code>.<br>\n</p>\n</blockquote>\n</blockquote>\n<p>After playing around a bit more, I was able to get it proven. Indeed needed an equality together with <code>nat.add_sub_of_le</code>. Thank you for your help!</p>",
        "id": 385040215,
        "sender_full_name": "Zahir Bingen",
        "timestamp": 1692087893
    },
    {
        "content": "<p>A message was moved from this topic to <a class=\"stream-topic\" data-stream-id=\"113489\" href=\"/#narrow/stream/113489-new-members/topic/Starting.20induction.20at.201\">#new members &gt; Starting induction at 1</a> by <span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span>.</p>",
        "id": 385048183,
        "sender_full_name": "Notification Bot",
        "timestamp": 1692089785
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"618701\">Zahir Bingen</span> has marked this topic as resolved.</p>",
        "id": 385273848,
        "sender_full_name": "Notification Bot",
        "timestamp": 1692127480
    }
]