[
    {
        "content": "<p>In lean, I know that to check whether a proof <code>pr</code> depends on a choice axiom, just run <code>#print axioms pr</code> and see if its output contains <code>Classical.choice</code>.</p>\n<p>Is it possible to define a command that would result in an error if the proof term <code>pr</code> depends on <code>Classical.choice</code>? (If the proof term <code>pr</code> does not depend on <code>Classical.choice</code>, the output of the command must also be error-free.)</p>\n<p>I don't mind if meta-programming is required.</p>",
        "id": 403747926,
        "sender_full_name": "Asei Inoue",
        "timestamp": 1700731418
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> and I already talked about a possible <code>@[intuit]</code> attribute.</p>",
        "id": 403757982,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1700734607
    },
    {
        "content": "<p>Mario already wrote one in lean 3</p>",
        "id": 403758071,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1700734633
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/pull/10954\">!3#10954</a></p>",
        "id": 403758181,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1700734676
    },
    {
        "content": "<p>I wrote such a command based on the implementation of <code>#print axioms</code>:</p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>'#detect_classical' command</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Meta</span> <span class=\"n\">Elab</span> <span class=\"n\">Command</span>\n\n<span class=\"kn\">private</span> <span class=\"kd\">def</span> <span class=\"n\">detectClassicalOf</span> <span class=\"o\">(</span><span class=\"n\">constName</span> <span class=\"o\">:</span> <span class=\"n\">Name</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">CommandElabM</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">env</span> <span class=\"bp\">←</span> <span class=\"n\">getEnv</span>\n  <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">((</span><span class=\"n\">CollectAxioms.collect</span> <span class=\"n\">constName</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">run</span> <span class=\"n\">env</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">run</span> <span class=\"o\">{}</span>\n  <span class=\"k\">if</span> <span class=\"n\">s.axioms.isEmpty</span> <span class=\"k\">then</span>\n    <span class=\"n\">logInfo</span> <span class=\"n\">m</span><span class=\"bp\">!</span><span class=\"s2\">\"'{constName}' does not depend on any axioms\"</span>\n  <span class=\"k\">else</span>\n    <span class=\"k\">let</span> <span class=\"n\">caxes</span> <span class=\"o\">:=</span> <span class=\"n\">s.axioms.filter</span> <span class=\"k\">fun</span> <span class=\"n\">nm</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Name.isPrefixOf</span> <span class=\"bp\">`</span><span class=\"n\">Classical</span> <span class=\"n\">nm</span>\n    <span class=\"k\">if</span> <span class=\"n\">caxes.isEmpty</span> <span class=\"k\">then</span>\n      <span class=\"n\">logInfo</span> <span class=\"n\">m</span><span class=\"bp\">!</span><span class=\"s2\">\"'{constName}' is non-classical and depends on axioms: {s.axioms.toList}\"</span>\n    <span class=\"k\">else</span>\n      <span class=\"n\">throwError</span> <span class=\"n\">m</span><span class=\"bp\">!</span><span class=\"s2\">\"'{constName}' depends on classical axioms: {caxes.toList}\"</span>\n\n<span class=\"n\">syntax</span> <span class=\"o\">(</span><span class=\"n\">name</span><span class=\"o\">:=</span><span class=\"n\">detectClassical</span><span class=\"o\">)</span> <span class=\"s2\">\"#detect_classical \"</span> <span class=\"n\">ident</span> <span class=\"o\">:</span> <span class=\"n\">command</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">command_elab</span> <span class=\"bp\">«</span><span class=\"n\">detectClassical</span><span class=\"bp\">»</span><span class=\"kd\">]</span> <span class=\"kd\">def</span> <span class=\"n\">elabDetectClassical</span> <span class=\"o\">:</span> <span class=\"n\">CommandElab</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">#</span><span class=\"n\">detect_classical</span><span class=\"bp\">%$</span><span class=\"n\">tk</span> <span class=\"bp\">$</span><span class=\"n\">id</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">withRef</span> <span class=\"n\">tk</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">cs</span> <span class=\"bp\">←</span> <span class=\"n\">resolveGlobalConstWithInfos</span> <span class=\"n\">id</span>\n    <span class=\"n\">cs.forM</span> <span class=\"n\">detectClassicalOf</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">throwUnsupportedSyntax</span>\n\n<span class=\"c\">/-</span>\n<span class=\"cm\">Info:</span>\n<span class=\"cm\">&gt; 'Nat.add' does not depend on any axioms</span>\n<span class=\"cm\">-/</span>\n<span class=\"bp\">#</span><span class=\"n\">detect_classical</span> <span class=\"n\">Nat.add</span>\n\n<span class=\"c\">/-</span>\n<span class=\"cm\">Info:</span>\n<span class=\"cm\">&gt; 'Nat.div_add_mod' is non-classical and depends on axioms: [propext]</span>\n<span class=\"cm\">-/</span>\n<span class=\"bp\">#</span><span class=\"n\">detect_classical</span> <span class=\"n\">Nat.div_add_mod</span>\n\n<span class=\"c\">/-</span>\n<span class=\"cm\">Error:</span>\n<span class=\"cm\">&gt; 'Nat.log2' depends on classical axioms: [Classical.choice]</span>\n<span class=\"cm\">-/</span>\n<span class=\"bp\">#</span><span class=\"n\">detect_classical</span> <span class=\"n\">Nat.log2</span>\n</code></pre></div>\n</div></div>\n<p>Actually, the code of <code>#print axioms</code> (i.e. <code>Lean.Elab.Command.elabPrintAxioms</code>) is straightforward and easy to read.<br>\nI think it is a good entry-point into the metaprogramming ocean besides tactics.</p>",
        "id": 403799144,
        "sender_full_name": "Jun Yoshida",
        "timestamp": 1700749515
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span> <span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> <span class=\"user-mention\" data-user-id=\"433695\">@Jun Yoshida</span>  Thanks.</p>",
        "id": 403912581,
        "sender_full_name": "Asei Inoue",
        "timestamp": 1700810272
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"626349\">Asei Inoue</span> has marked this topic as resolved.</p>",
        "id": 403932575,
        "sender_full_name": "Notification Bot",
        "timestamp": 1700818950
    }
]