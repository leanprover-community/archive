[
    {
        "content": "<p>What's the issue here?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.Module.Basic</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">AddCommGroup</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Module</span> <span class=\"n\">F</span> <span class=\"n\">V</span><span class=\"o\">]</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">a</span><span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">}:</span> <span class=\"bp\">-</span><span class=\"mi\">1</span> <span class=\"bp\">•</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span><span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">neg_one_smul</span> <span class=\"n\">a</span>\n</code></pre></div>\n<p>I get a universe issue with <code>a</code></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">application</span> <span class=\"n\">type</span> <span class=\"n\">mismatch</span>\n  <span class=\"bp\">@</span><span class=\"n\">neg_one_smul</span> <span class=\"n\">a</span>\n<span class=\"n\">argument</span>\n  <span class=\"n\">a</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">?</span><span class=\"n\">u.718</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"kt\">Type</span> <span class=\"bp\">?</span><span class=\"n\">u.2678</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">u.2678</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>Being explicit about the universes of <code>F</code> and <code>V</code> doesn't work either...</p>",
        "id": 406419600,
        "sender_full_name": "Arien Malec",
        "timestamp": 1701911209
    },
    {
        "content": "<p>According to <code>by exact?</code> you should use <code>neg_one_zsmul</code> instead of <code>neg_one_smul</code>. I believe the error message represents not a universe issue but a unification issue. Or perhaps you mean to cast the <code>-1</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"bp\">•</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span><span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">neg_one_smul</span> <span class=\"n\">F</span> <span class=\"n\">a</span>\n</code></pre></div>",
        "id": 406420176,
        "sender_full_name": "llllvvuu",
        "timestamp": 1701911518
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">AddCommGroup</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Module</span> <span class=\"n\">F</span> <span class=\"n\">V</span><span class=\"o\">]</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">a</span><span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">}:</span> <span class=\"bp\">-</span><span class=\"mi\">1</span> <span class=\"bp\">•</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span><span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">neg_one_smul</span> <span class=\"n\">ℤ</span> <span class=\"n\">a</span>\n</code></pre></div>",
        "id": 406420371,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1701911617
    },
    {
        "content": "<p>The ring type parameter (ℤ) of neg_one_smul is not implicit. That's the error</p>",
        "id": 406420481,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1701911666
    },
    {
        "content": "<p>I suspect you mean what <span class=\"user-mention\" data-user-id=\"607118\">@llllvvuu</span> wrote, but in your statement, the {a : V} doesn't affect that the type of (-1) is inferred <code>ℤ</code> since it is a negated numeric literal.</p>",
        "id": 406420780,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1701911817
    },
    {
        "content": "<p>Huh... This works:</p>\n<p><code>example {a: V}: (-1 : F) • a = -a := neg_one_smul F a</code></p>",
        "id": 406420795,
        "sender_full_name": "Arien Malec",
        "timestamp": 1701911825
    },
    {
        "content": "<p>Ah, which is what <span class=\"user-mention\" data-user-id=\"607118\">@llllvvuu</span> wrote...</p>",
        "id": 406420932,
        "sender_full_name": "Arien Malec",
        "timestamp": 1701911876
    },
    {
        "content": "<p>I guess I don't understand why <code>R</code> is explicit and <code>M</code> is implicit here...</p>",
        "id": 406421191,
        "sender_full_name": "Arien Malec",
        "timestamp": 1701911953
    },
    {
        "content": "<p><code>M</code> is inferred from <code>a</code> which is inferred from <code>{a : V}</code></p>",
        "id": 406421408,
        "sender_full_name": "llllvvuu",
        "timestamp": 1701912080
    },
    {
        "content": "<p>It's intentional, or at least seems so:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">R</span><span class=\"o\">)</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">neg_one_smul</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">•</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span><span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span>\n<span class=\"bp\">#</span><span class=\"n\">align</span> <span class=\"n\">neg_one_smul</span> <span class=\"n\">neg_one_smul</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">R</span><span class=\"o\">}</span>\n</code></pre></div>",
        "id": 406421414,
        "sender_full_name": "Arien Malec",
        "timestamp": 1701912086
    },
    {
        "content": "<p>The reason most likely is that, if I were to have <code>neg_one_smul a</code> in a vacuum, it would be ambiguous what the return type should be</p>",
        "id": 406421517,
        "sender_full_name": "llllvvuu",
        "timestamp": 1701912143
    },
    {
        "content": "<p>I see this is a common pattern in the <code>foo_smul</code> theorems. I guess I could naively expect an error that the inferred type of <code>-1</code> doesn't match the module's type, but I'd expect that specifying that type would Just Work rather than having to specify it twice. <span aria-label=\"man shrugging\" class=\"emoji emoji-1f937-200d-2642\" role=\"img\" title=\"man shrugging\">:man_shrugging:</span></p>",
        "id": 406427877,
        "sender_full_name": "Arien Malec",
        "timestamp": 1701915483
    },
    {
        "content": "<p>Weirdly I can make <code>R</code> implicit and recompile Mathlib with no issues...</p>",
        "id": 406429438,
        "sender_full_name": "Arien Malec",
        "timestamp": 1701915834
    },
    {
        "content": "<p>And when I do so, the code above works... <code>-1</code> is naively inferred as ℤ which works, but if I specify <code>F</code>, it also works correctly.</p>",
        "id": 406430458,
        "sender_full_name": "Arien Malec",
        "timestamp": 1701916035
    },
    {
        "content": "<p>Not all carefully chosen arguments are used in mathlib, but here the intent is certainly to keep the argument explicit.</p>",
        "id": 406485112,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1701934950
    }
]