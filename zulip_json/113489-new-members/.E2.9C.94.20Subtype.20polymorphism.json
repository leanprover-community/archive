[
    {
        "content": "<p>Is there a way how to use a term of a subtype in place of an argument expecting a term of its parent type without having to write <code>subtype.val</code> in front of the term? I hope Lean has this automatic conversion (or rather, subtype polymorphism).</p>",
        "id": 270436414,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1643827199
    },
    {
        "content": "<p>x.val or x.1 ?</p>",
        "id": 270436919,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1643827402
    },
    {
        "content": "<p>You can write <code>(x : the_parent_type)</code></p>",
        "id": 270437890,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1643827863
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"224323\">Junyan Xu</span> <a href=\"#narrow/stream/113489-new-members/topic/Subtype.20polymorphism/near/270436919\">said</a>:</p>\n<blockquote>\n<p>x.val or x.1 ?</p>\n</blockquote>\n<p>OK, that is better than <code>subtype.val x</code> but still not what I wanted.</p>",
        "id": 270437948,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1643827893
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113489-new-members/topic/Subtype.20polymorphism/near/270437890\">said</a>:</p>\n<blockquote>\n<p>You can write <code>(x : the_parent_type)</code></p>\n</blockquote>\n<p>And can it be inferred automatically? When I write the term in a position of argument of type <code>the_parent_type</code> please?</p>",
        "id": 270438074,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1643827945
    },
    {
        "content": "<p>Did you try it? Works fine for me in this example</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"n\">id</span>\n<span class=\"kd\">def</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">4</span> <span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">refl</span><span class=\"o\">⟩</span>\n<span class=\"k\">#check</span> <span class=\"n\">foo</span> <span class=\"n\">t</span>\n</code></pre></div>",
        "id": 270438945,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1643828328
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"127136\">Alex J. Best</span> <a href=\"#narrow/stream/113489-new-members/topic/Subtype.20polymorphism/near/270438945\">said</a>:</p>\n<blockquote>\n<p>Did you try it? Works fine for me in this example</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"n\">id</span>\n<span class=\"kd\">def</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">4</span> <span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">refl</span><span class=\"o\">⟩</span>\n<span class=\"k\">#check</span> <span class=\"n\">foo</span> <span class=\"n\">t</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>Your code works on my computer. However, when I do an analogous thing with my types, it doesn't work. Let me play with it for a while; if I don't manage to make it work in the same way, I will create a MWE from my code.</p>",
        "id": 270440522,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1643828916
    },
    {
        "content": "<p>It stops working when I name the subtype.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"n\">id</span>\n<span class=\"kd\">def</span> <span class=\"n\">sqrt4</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">4</span> <span class=\"o\">}</span>\n<span class=\"kd\">def</span> <span class=\"n\">two</span> <span class=\"o\">:</span> <span class=\"n\">sqrt4</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">refl</span><span class=\"o\">⟩</span>\n<span class=\"k\">#check</span> <span class=\"n\">foo</span> <span class=\"n\">two</span>\n</code></pre></div>\n<p>Did I do anything wrong?</p>",
        "id": 270441019,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1643829107
    },
    {
        "content": "<p>When you make a new definition then by default typeclasses (such as has_coe) won't carry over to the new type.<br>\nYou could make <code>@[reducible] def sqrt4</code>, or define a coercion from <code>nat</code> to <code>sqrt4</code> in this case.</p>",
        "id": 270441323,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1643829233
    },
    {
        "content": "<p>Works like magic!! Thanks a lot!!!!</p>",
        "id": 270444581,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1643830499
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"417654\">Martin Dvořák</span> has marked this topic as resolved.</p>",
        "id": 270444725,
        "sender_full_name": "Notification Bot",
        "timestamp": 1643830554
    },
    {
        "content": "<p>We should make the coercion from subtype to parent type a def that people should be able to just invoke ad hoc in s specialized way if they want</p>",
        "id": 270448343,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1643832015
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"308899\">Yakov Pechersky</span> <a href=\"#narrow/stream/113489-new-members/topic/.E2.9C.94.20Subtype.20polymorphism/near/270448343\">said</a>:</p>\n<blockquote>\n<p>We should make the coercion from subtype to parent type a def that people should be able to just invoke ad hoc in s specialized way if they want</p>\n</blockquote>\n<p>Do you want it to be implicit for all subtypes, without adding <code>@[reducible]</code> to it?</p>",
        "id": 270449000,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1643832282
    },
    {
        "content": "<p>I think the whole point of non-reducible subtypes is for when you don't want the user to know that it's a subtype - think of it like <code>class sqrt4 : private subtype&lt;...&gt;</code> in C++.</p>",
        "id": 270464104,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1643838830
    },
    {
        "content": "<p>The line between <code>semireducible</code> and <code>irreducible</code> blurs the analogy a bit.</p>",
        "id": 270464229,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1643838882
    }
]