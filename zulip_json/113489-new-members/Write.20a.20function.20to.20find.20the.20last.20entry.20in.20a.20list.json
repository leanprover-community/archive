[
    {
        "content": "<p>Hi,</p>\n<p>I am trying to solve the Exercises in </p>\n<p><a href=\"https://lean-lang.org/functional_programming_in_lean/getting-to-know/polymorphism.html#exercises\">https://lean-lang.org/functional_programming_in_lean/getting-to-know/polymorphism.html#exercises</a></p>\n<p>The first one is \"Write a function to find the last entry in a list. It should return an Option.\"</p>\n<p>Is this a good solution?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">last</span> <span class=\"o\">{</span><span class=\"n\">α</span>  <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">xs</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Option</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">xs</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">none</span>\n  <span class=\"bp\">|</span> <span class=\"n\">ls</span> <span class=\"o\">::</span> <span class=\"o\">[]</span>  <span class=\"bp\">=&gt;</span> <span class=\"n\">some</span> <span class=\"n\">ls</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"o\">::</span> <span class=\"n\">tail</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">last</span> <span class=\"o\">(</span><span class=\"n\">tail</span><span class=\"o\">)</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">last</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">2</span><span class=\"o\">,</span><span class=\"mi\">3</span><span class=\"o\">]</span>\n<span class=\"k\">#eval</span> <span class=\"n\">last</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">2</span><span class=\"o\">]</span>\n<span class=\"k\">#eval</span> <span class=\"n\">last</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">]</span>\n<span class=\"k\">#eval</span> <span class=\"n\">last</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">Int</span><span class=\"o\">)</span> <span class=\"o\">[]</span>\n</code></pre></div>",
        "id": 404925920,
        "sender_full_name": "Adolfo Neto",
        "timestamp": 1701282133
    },
    {
        "content": "<p>Looks good to me.</p>\n<p>Just changing the syntax a little, you could also write this as</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">last</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">xs</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Option</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">xs</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">none</span>\n  <span class=\"bp\">|</span> <span class=\"o\">[</span><span class=\"n\">ls</span><span class=\"o\">]</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">some</span> <span class=\"n\">ls</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"o\">::</span> <span class=\"n\">tail</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">last</span> <span class=\"n\">tail</span>\n</code></pre></div>",
        "id": 404927608,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1701282784
    },
    {
        "content": "<p>Here's another style you might see:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">last</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">Option</span> <span class=\"n\">α</span>\n  <span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">none</span>\n  <span class=\"bp\">|</span> <span class=\"o\">[</span><span class=\"n\">ls</span><span class=\"o\">]</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">some</span> <span class=\"n\">ls</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"o\">::</span> <span class=\"n\">tail</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">last</span> <span class=\"n\">tail</span>\n</code></pre></div>\n<p>It's completely equivalent.</p>",
        "id": 404927968,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1701282911
    },
    {
        "content": "<p>Thanks, <span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span>!</p>",
        "id": 404960687,
        "sender_full_name": "Adolfo Neto",
        "timestamp": 1701296845
    },
    {
        "content": "<p>To use <code>last</code> with an empty list, do I really have to add <code>(α := Int)</code>?</p>",
        "id": 404961106,
        "sender_full_name": "Adolfo Neto",
        "timestamp": 1701297033
    },
    {
        "content": "<p>You can also write <code>last ([] : List Int)</code></p>",
        "id": 404961201,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1701297081
    },
    {
        "content": "<p>Thanks, <span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span>!</p>",
        "id": 404961298,
        "sender_full_name": "Adolfo Neto",
        "timestamp": 1701297123
    }
]