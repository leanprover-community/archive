[
    {
        "content": "<p>What's this weird syntax?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">class</span> <span class=\"n\">ideal</span><span class=\"bp\">.</span><span class=\"n\">is_principal</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">ideal</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">principal</span> <span class=\"o\">[]</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">S</span> <span class=\"bp\">=</span> <span class=\"n\">span</span> <span class=\"o\">{</span><span class=\"n\">a</span><span class=\"o\">})</span>\n</pre></div>",
        "id": 195494762,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588038811
    },
    {
        "content": "<p>Weird. It changes the brackets around <code>S : ideal α</code> from <code>{}</code> to <code>()</code></p>",
        "id": 195494965,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1588039064
    },
    {
        "content": "<p>This is a recent change</p>",
        "id": 195495016,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588039111
    },
    {
        "content": "<p>it used to be that this was the default and the new default was denoted <code>{}</code></p>",
        "id": 195495024,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588039132
    },
    {
        "content": "<p>Oh, this line was changed when mathlib moved to 3.8.0, I see yes</p>",
        "id": 195495025,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588039135
    },
    {
        "content": "<p>I'm not really sure how I feel about this syntax (I assumed it would make something an instance argument, if anything?) but I will say I could never predict which variables would be implicit in the field extractors!</p>",
        "id": 195495052,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588039194
    },
    {
        "content": "<p>with the <code>[]</code> mode you get parameters being explicit if they cannot be inferred from the arguments, as in regular theorems</p>",
        "id": 195495096,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588039206
    },
    {
        "content": "<p>with <code>{}</code> (default) mode all parameters are implicit</p>",
        "id": 195495100,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588039224
    },
    {
        "content": "<p>I'm not a big fan of the <code>[]</code> notation but I don't really have a better suggestion</p>",
        "id": 195495113,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588039269
    },
    {
        "content": "<p>maybe <code>{{}}</code>?</p>",
        "id": 195495119,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588039285
    },
    {
        "content": "<p><code>()</code>?</p>",
        "id": 195495121,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588039296
    },
    {
        "content": "<p>that's a third mode</p>",
        "id": 195495125,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588039304
    },
    {
        "content": "<p>I see</p>",
        "id": 195495131,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588039313
    },
    {
        "content": "<p>that makes everything explicit IIRC</p>",
        "id": 195495132,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588039313
    },
    {
        "content": "<p>Maybe make it the default behaviour?</p>",
        "id": 195495135,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1588039319
    },
    {
        "content": "<p>did that always exist?</p>",
        "id": 195495155,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588039322
    },
    {
        "content": "<p>it was the default behavior</p>",
        "id": 195495174,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588039329
    },
    {
        "content": "<p>yes, it's always been there</p>",
        "id": 195495180,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588039339
    },
    {
        "content": "<p>Here's the PR: <a href=\"https://github.com/leanprover-community/lean/issues/175\" title=\"https://github.com/leanprover-community/lean/issues/175\">lean#175</a></p>",
        "id": 195495181,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1588039339
    },
    {
        "content": "<p>You can't write <code>()</code> because of parser shenanigans, it has to be <code>( )</code></p>",
        "id": 195495191,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588039356
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113489-new-members/topic/.5B.5D.20in.20class.20syntax/near/195495174\" title=\"#narrow/stream/113489-new-members/topic/.5B.5D.20in.20class.20syntax/near/195495174\">said</a>:</p>\n<blockquote>\n<p>it was the default behavior</p>\n</blockquote>\n<p>Actually, there was no explicit way to use the default behavior.  Both <code>( )</code> and <code>{}</code> are different from the old default (please read the PR for a full description). Writing <code>[]</code> uses the old default.  I used <code>[]</code> because it doesn't clash with <code>{}</code> or <code>( )</code>, and frankly, none of them work like implicit arguments.</p>",
        "id": 195528852,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1588059914
    },
    {
        "content": "<p>Can someone explain a bit about the [] here?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">horizontalCmp₀</span> <span class=\"o\">{</span><span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">w</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">w</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">w</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"bp\">Φ</span> <span class=\"o\">:</span> <span class=\"n\">horizontalCmp</span> <span class=\"n\">T</span> <span class=\"n\">S</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">T</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"o\">:=</span> <span class=\"bp\">Φ.</span><span class=\"n\">φ</span> <span class=\"n\">t</span> <span class=\"n\">s</span>\n</code></pre></div>\n<p>How is [] different from {}?</p>",
        "id": 340273448,
        "sender_full_name": "Dean Young",
        "timestamp": 1678255087
    },
    {
        "content": "<p>Ok so it infers unless it can't ... but how does it know not to infer it? Just by the number of arguments the user supplies?</p>",
        "id": 340273632,
        "sender_full_name": "Dean Young",
        "timestamp": 1678255232
    },
    {
        "content": "<p>{} arguments are usually infered by unification, [] arguments are usually inferred by class inference (i.e. an <code>instance</code> will be used if it can be found). Both can be specified by prefixing the identifier with <code>@</code> (<code>@horizontalCmp₀ T S R Φ t s</code> will specify all arguments). In lean4 you can specify individual \"optional arguments\" by name, but I believe you are using lean3, so this will not be possible.</p>",
        "id": 340280429,
        "sender_full_name": "Calvin Lee",
        "timestamp": 1678258479
    },
    {
        "content": "<p>I'm using Lean 4 actually. How do you do that?</p>",
        "id": 340292605,
        "sender_full_name": "Dean Young",
        "timestamp": 1678263351
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/lean4/blob/master/doc/lean3changes.md#function-applications\">https://github.com/leanprover/lean4/blob/master/doc/lean3changes.md#function-applications</a></p>",
        "id": 340300079,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1678265723
    },
    {
        "content": "<p>PS: I am not a fan of using named arguments when calling a function, but it is an option.</p>",
        "id": 340300283,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1678265792
    }
]