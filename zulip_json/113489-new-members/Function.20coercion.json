[
    {
        "content": "<p>There does not seem such a coercion but why not? Even more weird, a function from A to \\N cannot be coerced to a function from A to \\R! I don't understand why not.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">Ω</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"bp\">Ω</span><span class=\"o\">)</span>\n<span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"c1\">-- works</span>\n<span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">Ω</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"c1\">-- does not work</span>\n</code></pre></div>",
        "id": 401903889,
        "sender_full_name": "Vasily Ilin",
        "timestamp": 1699936110
    },
    {
        "content": "<p>Automatic coercion of everything that <em>might</em> be useful isn't necessarily a good idea</p>",
        "id": 401946961,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1699955557
    },
    {
        "content": "<p>In math we usually don't even distinguish between mapping into naturals and reals, or between mapping into X and Y where X is a subtype of Y. So why not have this coercion in Lean?</p>",
        "id": 402399114,
        "sender_full_name": "Vasily Ilin",
        "timestamp": 1700118075
    },
    {
        "content": "<p>Because it might produce poor performance and unexpected results.</p>",
        "id": 402411755,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1700123001
    },
    {
        "content": "<p>If you want to know how to do this coercion manually, usually you'll see something like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">Ω</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>or this</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#check</span> <span class=\"o\">((</span><span class=\"bp\">↑</span><span class=\"o\">)</span> <span class=\"bp\">∘</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">Ω</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 402541046,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1700163010
    },
    {
        "content": "<p>Ohhh, wrapping it in a lambda expression, I see! What about a SimpleFunc?</p>",
        "id": 402845176,
        "sender_full_name": "Vasily Ilin",
        "timestamp": 1700292471
    }
]