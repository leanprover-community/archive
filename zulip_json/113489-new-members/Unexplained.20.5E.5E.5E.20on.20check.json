[
    {
        "content": "<p>For this code in Lean 4:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">Even</span> <span class=\"n\">where</span>\n  <span class=\"n\">twice</span> <span class=\"o\">::</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">Plus</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">plus</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Nat.plus</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">k</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">k</span>\n  <span class=\"bp\">|</span> <span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">k</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">n.plus</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Even.plus</span> <span class=\"o\">:</span> <span class=\"n\">Even</span> <span class=\"bp\">→</span> <span class=\"n\">Even</span> <span class=\"bp\">→</span> <span class=\"n\">Even</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Even.twice</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">Even.twice</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Even.twice</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Plus</span> <span class=\"n\">Even</span> <span class=\"n\">where</span>\n  <span class=\"n\">plus</span> <span class=\"o\">:=</span> <span class=\"n\">Even.plus</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Add</span> <span class=\"n\">Even</span> <span class=\"n\">where</span>\n  <span class=\"n\">add</span> <span class=\"o\">:=</span> <span class=\"n\">Even.plus</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Even.toNat</span> <span class=\"o\">:</span> <span class=\"n\">Even</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Even.twice</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"mi\">2</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">ToString</span> <span class=\"n\">Even</span> <span class=\"n\">where</span>\n  <span class=\"n\">toString</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">toString</span> <span class=\"o\">(</span><span class=\"n\">x.toNat</span><span class=\"o\">)</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">OfNat</span> <span class=\"n\">Even</span> <span class=\"n\">Nat.zero</span> <span class=\"n\">where</span>\n  <span class=\"n\">ofNat</span> <span class=\"o\">:=</span> <span class=\"n\">Even.twice</span> <span class=\"n\">Nat.zero</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">OfNat</span> <span class=\"n\">Even</span> <span class=\"n\">x</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">OfNat</span> <span class=\"n\">Even</span> <span class=\"o\">(</span><span class=\"n\">Nat.succ</span> <span class=\"o\">(</span><span class=\"n\">Nat.succ</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"n\">where</span>\n  <span class=\"n\">ofNat</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">Even.twice</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">((</span><span class=\"bp\">@</span><span class=\"n\">OfNat.ofNat</span> <span class=\"n\">Even</span><span class=\"o\">)</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n\n<span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">OfNat.ofNat</span> <span class=\"n\">Even</span><span class=\"o\">)</span>\n\n<span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">:</span><span class=\"n\">Even</span><span class=\"o\">)</span>\n<span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"n\">Even</span><span class=\"o\">)</span> <span class=\"c1\">-- expected to fail</span>\n<span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"o\">:</span><span class=\"n\">Even</span><span class=\"o\">)</span>\n<span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"mi\">3</span><span class=\"o\">:</span><span class=\"n\">Even</span><span class=\"o\">)</span> <span class=\"c1\">-- expected to fail</span>\n<span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"mi\">4</span><span class=\"o\">:</span><span class=\"n\">Even</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>The <code>#check</code>s which are not marked \"expected to file\" work fine.  However, they are underlined with ^^^.   \"View problem\" gives no text.  What is happening?  I did a <code>lake exe cache get</code> and <code>lake build</code> so I think I have the latest Mathlib 4.  Attached is a screenshot showing the problem.   At one point I got the tooltip to tell me that there was some problem with the definition of <code>#check</code> but I wasn't able to get that message back subsequently.<br>\n<a href=\"/user_uploads/3121/sGmc7gq24YYQrWNkcQDjr6Zl/Screenshot-from-2023-07-16-10-10-35.png\">Screenshot-from-2023-07-16-10-10-35.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/sGmc7gq24YYQrWNkcQDjr6Zl/Screenshot-from-2023-07-16-10-10-35.png\" title=\"Screenshot-from-2023-07-16-10-10-35.png\"><img src=\"/user_uploads/3121/sGmc7gq24YYQrWNkcQDjr6Zl/Screenshot-from-2023-07-16-10-10-35.png\"></a></div>",
        "id": 375766385,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1689516678
    },
    {
        "content": "<p>They do fail. Look at the infoview. It says <code>failed to synthesize instance</code>.</p>",
        "id": 375766668,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1689516759
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span> that is for lines 35 and 37 which are the ones marked \"expected to file\".    Here is a shorter version:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">Even</span> <span class=\"n\">where</span>\n  <span class=\"n\">twice</span> <span class=\"o\">::</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">OfNat</span> <span class=\"n\">Even</span> <span class=\"n\">Nat.zero</span> <span class=\"n\">where</span>\n  <span class=\"n\">ofNat</span> <span class=\"o\">:=</span> <span class=\"n\">Even.twice</span> <span class=\"n\">Nat.zero</span>\n\n<span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">OfNat.ofNat</span> <span class=\"n\">Even</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>You can see that in the attached screenshot, the <code>#check</code> is underlined, and it says \"1 of 1 problem\", however with no error message or diagnostic explainining that it thinks is a problem, and in the InfoView, we see a type on line 7 and no indication of a problem.<br>\n<a href=\"/user_uploads/3121/i4ysWIkvxX9F0A_kJ9U0ueun/Screenshot-from-2023-07-16-10-59-21.png\">Screenshot-from-2023-07-16-10-59-21.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/i4ysWIkvxX9F0A_kJ9U0ueun/Screenshot-from-2023-07-16-10-59-21.png\" title=\"Screenshot-from-2023-07-16-10-59-21.png\"><img src=\"/user_uploads/3121/i4ysWIkvxX9F0A_kJ9U0ueun/Screenshot-from-2023-07-16-10-59-21.png\"></a></div>",
        "id": 375780755,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1689519652
    },
    {
        "content": "<p>In your first screenshot, if you put your cursor where the red underlines are (on <code>1</code> and <code>3</code>) then you'll see the errors are there. Errors aren't reported on the <code>#check</code> token itself, but where the error actually is.</p>",
        "id": 375782898,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1689520109
    },
    {
        "content": "<p>Notice in \"all messages\" it says you have an error at <code>35:8</code>, which means line 35 column 8</p>",
        "id": 375783289,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1689520189
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span>  please see the screenshot for the shorter reproducing example, line 7.    No errors are indicated in the infoview.   The <code>#check</code> is underlined with <em>blue</em> ^^^.  Clicking \"Show Problem\" indicates a problem with the <code>#check</code>, with no diagnosis.  Here is the text to reproduce the example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">Even</span> <span class=\"n\">where</span>\n  <span class=\"n\">twice</span> <span class=\"o\">::</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">OfNat</span> <span class=\"n\">Even</span> <span class=\"n\">Nat.zero</span> <span class=\"n\">where</span>\n  <span class=\"n\">ofNat</span> <span class=\"o\">:=</span> <span class=\"n\">Even.twice</span> <span class=\"n\">Nat.zero</span>\n\n<span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">OfNat.ofNat</span> <span class=\"n\">Even</span><span class=\"o\">)</span>\n</code></pre></div>\n<p><a href=\"/user_uploads/3121/RqvYR5O_dKqshnFbMVHiFtqy/Screenshot-from-2023-07-16-11-27-08.png\">Screenshot-from-2023-07-16-11-27-08.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/RqvYR5O_dKqshnFbMVHiFtqy/Screenshot-from-2023-07-16-11-27-08.png\" title=\"Screenshot-from-2023-07-16-11-27-08.png\"><img src=\"/user_uploads/3121/RqvYR5O_dKqshnFbMVHiFtqy/Screenshot-from-2023-07-16-11-27-08.png\"></a></div><p>My question is just why I am seeing blue ^^^^s under the #check when nothing is wrong.</p>",
        "id": 375788375,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1689521417
    },
    {
        "content": "<p>Blue underline means there's an info attached to it in the infoview (here the <code>OfNat.ofNat : (x : ℕ) → [self : OfNat Even x] → Even</code>)</p>",
        "id": 375788900,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1689521563
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span> in the blue case it would be less confusing if \"View problem.  No quick fixes available\" was not displayed.</p>",
        "id": 375789281,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1689521666
    },
    {
        "content": "<p>Agreed. Not sure what manages the right click context though.</p>",
        "id": 375789829,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1689521826
    }
]