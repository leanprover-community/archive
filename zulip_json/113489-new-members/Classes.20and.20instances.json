[
    {
        "content": "<p>Hi, I'm trying to learn the use of classes in lean3. But I get a \"failed to synthesize\" error.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.order.field.basic</span>\n\n<span class=\"kd\">noncomputable theory</span>\n\n<span class=\"kd\">constant</span> <span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n\n<span class=\"kd\">@[instance]</span> <span class=\"kd\">axiom</span> <span class=\"n\">P_is_poset</span> <span class=\"o\">:</span> <span class=\"n\">linear_ordered_field</span> <span class=\"n\">R</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">my</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Icc</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">R</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"bp\">|</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span> <span class=\"bp\">∧</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span><span class=\"o\">}</span>\n\n<span class=\"kd\">@[class]</span> <span class=\"kd\">def</span> <span class=\"n\">has_max</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">∃</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">,</span> <span class=\"n\">b</span> <span class=\"bp\">∈</span> <span class=\"n\">A</span> <span class=\"bp\">∧</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span>\n<span class=\"kd\">def</span> <span class=\"n\">max</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">has_max</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"n\">classical.some</span> <span class=\"n\">h</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">icc_has_max</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">has_max</span> <span class=\"o\">(</span><span class=\"n\">Icc</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">icc_max</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">max</span> <span class=\"o\">(</span><span class=\"n\">Icc</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"c1\">-- failed to synthesize type class instance for</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">has_max</span> <span class=\"o\">(</span><span class=\"n\">Icc</span> <span class=\"mi\">0</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">my</span>\n</code></pre></div>\n<p>I tried defining <code>Icc</code> in the following way</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">Icc</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">P</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">...</span>\n</code></pre></div>\n<p>But then simple props such as <code>has_max (Icc 0 1)</code> becomes complicated to write.</p>\n<p>I was wondering what do you think is the best way to fix this?</p>",
        "id": 358136971,
        "sender_full_name": "Roy Shmueli",
        "timestamp": 1683995201
    },
    {
        "content": "<p>You cut the error right before the interesting bit!</p>",
        "id": 358137406,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1683995396
    },
    {
        "content": "<p>What is the line after \"failed to synthesize typeclass instance for\"?</p>",
        "id": 358137519,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1683995425
    },
    {
        "content": "<p>But here I know the answer directly: Your <code>icc_has_max</code> instance can't be used by typeclass inference (the mechanism that finds the instances) because it has an argument <code>a &lt; b</code> which is not a class.</p>",
        "id": 358137826,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1683995528
    },
    {
        "content": "<p>There are two solutions: Either make <code>&lt;</code> a class (bad idea, I can tell you), or replace <code>(h : a &lt; b)</code> by <code>[fact (a &lt; b)]</code> where <a href=\"https://leanprover-community.github.io/mathlib_docs/find/fact\">docs#fact</a> wraps any proposition you want into a typeclass.</p>",
        "id": 358138115,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1683995647
    },
    {
        "content": "<p>Thank you, it was exactly what I was looking for.<br>\nAbout the error, my vs code displays only that part of the error message, is it a bug?<br>\n<a href=\"/user_uploads/3121/mIJ8XIE9MiWAf025pJkFcuLd/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/mIJ8XIE9MiWAf025pJkFcuLd/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/mIJ8XIE9MiWAf025pJkFcuLd/image.png\"></a></div>",
        "id": 358141361,
        "sender_full_name": "Roy Shmueli",
        "timestamp": 1683997098
    },
    {
        "content": "<p>Your VS Code is displaying all of the error message right there in the right hand pane. The key part you didn't tell us was <code>has_max (Icc a b)</code> (but Yael worked this out anyway)</p>",
        "id": 358144002,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1683998399
    },
    {
        "content": "<p>A much better way to put the assumption that <code>R</code> is a linearly ordered field into the system is <code>variable [linear_ordered_field R]</code> BTW</p>",
        "id": 358144227,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1683998488
    }
]