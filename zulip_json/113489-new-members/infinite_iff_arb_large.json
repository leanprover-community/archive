[
    {
        "content": "<p>Old PR: <a href=\"https://github.com/leanprover-community/mathlib/pull/18617\">https://github.com/leanprover-community/mathlib/pull/18617</a><br>\nDiscord: <a href=\"https://discord.com/channels/679792285910827018/707609591940382830/1086371258255556719\">https://discord.com/channels/679792285910827018/707609591940382830/1086371258255556719</a><br>\nI'd like to ask for push permission for some lemmas, is this the right stream to discuss mathlib?</p>",
        "id": 342829751,
        "sender_full_name": "Sam Ezeh",
        "timestamp": 1679166596
    },
    {
        "content": "<p>This topic was moved here from <a class=\"stream-topic\" data-stream-id=\"116395\" href=\"/#narrow/stream/116395-maths/topic/infinite_iff_arb_large\">#maths &gt; infinite_iff_arb_large</a> by <span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span>.</p>",
        "id": 342830314,
        "sender_full_name": "Notification Bot",
        "timestamp": 1679166938
    },
    {
        "content": "<p>Thank you!</p>",
        "id": 342830378,
        "sender_full_name": "Sam Ezeh",
        "timestamp": 1679166970
    },
    {
        "content": "<p>I've granted you (<code>dignissimus</code>) write access!</p>",
        "id": 342830459,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1679167045
    },
    {
        "content": "<p>Incidentally, <a href=\"https://github.com/leanprover-community/mathlib/pull/18604\">#18604</a> is relevant.</p>",
        "id": 342832093,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1679168071
    },
    {
        "content": "<p>After rewriting the type declaration I got this</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">infinite_of_forall_exists_nat_lt</span> <span class=\"o\">{</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"bp\">∃</span> <span class=\"n\">m</span> <span class=\"bp\">∈</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">S.infinite</span>  <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n    <span class=\"n\">intro</span> <span class=\"n\">hS</span><span class=\"o\">,</span> <span class=\"c1\">-- Assume S finite</span>\n    <span class=\"k\">let</span> <span class=\"n\">S2</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"n\">set.finite.to_finset</span> <span class=\"n\">hS</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">B</span><span class=\"o\">,</span> <span class=\"bp\">∀</span><span class=\"n\">n</span> <span class=\"bp\">∈</span> <span class=\"n\">S2</span><span class=\"o\">,</span> <span class=\"n\">n</span> <span class=\"bp\">≤</span> <span class=\"n\">B</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">use</span> <span class=\"n\">finset.sup</span> <span class=\"n\">S2</span> <span class=\"n\">id</span><span class=\"o\">,</span>\n      <span class=\"n\">intros</span><span class=\"o\">,</span>\n      <span class=\"n\">apply</span> <span class=\"n\">finset.le_sup</span> <span class=\"n\">H</span> <span class=\"o\">},</span> <span class=\"c1\">-- Exists maximum</span>\n    <span class=\"n\">cases</span> <span class=\"n\">h2</span> <span class=\"k\">with</span> <span class=\"n\">N</span> <span class=\"n\">hN</span><span class=\"o\">,</span> <span class=\"c1\">-- N is the maximum</span>\n    <span class=\"n\">cases</span> <span class=\"n\">h</span> <span class=\"n\">N</span> <span class=\"k\">with</span> <span class=\"n\">n</span> <span class=\"n\">hn</span><span class=\"o\">,</span> <span class=\"c1\">-- n is larger than the maximum</span>\n    <span class=\"n\">cases</span> <span class=\"n\">hn</span> <span class=\"k\">with</span> <span class=\"n\">hnS</span> <span class=\"n\">hnN</span><span class=\"o\">,</span> <span class=\"c1\">-- n is in S, n is larger than maximum</span>\n    <span class=\"k\">have</span> <span class=\"n\">h3</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">set.finite.mem_to_finset</span> <span class=\"n\">hS</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mpr</span> <span class=\"n\">hnS</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">h4</span> <span class=\"o\">:=</span> <span class=\"n\">hN</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">h4</span> <span class=\"n\">h3</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">smaller_than_max</span> <span class=\"o\">:=</span> <span class=\"n\">h4</span> <span class=\"n\">h3</span><span class=\"o\">,</span>\n    <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">infinite_iff_arb_large</span> <span class=\"o\">{</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℕ</span> <span class=\"o\">}</span>  <span class=\"o\">:</span> <span class=\"n\">S.infinite</span> <span class=\"bp\">↔</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">),</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">∈</span> <span class=\"n\">S</span> <span class=\"bp\">∧</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n    <span class=\"n\">split</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">hS</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">exists_nat_lt</span> <span class=\"o\">:=</span> <span class=\"n\">hS.exists_nat_lt</span><span class=\"o\">,</span>\n    <span class=\"n\">finish</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">hS</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">exists_nat_lt</span> <span class=\"o\">:=</span>  <span class=\"n\">infinite_of_forall_exists_nat_lt</span><span class=\"o\">,</span>\n    <span class=\"n\">finish</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 342844471,
        "sender_full_name": "Sam Ezeh",
        "timestamp": 1679177461
    },
    {
        "content": "<p>For the sorry I just need false from N &lt; n and  n &lt;= n</p>",
        "id": 342844507,
        "sender_full_name": "Sam Ezeh",
        "timestamp": 1679177495
    },
    {
        "content": "<p>I was going to ask for style criticism, but I'm having an issue where lean doesn't terminate and consumes 4GB+ of memory. I run <code>sam@samtop ~/Documents/git/mathlib (git)-[infinite-set-lemmas] % lean src/data/set/finite.lean</code></p>",
        "id": 342844588,
        "sender_full_name": "Sam Ezeh",
        "timestamp": 1679177557
    },
    {
        "content": "<p>Did you run <code>leanproject get-cache</code>?</p>",
        "id": 342844746,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1679177700
    },
    {
        "content": "<p>Your previous proof ought to work with very few modifications with my suggested statement</p>",
        "id": 342844813,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1679177748
    },
    {
        "content": "<p>leanproject get-cachee was what I needed</p>",
        "id": 342845872,
        "sender_full_name": "Sam Ezeh",
        "timestamp": 1679178520
    },
    {
        "content": "<p>I got confused with the different goals from the new statement and started the proof from the beginning</p>",
        "id": 342846012,
        "sender_full_name": "Sam Ezeh",
        "timestamp": 1679178620
    },
    {
        "content": "<p>Before, the proof was like this</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">infinite_exists_nat_lt</span> <span class=\"o\">{</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">),</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">∈</span> <span class=\"n\">S</span> <span class=\"bp\">∧</span> <span class=\"n\">m</span> <span class=\"bp\">&gt;</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"bp\">→</span> <span class=\"n\">S.infinite</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">contrapose</span><span class=\"bp\">!</span><span class=\"o\">,</span>\n    <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">set.not_infinite</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"k\">let</span> <span class=\"n\">S2</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"n\">set.finite.to_finset</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">B</span><span class=\"o\">,</span> <span class=\"bp\">∀</span><span class=\"n\">n</span> <span class=\"bp\">∈</span> <span class=\"n\">S2</span><span class=\"o\">,</span> <span class=\"n\">n</span> <span class=\"bp\">≤</span> <span class=\"n\">B</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">use</span> <span class=\"n\">finset.sup</span> <span class=\"n\">S2</span> <span class=\"n\">id</span><span class=\"o\">,</span>\n      <span class=\"n\">intros</span><span class=\"o\">,</span>\n      <span class=\"n\">apply</span> <span class=\"n\">finset.le_sup</span> <span class=\"n\">H</span> <span class=\"o\">},</span>\n    <span class=\"n\">cases</span> <span class=\"n\">h2</span> <span class=\"k\">with</span> <span class=\"n\">N</span> <span class=\"n\">hN</span><span class=\"o\">,</span>\n    <span class=\"n\">use</span> <span class=\"n\">N</span><span class=\"o\">,</span>\n    <span class=\"n\">intros</span> <span class=\"n\">n</span> <span class=\"n\">hn</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">hN</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">set.finite.mem_to_finset</span> <span class=\"n\">h</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm.mp</span> <span class=\"n\">hn</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">infinite_iff_arb_large</span> <span class=\"o\">{</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℕ</span> <span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">S.infinite</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">),</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">∈</span> <span class=\"n\">S</span> <span class=\"bp\">∧</span> <span class=\"n\">m</span> <span class=\"bp\">&gt;</span> <span class=\"n\">n</span><span class=\"o\">))</span>\n  <span class=\"o\">:=</span> <span class=\"n\">iff.intro</span> <span class=\"n\">arb_large_infinite</span> <span class=\"n\">infinite_exists_nat_lt</span>\n</code></pre></div>",
        "id": 342846371,
        "sender_full_name": "Sam Ezeh",
        "timestamp": 1679178894
    },
    {
        "content": "<p>I'm wondering if this is ok to submit style-wise</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">infinite_of_forall_exists_nat_lt</span> <span class=\"o\">{</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"bp\">∃</span> <span class=\"n\">m</span> <span class=\"bp\">∈</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">S.infinite</span>  <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n    <span class=\"n\">intro</span> <span class=\"n\">hS</span><span class=\"o\">,</span> <span class=\"c1\">-- Assume S finite</span>\n    <span class=\"k\">let</span> <span class=\"n\">S2</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"n\">set.finite.to_finset</span> <span class=\"n\">hS</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">B</span><span class=\"o\">,</span> <span class=\"bp\">∀</span><span class=\"n\">n</span> <span class=\"bp\">∈</span> <span class=\"n\">S2</span><span class=\"o\">,</span> <span class=\"n\">n</span> <span class=\"bp\">≤</span> <span class=\"n\">B</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">use</span> <span class=\"n\">finset.sup</span> <span class=\"n\">S2</span> <span class=\"n\">id</span><span class=\"o\">,</span>\n      <span class=\"n\">intros</span><span class=\"o\">,</span>\n      <span class=\"n\">apply</span> <span class=\"n\">finset.le_sup</span> <span class=\"n\">H</span> <span class=\"o\">},</span> <span class=\"c1\">-- Exists maximum</span>\n    <span class=\"n\">cases</span> <span class=\"n\">h2</span> <span class=\"k\">with</span> <span class=\"n\">N</span> <span class=\"n\">hN</span><span class=\"o\">,</span> <span class=\"c1\">-- N is the maximum</span>\n    <span class=\"n\">cases</span> <span class=\"n\">h</span> <span class=\"n\">N</span> <span class=\"k\">with</span> <span class=\"n\">n</span> <span class=\"n\">hn</span><span class=\"o\">,</span> <span class=\"c1\">-- n is larger than the maximum</span>\n    <span class=\"n\">cases</span> <span class=\"n\">hn</span> <span class=\"k\">with</span> <span class=\"n\">hnS</span> <span class=\"n\">hnN</span><span class=\"o\">,</span> <span class=\"c1\">-- n is in S, n is larger than maximum</span>\n    <span class=\"k\">have</span> <span class=\"n\">h3</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">set.finite.mem_to_finset</span> <span class=\"n\">hS</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mpr</span> <span class=\"n\">hnS</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">h4</span> <span class=\"o\">:=</span> <span class=\"n\">hN</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">h4</span> <span class=\"n\">h3</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">smaller_than_max</span> <span class=\"o\">:=</span> <span class=\"n\">h4</span> <span class=\"n\">h3</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">nat.le_lt_antisymm</span> <span class=\"n\">smaller_than_max</span> <span class=\"n\">hnN</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">infinite_iff_arb_large</span> <span class=\"o\">{</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℕ</span> <span class=\"o\">}</span>  <span class=\"o\">:</span> <span class=\"n\">S.infinite</span> <span class=\"bp\">↔</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">),</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">∈</span> <span class=\"n\">S</span> <span class=\"bp\">∧</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n    <span class=\"n\">split</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">hS</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">exists_nat_lt</span> <span class=\"o\">:=</span> <span class=\"n\">hS.exists_nat_lt</span><span class=\"o\">,</span>\n    <span class=\"n\">finish</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">hS</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">exists_nat_lt</span> <span class=\"o\">:=</span>  <span class=\"n\">infinite_of_forall_exists_nat_lt</span><span class=\"o\">,</span>\n    <span class=\"n\">finish</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 342846424,
        "sender_full_name": "Sam Ezeh",
        "timestamp": 1679178937
    },
    {
        "content": "<p>I recommend you change the statement of <code>infinite_iff_arb_large</code> to match how we rephrased <code>infinite_of_forall_exists_nat_lt</code>; swapping the  <code>∧</code> for shorter exists notation</p>",
        "id": 342846646,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1679179068
    },
    {
        "content": "<p>You should then be able to prove it a single line!</p>",
        "id": 342846684,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1679179083
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">infinite_iff_arb_large</span>  <span class=\"o\">{</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℕ</span> <span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hs</span><span class=\"o\">:</span> <span class=\"n\">S.infinite</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hS'</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"bp\">∃</span> <span class=\"n\">m</span> <span class=\"bp\">∈</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"n\">m</span><span class=\"o\">)</span>\n  <span class=\"o\">:</span> <span class=\"n\">S.infinite</span> <span class=\"bp\">↔</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"bp\">∃</span> <span class=\"n\">m</span> <span class=\"bp\">∈</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"n\">m</span> <span class=\"o\">:=</span> <span class=\"n\">iff_of_true</span> <span class=\"n\">hs</span> <span class=\"n\">hS'</span>\n</code></pre></div>\n<p>Nice!</p>",
        "id": 342848190,
        "sender_full_name": "Sam Ezeh",
        "timestamp": 1679179787
    },
    {
        "content": "<p>This was instructive</p>",
        "id": 342848195,
        "sender_full_name": "Sam Ezeh",
        "timestamp": 1679179791
    },
    {
        "content": "<p>PS <code>finish</code> can be super-super-slow. It's great to check something's true but there's almost always a quicker way, and if you get too reliant on it then you end up waiting 10 seconds every time you type a line of code, for the orange bars to disappear.</p>",
        "id": 342848336,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1679179864
    },
    {
        "content": "<p>I'll remember that</p>",
        "id": 342848493,
        "sender_full_name": "Sam Ezeh",
        "timestamp": 1679179978
    },
    {
        "content": "<p>I don't need it anymore because of the new one-liner but with the first finish, I had this</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">infinite_iff_arb_large'</span> <span class=\"o\">{</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℕ</span> <span class=\"o\">}</span>  <span class=\"o\">:</span> <span class=\"n\">S.infinite</span> <span class=\"bp\">↔</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">),</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">∈</span> <span class=\"n\">S</span> <span class=\"bp\">∧</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n    <span class=\"n\">split</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">hS</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">exists_nat_lt</span> <span class=\"o\">:=</span> <span class=\"n\">hS.exists_nat_lt</span><span class=\"o\">,</span>\n    <span class=\"gr\">sorry</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">hS</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">exists_nat_lt</span> <span class=\"o\">:=</span>  <span class=\"n\">infinite_of_forall_exists_nat_lt</span><span class=\"o\">,</span>\n    <span class=\"n\">finish</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>This state</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">S</span><span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℕ</span>\n<span class=\"n\">hS</span><span class=\"o\">:</span> <span class=\"n\">S.infinite</span>\n<span class=\"n\">exists_nat_lt</span><span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">∈</span> <span class=\"n\">S</span><span class=\"o\">),</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"n\">m</span>\n<span class=\"bp\">⊢</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">m</span> <span class=\"bp\">∈</span> <span class=\"n\">S</span> <span class=\"bp\">∧</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"n\">m</span>\n</code></pre></div>",
        "id": 342848589,
        "sender_full_name": "Sam Ezeh",
        "timestamp": 1679180040
    },
    {
        "content": "<p>That new one liner isn't the right one, your statement says \"if A and B then A iff B\"</p>",
        "id": 342848659,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1679180066
    },
    {
        "content": "<p>I'll try it once more</p>",
        "id": 342848681,
        "sender_full_name": "Sam Ezeh",
        "timestamp": 1679180086
    },
    {
        "content": "<p>You need to remove <code>hS</code> and <code>hS'</code> from the statement</p>",
        "id": 342848696,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1679180101
    },
    {
        "content": "<p>That was quite an oversight</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">infinite_iff_arb_large</span>  <span class=\"o\">{</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℕ</span> <span class=\"o\">}</span>\n  <span class=\"o\">:</span> <span class=\"n\">S.infinite</span> <span class=\"bp\">↔</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"bp\">∃</span> <span class=\"n\">m</span> <span class=\"bp\">∈</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"n\">m</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨</span><span class=\"n\">infinite.exists_nat_lt</span><span class=\"o\">,</span> <span class=\"n\">infinite_of_forall_exists_nat_lt</span><span class=\"o\">⟩</span>\n</code></pre></div>",
        "id": 342848987,
        "sender_full_name": "Sam Ezeh",
        "timestamp": 1679180300
    },
    {
        "content": "<p>I learned about the angle bracket notation yesterday</p>",
        "id": 342849001,
        "sender_full_name": "Sam Ezeh",
        "timestamp": 1679180313
    },
    {
        "content": "<p>That's the one I had in mind!</p>",
        "id": 342849349,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1679180572
    }
]