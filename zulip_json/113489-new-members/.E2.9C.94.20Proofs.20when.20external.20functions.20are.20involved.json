[
    {
        "content": "<p>New to Lean, not sure if this is the right place to post. <br>\nIs there an idiomatic way to prove something like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">State</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">good</span> <span class=\"bp\">|</span> <span class=\"n\">bad</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">choose</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">State</span> <span class=\"o\">:=</span>\n  <span class=\"k\">if</span> <span class=\"n\">n</span> <span class=\"bp\">%</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"k\">then</span> <span class=\"n\">State.good</span> <span class=\"k\">else</span> <span class=\"n\">State.bad</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">choose</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">State.good</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">choose</span> <span class=\"o\">(</span><span class=\"n\">Nat.succ</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">State.bad</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 358857621,
        "sender_full_name": "Hossam Karim",
        "timestamp": 1684275537
    },
    {
        "content": "<p>This topic was moved here from <a class=\"stream-topic\" data-stream-id=\"270676\" href=\"/#narrow/stream/270676-lean4/topic/Proofs.20when.20external.20functions.20are.20involved\">#lean4 &gt; Proofs when external functions are involved</a> by <span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span>.</p>",
        "id": 358858172,
        "sender_full_name": "Notification Bot",
        "timestamp": 1684275812
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"383968\">@Hossam Karim</span> Here are a few proofs to show off a few features. They could be made cleaner, but hopeful they point out helpful parts of the library anyway.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Nat.Parity</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">State</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">good</span> <span class=\"bp\">|</span> <span class=\"n\">bad</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">choose</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">State</span> <span class=\"o\">:=</span>\n  <span class=\"k\">if</span> <span class=\"n\">n</span> <span class=\"bp\">%</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"k\">then</span> <span class=\"n\">State.good</span> <span class=\"k\">else</span> <span class=\"n\">State.bad</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">choose_eq_good_iff</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">choose</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"bp\">.</span><span class=\"n\">good</span> <span class=\"bp\">↔</span> <span class=\"n\">n</span> <span class=\"bp\">%</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">choose</span>\n  <span class=\"n\">split</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"bp\">*</span><span class=\"o\">]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">choose_eq_bad_iff</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">choose</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"bp\">.</span><span class=\"n\">bad</span> <span class=\"bp\">↔</span> <span class=\"n\">n</span> <span class=\"bp\">%</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">choose</span>\n  <span class=\"n\">split</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"bp\">*</span><span class=\"o\">]</span>\n  <span class=\"n\">rename_i</span> <span class=\"n\">h</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">Nat.even_iff</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">Nat.odd_iff_not_even</span><span class=\"o\">,</span> <span class=\"n\">Nat.odd_iff</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n  <span class=\"n\">exact</span> <span class=\"n\">h</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"n\">choose</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">State.good</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">choose</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">State.bad</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">choose_eq_good_iff</span><span class=\"o\">,</span> <span class=\"n\">choose_eq_bad_iff</span><span class=\"o\">]</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">Nat.odd_iff</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">Nat.even_iff</span><span class=\"o\">,</span> <span class=\"n\">Nat.even_add_one</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 358865673,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1684280017
    },
    {
        "content": "<p>I'll just throw in mine as well:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n<span class=\"kd\">inductive</span> <span class=\"n\">State</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">good</span> <span class=\"bp\">|</span> <span class=\"n\">bad</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">choose</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">State</span> <span class=\"o\">:=</span>\n  <span class=\"k\">if</span> <span class=\"n\">n</span> <span class=\"bp\">%</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"k\">then</span> <span class=\"n\">State.good</span> <span class=\"k\">else</span> <span class=\"n\">State.bad</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">even_of_choose_good</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">choose</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"bp\">.</span><span class=\"n\">good</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Even</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">choose</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n  <span class=\"n\">split</span> <span class=\"n\">at</span> <span class=\"n\">h</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">simp_all</span><span class=\"o\">[</span><span class=\"n\">Nat.even_iff</span><span class=\"o\">]</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">choose_bad_of_odd</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">Odd</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">choose</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"bp\">.</span><span class=\"n\">bad</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">choose</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Nat.odd_iff</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n  <span class=\"n\">simp_all</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">choose</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">State.good</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">choose</span> <span class=\"o\">(</span><span class=\"n\">Nat.succ</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">State.bad</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h1</span>\n  <span class=\"k\">have</span> <span class=\"n\">h1</span> <span class=\"o\">:=</span> <span class=\"n\">even_of_choose_good</span> <span class=\"n\">h1</span>\n  <span class=\"n\">cases</span> <span class=\"n\">Nat.even_or_odd</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n  <span class=\"n\">case</span> <span class=\"n\">inl</span> <span class=\"n\">h2</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Nat.even_add_one</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h2</span>\n    <span class=\"n\">contradiction</span>\n  <span class=\"n\">case</span> <span class=\"n\">inr</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">apply</span> <span class=\"n\">choose_bad_of_odd</span>\n    <span class=\"n\">assumption</span>\n</code></pre></div>",
        "id": 358865775,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1684280083
    },
    {
        "content": "<p>I didn't know about <code>simp_all</code>. Here's ours combined:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Nat.Parity</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">State</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">good</span> <span class=\"bp\">|</span> <span class=\"n\">bad</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">choose</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">State</span> <span class=\"o\">:=</span>\n  <span class=\"k\">if</span> <span class=\"n\">n</span> <span class=\"bp\">%</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"k\">then</span> <span class=\"n\">State.good</span> <span class=\"k\">else</span> <span class=\"n\">State.bad</span>\n\n<span class=\"kd\">@[simp]</span>\n<span class=\"kd\">def</span> <span class=\"n\">choose_eq_good_iff</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">choose</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"bp\">.</span><span class=\"n\">good</span> <span class=\"bp\">↔</span> <span class=\"n\">Even</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">choose</span>\n  <span class=\"n\">split</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">simp_all</span> <span class=\"o\">[</span><span class=\"n\">Nat.even_iff</span><span class=\"o\">]</span>\n\n<span class=\"kd\">@[simp]</span>\n<span class=\"kd\">def</span> <span class=\"n\">choose_eq_bad_iff</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">choose</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"bp\">.</span><span class=\"n\">bad</span> <span class=\"bp\">↔</span> <span class=\"n\">Odd</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">choose</span>\n  <span class=\"n\">split</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">simp_all</span> <span class=\"o\">[</span><span class=\"n\">Nat.even_iff</span><span class=\"o\">]</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"n\">choose</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">State.good</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">choose</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">State.bad</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">Nat.even_add_one</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 358866214,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1684280330
    },
    {
        "content": "<p>Proof automation <span aria-label=\"tm\" class=\"emoji emoji-2122\" role=\"img\" title=\"tm\">:tm:</span></p>",
        "id": 358866287,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1684280389
    },
    {
        "content": "<p>Shorter still:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Nat.Parity</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">State</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">good</span> <span class=\"bp\">|</span> <span class=\"n\">bad</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">choose</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">State</span> <span class=\"o\">:=</span>\n  <span class=\"k\">if</span> <span class=\"n\">n</span> <span class=\"bp\">%</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"k\">then</span> <span class=\"n\">State.good</span> <span class=\"k\">else</span> <span class=\"n\">State.bad</span>\n\n<span class=\"kd\">@[simp]</span>\n<span class=\"kd\">def</span> <span class=\"n\">choose_eq_good_iff</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">choose</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"bp\">.</span><span class=\"n\">good</span> <span class=\"bp\">↔</span> <span class=\"n\">Even</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">choose</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">Nat.even_iff</span><span class=\"o\">,</span> <span class=\"n\">imp_false</span><span class=\"o\">]</span>\n\n<span class=\"kd\">@[simp]</span>\n<span class=\"kd\">def</span> <span class=\"n\">choose_eq_bad_iff</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">choose</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"bp\">.</span><span class=\"n\">bad</span> <span class=\"bp\">↔</span> <span class=\"n\">Odd</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">choose</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">Nat.even_iff</span><span class=\"o\">]</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"n\">choose</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">State.good</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">choose</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">State.bad</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">Nat.even_add_one</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 358866746,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1684280645
    },
    {
        "content": "<p>Wow! Impressive! Thanks <span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span> and <span class=\"user-mention\" data-user-id=\"395550\">@Henrik Böving</span></p>",
        "id": 359030670,
        "sender_full_name": "Hossam Karim",
        "timestamp": 1684341837
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"383968\">Hossam Karim</span> has marked this topic as resolved.</p>",
        "id": 359031285,
        "sender_full_name": "Notification Bot",
        "timestamp": 1684341988
    }
]