[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Real.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Complex.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Complex.Exponential</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span><span class=\"n\">ℝ</span> <span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">Complex.cos</span> <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">re</span> <span class=\"bp\">=</span> <span class=\"n\">Real.cosh</span> <span class=\"n\">y</span>\n<span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mul_comm</span><span class=\"o\">,</span> <span class=\"n\">Complex.cos</span> <span class=\"c\">/-</span><span class=\"cm\">, I_mul_I-/</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>Why does the rewrite of <code>I_mul_I</code> fail to find a pattern when the state is <code>((cexp (↑y * I * I) + cexp (-(↑y * I) * I)) / 2).re = Real.cosh y</code>?<br>\nI can understand it not matching the second one because of the parens, but I am confused why it doesn't match the first one.<br>\nAlso, how do you remove (redundant) parentheses?</p>",
        "id": 400665227,
        "sender_full_name": "Nicholas Wilson",
        "timestamp": 1699333838
    },
    {
        "content": "<p><code>a*b*c</code> means the exact same thing as <code>(a*b)*c</code>, so indeed the expression <code>b*c</code> doesn't literally occur. You need to rewrite with the <code>mul_assoc</code> theorem to make it show up first. (This is why the other parentheses you see are not in fact redundant)</p>",
        "id": 400667489,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1699335599
    },
    {
        "content": "<p>Thanks. <code>by rw [mul_comm, Complex.cos, mul_assoc, I_mul_I]</code> indeed clears the first <code>I * I</code> to <code>-1</code> (and <code>mul_neg_one</code> removes it) but not the second. How do I go about re-associating the parenthesised expression since <code>mul_assoc</code> failed to do so?</p>",
        "id": 400675335,
        "sender_full_name": "Nicholas Wilson",
        "timestamp": 1699339869
    },
    {
        "content": "<p>Hmm, I managed to get </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span> <span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"n\">I</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">I</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"o\">:=</span>   <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">mul_assoc</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>But I still don't understand in what circumstances I can do <code>:=   by rw [...] simp [...]</code> and not get <code>unexpected identifier; expected command</code></p>",
        "id": 400682412,
        "sender_full_name": "Nicholas Wilson",
        "timestamp": 1699343106
    },
    {
        "content": "<p>Hmm, <code>by simp [Complex.cos, mul_assoc]</code> gets me to <code>((cexp (-↑y)).re + (cexp ↑y).re) / 2 = Real.cosh y</code> but I can't seem to coax lean to do anything about <code>Real.cosh</code> with e.g. <code>by simp [Complex.cos, mul_assoc, Real.cosh]</code> why is that? Because it is on the RHS?</p>",
        "id": 400684377,
        "sender_full_name": "Nicholas Wilson",
        "timestamp": 1699344120
    },
    {
        "content": "<p>It may not be a good idea to use <code>simp [Real.cosh]</code> because that tries to expand the definition. I would hope that there are enough theorems about it in mathlib that you could use those instead. I could look for the theorems you need, but then I'd need a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> to start from</p>",
        "id": 400687349,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1699345254
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Real.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Complex.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Complex.Exponential</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span><span class=\"n\">ℝ</span> <span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">Complex.cos</span> <span class=\"o\">(</span> <span class=\"n\">y</span><span class=\"bp\">*</span><span class=\"n\">I</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">re</span> <span class=\"bp\">=</span> <span class=\"n\">Real.cosh</span> <span class=\"n\">y</span>\n<span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">Complex.cos</span><span class=\"o\">,</span> <span class=\"n\">mul_assoc</span><span class=\"o\">,</span> <span class=\"n\">Real.cosh</span><span class=\"o\">]</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span> <span class=\"n\">Real.cosh</span><span class=\"o\">,</span> <span class=\"n\">Complex.cosh</span><span class=\"o\">,</span> <span class=\"n\">div_ofNat_re</span><span class=\"o\">,</span> <span class=\"n\">add_comm</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>is oh so very close: <code>((cexp ↑y).re + (cexp (-↑y)).re) / 2 = (cexp ↑y + cexp (-↑y)).re / 2</code></p>",
        "id": 400688899,
        "sender_full_name": "Nicholas Wilson",
        "timestamp": 1699345825
    },
    {
        "content": "<p>Appending <code>simp [ofReal]</code> appears to have worked!</p>",
        "id": 400689019,
        "sender_full_name": "Nicholas Wilson",
        "timestamp": 1699345887
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"663331\">Nicholas Wilson</span> has marked this topic as resolved.</p>",
        "id": 400689132,
        "sender_full_name": "Notification Bot",
        "timestamp": 1699345928
    }
]