[
    {
        "content": "<p>Hi folks, as suggested to introduce myself briefly: my former academic life revolved around formal methods, mostly using Isabelle/HOL - I haven't really used dependent types before. I'm currently playing around with Lean for a toy project proving properties of a particular algorithm we use at work.<br>\nOnto the question: I'm using Lean 4, and I'm trying to create a section with definitions parameterized on some types. I've run into the following issue though (probably because I have only skimmed the books so far). Lean complains about my definition below:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">section</span>\n  <span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n\n  <span class=\"kd\">structure</span> <span class=\"n\">Struct</span> <span class=\"o\">:=</span>\n    <span class=\"n\">val</span> <span class=\"o\">:</span> <span class=\"n\">T</span>\n\n  <span class=\"kd\">structure</span> <span class=\"n\">Struct2</span> <span class=\"o\">:=</span>\n    <span class=\"n\">val2</span><span class=\"o\">:</span> <span class=\"n\">Option</span> <span class=\"n\">Struct</span>\n\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>The error message being:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">application</span> <span class=\"n\">type</span> <span class=\"n\">mismatch</span>\n  <span class=\"n\">Option</span> <span class=\"n\">Struct</span>\n<span class=\"n\">argument</span>\n  <span class=\"n\">Struct</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"kt\">Type</span> <span class=\"bp\">â†’</span> <span class=\"kt\">Type</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"mi\">1</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"kt\">Type</span> <span class=\"bp\">?</span><span class=\"n\">u.250</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">u.250</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>I think I understand roughly what's going on (<code>Struct</code> being what I'd call a type constructor rather than a concrete type), but I'm a bit surprised that <code>Struct</code> isn't \"completed\" to a concrete type  inside of the section. Is it possible to get this automatic \"completion\" somehow? I'm planning to perform this development gradually, adding more (possibly parameterized) fields to <code>Struct</code>,  and I'd like to avoid doing this manually.</p>\n<p>A mostly unrelated question: I also didn't expect <code>State</code> (or type constructors in general) to be <code>Type 1</code>, but I think mostly because I'm not used to thinking in terms of type universes. A couple of questions there: theoretically, what's the best (and ideally concise) explanation of Lean's meta theory, and, very practically, which command can I use to see the universe of a term's type?</p>",
        "id": 367914722,
        "sender_full_name": "oggy",
        "timestamp": 1687265315
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#check</span> <span class=\"n\">Struct</span>\n<span class=\"c1\">-- Struct (T : Type) : Type</span>\n\n<span class=\"k\">#check</span> <span class=\"kt\">Type</span>\n<span class=\"c1\">-- Type : Type 1</span>\n</code></pre></div>",
        "id": 367916925,
        "sender_full_name": "David Renshaw",
        "timestamp": 1687265750
    },
    {
        "content": "<p>I don't know of a way to avoid needing to explicitly provide the <code>T</code>, like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"kd\">structure</span> <span class=\"n\">Struct2</span> <span class=\"o\">:=</span>\n    <span class=\"n\">val2</span><span class=\"o\">:</span> <span class=\"n\">Option</span> <span class=\"o\">(</span><span class=\"n\">Struct</span> <span class=\"n\">T</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 367923438,
        "sender_full_name": "David Renshaw",
        "timestamp": 1687266990
    },
    {
        "content": "<p>Thanks - if there's no way around it, I can live with something like <code>def Struct_Instantiated := Struct T</code>.</p>",
        "id": 367936531,
        "sender_full_name": "oggy",
        "timestamp": 1687269336
    },
    {
        "content": "<p>That won't work though</p>",
        "id": 367939749,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1687269866
    },
    {
        "content": "<p>You'll still have to write <code>Struct_Instantiated T</code></p>",
        "id": 367939824,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1687269877
    },
    {
        "content": "<p>Indeed, I thought I'd tried it out but I had mistyped something. But I'm now confused why <code>Struct2</code> below typechecks :)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">section</span>\n  <span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n\n  <span class=\"kd\">structure</span> <span class=\"n\">Struct</span> <span class=\"o\">:=</span>\n    <span class=\"n\">val</span> <span class=\"o\">:</span> <span class=\"n\">T</span>\n\n <span class=\"kd\">structure</span> <span class=\"n\">Struct2</span> <span class=\"o\">:=</span>\n    <span class=\"n\">val2</span><span class=\"o\">:</span> <span class=\"n\">Option</span> <span class=\"n\">Struct_Mistyped</span>\n\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 367942667,
        "sender_full_name": "oggy",
        "timestamp": 1687270326
    },
    {
        "content": "<p>See <a class=\"stream-topic\" data-stream-id=\"270676\" href=\"/#narrow/stream/270676-lean4/topic/Undefined.20variables.20silently.20accepted\">#lean4 &gt; Undefined variables silently accepted</a></p>",
        "id": 367943193,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1687270407
    },
    {
        "content": "<p>This is shorthand for</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code> <span class=\"kd\">structure</span> <span class=\"n\">Struct2</span> <span class=\"o\">(</span><span class=\"n\">Struct_Mistyped</span> <span class=\"o\">:</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n    <span class=\"n\">val2</span><span class=\"o\">:</span> <span class=\"n\">Option</span> <span class=\"n\">Struct_Mistyped</span>\n</code></pre></div>\n<p>which is elaborated as</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code> <span class=\"kd\">structure</span> <span class=\"n\">Struct2</span> <span class=\"o\">(</span><span class=\"n\">Struct_Mistyped</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n    <span class=\"n\">val2</span><span class=\"o\">:</span> <span class=\"n\">Option</span> <span class=\"n\">Struct_Mistyped</span>\n</code></pre></div>",
        "id": 367943335,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1687270436
    },
    {
        "content": "<p>Try <code>set_option autoImplicit false in</code> before <code>Struct2</code></p>",
        "id": 367943590,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1687270473
    },
    {
        "content": "<p>Or just <code>set_option autoImplicit false </code> at the top of the file</p>",
        "id": 367943663,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1687270485
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113489-new-members/topic/Type.20constructors.20in.20sections/near/367943663\">said</a>:</p>\n<blockquote>\n<p>Or just <code>set_option autoImplicit false </code> at the top of the file</p>\n</blockquote>\n<p>This is probably safer until you get a hang of the behavior</p>",
        "id": 367943748,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1687270504
    },
    {
        "content": "<p><a href=\"https://leanprover.github.io/lean4/doc/autobound.html\">More info</a></p>",
        "id": 367944483,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1687270646
    }
]