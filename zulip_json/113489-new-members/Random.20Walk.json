[
    {
        "content": "<p>Hi, I am trying to define a simple random walk for example where the start is 0, and each increment is either +1 or -1, and looking to prove some simple properties of this, such as the sum expected sum of the walk is 0. I am struggling to work out how to define a sequence of random variables which can only take values of either 1 or -1. Does anyone know if this is possible in lean and give any pointers on how I could approach this. Thanks for any advice.</p>",
        "id": 345488221,
        "sender_full_name": "Joshua Banks",
        "timestamp": 1680115114
    },
    {
        "content": "<p>Here is an example of how you could do this (in lean 3, since measure/probability theory has not been ported to lean 4 yet):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">probability.notation</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">measure_theory</span>\n\n<span class=\"c1\">-- get probability notation, the notation `‚Ñù‚â•0‚àû` and the notation `‚àë`</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">probability_theory</span> <span class=\"n\">ennreal</span> <span class=\"n\">big_operators</span>\n\n<span class=\"c1\">-- define a measurable space with a measure, denoted by `‚Ñô`</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"bp\">Œ©</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">measure_space</span> <span class=\"bp\">Œ©</span><span class=\"o\">]</span>\n\n<span class=\"c1\">-- the real measure supported on -1 and 1, with probability 1/2 for each</span>\n<span class=\"kd\">noncomputable</span>\n<span class=\"kd\">def</span> <span class=\"n\">two_points_measure</span> <span class=\"o\">:</span> <span class=\"n\">measure</span> <span class=\"n\">‚Ñù</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñù</span><span class=\"bp\">‚â•</span><span class=\"mi\">0</span><span class=\"bp\">‚àû</span><span class=\"o\">)</span><span class=\"bp\">‚Åª¬π</span> <span class=\"bp\">‚Ä¢</span> <span class=\"n\">measure.dirac</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñù</span><span class=\"bp\">‚â•</span><span class=\"mi\">0</span><span class=\"bp\">‚àû</span><span class=\"o\">)</span><span class=\"bp\">‚Åª¬π</span> <span class=\"bp\">‚Ä¢</span> <span class=\"n\">measure.dirac</span> <span class=\"mi\">1</span>\n\n<span class=\"c1\">-- a sequence of random variables, each with law `two_points_measure`</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñï</span> <span class=\"bp\">‚Üí</span> <span class=\"bp\">Œ©</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">‚Ñù</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">‚àÄ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">measure.map</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">‚Ñô</span> <span class=\"bp\">=</span> <span class=\"n\">two_points_measure</span><span class=\"o\">)</span>\n\n<span class=\"c1\">-- An example statement about the mean to check that we have imported everything.</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñï</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">‚àÄ·µê</span> <span class=\"n\">œâ</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">‚àë</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"n\">finset.range</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">X</span> <span class=\"n\">n</span> <span class=\"n\">œâ</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"n\">n</span> <span class=\"bp\">‚â§</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"gr\">sorry</span>\n\n<span class=\"c1\">-- ùîº is a notation for the integral against ‚Ñô</span>\n<span class=\"c1\">-- TODO: prove it :)</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñï</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">ùîº</span><span class=\"o\">[</span><span class=\"bp\">‚àë</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"n\">finset.range</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">X</span> <span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 345506758,
        "sender_full_name": "R√©my Degenne",
        "timestamp": 1680120917
    },
    {
        "content": "<p>In that example, I am not very happy about the way we have to write the <code>measure.map = ...</code> hypothesis. We should have a better API for probability, but we barely have any probability right now, so it's still not very polished.</p>",
        "id": 345507319,
        "sender_full_name": "R√©my Degenne",
        "timestamp": 1680121093
    },
    {
        "content": "<p>Also since I just made a definition for the measure you wanted, lean knows nothing about it. For example some lemmas might need a <code>[is_probability_measure two_points_measure]</code> instance: you will have to prove it. It is possible that we have a better way of defining finitely supported probability distributions, for example using <a href=\"https://leanprover-community.github.io/mathlib_docs/find/pmf.to_measure\">docs#pmf.to_measure</a>, but I don't know what we have about that.</p>",
        "id": 345508454,
        "sender_full_name": "R√©my Degenne",
        "timestamp": 1680121476
    },
    {
        "content": "<p>If we barely have any probability right now, this classic random walk might be a great project to expose what we need to do.</p>",
        "id": 345509815,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1680121901
    },
    {
        "content": "<p>Another remark: my example said nothing about independence of the <code>X i</code> for different <code>i</code>. You might want to look at <a href=\"https://leanprover-community.github.io/mathlib_docs/find/probability_theory.strong_law_ae\">docs#probability_theory.strong_law_ae</a> (the law of large numbers) for an example involving <del>iid</del> pairwise independent, identically distributed random variables.</p>",
        "id": 345511103,
        "sender_full_name": "R√©my Degenne",
        "timestamp": 1680122304
    },
    {
        "content": "<p>You might also like to see how we deal with the <a href=\"https://github.com/YaelDillies/LeanCamCombi/blob/main/src/erdos_renyi.lean\">Erdos-R√©nyi model in LeanCamCombi</a>. You should in particular be interested in <a href=\"https://github.com/YaelDillies/LeanCamCombi/blob/main/src/weighted_cube.lean\"><code>weighted_cube</code></a>.</p>",
        "id": 345520563,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1680126048
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"572027\">@Joshua Banks</span>  Hi I'm also looking for first projects in lean, would you like to collaborate on simple random walks?  I imagine, e.g., doing the arcsine laws along the lines of the combinatorial approach in Feller vol I.</p>",
        "id": 358801997,
        "sender_full_name": "Ryan McCorvie",
        "timestamp": 1684258061
    }
]