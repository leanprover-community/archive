[
    {
        "content": "<p>I am getting into theorem-proving. My short-term goals is to prove theorems and write verified algorithms in discrete math. I'm looking into Agda (since I know Haskell) and Lean4.  Does anyone have experience with both and could point out some major points to look out for in choosing one over the other? Any pointer is greatly appreciated.</p>",
        "id": 356954422,
        "sender_full_name": "Kevin Cheung",
        "timestamp": 1683632677
    },
    {
        "content": "<p>I have just started studying Agda last week, so I cannot be objective on the comparison. However, I'd say Lean is easier for developing proofs because it has an amazing tactic mode. If you need to write proof terms directly, Agda will assist you more in that regards.</p>",
        "id": 356969704,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1683635966
    },
    {
        "content": "<p>I've heard that Lean is more user-friendly but Agda is more computer-friendly. If your goal is to create proofs, I'd choose Lean. If your goal is to develop algorithms for automatic proving, people say Agda is more suitable for that.</p>",
        "id": 356970697,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1683636167
    },
    {
        "content": "<p>If you want to learn about proofs in the most rigorous way, I suggest using Agda or Lean without tactic mode. Tactics are essential in large scale formalizations but they hide a lot of low level details in proofs.</p>\n<p>Another point is that, from my experience, Agda's standard library is not great, there is a lot missing there. Lean's on the other hand is awesome. So if you're planning to use builtin formalized structures Lean is probably best.</p>",
        "id": 357016586,
        "sender_full_name": "Tomaz Gomes",
        "timestamp": 1683645288
    },
    {
        "content": "<p>What standard library are you talking about here? Lean without mathlib4 or std4 is certainly missing a ton as well</p>",
        "id": 357017047,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1683645395
    },
    {
        "content": "<p>I believe it is still better than Agda's standard library, but yeah, I was talking about mathlib</p>",
        "id": 357017307,
        "sender_full_name": "Tomaz Gomes",
        "timestamp": 1683645449
    },
    {
        "content": "<p>Thanks for the responses. Looks like there are good reasons to learn both. But given that I have to choose one at the moment, I'll probably go with Lean.</p>",
        "id": 357239889,
        "sender_full_name": "Kevin Cheung",
        "timestamp": 1683715129
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"417654\">Martin Dvořák</span> <a href=\"#narrow/stream/113489-new-members/topic/Lean4.20or.20Agda/near/356970697\">said</a>:</p>\n<blockquote>\n<p>I've heard that Lean is more user-friendly but Agda is more computer-friendly. If your goal is to create proofs, I'd choose Lean. If your goal is to develop algorithms for automatic proving, people say Agda is more suitable for that.</p>\n</blockquote>\n<p>Agda or Isabelle? That description sounds more like Isabelle. I'd say if your main focus is on the math, Lean and mathlib are probably the best bet. If it's on the algorithms, probably isabelle is the easiest, if it's on the foundations, probably Agda will be the most enlightening.</p>",
        "id": 357520076,
        "sender_full_name": "Andrés Goens",
        "timestamp": 1683796845
    }
]