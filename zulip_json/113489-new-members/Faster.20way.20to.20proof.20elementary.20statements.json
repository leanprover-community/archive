[
    {
        "content": "<p>I'm experimenting with Lean and I find myself often trying to proof involving statements involving <code>∧</code> and <code>∃</code>. These are not hard, but a little tedious. Is there a better, faster way to proof such statements? Here is an example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">ℕ</span> <span class=\"bp\">×</span> <span class=\"n\">ℕ</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x.1</span> <span class=\"bp\">+</span> <span class=\"n\">x.2</span> <span class=\"bp\">=</span> <span class=\"mi\">4</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">∃</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"mi\">4</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">a_1</span> <span class=\"bp\">≤</span> <span class=\"mi\">4</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">a_2</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">a_2</span> <span class=\"bp\">=</span> <span class=\"n\">a_1</span> <span class=\"bp\">∧</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">a_2</span> <span class=\"bp\">=</span> <span class=\"mi\">4</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">a_2</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">apply</span> <span class=\"n\">propext</span><span class=\"bp\">;</span> <span class=\"n\">apply</span> <span class=\"n\">Iff.intro</span>\n  <span class=\"bp\">·</span> <span class=\"n\">intros</span> <span class=\"n\">h</span>\n    <span class=\"n\">use</span> <span class=\"n\">x.1</span>\n    <span class=\"k\">have</span> <span class=\"n\">x1_le</span> <span class=\"o\">:=</span> <span class=\"n\">Nat.le_add_left</span> <span class=\"n\">x.2</span> <span class=\"n\">x.1</span>\n    <span class=\"k\">have</span> <span class=\"n\">x2_le</span> <span class=\"o\">:=</span> <span class=\"n\">Nat.le_add_right</span> <span class=\"n\">x.1</span> <span class=\"n\">x.2</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">x1_le</span> <span class=\"n\">x2_le</span>\n    <span class=\"n\">simp_all</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">true_and</span><span class=\"o\">]</span>\n    <span class=\"n\">use</span> <span class=\"n\">x.2</span>\n    <span class=\"n\">simp_all</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">true_and</span><span class=\"o\">]</span>\n    <span class=\"n\">use</span> <span class=\"n\">x.2</span>\n  <span class=\"bp\">·</span> <span class=\"n\">intro</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩</span> <span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩</span>\n    <span class=\"n\">simp_all</span> <span class=\"n\">only</span>\n</code></pre></div>",
        "id": 403800647,
        "sender_full_name": "Markus Schmaus",
        "timestamp": 1700750022
    },
    {
        "content": "<p>I'm on mobile, but if you pass as soon as possible the values for the existentials, probably <code>aesop</code> can take care of a lot of the goals?</p>",
        "id": 403801968,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1700750408
    },
    {
        "content": "<p>Using <code>aesop</code> on its own fails. I was able to use it to close the subgoals using this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">ℕ</span> <span class=\"bp\">×</span> <span class=\"n\">ℕ</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x.1</span> <span class=\"bp\">+</span> <span class=\"n\">x.2</span> <span class=\"bp\">=</span> <span class=\"mi\">4</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">∃</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"mi\">4</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">a_1</span> <span class=\"bp\">≤</span> <span class=\"mi\">4</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">a_2</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">a_2</span> <span class=\"bp\">=</span> <span class=\"n\">a_1</span> <span class=\"bp\">∧</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">a_2</span> <span class=\"bp\">=</span> <span class=\"mi\">4</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">a_2</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">Nat.le_add_left</span> <span class=\"n\">x.2</span> <span class=\"n\">x.1</span>\n  <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">Nat.le_add_right</span> <span class=\"n\">x.1</span> <span class=\"n\">x.2</span>\n  <span class=\"n\">apply</span> <span class=\"n\">propext</span><span class=\"bp\">;</span> <span class=\"n\">apply</span> <span class=\"n\">Iff.intro</span>\n  <span class=\"n\">all_goals</span> <span class=\"n\">aesop</span>\n</code></pre></div>\n<p>Would this be considered good style?</p>",
        "id": 403805858,
        "sender_full_name": "Markus Schmaus",
        "timestamp": 1700751684
    },
    {
        "content": "<p>Perhaps style is to a certain extent in the eye of the beholder, but one rule I like is \"if the result is mathematically trivial then prove it in as short a space as possible and don't worry about readability because nobody needs to read the proof\". So I like your proof :-)</p>",
        "id": 403807094,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1700752115
    }
]