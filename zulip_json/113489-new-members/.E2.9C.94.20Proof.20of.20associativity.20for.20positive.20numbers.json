[
    {
        "content": "<p>I'm defining a type for the positive numbers as described in <em>Functional Programming in Lean</em>, and I have this awful proof that multiplication of positive numbers is associative.  I think this should be a very simple thing to prove, but I'm not finding any tactic that can automate away the boring associativity and commutativity problems, and when I try to put certain things into <em>simp</em>, it gets stuck in an infinite loop. What can I do to simplify this proof?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">Pos</span> <span class=\"n\">where</span>\n  <span class=\"n\">predecessor</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Pos.toNat</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Pos</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">n.predecessor</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Mul</span> <span class=\"n\">Pos</span> <span class=\"n\">where</span>\n  <span class=\"n\">mul</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">predecessor</span> <span class=\"o\">:=</span> <span class=\"n\">a.predecessor</span> <span class=\"bp\">*</span> <span class=\"n\">b.predecessor</span> <span class=\"bp\">+</span> <span class=\"n\">a.predecessor</span> <span class=\"bp\">+</span> <span class=\"n\">b.predecessor</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">Pos</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">HMul.hMul</span><span class=\"o\">,</span> <span class=\"n\">Mul.mul</span><span class=\"o\">]</span>\n  <span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"n\">Nat.mul_assoc</span> <span class=\"n\">a.toNat</span> <span class=\"n\">b.toNat</span> <span class=\"n\">c.toNat</span>\n  <span class=\"n\">repeat</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Pos.toNat</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n  <span class=\"n\">repeat</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Nat.succ_mul</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n  <span class=\"n\">repeat</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Nat.mul_succ</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">Nat.add_assoc</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"mi\">1</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">Nat.add_assoc</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"mi\">1</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">Nat.add_assoc</span> <span class=\"n\">_</span> <span class=\"n\">c.predecessor</span> <span class=\"mi\">1</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Nat.succ_mul</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Nat.mul_succ</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">Nat.add_assoc</span><span class=\"o\">,</span> <span class=\"bp\">←</span><span class=\"n\">Nat.mul_assoc</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">Nat.add_assoc</span><span class=\"o\">,</span> <span class=\"bp\">←</span><span class=\"n\">Nat.mul_assoc</span><span class=\"o\">]</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">h</span><span class=\"o\">]</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">Nat.add_right_comm</span> <span class=\"n\">_</span> <span class=\"n\">c.predecessor</span> <span class=\"n\">_</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 387219879,
        "sender_full_name": "Fredrik",
        "timestamp": 1692946476
    },
    {
        "content": "<p>have you seen the <code>ring</code> tactic?</p>",
        "id": 387242159,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1692956005
    },
    {
        "content": "<p>I will say that usually this would be stated as a subtype (so for example see <code>PNat</code>)</p>",
        "id": 387242260,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1692956040
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"284160\">Eric Rodriguez</span> <a href=\"#narrow/stream/113489-new-members/topic/Proof.20of.20associativity.20for.20positive.20numbers/near/387242159\">said</a>:</p>\n<blockquote>\n<p>have you seen the <code>ring</code> tactic?</p>\n</blockquote>\n<p>I haven't. I've not found it any of the three main books, and Lean says “unknown tactic”.</p>",
        "id": 387242712,
        "sender_full_name": "Fredrik",
        "timestamp": 1692956195
    },
    {
        "content": "<p><code>import Mathlib.Tactic</code> should help</p>",
        "id": 387243466,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1692956495
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> Merely adding that import caused my proofs to break, which shows why I don't like languages with unhygenic imports. Anyway, fixing up what was broken, the ring tactic pretty much instantly produced the proof I wanted. Thank you very much! <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span></p>",
        "id": 387245676,
        "sender_full_name": "Fredrik",
        "timestamp": 1692957385
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"638770\">Fredrik</span> has marked this topic as resolved.</p>",
        "id": 387247082,
        "sender_full_name": "Notification Bot",
        "timestamp": 1692957945
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"638770\">Fredrik</span> <a href=\"#narrow/stream/113489-new-members/topic/.E2.9C.94.20Proof.20of.20associativity.20for.20positive.20numbers/near/387245676\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> Merely adding that import caused my proofs to break, which shows why I don't like languages with unhygenic imports. Anyway, fixing up what was broken, the ring tactic pretty much instantly produced the proof I wanted. Thank you very much! <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span></p>\n</blockquote>\n<p>Mathlib style is to replace the <code>simp  [HMul.hMul, Mul.mul]</code> at the start of your proof with whatever the output of <code>  simp? [HMul.hMul, Mul.mul]</code> is (some <code>simp only [stuff]</code>). This mitigates the main source of breakage when adding new imports.</p>",
        "id": 387249783,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1692959054
    }
]