[
    {
        "content": "<p>I have something like </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">A</span>\n<span class=\"n\">as</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">A</span>\n<span class=\"c1\">-----</span>\n<span class=\"n\">List.Mem</span> <span class=\"n\">a</span> <span class=\"n\">as</span>\n</code></pre></div>\n<p>in context (had to do some unfolding). I want to rewrite using a lemma that expects <code>a \\in as</code> (specifically, <a href=\"https://leanprover-community.github.io/mathlib4_docs/Std/Data/List/Lemmas.html#List.mem_map\">this</a> lemma). it won't accept a rewrite with this lemma directly, even if fully qualified -- is there a way to change my goal state to <code>a \\in as</code>? Thanks!</p>",
        "id": 375355584,
        "sender_full_name": "Bhakti Shah",
        "timestamp": 1689359743
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"578936\">@Bhakti Shah</span> It's really a lot more efficient if you give Lean code that demonstrates whatever error you're seeing</p>",
        "id": 375356801,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1689360099
    },
    {
        "content": "<p>There's just a lot of context involved, and I thought this might be easier since it's a general question. Let me try to simplify it and give an example</p>",
        "id": 375357774,
        "sender_full_name": "Bhakti Shah",
        "timestamp": 1689360342
    },
    {
        "content": "<p>It doesn't have to be a simplification of what you're working on -- you could try making a short little <code>example</code> in a new file with just enough to  illustrate (a new file just to be sure you're including the necessary imports)</p>",
        "id": 375359239,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1689360737
    },
    {
        "content": "<p>I think I figured it out. I just used <a href=\"https://leanprover-community.github.io/mathlib4_docs/Init/Tactics.html\">change</a> I'll keep the example thing in mind for the future</p>",
        "id": 375361641,
        "sender_full_name": "Bhakti Shah",
        "timestamp": 1689361325
    },
    {
        "content": "<p>If you got to <code>List.Mem</code>, then you've unfolded too much. Did you need to unfold to here?</p>",
        "id": 375363795,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1689361828
    },
    {
        "content": "<p>This topic was moved here from <a class=\"stream-topic\" data-stream-id=\"113488\" href=\"/#narrow/stream/113488-general/topic/.02klzzwxh.3A0000.03.20notation.20back.20in\">#general &gt; <code>fold</code> notation back in</a> by <span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span>.</p>",
        "id": 375363900,
        "sender_full_name": "Notification Bot",
        "timestamp": 1689361854
    },
    {
        "content": "<p>Yes, I did. I had a membership instance defined in terms of <code>List.mem</code>, and I needed to unfold my context from <code>a \\in b</code> to the definition of the instance itself</p>",
        "id": 376146326,
        "sender_full_name": "Bhakti Shah",
        "timestamp": 1689623616
    },
    {
        "content": "<p>Could you have defined your membership instance to use this <code>a \\in as</code> notation? You're meant to use the notation for list membership rather than <code>List.mem</code> directly.</p>",
        "id": 376242777,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1689663293
    },
    {
        "content": "<p>yeah, I think that would have worked.</p>",
        "id": 376473470,
        "sender_full_name": "Bhakti Shah",
        "timestamp": 1689714247
    }
]