[
    {
        "content": "<p>hope to do something like <code>f(*argv)</code> in python. Tried with macro but not succeed. Then how can I do this.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span>\n  <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"n\">d</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">l</span> <span class=\"o\">:=</span> <span class=\"n\">List.range</span> <span class=\"mi\">10</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">l</span> <span class=\"c1\">-- [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]</span>\n\n<span class=\"n\">macro_rules</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">flattenCall</span> <span class=\"o\">[</span> <span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">term</span><span class=\"o\">],</span><span class=\"bp\">*</span> <span class=\"o\">]</span> <span class=\"bp\">$</span><span class=\"n\">func</span><span class=\"o\">:</span><span class=\"n\">term</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">func</span> <span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"n\">l</span><span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">]</span><span class=\"bp\">'</span><span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">decide</span><span class=\"o\">)</span> <span class=\"o\">]</span><span class=\"bp\">*</span> <span class=\"o\">)</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">flattenCall</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">2</span><span class=\"o\">,</span><span class=\"mi\">3</span><span class=\"o\">,</span><span class=\"mi\">4</span><span class=\"o\">]</span> <span class=\"n\">f</span> <span class=\"c1\">-- hope to be :  f l[1] l[2] l[3] l[4] but failed</span>\n</code></pre></div>",
        "id": 405072615,
        "sender_full_name": "ZHAO Jiecheng",
        "timestamp": 1701335761
    },
    {
        "content": "<p>And what If I what to generate type like <code>Nat → Nat → Nat → ... → Nat</code> for <code>n</code> arguments as well. How can I do?</p>",
        "id": 405073900,
        "sender_full_name": "ZHAO Jiecheng",
        "timestamp": 1701336255
    },
    {
        "content": "<p>For the second one, you want <code>(Fin n → Nat) → Nat</code>. For the first, I think there's notation for iterated (un)currying. I'll see if I can find it.</p>",
        "id": 405138461,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1701357135
    },
    {
        "content": "<p>Oh, there's <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Function.ofArity#doc\">docs#Function.ofArity</a> which is related to what you want. There's also <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Function.OfArity.curry#doc\">docs#Function.OfArity.curry</a> which can help convert between them.</p>",
        "id": 405138672,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1701357221
    },
    {
        "content": "<p>(and also <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Function.OfArity.uncurry#doc\">docs#Function.OfArity.uncurry</a>)</p>",
        "id": 405138743,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1701357243
    },
    {
        "content": "<p>This works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Fin.Tuple.Curry</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Fin.VecNotation</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span>\n  <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"n\">d</span>\n\n<span class=\"k\">#eval</span> <span class=\"o\">(</span><span class=\"k\">show</span> <span class=\"n\">Function.OfArity</span> <span class=\"n\">ℕ</span> <span class=\"n\">ℕ</span> <span class=\"mi\">4</span> <span class=\"k\">from</span> <span class=\"n\">f</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">uncurry</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"mi\">4</span><span class=\"o\">]</span> <span class=\"c1\">-- 10</span>\n</code></pre></div>",
        "id": 405140696,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1701357847
    },
    {
        "content": "<p>Is that close enough to what you want?</p>",
        "id": 405140850,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1701357900
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"197836\">Jireh Loreaux</span> <a href=\"#narrow/stream/113489-new-members/topic/how.20to.20call.20a.20function.20with.20flattened.20arguments/near/405140850\">said</a>:</p>\n<blockquote>\n<p>Is that close enough to what you want?</p>\n</blockquote>\n<p>These things seem to be what I want, I will try. Thank you very much! Here is another problem. For Mathlib is big, is there any way that I can just include a part of it into my project?</p>",
        "id": 405222249,
        "sender_full_name": "ZHAO Jiecheng",
        "timestamp": 1701384767
    },
    {
        "content": "<p>Is your issue disk space or runtime?</p>",
        "id": 405222935,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1701385090
    },
    {
        "content": "<p>Or a more abstract fear of \"big\"?</p>",
        "id": 405222954,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1701385103
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113489-new-members/topic/how.20to.20call.20a.20function.20with.20flattened.20arguments/near/405222954\">said</a>:</p>\n<blockquote>\n<p>Or a more abstract fear of \"big\"?</p>\n</blockquote>\n<p>May be the answer is ridiculous. I do use <code>apply?</code> in mathlib when programming. But It just search too much area. (Lots of symbols that I never seen. ) Basically I am trying to migrate some libs from rust to lean and just use very tiny Nat Int List RBMap related theorems. This may be related to run time (if you think search tactic is a kind of run time).</p>\n<p>For disk space, I think mathlib should be a dev lib instead of a prod lib in the project. Though I guess every lean project may include mathlib. This is the reason why I think this requirement might be ridiculous.</p>",
        "id": 405224476,
        "sender_full_name": "ZHAO Jiecheng",
        "timestamp": 1701385719
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"197836\">Jireh Loreaux</span> <a href=\"#narrow/stream/113489-new-members/topic/how.20to.20call.20a.20function.20with.20flattened.20arguments/near/405140850\">said</a>:</p>\n<blockquote>\n<p>Is that close enough to what you want?</p>\n</blockquote>\n<p>This is what I want. Thank you.</p>",
        "id": 405242133,
        "sender_full_name": "ZHAO Jiecheng",
        "timestamp": 1701393110
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"250110\">ZHAO Jiecheng</span> has marked this topic as resolved.</p>",
        "id": 405242148,
        "sender_full_name": "Notification Bot",
        "timestamp": 1701393116
    }
]