[
    {
        "content": "<p>A complex Hermitian matrix has real eigenvalues and real determinants. However, the way the determinant is defined it has the same type as the matrix elements. Hence, the following lemma statement does not type check:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">linear_algebra.matrix.pos_def</span>\n<span class=\"kn\">import</span> <span class=\"n\">linear_algebra.matrix.spectrum</span>\n<span class=\"kn\">import</span> <span class=\"n\">linear_algebra.matrix.nondegenerate</span>\n<span class=\"kn\">import</span> <span class=\"n\">linear_algebra.matrix.determinant</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.complex.basic</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">m</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}[</span><span class=\"n\">fintype</span> <span class=\"n\">m</span><span class=\"o\">][</span><span class=\"n\">decidable_eq</span> <span class=\"n\">m</span><span class=\"o\">]</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">det_pos</span><span class=\"o\">{</span><span class=\"n\">A</span><span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"n\">m</span> <span class=\"n\">m</span> <span class=\"n\">ℂ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hA</span><span class=\"o\">:</span> <span class=\"n\">matrix.pos_def</span> <span class=\"n\">A</span><span class=\"o\">)</span>  <span class=\"o\">:</span>\n <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"o\">(</span><span class=\"n\">A.det</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>The error given is shown below. Which makes sense, I mean as far as I know complex numbers have no less than comparison.</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>failed to synthesize type class instance for\nm : Type u_1,\n_inst_1 : fintype m,\n_inst_2 : decidable_eq m,\nA : matrix m m ℂ,\nhA : A.pos_def\n⊢ has_lt ℂ\n</code></pre></div>\n<p>Is there a way to tell lean, \"hey this is going to be a real number, please don't stand in the way\" ?</p>",
        "id": 359588506,
        "sender_full_name": "MohanadAhmed",
        "timestamp": 1684487279
    },
    {
        "content": "<p>My current work around is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">det_pos</span><span class=\"o\">{</span><span class=\"n\">A</span><span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"n\">m</span> <span class=\"n\">m</span> <span class=\"n\">ℂ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hA</span><span class=\"o\">:</span> <span class=\"n\">matrix.pos_def</span> <span class=\"n\">A</span><span class=\"o\">)</span>  <span class=\"o\">:</span>\n <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"o\">(</span><span class=\"n\">A.det</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">re</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">A.det</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">im</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>  <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>But this does not feel as clean as just saying this is a real number that is going to be less than zero</p>",
        "id": 359589230,
        "sender_full_name": "MohanadAhmed",
        "timestamp": 1684487410
    },
    {
        "content": "<p>And it will not work in places that require the determinant itself to be positive for example.</p>",
        "id": 359589532,
        "sender_full_name": "MohanadAhmed",
        "timestamp": 1684487479
    },
    {
        "content": "<p>You could do something like \\exists r : R, A.det = r \\and 0 &lt; r, where r is just <a href=\"http://A.det.re\">A.det.re</a>, but I'm not sure that will help much</p>",
        "id": 359591283,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1684487841
    },
    {
        "content": "<p>In the long run, if you are planning to work with hermitian matrices extensively, it might make sense to define a type of HM, construct a real-valued determinant on them and prove that it's coercion to ℂ equals the determinant of the underlying matrix.  It will take some time...</p>",
        "id": 359592428,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1684488072
    },
    {
        "content": "<p>Ultimately, this is not too different from Ruben's suggestion, it simply bundles up the information instead of flattening it out.</p>",
        "id": 359592758,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1684488136
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/complex.strict_ordered_comm_ring\">docs#complex.strict_ordered_comm_ring</a> exists</p>",
        "id": 359599937,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684489751
    },
    {
        "content": "<p><code>open_locale complex_order</code> will make your statement work</p>",
        "id": 359600224,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684489809
    },
    {
        "content": "<p>Your statement is probably true more generally for a <code>star_ordered_ring</code></p>",
        "id": 359600422,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684489853
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113489-new-members/topic/Determinant.20of.20Complex.20Hermitian.20Matrix.20is.20a.20Real.20Number/near/359600224\">said</a>:</p>\n<blockquote>\n<p><code>open_locale complex_order</code> will make your statement work</p>\n</blockquote>\n<p>Just to be clear -- this puts some hideous noncanonical order on the complexes.</p>\n<p>The mathematical approach would be to do what Ruben suggests, prove that <code>0 &lt; A.det.re</code> and then prove that <code>A.det = A.det.re</code> (the latter will be coerced back to a complex number)</p>",
        "id": 359615412,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1684493139
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/complex.strict_ordered_comm_ring\">docs#complex.strict_ordered_comm_ring</a></p>\n<p>That looks like some neat trickery. Any gotchas or side effects to be wary of???</p>",
        "id": 359616954,
        "sender_full_name": "MohanadAhmed",
        "timestamp": 1684493468
    },
    {
        "content": "<blockquote>\n<p>Just to be clear -- this puts some hideous noncanonical order on the complexes.</p>\n</blockquote>\n<p>Indeed, but it's the order  that we decided to use for <a href=\"https://leanprover-community.github.io/mathlib_docs/find/complex.star_ordered_ring\">docs#complex.star_ordered_ring</a>, and mathlib does use it</p>",
        "id": 359620802,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684494252
    },
    {
        "content": "<p>So I think this is precisely the type of situation this hack was designed for, even if we might eventually want to redesign it</p>",
        "id": 359620894,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684494277
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span></p>\n<p>If I use the mathematical approach you describe:<br>\nDoes that mean I will be calling norm cast everywhere I use this?  For example I want to use the <code>ne_of_lt</code> on <code>det_pos</code> To prove that the determinant is_unit??</p>",
        "id": 359621260,
        "sender_full_name": "MohanadAhmed",
        "timestamp": 1684494352
    },
    {
        "content": "<p>You should define <code>real_det</code> (defined for complex hermitian matrices) as well as <code>det</code> (defined for all matrices) and then prove that when you apply the obvious map from R to C which in Lean is not \"the identity\" or \"the inclusion\" but a genuine function, with an invisible name indicated by an up-arrow, then it sends real_det to det. Then you just use whichever function is appropriate.</p>",
        "id": 359622414,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1684494604
    },
    {
        "content": "<p>I'd argue you should prove a single lemma for <code>star_ordered_ring</code>, and recover the <code>.det.re</code> version as a special case for <code>complex</code></p>",
        "id": 359622522,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684494628
    },
    {
        "content": "<p>What does the pathological ordering on the complexes have to do with this question? This is mathematics.</p>",
        "id": 359622666,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1684494667
    },
    {
        "content": "<p>The pathological ordering is the one that lets us generalize <code>x * conj x &gt;= 0</code>so that it applies to the reals and the complex numbers</p>",
        "id": 359622768,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684494694
    },
    {
        "content": "<p>You could argue that's the wrong thing to generalize, but it's too late for that; we already did the generalization!</p>",
        "id": 359622938,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684494723
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113489-new-members/topic/Determinant.20of.20Complex.20Hermitian.20Matrix.20is.20a.20Real.20Number/near/359622522\">said</a>:</p>\n<blockquote>\n<p>I'd argue you should prove a single lemma for <code>star_ordered_ring</code>, and recover the <code>.det.re</code> version as a special case for <code>complex</code></p>\n</blockquote>\n<p>Maybe I'm wrong and <code>is_R_or_C</code> is the right assumption after all</p>",
        "id": 359623207,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684494792
    },
    {
        "content": "<p>I understand that but what I am saying is that it's not the right answer here. In the Langlands program one wants to consider unitary and Hermitian matrices in more general situations, where there is more than one ordering on the base, and yet we definitely want the assertion that the determinant of the matrix with coefficients in the bigger field is taking values in the smaller field, so for this a modified det is needed. We have something like <a href=\"https://leanprover-community.github.io/mathlib_docs/find/complex.norm_sq\">docs#complex.norm_sq</a> which adopts the same approach.</p>",
        "id": 359623466,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1684494849
    },
    {
        "content": "<p>I think this maybe that statement should be <code>(h : is_skew_adjoint M) : is_self_adjoint M.det</code>?</p>",
        "id": 359623680,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684494919
    },
    {
        "content": "<p>This sounds much more like what I was envisaging.</p>",
        "id": 359623758,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1684494940
    },
    {
        "content": "<p>In Langlands you might consider fields like the splitting field of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>x</mi><mn>2</mn></msup><mo>−</mo><mn>2</mn></mrow><annotation encoding=\"application/x-tex\">x^2-2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8974em;vertical-align:-0.0833em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">2</span></span></span></span>. This is a field <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">Q</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\mathbb{Q}(x)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathbb\">Q</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span></span></span></span> with <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>x</mi><mn>2</mn></msup><mo>=</mo><mn>2</mn></mrow><annotation encoding=\"application/x-tex\">x^2=2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">2</span></span></span></span> but <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">x</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">x</span></span></span></span> is neither \"the positive square root of 2\" or \"the negative square root of 2\", it is a square root of 2 whose sign has not been determined yet. There are two maps from this field to the reals, one sending <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">x</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">x</span></span></span></span> to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>+</mo><msqrt><mn>2</mn></msqrt></mrow><annotation encoding=\"application/x-tex\">+\\sqrt{2}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.04em;vertical-align:-0.1328em;\"></span><span class=\"mord\">+</span><span class=\"mord sqrt\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.9072em;\"><span class=\"svg-align\" style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\" style=\"padding-left:0.833em;\"><span class=\"mord\">2</span></span></span><span style=\"top:-2.8672em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"hide-tail\" style=\"min-width:0.853em;height:1.08em;\"><svg xmlns=\"http://www.w3.org/2000/svg\" width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702\nc-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14\nc0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54\nc44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10\ns173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429\nc69,-144,104.5,-217.7,106.5,-221\nl0 -0\nc5.3,-9.3,12,-14,20,-14\nH400000v40H845.2724\ns-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7\nc-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47z\nM834 80h400000v40h-400000z'/></svg></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1328em;\"><span></span></span></span></span></span></span></span></span> and one sending it to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>−</mo><msqrt><mn>2</mn></msqrt></mrow><annotation encoding=\"application/x-tex\">-\\sqrt{2}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.04em;vertical-align:-0.1328em;\"></span><span class=\"mord\">−</span><span class=\"mord sqrt\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.9072em;\"><span class=\"svg-align\" style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\" style=\"padding-left:0.833em;\"><span class=\"mord\">2</span></span></span><span style=\"top:-2.8672em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"hide-tail\" style=\"min-width:0.853em;height:1.08em;\"><svg xmlns=\"http://www.w3.org/2000/svg\" width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702\nc-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14\nc0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54\nc44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10\ns173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429\nc69,-144,104.5,-217.7,106.5,-221\nl0 -0\nc5.3,-9.3,12,-14,20,-14\nH400000v40H845.2724\ns-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7\nc-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47z\nM834 80h400000v40h-400000z'/></svg></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1328em;\"><span></span></span></span></span></span></span></span></span>. There is a notation of \"totally positive element\", which means \"positive under both embeddings\" in this case, so for example <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">x</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">x</span></span></span></span> is not totally positive but <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mo>+</mo><mn>37</mn></mrow><annotation encoding=\"application/x-tex\">x+37</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6667em;vertical-align:-0.0833em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">37</span></span></span></span> is (because both <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>37</mn><mo>+</mo><msqrt><mn>2</mn></msqrt></mrow><annotation encoding=\"application/x-tex\">37+\\sqrt{2}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7278em;vertical-align:-0.0833em;\"></span><span class=\"mord\">37</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.04em;vertical-align:-0.1328em;\"></span><span class=\"mord sqrt\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.9072em;\"><span class=\"svg-align\" style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\" style=\"padding-left:0.833em;\"><span class=\"mord\">2</span></span></span><span style=\"top:-2.8672em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"hide-tail\" style=\"min-width:0.853em;height:1.08em;\"><svg xmlns=\"http://www.w3.org/2000/svg\" width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702\nc-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14\nc0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54\nc44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10\ns173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429\nc69,-144,104.5,-217.7,106.5,-221\nl0 -0\nc5.3,-9.3,12,-14,20,-14\nH400000v40H845.2724\ns-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7\nc-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47z\nM834 80h400000v40h-400000z'/></svg></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1328em;\"><span></span></span></span></span></span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>37</mn><mo>−</mo><msqrt><mn>2</mn></msqrt></mrow><annotation encoding=\"application/x-tex\">37-\\sqrt{2}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7278em;vertical-align:-0.0833em;\"></span><span class=\"mord\">37</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.04em;vertical-align:-0.1328em;\"></span><span class=\"mord sqrt\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.9072em;\"><span class=\"svg-align\" style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\" style=\"padding-left:0.833em;\"><span class=\"mord\">2</span></span></span><span style=\"top:-2.8672em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"hide-tail\" style=\"min-width:0.853em;height:1.08em;\"><svg xmlns=\"http://www.w3.org/2000/svg\" width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702\nc-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14\nc0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54\nc44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10\ns173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429\nc69,-144,104.5,-217.7,106.5,-221\nl0 -0\nc5.3,-9.3,12,-14,20,-14\nH400000v40H845.2724\ns-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7\nc-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47z\nM834 80h400000v40h-400000z'/></svg></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1328em;\"><span></span></span></span></span></span></span></span></span> are positive). In this situation it's really important that one does not fix an ordering on the base field, and yet exactly the question which Mohanad raises arises when one is doing unitary matrices over a totally imaginary extension <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>K</mi></mrow><annotation encoding=\"application/x-tex\">K</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span></span></span></span> of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">Q</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\mathbb{Q}(x)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathbb\">Q</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span></span></span></span> (which will be a <code>star_ring</code>), for example the splitting field of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>y</mi><mn>2</mn></msup><mo>+</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">y^2+1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0085em;vertical-align:-0.1944em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span></span></span></span> over <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">Q</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\mathbb{Q}(x)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathbb\">Q</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span></span></span></span> (and again it's important not to identify <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>y</mi></mrow><annotation encoding=\"application/x-tex\">y</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span></span></span></span> with <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>+</mo><mi>i</mi></mrow><annotation encoding=\"application/x-tex\">+i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7429em;vertical-align:-0.0833em;\"></span><span class=\"mord\">+</span><span class=\"mord mathnormal\">i</span></span></span></span> or <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>−</mo><mi>i</mi></mrow><annotation encoding=\"application/x-tex\">-i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7429em;vertical-align:-0.0833em;\"></span><span class=\"mord\">−</span><span class=\"mord mathnormal\">i</span></span></span></span>, this is the problem I have with <code>is_R_or_C</code>; the star exists even without this identification). Here the statement would be that the determinant was totally positive, but if we have some fixed order on everything then it will be difficult to make that statement cleanly.</p>",
        "id": 359624737,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1684495175
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/is_self_adjoint\">docs#is_self_adjoint</a></p>",
        "id": 359625685,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1684495421
    },
    {
        "content": "<p>Just to note, my <code>complex_order</code> comments above are a distraction; after all this we don't have the instance for <code>is_R_or_C</code> anyway!</p>",
        "id": 359625720,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684495432
    },
    {
        "content": "<p>(I lied about <code>is_skew_adjoint</code>, we don't actually have it, only the add_subgroup version <a href=\"https://leanprover-community.github.io/mathlib_docs/find/skew_adjoint\">docs#skew_adjoint</a>)</p>",
        "id": 359625873,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684495466
    },
    {
        "content": "<p>Yeah, <code>is_self_adjoint</code> looks perfect for this. Then there should be some lemma stating that if you're a self-adjoint complex number then you're the coercion of a real number, and you can build <code>real_det</code> from this.</p>",
        "id": 359625961,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1684495487
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/complex.conj_eq_iff_re\">docs#complex.conj_eq_iff_re</a></p>",
        "id": 359626156,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684495524
    },
    {
        "content": "<p><code>⇑(star_ring_end ℂ) z = z</code> is defeq to <code>is_self_adjoint z</code></p>",
        "id": 359626245,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684495542
    },
    {
        "content": "<p>And if you have <code>h : is_self_adjoint z</code> then <code>h.star_eq : star z = z</code></p>",
        "id": 359626468,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684495586
    },
    {
        "content": "<p>The <code>star</code> vs <code>star_ring_end</code> (aka <code>conj</code>) thing is annoying (at least in this scenario)</p>",
        "id": 359626510,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684495598
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/star_ring_end_apply\">docs#star_ring_end_apply</a> is deliberately not a <code>simp</code> lemma, because for complex analysis it's convenient to have <code>conj</code> be the bundled version, but elsewhere all the lemmas are about the unbundled version</p>",
        "id": 359626797,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684495655
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113489-new-members/topic/Determinant.20of.20Complex.20Hermitian.20Matrix.20is.20a.20Real.20Number/near/359623680\">said</a>:</p>\n<blockquote>\n<p>I think this maybe that statement should be <code>(h : is_hermitian M) : is_self_adjoint M.det</code>?</p>\n</blockquote>\n<p>Note this result follows trivially from <a href=\"https://leanprover-community.github.io/mathlib_docs/find/matrix.det_conj_transpose\">docs#matrix.det_conj_transpose</a></p>",
        "id": 359627170,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684495726
    }
]