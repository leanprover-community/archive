[
    {
        "content": "<p>This code causes error at <code>have</code>.Why is that?<br>\nI would like to show this proposition without <code>choose</code>, although it can be easily shown using <code>choose</code>.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Y</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"c1\">-- construct `f`</span>\n  <span class=\"k\">let</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">↦</span> <span class=\"kd\">by</span>\n    <span class=\"k\">have</span> <span class=\"o\">⟨</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">hx</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">h</span> <span class=\"n\">x</span>\n    <span class=\"gr\">sorry</span>\n\n  <span class=\"n\">exists</span> <span class=\"n\">f</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>I think it may have something to do with noncomputable, but I can't write the correct code.</p>",
        "id": 392844987,
        "sender_full_name": "Asei Inoue",
        "timestamp": 1695569900
    },
    {
        "content": "<p>This is literally called <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Classical.axiomOfChoice#doc\">docs#Classical.axiomOfChoice</a> in Lean, so it's not surprising you have to use <code>choose</code> ...</p>",
        "id": 392849814,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1695573505
    },
    {
        "content": "<p>What this error message means is that you can only extract the witness for an exponential directly if it is being used for another proof, not to construct data out of it. The axiom of choice in lean is precisely the additional axiom that you can always extract a witness, but this is really a more powerful axiom on top of the base theory.</p>",
        "id": 392865658,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1695587427
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"127136\">Alex J. Best</span> <a href=\"#narrow/stream/113489-new-members/topic/.60have.60.20cause.20error/near/392865658\">said</a>:</p>\n<blockquote>\n<p>witness for an exponential</p>\n</blockquote>\n<p>\"existential\", I presume? Nice typo <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 392865693,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1695587492
    }
]