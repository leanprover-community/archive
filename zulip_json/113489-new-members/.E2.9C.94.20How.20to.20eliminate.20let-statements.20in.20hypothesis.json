[
    {
        "content": "<p>I'm stuck at a point in a bigger proof; I have lots of let-statments floating around, and now I need to prove stuff about them.  I know I can use <code>intro</code> to eliminate a let-statement in the goal, but how can I eliminate a let-statement in a hypothesis?  Here's a mwe.  I'm using <code>unfold</code> here because Lean's <code>simp</code> is smart enough to do the substitution, but in my actual proof it cannot.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.Parity</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">weighted_sum_even</span> <span class=\"o\">(</span><span class=\"n\">x₁</span> <span class=\"n\">x₂</span> <span class=\"n\">w₁</span> <span class=\"n\">w₂</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"n\">term₁</span> <span class=\"o\">:=</span> <span class=\"n\">x₁</span> <span class=\"bp\">*</span> <span class=\"n\">w₁</span>\n  <span class=\"k\">let</span> <span class=\"n\">term₂</span> <span class=\"o\">:=</span> <span class=\"n\">x₂</span> <span class=\"bp\">*</span> <span class=\"n\">w₂</span>\n  <span class=\"n\">Even</span> <span class=\"o\">(</span><span class=\"n\">term₁</span> <span class=\"bp\">+</span> <span class=\"n\">term₂</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">x₁</span> <span class=\"n\">x₂</span> <span class=\"n\">w₁</span> <span class=\"n\">w₂</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">x₁</span> <span class=\"bp\">=</span> <span class=\"n\">x₂</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"n\">w₁</span> <span class=\"bp\">=</span> <span class=\"n\">w₂</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">weighted_sum_even</span> <span class=\"n\">x₁</span> <span class=\"n\">x₂</span> <span class=\"n\">w₁</span> <span class=\"n\">w₂</span>\n  <span class=\"bp\">→</span> <span class=\"n\">weighted_sum_even</span> <span class=\"n\">x₂</span> <span class=\"n\">x₁</span> <span class=\"n\">w₂</span> <span class=\"n\">w₁</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n\n  <span class=\"n\">intro</span> <span class=\"n\">h₁</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">weighted_sum_even</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">weighted_sum_even</span> <span class=\"n\">at</span> <span class=\"n\">h₁</span>\n\n  <span class=\"c1\">-- I can eliminate the 'let' in the goal using intro</span>\n  <span class=\"n\">intro</span> <span class=\"n\">term₁</span>\n  <span class=\"n\">intro</span> <span class=\"n\">term₂</span>\n\n  <span class=\"c1\">-- But I don't know how to \"intro at h₁\"</span>\n  <span class=\"c1\">-- (I want to eliminate the let-statement at h₁)</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>I hope I have all the right imports for the mwe.  Thanks for your time!</p>",
        "id": 357092047,
        "sender_full_name": "Caleb Schultz Kisby",
        "timestamp": 1683663707
    },
    {
        "content": "<p>Have you tried <code>dsimp</code>?</p>",
        "id": 357092231,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1683663768
    },
    {
        "content": "<p>In this case it would be <code>dsimp at h₁ ⊢</code> I guess</p>",
        "id": 357092940,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1683664004
    },
    {
        "content": "<p>So, in my actual proof <code>simp at h₁</code> <em>will</em> reduce the let-statement, but I used <code>let</code> to hide away a bunch of ugly code.  So <code>simp</code> (and <code>dsimp</code>, I just tried it out) will give me a mess of functions.  I'd like to have more fine-grained control over what I bind all the ugly stuff to, e.g. <code>intro term₁</code> keeps things tidy.</p>",
        "id": 357093013,
        "sender_full_name": "Caleb Schultz Kisby",
        "timestamp": 1683664027
    },
    {
        "content": "<p>I don't know if it would help to paste the actual situation I'm in, I couldn't come up with a mwe that Lean can't just <code>simp</code> away.</p>",
        "id": 357093086,
        "sender_full_name": "Caleb Schultz Kisby",
        "timestamp": 1683664054
    },
    {
        "content": "<p>In the past I've</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">simp</span>\n<span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">h₁</span>\n<span class=\"n\">convert</span> <span class=\"n\">h₁</span> <span class=\"n\">using</span> <span class=\"bp\">...</span>\n</code></pre></div>\n<p>but in this specific circumstance <code>convert</code> fails, so I'd like to have more control over the hypotheses.</p>",
        "id": 357093389,
        "sender_full_name": "Caleb Schultz Kisby",
        "timestamp": 1683664149
    },
    {
        "content": "<p>Is there no way to just say something like <code>intro at h₁</code>, and have that variable enter the local context?  (I'm not trying to be difficult!  It just seems like it should be more straightforward than it is...)</p>",
        "id": 357094481,
        "sender_full_name": "Caleb Schultz Kisby",
        "timestamp": 1683664581
    },
    {
        "content": "<p>No, this tactic does not exist, it just needs someone to write it :)</p>",
        "id": 357095354,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1683664959
    },
    {
        "content": "<p>Haha ok that's fair, I was hoping that wouldn't be the answer!  I'm not comfortable with tactic-writing yet, but that sounds like a good first thing to try <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 357096085,
        "sender_full_name": "Caleb Schultz Kisby",
        "timestamp": 1683665301
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"556217\">Caleb Schultz Kisby</span> has marked this topic as resolved.</p>",
        "id": 357097893,
        "sender_full_name": "Notification Bot",
        "timestamp": 1683666110
    },
    {
        "content": "<p>Thanks for your help!  For anybody having this problem in the future, I just figured out a hacky way to simulate the intros.  I guess this is what the tactic should do, more or less.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.Parity</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">weighted_sum_even</span> <span class=\"o\">(</span><span class=\"n\">x₁</span> <span class=\"n\">x₂</span> <span class=\"n\">w₁</span> <span class=\"n\">w₂</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"n\">term₁</span> <span class=\"o\">:=</span> <span class=\"n\">x₁</span> <span class=\"bp\">*</span> <span class=\"n\">w₁</span>\n  <span class=\"k\">let</span> <span class=\"n\">term₂</span> <span class=\"o\">:=</span> <span class=\"n\">x₂</span> <span class=\"bp\">*</span> <span class=\"n\">w₂</span>\n  <span class=\"n\">Even</span> <span class=\"o\">(</span><span class=\"n\">term₁</span> <span class=\"bp\">+</span> <span class=\"n\">term₂</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">x₁</span> <span class=\"n\">x₂</span> <span class=\"n\">w₁</span> <span class=\"n\">w₂</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">x₁</span> <span class=\"bp\">=</span> <span class=\"n\">x₂</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"n\">w₁</span> <span class=\"bp\">=</span> <span class=\"n\">w₂</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">weighted_sum_even</span> <span class=\"n\">x₁</span> <span class=\"n\">x₂</span> <span class=\"n\">w₁</span> <span class=\"n\">w₂</span>\n  <span class=\"bp\">→</span> <span class=\"n\">weighted_sum_even</span> <span class=\"n\">x₂</span> <span class=\"n\">x₁</span> <span class=\"n\">w₂</span> <span class=\"n\">w₁</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n\n  <span class=\"n\">intro</span> <span class=\"n\">h₁</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">weighted_sum_even</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">weighted_sum_even</span> <span class=\"n\">at</span> <span class=\"n\">h₁</span>\n\n  <span class=\"c1\">-- I can eliminate the 'let' in the goal using intro</span>\n  <span class=\"n\">intro</span> <span class=\"n\">term₂₁</span>\n  <span class=\"n\">intro</span> <span class=\"n\">term₂₂</span>\n\n  <span class=\"c1\">-- Just manually do the lets in the hypothesis.</span>\n  <span class=\"c1\">-- The 'have' statement binds the cleaned up type.</span>\n  <span class=\"k\">let</span> <span class=\"n\">term₁₁</span> <span class=\"o\">:=</span> <span class=\"n\">x₁</span> <span class=\"bp\">*</span> <span class=\"n\">w₁</span>\n  <span class=\"k\">let</span> <span class=\"n\">term₁₂</span> <span class=\"o\">:=</span> <span class=\"n\">x₂</span> <span class=\"bp\">*</span> <span class=\"n\">w₂</span><span class=\"bp\">;</span>\n  <span class=\"k\">have</span> <span class=\"n\">h₃</span> <span class=\"o\">:</span> <span class=\"n\">Even</span> <span class=\"o\">(</span><span class=\"n\">term₁₁</span> <span class=\"bp\">+</span> <span class=\"n\">term₁₂</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">h₁</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 357098572,
        "sender_full_name": "Caleb Schultz Kisby",
        "timestamp": 1683666394
    },
    {
        "content": "<p>You might be able to do <code>change Even _ at h₁</code> to get it to unfold the lets, but this technique depends on knowing part of a let-free from of what you're trying to unfold.</p>",
        "id": 357102556,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1683668084
    },
    {
        "content": "<p>I think I wrote a tactic on Zulip for this called <code>intro_lets</code></p>",
        "id": 357128818,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1683679941
    },
    {
        "content": "<p>Zulip mobile search is too limited for me to find it right now...</p>",
        "id": 357128943,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1683680012
    },
    {
        "content": "<p><a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Pulling.20.60let.60s.20to.20the.20outside.20of.20a.20statement/near/315581119\">https://leanprover.zulipchat.com/#narrow/stream/217875-Is-there-code-for-X.3F/topic/Pulling.20.60let.60s.20to.20the.20outside.20of.20a.20statement/near/315581119</a></p>",
        "id": 357133055,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1683681814
    },
    {
        "content": "<p>Hey, thanks!  I'll try out your tactic when I next get a chance!</p>",
        "id": 357168789,
        "sender_full_name": "Caleb Schultz Kisby",
        "timestamp": 1683698465
    },
    {
        "content": "<p>(I feel a bit more sane knowing somebody else ran into this same problem.)</p>",
        "id": 357168903,
        "sender_full_name": "Caleb Schultz Kisby",
        "timestamp": 1683698506
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"556217\">@Caleb Schultz Kisby</span> <a href=\"https://github.com/leanprover-community/mathlib4/pull/3897\">mathlib4#3897</a> has a first version of an <code>intro ... at ...</code> tactic</p>",
        "id": 357400941,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1683751286
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/113489-new-members/topic/.E2.9C.94.20How.20to.20eliminate.20let-statements.20in.20hypothesis/near/357400941\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"556217\">Caleb Schultz Kisby</span> <a href=\"https://github.com/leanprover-community/mathlib4/pull/3897\">mathlib4#3897</a> has a first version of an <code>intro ... at ...</code> tactic</p>\n</blockquote>\n<p>I just saw this -- thanks for implementing it!  I'm excited to give it a try :D</p>",
        "id": 358590538,
        "sender_full_name": "Caleb Schultz Kisby",
        "timestamp": 1684194018
    }
]