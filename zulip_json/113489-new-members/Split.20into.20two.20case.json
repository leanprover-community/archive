[
    {
        "content": "<p>I have the following setup. I want to proceed with splitting the goal into two cases where <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>b</mi><mo>=</mo><mi>c</mi></mrow><annotation encoding=\"application/x-tex\">b = c</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\">b</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">c</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>b</mi><mo mathvariant=\"normal\">≠</mo><mi>c</mi></mrow><annotation encoding=\"application/x-tex\">b \\neq c</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">b</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\"><span class=\"mrel\"><span class=\"mord vbox\"><span class=\"thinbox\"><span class=\"rlap\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"inner\"><span class=\"mord\"><span class=\"mrel\"></span></span></span><span class=\"fix\"></span></span></span></span></span><span class=\"mrel\">=</span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">c</span></span></span></span>. How can I do that?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Logic.Basic</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">Point</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">collinear</span> <span class=\"o\">:</span> <span class=\"n\">Point</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Point</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Point</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">Point</span>\n<span class=\"k\">#check</span> <span class=\"n\">collinear</span>\n\n<span class=\"kd\">axiom</span> <span class=\"n\">l1</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Point</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">collinear</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">a</span>\n<span class=\"kd\">axiom</span> <span class=\"n\">l2</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">Point</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">collinear</span> <span class=\"n\">a</span> <span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"bp\">→</span> <span class=\"n\">collinear</span> <span class=\"n\">b</span> <span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"bp\">→</span> <span class=\"n\">p</span> <span class=\"bp\">≠</span> <span class=\"n\">q</span> <span class=\"bp\">→</span> <span class=\"n\">collinear</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">p</span>\n<span class=\"kd\">axiom</span> <span class=\"n\">l3</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"n\">p</span><span class=\"o\">:</span> <span class=\"n\">Point</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">collinear</span> <span class=\"n\">p</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">collinear</span> <span class=\"n\">p</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"bp\">→</span>\n<span class=\"bp\">∃</span> <span class=\"n\">q</span><span class=\"o\">:</span> <span class=\"n\">Point</span> <span class=\"o\">,</span> <span class=\"n\">collinear</span> <span class=\"n\">q</span> <span class=\"n\">a</span> <span class=\"n\">c</span> <span class=\"bp\">∧</span> <span class=\"n\">collinear</span> <span class=\"n\">q</span> <span class=\"n\">b</span> <span class=\"n\">d</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">switch_two_three</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">:</span> <span class=\"n\">Point</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">collinear</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"bp\">→</span> <span class=\"n\">collinear</span> <span class=\"n\">a</span> <span class=\"n\">c</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n<span class=\"n\">intro</span>\n</code></pre></div>",
        "id": 406603399,
        "sender_full_name": "abdullah uyu",
        "timestamp": 1701975542
    },
    {
        "content": "<p><code>by_cases h: b = c</code></p>",
        "id": 406606043,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1701976624
    },
    {
        "content": "<p>Thank you very much.</p>",
        "id": 406607081,
        "sender_full_name": "abdullah uyu",
        "timestamp": 1701977065
    },
    {
        "content": "<p>Even better: <code>obtain rfl | hbc := eq_or_ne b c</code></p>",
        "id": 406607253,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1701977143
    },
    {
        "content": "<p>Well, that worked quite nice:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">switch_two_three</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">:</span> <span class=\"n\">Point</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">collinear</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"bp\">→</span> <span class=\"n\">collinear</span> <span class=\"n\">a</span> <span class=\"n\">c</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n<span class=\"n\">intro</span> <span class=\"n\">col</span>\n<span class=\"n\">obtain</span> <span class=\"n\">rfl</span> <span class=\"bp\">|</span> <span class=\"n\">hbc</span> <span class=\"o\">:=</span> <span class=\"n\">eq_or_ne</span> <span class=\"n\">b</span> <span class=\"n\">c</span>\n<span class=\"n\">exact</span> <span class=\"n\">col</span>\n<span class=\"n\">apply</span> <span class=\"n\">l2</span> <span class=\"n\">Point</span> <span class=\"n\">collinear</span> <span class=\"n\">a</span> <span class=\"n\">c</span> <span class=\"n\">b</span> <span class=\"n\">c</span>\n<span class=\"n\">exact</span> <span class=\"n\">col</span>\n<span class=\"n\">apply</span> <span class=\"n\">l1</span> <span class=\"n\">Point</span> <span class=\"n\">collinear</span> <span class=\"n\">c</span> <span class=\"n\">b</span>\n<span class=\"n\">exact</span> <span class=\"n\">hbc</span>\n</code></pre></div>\n<p>With that, I have proved my first theorem! This feels good :) I have another question though, why did I have to apply <code>l2</code> that way? I would have expected something like <code>l2 a c b c</code>.</p>",
        "id": 406609270,
        "sender_full_name": "abdullah uyu",
        "timestamp": 1701978034
    },
    {
        "content": "<p>Because you used parenthesis in your variables so they are explicit variables.</p>",
        "id": 406609521,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1701978139
    },
    {
        "content": "<p>Try with curly braces instead.</p>",
        "id": 406609546,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1701978150
    },
    {
        "content": "<p>Brilliant! Thank you :)</p>",
        "id": 406609767,
        "sender_full_name": "abdullah uyu",
        "timestamp": 1701978251
    }
]