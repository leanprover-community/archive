[
    {
        "content": "<p>Hello @stream I'm very new to lean. I am trying to prove the following.. After having read all of \"Theorem Proving in Lean\", I still can't seem to even imagine where to begin even though it should be simple. Any help is greatly appreciated!</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Foo</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">alice</span>\n  <span class=\"bp\">|</span> <span class=\"n\">bob</span>\n  <span class=\"bp\">|</span> <span class=\"n\">charles</span>\n<span class=\"kn\">open</span> <span class=\"n\">Foo</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">Bar</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">boy</span>\n  <span class=\"bp\">|</span> <span class=\"n\">girl</span>\n<span class=\"kn\">open</span> <span class=\"n\">Bar</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span> <span class=\"bp\">→</span> <span class=\"n\">Bar</span>\n  <span class=\"bp\">|</span> <span class=\"n\">charles</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">boy</span>\n  <span class=\"bp\">|</span> <span class=\"n\">alice</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">girl</span>\n  <span class=\"bp\">|</span> <span class=\"n\">bob</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">boy</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">Foo</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">boy</span><span class=\"o\">):</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">=</span><span class=\"n\">bob</span> <span class=\"bp\">∨</span> <span class=\"n\">x</span><span class=\"bp\">=</span><span class=\"n\">charles</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 339410183,
        "sender_full_name": "Somo S.",
        "timestamp": 1677866197
    },
    {
        "content": "<p>Do I maybe have to employ classical reasoning?</p>",
        "id": 339411339,
        "sender_full_name": "Somo S.",
        "timestamp": 1677866510
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">Foo</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">boy</span><span class=\"o\">):</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">=</span><span class=\"n\">bob</span> <span class=\"bp\">∨</span> <span class=\"n\">x</span><span class=\"bp\">=</span><span class=\"n\">charles</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">cases</span> <span class=\"n\">x</span>\n  <span class=\"bp\">·</span> <span class=\"n\">apply</span> <span class=\"n\">False.elim</span> <span class=\"bp\">;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">f</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n  <span class=\"bp\">·</span> <span class=\"n\">apply</span> <span class=\"n\">Or.inl</span> <span class=\"bp\">;</span> <span class=\"n\">rfl</span>\n  <span class=\"bp\">·</span> <span class=\"n\">apply</span> <span class=\"n\">Or.inr</span> <span class=\"bp\">;</span> <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 339412592,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1677866850
    },
    {
        "content": "<p>oh thank you so much <span class=\"user-mention\" data-user-id=\"243562\">@Adam Topaz</span> <br>\nThis is informative. I am still trying to get used thinking in terms of tactic at the outset.. But I believe I understand what you have written</p>",
        "id": 339413603,
        "sender_full_name": "Somo S.",
        "timestamp": 1677867188
    },
    {
        "content": "<p>Or an even shorter proof:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">boy</span> <span class=\"bp\">→</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">bob</span> <span class=\"bp\">∨</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">charles</span>\n<span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">bob</span><span class=\"o\">,</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">.</span><span class=\"n\">inl</span> <span class=\"n\">rfl</span>\n<span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">charles</span><span class=\"o\">,</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 339423585,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1677870265
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"582386\">Somo S.</span> has marked this topic as resolved.</p>",
        "id": 339674514,
        "sender_full_name": "Notification Bot",
        "timestamp": 1678013738
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113489-new-members/topic/.E2.9C.94.20simple.20proof.20with.20enums/near/339423585\">said</a>:</p>\n<blockquote>\n<p>Or an even shorter proof:</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">boy</span> <span class=\"bp\">→</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">bob</span> <span class=\"bp\">∨</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">charles</span>\n<span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">bob</span><span class=\"o\">,</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">.</span><span class=\"n\">inl</span> <span class=\"n\">rfl</span>\n<span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">charles</span><span class=\"o\">,</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"n\">rfl</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span>, I'm not sure I understand this one</p>\n<ol>\n<li>how does it know to not have to handle the alice case</li>\n<li>how does it know when you can leave out the parent namespace in referencing a value</li>\n</ol>",
        "id": 339699986,
        "sender_full_name": "Somo S.",
        "timestamp": 1678025134
    },
    {
        "content": "<p>You can leave out <code>alice</code> because the <code>f alice = boy</code> case is impossible, and lean knows that</p>",
        "id": 339701693,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1678025951
    },
    {
        "content": "<p>For 2, I don't know the details; but the general idea is that lean knows which constructor you mean because it knows what type you're constructing</p>",
        "id": 339701818,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1678026008
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113489-new-members/topic/.E2.9C.94.20simple.20proof.20with.20enums/near/339701693\">said</a>:</p>\n<blockquote>\n<p>You can leave out <code>alice</code> because the <code>f alice = boy</code> case is impossible, and lean knows that</p>\n</blockquote>\n<p>does lean only know this to be the case because in this case proving that case involves some triviality (with <code>simp</code> for example) in other words, if it was non-trivial to show that the alice case is impossible would lean insist that we do that case as well?</p>",
        "id": 339702455,
        "sender_full_name": "Somo S.",
        "timestamp": 1678026252
    },
    {
        "content": "<p>Lean knows the case is impossible because <code>f alice</code> reduces to <code>girl</code>, and <code>girl</code> and <code>boy</code> are distinct constructors of an inductive type.</p>",
        "id": 339704218,
        "sender_full_name": "Reid Barton",
        "timestamp": 1678026893
    },
    {
        "content": "<p>I'm pretty sure it doesn't try stuff like <code>simp</code>.</p>",
        "id": 339704364,
        "sender_full_name": "Reid Barton",
        "timestamp": 1678026969
    }
]