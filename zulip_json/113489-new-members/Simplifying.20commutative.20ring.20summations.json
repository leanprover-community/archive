[
    {
        "content": "<p>Hello, I'm new to Lean and I was wondering why <code>simp</code> couldn't simplify the following <code>- 1 + 1</code>s inside this expression:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">inst</span><span class=\"bp\">✝</span> <span class=\"o\">:</span> <span class=\"n\">CommRing</span> <span class=\"n\">R</span>\n<span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">R</span>\n<span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span>\n<span class=\"n\">hs</span> <span class=\"o\">:</span> <span class=\"bp\">∑</span> <span class=\"n\">x_1</span> <span class=\"k\">in</span> <span class=\"n\">range</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">x_1</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">x_1</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"bp\">*</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">Nat.choose</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">x_1</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"bp\">-</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"bp\">∑</span> <span class=\"n\">x_1</span> <span class=\"k\">in</span> <span class=\"n\">range</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">x_1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">x_1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">Nat.choose</span> <span class=\"n\">n</span> <span class=\"n\">x_1</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>I'm just  trying to do <code>simp at hs</code> and it won't progress any further, this isn't the first time I've had issues with simplifying the inner function inside a sum, so I'm wondering what's the proper way of doing it or what I'm doing wrong?</p>\n<p>My context is the following:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.IntervalCases</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.BigOperators.Order</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Nat.Multiplicity</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">scoped</span> <span class=\"n\">Nat</span> <span class=\"n\">BigOperators</span>\n<span class=\"kn\">open</span> <span class=\"n\">Nat</span>\n<span class=\"kn\">open</span> <span class=\"n\">Finset</span> <span class=\"n\">multiplicity</span>\n</code></pre></div>",
        "id": 400615542,
        "sender_full_name": "Kauê Campos",
        "timestamp": 1699306972
    },
    {
        "content": "<p>Well, <code>0 - 1 + 1 ≠ 0</code> in lean...</p>",
        "id": 400615731,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1699307049
    },
    {
        "content": "<p>But in a ring it's true, and we have <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=add_sub_cancel#doc\">docs#add_sub_cancel</a> (that is tagged <code>simp</code>).</p>",
        "id": 400616007,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1699307170
    },
    {
        "content": "<p>Ah, sorry, it is for the exponents, so it is in <code>Nat</code>.</p>",
        "id": 400616056,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1699307199
    },
    {
        "content": "<p>Well, then the reason, as Eric said, it that it is not true, because <code>0-1=0</code></p>",
        "id": 400616089,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1699307220
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 400616215,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1699307283
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 400616276,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1699307306
    },
    {
        "content": "<p>Ah, I see, I didn't realize it was a natural there. I'll try another approach to doing this then, I suppose that's why I couldn't simplify other stuff inside summations, thanks.</p>",
        "id": 400618414,
        "sender_full_name": "Kauê Campos",
        "timestamp": 1699308242
    },
    {
        "content": "<p>Okay, I've changed some stuff and now it's </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">hs</span><span class=\"o\">:</span> <span class=\"bp\">∑</span> <span class=\"n\">x_1</span> <span class=\"k\">in</span> <span class=\"n\">erase</span> <span class=\"o\">(</span><span class=\"n\">range</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">x_1</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">x_1</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"bp\">*</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">Nat.choose</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">x_1</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"bp\">=</span>\n  <span class=\"bp\">∑</span> <span class=\"n\">x_1</span> <span class=\"k\">in</span> <span class=\"n\">range</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">x_1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">x_1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">Nat.choose</span> <span class=\"n\">n</span> <span class=\"n\">x_1</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>and I've already got</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">hs1</span><span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">erase</span> <span class=\"o\">(</span><span class=\"n\">range</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"n\">x</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span>\n</code></pre></div>\n<p>and a</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">pos_sub_one_plus_one</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"bp\">+</span><span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">a</span>\n</code></pre></div>\n<p>but I'm not sure how I could apply these to <code>x1-1+1</code> exponent inside the big sum, any ideas?</p>",
        "id": 400631159,
        "sender_full_name": "Kauê Campos",
        "timestamp": 1699315441
    },
    {
        "content": "<p>Why are you using natural subtraction at all? It is a pathological operation. You would be better off rewriting to avoid it completely if possible.</p>",
        "id": 400635752,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1699317893
    },
    {
        "content": "<p>There is <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Finset.antidiagonal#doc\">docs#Finset.antidiagonal</a> for example, which can be useful for avoiding these things.</p>",
        "id": 400635864,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1699317958
    },
    {
        "content": "<p>I trying to adapt this from a pen and paper proof as an exercise to learn lean and that's what I ended up doing. I'll take a look at antidiagonals, but it should be possible to simply the expression I got now, and I'm curious to the general case of how to use summation indices in contexts like this, specially for more complicated examples.</p>",
        "id": 400637270,
        "sender_full_name": "Kauê Campos",
        "timestamp": 1699318655
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/Simplifying.20commutative.20ring.20summations/near/400635864\">said</a>:</p>\n<blockquote>\n<p>There is <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Finset.antidiagonal#doc\">docs#Finset.antidiagonal</a> for example, which can be useful for avoiding these things.</p>\n</blockquote>\n<p>Annoyingly while you can really write that in lean code, to get to the docs page you have to write <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Finset.HasAntidiagonal.antidiagonal#doc\">docs#Finset.HasAntidiagonal.antidiagonal</a></p>",
        "id": 400640611,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1699320368
    }
]