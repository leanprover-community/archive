[
    {
        "content": "<p>So, I might have misunderstood something basic. I have tried everything to prove <code>lemma tau_lin_Xn</code> below, using the same technique as  <code>lemma tau_Xn</code>, but I've always failed. What did I get wrong?<br>\nI tried many tactics, but always failed. Do I always have to use <code>toFun</code>, or should I introduce an addition proposition separately? It looks heavy in the code that way, I was hoping to use coercion instead but I can't get it to work.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.RingTheory.PowerSeries.Basic</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">PowerSeries</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">tau</span> <span class=\"o\">[</span><span class=\"n\">Semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"bp\">⟦</span><span class=\"n\">X</span><span class=\"bp\">⟧</span> <span class=\"bp\">→</span> <span class=\"n\">R</span><span class=\"bp\">⟦</span><span class=\"n\">X</span><span class=\"bp\">⟧</span>\n  <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">f</span> <span class=\"bp\">↦</span> <span class=\"n\">PowerSeries.mk</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">i</span> <span class=\"bp\">↦</span> <span class=\"n\">coeff</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">f</span><span class=\"o\">)</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">tau_Xn</span> <span class=\"o\">[</span><span class=\"n\">Semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"bp\">⟦</span><span class=\"n\">X</span><span class=\"bp\">⟧</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">tau</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">X</span><span class=\"bp\">^</span><span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">ext</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">tau</span><span class=\"o\">]</span>\n\n<span class=\"c1\">--So far, so good</span>\n<span class=\"c1\">--So let's try the same thing with a linear map, and coercion</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">tau_lin</span> <span class=\"o\">[</span><span class=\"n\">Semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"bp\">⟦</span><span class=\"n\">X</span><span class=\"bp\">⟧</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">R</span><span class=\"bp\">⟦</span><span class=\"n\">X</span><span class=\"bp\">⟧</span> <span class=\"n\">where</span>\n  <span class=\"n\">toFun</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">f</span> <span class=\"bp\">↦</span> <span class=\"n\">PowerSeries.mk</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">i</span> <span class=\"bp\">↦</span> <span class=\"n\">coeff</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">f</span><span class=\"o\">)</span>\n  <span class=\"n\">map_add'</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">intros</span>\n    <span class=\"n\">rfl</span>\n  <span class=\"n\">map_smul'</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">intros</span>\n    <span class=\"n\">rfl</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">tau_lin_Xn</span> <span class=\"o\">[</span><span class=\"n\">Semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"bp\">⟦</span><span class=\"n\">X</span><span class=\"bp\">⟧</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"bp\">⇑</span><span class=\"o\">(</span><span class=\"n\">tau_lin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">X</span><span class=\"bp\">^</span><span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">ext</span> <span class=\"n\">m</span>\n  <span class=\"n\">apply</span> <span class=\"o\">(</span><span class=\"n\">coeff</span> <span class=\"n\">R</span> <span class=\"n\">m</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">congr_arg</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">tau_lin</span><span class=\"o\">]</span> <span class=\"c1\">--Hell on earth</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 406166339,
        "sender_full_name": "Rubén Muñoz--Bertrand",
        "timestamp": 1701813561
    },
    {
        "content": "<p><code>simp [tau_lin, (AddHom.coe_mk)]</code> works</p>",
        "id": 406176464,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1701818605
    },
    {
        "content": "<p>(The fact it needs the <code>()</code> is a bug in <code>simp</code>)</p>",
        "id": 406176671,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1701818723
    },
    {
        "content": "<p>Thank you so much! I don't think I would have figured it out even without the bug.<br>\nBy the way, do you know if that bug is reported on GitHub? This is part of a project at my university which might end as a commit on mathlib, so it would be nice to comment with a relevant link.</p>",
        "id": 406180539,
        "sender_full_name": "Rubén Muñoz--Bertrand",
        "timestamp": 1701820959
    },
    {
        "content": "<p>I don't think we ever opened a bug for that one I'm afraid, it's very hard to make a minimal version</p>",
        "id": 406180883,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1701821083
    },
    {
        "content": "<p>(I think this bug was 90% fixed a Lean release or two ago; there are only  handful of the <code>()</code> workarounds left in mathlib)</p>",
        "id": 406180942,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1701821117
    },
    {
        "content": "<p>Okay thank you for the feedback!</p>",
        "id": 406180948,
        "sender_full_name": "Rubén Muñoz--Bertrand",
        "timestamp": 1701821118
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"659869\">Rubén Muñoz--Bertrand</span> has marked this topic as resolved.</p>",
        "id": 406181648,
        "sender_full_name": "Notification Bot",
        "timestamp": 1701821503
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113489-new-members/topic/.E2.9C.94.20Coercion.20and.20linear.20maps/near/406180883\">said</a>:</p>\n<blockquote>\n<p>I don't think we ever opened a bug for that one I'm afraid, it's very hard to make a minimal version</p>\n</blockquote>\n<p>There was <a href=\"#narrow/stream/270676-lean4/topic/simp.20.5BX.5D.20fails.2C.20rw.20.5BX.5D.20works/near/358861385\">a relevant discussion</a> that I starred for curiosity.</p>",
        "id": 406256555,
        "sender_full_name": "Utensil Song",
        "timestamp": 1701851530
    }
]