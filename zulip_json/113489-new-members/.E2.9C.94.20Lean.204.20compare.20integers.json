[
    {
        "content": "<p>Lean 4 newbie here!</p>\n<p>I want to compare two integers:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">smaller</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span> <span class=\"o\">:=</span>\n<span class=\"k\">if</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span> <span class=\"k\">then</span> <span class=\"n\">a</span> <span class=\"k\">else</span> <span class=\"n\">b</span>\n</code></pre></div>\n<p>Infoview says:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"kd\">instance</span>\n  <span class=\"n\">LT</span> <span class=\"n\">ℤ</span>\n</code></pre></div>\n<p>I add the instance:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">smaller</span> <span class=\"o\">[</span><span class=\"n\">LT</span> <span class=\"n\">ℤ</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span> <span class=\"o\">:=</span>\n<span class=\"k\">if</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span> <span class=\"k\">then</span> <span class=\"n\">a</span> <span class=\"k\">else</span> <span class=\"n\">b</span>\n</code></pre></div>\n<p>Infoview says:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"kd\">instance</span>\n  <span class=\"n\">Decidable</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>What can I do?</p>",
        "id": 326208595,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1675707682
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"417654\">Martin Dvořák</span> <a href=\"#narrow/stream/113489-new-members/topic/Lean.204.20compare.20integers/near/326208595\">said</a>:</p>\n<blockquote>\n<p>I add the instance:</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">smaller</span> <span class=\"o\">[</span><span class=\"n\">LT</span> <span class=\"n\">ℤ</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span> <span class=\"o\">:=</span>\n<span class=\"k\">if</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span> <span class=\"k\">then</span> <span class=\"n\">a</span> <span class=\"k\">else</span> <span class=\"n\">b</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>This means \"Let there be some totally arbitrary <code>&lt;</code> operator\", just like it did in Lean3.<br>\nIn particular, this operation is not going to be decidable (because its arbitrary) or guarantee that <code>0 &lt; 1</code> (because it's arbitrary)</p>",
        "id": 326209438,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1675707953
    },
    {
        "content": "<p>Lean should be finding <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Int.instLEInt#doc\">docs4#Int.instLEInt</a> for you</p>",
        "id": 326209711,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1675708026
    },
    {
        "content": "<p>Yes but when I do <code>#eval -3 &lt; -2</code> it gives me <code>true</code> as I expected. The thing is obviously defined.</p>",
        "id": 326209739,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1675708036
    },
    {
        "content": "<p><code>ℤ</code> is not <code>Int</code> (unless you import mathlib)</p>",
        "id": 326209758,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1675708042
    },
    {
        "content": "<p><code>ℤ</code> is \"let there be a new arbitrary type called <code>ℤ</code>\"</p>",
        "id": 326209785,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1675708053
    },
    {
        "content": "<p>You can <code>set_option autoImplicit false</code> so that you get an error about <code>ℤ</code> not existing if you'd prefer</p>",
        "id": 326210014,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1675708115
    },
    {
        "content": "<p>Oh!</p>",
        "id": 326210025,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1675708120
    },
    {
        "content": "<p>I want to do it generically now:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">smaller</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">LT</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"k\">if</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span> <span class=\"k\">then</span> <span class=\"n\">a</span> <span class=\"k\">else</span> <span class=\"n\">b</span>\n</code></pre></div>\n<p>I get the same message:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"kd\">instance</span>\n  <span class=\"n\">Decidable</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>Edit:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">smaller</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">LT</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Decidable</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span><span class=\"o\">)]</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"k\">if</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span> <span class=\"k\">then</span> <span class=\"n\">a</span> <span class=\"k\">else</span> <span class=\"n\">b</span>\n</code></pre></div>",
        "id": 326211152,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1675708435
    },
    {
        "content": "<p>Do you know how to do this in Lean3?</p>",
        "id": 326211353,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1675708491
    },
    {
        "content": "<p>Oh I see now!</p>",
        "id": 326212810,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1675708937
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"417654\">Martin Dvořák</span> has marked this topic as resolved.</p>",
        "id": 326212969,
        "sender_full_name": "Notification Bot",
        "timestamp": 1675708987
    },
    {
        "content": "<p>PS: Is it better to do it like this, so that the instance is not tied to the concrete values for which the function is called?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">smaller</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">LT</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">Decidable</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"n\">y</span><span class=\"o\">)]</span>\n  <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"k\">if</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span> <span class=\"k\">then</span> <span class=\"n\">a</span> <span class=\"k\">else</span> <span class=\"n\">b</span>\n</code></pre></div>\n<p>Is there any difference at all?</p>",
        "id": 326213556,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1675709157
    },
    {
        "content": "<p><code>[∀ x : α, ∀ y : α, Decidable (x &lt; y)]</code> is defeq to the preferred spelling <code>[@DecidableRel α (. &lt; .)]</code> (which you can probably work out how to spell without the <code>@</code> in a live Lean4 session). Those might need to be unicode <code>.</code>s too.</p>",
        "id": 326213768,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1675709212
    },
    {
        "content": "<p>Are there also specialized names for the most useful typeclasses, like the decidability of <code>&lt;</code> here?</p>",
        "id": 326214254,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1675709376
    },
    {
        "content": "<p>Both <code>[∀ x : α, ∀ y : α, Decidable (x &lt; y)]</code> and <code>[@DecidableRel α (. &lt; .)]</code> look like too much boilerplate to me.</p>",
        "id": 326214400,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1675709419
    },
    {
        "content": "<p><del>docs4#DecidableLT</del></p>",
        "id": 326214487,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1675709450
    },
    {
        "content": "<p>Yeah, I want something like <code>[Decidable_LT α]</code> just that it works!</p>",
        "id": 326214680,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1675709522
    },
    {
        "content": "<p>Note that <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=LinearOrder#doc\">docs4#LinearOrder</a> has these as fields of the structure. I don't think there is a special spelling except for <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=DecidableEq#doc\">docs4#DecidableEq</a></p>",
        "id": 326214927,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1675709595
    },
    {
        "content": "<p>There's also <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=DecidablePred#doc\">docs4#DecidablePred</a> for predicates</p>",
        "id": 326215014,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1675709626
    },
    {
        "content": "<p>Is there a difference between writing [@DecidableRel α (. &lt; .)] before the arguments <code>(a b : α)</code> versus writing first <code>(a b : α)</code> and <code>[Decidable (a &lt; b)]</code> after?</p>",
        "id": 326215537,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1675709790
    },
    {
        "content": "<p>The latter only assumes that the individual proposition <code>a &lt; b</code> is <code>Decidable</code>, the former assumes that comparing <em>any</em> two elements (with <code>&lt;</code>) is decidable.</p>",
        "id": 326215952,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1675709928
    },
    {
        "content": "<p>I would venture that you probably want the former.</p>",
        "id": 326216028,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1675709956
    },
    {
        "content": "<p>That being said, the latter could potentially apply in situations where <code>&lt;</code> is decidable for some pairs of elements but not others (which personally strikes me as pretty weird).</p>",
        "id": 326216348,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1675710049
    },
    {
        "content": "<p>Yeah, I will probably stick to <code>[@DecidableRel α (. &lt; .)]</code> even though it is more verbose.</p>",
        "id": 326216491,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1675710093
    },
    {
        "content": "<p><code>[DecidableRel ((. : α) &lt; .)]</code> is another valid (and identical) spelling</p>",
        "id": 326218830,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1675710796
    },
    {
        "content": "<p>As is <code>[DecidableRel (LT.lt (α := α))]</code> or <code>[DecidableRel (@LT.lt α _)]</code> or <code>[@DecidableRel α LT.lt]</code></p>",
        "id": 326218917,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1675710822
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113489-new-members/topic/.E2.9C.94.20Lean.204.20compare.20integers/near/326218830\">said</a>:</p>\n<blockquote>\n<p><code>[DecidableRel ((. : α) &lt; .)]</code> is another valid (and identical) spelling</p>\n</blockquote>\n<p>This unfortunately does not work, since the inner parentheses will mess up the <code>.</code> stuff for short lambdas</p>",
        "id": 326247530,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1675721293
    },
    {
        "content": "<p>Huh, it seemed to work when I tried it. Maybe I missed the error squiggle</p>",
        "id": 326252504,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1675723390
    }
]