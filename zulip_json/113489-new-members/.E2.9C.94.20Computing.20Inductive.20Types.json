[
    {
        "content": "<p>Is it possible to write an inductive type that's computable?  I'd like to write a predicate that I can do induction on later, but I'd also like to <code>#eval</code> it if possible.  For example, here's a less-than-equal predicate I could write:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">my_lte</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">trivial</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n      <span class=\"n\">my_lte</span> <span class=\"n\">n</span> <span class=\"n\">n</span>\n  <span class=\"bp\">|</span> <span class=\"n\">from_path</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"n\">x</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n      <span class=\"n\">my_lte</span> <span class=\"n\">m</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">→</span> <span class=\"n\">my_lte</span> <span class=\"n\">m</span> <span class=\"n\">n</span>\n</code></pre></div>\n<p>Now, at each step the input is getting smaller, and the <code>n = x + 1</code> part is computable.  So I'd expect that this would be computable.  But when I <code>#eval</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#eval</span> <span class=\"n\">my_lte</span> <span class=\"mi\">1</span> <span class=\"mi\">3</span>\n</code></pre></div>\n<p>Lean tells me:</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>failed to compile definition, consider marking it as\n'noncomputable' because it depends on 'Classical.propDecidable',\nand it does not have executable code\n</code></pre></div>\n<p>Is it possible?  Am I thinking about this the wrong way?</p>",
        "id": 345676680,
        "sender_full_name": "Caleb Schultz Kisby",
        "timestamp": 1680183610
    },
    {
        "content": "<p>Just to be clear about why I want to do this, the actual type I have is a predicate that says if there's a path in a directed graph:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">hasPath</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">Graph</span> <span class=\"n\">ℕ</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">trivial</span> <span class=\"o\">{</span><span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n      <span class=\"n\">hasPath</span> <span class=\"n\">g</span> <span class=\"n\">u</span> <span class=\"n\">u</span>\n  <span class=\"bp\">|</span> <span class=\"n\">from_path</span> <span class=\"o\">{</span><span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n      <span class=\"n\">hasPath</span> <span class=\"n\">g</span> <span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"bp\">→</span> <span class=\"n\">hasEdge</span> <span class=\"n\">g</span> <span class=\"n\">v</span> <span class=\"n\">w</span> <span class=\"bp\">→</span> <span class=\"n\">hasPath</span> <span class=\"n\">g</span> <span class=\"n\">u</span> <span class=\"n\">w</span>\n</code></pre></div>\n<p>I'd like to be able to prove stuff about paths, but also use this definition to actually check if there's a path from a node to a node.</p>",
        "id": 345677447,
        "sender_full_name": "Caleb Schultz Kisby",
        "timestamp": 1680183777
    },
    {
        "content": "<p>Can you make a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>? I get an error if I paste in your first code snippet</p>",
        "id": 345680828,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1680184496
    },
    {
        "content": "<p>If I fix the error, I then get</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span>\n  <span class=\"n\">Decidable</span> <span class=\"o\">(</span><span class=\"n\">my_lte</span> <span class=\"mi\">1</span> <span class=\"mi\">3</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>which is exactly the behavior I would expect, and should make the problem clearer</p>",
        "id": 345681201,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1680184567
    },
    {
        "content": "<p>Oops!  That's my bad, I don't completely understand how to parameterize inductive types.  But ok, I now have the working definition:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">my_lte</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">reflexive</span> <span class=\"o\">:</span> <span class=\"n\">my_lte</span> <span class=\"n\">n</span> <span class=\"n\">n</span>\n  <span class=\"bp\">|</span> <span class=\"n\">from_succ</span> <span class=\"o\">:</span> <span class=\"n\">my_lte</span> <span class=\"n\">m</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">my_lte</span> <span class=\"n\">m</span> <span class=\"n\">n</span>\n</code></pre></div>\n<p>and <code>#eval my_lte 2 5</code> gives me the same error you have.  But I don't understand what I can do about it.  Does it mean that I have to somehow define <code>Decidable (my_lte m n)</code>?</p>",
        "id": 345707595,
        "sender_full_name": "Caleb Schultz Kisby",
        "timestamp": 1680189321
    },
    {
        "content": "<p>That would certainly be possible and a cool exercise. As you can see, it's already been done in core for usual &lt;= : </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">,</span> <span class=\"n\">Decidable</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">inferInstance</span>  <span class=\"c1\">-- works</span>\n</code></pre></div>",
        "id": 345737386,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1680195545
    },
    {
        "content": "<p>You can't evaluate a Prop in general -- this is exactly what makes maths hard. If there was an algorithm which evaluated all Props then mathematicians would have been replaced by computers by now (let's just <code>#eval (P = NP)</code> and stop fussing). So you need to get from Prop to bool somehow, because you can evaluate bools, and this is exactly the algorithm which <code>Decidable</code> wants to see for the Props you're trying to evaluate.</p>",
        "id": 345737910,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1680195674
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"k\">in</span>\n<span class=\"bp\">#</span><span class=\"n\">synth</span> <span class=\"n\">Decidable</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"c1\">-- Nat.decLe a b</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">Nat.decLe</span> <span class=\"c1\">-- you can see how they did it in Lean</span>\n</code></pre></div>",
        "id": 345739201,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1680195984
    },
    {
        "content": "<blockquote>\n<p>But ok, I now have the working definition:</p>\n</blockquote>\n<p><del>This still doesn't work for me without modification. Note that a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> should include the imports you used</del></p>\n<p>This definition doesn't do what you think it does any more! Your code has no imports so <code>ℕ</code> is not <code>Nat</code>!</p>",
        "id": 345743979,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1680197167
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 345744125,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1680197213
    },
    {
        "content": "<blockquote>\n<p>That's my bad, I don't completely understand how to parameterize inductive types. B</p>\n</blockquote>\n<p>What you had originally is fine; but you threw away the bit of code that told Lean what <code>ℕ</code> meant</p>",
        "id": 345744396,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1680197274
    },
    {
        "content": "<p>Your new version lets me write</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#check</span> <span class=\"bp\">@</span><span class=\"n\">my_lte.reflexive</span> <span class=\"n\">_</span> <span class=\"s2\">\"oh no\"</span>\n</code></pre></div>",
        "id": 345744867,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1680197382
    },
    {
        "content": "<p>What?? <code>ℕ</code> now just gets assigned to be an arbitrary type in Lean 4? Did that work before? I was expecting an error (note that this is why I used <code>Nat</code>). Whatever does Lean think <code>x + 1</code> means?</p>\n<p>Calum -- if you <code>set_option autoImplicit false</code> you'll see what's going on.</p>",
        "id": 345745155,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1680197439
    },
    {
        "content": "<p>Oh lol it expects nats for the second constructor but not for the first? :-)</p>",
        "id": 345745379,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1680197498
    },
    {
        "content": "<p>This is such a footgun.</p>",
        "id": 345745544,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1680197533
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">my_lte</span> <span class=\"n\">True</span> <span class=\"n\">True</span> <span class=\"o\">:=</span>\n  <span class=\"n\">my_lte.reflexive</span>\n</code></pre></div>",
        "id": 345745793,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1680197599
    },
    {
        "content": "<p>And the difference in color between auto-implicit and honest-to-god variables is very much <em>not</em> color-blind friendly.</p>",
        "id": 345746034,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1680197648
    },
    {
        "content": "<p>That might be something you can fix by changing theme, I guess?</p>",
        "id": 345746711,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1680197813
    },
    {
        "content": "<p>At 3x zoom I can just about tell the difference, and I'm not even colorblind:</p>\n<p><a href=\"/user_uploads/3121/rgdvcUDm44-LN7gOz1zQuoSU/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/rgdvcUDm44-LN7gOz1zQuoSU/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/rgdvcUDm44-LN7gOz1zQuoSU/image.png\"></a></div>",
        "id": 345748632,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1680198348
    },
    {
        "content": "<p>The strokes are far too fine on <code>ℕ</code> in my font at regular size to be able to see its color</p>",
        "id": 345748784,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1680198388
    },
    {
        "content": "<p>that variable color is far too dark for my liking. Mine are BRIGHT RED</p>",
        "id": 345749269,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1680198524
    },
    {
        "content": "<p>is that the default theme?</p>",
        "id": 345749491,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1680198579
    },
    {
        "content": "<p>For the default dark theme I think the colours are identical</p>",
        "id": 345749875,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1680198677
    },
    {
        "content": "<p>For other dark themes it's white v light blue</p>",
        "id": 345749926,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1680198692
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113489-new-members/topic/Computing.20Inductive.20Types/near/345744396\">said</a>:</p>\n<blockquote>\n<blockquote>\n<p>That's my bad, I don't completely understand how to parameterize inductive types. B</p>\n</blockquote>\n<p>What you had originally is fine; but you threw away the bit of code that told Lean what <code>ℕ</code> meant</p>\n</blockquote>\n<p>Oh, I thought <code>ℕ</code> as <code>Nat</code> was built-in!  Whoops again, but that's why I'm asking in <a class=\"stream\" data-stream-id=\"113489\" href=\"/#narrow/stream/113489-new-members\">#new members</a> .  Thanks for your patience with me.</p>\n<p>Does ℕ get defined when I import <em>anything</em> from the Mathlib?  I'm not importing it explicitly, I just have:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.LibrarySearch</span>\n\n<span class=\"kn\">import</span> <span class=\"n\">Lean.Parser.Tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Init.Set</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.List.Defs</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Set</span>\n<span class=\"kn\">open</span> <span class=\"n\">Classical</span>\n</code></pre></div>",
        "id": 345750503,
        "sender_full_name": "Caleb Schultz Kisby",
        "timestamp": 1680198851
    },
    {
        "content": "<p>it is defined in an early file, so basically yes</p>",
        "id": 345750688,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1680198909
    },
    {
        "content": "<p>but it is not in lean core or std, this is just mathlib setting a different default in the earliest file it can reach</p>",
        "id": 345750864,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1680198962
    },
    {
        "content": "<p>so if you make a test file which doesn't import anything from mathlib you will run into this issue</p>",
        "id": 345750996,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1680198985
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/Computing.20Inductive.20Types/near/345739201\">said</a>:</p>\n<blockquote>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"k\">in</span>\n<span class=\"bp\">#</span><span class=\"n\">synth</span> <span class=\"n\">Decidable</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"c1\">-- Nat.decLe a b</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">Nat.decLe</span> <span class=\"c1\">-- you can see how they did it in Lean</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>Thank you, this answers my question!  And I know we can't evaluate a Prop in general :-)  I was just hoping Lean could cleverly infer that my inductive type's premises are always decreasing.  But it looks like I just have to tell it how explicitly.</p>",
        "id": 345750999,
        "sender_full_name": "Caleb Schultz Kisby",
        "timestamp": 1680198986
    },
    {
        "content": "<p>Inductive types are not computable by default, you have to explicitly give them a decision procedure. It isn't always trivial to do so either, because the constructors are allowed to overlap</p>",
        "id": 345751349,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1680199086
    },
    {
        "content": "<p>One way to make this easier is to define it as a <code>Bool</code> function by recursion instead of an inductive type</p>",
        "id": 345751458,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1680199131
    },
    {
        "content": "<p>Here's a fairly direct translation:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Init.Data.Nat.Notation</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">my_lte</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">Bool</span>\n  <span class=\"bp\">|</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"bp\">||</span>\n    <span class=\"k\">match</span> <span class=\"n\">n</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">my_lte</span> <span class=\"n\">m</span> <span class=\"n\">x</span>\n    <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">false</span>\n</code></pre></div>",
        "id": 345752042,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1680199310
    },
    {
        "content": "<p>Alright that makes sense -- will Lean still let me use the <code>induction</code> tactic to break this up?  That's the main reason I wanted an inductive type in the first place, I assumed that <code>induction</code> only works with inductive types.</p>",
        "id": 345752335,
        "sender_full_name": "Caleb Schultz Kisby",
        "timestamp": 1680199395
    },
    {
        "content": "<p>no, <code>induction</code> doesn't work on this</p>",
        "id": 345752411,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1680199422
    },
    {
        "content": "<p>Oh!  Or I can just prove the theorem with structural induction (just recursively break it down).  So never mind that!</p>",
        "id": 345752414,
        "sender_full_name": "Caleb Schultz Kisby",
        "timestamp": 1680199423
    },
    {
        "content": "<p>but you can do induction on <code>n</code> to prove things about this</p>",
        "id": 345752485,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1680199443
    },
    {
        "content": "<p>Oh!  That makes more sense.  Thanks!</p>",
        "id": 345752567,
        "sender_full_name": "Caleb Schultz Kisby",
        "timestamp": 1680199463
    },
    {
        "content": "<p>But the more common approach in mathlib is to use the <code>inductive</code> anyway, and then write a <code>Decidable</code> instance for it. That way you get the best of both worlds, at the expense of a bit more work for the definition itself</p>",
        "id": 345752720,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1680199511
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Std.Logic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Init.Data.Nat.Notation</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">my_lte</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">trivial</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n      <span class=\"n\">my_lte</span> <span class=\"n\">n</span> <span class=\"n\">n</span>\n  <span class=\"bp\">|</span> <span class=\"n\">from_path</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"n\">x</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n      <span class=\"n\">my_lte</span> <span class=\"n\">m</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">→</span> <span class=\"n\">my_lte</span> <span class=\"n\">m</span> <span class=\"n\">n</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">decLte</span> <span class=\"o\">:</span> <span class=\"n\">Decidable</span> <span class=\"o\">(</span><span class=\"n\">my_lte</span> <span class=\"n\">m</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"k\">then</span>\n    <span class=\"bp\">.</span><span class=\"n\">isTrue</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"bp\">▸</span> <span class=\"bp\">.</span><span class=\"n\">trivial</span><span class=\"o\">)</span>\n  <span class=\"k\">else</span>\n    <span class=\"k\">match</span> <span class=\"n\">n</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">decLte</span> <span class=\"n\">m</span> <span class=\"n\">x</span>\n      <span class=\"n\">decidable_of_iff</span> <span class=\"o\">(</span><span class=\"n\">my_lte</span> <span class=\"n\">m</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">⟨(</span><span class=\"bp\">.</span><span class=\"n\">from_path</span> <span class=\"bp\">·</span> <span class=\"n\">rfl</span><span class=\"o\">),</span> <span class=\"k\">fun</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span>\n        <span class=\"n\">cases</span> <span class=\"n\">h</span> <span class=\"k\">with</span>\n        <span class=\"bp\">|</span> <span class=\"n\">trivial</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">cases</span> <span class=\"n\">h</span> <span class=\"n\">rfl</span>\n        <span class=\"bp\">|</span> <span class=\"n\">from_path</span> <span class=\"n\">h</span> <span class=\"n\">e</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">exact</span> <span class=\"n\">Nat.succ.inj</span> <span class=\"n\">e</span> <span class=\"bp\">▸</span> <span class=\"n\">h</span><span class=\"o\">⟩</span>\n    <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">.</span><span class=\"n\">isFalse</span> <span class=\"k\">fun</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span>\n      <span class=\"n\">cases</span> <span class=\"n\">h</span> <span class=\"k\">with</span>\n      <span class=\"bp\">|</span> <span class=\"n\">trivial</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">exact</span> <span class=\"n\">h</span> <span class=\"n\">rfl</span>\n      <span class=\"bp\">|</span> <span class=\"n\">from_path</span> <span class=\"n\">h</span> <span class=\"n\">e</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">cases</span> <span class=\"n\">e</span>\n</code></pre></div>",
        "id": 345754609,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1680200071
    },
    {
        "content": "<p>(actually this is kind of a bad algorithm, it is meant to mimic the bool function from before. In practice you would prove equivalence to <code>Nat.le</code> to get those sweet GMP speedups)</p>",
        "id": 345754871,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1680200161
    },
    {
        "content": "<p>For <code>hasPath</code> the situation is somewhat more complex, and depends on what <code>Graph</code> and <code>hasEdge</code> look like more precisely. A naive implementation would need to enumerate all possible choices for <code>v</code> in the <code>from_path</code> case, which may not be possible if the type is infinite (as indeed it is here, since it is <code>Nat</code>). More practically you would want to solve this by some kind of DFS traversal, but if all you know is that the graph's edge relation is computable this is not sufficient. Indeed the halting problem can be expressed as a graph reachability problem with a computable edge relation</p>",
        "id": 345755708,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1680200416
    },
    {
        "content": "<p>Haha and now you're answering questions that I didn't have, but that I now have!  I really appreciate you writing out how to do this in practice (I was looking in the zulip archives for an answer for how to give a decidable instance lol)</p>\n<p>And yeah, the devil's in the details with Graph.  I'm currently using <a href=\"https://github.com/PeterKementzey/graph-library-for-lean4/tree/e49c9fa51edfb61b9c81a014fabc2069b8db88ba\">Peter Kementzey's directed graph library</a>, and I'm just declaring the graph as acyclic.  But I'm tempted to use something like Agda's <a href=\"https://agda.github.io/agda-stdlib/Data.Graph.Acyclic.html\">standard library acyclic graph</a>, which defines acyclic graphs inductively and would save me future pain.</p>",
        "id": 345757997,
        "sender_full_name": "Caleb Schultz Kisby",
        "timestamp": 1680201052
    },
    {
        "content": "<p>I didn't realize until now that I could mark a thread as resolved.  This one's more than resolved, thanks again!</p>",
        "id": 345758094,
        "sender_full_name": "Caleb Schultz Kisby",
        "timestamp": 1680201075
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"556217\">Caleb Schultz Kisby</span> has marked this topic as resolved.</p>",
        "id": 345758113,
        "sender_full_name": "Notification Bot",
        "timestamp": 1680201080
    }
]