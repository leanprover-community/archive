[
    {
        "content": "<p>How would I go about proving </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Real.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Analysis.Calculus.Deriv.Basic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Real</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">deriv_zero_min_bound</span>\n        <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"o\">)</span>\n        <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span> <span class=\"o\">)</span>\n        <span class=\"o\">(</span><span class=\"n\">hd</span> <span class=\"o\">:</span> <span class=\"n\">Differentiable</span> <span class=\"n\">ℝ</span> <span class=\"n\">f</span> <span class=\"o\">)</span>\n        <span class=\"c1\">--bounded from below by 0</span>\n        <span class=\"o\">(</span><span class=\"n\">hbbz</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">)</span>\n        <span class=\"o\">(</span><span class=\"n\">hz</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">deriv</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n  <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 400868605,
        "sender_full_name": "Nicholas Wilson",
        "timestamp": 1699417788
    },
    {
        "content": "<p><del>it should follow from Rolle's theorem</del></p>",
        "id": 400868688,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1699417830
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=IsLocalMin.fderiv_eq_zero#doc\">docs#IsLocalMin.fderiv_eq_zero</a> maybe?</p>",
        "id": 400868764,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1699417922
    },
    {
        "content": "<p>your assumption <code>hbbz</code> doesn't say that <code>f</code> is bounded below though, it's not universally quantified over y</p>",
        "id": 400868830,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1699417977
    },
    {
        "content": "<p>it just says that <code>f</code> has at least one nonnegative point</p>",
        "id": 400868840,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1699417992
    },
    {
        "content": "<blockquote>\n<p>it just says that f has at least one nonnegative point</p>\n</blockquote>\n<p>Oh. How would I state \"is bounded from below by zero\" then? <code>(hbbz : ∀ (y : ℝ) 0 ≤ (f y))</code> ?</p>",
        "id": 400869634,
        "sender_full_name": "Nicholas Wilson",
        "timestamp": 1699418689
    },
    {
        "content": "<p>yes (you need a comma after the <code>(y : R)</code>)</p>",
        "id": 400869805,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1699418841
    },
    {
        "content": "<p>Thanks. How do I use <code>IsLocalMin.fderiv_eq_zero</code>? with </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">by</span> <span class=\"k\">have</span> <span class=\"n\">hmin</span> <span class=\"o\">:</span> <span class=\"n\">IsLocalMin</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n   <span class=\"n\">apply</span> <span class=\"n\">IsLocalMin.fderiv_eq_zero</span> <span class=\"n\">hmin</span>\n</code></pre></div>\n<p>I get an error </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">tactic</span> <span class=\"bp\">'</span><span class=\"n\">apply'</span> <span class=\"n\">failed</span><span class=\"o\">,</span> <span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">unify</span>\n  <span class=\"n\">fderiv</span> <span class=\"n\">ℝ</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n<span class=\"k\">with</span>\n  <span class=\"n\">deriv</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n</code></pre></div>",
        "id": 400871356,
        "sender_full_name": "Nicholas Wilson",
        "timestamp": 1699419875
    },
    {
        "content": "<p>Maybe with <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=fderiv_deriv#doc\">docs#fderiv_deriv</a></p>",
        "id": 400875411,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1699422840
    },
    {
        "content": "<p>scratch that, there is <code>IsLocalMin.deriv_eq_zero</code></p>",
        "id": 400882496,
        "sender_full_name": "Nicholas Wilson",
        "timestamp": 1699426637
    },
    {
        "content": "<p>This just leaves <code>have hmin : IsLocalMin f x := by sorry</code> which I have no idea.</p>",
        "id": 400882959,
        "sender_full_name": "Nicholas Wilson",
        "timestamp": 1699426869
    }
]