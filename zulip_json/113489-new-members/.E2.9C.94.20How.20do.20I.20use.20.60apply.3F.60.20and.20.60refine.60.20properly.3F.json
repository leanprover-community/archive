[
    {
        "content": "<p>Say I have the following example about a transition system. I tried to reduce them to a MWE where the theorem is incorrect. And I just want to see the goal transformed.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Logic.Relation</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.LibrarySearch</span>\n<span class=\"kd\">inductive</span> <span class=\"n\">fs</span> <span class=\"n\">where</span>\n<span class=\"bp\">|</span> <span class=\"n\">u</span>\n<span class=\"bp\">|</span> <span class=\"n\">v</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">fact_step</span> <span class=\"o\">:</span> <span class=\"n\">fs</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">fs</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Prop</span> <span class=\"n\">where</span>\n<span class=\"bp\">|</span> <span class=\"n\">FactDone</span><span class=\"o\">:</span> <span class=\"bp\">∀</span><span class=\"n\">acc</span><span class=\"o\">,</span> <span class=\"n\">fact_step</span> <span class=\"n\">fs.u</span> <span class=\"o\">(</span><span class=\"n\">fs.v</span> <span class=\"n\">acc</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">FactStep</span><span class=\"o\">:</span> <span class=\"bp\">∀</span><span class=\"n\">acc</span><span class=\"o\">,</span> <span class=\"n\">fact_step</span> <span class=\"o\">(</span><span class=\"n\">fs.v</span> <span class=\"n\">acc</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fs.v</span> <span class=\"o\">(</span><span class=\"n\">Nat.succ</span> <span class=\"n\">acc</span><span class=\"o\">))</span>\n\n<span class=\"kd\">notation</span> <span class=\"n\">R</span> <span class=\"s2\">\" ^r \"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Relation.ReflTransGen</span> <span class=\"n\">R</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">eg'</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">fact_step</span> <span class=\"bp\">^</span><span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fs.v</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"n\">fs.u</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">apply</span><span class=\"bp\">?</span>\n</code></pre></div>\n<p>In the theorem <code>eg'</code>, <code>apply?</code> has some suggestions in the Infoview (in VSCode):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Try</span> <span class=\"n\">this</span><span class=\"o\">:</span> <span class=\"n\">refine</span> <span class=\"n\">Relation.ReflTransGen.head</span> <span class=\"bp\">?</span><span class=\"n\">hab</span> <span class=\"bp\">?</span><span class=\"n\">hbc</span>\n<span class=\"n\">Remaining</span> <span class=\"n\">subgoals</span><span class=\"o\">:</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">fs</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">fact_step</span> <span class=\"o\">(</span><span class=\"n\">fs.v</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"bp\">?</span><span class=\"n\">b</span>\n<span class=\"bp\">⊢</span> <span class=\"o\">(</span><span class=\"n\">fact_step</span> <span class=\"bp\">^</span><span class=\"n\">r</span> <span class=\"o\">)</span> <span class=\"bp\">?</span><span class=\"n\">b</span> <span class=\"n\">fs.u</span>\n</code></pre></div>\n<p>I can click on them to replace <code>apply?</code> with <code>refine</code> and I end up having the following:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">eg'</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">fact_step</span> <span class=\"bp\">^</span><span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fs.v</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"n\">fs.u</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">refine</span> <span class=\"n\">Relation.ReflTransGen.head</span> <span class=\"bp\">?</span><span class=\"n\">hab</span> <span class=\"bp\">?</span><span class=\"n\">hbc</span>\n</code></pre></div>\n<p>The <code>refine</code> seems to fail to transform the goal and the Infoview says:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Tactic</span> <span class=\"n\">state</span>\n<span class=\"mi\">1</span> <span class=\"n\">goal</span>\n<span class=\"bp\">⊢</span> <span class=\"o\">(</span><span class=\"n\">fact_step</span> <span class=\"bp\">^</span><span class=\"n\">r</span> <span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fs.v</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"n\">fs.u</span>\n<span class=\"n\">Messages</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">)</span>\n<span class=\"n\">sample.lean</span><span class=\"o\">:</span><span class=\"mi\">18</span><span class=\"o\">:</span><span class=\"mi\">9</span>\n<span class=\"n\">don't</span> <span class=\"n\">know</span> <span class=\"n\">how</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"n\">implicit</span> <span class=\"n\">argument</span>\n  <span class=\"bp\">@</span><span class=\"n\">Relation.ReflTransGen.head</span> <span class=\"n\">fs</span> <span class=\"n\">fact_step</span> <span class=\"o\">(</span><span class=\"n\">fs.v</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"bp\">?</span><span class=\"n\">m.7892</span> <span class=\"n\">fs.u</span> <span class=\"bp\">?</span><span class=\"n\">hab</span> <span class=\"bp\">?</span><span class=\"n\">hbc</span>\n<span class=\"n\">context</span><span class=\"o\">:</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">fs</span>\n</code></pre></div>\n<p>I'm wondering if I'm using the <code>apply?</code> correctly and how do I go about fixing the <code>refine</code> issue?</p>",
        "id": 393161173,
        "sender_full_name": "Z. Wu",
        "timestamp": 1695703919
    },
    {
        "content": "<p>Oh and btw the definitions in <code>mathlib</code> are as follows, which are just transition closures:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- `ReflTransGen r`: reflexive transitive closure of `r` -/</span>\n<span class=\"kd\">@[mk_iff ReflTransGen.cases_tail_iff]</span>\n<span class=\"kd\">inductive</span> <span class=\"n\">ReflTransGen</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n  <span class=\"bp\">|</span> <span class=\"n\">refl</span> <span class=\"o\">:</span> <span class=\"n\">ReflTransGen</span> <span class=\"n\">r</span> <span class=\"n\">a</span> <span class=\"n\">a</span>\n  <span class=\"bp\">|</span> <span class=\"n\">tail</span> <span class=\"o\">{</span><span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">ReflTransGen</span> <span class=\"n\">r</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">r</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"bp\">→</span> <span class=\"n\">ReflTransGen</span> <span class=\"n\">r</span> <span class=\"n\">a</span> <span class=\"n\">c</span>\n<span class=\"bp\">#</span><span class=\"n\">align</span> <span class=\"n\">relation.refl_trans_gen</span> <span class=\"n\">Relation.ReflTransGen</span>\n<span class=\"bp\">#</span><span class=\"n\">align</span> <span class=\"n\">relation.refl_trans_gen.cases_tail_iff</span> <span class=\"n\">Relation.ReflTransGen.cases_tail_iff</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">head</span> <span class=\"o\">(</span><span class=\"n\">hab</span> <span class=\"o\">:</span> <span class=\"n\">r</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hbc</span> <span class=\"o\">:</span> <span class=\"n\">ReflTransGen</span> <span class=\"n\">r</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ReflTransGen</span> <span class=\"n\">r</span> <span class=\"n\">a</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">induction</span> <span class=\"n\">hbc</span>\n  <span class=\"n\">case</span> <span class=\"n\">refl</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">exact</span> <span class=\"n\">refl.tail</span> <span class=\"n\">hab</span>\n  <span class=\"n\">case</span> <span class=\"n\">tail</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"n\">_</span> <span class=\"n\">hcd</span> <span class=\"n\">hac</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">exact</span> <span class=\"n\">hac.tail</span> <span class=\"n\">hcd</span>\n<span class=\"bp\">#</span><span class=\"n\">align</span> <span class=\"n\">relation.refl_trans_gen.head</span> <span class=\"n\">Relation.ReflTransGen.head</span>\n</code></pre></div>",
        "id": 393161418,
        "sender_full_name": "Z. Wu",
        "timestamp": 1695704130
    },
    {
        "content": "<p>You are using <code>apply?</code> correctly, you've just hit an awkward case where there isn't enough information for lean to work out what the <code>b</code> is in the lemma <code>Relation.ReflTransGen.head</code>.<br>\nYou can specify which <code>b</code> you want by writing it like follows<br>\n<code>refine Relation.ReflTransGen.head (b := fs.u) ?hab ?hbc</code><br>\n(though I'm not sure which b you actually want to pick in this case, or even how to prove your result (it looks to me like you can never have an <code>fs.u</code> on the right of your relation)</p>",
        "id": 393254087,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1695740452
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 393284386,
        "sender_full_name": "Z. Wu",
        "timestamp": 1695747619
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"649880\">Zwu</span> has marked this topic as resolved.</p>",
        "id": 393284406,
        "sender_full_name": "Notification Bot",
        "timestamp": 1695747624
    }
]