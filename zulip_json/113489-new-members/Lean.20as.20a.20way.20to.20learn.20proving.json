[
    {
        "content": "<p>Hi all,</p>\n<p>I'm a CS undergraduate currently enrolled in a couple math classes. </p>\n<p>Despite the fact that I never fully properly understood mathematical proofs, I've always enjoyed programming in a very strictly typed environment, and using types to help me reason about my programs. When I learned that theorem provers like Lean use types <em>to</em> prove, I started wondering: can I use my decently good understanding of types to improve my shoddy understanding of proofs? Is this considered a valid use case for Lean, or will I have trouble coming at it from this angle? </p>\n<p>Do you guys find that proving something in Lean translates well to proving it on paper? I've compared a couple of paper proofs to Lean proofs and at times the connection was not immediately obvious to me. </p>\n<p>Are there resources about Lean that are geared towards people like me as a target audience? That is, CS/programming people trying to use it to learn more math. </p>\n<p>Hope those questions made sense. Excited to venture into the world of Lean and proofs!</p>",
        "id": 325914683,
        "sender_full_name": "ashpil",
        "timestamp": 1675576419
    },
    {
        "content": "<p>I have only done Lean for a short period of time, so the following might not be accurate, but it's my current impression. When I (and you) say Lean, I mean more specifically related to mathlib, which is the maths library by the Lean community.</p>\n<p>I think the usual way of using Lean is to translate maths proofs on paper =&gt; Lean, not the other way around. You can think of Lean as a more formal language of maths, whereas what we write on paper usually is more casual, i.e. we only write enough to ensure the others understand. The underlying concepts of a proof is still the same, and so people usually find it easier to reason with less vague language than formalising everything. A huge part of Lean proofs are the mathematical ideas underlying anyways.</p>\n<p>The part about using types to prove is more like the words in the language, like having alphabets in English or characters in Chinese. There is probably <em>some</em> relation with staticly typed programming (I come from a Rust background too haha), though others probably have a better answer than I do. </p>\n<p>So maybe it's not exactly what you want, but I think you should always try and see how you feel!</p>",
        "id": 325918327,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1675579562
    },
    {
        "content": "<p>I think a good reference for lean as a gateway to basic logic is <a href=\"https://leanprover.github.io/theorem_proving_in_lean/\">#tpil</a> (especially chapter 3). Lean is helpful here because you get immediate feedback on what works and what doesn't, and lean will not let you confuse your forall and exists, and doing some logic puzzles in lean will help you learn the patterns of proof.</p>",
        "id": 325918602,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1675579914
    },
    {
        "content": "<p>The natural number game (<a href=\"https://wwwf.imperial.ac.uk/~buzzard/xena/natural_number_game/\">#nng</a>) is also a popular approach to learning how to use lean and how to do basic proof methods; this one starts off the bat with a small selection of tactics and proves things by rewriting and induction, and using them to build the theory of natural numbers from scratch.</p>",
        "id": 325919054,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1675580422
    },
    {
        "content": "<p>You might also be interested in Logic and Proof: <a href=\"http://avigad.github.io/logic_and_proof/\">http://avigad.github.io/logic_and_proof/</a> The focus is perhaps more on studying logic itself than using it for mathematical proof, but you seem to fit well in its target audience.</p>",
        "id": 326340726,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1675769794
    }
]