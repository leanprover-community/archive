[
    {
        "content": "<p>I've been looking for half an hour and can't find a theorem to this effect:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">sub_sub_of_ge</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">&gt;</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">-</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"bp\">-</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>_Surely_ there is something like this in mathlib, or some similar way to make a \"sub of sub\" into a shallower expression. But the only ones I can find in mathlib are:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Nat.sub_sub_eq_min</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">min</span> <span class=\"n\">a</span> <span class=\"n\">b</span>\n<span class=\"n\">Nat.sub_sub_self</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">},</span> <span class=\"n\">m</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">m</span>\n</code></pre></div>\n<p>which both involve having the same thing on the lhs</p>",
        "id": 405684582,
        "sender_full_name": "Alex Meiburg",
        "timestamp": 1701625949
    },
    {
        "content": "<p>(More generally, I find myself frustrated with the amount of work needed for basic linear inequalities over nats... I feel like I must be missing some powerful tools to handle these for me, because right now it's a lot of crawling through lists of inequalities by hand. A simple problem like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">k1</span> <span class=\"n\">k2</span> <span class=\"n\">n1</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span>\n<span class=\"n\">hnp</span><span class=\"o\">:</span> <span class=\"n\">n1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">&lt;</span> <span class=\"n\">k1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n<span class=\"n\">hd</span><span class=\"o\">:</span> <span class=\"n\">k1</span> <span class=\"bp\">≥</span> <span class=\"n\">k2</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n<span class=\"n\">hnp2</span><span class=\"o\">:</span> <span class=\"n\">n1</span> <span class=\"bp\">≥</span> <span class=\"n\">k1</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">k2</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">k1</span> <span class=\"bp\">-</span> <span class=\"n\">Nat.succ</span> <span class=\"n\">n1</span> <span class=\"bp\">=</span> <span class=\"n\">k2</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">n1</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">k1</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">k2</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)))</span>\n</code></pre></div>\n<p>takes many many steps and a long time to write... Any tips?)</p>",
        "id": 405684905,
        "sender_full_name": "Alex Meiburg",
        "timestamp": 1701626226
    },
    {
        "content": "<p>Use <code>zify</code> and then <code>linarith</code>?</p>",
        "id": 405685198,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1701626447
    },
    {
        "content": "<p>Hrm, <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Nat.sub_add_eq#doc\">docs#Nat.sub_add_eq</a> and <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Nat.sub_sub#doc\">docs#Nat.sub_sub</a> seem duplicates</p>",
        "id": 405685210,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1701626452
    },
    {
        "content": "<p>Kevin's correct, of course, but I thought this lemma existed</p>",
        "id": 405685386,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1701626527
    },
    {
        "content": "<p>Why are you using natural subtraction anyway? I usually try and work around this</p>",
        "id": 405686647,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1701627582
    },
    {
        "content": "<p>I'm trying to prove some things about lists appending and so on, and so all these natural numbers are coming from <code>List.length</code> and <code>List.get</code></p>",
        "id": 405686757,
        "sender_full_name": "Alex Meiburg",
        "timestamp": 1701627663
    },
    {
        "content": "<p>right, but instead of making a variable k1 and having a proof k1 &gt;= k2 + 1, why not instead make a variable t which is k1 - (k2 + 1) and let k1 be t + (k2 + 1)? Every natural subtraction is an obstacle to making thngs easy. Are you sure you can't use integers?</p>",
        "id": 405686957,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1701627844
    },
    {
        "content": "<p>Oh hm, gotcha. So at any point I get a &lt;=, I could <code>obtain Nat.exists_eq_add_of_le</code> and then use that new variable instead?</p>",
        "id": 405687111,
        "sender_full_name": "Alex Meiburg",
        "timestamp": 1701627993
    },
    {
        "content": "<p>I would expect this to exist as <code>tsub_tsub_eq_add_tsub</code></p>",
        "id": 405687232,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1701628092
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"448405\">Alex Meiburg</span> <a href=\"#narrow/stream/113489-new-members/topic/Looking.20for.20a.20Nat.20theorem/near/405687111\">said</a>:</p>\n<blockquote>\n<p>Oh hm, gotcha. So at any point I get a &lt;=, I could <code>obtain Nat.exists_eq_add_of_le</code> and then use that new variable instead?</p>\n</blockquote>\n<p>More generally my rule is \"never ever ever use natural subtraction\" and you're beginning to see why. Natural subtraction is a pathological operation. If you know your subtraction makes sense then another possibility is integer subtraction. The moment you're using integers then <code>linarith</code> does all the heavy lifting for you.</p>\n<p>I suspect that <code>omega</code> might be able to solve these goals soon, but we don't quite have it yet. Watch this space!</p>",
        "id": 405687448,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1701628318
    },
    {
        "content": "<p>Yeah,</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">-</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"bp\">-</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">exists_add_of_le</span> <span class=\"n\">h</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Nat.add_sub_self_left</span><span class=\"o\">]</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Nat.sub_add_eq</span><span class=\"o\">]</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Nat.add_sub_cancel</span><span class=\"o\">]</span>\n  <span class=\"n\">done</span>\n</code></pre></div>",
        "id": 405687499,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1701628342
    },
    {
        "content": "<p>I would expect to find it near tsub_add_eq_add_tsub</p>",
        "id": 405687534,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1701628390
    },
    {
        "content": "<p>There's <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=tsub_tsub_assoc#doc\">docs#tsub_tsub_assoc</a> about <code>a - (b - c)</code>, but that seems to be all</p>",
        "id": 405687627,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1701628465
    },
    {
        "content": "<p><a href=\"https://loogle.lean-lang.org/?q=%22tsub%22%2C+_+-+%28_+-+_%29\">https://loogle.lean-lang.org/?q=%22tsub%22%2C+_+-+%28_+-+_%29</a><br>\nThere's tsub_tsub_assoc, but that's b ≤ a → c ≤ b → a - (b - c) = a - b + c</p>",
        "id": 405687645,
        "sender_full_name": "Alex Meiburg",
        "timestamp": 1701628488
    },
    {
        "content": "<p>ah yeah what Ruben said</p>",
        "id": 405687651,
        "sender_full_name": "Alex Meiburg",
        "timestamp": 1701628493
    },
    {
        "content": "<p>My last hope is that <span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span> knows where it is</p>",
        "id": 405687777,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1701628601
    },
    {
        "content": "<p>Ah! <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=sub_sub_eq_add_sub#doc\">docs#sub_sub_eq_add_sub</a></p>",
        "id": 405687843,
        "sender_full_name": "Alex Meiburg",
        "timestamp": 1701628653
    },
    {
        "content": "<p>oh no, wait. no</p>",
        "id": 405687921,
        "sender_full_name": "Alex Meiburg",
        "timestamp": 1701628687
    },
    {
        "content": "<p>We have that</p>",
        "id": 405688144,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1701628877
    },
    {
        "content": "<p>I have a working tsub version back at my desk</p>",
        "id": 405690043,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1701630360
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- The `tsub` version of `sub_sub_eq_add_sub`. -/</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">tsub_tsub_eq_add_tsub_of_le</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">AddCommMonoid</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">PartialOrder</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Sub</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">OrderedSub</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">ExistsAddOfLE</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n    <span class=\"o\">[</span><span class=\"n\">CovariantClass</span> <span class=\"n\">α</span> <span class=\"n\">α</span> <span class=\"n\">HAdd.hAdd</span> <span class=\"n\">LE.le</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">ContravariantClass</span> <span class=\"n\">α</span> <span class=\"n\">α</span> <span class=\"n\">HAdd.hAdd</span> <span class=\"n\">LE.le</span><span class=\"o\">]</span>\n    <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">-</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"bp\">-</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">d</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">exists_add_of_le</span> <span class=\"n\">h</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">add_tsub_cancel_left</span><span class=\"o\">,</span> <span class=\"n\">add_comm</span> <span class=\"n\">a</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">add_tsub_add_eq_tsub_left</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 405692714,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1701633054
    },
    {
        "content": "<p>The assumptions look pretty ridiculous, but I think they match <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=add_tsub_add_eq_tsub_left#doc\">docs#add_tsub_add_eq_tsub_left</a></p>",
        "id": 405694340,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1701634433
    },
    {
        "content": "<p>Maybe it should just be a linearly ordered additive monoid</p>",
        "id": 405694431,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1701634512
    },
    {
        "content": "<p>No, because it applies to <code>ℕ × ℕ</code></p>",
        "id": 405696906,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1701636892
    },
    {
        "content": "<p>You could replace <code>[AddCommMonoid α] [PartialOrder α] [CovariantClass α α HAdd.hAdd LE.le] [ContravariantClass α α HAdd.hAdd LE.le]</code> by <code>[OrderedCancelAddCommMonoid α]</code> though</p>",
        "id": 405697020,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1701636994
    },
    {
        "content": "<p>I'm surprised it's not been mentioned, but mathlib prefers &lt;/&lt;= to the other side by a lot - this is to avoid theorem duplication. They are defeq however. I wouldn't go as far as Kevin with natural subtraction but it is often unfun to deal with.</p>",
        "id": 405701730,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1701640787
    },
    {
        "content": "<p>I nearly mentioned the whole &lt; vs &gt; thing but I'm less sure about how much it matters in lean 4 so kept quiet</p>",
        "id": 405703329,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1701641952
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/113489-new-members/topic/Looking.20for.20a.20Nat.20theorem/near/405697020\">said</a>:</p>\n<blockquote>\n<p>You could replace <code>[AddCommMonoid α] [PartialOrder α] [CovariantClass α α HAdd.hAdd LE.le] [ContravariantClass α α HAdd.hAdd LE.le]</code> by <code>[OrderedCancelAddCommMonoid α]</code> though</p>\n</blockquote>\n<p>Loogle has no matches for <code>OrderedCancelAddCommMonoid, OrderedSub</code>, so it sounds like my spelling is better</p>",
        "id": 405704868,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1701643317
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/8804\">#8804</a></p>",
        "id": 405705290,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1701643635
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113489-new-members/topic/Looking.20for.20a.20Nat.20theorem/near/405704868\">said</a>:</p>\n<blockquote>\n<p>so it sounds like my spelling is better</p>\n</blockquote>\n<p>*more in line with the current mess is what you meant to say <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span></p>",
        "id": 405763214,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1701675072
    }
]