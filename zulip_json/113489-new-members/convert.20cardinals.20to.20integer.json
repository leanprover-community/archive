[
    {
        "content": "<p>Hey guys, I am trying to formalize some quadratic forms definitions in Lean 3.0 (mostly for my own amusement) and ran into this hurdle. For a positive-definite quadratic form f, I am trying to define the representation number of an integer m in the following way. </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">representation_set</span> <span class=\"o\">(</span><span class=\"n\">f</span><span class=\"o\">:</span> <span class=\"n\">binary_quadratic_form</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">m</span><span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">ℤ</span> <span class=\"bp\">×</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span>  <span class=\"o\">:=</span>\n<span class=\"o\">{</span><span class=\"n\">xy</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span> <span class=\"bp\">×</span> <span class=\"n\">ℤ</span> <span class=\"bp\">|</span> <span class=\"n\">Q</span> <span class=\"n\">f</span> <span class=\"n\">xy.1</span> <span class=\"n\">xy.2</span> <span class=\"bp\">=</span> <span class=\"n\">m</span><span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">representation_number</span> <span class=\"o\">(</span><span class=\"n\">f</span><span class=\"o\">:</span> <span class=\"n\">binary_quadratic_form</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hyp</span><span class=\"o\">:</span> <span class=\"n\">is_positive_definite</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">m</span><span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">cardinal</span>\n<span class=\"o\">:=</span> <span class=\"n\">cardinal.mk</span> <span class=\"o\">(</span><span class=\"n\">representation_set</span> <span class=\"n\">f</span> <span class=\"n\">m</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>Here, I first define representation_set as the set of all solutions of f(xy) = m, and then define the representation number as the cardinality of this set. However, the output of <a href=\"http://cardinal.mk\">cardinal.mk</a> is a cardinal object, but I want it to be an integer (subject to the hypothesis that f is positive definite). Is there a way to convert the cardinal to an integer? Or is there another way that I should be approaching this definition? Thanks in advance!</p>",
        "id": 364379269,
        "sender_full_name": "Rahul Saha",
        "timestamp": 1686166609
    },
    {
        "content": "<p>It sounds like making your definition via <a href=\"https://leanprover-community.github.io/mathlib_docs/find/set.ncard\">docs#set.ncard</a> instead is what you want</p>",
        "id": 364379801,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1686166769
    },
    {
        "content": "<p>Then the definition will not require any hypotheses but your theorems about that definition might (or might not!)</p>",
        "id": 364380006,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1686166824
    },
    {
        "content": "<p>Ah gotcha, thanks!</p>",
        "id": 364380276,
        "sender_full_name": "Rahul Saha",
        "timestamp": 1686166925
    },
    {
        "content": "<p>And I'm assuming that you don't actually mean 3<strong>.0</strong></p>",
        "id": 364380506,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1686167000
    },
    {
        "content": "<p>oh huh when I printed lean --version it gave me Lean (version 3.50.3, commit 855e5b74e3a5, Release)</p>",
        "id": 364382536,
        "sender_full_name": "Rahul Saha",
        "timestamp": 1686167602
    },
    {
        "content": "<p>Hm, it raises invalid import when I try to import data.set.ncard <span class=\"user-mention\" data-user-id=\"127136\">@Alex J. Best</span></p>",
        "id": 364383941,
        "sender_full_name": "Rahul Saha",
        "timestamp": 1686168011
    },
    {
        "content": "<p>ah, it seems that my _target folder does not contain the latest mathlib files</p>",
        "id": 364384607,
        "sender_full_name": "Rahul Saha",
        "timestamp": 1686168222
    },
    {
        "content": "<p>okay I got the imports sorted out, </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">representation_number_int</span> <span class=\"o\">(</span><span class=\"n\">f</span><span class=\"o\">:</span> <span class=\"n\">binary_quadratic_form</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hyp</span><span class=\"o\">:</span> <span class=\"n\">is_positive_definite</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">m</span><span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span>\n<span class=\"o\">:=</span>  <span class=\"n\">ncard</span> <span class=\"o\">(</span><span class=\"n\">representation_set</span> <span class=\"n\">f</span> <span class=\"n\">m</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>But now it says <code>missing  'noncomputable' modifier, definition depends on set.ncard</code>.</p>",
        "id": 364385571,
        "sender_full_name": "Rahul Saha",
        "timestamp": 1686168514
    },
    {
        "content": "<p>okay the following seems like it worked </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">representation_number_int</span> <span class=\"o\">(</span><span class=\"n\">f</span><span class=\"o\">:</span> <span class=\"n\">binary_quadratic_form</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hyp</span><span class=\"o\">:</span> <span class=\"n\">is_positive_definite</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">m</span><span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span>\n<span class=\"o\">:=</span>  <span class=\"n\">ncard</span> <span class=\"o\">(</span><span class=\"n\">representation_set</span> <span class=\"n\">f</span> <span class=\"n\">m</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>But what exactly does <code>noncomputable</code> do in Lean?</p>",
        "id": 364386083,
        "sender_full_name": "Rahul Saha",
        "timestamp": 1686168676
    },
    {
        "content": "<p>It puts Lean into maths mode.</p>",
        "id": 364386829,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1686168910
    },
    {
        "content": "<p>It means \"you don't have to supply the algorithm which computes this number\"</p>",
        "id": 364386893,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1686168937
    },
    {
        "content": "<p>Lean tries to compute where it can, but <code>set.ncard</code> is not really something computable (what is the size of the set <code>{0, 0 if RH else 1}</code>? so you have to tell Lean \"don't even try\"</p>",
        "id": 364386920,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1686168949
    },
    {
        "content": "<p>ah, haha gotcha that makes sense, thanks guys</p>",
        "id": 364388501,
        "sender_full_name": "Rahul Saha",
        "timestamp": 1686169511
    }
]