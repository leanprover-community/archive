[
    {
        "content": "<p>A newbie question:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">definition</span> <span class=\"n\">has_no_isolated_points</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"bp\">∀</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"bp\">¬</span><span class=\"n\">is_open</span> <span class=\"o\">({</span><span class=\"n\">x</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n<span class=\"kd\">definition</span> <span class=\"n\">has_no_isolated_points'</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"bp\">∀</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"bp\">¬</span><span class=\"n\">is_open</span> <span class=\"o\">{</span><span class=\"n\">x</span><span class=\"o\">}</span>\n</code></pre></div>\n<p>The first definition works, the second does not. I saw on another thread that <code>{x}</code> has different meanings, e.g. as a <code>set</code> and as a <code>finset</code>; but surely lean knows that is_open requires a <code>set</code>, so why doesn't the type system infer it?</p>",
        "id": 366187328,
        "sender_full_name": "Laurent Bartholdi",
        "timestamp": 1686749951
    },
    {
        "content": "<p>With <code>set</code> this unfortunately often happens, Lean needs a little help</p>",
        "id": 366187749,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1686750016
    },
    {
        "content": "<p>Does this still happen in lean 4?</p>",
        "id": 366187860,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1686750037
    },
    {
        "content": "<p>Sorry, I should have said that this is in lean3</p>",
        "id": 366188035,
        "sender_full_name": "Laurent Bartholdi",
        "timestamp": 1686750066
    },
    {
        "content": "<p>Indeed,</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">HasNoIsolatedPoint</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">TopologicalSpace</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"bp\">∀</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"bp\">¬</span><span class=\"n\">IsOpen</span> <span class=\"o\">{</span><span class=\"n\">x</span><span class=\"o\">}</span>\n</code></pre></div>\n<p>works like a charm. A problem that will disappear on its own, then :)</p>",
        "id": 366189285,
        "sender_full_name": "Laurent Bartholdi",
        "timestamp": 1686750340
    },
    {
        "content": "<p>Eric, no, I think not because of default instances.</p>",
        "id": 366235858,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1686758892
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"263407\">Laurent Bartholdi</span> <a href=\"#narrow/stream/113489-new-members/topic/singleton.20type/near/366187328\">said</a>:</p>\n<blockquote>\n<p>why doesn't the type system infer it?</p>\n</blockquote>\n<p>I think the problem is that <code>is_open</code> requires a <code>set</code> in some unknown type, but it's not a priori clear that this type is <code>α</code>. Unfortunately the meaning of <code>{x}</code> will only be figured out once the exact type of it is known, so <code>set ?m</code> is not good enough, it needs the help that it has type <code>set α</code>. This is indeed unfortunate.</p>",
        "id": 366547063,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1686844228
    },
    {
        "content": "<p>This was also an irritating thing in lean 3 (although IIRC it didn't happen back in 2017 before we started to get interested in getting set notation to work for finsets too ...)</p>",
        "id": 366627954,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1686863404
    }
]