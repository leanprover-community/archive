[
    {
        "content": "<p>If I have </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Real.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Complex.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Complex.Exponential</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.MeasureTheory.Integral.Bochner</span>\n<span class=\"kn\">open</span> <span class=\"n\">Complex</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">odd_ft_sine_ft</span> <span class=\"o\">{</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">→</span> <span class=\"n\">ℝ</span>  <span class=\"o\">)</span> <span class=\"o\">:</span>\n        <span class=\"o\">(</span><span class=\"bp\">∫</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"o\">((</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">)</span><span class=\"bp\">/</span><span class=\"mi\">2</span><span class=\"o\">)</span><span class=\"bp\">*</span> <span class=\"n\">exp</span> <span class=\"o\">(</span><span class=\"n\">I</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"bp\">*</span><span class=\"n\">I</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span>\n         <span class=\"bp\">∫</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">*</span> <span class=\"n\">sin</span> <span class=\"o\">((</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"bp\">*</span><span class=\"n\">I</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">):=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">let</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span> <span class=\"o\">:=</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"bp\">*</span><span class=\"n\">I</span>\n</code></pre></div>\n<p>Is there a simple way to apply a rewrite using the named <code>let</code>?<br>\nI can try to do <code>have hs : s = a + b*I := by ring</code> (<code>ring</code> is probably overkill but w/e) and then try to rewrite <code>sin ((a + b*I)*x) </code> as <code> sin (s*x)</code> but I need <code>x</code> declared, and <code>intro x</code> like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">x</span>\n  <span class=\"c1\">-- rest of proof</span>\n</code></pre></div>\n<p>gives <code>tactic 'introN' failed, insufficient number of binders</code>. What can I do here?</p>",
        "id": 401923671,
        "sender_full_name": "Nicholas Wilson",
        "timestamp": 1699947704
    },
    {
        "content": "<p><code>rfl</code> is the 'right' way to prove <code>s = a+b*I</code></p>",
        "id": 401923905,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1699947820
    },
    {
        "content": "<p>but you should be able to just <code>rw [show s = a + b*I from rfl]</code> here</p>",
        "id": 401924054,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1699947883
    },
    {
        "content": "<p>Also the <code>set</code> tactic should automatically do this substitution, and you can also get the equality via <code>set s := a + b*I with H</code></p>",
        "id": 401924143,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1699947929
    },
    {
        "content": "<p><code>set</code> works marvellously, thanks!</p>",
        "id": 401924482,
        "sender_full_name": "Nicholas Wilson",
        "timestamp": 1699948110
    },
    {
        "content": "<p>Hmm, </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">set</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span> <span class=\"o\">:=</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"bp\">*</span><span class=\"n\">I</span> <span class=\"k\">with</span> <span class=\"n\">H</span>\n<span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">Complex.sin</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>the simp seems to have undone the <code>set</code>. The state is now </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">∫</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">cexp</span> <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"bp\">↑</span><span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">I</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"bp\">↑</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span>\n  <span class=\"bp\">∫</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">),</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">((</span><span class=\"n\">cexp</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"o\">((</span><span class=\"bp\">↑</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"bp\">↑</span><span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">I</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"bp\">↑</span><span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">I</span><span class=\"o\">))</span> <span class=\"bp\">-</span> <span class=\"n\">cexp</span> <span class=\"o\">((</span><span class=\"bp\">↑</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"bp\">↑</span><span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">I</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"bp\">↑</span><span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">I</span><span class=\"o\">))</span> <span class=\"bp\">*</span> <span class=\"n\">I</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 401925005,
        "sender_full_name": "Nicholas Wilson",
        "timestamp": 1699948305
    },
    {
        "content": "<p>whereas before the <code>simp</code> the state is </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">∫</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">cexp</span> <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"bp\">*</span> <span class=\"n\">s</span> <span class=\"bp\">*</span> <span class=\"bp\">↑</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">∫</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">),</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">Complex.sin</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"bp\">*</span> <span class=\"bp\">↑</span><span class=\"n\">x</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 401925232,
        "sender_full_name": "Nicholas Wilson",
        "timestamp": 1699948397
    },
    {
        "content": "<p>Is there a way to make that <code>set</code> permanent?</p>",
        "id": 401925400,
        "sender_full_name": "Nicholas Wilson",
        "timestamp": 1699948466
    },
    {
        "content": "<p>Also what is the difference between <code>set s : ℂ := a + b*I with H</code> and <code>set s : ℂ := a + b*I</code>, both seem to have the same effect. I take it <code>h</code> is the default name for the hypothesis that you are trying to prove?</p>",
        "id": 401925611,
        "sender_full_name": "Nicholas Wilson",
        "timestamp": 1699948562
    },
    {
        "content": "<p>you need to set <code>simp (config := {zeta := false})</code>, the next version of lean will have this on by default</p>",
        "id": 401926064,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1699948745
    },
    {
        "content": "<p><code>H</code> there gives you a name for the equality <code>s = a + b*I</code> in case you need it for other reasons</p>",
        "id": 401926167,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1699948797
    },
    {
        "content": "<p>if you don't name it I think you don't get this equality at all (but you can still prove it yourself with <code>have H : s = a + b*I := rfl</code> as before)</p>",
        "id": 401926377,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1699948854
    },
    {
        "content": "<p>Thanks that works. I still need a way to name <code>x</code> as  the <code>simp</code> has the multiplications of <code>x,s,I</code> in a different order than the <code>exp</code> in the hypothesis.</p>",
        "id": 401927397,
        "sender_full_name": "Nicholas Wilson",
        "timestamp": 1699949195
    },
    {
        "content": "<p>you should probably use <code>simpa</code> instead of <code>simp</code> if you are trying to make the goal expression line up with a hypothesis</p>",
        "id": 401929268,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1699949948
    },
    {
        "content": "<p><code>simpa (config := {zeta := false}) [Complex.sin]</code> gives  <code>tactic 'assumption' failed</code>. <br>\nReading the docs for <code>simpa</code> i presume that is because the goal is not anywhere close to proof yet.</p>",
        "id": 401930189,
        "sender_full_name": "Nicholas Wilson",
        "timestamp": 1699950227
    }
]