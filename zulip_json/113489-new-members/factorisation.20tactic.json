[
    {
        "content": "<p>is there a factorisation tactic? or is that (one of the things) what <code>ring</code>/<code>ring_nf</code> do?</p>",
        "id": 403741899,
        "sender_full_name": "Nicholas Wilson",
        "timestamp": 1700729092
    },
    {
        "content": "<p>I have a bunch of sums and each term in that sum has a bunch of common factors, e.g one term is </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">cos</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"bp\">¹</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">cos</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"bp\">¹</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">cos</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">cos</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"bp\">*</span> <span class=\"n\">cosh</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">¹</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">cosh</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">cosh</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">))</span> <span class=\"bp\">*</span>\n                        <span class=\"n\">sinh</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">¹</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">*</span>\n                      <span class=\"mi\">2</span>\n</code></pre></div>\n<p>and the common factors shared are <code>2* cosh (x¹ * b) * sinh (x¹ * b)</code>, I would like to factor these common terms out or failing that bring them to the front (or at least together) so that I can apply <code>sinh_two_mul</code>.</p>",
        "id": 403745818,
        "sender_full_name": "Nicholas Wilson",
        "timestamp": 1700730562
    },
    {
        "content": "<p>If you manually write it in the form that you want, then <code>ring</code> can prove that your new expression is equal to the old one.</p>",
        "id": 403746307,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1700730779
    },
    {
        "content": "<p>Ideally not because that is a _very_ long expression. (Also I realised some of them have <code>2* cosh (x¹ * b) * sinh (x¹ * b)</code> and some of them have <code>2* cosh (x * b) * sinh (x * b)</code> (<code>x</code> vs <code>x¹</code>))</p>",
        "id": 403746577,
        "sender_full_name": "Nicholas Wilson",
        "timestamp": 1700730891
    },
    {
        "content": "<p>also the factors are in different places in the sequence of products</p>",
        "id": 403746678,
        "sender_full_name": "Nicholas Wilson",
        "timestamp": 1700730939
    },
    {
        "content": "<p>I think what you are asking for is more symbolic computation than basic theorem proving. I don't think there is any reason that this could not be done by some tactics, but as <span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> implicitly suggests above, currently you probably have to <em>state</em> the desired factorization manually. In fact I hope and believe that there will be more tactics that do some (simple) symbolic computation in Lean itself in the future.</p>\n<p>(Incidentally, I am going to meet a CS professor today to discuss hiring summer interns to develop small bits of simple symbolic computation within Lean. <span aria-label=\"fingers crossed\" class=\"emoji emoji-1f91e\" role=\"img\" title=\"fingers crossed\">:fingers_crossed:</span>)</p>",
        "id": 403746829,
        "sender_full_name": "Kalle Kytölä",
        "timestamp": 1700730998
    },
    {
        "content": "<p>Indeed. Noted, I'd just love to be able to do <code>factorise [2, cosh (x * b), sinh (x * b)]</code> instead of spelling it all out for <code>ring</code></p>",
        "id": 403747162,
        "sender_full_name": "Nicholas Wilson",
        "timestamp": 1700731140
    },
    {
        "content": "<p>any idea how hard it would be to write a tactic to do that? I've never written tactics before.</p>",
        "id": 403747608,
        "sender_full_name": "Nicholas Wilson",
        "timestamp": 1700731318
    },
    {
        "content": "<p><code>ring_nf</code> chooses an ordering of the atoms that occur in the formula. Maybe such an optional list argument could influence the ordering. I don't know enough about the implementation of <code>ring_nf</code> to know whether this is easy to pull off. But that might lead to a first approximation of your hypothetical <code>factorise</code></p>",
        "id": 403747672,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1700731330
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"238446\">@Anne Baanen</span></p>",
        "id": 403747743,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1700731350
    },
    {
        "content": "<p>Yeah i would expect to defer to <code>ring</code>/<code>ring_nf</code> for most of the heavy lifting.</p>",
        "id": 403747863,
        "sender_full_name": "Nicholas Wilson",
        "timestamp": 1700731395
    },
    {
        "content": "<p>For permuting factors, you can try <code>move_mul</code>.</p>",
        "id": 403750242,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1700732190
    },
    {
        "content": "<p>If you can give a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>, I can try to see how it would work.</p>",
        "id": 403750346,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1700732218
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/113489-new-members/topic/factorisation.20tactic/near/403747672\">said</a>:</p>\n<blockquote>\n<p><code>ring_nf</code> chooses an ordering of the atoms that occur in the formula. Maybe such an optional list argument could influence the ordering. I don't know enough about the implementation of <code>ring_nf</code> to know whether this is easy to pull off. But that might lead to a first approximation of your hypothetical <code>factorise</code></p>\n</blockquote>\n<p>It should not be hard to modify <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Mathlib.Tactic.AtomM.run#doc\">docs#Mathlib.Tactic.AtomM.run</a> or call <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Mathlib.Tactic.AtomM.addAtom#doc\">docs#Mathlib.Tactic.AtomM.addAtom</a> to pass these arguments. However, I have no real idea how well this would work in practice. Certainly we wouldn't be able to extract the factor <code>2</code> since numeric constants like that are handled specially.</p>",
        "id": 403754094,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1700733316
    },
    {
        "content": "<p>I also tried tricks with metavariables like:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">True</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"n\">d</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">_</span>\n  <span class=\"bp\">·</span> <span class=\"n\">ring</span> <span class=\"c1\">-- goal: a * b + a * c + a * d = a ^ 2</span>\n  <span class=\"n\">trivial</span>\n</code></pre></div>\n<p>So it looks like <code>_</code> gets unified with the first atom in the <code>AtomM</code> context.</p>",
        "id": 403754411,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1700733417
    },
    {
        "content": "<p>I had something like this in mind:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"n\">d</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">move_mul</span> <span class=\"o\">[</span><span class=\"n\">a</span><span class=\"o\">]</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">add_mul</span><span class=\"o\">]</span>\n  <span class=\"c1\">--  ⊢ (b + c + d) * a = x</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 403755283,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1700733691
    },
    {
        "content": "<p>Note that this works also with the <code>2</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"n\">d</span> <span class=\"bp\">*</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">move_mul</span> <span class=\"o\">[</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"n\">a</span><span class=\"o\">]</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">add_mul</span><span class=\"o\">]</span>\n  <span class=\"c1\">-- ⊢ (b + c + d) * 2 * a = x</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 403756301,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1700734032
    },
    {
        "content": "<p>Silly question  when I do <code>move_mul [2, , cosh (x * b)]</code> I get <code>unexpected identifier; expected command</code>, am I missing an Import or something?</p>",
        "id": 403757262,
        "sender_full_name": "Nicholas Wilson",
        "timestamp": 1700734366
    },
    {
        "content": "<p>It was a continuation of the previous example: <code>import Mathlib</code>.</p>",
        "id": 403757527,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1700734453
    },
    {
        "content": "<p>Thanks, that's going to take a while...</p>",
        "id": 403758603,
        "sender_full_name": "Nicholas Wilson",
        "timestamp": 1700734802
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.MoveAdd</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Int.Basic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Parser</span> <span class=\"n\">Tactic</span> <span class=\"k\">in</span>\n<span class=\"n\">macro</span> <span class=\"s2\">\"factorise \"</span> <span class=\"n\">ts</span><span class=\"o\">:</span><span class=\"n\">rwRuleSeq</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">move_mul</span> <span class=\"bp\">$</span><span class=\"n\">ts</span><span class=\"bp\">;</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">add_mul</span><span class=\"o\">]))</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Parser</span> <span class=\"n\">Tactic</span> <span class=\"k\">in</span>\n<span class=\"sd\">/-- `factorise`, but with the US-friendly spelling. -/</span>\n<span class=\"n\">macro</span> <span class=\"s2\">\"factorize \"</span> <span class=\"n\">ts</span><span class=\"o\">:</span><span class=\"n\">rwRuleSeq</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">factorise</span> <span class=\"bp\">$</span><span class=\"n\">ts</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"n\">d</span> <span class=\"bp\">*</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">factorise</span> <span class=\"o\">[</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"n\">a</span><span class=\"o\">]</span>\n  <span class=\"c1\">-- ⊢ (b + c + d) * 2 * a = x</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>this is somewhat more minimal.</p>",
        "id": 403758779,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1700734846
    },
    {
        "content": "<p>You should try <code>lake exe cache get</code>.</p>",
        "id": 403758809,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1700734857
    },
    {
        "content": "<p>By the way, it is not the first time that a \"factorisation tactic\" comes up.  If there is support for this, I can PR the simple macro above as an initial implementation and then start dealing with further requests as needed.</p>",
        "id": 403978351,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1700836436
    },
    {
        "content": "<p>Just to be clear, I am not planning for this to be a tactic that takes <code>a ^2 - b ^ 2</code> and replaces it with <code>(a - b) * (a + b)</code>.  I am thinking of this simply as a tactic that collects together explicit factors that are already present in the expression and get called out by the user!</p>",
        "id": 403978358,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1700836439
    },
    {
        "content": "<p>I would say we should wait and implement an actual factorization tactic that does what we want, otherwise it could be a headache or confusing to people to replace uses of the old one when we get one that does something stronger. One important feature that makes such a tactic even more useful is that it should produce proofs that the factors are prime / irreducible. That said we could implement the tactic you suggest, just with a different name, <code>collect_factors</code> or something?</p>",
        "id": 403983236,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1700838278
    },
    {
        "content": "<p>Alex, the <code>collect_factors</code> name sounds like a good choice!  I'll wait to see if there is are any further comments.</p>",
        "id": 403988921,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1700840556
    }
]