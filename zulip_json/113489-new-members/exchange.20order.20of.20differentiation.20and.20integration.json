[
    {
        "content": "<p>How do I (what theorems apply) exchange the order of differentiation in a parametric integral?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.MeasureTheory.Integral.Bochner</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.MeasureTheory.Measure.Haar.OfBasis</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Real.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Complex.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Complex.Exponential</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Analysis.MellinTransform</span>\n<span class=\"kn\">open</span> <span class=\"n\">Complex</span>\n<span class=\"kn\">open</span> <span class=\"n\">Real</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">f</span><span class=\"o\">:</span><span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span> <span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span><span class=\"n\">ℝ</span> <span class=\"o\">):</span> <span class=\"n\">deriv</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">w</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">∫</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">Real.cos</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">Real.sinh</span> <span class=\"o\">(</span><span class=\"n\">w</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"o\">)))</span> <span class=\"n\">b</span> <span class=\"bp\">=</span>\n    <span class=\"bp\">∫</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">),</span> <span class=\"n\">x</span><span class=\"bp\">*</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">Real.cos</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">Real.cosh</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 402958943,
        "sender_full_name": "Nicholas Wilson",
        "timestamp": 1700369250
    },
    {
        "content": "<p>See <a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/Analysis/Calculus/ParametricIntegral.html\">https://leanprover-community.github.io/mathlib4_docs/Mathlib/Analysis/Calculus/ParametricIntegral.html</a></p>",
        "id": 402959207,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1700369395
    },
    {
        "content": "<p>That is one impenetrable page full of jargon, the more I read the less I comprehend. I'm going to assume that I want <code>deriv</code>s and not <code>fderiv</code>s.</p>\n<p>If I am reading that correctly (which it is entirely possible I am not) the one I want is <code>hasDerivAt_integral_of_dominated_loc_of_deriv_le</code> and <br>\n<code>F (x,a)</code> has <code>deriv</code> (w.r.t. <code>a</code>) <code>F'(x,a)</code>.<br>\nThe result of the theorem is that :<code>F' (x,a)</code>is integrable w.r.t <code>a</code> for some <code>x</code> (dependant of the other hypotheses that I need to supply, which I barely understand individually and  I have no idea how to construct) , and <code>deriv (fun x ↦ ∫a, F x a) y</code> for some given <code>y</code> is equal to <code>∫a, F' y a)</code> via the <code>HasDerivAt</code>.</p>\n<p>First, is that a correct assessment? How do I use the <code>HasDerivAt</code> result to invert the order of integration and differentiation? <code>h_diff</code> is understand conceptually to be the requirement that <code>F' (x,a) = d/da F(x,a)</code>, though I don't quite follow the radius epsilon metric ball definition. I understand <code>hF_int</code>. I don't understand the other requirements.</p>",
        "id": 402972515,
        "sender_full_name": "Nicholas Wilson",
        "timestamp": 1700377389
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"663331\">Nicholas Wilson</span> <a href=\"#narrow/stream/113489-new-members/topic/exchange.20order.20of.20differentiation.20and.20integration/near/402972515\">said</a>:</p>\n<blockquote>\n<p>That is one impenetrable page full of jargon, the more I read the less I comprehend. </p>\n</blockquote>\n<p>Do you mean it's full of mathematics?  Yes, we do that sometimes in Mathlib, sorry. Actually I wrote my message in a hurry without having time to check statements in this file, and I can see I misremembered how much was incorporated from the sphere eversion project into Mathlib. SE has more elementary statements that are consequences of the abstract statements in this file. I'll try to open PRs soon (please ping me if I forget).</p>",
        "id": 403026753,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1700410470
    },
    {
        "content": "<p>You can take a look at <a href=\"https://github.com/leanprover-community/sphere-eversion/blob/master/SphereEversion/ToMathlib/MeasureTheory/ParametricIntervalIntegral.lean\">https://github.com/leanprover-community/sphere-eversion/blob/master/SphereEversion/ToMathlib/MeasureTheory/ParametricIntervalIntegral.lean</a> in the mean time.</p>",
        "id": 403026930,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1700410578
    },
    {
        "content": "<p>Also note that the example that you wrote at the beginning of this thread has no reason to be true (unless you get lucky and it reduces to <code>0 = 0</code> when it doesn't make sense) and this is also an obstacle to answering your question.</p>",
        "id": 403027169,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1700410712
    },
    {
        "content": "<p>Haha, no need to apologise. I don't particularly care for the strict integrability (or differentiability) requirements (I'm an engineer if you can't tell). I'm using lean to prove the bits of theorems I care about as a first pass as a check on my algebra and logic, and to have an (as fleshed out as I can make it) skeleton of the formal proof. So I'm happy to leave them stubbed out  by <code>sorry</code> for now. </p>\n<p>Yes I had noticed that. I'm using <code>sorry</code> for purely the integral/differentiation oder exchange now and letting <code>simp</code> do the differential calculus for me (I should have done that first really, that's the whole reason for using a proof assistant in the first place!). </p>\n<p>I'll circle back to these integrability and differentiability requirements at a later date when I have the rest of the rest of the proof done and hope that the full proof is sufficiently enticing for others to help complete the formalisation, as dealing with these technical minutiae is not particularly exciting and doesn't help me move forward with the proof. </p>\n<p>It would be much appreciated to have a set of simplified theorems that an engineer can understand.</p>",
        "id": 403099068,
        "sender_full_name": "Nicholas Wilson",
        "timestamp": 1700459910
    }
]