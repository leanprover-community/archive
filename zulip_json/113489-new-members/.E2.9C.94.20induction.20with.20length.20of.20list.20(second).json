[
    {
        "content": "<p>I want to show that \"selection sort returns a permutation of a given list\". <br>\nThen I decided to use induction on the length of the list.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n\n<span class=\"kd\">universe</span> <span class=\"n\">u</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">List</span>\n\n<span class=\"c1\">-- `α` has linear order</span>\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">LinearOrder</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n\n<span class=\"sd\">/-- selection sort  -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">List.selection_sort</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n  <span class=\"k\">if</span> <span class=\"n\">hl</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">l.length</span> <span class=\"k\">then</span>\n    <span class=\"k\">let</span> <span class=\"n\">μ</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">minimum_of_length_pos</span> <span class=\"n\">hl</span>\n\n    <span class=\"c1\">-- `μ` is a member of the list `l`</span>\n    <span class=\"k\">have</span> <span class=\"n\">mem</span> <span class=\"o\">:</span> <span class=\"n\">μ</span> <span class=\"bp\">∈</span> <span class=\"n\">l</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n      <span class=\"n\">refine</span> <span class=\"n\">minimum_mem</span> <span class=\"bp\">?</span><span class=\"n\">_</span>\n      <span class=\"n\">simp</span><span class=\"bp\">?</span> <span class=\"n\">says</span>\n        <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">coe_minimum_of_length_pos</span><span class=\"o\">]</span>\n\n    <span class=\"k\">let</span> <span class=\"n\">rest</span> <span class=\"o\">:=</span> <span class=\"n\">l.erase</span> <span class=\"n\">μ</span>\n\n    <span class=\"c1\">-- lemma for termination</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">l.length</span> <span class=\"bp\">&gt;</span> <span class=\"n\">rest.length</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n      <span class=\"k\">calc</span> <span class=\"n\">l.length</span>\n        <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"n\">rest.length</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">length_erase_add_one</span> <span class=\"n\">mem</span><span class=\"o\">]</span>\n        <span class=\"n\">_</span> <span class=\"bp\">&gt;</span> <span class=\"n\">rest.length</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">linarith</span>\n\n    <span class=\"n\">μ</span> <span class=\"o\">::</span> <span class=\"o\">(</span><span class=\"n\">selection_sort</span> <span class=\"n\">rest</span><span class=\"o\">)</span>\n  <span class=\"k\">else</span>\n    <span class=\"o\">[]</span>\n  <span class=\"n\">termination_by</span> <span class=\"n\">_</span> <span class=\"n\">l</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">l.length</span>\n\n<span class=\"c1\">-- test</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">[</span><span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">4</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">5</span><span class=\"o\">,</span> <span class=\"mi\">9</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">]</span><span class=\"bp\">.</span><span class=\"n\">selection_sort</span> <span class=\"bp\">=</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"mi\">4</span><span class=\"o\">,</span> <span class=\"mi\">5</span><span class=\"o\">,</span> <span class=\"mi\">9</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">l</span> <span class=\"bp\">~</span> <span class=\"n\">selection_sort</span> <span class=\"n\">l</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"c1\">-- induction on length of the list</span>\n  <span class=\"n\">induction'</span> <span class=\"n\">ih</span> <span class=\"o\">:</span> <span class=\"n\">l.length</span>\n\n  <span class=\"n\">case</span> <span class=\"n\">zero</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">replace</span> <span class=\"n\">ih</span> <span class=\"o\">:</span> <span class=\"n\">l.length</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">ih</span>\n    <span class=\"k\">have</span> <span class=\"n\">hl</span> <span class=\"o\">:</span> <span class=\"n\">l</span> <span class=\"bp\">=</span> <span class=\"o\">[]</span> <span class=\"o\">:=</span> <span class=\"n\">length_eq_zero.mp</span> <span class=\"n\">ih</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">hl</span><span class=\"o\">]</span>\n    <span class=\"k\">suffices</span> <span class=\"n\">selection_sort</span> <span class=\"n\">l</span> <span class=\"bp\">=</span> <span class=\"o\">[]</span> <span class=\"k\">from</span> <span class=\"n\">nil_perm.mpr</span> <span class=\"n\">rfl</span>\n\n    <span class=\"n\">unfold</span> <span class=\"n\">selection_sort</span>\n    <span class=\"n\">simp</span><span class=\"bp\">?</span> <span class=\"o\">[</span><span class=\"n\">hl</span><span class=\"o\">]</span> <span class=\"n\">says</span>\n      <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span>\n        <span class=\"n\">hl</span><span class=\"o\">,</span>\n        <span class=\"n\">length_nil</span><span class=\"o\">,</span>\n        <span class=\"n\">lt_self_iff_false</span><span class=\"o\">,</span>\n        <span class=\"n\">erase_nil</span><span class=\"o\">,</span>\n        <span class=\"n\">dite_false</span>\n      <span class=\"o\">]</span>\n  <span class=\"n\">case</span> <span class=\"n\">succ</span> <span class=\"n\">n</span> <span class=\"n\">IH</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">replace</span> <span class=\"n\">ih</span> <span class=\"o\">:</span> <span class=\"n\">length</span> <span class=\"n\">l</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"n\">ih</span>\n    <span class=\"n\">unfold</span> <span class=\"n\">selection_sort</span>\n    <span class=\"n\">simp</span><span class=\"bp\">?</span> <span class=\"o\">[</span><span class=\"n\">ih</span><span class=\"o\">]</span> <span class=\"n\">says</span>\n      <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span>\n        <span class=\"n\">ih</span><span class=\"o\">,</span>\n        <span class=\"n\">add_pos_iff</span><span class=\"o\">,</span>\n        <span class=\"n\">or_true</span><span class=\"o\">,</span>\n        <span class=\"n\">dite_true</span>\n      <span class=\"o\">]</span>\n    <span class=\"n\">set</span> <span class=\"n\">μ</span> <span class=\"o\">:=</span> <span class=\"n\">minimum_of_length_pos</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">length</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"k\">with</span> <span class=\"n\">hm</span>\n    <span class=\"n\">set</span> <span class=\"n\">rest</span> <span class=\"o\">:=</span> <span class=\"n\">l.erase</span> <span class=\"n\">μ</span> <span class=\"k\">with</span> <span class=\"n\">hl</span>\n\n    <span class=\"k\">suffices</span> <span class=\"n\">rest.length</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"k\">from</span> <span class=\"kd\">by</span>\n      <span class=\"k\">have</span> <span class=\"n\">hr</span> <span class=\"o\">:</span> <span class=\"n\">selection_sort</span> <span class=\"n\">rest</span> <span class=\"bp\">~</span> <span class=\"n\">rest</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n        <span class=\"c1\">-- `IH this` does not work!</span>\n        <span class=\"gr\">sorry</span>\n      <span class=\"gr\">sorry</span>\n\n    <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 398477105,
        "sender_full_name": "Asei Inoue",
        "timestamp": 1698237857
    },
    {
        "content": "<p>how to show the following part of the proof...?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code> <span class=\"k\">have</span> <span class=\"n\">hr</span> <span class=\"o\">:</span> <span class=\"n\">selection_sort</span> <span class=\"n\">rest</span> <span class=\"bp\">~</span> <span class=\"n\">rest</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n</code></pre></div>",
        "id": 398477417,
        "sender_full_name": "Asei Inoue",
        "timestamp": 1698238002
    },
    {
        "content": "<p>The induction assumption <code>IH</code> is for the list <code>l</code> and cannot be applied to <code>rest</code>!</p>",
        "id": 398477539,
        "sender_full_name": "Asei Inoue",
        "timestamp": 1698238049
    },
    {
        "content": "<p>You might need <code>induction' ih : l.length generalizing l</code></p>",
        "id": 398477901,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1698238184
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"307953\">@Ruben Van de Velde</span> Thank you!!!</p>",
        "id": 398478196,
        "sender_full_name": "Asei Inoue",
        "timestamp": 1698238290
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"626349\">Asei Inoue</span> has marked this topic as resolved.</p>",
        "id": 398478216,
        "sender_full_name": "Notification Bot",
        "timestamp": 1698238297
    },
    {
        "content": "<p>(delete)</p>",
        "id": 398482434,
        "sender_full_name": "Asei Inoue",
        "timestamp": 1698239722
    },
    {
        "content": "<p>Is there a Lean equivalent of <code>induction x using lt_wf</code>? In Coq, this tactic starts an induction argument that is based on the <code>lt_wf</code> proposition</p>",
        "id": 398723764,
        "sender_full_name": "Agnishom Chattopadhyay",
        "timestamp": 1698337021
    },
    {
        "content": "<p>Same syntax, sounds like</p>",
        "id": 398724893,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1698337495
    },
    {
        "content": "<p>e.g.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">induction'</span> <span class=\"n\">a</span> <span class=\"n\">using</span> <span class=\"n\">Nat.case_strong_induction_on</span> <span class=\"k\">with</span> <span class=\"n\">a</span> <span class=\"n\">ha</span>\n  <span class=\"c\">/-</span>\n<span class=\"cm\">  b : ℕ</span>\n<span class=\"cm\">  ⊢ 0 + b = b + 0</span>\n<span class=\"cm\">  -/</span>\n  <span class=\"bp\">·</span> <span class=\"n\">simp</span>\n  <span class=\"c\">/-</span>\n<span class=\"cm\">  b a : ℕ</span>\n<span class=\"cm\">  ha : ∀ (m : ℕ), m ≤ a → m + b = b + m</span>\n<span class=\"cm\">  ⊢ succ a + b = b + succ a</span>\n<span class=\"cm\">  -/</span>\n  <span class=\"bp\">·</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">add_succ</span><span class=\"o\">,</span> <span class=\"n\">succ_add</span><span class=\"o\">,</span> <span class=\"n\">ha</span> <span class=\"n\">a</span> <span class=\"bp\">$</span> <span class=\"n\">Nat.le_refl</span> <span class=\"n\">a</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 398727820,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1698338571
    }
]