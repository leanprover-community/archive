[
    {
        "content": "<p>I just came across this MWE and was wondering if someone can explain me why my match does not fold away:</p>\n<div class=\"codehilite\" data-code-language=\"lean4\"><pre><span></span><code>import Mathlib.Data.Vector\nimport Mathlib.Data.Bitvec.Defs\n\n/--\ni: Fin (List.length (Vector.toList (Bitvec.ofInt 1 (-1))))\n⊢ List.get\n    (Vector.toList\n      (match 1, -1 with\n      | n, Int.ofNat m =&gt; Bitvec.ofNat n m\n      | n, Int.negSucc m =&gt; Bitvec.not (Bitvec.ofNat n m)))\n    i =\n  true\n--/\n\ntheorem match_does_not_fold_away : List.get ((Bitvec.ofInt 1 (-1)).toList) i = true := by\n  simp[Bitvec.ofInt]\n  simp\n  sorry\n</code></pre></div>",
        "id": 367828583,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1687246639
    },
    {
        "content": "<p>you would need a simp lemma to reduce <code>-1</code> to <code>negSucc</code> of something</p>",
        "id": 367829636,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1687246953
    },
    {
        "content": "<p>you could do <code>simp [show -1 = negSucc 0 by rfl]</code></p>",
        "id": 367829688,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1687246976
    },
    {
        "content": "<p>probably <code>-(succ n) = negSucc n</code> will also work as a simp lemma here</p>",
        "id": 367830133,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1687247109
    },
    {
        "content": "<p>Thank you <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> for the quick response. I guess this is the underlying issue.</p>\n<blockquote>\n<p>simp [show -1 = Int.negSucc 0 by rfl]</p>\n</blockquote>\n<p>Does not work. The output remains the same.</p>",
        "id": 367830292,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1687247154
    },
    {
        "content": "<p>hm, you will need to give an actual MWE, this seems like it should work unless there are some hidden dependencies</p>",
        "id": 367830644,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1687247247
    },
    {
        "content": "<p>oh of course, you are using <code>List.get</code> which is a dependent function</p>",
        "id": 367830816,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1687247292
    },
    {
        "content": "<p>The one above is a MWE, no?</p>",
        "id": 367830837,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1687247297
    },
    {
        "content": "<p>is bitvec available without imports?</p>",
        "id": 367830924,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1687247325
    },
    {
        "content": "<p>Maybe not. How do I create a MWE that I can actually test? Do I need to build a full lake repository. It will need mathlib and the Bitvec imports.</p>",
        "id": 367831047,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1687247359
    },
    {
        "content": "<p>It's fine if you want to import files from mathlib, as long as they exist on master</p>",
        "id": 367831140,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1687247388
    },
    {
        "content": "<p>I added two import lines in the code above.</p>",
        "id": 367831353,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1687247429
    },
    {
        "content": "<p>I usually use a blank test file within a project set up to be able to import mathlib (either mathlib itself or a downstream project)</p>",
        "id": 367831357,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1687247430
    },
    {
        "content": "<p>OK. I tested the above MWE and it compiles and showes the issue.</p>",
        "id": 367831576,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1687247484
    },
    {
        "content": "<p>bitvec.basic not found?</p>",
        "id": 367831620,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1687247494
    },
    {
        "content": "<p>you can stub out anything that isn't being unfolded in the MWE</p>",
        "id": 367831805,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1687247528
    },
    {
        "content": "<p>.. working on it ..</p>",
        "id": 367832206,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1687247630
    },
    {
        "content": "<p>Oh it's <code>Mathlib.Data.Bitvec.Defs</code> on master</p>",
        "id": 367832674,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1687247723
    },
    {
        "content": "<p>It was the dependencies after all. Here's the trick:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">match_does_not_fold_away</span> <span class=\"o\">:</span> <span class=\"n\">List.get</span> <span class=\"o\">((</span><span class=\"n\">Bitvec.ofInt</span> <span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">toList</span><span class=\"o\">)</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">true</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">Option.some_inj</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">List.get</span><span class=\"bp\">?</span><span class=\"n\">_eq_get</span><span class=\"o\">]</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">Bitvec.ofInt</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 367832994,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1687247805
    },
    {
        "content": "<p>OK. That works.</p>",
        "id": 367833873,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1687248002
    },
    {
        "content": "<p>I am still trying to understand what is going on here.</p>",
        "id": 367833926,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1687248011
    },
    {
        "content": "<p><code>List.get</code> is a dependent function, it has the type <code>List.get (l : List A) (i : Fin l.length) : A</code>. That means that you can't rewrite <code>l</code> without making whatever expression is in for <code>i</code> ill-typed</p>",
        "id": 367834289,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1687248090
    },
    {
        "content": "<p>there are ways to handle these kinds of situations, but when possible it's usually easier to swap it for a non-dependent function, here <code>List.get? (l : List A) (i : Nat) : Option A</code>, since this decouples <code>l</code> and <code>i</code> and makes it possible to rewrite them separately</p>",
        "id": 367834667,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1687248166
    },
    {
        "content": "<p>Now things break with:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">match_does_not_fold_away3</span> <span class=\"o\">:</span> <span class=\"n\">List.get</span> <span class=\"o\">((</span><span class=\"n\">Bitvec.ofInt</span> <span class=\"n\">w</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">toList</span><span class=\"o\">)</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">true</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">Option.some_inj</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">List.get</span><span class=\"bp\">?</span><span class=\"n\">_eq_get</span><span class=\"o\">]</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">Bitvec.ofInt</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 367835354,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1687248315
    },
    {
        "content": "<p>Meaning, it again does not fold away.</p>",
        "id": 367835385,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1687248326
    },
    {
        "content": "<p>(when introducing <code>w</code>)</p>",
        "id": 367835419,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1687248336
    },
    {
        "content": "<p>Let me think about your reply for a moment.</p>",
        "id": 367835456,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1687248344
    },
    {
        "content": "<p>ah, now you can apply my first suggestion</p>",
        "id": 367835593,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1687248365
    },
    {
        "content": "<p>I think <code>simp</code> was getting the <code>1, -1</code> case simply by <code>decide</code>, it wasn't actually unfolding the match</p>",
        "id": 367835712,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1687248396
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">succ</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"n\">Int.succ</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">Int.negSucc</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">match_does_not_fold_away3</span> <span class=\"o\">:</span> <span class=\"n\">List.get</span> <span class=\"o\">((</span><span class=\"n\">Bitvec.ofInt</span> <span class=\"n\">w</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">toList</span><span class=\"o\">)</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">true</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">succ</span><span class=\"o\">]</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">Option.some_inj</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">List.get</span><span class=\"bp\">?</span><span class=\"n\">_eq_get</span><span class=\"o\">]</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">succ</span><span class=\"o\">]</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">Bitvec.ofInt</span><span class=\"o\">,</span> <span class=\"n\">succ</span><span class=\"o\">]</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">succ</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 367836312,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1687248547
    },
    {
        "content": "<p>yeah that one doesn't seem to work, but the <code>show -1 = negSucc 0 by rfl</code> one does</p>",
        "id": 367836429,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1687248575
    },
    {
        "content": "<p><code>-1</code> is actually <code>Neg.neg (OfNat.ofNat 1 : Int)</code> which doesn't quite match the LHS of that <code>succ</code> theorem</p>",
        "id": 367836708,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1687248623
    },
    {
        "content": "<p>you could use</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">neg_ofNat_succ</span> <span class=\"o\">:</span> <span class=\"bp\">-</span><span class=\"n\">OfNat.ofNat</span> <span class=\"o\">(</span><span class=\"n\">Nat.succ</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">Int.negSucc</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>\n<p>but it's a pretty contrived lemma</p>",
        "id": 367837144,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1687248710
    },
    {
        "content": "<p>OK. I guess I can make progress now. That is nice. Thank you.</p>",
        "id": 367837884,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1687248885
    },
    {
        "content": "<p>Now I need to proof:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">w</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span>\n<span class=\"n\">i</span><span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"o\">(</span><span class=\"n\">List.length</span> <span class=\"o\">(</span><span class=\"n\">Vector.toList</span> <span class=\"o\">(</span><span class=\"n\">Bitvec.ofInt</span> <span class=\"n\">w</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">))))</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">List.get</span><span class=\"bp\">?</span> <span class=\"o\">(</span><span class=\"n\">Vector.toList</span> <span class=\"o\">(</span><span class=\"n\">Bitvec.not</span> <span class=\"o\">(</span><span class=\"n\">Bitvec.ofNat</span> <span class=\"n\">w</span> <span class=\"mi\">0</span><span class=\"o\">)))</span> <span class=\"bp\">↑</span><span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">some</span> <span class=\"n\">true</span>\n</code></pre></div>\n<p>I have no proof strategy yet, but will play a little. Thank you so much. That was super helpful.</p>",
        "id": 367838095,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1687248932
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">match_does_not_fold_away</span> <span class=\"o\">:</span> <span class=\"n\">List.get</span> <span class=\"o\">((</span><span class=\"n\">Bitvec.ofInt</span> <span class=\"n\">w</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">toList</span><span class=\"o\">)</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">true</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">Option.some_inj</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">List.get</span><span class=\"bp\">?</span><span class=\"n\">_eq_get</span><span class=\"o\">]</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">Bitvec.ofInt</span><span class=\"o\">,</span> <span class=\"k\">show</span> <span class=\"bp\">-</span><span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">Int.negSucc</span> <span class=\"mi\">0</span> <span class=\"kd\">by</span> <span class=\"n\">rfl</span><span class=\"o\">,</span> <span class=\"n\">Bitvec.not</span><span class=\"o\">]</span>\n  <span class=\"k\">have</span> <span class=\"n\">H1</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">Bitvec.ofNat</span> <span class=\"n\">n</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"n\">Vector.replicate</span> <span class=\"n\">n</span> <span class=\"n\">false</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">H1</span><span class=\"o\">,</span> <span class=\"n\">Vector.replicate</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">List.get</span><span class=\"bp\">?</span><span class=\"n\">_eq_get</span><span class=\"o\">,</span> <span class=\"n\">List.get_replicate</span><span class=\"o\">]</span>\n  <span class=\"n\">simpa</span> <span class=\"n\">using</span> <span class=\"n\">i.2</span>\n</code></pre></div>",
        "id": 367844555,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1687250360
    },
    {
        "content": "<p>I was surprised not to find H1 in mathlib</p>",
        "id": 367844676,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1687250381
    }
]