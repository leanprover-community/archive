[
    {
        "content": "<p>Why is <code>rw ← b_ih_h,</code> here failing? </p>\n<div class=\"codehilite\"><pre><span></span>rewrite tactic failed, lemma lhs is a metavariable\nstate:\na b_n b_ih_w : mynat,\nb_ih_h : b_n + succ b_ih_w = a\n⊢ a = succ b_n + b_ih_w\n</pre></div>",
        "id": 192156408,
        "sender_full_name": "Jiekai",
        "timestamp": 1585457189
    },
    {
        "content": "<p>because rw is stupid</p>",
        "id": 192156420,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585457268
    },
    {
        "content": "<p>try <code>rw b_ih_h.symm</code></p>",
        "id": 192156421,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585457276
    },
    {
        "content": "<p>Worked! so many tricks</p>",
        "id": 192156477,
        "sender_full_name": "Jiekai",
        "timestamp": 1585457349
    },
    {
        "content": "<p>What's the difference between <code>symm</code> and <code> ← </code>?</p>",
        "id": 192156568,
        "sender_full_name": "Jiekai",
        "timestamp": 1585457568
    },
    {
        "content": "<p>In theory, nothing</p>",
        "id": 192164938,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585473689
    },
    {
        "content": "<p>I am surprised the arrow didn't work</p>",
        "id": 192164943,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585473703
    },
    {
        "content": "<p>The reason is because the rewrite tactic is explicitly checking that the lhs is not a variable. The idea here is that if you rewrite with something that matches any term, you will not get a useful result. This check is wrong for two reasons: (1) the variable is not a metavariable, and even if it was that might still be a reasonable thing to do if the type of the variable is constraining enough; and (2) it's always the lhs, not the rhs, even if you use <code>&lt;-</code>.</p>",
        "id": 192168915,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585480347
    },
    {
        "content": "<p>Isn't at least point 2) something that could change in Lean 3.8?</p>",
        "id": 192168937,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1585480409
    },
    {
        "content": "<p>both could be fixed in lean 3.8</p>",
        "id": 192169657,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585481481
    },
    {
        "content": "<p>There is nothing wrong with the algorithm, there is just a check that throws an exception. Delete the check and everything else should work</p>",
        "id": 192169676,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585481521
    },
    {
        "content": "<p>I meant that point 2) sounds like a plain <em>bug</em>, whereas point 1) is debatable.</p>",
        "id": 192169714,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1585481524
    },
    {
        "content": "<p>I think that the part of 1) about not matching variables that are not metavariables / universally quantified variables is also a bug. For example in the example above, we are rewriting with an equality in the context, which can only match <code>a</code>, not anything else with the same type as <code>a</code></p>",
        "id": 192170139,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585482191
    },
    {
        "content": "<p>The only time the error is reasonable is if you are rewriting with <code>\\forall x, x = ...</code>, so that the pattern can match any term</p>",
        "id": 192170192,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585482254
    }
]