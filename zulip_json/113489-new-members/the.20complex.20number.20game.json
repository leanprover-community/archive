[
    {
        "content": "<p>Have you done the natural number game? Can you prove complex conjugation is a ring homomorphism? </p>\n<p>Link to Lean web editor (takes a long time to load, honestly I'd leave it on \"lean is busy\" for at least 1 minute before concluding something is wrong):</p>\n<p><a href=\"https://tinyurl.com/thecomplexnumbergame\" title=\"https://tinyurl.com/thecomplexnumbergame\">https://tinyurl.com/thecomplexnumbergame</a></p>\n<p><a href=\"https://github.com/kbuzzard/xena/blob/master/Mathematics_In_Lean_ideas/complex.lean\" title=\"https://github.com/kbuzzard/xena/blob/master/Mathematics_In_Lean_ideas/complex.lean\">Source</a>  (cut and paste this into any Lean project which uses mathlib and you won't have to wait 1 minute) </p>\n<p><a href=\"https://github.com/kbuzzard/xena/blob/master/Mathematics_In_Lean_ideas/complex_solns.lean\" title=\"https://github.com/kbuzzard/xena/blob/master/Mathematics_In_Lean_ideas/complex_solns.lean\">Solutions</a></p>\n<p>This is part of a book I'm writing with Jeremy, Rob and Patrick. All comments from mathematicians welcome!</p>",
        "id": 197051594,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589112504
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">structure</span> <span class=\"n\">complex</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">re</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">im</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n</code></pre></div>\n\n\n<p>Is the code above roughly equivalent to the Haskell:</p>\n<div class=\"codehilite\"><pre><span></span><code> <span class=\"n\">data</span> <span class=\"n\">Complex</span> <span class=\"bp\">=</span> <span class=\"n\">C</span> <span class=\"n\">Real</span> <span class=\"n\">Real</span>\n</code></pre></div>",
        "id": 197052351,
        "sender_full_name": "Aniruddh Agarwal",
        "timestamp": 1589113434
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"294709\">Aniruddh Agarwal</span> <a href=\"#narrow/stream/113489-new-members/topic/the.20complex.20number.20game/near/197052351\" title=\"#narrow/stream/113489-new-members/topic/the.20complex.20number.20game/near/197052351\">said</a>:</p>\n<blockquote>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">structure</span> <span class=\"n\">complex</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">re</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">im</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n</code></pre></div>\n\n\n<p>Is the code above roughly equivalent to the Haskell:</p>\n<div class=\"codehilite\"><pre><span></span><code> <span class=\"n\">data</span> <span class=\"n\">Complex</span> <span class=\"bp\">=</span> <span class=\"n\">C</span> <span class=\"n\">Real</span> <span class=\"n\">Real</span>\n</code></pre></div>\n\n\n</blockquote>\n<p>Basically, but the fields are named in Lean whereas you haven't named them in the Haskell.</p>",
        "id": 197053004,
        "sender_full_name": "Patrick Stevens",
        "timestamp": 1589114053
    }
]