[
    {
        "content": "<p>Hi guys! A newcomer to Lean4 here! I wonder if there is a tactic in Lean4 that can simplify h₁ and the goal in the following example immediately? I found myself cannot move on without using the \"congr\" tactic...</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- Lean4</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Real.Basic</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kn\">section</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"n\">e</span> <span class=\"n\">f</span><span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">c</span> <span class=\"bp\">→</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"bp\">+</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n<span class=\"o\">{</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"o\">}</span>\n</code></pre></div>",
        "id": 376004380,
        "sender_full_name": "Louis Liu",
        "timestamp": 1689596995
    },
    {
        "content": "<p>you could try <code>cancel_denoms at h₁</code>  or <code>field_simp at h₁</code></p>",
        "id": 376005276,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1689597175
    },
    {
        "content": "<p>It looks a bit like you are using quite a lean 3 style syntax with lean 4 though, using the brackets around sorry, this isn't needed anymore</p>",
        "id": 376005659,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1689597243
    },
    {
        "content": "<p>It works! Thank you so much!</p>",
        "id": 376027062,
        "sender_full_name": "Louis Liu",
        "timestamp": 1689601038
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"617128\">Deep0Thinking</span> has marked this topic as resolved.</p>",
        "id": 376621409,
        "sender_full_name": "Notification Bot",
        "timestamp": 1689764770
    }
]