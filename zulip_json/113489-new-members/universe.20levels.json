[
    {
        "content": "<p>Hello, can you help me understanding universe levels?<br>\nI am working on the lemma</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">dual_dim_eq</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">B</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">dim</span> <span class=\"n\">K</span> <span class=\"n\">V</span> <span class=\"bp\">=</span> <span class=\"n\">dim</span> <span class=\"n\">K</span> <span class=\"o\">(</span><span class=\"n\">dual</span> <span class=\"n\">K</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n</pre></div>\n\n\n<p>(<code>B</code> being a basis of the finite dimensional <code>K</code>-vectorspace <code>V</code>)<br>\nwhich produces the error</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">type</span> <span class=\"n\">mismatch</span> <span class=\"n\">at</span> <span class=\"n\">application</span>\n  <span class=\"n\">dim</span> <span class=\"n\">K</span> <span class=\"o\">(</span><span class=\"n\">dual</span> <span class=\"n\">K</span> <span class=\"n\">V</span><span class=\"o\">)</span>\n<span class=\"n\">term</span>\n  <span class=\"n\">dual</span> <span class=\"n\">K</span> <span class=\"n\">V</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">u_2</span> <span class=\"n\">u_1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"o\">(</span><span class=\"n\">u_2</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">u_1</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">))</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"kt\">Type</span> <span class=\"n\">u_2</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">u_2</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span>\n</pre></div>\n\n\n<p>The problem is that <code>dual := V →ₗ[K] K</code> produces a type necessarily over the universe levels of <code>K</code> and <code>V</code>, whereas <code>vector_space.dim</code> works with a universe level of the vector space which is independent of the one of <code>K</code>.<br>\nHow does Lean deal with such situations?<br>\nAnd can I read up on universe levels anywhere more thoroughly?</p>",
        "id": 162252444,
        "sender_full_name": "Fabian Glöckle",
        "timestamp": 1554134504
    },
    {
        "content": "<p>I'm not sure this should be happening. Hmm.</p>",
        "id": 162252920,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1554134805
    },
    {
        "content": "<p>Can you post a minimum working example -- something which compiles and which I can just cut and paste? All imports included etc.</p>",
        "id": 162252981,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1554134868
    },
    {
        "content": "<p>Is there a coercion to higher universe levels? If I change the two sides of the equality statement of the lemma, I get</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">type</span> <span class=\"n\">mismatch</span> <span class=\"n\">at</span> <span class=\"n\">application</span>\n  <span class=\"n\">dim</span> <span class=\"n\">K</span> <span class=\"n\">V</span>\n<span class=\"n\">term</span>\n  <span class=\"n\">V</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"kt\">Type</span> <span class=\"n\">u_2</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">u_2</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">u_2</span> <span class=\"n\">u_1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">((</span><span class=\"n\">max</span> <span class=\"n\">u_2</span> <span class=\"n\">u_1</span><span class=\"o\">)</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 162252994,
        "sender_full_name": "Fabian Glöckle",
        "timestamp": 1554134880
    },
    {
        "content": "<p>Can you point me to the definition of <code>dim</code>?</p>",
        "id": 162253066,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1554134906
    },
    {
        "content": "<p><code>vector_space.dim</code> in <code>linear_algebra.dimension</code></p>",
        "id": 162253109,
        "sender_full_name": "Fabian Glöckle",
        "timestamp": 1554134948
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">dim</span> <span class=\"o\">:</span>\n  <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_2</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"bp\">_</span><span class=\"n\">inst_1</span> <span class=\"o\">:</span> <span class=\"n\">discrete_field</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"bp\">_</span><span class=\"n\">inst_2</span> <span class=\"o\">:</span> <span class=\"n\">add_comm_group</span> <span class=\"n\">β</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"bp\">_</span><span class=\"n\">inst_3</span> <span class=\"o\">:</span> <span class=\"n\">vector_space</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">],</span> <span class=\"n\">cardinal</span>\n</pre></div>\n\n\n<p>This looks fine to me -- there's no reason K and V have to be in the same universe.</p>",
        "id": 162253250,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1554135047
    },
    {
        "content": "<p>The issue is I guess the cardinals being in different universes.</p>",
        "id": 162253298,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1554135090
    },
    {
        "content": "<p>You could use <code>cardinal.lift</code></p>",
        "id": 162253331,
        "sender_full_name": "Reid Barton",
        "timestamp": 1554135122
    },
    {
        "content": "<p>Or you could turn the cardinal into a natural number before you ask about the equality.</p>",
        "id": 162253403,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1554135157
    },
    {
        "content": "<p>I've never used cardinals in Lean, I am not much help.</p>",
        "id": 162253432,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1554135174
    },
    {
        "content": "<p>The cardinal lift was what I was looking for (I did not know they depended on universes, but of course that makes much sense). Thank you all for the quick help!</p>",
        "id": 162253929,
        "sender_full_name": "Fabian Glöckle",
        "timestamp": 1554135513
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">structure</span> <span class=\"n\">B</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"n\">B</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"c1\">-- B : Type (u+1)</span>\n</pre></div>",
        "id": 170699022,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1562913956
    },
    {
        "content": "<p>Why isn't it <code>B : Type u</code>?</p>",
        "id": 170699024,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1562913961
    },
    {
        "content": "<p>what does the projection looking '.{u}' mean?</p>",
        "id": 170699266,
        "sender_full_name": "Ken Lee",
        "timestamp": 1562914239
    },
    {
        "content": "<p>it's specifying the universe parameters</p>",
        "id": 170699299,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1562914284
    },
    {
        "content": "<p>Uh... so the universe that C is supposed to be in?</p>",
        "id": 170699478,
        "sender_full_name": "Ken Lee",
        "timestamp": 1562914462
    },
    {
        "content": "<p>right</p>",
        "id": 170699779,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1562914871
    },
    {
        "content": "<p>This is why.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">set_theory</span><span class=\"bp\">.</span><span class=\"n\">schroeder_bernstein</span>\n\n<span class=\"kn\">universe</span> <span class=\"n\">u</span>\n\n<span class=\"kn\">structure</span> <span class=\"n\">B</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"n\">mpr_injective</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">Sort</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">=</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">function</span><span class=\"bp\">.</span><span class=\"n\">injective</span> <span class=\"o\">(</span><span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"n\">mpr</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">cases</span> <span class=\"n\">h</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">id</span>\n\n<span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">inhabited</span> <span class=\"n\">B</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨⟨</span><span class=\"n\">pempty</span><span class=\"bp\">⟩⟩</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">function</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">B</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"err\">↪</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">false</span> <span class=\"o\">:=</span>\n<span class=\"k\">let</span> <span class=\"n\">g</span> <span class=\"o\">:=</span> <span class=\"n\">B</span><span class=\"bp\">.</span><span class=\"n\">C</span> <span class=\"err\">∘</span> <span class=\"n\">inv_fun</span> <span class=\"n\">f</span> <span class=\"k\">in</span>\n<span class=\"k\">have</span> <span class=\"n\">hg</span> <span class=\"o\">:</span> <span class=\"n\">surjective</span> <span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"k\">from</span>\n  <span class=\"n\">surjective_comp</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"n\">B</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"bp\">⟩</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">inv_fun_surjective</span> <span class=\"n\">f</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">),</span>\n<span class=\"k\">let</span> <span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"o\">:=</span> <span class=\"n\">sigma</span> <span class=\"n\">g</span> <span class=\"k\">in</span>\n<span class=\"k\">let</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">some</span> <span class=\"o\">(</span><span class=\"n\">hg</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">))</span> <span class=\"k\">in</span>\n<span class=\"k\">have</span> <span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">g</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">),</span> <span class=\"k\">from</span> <span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">some_spec</span> <span class=\"o\">(</span><span class=\"n\">hg</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">)),</span>\n<span class=\"n\">cantor_injective</span> <span class=\"o\">(</span><span class=\"k\">show</span> <span class=\"n\">set</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"bp\">λ</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"n\">ha</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">s</span><span class=\"bp\">⟩</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"bp\">*;</span> <span class=\"n\">exact</span> <span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"n\">mpr_injective</span> <span class=\"bp\">_</span> <span class=\"n\">h</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 170700159,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1562915344
    },
    {
        "content": "<p>thanks</p>",
        "id": 170700270,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1562915477
    },
    {
        "content": "<p>You can prove the well ordering theorem using this idea, provided you already know cardinals are well ordered.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">parameter</span> <span class=\"o\">{</span><span class=\"n\">σ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span>\n<span class=\"kn\">open</span> <span class=\"n\">function</span>\n\n<span class=\"n\">noncomputable</span> <span class=\"kn\">lemma</span> <span class=\"n\">embedding_to_cardinal</span> <span class=\"o\">:</span> <span class=\"n\">σ</span> <span class=\"err\">↪</span> <span class=\"n\">cardinal</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">:=</span>\n<span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">choice</span> <span class=\"err\">$</span> <span class=\"n\">embedding</span><span class=\"bp\">.</span><span class=\"n\">total</span><span class=\"bp\">.</span><span class=\"n\">resolve_left</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"bp\">⟨⟨</span><span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">hf</span><span class=\"bp\">⟩⟩</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">σ</span> <span class=\"bp\">→</span> <span class=\"n\">cardinal</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"n\">inv_fun</span> <span class=\"n\">f</span> <span class=\"k\">in</span>\n  <span class=\"k\">let</span> <span class=\"bp\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">g</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"err\">^</span> <span class=\"n\">sum</span> <span class=\"n\">g</span><span class=\"o\">)</span><span class=\"bp\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">inv_fun_surjective</span> <span class=\"n\">hf</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"err\">^</span> <span class=\"n\">sum</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"k\">in</span>\n  <span class=\"k\">have</span> <span class=\"n\">g</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">sum</span> <span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">le_sum</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">g</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"n\">not_le_of_gt</span> <span class=\"o\">(</span><span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"n\">hx</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">cantor</span> <span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"n\">this</span>\n\n<span class=\"c\">/-</span><span class=\"cm\">- The relation whose existence is given by the well-ordering theorem -/</span>\n<span class=\"n\">def</span> <span class=\"n\">well_ordering_rel</span> <span class=\"o\">:</span> <span class=\"n\">σ</span> <span class=\"bp\">→</span> <span class=\"n\">σ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"n\">embedding_to_cardinal</span> <span class=\"bp\">⁻¹</span><span class=\"err\">&#39;</span><span class=\"n\">o</span> <span class=\"o\">(</span><span class=\"bp\">&lt;</span><span class=\"o\">)</span>\n\n<span class=\"kn\">instance</span> <span class=\"n\">well_ordering_rel</span><span class=\"bp\">.</span><span class=\"n\">is_well_order</span> <span class=\"o\">:</span> <span class=\"n\">is_well_order</span> <span class=\"n\">σ</span> <span class=\"n\">well_ordering_rel</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">order_embedding</span><span class=\"bp\">.</span><span class=\"n\">preimage</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">is_well_order</span>\n</pre></div>",
        "id": 170700486,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1562915754
    }
]