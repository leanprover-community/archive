[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.Group.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.GroupTheory.Subgroup.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Real.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.SetTheory.Cardinal.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.SetTheory.Cardinal.Finite</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Complex.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.GroupTheory.Subgroup.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.Hom.Group</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Analysis.Normed.Group.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Init.Function</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.GroupTheory.OrderOfElement</span>\n\n<span class=\"sd\">/-- have h1 : ∃ n : Nat , ‖(x : ℂ) ^ n‖ = 1 := by</span>\n<span class=\"sd\">    by_contra h'</span>\n<span class=\"sd\">    simp at h'</span>\n<span class=\"sd\">    apply?</span>\n<span class=\"sd\">  have h2 :∃ n : Nat , ‖(x : ℂ)‖^n = 1 := by</span>\n<span class=\"sd\">    sorry</span>\n<span class=\"sd\">  have h3 :‖(x : ℂ)‖ = 1 := by</span>\n<span class=\"sd\">    sorry</span>\n<span class=\"sd\">  exact h3</span>\n<span class=\"sd\">  -/</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span> <span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">finite_g</span> <span class=\"o\">:</span> <span class=\"n\">Finite</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"bp\">→*</span> <span class=\"o\">(</span><span class=\"n\">Units</span> <span class=\"n\">ℂ</span><span class=\"o\">)))</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">‖</span><span class=\"o\">((</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span><span class=\"bp\">‖</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n\n  <span class=\"k\">have</span> <span class=\"n\">h0</span> <span class=\"o\">(</span><span class=\"n\">u</span><span class=\"o\">:</span><span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">Complex.normSq</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">‖</span><span class=\"n\">u</span><span class=\"bp\">‖</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">simp</span>\n    <span class=\"n\">exact</span> <span class=\"n\">Complex.normSq_eq_abs</span> <span class=\"n\">u</span>\n\n  <span class=\"k\">have</span> <span class=\"n\">h1</span> <span class=\"o\">(</span><span class=\"n\">v</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span><span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">j0</span> <span class=\"o\">:</span> <span class=\"n\">v</span> <span class=\"bp\">≥</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">j1</span><span class=\"o\">:</span> <span class=\"n\">n</span><span class=\"bp\">&gt;</span><span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">j2</span><span class=\"o\">:</span><span class=\"n\">v</span><span class=\"bp\">^</span><span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">v</span><span class=\"bp\">=</span><span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">by_contra</span> <span class=\"n\">h</span>\n    <span class=\"n\">rcases</span> <span class=\"n\">lt_or_gt_of_ne</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"n\">hlt</span> <span class=\"bp\">|</span> <span class=\"n\">hgt</span>\n    <span class=\"k\">have</span> <span class=\"n\">h_pow_lt_one</span> <span class=\"o\">:</span> <span class=\"n\">v</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">one_pow</span> <span class=\"n\">n</span><span class=\"o\">]</span>\n      <span class=\"n\">exact</span> <span class=\"n\">pow_lt_pow_of_lt_left</span> <span class=\"n\">hlt</span> <span class=\"n\">j0</span> <span class=\"n\">j1</span>\n    <span class=\"k\">have</span> <span class=\"n\">h_neq_one</span> <span class=\"o\">:</span> <span class=\"n\">v</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"bp\">≠</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n      <span class=\"n\">exact</span> <span class=\"n\">LT.lt.ne</span> <span class=\"n\">h_pow_lt_one</span>\n    <span class=\"n\">exact</span> <span class=\"n\">h_neq_one</span> <span class=\"n\">j2</span>\n    <span class=\"k\">have</span> <span class=\"n\">one_lt_v</span><span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">&lt;</span> <span class=\"n\">v</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n      <span class=\"n\">exact</span> <span class=\"n\">hgt</span>\n\n    <span class=\"k\">have</span> <span class=\"n\">h_pow_gt_one</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">&lt;</span> <span class=\"n\">v</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">one_pow</span> <span class=\"n\">n</span><span class=\"o\">]</span>\n      <span class=\"n\">apply</span> <span class=\"n\">pow_lt_pow_of_lt_left</span> <span class=\"n\">one_lt_v</span>\n      <span class=\"n\">exact</span> <span class=\"n\">zero_le_one</span>\n      <span class=\"n\">exact</span> <span class=\"n\">j1</span>\n\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">j2</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h_pow_gt_one</span>\n    <span class=\"n\">apply</span> <span class=\"n\">ne_of_lt</span> <span class=\"n\">h_pow_gt_one</span>\n    <span class=\"n\">rfl</span>\n\n  <span class=\"k\">have</span> <span class=\"n\">h2</span> <span class=\"o\">(</span><span class=\"n\">u</span><span class=\"o\">:</span><span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"n\">Complex.normSq</span> <span class=\"n\">u</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">‖</span><span class=\"n\">u</span><span class=\"bp\">‖</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h0</span><span class=\"o\">]</span>\n    <span class=\"n\">intro</span> <span class=\"n\">u2_1</span>\n    <span class=\"n\">apply</span> <span class=\"n\">h1</span> <span class=\"bp\">‖</span><span class=\"n\">u</span><span class=\"bp\">‖</span> <span class=\"mi\">2</span>\n    <span class=\"n\">exact</span> <span class=\"n\">norm_nonneg</span> <span class=\"n\">u</span>\n    <span class=\"n\">exact</span> <span class=\"n\">Nat.succ_pos</span> <span class=\"mi\">1</span>\n    <span class=\"n\">apply</span> <span class=\"n\">u2_1</span>\n  <span class=\"n\">apply</span> <span class=\"n\">h2</span>\n\n  <span class=\"k\">have</span> <span class=\"n\">h3</span> <span class=\"o\">(</span><span class=\"n\">u</span><span class=\"o\">:</span><span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">v</span><span class=\"o\">:</span><span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">u</span><span class=\"bp\">*</span><span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">exact</span> <span class=\"n\">MonoidHom.map_mul</span> <span class=\"n\">f</span> <span class=\"n\">u</span> <span class=\"n\">v</span>\n\n  <span class=\"k\">have</span> <span class=\"n\">h4</span> <span class=\"o\">(</span><span class=\"n\">u</span><span class=\"o\">:</span><span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">v</span><span class=\"o\">:</span><span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Complex.normSq</span> <span class=\"o\">(</span><span class=\"n\">u</span><span class=\"bp\">*</span><span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">Complex.normSq</span> <span class=\"o\">(</span><span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">Complex.normSq</span> <span class=\"o\">(</span><span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">exact</span> <span class=\"n\">Complex.normSq_mul</span> <span class=\"n\">u</span> <span class=\"n\">v</span>\n\n  <span class=\"k\">have</span> <span class=\"n\">h5</span> <span class=\"o\">(</span><span class=\"n\">u</span><span class=\"o\">:</span><span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">v</span><span class=\"o\">:</span><span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Complex.normSq</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">u</span><span class=\"bp\">*</span><span class=\"n\">v</span><span class=\"o\">):</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">Complex.normSq</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">u</span><span class=\"o\">):</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">Complex.normSq</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">v</span><span class=\"o\">):</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h3</span><span class=\"o\">]</span>\n    <span class=\"n\">simp</span>\n\n  <span class=\"k\">have</span> <span class=\"n\">h6</span><span class=\"o\">:</span> <span class=\"n\">Complex.normSq</span> <span class=\"o\">((</span><span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"n\">G</span><span class=\"o\">)):</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">simp</span>\n\n  <span class=\"k\">have</span> <span class=\"n\">h8</span><span class=\"o\">:</span> <span class=\"n\">IsOfFinOrder</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">exact</span> <span class=\"n\">exists_pow_eq_one</span> <span class=\"n\">x</span>\n\n  <span class=\"k\">have</span> <span class=\"n\">h9</span><span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"o\">((</span><span class=\"n\">n</span><span class=\"bp\">&gt;</span><span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">∧</span>  <span class=\"n\">x</span><span class=\"bp\">^</span><span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">exact</span> <span class=\"n\">Iff.mp</span> <span class=\"o\">(</span><span class=\"n\">isOfFinOrder_iff_pow_eq_one</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">h8</span>\n\n  <span class=\"k\">have</span> <span class=\"n\">h10</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">):</span> <span class=\"o\">(</span><span class=\"n\">Complex.normSq</span> <span class=\"o\">((</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"bp\">^</span><span class=\"n\">n</span><span class=\"o\">):</span><span class=\"n\">ℂ</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">Complex.normSq</span> <span class=\"o\">((</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">):</span><span class=\"n\">ℂ</span><span class=\"o\">))</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">induction</span> <span class=\"n\">n</span>\n    <span class=\"n\">simp</span>\n    <span class=\"n\">simp</span>\n  <span class=\"n\">apply</span> <span class=\"n\">h9</span> <span class=\"n\">at</span> <span class=\"n\">h10</span>\n  <span class=\"n\">apply</span> <span class=\"n\">h6</span> <span class=\"n\">at</span> <span class=\"n\">h10</span>\n  <span class=\"n\">apply</span> <span class=\"n\">h1</span> <span class=\"n\">at</span> <span class=\"n\">h10</span>\n  <span class=\"n\">exact</span> <span class=\"n\">h10</span>\n</code></pre></div>\n<p>The last four commands I wrote are wrong, does anyone know how to correctly use those propositions I wrote earlier?</p>",
        "id": 377968932,
        "sender_full_name": "tsuki  hao",
        "timestamp": 1690165439
    },
    {
        "content": "<p><code>apply</code> is used only in the highly specific case where the goal is of the form <code>B</code> and <code>h</code> has type <code>A → B</code> (or something similar to it). So <code>apply h2</code> works because it is an implication, but the rest of the <code>apply</code>s would not work.</p>\n<p>To use a hypothesis of the form <code>h : a = b</code> you should do <code>rw [h]</code> or <code>rw [←h]</code> or <code>rw [h] at something</code> (I think this would apply to <code>h1</code> and <code>h6</code> in your example.)</p>\n<p>Using <code>h9</code> is a bit more difficult but you could first do <code>rcases h9 with ⟨k, hk⟩</code> to go from <code>∃ (n : ℕ), ((n&gt;0) ∧  x^n = 1)</code> to an actual number <code>k : ℕ</code> and a proof that <code>k &gt; 0 ∧  x ^ k = 1</code> (This might not be the most idiomatic way to do it in Lean 4). Then you can do <code>specialize h10 k</code> to go from <code>∀ (n : ℕ), ↑Complex.normSq ↑(↑f x ^ n) = ↑Complex.normSq ↑(↑f x) ^ n</code> to <code>↑Complex.normSq ↑(↑f x ^ k) = ↑Complex.normSq ↑(↑f x) ^ k</code></p>",
        "id": 377973712,
        "sender_full_name": "Niels Voss",
        "timestamp": 1690167703
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"521331\">Niels Voss</span> <a href=\"#narrow/stream/113489-new-members/topic/How.20to.20use.20my.20own.20proposition/near/377973712\">said</a>:</p>\n<blockquote>\n<p><code>apply</code> is used only in the highly specific case where the goal is of the form <code>B</code> and <code>h</code> has type <code>A → B</code> (or something similar to it). So <code>apply h2</code> works because it is an implication, but the rest of the <code>apply</code>s would not work.</p>\n<p>To use a hypothesis of the form <code>h : a = b</code> you should do <code>rw [h]</code> or <code>rw [←h]</code> or <code>rw [h] at something</code> (I think this would apply to <code>h1</code> and <code>h6</code> in your example.)</p>\n<p>Using <code>h9</code> is a bit more difficult but you could first do <code>rcases h9 with ⟨k, hk⟩</code> to go from <code>∃ (n : ℕ), ((n&gt;0) ∧  x^n = 1)</code> to an actual number <code>k : ℕ</code> and a proof that <code>k &gt; 0 ∧  x ^ k = 1</code> (This might not be the most idiomatic way to do it in Lean 4). Then you can do <code>specialize h10 k</code> to go from <code>∀ (n : ℕ), ↑Complex.normSq ↑(↑f x ^ n) = ↑Complex.normSq ↑(↑f x) ^ n</code> to <code>↑Complex.normSq ↑(↑f x ^ k) = ↑Complex.normSq ↑(↑f x) ^ k</code></p>\n</blockquote>\n<p>I changed the last four sentences of code to this according to your prompt, but I encountered a difficulty that I couldn’t execute rw. I would like to ask if my rw syntax is wrong or should I use other strategies here?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">rcases</span> <span class=\"n\">h9</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"o\">⟨</span> <span class=\"n\">npos</span><span class=\"o\">,</span> <span class=\"n\">xpoweq</span><span class=\"o\">⟩</span> <span class=\"o\">⟩</span>\n  <span class=\"n\">specialize</span> <span class=\"n\">h10</span> <span class=\"n\">n</span>\n  <span class=\"n\">rw</span><span class=\"o\">[</span><span class=\"n\">xpoweq</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h10</span>\n</code></pre></div>",
        "id": 377976345,
        "sender_full_name": "tsuki  hao",
        "timestamp": 1690168882
    },
    {
        "content": "<p>are your tactics aligned? That will be misinterpreted otherwise</p>",
        "id": 377976788,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1690169088
    },
    {
        "content": "<p><code>rcases</code> doesn't create new goals in this case (because <code>Exists</code> has only one constructor) so <code>specialize</code> and <code>rw</code> should be indented to the same level as <code>rcases</code></p>",
        "id": 377977440,
        "sender_full_name": "Niels Voss",
        "timestamp": 1690169404
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"521331\">Niels Voss</span> <a href=\"#narrow/stream/113489-new-members/topic/How.20to.20use.20my.20own.20proposition/near/377977440\">said</a>:</p>\n<blockquote>\n<p><code>rcases</code> doesn't create new goals in this case (because <code>Exists</code> has only one constructor) so <code>specialize</code> and <code>rw</code> should be indented to the same level as <code>rcases</code></p>\n</blockquote>\n<p>They have been indented to the same level but still error</p>",
        "id": 377977822,
        "sender_full_name": "tsuki  hao",
        "timestamp": 1690169591
    },
    {
        "content": "<p>I don't think <code>h10</code> contains <code>x ^ n</code> anywhere, which would explain why your rewrite is failing. I see that <code>h10</code> is <code>↑Complex.normSq ↑(↑f x ^ n) = ↑Complex.normSq ↑(↑f x) ^ n</code>. If you wanted to rewrite at <code>↑f x ^ n</code>, it won't work because it is interpreted as <code>(↑f x) ^ n</code> (I've made this mistake many times).</p>",
        "id": 377978173,
        "sender_full_name": "Niels Voss",
        "timestamp": 1690169751
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"521331\">Niels Voss</span> <a href=\"#narrow/stream/113489-new-members/topic/How.20to.20use.20my.20own.20proposition/near/377978173\">said</a>:</p>\n<blockquote>\n<p>I don't think <code>h10</code> contains <code>x ^ n</code> anywhere, which would explain why your rewrite is failing. I see that <code>h10</code> is <code>↑Complex.normSq ↑(↑f x ^ n) = ↑Complex.normSq ↑(↑f x) ^ n</code>. If you wanted to rewrite at <code>↑f x ^ n</code>, it won't work because it is interpreted as <code>(↑f x) ^ n</code> (I've made this mistake many times).</p>\n</blockquote>\n<p>Thank you, I'm shocked that this is the reason, if so my proof may need to be greatly revised <span aria-label=\"smiling face with tear\" class=\"emoji emoji-1f972\" role=\"img\" title=\"smiling face with tear\">:smiling_face_with_tear:</span></p>",
        "id": 377979122,
        "sender_full_name": "tsuki  hao",
        "timestamp": 1690170156
    },
    {
        "content": "<p>Adding parenthesis to the line where <code>h10</code> is declared (changing <code>((f x^n):ℂ)</code> to <code>((f (x^n)):ℂ)</code>) seems to make the <code>rw</code> work.</p>",
        "id": 377981427,
        "sender_full_name": "Niels Voss",
        "timestamp": 1690171171
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"521331\">Niels Voss</span> <a href=\"#narrow/stream/113489-new-members/topic/How.20to.20use.20my.20own.20proposition/near/377981427\">said</a>:</p>\n<blockquote>\n<p>Adding parenthesis to the line where <code>h10</code> is declared (changing <code>((f x^n):ℂ)</code> to <code>((f (x^n)):ℂ)</code>) seems to make the <code>rw</code> work.</p>\n</blockquote>\n<p>Thank you very much!</p>",
        "id": 378008397,
        "sender_full_name": "tsuki  hao",
        "timestamp": 1690181291
    }
]