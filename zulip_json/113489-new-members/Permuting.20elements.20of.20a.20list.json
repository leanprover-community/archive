[
    {
        "content": "<p>Given <code>l : List T</code>, how can I transpose two of its elements (or more generally, apply a permutation to <code>l</code>)? I can't find a function anywhere in the standard library or mathlib that does this.</p>",
        "id": 401927429,
        "sender_full_name": "Ben Whitmore",
        "timestamp": 1699949208
    },
    {
        "content": "<p>Are you searching for a function that can be executed?</p>\n<p>As for formulation, what list permutations are, <code>Mathlib.Data.List.Perm</code> defines them as follows...<br>\nIf <code>s</code> and <code>t</code> are lists of the same type, then <code>s ~ t</code> denotes that <code>s</code> is a permutation of <code>t</code><br>\nwhere <code>~</code> is a binary relation defined by the following four rules:<br>\n• empty list is a permutation of empty list: <code>[] ~ []</code><br>\n• if <code>a</code> is an element and <code>x</code> and <code>y</code> are lists such that <code>x ~ y</code> then we have: <code>a :: x ~ a :: y</code><br>\n• if <code>a</code> and <code>b</code> are elements and <code>x</code> is a list then we have: <code>b :: a :: x ~ a :: b :: x</code><br>\n• if <code>x</code>, <code>y</code>, <code>z</code> are lists such that <code>x ~ y</code> and <code>y ~ z</code> then we have: <code>x ~ z</code></p>",
        "id": 401927946,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1699949406
    },
    {
        "content": "<p>Writing a function (executable) that swaps the first two elements is trivial.<br>\nHowever, if you want to write a function that applies a general permutation to a list, you first need to tell us what is the permutation term that you want to apply to the list.</p>",
        "id": 401928379,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1699949592
    },
    {
        "content": "<p>Yes I want a function that defines the action of permutations on lists, so e.g. something like <code>List.swap [9,8,7,6,5] 1 4 = [9,5,7,6,8]</code>. I saw List.Perm but it just seems to define the statement that two lists are permutations of each other.</p>",
        "id": 401928411,
        "sender_full_name": "Ben Whitmore",
        "timestamp": 1699949613
    },
    {
        "content": "<p>I didn't really want to write it myself if it's avoidable, I just assumed that this would be a basic thing that mathlib would have had for years already that I couldn't find in the documentation.</p>",
        "id": 401928538,
        "sender_full_name": "Ben Whitmore",
        "timestamp": 1699949657
    },
    {
        "content": "<p>Ah, you want a function that applies a single transposition to a list, given indices that elements should be swapped at?</p>",
        "id": 401928688,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1699949721
    },
    {
        "content": "<p>Either that, or something that permutes a list arbitrarily using an <code>Equiv.Perm Nat</code> or something</p>",
        "id": 401928830,
        "sender_full_name": "Ben Whitmore",
        "timestamp": 1699949774
    },
    {
        "content": "<p>I'm trying to implement the 15 puzzle as a list of numbers, and define moves as transpositions of pieces</p>",
        "id": 401928892,
        "sender_full_name": "Ben Whitmore",
        "timestamp": 1699949802
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"644391\">@loogle</span> (List ?a -&gt; Nat -&gt; Nat -&gt; List ?a)</p>",
        "id": 401928906,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1699949810
    },
    {
        "content": "<p><span aria-label=\"search\" class=\"emoji emoji-1f50d\" role=\"img\" title=\"search\">:search:</span> <a href=\"https://leanprover-community.github.io/mathlib4_docs/Init/Data/Repr.html#Nat.toDigitsCore\">Nat.toDigitsCore</a>, <a href=\"https://leanprover-community.github.io/mathlib4_docs/Init/Data/Array/Basic.html#Array.toListLitAux\">Array.toListLitAux</a>, and <a href=\"https://loogle.lean-lang.org/?q=%28List%20%3Fa%20-%3E%20Nat%20-%3E%20Nat%20-%3E%20List%20%3Fa%29\">5 more</a></p>",
        "id": 401928913,
        "sender_full_name": "loogle",
        "timestamp": 1699949812
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"644391\">@loogle</span> (Nat -&gt; Nat -&gt; List ?a -&gt; List ?a)</p>",
        "id": 401929068,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1699949879
    },
    {
        "content": "<p><span aria-label=\"search\" class=\"emoji emoji-1f50d\" role=\"img\" title=\"search\">:search:</span> <a href=\"https://leanprover-community.github.io/mathlib4_docs/Init/Data/Repr.html#Nat.toDigitsCore\">Nat.toDigitsCore</a>, <a href=\"https://leanprover-community.github.io/mathlib4_docs/Init/Data/Array/Basic.html#Array.toListLitAux\">Array.toListLitAux</a>, and <a href=\"https://loogle.lean-lang.org/?q=%28Nat%20-%3E%20Nat%20-%3E%20List%20%3Fa%20-%3E%20List%20%3Fa%29\">5 more</a></p>",
        "id": 401929074,
        "sender_full_name": "loogle",
        "timestamp": 1699949881
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"644391\">@loogle</span> (Equiv.Perm Nat -&gt; List ?a -&gt; List ?a)</p>",
        "id": 401929211,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1699949928
    },
    {
        "content": "<p><span aria-label=\"shrug\" class=\"emoji emoji-1f937\" role=\"img\" title=\"shrug\">:shrug:</span> nothing found</p>",
        "id": 401929213,
        "sender_full_name": "loogle",
        "timestamp": 1699949929
    },
    {
        "content": "<p>I didn't find anything.</p>",
        "id": 401929263,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1699949946
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"644391\">@loogle</span> (Equiv.Perm (Fin ?n) -&gt; List ?a -&gt; List ?a)</p>",
        "id": 401929423,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1699950004
    },
    {
        "content": "<p><span aria-label=\"shrug\" class=\"emoji emoji-1f937\" role=\"img\" title=\"shrug\">:shrug:</span> nothing found</p>",
        "id": 401929439,
        "sender_full_name": "loogle",
        "timestamp": 1699950005
    },
    {
        "content": "<p>Since List provides set and get. You can do that easily.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">List.swap</span> <span class=\"o\">(</span><span class=\"n\">l</span><span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ha</span><span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">&lt;</span> <span class=\"n\">l.length</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hb</span><span class=\"o\">:</span> <span class=\"n\">j</span> <span class=\"bp\">&lt;</span> <span class=\"n\">l.length</span><span class=\"o\">):</span> <span class=\"n\">List</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">l</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]</span>\n  <span class=\"k\">let</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"n\">l</span><span class=\"o\">[</span><span class=\"n\">j</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">l.set</span> <span class=\"n\">i</span> <span class=\"n\">b</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">set</span> <span class=\"n\">j</span> <span class=\"n\">a</span>\n</code></pre></div>",
        "id": 401932366,
        "sender_full_name": "ZHAO Jiecheng",
        "timestamp": 1699950789
    },
    {
        "content": "<p>you should probably special case i = j there</p>",
        "id": 401933586,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1699951105
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113489-new-members/topic/Permuting.20elements.20of.20a.20list/near/401933586\">said</a>:</p>\n<blockquote>\n<p>you should probably special case i = j there</p>\n</blockquote>\n<p>Why? Is there any special reason?</p>",
        "id": 401934570,
        "sender_full_name": "ZHAO Jiecheng",
        "timestamp": 1699951379
    },
    {
        "content": "<p>A slight bigger hammer is <code>List.ofFn (l.get ∘ e)</code></p>",
        "id": 401942916,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1699954173
    },
    {
        "content": "<p>Another piece of code. BTW, if I want to upload this to Std or Mathlib. what shall I follow?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">List.select</span> <span class=\"o\">(</span><span class=\"n\">l</span><span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">idxs</span><span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">idxs.all</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"n\">l.length</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">true</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">idxs</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">[]</span>\n  <span class=\"bp\">|</span> <span class=\"n\">idx</span> <span class=\"o\">::</span> <span class=\"n\">tail</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">idx</span> <span class=\"bp\">&lt;</span> <span class=\"n\">length</span> <span class=\"n\">l</span> <span class=\"bp\">∧</span> <span class=\"n\">foldr</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">idx</span> <span class=\"n\">r</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">decide</span> <span class=\"o\">(</span><span class=\"n\">idx</span> <span class=\"bp\">&lt;</span> <span class=\"n\">length</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"bp\">&amp;&amp;</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"n\">true</span> <span class=\"n\">tail</span> <span class=\"bp\">=</span> <span class=\"n\">true</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n      <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">all</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n      <span class=\"n\">unfold</span> <span class=\"n\">foldr</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n      <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n      <span class=\"n\">exact</span> <span class=\"n\">h</span>\n    <span class=\"n\">l</span><span class=\"o\">[</span><span class=\"n\">idx</span><span class=\"o\">]</span><span class=\"bp\">'</span><span class=\"n\">this.left</span> <span class=\"o\">::</span> <span class=\"o\">(</span><span class=\"n\">List.select</span> <span class=\"n\">l</span> <span class=\"n\">tail</span> <span class=\"n\">this.right</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 401976020,
        "sender_full_name": "ZHAO Jiecheng",
        "timestamp": 1699964897
    },
    {
        "content": "<p>Isn't that effectively just <code>idxs.map get</code>?</p>",
        "id": 401987248,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1699968805
    },
    {
        "content": "<p>After implementing a swap function manually, and many more hours of trawling through documentation, I found that I could have just done <code>[1, 2, 3, 4, 5].map (Equiv.swap 1 3)</code> to get <code>[3, 2, 1, 4, 5]</code>.</p>\n<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/Logic/Equiv/Basic.html#Equiv.swap\">https://leanprover-community.github.io/mathlib4_docs/Mathlib/Logic/Equiv/Basic.html#Equiv.swap</a></p>",
        "id": 402842374,
        "sender_full_name": "Ben Whitmore",
        "timestamp": 1700290256
    },
    {
        "content": "<p>Actually no, that's not right either, that just swaps the 3 with a 4 and the 4 with a 3, not the 3rd and 4th element</p>",
        "id": 402843120,
        "sender_full_name": "Ben Whitmore",
        "timestamp": 1700290903
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113489-new-members/topic/Permuting.20elements.20of.20a.20list/near/401942916\">said</a>:</p>\n<blockquote>\n<p>A slight bigger hammer is <code>List.ofFn (l.get ∘ e)</code></p>\n</blockquote>\n<p>This seems to work ok. I at least managed to implement the permutation as a scalar multiplication operation on fixed-length lists:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">FixedLengthList</span> <span class=\"o\">(</span><span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">list</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">T</span>\n  <span class=\"n\">length</span> <span class=\"o\">:</span> <span class=\"n\">list.length</span> <span class=\"bp\">=</span> <span class=\"n\">n</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">List.perm_smul</span> <span class=\"o\">{</span><span class=\"n\">T</span> <span class=\"n\">n</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">NeZero</span> <span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">SMul</span> <span class=\"o\">(</span><span class=\"n\">Equiv.Perm</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">FixedLengthList</span> <span class=\"n\">T</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">smul</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">intro</span> <span class=\"n\">perm</span> <span class=\"n\">l</span>\n    <span class=\"k\">let</span> <span class=\"n\">n'</span> <span class=\"o\">:=</span> <span class=\"n\">l.list.length</span>\n    <span class=\"k\">let</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">n'</span> <span class=\"o\">:=</span> <span class=\"n\">Fin.cast</span> <span class=\"n\">l.length.symm</span> <span class=\"o\">(</span><span class=\"n\">perm</span> <span class=\"n\">k</span><span class=\"o\">)</span>\n    <span class=\"k\">let</span> <span class=\"n\">list</span> <span class=\"o\">:=</span> <span class=\"n\">List.ofFn</span> <span class=\"o\">(</span><span class=\"n\">l.list.get</span> <span class=\"bp\">∘</span> <span class=\"n\">f</span><span class=\"o\">)</span>\n    <span class=\"k\">let</span> <span class=\"n\">length</span> <span class=\"o\">:</span> <span class=\"n\">list.length</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">apply</span> <span class=\"n\">List.length_ofFn</span>\n    <span class=\"n\">exact</span> <span class=\"n\">FixedLengthList.mk</span> <span class=\"n\">list</span> <span class=\"n\">length</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">FixedLengthList</span> <span class=\"n\">ℕ</span> <span class=\"mi\">5</span> <span class=\"o\">:=</span> <span class=\"n\">FixedLengthList.mk</span> <span class=\"o\">[</span><span class=\"mi\">5</span><span class=\"o\">,</span><span class=\"mi\">4</span><span class=\"o\">,</span><span class=\"mi\">3</span><span class=\"o\">,</span><span class=\"mi\">2</span><span class=\"o\">,</span><span class=\"mi\">1</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">rfl</span><span class=\"o\">)</span>\n<span class=\"kd\">def</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">Equiv.Perm</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"mi\">5</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">Equiv.swap</span> <span class=\"mi\">1</span> <span class=\"mi\">2</span>\n\n<span class=\"k\">#eval</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">•</span> <span class=\"n\">l</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">list</span> <span class=\"c1\">-- [5, 3, 4, 2, 1]</span>\n</code></pre></div>",
        "id": 402846393,
        "sender_full_name": "Ben Whitmore",
        "timestamp": 1700293470
    }
]