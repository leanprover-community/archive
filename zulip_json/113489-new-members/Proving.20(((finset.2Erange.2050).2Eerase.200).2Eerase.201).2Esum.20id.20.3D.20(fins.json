[
    {
        "content": "<p>Hi all, </p>\n<p>I'm trying to prove <code>(((finset.range 50).erase 0).erase 1).sum id = (finset.range 50).sum id - 1</code> in Lean 3. I'd like to use <code>finset.sum_erase_eq_sub</code>, but this requires the codomain of <code>id</code> to be a group, which it of course is not. Does anyone know how to work around this? Perhaps by evaluating the sum in <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">Z</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{Z}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6889em;\"></span><span class=\"mord mathbb\">Z</span></span></span></span>? Or can it be proven in some other way?</p>\n<p>I also asked this question on stackexchange: <a href=\"https://proofassistants.stackexchange.com/questions/2400/proving-finset-range-50-erase-0-erase-1-sum-id-finset-range-50-sum-id\">https://proofassistants.stackexchange.com/questions/2400/proving-finset-range-50-erase-0-erase-1-sum-id-finset-range-50-sum-id</a>. </p>\n<p>Thanks in advance!</p>",
        "id": 387403545,
        "sender_full_name": "Jan Rooduijn",
        "timestamp": 1693038973
    },
    {
        "content": "<p>Welcome!</p>\n<p><span class=\"user-mention silent\" data-user-id=\"630195\">Jan Rooduijn</span> <a href=\"#narrow/stream/113489-new-members/topic/Proving.20.28.28.28finset.2Erange.2050.29.2Eerase.200.29.2Eerase.201.29.2Esum.20id.20.3D.20.28fins/near/387403545\">said</a>:</p>\n<blockquote>\n<p>Perhaps by evaluating the sum in <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">Z</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{Z}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6889em;\"></span><span class=\"mord mathbb\">Z</span></span></span></span>?</p>\n</blockquote>\n<p>That would be my first suggestion. I suppose you could rephrase your lemma as <code>(((finset.range 50).erase 0).erase 1).sum (coe : ℕ → ℤ) = (finset.range 50).sum (coe : ℕ → ℤ) - 1</code> to rewrite everything to the integers, or you might be able to use <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#zify\">tactic#zify</a> to do this kind of cast automatically.</p>",
        "id": 387403763,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1693039156
    },
    {
        "content": "<p>Note also that the command <code>open_locale big_operators</code> will give access to nicer summation syntax:</p>\n<div class=\"codehilite\" data-code-language=\"lean3\"><pre><span></span><code>import algebra.big_operators.basic\n\nopen_locale big_operators\n\nexample : ∑ i in ((finset.range 50).erase 0).erase 1, (i : ℤ) = (∑ i in finset.range 50, (i : ℤ)) - 1 :=\nby simp; norm_cast\n</code></pre></div>",
        "id": 387403989,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1693039325
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"238446\">Anne Baanen</span> <a href=\"#narrow/stream/113489-new-members/topic/Proving.20.28.28.28finset.2Erange.2050.29.2Eerase.200.29.2Eerase.201.29.2Esum.20id.20.3D.20.28fins/near/387403763\">said</a>:</p>\n<blockquote>\n<p>Welcome!</p>\n</blockquote>\n<p>Thanks! I think we were in the same class on intuitionistic mathematics a very long time ago :). </p>\n<p><span class=\"user-mention silent\" data-user-id=\"238446\">Anne Baanen</span> <a href=\"#narrow/stream/113489-new-members/topic/Proving.20.28.28.28finset.2Erange.2050.29.2Eerase.200.29.2Eerase.201.29.2Esum.20id.20.3D.20.28fins/near/387403763\">said</a>:</p>\n<blockquote>\n<p>That would be my first suggestion. I suppose you could rephrase your lemma as <code>(((finset.range 50).erase 0).erase 1).sum (coe : ℕ → ℤ) = (finset.range 50).sum (coe : ℕ → ℤ) - 1</code> to rewrite everything to the integers, or you might be able to use <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#zify\">tactic#zify</a> to do this kind of cast automatically.</p>\n</blockquote>\n<p>Thanks, I'll try that. I do need the lemma in <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">N</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{N}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6889em;\"></span><span class=\"mord mathbb\">N</span></span></span></span> eventually. I didn't know the zify tactic. It might indeed be helpful here! Thanks for the example as well.</p>",
        "id": 387404347,
        "sender_full_name": "Jan Rooduijn",
        "timestamp": 1693039639
    },
    {
        "content": "<p>You can also use <a href=\"https://leanprover-community.github.io/mathlib_docs/find/tsub_eq_of_eq_add\">docs3#tsub_eq_of_eq_add</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finset.add_sum_erase\">docs3#finset.add_sum_erase</a></p>",
        "id": 387404462,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1693039727
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"630195\">Jan Rooduijn</span> <a href=\"#narrow/stream/113489-new-members/topic/Proving.20.28.28.28finset.2Erange.2050.29.2Eerase.200.29.2Eerase.201.29.2Esum.20id.20.3D.20.28fins/near/387404347\">said</a>:</p>\n<blockquote>\n<p>Thanks! I think we were in the same class on intuitionistic mathematics a very long time ago :). </p>\n</blockquote>\n<p>I was wondering where I recognized you from! Nice to run into you again :D</p>",
        "id": 387404516,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1693039782
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/113489-new-members/topic/Proving.20.28.28.28finset.2Erange.2050.29.2Eerase.200.29.2Eerase.201.29.2Esum.20id.20.3D.20.28fins/near/387404462\">said</a>:</p>\n<blockquote>\n<p>You can also use <a href=\"https://leanprover-community.github.io/mathlib_docs/find/tsub_eq_of_eq_add\">docs3#tsub_eq_of_eq_add</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finset.add_sum_erase\">docs3#finset.add_sum_erase</a></p>\n</blockquote>\n<p>Thanks! I now have the following code. It works,  but for some reason it times out on my machine unless I run the proof of <code>c₀</code> and the rest of the proof separately. Did I do something clumsy that makes it slower than necessary?</p>\n<div class=\"codehilite\" data-code-language=\"lean3\"><pre><span></span><code>import data.finset.basic\nimport data.finset.interval\nimport algebra.big_operators.basic\n\nlemma lem_range : (((finset.range 50).erase 0).erase 1).sum id = ((finset.range 50).sum id) - 1 :=\nbegin\n  have c₀ : id 1 + (((finset.range 50).erase 0).erase 1).sum id = (finset.range 50).sum id,\n  apply finset.add_sum_erase,\n  simp,\n  simp at c₀,\n  rw add_comm at c₀,\n  exact (tsub_eq_of_eq_add (symm c₀)),\nend\n</code></pre></div>",
        "id": 387409593,
        "sender_full_name": "Jan Rooduijn",
        "timestamp": 1693043717
    },
    {
        "content": "<p>What if you replace <code>apply finset.add_sum_erase</code> with an <code>exact</code>?</p>",
        "id": 387409817,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1693043886
    },
    {
        "content": "<p>I tried the following, but the problem still persists. The two separate commented-out proofs can be run without timing out (and they seem to not even be very slow), but the when running the whole proof I get a '(deterministic) timeout'. It also says 'goals accomplished', but I guess that shouldn't be trusted? Thanks again for the help!</p>\n<div class=\"codehilite\" data-code-language=\"lean3\"><pre><span></span><code>import data.finset.basic\nimport data.finset.interval\nimport algebra.big_operators.basic\n\nlemma lem_range : (((finset.range 50).erase 0).erase 1).sum id = ((finset.range 50).sum id) - 1 :=\nbegin\n  have c₀ : id 1 + (((finset.range 50).erase 0).erase 1).sum id = (finset.range 50).sum id,\n  sorry,\n  /-\n  have c₁ : 1 ∈ ((finset.range 50).erase 0),\n  rw finset.mem_erase,\n  split,\n  simp,\n  rw finset.mem_range,\n  simp,\n  exact finset.add_sum_erase ((finset.range 50).erase 0) id c₁,\n  simp at c₀,\n  -/\n  sorry,\n  /-\n  rw add_comm at c₀,\n  exact eq_tsub_of_add_eq c₀,\n  -/\nend\n</code></pre></div>",
        "id": 387411287,
        "sender_full_name": "Jan Rooduijn",
        "timestamp": 1693045153
    },
    {
        "content": "<p>Small Zulip tip, <code> ```lean3 </code> won't highlight properly, just use <code> ``` </code> instead</p>",
        "id": 387427820,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1693057494
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"630195\">@Jan Rooduijn</span>, is there a reason you are using Lean 3 here? Everyone has moved to Lean 4 by now. :-)</p>",
        "id": 387487944,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1693106790
    },
    {
        "content": "<p>I started a project in Lean 3, thinking it was better supported. I suppose I should just port it to Lean 4. Thanks all!</p>",
        "id": 387506518,
        "sender_full_name": "Jan Rooduijn",
        "timestamp": 1693123283
    }
]