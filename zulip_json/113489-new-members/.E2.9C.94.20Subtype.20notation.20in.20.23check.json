[
    {
        "content": "<p>In <a href=\"https://github.com/leanprover-community/mathlib3port/blob/master/Mathbin/MeasureTheory/Function/AeEqFun.lean\">AeEqFun.lean</a> I am trying to resolve an issue with `fun f =&gt; ae_eq_refl f' on line 96.  To do so I am putting in a statement before then of</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">μ</span> <span class=\"o\">:</span> <span class=\"n\">Measure</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n<span class=\"kd\">variable</span> <span class=\"o\">{</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"bp\">//</span> <span class=\"n\">AEStronglyMeasurable</span> <span class=\"n\">f</span> <span class=\"n\">μ</span> <span class=\"o\">}</span>\n<span class=\"k\">#check</span> <span class=\"n\">ae_eq_refl</span> <span class=\"n\">f</span>\n</code></pre></div>\n<p>So the subtype notation <code>//</code> is allowed in this context:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">Measure.aeEqSetoid</span> <span class=\"o\">(</span><span class=\"n\">μ</span> <span class=\"o\">:</span> <span class=\"n\">Measure</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">Setoid</span> <span class=\"o\">{</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"bp\">//</span> <span class=\"n\">AEStronglyMeasurable</span> <span class=\"n\">f</span> <span class=\"n\">μ</span> <span class=\"o\">}</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨</span><span class=\"k\">fun</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"bp\">=ᵐ</span><span class=\"o\">[</span><span class=\"n\">μ</span><span class=\"o\">]</span> <span class=\"n\">g</span><span class=\"o\">,</span>\n   <span class=\"k\">fun</span> <span class=\"n\">f</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">ae_eq_refl</span> <span class=\"n\">f</span><span class=\"o\">,</span>\n   <span class=\"k\">fun</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">ae_eq_symm</span><span class=\"o\">,</span>\n   <span class=\"k\">fun</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">ae_eq_trans</span><span class=\"o\">⟩</span>\n</code></pre></div>\n<p>but not in the <code>#check</code>.</p>\n<p>Is there a way to <code>#check</code> the expression <code>fun f =&gt; ae_eq_refl f</code> so that I can understand and resolve this error:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">type</span> <span class=\"n\">mismatch</span>\n  <span class=\"n\">ae_eq_refl</span> <span class=\"bp\">?</span><span class=\"n\">m.333231</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"bp\">?</span><span class=\"n\">m.333231</span> <span class=\"bp\">=ᶠ</span><span class=\"o\">[</span><span class=\"n\">ae</span> <span class=\"n\">μ</span><span class=\"o\">]</span> <span class=\"bp\">?</span><span class=\"n\">m.333231</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"bp\">↑</span><span class=\"n\">f</span> <span class=\"bp\">=ᶠ</span><span class=\"o\">[</span><span class=\"n\">ae</span> <span class=\"n\">μ</span><span class=\"o\">]</span> <span class=\"bp\">↑</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">PropLean</span> <span class=\"mi\">4</span>\n</code></pre></div>",
        "id": 360831366,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1684943810
    },
    {
        "content": "<p><code>variable { f : α → β // AEStronglyMeasurable f μ }</code> is not syntactically correct</p>",
        "id": 360831593,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1684943876
    },
    {
        "content": "<p><code>variable</code> takes a list of binders (like <code>(x : X)</code>, <code>{x : X}</code>, or <code>[X]</code>)</p>",
        "id": 360831747,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1684943904
    },
    {
        "content": "<p>The error you're seeing with <code>#check ae_eq_refl f</code> has to do with the error you must be seeing on the previous line; you don't have an <code>f</code> defined so it's showing up as a metavariable (the <code>?m.333231</code>) as part of Lean's error recovery system</p>",
        "id": 360832016,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1684943982
    },
    {
        "content": "<p>I haven't tested it, but this might work:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">μ</span> <span class=\"o\">:</span> <span class=\"n\">Measure</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"o\">{</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"bp\">//</span> <span class=\"n\">AEStronglyMeasurable</span> <span class=\"n\">f</span> <span class=\"n\">μ</span> <span class=\"o\">})</span>\n<span class=\"k\">#check</span> <span class=\"n\">ae_eq_refl</span> <span class=\"n\">f</span>\n</code></pre></div>",
        "id": 360832488,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1684944080
    },
    {
        "content": "<p>In fact, can we make it so that <code>a : alpha // p a</code> expands to <code>a : {a : alpha // p a}</code>?</p>",
        "id": 360834625,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1684944648
    },
    {
        "content": "<p>I was thinking the same thing, though I'm not sure you can create new binder syntaxes.</p>",
        "id": 360836914,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1684945207
    },
    {
        "content": "<p>Would <code>a : alpha // p a // q a</code> mean <code>a : {a : {a : alpha // p a} // q a}</code>?</p>",
        "id": 360890733,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684960072
    },
    {
        "content": "<p>That looks a bit contrived, but would make sense, yes. What I'm currently unsure about is how to know whether <code>{a : alpha // p a}</code> mean <code>{a : subtype p}</code> or <code>subtype p</code>, but I'm sure Kyle knows.</p>",
        "id": 360895653,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1684961800
    },
    {
        "content": "<p>I don't understand how the expansion \"<code>a : alpha // p a</code> expands to <code>a : {a : alpha // p a}</code>\" doesn't loop.</p>",
        "id": 360895999,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1684961919
    },
    {
        "content": "<p>Lean always prefers the longest possible parse. So if it can parse the subtype notation as a whole it will prefer that over parsing the inner notation surrounded by random brackets.</p>",
        "id": 360896403,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1684962035
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"197836\">Jireh Loreaux</span> <a href=\"#narrow/stream/113489-new-members/topic/Subtype.20notation.20in.20.23check/near/360895999\">said</a>:</p>\n<blockquote>\n<p>I don't understand how the expansion \"<code>a : alpha // p a</code> expands to <code>a : {a : alpha // p a}</code>\" doesn't loop.</p>\n</blockquote>\n<p>Because the expansion only applies where a binder is legal, and a binder is not legal on the right of a colon</p>",
        "id": 360896707,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684962134
    },
    {
        "content": "<p>These two lines from <span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span> typecheck:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">μ</span> <span class=\"o\">:</span> <span class=\"n\">Measure</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"o\">{</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"bp\">//</span> <span class=\"n\">AEStronglyMeasurable</span> <span class=\"n\">f</span> <span class=\"n\">μ</span> <span class=\"o\">})</span>\n</code></pre></div>\n<p>This</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#check</span> <span class=\"n\">ae_eq_refl</span> <span class=\"n\">f</span>\n</code></pre></div>\n<p>fails with </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">application</span> <span class=\"n\">type</span> <span class=\"n\">mismatch</span>\n  <span class=\"n\">ae_eq_refl</span> <span class=\"n\">f</span>\n<span class=\"n\">argument</span>\n  <span class=\"n\">f</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"o\">{</span> <span class=\"n\">f</span> <span class=\"bp\">//</span> <span class=\"n\">AEStronglyMeasurable</span> <span class=\"n\">f</span> <span class=\"n\">μ</span> <span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"mi\">0</span> <span class=\"bp\">?</span><span class=\"n\">u.223473</span> <span class=\"bp\">?</span><span class=\"n\">u.223476</span><span class=\"o\">)</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"bp\">?</span><span class=\"n\">m.223536</span> <span class=\"bp\">→</span> <span class=\"bp\">?</span><span class=\"n\">m.223537</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"bp\">?</span><span class=\"n\">u.223534</span> <span class=\"bp\">?</span><span class=\"n\">u.223535</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>where</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">α</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">?</span><span class=\"n\">u.223473</span>\n<span class=\"n\">β</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">?</span><span class=\"n\">u.223476</span>\n</code></pre></div>\n<p>and I don't know what these correspond to: <code>?m.223536 ?m.223537 ?u.223534 ?u.223535</code></p>\n<p>Here is a self-contained example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.MeasureTheory.Integral.Lebesgue</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Order.Filter.Germ</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Topology.ContinuousFunction.Algebra</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.MeasureTheory.Function.StronglyMeasurable.Basic</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kn\">section</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Classical</span> <span class=\"n\">ENNReal</span> <span class=\"n\">Topology</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Set</span> <span class=\"n\">Filter</span> <span class=\"n\">TopologicalSpace</span> <span class=\"n\">ENNReal</span> <span class=\"n\">EMetric</span> <span class=\"n\">MeasureTheory</span> <span class=\"n\">Function</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">γ</span> <span class=\"n\">δ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">MeasurableSpace</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">μ</span> <span class=\"n\">ν</span> <span class=\"o\">:</span> <span class=\"n\">Measure</span> <span class=\"n\">α</span><span class=\"o\">}</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"n\">TopologicalSpace</span> <span class=\"n\">β</span><span class=\"o\">]</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">β</span><span class=\"o\">)</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">α</span>\n<span class=\"k\">#check</span> <span class=\"n\">β</span>\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">μ</span> <span class=\"o\">:</span> <span class=\"n\">Measure</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"o\">{</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"bp\">//</span> <span class=\"n\">AEStronglyMeasurable</span> <span class=\"n\">f</span> <span class=\"n\">μ</span> <span class=\"o\">})</span>\n<span class=\"k\">#check</span> <span class=\"n\">ae_eq_refl</span> <span class=\"n\">f</span>\n\n<span class=\"sd\">/-- The equivalence relation of being almost everywhere equal for almost everywhere strongly</span>\n<span class=\"sd\">measurable functions. -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">Measure.aeEqSetoid</span> <span class=\"o\">(</span><span class=\"n\">μ</span> <span class=\"o\">:</span> <span class=\"n\">Measure</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">Setoid</span> <span class=\"o\">{</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"bp\">//</span> <span class=\"n\">AEStronglyMeasurable</span> <span class=\"n\">f</span> <span class=\"n\">μ</span> <span class=\"o\">}</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨</span><span class=\"k\">fun</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"bp\">=ᵐ</span><span class=\"o\">[</span><span class=\"n\">μ</span><span class=\"o\">]</span> <span class=\"n\">g</span><span class=\"o\">,</span>\n   <span class=\"k\">fun</span> <span class=\"n\">f</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">ae_eq_refl</span> <span class=\"n\">f</span><span class=\"o\">,</span>\n   <span class=\"k\">fun</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">ae_eq_symm</span><span class=\"o\">,</span>\n   <span class=\"k\">fun</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">ae_eq_trans</span><span class=\"o\">⟩</span>\n<span class=\"bp\">#</span><span class=\"n\">align</span> <span class=\"n\">measure_theory.measure.ae_eq_setoid</span> <span class=\"n\">MeasureTheory.Measure.aeEqSetoid</span>\n</code></pre></div>\n<p>May I have another hint?</p>",
        "id": 360925149,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1684980585
    },
    {
        "content": "<p>Can you try <code>#check ae_eq_refl (f : \\alpha \\r \\beta)</code>?</p>",
        "id": 360948718,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1684994074
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span>  thank you!  That works to fix line 31 here.  What about lines 24 and 32.  I'm having trouble carrying over the line 31 fix to line 32:</p>\n<p><a href=\"/user_uploads/3121/Mjgwt7r5VtHlK9luq6h--Joi/Screenshot-from-2023-05-25-07-12-51.png\">Screenshot-from-2023-05-25-07-12-51.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/Mjgwt7r5VtHlK9luq6h--Joi/Screenshot-from-2023-05-25-07-12-51.png\" title=\"Screenshot-from-2023-05-25-07-12-51.png\"><img src=\"/user_uploads/3121/Mjgwt7r5VtHlK9luq6h--Joi/Screenshot-from-2023-05-25-07-12-51.png\"></a></div><p>That is, I can say</p>\n<p>#check ae_eq_refl (f : α → β)</p>\n<p>but not</p>\n<p>#check ae_eq_symm (f : α → β) (g : α → β)</p>\n<p>so I can fix</p>\n<p>fun f =&gt; ae_eq_refl (f :α → β)</p>\n<p>but not</p>\n<p>fun f g =&gt; ae_eq_symm (f : α → β) (g : α → β),</p>",
        "id": 361025968,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1685013266
    },
    {
        "content": "<p>If you look at <a href=\"https://leanprover-community.github.io/mathlib_docs/find/ae_eq_symm\">docs#ae_eq_symm</a>, you will see that the two function arguments are implicit. Just omit them.</p>",
        "id": 361030016,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1685014192
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span> please look at line 32 of the screenshot.  It doesn't typecheck.  I am looking for a solution.  That is, in context, this does not work:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">fun</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">ae_eq_symm</span>\n</code></pre></div>",
        "id": 361064400,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1685021963
    },
    {
        "content": "<p>Well, I can't see the error (it's collapsed in the infoview), but try <code>fun f g h =&gt; ae_eq_symm h</code>.</p>",
        "id": 361068020,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1685022751
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span> <a href=\"https://github.com/leanprover-community/mathlib4/blob/a6885a1a7f1c301ca3061ca678024788cf82aa54/Mathlib/MeasureTheory/Function/AEEqFun.lean#L94-L96\">this one</a> got ported today.  The definition I was looking at</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">Measure.aeEqSetoid</span> <span class=\"o\">(</span><span class=\"n\">μ</span> <span class=\"o\">:</span> <span class=\"n\">Measure</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">Setoid</span> <span class=\"o\">{</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"bp\">//</span> <span class=\"n\">AEStronglyMeasurable</span> <span class=\"n\">f</span> <span class=\"n\">μ</span> <span class=\"o\">}</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨</span><span class=\"k\">fun</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"bp\">=ᵐ</span><span class=\"o\">[</span><span class=\"n\">μ</span><span class=\"o\">]</span> <span class=\"n\">g</span><span class=\"o\">,</span>\n   <span class=\"k\">fun</span> <span class=\"n\">f</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">ae_eq_refl</span> <span class=\"n\">f</span><span class=\"o\">,</span>\n   <span class=\"k\">fun</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">ae_eq_symm</span><span class=\"o\">,</span>\n   <span class=\"k\">fun</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">ae_eq_trans</span><span class=\"o\">⟩</span>\n</code></pre></div>\n<p>got rewritten as</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">Measure.aeEqSetoid</span> <span class=\"o\">(</span><span class=\"n\">μ</span> <span class=\"o\">:</span> <span class=\"n\">Measure</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Setoid</span> <span class=\"o\">{</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"bp\">//</span> <span class=\"n\">AEStronglyMeasurable</span> <span class=\"n\">f</span> <span class=\"n\">μ</span> <span class=\"o\">}</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨</span><span class=\"k\">fun</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"bp\">=ᵐ</span><span class=\"o\">[</span><span class=\"n\">μ</span><span class=\"o\">]</span> <span class=\"n\">g</span><span class=\"o\">,</span>\n   <span class=\"k\">fun</span> <span class=\"o\">{</span><span class=\"n\">f</span><span class=\"o\">}</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">ae_eq_refl</span> <span class=\"n\">f.val</span><span class=\"o\">,</span>\n   <span class=\"k\">fun</span> <span class=\"o\">{</span><span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">ae_eq_symm</span><span class=\"o\">,</span>\n   <span class=\"k\">fun</span> <span class=\"o\">{</span><span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">ae_eq_trans</span><span class=\"o\">⟩</span>\n</code></pre></div>",
        "id": 361202967,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1685068578
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"364351\">Lars Ericson</span> has marked this topic as resolved.</p>",
        "id": 361202979,
        "sender_full_name": "Notification Bot",
        "timestamp": 1685068589
    }
]