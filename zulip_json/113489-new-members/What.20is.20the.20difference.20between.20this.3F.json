[
    {
        "content": "<p>I am a new learner of lean4, following <a href=\"https://leanprover.github.io/theorem_proving_in_lean4/title_page.html\">this tutorial</a>. And I have some question about:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">axiom</span> <span class=\"n\">and_comm</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Proof</span> <span class=\"o\">(</span><span class=\"n\">Implies</span> <span class=\"o\">(</span><span class=\"n\">And</span> <span class=\"n\">p</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">And</span> <span class=\"n\">q</span> <span class=\"n\">p</span><span class=\"o\">))</span>\n<span class=\"kd\">axiom</span> <span class=\"n\">and_comm2</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Proof</span> <span class=\"o\">(</span><span class=\"n\">Implies</span> <span class=\"o\">(</span><span class=\"n\">And</span> <span class=\"n\">p</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">And</span> <span class=\"n\">q</span> <span class=\"n\">p</span><span class=\"o\">))</span>\n<span class=\"k\">#check</span> <span class=\"n\">and_comm</span>\n<span class=\"k\">#check</span> <span class=\"n\">and_comm2</span>\n</code></pre></div>\n<p><code>and_comm</code> and <code>and_comm2</code> look  definitely same and here question comes:<br>\nWhy I cannot write like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">double</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">x</span>\n<span class=\"kd\">def</span> <span class=\"n\">double2</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">x</span> <span class=\"c1\">-- unknown identifier 'x'</span>\n</code></pre></div>",
        "id": 341423412,
        "sender_full_name": "ptrl",
        "timestamp": 1678703870
    },
    {
        "content": "<p>You have to write <code>def double2 : (x : Nat) -&gt; Nat := fun x =&gt; x + x</code></p>",
        "id": 341427063,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1678704907
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113489-new-members/topic/What.20is.20the.20difference.20between.20this.3F/near/341427063\">said</a>:</p>\n<blockquote>\n<p>You have to write <code>def double2 : (x : Nat) -&gt; Nat := fun x =&gt; x + x</code></p>\n</blockquote>\n<p>Why I can use <code>x</code> in double but I cannot use <code>x</code> in double2? <br>\nThey look same. <br>\nMaybe there are some special rule on pattern like <code>def double(x: Nat) : Nat</code> rather than <code>def double2 : (x: Nat) -&gt; Nat</code>?</p>",
        "id": 341429556,
        "sender_full_name": "ptrl",
        "timestamp": 1678705609
    },
    {
        "content": "<p><code>double2</code>, by its type definition <code>(x : Nat) -&gt; Nat</code> making it a function, should return a function <code>Nat -&gt; Nat</code> instead of just <code>Nat</code></p>",
        "id": 341429821,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1678705689
    },
    {
        "content": "<p>Oh, thank you so much. I understand.</p>",
        "id": 341430089,
        "sender_full_name": "ptrl",
        "timestamp": 1678705787
    },
    {
        "content": "<p>Lean 4 is the world's most strongly typed programming language. So strong that proofs are themselves types <strong>and unification is a grand mess</strong></p>",
        "id": 341430452,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1678705898
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"456598\">ptrl</span> <a href=\"#narrow/stream/113489-new-members/topic/What.20is.20the.20difference.20between.20this.3F/near/341429556\">said</a>:</p>\n<blockquote>\n<p>Why I can use <code>x</code> in double but I cannot use <code>x</code> in double2? </p>\n</blockquote>\n<p>because putting <code>(x)</code> before the colon is shorthand for writing <code>fun x =&gt;</code></p>",
        "id": 341430895,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1678706061
    },
    {
        "content": "<p>Try looking at <code>#print double</code> and <code>#print double2</code> to see what's going on</p>",
        "id": 341430991,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1678706096
    },
    {
        "content": "<p>Lean 4 is very strongly typed, but I would be careful about believing comments from someone who has only been using the system for about a week :-)</p>",
        "id": 341431087,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1678706132
    },
    {
        "content": "<p>(Kevin is referring to Jeremy, not me :))</p>",
        "id": 341431308,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1678706167
    },
    {
        "content": "<p>The correct comment is that lean 4 is very strongly typed and also takes more than a week to get the hang of it.</p>",
        "id": 341431371,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1678706185
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"598052\">Jeremy Tan</span> <a href=\"#narrow/stream/113489-new-members/topic/What.20is.20the.20difference.20between.20this.3F/near/341430452\">said</a>:</p>\n<blockquote>\n<p>Lean 4 is the world's most strongly typed programming language. So strong that proofs are themselves types <strong>and unification is a grand mess</strong></p>\n</blockquote>\n<p>I agree with the first part. Lean 4 is indeed very strongly typed.</p>\n<p>I don't think the second part is correct. Afaik, proofs are terms, propositions are types. We could also say that propositions are terms. I don't think, however, that proofs are types.</p>",
        "id": 341432081,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1678706405
    },
    {
        "content": "<p>It's also not the world's strongest type system. An important type system feature you won't find in lean is substructural / affine types; the most popular language today with affine typing is Rust, although Haskell also has some linear types in a GHC extension</p>",
        "id": 341432179,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1678706436
    },
    {
        "content": "<p>intersection types and refinement types are also not present in lean</p>",
        "id": 341432371,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1678706516
    },
    {
        "content": "<p>(That is not to say that it is necessarily desirable to add every type system feature under the sun into lean. The stronger the type system, the harder it gets to perform type checking, and if it becomes undecidable then the user has to intercede sometimes and you end up with another kind of tactic system.)</p>",
        "id": 341435663,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1678707467
    },
    {
        "content": "<p>Also, for people trying to prove ordinary mathematical theorems, it might be unclear what the meanings of the new fancy types are.</p>",
        "id": 341437901,
        "sender_full_name": "Reid Barton",
        "timestamp": 1678708127
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113489-new-members/topic/What.20is.20the.20difference.20between.20this.3F/near/341432371\">said</a>:</p>\n<blockquote>\n<p>intersection types and refinement types are also not present in lean</p>\n</blockquote>\n<p>Why doesn't subtyping in Lean qualify as refinement types?</p>",
        "id": 344797153,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1679906226
    }
]