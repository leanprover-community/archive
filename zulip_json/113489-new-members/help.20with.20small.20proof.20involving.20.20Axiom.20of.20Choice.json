[
    {
        "content": "<p>I'm going through <em>Mathematics in Lean</em>, and thought of a lemma I would like to know how to prove:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">inv_eq_default_or</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">inverse</span> <span class=\"n\">f</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">→</span>\n  <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">default</span> <span class=\"bp\">∨</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>What I've got so far is:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">MIL.Common</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Set.Lattice</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Set.Function</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Analysis.SpecialFunctions.Log.Basic</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Inhabited</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">Classical.choose_spec</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Function</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">inv_eq_default_or</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">inverse</span> <span class=\"n\">f</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">→</span>\n  <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">default</span> <span class=\"bp\">∨</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h'</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">inverse</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h'</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">x₀</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x₀</span> <span class=\"bp\">=</span> <span class=\"n\">y</span>\n  <span class=\"n\">case</span> <span class=\"n\">pos</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">right</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">dif_pos</span> <span class=\"n\">h</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h'</span>\n</code></pre></div>\n<p>The Lean Infoview shows that I have:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">x₀</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x₀</span> <span class=\"bp\">=</span> <span class=\"n\">y</span>\n<span class=\"n\">h'</span><span class=\"o\">:</span> <span class=\"n\">choose</span> <span class=\"n\">h</span> <span class=\"bp\">=</span> <span class=\"n\">x</span>\n</code></pre></div>\n<p>Does anyone know how to use <code>h</code> and <code>h'</code> to prove that <code>f x = y</code> to finish the positive direction.</p>\n<p>Thanks!</p>\n<p>Edit!</p>\n<p>Answered it myself by reading <a href=\"https://lean-lang.org/theorem_proving_in_lean4/axioms_and_computation.html?highlight=choose#choice\">https://lean-lang.org/theorem_proving_in_lean4/axioms_and_computation.html?highlight=choose#choice</a></p>\n<p>Solution is:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">inv_eq_default_or</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">inverse</span> <span class=\"n\">f</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">→</span>\n  <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">default</span> <span class=\"bp\">∨</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h'</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">inverse</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h'</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">x₀</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x₀</span> <span class=\"bp\">=</span> <span class=\"n\">y</span>\n  <span class=\"n\">case</span> <span class=\"n\">neg</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">left</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">dif_neg</span> <span class=\"n\">h</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h'</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h'</span><span class=\"o\">]</span>\n  <span class=\"n\">case</span> <span class=\"n\">pos</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">right</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">dif_pos</span> <span class=\"n\">h</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h'</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">choose</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">apply</span> <span class=\"n\">choose_spec</span> <span class=\"n\">h</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h'</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">this</span>\n    <span class=\"n\">exact</span> <span class=\"n\">this</span>\n</code></pre></div>\n<p>I wasn't applying <code>choose_spec</code> correctly.</p>",
        "id": 399182057,
        "sender_full_name": "Mike",
        "timestamp": 1698610041
    }
]