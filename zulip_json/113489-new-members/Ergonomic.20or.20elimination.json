[
    {
        "content": "<p>In order to simplify my workflow, I have the following theorem:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">or_of_left_id</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">or_pred</span><span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">proof</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">q</span> <span class=\"o\">:=</span>\n  <span class=\"n\">Or.elim</span> <span class=\"n\">or_pred</span>\n    <span class=\"n\">proof</span>\n    <span class=\"n\">id</span>\n</code></pre></div>\n<p>which automates <code>id</code> in one of the two branches of an <code>or</code>.  I use it like this for example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">pos_of_nz</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">nz</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n  <span class=\"n\">or_of_left_id</span> <span class=\"o\">(</span><span class=\"n\">Nat.eq_zero_or_pos</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">nz</span> <span class=\"bp\">.</span> <span class=\"bp\">|&gt;.</span><span class=\"n\">elim</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>Is there an internal way in Lean to do this without a custom theorem?  Or some syntax/notation that is easier and clearer to read?</p>",
        "id": 386557380,
        "sender_full_name": "Ioannis Konstantoulas",
        "timestamp": 1692693423
    },
    {
        "content": "<p><code>pos_of_nz</code> is proved in Std as <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Nat.pos_of_ne_zero#doc\">docs#Nat.pos_of_ne_zero</a> . It uses <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Or.resolve_left#doc\">docs#Or.resolve_left</a>. If you don't want to use std or mathlib then I guess you have to reprove them yourself.</p>",
        "id": 386559962,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1692694226
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/Ergonomic.20or.20elimination/near/386559962\">said</a>:</p>\n<blockquote>\n<p><code>pos_of_nz</code> is proved in Std as <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Nat.pos_of_ne_zero#doc\">docs#Nat.pos_of_ne_zero</a> . It uses <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Or.resolve_left#doc\">docs#Or.resolve_left</a>. If you don't want to use std or mathlib then I guess you have to reprove them yourself.</p>\n</blockquote>\n<p><code>Or.resolve_left</code> is what I was thinking of; but what I am wondering is if there is some standard syntax trick to write this more cleanly.  For example, (with my non-existent syntax writing skills),</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">or_of_left_id</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">or_pred</span><span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">proof</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">q</span> <span class=\"o\">:=</span>\n  <span class=\"n\">Or.elim</span> <span class=\"n\">or_pred</span>\n    <span class=\"n\">proof</span>\n    <span class=\"n\">id</span>\n\n<span class=\"kd\">notation</span> <span class=\"n\">orp</span> <span class=\"s2\">\" ∨⋆ \"</span> <span class=\"n\">pr</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">or_of_left_id</span> <span class=\"n\">orp</span> <span class=\"n\">pr</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">pos_of_nz</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">nz</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">Nat.eq_zero_or_pos</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"bp\">∨⋆</span> <span class=\"o\">(</span><span class=\"n\">nz</span> <span class=\"bp\">.</span> <span class=\"bp\">|&gt;.</span><span class=\"n\">elim</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>but something more elegant, perhaps.</p>",
        "id": 386567535,
        "sender_full_name": "Ioannis Konstantoulas",
        "timestamp": 1692696781
    },
    {
        "content": "<p><code>by tauto</code> might work</p>",
        "id": 386567651,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1692696829
    },
    {
        "content": "<p>This leads to a somewhat unrelated question (perhaps deserving its own topic?): how can I see all the unicode symbols I can enter in Lean through VS Code, and the character sequence (e.q. \\l for lambda) to print them?</p>",
        "id": 386568425,
        "sender_full_name": "Ioannis Konstantoulas",
        "timestamp": 1692697121
    },
    {
        "content": "<p>The full list is here <a href=\"https://github.com/leanprover/vscode-lean4/blob/02a6d4917f658bc1ee98933a809c0369e9827a0d/vscode-lean4/src/abbreviation/abbreviations.json\">https://github.com/leanprover/vscode-lean4/blob/02a6d4917f658bc1ee98933a809c0369e9827a0d/vscode-lean4/src/abbreviation/abbreviations.json</a>, but it can often be easier to paste the symbol you want into vscode and hover over it with your mouse and it will show the character sequence for it</p>",
        "id": 386579039,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1692700982
    },
    {
        "content": "<p>If you press ctrl-shift-p in vscode and type \"Lean 4: show all abbreviations\" you can look at this list in vscode too</p>",
        "id": 386579348,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1692701079
    }
]