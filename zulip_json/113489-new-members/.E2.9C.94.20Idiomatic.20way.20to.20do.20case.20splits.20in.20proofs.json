[
    {
        "content": "<p>Hi. I am quite new to Lean, and I am struggling to prove theorems that require case-splits of the following form. What would be the idiomatic way to prove them? Is there a tactic that would make the proofs easier?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"o\">:</span><span class=\"n\">ℤ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">gt0</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"n\">p</span> <span class=\"n\">m</span><span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">eq0</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">lt0</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"n\">p</span> <span class=\"n\">m</span><span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">auxi_lemma</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">0</span> <span class=\"bp\">∨</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">∨</span> <span class=\"n\">m</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">exact</span> <span class=\"n\">trichotomous</span> <span class=\"n\">m</span> <span class=\"mi\">0</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">main_thm</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"n\">m</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">aux_lemma</span> <span class=\"n\">m</span>\n  <span class=\"n\">cases</span> <span class=\"n\">h</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">inl</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">exact</span> <span class=\"n\">gt0</span> <span class=\"n\">h</span>\n  <span class=\"bp\">|</span> <span class=\"n\">inr</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">cases</span> <span class=\"n\">h</span> <span class=\"k\">with</span>\n             <span class=\"bp\">|</span> <span class=\"n\">inl</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">eq0</span>\n             <span class=\"bp\">|</span> <span class=\"n\">inr</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">exact</span> <span class=\"n\">lt0</span> <span class=\"n\">h</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">main_thm2</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"n\">m</span><span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">h1</span><span class=\"o\">:</span><span class=\"n\">m</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span>\n  <span class=\"n\">exact</span> <span class=\"n\">gt0</span> <span class=\"n\">h1</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">h2</span><span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h2</span><span class=\"o\">]</span> <span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">eq0</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">h3</span><span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">0</span>\n  <span class=\"n\">exact</span> <span class=\"n\">lt0</span> <span class=\"n\">h3</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">auxi_lemma</span> <span class=\"n\">m</span>\n  <span class=\"n\">tauto</span>\n</code></pre></div>\n<p>I'd like something like this to work:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">main_thm3</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"n\">m</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span><span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">gt0</span> <span class=\"n\">m</span> <span class=\"n\">p</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span><span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">eq0</span> <span class=\"n\">p</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span><span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">lt0</span> <span class=\"n\">m</span> <span class=\"n\">p</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">auxi_lemma</span> <span class=\"n\">m</span>\n  <span class=\"n\">tauto</span>   <span class=\"c1\">-- fails</span>\n</code></pre></div>",
        "id": 359034190,
        "sender_full_name": "Mayank Manjrekar",
        "timestamp": 1684342773
    },
    {
        "content": "<p>(fixing some typos in your code and adding imports). This works (<code>rcases</code> trick):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"o\">:</span><span class=\"n\">ℤ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">gt0</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"n\">p</span> <span class=\"n\">m</span><span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">eq0</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">lt0</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"n\">p</span> <span class=\"n\">m</span><span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">auxi_lemma</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">0</span> <span class=\"bp\">∨</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">∨</span> <span class=\"n\">m</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">exact</span> <span class=\"n\">trichotomous</span> <span class=\"n\">m</span> <span class=\"mi\">0</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">main_thm</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"n\">m</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">auxi_lemma</span> <span class=\"n\">m</span>\n  <span class=\"n\">cases</span> <span class=\"n\">h</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">inl</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">exact</span> <span class=\"n\">lt0</span> <span class=\"n\">h</span>\n  <span class=\"bp\">|</span> <span class=\"n\">inr</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">cases</span> <span class=\"n\">h</span> <span class=\"k\">with</span>\n             <span class=\"bp\">|</span> <span class=\"n\">inl</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">eq0</span>\n             <span class=\"bp\">|</span> <span class=\"n\">inr</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">exact</span> <span class=\"n\">gt0</span> <span class=\"n\">h</span>\n\n\n<span class=\"kd\">theorem</span> <span class=\"n\">main_thm2</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"n\">m</span><span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">h1</span><span class=\"o\">:</span><span class=\"n\">m</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span>\n  <span class=\"n\">exact</span> <span class=\"n\">gt0</span> <span class=\"n\">h1</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">h2</span><span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h2</span><span class=\"o\">]</span> <span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">eq0</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">h3</span><span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">0</span>\n  <span class=\"n\">exact</span> <span class=\"n\">lt0</span> <span class=\"n\">h3</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">auxi_lemma</span> <span class=\"n\">m</span>\n  <span class=\"n\">tauto</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">main_thm3</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"n\">m</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span><span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">gt0</span> <span class=\"n\">m</span> <span class=\"n\">p</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span><span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">eq0</span> <span class=\"n\">p</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span><span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">lt0</span> <span class=\"n\">m</span> <span class=\"n\">p</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">auxi_lemma</span> <span class=\"n\">m</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">this</span> <span class=\"k\">with</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"bp\">|</span><span class=\"n\">rfl</span><span class=\"bp\">|</span><span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">tauto</span>   <span class=\"c1\">-- works</span>\n</code></pre></div>",
        "id": 359039479,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1684344131
    },
    {
        "content": "<p>This also works (and perhaps explains why <code>tauto</code> wasn't working before):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">main_thm3</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"n\">m</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span><span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">gt0</span> <span class=\"n\">m</span> <span class=\"n\">p</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"n\">p</span> <span class=\"n\">m</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rintro</span> <span class=\"n\">rfl</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"bp\">@</span><span class=\"n\">eq0</span> <span class=\"n\">p</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span><span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">lt0</span> <span class=\"n\">m</span> <span class=\"n\">p</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">auxi_lemma</span> <span class=\"n\">m</span>\n  <span class=\"n\">tauto</span>\n</code></pre></div>",
        "id": 359039771,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1684344201
    },
    {
        "content": "<p>This also works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">main_thm3</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"n\">m</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span><span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">gt0</span> <span class=\"n\">m</span> <span class=\"n\">p</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span><span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">eq0</span> <span class=\"n\">p</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span><span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">lt0</span> <span class=\"n\">m</span> <span class=\"n\">p</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">auxi_lemma</span> <span class=\"n\">m</span>\n  <span class=\"n\">aesop</span>\n</code></pre></div>",
        "id": 359039985,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1684344250
    },
    {
        "content": "<p>Thank you so much! I think I was looking for <code>rcases</code> or <code>rintro</code>. I too arrived at the second solution, although the term I had for <code>m=0 \\-&gt; p m</code> was a lot more complicated. And <code>aesop</code> is interesting. :)</p>",
        "id": 359048748,
        "sender_full_name": "Mayank Manjrekar",
        "timestamp": 1684346570
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"244522\">Mayank Manjrekar</span> has marked this topic as resolved.</p>",
        "id": 359048814,
        "sender_full_name": "Notification Bot",
        "timestamp": 1684346588
    }
]