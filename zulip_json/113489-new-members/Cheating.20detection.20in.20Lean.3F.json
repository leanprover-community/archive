[
    {
        "content": "<p>Suppose some evil person wrote<code>EvilStuff.lean</code> and is trying to trick you into giving them a prize because they proved the Riemann hypothesis.  Their <code>EvilStuff.lean</code> is maybe millions of lines long and you'd rather not even open it. They give  you a file like this to look at in order to convince you:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n<span class=\"kn\">import</span> <span class=\"n\">EvilStuff</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">proof_of_riemann_hyp</span> <span class=\"o\">:</span> <span class=\"n\">RiemannHypothesis</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">exact</span> <span class=\"n\">Evil.actual_proof</span>\n</code></pre></div>\n<p><strong>What are the possible ways that the evil person could cheat? How can you detect it?</strong></p>\n<p>I can think of the following things the evil person could do:</p>\n<ul>\n<li>using <code>axiom</code> =&gt; Look at the output of <code>#print axioms</code> (<em>But for some reason it doesn't work for me: \"unknown constant 'axioms'\"</em>)</li>\n<li>using macros (lots of ways) =&gt;  detect how?</li>\n<li>redefining <code>RiemannHypothesis</code> =&gt; Prefix it by the explicit Mathlib namespace?</li>\n<li>Trick you installing a modified version of Mathlib (e.g. some man in the middle attack) =&gt; hash it and check against GitHub?</li>\n<li>Find a bug in Mathlib (e.g. <code>RiemannHypothesis</code> isn't actually the Riemann hypothesis) =&gt; Read all the definitions in Mathlib leading up to it? (no easier way I guess?)</li>\n<li>find a bug in the kernel =&gt; admitted. Congratulations to the evil person.</li>\n<li><strong>More ways???</strong></li>\n</ul>\n<p>I think being very clear about this question (ideally, having an exhaustive list) can be very useful and might also be worth a page in the tutorial. Maybe there have been discussions about this before; sorry if I failed to find them.</p>",
        "id": 388974055,
        "sender_full_name": "Adomas Baliuka",
        "timestamp": 1693828772
    },
    {
        "content": "<p><code>#print axioms proof_of_riemann_hyp</code> should work</p>",
        "id": 388974444,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1693828884
    },
    {
        "content": "<p>You might be interested in <a href=\"https://www.brics.dk/RS/97/18/BRICS-RS-97-18.pdf\">https://www.brics.dk/RS/97/18/BRICS-RS-97-18.pdf</a></p>",
        "id": 388975039,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1693829031
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"638715\">ab</span> <a href=\"#narrow/stream/113489-new-members/topic/Cheating.20detection.20in.20Lean.3F/near/388974055\">said</a>:</p>\n<blockquote>\n<ul>\n<li>Find a bug in Mathlib (e.g. <code>RiemannHypothesis</code> isn't actually the Riemann hypothesis) =&gt; Read all the definitions in Mathlib leading up to it? (no easier way I guess?)</li>\n</ul>\n</blockquote>\n<p>Another option is that people prove conditional results using <code>RiemannHypothesis</code>. If a buggy <code>RiemannHypothesis</code> still allows people to deduce some really nice consequences, then the bug is not a bug but a feature. But the more likely option is that such bugs will be quickly found if we try to use <code>RiemannHypothesis</code>.</p>",
        "id": 388978365,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1693830024
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span>  Thanks for the paper. I guess that I want to follow the suggestion there and \"import the proof object from <code>Evil</code> without importing any macros or definitions\". Then, have the Lean kernel check the proof. Is there a way to do that? Is it enough to replace <code>import EvilStuff</code> by something that doesn't leak any macros or other definitions into my namespace?</p>",
        "id": 389029564,
        "sender_full_name": "Adomas Baliuka",
        "timestamp": 1693847553
    },
    {
        "content": "<p>No, that isn't really possible in Lean afaik.</p>",
        "id": 389030966,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1693848228
    },
    {
        "content": "<p>But what you can do, is <code>import EvilStuff</code> and <code>import Mathlib</code>.</p>",
        "id": 389031012,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1693848244
    },
    {
        "content": "<p>If <code>EvilStuff</code> tries to shadow definitions in mathlib then Lean will complain. And since Mathlib has a statement of <code>RiemannHypothesis</code>, you should be able to prove that statement easily from the version that <code>EvilStuff</code> has proven. If that is not possible, then the authors of <code>EvilStuff</code> have more homework to do.</p>",
        "id": 389031143,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1693848317
    },
    {
        "content": "<p>So now you are reduced to trusing <code>Mathlib</code>. That's a different question. Depending on your level of paranoia, it should be relatively easy to convince yourself that the statement in Mathlib is correct.</p>",
        "id": 389031215,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1693848358
    },
    {
        "content": "<p>Let's say I trust <code>Mathlib</code> and only deeply distrust <code>EvilStuff</code>. You're saying I should reverse the order of imports? That still doesn't take care of  evil macros, right?</p>",
        "id": 389031300,
        "sender_full_name": "Adomas Baliuka",
        "timestamp": 1693848405
    },
    {
        "content": "<p>Is there something I can read about how this shadowing works?</p>",
        "id": 389031386,
        "sender_full_name": "Adomas Baliuka",
        "timestamp": 1693848433
    },
    {
        "content": "<p><code>EvilStuff</code> can call arbitrary C code at import time which could presumably interfere with the memory space used by the kernel</p>",
        "id": 389044441,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1693857408
    },
    {
        "content": "<p>Regarding macros, I thing the solution is to load the lean file from within another lean program, and extract the proof by reflection rather than attempting to use syntax to verify it</p>",
        "id": 389044566,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1693857501
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113489-new-members/topic/Cheating.20detection.20in.20Lean.3F/near/389044566\">said</a>:</p>\n<blockquote>\n<p>Regarding macros, I thing the solution is to load the lean file from within another lean program, and extract the proof by reflection rather than attempting to use syntax to verify it</p>\n</blockquote>\n<p>Sounds interesting. Can you point me towards any resources on how to do that?</p>",
        "id": 389044825,
        "sender_full_name": "Adomas Baliuka",
        "timestamp": 1693857686
    },
    {
        "content": "<p>I would have thought that it should be possible to \"save a proof to a file\". If <code>EvilStuff</code> has a proof of <code>RiemannHypothesis</code>, no definitions within <code>EvilStuff</code> need to be visible to the outside. So that proof term should be just a data blob, which could be stored to a file and read in by another Lean program without allowing it to execute arbitrary code?</p>",
        "id": 389045000,
        "sender_full_name": "Adomas Baliuka",
        "timestamp": 1693857838
    },
    {
        "content": "<p>As for saving a proof to a file, I think that is what the <a href=\"https://github.com/leanprover-community/lean/blob/master/doc/export_format.md\">export format</a> is for.  The proof can then be checked by an external checker, and one wouldn't have to worry about macros and such.  Only the pure kernel proof is exported.  Also an external checker would also help check possible bugs coming from Lean 4's implementation of its kernel.</p>",
        "id": 389047387,
        "sender_full_name": "Jason Rute",
        "timestamp": 1693859691
    },
    {
        "content": "<p>I could be mistaken, but I also thought there was a way for Lean 4 to read it's own exported proofs (and that an early version of Mathport did this to convert Lean 3 to Lean 4 at the level of the kernel proofs).  Maybe that is what <span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> meant with \"reflection\".</p>",
        "id": 389047400,
        "sender_full_name": "Jason Rute",
        "timestamp": 1693859697
    },
    {
        "content": "<p>Of course practically, if a proof was particularly important like the RH, I assume the community would put a lot of work into checking not only the Lean proof, but also the statements of the theorem to ensure that no funny business was going on.  For a good idea of how that might look, see the discussion on checking the definitions in the Liquid Tensor Experiment.</p>",
        "id": 389047403,
        "sender_full_name": "Jason Rute",
        "timestamp": 1693859700
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/113489-new-members/topic/Cheating.20detection.20in.20Lean.3F/near/388974444\">said</a>:</p>\n<blockquote>\n<p><code>#print axioms proof_of_riemann_hyp</code> should work</p>\n</blockquote>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">axiom</span> <span class=\"n\">prÎ¿pext</span> <span class=\"o\">:</span> <span class=\"n\">False</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">my_proof</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">5</span> <span class=\"o\">:=</span>\n  <span class=\"n\">prÎ¿pext.elim</span>\n\n<span class=\"k\">#print</span> <span class=\"kd\">axioms</span> <span class=\"n\">my_proof</span>  <span class=\"c1\">-- 'my_proof' depends on axioms: [prÎ¿pext]</span>\n</code></pre></div>\n<p>Please ignore the fact that <code>prÎ¿pext</code> uses the omicron <code>Î¿</code>.</p>",
        "id": 389060948,
        "sender_full_name": "Jason Yuen",
        "timestamp": 1693866582
    },
    {
        "content": "<p>Of course, computers can tell <code>Î¿</code> and <code>o</code> apart, so this trick wouldn't fool a computer.</p>",
        "id": 389061674,
        "sender_full_name": "Jason Yuen",
        "timestamp": 1693867097
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"115715\">Jason Rute</span> <a href=\"#narrow/stream/113489-new-members/topic/Cheating.20detection.20in.20Lean.3F/near/389047387\">said</a>:</p>\n<blockquote>\n<p>As for saving a proof to a file, I think that is what the <a href=\"https://github.com/leanprover-community/lean/blob/master/doc/export_format.md\">export format</a> is for.  The proof can then be checked by an external checker, and one wouldn't have to worry about macros and such.  Only the pure kernel proof is exported.  Also an external checker would also help check possible bugs coming from Lean 4's implementation of its kernel.</p>\n</blockquote>\n<p>This command isn't working for me. Do you have an updated version of the command?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">&gt;</span> <span class=\"n\">lean</span> <span class=\"c1\">--export=export.out --recursive</span>\n<span class=\"n\">C</span><span class=\"o\">:</span><span class=\"bp\">\\</span><span class=\"n\">Users</span><span class=\"bp\">\\</span><span class=\"n\">jason</span><span class=\"bp\">\\.</span><span class=\"n\">elan</span><span class=\"bp\">\\</span><span class=\"n\">toolchains</span><span class=\"bp\">\\</span><span class=\"n\">leanprover</span><span class=\"c1\">--lean4---nightly-2023-07-12\\bin\\lean.exe: unknown option -- export=export.out</span>\n<span class=\"n\">Unknown</span> <span class=\"n\">command</span> <span class=\"n\">line</span> <span class=\"n\">option</span>\n<span class=\"n\">Lean</span> <span class=\"o\">(</span><span class=\"n\">version</span> <span class=\"mi\">4</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"bp\">-</span><span class=\"n\">nightly</span><span class=\"bp\">-</span><span class=\"mi\">2023</span><span class=\"bp\">-</span><span class=\"mi\">07</span><span class=\"bp\">-</span><span class=\"mi\">12</span><span class=\"o\">,</span> <span class=\"n\">commit</span> <span class=\"mi\">6</span><span class=\"n\">e904421304c</span><span class=\"o\">,</span> <span class=\"n\">Release</span><span class=\"o\">)</span>\n<span class=\"n\">Miscellaneous</span><span class=\"o\">:</span>\n  <span class=\"c1\">--help -h          display this message</span>\n  <span class=\"bp\">...</span>\n</code></pre></div>",
        "id": 389063458,
        "sender_full_name": "Jason Yuen",
        "timestamp": 1693868355
    },
    {
        "content": "<p>Sorry that was Lean 3.  This might be the lean 4 version: <a href=\"https://github.com/Kha/lean4export\">https://github.com/Kha/lean4export</a></p>",
        "id": 389080697,
        "sender_full_name": "Jason Rute",
        "timestamp": 1693878001
    }
]