[
    {
        "content": "<p>I have a number of local hypotheses that are long but simple e.g.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">have</span> <span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"n\">deriv</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">w</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">∫</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"k\">in</span> <span class=\"n\">Iii</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">Real.sin</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">Real.cosh</span> <span class=\"o\">(</span><span class=\"n\">w</span> <span class=\"bp\">*</span>\n      <span class=\"bp\">∫</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"k\">in</span> <span class=\"n\">Iii</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">Real.sin</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">Real.cosh</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"o\">)))</span> <span class=\"bp\">+</span>\n    <span class=\"o\">(</span><span class=\"bp\">∫</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"k\">in</span> <span class=\"n\">Iii</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">Real.sin</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">Real.cosh</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"o\">)))</span> <span class=\"bp\">*</span>\n      <span class=\"n\">deriv</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">w</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">∫</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"k\">in</span> <span class=\"n\">Iii</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">Real.sin</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">Real.cosh</span> <span class=\"o\">(</span><span class=\"n\">w</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"o\">)))</span> <span class=\"n\">b</span>\n      <span class=\"mi\">2</span><span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">deriv</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">w</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">∫</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"k\">in</span> <span class=\"n\">Iii</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">Real.sin</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">Real.cosh</span> <span class=\"o\">(</span><span class=\"n\">w</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n          <span class=\"bp\">∫</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"k\">in</span> <span class=\"n\">Iii</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">Real.sin</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">Real.cosh</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"o\">)))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">ring</span>\n</code></pre></div>\n<p>that are all solved <code>by ring</code> (typically reordering a number of multiplication and additions) that are immediately followed by <code>rw [h1]</code> (or <code>simp only</code> etc) and then never used  again. Is there a way to hide these in the lean info view so that all I get is e.g. </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">unsolved</span> <span class=\"n\">goals</span>\n<span class=\"n\">Iii</span><span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">ℝ</span>\n<span class=\"n\">f</span><span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span>\n<span class=\"n\">ab</span><span class=\"o\">:</span> <span class=\"n\">ℝ</span>\n<span class=\"bp\">⊢</span> <span class=\"o\">(</span><span class=\"n\">goal</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>so I don't have the large text of <code>h1</code> and other local hypotheses polluting the screen?</p>",
        "id": 402929172,
        "sender_full_name": "Nicholas Wilson",
        "timestamp": 1700353146
    },
    {
        "content": "<p>Not exactly, but you can use <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.Parser.Tactic.clear#doc\">docs#Lean.Parser.Tactic.clear</a> (or <code>clear!</code>, <code>clearExcept</code>) to delete them entirely. Useful during development but it's perhaps best to remove <code>clear</code> when you're done.</p>",
        "id": 402930799,
        "sender_full_name": "Richard Copley",
        "timestamp": 1700354027
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 402932367,
        "sender_full_name": "Nicholas Wilson",
        "timestamp": 1700354784
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"663331\">Nicholas Wilson</span> has marked this topic as resolved.</p>",
        "id": 402932372,
        "sender_full_name": "Notification Bot",
        "timestamp": 1700354788
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"663331\">@Nicholas Wilson</span> you can also use the idiom <code>rw [ show ... = ... by ring]</code>.</p>",
        "id": 402942879,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1700360309
    },
    {
        "content": "<p>Why is recommend to remove that <code>clear</code>? If I have to touch such a proof later, maybe due to some refactoring, I'd find it helpful to know that that according to the author's plan for this proof, that assumption shouldn't be needed afterwards anymore.</p>",
        "id": 403000460,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1700392320
    },
    {
        "content": "<p>Something I always wanted to have is an in-term annotation that this is the last occurrence of an identifier and therefore it should be cleared after this step. It would be less noisy than leaving explicit clears behind.</p>",
        "id": 403002019,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1700393276
    },
    {
        "content": "<p><code>move x</code> :)</p>",
        "id": 403002242,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1700393451
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/113489-new-members/topic/.E2.9C.94.20hide.20only.20used.20once.20immediately.20applied.20hypotheses.20in.20V.2E.2E.2E/near/402942879\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"663331\">Nicholas Wilson</span> you can also use the idiom <code>rw [ show ... = ... by ring]</code>.</p>\n</blockquote>\n<p>Or use <code>conv =&gt; … equals … by ring</code> if it's pretty to use <code>conv</code> mode to identify the LHS rather then spelling it out completely (if it's large)</p>",
        "id": 403002973,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1700394086
    },
    {
        "content": "<p>Some of those long expressions are under an integral sign and I've not found a way to <code>conv =&gt; enter</code> into them yet. See the thread \"conv/enter into integral\", any help there would be much appreciated</p>",
        "id": 403004388,
        "sender_full_name": "Nicholas Wilson",
        "timestamp": 1700395364
    },
    {
        "content": "<p>but not needing to spell out the long expression (essentially) twice would be much nicer.</p>",
        "id": 403004439,
        "sender_full_name": "Nicholas Wilson",
        "timestamp": 1700395430
    },
    {
        "content": "<p>You can <code>rw [show ((deriv... by ring]</code> and never name the hypothesis at all (oops sorry, Patrick said this already)</p>",
        "id": 403012032,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1700402011
    }
]