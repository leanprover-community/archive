[
    {
        "content": "<p>Hi everyone!<br>\nGiven a commutative monoid <code>Γ₀</code>, I was trying to define the 'divisible closure' <code>Γ₀⊗ℚ</code> of <code>Γ₀</code>. More precisely, first I define a monoid structure  on <code>Γ₀ × ℕ+</code> (where an element <code>(γ, n)</code> should represents <code>γ^(1/n)</code>, so <code>(γ₁, n₁) * ( γ₂, n₂) =  (γ₁^n₂ * γ₂^n₁, n₁*n₂)</code>).  Then quotient with the correct congruence relation to get monoid <code>Γ₀⊗ℚ</code> .<br>\nNow if  <code>Γ₀</code> has an element zero, I want to show that <code>Γ₀⊗ℚ</code> also has zero, namely <code>⟦(0,1)⟧</code>. I want to show the property <code>zero_mul</code>. Here is my attempt:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">....</span>\n<span class=\"kd\">instance</span> <span class=\"n\">has_zero</span> <span class=\"o\">[</span><span class=\"n\">comm_monoid_with_zero</span> <span class=\"bp\">Γ₀</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">has_zero</span> <span class=\"o\">(</span><span class=\"bp\">Γ₀⊗</span><span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">zero</span> <span class=\"o\">:=</span> <span class=\"bp\">⟦</span><span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">,</span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">⟧</span> <span class=\"o\">}</span>\n\n<span class=\"kn\">protected</span> <span class=\"kd\">theorem</span> <span class=\"n\">zero_mul</span> <span class=\"o\">[</span><span class=\"n\">comm_monoid_with_zero</span> <span class=\"bp\">Γ₀</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"bp\">Γ₀⊗</span><span class=\"n\">ℚ</span><span class=\"o\">,</span> <span class=\"mi\">0</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n<span class=\"n\">apply</span> <span class=\"n\">quotient.ind</span><span class=\"o\">,</span>\n<span class=\"n\">intro</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n<span class=\"k\">calc</span> <span class=\"bp\">⟦</span><span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">,</span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">⟧</span> <span class=\"bp\">*</span> <span class=\"bp\">⟦</span><span class=\"n\">a</span><span class=\"bp\">⟧</span> <span class=\"bp\">=</span> <span class=\"bp\">⟦</span><span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">a</span><span class=\"bp\">⟧</span><span class=\"o\">:</span> <span class=\"n\">_</span>\n<span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"bp\">⟦</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">a.snd</span><span class=\"o\">)</span> <span class=\"bp\">⟧</span> <span class=\"o\">:</span> <span class=\"n\">_</span>\n<span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"bp\">⟦</span><span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">,</span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">⟧</span> <span class=\"o\">:</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n<span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>I don't know how to show the first and the third step of calculation holds, especially the first step.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">Γ₀</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span>\n<span class=\"n\">_inst_1</span><span class=\"o\">:</span> <span class=\"n\">comm_monoid_with_zero</span> <span class=\"bp\">Γ₀</span>\n<span class=\"n\">a</span><span class=\"o\">:</span> <span class=\"bp\">Γ₀</span> <span class=\"bp\">×</span> <span class=\"n\">ℕ</span><span class=\"bp\">+</span>\n<span class=\"bp\">⊢</span> <span class=\"bp\">⟦</span><span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">⟧</span> <span class=\"bp\">*</span> <span class=\"bp\">⟦</span><span class=\"n\">a</span><span class=\"bp\">⟧</span> <span class=\"bp\">=</span> <span class=\"bp\">⟦</span><span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">a</span><span class=\"bp\">⟧</span>\n</code></pre></div>\n<p>I've tried <code>rw ← con.coe_mul _ _</code> but that does not work, lean says <code>rewrite tactic failed, did not find instance of the pattern in the target expression\n  ↑?m_4 * ↑?m_5</code> I don't know how to deal with the quotient types. Does anyone have any ideas? Thank you!</p>",
        "id": 361533696,
        "sender_full_name": "Jiang Jiedong",
        "timestamp": 1685183403
    },
    {
        "content": "<p>Confusingly, I find that although <code>rw ← con.coe_mul _ _</code> will raise error, <code>exact con.coe_mul _ _</code>works ......</p>",
        "id": 361542015,
        "sender_full_name": "Jiang Jiedong",
        "timestamp": 1685185462
    },
    {
        "content": "<p>The problem is that <code>quotient.ind</code> introduces the wrong syntax for coercing from <code>Γ₀</code> to <code>Γ₀⊗ℚ</code></p>",
        "id": 361545137,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1685186330
    },
    {
        "content": "<p><del>Do we have <a href=\"https://leanprover-community.github.io/mathlib_docs/find/con.ind\">docs#con.ind</a>?</del> Yes, use <a href=\"https://leanprover-community.github.io/mathlib_docs/find/con.induction_on\">docs#con.induction_on</a> instead</p>",
        "id": 361545153,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1685186337
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113489-new-members/topic/How.20to.20deal.20with.20quotient.20monoids.3F/near/361545137\">said</a>:</p>\n<blockquote>\n<p>The problem is that <code>quotient.ind</code> introduces the wrong syntax for coercing from <code>Γ₀</code> to <code>Γ₀⊗ℚ</code></p>\n</blockquote>\n<p>Thanks! I should avoid using <code>con.to_setoid</code>. I should use <code>↑a</code> and <code>con.xxx</code> instead of <code> ⟦a⟧</code> and <code>quotient.xxx</code> throughout the file. Now I fixed all of them. Thank you!</p>",
        "id": 361586718,
        "sender_full_name": "Jiang Jiedong",
        "timestamp": 1685197342
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"611077\">Jiang Jiedong</span> has marked this topic as resolved.</p>",
        "id": 361587289,
        "sender_full_name": "Notification Bot",
        "timestamp": 1685197538
    }
]