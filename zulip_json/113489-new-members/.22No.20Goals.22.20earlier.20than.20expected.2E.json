[
    {
        "content": "<p>Kia ora :) </p>\n<p>In the code below I am aiming to show 0 &lt; 1 from (a subset of) the axioms of PA. As the less_than predicate is defined as an existence statement, I need to provide a candidate and a proof that it satisfies the predicate. </p>\n<p>Zero satisfies the predicate. My confusion is with the fact that the proof seems to say \"no goals\" sooner than I'd expect. The goal is to show: </p>\n<p><code>succ zero  = zero + (succ zero)</code></p>\n<p>So I start with the RHS and make one move to show </p>\n<p><code>zero + (succ zero) = succ (zero + zero)</code></p>\n<p>Already LEAN4 says 'no goals'. How does LEAN4 autocomplete from here? </p>\n<p>Thanks :) </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Peano</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"o\">:</span> <span class=\"n\">Peano</span>\n  <span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"o\">:</span> <span class=\"n\">Peano</span> <span class=\"bp\">→</span> <span class=\"n\">Peano</span>\n  <span class=\"n\">deriving</span> <span class=\"n\">Repr</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Peano</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">add</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Peano</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Peano</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">n</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"n\">zero</span>   <span class=\"bp\">=&gt;</span> <span class=\"n\">m</span>\n    <span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">succ</span> <span class=\"o\">(</span><span class=\"n\">add</span> <span class=\"n\">m</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Add</span> <span class=\"n\">Peano</span> <span class=\"n\">where</span>\n  <span class=\"n\">add</span> <span class=\"o\">:=</span> <span class=\"n\">add</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">less_than</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Peano</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">∃</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Peano</span><span class=\"o\">,</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">zero_lt_one</span> <span class=\"o\">:</span> <span class=\"n\">less_than</span> <span class=\"o\">(</span><span class=\"n\">zero</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"n\">zero</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">Exists.intro</span> <span class=\"n\">zero</span>\n    <span class=\"o\">(</span><span class=\"k\">calc</span> <span class=\"n\">zero</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"n\">zero</span><span class=\"o\">)</span>\n     <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"n\">succ</span> <span class=\"o\">(</span><span class=\"n\">zero</span> <span class=\"bp\">+</span> <span class=\"n\">zero</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">add_succ</span><span class=\"o\">])</span>\n</code></pre></div>",
        "id": 404052899,
        "sender_full_name": "Robert Culling",
        "timestamp": 1700884385
    },
    {
        "content": "<p>Kia ora!</p>\n<p>I think it's because of <em>definitional equality</em>. Since Lean can prove that <code>1 = 0 + succ 0</code> by unfolding definitions, it does just that. I suspect that if you replace the entire <code>calc</code> block with only <code>rfl</code> then it'll work too.</p>",
        "id": 404062941,
        "sender_full_name": "Chris Wong",
        "timestamp": 1700892856
    },
    {
        "content": "<p>The reason why it's triggered after using <code>rw</code> is because <code>rw</code> automatically runs a quick definitional equality check, which is weaker than <code>refl</code> but sufficient to prove this case. I'm not sure where this behavior is documented, though.</p>",
        "id": 404063100,
        "sender_full_name": "Chris Wong",
        "timestamp": 1700893035
    },
    {
        "content": "<p>There is also <code>rewrite</code> which is like <code>rw</code> but doesn't do the closing with <code>refl</code></p>",
        "id": 404080524,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1700901630
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"294142\">@Chris Wong</span>  thanks for your response :) You are correct, removing it all and placing only rfl does close the proof.</p>",
        "id": 404092195,
        "sender_full_name": "Robert Culling",
        "timestamp": 1700907279
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"470149\">@Joachim Breitner</span> Thanks for your response. Also, thanks for your podcast :) I enjoy it a lot!</p>",
        "id": 404092292,
        "sender_full_name": "Robert Culling",
        "timestamp": 1700907319
    },
    {
        "content": "<p>Thanks, glad to hear that!</p>",
        "id": 404092451,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1700907387
    }
]