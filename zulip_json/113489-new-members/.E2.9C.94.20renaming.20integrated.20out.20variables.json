[
    {
        "content": "<p>I have a double integral <code>∫ (x : ℝ) (a_1 : ℝ) in s</code>, how to I rename <code>a_1</code> to <code>y</code> so that it looks nicer?</p>",
        "id": 403489682,
        "sender_full_name": "Nicholas Wilson",
        "timestamp": 1700614483
    },
    {
        "content": "<p>Go back to where you called it a_1 and call it y instead?</p>",
        "id": 403492143,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1700615349
    },
    {
        "content": "<p>Often the <code>a_1</code> comes from a lemma in mathlib where we were forced to write <code>fun _ =&gt; </code> because the linter told us to</p>",
        "id": 403492805,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1700615639
    },
    {
        "content": "<p>Or it's actually <code>a</code>, but there's already an <code>a</code> in the context so the printer shows it as <code>a_1</code> instead</p>",
        "id": 403492923,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1700615678
    },
    {
        "content": "<p>Yaël and I once talked about how it'd be great if rw/simp could preserve binder names. They get renamed depending on whatever the theorem decided to call them. Think about <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Finset.sum_comm#doc\">docs#Finset.sum_comm</a> for example.</p>",
        "id": 403493821,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1700616048
    },
    {
        "content": "<p>You might be able to use the <code>change</code> tactic to change the binder names.</p>",
        "id": 403493960,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1700616113
    },
    {
        "content": "<p>The horrible answer is <code>set y := a_1 with hy; rw [&lt;- hy] at *</code></p>",
        "id": 403494047,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1700616132
    },
    {
        "content": "<p>If that works, it would only be after <code>conv</code> brings <code>a_1</code> into scope</p>",
        "id": 403494106,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1700616164
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"663331\">Nicholas Wilson</span> has marked this topic as resolved.</p>",
        "id": 403495129,
        "sender_full_name": "Notification Bot",
        "timestamp": 1700616652
    },
    {
        "content": "<p>Yes I did not call it <code>a_1</code> I merged a product of two integrals (both in  <code>x</code>) and <code>a_1</code> what what the second copy got called. Thanks all!</p>",
        "id": 403495356,
        "sender_full_name": "Nicholas Wilson",
        "timestamp": 1700616741
    },
    {
        "content": "<p>We used to have a Lean 3 tactic renaming bound variables but I don't know whether it got ported.</p>",
        "id": 403495422,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1700616780
    },
    {
        "content": "<p>Found it! <a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/Tactic/RenameBVar.html\">https://leanprover-community.github.io/mathlib4_docs/Mathlib/Tactic/RenameBVar.html</a></p>",
        "id": 403495743,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1700616944
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∫</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a_1</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"k\">in</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"n\">a_1</span>  <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rename_bvar</span> <span class=\"n\">a_1</span> <span class=\"bp\">→</span> <span class=\"n\">y</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 403495987,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1700617070
    }
]