[
    {
        "content": "<p>If I had to define a coercion instance from F^x to F , where F is a field, how do I go about doing it?</p>",
        "id": 345061075,
        "sender_full_name": "Suryansh Shrivastava",
        "timestamp": 1679992290
    },
    {
        "content": "<p>There is <a href=\"https://leanprover-community.github.io/mathlib_docs/find/units.has_coe\">docs#units.has_coe</a> if you want inspiration.</p>",
        "id": 345061503,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1679992438
    },
    {
        "content": "<p>Isn't that more than inspiration, isn't that the claim that the instance is already there?</p>",
        "id": 345067389,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1679994036
    },
    {
        "content": "<p>Well, I don't know if Suryansh is working with our <code>units</code> or a hand-rolled version!</p>",
        "id": 345067662,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1679994108
    },
    {
        "content": "<p>Yeah, I have to define coercion between C^x to C, so maybe that will work.</p>",
        "id": 345068634,
        "sender_full_name": "Suryansh Shrivastava",
        "timestamp": 1679994324
    },
    {
        "content": "<p>Also, is there a way to convert n: \\N to n : \\Z in the following code :-</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">number_theory.legendre_symbol.add_character</span>\n<span class=\"kn\">import</span> <span class=\"n\">number_theory.legendre_symbol.zmod_char</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.char_p.char_and_card</span>\n<span class=\"kn\">import</span> <span class=\"n\">field_theory.finite.trace</span>\n<span class=\"kn\">import</span> <span class=\"n\">number_theory.cyclotomic.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.zmod.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.complex.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">ring_theory.roots_of_unity</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.group_power.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.complex.basic</span>\n<span class=\"kd\">noncomputable theory</span>\n<span class=\"kn\">open</span> <span class=\"n\">add_char</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">big_operators</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">classical</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">complex_conjugate</span>\n<span class=\"kd\">universes</span> <span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"n\">w</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">ζ_p</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"bp\">ˣ</span><span class=\"o\">)</span> <span class=\"o\">[</span> <span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"n\">is_primitive_root</span> <span class=\"n\">ζ_p</span> <span class=\"o\">(</span><span class=\"n\">ring_char</span> <span class=\"n\">F</span><span class=\"o\">))</span> <span class=\"o\">]</span>\n\n\n<span class=\"kd\">lemma</span> <span class=\"n\">ζ_p_pow_eq_one</span><span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">):</span> <span class=\"n\">ζ_p</span><span class=\"bp\">^</span><span class=\"o\">((</span><span class=\"n\">n</span> <span class=\"bp\">%</span> <span class=\"o\">(</span><span class=\"n\">ring_char</span> <span class=\"n\">F</span><span class=\"o\">))</span> <span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">ζ_p</span><span class=\"bp\">^</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n<span class=\"kd\">begin</span>\n\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">ζ_p_helper</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span> <span class=\"o\">):</span> <span class=\"n\">ζ_p</span><span class=\"bp\">^</span><span class=\"o\">((</span><span class=\"n\">n</span> <span class=\"bp\">%</span> <span class=\"o\">(</span><span class=\"n\">ring_char</span> <span class=\"n\">F</span><span class=\"o\">))</span> <span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">ζ_p</span><span class=\"bp\">^</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"bp\">←</span>  <span class=\"n\">mul_inv_eq_one</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">zpow_neg</span> <span class=\"n\">ζ_p</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">zpow_add</span> <span class=\"n\">ζ_p</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span>  <span class=\"n\">is_primitive_root.zpow_eq_one_iff_dvd</span> <span class=\"o\">(</span><span class=\"n\">fact.out</span> <span class=\"o\">(</span><span class=\"n\">is_primitive_root</span> <span class=\"n\">ζ_p</span> <span class=\"o\">(</span><span class=\"n\">ring_char</span> <span class=\"n\">F</span><span class=\"o\">)))</span> <span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">int.modeq_zero_iff_dvd</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"bp\">-</span><span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">ring</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">h1</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">int.modeq.add_right</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">int.mod_modeq</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 345176583,
        "sender_full_name": "Suryansh Shrivastava",
        "timestamp": 1680019142
    },
    {
        "content": "<p>I have proved the second one but how do I prove the first one?</p>",
        "id": 345176720,
        "sender_full_name": "Suryansh Shrivastava",
        "timestamp": 1680019176
    },
    {
        "content": "<p>Can you post the imports too to make a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>? I'd guess something like <code>simpa using  ζ_p_helper n</code> but have no idea as I can't run the code</p>",
        "id": 345177506,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1680019321
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">number_theory.legendre_symbol.add_character</span>\n<span class=\"kn\">import</span> <span class=\"n\">number_theory.legendre_symbol.zmod_char</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.char_p.char_and_card</span>\n<span class=\"kn\">import</span> <span class=\"n\">field_theory.finite.trace</span>\n<span class=\"kn\">import</span> <span class=\"n\">number_theory.cyclotomic.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.zmod.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.complex.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">ring_theory.roots_of_unity</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.group_power.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.complex.basic</span>\n<span class=\"kd\">noncomputable theory</span>\n<span class=\"kn\">open</span> <span class=\"n\">add_char</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">big_operators</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">classical</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">complex_conjugate</span>\n<span class=\"kd\">universes</span> <span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"n\">w</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">ζ_p</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"bp\">ˣ</span><span class=\"o\">)</span> <span class=\"o\">[</span> <span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"n\">is_primitive_root</span> <span class=\"n\">ζ_p</span> <span class=\"o\">(</span><span class=\"n\">ring_char</span> <span class=\"n\">F</span><span class=\"o\">))</span> <span class=\"o\">]</span>\n</code></pre></div>",
        "id": 345177783,
        "sender_full_name": "Suryansh Shrivastava",
        "timestamp": 1680019372
    },
    {
        "content": "<p>So yeah <code>simpa using ζ_p_helper ζ_p n,</code> works, this is basically a short way of doing something like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">ζ_p_helper</span> <span class=\"n\">ζ_p</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n  <span class=\"n\">assumption</span><span class=\"o\">,</span>\n  <span class=\"n\">apply_instance</span><span class=\"o\">,</span>\n  <span class=\"n\">apply_instance</span><span class=\"o\">,</span>\n</code></pre></div>",
        "id": 345179421,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1680019698
    },
    {
        "content": "<p>okay so simp seems pretty nice in tying up these things,</p>",
        "id": 345182203,
        "sender_full_name": "Suryansh Shrivastava",
        "timestamp": 1680020378
    },
    {
        "content": "<p>Say, I have a summation </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">add_char'</span><span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"bp\">ˣ</span>  <span class=\"o\">:=</span>\n  <span class=\"n\">ζ_p</span><span class=\"bp\">^</span><span class=\"o\">(</span> <span class=\"n\">zmod.val</span> <span class=\"o\">(</span><span class=\"n\">algebra.trace</span> <span class=\"o\">(</span><span class=\"n\">zmod</span> <span class=\"o\">(</span><span class=\"n\">ring_char</span> <span class=\"n\">F</span><span class=\"o\">))</span> <span class=\"n\">F</span> <span class=\"n\">x</span><span class=\"o\">))</span>\n\n\n<span class=\"kd\">def</span> <span class=\"n\">gauss_sum'</span> <span class=\"o\">(</span><span class=\"n\">χ</span> <span class=\"o\">:</span> <span class=\"n\">mul_char</span> <span class=\"n\">F</span> <span class=\"n\">ℂ</span> <span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span> <span class=\"o\">:=</span> <span class=\"bp\">∑'</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">,</span>  <span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"n\">add_char'</span> <span class=\"n\">ζ_p</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">χ</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>We know that additive inverses exist in our field, so how will we substitute x by -x in our sum?</p>",
        "id": 345659592,
        "sender_full_name": "Suryansh Shrivastava",
        "timestamp": 1680180138
    },
    {
        "content": "<p>like If I want to show equivalence between the above statement and </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">gauss_sum'</span> <span class=\"o\">(</span><span class=\"n\">χ</span> <span class=\"o\">:</span> <span class=\"n\">mul_char</span> <span class=\"n\">F</span> <span class=\"n\">ℂ</span> <span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span> <span class=\"o\">:=</span> <span class=\"bp\">∑'</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">,</span>  <span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"n\">add_char'</span> <span class=\"n\">ζ_p</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">x</span><span class=\"o\">))</span><span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">χ</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">x</span><span class=\"o\">))</span>\n</code></pre></div>\n<p>How do I go about doing that?</p>",
        "id": 345660000,
        "sender_full_name": "Suryansh Shrivastava",
        "timestamp": 1680180242
    },
    {
        "content": "<p>Can you make a mwe?</p>",
        "id": 345661158,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1680180513
    },
    {
        "content": "<p>What's a MWE?</p>",
        "id": 345663353,
        "sender_full_name": "Suryansh Shrivastava",
        "timestamp": 1680180976
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a></p>",
        "id": 345663424,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1680180990
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">number_theory.legendre_symbol.add_character</span>\n<span class=\"kn\">import</span> <span class=\"n\">number_theory.legendre_symbol.zmod_char</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.char_p.char_and_card</span>\n<span class=\"kn\">import</span> <span class=\"n\">field_theory.finite.trace</span>\n<span class=\"kn\">import</span> <span class=\"n\">number_theory.cyclotomic.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.zmod.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.complex.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">ring_theory.roots_of_unity</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.group_power.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.complex.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">analysis.normed.field.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.pnat.defs</span>\n<span class=\"kd\">noncomputable theory</span>\n<span class=\"c\">/-</span><span class=\"cm\">!</span>\n<span class=\"cm\"># Modified Gauss sums</span>\n\n<span class=\"cm\">We define the Gauss sum associated to a multiplicative and an additive</span>\n<span class=\"cm\">character of a finite field and prove some results about them.</span>\n\n<span class=\"cm\">## Main definition</span>\n\n\n<span class=\"cm\">Here, let 𝔽 = 𝔽_q be a finite field with q elements(q = p^f ) and let χ ζ_p be a fixed primitive root of unity and let T be the trace from 𝔽 to</span>\n<span class=\"cm\">ℤ/pℤ. Define</span>\n<span class=\"cm\"> ψ : 𝔽 → ℂ^× , ψ(x) = ζ_p^T(x)</span>\n<span class=\"cm\"> and now we define χ as a multiplicative character with these domains.</span>\n<span class=\"cm\"> 𝔽^× → ℂ^×</span>\n<span class=\"cm\">We extend χ to all of 𝔽 by setting χ(0) = 0(even if χ is a trivial character).</span>\n<span class=\"cm\">-/</span>\n<span class=\"kn\">open</span> <span class=\"n\">add_char</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">big_operators</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">classical</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">complex_conjugate</span>\n<span class=\"kd\">universes</span> <span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"n\">w</span>\n<span class=\"c1\">-- variables (f : ℕ)</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">ζ_p</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"bp\">ˣ</span><span class=\"o\">)</span> <span class=\"o\">[</span> <span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"n\">is_primitive_root</span> <span class=\"n\">ζ_p</span> <span class=\"o\">(</span><span class=\"n\">ring_char</span> <span class=\"n\">F</span><span class=\"o\">))</span> <span class=\"o\">]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">add_char'</span><span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"bp\">ˣ</span>  <span class=\"o\">:=</span>\n  <span class=\"n\">ζ_p</span><span class=\"bp\">^</span><span class=\"o\">(</span> <span class=\"n\">zmod.val</span> <span class=\"o\">(</span><span class=\"n\">algebra.trace</span> <span class=\"o\">(</span><span class=\"n\">zmod</span> <span class=\"o\">(</span><span class=\"n\">ring_char</span> <span class=\"n\">F</span><span class=\"o\">))</span> <span class=\"n\">F</span> <span class=\"n\">x</span><span class=\"o\">))</span>\n\n\n<span class=\"kd\">def</span> <span class=\"n\">gauss_sum'</span> <span class=\"o\">(</span><span class=\"n\">χ</span> <span class=\"o\">:</span> <span class=\"n\">mul_char</span> <span class=\"n\">F</span> <span class=\"n\">ℂ</span> <span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span> <span class=\"o\">:=</span> <span class=\"bp\">∑'</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">,</span>  <span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"n\">add_char'</span> <span class=\"n\">ζ_p</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">χ</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 345664089,
        "sender_full_name": "Suryansh Shrivastava",
        "timestamp": 1680181120
    },
    {
        "content": "<p>Not answering your question, but your variables have no solution. If you have a finite field of characteristic p then you can't have an element of order p in its multiplicative group</p>",
        "id": 345672729,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1680182792
    },
    {
        "content": "<p>It looks fine to me <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> are you sure (or can you explain more)? zeta is a complex number</p>",
        "id": 345673831,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1680183023
    },
    {
        "content": "<p>That's not a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> because it doesn't include the <code>e</code>; there's no <code>sorry</code> that is your question!</p>",
        "id": 345674043,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1680183080
    },
    {
        "content": "<p>I also suspect you could improve on the <code>m</code> aspect; what's the essence of your question? Is it really about all of <code>add_char</code>, primitive roots, and infinite sums all at the same time? Or can you make a simpler mwe that only uses one of those things?</p>",
        "id": 345674510,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1680183178
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"127136\">Alex J. Best</span> <a href=\"#narrow/stream/113489-new-members/topic/Error.20Thread.20for.20defining.20special.20type.20of.20gauss.20sums/near/345673831\">said</a>:</p>\n<blockquote>\n<p>It looks fine to me <span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> are you sure (or can you explain more)? zeta is a complex number</p>\n</blockquote>\n<p>Oh sorry, I'm a fool, that'll teach me to not read properly. Objection retracted!</p>",
        "id": 345680179,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1680184348
    },
    {
        "content": "<p>I'll try and say something more helpful this time. Suryansh -- the idea of a mwe is that you ask the question you want to ask, in Lean. For example instead of saying \"how do I prove this lemma\", you say \"how do I fill in this sorry\", and you write code containing the sorry which I can just cut and paste and which works at my end without any alterations. And the less code I have to copy, the better.</p>\n<p>Often, when making good mwes, people find that they can answer their own question themselves. It's for this and other reasons that we encourage this way of asking questions on this site.</p>",
        "id": 345680728,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1680184476
    },
    {
        "content": "<p>Oh my apologies, actually my code seemed a lot larger, for it to be contained in a single block, is it fine if I I write my code in more blocks.</p>",
        "id": 345738626,
        "sender_full_name": "Suryansh Shrivastava",
        "timestamp": 1680195853
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">char_p_non_zero</span> <span class=\"o\">:</span> <span class=\"n\">ne_zero</span> <span class=\"o\">(</span><span class=\"n\">ring_char</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span><span class=\"n\">out</span> <span class=\"o\">:=</span>  <span class=\"kd\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">haveI</span> <span class=\"o\">:</span> <span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"n\">ring_char</span> <span class=\"n\">F</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">prime</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">char_p.char_is_prime</span> <span class=\"n\">F</span> <span class=\"n\">_</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">nat.prime.ne_zero</span> <span class=\"o\">(</span><span class=\"n\">fact.out</span> <span class=\"o\">(</span><span class=\"n\">ring_char</span> <span class=\"n\">F</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">prime</span><span class=\"o\">)</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span><span class=\"o\">}</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">ζ_p_helper_help</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span> <span class=\"o\">):</span> <span class=\"n\">ζ_p</span><span class=\"bp\">^</span><span class=\"o\">((</span><span class=\"n\">n</span> <span class=\"bp\">%</span> <span class=\"o\">(</span><span class=\"n\">ring_char</span> <span class=\"n\">F</span><span class=\"o\">))</span> <span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">ζ_p</span><span class=\"bp\">^</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"bp\">←</span>  <span class=\"n\">mul_inv_eq_one</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">zpow_neg</span> <span class=\"n\">ζ_p</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">zpow_add</span> <span class=\"n\">ζ_p</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span>  <span class=\"n\">is_primitive_root.zpow_eq_one_iff_dvd</span> <span class=\"o\">(</span><span class=\"n\">fact.out</span> <span class=\"o\">(</span><span class=\"n\">is_primitive_root</span> <span class=\"n\">ζ_p</span> <span class=\"o\">(</span><span class=\"n\">ring_char</span> <span class=\"n\">F</span><span class=\"o\">)))</span> <span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">int.modeq_zero_iff_dvd</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"bp\">-</span><span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">ring</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">h1</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">int.modeq.add_right</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">int.mod_modeq</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">ζ_p_helper</span><span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">):</span> <span class=\"n\">ζ_p</span><span class=\"bp\">^</span><span class=\"o\">((</span><span class=\"n\">n</span> <span class=\"bp\">%</span> <span class=\"o\">(</span><span class=\"n\">ring_char</span> <span class=\"n\">F</span><span class=\"o\">))</span> <span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">ζ_p</span><span class=\"bp\">^</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">simpa</span> <span class=\"n\">using</span> <span class=\"n\">ζ_p_helper_help</span> <span class=\"n\">ζ_p</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">add_char'_mul_property</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">F</span> <span class=\"o\">):</span> <span class=\"n\">add_char'</span> <span class=\"n\">ζ_p</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">add_char'</span> <span class=\"n\">ζ_p</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">add_char'</span> <span class=\"n\">ζ_p</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">add_char'</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span><span class=\"o\">,</span>\n  <span class=\"n\">haveI</span> <span class=\"o\">:</span> <span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"n\">ring_char</span> <span class=\"n\">F</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">prime</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">char_p.char_is_prime</span> <span class=\"n\">F</span> <span class=\"n\">_</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">zmod.val_add</span> <span class=\"o\">],</span>\n  <span class=\"n\">rw</span><span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">pow_add</span><span class=\"o\">],</span>\n  <span class=\"n\">rw</span><span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">ζ_p_helper</span> <span class=\"n\">ζ_p</span> <span class=\"o\">((</span><span class=\"n\">algebra.trace</span> <span class=\"o\">(</span><span class=\"n\">zmod</span> <span class=\"o\">(</span><span class=\"n\">ring_char</span> <span class=\"n\">F</span><span class=\"o\">))</span> <span class=\"n\">F</span> <span class=\"n\">a</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">algebra.trace</span> <span class=\"o\">(</span><span class=\"n\">zmod</span> <span class=\"o\">(</span><span class=\"n\">ring_char</span> <span class=\"n\">F</span><span class=\"o\">))</span> <span class=\"n\">F</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">val</span><span class=\"o\">)],</span>\n  <span class=\"n\">assumption</span><span class=\"o\">,</span>\n  <span class=\"n\">assumption</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n\n<span class=\"kd\">def</span> <span class=\"n\">conjugate</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"bp\">ˣ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span> <span class=\"o\">:=</span> <span class=\"n\">conj</span> <span class=\"o\">(</span><span class=\"n\">x.val</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 345739186,
        "sender_full_name": "Suryansh Shrivastava",
        "timestamp": 1680195980
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">ζ_p_helper_add</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span> <span class=\"o\">)(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">):</span> <span class=\"n\">conjugate</span> <span class=\"o\">(</span><span class=\"n\">ζ_p</span><span class=\"bp\">^</span><span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">ζ_p</span><span class=\"bp\">^</span><span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">n</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">conjugate</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span><span class=\"o\">[</span><span class=\"n\">conj</span><span class=\"o\">],</span>\n  <span class=\"k\">have</span> <span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">ζ_p</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"o\">(</span><span class=\"n\">ring_char</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"o\">{</span>\n    <span class=\"n\">apply</span> <span class=\"n\">is_primitive_root.pow_eq_one</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">fact.out</span> <span class=\"o\">(</span><span class=\"n\">is_primitive_root</span> <span class=\"n\">ζ_p</span> <span class=\"o\">(</span><span class=\"n\">ring_char</span> <span class=\"n\">F</span><span class=\"o\">)),</span>\n  <span class=\"o\">},</span>\n  <span class=\"k\">have</span> <span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"bp\">‖</span><span class=\"o\">(</span><span class=\"n\">ζ_p</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">val</span><span class=\"bp\">‖</span>  <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"o\">{</span>\n    <span class=\"k\">have</span> <span class=\"n\">h3</span> <span class=\"o\">:</span> <span class=\"n\">ring_char</span> <span class=\"n\">F</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"o\">{</span>\n      <span class=\"n\">haveI</span> <span class=\"o\">:</span> <span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"n\">ring_char</span> <span class=\"n\">F</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">prime</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">char_p.char_is_prime</span> <span class=\"n\">F</span> <span class=\"n\">_</span><span class=\"o\">⟩,</span>\n      <span class=\"n\">exact</span> <span class=\"n\">nat.prime.pos</span> <span class=\"o\">(</span><span class=\"n\">fact.out</span> <span class=\"o\">(</span><span class=\"n\">ring_char</span> <span class=\"n\">F</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">prime</span><span class=\"o\">),</span>\n    <span class=\"o\">},</span>\n    <span class=\"n\">set</span> <span class=\"n\">r</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">ring_char</span> <span class=\"n\">F</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">to_pnat'</span> <span class=\"k\">with</span> <span class=\"n\">h4</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">h5</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"n\">ζ_p</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">val</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"o\">{</span>\n      <span class=\"n\">rw</span>  <span class=\"n\">h4</span><span class=\"o\">,</span>\n      <span class=\"n\">simp</span><span class=\"o\">,</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">nat.to_pnat'</span><span class=\"o\">,</span><span class=\"n\">nat.succ_pnat</span><span class=\"o\">],</span>\n      <span class=\"n\">rw</span> <span class=\"n\">pnat.mk_coe</span><span class=\"o\">,</span>\n      <span class=\"n\">rw</span> <span class=\"n\">nat.succ_pred_eq_of_pos</span> <span class=\"n\">h3</span><span class=\"o\">,</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">units.coe_pow</span> <span class=\"n\">ζ_p</span> <span class=\"o\">(</span><span class=\"n\">ring_char</span> <span class=\"n\">F</span><span class=\"o\">),</span><span class=\"bp\">←</span> <span class=\"n\">units.coe_one</span> <span class=\"o\">,</span><span class=\"n\">units.eq_iff.mpr</span> <span class=\"n\">h1</span><span class=\"o\">],</span>\n    <span class=\"o\">},</span>\n    <span class=\"n\">apply</span> <span class=\"n\">norm_one_of_pow_eq_one</span> <span class=\"n\">h5</span><span class=\"o\">,</span>\n  <span class=\"o\">},</span>\n  <span class=\"n\">rw</span> <span class=\"n\">complex.inv_def</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">h3</span> <span class=\"o\">:</span> <span class=\"bp\">‖</span> <span class=\"o\">((</span><span class=\"n\">ζ_p</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">val</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"n\">n</span> <span class=\"bp\">‖</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"o\">{</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">norm_zpow</span> <span class=\"o\">,</span> <span class=\"n\">h2</span><span class=\"o\">],</span>\n    <span class=\"n\">simp</span><span class=\"o\">,</span>\n  <span class=\"o\">},</span>\n  <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">h3</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">complex.mul_self_abs</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span><span class=\"o\">[</span><span class=\"n\">h3</span><span class=\"o\">],</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">ζ_p_help_add'</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span>  <span class=\"o\">)(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">):</span> <span class=\"n\">conjugate</span> <span class=\"o\">(</span><span class=\"n\">ζ_p</span><span class=\"bp\">^</span><span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">ζ_p</span><span class=\"bp\">^</span><span class=\"o\">(</span><span class=\"bp\">-</span> <span class=\"n\">int.of_nat</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">simpa</span> <span class=\"n\">using</span> <span class=\"n\">ζ_p_helper_add</span> <span class=\"n\">ζ_p</span> <span class=\"n\">n</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n\n\n<span class=\"kd\">lemma</span> <span class=\"n\">add_char'_conjugate</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">F</span> <span class=\"o\">):</span>  <span class=\"n\">conjugate</span> <span class=\"o\">(</span> <span class=\"n\">add_char'</span> <span class=\"n\">ζ_p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">add_char'</span> <span class=\"n\">ζ_p</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">x</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">add_char'</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">ζ_p_help_add'</span> <span class=\"n\">ζ_p</span> <span class=\"o\">(</span><span class=\"n\">algebra.trace</span> <span class=\"o\">(</span><span class=\"n\">zmod</span> <span class=\"o\">(</span><span class=\"n\">ring_char</span> <span class=\"n\">F</span><span class=\"o\">))</span> <span class=\"n\">F</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span><span class=\"o\">,</span>\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n\n<span class=\"kd\">def</span> <span class=\"n\">conj_mul_char'</span> <span class=\"o\">(</span><span class=\"n\">χ</span> <span class=\"o\">:</span> <span class=\"n\">mul_char</span> <span class=\"n\">F</span> <span class=\"n\">ℂ</span> <span class=\"o\">)</span> <span class=\"o\">:</span><span class=\"n\">mul_char</span> <span class=\"n\">F</span> <span class=\"n\">ℂ</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span><span class=\"n\">classical</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">conj</span> <span class=\"o\">(</span><span class=\"n\">χ</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">},</span>\n  <span class=\"n\">map_nonunit'</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">classical</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simpa</span> <span class=\"n\">using</span> <span class=\"n\">χ.map_nonunit</span> <span class=\"n\">hx</span> <span class=\"o\">},</span>\n  <span class=\"n\">map_one'</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span>\n    <span class=\"n\">classical</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span><span class=\"o\">[</span><span class=\"n\">map_one</span><span class=\"o\">],</span>\n    <span class=\"n\">simp</span><span class=\"o\">,</span>\n  <span class=\"o\">},</span>\n  <span class=\"n\">map_mul'</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span>\n    <span class=\"n\">classical</span><span class=\"o\">,</span>\n    <span class=\"n\">intros</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span><span class=\"o\">[</span><span class=\"n\">map_mul</span><span class=\"o\">],</span>\n    <span class=\"n\">simp</span><span class=\"o\">,</span>\n   <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</code></pre></div>",
        "id": 345739404,
        "sender_full_name": "Suryansh Shrivastava",
        "timestamp": 1680196040
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">gauss_sum_1</span> <span class=\"o\">(</span><span class=\"n\">χ</span> <span class=\"o\">:</span> <span class=\"n\">mul_char</span> <span class=\"n\">F</span> <span class=\"n\">ℂ</span> <span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">conj</span> <span class=\"o\">(</span><span class=\"n\">gauss_sum'</span> <span class=\"n\">ζ_p</span> <span class=\"n\">χ</span><span class=\"o\">)</span> <span class=\"bp\">=</span>  <span class=\"o\">(</span><span class=\"n\">χ</span><span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">gauss_sum'</span> <span class=\"n\">ζ_p</span> <span class=\"o\">(</span><span class=\"n\">conj_mul_char'</span> <span class=\"o\">(</span><span class=\"n\">χ</span><span class=\"o\">))</span> <span class=\"o\">)</span>  <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">gauss_sum'</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span><span class=\"o\">[</span><span class=\"n\">is_R_or_C.conj_tsum</span><span class=\"o\">],</span>\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>I am trying to solve this problem and I think I might have all the machinery required except for the substitution that we need here</p>",
        "id": 345739785,
        "sender_full_name": "Suryansh Shrivastava",
        "timestamp": 1680196123
    },
    {
        "content": "<p>So the thing about a <em>minimal</em> working example is that you don't include all lemmas which you don't need, and you make it all fit into one code block so that the people who are going to help you can just cut and paste one code block.</p>",
        "id": 345739879,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1680196142
    },
    {
        "content": "<p>I'm trying to explain to you how to ask an effective question.</p>",
        "id": 345740223,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1680196221
    },
    {
        "content": "<p>Oh, my apologies. Maybe this code will work?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">number_theory.legendre_symbol.add_character</span>\n<span class=\"kn\">import</span> <span class=\"n\">number_theory.legendre_symbol.zmod_char</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.char_p.char_and_card</span>\n<span class=\"kn\">import</span> <span class=\"n\">field_theory.finite.trace</span>\n<span class=\"kn\">import</span> <span class=\"n\">number_theory.cyclotomic.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.zmod.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.complex.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">ring_theory.roots_of_unity</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.group_power.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.complex.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">analysis.normed.field.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.pnat.defs</span>\n<span class=\"kd\">noncomputable theory</span>\n<span class=\"kn\">open</span> <span class=\"n\">add_char</span>\n<span class=\"kn\">open</span> <span class=\"n\">zmod</span>\n<span class=\"kn\">open</span> <span class=\"n\">mul_char</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">big_operators</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">classical</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">complex_conjugate</span>\n<span class=\"kd\">universes</span> <span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"n\">w</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">ζ_p</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"bp\">ˣ</span><span class=\"o\">)</span> <span class=\"o\">[</span> <span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"n\">is_primitive_root</span> <span class=\"n\">ζ_p</span> <span class=\"o\">(</span><span class=\"n\">ring_char</span> <span class=\"n\">F</span><span class=\"o\">))</span> <span class=\"o\">]</span>\n<span class=\"kd\">def</span> <span class=\"n\">add_char'</span><span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"bp\">ˣ</span>  <span class=\"o\">:=</span>\n  <span class=\"n\">ζ_p</span><span class=\"bp\">^</span><span class=\"o\">(</span> <span class=\"n\">zmod.val</span> <span class=\"o\">(</span><span class=\"n\">algebra.trace</span> <span class=\"o\">(</span><span class=\"n\">zmod</span> <span class=\"o\">(</span><span class=\"n\">ring_char</span> <span class=\"n\">F</span><span class=\"o\">))</span> <span class=\"n\">F</span> <span class=\"n\">x</span><span class=\"o\">))</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">practice</span><span class=\"o\">(</span><span class=\"n\">χ</span> <span class=\"o\">:</span> <span class=\"n\">mul_char</span> <span class=\"n\">F</span> <span class=\"n\">ℂ</span> <span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∑'</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">,</span>  <span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"n\">add_char'</span> <span class=\"n\">ζ_p</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">val</span><span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">χ</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">∑'</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">,</span>  <span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"n\">add_char'</span> <span class=\"n\">ζ_p</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">x</span><span class=\"o\">))</span><span class=\"bp\">*</span> <span class=\"o\">(</span> <span class=\"n\">χ</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n<span class=\"kd\">begin</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 345901416,
        "sender_full_name": "Suryansh Shrivastava",
        "timestamp": 1680257882
    },
    {
        "content": "<p>Nice, that checks off \"working\" and \"example\"; can you see how you might make it more \"minimal\"?</p>",
        "id": 345903845,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1680258555
    },
    {
        "content": "<p>yeah, I think those imports can be cut down a bit :-) But I can try to answer the question anyway! First you'll need some lemma saying chi(-x)=chi(-1)*chi(x). Then you'll need a lemma saying how add_char' zeta_p (-x) is related to add_char' zeta_p x. Then you <code>simp_rw</code> these lemmas because you want to apply them under a binder so <code>rw</code> won't work. And then it will hopefully be easy.</p>",
        "id": 345904712,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1680258744
    },
    {
        "content": "<p>Isn't the argument just \"reverse the direction of the sum\"?</p>",
        "id": 345904893,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1680258789
    },
    {
        "content": "<p>Oh! Sorry yes! That's a much better way to do it!</p>",
        "id": 345904981,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1680258811
    },
    {
        "content": "<p>... which would be much more obvious once you remove all the irrelevant details</p>",
        "id": 345905044,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1680258828
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"498381\">@Suryansh Shrivastava</span> /<span class=\"user-mention\" data-user-id=\"574778\">@Suryansh Shrivastava</span>, the reason I'm not answering your question exactly is that if you distill your question enough  then <code>library_search</code> should be able to answer it for you</p>",
        "id": 345905341,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1680258897
    },
    {
        "content": "<p>This is the question you want to ask.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">analysis.complex.basic</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">big_operators</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">F</span> <span class=\"bp\">→</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∑'</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"bp\">∑'</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 345906288,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1680259120
    },
    {
        "content": "<p>And you can check that this is the question you want to ask by changing <code>example</code> to <code>lemma foo</code> and then checking that you can use <code>foo</code> to solve your actual problem (and if you can't then you need to modify the example until it solves your problem)</p>",
        "id": 345906542,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1680259193
    },
    {
        "content": "<p>Wait -- what? Why are you using <code>∑'</code>?</p>",
        "id": 345907208,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1680259376
    },
    {
        "content": "<p>Can you confirm that you are only doing finite sums? Life wil be much easier if you use <code>∑</code></p>",
        "id": 345907618,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1680259461
    },
    {
        "content": "<p>I lied about <code>library_search</code> finding it; the <code>tsum</code> version can be proven as</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">analysis.complex.basic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">F</span> <span class=\"bp\">→</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∑'</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"bp\">∑'</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">((</span><span class=\"n\">equiv.neg</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">tsum_eq</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span>\n</code></pre></div>",
        "id": 345908144,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1680259611
    },
    {
        "content": "<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>For ∑ instead of ∑'</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<p>The finite version is <code>(fintype.sum_equiv (equiv.neg _) _ _ $ λ _, rfl).symm</code>, see <a href=\"https://leanprover-community.github.io/mathlib_docs/find/fintype.sum_equiv\">docs#fintype.sum_equiv</a></p>\n</div></div>",
        "id": 345909257,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1680259925
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/Error.20Thread.20for.20defining.20special.20type.20of.20gauss.20sums/near/345906288\">said</a>:</p>\n<blockquote>\n<p>This is the question you want to ask.</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">analysis.complex.basic</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">big_operators</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">F</span> <span class=\"bp\">→</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∑'</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"bp\">∑'</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>Yeah, I think that's the most succinct way to formalize my question. <br>\n<span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/Error.20Thread.20for.20defining.20special.20type.20of.20gauss.20sums/near/345907208\">said</a>:</p>\n<blockquote>\n<p>Wait -- what? Why are you using <code>∑'</code>?</p>\n</blockquote>\n<p>Actually, later on, I had to use <a href=\"https://leanprover-community.github.io/mathlib_docs/analysis/complex/basic.html#is_R_or_C.has_sum_conj\">this</a>  , so how do I find a finite analog of this lemma? Or do I need to prove it?</p>",
        "id": 345963650,
        "sender_full_name": "Suryansh Shrivastava",
        "timestamp": 1680271997
    },
    {
        "content": "<p>Try formalising just the statement you want to know the proof of (i.e. make a minimal working example of precisely the abstract statement you need), and using <code>library_search</code>?</p>",
        "id": 345965182,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1680272304
    },
    {
        "content": "<p>Oh, right, maybe I got it. I will update you guys with my progress</p>",
        "id": 345966105,
        "sender_full_name": "Suryansh Shrivastava",
        "timestamp": 1680272503
    }
]