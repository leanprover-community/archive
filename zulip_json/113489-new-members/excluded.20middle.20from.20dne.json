[
    {
        "content": "<p>I'm trying to prove  A \\/ not A using double negation elimination,</p>\n<div class=\"codehilite\"><pre><span></span>open classical\nvariable A : Prop\ntheorem dne ( h: not ( not A )) : A :=\nby_contradiction\n    (assume h1 : not A,\n        show false, from h h1)\nexample : A ∨ ¬ A :=\nhave h1 : not ( not ( A ∨ not A), from\n    assume hA : A,\n    have h2 : A ∨ ¬ A, from or.inl hA,\n    assume h3 : ¬ (A ∨ ¬ A),\n    show false, from h3 h2\nshow A ∨ ¬ A,from dne (A ∨ not A) h1\n</pre></div>\n\n\n<p>I'm getting these errors</p>\n<div class=\"codehilite\"><pre><span></span>em.lean:8:34: error\ninvalid expression\nem.lean:13:0: error\ninvalid &#39;have&#39; declaration, &#39;,&#39; expected\n</pre></div>\n\n\n<p>I dont knwo whats wrong with this.  Is this the right way to do this?</p>",
        "id": 160757904,
        "sender_full_name": "Manikhanta Teja",
        "timestamp": 1552548855
    },
    {
        "content": "<p>You should start with ensuring parentheses are balanced</p>",
        "id": 160758099,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1552549189
    },
    {
        "content": "<p>Sorry. Balanced it but no change. i think i didnt prove this <br>\n<code> have h1 : not ( not ( A ∨ not A), from</code></p>",
        "id": 160758338,
        "sender_full_name": "Manikhanta Teja",
        "timestamp": 1552549486
    },
    {
        "content": "<p>I have been using this software for a while now and I still look at code like this and find it incomprehensible. I know all this have, assume, from stuff is supposed to make it feel closer to English or whatever but for me it turns the code into spaghetti. <span class=\"user-mention\" data-user-id=\"212008\">@Manikhanta Teja</span> have you tried using tactic mode and more structured code with <code>{}</code> in?</p>",
        "id": 160758659,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1552549897
    },
    {
        "content": "<p>What does <code>assume</code> even do? How can I just randomly assume A in the middle of a proof of <code>not ( not ( A ∨ not A))</code>?</p>",
        "id": 160758821,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1552550139
    },
    {
        "content": "<p>Whilst I am not an expert in this horrible mode, I conjecture that if you're trying to prove things, you can't just write random assumptions like <code>assume hA : A</code> in the middle of a proof.</p>",
        "id": 160758887,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1552550208
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> I'm trying to understand how this working. I'm still a beginner. I'm sorry.</p>",
        "id": 160758917,
        "sender_full_name": "Manikhanta Teja",
        "timestamp": 1552550272
    },
    {
        "content": "<p>Are you reading TPIL?</p>",
        "id": 160758969,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1552550299
    },
    {
        "content": "<p>They start with this horrible mode</p>",
        "id": 160758970,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1552550305
    },
    {
        "content": "<p>I would probably have given up Lean there and then were it not for the fact that I had read a Coq tutorial that went straight into tactic mode</p>",
        "id": 160758978,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1552550329
    },
    {
        "content": "<p>Yeah i started with TPIL.</p>",
        "id": 160758992,
        "sender_full_name": "Manikhanta Teja",
        "timestamp": 1552550368
    },
    {
        "content": "<p>I teach a lot of beginners how to use Lean, and for a question like this I would <em>always</em> start with the following template:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">∨</span> <span class=\"bp\">¬</span> <span class=\"n\">A</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">sorry</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 160758993,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1552550369
    },
    {
        "content": "<p>Here is a crazy suggestion: just stop what you're doing, go straight to chapter 5, and read a bit about doing basic logic in tactic mode.</p>",
        "id": 160758999,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1552550396
    },
    {
        "content": "<p>The absolutely massive advantage of tactic mode for beginners is that <em>at all times</em> you can see <em>exactly</em> what you have already proved, and what you are trying to prove.</p>",
        "id": 160759057,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1552550422
    },
    {
        "content": "<p>Starting chapter 5 now. Thanks.</p>",
        "id": 160759088,
        "sender_full_name": "Manikhanta Teja",
        "timestamp": 1552550485
    },
    {
        "content": "<blockquote>\n<p>What does <code>assume</code> even do? How can I just randomly assume A in the middle of a proof of <code>not ( not ( A ∨ not A))</code>?</p>\n</blockquote>\n<p><code>assume</code> is just notation for <code>λ</code></p>",
        "id": 160762719,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1552554607
    },
    {
        "content": "<p>So that answers the question of why the original code didn't compile -- the <code>assume ha : A</code> looks invalid because it would only work for goals of the form <code>A -&gt; &lt;something&gt;</code></p>",
        "id": 160763347,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1552555238
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>open classical\nvariable A : Prop\ntheorem dne ( h: not ( not A )) : A :=\nby_contradiction\n    (assume h1 : not A,\n        show false, from h h1)\nexample : A ∨ ¬ A :=\nhave hN : not ( not ( A ∨ not A), from\n    (assume h1 :  ¬ (A ∨ ¬ A),\n        have h2 : ¬ A, from\n            assume h3 : A,\n            have h4 : A ∨ ¬ A, from or.inl h3,\n            show false, from h1 h4,\n        have h5 : A ∨ ¬ A, from or.inr h2,\n        show false, from h1 h5)\nshow A ∨ ¬ A,from dne(A ∨ not A) hN\n</pre></div>\n\n\n<div class=\"codehilite\"><pre><span></span>em.lean:8:34: error\ninvalid expression\nem.lean:17:0: error\ninvalid &#39;have&#39; declaration, &#39;,&#39; expected\n</pre></div>\n\n\n<p>This is what i was trying to do. Get  ¬¬(A ∨ ¬A) → A ∨ ¬A from dne( A \\/ not A) and then apply implication elimination of  ¬¬(A ∨ ¬A) → A ∨ ¬A to get  A ∨ ¬A.<br>\nThe proof for  ¬¬(A ∨ ¬A) worked</p>\n<div class=\"codehilite\"><pre><span></span>variable A : Prop\ntheorem cc : ¬ (¬ ( A ∨ ¬ A)) :=\n(assume h1 :  ¬ (A ∨ ¬ A),\n    have h2 : ¬ A, from\n        assume h3 : A,\n        have h4 : A ∨ ¬ A, from or.inl h3,\n        show false, from h1 h4,\n    have h5 : A ∨ ¬ A, from or.inr h2,\n    show false, from h1 h5)\n</pre></div>\n\n\n<p>Is there anything wrong with this<br>\n<code>show A ∨ ¬ A,from dne(A ∨ not A) hN</code></p>",
        "id": 160834476,
        "sender_full_name": "Manikhanta Teja",
        "timestamp": 1552608103
    },
    {
        "content": "<p>The error seems to indicate you've got the syntax wrong somewhere.</p>",
        "id": 160834894,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1552608587
    },
    {
        "content": "<p>There's a missing comma after <code>show false, from h1 h5)</code></p>",
        "id": 160834997,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1552608696
    },
    {
        "content": "<p>Still have a problem with<br>\n<code>em.lean:8:34: error\ninvalid expression</code></p>",
        "id": 160835075,
        "sender_full_name": "Manikhanta Teja",
        "timestamp": 1552608809
    },
    {
        "content": "<p>Got it. I'm an idiot. I didn't balance the paranthesis.</p>",
        "id": 160835140,
        "sender_full_name": "Manikhanta Teja",
        "timestamp": 1552608862
    },
    {
        "content": "<p>If you were to use tactic mode you would have none of these problems and the errors would be far less obscure</p>",
        "id": 160835451,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1552609258
    },
    {
        "content": "<p>Tactic mode forces you to structure your proofs properly</p>",
        "id": 160835469,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1552609283
    },
    {
        "content": "<p>I have worked up some exercises related to the Excluded Middle (EM).  Please correct my wording or expand on my thoughts. Let me know if possibly these notes would be useful for a novice or where I could post them.<br>\nThanks for your time.</p>\n<p>Is the EM essentially confined to a Boolean-like system?</p>\n<p>In the context of a Boolean system are the Excluded Middle(EM) and Double Negative (DNE) Principles logically equivalent? <br>\nDNE &lt;-&gt; EM</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c\">/-</span><span class=\"cm\"> A set of Exercises related to the Excluded Middle (EM)-/</span>\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"n\">Q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n\n<span class=\"c\">/-</span><span class=\"cm\">If (P OR Q) is False, then both P AND Q must be False: OR TT -/</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"bp\">∨</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"bp\">¬</span><span class=\"n\">P</span> <span class=\"bp\">∧</span> <span class=\"bp\">¬</span><span class=\"n\">Q</span> <span class=\"o\">:=</span>\n  <span class=\"k\">fun</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">have</span> <span class=\"n\">np</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">p</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">inl</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"c\">/-</span><span class=\"cm\"> P -&gt; False -/</span>\n    <span class=\"k\">have</span> <span class=\"n\">nq</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">q</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"c\">/-</span><span class=\"cm\"> Q -&gt; False -/</span>\n    <span class=\"o\">⟨</span> <span class=\"n\">np</span><span class=\"o\">,</span> <span class=\"n\">nq</span> <span class=\"o\">⟩</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"> Similarly, the negative of the EM implies that both P and ¬P</span>\n<span class=\"cm\">   are False : which is contradictory. Therefore the negative</span>\n<span class=\"cm\">   of the negative of the EM is True. -/</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">negnegEM</span> <span class=\"o\">:</span><span class=\"bp\">¬</span> <span class=\"o\">(</span><span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"bp\">∨</span> <span class=\"bp\">¬</span><span class=\"n\">P</span> <span class=\"o\">))</span> <span class=\"o\">:=</span>\n  <span class=\"k\">fun</span> <span class=\"n\">nem</span> <span class=\"bp\">=&gt;</span>                          <span class=\"c\">/-</span><span class=\"cm\"> nem: ¬(P ∨ ¬P ) -/</span>\n    <span class=\"k\">have</span> <span class=\"n\">np</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">p</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">nem</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">inl</span> <span class=\"n\">p</span><span class=\"o\">)</span>  <span class=\"c\">/-</span><span class=\"cm\"> P -&gt; False -/</span>\n    <span class=\"k\">have</span> <span class=\"n\">nnp</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">np</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">nem</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"n\">np</span><span class=\"o\">)</span> <span class=\"c\">/-</span><span class=\"cm\"> ¬P -&gt; False -/</span>\n    <span class=\"n\">absurd</span> <span class=\"n\">np</span> <span class=\"n\">nnp</span> <span class=\"c\">/-</span><span class=\"cm\"> ¬P and ¬(¬P) are contradictory =&gt; ¬¬ EM  -/</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Classical</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"> The Double Negation Theorem requires the EM : (P ∨ ¬ P)-/</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">DNE</span> <span class=\"o\">:</span> <span class=\"bp\">¬¬</span><span class=\"n\">P</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">P</span> <span class=\"o\">:=</span>\n  <span class=\"k\">fun</span> <span class=\"n\">nnp</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"n\">Or.elim</span> <span class=\"o\">(</span><span class=\"n\">em</span> <span class=\"n\">P</span><span class=\"o\">)</span>   <span class=\"c\">/-</span><span class=\"cm\"> P must be True or False -/</span>\n    <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">p</span>  <span class=\"bp\">=&gt;</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"c\">/-</span><span class=\"cm\"> We are done -/</span>\n    <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">np</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">absurd</span> <span class=\"n\">np</span> <span class=\"n\">nnp</span><span class=\"o\">)</span> <span class=\"c\">/-</span><span class=\"cm\"> ¬P and ¬(¬P) are contradictory</span>\n<span class=\"cm\">                               So P cannot be False -/</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"> On the other hand, given DNE we can easily prove the EM -/</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">EM</span>  <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"bp\">∨</span> <span class=\"bp\">¬</span><span class=\"n\">P</span> <span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"k\">have</span> <span class=\"n\">nnEM</span> <span class=\"o\">:=</span> <span class=\"n\">negnegEM</span> <span class=\"n\">P</span>\n  <span class=\"n\">DNE</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"bp\">∨¬</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"n\">nnEM</span> <span class=\"c\">/-</span><span class=\"cm\"> By DNE the double negation of EM</span>\n<span class=\"cm\">                       implies EM -/</span>\n</code></pre></div>",
        "id": 387579564,
        "sender_full_name": "Don Burgess",
        "timestamp": 1693186520
    },
    {
        "content": "<p>You proved that EM and DNE are equivalent, in the logic of Lean4. (This is (also) a theorem of intuitionistic logic.) It might be clearer to prove it without axioms. For example (this is your proof again, but overly golfed),</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">em_iff_dne</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">),</span> <span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"bp\">¬</span><span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">),</span> <span class=\"bp\">¬¬</span><span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span>\n    <span class=\"k\">fun</span> <span class=\"n\">hem</span> <span class=\"n\">p</span> <span class=\"n\">hnnp</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Or.elim</span> <span class=\"o\">(</span><span class=\"n\">hem</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"n\">id</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">hnp</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">absurd</span> <span class=\"n\">hnp</span> <span class=\"n\">hnnp</span><span class=\"o\">),</span>\n    <span class=\"k\">fun</span> <span class=\"n\">hdne</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">hdne</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">hnem</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">absurd</span> <span class=\"o\">(</span><span class=\"n\">hnem</span> <span class=\"bp\">∘</span> <span class=\"n\">Or.inl</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hnem</span> <span class=\"bp\">∘</span> <span class=\"n\">Or.inr</span><span class=\"o\">))⟩</span>\n\n<span class=\"k\">#print</span> <span class=\"kd\">axioms</span> <span class=\"n\">em_iff_dne</span> <span class=\"c1\">-- 'em_iff_dne' does not depend on any axioms</span>\n</code></pre></div>\n<p>The proof uses the principle that anything follows from a contradiction, so it doesn't go through in a <a href=\"https://en.wikipedia.org/wiki/Paraconsistent_logic\">paraconsistent logic</a>. That might be interesting to think about, but it's hard to reason about it in Lean because that principle is built in.</p>\n<p>Another interesting equivalence (in intuitionistic logic) is between <a href=\"https://ncatlab.org/nlab/show/weak+excluded+middle\">Weak Excluded Middle</a> and De Morgan's Law. You can prove all of these without axioms in Lean:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">deMorgan1</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">¬</span><span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"bp\">¬</span><span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">deMorgan2</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">¬</span><span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"bp\">¬</span><span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">deMorgan3</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">¬</span><span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"bp\">¬</span><span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"c1\">-- Double negation preserves conjunction</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">not_not_and</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"bp\">¬¬</span><span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"bp\">¬¬</span><span class=\"n\">q</span> <span class=\"bp\">→</span> <span class=\"bp\">¬¬</span><span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"c1\">-- De Morgan's Law is equivalent to weak excluded middle</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">deMorgan_iff_wem</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">),</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">¬</span><span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"bp\">¬</span><span class=\"n\">q</span><span class=\"o\">))</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">),</span> <span class=\"bp\">¬</span><span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"bp\">¬¬</span><span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>Here are some more exercises that can be proved without axioms.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- (1) Constructively, ¬(p ↔ q) is equivalent to (¬p → ¬¬q) ∧ (q → ¬p).</span>\n<span class=\"c1\">-- (2) Constructively, ¬p ↔ q implies ¬(p ↔ q).</span>\n<span class=\"c1\">-- (3) The classical theorem ¬(p ↔ q) → (¬p ↔ q) is equivalent to dne.</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">part1</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">↔</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"bp\">¬</span><span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"bp\">¬¬</span><span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"bp\">→</span> <span class=\"bp\">¬</span><span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">part2</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">¬</span><span class=\"n\">p</span> <span class=\"bp\">↔</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">↔</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">part3</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">,</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">↔</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">¬</span><span class=\"n\">p</span> <span class=\"bp\">↔</span> <span class=\"n\">q</span><span class=\"o\">))</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">,</span> <span class=\"bp\">¬¬</span><span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>I don't know about any systematic study of this sort of thing, but I haven't searched very hard for one!</p>",
        "id": 387615043,
        "sender_full_name": "Richard Copley",
        "timestamp": 1693208081
    },
    {
        "content": "<p>A good reference I like is the first chapter of Borceux volume 3.</p>",
        "id": 387617863,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1693209351
    },
    {
        "content": "<p>Thanks for your feedback.</p>\n<p><span class=\"user-mention\" data-user-id=\"400544\">@Buster</span> </p>\n<p>Thank you for your time.</p>\n<p>Would you give some explanation to the CIRC operator you use in your proof of \"em_iff_dne\"?</p>\n<p>How do I apply a theorem to a process inside a negation? I would like to apply De Morgan 1 to </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"bp\">¬</span><span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"bp\">¬</span><span class=\"n\">q</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>to obtain</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">¬¬</span><span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">q</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>in order to prove \"not_not_and\".</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">deMorgan1</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">¬</span><span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"bp\">¬</span><span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"k\">fun</span> <span class=\"n\">h1</span> <span class=\"n\">h2</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"n\">Or.elim</span> <span class=\"n\">h1</span>\n    <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">np</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">absurd</span> <span class=\"n\">h2.left</span> <span class=\"n\">np</span><span class=\"o\">)</span>   <span class=\"c\">/-</span><span class=\"cm\"> ¬P -&gt; False -/</span>\n    <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">nq</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">absurd</span> <span class=\"n\">h2.right</span> <span class=\"n\">nq</span><span class=\"o\">)</span>  <span class=\"c\">/-</span><span class=\"cm\"> ¬Q -&gt; False -/</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"> If (¬p ∨ ¬q) is True then at least one of p,q is False which makes (p ∧ q) False</span>\n<span class=\"cm\">   and ¬(p ∧ q) True -/</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">deMorgan2</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">¬</span><span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"bp\">¬</span><span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"k\">fun</span> <span class=\"n\">hAnd</span> <span class=\"n\">hOr</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">Or.elim</span> <span class=\"o\">(</span><span class=\"n\">hOr</span><span class=\"o\">)</span>\n      <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">p</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">absurd</span> <span class=\"n\">p</span> <span class=\"n\">hAnd.left</span><span class=\"o\">)</span>\n      <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">q</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">absurd</span> <span class=\"n\">q</span> <span class=\"n\">hAnd.right</span><span class=\"o\">)</span>\n<span class=\"c\">/-</span><span class=\"cm\"> If (¬p ∧ ¬q) is True, then both p,q are False</span>\n<span class=\"cm\">  which makes (p ∨ q) False and ¬(p ∨ q) True. -/</span>\n\n<span class=\"c1\">-- Double negation preserves conjunction</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">not_not_and</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"bp\">¬¬</span><span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"bp\">¬¬</span><span class=\"n\">q</span> <span class=\"bp\">→</span> <span class=\"bp\">¬¬</span><span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"k\">fun</span> <span class=\"n\">nnp</span> <span class=\"n\">nnq</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span>                                      <span class=\"c\">/-</span><span class=\"cm\"> h: ¬(p ∧ q) -/</span>\n    <span class=\"k\">have</span> <span class=\"n\">nh1</span> <span class=\"o\">:=</span> <span class=\"n\">deMorgan2</span> <span class=\"o\">⟨</span> <span class=\"n\">nnp</span><span class=\"o\">,</span><span class=\"n\">nnq</span> <span class=\"o\">⟩</span>                 <span class=\"c\">/-</span><span class=\"cm\"> nh1: ¬(¬p ∨ ¬q) -/</span>\n    <span class=\"c\">/-</span><span class=\"cm\"> deMorgan1 applied to nh1 yields ¬¬(p ∨ q) -/</span>\n</code></pre></div>",
        "id": 388011924,
        "sender_full_name": "Don Burgess",
        "timestamp": 1693361290
    },
    {
        "content": "<p>The circle is function composition: <code>hnem ∘ Or.inl</code> is the same function as <code>fun p =&gt; (hnem ∘ Or.inl) p</code>, which is the same as <code>fun p =&gt; hnem (Or.inl p)</code>, which you'll recognise from your own proof.</p>\n<p><code>deMorgan1</code> goes in the wrong direction for you to apply it there. You have as hypotheses implications of the form <code>nh1: (¬p ∨ ¬q) → A</code> and <code>deMorgan1: (¬p ∨ ¬q) → B</code> <del>; you can't apply either of them since you don't have <code>¬p ∧ ¬q</code></del> [Edit:] Those two implications don't chain together in the way you seem to want, if I understand correctly.</p>\n<p>The proof of <code>not_not_and</code> is tricky.</p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>Spoiler 1</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<p>From your hypotheses <code>¬¬q</code> and <code>¬(p ∧ q)</code>, you can prove <code>¬p</code>.</p>\n</div></div>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>Spoiler 2</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<p>From the hypotheses <code>¬(p ∧ q)</code> and <code>p</code>, you can prove <code>¬q</code>.</p>\n</div></div>",
        "id": 388016696,
        "sender_full_name": "Richard Copley",
        "timestamp": 1693363191
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"634891\">@Don Burgess</span>, ok? Please ask if not.</p>",
        "id": 388215245,
        "sender_full_name": "Richard Copley",
        "timestamp": 1693440248
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"400544\">Buster</span> <a href=\"#narrow/stream/113489-new-members/topic/excluded.20middle.20from.20dne/near/388215245\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"634891\">Don Burgess</span>, ok? Please ask if not.</p>\n</blockquote>\n<p>Thanks for your hints :) </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">nnp_nAnd_nq</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">:</span><span class=\"bp\">¬¬</span><span class=\"n\">p</span> <span class=\"bp\">-&gt;</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"bp\">¬</span><span class=\"n\">q</span>  <span class=\"o\">:=</span>\n  <span class=\"k\">fun</span> <span class=\"n\">nnp</span> <span class=\"n\">h</span> <span class=\"n\">hq</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">have</span> <span class=\"n\">np</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">hp</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">h</span> <span class=\"o\">⟨</span> <span class=\"n\">hp</span><span class=\"o\">,</span><span class=\"n\">hq</span> <span class=\"o\">⟩</span>\n    <span class=\"n\">absurd</span> <span class=\"n\">np</span> <span class=\"n\">nnp</span>\n\n<span class=\"c1\">-- Double negation preserves conjunction</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">not_not_and</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"bp\">¬¬</span><span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"bp\">¬¬</span><span class=\"n\">q</span> <span class=\"bp\">→</span> <span class=\"bp\">¬¬</span><span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"k\">fun</span> <span class=\"n\">nnp</span> <span class=\"n\">nnq</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span>                                      <span class=\"c\">/-</span><span class=\"cm\"> h: ¬(p ∧ q) -/</span>\n    <span class=\"k\">have</span> <span class=\"n\">nq</span> <span class=\"o\">:=</span> <span class=\"n\">nnp_nAnd_nq</span> <span class=\"n\">nnp</span> <span class=\"n\">h</span>\n    <span class=\"k\">have</span> <span class=\"n\">h1</span> <span class=\"o\">:=</span> <span class=\"n\">Or.intro_right</span> <span class=\"o\">(</span><span class=\"bp\">¬</span><span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"n\">nq</span>\n    <span class=\"k\">have</span> <span class=\"n\">nh1</span> <span class=\"o\">:=</span> <span class=\"n\">deMorgan2</span> <span class=\"o\">⟨</span> <span class=\"n\">nnp</span><span class=\"o\">,</span><span class=\"n\">nnq</span> <span class=\"o\">⟩</span>                 <span class=\"c\">/-</span><span class=\"cm\"> nh1: ¬(¬p ∨ ¬q) -/</span>\n    <span class=\"n\">absurd</span> <span class=\"n\">h1</span> <span class=\"n\">nh1</span>\n</code></pre></div>\n<p>In principle I think you should be able to prove \"not_not_and\" using De Morgan 1:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c\">/-</span><span class=\"cm\"> ¬(¬p) ∧ ¬(¬q) = ¬ (¬ p ∨ ¬q) by De Morgan 2</span>\n<span class=\"cm\">  ¬(¬ p ∨ ¬q) = ¬ ¬ (p ∧ q) by De Morgan 1  -/</span>\n</code></pre></div>\n<p>But I do not know how to apply a theorem inside a NOT.</p>",
        "id": 388221662,
        "sender_full_name": "Don Burgess",
        "timestamp": 1693443181
    },
    {
        "content": "<p>You cannot deduce <code>¬q</code> from <code>p → q</code> and <code>¬p</code>.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">¬∀</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">},</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"bp\">¬</span><span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"bp\">¬</span><span class=\"n\">q</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">h</span> <span class=\"n\">False.elim</span> <span class=\"n\">not_false</span> <span class=\"n\">trivial</span>\n</code></pre></div>\n<p>You can deduce <code>¬q</code> from <code>q → p</code> and <code>¬p</code>.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"bp\">→</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"bp\">¬</span><span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"bp\">¬</span><span class=\"n\">q</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">h</span> <span class=\"n\">hnp</span> <span class=\"n\">hq</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">hnp</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"n\">hq</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>So it is \"<code>deMorgan4</code>\" that you would need there, not <code>deMorgan1</code>.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">deMorgan4</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">¬</span><span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"bp\">¬</span><span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">not_not_and'</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"bp\">¬¬</span><span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"bp\">¬¬</span><span class=\"n\">q</span> <span class=\"bp\">→</span> <span class=\"bp\">¬¬</span><span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"k\">fun</span> <span class=\"n\">hnnp</span> <span class=\"n\">hnnq</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"bp\">¬</span><span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"bp\">¬</span><span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">deMorgan2</span> <span class=\"o\">⟨</span><span class=\"n\">hnnp</span><span class=\"o\">,</span> <span class=\"n\">hnnq</span><span class=\"o\">⟩</span>\n    <span class=\"n\">mt</span> <span class=\"n\">deMorgan4</span> <span class=\"n\">h</span>\n</code></pre></div>\n<p>But <code>deMorgan4</code> is not a theorem of intuitionistic logic. (You can use <code>not_not_and</code> to prove <code>deMorgan_iff_wem</code>.)</p>",
        "id": 388293430,
        "sender_full_name": "Richard Copley",
        "timestamp": 1693477673
    }
]