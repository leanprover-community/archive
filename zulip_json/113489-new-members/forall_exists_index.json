[
    {
        "content": "<p>Can anyone explain to me what this theorem does (explanation of its proof is not needed), and how it is getting applied in this context?</p>\n<p>∃ x, (∀ (i : I), x ∈ A i) ∧ f x = y  iff  ∀ (x : α), (∀ (i : I), x ∈ A i) ∧ f x = y</p>",
        "id": 389999930,
        "sender_full_name": "Vivek Rajesh Joshi",
        "timestamp": 1694240068
    },
    {
        "content": "<p>Can you post a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> so we can run the code on our own computer with little effort (and in particular understand the types of the terms involved in your statement)? You ask about a theorem being applied but as far as I can see you're just writing down a true/false statement, there is no proof or application</p>",
        "id": 390000350,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1694240427
    },
    {
        "content": "<p>It would be like me writing <code>2+2=5</code> and asking how it is getting applied</p>",
        "id": 390000430,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1694240513
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=forall_exists_index#doc\">docs#forall_exists_index</a></p>",
        "id": 390000549,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1694240610
    },
    {
        "content": "<p>Oh I see, the clue is in the title (which is a lot less prominent on the mobile app). I still don't understand the question though, where's the application?</p>",
        "id": 390000699,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1694240735
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/forall_exists_index/near/390000699\">said</a>:</p>\n<blockquote>\n<p>Oh I see, the clue is in the title (which is a lot less prominent on the mobile app). I still don't understand the question though, where's the application?</p>\n</blockquote>\n<p>Sorry, I'll keep that in mind next time.<br>\nThe line I have written is part of a proof for a theorem. The goal had the expression on the LHS, and <code>simp</code> converted it to the expression in the RHS. After typing <code>simp?</code>, I realised that it used the theorem <code>forall_exists_index</code> to do this. I am unable to understand how this theorem was used here, and why the conversion makes sense.</p>",
        "id": 390007917,
        "sender_full_name": "Vivek Rajesh Joshi",
        "timestamp": 1694246428
    },
    {
        "content": "<p>Then post a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> (that's a link)</p>",
        "id": 390011055,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1694249034
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Set.Lattice</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Set.Function</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Analysis.SpecialFunctions.Log.Basic</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span>\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Function</span>\n<span class=\"kn\">open</span> <span class=\"n\">Set</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">I</span> <span class=\"bp\">→</span> <span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">I</span> <span class=\"bp\">→</span> <span class=\"n\">Set</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">''</span> <span class=\"bp\">⋂</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">A</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">⊆</span> <span class=\"bp\">⋂</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"bp\">''</span> <span class=\"n\">A</span> <span class=\"n\">i</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">y</span><span class=\"bp\">;</span> <span class=\"n\">simp</span>\n  <span class=\"n\">intro</span> <span class=\"n\">x</span> <span class=\"n\">h</span> <span class=\"n\">fxeq</span> <span class=\"n\">i</span>\n  <span class=\"n\">use</span> <span class=\"n\">x</span>\n  <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">h</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">fxeq</span><span class=\"o\">⟩</span>\n</code></pre></div>",
        "id": 390016728,
        "sender_full_name": "Vivek Rajesh Joshi",
        "timestamp": 1694253316
    },
    {
        "content": "<p>Yeah so <code>simp?</code> reports that it uses <code>forall_exists_index</code>. We can take the <code>simp</code> call apart a bit more and see exactly what it's doing:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span>\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Function</span>\n<span class=\"kn\">open</span> <span class=\"n\">Set</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">I</span> <span class=\"bp\">→</span> <span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">I</span> <span class=\"bp\">→</span> <span class=\"n\">Set</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">forall_exists_index</span>\n<span class=\"c\">/-</span>\n<span class=\"cm\">forall_exists_index.{u_1} {α : Sort u_1} {p : α → Prop} {q : (∃ x, p x) → Prop} :</span>\n<span class=\"cm\">  (∀ (h : ∃ x, p x), q h) ↔ ∀ (x : α) (h : p x), q (_ : ∃ x, p x)</span>\n<span class=\"cm\">-/</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">''</span> <span class=\"bp\">⋂</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">A</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">⊆</span> <span class=\"bp\">⋂</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"bp\">''</span> <span class=\"n\">A</span> <span class=\"n\">i</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">y</span><span class=\"bp\">;</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"bp\">-</span><span class=\"n\">forall_exists_index</span><span class=\"o\">]</span> <span class=\"c1\">-- don't use it yet</span>\n  <span class=\"c1\">-- ⊢ (∃ x, (∀ (i : I), x ∈ A i) ∧ f x = y) → ∀ (i : I), ∃ x, x ∈ A i ∧ f x = y</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">forall_exists_index</span><span class=\"o\">]</span>\n  <span class=\"c1\">-- ⊢ ∀ (x : α), (∀ (i : I), x ∈ A i) ∧ f x = y → ∀ (i : I), ∃ x, x ∈ A i ∧ f x = y</span>\n  <span class=\"n\">simp</span>\n  <span class=\"n\">intro</span> <span class=\"n\">x</span> <span class=\"n\">h</span> <span class=\"n\">fxeq</span> <span class=\"n\">i</span>\n  <span class=\"n\">use</span> <span class=\"n\">x</span>\n  <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">h</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">fxeq</span><span class=\"o\">⟩</span>\n</code></pre></div>\n<p>So before the application of <code>forall_exists_index</code> the goal is (there exists x such that P x) -&gt; Q, and after the application it's (for all x, P x -&gt; Q), and that's what the lemma says (actually the lemma says something slightly more general but what the heck) so that's what it's doing.</p>",
        "id": 390038449,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1694268919
    },
    {
        "content": "<p>I understand what <code>simp</code> is doing,  it is just rewriting the LHS of the lemma as the RHS. I just can't wrap my head around why that replacement makes sense, and what q and h are in this case.</p>",
        "id": 390040086,
        "sender_full_name": "Vivek Rajesh Joshi",
        "timestamp": 1694270288
    },
    {
        "content": "<p>In the application, <code>h</code> is a proof of <code>(∃ x, (∀ (i : I), x ∈ A i) ∧ f x = y)</code> and <code>q</code> is the function which eats <code>h</code>, ignores it (which is why I said that the lemma was more general than needed) and returns a proof of <code>∀ (i : I), ∃ x, x ∈ A i ∧ f x = y</code> (a statement which doesn't depend on <code>h</code>).</p>",
        "id": 390040869,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1694270958
    }
]