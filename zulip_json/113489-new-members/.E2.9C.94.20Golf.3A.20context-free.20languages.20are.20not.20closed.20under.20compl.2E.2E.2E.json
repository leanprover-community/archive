[
    {
        "content": "<p>I have a golfing request.<br>\nI proved that context-free languages aren't closed under complement.<br>\n<a href=\"https://github.com/madvorak/grammars/blob/main/src/context_free/closure_properties/unary/complement_CF.lean\">https://github.com/madvorak/grammars/blob/main/src/context_free/closure_properties/unary/complement_CF.lean</a><br>\nThe file is over 50 lines long, despite of the fact that the proof is basically just De Morgan.</p>\n<p>I have theorem <code>CF_of_CF_u_CF</code> saying that context-free languages are closed under union.<br>\nI have theorem <code>nnyCF_of_CF_i_CF</code> saying that context-free languages aren't closed under intersection.<br>\nIt immediately follows that (theorem <code>nnyCF_of_complement_CF </code> which I prove in this file) aren't closed under complement.<br>\nMaybe there is a one-line proof that will do the same.</p>",
        "id": 316925211,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1671534805
    },
    {
        "content": "<p>Line 26 can be</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">intro</span> <span class=\"n\">hv</span><span class=\"bp\">;</span> <span class=\"n\">finish</span>\n</code></pre></div>\n<p>and then then rest isn't needed</p>",
        "id": 316938036,
        "sender_full_name": "David Renshaw",
        "timestamp": 1671539090
    },
    {
        "content": "<p>Unfortunately, that increases the verification time from 130 ms to 4688 ms. Could you please golf a proof term instead?</p>",
        "id": 316939478,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1671539605
    },
    {
        "content": "<p>Just yesterday, I was refactoring some <code>finish</code> lines away, in order to speed up verification.</p>",
        "id": 316939828,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1671539701
    },
    {
        "content": "<p><code>rwa [language.add_def, set.compl_union, compl_compl, compl_compl] at contra,</code> closes the goal on line 24</p>",
        "id": 316940311,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1671539856
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113489-new-members/topic/Golf.3A.20context-free.20languages.20are.20not.20closed.20under.20complement/near/316940311\">said</a>:</p>\n<blockquote>\n<p><code>rwa [language.add_def, set.compl_union, compl_compl, compl_compl] at contra,</code> closes the goal on line 24</p>\n</blockquote>\n<p>Thanks a lot!!</p>\n<p><a href=\"https://github.com/madvorak/grammars/commit/eeca448ca5b22a8a53683e9464d81ec9438a9d78\">https://github.com/madvorak/grammars/commit/eeca448ca5b22a8a53683e9464d81ec9438a9d78</a></p>",
        "id": 316948621,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1671542462
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"417654\">Martin Dvořák</span> has marked this topic as resolved.</p>",
        "id": 316948645,
        "sender_full_name": "Notification Bot",
        "timestamp": 1671542469
    },
    {
        "content": "<p>PS: Maybe these three lines can be turned into one?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">have</span> <span class=\"n\">nny</span> <span class=\"o\">:=</span> <span class=\"n\">nnyCF_of_CF_i_CF</span><span class=\"o\">,</span>\n<span class=\"n\">push_neg</span> <span class=\"n\">at</span> <span class=\"n\">nny</span><span class=\"o\">,</span>\n<span class=\"n\">rcases</span> <span class=\"n\">nny</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">T</span><span class=\"o\">,</span> <span class=\"n\">L₁</span><span class=\"o\">,</span> <span class=\"n\">L₂</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">hL₁</span><span class=\"o\">,</span> <span class=\"n\">hL₂</span><span class=\"o\">⟩,</span> <span class=\"n\">hyp_neg</span><span class=\"o\">⟩,</span>\n</code></pre></div>",
        "id": 316949187,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1671542638
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"417654\">Martin Dvořák</span> has marked this topic as unresolved.</p>",
        "id": 316949270,
        "sender_full_name": "Notification Bot",
        "timestamp": 1671542651
    },
    {
        "content": "<p>I doubt it, that <code>push_neg</code> is doing a lott of work</p>",
        "id": 316950563,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1671543096
    },
    {
        "content": "<p>I wonder if <code>nnyCF_of_CF_i_CF</code> should be the <code>push_neg</code>'d version from the start, though</p>",
        "id": 316950668,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1671543131
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"284160\">Eric Rodriguez</span> <a href=\"#narrow/stream/113489-new-members/topic/Golf.3A.20context-free.20languages.20are.20not.20closed.20under.20compl.2E.2E.2E/near/316950668\">said</a>:</p>\n<blockquote>\n<p>I wonder if <code>nnyCF_of_CF_i_CF</code> should be the <code>push_neg</code>'d version from the start, though</p>\n</blockquote>\n<p>For building on top of it, yes. For presentation of the results, no.</p>",
        "id": 316950864,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1671543210
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"284160\">Eric Rodriguez</span> <a href=\"#narrow/stream/113489-new-members/topic/Golf.3A.20context-free.20languages.20are.20not.20closed.20under.20compl.2E.2E.2E/near/316950563\">said</a>:</p>\n<blockquote>\n<p>I doubt it, that <code>push_neg</code> is doing a lott of work</p>\n</blockquote>\n<p>Maybe there is something like the following (incorrect code)?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">rcases</span> <span class=\"o\">(</span><span class=\"n\">push_neg_result</span> <span class=\"o\">{</span> <span class=\"n\">nnyCF_of_CF_i_CF</span> <span class=\"o\">})</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">T</span><span class=\"o\">,</span> <span class=\"n\">L₁</span><span class=\"o\">,</span> <span class=\"n\">L₂</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">hL₁</span><span class=\"o\">,</span> <span class=\"n\">hL₂</span><span class=\"o\">⟩,</span> <span class=\"n\">hyp_neg</span><span class=\"o\">⟩,</span>\n</code></pre></div>",
        "id": 316951178,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1671543283
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"284160\">Eric Rodriguez</span> <a href=\"#narrow/stream/113489-new-members/topic/Golf.3A.20context-free.20languages.20are.20not.20closed.20under.20compl.2E.2E.2E/near/316950668\">said</a>:</p>\n<blockquote>\n<p>I wonder if <code>nnyCF_of_CF_i_CF</code> should be the <code>push_neg</code>'d version from the start, though</p>\n</blockquote>\n<p>I could even state the theorem for the concrete counterexample. But I like it better when it stays abstract on the outside.</p>",
        "id": 316951601,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1671543396
    },
    {
        "content": "<p>This is another obvious candidate for refactoring:<br>\n<a href=\"https://github.com/madvorak/grammars/blob/eeca448ca5b22a8a53683e9464d81ec9438a9d78/src/context_free/closure_properties/binary/CF_intersection_CF.lean#L1441\">https://github.com/madvorak/grammars/blob/eeca448ca5b22a8a53683e9464d81ec9438a9d78/src/context_free/closure_properties/binary/CF_intersection_CF.lean#L1441</a><br>\nHowever, I feel less like changing this one.</p>",
        "id": 316952223,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1671543567
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"417654\">Martin Dvořák</span> <a href=\"#narrow/stream/113489-new-members/topic/Golf.3A.20context-free.20languages.20are.20not.20closed.20under.20compl.2E.2E.2E/near/316952223\">said</a>:</p>\n<blockquote>\n<p>This is another obvious candidate for refactoring:<br>\n<a href=\"https://github.com/madvorak/grammars/blob/eeca448ca5b22a8a53683e9464d81ec9438a9d78/src/context_free/closure_properties/binary/CF_intersection_CF.lean#L1441\">https://github.com/madvorak/grammars/blob/eeca448ca5b22a8a53683e9464d81ec9438a9d78/src/context_free/closure_properties/binary/CF_intersection_CF.lean#L1441</a><br>\nHowever, I feel less like changing this one.</p>\n</blockquote>\n<p>I golfed it a little bit anyways. Ignore that one.</p>",
        "id": 316956637,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1671544810
    },
    {
        "content": "<p>Can <code>push_neg</code> be used as a function that takes a term and outputs a term?</p>",
        "id": 316973960,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1671549442
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"417654\">Martin Dvořák</span> has marked this topic as resolved.</p>",
        "id": 316978321,
        "sender_full_name": "Notification Bot",
        "timestamp": 1671550663
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"417654\">Martin Dvořák</span> <a href=\"#narrow/stream/113489-new-members/topic/.E2.9C.94.20Golf.3A.20context-free.20languages.20are.20not.20closed.20under.20compl.2E.2E.2E/near/316973960\">said</a>:</p>\n<blockquote>\n<p>Can <code>push_neg</code> be used as a function that takes a term and outputs a term?</p>\n</blockquote>\n<p>Sure, that's <a href=\"https://leanprover-community.github.io/mathlib_docs/find/push_neg.normalize_negations\">docs#push_neg.normalize_negations</a>, but \"takes a term\" means \"takes an <code>expr</code>\"</p>",
        "id": 316989234,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1671553752
    },
    {
        "content": "<p>Can I use it in a similar way to how <code>dsimp_result</code> is used?</p>",
        "id": 316990390,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1671554119
    },
    {
        "content": "<p>No, it takes <code>typ : expr</code> and returns <code>(new_type, prf_eq_typ) : prod expr expr</code>. <code>dsimp_result</code> takes a <code>val : expr</code> and returns a <code>new_val : expr</code>, without needing any proof</p>",
        "id": 316997029,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1671556204
    },
    {
        "content": "<p>I don't think you want to go down this path if your aim is golfing</p>",
        "id": 316997112,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1671556230
    },
    {
        "content": "<p>A much better way of golfing this would be to state a version of <code>nnyCF_of_CF_i_CF</code> about the specific example that's interesting</p>",
        "id": 316997255,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1671556296
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"417654\">Martin Dvořák</span> has marked this topic as unresolved.</p>",
        "id": 316998826,
        "sender_full_name": "Notification Bot",
        "timestamp": 1671556787
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"417654\">Martin Dvořák</span> has marked this topic as resolved.</p>",
        "id": 316998857,
        "sender_full_name": "Notification Bot",
        "timestamp": 1671556798
    }
]