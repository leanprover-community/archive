[
    {
        "content": "<p>Why does this work</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">zero_dd</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">induction</span> <span class=\"n\">n</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rfl</span>\n  <span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"n\">n</span> <span class=\"n\">ih</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Nat.add_succ</span><span class=\"o\">,</span> <span class=\"n\">ih</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>but stops working with parentheses?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- [...]</span>\n  <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">ih</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Nat.add_succ</span><span class=\"o\">,</span> <span class=\"n\">ih</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>I would have thought an expression in parentheses evaluates to itself. Is it just how the <code>induction</code> macro parses stuff and it <em>has</em> to be <code>&lt;constructor-name&gt; &lt;arg-names&gt;  &lt;hypothesis-names&gt;</code> with no punctuation? I tried to look at the macro definition but it's too advanced for me.</p>",
        "id": 388224414,
        "sender_full_name": "Adomas Baliuka",
        "timestamp": 1693444454
    },
    {
        "content": "<p>The key thing to realize is that here <code>succ n ih</code> is not parsed as an expression, but as a constructor name followed by a list of identifiers</p>",
        "id": 388278437,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1693471821
    },
    {
        "content": "<p>The <code>|</code> here is parsed quite differently to how <code>match</code> handles it</p>",
        "id": 388278522,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1693471856
    },
    {
        "content": "<p>Yeah, they're more like the <code>case succ n ih =&gt; ...</code> tactic, for selecting a tactic by tag name and then renaming inaccessible hypotheses.</p>",
        "id": 388279257,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1693472158
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span>  Sorry, I don't understand. Does this mean that <code>succ</code> actually acts on <code>ih</code>somehow? In my mind, the hypothesis is somehow completely separate from what the constructor does. Or is it - after all - \"just the way the macro parses things\" with no deeper insights to be had there?</p>",
        "id": 388378188,
        "sender_full_name": "Adomas Baliuka",
        "timestamp": 1693504345
    },
    {
        "content": "<p><code>induction</code> doesn't literally use <code>case</code>, but at least this is equivalent in this case:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">zero_dd</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">induction</span> <span class=\"n\">n</span>\n  <span class=\"n\">case</span> <span class=\"n\">zero</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rfl</span>\n  <span class=\"n\">case</span> <span class=\"n\">succ</span> <span class=\"n\">n</span> <span class=\"n\">ih</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Nat.add_succ</span><span class=\"o\">,</span> <span class=\"n\">ih</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 388378733,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1693504555
    },
    {
        "content": "<p>Right after <code>induction n</code> there are two goals, one with tag <code>zero</code> and another with tag <code>succ</code>.</p>",
        "id": 388378866,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1693504602
    },
    {
        "content": "<p>The <code>succ</code> goal looks like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">case</span> <span class=\"n\">succ</span>\n<span class=\"n\">n</span><span class=\"bp\">✝</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span>\n<span class=\"n\">n_ih</span><span class=\"bp\">✝</span><span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"n\">n</span><span class=\"bp\">✝</span> <span class=\"bp\">=</span> <span class=\"n\">n</span><span class=\"bp\">✝</span>\n<span class=\"bp\">⊢</span> <span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"n\">Nat.succ</span> <span class=\"n\">n</span><span class=\"bp\">✝</span> <span class=\"bp\">=</span> <span class=\"n\">Nat.succ</span> <span class=\"n\">n</span><span class=\"bp\">✝</span>\n</code></pre></div>\n<p>and by giving <code>n</code> and <code>ih</code> it names these two inaccessible hypotheses (annotated with \"tombstones\")</p>",
        "id": 388378982,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1693504649
    },
    {
        "content": "<p>Here's another equivalent proof:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">zero_dd</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">induction</span> <span class=\"n\">n</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rfl</span>\n  <span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rename_i</span> <span class=\"n\">n</span> <span class=\"n\">ih</span><span class=\"bp\">;</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Nat.add_succ</span><span class=\"o\">,</span> <span class=\"n\">ih</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 388379167,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1693504710
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"638715\">ab</span> <a href=\"#narrow/stream/113489-new-members/topic/Induction.20cases.20syntax/near/388378188\">said</a>:</p>\n<blockquote>\n<p>Or is it - after all - \"just the way the macro parses things\" with no deeper insights to be had there?</p>\n</blockquote>\n<p>I think the answer is \"yes\", but at least we can see how it's related to other ways of writing the proof.</p>",
        "id": 388379470,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1693504818
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"638715\">ab</span> has marked this topic as resolved.</p>",
        "id": 388417384,
        "sender_full_name": "Notification Bot",
        "timestamp": 1693522364
    }
]