[
    {
        "content": "<p>In the exercises from \"Lean for the Curious Mathematician\" (2020), there is this example of extending a structure.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">Group</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">op</span> <span class=\"o\">:</span> <span class=\"n\">G</span> <span class=\"bp\">→</span> <span class=\"n\">G</span> <span class=\"bp\">→</span> <span class=\"n\">G</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"kd\">infix</span> <span class=\"bp\">*</span> <span class=\"o\">:=</span> <span class=\"n\">op</span><span class=\"o\">)</span> <span class=\"c1\">-- temporary notation `*` for `op`, just inside this structure declaration</span>\n  <span class=\"o\">(</span><span class=\"n\">op_assoc'</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">z</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"n\">z</span><span class=\"o\">))</span>\n  <span class=\"o\">(</span><span class=\"n\">id</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"kd\">notation</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"n\">id</span><span class=\"o\">)</span> <span class=\"c1\">-- temporary notation `1` for `id`, just inside this structure declaration</span>\n  <span class=\"o\">(</span><span class=\"n\">id_op'</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">),</span> <span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">inv</span> <span class=\"o\">:</span> <span class=\"n\">G</span> <span class=\"bp\">→</span> <span class=\"n\">G</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"kd\">postfix</span> <span class=\"bp\">⁻¹</span> <span class=\"o\">:=</span> <span class=\"n\">inv</span><span class=\"o\">)</span> <span class=\"c1\">-- temporary notation `⁻¹` for `inv`, just inside this structure declaration</span>\n  <span class=\"o\">(</span><span class=\"n\">op_left_inv'</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">),</span> <span class=\"n\">x</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">CommGroup</span> <span class=\"kd\">extends</span> <span class=\"n\">Group</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"kd\">infix</span> <span class=\"bp\">*</span> <span class=\"o\">:=</span> <span class=\"n\">op</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">op_comm</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">),</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">rat_Group</span> <span class=\"o\">:</span> <span class=\"n\">Group</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">G</span> <span class=\"o\">:=</span> <span class=\"n\">ℚ</span><span class=\"o\">,</span>\n  <span class=\"n\">op</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">+</span><span class=\"o\">),</span> <span class=\"c1\">-- you can put parentheses around an infix operation to talk about the operation itself.</span>\n  <span class=\"n\">op_assoc'</span> <span class=\"o\">:=</span> <span class=\"n\">add_assoc</span><span class=\"o\">,</span>\n  <span class=\"n\">id</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n  <span class=\"n\">id_op'</span> <span class=\"o\">:=</span> <span class=\"n\">zero_add</span><span class=\"o\">,</span>\n  <span class=\"n\">inv</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"n\">op_left_inv'</span> <span class=\"o\">:=</span> <span class=\"n\">neg_add_self</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">rat_CommGroup</span> <span class=\"o\">:</span> <span class=\"n\">CommGroup</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">G</span> <span class=\"o\">:=</span> <span class=\"n\">ℚ</span><span class=\"o\">,</span> <span class=\"n\">op_comm</span> <span class=\"o\">:=</span> <span class=\"n\">add_comm</span><span class=\"o\">,</span> <span class=\"bp\">..</span><span class=\"n\">rat_Group</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>SOURCE:<br>\n<a href=\"https://github.com/leanprover-community/lftcm2020/blob/master/src/exercises_sources/wednesday/structures.lean\">https://github.com/leanprover-community/lftcm2020/blob/master/src/exercises_sources/wednesday/structures.lean</a></p>\n<p>Why do we have to explicitly state <code>G := ℚ</code> on the last line but not the other fields? What is the general rule?</p>\n<p>Is it because <code>CommGroup</code> contains a field <code>op_comm</code> which refers to <code>G</code> explicitly? Do these have to be always restated before instantiating the new fields and before calling <code>..superstructure</code> in the definition?</p>",
        "id": 248452377,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1628153469
    },
    {
        "content": "<p>The problem seems to be that <code>add_comm</code> is itself a theorem about all <code>add_comm_semigroup</code>s <code>G</code>, so Lean can't figure out what to fill in for<code>G</code>. It seems to be fine with a hint:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">rat_CommGroup</span> <span class=\"o\">:</span> <span class=\"n\">CommGroup</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">op_comm</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">add_comm</span> <span class=\"n\">ℚ</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"bp\">..</span><span class=\"n\">rat_Group</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>or:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">add_comm'</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">add_comm</span> <span class=\"n\">_</span> <span class=\"n\">_</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">rat_CommGroup</span> <span class=\"o\">:</span> <span class=\"n\">CommGroup</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">op_comm</span> <span class=\"o\">:=</span> <span class=\"n\">add_comm'</span><span class=\"o\">,</span> <span class=\"bp\">..</span><span class=\"n\">rat_Group</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 248452855,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1628153855
    },
    {
        "content": "<p>What do <code>@</code> and <code>_</code> mean in Lean?</p>",
        "id": 248454744,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1628155272
    },
    {
        "content": "<p>@ means \"override the unifier and type class system (which usually fill in <code>{}</code> and <code>[]</code> inputs to functions), and give all inputs manually\". <code>_</code> means \"let the unifier guess this input\". These are discussed in <a href=\"https://leanprover.github.io/theorem_proving_in_lean/\">#tpil</a></p>",
        "id": 248454874,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1628155348
    },
    {
        "content": "<p>Thank you very much for your answers!</p>\n<p>I was searching for them in TPIL but the search option didn't support these non-alphabetic queries, so I ended up asking here.</p>",
        "id": 248454961,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1628155429
    },
    {
        "content": "<p><a href=\"https://leanprover.github.io/theorem_proving_in_lean/dependent_type_theory.html#implicit-arguments\">https://leanprover.github.io/theorem_proving_in_lean/dependent_type_theory.html#implicit-arguments</a></p>",
        "id": 248455095,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1628155508
    },
    {
        "content": "<p>I agree it helps a lot if you already know where the section is :-)</p>",
        "id": 248455106,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1628155523
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"417654\">Martin Dvořák</span> has marked this topic as resolved.</p>",
        "id": 248455789,
        "sender_full_name": "Notification Bot",
        "timestamp": 1628156052
    }
]