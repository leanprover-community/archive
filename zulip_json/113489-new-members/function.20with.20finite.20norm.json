[
    {
        "content": "<p>how do I formulate the hypothesis that a function <code>f</code> has finite norm? <br>\nI have tried <code>( hi : ∫ x , f x &gt; 0 ∧ ∫ x , f x  &lt; ∞)</code> which results in <code>expected token</code> and <code>Real.infinity</code> which results in <code>unknown constant</code></p>",
        "id": 399819032,
        "sender_full_name": "Nicholas Wilson",
        "timestamp": 1698881534
    },
    {
        "content": "<p>The ∞ symbol requires <code>open scoped ENNReal</code>, but without an <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> it's hard to tell whether that will help you</p>",
        "id": 399819495,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1698881909
    },
    {
        "content": "<p>pardon my ignorance, what is <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> what does it do?</p>",
        "id": 399819936,
        "sender_full_name": "Nicholas Wilson",
        "timestamp": 1698882272
    },
    {
        "content": "<p><code>open ENNReal</code> seems to have worked.</p>",
        "id": 399820090,
        "sender_full_name": "Nicholas Wilson",
        "timestamp": 1698882383
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"663331\">Nicholas Wilson</span> <a href=\"#narrow/stream/113489-new-members/topic/function.20with.20finite.20norm/near/399819936\">said</a>:</p>\n<blockquote>\n<p>pardon my ignorance, what is <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> what does it do?</p>\n</blockquote>\n<p>It is a link that you can click</p>",
        "id": 399820255,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1698882489
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"663331\">Nicholas Wilson</span> <a href=\"#narrow/stream/113489-new-members/topic/function.20with.20finite.20norm/near/399820090\">said</a>:</p>\n<blockquote>\n<p><code>open ENNReal</code> seems to have worked.</p>\n</blockquote>\n<p>It's very likely you have written a vacuous assumption like \"the following is finite: the norm, if the norm is finite, else 0 if it is not\"</p>",
        "id": 399820372,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1698882598
    },
    {
        "content": "<p>It would appear so, it renders ins the info view as <code>hi: ∫ (x : ℝ), f x &gt; 0 ∧ sorryAx Prop true</code></p>",
        "id": 399820820,
        "sender_full_name": "Nicholas Wilson",
        "timestamp": 1698882947
    },
    {
        "content": "<p>If sorryAx appears that usual means you have ignored a previous error message</p>",
        "id": 399821413,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1698883320
    },
    {
        "content": "<p>Ah, that was a trailing error for unterminated <code>:= by</code> I now get </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">type</span> <span class=\"n\">mismatch</span>\n  <span class=\"bp\">⊤</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"bp\">∞</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"n\">ℝ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n</code></pre></div>\n<p>for the expression<code> (∫ x , f x ) &lt; ∞ )</code><br>\nThe example usage </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">anti_symmetry</span> <span class=\"o\">{</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span>  <span class=\"o\">}</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"n\">y</span>  <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"o\">}</span>\n    <span class=\"o\">(</span> <span class=\"n\">hpos</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">≥</span> <span class=\"mi\">0</span> <span class=\"o\">)</span> <span class=\"c1\">--positive</span>\n    <span class=\"o\">(</span> <span class=\"n\">hi</span> <span class=\"o\">:</span> <span class=\"o\">(</span> <span class=\"bp\">∫</span> <span class=\"n\">x</span> <span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"bp\">∫</span> <span class=\"n\">x</span> <span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"bp\">∞</span> <span class=\"o\">)</span> <span class=\"c1\">--finite integral</span>\n    <span class=\"o\">(</span> <span class=\"n\">hy</span> <span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"bp\">≥</span> <span class=\"mi\">0</span><span class=\"o\">)</span>   <span class=\"o\">(</span> <span class=\"n\">hzge</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">y</span><span class=\"o\">)</span>  <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"c1\">-- zero on the positive real line</span>\n<span class=\"o\">:</span>\n    <span class=\"bp\">∫</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"o\">((</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">x</span> <span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"c1\">-- total integral is zero</span>\n<span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 399822003,
        "sender_full_name": "Nicholas Wilson",
        "timestamp": 1698883605
    },
    {
        "content": "<p>with <code>open ENNReal</code></p>",
        "id": 399822096,
        "sender_full_name": "Nicholas Wilson",
        "timestamp": 1698883674
    },
    {
        "content": "<p>You really need to read <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> and follow instructions there.</p>",
        "id": 399822899,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1698884156
    },
    {
        "content": "<p>I don't have a working example because I get an error and there is not much left to remove from that.</p>\n<p>Things I have tried that don't work:<br>\n changed the Type of <code>f</code> to <code>{ f : ℝ → NNReal }</code> doesn't work because <code>failed to synthesize instance NormedAddCommGroup NNReal</code> and can't do integrals on them. Same for <code>ENNReal</code>, <code>EReal</code>. <br>\nTrying to coerce the type of <code>∫ x, f x </code> to <code>ENNReal</code> with <code>↑(∫ x, f x )</code> (not sure if I did that correctly though).<br>\nInterestingly opening <code>EReal</code> while having <code>ENNReal</code> be not opened gives invalid token error for <code>∞</code>.</p>",
        "id": 399832138,
        "sender_full_name": "Nicholas Wilson",
        "timestamp": 1698888347
    },
    {
        "content": "<p>I'm afraid that reading the title of that <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> webpage is not enough, you also need to read at least the first sentence.</p>",
        "id": 399833542,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1698889290
    },
    {
        "content": "<p>I case you already posted a code snippet such as the one you posted <a href=\"#narrow/stream/113489-new-members/topic/function.20with.20finite.20norm/near/399822003\">here</a> you can check whether you followed instruction by simply clicking the \"View in Lean 4 playground\" link that appear in the upper-right corner of the code block. In your case this bring you <a href=\"https://live.lean-lang.org/#code=theorem%20anti_symmetry%20%7B%20f%20%3A%20%E2%84%9D%20%E2%86%92%20%E2%84%9D%20%20%7D%20%7B%20x%20y%20%20%3A%20%E2%84%9D%20%7D%0A%20%20%20%20%28%20hpos%20%3A%20%28f%20x%29%20%E2%89%A5%200%20%29%20--positive%0A%20%20%20%20%28%20hi%20%3A%20%28%20%E2%88%AB%20x%20%2C%20%28f%20x%29%20%3E%200%29%20%E2%88%A7%20%28%E2%88%AB%20x%20%2C%20f%20x%20%29%20%3C%20%E2%88%9E%20%29%20--finite%20integral%0A%20%20%20%20%28%20hy%20%3A%20y%20%E2%89%A5%200%29%20%20%20%28%20hzge%20%3A%20%28f%20y%29%20%20%3D%200%29%20--%20zero%20on%20the%20positive%20real%20line%0A%3A%0A%20%20%20%20%E2%88%AB%20x%2C%20%28%28f%20x%29%20-%20f%20%28-x%20%29%29%20%3D%200%20--%20total%20integral%20is%20zero%0A%3A%3D%20by%20sorry%0A\">there</a> where you will see that your snippet isn't a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> since it doesn't reproduce the problem you are facing on your computer.</p>",
        "id": 399833884,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1698889467
    }
]