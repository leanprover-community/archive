[
    {
        "content": "<p>i'm wondering if there is something similar to the Module Type , where we could declare some \"template\" and then implement it in another coq Module:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Module</span> <span class=\"kt\">Type</span> <span class=\"n\">S</span>\n<span class=\"n\">Parameter</span> <span class=\"n\">A</span><span class=\"o\">:</span> <span class=\"n\">bool</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">bool</span>\n<span class=\"n\">Axiom</span> <span class=\"n\">A_should_neg_true</span><span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"n\">True</span> <span class=\"bp\">=</span> <span class=\"n\">False</span>\n<span class=\"o\">(</span><span class=\"bp\">*</span> <span class=\"n\">some</span> <span class=\"n\">theorems</span> <span class=\"n\">about</span> <span class=\"n\">using</span> <span class=\"n\">A</span> <span class=\"n\">and</span> <span class=\"n\">A_should_neg_true</span> <span class=\"n\">etc</span> <span class=\"n\">etc</span> <span class=\"bp\">*</span><span class=\"o\">)</span>\n<span class=\"n\">End.</span>\n\n<span class=\"n\">Module</span> <span class=\"n\">Impl</span> <span class=\"o\">:</span> <span class=\"n\">S</span>\n<span class=\"n\">Definition</span> <span class=\"n\">A</span> <span class=\"o\">:=</span> <span class=\"bp\">...</span>\n<span class=\"n\">Theorem</span> <span class=\"n\">A_should_neg_true</span> <span class=\"bp\">...</span>\n<span class=\"n\">End.</span>\n</code></pre></div>\n<p>The closest thing I can find in lean is type class, but within a class I'm not sure if there's a way I could declare \"axioms\" or use \"variable\", i.e. the following probably wouldn't work:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">S</span> <span class=\"n\">where</span>\n<span class=\"kd\">variable</span> <span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Bool...</span>\n<span class=\"kd\">axiom</span> <span class=\"n\">A_should_neg_true...</span>\n</code></pre></div>",
        "id": 390913717,
        "sender_full_name": "Z. Wu",
        "timestamp": 1694692698
    },
    {
        "content": "<p>Do you mean something like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">S</span> <span class=\"n\">where</span>\n  <span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Bool</span>\n  <span class=\"n\">A_should_neg_true</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"n\">true</span> <span class=\"bp\">=</span> <span class=\"n\">false</span>\n</code></pre></div>",
        "id": 390914006,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1694692799
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">S</span> <span class=\"n\">where</span>\n  <span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span> <span class=\"bp\">→</span> <span class=\"n\">Bool</span>\n  <span class=\"n\">A_should_neg_true</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"n\">true</span> <span class=\"bp\">=</span> <span class=\"n\">false</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">S</span> <span class=\"n\">where</span>\n  <span class=\"n\">A</span> <span class=\"o\">:=</span> <span class=\"bp\">...</span>\n  <span class=\"n\">A_should_neg_true</span> <span class=\"o\">:=</span> <span class=\"bp\">...</span>\n</code></pre></div>\n<p>or <code>structure</code> instead of <code>class</code> and <code>def</code> instead of <code>instance</code></p>",
        "id": 390914158,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694692838
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">S</span> <span class=\"n\">where</span>\n  <span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span> <span class=\"bp\">→</span> <span class=\"n\">Bool</span>\n  <span class=\"n\">A_should_neg_true</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"n\">true</span> <span class=\"bp\">=</span> <span class=\"n\">false</span>\n<span class=\"kn\">open</span> <span class=\"n\">S</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">some_theorem</span> <span class=\"o\">[</span><span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">true</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">A</span> <span class=\"n\">false</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">A_should_neg_true</span><span class=\"o\">]</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">S</span> <span class=\"n\">where</span>\n  <span class=\"n\">A</span> <span class=\"o\">:=</span> <span class=\"n\">not</span>\n  <span class=\"n\">A_should_neg_true</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">!!</span><span class=\"n\">true</span> <span class=\"bp\">=</span> <span class=\"bp\">!</span><span class=\"n\">false</span> <span class=\"o\">:=</span> <span class=\"n\">some_theorem</span>\n</code></pre></div>",
        "id": 390914573,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694692982
    },
    {
        "content": "<p>Thanks! I think declaring the axioms as members of class works!</p>",
        "id": 390952215,
        "sender_full_name": "Z. Wu",
        "timestamp": 1694703534
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"649880\">Zwu</span> has marked this topic as resolved.</p>",
        "id": 391064510,
        "sender_full_name": "Notification Bot",
        "timestamp": 1694747572
    }
]