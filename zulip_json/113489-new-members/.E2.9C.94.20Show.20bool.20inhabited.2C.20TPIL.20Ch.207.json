[
    {
        "content": "<p>Following  the advice in Chapter 7 of <em>Theorem Proving in Lean</em>, I'm trying to show that bool is inhabited.  Does that simply amount to constructing a proof of <code>theorem bool_inhab : inhabited bool := sorry</code>? I'm worried because <code>#check inhabited bool</code> yields <code>Type</code> not <code>Prop</code>.</p>",
        "id": 357366667,
        "sender_full_name": "Quinn Culver",
        "timestamp": 1683741209
    },
    {
        "content": "<p><code>inhabited bool</code> is a Type not a Prop as you've pointed out, so you would not prove this as a <code>theorem</code>, this would be a <code>definition</code>. Your job is to make a term of this type. Proving a theorem is also making a term of a type, but the type in question has type Prop rather than type Type.</p>",
        "id": 357368571,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1683741702
    },
    {
        "content": "<p>Does that mean \"showing\" that bool is inhabited is meta-showing? I.e. not proving a theorem within lean?</p>",
        "id": 357377489,
        "sender_full_name": "Quinn Culver",
        "timestamp": 1683744154
    },
    {
        "content": "<p>It's not a theorem, but it's not meta, it's a well defined definition in lean in the same way that <code>def a : nat := 1</code> is a definition and not a theorem (and also not meta).</p>",
        "id": 357381482,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1683745234
    },
    {
        "content": "<p>Also similar to \"proving\" that say the integers form a group (we should say: defining a group structure on the integers).</p>",
        "id": 357385779,
        "sender_full_name": "Reid Barton",
        "timestamp": 1683746473
    },
    {
        "content": "<p>There is some linguistic mismatch here because \"inhabited\" sounds like a property, hence a proposition.</p>",
        "id": 357386212,
        "sender_full_name": "Reid Barton",
        "timestamp": 1683746600
    },
    {
        "content": "<p>For the <code>Prop</code>, there is <a href=\"https://leanprover-community.github.io/mathlib_docs/find/nonempty\">docs#nonempty</a>.  This you can \"prove\".</p>",
        "id": 357386426,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1683746667
    },
    {
        "content": "<p>Is this a correct solution: <code>def x : inhabited bool := bool.inhabited</code>?</p>",
        "id": 357644315,
        "sender_full_name": "Quinn Culver",
        "timestamp": 1683822750
    },
    {
        "content": "<p>If Lean is happy, then it is correct.  However, if I were solving this as an exercise, I would probably play around with <em>actually</em> providing a witness in <code>bool</code> for inhabited.  Something like (untested)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">...</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">default</span> <span class=\"o\">:=</span> <span class=\"n\">ff</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>(I'm on mobile.)</p>",
        "id": 357647692,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1683823602
    },
    {
        "content": "<p>What you did was to tell Lean: someone else already \"inhabited\" <code>bool</code> -- go fetch that element!</p>",
        "id": 357647853,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1683823643
    },
    {
        "content": "<p>In fact, if you right click on <code>bool.inhabited</code> and go to the definition, you may see that the statement might be closer to what I typed above.  Let's check: <a href=\"https://leanprover-community.github.io/mathlib_docs/find/bool.inhabited\">docs#bool.inhabited</a></p>",
        "id": 357654895,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1683825388
    },
    {
        "content": "<p>As you can see, the only difference is the use of the \"anonymous constructor\" <code>⟨...⟩</code> instead of the explicit <code>default</code> field.</p>",
        "id": 357655268,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1683825491
    },
    {
        "content": "<p>If you click on \"equations\" in the docs you'll see the <code>default :=</code> story.</p>",
        "id": 357660231,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1683826767
    },
    {
        "content": "<p>It might be helpful to think of the name as \"inhabitant\" rather than \"inhabited\". Constructing <code>bool.inhabited</code>means exhibiting a term -- any term -- of type <code>bool</code>.</p>",
        "id": 357668317,
        "sender_full_name": "Jake Levinson",
        "timestamp": 1683829034
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"245476\">Quinn Culver</span> has marked this topic as resolved.</p>",
        "id": 358143215,
        "sender_full_name": "Notification Bot",
        "timestamp": 1683998040
    }
]