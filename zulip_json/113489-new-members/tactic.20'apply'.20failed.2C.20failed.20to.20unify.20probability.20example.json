[
    {
        "content": "<p>In the following code, I want to provide a simple extension to monotone property of a probability measure. However, I'm getting a \"failed to unify\" error. Is there another tactic that would be more efficient? Is it clear to someone who is more literate in lean 4 what the issue is? Thanks.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">MeasureTheory</span>\n<span class=\"kn\">open</span> <span class=\"n\">NNReal</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"bp\">Ω</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u1</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">MeasurableSpace</span> <span class=\"bp\">Ω</span><span class=\"o\">]</span>\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">μ</span> <span class=\"o\">:</span> <span class=\"n\">ProbabilityMeasure</span> <span class=\"bp\">Ω</span><span class=\"o\">}</span>\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">s₁</span> <span class=\"n\">s₂</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"bp\">Ω</span><span class=\"o\">}</span>\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">NNReal</span><span class=\"o\">}</span>\n\n<span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"n\">μ</span> <span class=\"n\">s₁</span><span class=\"o\">)</span>\n<span class=\"k\">#check</span> <span class=\"n\">a</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">h0</span><span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">s₁</span> <span class=\"bp\">⊆</span> <span class=\"n\">s₂</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">μ</span> <span class=\"n\">s₁</span> <span class=\"bp\">≤</span> <span class=\"n\">μ</span> <span class=\"n\">s₂</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"n\">h3</span> <span class=\"o\">:</span> <span class=\"n\">μ</span> <span class=\"n\">s₁</span> <span class=\"bp\">≤</span> <span class=\"n\">μ</span> <span class=\"n\">s₂</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">apply</span> <span class=\"n\">μ.apply_mono</span> <span class=\"n\">h1</span>\n  <span class=\"k\">have</span> <span class=\"n\">h4</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">μ</span> <span class=\"n\">s₁</span> <span class=\"bp\">≤</span> <span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"n\">μ</span> <span class=\"n\">s₁</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">apply</span> <span class=\"n\">mul_le_mul_of_le_of_le</span> <span class=\"n\">h0</span> <span class=\"n\">h3</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"c\">/-</span>\n<span class=\"cm\">tactic 'apply' failed, failed to unify</span>\n<span class=\"cm\">  (fun s =&gt; ENNReal.toNNReal (↑↑↑μ s)) s₁ * a ≤ (fun s =&gt; ENNReal.toNNReal (↑↑↑μ s)) s₂ * 1</span>\n<span class=\"cm\">with</span>\n<span class=\"cm\">  a * (fun s =&gt; ENNReal.toNNReal (↑↑↑μ s)) s₁ ≤ 1 * (fun s =&gt; ENNReal.toNNReal (↑↑↑μ s)) s₁</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>",
        "id": 403403335,
        "sender_full_name": "Michael Kane",
        "timestamp": 1700580059
    },
    {
        "content": "<p>Can you please read <a href=\"https://github.com/leanprover-community/mathlib/wiki/Code-in-backticks\">#backticks</a> are format your post in a more readable way?</p>",
        "id": 403403686,
        "sender_full_name": "Rémy Degenne",
        "timestamp": 1700580166
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 403403832,
        "sender_full_name": "Rémy Degenne",
        "timestamp": 1700580205
    },
    {
        "content": "<p>The error seems to explain how they don't match? Your multiplications seem to be flipped</p>",
        "id": 403404776,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1700580361
    },
    {
        "content": "<p>I opened that code in the editor and no, it's not flipped there. The error is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">tactic</span> <span class=\"bp\">'</span><span class=\"n\">apply'</span> <span class=\"n\">failed</span><span class=\"o\">,</span> <span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">unify</span>\n  <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">s</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">ENNReal.toNNReal</span> <span class=\"o\">(</span><span class=\"bp\">↑↑↑</span><span class=\"n\">μ</span> <span class=\"n\">s</span><span class=\"o\">))</span> <span class=\"n\">s₁</span> <span class=\"bp\">≤</span> <span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">s</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">ENNReal.toNNReal</span> <span class=\"o\">(</span><span class=\"bp\">↑↑↑</span><span class=\"n\">μ</span> <span class=\"n\">s</span><span class=\"o\">))</span> <span class=\"n\">s₂</span>\n<span class=\"k\">with</span>\n  <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">s</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">ENNReal.toNNReal</span> <span class=\"o\">(</span><span class=\"bp\">↑↑↑</span><span class=\"n\">μ</span> <span class=\"n\">s</span><span class=\"o\">))</span> <span class=\"n\">s₁</span> <span class=\"bp\">≤</span> <span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">s</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">ENNReal.toNNReal</span> <span class=\"o\">(</span><span class=\"bp\">↑↑↑</span><span class=\"n\">μ</span> <span class=\"n\">s</span><span class=\"o\">))</span> <span class=\"n\">s₁</span>\n</code></pre></div>",
        "id": 403405520,
        "sender_full_name": "Rémy Degenne",
        "timestamp": 1700580464
    },
    {
        "content": "<p>The relevant part of the error in the code is not what your comment says, it's</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">tactic</span> <span class=\"bp\">'</span><span class=\"n\">apply'</span> <span class=\"n\">failed</span><span class=\"o\">,</span> <span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">unify</span>\n  <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">s</span> <span class=\"bp\">↦</span> <span class=\"n\">ENNReal.toNNReal</span> <span class=\"o\">(</span><span class=\"bp\">↑↑↑</span><span class=\"n\">μ</span> <span class=\"n\">s</span><span class=\"o\">))</span> <span class=\"n\">s₁</span> <span class=\"bp\">≤</span> <span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">s</span> <span class=\"bp\">↦</span> <span class=\"n\">ENNReal.toNNReal</span> <span class=\"o\">(</span><span class=\"bp\">↑↑↑</span><span class=\"n\">μ</span> <span class=\"n\">s</span><span class=\"o\">))</span> <span class=\"n\">s₂</span>\n<span class=\"k\">with</span>\n  <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">s</span> <span class=\"bp\">↦</span> <span class=\"n\">ENNReal.toNNReal</span> <span class=\"o\">(</span><span class=\"bp\">↑↑↑</span><span class=\"n\">μ</span> <span class=\"n\">s</span><span class=\"o\">))</span> <span class=\"n\">s₁</span> <span class=\"bp\">≤</span> <span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">s</span> <span class=\"bp\">↦</span> <span class=\"n\">ENNReal.toNNReal</span> <span class=\"o\">(</span><span class=\"bp\">↑↑↑</span><span class=\"n\">μ</span> <span class=\"n\">s</span><span class=\"o\">))</span> <span class=\"n\">s₁</span>\n</code></pre></div>\n<p>and you can see the difference right there at the end, an s2 not an s1.</p>",
        "id": 403405579,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1700580474
    },
    {
        "content": "<p>Oh I see it: the first line has a s2 on the right</p>",
        "id": 403405602,
        "sender_full_name": "Rémy Degenne",
        "timestamp": 1700580479
    },
    {
        "content": "<p>A general remark on working with probability measures: you probably want to use <code>{μ : Measure Ω} [IsProbabilityMeasure Ω]</code> and not <code>{μ : ProbabilityMeasure Ω}</code>. <code>ProbabilityMeasure</code> is there for when you want to work on the space of probability measures, with a topology, etc. If you just want one probability measure, the first method works best.</p>",
        "id": 403407413,
        "sender_full_name": "Rémy Degenne",
        "timestamp": 1700580792
    },
    {
        "content": "<p>OK. Undestood. However, I'm still having trouble understanding what the tactics expect to be able to fulfull the goals. If I try to apply <code>mul_le_mul_of_le_of_le</code> to h0 and (\\mu s\\1) then I get </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c\">/-</span>\n<span class=\"cm\">application type mismatch</span>\n<span class=\"cm\">  mul_le_mul_of_le_of_le h0 ((fun s =&gt; ENNReal.toNNReal (↑↑↑μ s)) s₁)</span>\n<span class=\"cm\">argument</span>\n<span class=\"cm\">  (fun s =&gt; ENNReal.toNNReal (↑↑↑μ s)) s₁</span>\n<span class=\"cm\">has type</span>\n<span class=\"cm\">  ℝ≥0 : Type</span>\n<span class=\"cm\">but is expected to have type</span>\n<span class=\"cm\">  ?m.738 ≤ ?m.739 : Prop</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>\n<p>Does the tactic need a hypothesis as an argument? If the answer is RTFM, could you please point me to which manual?</p>",
        "id": 403407496,
        "sender_full_name": "Michael Kane",
        "timestamp": 1700580808
    },
    {
        "content": "<p>The manual is <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=mul_le_mul_of_le_of_le#doc\">docs#mul_le_mul_of_le_of_le</a> . The explicit arguments of the lemma are inequalities. The error tells you that the second explicit argument should be an inequality, but what you provided is a number.</p>",
        "id": 403407982,
        "sender_full_name": "Rémy Degenne",
        "timestamp": 1700580892
    },
    {
        "content": "<p>OK. This is plenty for me to proceed. Thanks very much for your patience. This is very helpful.</p>",
        "id": 403408378,
        "sender_full_name": "Michael Kane",
        "timestamp": 1700580966
    },
    {
        "content": "<p>In VSCode, you can also put your mouse over a lemma name to make a tooltip appear, where you can see the arguments. you can also ctrl+click to jump to the statement of the lemma.</p>",
        "id": 403409368,
        "sender_full_name": "Rémy Degenne",
        "timestamp": 1700581182
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"350992\">Rémy Degenne</span> <a href=\"#narrow/stream/113489-new-members/topic/tactic.20'apply'.20failed.2C.20failed.20to.20unify.20probability.20example/near/403407413\">said</a>:</p>\n<blockquote>\n<p>A general remark on working with probability measures: you probably want to use <code>{μ : Measure Ω} [IsProbabilityMeasure Ω]</code> and not <code>{μ : ProbabilityMeasure Ω}</code>. <code>ProbabilityMeasure</code> is there for when you want to work on the space of probability measures, with a topology, etc. If you just want one probability measure, the first method works best.</p>\n</blockquote>\n<p>If I do this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"bp\">Ω</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u1</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">MeasurableSpace</span> <span class=\"bp\">Ω</span><span class=\"o\">]</span>\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">μ</span> <span class=\"o\">:</span> <span class=\"n\">Measure</span> <span class=\"bp\">Ω</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">IsProbabilityMeasure</span> <span class=\"bp\">Ω</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>then I get the following message. Have I declared the type of <code>\\Omega</code> incorrectly? The solutions doesn't seem to be setting it to a more specific type, the reals for example.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c\">/-</span>\n<span class=\"cm\">application type mismatch</span>\n<span class=\"cm\">  IsProbabilityMeasure Ω</span>\n<span class=\"cm\">argument</span>\n<span class=\"cm\">  Ω</span>\n<span class=\"cm\">has type</span>\n<span class=\"cm\">  Type u1 : Type (u1 + 1)</span>\n<span class=\"cm\">but is expected to have type</span>\n<span class=\"cm\">  Measure ?m.84133 : Type ?u.84132</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>",
        "id": 403412998,
        "sender_full_name": "Michael Kane",
        "timestamp": 1700582102
    },
    {
        "content": "<p>Should be <code>IsProbabilityMeasure μ</code></p>",
        "id": 403413328,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1700582197
    },
    {
        "content": "<p>You want <code>[IsProbabilityMeasure μ]</code>.</p>",
        "id": 403413336,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1700582199
    },
    {
        "content": "<p>Sorry for the typo!</p>",
        "id": 403415663,
        "sender_full_name": "Rémy Degenne",
        "timestamp": 1700582771
    },
    {
        "content": "<p>By the way: the error message tells you that it expected a measure where I wrote Omega.</p>",
        "id": 403415833,
        "sender_full_name": "Rémy Degenne",
        "timestamp": 1700582826
    },
    {
        "content": "<p>OK, when I make the change I get the following error. Is it correct that I need to cast to a ProbabilityMeasure? I searched for \"toProbabilityMeasure\" in the docs but I'm coming up empty.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">invalid</span> <span class=\"n\">field</span> <span class=\"bp\">'</span><span class=\"n\">apply_mono'</span><span class=\"o\">,</span> <span class=\"n\">the</span> <span class=\"n\">environment</span> <span class=\"n\">does</span> <span class=\"n\">not</span> <span class=\"n\">contain</span> <span class=\"bp\">'</span><span class=\"n\">MeasureTheory.Measure.apply_mono'</span>\n</code></pre></div>",
        "id": 403418930,
        "sender_full_name": "Michael Kane",
        "timestamp": 1700583799
    },
    {
        "content": "<p>Nevermind. I found measure_mono.</p>",
        "id": 403420711,
        "sender_full_name": "Michael Kane",
        "timestamp": 1700584327
    },
    {
        "content": "<p>Yeah, that just means \"wrong name\"</p>",
        "id": 403429023,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1700587190
    },
    {
        "content": "<p>OK, now I'm running into the following error. The variable is of type NNReal. What does the up arrow mean? The complete code snippet is below the error.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c\">/-</span>\n<span class=\"cm\">application type mismatch</span>\n<span class=\"cm\">  mul_le_of_le_one_left h3 h0</span>\n<span class=\"cm\">argument</span>\n<span class=\"cm\">  h0</span>\n<span class=\"cm\">has type</span>\n<span class=\"cm\">  a ≤ 1 : Prop</span>\n<span class=\"cm\">but is expected to have type</span>\n<span class=\"cm\">  ↑a ≤ 1 : Prop</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">MeasureTheory</span>\n<span class=\"kn\">open</span> <span class=\"n\">ProbabilityMeasure</span>\n<span class=\"kn\">open</span> <span class=\"n\">NNReal</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"bp\">Ω</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u1</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">MeasurableSpace</span> <span class=\"bp\">Ω</span><span class=\"o\">]</span>\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">μ</span> <span class=\"o\">:</span> <span class=\"n\">Measure</span> <span class=\"bp\">Ω</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">IsProbabilityMeasure</span> <span class=\"n\">μ</span><span class=\"o\">]</span>\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">s₁</span> <span class=\"n\">s₂</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"bp\">Ω</span><span class=\"o\">}</span>\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">NNReal</span><span class=\"o\">)</span>\n\n<span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"n\">μ</span> <span class=\"n\">s₁</span><span class=\"o\">)</span>\n<span class=\"k\">#check</span> <span class=\"n\">a</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">h0</span><span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">s₁</span> <span class=\"bp\">⊆</span> <span class=\"n\">s₂</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">μ</span> <span class=\"n\">s₁</span> <span class=\"bp\">≤</span> <span class=\"n\">μ</span> <span class=\"n\">s₂</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">μ</span> <span class=\"n\">s₁</span> <span class=\"bp\">≤</span> <span class=\"n\">μ</span> <span class=\"n\">s₂</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">exact</span> <span class=\"n\">measure_mono</span> <span class=\"n\">h1</span>\n  <span class=\"k\">have</span> <span class=\"n\">h3</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">μ</span> <span class=\"n\">s₁</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">exact</span> <span class=\"n\">zero_le</span> <span class=\"o\">(</span><span class=\"n\">μ</span> <span class=\"n\">s₁</span><span class=\"o\">)</span>\n  <span class=\"k\">have</span> <span class=\"n\">h4</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">μ</span> <span class=\"n\">s₁</span> <span class=\"bp\">≤</span> <span class=\"n\">μ</span> <span class=\"n\">s₁</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">exact</span> <span class=\"n\">mul_le_of_le_one_left</span> <span class=\"n\">h3</span> <span class=\"n\">h0</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 403430197,
        "sender_full_name": "Michael Kane",
        "timestamp": 1700587566
    },
    {
        "content": "<p>That's a coercion</p>",
        "id": 403430489,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1700587678
    },
    {
        "content": "<p><code>mul_le_of_le_one_left</code> needs an inequality of <code>ENNReal</code>s here, but <code>h0</code> is about <code>NNReal</code>s</p>",
        "id": 403430703,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1700587747
    },
    {
        "content": "<p>You can solve many of those coercion issues with <code>norm_cast</code> or <code>exact_mod_cast</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">MeasureTheory</span>\n<span class=\"kn\">open</span> <span class=\"n\">ProbabilityMeasure</span>\n<span class=\"kn\">open</span> <span class=\"n\">NNReal</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"bp\">Ω</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u1</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">MeasurableSpace</span> <span class=\"bp\">Ω</span><span class=\"o\">]</span>\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">μ</span> <span class=\"o\">:</span> <span class=\"n\">Measure</span> <span class=\"bp\">Ω</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">IsProbabilityMeasure</span> <span class=\"n\">μ</span><span class=\"o\">]</span>\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">s₁</span> <span class=\"n\">s₂</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"bp\">Ω</span><span class=\"o\">}</span>\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">NNReal</span><span class=\"o\">)</span>\n\n<span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"n\">μ</span> <span class=\"n\">s₁</span><span class=\"o\">)</span>\n<span class=\"k\">#check</span> <span class=\"n\">a</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">h0</span><span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">s₁</span> <span class=\"bp\">⊆</span> <span class=\"n\">s₂</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">μ</span> <span class=\"n\">s₁</span> <span class=\"bp\">≤</span> <span class=\"n\">μ</span> <span class=\"n\">s₂</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">μ</span> <span class=\"n\">s₁</span> <span class=\"bp\">≤</span> <span class=\"n\">μ</span> <span class=\"n\">s₂</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">exact</span> <span class=\"n\">measure_mono</span> <span class=\"n\">h1</span>\n  <span class=\"k\">have</span> <span class=\"n\">h3</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">μ</span> <span class=\"n\">s₁</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">exact</span> <span class=\"n\">zero_le</span> <span class=\"o\">(</span><span class=\"n\">μ</span> <span class=\"n\">s₁</span><span class=\"o\">)</span>\n  <span class=\"k\">have</span> <span class=\"n\">h4</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">μ</span> <span class=\"n\">s₁</span> <span class=\"bp\">≤</span> <span class=\"n\">μ</span> <span class=\"n\">s₁</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">refine</span> <span class=\"n\">mul_le_of_le_one_left</span> <span class=\"n\">h3</span> <span class=\"bp\">?</span><span class=\"n\">_</span>\n    <span class=\"n\">exact_mod_cast</span> <span class=\"n\">h0</span> <span class=\"c1\">-- or `norm_cast`</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 403431456,
        "sender_full_name": "Rémy Degenne",
        "timestamp": 1700588020
    },
    {
        "content": "<p>But if you can avoid coercions, do it. You could have <code>a : ENNReal</code>, since values of measures are in <code>ENNReal</code>.</p>",
        "id": 403431735,
        "sender_full_name": "Rémy Degenne",
        "timestamp": 1700588135
    },
    {
        "content": "<p>OK, now how do I finish the example? I have h4 and h2 implies the result. Is there a tactic or function for that?</p>",
        "id": 403433956,
        "sender_full_name": "Michael Kane",
        "timestamp": 1700588969
    },
    {
        "content": "<p><code>linarith</code>?</p>",
        "id": 403434389,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1700589135
    },
    {
        "content": "<p>You want to apply transitivity of <code>≤</code>: you can write <code>exact le_trans h4 h2</code>, or <code>exact h4.trans h2</code>.</p>",
        "id": 403434416,
        "sender_full_name": "Rémy Degenne",
        "timestamp": 1700589145
    },
    {
        "content": "<p><code>linarith</code> does not like ENNReal and fails here</p>",
        "id": 403434463,
        "sender_full_name": "Rémy Degenne",
        "timestamp": 1700589168
    },
    {
        "content": "<p>I feel like it's a good opportunity to introduce <code>calc</code> proofs:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">h0</span><span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">s₁</span> <span class=\"bp\">⊆</span> <span class=\"n\">s₂</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">μ</span> <span class=\"n\">s₁</span> <span class=\"bp\">≤</span> <span class=\"n\">μ</span> <span class=\"n\">s₂</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">calc</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">μ</span> <span class=\"n\">s₁</span> <span class=\"bp\">≤</span> <span class=\"n\">μ</span> <span class=\"n\">s₁</span> <span class=\"o\">:=</span> <span class=\"n\">mul_le_of_le_one_left</span> <span class=\"o\">(</span><span class=\"n\">zero_le</span> <span class=\"o\">(</span><span class=\"n\">μ</span> <span class=\"n\">s₁</span><span class=\"o\">))</span> <span class=\"n\">h0</span>\n  <span class=\"n\">_</span> <span class=\"bp\">≤</span> <span class=\"n\">μ</span> <span class=\"n\">s₂</span> <span class=\"o\">:=</span> <span class=\"n\">measure_mono</span> <span class=\"n\">h1</span>\n</code></pre></div>",
        "id": 403434835,
        "sender_full_name": "Rémy Degenne",
        "timestamp": 1700589347
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=calc#doc\">docs#calc</a></p>",
        "id": 403434932,
        "sender_full_name": "Rémy Degenne",
        "timestamp": 1700589366
    },
    {
        "content": "<p>What does the underscore denote here?</p>",
        "id": 403435191,
        "sender_full_name": "Michael Kane",
        "timestamp": 1700589480
    },
    {
        "content": "<p>According to the doc at <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=calc#doc\">docs#calc</a>, \"Instead of repeating the right-hand sides, subsequent left-hand sides can be replaced with _.\"<br>\nThat underscore is just shorthand for the right-hand side of the previous step.</p>",
        "id": 403435742,
        "sender_full_name": "Rémy Degenne",
        "timestamp": 1700589659
    },
    {
        "content": "<p>Nevermind, I see it's the placeholder for the left side of the inequality. Thanks again.</p>",
        "id": 403435751,
        "sender_full_name": "Michael Kane",
        "timestamp": 1700589663
    }
]