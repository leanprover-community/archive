[
    {
        "content": "<p>Hi. What is <code>#align</code> ? Can't find anything in the docs...</p>",
        "id": 344941883,
        "sender_full_name": "Miguel Negrão",
        "timestamp": 1679942445
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/wiki/Porting-wiki#aligning-names\">https://github.com/leanprover-community/mathlib4/wiki/Porting-wiki#aligning-names</a></p>",
        "id": 344942074,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1679942521
    },
    {
        "content": "<p>This is a tool for the port. <code>#align x y</code> tells mathport (the Lean 3 -&gt; Lean 4) to replace the name <code>x</code> by the name <code>y</code> wherever it sees it.</p>",
        "id": 344942127,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1679942526
    },
    {
        "content": "<p>In particular, I strongly hope that by Christmas we won't have any <code>#align</code> statements left in mathlib4.<br>\n(Maybe I shall not specify which Christmas <span aria-label=\"see no evil\" class=\"emoji emoji-1f648\" role=\"img\" title=\"see no evil\">:see_no_evil:</span>)</p>",
        "id": 344942915,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1679942766
    },
    {
        "content": "<p>Thanks !  Another quick one. In this code does the <code>.</code> (i.e. <code>.mk</code>) have a special meaning, relating perhaps to namespaces ?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- Construct an object of the Kleisli category from a type. -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">KleisliCat.mk</span> <span class=\"o\">(</span><span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">KleisliCat</span> <span class=\"n\">m</span> <span class=\"o\">:=</span>\n  <span class=\"n\">α</span>\n<span class=\"bp\">#</span><span class=\"n\">align</span> <span class=\"n\">category_theory.Kleisli.mk</span> <span class=\"n\">CategoryTheory.KleisliCat.mk</span>\n</code></pre></div>",
        "id": 344942938,
        "sender_full_name": "Miguel Negrão",
        "timestamp": 1679942774
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/113489-new-members/topic/.23align/near/344942915\">said</a>:</p>\n<blockquote>\n<p>In particular, I strongly hope that by Christmas we won't have any <code>#align</code> statements left in mathlib4.<br>\n(Maybe I shall not specify which Christmas <span aria-label=\"see no evil\" class=\"emoji emoji-1f648\" role=\"img\" title=\"see no evil\">:see_no_evil:</span>)</p>\n</blockquote>\n<p>Christmas in July!</p>",
        "id": 344943248,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1679942863
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"583642\">@Miguel Negrão</span> Yes, <code>Name.Space.myDefinition</code></p>",
        "id": 344944095,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1679943110
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/113489-new-members/topic/.23align/near/344944095\">disse</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"583642\">Miguel Negrão</span> Yes, <code>Name.Space.myDefinition</code></p>\n</blockquote>\n<p>So it is adding a function called <code>mk</code> to the <code>KleisliCat</code> namespace ? </p>\n<p>The definition is <a href=\"https://github.com/leanprover-community/mathlib4/blob/0bcbc985a529d2af125537fab684cb3a98de2f6f/Mathlib/CategoryTheory/Category/KleisliCat.lean#L37-L38\">in this file in mathlib4</a>. In that file there is no command \"namespace KleisliCat\", does the dot automatically enter/create the namespace if needed ?</p>",
        "id": 344945763,
        "sender_full_name": "Miguel Negrão",
        "timestamp": 1679943560
    },
    {
        "content": "<p>Yes, this definition is equivalent to</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">namespace</span> <span class=\"n\">KleisliCat</span>\n<span class=\"kd\">def</span> <span class=\"n\">mk</span> <span class=\"o\">(</span><span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">KleisliCat</span> <span class=\"n\">m</span> <span class=\"o\">:=</span>\n  <span class=\"n\">α</span>\n<span class=\"kd\">end</span> <span class=\"n\">KleisliCat</span>\n</code></pre></div>",
        "id": 344946522,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1679943749
    },
    {
        "content": "<p>By the way, one thing you might see is <code>def _root_.a.b.c ...</code> to override the current namespace completely. This <code>_root_</code> \"namespace\" is a marker that most things respect.</p>",
        "id": 344947424,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1679943953
    }
]