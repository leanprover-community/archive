[
    {
        "content": "<p>Hi everyone,<br>\ni am currently using Lean4 and created the following definitions:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Set.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Set.Countable</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Finset.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.List.Basic</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">Direction</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"n\">Direction</span>\n  <span class=\"bp\">|</span> <span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"n\">Direction</span>\n  <span class=\"bp\">|</span> <span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"n\">Direction</span>\n\n\n<span class=\"kd\">def</span> <span class=\"n\">directionToNum</span> <span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">Direction</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">d</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Direction.L</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">-</span><span class=\"mi\">1</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Direction.R</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">0</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Direction.N</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">1</span>\n\n\n<span class=\"kd\">structure</span> <span class=\"n\">Cfg</span> <span class=\"n\">where</span>\n  <span class=\"n\">state</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span>\n  <span class=\"n\">head</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span>\n  <span class=\"n\">left</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">ℕ</span>\n  <span class=\"n\">right</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">ℕ</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">Machine</span> <span class=\"n\">where</span>\n  <span class=\"n\">Q</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">ℕ</span>\n  <span class=\"bp\">Λ</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">ℕ</span>\n  <span class=\"bp\">Γ</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">ℕ</span>\n  <span class=\"n\">Fₐ</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">ℕ</span>\n  <span class=\"n\">F</span><span class=\"bp\">ᵣ</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">ℕ</span>\n  <span class=\"n\">q0</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span>\n  <span class=\"n\">δ</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"o\">(</span><span class=\"n\">ℕ</span> <span class=\"bp\">×</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"bp\">×</span> <span class=\"n\">ℕ</span> <span class=\"bp\">×</span> <span class=\"n\">Direction</span><span class=\"o\">)</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">DTM</span>  <span class=\"kd\">extends</span> <span class=\"n\">Machine</span> <span class=\"n\">where</span>\n\n  <span class=\"n\">uniqueness</span><span class=\"o\">:</span>\n    <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">ℕ</span> <span class=\"bp\">×</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"bp\">×</span> <span class=\"n\">ℕ</span> <span class=\"bp\">×</span> <span class=\"n\">Direction</span><span class=\"o\">),</span>\n      <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a₁</span> <span class=\"n\">a₂</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">ℕ</span> <span class=\"bp\">×</span> <span class=\"n\">ℕ</span><span class=\"o\">)),</span> <span class=\"n\">a₁</span> <span class=\"bp\">=</span> <span class=\"n\">a₂</span> <span class=\"bp\">↔</span> <span class=\"n\">x</span> <span class=\"n\">a₁</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"n\">a₂</span>\n\n\n<span class=\"kd\">def</span> <span class=\"n\">cfgEquiv</span> <span class=\"o\">(</span><span class=\"n\">c1</span> <span class=\"n\">c2</span> <span class=\"o\">:</span> <span class=\"n\">Cfg</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"n\">c1.state</span> <span class=\"bp\">=</span> <span class=\"n\">c2.state</span> <span class=\"bp\">∧</span> <span class=\"n\">c1.head</span> <span class=\"bp\">=</span> <span class=\"n\">c2.head</span> <span class=\"bp\">∧</span> <span class=\"n\">c1.left</span> <span class=\"bp\">=</span> <span class=\"n\">c2.left</span> <span class=\"bp\">∧</span> <span class=\"n\">c1.right</span> <span class=\"bp\">=</span> <span class=\"n\">c2.right</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">updateHead</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">d</span><span class=\"o\">:</span> <span class=\"n\">Direction</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">d</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">Direction.L</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">0</span>\n    <span class=\"bp\">|</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">Direction.R</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span>\n    <span class=\"bp\">|</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">Direction.L</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">n</span><span class=\"bp\">-</span><span class=\"mi\">1</span>\n    <span class=\"bp\">|</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">Direction.N</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">n</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">updateCfg</span> <span class=\"o\">(</span><span class=\"n\">cfg</span><span class=\"o\">:</span> <span class=\"n\">Cfg</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">d</span><span class=\"o\">:</span> <span class=\"n\">Direction</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Cfg</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">cfg.head</span><span class=\"o\">,</span> <span class=\"n\">d</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">Direction.L</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">{</span><span class=\"n\">state</span> <span class=\"o\">:=</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">head</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">left</span> <span class=\"o\">:=</span> <span class=\"n\">List.nil</span><span class=\"o\">,</span>  <span class=\"n\">right</span> <span class=\"o\">:=</span> <span class=\"n\">cfg.right.modifyHead</span> <span class=\"n\">w</span><span class=\"o\">}</span>\n    <span class=\"bp\">|</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">Direction.L</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">{</span><span class=\"n\">state</span> <span class=\"o\">:=</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">head</span> <span class=\"o\">:=</span> <span class=\"n\">cfg.head</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">left</span> <span class=\"o\">:=</span> <span class=\"n\">cfg.left.reverse.tail.reverse</span><span class=\"o\">,</span>  <span class=\"n\">right</span> <span class=\"o\">:=</span> <span class=\"o\">[</span><span class=\"n\">w</span><span class=\"o\">]</span><span class=\"bp\">.</span><span class=\"n\">append</span> <span class=\"n\">cfg.left</span><span class=\"o\">}</span>\n    <span class=\"bp\">|</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">Direction.R</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">{</span><span class=\"n\">state</span> <span class=\"o\">:=</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">head</span> <span class=\"o\">:=</span> <span class=\"n\">cfg.head</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">left</span> <span class=\"o\">:=</span> <span class=\"n\">cfg.left.append</span> <span class=\"o\">[</span><span class=\"n\">w</span><span class=\"o\">],</span>  <span class=\"n\">right</span> <span class=\"o\">:=</span> <span class=\"n\">cfg.left.tail</span><span class=\"o\">}</span>\n    <span class=\"bp\">|</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">Direction.N</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">{</span><span class=\"n\">state</span> <span class=\"o\">:=</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">head</span> <span class=\"o\">:=</span> <span class=\"n\">cfg.head</span><span class=\"o\">,</span> <span class=\"n\">left</span> <span class=\"o\">:=</span> <span class=\"n\">cfg.left</span><span class=\"o\">,</span>  <span class=\"n\">right</span> <span class=\"o\">:=</span> <span class=\"n\">cfg.right.modifyHead</span> <span class=\"n\">w</span><span class=\"o\">}</span>\n\n\n<span class=\"kd\">def</span> <span class=\"n\">reachSucc</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">Machine</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">c1</span> <span class=\"n\">c2</span> <span class=\"o\">:</span> <span class=\"n\">Cfg</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">γ</span> <span class=\"n\">s</span> <span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">Direction</span><span class=\"o\">),</span> <span class=\"bp\">∃</span> <span class=\"n\">δ</span> <span class=\"bp\">∈</span> <span class=\"n\">M.δ</span><span class=\"o\">,</span> <span class=\"n\">δ</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">γ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">w</span><span class=\"o\">,</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"n\">cfgEquiv</span> <span class=\"o\">(</span><span class=\"n\">updateCfg</span> <span class=\"n\">c1</span> <span class=\"n\">s</span> <span class=\"n\">w</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"n\">c2</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">isAccept</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">Machine</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">cfg</span> <span class=\"o\">:</span> <span class=\"n\">Cfg</span><span class=\"o\">)</span>  <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"n\">cfg.state</span> <span class=\"bp\">∈</span> <span class=\"n\">M.Fₐ</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">isReject</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">Machine</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">cfg</span> <span class=\"o\">:</span> <span class=\"n\">Cfg</span><span class=\"o\">)</span>  <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"n\">cfg.state</span> <span class=\"bp\">∈</span> <span class=\"n\">M.F</span><span class=\"bp\">ᵣ</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">isFinal</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">Machine</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">cfg</span> <span class=\"o\">:</span> <span class=\"n\">Cfg</span><span class=\"o\">)</span>  <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"n\">cfg.state</span> <span class=\"bp\">∈</span> <span class=\"n\">M.Fₐ</span> <span class=\"bp\">∨</span> <span class=\"n\">cfg.state</span> <span class=\"bp\">∈</span> <span class=\"n\">M.F</span><span class=\"bp\">ᵣ</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">reachN</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">Machine</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">c1</span> <span class=\"n\">c2</span> <span class=\"o\">:</span> <span class=\"n\">Cfg</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"k\">if</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"k\">then</span> <span class=\"n\">cfgEquiv</span> <span class=\"n\">c1</span> <span class=\"n\">c2</span>\n  <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"k\">then</span> <span class=\"n\">reachSucc</span> <span class=\"n\">M</span> <span class=\"n\">c1</span> <span class=\"n\">c2</span>\n  <span class=\"k\">else</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">c3</span> <span class=\"o\">:</span> <span class=\"n\">Cfg</span><span class=\"o\">),</span> <span class=\"n\">reachN</span> <span class=\"n\">M</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">c1</span> <span class=\"n\">c3</span> <span class=\"bp\">∧</span> <span class=\"n\">reachN</span> <span class=\"n\">M</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">c3</span> <span class=\"n\">c2</span>\n\n\n<span class=\"kd\">def</span> <span class=\"n\">finiteReach</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">Machine</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">c1</span> <span class=\"n\">c2</span> <span class=\"o\">:</span> <span class=\"n\">Cfg</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">reachN</span> <span class=\"n\">M</span> <span class=\"n\">n</span> <span class=\"n\">c1</span> <span class=\"n\">c2</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Word</span> <span class=\"o\">:=</span> <span class=\"n\">List</span> <span class=\"n\">ℕ</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Word.concat</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">Word</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Word</span> <span class=\"o\">:=</span> <span class=\"n\">List.append</span> <span class=\"n\">v</span> <span class=\"n\">w</span>\n<span class=\"kd\">infixr</span><span class=\"o\">:</span><span class=\"mi\">50</span> <span class=\"s2\">\" + \"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Word.concat</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Word.len</span> <span class=\"o\">(</span><span class=\"n\">w</span><span class=\"o\">:</span> <span class=\"n\">Word</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span>\n  <span class=\"n\">w.length</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Language</span> <span class=\"o\">:=</span> <span class=\"n\">Set</span> <span class=\"n\">Word</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Language.element</span> <span class=\"o\">(</span><span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">Word</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">Word</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"n\">L</span> <span class=\"n\">w</span>\n<span class=\"kd\">infixr</span><span class=\"o\">:</span><span class=\"mi\">75</span> <span class=\"s2\">\" ∈ \"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Language.element</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Language.complement</span> <span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"n\">Language</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Language</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">w</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">¬</span> <span class=\"o\">(</span><span class=\"n\">w</span> <span class=\"bp\">∈</span> <span class=\"n\">L</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Language.notElement</span> <span class=\"o\">(</span><span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">Word</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"n\">Language</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"n\">L</span> <span class=\"n\">w</span>\n<span class=\"kd\">infixr</span><span class=\"o\">:</span> <span class=\"mi\">75</span> <span class=\"s2\">\"∉\"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Language.notElement</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">isDecider</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">Machine</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">Word</span><span class=\"o\">),</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">c1</span> <span class=\"n\">c2</span> <span class=\"o\">:</span> <span class=\"n\">Cfg</span><span class=\"o\">),</span> <span class=\"n\">c1</span> <span class=\"bp\">=</span> <span class=\"o\">{</span><span class=\"n\">state</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">head</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">left</span> <span class=\"o\">:=</span> <span class=\"n\">List.nil</span><span class=\"o\">,</span>  <span class=\"n\">right</span> <span class=\"o\">:=</span> <span class=\"n\">w</span><span class=\"o\">}</span> <span class=\"bp\">∧</span>\n    <span class=\"n\">finiteReach</span> <span class=\"n\">M</span> <span class=\"n\">c1</span> <span class=\"n\">c2</span>\n\n\n<span class=\"kd\">def</span> <span class=\"n\">isEnumerator</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">Machine</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"n\">Language</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">Word</span><span class=\"o\">),</span> <span class=\"n\">w</span> <span class=\"bp\">∈</span> <span class=\"n\">L</span> <span class=\"bp\">→</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">c1</span> <span class=\"n\">c2</span> <span class=\"o\">:</span> <span class=\"n\">Cfg</span><span class=\"o\">),</span> <span class=\"n\">c1</span> <span class=\"bp\">=</span> <span class=\"o\">{</span><span class=\"n\">state</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">head</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">left</span> <span class=\"o\">:=</span> <span class=\"n\">List.nil</span><span class=\"o\">,</span>  <span class=\"n\">right</span> <span class=\"o\">:=</span> <span class=\"n\">w</span><span class=\"o\">}</span> <span class=\"bp\">∧</span>\n    <span class=\"n\">isAccept</span> <span class=\"n\">M</span> <span class=\"n\">c2</span> <span class=\"bp\">→</span> <span class=\"n\">finiteReach</span> <span class=\"n\">M</span> <span class=\"n\">c1</span> <span class=\"n\">c2</span>\n\n\n<span class=\"kd\">def</span> <span class=\"n\">isSemiDecider</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">Machine</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">Word</span><span class=\"o\">),</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">c1</span> <span class=\"n\">c2</span> <span class=\"o\">:</span> <span class=\"n\">Cfg</span><span class=\"o\">),</span> <span class=\"n\">c1</span> <span class=\"bp\">=</span> <span class=\"o\">{</span><span class=\"n\">state</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">head</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">left</span> <span class=\"o\">:=</span> <span class=\"n\">List.nil</span><span class=\"o\">,</span>  <span class=\"n\">right</span> <span class=\"o\">:=</span> <span class=\"n\">w</span><span class=\"o\">}</span> <span class=\"bp\">∧</span>\n    <span class=\"n\">isAccept</span> <span class=\"n\">M</span> <span class=\"n\">c2</span> <span class=\"bp\">→</span> <span class=\"n\">finiteReach</span> <span class=\"n\">M</span> <span class=\"n\">c1</span> <span class=\"n\">c2</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">isCoSemiDecider</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">Machine</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">Word</span><span class=\"o\">),</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">c1</span> <span class=\"n\">c2</span> <span class=\"o\">:</span> <span class=\"n\">Cfg</span><span class=\"o\">),</span> <span class=\"n\">c1</span> <span class=\"bp\">=</span> <span class=\"o\">{</span><span class=\"n\">state</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">head</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">left</span> <span class=\"o\">:=</span> <span class=\"n\">List.nil</span><span class=\"o\">,</span>  <span class=\"n\">right</span> <span class=\"o\">:=</span> <span class=\"n\">w</span><span class=\"o\">}</span> <span class=\"bp\">∧</span>\n    <span class=\"n\">isReject</span> <span class=\"n\">M</span> <span class=\"n\">c2</span> <span class=\"bp\">→</span> <span class=\"n\">finiteReach</span> <span class=\"n\">M</span> <span class=\"n\">c1</span> <span class=\"n\">c2</span>\n\n\n<span class=\"kd\">def</span> <span class=\"n\">semi_decidable</span> <span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"n\">Language</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">Machine</span><span class=\"o\">),</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">Word</span><span class=\"o\">),</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">c1</span> <span class=\"n\">c2</span> <span class=\"o\">:</span> <span class=\"n\">Cfg</span><span class=\"o\">),</span>\n    <span class=\"o\">(</span><span class=\"n\">w</span> <span class=\"bp\">∈</span> <span class=\"n\">L</span> <span class=\"bp\">→</span> <span class=\"n\">c1</span> <span class=\"bp\">=</span> <span class=\"o\">{</span><span class=\"n\">state</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">head</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">left</span> <span class=\"o\">:=</span> <span class=\"n\">List.nil</span><span class=\"o\">,</span>  <span class=\"n\">right</span> <span class=\"o\">:=</span> <span class=\"n\">w</span><span class=\"o\">}</span> <span class=\"bp\">∧</span> <span class=\"n\">finiteReach</span> <span class=\"n\">M</span> <span class=\"n\">c1</span> <span class=\"n\">c2</span> <span class=\"bp\">∧</span> <span class=\"n\">isAccept</span> <span class=\"n\">M</span> <span class=\"n\">c2</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">co_semi_decidable</span> <span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"n\">Language</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">Machine</span><span class=\"o\">),</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">Word</span><span class=\"o\">),</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">c1</span> <span class=\"n\">c2</span> <span class=\"o\">:</span> <span class=\"n\">Cfg</span><span class=\"o\">),</span>\n    <span class=\"o\">(</span><span class=\"n\">w</span> <span class=\"bp\">∉</span> <span class=\"n\">L</span> <span class=\"bp\">→</span> <span class=\"n\">c1</span> <span class=\"bp\">=</span> <span class=\"o\">{</span><span class=\"n\">state</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">head</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">left</span> <span class=\"o\">:=</span> <span class=\"n\">List.nil</span><span class=\"o\">,</span>  <span class=\"n\">right</span> <span class=\"o\">:=</span> <span class=\"n\">w</span><span class=\"o\">}</span> <span class=\"bp\">∧</span> <span class=\"n\">finiteReach</span> <span class=\"n\">M</span> <span class=\"n\">c1</span> <span class=\"n\">c2</span> <span class=\"bp\">∧</span> <span class=\"n\">isReject</span> <span class=\"n\">M</span> <span class=\"n\">c2</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">decidable</span> <span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"n\">Language</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">Machine</span><span class=\"o\">),</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">Word</span><span class=\"o\">),</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">c1</span> <span class=\"n\">c2</span> <span class=\"o\">:</span> <span class=\"n\">Cfg</span><span class=\"o\">),</span>\n    <span class=\"o\">((</span><span class=\"n\">w</span> <span class=\"bp\">∈</span> <span class=\"n\">L</span> <span class=\"bp\">→</span> <span class=\"n\">c1</span> <span class=\"bp\">=</span> <span class=\"o\">{</span><span class=\"n\">state</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">head</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">left</span> <span class=\"o\">:=</span> <span class=\"n\">List.nil</span><span class=\"o\">,</span>  <span class=\"n\">right</span> <span class=\"o\">:=</span> <span class=\"n\">w</span><span class=\"o\">}</span> <span class=\"bp\">∧</span> <span class=\"n\">finiteReach</span> <span class=\"n\">M</span> <span class=\"n\">c1</span> <span class=\"n\">c2</span> <span class=\"bp\">∧</span> <span class=\"n\">isAccept</span> <span class=\"n\">M</span> <span class=\"n\">c2</span><span class=\"o\">)</span> <span class=\"bp\">∧</span>\n    <span class=\"o\">(</span><span class=\"n\">w</span> <span class=\"bp\">∉</span> <span class=\"n\">L</span> <span class=\"bp\">→</span> <span class=\"n\">c1</span> <span class=\"bp\">=</span> <span class=\"o\">{</span><span class=\"n\">state</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">head</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">left</span> <span class=\"o\">:=</span> <span class=\"n\">List.nil</span><span class=\"o\">,</span>  <span class=\"n\">right</span> <span class=\"o\">:=</span> <span class=\"n\">w</span><span class=\"o\">}</span> <span class=\"bp\">∧</span> <span class=\"n\">finiteReach</span> <span class=\"n\">M</span> <span class=\"n\">c1</span> <span class=\"n\">c2</span> <span class=\"bp\">∧</span> <span class=\"n\">isReject</span> <span class=\"n\">M</span> <span class=\"n\">c2</span><span class=\"o\">))</span>\n</code></pre></div>\n<p>I then defined the following Theorem</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">CoSemiAndSemiEqDescidable</span> <span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"n\">Language</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">decidable</span> <span class=\"n\">L</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"n\">semi_decidable</span> <span class=\"n\">L</span> <span class=\"bp\">∧</span> <span class=\"n\">co_semi_decidable</span> <span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n    <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>Because i am pretty new to this i do not know how to proof this using Lean4.<br>\nI started by creating two goal (one for each direction) using apply Iff.intro then unfolded my definitions but then got more or less stuck.<br>\nAny idea on how to proceed ?</p>\n<p>Thanks in advance :)</p>",
        "id": 362880456,
        "sender_full_name": "HenrikT",
        "timestamp": 1685653355
    },
    {
        "content": "<p>Please provide imports.<br>\n<a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a></p>",
        "id": 362882142,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1685653897
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Set.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Set.List</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Finset.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.List.Basic</span>\n\n\n<span class=\"kd\">def</span> <span class=\"n\">Word</span> <span class=\"o\">:=</span> <span class=\"n\">List</span> <span class=\"n\">ℕ</span>\n<span class=\"kd\">def</span> <span class=\"n\">Language</span> <span class=\"o\">:=</span> <span class=\"n\">Set</span> <span class=\"n\">Word</span>\n\n\n<span class=\"kd\">structure</span> <span class=\"n\">Cfg</span> <span class=\"n\">where</span>\n  <span class=\"n\">state</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span>\n  <span class=\"n\">head</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span>\n  <span class=\"n\">left</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">ℕ</span>\n  <span class=\"n\">right</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">ℕ</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">Machine</span> <span class=\"n\">where</span>\n  <span class=\"n\">Q</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">ℕ</span>\n  <span class=\"bp\">Λ</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">ℕ</span>\n  <span class=\"bp\">Γ</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">ℕ</span>\n  <span class=\"n\">Fₐ</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">ℕ</span>\n  <span class=\"n\">F</span><span class=\"bp\">ᵣ</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">ℕ</span>\n  <span class=\"n\">q0</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span>\n  <span class=\"n\">δ</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"o\">(</span><span class=\"n\">ℕ</span> <span class=\"bp\">×</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"bp\">×</span> <span class=\"n\">ℕ</span> <span class=\"bp\">×</span> <span class=\"n\">Direction</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 362882458,
        "sender_full_name": "HenrikT",
        "timestamp": 1685653982
    },
    {
        "content": "<p>Where is <code>finiteReach</code> defined?</p>",
        "id": 362883319,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1685654282
    },
    {
        "content": "<p>I defined it in the same file. I was not sure how much code i should post.</p>\n<p>the definitions look as follows:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Direction</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"n\">Direction</span>\n  <span class=\"bp\">|</span> <span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"n\">Direction</span>\n  <span class=\"bp\">|</span> <span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"n\">Direction</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">cfgEquiv</span> <span class=\"o\">(</span><span class=\"n\">c1</span> <span class=\"n\">c2</span> <span class=\"o\">:</span> <span class=\"n\">Cfg</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"n\">c1.state</span> <span class=\"bp\">=</span> <span class=\"n\">c2.state</span> <span class=\"bp\">∧</span> <span class=\"n\">c1.head</span> <span class=\"bp\">=</span> <span class=\"n\">c2.head</span> <span class=\"bp\">∧</span> <span class=\"n\">c1.left</span> <span class=\"bp\">=</span> <span class=\"n\">c2.left</span> <span class=\"bp\">∧</span> <span class=\"n\">c1.right</span> <span class=\"bp\">=</span> <span class=\"n\">c2.right</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">reachSucc</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">Machine</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">c1</span> <span class=\"n\">c2</span> <span class=\"o\">:</span> <span class=\"n\">Cfg</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">γ</span> <span class=\"n\">s</span> <span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">Direction</span><span class=\"o\">),</span> <span class=\"bp\">∃</span> <span class=\"n\">δ</span> <span class=\"bp\">∈</span> <span class=\"n\">M.δ</span><span class=\"o\">,</span> <span class=\"n\">δ</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">γ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">w</span><span class=\"o\">,</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"n\">cfgEquiv</span> <span class=\"o\">(</span><span class=\"n\">updateCfg</span> <span class=\"n\">c1</span> <span class=\"n\">s</span> <span class=\"n\">w</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"n\">c2</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">isAccept</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">Machine</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">cfg</span> <span class=\"o\">:</span> <span class=\"n\">Cfg</span><span class=\"o\">)</span>  <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"n\">cfg.state</span> <span class=\"bp\">∈</span> <span class=\"n\">M.Fₐ</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">isReject</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">Machine</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">cfg</span> <span class=\"o\">:</span> <span class=\"n\">Cfg</span><span class=\"o\">)</span>  <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"n\">cfg.state</span> <span class=\"bp\">∈</span> <span class=\"n\">M.F</span><span class=\"bp\">ᵣ</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">isFinal</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">Machine</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">cfg</span> <span class=\"o\">:</span> <span class=\"n\">Cfg</span><span class=\"o\">)</span>  <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"n\">cfg.state</span> <span class=\"bp\">∈</span> <span class=\"n\">M.Fₐ</span> <span class=\"bp\">∨</span> <span class=\"n\">cfg.state</span> <span class=\"bp\">∈</span> <span class=\"n\">M.F</span><span class=\"bp\">ᵣ</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">reachN</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">Machine</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">c1</span> <span class=\"n\">c2</span> <span class=\"o\">:</span> <span class=\"n\">Cfg</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"k\">if</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"k\">then</span> <span class=\"n\">cfgEquiv</span> <span class=\"n\">c1</span> <span class=\"n\">c2</span>\n  <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"k\">then</span> <span class=\"n\">reachSucc</span> <span class=\"n\">M</span> <span class=\"n\">c1</span> <span class=\"n\">c2</span>\n  <span class=\"k\">else</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">c3</span> <span class=\"o\">:</span> <span class=\"n\">Cfg</span><span class=\"o\">),</span> <span class=\"n\">reachN</span> <span class=\"n\">M</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">c1</span> <span class=\"n\">c3</span> <span class=\"bp\">∧</span> <span class=\"n\">reachN</span> <span class=\"n\">M</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">c3</span> <span class=\"n\">c2</span>\n\n\n<span class=\"kd\">def</span> <span class=\"n\">finiteReach</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">Machine</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">c1</span> <span class=\"n\">c2</span> <span class=\"o\">:</span> <span class=\"n\">Cfg</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">reachN</span> <span class=\"n\">M</span> <span class=\"n\">n</span> <span class=\"n\">c1</span> <span class=\"n\">c2</span>\n</code></pre></div>",
        "id": 362883954,
        "sender_full_name": "HenrikT",
        "timestamp": 1685654494
    },
    {
        "content": "<p>You should post as much code as we need to replicate your issue.<br>\n<a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a></p>",
        "id": 362884085,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1685654528
    },
    {
        "content": "<p>Where is <code>updateCfg</code> defined?</p>",
        "id": 362884278,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1685654604
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">updateCfg</span> <span class=\"o\">(</span><span class=\"n\">cfg</span><span class=\"o\">:</span> <span class=\"n\">Cfg</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">d</span><span class=\"o\">:</span> <span class=\"n\">Direction</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Cfg</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">cfg.head</span><span class=\"o\">,</span> <span class=\"n\">d</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">Direction.L</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">{</span><span class=\"n\">state</span> <span class=\"o\">:=</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">head</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">left</span> <span class=\"o\">:=</span> <span class=\"n\">List.nil</span><span class=\"o\">,</span>  <span class=\"n\">right</span> <span class=\"o\">:=</span> <span class=\"n\">cfg.right.modifyHead</span> <span class=\"n\">w</span><span class=\"o\">}</span>\n    <span class=\"bp\">|</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">Direction.L</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">{</span><span class=\"n\">state</span> <span class=\"o\">:=</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">head</span> <span class=\"o\">:=</span> <span class=\"n\">cfg.head</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">left</span> <span class=\"o\">:=</span> <span class=\"n\">cfg.left.reverse.tail.reverse</span><span class=\"o\">,</span>  <span class=\"n\">right</span> <span class=\"o\">:=</span> <span class=\"o\">[</span><span class=\"n\">w</span><span class=\"o\">]</span><span class=\"bp\">.</span><span class=\"n\">append</span> <span class=\"n\">cfg.left</span><span class=\"o\">}</span>\n    <span class=\"bp\">|</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">Direction.R</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">{</span><span class=\"n\">state</span> <span class=\"o\">:=</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">head</span> <span class=\"o\">:=</span> <span class=\"n\">cfg.head</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">left</span> <span class=\"o\">:=</span> <span class=\"n\">cfg.left.append</span> <span class=\"o\">[</span><span class=\"n\">w</span><span class=\"o\">],</span>  <span class=\"n\">right</span> <span class=\"o\">:=</span> <span class=\"n\">cfg.left.tail</span><span class=\"o\">}</span>\n    <span class=\"bp\">|</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">Direction.N</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">{</span><span class=\"n\">state</span> <span class=\"o\">:=</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">head</span> <span class=\"o\">:=</span> <span class=\"n\">cfg.head</span><span class=\"o\">,</span> <span class=\"n\">left</span> <span class=\"o\">:=</span> <span class=\"n\">cfg.left</span><span class=\"o\">,</span>  <span class=\"n\">right</span> <span class=\"o\">:=</span> <span class=\"n\">cfg.right.modifyHead</span> <span class=\"n\">w</span><span class=\"o\">}</span>\n</code></pre></div>",
        "id": 362884472,
        "sender_full_name": "HenrikT",
        "timestamp": 1685654669
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a><br>\n\"so others can simply just cut and paste what you post, and see the same issue that you are seeing\"</p>",
        "id": 362884641,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1685654744
    },
    {
        "content": "<p>for the language i also defined the following</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">Language.element</span> <span class=\"o\">(</span><span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">Word</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">Word</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"n\">L</span> <span class=\"n\">w</span>\n<span class=\"kd\">infixr</span><span class=\"o\">:</span><span class=\"mi\">75</span> <span class=\"s2\">\" ∈ \"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Language.element</span>\n\n<span class=\"c1\">-- failed to synth. instance membership Word Language ?</span>\n<span class=\"kd\">def</span> <span class=\"n\">Language.complement</span> <span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"n\">Language</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Language</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">w</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">¬</span> <span class=\"o\">(</span><span class=\"n\">w</span> <span class=\"bp\">∈</span> <span class=\"n\">L</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Language.notElement</span> <span class=\"o\">(</span><span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">Word</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"n\">Language</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"n\">L</span> <span class=\"n\">w</span>\n<span class=\"kd\">infixr</span><span class=\"o\">:</span> <span class=\"mi\">75</span> <span class=\"s2\">\"∉\"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Language.notElement</span>\n</code></pre></div>",
        "id": 362885005,
        "sender_full_name": "HenrikT",
        "timestamp": 1685654865
    },
    {
        "content": "<p>Please click on the blue thing <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> and follow the instructions.</p>",
        "id": 362885155,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1685654924
    },
    {
        "content": "<p>ok i keep that in mind for next time, sorry for the confusion :)</p>",
        "id": 362885238,
        "sender_full_name": "HenrikT",
        "timestamp": 1685654971
    },
    {
        "content": "<p>For the next time and for this time as well. Please. Give me a code that I can compile.</p>\n<p>In case you don't want to copypaste too many lines of code, you can provide a link to a repository instead. However, I am fine with copypasting a long block of code IF IT WORKS.</p>",
        "id": 362885704,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1685655147
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"621592\">HenrikT</span> has marked this topic as resolved.</p>",
        "id": 362885860,
        "sender_full_name": "Notification Bot",
        "timestamp": 1685655216
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"621592\">HenrikT</span> has marked this topic as unresolved.</p>",
        "id": 362886062,
        "sender_full_name": "Notification Bot",
        "timestamp": 1685655294
    },
    {
        "content": "<p>Ah. You updated the original post! I'll have a look at it.</p>",
        "id": 362886100,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1685655305
    },
    {
        "content": "<p>yes thanks for your patience. The problem is, that i used two files instead of one hence its a bit difficulty with just copy past. I hope it works now though :)</p>",
        "id": 362886442,
        "sender_full_name": "HenrikT",
        "timestamp": 1685655439
    },
    {
        "content": "<p>This is how you can prove one of the \"trivial\" parts:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">CoSemiAndSemiEqDescidable</span> <span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"n\">Language</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">decidable</span> <span class=\"n\">L</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"n\">semi_decidable</span> <span class=\"n\">L</span> <span class=\"bp\">∧</span> <span class=\"n\">co_semi_decidable</span> <span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">constructor</span>\n  <span class=\"bp\">·</span> <span class=\"n\">intro</span> <span class=\"o\">⟨</span><span class=\"n\">M</span><span class=\"o\">,</span> <span class=\"n\">hM</span><span class=\"o\">⟩</span>\n    <span class=\"n\">constructor</span>\n    <span class=\"bp\">·</span> <span class=\"n\">unfold</span> <span class=\"n\">semi_decidable</span>\n      <span class=\"n\">use</span> <span class=\"n\">M</span>\n      <span class=\"n\">intro</span> <span class=\"n\">w</span>\n      <span class=\"n\">specialize</span> <span class=\"n\">hM</span> <span class=\"n\">w</span>\n      <span class=\"n\">rcases</span> <span class=\"n\">hM</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">c₁</span><span class=\"o\">,</span> <span class=\"n\">c₂</span><span class=\"o\">,</span> <span class=\"n\">h_yesin</span><span class=\"o\">,</span> <span class=\"n\">h_notin</span><span class=\"o\">⟩</span>\n      <span class=\"n\">use</span> <span class=\"n\">c₁</span>\n      <span class=\"n\">use</span> <span class=\"n\">c₂</span>\n      <span class=\"n\">exact</span> <span class=\"n\">h_yesin</span>\n    <span class=\"bp\">·</span> <span class=\"gr\">sorry</span>\n  <span class=\"bp\">·</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>I suggest you play with it yourself and let us know when you encounter a major obstacle.</p>",
        "id": 362887339,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1685655823
    },
    {
        "content": "<p>ok thanks a lot ill have a look at it</p>",
        "id": 362887569,
        "sender_full_name": "HenrikT",
        "timestamp": 1685655908
    },
    {
        "content": "<p>Discharging the first <code>sorry</code> is straightforward. However, for the second implication, you will have to construct a new machine, which will be much more difficult.</p>",
        "id": 362887641,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1685655937
    },
    {
        "content": "<p>Note that in the part I provided \"nothing\" happens — I just took the assumption and threw away one part.</p>",
        "id": 362888076,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1685656089
    },
    {
        "content": "<p>This is not really educational but possibly useful:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">DecidableIff</span> <span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"n\">Language</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">decidable</span> <span class=\"n\">L</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"n\">semi_decidable</span> <span class=\"n\">L</span> <span class=\"bp\">∧</span> <span class=\"n\">co_semi_decidable</span> <span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">constructor</span>\n  <span class=\"bp\">·</span> <span class=\"n\">intro</span> <span class=\"o\">⟨</span><span class=\"n\">M</span><span class=\"o\">,</span> <span class=\"n\">hM</span><span class=\"o\">⟩</span>\n    <span class=\"n\">constructor</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">use</span> <span class=\"n\">M</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">intro</span> <span class=\"n\">w</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">rcases</span> <span class=\"n\">hM</span> <span class=\"n\">w</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">c₁</span><span class=\"o\">,</span> <span class=\"n\">c₂</span><span class=\"o\">,</span> <span class=\"n\">w_yesin</span><span class=\"o\">,</span> <span class=\"n\">w_notin</span><span class=\"o\">⟩</span>\n    <span class=\"bp\">·</span> <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">c₁</span><span class=\"o\">,</span> <span class=\"n\">c₂</span><span class=\"o\">,</span> <span class=\"n\">w_yesin</span><span class=\"o\">⟩</span>\n    <span class=\"bp\">·</span> <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">c₁</span><span class=\"o\">,</span> <span class=\"n\">c₂</span><span class=\"o\">,</span> <span class=\"n\">w_notin</span><span class=\"o\">⟩</span>\n  <span class=\"bp\">·</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 362888665,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1685656380
    },
    {
        "content": "<p>thanks having an example to look at realy helps with understanding how Lean works</p>",
        "id": 362888945,
        "sender_full_name": "HenrikT",
        "timestamp": 1685656506
    },
    {
        "content": "<p>If I can give a general advice, write more definitions and avoid stuff like:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">{</span><span class=\"n\">state</span> <span class=\"o\">:=</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">head</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">left</span> <span class=\"o\">:=</span> <span class=\"n\">List.nil</span><span class=\"o\">,</span>  <span class=\"n\">right</span> <span class=\"o\">:=</span> <span class=\"n\">cfg.right.modifyHead</span> <span class=\"n\">w</span><span class=\"o\">}</span>\n</code></pre></div>",
        "id": 362889002,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1685656535
    },
    {
        "content": "<p>ok ill try to keep that in mind</p>",
        "id": 362889129,
        "sender_full_name": "HenrikT",
        "timestamp": 1685656578
    },
    {
        "content": "<p>If the issue is understanding Lean, I suggest you start with easier material. Like the Natural Number Game:<br>\n<a href=\"https://adam.math.hhu.de/#/g/hhu-adam/NNG4\">https://adam.math.hhu.de/#/g/hhu-adam/NNG4</a></p>",
        "id": 362889268,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1685656652
    },
    {
        "content": "<p>i did not know there was a LEAN4 version i only found the Lean3 version</p>",
        "id": 362889457,
        "sender_full_name": "HenrikT",
        "timestamp": 1685656727
    },
    {
        "content": "<p>ill have a look at it</p>",
        "id": 362889470,
        "sender_full_name": "HenrikT",
        "timestamp": 1685656735
    },
    {
        "content": "<p>NNG4 is pretty new!</p>",
        "id": 362889522,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1685656751
    },
    {
        "content": "<p>Ok guess i play abit arond in NNG4. If anything else pops up regarding the proof ill let you know</p>",
        "id": 362890149,
        "sender_full_name": "HenrikT",
        "timestamp": 1685656963
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"621592\">HenrikT</span> <a href=\"#narrow/stream/113489-new-members/topic/Help.20with.20proof.20structure/near/362883954\">said</a>:</p>\n<blockquote>\n<p>I defined it in the same file.<br>\n(...)</p>\n</blockquote>\n<p>FYI, I didn't check whether your definitions make sense as a Turing machine. I was just treating it as a black box.</p>\n<p>If you really want to play with Turing machines, I suggest that (before you do any theorems) you define an example and check whether you can walk through its computation in the way you intended.</p>",
        "id": 362890179,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1685656975
    },
    {
        "content": "<p>ok <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 362890513,
        "sender_full_name": "HenrikT",
        "timestamp": 1685657117
    }
]