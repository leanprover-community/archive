[
    {
        "content": "<p>Hello Leanlip! (Zulean?)</p>\n<p>I'm a recovering Coq user beginning to work with Lean. I see that there are many topics about instance resolution failure, but flipping through them I don't see any topics covering the general issue I have.</p>\n<p>I've defined the following structure for Mealy machines along with a trivial example machine.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">mealy</span> <span class=\"o\">:=</span>\n<span class=\"n\">mk</span> <span class=\"o\">::</span> <span class=\"o\">(</span><span class=\"n\">state</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n      <span class=\"o\">(</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"c1\">-- input alphabet \\iota</span>\n      <span class=\"o\">(</span><span class=\"n\">ω</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"c1\">-- output alphabet \\omega</span>\n      <span class=\"o\">(</span><span class=\"n\">tr</span> <span class=\"o\">:</span> <span class=\"n\">state</span> <span class=\"bp\">×</span> <span class=\"n\">ι</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">state</span> <span class=\"bp\">×</span> <span class=\"n\">ω</span><span class=\"o\">)</span>\n      <span class=\"o\">(</span><span class=\"n\">init</span> <span class=\"o\">:</span> <span class=\"n\">state</span><span class=\"o\">)</span>\n\n<span class=\"c1\">-- an example mealy machine</span>\n<span class=\"kd\">def</span> <span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">mealy</span> <span class=\"o\">:=</span> <span class=\"n\">mealy.mk</span> <span class=\"n\">ℕ</span> <span class=\"n\">ℕ</span> <span class=\"n\">ℕ</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"k\">let</span> <span class=\"n\">σ</span> <span class=\"o\">:=</span> <span class=\"n\">p.1</span> <span class=\"k\">in</span>\n                                       <span class=\"k\">let</span> <span class=\"n\">i</span> <span class=\"o\">:=</span> <span class=\"n\">p.2</span> <span class=\"k\">in</span>\n                                       <span class=\"o\">(</span><span class=\"n\">p.1</span><span class=\"bp\">+</span><span class=\"n\">p.2</span><span class=\"o\">,</span> <span class=\"n\">p.1</span><span class=\"bp\">+</span><span class=\"n\">p.2</span><span class=\"o\">))</span> <span class=\"mi\">0</span>\n</code></pre></div>\n<p>That is great, but when I try to say anything about <code>M</code>, I run into problems. Stating the following theorem results in instance resolution failures for <code>has_lt M.state</code>, <code>has_zero M.state</code>, and <code>has_one M.ι</code>, but <code>M.state</code> and <code>M.ι</code> are both <code>nat</code>, so I'm a bit at a loss. One thing I've tried is <code>open</code>ing <code>mealy</code> before stating this theorem, which didn't help.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">silly</span> <span class=\"o\">:</span>  <span class=\"o\">(</span><span class=\"n\">M.tr</span> <span class=\"o\">(</span><span class=\"n\">M.init</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span>\n</code></pre></div>",
        "id": 343540994,
        "sender_full_name": "jay kruer",
        "timestamp": 1679442059
    },
    {
        "content": "<p>lean doesn't unfold defs so eagerly. But you can add the necessary instances as follows:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">semiring</span> <span class=\"n\">M.ι</span> <span class=\"o\">:=</span>\n<span class=\"n\">nat.semiring</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">semiring</span> <span class=\"n\">M.state</span> <span class=\"o\">:=</span>\n<span class=\"n\">nat.semiring</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_lt</span> <span class=\"n\">M.state</span> <span class=\"o\">:=</span>\n<span class=\"n\">nat.has_lt</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">silly</span> <span class=\"o\">:</span>  <span class=\"o\">(</span><span class=\"n\">M.tr</span> <span class=\"o\">(</span><span class=\"n\">M.init</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 343544792,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1679443781
    },
    {
        "content": "<p>alternatively, change <code>def</code> to <code>abbreviation</code> in the definition of <code>M</code>.</p>",
        "id": 343544926,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1679443814
    },
    {
        "content": "<p>That essentially has the effect of making the definition reducible, so typeclass resolution can see through the definition.</p>",
        "id": 343544980,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1679443838
    },
    {
        "content": "<p>Or make <code>state</code>, <code>ι</code> and <code>ω</code> parameters in the definition.</p>",
        "id": 343544987,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1679443839
    },
    {
        "content": "<p>Yeah, that would be a good approach as well.</p>",
        "id": 343545035,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1679443855
    },
    {
        "content": "<p>Which, IMHO, makes the most sense (because then you won't have to write these instances every time, or deal with some of the potential headaches of <code>reducible</code> seeing through \"too much\"). But I don't know much about mealy machines.</p>",
        "id": 343545245,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1679443935
    },
    {
        "content": "<p>I guess it primarily depends on whether you ever want non-standard type classes on these types than the ones with which they naturally come equipped.</p>",
        "id": 343545640,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1679444100
    },
    {
        "content": "<p><code>ι</code> and <code>ω</code> should probably be parameters of the type anyways, because what good is a machine if you don't know what you can connect it to? But for <code>state</code> there could be very good reasons to keep it as a field, that are more important than being able to evaluate toy examples without writing auxiliary instances.</p>",
        "id": 343579365,
        "sender_full_name": "Reid Barton",
        "timestamp": 1679463286
    }
]