[
    {
        "content": "<p>I'm going over the tutorial proposed by <span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> . I'm confused about what it means the double \"exists\" in a judgement like</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">key</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"err\">∈</span> <span class=\"n\">A</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"err\">↑</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n</code></pre></div>\n\n\n<p>How does that notation translates into bare <code>Exists</code>?  Is it a way to ask Lean to display the unfolding of the definition?</p>",
        "id": 196719355,
        "sender_full_name": "Walter Moreira",
        "timestamp": 1588816217
    },
    {
        "content": "<p>It means</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">key</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">),</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"err\">∈</span> <span class=\"n\">A</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"err\">↑</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 196720048,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588817114
    },
    {
        "content": "<p>Thank you <span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span>   That's what I was expecting. I got confused about it with the application of <code>choose u hu using key</code> which added</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">hu</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">u</span> <span class=\"n\">n</span> <span class=\"err\">∈</span> <span class=\"n\">A</span> <span class=\"bp\">∧</span> <span class=\"n\">u</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"err\">↑</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n</code></pre></div>\n\n\n<p>and I couldn't see how Lean was generating the <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>∧</mo></mrow><annotation encoding=\"application/x-tex\">\\wedge</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.55556em;vertical-align:0em;\"></span><span class=\"mord\">∧</span></span></span></span> in that clause. It seems that it becomes more clear when doing <code>choose u v hu</code> which generates two functions. </p>\n<p>I guess that Lean automatically combines them with <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>∧</mo></mrow><annotation encoding=\"application/x-tex\">\\wedge</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.55556em;vertical-align:0em;\"></span><span class=\"mord\">∧</span></span></span></span> if I provide only one variable?</p>",
        "id": 196721114,
        "sender_full_name": "Walter Moreira",
        "timestamp": 1588818445
    },
    {
        "content": "<p>I think the <code>choose</code> tactic has some specific magic to get rid of unnecessary ∃ (in the sense that the variable, here <code>H</code>, is not used) and turn them into ∧.</p>",
        "id": 196721206,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588818585
    }
]