[
    {
        "content": "<p>My current <a href=\"https://github.com/leanprover-community/mathlib4/pull/7892\">PR</a> has its testing running now since almost an hour. Is there a time limit in place?  (I hope there is)</p>\n<p>I'm not sure why it's running so long. The new <code>differentiability</code> tactic I'm trying to build (based on Aesop) seems to run forever on a certain example. I'm assuming it runs into an endless loop somewhere but don't know how to debug it because it never ends. Usually, in such a situation I get either a stack overflow or the number of heartbeats runs out. I don't understand why this doesn't happen there and how to debug it.</p>",
        "id": 399188584,
        "sender_full_name": "Adomas Baliuka",
        "timestamp": 1698617060
    },
    {
        "content": "<p>I checked my latest build and there it took 51 seconds, so that does seem like a long time</p>",
        "id": 399188633,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1698617158
    },
    {
        "content": "<p>Have you run the tests locally? CI does <code>make -j 8 test</code></p>",
        "id": 399188692,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1698617210
    },
    {
        "content": "<p>I canceled it now. It does not finish on my machine either (which might mean I shouldn't have pushed it in the first place, sorry about that, was hoping to get oleans). The real question though is: <strong>What is the time limit</strong> (assuming there is one) and <strong>how to debug something that just doesn't terminate?</strong></p>",
        "id": 399188840,
        "sender_full_name": "Adomas Baliuka",
        "timestamp": 1698617386
    },
    {
        "content": "<p>Normally you would add some <code>logInfo</code> or <code>dbg_trace</code> statements to try and work out where it is looping I guess</p>",
        "id": 399188911,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1698617421
    },
    {
        "content": "<p>It's an Aesop ruleset. Does that mean I should put these into the aesop sources while debugging?</p>",
        "id": 399188927,
        "sender_full_name": "Adomas Baliuka",
        "timestamp": 1698617477
    },
    {
        "content": "<p>If turning on aesop traces (it should have some built in) isn't enough to track it down then yes, but maybe you can just add the traces into your aesop rules as well?<br>\n(Normally in that situation I would copy paste the bits of the tactic i'm trying to debug into a new file. If you modify aesop directly you'll probably have to spend a lot of time waiting for all the files that depend on aesop to recompile. So making a copy that is only used for differentiability is usually faster. This sounds like quite a tricky thing to track down though)</p>",
        "id": 399197399,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1698625541
    },
    {
        "content": "<p>The issue with the built-in traces is that they are only displayed (as far as I can tell) once the tactic either fails or succeeds.</p>",
        "id": 399300701,
        "sender_full_name": "Adomas Baliuka",
        "timestamp": 1698672213
    }
]