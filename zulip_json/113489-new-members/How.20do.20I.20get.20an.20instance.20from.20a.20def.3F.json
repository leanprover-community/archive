[
    {
        "content": "<p>I have been experimenting with a variant of <code>Polynomial.eval</code>, but have trouble comparing it to the existing <code>eval</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.Module.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Polynomial.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Polynomial.Eval</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">Polynomial</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">S</span><span class=\"o\">)</span>\n\n<span class=\"sd\">/-- Scalar multiplication together with taking a natural number power. -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">smul_pow</span> <span class=\"o\">[</span><span class=\"n\">AddCommMonoid</span> <span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Pow</span> <span class=\"n\">S</span> <span class=\"n\">ℕ</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">MulActionWithZero</span> <span class=\"n\">R</span> <span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">R</span> <span class=\"bp\">→</span> <span class=\"n\">S</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">n</span> <span class=\"n\">r</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">r</span> <span class=\"bp\">•</span> <span class=\"n\">x</span><span class=\"bp\">^</span><span class=\"n\">n</span>\n\n<span class=\"sd\">/-- Evaluate a polynomial `p` in the scalar commutative semiring `R` at an element `x` in the target</span>\n<span class=\"sd\">`S` using scalar multiple `R`-action. -/</span>\n<span class=\"n\">irreducible_def</span> <span class=\"n\">smeval</span> <span class=\"o\">[</span><span class=\"n\">AddCommMonoid</span> <span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Pow</span> <span class=\"n\">S</span> <span class=\"n\">ℕ</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">MulActionWithZero</span> <span class=\"n\">R</span> <span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">])</span> <span class=\"o\">:</span> <span class=\"n\">S</span> <span class=\"o\">:=</span>\n  <span class=\"n\">p.sum</span> <span class=\"o\">(</span><span class=\"n\">smul_pow</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">smeval_eq_sum</span> <span class=\"o\">[</span><span class=\"n\">AddCommMonoid</span> <span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Pow</span> <span class=\"n\">S</span> <span class=\"n\">ℕ</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">MulActionWithZero</span> <span class=\"n\">R</span> <span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">])</span> <span class=\"o\">:</span>\n    <span class=\"n\">p.smeval</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">p.sum</span> <span class=\"o\">(</span><span class=\"n\">smul_pow</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">smeval_def</span><span class=\"o\">]</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">smeval_eq_eval₂</span> <span class=\"o\">[</span><span class=\"n\">Semiring</span> <span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">→+*</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">])</span> <span class=\"o\">:</span>\n    <span class=\"n\">p.smeval</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">p.eval₂</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"c1\">-- failed to synthesize instance MulActionWithZero R S</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>I am clearly missing an action of <code>R</code> on <code>S</code>.  A <code>Module R S</code> structure is defined from a ring homomorphism <code>f</code> in <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=RingHom.toModule#doc\">docs#RingHom.toModule</a> but since it is not an instance, I don't know how to apply it here.</p>",
        "id": 408478830,
        "sender_full_name": "Scott Carnahan",
        "timestamp": 1702845538
    },
    {
        "content": "<p>Does <code>haveI := RingHom.toModule f</code> work?</p>",
        "id": 408483463,
        "sender_full_name": "llllvvuu",
        "timestamp": 1702850272
    },
    {
        "content": "<p>Or <code>letI</code>? (because it's data)</p>",
        "id": 408483747,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1702850476
    },
    {
        "content": "<p>It makes no difference here I think</p>",
        "id": 408484150,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1702850699
    },
    {
        "content": "<p>Thanks a lot!  It ended up looking like:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">smeval_eq_eval₂</span> <span class=\"o\">[</span><span class=\"n\">Semiring</span> <span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">→+*</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">])</span> <span class=\"o\">:</span>\n    <span class=\"n\">haveI</span> <span class=\"o\">:</span> <span class=\"n\">Module</span> <span class=\"n\">R</span> <span class=\"n\">S</span> <span class=\"o\">:=</span> <span class=\"n\">RingHom.toModule</span> <span class=\"n\">f</span> <span class=\"c1\">-- both haveI and letI work here.</span>\n    <span class=\"n\">p.smeval</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">p.eval₂</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">letI</span> <span class=\"o\">:</span> <span class=\"n\">Module</span> <span class=\"n\">R</span> <span class=\"n\">S</span> <span class=\"o\">:=</span> <span class=\"n\">RingHom.toModule</span> <span class=\"n\">f</span> <span class=\"c1\">-- rw gets angry if I use haveI here.</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">smeval_eq_sum</span><span class=\"o\">,</span> <span class=\"n\">eval₂_eq_sum</span><span class=\"o\">]</span>\n  <span class=\"n\">exact</span> <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 408540056,
        "sender_full_name": "Scott Carnahan",
        "timestamp": 1702881107
    }
]