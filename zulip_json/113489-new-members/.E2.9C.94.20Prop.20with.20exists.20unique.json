[
    {
        "content": "<p>Hello everyone,</p>\n<p>In the following function that represents the behavior of an XOR gate, I get an error:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">OR_spec</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">bool</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">out</span> <span class=\"o\">:</span> <span class=\"n\">bool</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"n\">out</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">∃!</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">A</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">tt</span><span class=\"o\">)</span>\n\n\n<span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"n\">type</span> <span class=\"kd\">class</span> <span class=\"kd\">instance</span> <span class=\"n\">for</span>\n<span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">bool</span><span class=\"o\">,</span>\n<span class=\"n\">out</span> <span class=\"o\">:</span> <span class=\"n\">bool</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">decidable</span> <span class=\"o\">(</span><span class=\"bp\">∃!</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">bool</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">A</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">tt</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>Can someone give me some more information on what is going on and how I can resolve this? Why does this happen in particular with unique exists and not with other quantifiers such as for all and exists?</p>",
        "id": 371613505,
        "sender_full_name": "Zahir Bingen",
        "timestamp": 1688266440
    },
    {
        "content": "<p>Lean is just asking for an algorithm to solve that problem. Sometimes it can figure out things like this itself but apparently not this one. You could supply it yourself if you want to be constructive, or just switch on classical mode if you don't want to ever run the function.</p>",
        "id": 371615569,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1688267511
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/Prop.20with.20exists.20unique/near/371615569\">said</a>:</p>\n<blockquote>\n<p>Lean is just asking for an algorithm to solve that problem. Sometimes it can figure out things like this itself but apparently not this one. You could supply it yourself if you want to be constructive, or just switch on classical mode if you don't want to ever run the function.</p>\n</blockquote>\n<p>Thank you very much!</p>",
        "id": 371618598,
        "sender_full_name": "Zahir Bingen",
        "timestamp": 1688269140
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"618701\">Zahir Bingen</span> has marked this topic as resolved.</p>",
        "id": 371618616,
        "sender_full_name": "Notification Bot",
        "timestamp": 1688269146
    },
    {
        "content": "<p>You could also change that equality into an iff</p>",
        "id": 371645579,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1688283470
    }
]