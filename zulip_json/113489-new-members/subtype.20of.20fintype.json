[
    {
        "content": "<p>I have two related qustions<br>\nfirst:<br>\nwhy sub_bool is not rdeucable to fintype? there is a way to make every definition of somthing that reducable to fintype also reducable to fintype? how to prove the commented line - <code> fintype (sub_bool)</code>?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.fintype.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.fintype.card</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">fintype</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">sub_bool</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">bool</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">true</span><span class=\"o\">}</span>\n<span class=\"c1\">-- instance : fintype (sub_bool) := sorry</span>\n<span class=\"k\">#check</span> <span class=\"n\">card</span> <span class=\"o\">({</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">bool</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">true</span><span class=\"o\">})</span>\n<span class=\"k\">#check</span> <span class=\"n\">card</span> <span class=\"o\">(</span><span class=\"n\">sub_bool</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>second:<br>\nIn the following code even the subtype it self is not reduced to fintype.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.fintype.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.fintype.card</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">fintype</span>\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">set_pow</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">V</span> <span class=\"bp\">//</span> <span class=\"n\">card</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"n\">n</span><span class=\"o\">}</span>\n<span class=\"k\">#check</span> <span class=\"n\">card</span> <span class=\"o\">({</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">V</span> <span class=\"bp\">//</span> <span class=\"n\">card</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"n\">n</span><span class=\"o\">})</span>\n</code></pre></div>\n<p>It's looks like that subtype is reducable to fintype only if the predicate is <code>decidable_pred</code>,  How to fix it?</p>",
        "id": 363644323,
        "sender_full_name": "Shimon Cohen",
        "timestamp": 1685953524
    },
    {
        "content": "<p>Whenever you make a <code>def foo := bar</code>, Lean forgets (almost) everything it knows about <code>bar</code> when you work with <code>foo</code></p>",
        "id": 363648565,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1685954647
    },
    {
        "content": "<p>If you use <code>@[reducible] def</code> then it does not</p>",
        "id": 363648651,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1685954674
    },
    {
        "content": "<p>anything about this?<br>\nsecond:<br>\nIn the following code even the subtype it self is not reduced to fintype.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.fintype.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.fintype.card</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">fintype</span>\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">set_pow</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">V</span> <span class=\"bp\">//</span> <span class=\"n\">card</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"n\">n</span><span class=\"o\">}</span>\n<span class=\"k\">#check</span> <span class=\"n\">card</span> <span class=\"o\">({</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">V</span> <span class=\"bp\">//</span> <span class=\"n\">card</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"n\">n</span><span class=\"o\">})</span>\n</code></pre></div>\n<p>It's looks like that subtype is reducable to fintype only if the predicate is decidable_pred, How to fix it?</p>",
        "id": 363771433,
        "sender_full_name": "Shimon Cohen",
        "timestamp": 1685980574
    },
    {
        "content": "<p>Your <code>set_pow</code> is not finite in general... Do you want to assume that <code>V</code> is finite?</p>",
        "id": 363774651,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1685981217
    },
    {
        "content": "<p>adding [fintype V] to the variables not solve it</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.fintype.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.fintype.card</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">fintype</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n<span class=\"kd\">@[reducible]</span> <span class=\"kd\">def</span> <span class=\"n\">set_pow</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">V</span> <span class=\"bp\">//</span> <span class=\"n\">card</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"n\">n</span><span class=\"o\">}</span>\n<span class=\"k\">#check</span> <span class=\"n\">card</span> <span class=\"o\">({</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">V</span> <span class=\"bp\">//</span> <span class=\"n\">s.card</span> <span class=\"bp\">=</span> <span class=\"n\">n</span><span class=\"o\">})</span>\n<span class=\"k\">#check</span> <span class=\"n\">card</span> <span class=\"o\">(</span><span class=\"n\">set_pow</span> <span class=\"n\">V</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 363776294,
        "sender_full_name": "Shimon Cohen",
        "timestamp": 1685981525
    },
    {
        "content": "<p><code>import data.fintype.powerset</code></p>",
        "id": 363781394,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1685982747
    },
    {
        "content": "<p>what about this?<br>\n<a href=\"#narrow/stream/116395-maths/topic/graphs.20edge_finset/near/363950165\">https://leanprover.zulipchat.com/#narrow/stream/116395-maths/topic/graphs.20edge_finset/near/363950165</a><br>\nthere is a way to include (reduciable) constarins on the type? for example to change this <code>({s : finset V // s.card = n})</code> so s will have <code>[decidable_eq]</code> - In this way I coould request explicitly everything that I need insteed of dealing with how to make lean infer it implicity</p>",
        "id": 363951062,
        "sender_full_name": "Shimon Cohen",
        "timestamp": 1686046669
    }
]