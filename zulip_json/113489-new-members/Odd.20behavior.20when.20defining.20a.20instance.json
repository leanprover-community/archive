[
    {
        "content": "<p>Any reason why the first definition fails while the others don't ?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Pos</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">one</span> <span class=\"o\">:</span> <span class=\"n\">Pos</span>\n  <span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"o\">:</span> <span class=\"n\">Pos</span> <span class=\"bp\">→</span> <span class=\"n\">Pos</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Add</span> <span class=\"n\">Pos</span> <span class=\"n\">where</span>\n  <span class=\"n\">add</span> <span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"o\">:=</span> <span class=\"k\">match</span> <span class=\"n\">m</span> <span class=\"k\">with</span>\n           <span class=\"bp\">|</span> <span class=\"n\">Pos.one</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Pos.succ</span> <span class=\"n\">n</span>\n           <span class=\"bp\">|</span> <span class=\"n\">Pos.succ</span> <span class=\"n\">m'</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Pos.succ</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">m'</span><span class=\"o\">)</span> <span class=\"c1\">-- failed to synthesize instance HAdd Pos Pos ?m.250</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Add</span> <span class=\"n\">Pos</span> <span class=\"n\">where</span>\n  <span class=\"n\">add</span> <span class=\"n\">n</span> <span class=\"c1\">-- : Pos -&gt; Pos</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Pos.one</span>      <span class=\"bp\">=&gt;</span> <span class=\"n\">Pos.succ</span> <span class=\"n\">n</span>\n  <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">Pos.succ</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Pos.succ</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"c1\">-- OK !</span>\n\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Add</span> <span class=\"n\">Pos</span> <span class=\"n\">where</span>\n  <span class=\"n\">add</span> <span class=\"c1\">-- : Pos -&gt; Pos -&gt; Pos</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Pos.one</span>   <span class=\"bp\">=&gt;</span> <span class=\"n\">Pos.succ</span>\n  <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">Pos.succ</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Pos.succ</span> <span class=\"bp\">∘</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"bp\">.</span><span class=\"o\">)</span> <span class=\"c1\">-- OK</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Add</span> <span class=\"n\">Pos</span> <span class=\"n\">where</span>\n  <span class=\"n\">add</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span>\n    <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">Pos.one</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Pos.succ</span>\n    <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">Pos.succ</span> <span class=\"n\">n</span><span class=\"o\">)</span>  <span class=\"bp\">=&gt;</span> <span class=\"n\">Pos.succ</span> <span class=\"bp\">∘</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"bp\">.</span><span class=\"o\">)</span> <span class=\"c1\">-- OK</span>\n</code></pre></div>\n<p>I tried on stable and nightly-2023-10-31</p>",
        "id": 399480547,
        "sender_full_name": "Nicolas Rolland",
        "timestamp": 1698751601
    },
    {
        "content": "<p>The others only succeed because of the first one.<br>\nWhen you write <code>n+m'</code> for two elements of <code>Pos</code> lean goes looking for a typeclass <code>Add Pos</code>, when you are defining the first one it doesn't find any so it fails (gracefully enough that the instance is still added to the environment with a sorried out term).</p>",
        "id": 399499473,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1698753276
    },
    {
        "content": "<p>You can either make a separate <code>Pos.add</code> function that can call itself recursively or do something like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Add</span> <span class=\"n\">Pos</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">add</span><span class=\"o\">}</span>\n<span class=\"n\">where</span>\n  <span class=\"n\">add</span> <span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"o\">:=</span> <span class=\"k\">match</span> <span class=\"n\">m</span> <span class=\"k\">with</span>\n           <span class=\"bp\">|</span> <span class=\"n\">Pos.one</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Pos.succ</span> <span class=\"n\">n</span>\n           <span class=\"bp\">|</span> <span class=\"n\">Pos.succ</span> <span class=\"n\">m'</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Pos.succ</span> <span class=\"o\">(</span><span class=\"n\">add</span> <span class=\"n\">n</span> <span class=\"n\">m'</span><span class=\"o\">)</span> <span class=\"c1\">-- failed to synthesize instance HAdd Pos Pos ?m.250</span>\n</code></pre></div>",
        "id": 399501361,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1698753377
    },
    {
        "content": "<p>Where all your variants probably work there</p>",
        "id": 399502258,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1698753391
    },
    {
        "content": "<p>Ah, good to know ! Thank you for spotting this and your solution</p>",
        "id": 399506748,
        "sender_full_name": "Nicolas Rolland",
        "timestamp": 1698753811
    }
]