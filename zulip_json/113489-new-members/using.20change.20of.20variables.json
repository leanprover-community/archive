[
    {
        "content": "<p>I understand the statement of the theorem for a change, but how do I actually use [integral_comp_smul_deriv}(<a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/MeasureTheory/Integral/FundThmCalculus.html#intervalIntegral.integral_comp_smul_deriv\">https://leanprover-community.github.io/mathlib4_docs/Mathlib/MeasureTheory/Integral/FundThmCalculus.html#intervalIntegral.integral_comp_smul_deriv</a>)? In this case to perform the change of variables <code>(x,y)→ ((u+v)/2,((u-v)/2)</code>.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n<span class=\"kn\">open</span> <span class=\"n\">Real</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"o\">)(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∫</span><span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span><span class=\"n\">ℝ</span> <span class=\"o\">)(</span><span class=\"n\">y</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"k\">in</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">cos</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">*</span> <span class=\"n\">cos</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">sin</span> <span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">y</span><span class=\"o\">)</span><span class=\"bp\">*</span> <span class=\"n\">sin</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>(<code>=0</code> because the RHS is irrelevant).</p>",
        "id": 403558729,
        "sender_full_name": "Nicholas Wilson",
        "timestamp": 1700647309
    },
    {
        "content": "<p>The lemma you link to seems to only let you change one real variable, so if you want to change two then you probably need another lemma? I'm pretty sure this lemma exists because I saw Sebastian Gouezel change 2 variables in a nice talk in Lean in Lyon (available on YouTube)</p>",
        "id": 403654023,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1700681520
    },
    {
        "content": "<p>I'm pretty sure you can decompose this change into two one-variable changes,</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">,</span><span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">A</span><span class=\"bp\">/</span><span class=\"mi\">2</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">u</span><span class=\"o\">,</span><span class=\"n\">v</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>then you can do an LU decomposition of </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">A</span><span class=\"bp\">/</span><span class=\"mi\">2</span><span class=\"bp\">=</span><span class=\"o\">[[</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">1</span><span class=\"o\">],</span>  <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">]]</span>\n<span class=\"n\">L</span><span class=\"bp\">=</span><span class=\"o\">[[</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">0</span><span class=\"o\">],</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">1</span><span class=\"o\">]]</span>\n<span class=\"n\">U</span><span class=\"bp\">=</span><span class=\"o\">[[</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">1</span><span class=\"o\">],</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">,</span><span class=\"mi\">2</span><span class=\"o\">]]</span>\n</code></pre></div>\n<p>and <code>L,U</code> are one- variable-at-a-time changes.</p>",
        "id": 403698183,
        "sender_full_name": "Nicholas Wilson",
        "timestamp": 1700708790
    },
    {
        "content": "<p>We don't need this trick, we have a super general change of variables formula.</p>",
        "id": 403698305,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1700708845
    },
    {
        "content": "<p>Link?</p>",
        "id": 403702037,
        "sender_full_name": "Nicholas Wilson",
        "timestamp": 1700710273
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib-overview.html\">https://leanprover-community.github.io/mathlib-overview.html</a> or <a href=\"https://leanprover-community.github.io/undergrad.html\">https://leanprover-community.github.io/undergrad.html</a> are the very first place to look at, and they both answer your question. Mathematics in Lean also works. Searching for \"change of variable\" in the Mathlib folder also works. Sometimes finding stuff in Mathlib is hard, but you need to try something.</p>",
        "id": 403709056,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1700712634
    },
    {
        "content": "<p>I found the one linked upstream from the undergrad page, I had presumed you meant one of the other theorems listed alongside it and was wondering which ones you were referring to.</p>",
        "id": 403709685,
        "sender_full_name": "Nicholas Wilson",
        "timestamp": 1700712900
    },
    {
        "content": "<p>I have found the video referred to and am watching it but the combination of accent, video and audio quality make that slow going.</p>",
        "id": 403709959,
        "sender_full_name": "Nicholas Wilson",
        "timestamp": 1700713006
    },
    {
        "content": "<p>You don't need to video to find that result in Mathlib.</p>",
        "id": 403712989,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1700714520
    },
    {
        "content": "<p>No, but it might tell me how to use it: <br>\n    which direction I want to perform the substitution in,  <br>\n    how I should write the bounds or form the function composition (depending on which order I want it to go in), <br>\n    how I should provide the assumption necessary <br>\n    how to <code>rw [\\l one_mul]</code> to form the multiplication by the derivative, since naive application fails with </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">tactic</span> <span class=\"bp\">'</span><span class=\"n\">rewrite'</span> <span class=\"n\">failed</span><span class=\"o\">,</span> <span class=\"n\">pattern</span> <span class=\"n\">is</span> <span class=\"n\">a</span> <span class=\"n\">metavariable</span>\n  <span class=\"bp\">?</span><span class=\"n\">a</span>\n<span class=\"k\">from</span> <span class=\"n\">equation</span>\n  <span class=\"bp\">?</span><span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"bp\">?</span><span class=\"n\">a</span>\n</code></pre></div>",
        "id": 403729840,
        "sender_full_name": "Nicholas Wilson",
        "timestamp": 1700724117
    },
    {
        "content": "<p>For this last error, try telling Lean what is the variable that you want to multiply by one.</p>",
        "id": 403730436,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1700724373
    },
    {
        "content": "<p>Silly question,  how? I currently have </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">conv</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"n\">enter</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">2</span><span class=\"o\">]</span>\n  <span class=\"n\">ext</span>\n  <span class=\"n\">enter</span> <span class=\"o\">[</span><span class=\"mi\">2</span><span class=\"o\">]</span>\n  <span class=\"n\">ext</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">\\</span><span class=\"n\">l</span> <span class=\"n\">mul_one</span><span class=\"o\">]</span> <span class=\"c1\">-- error</span>\n</code></pre></div>\n<p>state is <code>| cos (a * x✝¹) * cos (a * x✝) + sin a * x✝ * sin (a * x✝¹)</code>.<br>\n<code>rw [mul_one at cos (a * x¹) * cos (a * x) + sin a * x * sin (a * ✝¹)]</code> didn't work neither did <code>rw [\\l mul_one] at h.h</code>.</p>",
        "id": 403732131,
        "sender_full_name": "Nicholas Wilson",
        "timestamp": 1700725060
    },
    {
        "content": "<p>Neither Lean nor I have any idea of which variable you are trying to multiply by 1.  The syntax to pass an explicit variable to a lemma is to put that variable as an argument to the lemma: <code>rw [\\l mul_one &lt;insert your variable here&gt;]</code>.</p>",
        "id": 403732896,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1700725372
    },
    {
        "content": "<p>The whole state expression, I want to get <code> (cos (a * x✝¹) * cos (a * x✝) + sin a * x✝ * sin (a * x✝¹))*1</code></p>",
        "id": 403733892,
        "sender_full_name": "Nicholas Wilson",
        "timestamp": 1700725711
    },
    {
        "content": "<p><code>rw [← mul_one (_ + _)]</code> this works: it is a hint to Lean that it should try to unify the metavariable that it does not know with something that has an addition in it.</p>",
        "id": 403734554,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1700726000
    }
]