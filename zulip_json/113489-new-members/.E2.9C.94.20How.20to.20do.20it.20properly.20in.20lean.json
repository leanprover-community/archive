[
    {
        "content": "<p>Hi. I'm new to lean and am recently reading Theorem Proving in Lean 4. </p>\n<p>I was trying to solve the problem in the exercise of Quantifiers and Equality and ended up using three 'byContradiction' in a row. <br>\nSo I'm wondering is it the right way to do it? </p>\n<p>And by the way, I would like to know how can we check out the standard library so as to learn how to use it? I know that there is a manual but, for example, when I wanted to look at what's in the Classical, I couldn't find it in the manual or in VS Code. </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"bp\">¬</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">¬</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">Iff.intro</span>\n    <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">hpx</span><span class=\"o\">⟩</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">h</span> <span class=\"n\">x</span> <span class=\"n\">hpx</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">byContradiction</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">hne</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">byContradiction</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">hh</span> <span class=\"o\">:</span> <span class=\"bp\">¬¬</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span>\n        <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">byContradiction</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">hnpx</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">hh</span> <span class=\"n\">hnpx</span><span class=\"o\">)</span>\n        <span class=\"k\">show</span> <span class=\"n\">False</span> <span class=\"k\">from</span> <span class=\"n\">hne</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">this</span><span class=\"o\">⟩</span>\n        <span class=\"o\">))</span>\n      <span class=\"n\">absurd</span> <span class=\"n\">this</span> <span class=\"n\">h</span>\n    <span class=\"o\">))</span>\n</code></pre></div>",
        "id": 273764674,
        "sender_full_name": "T.X. Xia",
        "timestamp": 1646205024
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"478462\">@T.X. Xia</span> </p>\n<p>Here's one that's more compact, but I don't necessarily think there's a \"right way\", yours is fine. Some people prefer using tactic mode for these kinds of propositional shuffling exercises.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"bp\">¬</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">¬</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">Iff.intro</span>\n    <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">hpx</span><span class=\"o\">⟩</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">h</span> <span class=\"n\">x</span> <span class=\"n\">hpx</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">hna</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Classical.byContradiction</span> <span class=\"bp\">$</span> <span class=\"k\">fun</span> <span class=\"n\">hne</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">hna</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">hpx</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">absurd</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">hpx</span><span class=\"o\">⟩</span> <span class=\"n\">hne</span><span class=\"o\">))</span>\n</code></pre></div>\n<p>The doc generation stuff for lean 4 is still a wip, but there's a hosted instance of the prelude/std/mathlib docs on the leanprover-community site. The <code>Classical</code> section is here: <a href=\"https://leanprover-community.github.io/mathlib4_docs/Init/Classical.html\">https://leanprover-community.github.io/mathlib4_docs/Init/Classical.html</a></p>\n<p><code>Classical</code> is just a namespace which can be split up, so you can't directly go to def in vscode, but for specific definitions you should be able to right click and <code>go to definition</code>.</p>",
        "id": 273840692,
        "sender_full_name": "Chris Bailey",
        "timestamp": 1646240815
    },
    {
        "content": "<p>There's also a lot of interplay between decidable and classical, so some declarations that might be of interest are probably in other sections like <code>Mathlib.Logic.Basic</code>.</p>",
        "id": 273841206,
        "sender_full_name": "Chris Bailey",
        "timestamp": 1646240988
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"478462\">T.X. Xia</span> has marked this topic as resolved.</p>",
        "id": 273850994,
        "sender_full_name": "Notification Bot",
        "timestamp": 1646244336
    }
]