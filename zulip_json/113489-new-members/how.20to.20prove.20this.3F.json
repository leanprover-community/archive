[
    {
        "content": "<p>I'm stuck trying to prove the following fact in lean 4:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">open</span> <span class=\"n\">Classical</span> <span class=\"k\">in</span>\n<span class=\"kd\">example</span>\n<span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">c</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"k\">if</span> <span class=\"n\">c</span> <span class=\"k\">then</span> <span class=\"n\">Unit</span> <span class=\"k\">else</span> <span class=\"n\">Empty</span><span class=\"o\">)</span>\n<span class=\"o\">:</span> <span class=\"n\">e</span> <span class=\"bp\">=</span> <span class=\"n\">if_pos</span> <span class=\"n\">h</span> <span class=\"bp\">▸</span> <span class=\"o\">()</span> <span class=\"o\">:=</span>\n<span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>What's a simple way to prove this? I tried using simp and cases everywhere, but it doesn't seem to help.<br>\nAny suggestions are welcome.</p>",
        "id": 305825164,
        "sender_full_name": "Michael Jam",
        "timestamp": 1666619772
    },
    {
        "content": "<p><code>open Classical</code> is only there so that I don't need an extra Decidable assumption.<br>\nThis example came up while proving the basic laws of a discrete category.</p>",
        "id": 305829588,
        "sender_full_name": "Michael Jam",
        "timestamp": 1666620922
    },
    {
        "content": "<p>Why would you want to forcibly insert a noncomputable decidability instance into the theorem statement rather than letting typeclass inference find its own? In Lean 3 the rule of thumb is that if the <em>statement</em> doesn't compile without decidability assumptions, put them in the statement; if the <em>proof</em> needs them, use classical assumptions. This makes lemmas maximally applicable.</p>\n<p>As for your question, I feel like it would be easier if we had more tactics, for example <code>convert</code> or <code>split_ifs</code>. But neither of these have been ported yet :-( Can I ask for more details about how you got into this mess?</p>",
        "id": 305892677,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1666637404
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">open</span> <span class=\"n\">Classical</span> <span class=\"k\">in</span>\n<span class=\"kd\">example</span>\n<span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">c</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"k\">if</span> <span class=\"n\">c</span> <span class=\"k\">then</span> <span class=\"n\">Unit</span> <span class=\"k\">else</span> <span class=\"n\">Empty</span><span class=\"o\">)</span>\n<span class=\"o\">:</span> <span class=\"n\">e</span> <span class=\"bp\">=</span> <span class=\"n\">if_pos</span> <span class=\"n\">h</span> <span class=\"bp\">▸</span> <span class=\"o\">()</span> <span class=\"o\">:=</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">Subsingleton</span> <span class=\"o\">(</span><span class=\"k\">if</span> <span class=\"n\">c</span> <span class=\"k\">then</span> <span class=\"n\">Unit</span> <span class=\"k\">else</span> <span class=\"n\">Empty</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">split</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">infer_instance</span>\n  <span class=\"n\">Subsingleton.elim</span> <span class=\"n\">_</span> <span class=\"n\">_</span>\n</code></pre></div>",
        "id": 305893794,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1666637863
    },
    {
        "content": "<p>Can you do it with <code>s/Empty/Nat</code>?</p>",
        "id": 305893965,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1666637920
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">open</span> <span class=\"n\">Classical</span> <span class=\"k\">in</span>\n<span class=\"kd\">example</span>\n<span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">c</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"k\">if</span> <span class=\"n\">c</span> <span class=\"k\">then</span> <span class=\"n\">Unit</span> <span class=\"k\">else</span> <span class=\"n\">Nat</span><span class=\"o\">)</span>\n<span class=\"o\">:</span> <span class=\"n\">e</span> <span class=\"bp\">=</span> <span class=\"n\">if_pos</span> <span class=\"n\">h</span> <span class=\"bp\">▸</span> <span class=\"o\">()</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">generalize</span> <span class=\"n\">if_pos</span> <span class=\"n\">h</span> <span class=\"bp\">=</span> <span class=\"n\">h'</span><span class=\"bp\">;</span> <span class=\"n\">revert</span> <span class=\"n\">e</span> <span class=\"n\">h'</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">if_pos</span> <span class=\"n\">h</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">simp</span>\n</code></pre></div>",
        "id": 305895084,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1666638267
    },
    {
        "content": "<p>Aah nice; this is somehow the \"proper\" proof.</p>",
        "id": 305895254,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1666638324
    },
    {
        "content": "<p>Probably you should not use <code>if c then Unit else Nat</code> in the first place, but rather whatever the Lean 4 spelling of <code>plift</code> is</p>",
        "id": 305896154,
        "sender_full_name": "Reid Barton",
        "timestamp": 1666638616
    },
    {
        "content": "<p>or a custom inductive family</p>",
        "id": 305896208,
        "sender_full_name": "Reid Barton",
        "timestamp": 1666638637
    },
    {
        "content": "<p>Oh, by a quirk it seems this works too:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">open</span> <span class=\"n\">Classical</span> <span class=\"k\">in</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">T</span>\n<span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">c</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"k\">if</span> <span class=\"n\">c</span> <span class=\"k\">then</span> <span class=\"n\">Unit</span> <span class=\"k\">else</span> <span class=\"n\">Nat</span><span class=\"o\">)</span>\n<span class=\"o\">:</span> <span class=\"n\">e</span> <span class=\"bp\">=</span> <span class=\"n\">if_pos</span> <span class=\"n\">h</span> <span class=\"bp\">▸</span> <span class=\"o\">()</span> <span class=\"o\">:=</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">Subsingleton</span> <span class=\"o\">(</span><span class=\"k\">if</span> <span class=\"n\">c</span> <span class=\"k\">then</span> <span class=\"n\">Unit</span> <span class=\"k\">else</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">split</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">infer_instance</span>\n  <span class=\"n\">Subsingleton.elim</span> <span class=\"n\">_</span> <span class=\"n\">_</span>\n</code></pre></div>",
        "id": 305897840,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1666639177
    },
    {
        "content": "<p>It looks like <code>split</code> got confused and applied <code>h</code> to simplify the if in both cases, so both calls to <code>infer_instance</code> are proving <code>Subsingleton Unit</code>!</p>",
        "id": 305897956,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1666639214
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> To give you some details, I was just making a small category library in my lean 4 playground. To make something into a diagram, I want to view a Type as a discrete category.<br>\nSo the code looks like this in isolation.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">namespace</span> <span class=\"n\">Category</span>\n<span class=\"kd\">class</span> <span class=\"n\">Hom.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">,</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">hom</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"bp\">→</span> <span class=\"n\">C</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span>\n<span class=\"kn\">export</span> <span class=\"n\">Hom</span> <span class=\"o\">(</span><span class=\"n\">hom</span><span class=\"o\">)</span>\n<span class=\"n\">scoped</span> <span class=\"kd\">infix</span><span class=\"o\">:</span><span class=\"mi\">10</span> <span class=\"s2\">\" ⟶ \"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">hom</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">Data</span> <span class=\"o\">(</span><span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">Hom</span> <span class=\"n\">C</span> <span class=\"n\">where</span>\n  <span class=\"n\">comp</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">Z</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"bp\">⟶</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">Y</span> <span class=\"bp\">⟶</span> <span class=\"n\">Z</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"bp\">⟶</span> <span class=\"n\">Z</span><span class=\"o\">)</span>\n  <span class=\"n\">id</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">⟶</span> <span class=\"n\">X</span>\n<span class=\"kn\">export</span> <span class=\"n\">Data</span> <span class=\"o\">(</span><span class=\"n\">comp</span> <span class=\"n\">id</span><span class=\"o\">)</span>\n<span class=\"n\">scoped</span> <span class=\"kd\">infix</span><span class=\"o\">:</span><span class=\"mi\">80</span> <span class=\"s2\">\" ≫ \"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">comp</span>\n<span class=\"n\">scoped</span> <span class=\"kd\">notation</span> <span class=\"s2\">\"𝟙\"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">id</span>\n<span class=\"kd\">end</span> <span class=\"n\">Category</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Category</span> <span class=\"k\">in</span>\n<span class=\"kd\">class</span> <span class=\"n\">Category</span> <span class=\"o\">(</span><span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">Data</span> <span class=\"n\">C</span> <span class=\"n\">where</span>\n  <span class=\"n\">id_comp</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">⟶</span> <span class=\"n\">Y</span><span class=\"o\">),</span> <span class=\"mi\">𝟙</span> <span class=\"n\">X</span> <span class=\"bp\">≫</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">f</span>\n  <span class=\"n\">comp_id</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">⟶</span> <span class=\"n\">Y</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"bp\">≫</span> <span class=\"mi\">𝟙</span> <span class=\"n\">Y</span> <span class=\"bp\">=</span> <span class=\"n\">f</span>\n  <span class=\"n\">assoc</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">Z</span> <span class=\"n\">W</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">⟶</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">Y</span> <span class=\"bp\">⟶</span> <span class=\"n\">Z</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">Z</span> <span class=\"bp\">⟶</span> <span class=\"n\">W</span><span class=\"o\">),</span>\n    <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">≫</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"bp\">≫</span> <span class=\"n\">h</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"bp\">≫</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"bp\">≫</span> <span class=\"n\">h</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Empty.elim</span> <span class=\"o\">:</span> <span class=\"n\">Empty</span> <span class=\"bp\">→</span> <span class=\"n\">C</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">nomatch</span> <span class=\"n\">h</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">TUnit.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">where</span>\n<span class=\"bp\">|</span> <span class=\"n\">unit</span> <span class=\"o\">:</span> <span class=\"n\">TUnit</span> <span class=\"n\">a</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Category.discreteCategoryOf</span> <span class=\"o\">(</span><span class=\"n\">I</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">I</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Category</span> <span class=\"n\">I</span> <span class=\"o\">:=</span> <span class=\"o\">{</span>\n  <span class=\"n\">hom</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">if</span> <span class=\"n\">X</span> <span class=\"bp\">=</span> <span class=\"n\">Y</span> <span class=\"k\">then</span> <span class=\"n\">TUnit</span> <span class=\"n\">X</span> <span class=\"k\">else</span> <span class=\"n\">Empty</span>\n  <span class=\"n\">comp</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">Z</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ite</span> <span class=\"bp\">..</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">ite</span> <span class=\"bp\">..</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">show</span> <span class=\"n\">ite</span> <span class=\"bp\">..</span> <span class=\"k\">from</span>\n    <span class=\"k\">have</span> <span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">=</span> <span class=\"n\">Y</span> <span class=\"o\">:=</span> <span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">=</span> <span class=\"n\">Y</span> <span class=\"k\">then</span> <span class=\"n\">h</span> <span class=\"k\">else</span> <span class=\"o\">(</span><span class=\"n\">if_neg</span> <span class=\"n\">h</span> <span class=\"bp\">▸</span> <span class=\"n\">f</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">elim</span>\n    <span class=\"k\">have</span> <span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">Y</span> <span class=\"bp\">=</span> <span class=\"n\">Z</span> <span class=\"o\">:=</span> <span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">Y</span> <span class=\"bp\">=</span> <span class=\"n\">Z</span> <span class=\"k\">then</span> <span class=\"n\">h</span> <span class=\"k\">else</span> <span class=\"o\">(</span><span class=\"n\">if_neg</span> <span class=\"n\">h</span> <span class=\"bp\">▸</span> <span class=\"n\">g</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">elim</span>\n    <span class=\"n\">if_pos</span> <span class=\"o\">(</span><span class=\"n\">h1.trans</span> <span class=\"n\">h2</span><span class=\"o\">)</span> <span class=\"bp\">▸</span> <span class=\"o\">⟨⟩</span>\n  <span class=\"n\">id</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">X</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">show</span> <span class=\"n\">ite</span> <span class=\"bp\">..</span> <span class=\"k\">from</span> <span class=\"n\">if_pos</span> <span class=\"n\">rfl</span> <span class=\"bp\">▸</span> <span class=\"o\">⟨⟩</span>\n  <span class=\"n\">id_comp</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ite</span> <span class=\"bp\">..</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">=</span> <span class=\"n\">Y</span> <span class=\"k\">then</span> <span class=\"kd\">by</span>\n      <span class=\"k\">show</span> <span class=\"n\">if_pos</span> <span class=\"n\">h</span> <span class=\"bp\">▸</span> <span class=\"o\">⟨⟩</span> <span class=\"bp\">=</span> <span class=\"n\">f</span>\n      <span class=\"n\">generalize</span> <span class=\"n\">if_pos</span> <span class=\"n\">h</span> <span class=\"bp\">=</span> <span class=\"n\">h'</span><span class=\"bp\">;</span> <span class=\"n\">revert</span> <span class=\"n\">f</span> <span class=\"n\">h'</span><span class=\"bp\">;</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">if_pos</span> <span class=\"n\">h</span><span class=\"o\">]</span>\n      <span class=\"n\">simp</span>\n    <span class=\"k\">else</span> <span class=\"o\">(</span><span class=\"n\">if_neg</span> <span class=\"n\">h</span> <span class=\"bp\">▸</span> <span class=\"n\">f</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">elim</span>\n  <span class=\"n\">comp_id</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ite</span> <span class=\"bp\">..</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">=</span> <span class=\"n\">Y</span> <span class=\"k\">then</span> <span class=\"kd\">by</span>\n      <span class=\"k\">show</span> <span class=\"n\">if_pos</span> <span class=\"n\">h</span> <span class=\"bp\">▸</span> <span class=\"o\">⟨⟩</span> <span class=\"bp\">=</span> <span class=\"n\">f</span>\n      <span class=\"n\">generalize</span> <span class=\"n\">if_pos</span> <span class=\"n\">h</span> <span class=\"bp\">=</span> <span class=\"n\">h'</span><span class=\"bp\">;</span> <span class=\"n\">revert</span> <span class=\"n\">f</span> <span class=\"n\">h'</span><span class=\"bp\">;</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">if_pos</span> <span class=\"n\">h</span><span class=\"o\">]</span>\n      <span class=\"n\">simp</span>\n    <span class=\"k\">else</span> <span class=\"o\">(</span><span class=\"n\">if_neg</span> <span class=\"n\">h</span> <span class=\"bp\">▸</span> <span class=\"n\">f</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">elim</span>\n  <span class=\"n\">assoc</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">Z</span> <span class=\"n\">W</span><span class=\"o\">}</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rfl</span>\n<span class=\"o\">}</span>\n</code></pre></div>\n<p>Those proofs are probably dumb and automatable. <br>\nMany thanks to <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span>  for your generalize,revert,rw trick. I often get stuck in those kind of situations.</p>",
        "id": 305995817,
        "sender_full_name": "Michael Jam",
        "timestamp": 1666692485
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"403214\">@Michael Jam</span> Here's what Reid was alluding to by saying you shouldn't use <code>if c then Unit else Empty</code>: You can express that much more nicely by using <code>PLift c</code>, and since it's an inductive type everything is nice by pattern matching:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">Category.discreteCategoryOf</span> <span class=\"o\">(</span><span class=\"n\">I</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Category</span> <span class=\"n\">I</span> <span class=\"n\">where</span>\n  <span class=\"n\">hom</span> <span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:=</span> <span class=\"n\">PLift</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"bp\">=</span> <span class=\"n\">Y</span><span class=\"o\">)</span>\n  <span class=\"n\">comp</span> <span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"n\">h1</span><span class=\"o\">⟩,</span> <span class=\"o\">⟨</span><span class=\"n\">h2</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">⟨</span><span class=\"n\">h1.trans</span> <span class=\"n\">h2</span><span class=\"o\">⟩</span>\n  <span class=\"n\">id</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">rfl</span><span class=\"o\">⟩</span>\n  <span class=\"n\">id_comp</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n  <span class=\"n\">comp_id</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n  <span class=\"n\">assoc</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 305998549,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1666693668
    },
    {
        "content": "<p>and we can even drop the <code>DecidableEq I</code> assumption</p>",
        "id": 305998673,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1666693708
    },
    {
        "content": "<p>Your definition of the morphisms is going to be super-hard to work with (as you just saw). Use <code>plift (X = Y)</code> (or whatever the Lean 4 equivalent is). In Lean 3 it's </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- Universe lifting operation from Sort to Type -/</span>\n<span class=\"kd\">structure</span> <span class=\"n\">plift</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"o\">:=</span>\n<span class=\"n\">up</span> <span class=\"o\">::</span> <span class=\"o\">(</span><span class=\"n\">down</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>(edit: Mario got there first!)</p>",
        "id": 305998686,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1666693716
    },
    {
        "content": "<p>Right thanks, this is much simpler. I could even get rid of PLift by allowing Sort valued arrows as in lean 3's category library</p>",
        "id": 306004632,
        "sender_full_name": "Michael Jam",
        "timestamp": 1666696435
    }
]