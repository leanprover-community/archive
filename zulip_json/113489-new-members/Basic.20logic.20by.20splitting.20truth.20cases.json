[
    {
        "content": "<p>Hello</p>\n<p>I am trying to prove some basic logic results with Lean. Currently I am working on <code>P ↔ ¬¬P</code>. I managed to prove it coming back to the definition of  the negation (i.e <code>¬Q </code> is defined to be <code>Q → False</code>). I want to know if it is possible to prove <code>P ↔ ¬¬P</code> by splitting cases like this :</p>\n<ul>\n<li>Assume <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>P</mi></mrow><annotation encoding=\"application/x-tex\">P</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">P</span></span></span></span> is true. Then <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">¬</mi><mi>P</mi></mrow><annotation encoding=\"application/x-tex\">\\neg P</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord\">¬</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">P</span></span></span></span> is false. Then <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">¬</mi><mi mathvariant=\"normal\">¬</mi><mi>P</mi></mrow><annotation encoding=\"application/x-tex\">\\neg \\neg P</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord\">¬¬</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">P</span></span></span></span> is true.</li>\n<li>Assume <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>P</mi></mrow><annotation encoding=\"application/x-tex\">P</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">P</span></span></span></span> is false Then <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">¬</mi><mi>P</mi></mrow><annotation encoding=\"application/x-tex\">\\neg P</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord\">¬</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">P</span></span></span></span> is true. Then <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">¬</mi><mi mathvariant=\"normal\">¬</mi><mi>P</mi></mrow><annotation encoding=\"application/x-tex\">\\neg \\neg P</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord\">¬¬</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">P</span></span></span></span> is false.</li>\n</ul>\n<p>I am interested for something like that because it would be closer to what an undergraduate student would do. More generally, I would like to know if this approach \"splitting truth cases\" is doable in Lean to prove some basic logic results.</p>\n<p>Thanks !</p>",
        "id": 399140502,
        "sender_full_name": "Valentin Vinoles",
        "timestamp": 1698575805
    },
    {
        "content": "<p><code>by_cases hp : p</code> will do the case split you're looking for.</p>",
        "id": 399140659,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1698575898
    },
    {
        "content": "<p>Thanks ! But I am not sure how to do it. I would start like this :</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"bp\">↔</span> <span class=\"bp\">¬¬</span><span class=\"n\">P</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">h_P</span> <span class=\"o\">:</span> <span class=\"n\">P</span>\n  <span class=\"bp\">·</span> <span class=\"gr\">sorry</span>\n  <span class=\"bp\">·</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>In the first case, the goal is <code>⊢ P ↔ ¬¬P</code>, I am not sure what I have gained here ?</p>",
        "id": 399144365,
        "sender_full_name": "Valentin Vinoles",
        "timestamp": 1698578983
    },
    {
        "content": "<p>This time you have <code>h_P : P</code> in context</p>",
        "id": 399145184,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1698579710
    },
    {
        "content": "<p>Next step could be <code>apply iff_of_true</code></p>",
        "id": 399146092,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1698580454
    },
    {
        "content": "<p>Thanks to you two, I manage to do some progress !</p>\n<p>Another question, I am now working on <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mi>P</mi><mtext>  </mtext><mo>⟹</mo><mtext>  </mtext><mi>Q</mi><mo stretchy=\"false\">)</mo><mtext>  </mtext><mo>⟺</mo><mtext>  </mtext><mo stretchy=\"false\">(</mo><mi mathvariant=\"normal\">¬</mi><mi>Q</mi><mtext>  </mtext><mo>⟹</mo><mtext>  </mtext><mi mathvariant=\"normal\">¬</mi><mi>P</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(P \\implies Q) \\iff (\\neg Q \\implies \\neg P)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">P</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">⟹</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">Q</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">⟺</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\">¬</span><span class=\"mord mathnormal\">Q</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">⟹</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">¬</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">P</span><span class=\"mclose\">)</span></span></span></span>. I alreay did the direct implication part and I would like to use this direct implication to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">¬</mi><mi>Q</mi></mrow><annotation encoding=\"application/x-tex\">\\neg Q</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8778em;vertical-align:-0.1944em;\"></span><span class=\"mord\">¬</span><span class=\"mord mathnormal\">Q</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">¬</mi><mi>P</mi></mrow><annotation encoding=\"application/x-tex\">\\neg P</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord\">¬</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">P</span></span></span></span> to conclude:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)(</span><span class=\"n\">Q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"bp\">→</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"bp\">¬</span><span class=\"n\">Q</span> <span class=\"bp\">→</span> <span class=\"bp\">¬</span><span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">constructor</span>\n  <span class=\"bp\">·</span> <span class=\"gr\">sorry</span> <span class=\"c1\">-- proof of (P → Q) → (¬Q → ¬P) (already done)</span>\n  <span class=\"bp\">·</span> <span class=\"n\">intro</span> <span class=\"n\">h</span>\n   <span class=\"c1\">-- here I would like to apply the first case to ¬Q and ¬P</span>\n</code></pre></div>\n<p>How can I reuse the first case?</p>",
        "id": 399157061,
        "sender_full_name": "Valentin Vinoles",
        "timestamp": 1698588552
    },
    {
        "content": "<p>If I understood correctly you want to do something like this: </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">contrap1</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"n\">Q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"bp\">→</span> <span class=\"n\">Q</span><span class=\"o\">)</span>  <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">¬</span><span class=\"n\">Q</span> <span class=\"bp\">→</span> <span class=\"bp\">¬</span><span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">pq</span> <span class=\"n\">nq</span> <span class=\"n\">p</span> <span class=\"bp\">↦</span> <span class=\"n\">nq</span> <span class=\"o\">(</span><span class=\"n\">pq</span> <span class=\"n\">p</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)(</span><span class=\"n\">Q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"bp\">→</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"bp\">¬</span><span class=\"n\">Q</span> <span class=\"bp\">→</span> <span class=\"bp\">¬</span><span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">constructor</span>\n  <span class=\"bp\">·</span> <span class=\"n\">apply</span> <span class=\"n\">contrap1</span>\n    <span class=\"c1\">-- alternatively:</span>\n    <span class=\"c1\">-- exact contrap1 P Q</span>\n    <span class=\"c1\">-- or even let it instantiate the quantifiers on its own:</span>\n    <span class=\"c1\">-- exact contrap1 _ _</span>\n  <span class=\"bp\">·</span> <span class=\"n\">intro</span> <span class=\"n\">h</span>\n    <span class=\"k\">have</span> <span class=\"n\">h₁</span> <span class=\"o\">:=</span> <span class=\"n\">contrap1</span> <span class=\"o\">(</span><span class=\"bp\">¬</span><span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">¬</span><span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"n\">h</span> <span class=\"c1\">-- this adds the hypothesis h₁ : ¬¬P → ¬¬Q</span>\n    <span class=\"c1\">-- like above, you could do contrap1 _ _ h</span>\n</code></pre></div>",
        "id": 399158975,
        "sender_full_name": "Luigi Massacci",
        "timestamp": 1698589998
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"284512\">Valentin Vinoles</span> has marked this topic as resolved.</p>",
        "id": 399176106,
        "sender_full_name": "Notification Bot",
        "timestamp": 1698604169
    },
    {
        "content": "<p>thanks !</p>",
        "id": 399176112,
        "sender_full_name": "Valentin Vinoles",
        "timestamp": 1698604182
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"284512\">Valentin Vinoles</span> has marked this topic as unresolved.</p>",
        "id": 399183268,
        "sender_full_name": "Notification Bot",
        "timestamp": 1698611389
    },
    {
        "content": "<p>Sorry for my very naive questions but I have trouble to find answers online.</p>\n<p>During a proof involving two propositions <code>P</code> and <code>Q</code>,  I have a proof <code>h</code> of  <code>P ∧ Q</code> and a proof <code>h'</code> of  <code>¬ P</code>. I would like to apply <code>h'</code> to <code>P</code> but <code>apply h' at h.left</code> do not work, I don't understand why.</p>\n<p>Maybe I need to declare explicitly a proof <code>h_P</code> of <code>P</code> and write  <code>apply h' at h_P</code> but I do not know how...</p>",
        "id": 399184260,
        "sender_full_name": "Valentin Vinoles",
        "timestamp": 1698612439
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"n\">Q</span><span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"bp\">∧</span> <span class=\"n\">Q</span><span class=\"o\">)</span>\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">h'</span><span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"n\">P</span><span class=\"o\">)</span>\n\n<span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"n\">h'</span> <span class=\"n\">h.left</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>Inside the proof with tactics you can write <code>set F := h' h.left</code>.</p>",
        "id": 399184657,
        "sender_full_name": "Lessness",
        "timestamp": 1698612938
    },
    {
        "content": "<p>I believe there's no way to <code>apply</code>at something that's not a goal. (I may be wrong.)</p>",
        "id": 399184728,
        "sender_full_name": "Lessness",
        "timestamp": 1698613036
    },
    {
        "content": "<p>Thanks a lot, it works with <code>set</code> !</p>",
        "id": 399185910,
        "sender_full_name": "Valentin Vinoles",
        "timestamp": 1698614235
    },
    {
        "content": "<p>There's some work on using <code>apply</code> with hypotheses, though I don't know if it landed yet. It would never work in this case, though</p>",
        "id": 399188793,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1698617289
    },
    {
        "content": "<p>Another question <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>\n<p>I am playing around with <code>False.elim</code>. If <code>h : False</code> and <code>P : Prop</code>, how can I deduce a proof of <code>P</code>. I can do the following:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">False</span> <span class=\"bp\">→</span> <span class=\"n\">P</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h</span>                                   <span class=\"c1\">-- h : False</span>\n  <span class=\"n\">apply</span> <span class=\"n\">False.elim</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n</code></pre></div>\n<p>but the issue is that <code>h</code> is now a proof of <code>?C</code> (I am not sure what it is...). How can I change it to make a proof of <code>P</code>?</p>",
        "id": 399255909,
        "sender_full_name": "Valentin Vinoles",
        "timestamp": 1698656890
    },
    {
        "content": "<p>You can do</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"n\">change</span> <span class=\"n\">P</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n</code></pre></div>\n<p>While this works, I find this way of arguing a little unusual, though!</p>",
        "id": 399257018,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1698657192
    },
    {
        "content": "<p>The <code>?C</code> that you see is a metavariable and with <code>change P at h</code> you tell Lean that you want it to unify with <code>P</code>.</p>",
        "id": 399257302,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1698657265
    },
    {
        "content": "<p>Thank you it works ! </p>\n<p>I know it is unusual, it is just playing around to understand how things work. I do not plan to use it in \"real\" proofs.</p>\n<p>Is there a way to do it in one line, something like <code>apply False.elim P at h</code> (this does not work).</p>",
        "id": 399259716,
        "sender_full_name": "Valentin Vinoles",
        "timestamp": 1698658152
    },
    {
        "content": "<p>After <code>intro h</code>, you can do <code>exact?</code>.  Alternatively, also <code>cases h</code> works.  Or even, the whole proof could be <code>rintro ⟨⟩</code>.</p>",
        "id": 399260683,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1698658507
    },
    {
        "content": "<p>I mean a one line to merge</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">apply</span> <span class=\"n\">False.elim</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n<span class=\"n\">change</span> <span class=\"n\">P</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n</code></pre></div>",
        "id": 399261331,
        "sender_full_name": "Valentin Vinoles",
        "timestamp": 1698658707
    },
    {
        "content": "<p><a href=\"#narrow/stream/113489-new-members/topic/Basic.20logic.20by.20splitting.20truth.20cases/near/399261331\">A message</a> was moved here from <a class=\"stream-topic\" data-stream-id=\"113489\" href=\"/#narrow/stream/113489-new-members/topic/CompactIccSpace.20for.20unitInterval\">#new members &gt; CompactIccSpace for unitInterval</a> by <span class=\"user-mention silent\" data-user-id=\"284512\">Valentin Vinoles</span>.</p>",
        "id": 399261437,
        "sender_full_name": "Notification Bot",
        "timestamp": 1698658737
    },
    {
        "content": "<p>Either of these would make more sense than using <code>apply</code> here:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">False</span> <span class=\"bp\">→</span> <span class=\"n\">P</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h</span>                                   <span class=\"c1\">-- h : False</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"o\">:=</span> <span class=\"n\">False.elim</span> <span class=\"n\">h</span>\n  <span class=\"n\">exact</span> <span class=\"n\">False.elim</span> <span class=\"n\">h</span>\n</code></pre></div>\n<p>You don't <em>need</em> to use the <code>apply</code> tactic in every situation where you're use the verb \"apply\" in mathematical English</p>",
        "id": 399263104,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1698659132
    },
    {
        "content": "<p>In fact, I would say that almost always the <em>tactic</em> <code>apply</code> is translated to <code>it suffices</code>.</p>\n<p>You can though do this</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"n\">apply</span> <span class=\"n\">False.elim</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"o\">:=</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n</code></pre></div>\n<p>as well.</p>",
        "id": 399263485,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1698659220
    },
    {
        "content": "<p>Thank to you two. I already write a lof of stuffs with <code>apply</code> everywhere... I guess I need to rework all of these. The learning curve is quite stiff !</p>",
        "id": 399266985,
        "sender_full_name": "Valentin Vinoles",
        "timestamp": 1698660126
    },
    {
        "content": "<p>I guess this is bad ?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">not_not_direct</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"bp\">→</span> <span class=\"bp\">¬¬</span><span class=\"n\">P</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h</span>                  <span class=\"c1\">-- h : P</span>\n  <span class=\"n\">apply</span> <span class=\"n\">Not.intro</span>          <span class=\"c1\">-- goal becomes ¬P → False</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h_notP</span>             <span class=\"c1\">-- h : ¬P (i.e. h : P → False)</span>\n  <span class=\"n\">apply</span> <span class=\"n\">h_notP</span> <span class=\"n\">at</span> <span class=\"n\">h</span>        <span class=\"c1\">-- h : False</span>\n  <span class=\"n\">exact</span> <span class=\"n\">h</span>\n</code></pre></div>",
        "id": 399267831,
        "sender_full_name": "Valentin Vinoles",
        "timestamp": 1698660412
    },
    {
        "content": "<p>I’m not an authority, but I would have written </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">not_not_direct</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"bp\">→</span> <span class=\"bp\">¬¬</span><span class=\"n\">P</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">p</span> <span class=\"n\">np</span>\n  <span class=\"n\">exact</span> <span class=\"n\">np</span> <span class=\"n\">p</span>\n</code></pre></div>\n<p>or if you really want to use apply:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">not_not_direct</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"bp\">→</span> <span class=\"bp\">¬¬</span><span class=\"n\">P</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">p</span> <span class=\"n\">np</span>\n  <span class=\"n\">apply</span> <span class=\"n\">np</span>\n  <span class=\"n\">exact</span> <span class=\"n\">p</span>\n</code></pre></div>",
        "id": 399268922,
        "sender_full_name": "Luigi Massacci",
        "timestamp": 1698660739
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"307953\">Ruben Van de Velde</span> <a href=\"#narrow/stream/113489-new-members/topic/Basic.20logic.20by.20splitting.20truth.20cases/near/399188793\">said</a>:</p>\n<blockquote>\n<p>There's some work on using <code>apply</code> with hypotheses, though I don't know if it landed yet. It would never work in this case, though</p>\n</blockquote>\n<p>Right. I think that <code>apply at</code> has now landed, but you cannot apply a hypothesis to <code>h.left</code> and expect only <code>h.left</code> to change. You need to do <code>cases</code> on <code>h</code> first, extract the left component as <code>h_1</code> and then <code>apply</code> <code>h'</code> to <code>h_1</code>.</p>",
        "id": 399286194,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1698666899
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"284512\">Valentin Vinoles</span> <a href=\"#narrow/stream/113489-new-members/topic/Basic.20logic.20by.20splitting.20truth.20cases/near/399261331\">said</a>:</p>\n<blockquote>\n<p>I mean a one line to merge</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">apply</span> <span class=\"n\">False.elim</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n<span class=\"n\">change</span> <span class=\"n\">P</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">False</span> <span class=\"bp\">→</span> <span class=\"n\">P</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rintro</span> <span class=\"o\">⟨⟩</span>\n</code></pre></div>",
        "id": 399286393,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1698666977
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"284512\">Valentin Vinoles</span> <a href=\"#narrow/stream/113489-new-members/topic/Basic.20logic.20by.20splitting.20truth.20cases/near/399267831\">said</a>:</p>\n<blockquote>\n<p>I guess this is bad ?</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">not_not_direct</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"bp\">→</span> <span class=\"bp\">¬¬</span><span class=\"n\">P</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h</span>                  <span class=\"c1\">-- h : P</span>\n  <span class=\"n\">apply</span> <span class=\"n\">Not.intro</span>          <span class=\"c1\">-- goal becomes ¬P → False</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h_notP</span>             <span class=\"c1\">-- h : ¬P (i.e. h : P → False)</span>\n  <span class=\"n\">apply</span> <span class=\"n\">h_notP</span> <span class=\"n\">at</span> <span class=\"n\">h</span>        <span class=\"c1\">-- h : False</span>\n  <span class=\"n\">exact</span> <span class=\"n\">h</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>How about</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">not_not_direct</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"bp\">→</span> <span class=\"bp\">¬¬</span><span class=\"n\">P</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">h</span> <span class=\"n\">h1</span> <span class=\"bp\">↦</span> <span class=\"n\">h1</span> <span class=\"n\">h</span>\n</code></pre></div>",
        "id": 399286590,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1698667059
    }
]