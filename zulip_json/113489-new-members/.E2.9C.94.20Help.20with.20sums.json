[
    {
        "content": "<p>Hi,</p>\n<p>I'm looking to prove:<br>\ntheorem s (i n : ℕ) : n<code>*</code>n - (∑ j in range i, j) - (∑ j in range (n - 1 - i), j) = (n<code>*</code>n)/2 - (i<code>*</code>i)/2 - i + n<code>*</code>i + n/2 := sorry</p>\n<p>which is a problem related to the number of squares a pawn on file <code>i</code> can reach on a chessboard.</p>\n<p>Is there an easy tactic suited to a newb?</p>",
        "id": 403054434,
        "sender_full_name": "Colin McDonagh",
        "timestamp": 1700429945
    },
    {
        "content": "<p>Can you edit your post to use <a href=\"https://github.com/leanprover-community/mathlib/wiki/Code-in-backticks\">#backticks</a> ? Right now Zulip is getting confused by the exotic characters.</p>",
        "id": 403054472,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1700429997
    },
    {
        "content": "<p>Thanks Kevin</p>",
        "id": 403054666,
        "sender_full_name": "Colin McDonagh",
        "timestamp": 1700430152
    },
    {
        "content": "<p>It is also best practice here to ask your question with a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> , that is, code which compiles for everyone (right now if I cut and paste your code then even after fixing the parts which zulip has destroyed because of the lack of <code> ``` </code>, the code doesn't compile for me).</p>",
        "id": 403054728,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1700430234
    },
    {
        "content": "<p>Apologies</p>",
        "id": 403054833,
        "sender_full_name": "Colin McDonagh",
        "timestamp": 1700430318
    },
    {
        "content": "<p>Assuming I've fixed up your claim correctly locally, then according to <code>slim_check</code> your claim is false for i=0 and n=1 (it becomes the claim that 1=0). Note that subtraction of naturals satisfes 2 - 3 = 0, and division of naturals satisfies 5 / 2 = 2 (because in each case the answer has to be a natural; this is the joys of type theory).</p>",
        "id": 403054916,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1700430375
    },
    {
        "content": "<p>Oops. I guess I have to use rationals. Thanks for the tip to use <code>slim_check</code></p>",
        "id": 403055052,
        "sender_full_name": "Colin McDonagh",
        "timestamp": 1700430584
    },
    {
        "content": "<p>I've attempted to write a mwe using rationals here</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">BigOperators</span> <span class=\"n\">Finset</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">s</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">n</span><span class=\"bp\">*</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"bp\">∑</span> <span class=\"n\">j</span> <span class=\"k\">in</span> <span class=\"n\">range</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">))</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"bp\">∑</span> <span class=\"n\">j</span> <span class=\"k\">in</span> <span class=\"n\">range</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">i</span><span class=\"o\">),</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"bp\">=</span>\n    <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">*</span><span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">/</span><span class=\"mi\">2</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">i</span><span class=\"bp\">*</span><span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">/</span><span class=\"mi\">2</span> <span class=\"bp\">-</span> <span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"n\">n</span><span class=\"bp\">*</span><span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"n\">n</span><span class=\"bp\">/</span><span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>but <code>slim_check</code> still reports that the claim is wrong: for i=1 and n=2 it says that you're claiming 4=7/2. Indeed the LHS is obviously an integer always and the RHS is equally obviously not an integer if n is eevn and i is odd. There will also be issues if i&gt;n because the n-1-i will then default to 0.</p>",
        "id": 403056616,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1700431912
    },
    {
        "content": "<p>Thanks Kevin.</p>\n<p>I didn't think of <code>range</code> being exclusive on the upperbound like in other programming languages. I think:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n<span class=\"kn\">open</span> <span class=\"n\">BigOperators</span>\n<span class=\"kn\">open</span> <span class=\"n\">Finset</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">s</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">-</span>\n<span class=\"bp\">∑</span> <span class=\"n\">j</span> <span class=\"k\">in</span> <span class=\"n\">range</span> <span class=\"o\">(</span><span class=\"n\">i</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"n\">j</span> <span class=\"bp\">-</span> <span class=\"bp\">∑</span> <span class=\"n\">j</span> <span class=\"k\">in</span> <span class=\"n\">range</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">i</span><span class=\"o\">),</span> <span class=\"n\">j</span> <span class=\"bp\">=</span>\n<span class=\"o\">((</span><span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">n</span><span class=\"o\">):</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span><span class=\"bp\">/</span><span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"n\">i</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">*</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"n\">i</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span>\n <span class=\"n\">slim_check</span>\n</code></pre></div>\n<p>passes some <code>slim_check</code>s but I get \"Gave up 1 times\". Might have some extra rationals where I don't need them. I'm used to 3/2 = 1, but 2-3=0 is new to me, makes sense though ofc.</p>",
        "id": 403058001,
        "sender_full_name": "Colin McDonagh",
        "timestamp": 1700433116
    },
    {
        "content": "<p>It would be good if you read the <a href=\"https://github.com/leanprover-community/mathlib/wiki/Code-in-backticks\">#backticks</a> and <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> links and edited your post accordingly</p>",
        "id": 403059408,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1700434413
    },
    {
        "content": "<p>I tried this out and this is what I came up with:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">s</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">-</span>\n<span class=\"bp\">∑</span> <span class=\"n\">j</span> <span class=\"k\">in</span> <span class=\"n\">range</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"n\">j</span> <span class=\"bp\">-</span> <span class=\"bp\">∑</span> <span class=\"n\">j</span> <span class=\"k\">in</span> <span class=\"n\">range</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">i</span><span class=\"o\">),</span> <span class=\"n\">j</span> <span class=\"bp\">=</span>\n<span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"n\">i</span> <span class=\"bp\">-</span> <span class=\"n\">i</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">-</span> <span class=\"n\">i</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">sum_range_id</span><span class=\"o\">,</span> <span class=\"n\">ge_iff_le</span><span class=\"o\">,</span> <span class=\"n\">add_le_iff_nonpos_left</span><span class=\"o\">,</span> <span class=\"n\">nonpos_iff_eq_zero</span><span class=\"o\">,</span> <span class=\"n\">add_tsub_cancel_right</span><span class=\"o\">,</span> <span class=\"n\">tsub_le_iff_right</span><span class=\"o\">]</span>\n  <span class=\"n\">zify</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">exact</span> <span class=\"n\">Nat.le_of_lt</span> <span class=\"n\">h</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Nat.cast_sub</span> <span class=\"n\">this</span><span class=\"o\">,</span> <span class=\"n\">Nat.cast_sub</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">le_tsub_iff_left</span> <span class=\"n\">this</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mpr</span> <span class=\"n\">h</span><span class=\"o\">),</span> <span class=\"n\">Nat.cast_sub</span> <span class=\"n\">this</span><span class=\"o\">]</span>\n  <span class=\"n\">apply_fun</span> <span class=\"o\">(</span><span class=\"bp\">.</span> <span class=\"bp\">*</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"n\">using</span> <span class=\"n\">mul_left_injective₀</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">trivial</span><span class=\"o\">)</span>\n  <span class=\"n\">ring_nf</span>\n  <span class=\"k\">have</span> <span class=\"n\">self_plus_sq</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">n</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">ring</span>\n  <span class=\"k\">have</span> <span class=\"n\">neg_self_plus_sq</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"bp\">-</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">n</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">ring</span>\n  <span class=\"n\">repeat</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Int.ediv_two_mul_two_of_even</span><span class=\"o\">]</span>\n  <span class=\"n\">ring</span>\n  <span class=\"bp\">.</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">self_plus_sq</span><span class=\"o\">]</span>\n    <span class=\"n\">exact</span> <span class=\"n\">Int.even_mul_succ_self</span> <span class=\"n\">_</span>\n  <span class=\"bp\">.</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">add_assoc</span><span class=\"o\">,</span> <span class=\"n\">self_plus_sq</span><span class=\"o\">,</span> <span class=\"n\">add_comm_sub</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">add_sub_assoc</span><span class=\"o\">,</span> <span class=\"n\">neg_self_plus_sq</span><span class=\"o\">]</span>\n    <span class=\"n\">apply</span> <span class=\"n\">Even.add</span>\n    <span class=\"bp\">.</span> <span class=\"n\">apply</span> <span class=\"n\">Even.add</span>\n      <span class=\"k\">have</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">ring</span>\n      <span class=\"bp\">.</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">this</span><span class=\"o\">]</span>\n        <span class=\"n\">exact</span> <span class=\"n\">Int.even_mul_succ_self</span> <span class=\"n\">_</span>\n      <span class=\"bp\">.</span> <span class=\"n\">simp_all</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">even_neg</span><span class=\"o\">,</span> <span class=\"n\">even_two</span><span class=\"o\">,</span> <span class=\"n\">Even.mul_left</span><span class=\"o\">]</span>\n    <span class=\"bp\">.</span> <span class=\"n\">exact</span> <span class=\"n\">Int.even_mul_succ_self</span> <span class=\"n\">_</span>\n  <span class=\"bp\">.</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">self_plus_sq</span><span class=\"o\">]</span>\n    <span class=\"n\">exact</span> <span class=\"n\">Int.even_mul_succ_self</span> <span class=\"n\">_</span>\n</code></pre></div>\n<p>There is a lot of room for Lean to make algebraic manipulations involving <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo>+</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mi mathvariant=\"normal\">/</mi><mn>2</mn></mrow><annotation encoding=\"application/x-tex\">n(n+1)/2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span><span class=\"mord\">/2</span></span></span></span> with <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi><mo>∈</mo><mi mathvariant=\"double-struck\">Z</mi></mrow><annotation encoding=\"application/x-tex\">n\\in\\mathbb Z</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6889em;\"></span><span class=\"mord mathbb\">Z</span></span></span></span> less of a pain...</p>",
        "id": 403064897,
        "sender_full_name": "Yongyi Chen",
        "timestamp": 1700439085
    },
    {
        "content": "<p>OK, I learned more about <code>qify</code> and here's a much nicer proof:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">s2</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">-</span>\n<span class=\"bp\">∑</span> <span class=\"n\">j</span> <span class=\"k\">in</span> <span class=\"n\">range</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"n\">j</span> <span class=\"bp\">-</span> <span class=\"bp\">∑</span> <span class=\"n\">j</span> <span class=\"k\">in</span> <span class=\"n\">range</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">i</span><span class=\"o\">),</span> <span class=\"n\">j</span> <span class=\"bp\">=</span>\n<span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"n\">i</span> <span class=\"bp\">-</span> <span class=\"n\">i</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">-</span> <span class=\"n\">i</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">sum_range_id</span><span class=\"o\">,</span> <span class=\"n\">ge_iff_le</span><span class=\"o\">,</span> <span class=\"n\">add_le_iff_nonpos_left</span><span class=\"o\">,</span> <span class=\"n\">nonpos_iff_eq_zero</span><span class=\"o\">,</span> <span class=\"n\">add_tsub_cancel_right</span><span class=\"o\">,</span> <span class=\"n\">tsub_le_iff_right</span><span class=\"o\">]</span>\n  <span class=\"k\">have</span> <span class=\"n\">i_le_n</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">exact</span> <span class=\"n\">Nat.le_of_lt</span> <span class=\"n\">h</span>\n  <span class=\"k\">have</span> <span class=\"n\">one_le_n_sub_i</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">i</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">le_tsub_iff_left</span> <span class=\"n\">i_le_n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mpr</span> <span class=\"n\">h</span>\n  <span class=\"k\">have</span> <span class=\"n\">even1</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">∣</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mul_comm</span><span class=\"o\">]</span>\n    <span class=\"n\">exact</span> <span class=\"n\">Even.two_dvd</span> <span class=\"o\">(</span><span class=\"n\">Int.even_mul_succ_self</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n  <span class=\"k\">have</span> <span class=\"n\">even2</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">∣</span> <span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mul_comm</span><span class=\"o\">]</span>\n    <span class=\"n\">conv</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"n\">enter</span> <span class=\"o\">[</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">]</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">Int.sub_add_cancel</span> <span class=\"n\">n</span> <span class=\"mi\">1</span><span class=\"o\">]</span>\n    <span class=\"n\">exact</span> <span class=\"n\">Even.two_dvd</span> <span class=\"o\">(</span><span class=\"n\">Int.even_mul_succ_self</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">))</span>\n  <span class=\"k\">have</span> <span class=\"n\">even3</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">∣</span> <span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">mul_add_one</span><span class=\"o\">]</span>\n    <span class=\"n\">exact</span> <span class=\"n\">Even.two_dvd</span> <span class=\"o\">(</span><span class=\"n\">Int.even_mul_succ_self</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n  <span class=\"n\">qify</span> <span class=\"o\">[</span><span class=\"n\">i_le_n</span><span class=\"o\">,</span> <span class=\"n\">one_le_n_sub_i</span><span class=\"o\">,</span> <span class=\"n\">even1</span><span class=\"o\">,</span> <span class=\"n\">even2</span><span class=\"o\">,</span> <span class=\"n\">even3</span><span class=\"o\">]</span>\n  <span class=\"n\">ring</span>\n</code></pre></div>",
        "id": 403068261,
        "sender_full_name": "Yongyi Chen",
        "timestamp": 1700440796
    },
    {
        "content": "<p>Thanks Yongyi!</p>\n<p>This gives me something I can delve deeper into and understand what's going on :) Very cool to see it formalised...</p>",
        "id": 403213705,
        "sender_full_name": "Colin McDonagh",
        "timestamp": 1700500973
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"439462\">Colin McDonagh</span> has marked this topic as resolved.</p>",
        "id": 403257403,
        "sender_full_name": "Notification Bot",
        "timestamp": 1700519984
    }
]