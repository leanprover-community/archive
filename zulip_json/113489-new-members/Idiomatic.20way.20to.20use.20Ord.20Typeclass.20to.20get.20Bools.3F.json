[
    {
        "content": "<p>I have written the following code:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">quicksort</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span>\n  <span class=\"o\">[</span><span class=\"n\">LT</span> <span class=\"n\">a</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"k\">forall</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">a</span><span class=\"o\">),</span> <span class=\"n\">Decidable</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"n\">y</span><span class=\"o\">)]</span>\n  <span class=\"o\">[</span><span class=\"n\">LE</span> <span class=\"n\">a</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"k\">forall</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">a</span><span class=\"o\">),</span> <span class=\"n\">Decidable</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">y</span><span class=\"o\">)]</span>\n  <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">List</span> <span class=\"n\">a</span>\n  <span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">[]</span>\n  <span class=\"bp\">|</span> <span class=\"n\">x</span> <span class=\"o\">::</span> <span class=\"n\">xs</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"o\">(</span>\n      <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">List.length</span> <span class=\"o\">(</span><span class=\"n\">xs.filter</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">y</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">decide</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span><span class=\"o\">)))</span> <span class=\"bp\">&lt;</span> <span class=\"n\">List.length</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">::</span> <span class=\"n\">xs</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span>\n        <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">List.length</span><span class=\"o\">]</span>\n        <span class=\"n\">apply</span> <span class=\"n\">Nat.lt_succ_of_le</span>\n        <span class=\"n\">apply</span> <span class=\"n\">List.length_filter_le</span>\n      <span class=\"o\">}</span>\n      <span class=\"n\">quicksort</span> <span class=\"o\">(</span><span class=\"n\">xs.filter</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">y</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">decide</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span><span class=\"o\">)))</span>\n      <span class=\"o\">)</span>\n      <span class=\"bp\">++</span> <span class=\"o\">[</span><span class=\"n\">x</span><span class=\"o\">]</span> <span class=\"bp\">++</span>\n      <span class=\"o\">(</span>\n      <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">List.length</span> <span class=\"o\">(</span><span class=\"n\">xs.filter</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">y</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">decide</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">y</span><span class=\"o\">)))</span> <span class=\"bp\">&lt;</span> <span class=\"n\">List.length</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">::</span> <span class=\"n\">xs</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span>\n        <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">List.length</span><span class=\"o\">]</span>\n        <span class=\"n\">apply</span> <span class=\"n\">Nat.lt_succ_of_le</span>\n        <span class=\"n\">apply</span> <span class=\"n\">List.length_filter_le</span>\n      <span class=\"o\">}</span>\n      <span class=\"n\">quicksort</span> <span class=\"o\">(</span><span class=\"n\">xs.filter</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">y</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">decide</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">y</span><span class=\"o\">)))</span>\n      <span class=\"o\">)</span>\n  <span class=\"n\">termination_by</span>\n    <span class=\"n\">quicksort</span> <span class=\"n\">xs</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">xs.length</span>\n  <span class=\"n\">decreasing_by</span>\n    <span class=\"n\">simp_wf</span>\n    <span class=\"n\">simp_all</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">quicksort</span> <span class=\"o\">[</span><span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"mi\">4</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">]</span>\n<span class=\"c1\">-- prints [1, 2, 3, 4]</span>\n</code></pre></div>\n<p>Is there a way to write the <code>{a : Type} [LT a] [forall (x y : a), Decidable (x &lt; y)] [LE a] [forall (x y : a), Decidable (x ≤ y)]</code> declaration in a more idiomatic way? I know that there is a <code>Ord a</code> typeclass, but it is not clear to me why it doesn't automatically inherit <code>LT</code> or <code>LE</code></p>",
        "id": 397339873,
        "sender_full_name": "Agnishom Chattopadhyay",
        "timestamp": 1697643572
    },
    {
        "content": "<p>Does anyone have any suggestions on improving this code?</p>",
        "id": 398093723,
        "sender_full_name": "Agnishom Chattopadhyay",
        "timestamp": 1698070146
    },
    {
        "content": "<p>You could use <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=LinearOrder#doc\">docs#LinearOrder</a>, which inherits from LT and LE and Ord simultaneously.</p>",
        "id": 398094688,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1698070414
    },
    {
        "content": "<p>Quick sort only makes sense on linear orders anyway, IIRC.</p>",
        "id": 398094727,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1698070424
    },
    {
        "content": "<p>You could have distinct elements that compare to equal and sensibly run quicksort perhaps?</p>",
        "id": 398095422,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1698070615
    },
    {
        "content": "<p>You could also use <code>(x ≤ ·)</code> in place of <code>fun y =&gt; decide (...)</code> it should turn out to be the same thing</p>",
        "id": 398095707,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1698070707
    },
    {
        "content": "<p>Also we try to avoid non-terminal simp calls, as they are liable to break when the library you are using is changed, so we replace them with the output of <code>simp?</code></p>",
        "id": 398095840,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1698070748
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113489-new-members/topic/Idiomatic.20way.20to.20use.20Ord.20Typeclass.20to.20get.20Bools.3F/near/398094688\">said</a>:</p>\n<blockquote>\n<p>You could use <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=LinearOrder#doc\">docs#LinearOrder</a>, which inherits from LT and LE and Ord simultaneously.</p>\n</blockquote>\n<p>Thanks. That seems to be the right typeclass that I am looking for</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">quicksort2</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">LinearOrder</span> <span class=\"n\">a</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">List</span> <span class=\"n\">a</span>\n  <span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">[]</span>\n  <span class=\"bp\">|</span> <span class=\"n\">x</span> <span class=\"o\">::</span> <span class=\"n\">xs</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"o\">(</span>\n      <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">List.length</span> <span class=\"o\">(</span><span class=\"n\">xs.filter</span> <span class=\"o\">(</span><span class=\"bp\">.</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"bp\">&lt;</span> <span class=\"n\">List.length</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">::</span> <span class=\"n\">xs</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span>\n        <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">List.length</span><span class=\"o\">]</span>\n        <span class=\"n\">apply</span> <span class=\"n\">Nat.lt_succ_of_le</span>\n        <span class=\"n\">apply</span> <span class=\"n\">List.length_filter_le</span>\n      <span class=\"o\">}</span>\n      <span class=\"n\">quicksort2</span> <span class=\"o\">(</span><span class=\"n\">xs.filter</span> <span class=\"o\">(</span><span class=\"bp\">.</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span><span class=\"o\">))</span>\n      <span class=\"o\">)</span>\n      <span class=\"bp\">++</span> <span class=\"o\">[</span><span class=\"n\">x</span><span class=\"o\">]</span> <span class=\"bp\">++</span>\n      <span class=\"o\">(</span>\n      <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">List.length</span> <span class=\"o\">(</span><span class=\"n\">xs.filter</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"bp\">.</span><span class=\"o\">))</span> <span class=\"bp\">&lt;</span> <span class=\"n\">List.length</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">::</span> <span class=\"n\">xs</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span>\n        <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">List.length</span><span class=\"o\">]</span>\n        <span class=\"n\">apply</span> <span class=\"n\">Nat.lt_succ_of_le</span>\n        <span class=\"n\">apply</span> <span class=\"n\">List.length_filter_le</span>\n      <span class=\"o\">}</span>\n      <span class=\"n\">quicksort2</span> <span class=\"o\">(</span><span class=\"n\">xs.filter</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"bp\">.</span><span class=\"o\">))</span>\n      <span class=\"o\">)</span>\n  <span class=\"n\">termination_by</span>\n    <span class=\"n\">quicksort2</span> <span class=\"n\">xs</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">xs.length</span>\n  <span class=\"n\">decreasing_by</span>\n    <span class=\"n\">simp_wf</span>\n    <span class=\"n\">simp_all</span>\n</code></pre></div>",
        "id": 398105657,
        "sender_full_name": "Agnishom Chattopadhyay",
        "timestamp": 1698073540
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"127136\">Alex J. Best</span> <a href=\"#narrow/stream/113489-new-members/topic/Idiomatic.20way.20to.20use.20Ord.20Typeclass.20to.20get.20Bools.3F/near/398095422\">said</a>:</p>\n<blockquote>\n<p>You could have distinct elements that compare to equal and sensibly run quicksort perhaps?</p>\n</blockquote>\n<p>Yes, true. Is there a way to refer to this kind of equality?</p>\n<p>Another way to have this kind of a function would be to modify the signature of quicksort to</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">quicksort_by</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">LinearOrder</span> <span class=\"n\">a</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">b</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">List</span> <span class=\"n\">b</span>\n</code></pre></div>",
        "id": 398106010,
        "sender_full_name": "Agnishom Chattopadhyay",
        "timestamp": 1698073653
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"127136\">Alex J. Best</span> <a href=\"#narrow/stream/113489-new-members/topic/Idiomatic.20way.20to.20use.20Ord.20Typeclass.20to.20get.20Bools.3F/near/398095840\">said</a>:</p>\n<blockquote>\n<p>Also we try to avoid non-terminal simp calls, as they are liable to break when the library you are using is changed, so we replace them with the output of <code>simp?</code></p>\n</blockquote>\n<p>Thanks, that is a great point. How do I do this?</p>\n<p>The output of <code>simp [List.length]</code> seems to be</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">List.length</span> <span class=\"o\">(</span><span class=\"n\">List.filter</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x_1</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">decide</span> <span class=\"o\">(</span><span class=\"n\">x_1</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"n\">xs</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"n\">List.length</span> <span class=\"n\">xs</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n</code></pre></div>",
        "id": 398106419,
        "sender_full_name": "Agnishom Chattopadhyay",
        "timestamp": 1698073759
    },
    {
        "content": "<p>Well I think your original version already allowed for that, by not assuming antisymmetry of <code>LE</code> the <code>LE</code> relation could be weaker than in a linear order and hence be something like <code>(a,b) \\le (c,d) \\iff a \\le c</code> or some such, allowing to sort on a key without comparing the elements for equality</p>",
        "id": 398106423,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1698073761
    },
    {
        "content": "<p>All you really need it <code>        rw [List.length_cons]</code> not <code>simp [List.length]</code> btw</p>",
        "id": 398106710,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1698073845
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"130290\">Agnishom Chattopadhyay</span> <a href=\"#narrow/stream/113489-new-members/topic/Idiomatic.20way.20to.20use.20Ord.20Typeclass.20to.20get.20Bools.3F/near/398106419\">said</a>:</p>\n<blockquote>\n<p>The output of <code>simp [List.length]</code> seems to be</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">List.length</span> <span class=\"o\">(</span><span class=\"n\">List.filter</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x_1</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">decide</span> <span class=\"o\">(</span><span class=\"n\">x_1</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"n\">xs</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"n\">List.length</span> <span class=\"n\">xs</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>You should be looking at the output of <code>simp? [List.length]</code>, not the goal state afterwards</p>",
        "id": 398110333,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1698074851
    }
]