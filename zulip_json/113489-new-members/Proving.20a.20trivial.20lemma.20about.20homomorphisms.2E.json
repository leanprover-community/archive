[
    {
        "content": "<p>Hello, I was wondering how a I might prove this lemma:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">equate_hom</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"n\">Magma</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n<span class=\"bp\">∀</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">Hom</span> <span class=\"n\">X</span> <span class=\"n\">Y</span><span class=\"o\">,</span> <span class=\"n\">f.func</span> <span class=\"bp\">=</span> <span class=\"n\">g.func</span>  <span class=\"bp\">→</span>  <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">g</span>\n</code></pre></div>\n<p>where <code>Hom</code> is defined like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">hom</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"n\">Magma</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">resp_op</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">,</span>\n    <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">X.op</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">Y.op</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">)</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">Hom</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"n\">Magma</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">func</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hom_func</span> <span class=\"o\">:</span> <span class=\"n\">hom</span> <span class=\"n\">func</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>Somehow I can't seem to do this, though it should probably be quite simple.</p>",
        "id": 382645357,
        "sender_full_name": "Jan Matula",
        "timestamp": 1691417520
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/lean-web-editor/#code=universe%20u%0A%0A%2F-%0Amagmas%3A%0A-%2F%0A%0Astructure%20Magma%20%3A%3D%0A%20%20%28carrier%20%3A%20Type%20u%29%0A%20%20%28op%20%3A%20carrier%20%E2%86%92%20carrier%20%E2%86%92%20carrier%29%0A%0Ainstance%20Magma_to_sort%20%3A%0Ahas_coe_to_sort%20Magma%20%28Type%20u%29%20%3A%3D%0A%20%20%E2%9F%A8%20Magma.carrier%20%E2%9F%A9%0A%0A%2F-%0Ahomomorphisms%3A%0A-%2F%0A%0Aclass%20hom%20%7BX%20Y%20%3A%20Magma%7D%20%28f%20%3A%20X%20%E2%86%92%20Y%29%20%3A%3D%0A%20%20%28resp_op%20%3A%20%E2%88%80%20x%20y%20%3A%20X%2C%0A%20%20%20%20f%20%28X.op%20x%20y%29%20%3D%20Y.op%20%28f%20x%29%20%28f%20y%29%20%29%0A%0Astructure%20Hom%20%28X%20Y%20%3A%20Magma%29%20%3A%3D%0A%20%20%28func%20%3A%20X%20%E2%86%92%20Y%29%20%28hom_func%20%3A%20hom%20func%29%0A%0Ainstance%20Hom.to_fun%20%7BX%20Y%20%3A%20Magma%7D%20%3A%0Ahas_coe_to_fun%20%28Hom%20X%20Y%29%20%28%CE%BB%20_%2C%20X%20%E2%86%92%20Y%29%20%3A%3D%0A%20%20%E2%9F%A8%20Hom.func%20%E2%9F%A9%0A%0A--%20how%20do%20I%20prove%20this%3F%0Alemma%20equate_hom%20%7BX%20Y%20%3A%20Magma%7D%20%3A%0A%E2%88%80%20f%20g%20%3A%20Hom%20X%20Y%2C%20f.func%20%3D%20g.func%20%20%E2%86%92%20%20f%20%3D%20g%20%3A%3D%0A%20%20sorry\">the full example online</a></p>",
        "id": 382645891,
        "sender_full_name": "Jan Matula",
        "timestamp": 1691417598
    },
    {
        "content": "<p>Note it's usually best to paste the full code directly here rather than link to the web editor; Zulip adds an \"open in web editor\" link automatically.</p>",
        "id": 382646226,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1691417658
    },
    {
        "content": "<p>No problem, this is the full code:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">universe</span> <span class=\"n\">u</span>\n\n<span class=\"c\">/-</span>\n<span class=\"cm\">magmas:</span>\n<span class=\"cm\">-/</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">Magma</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">carrier</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">op</span> <span class=\"o\">:</span> <span class=\"n\">carrier</span> <span class=\"bp\">→</span> <span class=\"n\">carrier</span> <span class=\"bp\">→</span> <span class=\"n\">carrier</span><span class=\"o\">)</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">Magma_to_sort</span> <span class=\"o\">:</span>\n<span class=\"n\">has_coe_to_sort</span> <span class=\"n\">Magma</span> <span class=\"o\">(</span><span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨</span> <span class=\"n\">Magma.carrier</span> <span class=\"o\">⟩</span>\n\n<span class=\"c\">/-</span>\n<span class=\"cm\">homomorphisms:</span>\n<span class=\"cm\">-/</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">hom</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"n\">Magma</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">resp_op</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">,</span>\n    <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">X.op</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">Y.op</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">)</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">Hom</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"n\">Magma</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">func</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hom_func</span> <span class=\"o\">:</span> <span class=\"n\">hom</span> <span class=\"n\">func</span><span class=\"o\">)</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">Hom.to_fun</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"n\">Magma</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n<span class=\"n\">has_coe_to_fun</span> <span class=\"o\">(</span><span class=\"n\">Hom</span> <span class=\"n\">X</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨</span> <span class=\"n\">Hom.func</span> <span class=\"o\">⟩</span>\n\n<span class=\"c1\">-- how do I prove this?</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">equate_hom</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"n\">Magma</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n<span class=\"bp\">∀</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">Hom</span> <span class=\"n\">X</span> <span class=\"n\">Y</span><span class=\"o\">,</span> <span class=\"n\">f.func</span> <span class=\"bp\">=</span> <span class=\"n\">g.func</span>  <span class=\"bp\">→</span>  <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"o\">:=</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 382646868,
        "sender_full_name": "Jan Matula",
        "timestamp": 1691417770
    },
    {
        "content": "<p>You will have a better time if you change</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">hom</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"n\">Magma</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n</code></pre></div>\n<p>to </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">hom</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"n\">Magma</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n</code></pre></div>",
        "id": 382647602,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1691417905
    },
    {
        "content": "<p>The most important answer is: you shouldn't be using Lean 3 which is fully deprecated.</p>",
        "id": 382647605,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1691417905
    },
    {
        "content": "<p>And then indeed the second answer is what Eric wrote.</p>",
        "id": 382647735,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1691417925
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113489-new-members/topic/Proving.20a.20trivial.20lemma.20about.20homomorphisms.2E/near/382647602\">said</a>:</p>\n<blockquote>\n<p>You will have a better time if you change</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">hom</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"n\">Magma</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n</code></pre></div>\n<p>to </p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">hom</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"n\">Magma</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>and then the <code>@[ext]</code> attribute can help you make these lemmas automatically</p>",
        "id": 382647852,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1691417946
    },
    {
        "content": "<p>Which to be clear, goes on <code>structure Hom</code> not <code>class hom</code></p>",
        "id": 382648053,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1691417971
    },
    {
        "content": "<p>To be clear: the fact that this <code>: Prop</code> is required is clearly a bug, but it will never be fixed in Lean 3 which is completely frozen forever.</p>",
        "id": 382648310,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1691418009
    },
    {
        "content": "<p>I don't know if we opened a Lean4 issue about it yet...</p>",
        "id": 382648425,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1691418029
    },
    {
        "content": "<p>And the <code>@[ext]</code> attribute will require some import (probably from mathlib).</p>",
        "id": 382648555,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1691418049
    },
    {
        "content": "<p>it's in std</p>",
        "id": 382648623,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1691418061
    },
    {
        "content": "<p>Is this goal proable without <code>: Prop</code>? It should still be a subsingleton, right? Just not definitionalyl</p>",
        "id": 382648849,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1691418094
    },
    {
        "content": "<p>Yeah, but you get an annoying <code>HEq</code> for the <code>hom</code> field</p>",
        "id": 382648970,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1691418116
    },
    {
        "content": "<p>Mario, I was answering the Lean 3 question, but indeed in Lean 4 it is in std.</p>",
        "id": 382649103,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1691418128
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/113489-new-members/topic/Proving.20a.20trivial.20lemma.20about.20homomorphisms.2E/near/382647605\">said</a>:</p>\n<blockquote>\n<p>The most important answer is: you shouldn't be using Lean 3 which is fully deprecated.</p>\n</blockquote>\n<p>Somehow I was under the impression that Lean 3 was the stable one, while Lean 4 is work in progress.</p>",
        "id": 382649247,
        "sender_full_name": "Jan Matula",
        "timestamp": 1691418151
    },
    {
        "content": "<p>You're a few weeks out of date :)</p>",
        "id": 382651933,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1691418592
    },
    {
        "content": "<p>Mathlib 3 is no longer accepting PRs and mathlib 4 is fully up and running! And yeah this is a recent event.</p>",
        "id": 382688699,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1691424336
    }
]