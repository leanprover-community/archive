[
    {
        "content": "<p>I try to complete this simple proof:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">ll</span><span class=\"o\">:</span> <span class=\"o\">{</span> <span class=\"n\">field</span> <span class=\"o\">:=</span> <span class=\"n\">a</span> <span class=\"o\">}</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"o\">{</span> <span class=\"n\">field</span> <span class=\"o\">:=</span> <span class=\"n\">b</span> <span class=\"o\">}</span><span class=\"bp\">.</span><span class=\"mi\">1</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span>\n</code></pre></div>\n<p>Is there a lean tactic that allows me to complete this proof? I would hope that there is a way to get rid of the storing a value in a struct and directly extracting it again, in case of single-element structures.</p>",
        "id": 404084876,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1700903686
    },
    {
        "content": "<p><code>exact ll</code></p>",
        "id": 404085690,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1700904125
    },
    {
        "content": "<p><code>dsimp only at ll</code> would clean things up in the more general case</p>",
        "id": 404085757,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1700904173
    },
    {
        "content": "<p>Nice.</p>",
        "id": 404086033,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1700904333
    },
    {
        "content": "<p>In my proof I also have a <code>↑v1.1 = ↑v2.1</code> (cooersion Fin to Nat) from which I want to derive that <code>v1.1 = v2.1</code>.</p>",
        "id": 404086148,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1700904388
    },
    {
        "content": "<p><code>have := Fin.coe_injective h</code></p>",
        "id": 404086833,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1700904744
    },
    {
        "content": "<p>Though if that second term is your goal, your could also use <code>ext</code></p>",
        "id": 404086893,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1700904782
    },
    {
        "content": "<p>I guess that can be written more concise.</p>",
        "id": 404089415,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1700905996
    },
    {
        "content": "<p>I am particularly unhappy with having to use cases which unfolds things quite a bit.</p>",
        "id": 404089416,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1700905996
    },
    {
        "content": "<p>I could not really use the <code>ext</code></p>",
        "id": 404089417,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1700905996
    },
    {
        "content": "<p>I am particularly unhappy with having to use <code>cases</code> which unfolds things quite a bit.</p>",
        "id": 404089486,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1700906032
    },
    {
        "content": "<p>I guess that can be written more concise.</p>",
        "id": 404089487,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1700906031
    },
    {
        "content": "<p>But I came up with the following:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">test</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">v1</span> <span class=\"n\">v2</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"n\">v1</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"n\">v2</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)}</span> <span class=\"o\">:</span> <span class=\"n\">v1</span> <span class=\"bp\">=</span> <span class=\"n\">v2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">cases</span> <span class=\"n\">v1</span>\n  <span class=\"n\">cases</span> <span class=\"n\">v2</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"bp\">*</span><span class=\"o\">]</span>\n  <span class=\"n\">dsimp</span> <span class=\"n\">only</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n  <span class=\"n\">exact</span> <span class=\"n\">h</span>\n</code></pre></div>",
        "id": 404089488,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1700906032
    },
    {
        "content": "<p>OK, I got it:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">test</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">v1</span> <span class=\"n\">v2</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"n\">v1</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"n\">v2</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)}</span> <span class=\"o\">:</span> <span class=\"n\">v1</span> <span class=\"bp\">=</span> <span class=\"n\">v2</span> <span class=\"o\">:=</span>\n  <span class=\"n\">Fin.val_injective</span> <span class=\"n\">h</span>\n</code></pre></div>",
        "id": 404090222,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1700906368
    }
]