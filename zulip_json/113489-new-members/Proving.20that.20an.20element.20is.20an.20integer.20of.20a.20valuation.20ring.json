[
    {
        "content": "<p>Let's say I want to write down an element of a ring <a href=\"https://leanprover-community.github.io/mathlib_docs/find/valuation.integer\">docs#valuation.integer</a>. I try doing it like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">ring_theory.valuation.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.order.monoid.with_zero.defs</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">valuation</span> <span class=\"n\">R</span> <span class=\"n\">ℤₘ₀</span><span class=\"o\">}</span>\n<span class=\"kd\">def</span> <span class=\"n\">my_integer</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">w</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">w.integer</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"kd\">begin</span> <span class=\"n\">rw</span> <span class=\"n\">set.mem_def</span><span class=\"o\">,</span> <span class=\"kd\">end</span><span class=\"o\">⟩</span>\n</code></pre></div>\n<p>but get a message </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">rewrite</span> <span class=\"n\">tactic</span> <span class=\"n\">failed</span><span class=\"o\">,</span> <span class=\"n\">did</span> <span class=\"n\">not</span> <span class=\"n\">find</span> <span class=\"kd\">instance</span> <span class=\"n\">of</span> <span class=\"n\">the</span> <span class=\"n\">pattern</span> <span class=\"k\">in</span> <span class=\"n\">the</span> <span class=\"n\">target</span> <span class=\"n\">expression</span>\n  <span class=\"bp\">?</span><span class=\"n\">m_2</span> <span class=\"bp\">∈</span> <span class=\"bp\">?</span><span class=\"n\">m_3</span>\n</code></pre></div>",
        "id": 326966804,
        "sender_full_name": "Stepan Nesterov",
        "timestamp": 1676005237
    },
    {
        "content": "<p>How do I figure out what the right ∈ is, so that I can rw it?</p>",
        "id": 326966959,
        "sender_full_name": "Stepan Nesterov",
        "timestamp": 1676005356
    },
    {
        "content": "<p>Not sure if this answers your question, but:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">ring_theory.valuation.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">ring_theory.valuation.integers</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.order.monoid.with_zero.defs</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">discrete_valuation</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">valuation</span> <span class=\"n\">R</span> <span class=\"n\">ℤₘ₀</span><span class=\"o\">}</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">w</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">w.integer</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">valuation.integer</span><span class=\"o\">,</span> <span class=\"n\">subring.mem_mk</span><span class=\"o\">,</span> <span class=\"n\">mem_set_of_eq</span><span class=\"o\">,</span> <span class=\"n\">ha</span><span class=\"o\">,</span> <span class=\"n\">zero_le_one</span><span class=\"o\">],</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 326971207,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1676008919
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"407114\">@Stepan Nesterov</span> can you please provide a working <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> ?</p>",
        "id": 327069038,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1676040211
    },
    {
        "content": "<p>Anyway, it seems like whoever wrote this part of the valuation theory library forgot to make a <code>valuation.mem_integer</code> lemma. <br>\nThe following is (approximately) what I would do in this case.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">ring_theory.valuation.integers</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"bp\">Γ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">linear_ordered_comm_group_with_zero</span> <span class=\"bp\">Γ</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">valuation</span> <span class=\"n\">R</span> <span class=\"bp\">Γ</span><span class=\"o\">}</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">valuation.mem_integer_iff</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">w.integer</span> <span class=\"bp\">↔</span> <span class=\"n\">w</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"n\">iff.rfl</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">w</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">w.integer</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">valuation.mem_integer_iff</span><span class=\"o\">,</span> <span class=\"n\">ha</span><span class=\"o\">],</span>\n  <span class=\"n\">exact</span> <span class=\"n\">zero_le_one</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 327070362,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1676040550
    }
]