[
    {
        "content": "<p>Hi. I'm wondering if there might be a <code>typeOf</code> operator in Lean. I might want to confirm the type of an expression using an <code>example</code>, something like:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span><span class=\"o\">:</span> <span class=\"n\">typeOf</span> <span class=\"o\">(</span><span class=\"n\">String.append</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">String</span> <span class=\"bp\">→</span> <span class=\"n\">String</span> <span class=\"bp\">→</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 370231439,
        "sender_full_name": "Steven Shaw",
        "timestamp": 1687909606
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">typeOf</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">α</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">typeOf</span> <span class=\"n\">String.append</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">String</span> <span class=\"bp\">→</span> <span class=\"n\">String</span> <span class=\"bp\">→</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 370231809,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1687909800
    },
    {
        "content": "<p>There should be a <code>typeof%</code> \"function\" that gives you the type itself. I don't remember if it has an underscore in the name (on my phone)</p>",
        "id": 370239596,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1687912938
    },
    {
        "content": "<p>Thanks, it's great to see how <code>typeOf</code> can be implemented in Lean itself. As for the built-in function, it looks like it's <code>type_of%</code>. I can't navigate to its definition, so I imagine it's a compiler intrinsic.</p>",
        "id": 370241010,
        "sender_full_name": "Steven Shaw",
        "timestamp": 1687913464
    },
    {
        "content": "<p>It's called a \"term elaborator\" and it's something you can even write yourself! (It's like a compiler intrinsic that's a macro)</p>",
        "id": 370246565,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1687915592
    },
    {
        "content": "<p>Go to definition should work on it, but you need to have <code>import Lean</code> so that the declaration is in the environment</p>",
        "id": 370250032,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1687916993
    },
    {
        "content": "<p>Thanks, using <code>import Lean</code>, I can now navigate to the definition!</p>",
        "id": 370250975,
        "sender_full_name": "Steven Shaw",
        "timestamp": 1687917371
    }
]