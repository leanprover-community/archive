[
    {
        "content": "<p>In the example on p. 64 of MiL I replaced <code>obtain</code> with <code>have</code> and <code>rcases</code></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">coprime_mn</span> <span class=\"o\">:</span> <span class=\"n\">m.Coprime</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">≠</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">sqr_eq</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">∣</span> <span class=\"n\">m</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"gr\">sorry</span>\n  <span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">apply</span> <span class=\"n\">dvd_iff_exists_eq_mul_left.mp</span> <span class=\"n\">this</span>\n    <span class=\"n\">rcases</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">meq</span><span class=\"o\">⟩</span>\n</code></pre></div>\n<p>When I try to replace <code>rcases</code> with </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>    <span class=\"n\">cases</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"n\">k</span> <span class=\"n\">meq</span>\n</code></pre></div>\n<p>following Section 5 of <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> 's RM where it is listed as the tactic to apply for an existential hypothesis like <code>h: ∃ c, m = c * 2</code>.  P. 39 seems to say exactly what I want</p>\n<blockquote>\n<p>5) If you have a hypothesis <code>h : ∃ a, a^3 + a = 37</code> then <code>cases h with x hx</code> will give you a number <code>x</code><br>\nand a proof [should be hypothesis?] <code>hx : x^3 + x = 37</code>.</p>\n</blockquote>",
        "id": 406720585,
        "sender_full_name": "Moti Ben-Ari",
        "timestamp": 1702027910
    },
    {
        "content": "<p>In Lean 4 the syntax is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">cases</span> <span class=\"n\">h</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">intro</span> <span class=\"n\">w</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>(you can write <code>cases h</code> and then click on the bulb). The other syntax comes from Lean3, but you can still use <code>cases' h with n hn</code>.</p>",
        "id": 406721018,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1702028082
    },
    {
        "content": "<p>\"...will give you a <em>proof</em>...\" is correct, even if is't not standard mathematical terminology. It gives you <code>(hx : x^3+x=37)</code>, that is a proof that <code>x^3+x=37</code>. Of course this proof comes from your <code>h</code> (that itself is a proof that <code>∃ a, a^3 + a = 37</code>).</p>",
        "id": 406721306,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1702028191
    },
    {
        "content": "<p>I assume \"RM\" means \"reference manual\" and refers to <a href=\"https://www.ma.imperial.ac.uk/~buzzard/xena/formalising-mathematics-2023/Part_C/tactics/cases.html\">https://www.ma.imperial.ac.uk/~buzzard/xena/formalising-mathematics-2023/Part_C/tactics/cases.html</a>, which uses Lean 3 as Riccardo pointed out. Although Lean 4 is standard now, it wasn't in January 2023 when the course was last taught. Maybe the 2024 version of the course, if it exists, will use Lean 4.</p>",
        "id": 406725385,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1702029824
    },
    {
        "content": "<p>You can also use <code>let ⟨w, h⟩ := h</code> when it is a single pattern, or <code>obtain ⟨w, h⟩ := h</code> to use the rcases backend</p>",
        "id": 406731650,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1702031918
    },
    {
        "content": "<p>Thanks for the help. It's rather confusing when there are many ways to implement the same thing; I guess it will become clear when I have more experience.</p>",
        "id": 406749621,
        "sender_full_name": "Moti Ben-Ari",
        "timestamp": 1702038927
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"325367\">Mauricio Collares</span> <a href=\"#narrow/stream/113489-new-members/topic/rcases.20vs.20cases/near/406725385\">said</a>:</p>\n<blockquote>\n<p>I assume \"RM\" means \"reference manual\" and refers to <a href=\"https://www.ma.imperial.ac.uk/~buzzard/xena/formalising-mathematics-2023/Part_C/tactics/cases.html\">https://www.ma.imperial.ac.uk/~buzzard/xena/formalising-mathematics-2023/Part_C/tactics/cases.html</a>, which uses Lean 3 as Riccardo pointed out. Although Lean 4 is standard now, it wasn't in January 2023 when the course was last taught. Maybe the 2024 version of the course, if it exists, will use Lean 4.</p>\n</blockquote>\n<p>Indeed, my job for December is to rewrite that entire course document and all of the course repo in Lean 4 because the course will be running again in January.</p>",
        "id": 406752201,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1702039772
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"667469\">Moti Ben-Ari</span> <a href=\"#narrow/stream/113489-new-members/topic/rcases.20vs.20cases/near/406749621\">said</a>:</p>\n<blockquote>\n<p>Thanks for the help. It's rather confusing when there are many ways to implement the same thing; I guess it will become clear when I have more experience.</p>\n</blockquote>\n<p>Personally, I don't like the verbose Lean 4 <code>cases</code>, nor do I need <code>cases'</code> as I can always go with <code>obtain</code> (handles 1 or more cases, plus accepting a proof) and it spells natural.</p>\n<p><code>rintro</code> is another weird spelling that joined the confusions around <code>cases</code>/<code>rcases</code> (if one only looks at their naming and their not-really-new-user-facing doc strings), until I simply see it as <code>intro</code>s + <code>obtain</code>s:</p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>Understanding \"rintro\" for 1 pattern</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Std.Tactic.Rcases</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.Cases</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.Use</span>\n\n<span class=\"c1\">-- using `rintro`</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">p</span><span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rintro</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">ha</span><span class=\"o\">⟩</span> <span class=\"o\">⟨</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">hb</span><span class=\"o\">⟩</span>\n  <span class=\"n\">use</span> <span class=\"n\">a</span>\n\n<span class=\"c1\">-- break `rintro` into `intro`s and `obtain`s</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">p</span><span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h1</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h2</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">ha</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">h1</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">hb</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">h2</span>\n  <span class=\"n\">use</span> <span class=\"n\">a</span>\n\n<span class=\"c1\">-- rewrite `obtain` to `cases'`</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">p</span><span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h1</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h2</span>\n  <span class=\"n\">cases'</span> <span class=\"n\">h1</span> <span class=\"k\">with</span> <span class=\"n\">a</span> <span class=\"n\">ha</span>\n  <span class=\"n\">cases'</span> <span class=\"n\">h2</span> <span class=\"k\">with</span> <span class=\"n\">a</span> <span class=\"n\">ha</span>\n  <span class=\"n\">use</span> <span class=\"n\">a</span>\n</code></pre></div>\n</div></div>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>Understanding \"rintro\" for 1+ patterns</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Std.Tactic.Rcases</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.Cases</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.Use</span>\n\n<span class=\"c1\">-- using `rintro`</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">p</span><span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">))</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">d</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">c</span> <span class=\"n\">d</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rintro</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">hb</span><span class=\"o\">⟩⟩</span>\n  <span class=\"n\">use</span> <span class=\"n\">a</span>\n  <span class=\"n\">use</span> <span class=\"n\">b</span>\n\n<span class=\"c1\">-- break `rintro` into `intro`s and `cases'`s</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">p</span><span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">))</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">d</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">c</span> <span class=\"n\">d</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h</span>\n  <span class=\"n\">cases'</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"n\">a</span> <span class=\"n\">ha</span>\n  <span class=\"n\">cases'</span> <span class=\"n\">ha</span> <span class=\"k\">with</span> <span class=\"n\">b</span> <span class=\"n\">hb</span>\n  <span class=\"n\">use</span> <span class=\"n\">a</span>\n  <span class=\"n\">use</span> <span class=\"n\">b</span>\n\n<span class=\"c1\">-- collapse `cases'`s into a single `rcases`</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">p</span><span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">))</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">d</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">c</span> <span class=\"n\">d</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">hb</span><span class=\"o\">⟩⟩</span>\n  <span class=\"n\">use</span> <span class=\"n\">a</span>\n  <span class=\"n\">use</span> <span class=\"n\">b</span>\n\n<span class=\"c1\">-- rewrite `rcases` to `obtain` then look at `rintro` above again</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">p</span><span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">))</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">d</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">c</span> <span class=\"n\">d</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">hb</span><span class=\"o\">⟩⟩</span> <span class=\"o\">:=</span> <span class=\"n\">h</span>\n  <span class=\"n\">use</span> <span class=\"n\">a</span>\n  <span class=\"n\">use</span> <span class=\"n\">b</span>\n</code></pre></div>\n</div></div>",
        "id": 406768969,
        "sender_full_name": "Utensil Song",
        "timestamp": 1702045257
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"296911\">Utensil Song</span> <a href=\"#narrow/stream/113489-new-members/topic/rcases.20vs.20cases/near/406768969\">said</a>:</p>\n<blockquote>\n<p>Personally, I don't like the verbose Lean 4 <code>cases</code>, nor do I need <code>cases'</code> as I can always go with <code>obtain</code> (handles 1 or more cases, plus accepting a proof) and it spells natural.</p>\n<p><code>rintro</code> is another weird spelling that joined the confusions around <code>cases</code>/<code>rcases</code> (if one only looks at their naming and their not-really-new-user-facing doc strings), until I simply see it as <code>intro</code>s + <code>obtain</code>s:</p>\n</blockquote>\n<p>Most of my career has been in educational aspects of math and computer science, with emphasis on logic. It is rather frustrating that - although the logic and proof methods, as well as programming techniques, are very familiar - I'm having too much difficulty navigating Lean. I want to see if I can find better approaches to learning and teaching Lean. The answers to my questions have been extremely helpful and I will consider them in the light of my educational experience. Thanks!</p>",
        "id": 406791549,
        "sender_full_name": "Moti Ben-Ari",
        "timestamp": 1702052048
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"667469\">Moti Ben-Ari</span> <a href=\"#narrow/stream/113489-new-members/topic/rcases.20vs.20cases/near/406749621\">said</a>:</p>\n<blockquote>\n<p>Thanks for the help. It's rather confusing when there are many ways to implement the same thing; I guess it will become clear when I have more experience.</p>\n</blockquote>\n<p>Part of the reason is that there are basic tactics for doing certain things that are defined in Lean core itself. But the system is user extensible so that users can add their own more powerful tactics that in many cases subsume the functionality of the core ones to some extent. Mathlib and Std add many such tactics, but it would be bad style to override the names of the built in ones (as this could be even more confusing if tactics change meaning) so often similar but distinct names are chosen, hence there are many ways of doing the same thing when you build on these libraries.</p>",
        "id": 406792690,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1702052297
    },
    {
        "content": "<p>I don't see a good reason to have rcases alongside obtain, though</p>",
        "id": 406796825,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1702053191
    },
    {
        "content": "<p>That is more of a historical artifact right? I must say that I do still think more in terms of rcases than obtain personally, maybe it just flows better left to right in my head that way</p>",
        "id": 406797941,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1702053510
    },
    {
        "content": "<p>If a new user learns <code>rcases</code> from verbose lean or informal , it certainly flows better.</p>\n<p><code>obtain</code> only feels better when one is already used to Lean's way of <code>statement := proof</code>and the idea of destructive style of pattern matching. It doesn't fully feel like \"we obtain ... from ...\".</p>",
        "id": 406800427,
        "sender_full_name": "Utensil Song",
        "timestamp": 1702054434
    },
    {
        "content": "<p>How does one use <code>obtain</code>, or Lean-4 <code>cases</code>? I really feel the lack of good tactic documentation nowadays!</p>",
        "id": 406907525,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1702110168
    },
    {
        "content": "<p><code>obtain patterns := terms</code> is the syntax, where <code>patterns</code> is the appropriate combination of <code>⟨_, _⟩</code> and <code>(_ | _)</code>.</p>",
        "id": 406907803,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1702110292
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"330967\">Wrenna Robson</span> <a href=\"#narrow/stream/113489-new-members/topic/rcases.20vs.20cases/near/406907525\">said</a>:</p>\n<blockquote>\n<p>How does one use <code>obtain</code>, or Lean-4 <code>cases</code>? I really feel the lack of good tactic documentation nowadays!</p>\n</blockquote>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"n\">r</span><span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">q</span> <span class=\"bp\">∨</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">(</span><span class=\"n\">hp</span> <span class=\"bp\">|</span> <span class=\"n\">hq</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">h</span>\n  <span class=\"bp\">.</span> <span class=\"n\">exact</span> <span class=\"n\">Or.inr</span> <span class=\"n\">hp</span>\n  <span class=\"bp\">.</span> <span class=\"n\">exact</span> <span class=\"n\">Or.inl</span> <span class=\"n\">hq</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">q</span> <span class=\"bp\">∧</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">hp</span><span class=\"o\">,</span> <span class=\"n\">hq</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">h</span>\n  <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">hq</span><span class=\"o\">,</span> <span class=\"n\">hp</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">r</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"bp\">∨</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">hp</span> <span class=\"bp\">|</span> <span class=\"n\">hq</span><span class=\"o\">,</span> <span class=\"n\">hr</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">h</span>\n  <span class=\"bp\">.</span> <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">hr</span><span class=\"o\">,</span> <span class=\"n\">Or.inr</span> <span class=\"n\">hp</span><span class=\"o\">⟩</span>\n  <span class=\"bp\">.</span> <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">hr</span><span class=\"o\">,</span> <span class=\"n\">Or.inl</span> <span class=\"n\">hq</span><span class=\"o\">⟩</span>\n</code></pre></div>\n<p>Do this example and <a href=\"#narrow/stream/113489-new-members/topic/rcases.20vs.20cases/near/406768969\">these</a> help?</p>",
        "id": 406909471,
        "sender_full_name": "Utensil Song",
        "timestamp": 1702111207
    },
    {
        "content": "<p>And for <code>cases</code>, you just type <code>cases x</code> and a little <span aria-label=\"light bulb\" class=\"emoji emoji-1f4a1\" role=\"img\" title=\"light bulb\">:light_bulb:</span> comes up in Vs code that fills in the rest</p>",
        "id": 406910085,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1702111696
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"307953\">Ruben Van de Velde</span> <a href=\"#narrow/stream/113489-new-members/topic/rcases.20vs.20cases/near/406910085\">said</a>:</p>\n<blockquote>\n<p>And for <code>cases</code>, you just type <code>cases x</code> and a little <span aria-label=\"light bulb\" class=\"emoji emoji-1f4a1\" role=\"img\" title=\"light bulb\">:light_bulb:</span> comes up in Vs code that fills in the rest</p>\n</blockquote>\n<p>Or if you are using Cursor as the editor, you can just use <code>Ctrl+.</code> or <code>Cmd+.</code> because the <span aria-label=\"light bulb\" class=\"emoji emoji-1f4a1\" role=\"img\" title=\"light bulb\">:light_bulb:</span> won't be showing, related: <a href=\"https://github.com/getcursor/cursor/pull/745\">getcursor/cursor#745</a> .</p>",
        "id": 406910870,
        "sender_full_name": "Utensil Song",
        "timestamp": 1702112357
    },
    {
        "content": "<p>It's a blue bulb FWIW</p>",
        "id": 406919446,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1702117068
    },
    {
        "content": "<p>BTW vscode has both yellow and blue bulbs. The blue one is a bit bigger and comes with a key combination to accept it, and represents code actions that are particularly recommended, like completions and error fixes. (Internally this corresponds to the <code>isPreferred</code> field on the code action.)</p>",
        "id": 406969853,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1702154783
    }
]