[
    {
        "content": "<p>Hello, I'd like to name a function with an emoji (i.e. the magnifying glass for <code>Finmap.lookup</code>), or something like this. The parser is not happy about this, and I've tried various other strategies, like writing notation for a prefix operator, or writing an elaborator. I've had no luck.</p>\n<p>I was able to get the notation approach to work for unary functions, but anything that wants more than 1 argument requires parentheses to get the precedence to work out, which is a bit disappointing.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#check</span> <span class=\"o\">((</span><span class=\"bp\">ðŸ”Ž</span> <span class=\"n\">var</span><span class=\"o\">)</span> <span class=\"n\">s</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>Anyone know how to do this? <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 403604378,
        "sender_full_name": "Malcolm Langfield",
        "timestamp": 1700663497
    },
    {
        "content": "<p>Have you tried enclosing everything in french quotes? <code>Â«Â»</code>, typed <code>\\f&lt;&lt;&gt;&gt;</code>.</p>",
        "id": 403604700,
        "sender_full_name": "YaÃ«l Dillies",
        "timestamp": 1700663573
    },
    {
        "content": "<p>Sorry, what do you mean by everything? Can you give a full example?</p>",
        "id": 403605164,
        "sender_full_name": "Malcolm Langfield",
        "timestamp": 1700663701
    },
    {
        "content": "<p>Well, can <em>you</em> give an example of what you tried?</p>",
        "id": 403606322,
        "sender_full_name": "YaÃ«l Dillies",
        "timestamp": 1700664071
    },
    {
        "content": "<p>Sure, sure, apologies!</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Finmap</span>\n<span class=\"kd\">notation</span><span class=\"o\">:</span><span class=\"mi\">65</span> <span class=\"s2\">\"ðŸ”Ž \"</span> <span class=\"n\">var</span> <span class=\"n\">s</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Finmap.lookup</span> <span class=\"n\">var</span> <span class=\"n\">s</span>\n</code></pre></div>\n<p>Here's the most naive version.</p>",
        "id": 403606682,
        "sender_full_name": "Malcolm Langfield",
        "timestamp": 1700664182
    },
    {
        "content": "<p>This works</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Finmap</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">Î±</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">Î²</span> <span class=\"o\">:</span> <span class=\"n\">Î±</span> <span class=\"bp\">â†’</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">Î±</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Î±</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Finmap</span> <span class=\"n\">Î²</span><span class=\"o\">)</span>\n\n<span class=\"n\">abbrev</span> <span class=\"bp\">Â«ðŸ”ŽÂ»</span> <span class=\"o\">:=</span> <span class=\"n\">Finmap.lookup</span> <span class=\"n\">a</span> <span class=\"n\">s</span>\n\n<span class=\"k\">#check</span> <span class=\"bp\">Â«ðŸ”ŽÂ»</span> <span class=\"n\">a</span> <span class=\"n\">s</span>\n</code></pre></div>",
        "id": 403608582,
        "sender_full_name": "YaÃ«l Dillies",
        "timestamp": 1700664783
    },
    {
        "content": "<p>Oh my gosh! Thank you so much!</p>",
        "id": 403608881,
        "sender_full_name": "Malcolm Langfield",
        "timestamp": 1700664860
    },
    {
        "content": "<p><span aria-label=\"heart\" class=\"emoji emoji-2764\" role=\"img\" title=\"heart\">:heart:</span> <span aria-label=\"heart\" class=\"emoji emoji-2764\" role=\"img\" title=\"heart\">:heart:</span> <span aria-label=\"heart\" class=\"emoji emoji-2764\" role=\"img\" title=\"heart\">:heart:</span></p>",
        "id": 403608901,
        "sender_full_name": "Malcolm Langfield",
        "timestamp": 1700664868
    },
    {
        "content": "<p>Having to use the French quotes after declaring the abbrev is a crummy workaround :/</p>",
        "id": 403608946,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1700664885
    },
    {
        "content": "<p>I'd expect this to work: </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Finmap</span>\n<span class=\"kd\">notation</span> <span class=\"s2\">\"ðŸ”Ž\"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Finmap.lookup</span>\n</code></pre></div>",
        "id": 403608982,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1700664898
    },
    {
        "content": "<p>I was experimenting with that! It looks like `notation:##`` doesn't work except when ## is the maximum (1024). So it looks like no ## is a synonym for max, is that right? And what are best practices regarding doing that? (Obviously in this case, max is the only option.)</p>",
        "id": 403609404,
        "sender_full_name": "Yongyi Chen",
        "timestamp": 1700665036
    },
    {
        "content": "<p>Indeed, this works</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Finmap</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">Î±</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">Î²</span> <span class=\"o\">:</span> <span class=\"n\">Î±</span> <span class=\"bp\">â†’</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">Î±</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Î±</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Finmap</span> <span class=\"n\">Î²</span><span class=\"o\">)</span>\n\n<span class=\"kd\">notation</span> <span class=\"s2\">\"ðŸ”Ž\"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Finmap.lookup</span>\n\n<span class=\"k\">#check</span> <span class=\"bp\">ðŸ”Ž</span> <span class=\"n\">a</span> <span class=\"n\">s</span>\n</code></pre></div>",
        "id": 403609439,
        "sender_full_name": "YaÃ«l Dillies",
        "timestamp": 1700665051
    }
]