[
    {
        "content": "<p>I found I could do</p>\n<p>#eval DFA.eval {step := fun a b =&gt; b+1, start := 0, accept := ({1} : Finset Nat) : DFA Nat Nat} [0]</p>\n<p>however if I try to call</p>\n<p>#eval DFA.accepts {step := fun a b =&gt; b+1, start := 0, accept := ({1} : Finset Nat) : DFA Nat Nat} [0]</p>\n<p>I get </p>\n<p>failed to synthesize<br>\n  Decidable (DFA.accepts { step := fun a b =&gt; b + 1, start := 0, accept := ↑{1} } [0])</p>\n<p>I think I've traced the problem back to finite vs infinite sets:</p>\n<p>def setContains: (Nat → Set Nat → Prop) :=<br>\n  fun a b =&gt; a ∈ b</p>\n<p>#eval setContains 3 ({3} : Set Nat)</p>\n<p>says</p>\n<p>failed to synthesize<br>\n  Decidable (setContains 3 {3})</p>\n<p>If I do</p>\n<p>def setContainsFinset : (Nat → Finset Nat → Prop) :=<br>\n  fun a b =&gt; a ∈ b</p>\n<p>#eval setContainsFinset 3 ({3} : Finset Nat)</p>\n<p>I still get the same error, however since it is Finset I can instead change the Prop to Bool</p>\n<p>def setContainsFinsetBool : (Nat → Finset Nat → Bool) :=<br>\n  fun a b =&gt; a ∈ b</p>\n<p>#eval setContainsFinsetBool 3 ({3} : Finset Nat)</p>\n<p>And it actually works with no error.</p>\n<p>Is there a way to force this kind of behavior when calling </p>\n<p>#eval DFA.accepts {step := fun a b =&gt; b+1, start := 0, accept := ({1} : Finset Nat) : DFA Nat Nat} [0]</p>\n<p>?</p>\n<p>My understanding is that this requires me to use something that is a Fintype but is there a way to do it with sets like Nat?</p>",
        "id": 366911417,
        "sender_full_name": "TessaCoil",
        "timestamp": 1686938522
    },
    {
        "content": "<p>Thanks for your question! Can you edit your post and wrap your code with lines just containing <code> ``` </code>? Then it will display a lot more nicely. For more hints on how to ask a good question see <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a></p>",
        "id": 367012227,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1686953729
    }
]