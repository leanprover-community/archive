[
    {
        "content": "<p>Hello! I am trying to prove that if a sequence has finitely many distinct elements, then there is a value which infinitely many elements of the sequence attain:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">have</span> <span class=\"n\">ex2</span><span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">y</span> <span class=\"bp\">∈</span> <span class=\"n\">range</span> <span class=\"n\">u</span><span class=\"o\">,</span> <span class=\"n\">Set.Infinite</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"bp\">|</span> <span class=\"n\">u</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">y</span><span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n      <span class=\"n\">by_contra</span> <span class=\"n\">hcon2</span>\n      <span class=\"n\">push_neg</span> <span class=\"n\">at</span> <span class=\"n\">hcon2</span>\n      <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">mem_range</span><span class=\"o\">,</span> <span class=\"n\">not_infinite</span><span class=\"o\">,</span> <span class=\"n\">forall_exists_index</span><span class=\"o\">,</span> <span class=\"n\">forall_apply_eq_imp_iff</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hcon2</span>\n</code></pre></div>\n<p>Given:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">u</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">X</span>\n<span class=\"n\">hcon</span><span class=\"o\">:</span> <span class=\"n\">Set.Finite</span> <span class=\"o\">(</span><span class=\"n\">range</span> <span class=\"n\">u</span><span class=\"o\">)</span>\n<span class=\"n\">hcon2</span><span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">Set.Finite</span> <span class=\"o\">{</span><span class=\"n\">y</span> <span class=\"bp\">|</span> <span class=\"n\">u</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">u</span> <span class=\"n\">a</span><span class=\"o\">}</span>\n</code></pre></div>\n<p>This should imply that u n has finitely many terms, which should contradict the fact that it is a sequence, however I am unsure how to claim this in lean. Any advice would be appreciated, thanks!</p>",
        "id": 408546845,
        "sender_full_name": "Nelitha Kulasiri",
        "timestamp": 1702883483
    },
    {
        "content": "<p>Can I trouble you to post your question in the form of a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> ? It's just much easier for people to work on that way.</p>",
        "id": 408576600,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1702894353
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Topology.MetricSpace.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Order.Filter.AtTopBot</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.Order.Floor</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Nat.Nth</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Set.Finite</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Metric</span> <span class=\"n\">Set</span> <span class=\"n\">Function</span>\n<span class=\"kn\">open</span> <span class=\"n\">Filter</span>\n<span class=\"kn\">open</span> <span class=\"n\">Nat</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span><span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">MetricSpace</span> <span class=\"n\">X</span><span class=\"o\">]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Open</span> <span class=\"o\">(</span><span class=\"n\">S</span><span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">r</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">ball</span> <span class=\"n\">x</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">⊆</span> <span class=\"n\">S</span>\n<span class=\"kd\">def</span> <span class=\"n\">Closed</span> <span class=\"o\">(</span><span class=\"n\">S</span><span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">Open</span> <span class=\"n\">S</span><span class=\"bp\">ᶜ</span>\n<span class=\"kd\">def</span> <span class=\"n\">Bounded</span> <span class=\"o\">(</span><span class=\"n\">S</span><span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">∃</span> <span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">),</span> <span class=\"n\">S</span> <span class=\"bp\">⊆</span> <span class=\"o\">(</span><span class=\"n\">ball</span> <span class=\"n\">x</span> <span class=\"n\">r</span><span class=\"o\">)</span>\n<span class=\"kd\">def</span> <span class=\"n\">OpenCover</span> <span class=\"o\">(</span><span class=\"n\">F</span><span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"o\">(</span><span class=\"n\">Set</span> <span class=\"n\">X</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">S</span><span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">S</span> <span class=\"bp\">⊆</span> <span class=\"bp\">⋃₀</span> <span class=\"n\">F</span> <span class=\"bp\">∧</span> <span class=\"bp\">∀</span> <span class=\"n\">f</span> <span class=\"bp\">∈</span> <span class=\"n\">F</span><span class=\"o\">,</span> <span class=\"n\">Open</span> <span class=\"n\">f</span>\n<span class=\"kd\">def</span> <span class=\"n\">FiniteOpenCover</span> <span class=\"o\">(</span><span class=\"n\">F</span><span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"o\">(</span><span class=\"n\">Set</span> <span class=\"n\">X</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">S</span><span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">OpenCover</span> <span class=\"n\">F</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"n\">Set.Finite</span> <span class=\"n\">F</span>\n<span class=\"kd\">def</span> <span class=\"n\">Compact</span> <span class=\"o\">(</span><span class=\"n\">S</span><span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">∀</span> <span class=\"n\">F</span><span class=\"o\">,</span> <span class=\"n\">OpenCover</span> <span class=\"n\">F</span> <span class=\"n\">S</span> <span class=\"bp\">→</span> <span class=\"bp\">∃</span> <span class=\"n\">G</span><span class=\"o\">,</span> <span class=\"n\">G</span> <span class=\"bp\">⊆</span> <span class=\"n\">F</span> <span class=\"bp\">∧</span> <span class=\"n\">FiniteOpenCover</span> <span class=\"n\">G</span> <span class=\"n\">S</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">SeqConverges</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">∀</span> <span class=\"n\">ε</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">N</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"bp\">≥</span> <span class=\"n\">N</span><span class=\"o\">,</span> <span class=\"n\">dist</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">l</span> <span class=\"bp\">&lt;</span> <span class=\"n\">ε</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">SubConverges</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">∃</span> <span class=\"n\">φ</span> <span class=\"o\">,</span> <span class=\"n\">StrictMono</span> <span class=\"n\">φ</span> <span class=\"bp\">∧</span> <span class=\"n\">SeqConverges</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">∘</span> <span class=\"n\">φ</span><span class=\"o\">)</span> <span class=\"n\">l</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">SeqCompact</span> <span class=\"o\">(</span><span class=\"n\">S</span><span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"n\">n</span> <span class=\"bp\">∈</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">l</span> <span class=\"o\">,</span> <span class=\"n\">l</span> <span class=\"bp\">∈</span> <span class=\"n\">S</span> <span class=\"bp\">∧</span> <span class=\"n\">SubConverges</span> <span class=\"n\">x</span> <span class=\"n\">l</span><span class=\"o\">)</span>\n\n\n<span class=\"kd\">theorem</span> <span class=\"n\">SeqCompFromTopComp</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">Compact</span> <span class=\"n\">S</span><span class=\"o\">)</span>\n                <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hy</span> <span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"bp\">∈</span> <span class=\"n\">S</span><span class=\"o\">):</span> <span class=\"n\">SeqCompact</span> <span class=\"n\">S</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">SeqCompact</span>\n  <span class=\"n\">by_contra</span> <span class=\"n\">hc</span>\n  <span class=\"n\">push_neg</span> <span class=\"n\">at</span> <span class=\"n\">hc</span>\n\n  <span class=\"n\">rcases</span> <span class=\"n\">hc</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">u</span><span class=\"o\">,</span> <span class=\"n\">huS</span><span class=\"o\">,</span> <span class=\"n\">hu</span><span class=\"o\">⟩</span>\n\n  <span class=\"k\">have</span> <span class=\"n\">F1</span><span class=\"o\">:</span> <span class=\"n\">Set.Infinite</span> <span class=\"o\">(</span><span class=\"n\">range</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">by_contra</span> <span class=\"n\">hcon</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">not_infinite</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hcon</span>\n\n    <span class=\"c1\">--the set is trivially nonempty</span>\n    <span class=\"k\">have</span> <span class=\"n\">ex</span><span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">range</span> <span class=\"n\">u</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n      <span class=\"n\">specialize</span> <span class=\"n\">huS</span> <span class=\"mi\">1</span>\n      <span class=\"n\">use</span> <span class=\"n\">u</span> <span class=\"mi\">1</span>\n      <span class=\"n\">constructor</span>\n      <span class=\"bp\">·</span> <span class=\"n\">exact</span> <span class=\"n\">huS</span>\n      <span class=\"bp\">·</span> <span class=\"n\">exact</span> <span class=\"n\">mem_range_self</span> <span class=\"mi\">1</span>\n\n    <span class=\"k\">have</span> <span class=\"n\">ex2</span><span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">y</span> <span class=\"bp\">∈</span> <span class=\"n\">range</span> <span class=\"n\">u</span><span class=\"o\">,</span> <span class=\"n\">Set.Infinite</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"bp\">|</span> <span class=\"n\">u</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">y</span><span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n      <span class=\"c1\">--true because thers inf many u n terms, but only finite distinct u n per hcon</span>\n      <span class=\"n\">by_contra</span> <span class=\"n\">hcon2</span>\n      <span class=\"n\">push_neg</span> <span class=\"n\">at</span> <span class=\"n\">hcon2</span>\n      <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">mem_range</span><span class=\"o\">,</span> <span class=\"n\">not_infinite</span><span class=\"o\">,</span> <span class=\"n\">forall_exists_index</span><span class=\"o\">,</span> <span class=\"n\">forall_apply_eq_imp_iff</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hcon2</span>\n      <span class=\"c1\">--The contradiction is that hcon2 implies u n has finitely many terms</span>\n\n      <span class=\"gr\">sorry</span>\n    <span class=\"gr\">sorry</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 408602920,
        "sender_full_name": "Nelitha Kulasiri",
        "timestamp": 1702903337
    },
    {
        "content": "<p>Note that we don't know what <code>MTProject.Theorems</code> is!</p>",
        "id": 408603234,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1702903466
    },
    {
        "content": "<p>Oops that file is not neccessary</p>",
        "id": 408603431,
        "sender_full_name": "Nelitha Kulasiri",
        "timestamp": 1702903547
    },
    {
        "content": "<p>If you hover over your code block, you'll see a rectangle with an arrow pointing out of it. If you click it, the code will be loaded in the lean playground, which will show five errors that aren't related to your question</p>",
        "id": 408609831,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1702905682
    },
    {
        "content": "<p>I apologize. I removed a lot of my code for the sake of conciseness, and didn't realize it would no longer work. It should be correct now.</p>",
        "id": 408612960,
        "sender_full_name": "Nelitha Kulasiri",
        "timestamp": 1702906729
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"646236\">@Nelitha Kulasiri</span> try the following strategy:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>    <span class=\"k\">have</span> <span class=\"n\">ex2</span><span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">y</span> <span class=\"bp\">∈</span> <span class=\"n\">range</span> <span class=\"n\">u</span><span class=\"o\">,</span> <span class=\"n\">Set.Infinite</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"bp\">|</span> <span class=\"n\">u</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">y</span><span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n      <span class=\"c1\">--true because thers inf many u n terms, but only finite distinct u n per hcon</span>\n      <span class=\"n\">by_contra</span> <span class=\"n\">hcon2</span>\n      <span class=\"n\">push_neg</span> <span class=\"n\">at</span> <span class=\"n\">hcon2</span>\n      <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">mem_range</span><span class=\"o\">,</span> <span class=\"n\">not_infinite</span><span class=\"o\">,</span> <span class=\"n\">forall_exists_index</span><span class=\"o\">,</span> <span class=\"n\">forall_apply_eq_imp_iff</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hcon2</span>\n      <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">univ</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">⋃</span> <span class=\"n\">y</span> <span class=\"bp\">∈</span> <span class=\"n\">range</span> <span class=\"n\">u</span><span class=\"o\">,</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"bp\">|</span> <span class=\"n\">u</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">y</span><span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n        <span class=\"gr\">sorry</span>\n      <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">univ</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">Finite</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n        <span class=\"c1\">-- use Finite.biUnion</span>\n        <span class=\"gr\">sorry</span>\n      <span class=\"n\">exact</span> <span class=\"n\">infinite_univ</span> <span class=\"n\">this</span>\n</code></pre></div>",
        "id": 408625245,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1702910522
    },
    {
        "content": "<p>The key is really the statement <code>(univ : Set ℕ) = ⋃ y ∈ range u, {n | u n = y}</code>.</p>",
        "id": 408625406,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1702910562
    },
    {
        "content": "<p>Thank you Dr. Massot! I was able to complete this part of the proof from here.</p>",
        "id": 408642607,
        "sender_full_name": "Nelitha Kulasiri",
        "timestamp": 1702915847
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"646236\">Nelitha Kulasiri</span> has marked this topic as resolved.</p>",
        "id": 409135837,
        "sender_full_name": "Notification Bot",
        "timestamp": 1703066534
    }
]