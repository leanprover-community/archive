[
    {
        "content": "<p>New to lean4. I'm looking to get my feet wet by implementing the content of <a href=\"https://link.springer.com/book/10.1007/978-1-4471-0009-6\">https://link.springer.com/book/10.1007/978-1-4471-0009-6</a>.</p>\n<p>I'm trying to figure out what foundational \"API\" I should use; as far as I've gotten through the text, the material has been tacitly framed in terms of sets, but I'm wondering whether I should try to frame everything in terms of types, since there seems to be more native \"facilities\" for speaking that language in lean4. Any tips on how to proceed?</p>\n<p>I've been playing around with <code>Mathlib.Init.Set</code> and the facilities that it offers for coercing sets into types, but from my initial experiments it seems like maybe this doesn't completely translate the idioms between the two frameworks,  which is reasonable, but I can't tell what might be missing, and whether this translation is going to be introducing an overhead into all of my constructions. Or maybe I'm missing something, and this is a moot point? Please advise.</p>\n<p>I should note that I am familiar with lean's modelling of sets as elements of a type which satisfy a proposition. I'm not sure if I'm leveraging that model effectively, though.</p>",
        "id": 403307481,
        "sender_full_name": "N Gelwan",
        "timestamp": 1700545631
    },
    {
        "content": "<p>For example; representing a structure with an operation which is framed in the book as taking elements of one set to subsets of another.</p>\n<p>I could write that as a typeclass in two ways:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Init.Set</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">Domainable</span><span class=\"bp\">\\</span><span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"bp\">\\</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">\\</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">domain</span> <span class=\"o\">:</span> <span class=\"bp\">\\</span><span class=\"n\">a</span> <span class=\"bp\">\\</span><span class=\"n\">r</span> <span class=\"n\">Set</span> <span class=\"bp\">\\</span><span class=\"n\">b</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">Domainable</span><span class=\"bp\">\\</span><span class=\"mi\">2</span> <span class=\"o\">(</span><span class=\"bp\">\\</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"bp\">\\</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"bp\">\\</span><span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">domain</span><span class=\"o\">:</span> <span class=\"bp\">\\</span><span class=\"n\">a</span> <span class=\"bp\">\\</span><span class=\"n\">r</span> <span class=\"bp\">\\</span><span class=\"n\">powerset</span> <span class=\"n\">s</span>\n</code></pre></div>\n<p>Is there any reason why I'd do the latter? It seems verbose.</p>",
        "id": 403308167,
        "sender_full_name": "N Gelwan",
        "timestamp": 1700546094
    },
    {
        "content": "<p>As a first thing, as explained in <a href=\"https://github.com/leanprover-community/mathlib/wiki/Code-in-backticks\">#backticks</a> if you add “lean” after the backticks you’ll get lean syntax highlighting for the code and the ability to open it on the lean web editor.  Beyond that, I’m not an expert, but the latter doesn’t seem right. I doubt it would type check: the codomain of your second function is not a type, (which it should be) but rather a term of type <code>Set (Set β)</code>, and even if it were well typed it would not be the same as the one above unless you took s to be <code>univ</code>.</p>\n<p>And to answer your question I think (?) the first is what you want.</p>",
        "id": 403366279,
        "sender_full_name": "Luigi Massacci",
        "timestamp": 1700568123
    },
    {
        "content": "<p>The first one is more general in a sense -- you can always pass in a set as the second argument to Dominable\\1, but the second requires a set (so you need to pass in <code>Set.univ</code> to recover something equivalent to the first definition).</p>",
        "id": 403416620,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1700583073
    },
    {
        "content": "<p>(<span class=\"user-mention\" data-user-id=\"466290\">@Luigi Massacci</span> The <code>Set</code> type has a coercion to Type using <code>Subtype</code>, so the codomain <code>\\powerset s</code> is ends up being interpreted as something that's defeq to <code>{x // x \\in \\powerset s}</code>. The actual term has <code>Set.Elem</code> wrapped around it, but that's an identity function, and it's used for pretty printing and some other automation.)</p>",
        "id": 403417232,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1700583263
    },
    {
        "content": "<p>Ahh I see, learned something new today. Sorry <span class=\"user-mention\" data-user-id=\"665242\">@N Gelwan</span>  for the fake news</p>",
        "id": 403420726,
        "sender_full_name": "Luigi Massacci",
        "timestamp": 1700584332
    }
]