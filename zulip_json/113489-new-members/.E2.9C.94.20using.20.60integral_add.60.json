[
    {
        "content": "<p>The following gives an error <code>unknown identifier 'integral_add'</code> (in <code>live.lean-lang.org </code>it also gives  a bunch of </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"kd\">instance</span>\n  <span class=\"n\">MeasureTheory.MeasureSpace</span> <span class=\"n\">ℝ</span>\n</code></pre></div>\n<p>but I don't get that locally, no idea why).</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.MeasureTheory.Integral.Bochner</span> <span class=\"c1\">--this file defines `integral_add`</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Real.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Complex.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Complex.Exponential</span>\n<span class=\"kn\">open</span> <span class=\"n\">Complex</span>\n<span class=\"kn\">open</span> <span class=\"n\">Real</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span> <span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∫</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"bp\">*</span> <span class=\"n\">I</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">Complex.cos</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"bp\">*</span> <span class=\"bp\">↑</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"bp\">*</span> <span class=\"n\">I</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">Complex.sin</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"bp\">*</span> <span class=\"bp\">↑</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">I</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">∫</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"bp\">*</span> <span class=\"n\">I</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">Complex.cos</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"bp\">*</span> <span class=\"bp\">↑</span><span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"bp\">+</span> <span class=\"bp\">∫</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"bp\">*</span> <span class=\"n\">I</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">Complex.sin</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"bp\">*</span> <span class=\"bp\">↑</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">I</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">integral_add</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>How do I use this theorem?</p>",
        "id": 402132373,
        "sender_full_name": "Nicholas Wilson",
        "timestamp": 1700020518
    },
    {
        "content": "<p>In your other thread I had to add an import for <code>Mathlib.MeasureTheory.Measure.Haar.OfBasis</code> to get that measure space instance. Maybe you have an older version of mathlib locally, so things are different?</p>",
        "id": 402133378,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1700020784
    },
    {
        "content": "<p>Maybe that is because of some other imports that I have that leak that into the list of \"open\" modules.</p>",
        "id": 402134456,
        "sender_full_name": "Nicholas Wilson",
        "timestamp": 1700021012
    },
    {
        "content": "<p>probably <code>import Mathlib.Analysis.MellinTransform</code> is responsible for that.</p>",
        "id": 402134638,
        "sender_full_name": "Nicholas Wilson",
        "timestamp": 1700021048
    },
    {
        "content": "<p>importing <code>Mathlib.MeasureTheory.Measure.Haar.OfBasis</code> did resolve the failures to synthesise.</p>",
        "id": 402144303,
        "sender_full_name": "Nicholas Wilson",
        "timestamp": 1700025139
    },
    {
        "content": "<p>I just searched the mathlib docs for \"<code>integral_add</code>\" and found <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=MeasureTheory.integral_add#doc\">docs#MeasureTheory.integral_add</a> so, if that's it, you can either use its full name or put <code>open MeasureTheory</code></p>",
        "id": 402145001,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1700025503
    },
    {
        "content": "<p>Ahh, thank you!</p>",
        "id": 402156087,
        "sender_full_name": "Nicholas Wilson",
        "timestamp": 1700030428
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"663331\">Nicholas Wilson</span> has marked this topic as resolved.</p>",
        "id": 402158446,
        "sender_full_name": "Notification Bot",
        "timestamp": 1700031417
    }
]