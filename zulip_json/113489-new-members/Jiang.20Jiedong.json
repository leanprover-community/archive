[
    {
        "content": "<p>Hi everyone,<br>\nI am new to Lean and just finished the tutorial project in Lean 3. I feel very excited about idea of formalizing mathematics and want to make some my own contribution to mathlib. I am a phd student in Peking University studying arithmetic geometry, especially p-adic Hodge theory. And I think that through liquid tensor experiment, many definitions and theorems in this field have already been formalized in Lean.<br>\nSo here are some my questions about what I can do and what I need to do:</p>\n<ol>\n<li>Before I really contribute to mathlib, what else preparations should I do? Maybe I should get used to lean4 instead of lean3 by writing something? Or should I first read some code already exists? Is there any exercise projects in Lean4?</li>\n<li>In order to make contribution to mathlib, who should I contact or is there some general guideline? Is there some team I can join?</li>\n<li>Which part of mathematics can I formalize in mathlib? I don't know how much p-adic Hodge theory has already been formalized and what is left. And as I haven't find the result of liquid tensor experiment appears in the mathlib overview (maybe I missed something?), I wonder if more preparations (probably in commutative algebra and algebraic geometry) should be made before more modern mathematics can be finally convert  into mathlib in an systematic and well-organized way?  So if I want to make contributions, should I do commutative algebra and algebraic geometry first or can I directly dive into some  more advanced p-adic Hodge theory?<br>\nThanks for any help! Wanna to see more goal accomplished  <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span> in Lean :)</li>\n</ol>",
        "id": 354367144,
        "sender_full_name": "Jiang Jiedong",
        "timestamp": 1682772345
    },
    {
        "content": "<p>Hi! You have arrived at a slightly funny time -- a few months ago the answer would be \"use lean 3\", in a few months' time the answer will be \"use lean 4\", and right now the answer is \"it's all a bit confusing\". Added to this is the issue that our construction of B_{HT} is not yet in mathlib3, even though people are working on B_{dR} and B_{cris}. My instinct is that after that we should be able to start working on the proof that these rings are admissible, so e.g. we can prove <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mrow><mi>dim</mi><mo>⁡</mo></mrow><mi>K</mi></msub><mo stretchy=\"false\">(</mo><mi>D</mi><mo stretchy=\"false\">(</mo><mi>V</mi><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo><mo>&lt;</mo><mo>=</mo><msub><mrow><mi>dim</mi><mo>⁡</mo></mrow><msub><mi mathvariant=\"double-struck\">Q</mi><mi>p</mi></msub></msub><mo stretchy=\"false\">(</mo><mi>V</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\dim_K(D(V)) &lt;= \\dim_{\\mathbb{Q}_p}(V)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mop\"><span class=\"mop\">dim</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3283em;\"><span style=\"top:-2.55em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.07153em;\">K</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">D</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">V</span><span class=\"mclose\">))</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">&lt;=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.0973em;vertical-align:-0.3473em;\"></span><span class=\"mop\"><span class=\"mop\">dim</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3322em;\"><span style=\"top:-2.55em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathbb mtight\">Q</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1645em;\"><span style=\"top:-2.357em;margin-left:0em;margin-right:0.0714em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mathnormal mtight\">p</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2819em;\"><span></span></span></span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3473em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">V</span><span class=\"mclose\">)</span></span></span></span> for various of the Fontaine functors. If you wanted a nice project which is probably accessible you could try defining admissibility (I learnt about this concept from periodes p-adiques but perhaps there are newer references nowadays) and showing the inequality -- probably best to start in Lean 3. Getting the definition right will be the first step, I can't even remember what it is and my copy of periodes p-adiques is at work :-/</p>\n<p>The best way to learn Lean is simply by working on a project. So choose something and go for it :-)</p>",
        "id": 354369464,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1682772687
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"611077\">@Jiang Jiedong</span> Welcome! One clarification: the liquid tensor experiment is in a separate project <a href=\"https://github.com/leanprover-community/lean-liquid\">https://github.com/leanprover-community/lean-liquid</a> that builds on top of mathlib. A lot of the general material has been moving back into mathlib, but there's also lots of general theory that is only in the LTE repo. It has to be cleaned up before it would be ready to go into mathlib.</p>\n<p>But then we started porting to mathlib 4, and so in the past 6 months we haven't worked much on contributing new category theory, homological algebra, etc into mathlib. In a couple of months, this should all start moving again.</p>",
        "id": 354377908,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1682773936
    },
    {
        "content": "<p>As Kevin mentioned above, the period rings are also in a separate project. We do have Witt vectors in mathlib.</p>",
        "id": 354378080,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1682773969
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"406490\">@María Inés de Frutos Fernández</span> are you able to formulate precisely in Lean the construction in the theory of Witt vectors which you are missing, in order to get <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>B</mi><mrow><mi>d</mi><mi>R</mi></mrow></msub></mrow><annotation encoding=\"application/x-tex\">B_{dR}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3361em;\"><span style=\"top:-2.55em;margin-left:-0.0502em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">d</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.00773em;\">R</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> or <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>B</mi><mrow><mi>d</mi><mi>R</mi></mrow></msub><mo stretchy=\"false\">(</mo><msub><mi mathvariant=\"double-struck\">Q</mi><mi>p</mi></msub><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">B_{dR}(\\mathbb{Q}_p)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0361em;vertical-align:-0.2861em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3361em;\"><span style=\"top:-2.55em;margin-left:-0.0502em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">d</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.00773em;\">R</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathbb\">Q</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">p</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2861em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span> from what you have? Can you precisely state the API you need? Or are you working on this yourself and maybe have another idea?</p>",
        "id": 354468318,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1682787316
    },
    {
        "content": "<p>Could this be something <span class=\"user-mention\" data-user-id=\"611077\">@Jiang Jiedong</span> could work on?</p>",
        "id": 354468499,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1682787343
    },
    {
        "content": "<p>The construction of the isomorphism <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>W</mi><mo stretchy=\"false\">(</mo><msub><mi mathvariant=\"double-struck\">F</mi><mi>p</mi></msub><mo stretchy=\"false\">)</mo><mo>→</mo><msub><mi mathvariant=\"double-struck\">Z</mi><mi>p</mi></msub></mrow><annotation encoding=\"application/x-tex\">W(\\mathbb{F}_p)\\to\\mathbb{Z}_p</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0361em;vertical-align:-0.2861em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">W</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathbb\">F</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">p</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2861em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.975em;vertical-align:-0.2861em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">Z</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">p</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2861em;\"><span></span></span></span></span></span></span></span></span></span> is here <a href=\"https://leanprover-community.github.io/mathlib_docs/find/witt_vector.equiv\">docs#witt_vector.equiv</a> in mathlib3; that's an example of how to work with Witt vectors.</p>",
        "id": 354470404,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1682787672
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"611077\">Jiang Jiedong</span> <a href=\"#narrow/stream/113489-new-members/topic/Jiang.20Jiedong/near/354367144\">said</a>:</p>\n<blockquote>\n<ol>\n<li>Before I really contribute to mathlib, what else preparations should I do? Maybe I should get used to lean4 instead of lean3 by writing something? Or should I first read some code already exists? Is there any exercise projects in Lean4?</li>\n</ol>\n</blockquote>\n<p>If I may add something to this, is it difficult to pivot to Lean 4 once you know Lean 3? Would porting stuff from mathlib to mathlib4 be a suggested exercise for newcomers?</p>",
        "id": 354495332,
        "sender_full_name": "Giovanni Mascellani",
        "timestamp": 1682792224
    },
    {
        "content": "<p>I think the transition should be pretty smooth</p>",
        "id": 354495754,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1682792301
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/Jiang.20Jiedong/near/354468499\">said</a>:</p>\n<blockquote>\n<p>Could this be something <span class=\"user-mention silent\" data-user-id=\"611077\">Jiang Jiedong</span> could work on?</p>\n</blockquote>\n<p>I think its a pretty good start at admissibility and basic properties of period rings such as $ \\mathbb{B}_{dr}$ and $\\mathbb{B}_{cris}$. I think maybe first write in lean3 then try to convert it in lean4 is good exercise for me.</p>",
        "id": 354502180,
        "sender_full_name": "Jiang Jiedong",
        "timestamp": 1682793512
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 354505347,
        "sender_full_name": "Jiang Jiedong",
        "timestamp": 1682794121
    }
]