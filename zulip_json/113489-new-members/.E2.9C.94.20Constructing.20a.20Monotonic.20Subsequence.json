[
    {
        "content": "<p>Hello! I am currently working on a project where I want to prove that a sequence with no convergent subsequence has infinitely distinct elements. I am trying to prove this by contradiction, and I have the following ('a' is in metric space X):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">a</span><span class=\"o\">:</span> <span class=\"n\">X</span>\n<span class=\"n\">haS</span><span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">range</span> <span class=\"n\">u</span>\n<span class=\"n\">hau</span><span class=\"o\">:</span> <span class=\"n\">Set.Infinite</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"bp\">|</span> <span class=\"n\">u</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"o\">}</span>\n</code></pre></div>\n<p>and I want to show 'SubConverges u a' givien the following definitions:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">SeqConverges</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">∀</span> <span class=\"n\">ε</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">N</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"bp\">≥</span> <span class=\"n\">N</span><span class=\"o\">,</span> <span class=\"n\">dist</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">l</span> <span class=\"bp\">&lt;</span> <span class=\"n\">ε</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">SubConverges</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">∃</span> <span class=\"n\">φ</span> <span class=\"o\">,</span> <span class=\"n\">StrictMono</span> <span class=\"n\">φ</span> <span class=\"bp\">∧</span> <span class=\"n\">SeqConverges</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">∘</span> <span class=\"n\">φ</span><span class=\"o\">)</span> <span class=\"n\">l</span>\n</code></pre></div>\n<p>I know that I'll need to map naturals to elements in the set {n | u n = a}, but I am not sure how to specify that it is monotonic. Any advice would be appreciated, thank you!</p>",
        "id": 408403549,
        "sender_full_name": "Nelitha Kulasiri",
        "timestamp": 1702784335
    },
    {
        "content": "<p>I think you want <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Nat.nth#doc\">docs#Nat.nth</a></p>",
        "id": 408404335,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1702785025
    },
    {
        "content": "<p>with <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Nat.nth_strictMono#doc\">docs#Nat.nth_strictMono</a></p>",
        "id": 408404356,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1702785049
    },
    {
        "content": "<p>Thank you very much, this is exactly what I was looking for!</p>",
        "id": 408406275,
        "sender_full_name": "Nelitha Kulasiri",
        "timestamp": 1702786733
    },
    {
        "content": "<p>I now have the subsequence <code>(u ∘ M) n</code> given by</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">let</span> <span class=\"n\">P</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">n</span> <span class=\"bp\">↦</span> <span class=\"n\">u</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">a</span>\n <span class=\"k\">let</span> <span class=\"n\">M</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">n</span> <span class=\"bp\">↦</span> <span class=\"n\">nth</span> <span class=\"o\">(</span><span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>If I want to show that (u ∘ M) n = a, how might I go about doing that? Thank you!</p>",
        "id": 408550111,
        "sender_full_name": "Nelitha Kulasiri",
        "timestamp": 1702884578
    },
    {
        "content": "<p>You should use <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Nat.nth_mem_of_lt_card#doc\">docs#Nat.nth_mem_of_lt_card</a></p>",
        "id": 408550821,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1702884862
    },
    {
        "content": "<p>Assuming I'm understanding it correctly, that theorem requires hf : Set.Finite (setOf p)). But I don't have that per assumption 'hau' above, right?</p>",
        "id": 408554490,
        "sender_full_name": "Nelitha Kulasiri",
        "timestamp": 1702886254
    },
    {
        "content": "<p>As in the other thread, you will get a lot more help if you post a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> so that people can paste it into an empty Lean file and play with it.</p>",
        "id": 408626008,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1702910746
    },
    {
        "content": "<p>You want <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Nat.nth_mem_of_infinite#doc\">docs#Nat.nth_mem_of_infinite</a></p>",
        "id": 408638699,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1702914674
    },
    {
        "content": "<p>If you post an <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> as Patrick mentioned, we can show you how you might figure this out yourself. Not that I mind helping you, but rather it will make your life easier if you learn these techniques.</p>",
        "id": 408638978,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1702914773
    },
    {
        "content": "<p>Thank you! I was able to solve it using nth_mem_of_infite, but in the future I will post my questions in the form of an <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a></p>",
        "id": 408938330,
        "sender_full_name": "Nelitha Kulasiri",
        "timestamp": 1702994003
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"646236\">Nelitha Kulasiri</span> has marked this topic as resolved.</p>",
        "id": 409135711,
        "sender_full_name": "Notification Bot",
        "timestamp": 1703066519
    }
]