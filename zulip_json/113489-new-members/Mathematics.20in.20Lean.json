[
    {
        "content": "<p>I'm trying to work through Mathematics in Lean, but I'm encountering errors in... the standard library? I'm getting</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">./.</span><span class=\"n\">lake</span><span class=\"bp\">/</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">mathlib</span><span class=\"bp\">/././</span><span class=\"n\">Mathlib</span><span class=\"bp\">/</span><span class=\"n\">Tactic</span><span class=\"bp\">/</span><span class=\"n\">Clean.lean</span><span class=\"o\">:</span><span class=\"mi\">32</span><span class=\"o\">:</span><span class=\"mi\">12</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">unknown</span> <span class=\"n\">identifier</span> <span class=\"bp\">'</span><span class=\"n\">letFunAnnotation</span><span class=\"bp\">?'</span>\n</code></pre></div>\n<p>Do I have an old standard library? Too _new_ a standard library?</p>",
        "id": 408996121,
        "sender_full_name": "Patrick Steele",
        "timestamp": 1703011625
    },
    {
        "content": "<p>This should never be an issue. How did you get Mathematics in Lean? What did you do exactly?</p>",
        "id": 408999626,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1703012966
    },
    {
        "content": "<p>That looks like you have the nightly Lean version somehow, rather than the one Mathematics in Lean wants.</p>",
        "id": 409002987,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1703014256
    },
    {
        "content": "<blockquote>\n<p>nightly</p>\n</blockquote>\n<p>Yes, I built from source. I'm currently rebuilding from <code>v4.4.0-rc1</code>.</p>",
        "id": 409004179,
        "sender_full_name": "Patrick Steele",
        "timestamp": 1703014781
    },
    {
        "content": "<p>Building (lean?) from source is going to be a very unpleasant and long experience, as you almost certainly won't be able to/want to use <code>lake exe cache get</code></p>",
        "id": 409004340,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1703014852
    },
    {
        "content": "<p>I got \"Mathematics in Lean\" by cloning <a href=\"https://github.com/leanprover-community/mathematics_in_lean\">https://github.com/leanprover-community/mathematics_in_lean</a>, and <code>lean</code> itself (and <code>lake</code>, etc) by building from source. I'm somewhat willing to pay the pain of building it.</p>",
        "id": 409004560,
        "sender_full_name": "Patrick Steele",
        "timestamp": 1703014944
    },
    {
        "content": "<p>that said, I don't even know what <code>lake exe cache get</code> does, aside from making assumptions based on the words</p>",
        "id": 409004638,
        "sender_full_name": "Patrick Steele",
        "timestamp": 1703014969
    },
    {
        "content": "<p>You should have prefaced your question with your masochistic assertion.</p>",
        "id": 409004733,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1703015011
    },
    {
        "content": "<p>I wasted time cloning the current version of Mathematics in Lean and getting the cache because you didn't say from the beginning that you chose to ignore instructions and \"pay the pain\".</p>",
        "id": 409004918,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1703015075
    },
    {
        "content": "<p>I'm sorry about that.</p>",
        "id": 409004989,
        "sender_full_name": "Patrick Steele",
        "timestamp": 1703015108
    },
    {
        "content": "<p>Anyway, the answer to your question is: this way of using Lean isn't supported, I'm afraid you will have to solve your issue by yourself or follow installation instructions.</p>",
        "id": 409005232,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1703015212
    },
    {
        "content": "<p>Sounds good.</p>",
        "id": 409005280,
        "sender_full_name": "Patrick Steele",
        "timestamp": 1703015245
    },
    {
        "content": "<p>Thanks</p>",
        "id": 409005319,
        "sender_full_name": "Patrick Steele",
        "timestamp": 1703015271
    },
    {
        "content": "<p>Once you have a working MIL and have gone through it, feel free to compile Lean then (and only then) if you are interested in developing Lean itself. Generally, nobody builds Lean from source for downstream projects. Even I use pre-built binaries for Mathlib development rather than building my own, even though I have my own local builds of Lean for Lean development.</p>",
        "id": 409005320,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1703015271
    },
    {
        "content": "<p>There are some times that pain worth paying for, but I'd say this isn't one of those times :-)</p>",
        "id": 409005458,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1703015317
    },
    {
        "content": "<p>I expected my original question to be on the same level as a Python learner asking about <code>print</code> needing or not needing parenthesis, which is why I asked. That is, something simple like \"specify a different stdlib version.\"</p>",
        "id": 409005948,
        "sender_full_name": "Patrick Steele",
        "timestamp": 1703015491
    },
    {
        "content": "<p>The good news is that the build just finished, and I now see goals and givens, as opposed to errors</p>",
        "id": 409006008,
        "sender_full_name": "Patrick Steele",
        "timestamp": 1703015518
    },
    {
        "content": "<p>If you want to know the details, the problem is that your Lean was so new that there isn't even an updated mathlib yet. When the next Lean release is made, mathlib will be updated to account for the following change, among others. <a href=\"#narrow/stream/116290-rss/topic/Recent.20Commits.20to.20lean4.3Amaster/near/408573423\">https://leanprover.zulipchat.com/#narrow/stream/116290-rss/topic/Recent.20Commits.20to.20lean4.3Amaster/near/408573423</a></p>",
        "id": 409007166,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1703016014
    },
    {
        "content": "<p>When you come across a Lean project, pay special attention to the <code>lean-toolchain</code> file: <a href=\"https://github.com/leanprover-community/mathematics_in_lean/blob/master/lean-toolchain\">https://github.com/leanprover-community/mathematics_in_lean/blob/master/lean-toolchain</a></p>",
        "id": 409007382,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1703016091
    },
    {
        "content": "<p>Yes, that makes sense. I'd not entirely internalized that <code>lean</code> didn't ship with (what I've been calling) a standard library.</p>",
        "id": 409007385,
        "sender_full_name": "Patrick Steele",
        "timestamp": 1703016092
    },
    {
        "content": "<p>(Patrick is one of the authors of Mathematics in Lean by the way, so I don't need to reiterate that it's also worth paying special attention to instructions, to at least make sure that following the instructions works before trying a custom setup.)</p>",
        "id": 409007833,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1703016219
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"675231\">Patrick Steele</span> <a href=\"#narrow/stream/113489-new-members/topic/Mathematics.20in.20Lean/near/409004638\">said</a>:</p>\n<blockquote>\n<p>that said, I don't even know what <code>lake exe cache get</code> does, aside from making assumptions based on the words</p>\n</blockquote>\n<p>It downloads pre-built \"binaries\" for the mathlib library, to save users a few hours of compilation every time mathlib updates</p>",
        "id": 409007994,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1703016258
    },
    {
        "content": "<p>(In far more detail than anyone cares about, I use Nix, and the lean4 Github repo had a <code>flake.nix</code> file, so I did what seemed natural and just pointed <code>nix</code> at it. That seemed to work fine, giving me <code>lean</code> and <code>lake</code> and so on.)</p>",
        "id": 409008046,
        "sender_full_name": "Patrick Steele",
        "timestamp": 1703016275
    },
    {
        "content": "<p>(pinning that to a tagged release was how I made progress.)</p>",
        "id": 409008147,
        "sender_full_name": "Patrick Steele",
        "timestamp": 1703016310
    },
    {
        "content": "<p>But the binaries are cached based on the exact version of Lean you built, so if you build things from source it's very easy to get a cache miss</p>",
        "id": 409008149,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1703016311
    },
    {
        "content": "<p>Yes, this all makes sense. Thanks everyone, and sorry for derailing you all.</p>",
        "id": 409008238,
        "sender_full_name": "Patrick Steele",
        "timestamp": 1703016342
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"675231\">Patrick Steele</span> <a href=\"#narrow/stream/113489-new-members/topic/Mathematics.20in.20Lean/near/409004560\">said</a>:</p>\n<blockquote>\n<p>I got \"Mathematics in Lean\" by cloning <a href=\"https://github.com/leanprover-community/mathematics_in_lean\">https://github.com/leanprover-community/mathematics_in_lean</a>, and <code>lean</code> itself (and <code>lake</code>, etc) by building from source. I'm somewhat willing to pay the pain of building it.</p>\n</blockquote>\n<p>Note that Lake will ignore your wishes and download pre-built binaries for <code>ProofWidgets</code> rather than building them from source, so it will be challenging to achieve your goal of \"build <em>everything</em> from source\"</p>",
        "id": 409008432,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1703016404
    },
    {
        "content": "<p>(and even for Std and Mathlib, it will download a fresh copy of the source rather than using your copy of the source)</p>",
        "id": 409008495,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1703016428
    },
    {
        "content": "<p>Noted, thanks.</p>",
        "id": 409008714,
        "sender_full_name": "Patrick Steele",
        "timestamp": 1703016522
    }
]