[
    {
        "content": "<p>Why is my attempt at a <code>has_add</code> instance below failing?  The error message at <code>has_add</code> is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">type</span> <span class=\"n\">mismatch</span> <span class=\"n\">at</span> <span class=\"n\">application</span>\n  <span class=\"n\">has_add</span> <span class=\"n\">f.corge</span>\n<span class=\"n\">term</span>\n  <span class=\"n\">f.corge</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">baz</span> <span class=\"n\">P</span> <span class=\"n\">L</span> <span class=\"n\">f</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"kt\">Type</span> <span class=\"bp\">?</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"bp\">?+</span><span class=\"mi\">1</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>MWE attempt:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">universe</span> <span class=\"n\">u</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">P</span> <span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"n\">L</span><span class=\"o\">)</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"n\">L</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">points</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">foo</span>\n<span class=\"bp\">|</span> <span class=\"n\">lines</span>  <span class=\"o\">(</span><span class=\"n\">l</span><span class=\"o\">:</span> <span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">foo</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">foo</span>\n<span class=\"kd\">def</span> <span class=\"n\">bar</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">foo</span> <span class=\"n\">P</span> <span class=\"n\">L</span><span class=\"o\">),</span> <span class=\"n\">foo</span> <span class=\"n\">P</span> <span class=\"n\">L</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">points</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">lines</span> <span class=\"n\">l</span><span class=\"o\">)</span>  <span class=\"o\">:=</span>  <span class=\"gr\">sorry</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">points</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">points</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">lines</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">lines</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">lines</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">points</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">baz</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">foo</span> <span class=\"n\">P</span> <span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">P</span><span class=\"o\">)</span>\n\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">P</span> <span class=\"n\">L</span><span class=\"o\">}</span>\n<span class=\"kd\">def</span> <span class=\"n\">corge</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">foo</span> <span class=\"n\">P</span> <span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">my_baz</span> <span class=\"o\">:</span> <span class=\"n\">baz</span> <span class=\"n\">P</span> <span class=\"n\">L</span> <span class=\"n\">f</span><span class=\"o\">):</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"bp\">//</span> <span class=\"n\">bar</span> <span class=\"n\">P</span> <span class=\"n\">L</span> <span class=\"o\">(</span><span class=\"n\">points</span> <span class=\"n\">x</span><span class=\"o\">)</span>  <span class=\"o\">(</span><span class=\"n\">points</span> <span class=\"n\">my_baz.a</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">bar</span> <span class=\"n\">P</span> <span class=\"n\">L</span> <span class=\"o\">(</span><span class=\"n\">points</span> <span class=\"n\">my_baz.a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">points</span> <span class=\"n\">my_baz.b</span><span class=\"o\">)</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">foo_baz_corge_add</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">foo</span> <span class=\"n\">P</span> <span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">my_baz</span><span class=\"o\">:</span> <span class=\"n\">baz</span> <span class=\"n\">P</span> <span class=\"n\">L</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">has_add</span> <span class=\"o\">(</span><span class=\"n\">f.corge</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n\n<span class=\"kd\">end</span> <span class=\"n\">foo</span>\n</code></pre></div>",
        "id": 347899360,
        "sender_full_name": "Quinn Culver",
        "timestamp": 1680974588
    },
    {
        "content": "<p>Because <code>has_add X</code> needs X to be a type, and as the error says, <code>f.corge</code> is a function which takes a term of <code>baz …</code> and returns a type.</p>",
        "id": 347899855,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1680974903
    },
    {
        "content": "<p>You probably want <code>has_add (f.forge my_baz)</code> (untested)</p>",
        "id": 347899923,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1680974975
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"245476\">@Quinn Culver</span>, this seems to be tripping you up over and over again. If you're unsure how to build an expression without errors, you can use <code>#check</code> to slowly assemble it piece by piece to see what's going on.</p>",
        "id": 347908850,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1680980727
    },
    {
        "content": "<p>Here, that looks like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">foo</span> <span class=\"n\">P</span> <span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">my_baz</span><span class=\"o\">:</span> <span class=\"n\">baz</span> <span class=\"n\">P</span> <span class=\"n\">L</span> <span class=\"n\">f</span><span class=\"o\">)</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">f.corge</span> <span class=\"c1\">-- reading the type suggests we meant...</span>\n<span class=\"k\">#check</span> <span class=\"n\">f.corge</span> <span class=\"n\">my_baz</span>\n</code></pre></div>",
        "id": 347909002,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1680980823
    }
]