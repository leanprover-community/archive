[
    {
        "content": "<p>I'm currently solving Advent of Code in Lean (but just programming, no proving) and it would be helpful to have a <code>Common</code> file with parsing helpers etc.</p>\n<p>So I have <code>Common.Lean</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">namespace</span> <span class=\"n\">Common</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">String.parseNatList</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span>\n  <span class=\"o\">((</span><span class=\"n\">s.trim.splitOn</span> <span class=\"s2\">\" \"</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">String.toNat</span><span class=\"bp\">?</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">filterMap</span> <span class=\"n\">id</span>\n</code></pre></div>\n<p>How do I access this in <code>Day05.lean</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">AdventOfCode.Common</span>\n<span class=\"kn\">open</span> <span class=\"n\">Common</span> <span class=\"o\">(</span><span class=\"n\">String.parseNatList</span><span class=\"o\">)</span>\n\n<span class=\"c1\">-- these work:</span>\n<span class=\"k\">#check</span> <span class=\"n\">String.parseNatList</span>\n<span class=\"k\">#eval</span> <span class=\"n\">String.parseNatList</span> <span class=\"s2\">\"\"</span>\n\n<span class=\"c1\">-- these fail:</span>\n<span class=\"k\">#eval</span> <span class=\"s2\">\"\"</span><span class=\"bp\">.</span><span class=\"n\">parseNatList</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">readSeeds</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span>\n  <span class=\"o\">((</span><span class=\"n\">s.splitOn</span> <span class=\"s2\">\":\"</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">get</span><span class=\"bp\">!</span> <span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">parseNatList</span>\n<span class=\"c1\">-- invalid field 'parseNatList', the environment does not contain 'String.parseNatList'</span>\n</code></pre></div>\n<p>How do I import it correctly?</p>",
        "id": 406170432,
        "sender_full_name": "Philipp",
        "timestamp": 1701815534
    },
    {
        "content": "<p>It looks like you don't have an <code>end Common</code> at the end of your <code>Common.lean</code> file?</p>",
        "id": 406173478,
        "sender_full_name": "Martin C. Martin",
        "timestamp": 1701817123
    },
    {
        "content": "<p>Also: great that you're doing Advent of Code!  I'm doing it too, but in Python, not Lean.</p>",
        "id": 406173523,
        "sender_full_name": "Martin C. Martin",
        "timestamp": 1701817150
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"348963\">Martin C. Martin</span> <a href=\"#narrow/stream/113489-new-members/topic/Structuring.20Code.20.2F.20importing.20Modules/near/406173478\">said</a>:</p>\n<blockquote>\n<p>It looks like you don't have an <code>end Common</code> at the end of your <code>Common.lean</code> file?</p>\n</blockquote>\n<p>That's fine, in Lean 4 it's optional</p>",
        "id": 406173848,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1701817270
    },
    {
        "content": "<p>Just remove <code>namespace Common</code> in your <code>Common.lean</code>. This is causing your function to be <code>Common.String.parseNatList</code></p>",
        "id": 406173932,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1701817302
    },
    {
        "content": "<p>Unlike Python or Java, modules and namespaces are orthogonal concepts for organizing code in Lean. You don't need to have a module to have the same namespace.</p>",
        "id": 406174098,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1701817351
    },
    {
        "content": "<p>I'll say that it's interesting that <code>open Common (String.parseNatList)</code> doesn't enable dot notation. I'm not sure if that's a bug or intentional...</p>",
        "id": 406174281,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1701817407
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"638732\">@Philipp</span> Thanks, I went ahead and reported this as an issue. <a href=\"https://github.com/leanprover/lean4/pull/3031\">lean4#3031</a></p>",
        "id": 406175824,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1701818268
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/113489-new-members/topic/Structuring.20Code.20.2F.20importing.20Modules/near/406173932\">schrieb</a>:</p>\n<blockquote>\n<p>Just remove <code>namespace Common</code> in your <code>Common.lean</code>. This is causing your function to be <code>Common.String.parseNatList</code></p>\n</blockquote>\n<p>that's what I did as a workaround :) Still looking for lean best practices - maybe I should just not use namespaces until I actually need them.</p>",
        "id": 406177232,
        "sender_full_name": "Philipp",
        "timestamp": 1701819018
    },
    {
        "content": "<p>Your suggestion might become a best practice one day, but for now we all just stick extension functions right into the namespace of the object you're extending (like <code>String</code> here)</p>",
        "id": 406178195,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1701819635
    }
]