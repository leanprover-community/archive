[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"354934\">@David Thrane Christiansen</span>, in <a href=\"https://leanprover.github.io/functional_programming_in_lean/monads/arithmetic.html#further-effects\">Functional Programming in Lean, section 5.2 on Further Effects</a> the definition of <code>evaluateM</code> doesn't quite work:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Expr</span> <span class=\"o\">(</span><span class=\"n\">op</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">const</span> <span class=\"o\">:</span> <span class=\"n\">Int</span> <span class=\"bp\">→</span> <span class=\"n\">Expr</span> <span class=\"n\">op</span>\n  <span class=\"bp\">|</span> <span class=\"n\">prim</span> <span class=\"o\">:</span> <span class=\"n\">op</span> <span class=\"bp\">→</span> <span class=\"n\">Expr</span> <span class=\"n\">op</span> <span class=\"bp\">→</span> <span class=\"n\">Expr</span> <span class=\"n\">op</span> <span class=\"bp\">→</span> <span class=\"n\">Expr</span> <span class=\"n\">op</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">Prim</span> <span class=\"o\">(</span><span class=\"n\">special</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">plus</span>\n  <span class=\"bp\">|</span> <span class=\"n\">minus</span>\n  <span class=\"bp\">|</span> <span class=\"n\">times</span>\n  <span class=\"bp\">|</span> <span class=\"n\">other</span> <span class=\"o\">:</span> <span class=\"n\">special</span> <span class=\"bp\">→</span> <span class=\"n\">Prim</span> <span class=\"n\">special</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">evaluateM</span> <span class=\"o\">[</span><span class=\"n\">Monad</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">applySpecial</span> <span class=\"o\">:</span> <span class=\"n\">special</span> <span class=\"bp\">→</span> <span class=\"n\">Int</span> <span class=\"bp\">→</span> <span class=\"n\">Int</span> <span class=\"bp\">→</span> <span class=\"n\">m</span> <span class=\"n\">Int</span><span class=\"o\">):</span> <span class=\"n\">Expr</span> <span class=\"o\">(</span><span class=\"n\">Prim</span> <span class=\"n\">special</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">m</span> <span class=\"n\">Int</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Expr.const</span> <span class=\"n\">i</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">pure</span> <span class=\"n\">i</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Expr.prim</span> <span class=\"n\">p</span> <span class=\"n\">e1</span> <span class=\"n\">e2</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">evaluateM</span> <span class=\"n\">applySpecial</span> <span class=\"n\">e1</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"k\">fun</span> <span class=\"n\">v1</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">evaluateM</span> <span class=\"n\">applySpecial</span> <span class=\"n\">e2</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"k\">fun</span> <span class=\"n\">v2</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">evaluateM</span> <span class=\"n\">applySpecial</span> <span class=\"n\">p</span> <span class=\"n\">v1</span> <span class=\"n\">v2</span>\n</code></pre></div>\n<p>The last line gives an error</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">application</span> <span class=\"n\">type</span> <span class=\"n\">mismatch</span>\n  <span class=\"n\">evaluateM</span> <span class=\"n\">applySpecial</span> <span class=\"n\">p</span>\n<span class=\"n\">argument</span>\n  <span class=\"n\">p</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">Prim</span> <span class=\"n\">special</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"n\">Expr</span> <span class=\"o\">(</span><span class=\"n\">Prim</span> <span class=\"n\">special</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n</code></pre></div>\n<p>This error can be reproduced on <a href=\"https://lean.math.hhu.de/#code=inductive%20Expr%20(op%20%3A%20Type)%20where%0A%20%20%7C%20const%20%3A%20Int%20%E2%86%92%20Expr%20op%0A%20%20%7C%20prim%20%3A%20op%20%E2%86%92%20Expr%20op%20%E2%86%92%20Expr%20op%20%E2%86%92%20Expr%20op%0A%0Ainductive%20Prim%20(special%20%3A%20Type)%20where%0A%20%20%7C%20plus%0A%20%20%7C%20minus%0A%20%20%7C%20times%0A%20%20%7C%20other%20%3A%20special%20%E2%86%92%20Prim%20special%0A%0Adef%20evaluateM%20%5BMonad%20m%5D%20(applySpecial%20%3A%20special%20%E2%86%92%20Int%20%E2%86%92%20Int%20%E2%86%92%20m%20Int)%3A%20Expr%20(Prim%20special)%20%E2%86%92%20m%20Int%0A%20%20%7C%20Expr.const%20i%20%3D%3E%20pure%20i%0A%20%20%7C%20Expr.prim%20p%20e1%20e2%20%3D%3E%0A%20%20%20%20evaluateM%20applySpecial%20e1%20%3E%3E%3D%20fun%20v1%20%3D%3E%0A%20%20%20%20evaluateM%20applySpecial%20e2%20%3E%3E%3D%20fun%20v2%20%3D%3E%0A%20%20%20%20evaluateM%20applySpecial%20p%20v1%20v2%0A\">Lean 4 web server</a>.</p>",
        "id": 389023290,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1693844262
    },
    {
        "content": "<p>I'm a bit confused, the only line in the page you link to that starts with <code>def evaluateM [Monad m] (applySpecial</code> has the following definition</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">evaluateM</span> <span class=\"o\">[</span><span class=\"n\">Monad</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">applySpecial</span> <span class=\"o\">:</span> <span class=\"n\">special</span> <span class=\"bp\">→</span> <span class=\"n\">Int</span> <span class=\"bp\">→</span> <span class=\"n\">Int</span> <span class=\"bp\">→</span> <span class=\"n\">m</span> <span class=\"n\">Int</span><span class=\"o\">):</span> <span class=\"n\">Expr</span> <span class=\"o\">(</span><span class=\"n\">Prim</span> <span class=\"n\">special</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">m</span> <span class=\"n\">Int</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Expr.const</span> <span class=\"n\">i</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">pure</span> <span class=\"n\">i</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Expr.prim</span> <span class=\"n\">p</span> <span class=\"n\">e1</span> <span class=\"n\">e2</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">evaluateM</span> <span class=\"n\">applySpecial</span> <span class=\"n\">e1</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"k\">fun</span> <span class=\"n\">v1</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">evaluateM</span> <span class=\"n\">applySpecial</span> <span class=\"n\">e2</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"k\">fun</span> <span class=\"n\">v2</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">applyPrim</span> <span class=\"n\">applySpecial</span> <span class=\"n\">p</span> <span class=\"n\">v1</span> <span class=\"n\">v2</span>\n</code></pre></div>\n<p>which includes an <code>applyPrim</code> on the final line whereas your code has <code>evaluateM</code></p>",
        "id": 389024763,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1693844969
    },
    {
        "content": "<p>Thanks for the report! I also don't see the version quoted here.</p>\n<p>However, <code>applyPrim</code> should probably be renamed so that it's not the same length as <code>evaluateM</code> - this would make it much easier to see that they're different. The current setup is unintentionally confusing.</p>",
        "id": 389500046,
        "sender_full_name": "David Thrane Christiansen",
        "timestamp": 1694026844
    },
    {
        "content": "<p>Tracked here: <a href=\"https://github.com/leanprover/fp-lean/issues/126\">https://github.com/leanprover/fp-lean/issues/126</a></p>\n<p>Thanks for the report, <span class=\"user-mention\" data-user-id=\"364351\">@Lars Ericson</span>!</p>",
        "id": 389500352,
        "sender_full_name": "David Thrane Christiansen",
        "timestamp": 1694026964
    },
    {
        "content": "<p>Sorry, <span class=\"user-mention\" data-user-id=\"127136\">@Alex J. Best</span>  is right, I don't know how the extra evaluateM got in there in my copy of the function, it's not there on the page now.</p>",
        "id": 390182524,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1694378090
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"364351\">Lars Ericson</span> has marked this topic as resolved.</p>",
        "id": 390182547,
        "sender_full_name": "Notification Bot",
        "timestamp": 1694378106
    }
]