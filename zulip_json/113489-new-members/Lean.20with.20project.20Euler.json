[
    {
        "content": "<p>Hi all,</p>\n<p>I recently discovered Lean and was intrigued by the idea of a functional programming language, which is also a theorem prover.</p>\n<p>I decided to learn some Lean 4 and solve some problems from <a href=\"https://projecteuler.net/\">project Euler</a> using it, like I did for a couple of other languages before. I started writing up my experiences in a couple of posts. Here is the first one: <a href=\"https://unreasonableeffectiveness.com/learning-lean-4-as-a-programming-language-project-euler/\">Learning Lean 4 as a programming language – Project Euler</a>.</p>",
        "id": 393898586,
        "sender_full_name": "Markus Schmaus",
        "timestamp": 1695981046
    },
    {
        "content": "<p>I published the second post in the series: <a href=\"https://unreasonableeffectiveness.com/learning-lean-4-as-a-programming-language-2-infinite-lists/\">Learning Lean 4 as a programming language 2 – Infinite lists</a></p>",
        "id": 394461957,
        "sender_full_name": "Markus Schmaus",
        "timestamp": 1696261037
    },
    {
        "content": "<p>Did you think about proving any of your answers correct in Lean? Using some reasonable formalization of the statement. I'd be curious how hard / awkward that was and I think we as a community could learn from that</p>",
        "id": 394462409,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1696261182
    },
    {
        "content": "<p>For problem 7 I have written a prime sieve and I have been working on proving it to be correct.</p>",
        "id": 394463260,
        "sender_full_name": "Markus Schmaus",
        "timestamp": 1696261442
    },
    {
        "content": "<p>Here is the next post: <a href=\"https://unreasonableeffectiveness.com/learning-lean-4-as-a-programming-language-3-weak-sequences/\">Learning Lean 4 as a programming language 3 – Weak sequences</a>. This still only covers some coding and no proofs, yet. The prime number stuffed turned out to be a too hard for my first proof, but I was able to proof my Fibonacci code to be correct. I still have to write this up, which will be my next post.</p>",
        "id": 394904489,
        "sender_full_name": "Markus Schmaus",
        "timestamp": 1696447870
    },
    {
        "content": "<p>Re your open questions: you could just ask them here in another thread in <a class=\"stream\" data-stream-id=\"113489\" href=\"/#narrow/stream/113489-new-members\">#new members</a>  or <a class=\"stream\" data-stream-id=\"270676\" href=\"/#narrow/stream/270676-lean4\">#lean4</a> (they are sufficiently non-elementary that I should think <a class=\"stream\" data-stream-id=\"270676\" href=\"/#narrow/stream/270676-lean4\">#lean4</a> will be fine). Regarding iterating over members of a type -- how would you iterate over the real numbers? What hypotheses do you have on your type? Might it be infinite, for example?</p>",
        "id": 394905135,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1696448171
    },
    {
        "content": "<p>The list of types for which this makes sense probably isn't that long. All uncountable infinite types, like the reals, are out for obvious reasons. It obviously makes sense for <code>Nat</code>, <code>Nat.Primes</code>, and the instances of the <code>Finite</code>. For <code>Int</code> and <code>Rat</code> it's possible though not obvious in which order.</p>",
        "id": 394921330,
        "sender_full_name": "Markus Schmaus",
        "timestamp": 1696456246
    },
    {
        "content": "<p>Writing provable code for Euler problems is an interesting exercise, but can be tricky.  For instance, for problem 5 in your link, a solution is </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Std.Data.Nat.Gcd</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">minMul</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span>\n  <span class=\"n\">List.iota</span> <span class=\"n\">n</span> <span class=\"bp\">|&gt;.</span><span class=\"n\">foldl</span> <span class=\"n\">Nat.lcm</span> <span class=\"mi\">1</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">minMul</span> <span class=\"mi\">10</span>\n<span class=\"k\">#eval</span> <span class=\"n\">minMul</span> <span class=\"mi\">20</span>\n</code></pre></div>\n<p>But proving this solves your problem can be tricky, depending on what you assume!</p>",
        "id": 395088218,
        "sender_full_name": "Ioannis Konstantoulas",
        "timestamp": 1696526466
    },
    {
        "content": "<p>I was rather busy the last days, but I finally found the time to complete my first post, that includes proofs: <a href=\"https://unreasonableeffectiveness.com/learning-lean-4-as-a-programming-language-4-proofs/\">Learning Lean 4 as a programming language 4 – Proofs</a></p>",
        "id": 396108596,
        "sender_full_name": "Markus Schmaus",
        "timestamp": 1697036440
    },
    {
        "content": "<p>Thanks for writing this! I don't have time to read all of it now, but I'd like to already point out you have <em>very</em> unusual code formatting. Could you add frequent warnings telling your readers they won't be able to contribute to any existing Lean 4 project if they follow your formatting style?</p>",
        "id": 396109754,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1697036796
    },
    {
        "content": "<p>Is there a style guide for code formatting?</p>",
        "id": 396123331,
        "sender_full_name": "Markus Schmaus",
        "timestamp": 1697040623
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/contribute/style.html\">#style</a></p>",
        "id": 396123420,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1697040652
    },
    {
        "content": "<p>from a quick glance at your code, I would say the major takeaways are:</p>\n<ol>\n<li>we don't indent everything in a namespace or section</li>\n<li><code>:</code> and <code>:=</code> are appended the ends of preceding lines, not on their own or at the front.</li>\n<li>for continuing declaration statements, we indent 4 spaces, and then the start of the proof reverts back to a 2-space indent.</li>\n<li>arguments to declarations don't get their own lines.</li>\n</ol>\n<p>But there are probably more things to be gleaned from the style guide too.</p>",
        "id": 396123998,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1697040823
    },
    {
        "content": "<p>e.g., to make a snippet of your code adhere to the style guide, it would look like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Std</span>\n<span class=\"kn\">import</span> <span class=\"n\">LearnLean.Sequence</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">Fibonacci</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">Lawful</span> <span class=\"o\">{</span><span class=\"n\">sequence</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">sequence</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">InfiniteSequence</span> <span class=\"n\">sequence</span> <span class=\"n\">Nat</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"n\">where</span>\n  <span class=\"n\">intro</span> <span class=\"o\">::</span>\n  <span class=\"n\">value_0</span> <span class=\"o\">:</span> <span class=\"n\">InfiniteSequence.get</span> <span class=\"mi\">0</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n  <span class=\"n\">value_1</span> <span class=\"o\">:</span> <span class=\"n\">InfiniteSequence.get</span> <span class=\"mi\">1</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span>\n  <span class=\"n\">recursion</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">,</span>\n    <span class=\"o\">(</span><span class=\"n\">InfiniteSequence.get</span> <span class=\"n\">i</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">InfiniteSequence.get</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">InfiniteSequence.get</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"n\">s</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">Generator</span> <span class=\"n\">where</span>\n  <span class=\"n\">value_pred</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span>\n  <span class=\"n\">value</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">Generator</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">head</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">Generator</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"n\">g.value</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">tail</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">Generator</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Generator</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">g.value</span><span class=\"o\">,</span> <span class=\"n\">g.value_pred</span> <span class=\"bp\">+</span> <span class=\"n\">g.value</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">InfiniteSequence</span> <span class=\"n\">Generator</span> <span class=\"n\">Nat</span> <span class=\"n\">where</span>\n  <span class=\"n\">head</span> <span class=\"o\">:=</span> <span class=\"n\">head</span>\n  <span class=\"n\">tail</span> <span class=\"o\">:=</span> <span class=\"n\">tail</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">Generator</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">Fibonacci</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Fibonacci</span> <span class=\"o\">:</span> <span class=\"n\">Fibonacci.Generator</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">⟩</span>\n\n\n<span class=\"kn\">namespace</span> <span class=\"n\">Fibonacci</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">isLawful</span> <span class=\"o\">:</span> <span class=\"n\">Lawful</span> <span class=\"n\">Fibonacci</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">apply</span> <span class=\"n\">Lawful.intro</span>\n  <span class=\"bp\">·</span> <span class=\"n\">case</span> <span class=\"n\">value_0</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">decide</span>\n  <span class=\"bp\">·</span> <span class=\"n\">case</span> <span class=\"n\">value_1</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">decide</span>\n  <span class=\"bp\">·</span> <span class=\"n\">case</span> <span class=\"n\">recursion</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">intro</span> <span class=\"n\">i</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">InfiniteSequence.get</span><span class=\"o\">,</span> <span class=\"n\">InfiniteSequence.drop</span><span class=\"o\">,</span> <span class=\"n\">InfiniteSequence.drop_tail</span><span class=\"o\">,</span> <span class=\"n\">Nat.add</span><span class=\"o\">]</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">InfiniteSequence.tail</span><span class=\"o\">,</span> <span class=\"n\">Generator.tail</span><span class=\"o\">,</span> <span class=\"n\">InfiniteSequence.head</span><span class=\"o\">,</span> <span class=\"n\">Generator.head</span><span class=\"o\">]</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">Fibonacci</span>\n</code></pre></div>",
        "id": 396124782,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1697041048
    },
    {
        "content": "<p>The reason <code>specialize</code> doesn't auto close the goal is that most people would write</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">exact</span> <span class=\"n\">induction_hyp</span> <span class=\"o\">(</span><span class=\"n\">tail</span> <span class=\"n\">s</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>In place of</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">specialize</span> <span class=\"n\">induction_hyp</span> <span class=\"o\">(</span><span class=\"n\">tail</span> <span class=\"n\">s</span><span class=\"o\">)</span>\n<span class=\"n\">exact</span> <span class=\"n\">induction_hyp</span>\n</code></pre></div>",
        "id": 396130348,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1697042854
    },
    {
        "content": "<p>and additionally, if my memory serves, the <code>specialize</code> tactic was written for purely pedagogical purposes</p>",
        "id": 396132324,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1697043571
    },
    {
        "content": "<p>It can be useful in some corner cases, notably where followed by a rw at.</p>",
        "id": 396138339,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1697046059
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"197836\">@Jireh Loreaux</span> a couple of these lines seem long to me. Specifically</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"n\">recursion</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">,</span>\n    <span class=\"o\">(</span><span class=\"n\">InfiniteSequence.get</span> <span class=\"n\">i</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">InfiniteSequence.get</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">InfiniteSequence.get</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"n\">s</span>\n</code></pre></div>\n<p>and</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">InfiniteSequence.get</span><span class=\"o\">,</span> <span class=\"n\">InfiniteSequence.drop</span><span class=\"o\">,</span> <span class=\"n\">InfiniteSequence.drop_tail</span><span class=\"o\">,</span> <span class=\"n\">Nat.add</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>as they get cut off by the Zulip code display. Is there a style guide conform way to wrap them?</p>",
        "id": 396140099,
        "sender_full_name": "Markus Schmaus",
        "timestamp": 1697046909
    },
    {
        "content": "<p>Mathlib has a 100 character limit, and that's what I used above. You could break them earlier.</p>",
        "id": 396141145,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1697047358
    },
    {
        "content": "<p>Hi, I just saw this. I have also done some PE in Lean before, though not for optimised speed. You can find it <a href=\"https://github.com/grhkm21/lean4/blob/master/Lean4/q10.lean\">here</a>.</p>",
        "id": 396223672,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1697092563
    },
    {
        "content": "<p>As Ioannis said above, writing a program is easy, it's pretty much just Haskell. Proving it indeed solves your problem will be quite interesting, especially for code written imperatively using Monads, even with for loops.</p>",
        "id": 396223859,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1697092644
    }
]