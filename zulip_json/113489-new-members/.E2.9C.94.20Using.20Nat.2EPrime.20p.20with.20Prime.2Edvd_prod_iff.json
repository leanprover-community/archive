[
    {
        "content": "<p>Is there a way to use <code>Prime.dvd_prod_iff</code> with a proof of <code>Nat.Prime p</code>? </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Nat.Prime</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.List.Prime</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">List</span> <span class=\"n\">Nat</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">Nat.Prime</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">∣</span> <span class=\"n\">L.prod</span> <span class=\"bp\">↔</span> <span class=\"bp\">∃</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">L</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"bp\">∣</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n  <span class=\"c1\">-- @Prime.dvd_prod_iff Nat _ _ _ hp</span>\n  <span class=\"n\">Prime.dvd_prod_iff</span> <span class=\"n\">hp</span>\n\n<span class=\"c\">/-</span>\n<span class=\"cm\">application type mismatch</span>\n<span class=\"cm\">  Prime.dvd_prod_iff hp</span>\n<span class=\"cm\">argument</span>\n<span class=\"cm\">  hp</span>\n<span class=\"cm\">has type</span>\n<span class=\"cm\">  Nat.Prime p : Prop</span>\n<span class=\"cm\">but is expected to have type</span>\n<span class=\"cm\">  _root_.Prime p : Prop</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>",
        "id": 351753840,
        "sender_full_name": "Newell Jensen",
        "timestamp": 1682122349
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Nat.prime_iff_prime#doc\">docs4#Nat.prime_iff_prime</a></p>",
        "id": 351754349,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1682122677
    },
    {
        "content": "<p>rats my name guessing was wrong</p>",
        "id": 351754404,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1682122688
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Nat.Prime.prime#doc\">docs4#Nat.Prime.prime</a></p>",
        "id": 351754442,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1682122721
    },
    {
        "content": "<p>Thank you Eric</p>",
        "id": 351754524,
        "sender_full_name": "Newell Jensen",
        "timestamp": 1682122793
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"443984\">Newell Jensen</span> has marked this topic as resolved.</p>",
        "id": 351754637,
        "sender_full_name": "Notification Bot",
        "timestamp": 1682122846
    }
]