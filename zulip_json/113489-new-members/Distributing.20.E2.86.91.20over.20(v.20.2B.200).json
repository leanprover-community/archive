[
    {
        "content": "<p>As an exercise, I'm defining vector spaces in Lean.  However, I'm having trouble proving v + 0 = v in a subspace.</p>\n<p><code>intro v; ext</code> reduces the goal to ↑(v + 0) = ↑v, and next I'm hoping for something to distribute the ↑ on the left hand side.  In Lean 3, <code>simp</code> would do that, but in Lean 4, <code>simp</code> just undoes the <code>ext</code>.  I want to get to where I can use <code>rw [AddCommGroup.add_zero]</code> to finish the proof.</p>\n<p>Here's my <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>, sorry it's so long:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.Field.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.SetLike.Basic</span>\n\n\n<span class=\"kn\">namespace</span> <span class=\"n\">LADR</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">ext</span><span class=\"kd\">]</span>\n<span class=\"kd\">class</span> <span class=\"n\">AddCommGroup</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">Add</span> <span class=\"n\">V</span><span class=\"o\">,</span> <span class=\"n\">Zero</span> <span class=\"n\">V</span><span class=\"o\">,</span> <span class=\"n\">Neg</span> <span class=\"n\">V</span> <span class=\"n\">where</span>\n  <span class=\"n\">add_comm</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">,</span> <span class=\"n\">u</span> <span class=\"bp\">+</span> <span class=\"n\">v</span> <span class=\"bp\">=</span> <span class=\"n\">v</span> <span class=\"bp\">+</span> <span class=\"n\">u</span>\n  <span class=\"n\">add_assoc</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">,</span> <span class=\"n\">u</span> <span class=\"bp\">+</span> <span class=\"n\">v</span> <span class=\"bp\">+</span> <span class=\"n\">w</span> <span class=\"bp\">=</span> <span class=\"n\">u</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"bp\">+</span> <span class=\"n\">w</span><span class=\"o\">)</span>\n  <span class=\"n\">add_zero</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">,</span> <span class=\"n\">v</span> <span class=\"bp\">+</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"n\">v</span>\n  <span class=\"n\">add_right_inv</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">,</span> <span class=\"n\">v</span> <span class=\"bp\">+</span> <span class=\"bp\">-</span><span class=\"n\">v</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">ext</span><span class=\"kd\">]</span>\n<span class=\"kd\">class</span> <span class=\"n\">VectorSpace</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">AddCommGroup</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"kd\">extends</span> <span class=\"n\">SMul</span> <span class=\"n\">F</span> <span class=\"n\">V</span> <span class=\"n\">where</span>\n  <span class=\"n\">smul_assoc</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">•</span> <span class=\"n\">v</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">•</span> <span class=\"n\">b</span> <span class=\"bp\">•</span> <span class=\"n\">v</span>\n  <span class=\"n\">mul_ident</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"bp\">•</span> <span class=\"n\">v</span> <span class=\"bp\">=</span> <span class=\"n\">v</span>\n  <span class=\"n\">left_distrib</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">•</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"bp\">+</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">•</span> <span class=\"n\">u</span> <span class=\"bp\">+</span> <span class=\"n\">a</span> <span class=\"bp\">•</span> <span class=\"n\">v</span>\n  <span class=\"n\">right_distrib</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">•</span> <span class=\"n\">v</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">•</span> <span class=\"n\">v</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">•</span> <span class=\"n\">v</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">field_f</span><span class=\"o\">:</span> <span class=\"n\">Field</span> <span class=\"n\">F</span><span class=\"o\">]</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">VectorSpace</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">AddCommGroup</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">VectorSpace</span> <span class=\"n\">F</span> <span class=\"n\">V</span><span class=\"o\">]</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">neg_one_smul_is_neg</span> <span class=\"o\">{</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"bp\">•</span> <span class=\"n\">v</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span><span class=\"n\">v</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">VectorSpace</span>\n\n\n<span class=\"kd\">structure</span> <span class=\"n\">AddCommSubgroup</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">AddCommGroup</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"n\">where</span>\n  <span class=\"n\">carrier</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">V</span>\n  <span class=\"n\">add_mem'</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">},</span> <span class=\"n\">u</span> <span class=\"bp\">∈</span> <span class=\"n\">carrier</span> <span class=\"bp\">→</span> <span class=\"n\">v</span> <span class=\"bp\">∈</span> <span class=\"n\">carrier</span> <span class=\"bp\">→</span> <span class=\"n\">u</span> <span class=\"bp\">+</span> <span class=\"n\">v</span> <span class=\"bp\">∈</span> <span class=\"n\">carrier</span>\n  <span class=\"n\">zero_mem'</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"bp\">∈</span> <span class=\"n\">carrier</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">AddCommSubgroup</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">AddCommGroup</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">}</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">SetLike</span> <span class=\"o\">(</span><span class=\"n\">AddCommSubgroup</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"n\">V</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨</span><span class=\"n\">AddCommSubgroup.carrier</span><span class=\"o\">,</span> <span class=\"k\">fun</span> <span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span> <span class=\"n\">cases</span> <span class=\"n\">p</span> <span class=\"bp\">;</span> <span class=\"n\">cases</span> <span class=\"n\">q</span> <span class=\"bp\">;</span> <span class=\"n\">congr</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">mem_carrier</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">AddCommSubgroup</span> <span class=\"n\">V</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">v</span> <span class=\"bp\">∈</span> <span class=\"n\">p.carrier</span> <span class=\"bp\">↔</span> <span class=\"n\">v</span> <span class=\"bp\">∈</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">Iff.rfl</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">ext</span><span class=\"kd\">]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">ext</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">AddCommSubgroup</span> <span class=\"n\">V</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">v</span> <span class=\"bp\">∈</span> <span class=\"n\">p</span> <span class=\"bp\">↔</span> <span class=\"n\">v</span> <span class=\"bp\">∈</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"n\">q</span> <span class=\"o\">:=</span>\n  <span class=\"n\">SetLike.ext</span> <span class=\"n\">h</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">AddCommSubgroup</span>\n\n<span class=\"c1\">-- Because this is a structure rather than a class, it's ok to extend add_comm_subgroup</span>\n<span class=\"kd\">structure</span> <span class=\"n\">Subspace</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">AddCommGroup</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">VectorSpace</span> <span class=\"n\">F</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"kd\">extends</span>\n    <span class=\"n\">AddCommSubgroup</span> <span class=\"n\">V</span> <span class=\"n\">where</span>\n  <span class=\"n\">smul_mem'</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">},</span> <span class=\"n\">v</span> <span class=\"bp\">∈</span> <span class=\"n\">carrier</span> <span class=\"bp\">→</span> <span class=\"n\">c</span> <span class=\"bp\">•</span> <span class=\"n\">v</span> <span class=\"bp\">∈</span> <span class=\"n\">carrier</span>\n\n\n<span class=\"kn\">namespace</span> <span class=\"n\">Subspace</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">AddCommGroup</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">VectorSpace</span> <span class=\"n\">F</span> <span class=\"n\">V</span><span class=\"o\">]</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">}</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">SetLike</span> <span class=\"o\">(</span><span class=\"n\">Subspace</span> <span class=\"n\">F</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"n\">V</span> <span class=\"n\">where</span>\n  <span class=\"n\">coe</span> <span class=\"n\">s</span> <span class=\"o\">:=</span> <span class=\"n\">s.carrier</span>\n  <span class=\"n\">coe_injective'</span> <span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">cases</span> <span class=\"n\">p</span><span class=\"bp\">;</span> <span class=\"n\">cases</span> <span class=\"n\">q</span><span class=\"bp\">;</span> <span class=\"n\">congr</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">SetLike.coe_injective'</span> <span class=\"n\">h</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">mem_carrier</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">Subspace</span> <span class=\"n\">F</span> <span class=\"n\">V</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">v</span> <span class=\"bp\">∈</span> <span class=\"n\">p.carrier</span> <span class=\"bp\">↔</span> <span class=\"n\">v</span> <span class=\"bp\">∈</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">Iff.rfl</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">ext</span><span class=\"kd\">]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">ext</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">Subspace</span> <span class=\"n\">F</span> <span class=\"n\">V</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">v</span> <span class=\"bp\">∈</span> <span class=\"n\">p</span> <span class=\"bp\">↔</span> <span class=\"n\">v</span> <span class=\"bp\">∈</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"n\">q</span> <span class=\"o\">:=</span>\n  <span class=\"n\">SetLike.ext</span> <span class=\"n\">h</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">Subspace</span> <span class=\"n\">F</span> <span class=\"n\">V</span><span class=\"o\">)</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">AddCommGroup</span> <span class=\"n\">p</span>\n    <span class=\"n\">where</span>\n  <span class=\"n\">add</span> <span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">u.1</span> <span class=\"bp\">+</span> <span class=\"n\">v.1</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">apply</span> <span class=\"n\">p.add_mem'</span><span class=\"bp\">;</span> <span class=\"n\">simp</span><span class=\"bp\">;</span> <span class=\"n\">simp</span><span class=\"o\">⟩</span>\n  <span class=\"n\">zero</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">p.zero_mem'</span><span class=\"o\">⟩</span>\n  <span class=\"n\">neg</span> <span class=\"n\">v</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"bp\">-</span><span class=\"n\">v.1</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"bp\">@</span><span class=\"n\">VectorSpace.neg_one_smul_is_neg</span> <span class=\"n\">F</span> <span class=\"n\">_</span> <span class=\"n\">V</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">apply</span> <span class=\"n\">p.smul_mem'</span><span class=\"bp\">;</span> <span class=\"n\">simp</span><span class=\"o\">⟩</span>\n  <span class=\"n\">add_comm</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">intros</span><span class=\"bp\">;</span> <span class=\"n\">ext</span><span class=\"bp\">;</span> <span class=\"n\">apply</span> <span class=\"n\">AddCommGroup.add_comm</span>\n  <span class=\"n\">add_assoc</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">intros</span><span class=\"bp\">;</span> <span class=\"n\">ext</span><span class=\"bp\">;</span> <span class=\"n\">apply</span> <span class=\"n\">AddCommGroup.add_assoc</span>\n  <span class=\"n\">add_zero</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">intro</span> <span class=\"n\">v</span><span class=\"bp\">;</span> <span class=\"n\">ext</span><span class=\"bp\">;</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">AddCommGroup.add_zero</span><span class=\"o\">]</span> <span class=\"c1\">--  &lt;-- This fails.</span>\n  <span class=\"n\">add_right_inv</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">intros</span><span class=\"bp\">;</span> <span class=\"n\">ext</span><span class=\"bp\">;</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">AddCommGroup.add_right_inv</span><span class=\"o\">]</span> <span class=\"c1\">--  &lt;-- This also fails.</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">Subspace</span>\n<span class=\"kd\">end</span> <span class=\"n\">LADR</span>\n</code></pre></div>",
        "id": 400592120,
        "sender_full_name": "Martin C. Martin",
        "timestamp": 1699296541
    },
    {
        "content": "<p>(note that Lean comments are <code>--</code> not <code>#</code>)</p>",
        "id": 400592438,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1699296717
    },
    {
        "content": "<p>Note:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"n\">add_zero</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">intro</span> <span class=\"n\">v</span><span class=\"bp\">;</span> <span class=\"n\">ext</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">AddCommGroup.add_zero</span> <span class=\"n\">_</span> <span class=\"c1\">-- This works.</span>\n</code></pre></div>",
        "id": 400592497,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1699296729
    },
    {
        "content": "<p>The issue is that you are defining addition on the subspace at the same time as you are proving properties about it. If you define the addition first, then you can have a <code>coe_add</code> lemma (proved by <code>rfl</code>) which you can then rewrite with when you create the <code>AddCommGroup</code> instance for subspaces.</p>",
        "id": 400592657,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1699296827
    },
    {
        "content": "<p>Which would look like:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Add</span> <span class=\"n\">p</span> <span class=\"n\">where</span>\n  <span class=\"n\">add</span> <span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">u.1</span> <span class=\"bp\">+</span> <span class=\"n\">v.1</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">apply</span> <span class=\"n\">p.add_mem'</span><span class=\"bp\">;</span> <span class=\"n\">simp</span><span class=\"bp\">;</span> <span class=\"n\">simp</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span> <span class=\"kd\">theorem</span> <span class=\"n\">val_add</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"bp\">=</span> <span class=\"n\">a.val</span> <span class=\"bp\">+</span> <span class=\"n\">b.val</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">AddCommGroup</span> <span class=\"n\">p</span> <span class=\"n\">where</span>\n  <span class=\"n\">add_zero</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">intro</span> <span class=\"n\">v</span><span class=\"bp\">;</span> <span class=\"n\">ext</span><span class=\"bp\">;</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">val_add</span><span class=\"o\">]</span> <span class=\"c1\">-- this makes more progress</span>\n  <span class=\"c1\">-- other fields,except `add`, as before</span>\n</code></pre></div>",
        "id": 400592868,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1699296918
    },
    {
        "content": "<p>Thanks to both of you!  It's odd that <code>exact</code> works but <code>apply</code> and <code>rw</code> did not.  Is this related to using an underscore with <code>exact</code>, but not with <code>apply</code> or <code>rw</code>?</p>",
        "id": 400598517,
        "sender_full_name": "Martin C. Martin",
        "timestamp": 1699299317
    },
    {
        "content": "<p>I'm surprised it didn't work with <code>apply</code>, but it wouldn't work with <code>rw</code> because <code>rw</code> refuses to unfold definitions</p>",
        "id": 400599069,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1699299594
    },
    {
        "content": "<p>In general, I do struggle to understand when to use <code>simp</code> vs <code>dsimp</code> vs <code>rw</code> vs <code>apply</code> vs <code>exact</code>.  I always thought anything that works with <code>exact</code> would also work with <code>apply</code>, that <code>apply</code> is a kind of recursive <code>exact</code>, but I guess that's not right.</p>",
        "id": 400599151,
        "sender_full_name": "Martin C. Martin",
        "timestamp": 1699299616
    },
    {
        "content": "<p>Actually, it does work with <code>apply</code>.  I swore I tried that a few weeks ago and it didn't work.  You can see I used it on the earlier ones.  Maybe I still had the <code>simp</code> in there?  Definitely doesn't work if you use <code>simp</code> before the <code>apply</code>.</p>",
        "id": 400599417,
        "sender_full_name": "Martin C. Martin",
        "timestamp": 1699299731
    },
    {
        "content": "<p>It seems odd that <code>simp</code> is undoing <code>ext</code>, but there's certainly a sense in which that's simpler.  Still, I expect <code>simp</code> to unfold definitions, rather than the opposite.</p>",
        "id": 400599514,
        "sender_full_name": "Martin C. Martin",
        "timestamp": 1699299783
    },
    {
        "content": "<p>I would <em>not</em> expect <code>simp</code> to unfold definitions in general (unless you pass them explicitly to the <code>simp</code> call). Often that would defeat the purpose of having the definition, which is to hide some object behind the default semireducible transparency.</p>",
        "id": 400613309,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1699306056
    }
]