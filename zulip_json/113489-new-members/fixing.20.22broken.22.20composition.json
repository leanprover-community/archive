[
    {
        "content": "<p>Here, as you can see, I have the definition of a category:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- A category C consists of:</span>\n<span class=\"kd\">structure</span> <span class=\"n\">category</span> <span class=\"n\">where</span>\n\n  <span class=\"c1\">-- A type of objects:</span>\n  <span class=\"n\">Obj</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span>  <span class=\"c1\">-- which depends on an unknown universe u</span>\n\n  <span class=\"c1\">-- For each object X and each object Y, a type C.Hom X Y</span>\n  <span class=\"n\">Hom</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span><span class=\"o\">(</span><span class=\"n\">_</span><span class=\"o\">:</span><span class=\"n\">Obj</span><span class=\"o\">),</span><span class=\"bp\">∀</span><span class=\"o\">(</span><span class=\"n\">_</span><span class=\"o\">:</span><span class=\"n\">Obj</span><span class=\"o\">),</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span>\n\n  <span class=\"c1\">-- For each object X, a term C.Idn X : C.Hom X X</span>\n  <span class=\"n\">Idn</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span><span class=\"o\">(</span><span class=\"n\">X</span><span class=\"o\">:</span><span class=\"n\">Obj</span><span class=\"o\">),</span><span class=\"n\">Hom</span> <span class=\"n\">X</span> <span class=\"n\">X</span>\n\n  <span class=\"c1\">-- For objects X, Y, and Z, and terms _ : Hom X Y and _ : Hom Y Z, a term</span>\n  <span class=\"c1\">-- C.Cmp X Y Z f g</span>\n  <span class=\"n\">Cmp</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span><span class=\"o\">(</span><span class=\"n\">X</span><span class=\"o\">:</span><span class=\"n\">Obj</span><span class=\"o\">),</span><span class=\"bp\">∀</span><span class=\"o\">(</span><span class=\"n\">Y</span><span class=\"o\">:</span><span class=\"n\">Obj</span><span class=\"o\">),</span><span class=\"bp\">∀</span><span class=\"o\">(</span><span class=\"n\">Z</span><span class=\"o\">:</span><span class=\"n\">Obj</span><span class=\"o\">),</span><span class=\"bp\">∀</span><span class=\"o\">(</span><span class=\"n\">_</span><span class=\"o\">:</span><span class=\"n\">Hom</span> <span class=\"n\">X</span> <span class=\"n\">Y</span><span class=\"o\">),</span><span class=\"bp\">∀</span><span class=\"o\">(</span><span class=\"n\">_</span><span class=\"o\">:</span><span class=\"n\">Hom</span> <span class=\"n\">Y</span> <span class=\"n\">Z</span><span class=\"o\">),</span><span class=\"n\">Hom</span> <span class=\"n\">X</span> <span class=\"n\">Z</span>\n\n  <span class=\"c1\">-- such that:</span>\n\n  <span class=\"c1\">-- 1) for objects X, Y : C.Obj and a morphism f : C.Hom X Y, C.Cmp X Y Y f (C.Idn Y) = f,</span>\n  <span class=\"n\">Id₁</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span><span class=\"o\">(</span><span class=\"n\">X</span><span class=\"o\">:</span><span class=\"n\">Obj</span><span class=\"o\">),</span><span class=\"bp\">∀</span><span class=\"o\">(</span><span class=\"n\">Y</span><span class=\"o\">:</span><span class=\"n\">Obj</span><span class=\"o\">),</span><span class=\"bp\">∀</span><span class=\"o\">(</span><span class=\"n\">f</span><span class=\"o\">:</span><span class=\"n\">Hom</span> <span class=\"n\">X</span> <span class=\"n\">Y</span><span class=\"o\">),</span><span class=\"n\">Cmp</span> <span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">Y</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">Idn</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span>\n\n  <span class=\"c1\">-- 2) for objects X, Y : C.Obj and a morphism f : C.Hom X Y, C.Cmp X X Y (C.Idn X) f = f,</span>\n  <span class=\"n\">Id₂</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span><span class=\"o\">(</span><span class=\"n\">X</span><span class=\"o\">:</span><span class=\"n\">Obj</span><span class=\"o\">),</span><span class=\"bp\">∀</span><span class=\"o\">(</span><span class=\"n\">Y</span><span class=\"o\">:</span><span class=\"n\">Obj</span><span class=\"o\">),</span><span class=\"bp\">∀</span><span class=\"o\">(</span><span class=\"n\">f</span><span class=\"o\">:</span><span class=\"n\">Hom</span> <span class=\"n\">X</span> <span class=\"n\">Y</span><span class=\"o\">),</span><span class=\"n\">Cmp</span> <span class=\"n\">X</span> <span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">(</span><span class=\"n\">Idn</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">f</span>\n\n  <span class=\"c1\">-- 3) for objects W, X, Y, Z : C.Obj and morphisms f : C.Hom W X, g : C.Hom X Y, h : C.Hom Y Z,</span>\n  <span class=\"c1\">-- (Cmp W X Z) f (Cmp X Y Z g h) = Cmp W Y Z (Cmp W X Y f g) h</span>\n  <span class=\"n\">Ass</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span><span class=\"o\">(</span><span class=\"n\">W</span><span class=\"o\">:</span><span class=\"n\">Obj</span><span class=\"o\">),</span><span class=\"bp\">∀</span><span class=\"o\">(</span><span class=\"n\">X</span><span class=\"o\">:</span><span class=\"n\">Obj</span><span class=\"o\">),</span><span class=\"bp\">∀</span><span class=\"o\">(</span><span class=\"n\">Y</span><span class=\"o\">:</span><span class=\"n\">Obj</span><span class=\"o\">),</span><span class=\"bp\">∀</span><span class=\"o\">(</span><span class=\"n\">Z</span><span class=\"o\">:</span><span class=\"n\">Obj</span><span class=\"o\">),</span><span class=\"bp\">∀</span><span class=\"o\">(</span><span class=\"n\">f</span><span class=\"o\">:</span><span class=\"n\">Hom</span> <span class=\"n\">W</span> <span class=\"n\">X</span><span class=\"o\">),</span><span class=\"bp\">∀</span><span class=\"o\">(</span><span class=\"n\">g</span><span class=\"o\">:</span><span class=\"n\">Hom</span> <span class=\"n\">X</span> <span class=\"n\">Y</span><span class=\"o\">),</span><span class=\"bp\">∀</span><span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span><span class=\"n\">Hom</span> <span class=\"n\">Y</span> <span class=\"n\">Z</span><span class=\"o\">),</span>\n  <span class=\"o\">(</span><span class=\"n\">Cmp</span> <span class=\"n\">W</span> <span class=\"n\">X</span> <span class=\"n\">Z</span><span class=\"o\">)</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">Cmp</span> <span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">Z</span> <span class=\"n\">g</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">Cmp</span> <span class=\"n\">W</span> <span class=\"n\">Y</span> <span class=\"n\">Z</span> <span class=\"o\">(</span><span class=\"n\">Cmp</span> <span class=\"n\">W</span> <span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">f</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"n\">h</span>\n\n\n<span class=\"c1\">-- Obj notation:</span>\n<span class=\"kd\">def</span> <span class=\"n\">Obj</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">category</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">C.Obj</span>\n\n<span class=\"c1\">-- Hom notation which infers the category in which the hom Type resides:</span>\n<span class=\"kd\">def</span> <span class=\"n\">Hom</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">category</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">Obj</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"n\">Obj</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">C.Hom</span> <span class=\"n\">X</span> <span class=\"n\">Y</span>\n\n<span class=\"c1\">-- Idn morphism notation which infers the category in which the Idn morphism resides:</span>\n<span class=\"kd\">def</span> <span class=\"n\">Idn</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">category</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">Obj</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">C.Idn</span> <span class=\"n\">X</span>\n</code></pre></div>\n<p>I am playing around with basic definitions and tactics involving this single structure for now. The first goal I have could be called \"fixing broken composition\". I want to define a composition like so:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">Cmp</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">category</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">Obj</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Y₁</span> <span class=\"o\">:</span> <span class=\"n\">Obj</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Y₂</span> <span class=\"o\">:</span> <span class=\"n\">Obj</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Z</span> <span class=\"o\">:</span> <span class=\"n\">Obj</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">Y₁</span> <span class=\"bp\">=</span> <span class=\"n\">Y₂</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Hom</span> <span class=\"n\">X</span> <span class=\"n\">Y₁</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">Hom</span> <span class=\"n\">Y₂</span> <span class=\"n\">Z</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Hom</span> <span class=\"n\">X</span> <span class=\"n\">Z</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>It seems like I need some kind of rule involving equality of types, which I am not familiar with. Where can I find the necessary information to define Cmp here?</p>",
        "id": 339779489,
        "sender_full_name": "Dean Young",
        "timestamp": 1678080632
    },
    {
        "content": "<p>The short answer is <code>Eq.rec</code></p>",
        "id": 339780787,
        "sender_full_name": "Reid Barton",
        "timestamp": 1678081723
    },
    {
        "content": "<p>I think it would be really helpful to see this spelled out some more. I don't want to take too much of your time though.</p>\n<p>Where is Eq.rec defined?</p>",
        "id": 339782092,
        "sender_full_name": "Dean Young",
        "timestamp": 1678082633
    },
    {
        "content": "<p>Automatically</p>",
        "id": 339782108,
        "sender_full_name": "Reid Barton",
        "timestamp": 1678082642
    },
    {
        "content": "<p>It's annoying that it does not get documentation.</p>",
        "id": 339782156,
        "sender_full_name": "Reid Barton",
        "timestamp": 1678082649
    },
    {
        "content": "<p>The slightly longer answer is ... then what? If you're actually using this \"fixed composition\" (and it seems hard to avoid in some cases) then you're also going to have to reason about it</p>",
        "id": 339782256,
        "sender_full_name": "Reid Barton",
        "timestamp": 1678082703
    },
    {
        "content": "<p>We can give it documentation using <code>add_decl_doc</code></p>",
        "id": 339782334,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1678082739
    },
    {
        "content": "<p>In the mathlib 3 category theory library we have something called <a href=\"https://leanprover-community.github.io/mathlib_docs/find/category_theory.eq_to_hom\">docs#category_theory.eq_to_hom</a></p>",
        "id": 339782347,
        "sender_full_name": "Reid Barton",
        "timestamp": 1678082758
    },
    {
        "content": "<p>which is kind of a \"fixed identity\" between two equal objects, and seems to work fairly well</p>",
        "id": 339782501,
        "sender_full_name": "Reid Barton",
        "timestamp": 1678082808
    },
    {
        "content": "<p>And then to build your <code>Cmp</code>, we stick this thing in the middle</p>",
        "id": 339782569,
        "sender_full_name": "Reid Barton",
        "timestamp": 1678082826
    },
    {
        "content": "<p>Aha, I see -- that's better. Maybe you could spell out these instead:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span>\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span>\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">=</span> <span class=\"n\">Y</span><span class=\"o\">}</span>\n<span class=\"kd\">def</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"kd\">def</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">Y</span> <span class=\"bp\">→</span> <span class=\"n\">X</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"kd\">def</span> <span class=\"n\">id₁</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"kd\">def</span> <span class=\"n\">id₂</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 339783372,
        "sender_full_name": "Dean Young",
        "timestamp": 1678083190
    },
    {
        "content": "<p>The theorems will be proved by something like <code>by cases p; rfl</code></p>",
        "id": 339783927,
        "sender_full_name": "Reid Barton",
        "timestamp": 1678083433
    },
    {
        "content": "<p><code>f</code> is exactly <code>Eq.cast p</code>, I think, though for your actual application you will need <code>Eq.rec</code></p>",
        "id": 339783958,
        "sender_full_name": "Reid Barton",
        "timestamp": 1678083474
    },
    {
        "content": "<p>It's also okay to define <code>f</code> and <code>g</code> with tactics, with <code>rw</code>.</p>",
        "id": 339784024,
        "sender_full_name": "Reid Barton",
        "timestamp": 1678083490
    },
    {
        "content": "<p>I wanted something like this as well:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span>\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span>\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">=</span> <span class=\"n\">Y</span><span class=\"o\">}</span>\n<span class=\"kd\">def</span> <span class=\"n\">eq_to_hom</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"n\">Obj</span> <span class=\"n\">C</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">=</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Hom</span> <span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rewrite</span> <span class=\"n\">p</span><span class=\"bp\">;</span> <span class=\"n\">Idn</span> <span class=\"n\">Y</span> <span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 339786254,
        "sender_full_name": "Dean Young",
        "timestamp": 1678084812
    },
    {
        "content": "<p>I'm still pretty unfamiliar with tactics which is why this was a good exercise for me.</p>",
        "id": 339786266,
        "sender_full_name": "Dean Young",
        "timestamp": 1678084836
    },
    {
        "content": "<p><code>by</code> should not have a matching <code>end</code></p>",
        "id": 339787303,
        "sender_full_name": "Reid Barton",
        "timestamp": 1678085402
    },
    {
        "content": "<p>after fixing that I still get this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">unsolved</span> <span class=\"n\">goals</span>\n<span class=\"n\">C</span><span class=\"o\">:</span> <span class=\"n\">category</span>\n<span class=\"n\">XY</span><span class=\"o\">:</span> <span class=\"n\">Obj</span> <span class=\"n\">C</span>\n<span class=\"n\">p</span><span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">=</span> <span class=\"n\">Y</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">Hom</span> <span class=\"n\">Y</span> <span class=\"n\">Y</span>\n</code></pre></div>\n<p>How do I tell it to fill it with Idn Y?</p>",
        "id": 339787509,
        "sender_full_name": "Dean Young",
        "timestamp": 1678085471
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span>\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span>\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">=</span> <span class=\"n\">Y</span><span class=\"o\">}</span>\n<span class=\"kd\">def</span> <span class=\"n\">asdfj</span> <span class=\"o\">{</span><span class=\"n\">_</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"n\">Obj</span> <span class=\"n\">C</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">Y</span> <span class=\"bp\">=</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Hom</span> <span class=\"n\">Y</span> <span class=\"n\">Y</span> <span class=\"o\">:=</span> <span class=\"n\">Idn</span> <span class=\"n\">Y</span>\n<span class=\"kd\">def</span> <span class=\"n\">eq_to_hom</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"n\">Obj</span> <span class=\"n\">C</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">=</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Hom</span> <span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n<span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">p</span> <span class=\"o\">]</span><span class=\"bp\">;</span>\n<span class=\"n\">asdfj</span>\n</code></pre></div>",
        "id": 339788031,
        "sender_full_name": "Dean Young",
        "timestamp": 1678085739
    },
    {
        "content": "<p>a bit Yoneda...</p>",
        "id": 339788154,
        "sender_full_name": "Dean Young",
        "timestamp": 1678085801
    },
    {
        "content": "<p>lovely connection with the Yoneda lemma.</p>",
        "id": 339788195,
        "sender_full_name": "Dean Young",
        "timestamp": 1678085829
    },
    {
        "content": "<p>I guess I just want to give it a formula at the end but I don't know the syntax for that.</p>",
        "id": 339788357,
        "sender_full_name": "Dean Young",
        "timestamp": 1678085937
    },
    {
        "content": "<p><code>exact whatever</code></p>",
        "id": 339788482,
        "sender_full_name": "Reid Barton",
        "timestamp": 1678086008
    },
    {
        "content": "<p>I just haven't heard how to give an explicit formula in the tactic mode.</p>",
        "id": 339788734,
        "sender_full_name": "Dean Young",
        "timestamp": 1678086139
    },
    {
        "content": "<p>Thanks for your help</p>",
        "id": 339788757,
        "sender_full_name": "Dean Young",
        "timestamp": 1678086148
    },
    {
        "content": "<p>oh haha I thought you were commenting on my asking for an exact answer. But it's just the name of the tactic.</p>",
        "id": 339788902,
        "sender_full_name": "Dean Young",
        "timestamp": 1678086228
    },
    {
        "content": "<p>oh this is great! I'm so happy to have learned the exact tactic.</p>",
        "id": 339789001,
        "sender_full_name": "Dean Young",
        "timestamp": 1678086266
    }
]