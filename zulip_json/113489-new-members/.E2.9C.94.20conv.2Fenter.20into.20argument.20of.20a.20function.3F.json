[
    {
        "content": "<p>I have </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">conv</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"n\">enter</span> <span class=\"o\">[</span><span class=\"bp\">...</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>entered into an expression to try to simplify it. My current state is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">|</span> <span class=\"bp\">↑</span><span class=\"n\">normSq</span> <span class=\"o\">(</span><span class=\"n\">Complex.cos</span> <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"bp\">*</span> <span class=\"bp\">↑</span><span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"bp\">↑</span><span class=\"n\">x</span><span class=\"bp\">✝</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">Complex.sin</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"bp\">↑</span><span class=\"n\">x</span><span class=\"bp\">✝</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">Complex.sin</span> <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"bp\">*</span> <span class=\"bp\">↑</span><span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"bp\">↑</span><span class=\"n\">x</span><span class=\"bp\">✝</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">Complex.cos</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"bp\">↑</span><span class=\"n\">x</span><span class=\"bp\">✝</span><span class=\"o\">))</span>\n</code></pre></div>\n<p>if I <code>enter [1]</code> at this point my state becomes <code>| normSq</code>. How do I descend into the argument of <code>normSq</code> so I can do <code>rw</code> and <code>simp</code>s on it?</p>",
        "id": 402801394,
        "sender_full_name": "Nicholas Wilson",
        "timestamp": 1700266414
    },
    {
        "content": "<p>What does <code>enter [2]</code> do?</p>",
        "id": 402802130,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1700266774
    },
    {
        "content": "<p>If you want to see what you're able to get to all at once, you can do <code>congr</code> instead, and it should be the case that <code>enter [i]</code> corresponds to selecting just the <code>i</code>th goal that <code>congr</code> would generate.</p>",
        "id": 402802281,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1700266834
    },
    {
        "content": "<p><code>enter [2] </code> yields <code>cannot select argument</code></p>",
        "id": 402802346,
        "sender_full_name": "Nicholas Wilson",
        "timestamp": 1700266864
    },
    {
        "content": "<p><code>congr</code> seems to have the same effect as <code>enter [1]</code></p>",
        "id": 402802457,
        "sender_full_name": "Nicholas Wilson",
        "timestamp": 1700266918
    },
    {
        "content": "<p>i.e. state is now <code>| normSq</code></p>",
        "id": 402802543,
        "sender_full_name": "Nicholas Wilson",
        "timestamp": 1700266945
    },
    {
        "content": "<p>It seems that <code>conv</code>'s <code>congr</code> tactic isn't able to deal with the dependent types here then.</p>\n<p>If you make a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> I could try to give a workaround</p>",
        "id": 402802716,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1700267038
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.MeasureTheory.Integral.Bochner</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.MeasureTheory.Measure.Haar.OfBasis</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Real.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Complex.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Complex.Exponential</span>\n<span class=\"kn\">open</span> <span class=\"n\">Complex</span>\n<span class=\"kn\">open</span> <span class=\"n\">Real</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">norm_sq_int_sine</span> <span class=\"o\">{</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span> <span class=\"o\">}</span> <span class=\"o\">{</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∫</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">),</span> <span class=\"o\">((</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">normSq</span> <span class=\"o\">(</span><span class=\"n\">sin</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">x</span><span class=\"bp\">+</span><span class=\"n\">I</span><span class=\"bp\">*</span><span class=\"n\">b</span><span class=\"bp\">*</span><span class=\"n\">x</span><span class=\"o\">))))</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">Complex.sin_add</span><span class=\"o\">]</span>\n  <span class=\"n\">conv</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">enter</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">2</span><span class=\"o\">]</span>\n    <span class=\"n\">ext</span>\n    <span class=\"n\">enter</span> <span class=\"o\">[</span><span class=\"mi\">2</span><span class=\"o\">]</span> <span class=\"c1\">-- state is `| ↑normSq (Complex.sin (↑a * ↑x✝) * Complex.cos (I * ↑b * ↑x✝) + Complex.cos (↑a * ↑x✝) * Complex.sin (I * ↑b * ↑x✝))`</span>\n</code></pre></div>\n<p>(ignore the fact that the RHS of the goal is bogus, just trying to simplify LHS)</p>",
        "id": 402803318,
        "sender_full_name": "Nicholas Wilson",
        "timestamp": 1700267293
    },
    {
        "content": "<p>Hmm, this is a tricky situation. Just so you know the general issue, the function <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Complex.normSq#doc\">docs#Complex.normSq</a> isn't a plain function (notice it's type is <code>ℂ →*₀ ℝ</code>) and it relies on <code>FunLike</code> to coerce it to a function when it's applied. The actual function is <code>FunLike.coe</code>, and <code>congr</code> isn't smart enough to be able to create congruence lemmas specialized to this purpose. (I tried <code>congr!</code> too, and this thwarts it.)</p>",
        "id": 402805382,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1700268114
    },
    {
        "content": "<p>It's not impossible, you just can't rely on automatically generated congruence lemmas. Here:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">normSq_congr</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">normSq</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">normSq</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">subst</span> <span class=\"n\">h</span><span class=\"bp\">;</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">norm_sq_int_sine</span> <span class=\"o\">{</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span> <span class=\"o\">}</span> <span class=\"o\">{</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∫</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">),</span> <span class=\"o\">((</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">normSq</span> <span class=\"o\">(</span><span class=\"n\">sin</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">x</span><span class=\"bp\">+</span><span class=\"n\">I</span><span class=\"bp\">*</span><span class=\"n\">b</span><span class=\"bp\">*</span><span class=\"n\">x</span><span class=\"o\">))))</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">Complex.sin_add</span><span class=\"o\">]</span>\n  <span class=\"n\">conv</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">enter</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">2</span><span class=\"o\">]</span>\n    <span class=\"n\">ext</span>\n    <span class=\"n\">enter</span> <span class=\"o\">[</span><span class=\"mi\">2</span><span class=\"o\">]</span>\n    <span class=\"n\">apply</span> <span class=\"n\">normSq_congr</span>\n    <span class=\"c1\">-- | Complex.sin (↑a * ↑x✝) * Complex.cos (I * ↑b * ↑x✝) + Complex.cos (↑a * ↑x✝) * Complex.sin (I * ↑b * ↑x✝)</span>\n</code></pre></div>",
        "id": 402805639,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1700268212
    },
    {
        "content": "<p>Stupid question: what does <code>→*₀</code> mean?</p>",
        "id": 402805737,
        "sender_full_name": "Nicholas Wilson",
        "timestamp": 1700268253
    },
    {
        "content": "<p>(All <code>congr</code>, and therefore <code>enter</code>, is doing, is looking at the function, generating a lemma that \"if all arguments are equal, then the applied functions are equal\", then applying that lemma. So I wrote that lemma for <code>normSq</code>)</p>",
        "id": 402805771,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1700268268
    },
    {
        "content": "<p>Thanks, will give that a try!</p>",
        "id": 402805796,
        "sender_full_name": "Nicholas Wilson",
        "timestamp": 1700268279
    },
    {
        "content": "<p>That's not a stupid question -- or at least I hope not -- I don't know off the top of my head either :-)</p>",
        "id": 402805866,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1700268306
    },
    {
        "content": "<p>If you go to definition on <code>normSq</code> and then on the notation, you can see it's zero-preserving monoid homomorphisms. Mathlib development discovered that monoids-with-zero were a worthwhile algebraic structure</p>",
        "id": 402806043,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1700268369
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"663331\">Nicholas Wilson</span> has marked this topic as resolved.</p>",
        "id": 402806185,
        "sender_full_name": "Notification Bot",
        "timestamp": 1700268439
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"663331\">@Nicholas Wilson</span> I made a Lean 4 issue about this (<a href=\"https://github.com/leanprover/lean4/pull/2942\">lean4#2942</a>) that I hope captures the problem you faced with <code>congr</code>. If you thumbs-up the issue, it will help let the dev team know it's an issue affecting people.</p>",
        "id": 403626675,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1700670355
    }
]