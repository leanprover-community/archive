[
    {
        "content": "<p>See example below. Is there a way to use <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>∪</mo></mrow><annotation encoding=\"application/x-tex\">\\cup</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5556em;\"></span><span class=\"mord\">∪</span></span></span></span> when pattern matching the cases of an inductive type?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Std.Classes.SetNotation</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">Thing</span> <span class=\"o\">:</span><span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">Bike</span> <span class=\"o\">:</span> <span class=\"n\">Thing</span>\n<span class=\"bp\">|</span> <span class=\"n\">MyCup</span> <span class=\"o\">:</span> <span class=\"n\">Thing</span> <span class=\"bp\">→</span> <span class=\"n\">Thing</span> <span class=\"bp\">→</span> <span class=\"n\">Thing</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Thing</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">works</span> <span class=\"o\">:</span> <span class=\"n\">Thing</span> <span class=\"bp\">→</span> <span class=\"n\">String</span>\n<span class=\"bp\">|</span> <span class=\"n\">Bike</span> <span class=\"bp\">=&gt;</span> <span class=\"s2\">\"This is a bike!\"</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">MyCup</span> <span class=\"n\">t1</span> <span class=\"n\">t2</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"s2\">\"This are two things: \"</span> <span class=\"bp\">++</span> <span class=\"n\">works</span> <span class=\"n\">t1</span> <span class=\"bp\">++</span> <span class=\"n\">works</span> <span class=\"n\">t2</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Union</span> <span class=\"n\">Thing</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">MyCup</span><span class=\"o\">⟩</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">Bike</span> <span class=\"bp\">∪</span> <span class=\"n\">Bike</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">broken</span> <span class=\"o\">:</span> <span class=\"n\">Thing</span> <span class=\"bp\">→</span> <span class=\"n\">String</span>\n<span class=\"bp\">|</span> <span class=\"n\">Thing.Bike</span> <span class=\"bp\">=&gt;</span> <span class=\"s2\">\"This is a bike!\"</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">t1</span> <span class=\"bp\">∪</span> <span class=\"n\">t2</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"s2\">\"This are two things: \"</span> <span class=\"bp\">++</span> <span class=\"n\">broken</span> <span class=\"n\">t1</span> <span class=\"bp\">++</span> <span class=\"n\">broken</span> <span class=\"n\">t2</span>\n<span class=\"c1\">-- error:</span>\n<span class=\"c1\">-- invalid pattern, constructor or constant marked with '[match_pattern]' expected [10 times]</span>\n</code></pre></div>",
        "id": 396882098,
        "sender_full_name": "Malvin Gattinger",
        "timestamp": 1697455782
    },
    {
        "content": "<p>I think you'd need <code>attribute [match_pattern] Union.union</code> in core, which obvious you can't add</p>",
        "id": 396882953,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1697456107
    },
    {
        "content": "<p>(it's not legal to add that attribute in a later file)</p>",
        "id": 396882978,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1697456120
    },
    {
        "content": "<p>Ah, thanks. Is there a reason that this is not done in core?</p>",
        "id": 396898845,
        "sender_full_name": "Malvin Gattinger",
        "timestamp": 1697461652
    },
    {
        "content": "<p>Matching like that seems very ill-defined in general</p>",
        "id": 396899014,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1697461690
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"422703\">Malvin Gattinger</span> has marked this topic as resolved.</p>",
        "id": 396902556,
        "sender_full_name": "Notification Bot",
        "timestamp": 1697462786
    },
    {
        "content": "<p>I think it would be a reasonable feature request to allow <code>match_pattern</code> to be applied locally, rather than requiring it be global and in core</p>",
        "id": 396921674,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1697468204
    },
    {
        "content": "<p>I believe <code>+</code> is already labelled as such a pattern</p>",
        "id": 396921712,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1697468219
    }
]