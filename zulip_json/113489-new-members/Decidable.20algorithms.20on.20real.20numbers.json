[
    {
        "content": "<p>I was a bit surprised to learn that equalities and inequalities on real numbers are undecidable, but it makes sense that infinite strings of digits cannot be compared. However does this mean that any algorithm that operates on real numbers in this way is undecidable? If so, how would an algorithm that claims to work on real numbers (for example linear programming) be implemented in Lean?</p>",
        "id": 376051200,
        "sender_full_name": "Rekkyn",
        "timestamp": 1689605137
    },
    {
        "content": "<p>So, you can actually look into the <a href=\"https://en.m.wikipedia.org/wiki/Tarski%E2%80%93Seidenberg_theorem\">Tarski–Seidenberg theorem\n </a>, whose converse gives us decidability on real-closed fields. So, all  equalities and inequalities on algebraic integers is decidable</p>",
        "id": 376053801,
        "sender_full_name": "Michael Wahlberg",
        "timestamp": 1689605576
    },
    {
        "content": "<p>That's interesting, thanks! Is there an implementation of decidable equality of algebraic integers in Lean?</p>",
        "id": 376060688,
        "sender_full_name": "Rekkyn",
        "timestamp": 1689606597
    },
    {
        "content": "<p>We have<code>AlgebraicClosure Int</code> (<a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=AlgebraicClosure#doc\">docs#AlgebraicClosure</a>), but I suspect it's useless for computation</p>",
        "id": 376069239,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1689607895
    },
    {
        "content": "<p>Is there an idiomatic way of writing algorithms on \"real\" numbers (or some other type that is close enough) in Lean or has that not come up much yet?</p>",
        "id": 376088799,
        "sender_full_name": "Rekkyn",
        "timestamp": 1689610176
    },
    {
        "content": "<p>Is <code>Float</code> close enough for you?</p>",
        "id": 376097034,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1689611301
    },
    {
        "content": "<p>You can't prove anything about Lean's <code>Float</code>, so probably not. (Also floats are a very very small portion of the computable reals, and they don't even form a field.)</p>",
        "id": 376097861,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1689611478
    },
    {
        "content": "<p>I'm interested in this topic, and would like to join the implementation if there are enough resources. However I think there should be a concrete definition of semi/computability of functions. So this can be implemented after algorithms are formally defined.<br>\nMy question here is: Is there a progress on formal definition of algorithms? I know there is a thread talking about it, but didn't join the talk.</p>",
        "id": 376211181,
        "sender_full_name": "Jihoon Hyun",
        "timestamp": 1689648925
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"574112\">Jihoon Hyun</span> <a href=\"#narrow/stream/113489-new-members/topic/Decidable.20algorithms.20on.20real.20numbers/near/376211181\">said</a>:</p>\n<blockquote>\n<p>I'm interested in this topic, and would like to join the implementation if there are enough resources. However I think there should be a concrete definition of semi/computability of functions. So this can be implemented after algorithms are formally defined.<br>\nMy question here is: Is there a progress on formal definition of algorithms? I know there is a thread talking about it, but didn't join the talk.</p>\n</blockquote>\n<p>You wanna collaborate?</p>",
        "id": 376213569,
        "sender_full_name": "Michael Wahlberg",
        "timestamp": 1689650028
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"575824\">Michael Wahlberg</span> <a href=\"#narrow/stream/113489-new-members/topic/Decidable.20algorithms.20on.20real.20numbers/near/376213569\">말함</a>:</p>\n<blockquote>\n<p>You wanna collaborate?</p>\n</blockquote>\n<p>sure!</p>",
        "id": 376214097,
        "sender_full_name": "Jihoon Hyun",
        "timestamp": 1689650233
    }
]