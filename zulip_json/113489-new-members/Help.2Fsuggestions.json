[
    {
        "content": "<p>I am stuck at a certain part of a proof and can't figure out how to get past this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">List</span>\n\n<span class=\"c1\">-- Uncomment to test different values</span>\n<span class=\"c1\">-- #eval (fun a n l =&gt;  map (fun x =&gt; decide (n ∣ x) || List.any l fun b =&gt; decide (b ∣ x)) (range' (1 + n * prod l * (a + 1)) (n * prod l)) = map (fun x =&gt; decide (n ∣ x) || List.any l fun b =&gt; decide (b ∣ x)) (range' 1 (n * prod l))) 0 0 []</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n    <span class=\"o\">:</span> <span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">decide</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">∣</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">||</span> <span class=\"n\">List.any</span> <span class=\"n\">l</span> <span class=\"k\">fun</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">decide</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">∣</span> <span class=\"n\">x</span><span class=\"o\">))</span>\n      <span class=\"o\">(</span><span class=\"n\">range'</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"n\">prod</span> <span class=\"n\">l</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"n\">prod</span> <span class=\"n\">l</span><span class=\"o\">))</span> <span class=\"bp\">=</span>\n      <span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">decide</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">∣</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">||</span> <span class=\"n\">List.any</span> <span class=\"n\">l</span> <span class=\"k\">fun</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">decide</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">∣</span> <span class=\"n\">x</span><span class=\"o\">))</span>\n      <span class=\"o\">(</span><span class=\"n\">range'</span> <span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"n\">prod</span> <span class=\"n\">l</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>Now, I believe this to be true since <code>n</code> and any element of <code>l</code> will be a factor in <code>n * prod l</code> and therefore both the <code>range'</code>s will give the same pattern  from what I can see due to the fact that  each factor will show up in these <code>range'</code>s at prescribed locations due to their multiples within this range.  I don't know how to show this though in a concrete way (by concrete I mean I don't know exactly what the pattern of <code>true</code> and <code>false</code>s will be in the resulting list since <code>l</code> is arbitrary) but I believe this to be a true statement that should be able to be proved and wondering if anyone has any ideas on how to break up the form of this statement into something that can actually show this?  </p>\n<p>It might be obvious but I am just not seeing how to progress from here due to my ignorance.  I have tried many different approaches such as using <code>zipWith (or \\. \\. )</code> to try and overlay the different patterns but either I messed up somehow or this wasn't the right approach.  Please someone enlighten me and save me from banging my head on this for any longer <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span> <span aria-label=\"working on it\" class=\"emoji emoji-1f6e0\" role=\"img\" title=\"working on it\">:working_on_it:</span></p>\n<p>I am not looking for anyone to fill in the proof but if anyone has a good idea about how to potentially progress from here in the right direction, that would be greatly appreciated.  Currently I am trying to see if there is a way to write some lemmas of list membership in a form that I could use to progress from the above position but at this point I am just trying to throw the kitchen sink at the problem instead of knowing what should be done.</p>",
        "id": 389252265,
        "sender_full_name": "Newell Jensen",
        "timestamp": 1693937055
    },
    {
        "content": "<p>What about spiting it up like this?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">bar</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">decide</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">∣</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">||</span> <span class=\"n\">List.any</span> <span class=\"n\">l</span> <span class=\"k\">fun</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">decide</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">∣</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">bar_identity</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n  <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">bar</span> <span class=\"n\">n</span> <span class=\"n\">l</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">bar</span> <span class=\"n\">n</span> <span class=\"n\">l</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span>  <span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"n\">prod</span> <span class=\"n\">l</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">list_map_shift</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">c</span><span class=\"o\">))</span>\n  <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">start</span> <span class=\"n\">step</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n  <span class=\"o\">:</span> <span class=\"n\">map</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">range'</span> <span class=\"n\">start</span> <span class=\"n\">step</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">map</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">range'</span> <span class=\"o\">(</span><span class=\"n\">start</span> <span class=\"bp\">+</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"n\">step</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n\n<span class=\"kd\">theorem</span> <span class=\"n\">foo'</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n  <span class=\"o\">:</span> <span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"n\">bar</span> <span class=\"n\">n</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">range'</span> <span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"n\">prod</span> <span class=\"n\">l</span><span class=\"o\">))</span>\n    <span class=\"bp\">=</span>\n    <span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"n\">bar</span> <span class=\"n\">n</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">range'</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"n\">prod</span> <span class=\"n\">l</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"n\">prod</span> <span class=\"n\">l</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span>\n  <span class=\"n\">apply</span> <span class=\"n\">list_map_shift</span> <span class=\"o\">(</span><span class=\"n\">bar</span> <span class=\"n\">n</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"n\">prod</span> <span class=\"n\">l</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">bar_identity</span> <span class=\"n\">n</span> <span class=\"n\">l</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"n\">l</span> <span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"n\">prod</span> <span class=\"n\">l</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>both <code>bar_identity</code> and <code>list_map_shift</code> should be provable</p>",
        "id": 389264931,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1693941823
    },
    {
        "content": "<p>Thanks Tomas, will try that.  I appreciate the feedback.</p>",
        "id": 389265232,
        "sender_full_name": "Newell Jensen",
        "timestamp": 1693941949
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"346070\">@Tomas Skrivan</span>  Took me a bit to get it but thanks again for the hint.  Cheers.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">List</span> <span class=\"n\">Function</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">bar</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">decide</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">∣</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">||</span> <span class=\"n\">List.any</span> <span class=\"n\">l</span> <span class=\"k\">fun</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">decide</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">∣</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">l1</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">n</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">∣</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"n\">prod</span> <span class=\"n\">l</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">∣</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">match</span> <span class=\"n\">a</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">zero_add</span><span class=\"o\">,</span> <span class=\"n\">mul_one</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n    <span class=\"n\">exact</span> <span class=\"n\">Iff.mp</span> <span class=\"o\">(</span><span class=\"n\">Nat.dvd_add_left</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">Nat.dvd_mul_right</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">prod</span> <span class=\"n\">l</span><span class=\"o\">))</span> <span class=\"n\">h</span>\n  <span class=\"bp\">|</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">have</span> <span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">∣</span> <span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"n\">prod</span> <span class=\"n\">l</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mul_assoc</span><span class=\"o\">]</span>\n      <span class=\"n\">exact</span> <span class=\"n\">Nat.dvd_mul_right</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">prod</span> <span class=\"n\">l</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span>\n    <span class=\"n\">exact</span> <span class=\"n\">Iff.mp</span> <span class=\"o\">(</span><span class=\"n\">Nat.dvd_add_left</span> <span class=\"n\">h1</span><span class=\"o\">)</span> <span class=\"n\">h</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">l2</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">n</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">∣</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">∣</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"n\">prod</span> <span class=\"n\">l</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">match</span> <span class=\"n\">a</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">zero_add</span><span class=\"o\">,</span> <span class=\"n\">mul_one</span><span class=\"o\">]</span>\n    <span class=\"n\">exact</span> <span class=\"n\">Nat.dvd_add</span> <span class=\"n\">h</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">Nat.dvd_mul_right</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">prod</span> <span class=\"n\">l</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">have</span> <span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">∣</span> <span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"n\">prod</span> <span class=\"n\">l</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mul_assoc</span><span class=\"o\">]</span>\n      <span class=\"n\">exact</span> <span class=\"n\">Nat.dvd_mul_right</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">prod</span> <span class=\"n\">l</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span>\n    <span class=\"n\">exact</span> <span class=\"n\">Nat.dvd_add</span> <span class=\"n\">h</span> <span class=\"n\">h1</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">l3</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">n</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n    <span class=\"o\">:</span> <span class=\"n\">decide</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">∣</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"n\">prod</span> <span class=\"n\">l</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"bp\">↔</span> <span class=\"n\">decide</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">∣</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">constructor</span>\n  <span class=\"bp\">·</span> <span class=\"n\">intro</span> <span class=\"n\">h</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">decide_eq_true_eq</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"bp\">*</span>\n    <span class=\"n\">exact</span> <span class=\"n\">l1</span> <span class=\"n\">h</span>\n  <span class=\"bp\">·</span> <span class=\"n\">intro</span> <span class=\"n\">h</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">decide_eq_true_eq</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"bp\">*</span>\n    <span class=\"n\">exact</span> <span class=\"n\">l2</span> <span class=\"n\">h</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">l4</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">n</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n    <span class=\"o\">:</span> <span class=\"n\">decide</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">∣</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"n\">prod</span> <span class=\"n\">l</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"n\">decide</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">∣</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"n\">h1</span> <span class=\"o\">:=</span> <span class=\"n\">l3</span> <span class=\"n\">a</span> <span class=\"n\">n</span> <span class=\"n\">x</span> <span class=\"n\">l</span>\n  <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"bp\">*</span>\n  <span class=\"n\">exact</span> <span class=\"n\">h1</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">l5</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">n</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">any</span> <span class=\"n\">l</span> <span class=\"k\">fun</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">decide</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">∣</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"n\">prod</span> <span class=\"n\">l</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))))</span>\n    <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">any</span> <span class=\"n\">l</span> <span class=\"k\">fun</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">decide</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">∣</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">Nat.isUnit_iff</span><span class=\"o\">,</span> <span class=\"n\">any_eq_true</span><span class=\"o\">,</span> <span class=\"n\">decide_eq_true_eq</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">hb</span><span class=\"o\">,</span> <span class=\"n\">hbd</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">h</span>\n  <span class=\"n\">simp</span><span class=\"bp\">;</span> <span class=\"n\">use</span> <span class=\"n\">b</span>\n  <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">hb</span><span class=\"o\">,</span> <span class=\"n\">Iff.mp</span> <span class=\"o\">(</span><span class=\"n\">Nat.dvd_add_left</span> <span class=\"o\">(</span><span class=\"n\">Dvd.dvd.mul_right</span> <span class=\"o\">(</span><span class=\"n\">Dvd.dvd.mul_left</span> <span class=\"o\">(</span><span class=\"n\">dvd_prod</span> <span class=\"n\">hb</span><span class=\"o\">)</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)))</span> <span class=\"n\">hbd</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">l6</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">n</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">any</span> <span class=\"n\">l</span> <span class=\"k\">fun</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">decide</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">∣</span> <span class=\"n\">x</span><span class=\"o\">)))</span>\n    <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">any</span> <span class=\"n\">l</span> <span class=\"k\">fun</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">decide</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">∣</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"n\">prod</span> <span class=\"n\">l</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"bp\">*</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">hb</span><span class=\"o\">,</span> <span class=\"n\">hbd</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">h</span>\n  <span class=\"n\">use</span> <span class=\"n\">b</span>\n  <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">hb</span><span class=\"o\">,</span> <span class=\"n\">Nat.dvd_add</span> <span class=\"n\">hbd</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">Dvd.dvd.mul_right</span> <span class=\"o\">(</span><span class=\"n\">Dvd.dvd.mul_left</span> <span class=\"o\">(</span><span class=\"n\">dvd_prod</span> <span class=\"n\">hb</span><span class=\"o\">)</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)⟩</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">l7</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">n</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n    <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">any</span> <span class=\"n\">l</span> <span class=\"k\">fun</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">decide</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">∣</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"n\">prod</span> <span class=\"n\">l</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)))</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"n\">any</span> <span class=\"n\">l</span> <span class=\"k\">fun</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">decide</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">∣</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨</span><span class=\"k\">fun</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">l5</span> <span class=\"n\">a</span> <span class=\"n\">n</span> <span class=\"n\">x</span> <span class=\"n\">l</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"k\">fun</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">l6</span> <span class=\"n\">a</span> <span class=\"n\">n</span> <span class=\"n\">x</span> <span class=\"n\">l</span> <span class=\"n\">h</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">l8</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">n</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n    <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">any</span> <span class=\"n\">l</span> <span class=\"k\">fun</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">decide</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">∣</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"n\">prod</span> <span class=\"n\">l</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)))</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">any</span> <span class=\"n\">l</span> <span class=\"k\">fun</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">decide</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">∣</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"n\">l7</span> <span class=\"n\">a</span> <span class=\"n\">n</span> <span class=\"n\">x</span> <span class=\"n\">l</span>\n  <span class=\"n\">exact</span> <span class=\"n\">Iff.mpr</span> <span class=\"n\">Bool.eq_iff_iff</span> <span class=\"n\">h</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">bar_identity</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n    <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">bar</span> <span class=\"n\">n</span> <span class=\"n\">l</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"n\">prod</span> <span class=\"n\">l</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"n\">bar</span> <span class=\"n\">n</span> <span class=\"n\">l</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">a</span> <span class=\"n\">x</span>\n  <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">bar</span><span class=\"o\">]</span>\n  <span class=\"k\">have</span> <span class=\"n\">h1</span> <span class=\"o\">:=</span> <span class=\"n\">l4</span> <span class=\"n\">a</span> <span class=\"n\">n</span> <span class=\"n\">x</span> <span class=\"n\">l</span>\n  <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">h1</span><span class=\"o\">]</span>\n  <span class=\"k\">have</span> <span class=\"n\">h2</span> <span class=\"o\">:=</span> <span class=\"n\">l8</span> <span class=\"n\">a</span> <span class=\"n\">n</span> <span class=\"n\">x</span> <span class=\"n\">l</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h2</span><span class=\"o\">]</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">list_map_shift</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">start</span> <span class=\"n\">step</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n    <span class=\"o\">:</span>  <span class=\"n\">map</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">range'</span> <span class=\"o\">(</span><span class=\"n\">start</span> <span class=\"bp\">+</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"n\">step</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">map</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">range'</span> <span class=\"n\">start</span> <span class=\"n\">step</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">match</span> <span class=\"n\">step</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">simp</span>\n  <span class=\"bp\">|</span> <span class=\"n\">s</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">simp</span>\n    <span class=\"n\">constructor</span>\n    <span class=\"bp\">·</span> <span class=\"n\">specialize</span> <span class=\"n\">hf</span> <span class=\"n\">start</span>\n      <span class=\"n\">exact</span> <span class=\"n\">hf</span>\n    <span class=\"bp\">·</span> <span class=\"k\">have</span> <span class=\"n\">ih</span> <span class=\"o\">:=</span> <span class=\"n\">list_map_shift</span> <span class=\"n\">f</span> <span class=\"n\">c</span> <span class=\"n\">hf</span> <span class=\"n\">l</span> <span class=\"o\">(</span><span class=\"n\">start</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">s</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">add_assoc</span><span class=\"o\">,</span> <span class=\"n\">add_comm</span> <span class=\"n\">c</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">add_assoc</span><span class=\"o\">]</span>\n      <span class=\"n\">exact</span> <span class=\"n\">ih</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">foo'</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n  <span class=\"o\">:</span> <span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"n\">bar</span> <span class=\"n\">n</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">range'</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"n\">prod</span> <span class=\"n\">l</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"n\">prod</span> <span class=\"n\">l</span><span class=\"o\">))</span> <span class=\"bp\">=</span>\n    <span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"n\">bar</span> <span class=\"n\">n</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">range'</span> <span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"n\">prod</span> <span class=\"n\">l</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">exact</span> <span class=\"n\">list_map_shift</span> <span class=\"o\">(</span><span class=\"n\">bar</span> <span class=\"n\">n</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"n\">prod</span> <span class=\"n\">l</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">bar_identity</span> <span class=\"n\">n</span> <span class=\"n\">l</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"n\">l</span> <span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"n\">prod</span> <span class=\"n\">l</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 389342520,
        "sender_full_name": "Newell Jensen",
        "timestamp": 1693979282
    },
    {
        "content": "<p>Good job, nicely done!</p>",
        "id": 389343348,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1693979787
    }
]