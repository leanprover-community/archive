[
    {
        "content": "<p>Suppose I have a pre-defined <code>Prop</code> that I have no control over (i cant redeclare it as reducible/<code>abbrev</code> e.g.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">the_predefd_prop</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span><span class=\"bp\">&lt;</span><span class=\"mi\">2</span>\n</code></pre></div>\n<p>how do I make the simp (or some other) tactic prove the following?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">the_predefd_prop</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span>\n<span class=\"c1\">-- fail unless above def is @[reducible]</span>\n</code></pre></div>\n<p>In other words, is there a general way to force reduction of the goal fron within tactic mode rather than a priori reduction when <code>def</code>ining it</p>",
        "id": 369881498,
        "sender_full_name": "Somo S.",
        "timestamp": 1687835230
    },
    {
        "content": "<p><code>by simp [the_predefd_prop]</code>.</p>",
        "id": 369884930,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1687835861
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"582386\">@Somo S.</span>, just making sure you see this, as I moved it to <code>new members</code> at the same time as answering! :-)</p>",
        "id": 369885202,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1687835907
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> <a href=\"#narrow/stream/113489-new-members/topic/proving.20pre-defined.20prop/near/369884930\">said</a>:</p>\n<blockquote>\n<p><code>by simp [the_predefd_prop]</code>.</p>\n</blockquote>\n<p>Sorry, I think I over-simplified my actual problem. Let me try again... </p>\n<p>How do you achieve the same thing when you have the following scenario?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">S</span> <span class=\"n\">where</span>\n  <span class=\"n\">the_predefd_prop</span>  <span class=\"o\">:=</span> <span class=\"mi\">1</span><span class=\"bp\">&lt;</span><span class=\"mi\">2</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">S</span> <span class=\"o\">:=</span> <span class=\"o\">{}</span>\n\n<span class=\"kd\">example</span>  <span class=\"o\">:</span> <span class=\"n\">x.the_predefd_prop</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">x.the_predefd_prop</span><span class=\"o\">]</span>\n<span class=\"c1\">-- ERROR: invalid 'simp', proposition expected</span>\n</code></pre></div>",
        "id": 369892904,
        "sender_full_name": "Somo S.",
        "timestamp": 1687837802
    },
    {
        "content": "<p><code>simp [x]</code></p>",
        "id": 369893670,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1687838080
    },
    {
        "content": "<p>okay thanks alot! that works</p>",
        "id": 369895461,
        "sender_full_name": "Somo S.",
        "timestamp": 1687838678
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"582386\">Somo S.</span> has marked this topic as resolved.</p>",
        "id": 369895737,
        "sender_full_name": "Notification Bot",
        "timestamp": 1687838777
    }
]