[
    {
        "content": "<p>Or otherwise what incantations are required to make this work?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.Field.Basic</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">F</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span>\n<span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">F</span><span class=\"o\">]</span>\n\n<span class=\"kd\">example</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">3</span><span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 406800590,
        "sender_full_name": "Arien Malec",
        "timestamp": 1702054486
    },
    {
        "content": "<p>You can add <code>[NeZero (3 : F)]</code></p>",
        "id": 406800897,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1702054604
    },
    {
        "content": "<p>Or <code>[CharZero F]</code> if you want all numerals to be non-zero</p>",
        "id": 406800955,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1702054624
    },
    {
        "content": "<p><code>[CharZero F]</code> is perfect. <code>[NeZero (3: F)]</code> feels like cheating :-)</p>",
        "id": 406802173,
        "sender_full_name": "Arien Malec",
        "timestamp": 1702054937
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"542196\">Arien Malec</span> <a href=\"#narrow/stream/113489-new-members/topic/How.20to.20add.20NeZero.20to.20arbitrary.20field.3F/near/406802173\">said</a>:</p>\n<blockquote>\n<p><code>[CharZero F]</code> is perfect. <code>[NeZero (3: F)]</code> feels like cheating :-)</p>\n</blockquote>\n<p>I mean the first one implies the second :)</p>",
        "id": 406802601,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1702055050
    },
    {
        "content": "<p>This is for an Axler proof</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">v</span> <span class=\"n\">w</span><span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">}:</span> <span class=\"bp\">∃</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">v</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"mi\">3</span><span class=\"o\">:</span> <span class=\"n\">F</span> <span class=\"o\">)</span><span class=\"bp\">•</span><span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">w</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">use</span> <span class=\"o\">((</span><span class=\"mi\">3</span><span class=\"bp\">⁻¹</span><span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"bp\">•</span> <span class=\"o\">(</span><span class=\"n\">w</span> <span class=\"bp\">-</span> <span class=\"n\">v</span><span class=\"o\">))</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">smul_smul</span><span class=\"o\">,</span> <span class=\"n\">mul_inv_cancel</span><span class=\"o\">,</span> <span class=\"n\">one_smul</span><span class=\"o\">,</span> <span class=\"n\">add_comm</span><span class=\"o\">,</span> <span class=\"n\">sub_add_cancel</span><span class=\"o\">]</span>\n  <span class=\"n\">exact</span> <span class=\"n\">three_ne_zero</span>\n</code></pre></div>\n<p>where what we want is really the assertion that numerals act like numerals.... For extra credit, is there an induction or otherwise on an arbitrary field where I can show that <code>example {v w: V} {a: F}: ∃x, v + a•x = w</code> breaks down to cases where <code>a = 0</code> and <code>a \\ne 0</code>?</p>",
        "id": 406803364,
        "sender_full_name": "Arien Malec",
        "timestamp": 1702055348
    },
    {
        "content": "<p>(it's weird how quickly I forget in Lean that excluded middle is a thing).</p>",
        "id": 406804244,
        "sender_full_name": "Arien Malec",
        "timestamp": 1702055684
    },
    {
        "content": "<p>I guess that's also the same incantation and <a class=\"stream-topic\" data-stream-id=\"288720\" href=\"/#narrow/stream/288720-mathlib-documentation/topic/NeZero.2Eeq_zero_or_NeZero\">#mathlib documentation &gt; NeZero.eq_zero_or_NeZero</a></p>",
        "id": 406804743,
        "sender_full_name": "Arien Malec",
        "timestamp": 1702055869
    },
    {
        "content": "<p><code>by_cases ha : a = 0</code> will split you into two cases deoending on whether a is 0 or not (and probably something like <code>obtain \\&lt;rfl, ha\\&gt; := eq_or_ne a 0</code> will do it more efficiently if I got it right)</p>",
        "id": 406815572,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1702059810
    },
    {
        "content": "<p>In other news, the whole proof doesn't work if <code>a = 0</code> :--)</p>",
        "id": 406817945,
        "sender_full_name": "Arien Malec",
        "timestamp": 1702060697
    },
    {
        "content": "<p><code>obtain rfl|ha := ...</code></p>",
        "id": 406820154,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1702061757
    }
]