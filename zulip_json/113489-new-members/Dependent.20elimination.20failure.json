[
    {
        "content": "<p>I have the following code:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Vector</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">nil</span> <span class=\"o\">:</span> <span class=\"n\">Vector</span> <span class=\"n\">α</span> <span class=\"mi\">0</span>\n  <span class=\"bp\">|</span> <span class=\"n\">cons</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">Vector</span> <span class=\"n\">α</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">Vector</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">Nat.succ</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n\n<span class=\"kd\">infix</span><span class=\"o\">:</span><span class=\"mi\">67</span> <span class=\"s2\">\" :: \"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Vector.cons</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">Ty</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">string</span>\n\n<span class=\"n\">abbrev</span> <span class=\"n\">Context</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span> <span class=\"n\">Vector</span> <span class=\"n\">Ty</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">Any</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">Ty</span> <span class=\"bp\">→</span> <span class=\"n\">Context</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">here</span> <span class=\"o\">:</span> <span class=\"n\">Any</span> <span class=\"mi\">0</span> <span class=\"n\">τ</span> <span class=\"o\">(</span><span class=\"n\">τ</span> <span class=\"o\">::</span> <span class=\"bp\">Γ</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">there</span> <span class=\"o\">:</span> <span class=\"n\">Any</span> <span class=\"n\">i</span> <span class=\"n\">τ₂</span> <span class=\"bp\">Γ</span> <span class=\"bp\">→</span> <span class=\"n\">Any</span> <span class=\"n\">i.succ</span> <span class=\"n\">τ₂</span> <span class=\"o\">(</span><span class=\"n\">τ₁</span> <span class=\"o\">::</span> <span class=\"bp\">Γ</span><span class=\"o\">)</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">any_injective</span> <span class=\"o\">:</span>\n  <span class=\"n\">Any</span> <span class=\"n\">i</span> <span class=\"n\">τ</span> <span class=\"bp\">Γ</span> <span class=\"bp\">→</span>\n  <span class=\"n\">Any</span> <span class=\"n\">i</span> <span class=\"n\">τ'</span> <span class=\"bp\">Γ</span> <span class=\"bp\">→</span>\n  <span class=\"n\">τ</span> <span class=\"bp\">=</span> <span class=\"n\">τ'</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">a</span>\n  <span class=\"n\">induction</span> <span class=\"n\">a</span> <span class=\"n\">generalizing</span> <span class=\"n\">τ'</span> <span class=\"k\">with</span> <span class=\"n\">intro</span> <span class=\"n\">a'</span>\n  <span class=\"bp\">|</span> <span class=\"n\">here</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">cases</span> <span class=\"n\">a'</span><span class=\"bp\">;</span> <span class=\"n\">rfl</span>\n  <span class=\"bp\">|</span> <span class=\"n\">there</span> <span class=\"n\">a</span> <span class=\"n\">ih</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"k\">match</span> <span class=\"n\">a'</span> <span class=\"k\">with</span>\n      <span class=\"bp\">|</span> <span class=\"n\">Any.there</span> <span class=\"n\">a'</span> <span class=\"bp\">=&gt;</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>I'm trying to prove injectivity for <code>Any</code> and have a couple of questions:</p>\n<ol>\n<li>Why when I try to match on a', I get the following error and how can I resolve it?</li>\n</ol>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">tactic</span> <span class=\"bp\">'</span><span class=\"n\">cases'</span> <span class=\"n\">failed</span><span class=\"o\">,</span> <span class=\"n\">nested</span> <span class=\"n\">error</span><span class=\"o\">:</span>\n<span class=\"n\">dependent</span> <span class=\"n\">elimination</span> <span class=\"n\">failed</span><span class=\"o\">,</span> <span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">solve</span> <span class=\"n\">equation</span>\n  <span class=\"n\">i</span><span class=\"bp\">✝¹.</span><span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">i</span><span class=\"bp\">✝.</span><span class=\"mi\">1</span>\n<span class=\"n\">at</span> <span class=\"n\">case</span> <span class=\"bp\">@</span><span class=\"n\">Any.there</span> <span class=\"n\">after</span> <span class=\"n\">processing</span>\n</code></pre></div>\n<ol start=\"2\">\n<li>Is there somewhere in the tactic state that I can see the constraints the compiler has? For example, I would expect in the above snippet that the unnamed <code>i✝</code> in the <code>Any.there</code> case would relate to the original <code>i</code> like <code>i = i✝.succ</code>. I've been experimenting a lot in Agda and am used to being able to see such constraints.</li>\n</ol>",
        "id": 340278095,
        "sender_full_name": "sgcs",
        "timestamp": 1678257560
    },
    {
        "content": "<p>My understanding of the basic issue is that it's wanting to get an equality between a variable and something else when processing indices to types, and with <code>i.1 = j.1</code> it's not able to go any further. One option is to do <code>cases</code> on one of these variables first, and another is to generalize.</p>\n<p>I didn't know about <code>induction ... with intro ...</code> syntax (is it new? it looks like you can put a single tactic after <code>with</code> that applies to all cases before using the <code>|</code> clauses); in any case, you can simplify it a bit by changing your theorem to take named arguments.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">any_injective</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Any</span> <span class=\"n\">i</span> <span class=\"n\">τ</span> <span class=\"bp\">Γ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a'</span> <span class=\"o\">:</span> <span class=\"n\">Any</span> <span class=\"n\">i</span> <span class=\"n\">τ'</span> <span class=\"bp\">Γ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">τ</span> <span class=\"bp\">=</span> <span class=\"n\">τ'</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span>\n  <span class=\"n\">induction</span> <span class=\"n\">a</span> <span class=\"n\">generalizing</span> <span class=\"n\">τ'</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">here</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">cases</span> <span class=\"n\">a'</span><span class=\"bp\">;</span> <span class=\"n\">rfl</span>\n  <span class=\"bp\">|</span> <span class=\"n\">there</span> <span class=\"n\">a</span> <span class=\"n\">ih</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"c1\">-- we want to give `i` a name:</span>\n      <span class=\"n\">rename_i</span> <span class=\"n\">x</span> <span class=\"n\">i</span> <span class=\"n\">τ₂</span> <span class=\"bp\">Γ</span> <span class=\"n\">τ₁</span>\n      <span class=\"n\">cases</span> <span class=\"n\">i</span> <span class=\"c1\">-- option 1</span>\n      <span class=\"n\">generalize</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">Fin.succ</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">j</span> <span class=\"n\">at</span> <span class=\"n\">a'</span> <span class=\"c1\">-- option 2</span>\n      <span class=\"k\">match</span> <span class=\"n\">a'</span> <span class=\"k\">with</span>\n      <span class=\"bp\">|</span> <span class=\"n\">Any.there</span> <span class=\"n\">a'</span> <span class=\"bp\">=&gt;</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 340317360,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1678270625
    }
]