[
    {
        "content": "<p>The following fails with a deterministic timeout:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.complex.basic</span>\n<span class=\"kn\">open</span> <span class=\"n\">complex</span>\n\n<span class=\"k\">#reduce</span> <span class=\"o\">(</span><span class=\"n\">complex.mk</span> <span class=\"mi\">2</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">complex.mk</span> <span class=\"mi\">4</span> <span class=\"mi\">5</span><span class=\"o\">)</span>\n<span class=\"k\">#reduce</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"mi\">3</span> <span class=\"bp\">*</span> <span class=\"n\">I</span>\n</code></pre></div>\n<p>If I use <code>#eval</code> instead, it says <code>result type does not have an instance of type class 'has_repr', dumping internal representation</code>.</p>\n<p>Also, <code>simp</code> and <code>norm_num</code> don't seem to know about complex numbers; I need to use <code>ext</code> to turn it into two similar problems involving reals:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.complex.basic</span>\n<span class=\"kn\">open</span> <span class=\"n\">complex</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"mi\">3</span> <span class=\"bp\">*</span> <span class=\"n\">I</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">complex.mk</span> <span class=\"mi\">2</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span><span class=\"n\">ext</span><span class=\"bp\">;</span> <span class=\"n\">simp</span><span class=\"o\">}</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">complex.mk</span> <span class=\"mi\">2</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">complex.mk</span> <span class=\"mi\">4</span> <span class=\"mi\">5</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">complex.mk</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">7</span><span class=\"o\">)</span> <span class=\"mi\">22</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span><span class=\"n\">ext</span><span class=\"bp\">;</span> <span class=\"n\">norm_num</span><span class=\"o\">}</span>\n</code></pre></div>\n<p>Is there a one-tactic proof for such simple examples?</p>",
        "id": 342549629,
        "sender_full_name": "Martin C. Martin",
        "timestamp": 1679056863
    },
    {
        "content": "<p>Using <code>complex.mk</code> feels a bit low-tech to me, proving things about <code>3 + 2 * I</code> seems more natural.<br>\nProbably these calculations are in scope for <code>norm_num</code> but someone would have to write an extension for it I guess.<br>\n<code>ext; norm_num</code> is pretty quick to write so there doesn't seem to be too pressing a need for it though</p>",
        "id": 342563388,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1679060056
    },
    {
        "content": "<p>And in general as soon as you get to sufficiently complicated objects (e.g. reals) <code>#reduce</code> and <code>#eval</code> aren't so useful (how would you print an arbitrary real number!), there are many threads about this here but thats why we added commands like <code>#norm_num</code> for people to get this \"calculator style\" output</p>",
        "id": 342563777,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1679060157
    },
    {
        "content": "<p>Thanks!  <code>#norm_num</code> doesn't seem to actually do the multiplication though, it just returns it's input:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">#</span><span class=\"n\">norm_num</span> <span class=\"o\">(</span><span class=\"n\">complex.mk</span> <span class=\"mi\">2</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">complex.mk</span> <span class=\"mi\">4</span> <span class=\"mi\">5</span><span class=\"o\">)</span>\n<span class=\"bp\">#</span><span class=\"n\">norm_num</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"mi\">3</span> <span class=\"bp\">*</span> <span class=\"n\">I</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">4</span> <span class=\"bp\">+</span> <span class=\"mi\">5</span> <span class=\"bp\">*</span> <span class=\"n\">I</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 342570712,
        "sender_full_name": "Martin C. Martin",
        "timestamp": 1679061826
    },
    {
        "content": "<p>Glad to hear that <code>ext; norm_num</code> is canonical in this case, I'll use that.</p>",
        "id": 342571066,
        "sender_full_name": "Martin C. Martin",
        "timestamp": 1679061921
    },
    {
        "content": "<p><code>#norm_num</code> will just show you what norm num does, so without a plugin being written it indeed doesn't work well. I just mean in general for this sort of explicit evaluation thing that may serve you better than <code>#reduce</code></p>",
        "id": 342573134,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1679062395
    }
]