[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"354934\">@David Thrane Christiansen</span>, in <a href=\"https://leanprover.github.io/functional_programming_in_lean/monads/class.html#the-option-monad-contract\">this exercise in Functional Programming in Lean</a>, you give an example</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Monad</span> <span class=\"n\">Option</span> <span class=\"n\">where</span>\n  <span class=\"n\">pure</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">some</span> <span class=\"n\">x</span>\n  <span class=\"n\">bind</span> <span class=\"n\">opt</span> <span class=\"n\">next</span> <span class=\"o\">:=</span> <span class=\"n\">none</span>\n</code></pre></div>\n<p>Lean <a href=\"https://lean.math.hhu.de/#code=instance%20%3A%20Monad%20Option%20where%0A%20%20pure%20x%20%3A%3D%20some%20x%0A%20%20bind%20opt%20next%20%3A%3D%20none%0A%20%20\">accepts this as a Monad instance</a>, but this one violates the Monad contract, which is that</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">(</span><span class=\"n\">bind</span> <span class=\"o\">(</span><span class=\"n\">pure</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">v</span> <span class=\"o\">)</span> <span class=\"bp\">∧</span>\n<span class=\"o\">(</span><span class=\"n\">bind</span> <span class=\"n\">v</span> <span class=\"n\">pure</span> <span class=\"bp\">=</span> <span class=\"n\">v</span> <span class=\"o\">)</span> <span class=\"bp\">∧</span>\n<span class=\"o\">(</span><span class=\"n\">bind</span> <span class=\"o\">(</span><span class=\"n\">bind</span> <span class=\"n\">v</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"n\">g</span>  <span class=\"bp\">=</span> <span class=\"n\">bind</span> <span class=\"n\">v</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">bind</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">g</span><span class=\"o\">))</span>\n</code></pre></div>\n<p>Lean being Lean, shouldn't these 3 properties be checked or require proof be supplied in order to instantiate a Monad?  I don't see these three properties directly stated in <a href=\"https://github.com/leanprover/lean4/blob/ec941735c80dc54c53948e30c428905b6600f95a/src/Init/Prelude.lean#L2750-L2754\">the code for Monad</a>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">Monad</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">Applicative</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">Bind</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"o\">(</span><span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">map</span>      <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">bind</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">Function.comp</span> <span class=\"n\">pure</span> <span class=\"n\">f</span><span class=\"o\">)</span>\n  <span class=\"n\">seq</span>      <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">bind</span> <span class=\"n\">f</span> <span class=\"k\">fun</span> <span class=\"n\">y</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Functor.map</span> <span class=\"n\">y</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">())</span>\n  <span class=\"n\">seqLeft</span>  <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"n\">bind</span> <span class=\"n\">x</span> <span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">bind</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">())</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">pure</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n  <span class=\"n\">seqRight</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"n\">bind</span> <span class=\"n\">x</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">y</span> <span class=\"o\">()</span>\n</code></pre></div>\n<p>Should the Monad contract be in there so that incorrect instances can't be derived?  Is the Monad contract somewhere else in the code?  What should I know about separating understanding of Lean as a programming language and Lean as a theorem prover?  Is there a crossover between programming and theorem proving that I'm expecting (the idea of programs which are derived in accordance with specifications) which is not actually part of the paradigm?</p>",
        "id": 390184607,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1694379472
    },
    {
        "content": "<p>There's <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=LawfulMonad#doc\">docs#LawfulMonad</a> for recording that a monad is <em>really</em> a monad</p>",
        "id": 390185270,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1694380011
    },
    {
        "content": "<p>I think the split between <code>Monad</code> and <code>LawfulMonad</code> is for the functional programming side of things. Another split for example is <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=BEq#doc\">docs#BEq</a> and <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=LawfulBEq#doc\">docs#LawfulBEq</a> for whether this equality operation actually captures substitution-invariance.</p>",
        "id": 390185418,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1694380166
    },
    {
        "content": "<p>What Kyle said is totally right - the Lean library provides a version of <code>Monad</code> that requires you to show that you follow the rules, and one that doesn't. I figured I'd supplement with why this exercise is the way it is.</p>\n<p>The goal of this book is to be usable as a first introduction to functional programming. My guess is that it doesn't entirely succeed at this, but I really tried not to overwhelm and intimidate readers who haven't done these things before. The reason I chose to spend a fair bit of space on informally reasoning about monad laws, and the reason for this exercise, is to start getting people to start thinking in a way that is conducive to proving things, but that \"feels\" more like debugging a program.</p>\n<p>In particular, I think it's important to learn informal reasoning about code before learning formal reasoning, because it helps reduce the risk of making a bit of progress by just hammering away with <code>induction</code> and <code>simp</code>, and then getting stuck as soon as something more is needed. I was once angrily told \"Think before you hack!\" in an oral exam by a famous computer scientist - I try to <em>gently</em> pass this important lesson onward.</p>",
        "id": 390244490,
        "sender_full_name": "David Thrane Christiansen",
        "timestamp": 1694413677
    },
    {
        "content": "<p>Thanks I didn't know about <code>LawfulMonad</code>.  I see there is also <code>CategoryTheory.Monad</code>.  </p>\n<p>If you were to make a follow-on version of the <code>Monad</code> chapter which added in the use of <code>LawfulMonad</code>, for the same set of examples, how much longer would it be?  Twice as long?  Book length?  Intractable?  </p>\n<p>There are 3 things to think about: </p>\n<ol>\n<li>Pure functional programming</li>\n<li>Proving theorems in blackboard math in Lean</li>\n<li>Providing functional programs with an accompanying proof of correctness, typically by deriving them via stepwise refinement in correctness-preserving ways from specifications.  This is shown to some extent in the chapter with a section on the use of <code>_</code> to fill out programs, except that the use in the chapter doesn't keep a proof that the result is as desired, just that the result is in the right type.  The instance in the book of an unlawful <code>Monad</code> shows the difference between being in the right type and being as desired.</li>\n</ol>\n<p>Lean is programmed in Lean.    785 lines of code in Lean refer to <code>Monad</code>.  There are 112 references to <code>CategoryTheory.Monad</code> and  101 references to <code>LawfulMonad</code>.  How much of Lean in Lean in general is functional programming without proof of correctness?  The whole interpreter?  How hard would it be to convert it all to a \"lawful\" style, that is, where every functional programming construct uses  a <code>Lawful</code> variant?</p>",
        "id": 391390539,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1694877937
    },
    {
        "content": "<p>What are you counting as a reference? When you write <code>def foo [Monad m] : m Nat</code>, that doesn't mean <code>foo</code> is unlawful; it just means you're still allowed to use it even if <code>m</code> isn't lawful.</p>",
        "id": 391390831,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1694878072
    },
    {
        "content": "<p>It's only <code>instance : Monad m</code> that you should worry about, and even then only when there isn't a <code>instance : LawfulMonad m</code> that appears later</p>",
        "id": 391390932,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1694878105
    },
    {
        "content": "<p>I have a question regarding this: do we have theorems that say monad transformers transform lawful monads to lawful monads?  And if so, for which transformers do we have such theorems?</p>",
        "id": 391391734,
        "sender_full_name": "Ioannis Konstantoulas",
        "timestamp": 1694878467
    },
    {
        "content": "<p>(same question for functors and applicatives)</p>",
        "id": 391391771,
        "sender_full_name": "Ioannis Konstantoulas",
        "timestamp": 1694878490
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"577163\">Ioannis Konstantoulas</span> <a href=\"#narrow/stream/113489-new-members/topic/Checking.20that.20a.20Monad.20instance.20is.20a.20Monad/near/391391734\">said</a>:</p>\n<blockquote>\n<p>I have a question regarding this: do we have theorems that say monad transformers transform lawful monads to lawful monads?  And if so, for which transformers do we have such theorems?</p>\n</blockquote>\n<p>Those wouldn't be theorems they would be LawfulMonad instnaces and if you check the docs you will see we have a bunch of those: <a href=\"https://leanprover-community.github.io/mathlib4_docs/Init/Control/Lawful.html#LawfulMonad\">https://leanprover-community.github.io/mathlib4_docs/Init/Control/Lawful.html#LawfulMonad</a> including for transformers, e.g. ExceptT: <a href=\"https://leanprover-community.github.io/mathlib4_docs/Init/Control/Lawful.html#ExceptT.instLawfulMonadExceptTInstMonadExceptT\">https://leanprover-community.github.io/mathlib4_docs/Init/Control/Lawful.html#ExceptT.instLawfulMonadExceptTInstMonadExceptT</a></p>",
        "id": 391392137,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1694878757
    },
    {
        "content": "<p>Suppose I want to take this snippet:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">Reader</span> <span class=\"o\">(</span><span class=\"n\">ρ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span> <span class=\"n\">ρ</span> <span class=\"bp\">→</span> <span class=\"n\">α</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">read</span> <span class=\"o\">:</span> <span class=\"n\">Reader</span> <span class=\"n\">ρ</span> <span class=\"n\">ρ</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">env</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">env</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Reader.pure</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Reader</span> <span class=\"n\">ρ</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Reader.bind</span> <span class=\"o\">{</span><span class=\"n\">ρ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">result</span> <span class=\"o\">:</span> <span class=\"n\">ρ</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">next</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">ρ</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ρ</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"o\">:=</span>\n  <span class=\"k\">fun</span> <span class=\"n\">env</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">next</span> <span class=\"o\">(</span><span class=\"n\">result</span> <span class=\"n\">env</span><span class=\"o\">)</span> <span class=\"n\">env</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Monad</span> <span class=\"o\">(</span><span class=\"n\">Reader</span> <span class=\"n\">ρ</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">pure</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span>\n  <span class=\"n\">bind</span> <span class=\"n\">x</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">env</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">env</span><span class=\"o\">)</span> <span class=\"n\">env</span>\n</code></pre></div>\n<p>and make it lawful by replacing <code>Monad</code> with <code>LawfulMonad</code>.  If I do that then I get this message:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">hw_monad9.lean</span><span class=\"o\">:</span><span class=\"mi\">12</span><span class=\"o\">:</span><span class=\"mi\">11</span>\n<span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"kd\">instance</span>\n  <span class=\"n\">Monad</span> <span class=\"o\">(</span><span class=\"n\">Reader</span> <span class=\"n\">ρ</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>on</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">LawfulMonad</span> <span class=\"o\">(</span><span class=\"n\">Reader</span> <span class=\"n\">ρ</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n</code></pre></div>\n<p>So it seems to want me to say that <code>Reader</code> is a <code>Monad</code> before I can say that it is a <code>LawfulMonad</code>.  So I try that:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">Reader</span> <span class=\"o\">(</span><span class=\"n\">ρ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span> <span class=\"n\">ρ</span> <span class=\"bp\">→</span> <span class=\"n\">α</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">read</span> <span class=\"o\">:</span> <span class=\"n\">Reader</span> <span class=\"n\">ρ</span> <span class=\"n\">ρ</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">env</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">env</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Reader.pure</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Reader</span> <span class=\"n\">ρ</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Reader.bind</span> <span class=\"o\">{</span><span class=\"n\">ρ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">result</span> <span class=\"o\">:</span> <span class=\"n\">ρ</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">next</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">ρ</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ρ</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"o\">:=</span>\n  <span class=\"k\">fun</span> <span class=\"n\">env</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">next</span> <span class=\"o\">(</span><span class=\"n\">result</span> <span class=\"n\">env</span><span class=\"o\">)</span> <span class=\"n\">env</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Monad</span> <span class=\"o\">(</span><span class=\"n\">Reader</span> <span class=\"n\">ρ</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">pure</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span>\n  <span class=\"n\">bind</span> <span class=\"n\">x</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">env</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">env</span><span class=\"o\">)</span> <span class=\"n\">env</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">LawfulMonad</span> <span class=\"o\">(</span><span class=\"n\">Reader</span> <span class=\"n\">ρ</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">pure</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span>\n  <span class=\"n\">bind</span> <span class=\"n\">x</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">env</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">env</span><span class=\"o\">)</span> <span class=\"n\">env</span>\n</code></pre></div>\n<p>Then I get an error on <code> pure x := fun _ =&gt; x</code> saying that </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">'</span><span class=\"n\">pure'</span> <span class=\"n\">is</span> <span class=\"n\">not</span> <span class=\"n\">a</span> <span class=\"n\">field</span> <span class=\"n\">of</span> <span class=\"kd\">structure</span> <span class=\"bp\">'</span><span class=\"n\">LawfulMonad'</span>\n</code></pre></div>\n<p>My next tactic would be \"programming by example\".  So I look at the declaration of <code>LawfulMonad List</code> in file Data/List/Basic.lean around line 516.  It has this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">LawfulMonad</span> <span class=\"n\">List</span> <span class=\"o\">:=</span> <span class=\"n\">LawfulMonad.mk'</span>\n  <span class=\"o\">(</span><span class=\"n\">id_map</span> <span class=\"o\">:=</span> <span class=\"n\">map_id</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">pure_bind</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">List.append_nil</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">bind_assoc</span> <span class=\"o\">:=</span> <span class=\"n\">List.bind_assoc</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">bind_pure_comp</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">map_eq_bind</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>If I try running that on it's own, I get:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">unknown</span> <span class=\"kd\">constant</span> <span class=\"bp\">'</span><span class=\"n\">LawfulMonad.mk''</span>\n</code></pre></div>\n<p>So unless I am missing an import, even though <code>LawfulMonad.mk'</code> is available in the context of <code>Basic.lean</code> and <code>LawfulMonad</code> is available without import in the context of my example, <code>LawfulMonad.mk'</code> is not.  I also can't find it explicitly declared in any file.  I only see uses of it:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">~/</span><span class=\"n\">mathlib4</span><span class=\"bp\">/</span><span class=\"n\">Mathlib</span><span class=\"bp\">$</span> <span class=\"n\">grep</span> <span class=\"bp\">-</span><span class=\"n\">r</span> <span class=\"n\">LawfulMonad</span> <span class=\"c1\">--include \\*.lean | grep mk</span>\n<span class=\"n\">Data</span><span class=\"bp\">/</span><span class=\"n\">List</span><span class=\"bp\">/</span><span class=\"n\">Basic.lean</span><span class=\"o\">:</span><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">LawfulMonad</span> <span class=\"n\">List</span> <span class=\"o\">:=</span> <span class=\"n\">LawfulMonad.mk'</span>\n<span class=\"n\">Data</span><span class=\"bp\">/</span><span class=\"n\">PFun.lean</span><span class=\"o\">:</span><span class=\"kd\">instance</span> <span class=\"n\">lawfulMonad</span> <span class=\"o\">:</span> <span class=\"n\">LawfulMonad</span> <span class=\"o\">(</span><span class=\"n\">PFun</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">LawfulMonad.mk'</span>\n<span class=\"n\">Data</span><span class=\"bp\">/</span><span class=\"n\">LazyList</span><span class=\"bp\">/</span><span class=\"n\">Basic.lean</span><span class=\"o\">:</span><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">LawfulMonad</span> <span class=\"n\">LazyList</span> <span class=\"o\">:=</span> <span class=\"n\">LawfulMonad.mk'</span>\n<span class=\"n\">Data</span><span class=\"bp\">/</span><span class=\"n\">Seq</span><span class=\"bp\">/</span><span class=\"n\">Computation.lean</span><span class=\"o\">:</span><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">LawfulMonad</span> <span class=\"n\">Computation</span> <span class=\"o\">:=</span> <span class=\"n\">LawfulMonad.mk'</span>\n<span class=\"n\">Data</span><span class=\"bp\">/</span><span class=\"n\">Seq</span><span class=\"bp\">/</span><span class=\"n\">Seq.lean</span><span class=\"o\">:</span><span class=\"kd\">instance</span> <span class=\"n\">lawfulMonad</span> <span class=\"o\">:</span> <span class=\"n\">LawfulMonad</span> <span class=\"n\">Seq1</span> <span class=\"o\">:=</span> <span class=\"n\">LawfulMonad.mk'</span>\n<span class=\"n\">Data</span><span class=\"bp\">/</span><span class=\"n\">Semiquot.lean</span><span class=\"o\">:</span><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">LawfulMonad</span> <span class=\"n\">Semiquot</span> <span class=\"o\">:=</span> <span class=\"n\">LawfulMonad.mk'</span>\n<span class=\"n\">Data</span><span class=\"bp\">/</span><span class=\"n\">Set</span><span class=\"bp\">/</span><span class=\"n\">Functor.lean</span><span class=\"o\">:</span><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">LawfulMonad</span> <span class=\"n\">Set</span> <span class=\"o\">:=</span> <span class=\"n\">LawfulMonad.mk'</span>\n<span class=\"n\">Data</span><span class=\"bp\">/</span><span class=\"n\">Multiset</span><span class=\"bp\">/</span><span class=\"n\">Functor.lean</span><span class=\"o\">:</span><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">LawfulMonad</span> <span class=\"n\">Multiset</span> <span class=\"o\">:=</span> <span class=\"n\">LawfulMonad.mk'</span>\n<span class=\"n\">GroupTheory</span><span class=\"bp\">/</span><span class=\"n\">FreeGroup.lean</span><span class=\"o\">:</span><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">LawfulMonad</span> <span class=\"n\">FreeGroup.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"n\">LawfulMonad.mk'</span>\n<span class=\"n\">GroupTheory</span><span class=\"bp\">/</span><span class=\"n\">FreeAbelianGroup.lean</span><span class=\"o\">:</span><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">LawfulMonad</span> <span class=\"n\">FreeAbelianGroup.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"n\">LawfulMonad.mk'</span>\n<span class=\"n\">Algebra</span><span class=\"bp\">/</span><span class=\"n\">Free.lean</span><span class=\"o\">:</span><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">LawfulMonad</span> <span class=\"n\">FreeMagma.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"n\">LawfulMonad.mk'</span>\n<span class=\"n\">Algebra</span><span class=\"bp\">/</span><span class=\"n\">Free.lean</span><span class=\"o\">:</span><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">LawfulMonad</span> <span class=\"n\">FreeSemigroup.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"n\">LawfulMonad.mk'</span>\n<span class=\"n\">Probability</span><span class=\"bp\">/</span><span class=\"n\">ProbabilityMassFunction</span><span class=\"bp\">/</span><span class=\"n\">Constructions.lean</span><span class=\"o\">:</span><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">LawfulMonad</span> <span class=\"n\">Pmf</span> <span class=\"o\">:=</span> <span class=\"n\">LawfulMonad.mk'</span>\n</code></pre></div>\n<p>This is why a worked example of converting a <code>Monad</code> to a <code>LawfulMonad</code> would be helpful in the Functional Programming text.  In general my sense is that, wherever possible, unless it slows things down considerably, even (and maybe especially) the lowest levels of the implementation of Lean in Lean should employ <code>Lawful</code> variants wherever feasible.  Teaching this to Lean developers (likely readers of Functional Programming in Lean) from the get-go would promote this as a best practice.</p>",
        "id": 391558835,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1694978043
    },
    {
        "content": "<p>I recommend you write</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">LawfulMonad</span> <span class=\"o\">(</span><span class=\"n\">Reader</span> <span class=\"n\">ρ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">_</span>\n</code></pre></div>\n<p>and use the code action for filling in the fields</p>",
        "id": 391558987,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1694978103
    },
    {
        "content": "<p><code>grep</code> is not a reasonable way to find definitions in Lean. The sensible way is to use something that actually understands the lean code, such as VSCode's goto definition, or the docs search (<a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=LawfulMonad.mk%27#doc\">docs#LawfulMonad.mk'</a>). Note that immediately tells you that you were looking in the wrong directory, <code>mk'</code> is defined in <code>Std</code>!</p>",
        "id": 391559204,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1694978170
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> I don't know how to \"use the code action\" in VS Code. With just the underscore, it says that it wants something of type <code>⊢ LawfulMonad (Reader ρ)</code>, but it doesn't know how to synthesize placeholder context. This just restates the goal on the left-hand-side of the <code>:=</code>.<br>\n<a href=\"/user_uploads/3121/PQ6qWZEbpLJZ5tKgkYfJcYDe/Screenshot-from-2023-09-24-13-32-28.png\">Screenshot-from-2023-09-24-13-32-28.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/PQ6qWZEbpLJZ5tKgkYfJcYDe/Screenshot-from-2023-09-24-13-32-28.png\" title=\"Screenshot-from-2023-09-24-13-32-28.png\"><img src=\"/user_uploads/3121/PQ6qWZEbpLJZ5tKgkYfJcYDe/Screenshot-from-2023-09-24-13-32-28.png\"></a></div>",
        "id": 392853891,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1695576962
    },
    {
        "content": "<p>If you put your cursor before the <code>_</code>, there should be a blue lightbulb that appears at the beginning of the line. (There might be some command to get a list of available code actions, but I don't know about this yet.)</p>",
        "id": 392857738,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1695580755
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span> , placing the cursor to the right of the <code>_</code> reiterates what is shown in the InfoView, namely that it doesn't know how to synthesize the placeholder context, which I'm guessing means that it doesn't have a code suggestion:<br>\n<a href=\"/user_uploads/3121/ZTxfDLYAVTSZa03VshLAE6xb/Screenshot-from-2023-09-24-14-43-28.png\">Screenshot-from-2023-09-24-14-43-28.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/ZTxfDLYAVTSZa03VshLAE6xb/Screenshot-from-2023-09-24-14-43-28.png\" title=\"Screenshot-from-2023-09-24-14-43-28.png\"><img src=\"/user_uploads/3121/ZTxfDLYAVTSZa03VshLAE6xb/Screenshot-from-2023-09-24-14-43-28.png\"></a></div>",
        "id": 392858104,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1695581105
    },
    {
        "content": "<p>This is the blue lightbulb that I see:</p>\n<p><a href=\"/user_uploads/3121/I_OjKrhVYEYD_P089UmcuKXr/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/I_OjKrhVYEYD_P089UmcuKXr/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/I_OjKrhVYEYD_P089UmcuKXr/image.png\"></a></div><p>Maybe you're not importing any of Std or Mathlib?</p>",
        "id": 392858321,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1695581336
    },
    {
        "content": "<p>I actually have no idea what this symbol is supposed to be, but it's blue</p>",
        "id": 392858352,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1695581366
    },
    {
        "content": "<p>This almost certainly needs <code>import Std</code></p>",
        "id": 392858564,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1695581573
    },
    {
        "content": "<p>I have a problem with <code>import Std</code>, maybe I need to reinstall Lean, my copy is too old?  I'm not sure how to update other than reinstall.  I am on Ubuntu:<br>\n<a href=\"/user_uploads/3121/oaL1Uk5VMuzwb-J8cK7w6sii/Screenshot-from-2023-09-24-14-53-24.png\">Screenshot-from-2023-09-24-14-53-24.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/oaL1Uk5VMuzwb-J8cK7w6sii/Screenshot-from-2023-09-24-14-53-24.png\" title=\"Screenshot-from-2023-09-24-14-53-24.png\"><img src=\"/user_uploads/3121/oaL1Uk5VMuzwb-J8cK7w6sii/Screenshot-from-2023-09-24-14-53-24.png\"></a></div>",
        "id": 392858611,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1695581633
    },
    {
        "content": "<p>What's the end of the error message? The start is (usually) a bunch of junk.</p>",
        "id": 392858676,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1695581671
    },
    {
        "content": "<p>It is </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">stdout</span><span class=\"o\">:</span>\n<span class=\"bp\">./</span><span class=\"n\">lake</span><span class=\"bp\">-</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">std</span><span class=\"bp\">/././</span><span class=\"n\">Std</span><span class=\"bp\">/</span><span class=\"n\">Linter</span><span class=\"bp\">/</span><span class=\"n\">UnnecessarySeqFocus.lean</span><span class=\"o\">:</span><span class=\"mi\">64</span><span class=\"o\">:</span><span class=\"mi\">6</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">unknown</span> <span class=\"kd\">constant</span> <span class=\"bp\">'</span><span class=\"n\">Parser.Tactic.Conv.</span><span class=\"bp\">«</span><span class=\"n\">convNext__</span><span class=\"bp\">=&gt;</span><span class=\"n\">_</span><span class=\"bp\">»'</span>\n<span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">external</span> <span class=\"n\">command</span> <span class=\"bp\">`/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">catskills</span><span class=\"bp\">/.</span><span class=\"n\">elan</span><span class=\"bp\">/</span><span class=\"n\">toolchains</span><span class=\"bp\">/</span><span class=\"n\">leanprover</span><span class=\"c1\">--lean4---nightly-2023-05-16/bin/lean` exited with code 1</span>\n</code></pre></div>",
        "id": 392858703,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1695581699
    },
    {
        "content": "<p>Even with the part of the error that's visible, it looks like your Lean version isn't the one that your Std is expecting, but that's just a guess.</p>",
        "id": 392858746,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1695581759
    },
    {
        "content": "<p>One thing you need to be sure of is that your <code>lean-toolchain</code> file is referring to a compatible version of Lean. You could take a look at the one at <code>lake-packages/std/lean-toolchain</code></p>",
        "id": 392858870,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1695581864
    },
    {
        "content": "<p>If you're using mathlib, there's also the one at <code>lake-packages/mathlib/lean-toolchain</code></p>",
        "id": 392858937,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1695581909
    },
    {
        "content": "<p>The <a href=\"https://leanprover-community.github.io/install/linux.html\">instructions for Ubuntu install</a> are</p>\n<ul>\n<li>Launch VS Code.</li>\n<li>Click on the extension icon (image of icon) (or (image of icon) in older versions) in the side bar on the left edge of the screen (or press ShiftCtrlX) and search for leanprover.</li>\n<li>Select the lean4 extension (unique name leanprover.lean4).</li>\n</ul>\n<p>That gives me an \"Uninstall\" option so I will try that and then reinstall.</p>",
        "id": 392858990,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1695581981
    },
    {
        "content": "<p>You might be able to just copy the contents from the <code>lake-packages/std/lean-toolchain</code> and replace <code>lean-toolchain</code>. Then when you restart Lean from vs code, it will download the compatible version.</p>",
        "id": 392858992,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1695581982
    },
    {
        "content": "<p>(I don't think uninstalling and reinstalling the Lean 4 extension will change anything for you.)</p>",
        "id": 392859433,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1695582226
    },
    {
        "content": "<p>The uninstall didn't help, I'm still in a stuck state.  What are the shell <code>lake</code> or <code>elan</code> commands to reinstall the latest Lean 4 standard and <code>MathLib</code> files?<br>\n<a href=\"http://\">Uploading Screenshot from 2023-09-24 15-03-35.png…</a></p>",
        "id": 392859653,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1695582324
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/pRg_aB93dNvIEagRINS6GaUT/Screenshot-from-2023-09-24-15-03-35.png\">Screenshot-from-2023-09-24-15-03-35.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/pRg_aB93dNvIEagRINS6GaUT/Screenshot-from-2023-09-24-15-03-35.png\" title=\"Screenshot-from-2023-09-24-15-03-35.png\"><img src=\"/user_uploads/3121/pRg_aB93dNvIEagRINS6GaUT/Screenshot-from-2023-09-24-15-03-35.png\"></a></div>",
        "id": 392859664,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1695582338
    },
    {
        "content": "<p>Is it this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">wget</span> <span class=\"bp\">-</span><span class=\"n\">q</span> <span class=\"n\">https</span><span class=\"o\">:</span><span class=\"bp\">//</span><span class=\"n\">raw.githubusercontent.com</span><span class=\"bp\">/</span><span class=\"n\">leanprover</span><span class=\"bp\">-</span><span class=\"n\">community</span><span class=\"bp\">/</span><span class=\"n\">mathlib4</span><span class=\"bp\">/</span><span class=\"n\">master</span><span class=\"bp\">/</span><span class=\"n\">scripts</span><span class=\"bp\">/</span><span class=\"n\">install_debian.sh</span> <span class=\"bp\">&amp;&amp;</span> <span class=\"n\">bash</span> <span class=\"n\">install_debian.sh</span> <span class=\"bp\">;</span> <span class=\"n\">rm</span> <span class=\"bp\">-</span><span class=\"n\">f</span> <span class=\"n\">install_debian.sh</span> <span class=\"bp\">&amp;&amp;</span> <span class=\"n\">source</span> <span class=\"bp\">~/.</span><span class=\"n\">profile</span>\n</code></pre></div>",
        "id": 392859745,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1695582416
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/113489-new-members/topic/Checking.20that.20a.20Monad.20instance.20is.20a.20Monad/near/392858992\">said</a>:</p>\n<blockquote>\n<p>You might be able to just copy the contents from the <code>lake-packages/std/lean-toolchain</code> and replace <code>lean-toolchain</code>. Then when you restart Lean from vs code, it will download the compatible version.</p>\n</blockquote>\n<p>Did you try this?</p>",
        "id": 392860251,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1695582823
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"364351\">Lars Ericson</span> <a href=\"#narrow/stream/113489-new-members/topic/Checking.20that.20a.20Monad.20instance.20is.20a.20Monad/near/392859745\">said</a>:</p>\n<blockquote>\n<p>Is it this:</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">wget</span> <span class=\"bp\">-</span><span class=\"n\">q</span> <span class=\"n\">https</span><span class=\"o\">:</span><span class=\"bp\">//</span><span class=\"n\">raw.githubusercontent.com</span><span class=\"bp\">/</span><span class=\"n\">leanprover</span><span class=\"bp\">-</span><span class=\"n\">community</span><span class=\"bp\">/</span><span class=\"n\">mathlib4</span><span class=\"bp\">/</span><span class=\"n\">master</span><span class=\"bp\">/</span><span class=\"n\">scripts</span><span class=\"bp\">/</span><span class=\"n\">install_debian.sh</span> <span class=\"bp\">&amp;&amp;</span> <span class=\"n\">bash</span> <span class=\"n\">install_debian.sh</span> <span class=\"bp\">;</span> <span class=\"n\">rm</span> <span class=\"bp\">-</span><span class=\"n\">f</span> <span class=\"n\">install_debian.sh</span> <span class=\"bp\">&amp;&amp;</span> <span class=\"n\">source</span> <span class=\"bp\">~/.</span><span class=\"n\">profile</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>No, no need to run that again. That command is just to (1) install elan and (2) make sure you have VS Code installed.</p>",
        "id": 392860455,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1695582903
    },
    {
        "content": "<p>I took a brute force approach.  I removed .elan and .mathlib and uninstalled <code>elan</code> and restarted <code>code</code>.  That forced a reinstall of .elan.  That got me an infoview but it still didn't know <code>Std</code> package.  Then I did this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">lake</span> <span class=\"bp\">+</span><span class=\"n\">leanprover</span><span class=\"bp\">/</span><span class=\"n\">lean4</span><span class=\"o\">:</span><span class=\"n\">nightly</span><span class=\"bp\">-</span><span class=\"mi\">2023</span><span class=\"bp\">-</span><span class=\"mi\">02</span><span class=\"bp\">-</span><span class=\"mi\">04</span> <span class=\"n\">new</span> <span class=\"n\">lean_homework</span> <span class=\"n\">math</span>\n</code></pre></div>\n<p>This got me here, I will try the suggested <code>lake update</code> next:<br>\n<a href=\"/user_uploads/3121/4fdcxaMMDa9BQMqNgj32JC0y/Screenshot-from-2023-09-24-15-29-46.png\">Screenshot-from-2023-09-24-15-29-46.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/4fdcxaMMDa9BQMqNgj32JC0y/Screenshot-from-2023-09-24-15-29-46.png\" title=\"Screenshot-from-2023-09-24-15-29-46.png\"><img src=\"/user_uploads/3121/4fdcxaMMDa9BQMqNgj32JC0y/Screenshot-from-2023-09-24-15-29-46.png\"></a></div>",
        "id": 392861510,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1695583812
    },
    {
        "content": "<p>Do <strong>not</strong> run <code>lake update</code></p>",
        "id": 392861614,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1695583926
    },
    {
        "content": "<p>The safe(r) version of that is <code>lake update YourProjectName</code></p>",
        "id": 392861630,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1695583959
    },
    {
        "content": "<p>But the error clearly tells you the problem: your project is missing a <code>lake-manifest.json</code>. Here's <a href=\"https://github.com/YaelDillies/LeanCamCombi/blob/main/lake-manifest.json\">the one from my LeanCamCombi project</a>, which you could copy in and hope that works.</p>",
        "id": 392861730,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1695584065
    },
    {
        "content": "<p>So now I get the blue lightbulb.  Thanks!<br>\n<a href=\"/user_uploads/3121/Ed-B18yapOmssFyZuRI-fNV5/Screenshot-from-2023-09-24-15-40-44.png\">Screenshot-from-2023-09-24-15-40-44.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/Ed-B18yapOmssFyZuRI-fNV5/Screenshot-from-2023-09-24-15-40-44.png\" title=\"Screenshot-from-2023-09-24-15-40-44.png\"><img src=\"/user_uploads/3121/Ed-B18yapOmssFyZuRI-fNV5/Screenshot-from-2023-09-24-15-40-44.png\"></a></div>",
        "id": 392862137,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1695584455
    },
    {
        "content": "<p>This could have probably been resolved in one step, by making sure your <code>lean-toolchain</code> file had the correct Lean version, but glad you found a way to get <code>import Std</code> to work in the end!</p>",
        "id": 392862554,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1695584782
    },
    {
        "content": "<p>What exactly does \"making sure\" mean here? I've heard the phrase a lot, but I still don't know what it means concretely.</p>",
        "id": 392862761,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1695584912
    },
    {
        "content": "<p>I don't have much state to carry over, and I don't know lake/elan at all or the underlying structure of Lean projects and Std and Mathlib libraries, and Lean 4 is frequently updated.  The simplest solution is to delete everything and do an install from scratch, which doesn't take that long.</p>",
        "id": 392862793,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1695584962
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/113489-new-members/topic/Checking.20that.20a.20Monad.20instance.20is.20a.20Monad/near/392862761\">said</a>:</p>\n<blockquote>\n<p>What exactly does \"making sure\" mean here? I've heard the phrase a lot, but I still don't know what it means concretely.</p>\n</blockquote>\n<p>It means making sure that <code>lean-toolchain</code> is <code>lake-packages/mathlib/lean-toolchain</code> for example. At least that's what I do. This isn't something that <code>lake</code> manages, as far as I'm aware.</p>",
        "id": 392862922,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1695585077
    },
    {
        "content": "<p>Note that following the example of the instances in the docs is not the right direction, i.e. this doesn't get me a blue lightbulb (I get a yellow one):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">LawfulMonad</span> <span class=\"o\">(</span><span class=\"n\">Reader</span> <span class=\"n\">ρ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">LawfulMonad.mk'</span> <span class=\"n\">_</span>\n</code></pre></div>\n<p>failing with</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">type</span> <span class=\"n\">mismatch</span>\n  <span class=\"k\">fun</span> <span class=\"n\">id_map</span> <span class=\"n\">pure_bind</span> <span class=\"n\">bind_assoc</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">LawfulMonad.mk'</span> <span class=\"bp\">?</span><span class=\"n\">m.1464</span> <span class=\"n\">id_map</span> <span class=\"n\">pure_bind</span> <span class=\"n\">bind_assoc</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">?</span><span class=\"n\">u.1463</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">?</span><span class=\"n\">m.1464</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">id</span> <span class=\"bp\">&lt;$&gt;</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">→</span>\n    <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">?</span><span class=\"n\">u.1463</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"bp\">?</span><span class=\"n\">m.1464</span> <span class=\"n\">β</span><span class=\"o\">),</span> <span class=\"n\">pure</span> <span class=\"n\">x</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">→</span>\n      <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">γ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">?</span><span class=\"n\">u.1463</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">?</span><span class=\"n\">m.1464</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"bp\">?</span><span class=\"n\">m.1464</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"bp\">?</span><span class=\"n\">m.1464</span> <span class=\"n\">γ</span><span class=\"o\">),</span>\n          <span class=\"n\">x</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"n\">f</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"n\">g</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"bp\">→</span>\n        <span class=\"n\">LawfulMonad</span> <span class=\"bp\">?</span><span class=\"n\">m.1464</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"n\">LawfulMonad</span> <span class=\"o\">(</span><span class=\"n\">Reader</span> <span class=\"n\">ρ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n</code></pre></div>\n<p>Staring with <code>instance : LawfulMonad (Reader ρ) := _</code>,  Ihe blue lightbulb suggests filling out the instance of a <code>LawfulMonad</code> instead:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">LawfulMonad</span> <span class=\"o\">(</span><span class=\"n\">Reader</span> <span class=\"n\">ρ</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">map_const</span> <span class=\"o\">:=</span> <span class=\"n\">_</span>\n  <span class=\"n\">id_map</span> <span class=\"o\">:=</span> <span class=\"n\">_</span>\n  <span class=\"n\">comp_map</span> <span class=\"o\">:=</span> <span class=\"n\">_</span>\n  <span class=\"n\">seqLeft_eq</span> <span class=\"o\">:=</span> <span class=\"n\">_</span>\n  <span class=\"n\">seqRight_eq</span> <span class=\"o\">:=</span> <span class=\"n\">_</span>\n  <span class=\"n\">pure_seq</span> <span class=\"o\">:=</span> <span class=\"n\">_</span>\n  <span class=\"n\">map_pure</span> <span class=\"o\">:=</span> <span class=\"n\">_</span>\n  <span class=\"n\">seq_pure</span> <span class=\"o\">:=</span> <span class=\"n\">_</span>\n  <span class=\"n\">seq_assoc</span> <span class=\"o\">:=</span> <span class=\"n\">_</span>\n  <span class=\"n\">bind_pure_comp</span> <span class=\"o\">:=</span> <span class=\"n\">_</span>\n  <span class=\"n\">bind_map</span> <span class=\"o\">:=</span> <span class=\"n\">_</span>\n  <span class=\"n\">pure_bind</span> <span class=\"o\">:=</span> <span class=\"n\">_</span>\n  <span class=\"n\">bind_assoc</span> <span class=\"o\">:=</span> <span class=\"n\">_</span>\n</code></pre></div>\n<p>I should be able to use<code>Reader.pure</code> and <code>Reader.bind</code> to make a<code>pure_bind</code>, then I just need to fill out 12 more functions.</p>",
        "id": 392862972,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1695585122
    },
    {
        "content": "<p>The error message is telling you that <code>mk'</code> expects more arguments, which you can provide with <code>_</code>s</p>",
        "id": 392864530,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1695586357
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> , adding underscores until it is full, it is telling me that the first thing it wants is a proof for the <code>id_map</code> proposition asserting <code>⊢ ∀ {α : Type} (x : Reader ρ α), id &lt;$&gt; x = x</code>.  I define this verbatim with <code>sorry</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">idMap</span><span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Reader</span> <span class=\"n\">ρ</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">id</span> <span class=\"bp\">&lt;$&gt;</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>This has type </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">idMap</span> <span class=\"o\">(</span><span class=\"n\">ρ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Reader</span> <span class=\"n\">ρ</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">id</span> <span class=\"bp\">&lt;$&gt;</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span>\n</code></pre></div>\n<p>which is not exactly what I'm proving, or maybe it is.  However, it doesn't fit in </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">LawfulMonad</span> <span class=\"o\">(</span><span class=\"n\">Reader</span> <span class=\"n\">ρ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">@</span><span class=\"n\">LawfulMonad.mk'</span> <span class=\"n\">idMap</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span>\n</code></pre></div>\n<p>The error message is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">application</span> <span class=\"n\">type</span> <span class=\"n\">mismatch</span>\n  <span class=\"bp\">@</span><span class=\"n\">LawfulMonad.mk'</span> <span class=\"n\">idMap</span>\n<span class=\"n\">argument</span>\n  <span class=\"n\">idMap</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">ρ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Reader</span> <span class=\"n\">ρ</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">id</span> <span class=\"bp\">&lt;$&gt;</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"kt\">Type</span> <span class=\"bp\">?</span><span class=\"n\">u.1615</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"bp\">?</span><span class=\"n\">u.1614</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">u.1614</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">u.1615</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span>\n</code></pre></div>\n<p>To fill out the <code>LawfulMonad</code>, I want to define propositions proved with <code>sorry</code> to match the requested slots, which are <code>id_map</code>, <code>pure_bind</code>,  <code>bind_assoc</code>, <code>map_const</code>, <code>seqLeft_eq</code>, <code>seqRight_eq</code> and <code>bind_map</code>.  However, based on my first attempt, I'm not sure how to go about this.  Here is the full example:<br>\n<a href=\"/user_uploads/3121/ITSXntCGDPF-Zbkegup2OFv9/Screenshot-from-2023-09-24-21-27-02.png\">Screenshot-from-2023-09-24-21-27-02.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/ITSXntCGDPF-Zbkegup2OFv9/Screenshot-from-2023-09-24-21-27-02.png\" title=\"Screenshot-from-2023-09-24-21-27-02.png\"><img src=\"/user_uploads/3121/ITSXntCGDPF-Zbkegup2OFv9/Screenshot-from-2023-09-24-21-27-02.png\"></a></div>",
        "id": 392885343,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1695605283
    },
    {
        "content": "<p>Why did you add the <code>@</code>?</p>",
        "id": 392935884,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1695628082
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span>  I added the @ to try to nail down the arguments one by one.  Without it, Lean fills in implicit arguments and may shift argument positions that I find makes it harder to figure out what is going on.  In this case I was unable to create a matching type even though I used the exact type that it requested.</p>",
        "id": 394089986,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1696084156
    },
    {
        "content": "<p>The best strategy to count arguments in my opinion is:</p>\n<ul>\n<li>don't use <code>@</code>. You'll get an error on the function name.</li>\n<li>keep writing <code>_</code>s until lean draws a red squiggle on the underscores instead of the name; now you're done!</li>\n</ul>",
        "id": 394090174,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1696084304
    },
    {
        "content": "<p>If I remove the <code>@</code> and use underscores, the name starts with red squiggles.  If I add up to 3 <code>_</code>s, it is still red squiggles:<br>\n<a href=\"/user_uploads/3121/bh51IMl4Vp42EEJJEODz5NrM/Screenshot-from-2023-09-30-11-05-50.png\">Screenshot-from-2023-09-30-11-05-50.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/bh51IMl4Vp42EEJJEODz5NrM/Screenshot-from-2023-09-30-11-05-50.png\" title=\"Screenshot-from-2023-09-30-11-05-50.png\"><img src=\"/user_uploads/3121/bh51IMl4Vp42EEJJEODz5NrM/Screenshot-from-2023-09-30-11-05-50.png\"></a></div><p>If I add one more <code>_</code>,  the first <code>_</code> and the name lose their red squiggles, but I am left with 3 underscores with red squiggles:<br>\n<a href=\"/user_uploads/3121/H8jtT3vph7ToyCHYaT8o_73h/Screenshot-from-2023-09-30-11-07-08.png\">Screenshot-from-2023-09-30-11-07-08.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/H8jtT3vph7ToyCHYaT8o_73h/Screenshot-from-2023-09-30-11-07-08.png\" title=\"Screenshot-from-2023-09-30-11-07-08.png\"><img src=\"/user_uploads/3121/H8jtT3vph7ToyCHYaT8o_73h/Screenshot-from-2023-09-30-11-07-08.png\"></a></div><p>It seems like it needs the arguments that it is red-squiggling because it gives each one a name, as we can see in the InfoView, it gives me names and expectations for 9 <code>_</code>s:<br>\n<a href=\"/user_uploads/3121/RdAi82CZFSakNCSl0ly-kQfX/Screenshot-from-2023-09-30-11-14-24.png\">Screenshot-from-2023-09-30-11-14-24.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/RdAi82CZFSakNCSl0ly-kQfX/Screenshot-from-2023-09-30-11-14-24.png\" title=\"Screenshot-from-2023-09-30-11-14-24.png\"><img src=\"/user_uploads/3121/RdAi82CZFSakNCSl0ly-kQfX/Screenshot-from-2023-09-30-11-14-24.png\"></a></div><p>It is giving me expectations for the red squiggle items, each of which is named, starting with <code>id_map</code>.  The first, undecorated <code>_</code> has no expectation, it just has a type of <code>Type \\to Type</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">All</span> <span class=\"n\">Messages</span> <span class=\"o\">(</span><span class=\"mi\">8</span><span class=\"o\">)</span>\n<span class=\"n\">hw_monad9.lean</span><span class=\"o\">:</span><span class=\"mi\">18</span><span class=\"o\">:</span><span class=\"mi\">20</span>\n<span class=\"n\">don't</span> <span class=\"n\">know</span> <span class=\"n\">how</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"n\">placeholder</span> <span class=\"n\">for</span> <span class=\"n\">argument</span> <span class=\"bp\">'</span><span class=\"n\">id_map'</span>\n<span class=\"n\">context</span><span class=\"o\">:</span>\n<span class=\"n\">ρ</span><span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">⊢</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Reader</span> <span class=\"n\">ρ</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">id</span> <span class=\"bp\">&lt;$&gt;</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span>\n<span class=\"n\">hw_monad9.lean</span><span class=\"o\">:</span><span class=\"mi\">18</span><span class=\"o\">:</span><span class=\"mi\">22</span>\n<span class=\"n\">don't</span> <span class=\"n\">know</span> <span class=\"n\">how</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"n\">placeholder</span> <span class=\"n\">for</span> <span class=\"n\">argument</span> <span class=\"bp\">'</span><span class=\"n\">pure_bind'</span>\n<span class=\"n\">context</span><span class=\"o\">:</span>\n<span class=\"n\">ρ</span><span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">⊢</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">Reader</span> <span class=\"n\">ρ</span> <span class=\"n\">β</span><span class=\"o\">),</span> <span class=\"n\">pure</span> <span class=\"n\">x</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">x</span>\n<span class=\"n\">hw_monad9.lean</span><span class=\"o\">:</span><span class=\"mi\">18</span><span class=\"o\">:</span><span class=\"mi\">24</span>\n<span class=\"n\">don't</span> <span class=\"n\">know</span> <span class=\"n\">how</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"n\">placeholder</span> <span class=\"n\">for</span> <span class=\"n\">argument</span> <span class=\"bp\">'</span><span class=\"n\">bind_assoc'</span>\n<span class=\"n\">context</span><span class=\"o\">:</span>\n<span class=\"n\">ρ</span><span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">⊢</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">γ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Reader</span> <span class=\"n\">ρ</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">Reader</span> <span class=\"n\">ρ</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">Reader</span> <span class=\"n\">ρ</span> <span class=\"n\">γ</span><span class=\"o\">),</span> <span class=\"n\">x</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"n\">f</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"n\">g</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"n\">g</span>\n<span class=\"n\">hw_monad9.lean</span><span class=\"o\">:</span><span class=\"mi\">18</span><span class=\"o\">:</span><span class=\"mi\">26</span>\n<span class=\"n\">don't</span> <span class=\"n\">know</span> <span class=\"n\">how</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"n\">placeholder</span> <span class=\"n\">for</span> <span class=\"n\">argument</span> <span class=\"bp\">'</span><span class=\"n\">map_const'</span>\n<span class=\"n\">context</span><span class=\"o\">:</span>\n<span class=\"n\">ρ</span><span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">⊢</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Reader</span> <span class=\"n\">ρ</span> <span class=\"n\">β</span><span class=\"o\">),</span> <span class=\"n\">Functor.mapConst</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">Function.const</span> <span class=\"n\">β</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;$&gt;</span> <span class=\"n\">y</span>\n<span class=\"n\">hw_monad9.lean</span><span class=\"o\">:</span><span class=\"mi\">18</span><span class=\"o\">:</span><span class=\"mi\">28</span>\n<span class=\"n\">don't</span> <span class=\"n\">know</span> <span class=\"n\">how</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"n\">placeholder</span> <span class=\"n\">for</span> <span class=\"n\">argument</span> <span class=\"bp\">'</span><span class=\"n\">seqLeft_eq'</span>\n<span class=\"n\">context</span><span class=\"o\">:</span>\n<span class=\"n\">ρ</span><span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">⊢</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Reader</span> <span class=\"n\">ρ</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Reader</span> <span class=\"n\">ρ</span> <span class=\"n\">β</span><span class=\"o\">),</span>\n  <span class=\"o\">(</span><span class=\"n\">SeqLeft.seqLeft</span> <span class=\"n\">x</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">a</span> <span class=\"bp\">←</span> <span class=\"n\">x</span>\n    <span class=\"k\">let</span> <span class=\"n\">_</span> <span class=\"bp\">←</span> <span class=\"n\">y</span>\n    <span class=\"n\">pure</span> <span class=\"n\">a</span>\n<span class=\"n\">hw_monad9.lean</span><span class=\"o\">:</span><span class=\"mi\">18</span><span class=\"o\">:</span><span class=\"mi\">30</span>\n<span class=\"n\">don't</span> <span class=\"n\">know</span> <span class=\"n\">how</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"n\">placeholder</span> <span class=\"n\">for</span> <span class=\"n\">argument</span> <span class=\"bp\">'</span><span class=\"n\">seqRight_eq'</span>\n<span class=\"n\">context</span><span class=\"o\">:</span>\n<span class=\"n\">ρ</span><span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">⊢</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Reader</span> <span class=\"n\">ρ</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Reader</span> <span class=\"n\">ρ</span> <span class=\"n\">β</span><span class=\"o\">),</span>\n  <span class=\"o\">(</span><span class=\"n\">SeqRight.seqRight</span> <span class=\"n\">x</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">_</span> <span class=\"bp\">←</span> <span class=\"n\">x</span>\n    <span class=\"n\">y</span>\n<span class=\"n\">hw_monad9.lean</span><span class=\"o\">:</span><span class=\"mi\">18</span><span class=\"o\">:</span><span class=\"mi\">32</span>\n<span class=\"n\">don't</span> <span class=\"n\">know</span> <span class=\"n\">how</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"n\">placeholder</span> <span class=\"n\">for</span> <span class=\"n\">argument</span> <span class=\"bp\">'</span><span class=\"n\">bind_pure_comp'</span>\n<span class=\"n\">context</span><span class=\"o\">:</span>\n<span class=\"n\">ρ</span><span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">⊢</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Reader</span> <span class=\"n\">ρ</span> <span class=\"n\">α</span><span class=\"o\">),</span>\n  <span class=\"o\">(</span><span class=\"k\">do</span>\n      <span class=\"k\">let</span> <span class=\"n\">y</span> <span class=\"bp\">←</span> <span class=\"n\">x</span>\n      <span class=\"n\">pure</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">y</span><span class=\"o\">))</span> <span class=\"bp\">=</span>\n    <span class=\"n\">f</span> <span class=\"bp\">&lt;$&gt;</span> <span class=\"n\">x</span>\n<span class=\"n\">hw_monad9.lean</span><span class=\"o\">:</span><span class=\"mi\">18</span><span class=\"o\">:</span><span class=\"mi\">34</span>\n<span class=\"n\">don't</span> <span class=\"n\">know</span> <span class=\"n\">how</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"n\">placeholder</span> <span class=\"n\">for</span> <span class=\"n\">argument</span> <span class=\"bp\">'</span><span class=\"n\">bind_map'</span>\n<span class=\"n\">context</span><span class=\"o\">:</span>\n<span class=\"n\">ρ</span><span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">⊢</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Reader</span> <span class=\"n\">ρ</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Reader</span> <span class=\"n\">ρ</span> <span class=\"n\">α</span><span class=\"o\">),</span>\n  <span class=\"o\">(</span><span class=\"k\">do</span>\n      <span class=\"k\">let</span> <span class=\"n\">x_1</span> <span class=\"bp\">←</span> <span class=\"n\">f</span>\n      <span class=\"n\">x_1</span> <span class=\"bp\">&lt;$&gt;</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span>\n    <span class=\"n\">Seq.seq</span> <span class=\"n\">f</span> <span class=\"k\">fun</span> <span class=\"n\">x_1</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span>\n</code></pre></div>",
        "id": 394093006,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1696087030
    },
    {
        "content": "<p>I have no idea how to proceed.  I will look at code examples for <code>LawfulMonad.mk'</code> in the <code>MathLib</code> source.  There are more instances there than I see in the doc#LawfulMonad.</p>",
        "id": 394093101,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1696087115
    },
    {
        "content": "<p>The last five parameters are <code>autoParam</code>s. This means that you're allowed to omit them, and Lean will work them out for you.</p>",
        "id": 394093258,
        "sender_full_name": "Sky Wilshaw",
        "timestamp": 1696087253
    },
    {
        "content": "<p>So you only need to provide proofs for <code>id_map</code>, <code>pure_bind</code>, and <code>bind_assoc</code>.</p>",
        "id": 394093269,
        "sender_full_name": "Sky Wilshaw",
        "timestamp": 1696087271
    },
    {
        "content": "<p>One way to do this would be</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">LawfulMonad</span> <span class=\"o\">(</span><span class=\"n\">Reader</span> <span class=\"bp\">\\</span><span class=\"n\">rho</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">refine</span> <span class=\"n\">LawfulMonad.mk</span> <span class=\"n\">_</span> <span class=\"bp\">?</span><span class=\"n\">id_map</span> <span class=\"bp\">?</span><span class=\"n\">pure_bind</span> <span class=\"bp\">?</span><span class=\"n\">bind_assoc</span>\n  <span class=\"n\">case</span> <span class=\"n\">id_map</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"gr\">sorry</span>\n  <span class=\"n\">case</span> <span class=\"n\">pure_bind</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"gr\">sorry</span>\n  <span class=\"n\">case</span> <span class=\"n\">bind_assoc</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 394093302,
        "sender_full_name": "Sky Wilshaw",
        "timestamp": 1696087322
    },
    {
        "content": "<p>Note that the first <code>_</code> is just the type of the monad, i.e. <code>Reader \\rho</code>. Lean can figure this out so you don't need to fill the hole yourself.</p>",
        "id": 394093412,
        "sender_full_name": "Sky Wilshaw",
        "timestamp": 1696087423
    },
    {
        "content": "<p>This is all a lot easier in tactic mode (though not idiomatic); you could have just used <code>apply LawfulMonad.mk'</code> and it would have played the underscore game for you</p>",
        "id": 394093728,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1696087692
    },
    {
        "content": "<p>Thank you <span class=\"user-mention\" data-user-id=\"492774\">@Sky Wilshaw</span> .  That doesn't quite get me to a happy proof-by-<code>sorry</code> state, i.e. one in which there are no messages except \"proof by sorry\".  Here is what I see:<br>\n<a href=\"/user_uploads/3121/tUynyQ1C-Aub1Gs9pO0YJIY5/Screenshot-from-2023-09-30-11-33-38.png\">Screenshot-from-2023-09-30-11-33-38.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/tUynyQ1C-Aub1Gs9pO0YJIY5/Screenshot-from-2023-09-30-11-33-38.png\" title=\"Screenshot-from-2023-09-30-11-33-38.png\"><img src=\"/user_uploads/3121/tUynyQ1C-Aub1Gs9pO0YJIY5/Screenshot-from-2023-09-30-11-33-38.png\"></a></div><p>Looking for other examples, the following files have <code>LawfulMonad</code> instances:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">$</span> <span class=\"n\">grep</span> <span class=\"bp\">-</span><span class=\"n\">r</span> <span class=\"n\">LawfulMonad</span> <span class=\"c1\">--include \\*.lean | grep \"instance :\"</span>\n\n<span class=\"n\">lake</span><span class=\"bp\">-</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">mathlib</span><span class=\"bp\">/</span><span class=\"n\">Mathlib</span><span class=\"bp\">/</span><span class=\"n\">Data</span><span class=\"bp\">/</span><span class=\"n\">Part.lean</span><span class=\"o\">:</span><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">LawfulMonad</span>\n<span class=\"n\">lake</span><span class=\"bp\">-</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">mathlib</span><span class=\"bp\">/</span><span class=\"n\">Mathlib</span><span class=\"bp\">/</span><span class=\"n\">Data</span><span class=\"bp\">/</span><span class=\"n\">Quot.lean</span><span class=\"o\">:</span><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">LawfulMonad</span> <span class=\"n\">Trunc</span> <span class=\"n\">where</span>\n<span class=\"n\">lake</span><span class=\"bp\">-</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">mathlib</span><span class=\"bp\">/</span><span class=\"n\">Mathlib</span><span class=\"bp\">/</span><span class=\"n\">Data</span><span class=\"bp\">/</span><span class=\"n\">Seq</span><span class=\"bp\">/</span><span class=\"n\">Computation.lean</span><span class=\"o\">:</span><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">LawfulMonad</span> <span class=\"n\">Computation</span> <span class=\"o\">:=</span> <span class=\"n\">LawfulMonad.mk'</span>\n<span class=\"n\">lake</span><span class=\"bp\">-</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">mathlib</span><span class=\"bp\">/</span><span class=\"n\">Mathlib</span><span class=\"bp\">/</span><span class=\"n\">Data</span><span class=\"bp\">/</span><span class=\"n\">Semiquot.lean</span><span class=\"o\">:</span><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">LawfulMonad</span> <span class=\"n\">Semiquot</span> <span class=\"o\">:=</span> <span class=\"n\">LawfulMonad.mk'</span>\n<span class=\"n\">lake</span><span class=\"bp\">-</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">mathlib</span><span class=\"bp\">/</span><span class=\"n\">Mathlib</span><span class=\"bp\">/</span><span class=\"n\">Data</span><span class=\"bp\">/</span><span class=\"n\">Set</span><span class=\"bp\">/</span><span class=\"n\">Functor.lean</span><span class=\"o\">:</span><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">LawfulMonad</span> <span class=\"n\">Set</span> <span class=\"o\">:=</span> <span class=\"n\">LawfulMonad.mk'</span>\n<span class=\"n\">lake</span><span class=\"bp\">-</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">mathlib</span><span class=\"bp\">/</span><span class=\"n\">Mathlib</span><span class=\"bp\">/</span><span class=\"n\">Data</span><span class=\"bp\">/</span><span class=\"n\">Multiset</span><span class=\"bp\">/</span><span class=\"n\">Functor.lean</span><span class=\"o\">:</span><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">LawfulMonad</span> <span class=\"n\">Multiset</span> <span class=\"o\">:=</span> <span class=\"n\">LawfulMonad.mk'</span>\n<span class=\"n\">lake</span><span class=\"bp\">-</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">mathlib</span><span class=\"bp\">/</span><span class=\"n\">Mathlib</span><span class=\"bp\">/</span><span class=\"n\">Data</span><span class=\"bp\">/</span><span class=\"n\">Finset</span><span class=\"bp\">/</span><span class=\"n\">Functor.lean</span><span class=\"o\">:</span><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">LawfulMonad</span> <span class=\"n\">Finset</span> <span class=\"o\">:=</span>\n<span class=\"n\">lake</span><span class=\"bp\">-</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">mathlib</span><span class=\"bp\">/</span><span class=\"n\">Mathlib</span><span class=\"bp\">/</span><span class=\"n\">GroupTheory</span><span class=\"bp\">/</span><span class=\"n\">FreeGroup.lean</span><span class=\"o\">:</span><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">LawfulMonad</span> <span class=\"n\">FreeGroup.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"n\">LawfulMonad.mk'</span>\n<span class=\"n\">lake</span><span class=\"bp\">-</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">mathlib</span><span class=\"bp\">/</span><span class=\"n\">Mathlib</span><span class=\"bp\">/</span><span class=\"n\">GroupTheory</span><span class=\"bp\">/</span><span class=\"n\">FreeAbelianGroup.lean</span><span class=\"o\">:</span><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">LawfulMonad</span> <span class=\"n\">FreeAbelianGroup.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"n\">LawfulMonad.mk'</span>\n<span class=\"n\">lake</span><span class=\"bp\">-</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">mathlib</span><span class=\"bp\">/</span><span class=\"n\">Mathlib</span><span class=\"bp\">/</span><span class=\"n\">Probability</span><span class=\"bp\">/</span><span class=\"n\">ProbabilityMassFunction</span><span class=\"bp\">/</span><span class=\"n\">Constructions.lean</span><span class=\"o\">:</span><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">LawfulMonad</span> <span class=\"n\">Pmf</span> <span class=\"o\">:=</span> <span class=\"n\">LawfulMonad.mk'</span>\n<span class=\"n\">lake</span><span class=\"bp\">-</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">mathlib</span><span class=\"bp\">/</span><span class=\"n\">Mathlib</span><span class=\"bp\">/</span><span class=\"n\">Control</span><span class=\"bp\">/</span><span class=\"n\">Monad</span><span class=\"bp\">/</span><span class=\"n\">Cont.lean</span><span class=\"o\">:</span><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">LawfulMonad</span> <span class=\"o\">(</span><span class=\"n\">ContT</span> <span class=\"n\">r</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">LawfulMonad.mk'</span>\n<span class=\"n\">lake</span><span class=\"bp\">-</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">mathlib</span><span class=\"bp\">/</span><span class=\"n\">Mathlib</span><span class=\"bp\">/</span><span class=\"n\">Control</span><span class=\"bp\">/</span><span class=\"n\">Monad</span><span class=\"bp\">/</span><span class=\"n\">Cont.lean</span><span class=\"o\">:</span><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">LawfulMonadCont</span> <span class=\"o\">(</span><span class=\"n\">ContT</span> <span class=\"n\">r</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n<span class=\"n\">lake</span><span class=\"bp\">-</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">mathlib</span><span class=\"bp\">/</span><span class=\"n\">Mathlib</span><span class=\"bp\">/</span><span class=\"n\">Control</span><span class=\"bp\">/</span><span class=\"n\">Basic.lean</span><span class=\"o\">:</span><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">LawfulMonad</span> <span class=\"o\">(</span><span class=\"n\">Sum.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n<span class=\"n\">lake</span><span class=\"bp\">-</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">mathlib</span><span class=\"bp\">/</span><span class=\"n\">Mathlib</span><span class=\"bp\">/</span><span class=\"n\">Control</span><span class=\"bp\">/</span><span class=\"n\">ULift.lean</span><span class=\"o\">:</span><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">LawfulMonad</span> <span class=\"n\">PLift</span> <span class=\"n\">where</span>\n<span class=\"n\">lake</span><span class=\"bp\">-</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">mathlib</span><span class=\"bp\">/</span><span class=\"n\">Mathlib</span><span class=\"bp\">/</span><span class=\"n\">Control</span><span class=\"bp\">/</span><span class=\"n\">ULift.lean</span><span class=\"o\">:</span><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">LawfulMonad</span> <span class=\"n\">ULift</span> <span class=\"n\">where</span>\n<span class=\"n\">lake</span><span class=\"bp\">-</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">std</span><span class=\"bp\">/</span><span class=\"n\">Std</span><span class=\"bp\">/</span><span class=\"n\">Classes</span><span class=\"bp\">/</span><span class=\"n\">LawfulMonad.lean</span><span class=\"o\">:</span><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">LawfulMonad</span> <span class=\"o\">(</span><span class=\"n\">Except</span> <span class=\"n\">ε</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">LawfulMonad.mk'</span>\n<span class=\"n\">lake</span><span class=\"bp\">-</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">std</span><span class=\"bp\">/</span><span class=\"n\">Std</span><span class=\"bp\">/</span><span class=\"n\">Classes</span><span class=\"bp\">/</span><span class=\"n\">LawfulMonad.lean</span><span class=\"o\">:</span><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">LawfulMonad</span> <span class=\"n\">Option</span> <span class=\"o\">:=</span> <span class=\"n\">LawfulMonad.mk'</span>\n</code></pre></div>\n<p>For example, here is <code>LazyList</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">LawfulMonad</span> <span class=\"n\">LazyList</span> <span class=\"o\">:=</span> <span class=\"n\">LawfulMonad.mk'</span>\n  <span class=\"o\">(</span><span class=\"n\">bind_pure_comp</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">intro</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">f</span> <span class=\"n\">xs</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">bind</span><span class=\"o\">,</span> <span class=\"n\">Functor.map</span><span class=\"o\">,</span> <span class=\"n\">pure</span><span class=\"o\">,</span> <span class=\"n\">singleton</span><span class=\"o\">]</span>\n    <span class=\"n\">induction'</span> <span class=\"n\">xs</span> <span class=\"n\">using</span> <span class=\"n\">LazyList.rec</span> <span class=\"k\">with</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">ih</span>\n    <span class=\"bp\">·</span> <span class=\"n\">rfl</span>\n    <span class=\"bp\">·</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">bind._eq_2</span><span class=\"o\">,</span> <span class=\"n\">append</span><span class=\"o\">,</span> <span class=\"n\">traverse._eq_2</span><span class=\"o\">,</span> <span class=\"n\">Id.map_eq</span><span class=\"o\">,</span> <span class=\"n\">cons.injEq</span><span class=\"o\">,</span> <span class=\"n\">true_and</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">congr</span>\n    <span class=\"bp\">·</span> <span class=\"n\">ext</span><span class=\"bp\">;</span> <span class=\"n\">apply</span> <span class=\"n\">ih</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">pure_bind</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">intros</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">bind</span><span class=\"o\">,</span> <span class=\"n\">pure</span><span class=\"o\">,</span> <span class=\"n\">singleton</span><span class=\"o\">,</span> <span class=\"n\">LazyList.bind</span><span class=\"o\">]</span>\n    <span class=\"n\">apply</span> <span class=\"n\">append_nil</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">bind_assoc</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">intro</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">xs</span> <span class=\"n\">_</span> <span class=\"n\">_</span>\n    <span class=\"n\">induction'</span> <span class=\"n\">xs</span> <span class=\"n\">using</span> <span class=\"n\">LazyList.rec</span> <span class=\"k\">with</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">ih</span>\n    <span class=\"bp\">·</span> <span class=\"n\">rfl</span>\n    <span class=\"bp\">·</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">bind</span><span class=\"o\">,</span> <span class=\"n\">LazyList.bind</span><span class=\"o\">,</span> <span class=\"n\">append_bind</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">congr</span>\n    <span class=\"bp\">·</span> <span class=\"n\">congr</span><span class=\"bp\">;</span> <span class=\"n\">funext</span><span class=\"bp\">;</span> <span class=\"n\">apply</span> <span class=\"n\">ih</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">id_map</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">intro</span> <span class=\"n\">_</span> <span class=\"n\">xs</span>\n    <span class=\"n\">induction'</span> <span class=\"n\">xs</span> <span class=\"n\">using</span> <span class=\"n\">LazyList.rec</span> <span class=\"k\">with</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">ih</span>\n    <span class=\"bp\">·</span> <span class=\"n\">rfl</span>\n    <span class=\"bp\">·</span> <span class=\"n\">simpa</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">Functor.map</span><span class=\"o\">,</span> <span class=\"n\">traverse._eq_2</span><span class=\"o\">,</span> <span class=\"n\">id_eq</span><span class=\"o\">,</span> <span class=\"n\">Id.map_eq</span><span class=\"o\">,</span> <span class=\"n\">Seq.seq</span><span class=\"o\">,</span> <span class=\"n\">cons.injEq</span><span class=\"o\">,</span> <span class=\"n\">true_and</span><span class=\"o\">]</span>\n    <span class=\"bp\">·</span> <span class=\"n\">ext</span><span class=\"bp\">;</span> <span class=\"n\">apply</span> <span class=\"n\">ih</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>From this the pattern would be:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">LawfulMonad</span> <span class=\"o\">(</span><span class=\"n\">Reader</span> <span class=\"n\">ρ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">LawfulMonad.mk'</span>\n  <span class=\"o\">(</span><span class=\"n\">bind_pure_comp</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">pure_bind</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">bind_assoc</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">id_map</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>That works:<br>\n<a href=\"/user_uploads/3121/mcL_GhZexIlCyMMCb3EwAKHi/Screenshot-from-2023-09-30-11-34-53.png\">Screenshot-from-2023-09-30-11-34-53.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/mcL_GhZexIlCyMMCb3EwAKHi/Screenshot-from-2023-09-30-11-34-53.png\" title=\"Screenshot-from-2023-09-30-11-34-53.png\"><img src=\"/user_uploads/3121/mcL_GhZexIlCyMMCb3EwAKHi/Screenshot-from-2023-09-30-11-34-53.png\"></a></div>",
        "id": 394094147,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1696088103
    },
    {
        "content": "<p>Ah, sorry, missed a prime on <code>mk'</code>.</p>",
        "id": 394094524,
        "sender_full_name": "Sky Wilshaw",
        "timestamp": 1696088444
    },
    {
        "content": "<p>Both ways should work, and the one you found seems more commonly used.</p>",
        "id": 394094552,
        "sender_full_name": "Sky Wilshaw",
        "timestamp": 1696088471
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> , using <code>apply</code> gives me 8 goals rather than 4 for the version above, but at least the red squiggle problem mostly goes away (it is squiggling the <code>by</code> to tell me that I have more work to do):<br>\n<a href=\"/user_uploads/3121/O6qcdNieGpjq4hAJKizBFal2/Screenshot-from-2023-09-30-11-40-55.png\">Screenshot-from-2023-09-30-11-40-55.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/O6qcdNieGpjq4hAJKizBFal2/Screenshot-from-2023-09-30-11-40-55.png\" title=\"Screenshot-from-2023-09-30-11-40-55.png\"><img src=\"/user_uploads/3121/O6qcdNieGpjq4hAJKizBFal2/Screenshot-from-2023-09-30-11-40-55.png\"></a></div>",
        "id": 394094553,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1696088472
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"492774\">Sky Wilshaw</span> <a href=\"#narrow/stream/113489-new-members/topic/Checking.20that.20a.20Monad.20instance.20is.20a.20Monad/near/394094524\">said</a>:</p>\n<blockquote>\n<p>Ah, sorry, missed a prime on <code>mk'</code>.</p>\n</blockquote>\n<p>Incidentally, it's easier to help if you copy+paste a working <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> rather than a screenshot, because then we can test your code.</p>",
        "id": 394094885,
        "sender_full_name": "Sky Wilshaw",
        "timestamp": 1696088749
    },
    {
        "content": "<p>(and test our suggestions)</p>",
        "id": 394094932,
        "sender_full_name": "Sky Wilshaw",
        "timestamp": 1696088764
    },
    {
        "content": "<p>Thank you <span class=\"user-mention\" data-user-id=\"492774\">@Sky Wilshaw</span> this is the <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>: </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Std</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Reader</span> <span class=\"o\">(</span><span class=\"n\">ρ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span> <span class=\"n\">ρ</span> <span class=\"bp\">→</span> <span class=\"n\">α</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">read</span> <span class=\"o\">:</span> <span class=\"n\">Reader</span> <span class=\"n\">ρ</span> <span class=\"n\">ρ</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">env</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">env</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Reader.pure</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Reader</span> <span class=\"n\">ρ</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Reader.bind</span> <span class=\"o\">{</span><span class=\"n\">ρ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">result</span> <span class=\"o\">:</span> <span class=\"n\">ρ</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">next</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">ρ</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ρ</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"o\">:=</span>\n  <span class=\"k\">fun</span> <span class=\"n\">env</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">next</span> <span class=\"o\">(</span><span class=\"n\">result</span> <span class=\"n\">env</span><span class=\"o\">)</span> <span class=\"n\">env</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Monad</span> <span class=\"o\">(</span><span class=\"n\">Reader</span> <span class=\"n\">ρ</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">pure</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span>\n  <span class=\"n\">bind</span> <span class=\"n\">x</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">env</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">env</span><span class=\"o\">)</span> <span class=\"n\">env</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">LawfulMonad</span> <span class=\"o\">(</span><span class=\"n\">Reader</span> <span class=\"n\">ρ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">LawfulMonad.mk'</span>\n  <span class=\"o\">(</span><span class=\"n\">bind_pure_comp</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">pure_bind</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"n\">f</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rfl</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">bind_assoc</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"bp\">=&gt;</span> <span class=\"gr\">sorry</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">id_map</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"gr\">sorry</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>Also <a href=\"https://tinyurl.com/msemb5er\">this is a nice way to present examples</a>, except it requires a tiny url due to presence of parentheses.</p>",
        "id": 394121494,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1696117069
    },
    {
        "content": "<p>Anyone can click on the button in the top right of your code block to \"view in lean 4 playground\" and it will open the required lean 4 online interface for them</p>",
        "id": 394123026,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1696118728
    },
    {
        "content": "<p>Going back to the motivating problem, in the text, a lawful monad is described as one which satisfies the \"monad contract\":</p>\n<ul>\n<li><strong>LI</strong>: <code>pure</code> should be a left identity of <code>bind</code>: <code>bind (pure v) = f v </code></li>\n<li><strong>RI</strong>: <code>pure</code> should be a right identity of <code>bind</code>: <code>bind v pure = v </code></li>\n<li><strong>Assoc</strong>: <code>bind</code> should be associative: <code>bind (bind v f) g  = bind v (fun x =&gt; bind (f x) g)</code></li>\n</ul>\n<p>In MathLib, the <code>LawfulMonad.mk'</code> contract is a little different.  One instance shows four conditions are required:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">LawfulMonad</span> <span class=\"n\">Option</span> <span class=\"o\">:=</span> <span class=\"n\">LawfulMonad.mk'</span>\n  <span class=\"o\">(</span><span class=\"n\">id_map</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span> <span class=\"n\">cases</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">rfl</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">pure_bind</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">f</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rfl</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">bind_assoc</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span> <span class=\"n\">cases</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">rfl</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">bind_pure_comp</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span> <span class=\"n\">cases</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">rfl</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>Another instance only requires three:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">LawfulMonad</span> <span class=\"o\">(</span><span class=\"n\">Except</span> <span class=\"n\">ε</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">LawfulMonad.mk'</span>\n  <span class=\"o\">(</span><span class=\"n\">id_map</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span> <span class=\"n\">cases</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">rfl</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">pure_bind</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"n\">f</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rfl</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">bind_assoc</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span> <span class=\"n\">cases</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">rfl</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>This instance requires <code>bind_map</code> as well:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">LawfulMonad</span> <span class=\"n\">Set</span> <span class=\"o\">:=</span> <span class=\"n\">LawfulMonad.mk'</span>\n  <span class=\"o\">(</span><span class=\"n\">id_map</span> <span class=\"o\">:=</span> <span class=\"n\">image_id</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">pure_bind</span> <span class=\"o\">:=</span> <span class=\"n\">biUnion_singleton</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">bind_assoc</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">bind_def</span><span class=\"o\">,</span> <span class=\"n\">biUnion_iUnion</span><span class=\"o\">])</span>\n  <span class=\"o\">(</span><span class=\"n\">bind_pure_comp</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">image_eq_iUnion</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">bind_map</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">seq_def.symm</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>So <code>bind_pure_comp</code> and <code>bind_map</code> come with proofs which doesn't always work (more of a tactic?), and when they don't, it suffices to substitute  a working proof (something I didn't know).   There are additional properties to the <code>LawfulMonad.mk'</code> supplied with proofs that might not work, namely <code>seqLeft_eq</code>, <code>seqRight_eq</code>,  in which case we would need to supply them. </p>\n<p>So, the five essential elements of the <code>LawfulMonad.mk'</code> contract are:</p>\n<ul>\n<li><strong>id_map</strong>: <code>∀ {α} (x : m α), id &lt;$&gt; x = x</code></li>\n<li><strong>pure_bind</strong>: <code>∀ {α β} (x : α) (f : α → m β), ((pure x) &gt;&gt;= f)= (f x))</code></li>\n<li><strong>bind_assoc</strong>: <code>∀ {α β γ} (x : m α) (f : α → m β) (g : β → m γ), ((x &gt;&gt;= f) &gt;&gt;= g) = (x &gt;&gt;= (fun x =&gt; (f x &gt;&gt;= g)))</code></li>\n<li><strong>bind_pure_comp</strong>: <code>∀ {α β} (f : α → β) (x : m α),   (x &gt;&gt;= (fun y =&gt; pure (f y))) = (f &lt;$&gt; x)</code></li>\n<li><strong>bind_map</strong> : <code>∀ {α β} (f : m (α → β)) (x : m α), f &gt;&gt;= (. &lt;$&gt; x) = f &lt;*&gt; x </code></li>\n</ul>\n<p>Pairing these up with the book's monad contract:</p>\n<ul>\n<li><strong>bind_assoc</strong>: <code>∀ {α β γ} (x : m α) (f : α → m β) (g : β → m γ), ((x &gt;&gt;= f) &gt;&gt;= g) = (x &gt;&gt;= (fun x =&gt; (f x &gt;&gt;= g)))</code></li>\n<li><strong>Assoc</strong>: <code>bind</code> should be associative: <code>bind (bind v f) g  = bind v (fun x =&gt; bind (f x) g)</code></li>\n</ul>\n<p>and </p>\n<ul>\n<li><strong>RI</strong>: <code>pure</code> should be a right identity of <code>bind</code>: <code>bind v pure = v </code></li>\n<li><strong>id_map</strong>: <code>∀ {α} (x : m α), id &lt;$&gt; x = x</code></li>\n</ul>\n<p>and </p>\n<ul>\n<li><strong>LI</strong>: <code>pure</code> should be a left identity of <code>bind</code>: <code>bind (pure v) = f v </code></li>\n<li><strong>pure_bind</strong>: <code>∀ {α β} (x : α) (f : α → m β), ((pure x) &gt;&gt;= f)= (f x))</code></li>\n</ul>\n<p>and these are extra:</p>\n<ul>\n<li><strong>bind_pure_comp</strong>: <code>∀ {α β} (f : α → β) (x : m α),   (x &gt;&gt;= (fun y =&gt; pure (f y))) = (f &lt;$&gt; x)</code></li>\n<li><strong>bind_map</strong> : <code>∀ {α β} (f : m (α → β)) (x : m α), f &gt;&gt;= (. &lt;$&gt; x) = f &lt;*&gt; x </code></li>\n</ul>\n<p>I don't really have a clue how to prove these properties from scratch.  In desperation, I look at all examples in Mathlib of proofs these properties:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">(</span><span class=\"n\">pure_bind</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">intros</span><span class=\"bp\">;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">Bind.bind</span><span class=\"o\">,</span> <span class=\"n\">Pure.pure</span><span class=\"o\">,</span> <span class=\"n\">WriterT.mk</span><span class=\"o\">])</span>\n<span class=\"o\">(</span><span class=\"n\">pure_bind</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">f</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">funext</span> <span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Part.bind_some</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">))</span>\n<span class=\"o\">(</span><span class=\"n\">pure_bind</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">intros</span><span class=\"bp\">;</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">bind</span><span class=\"o\">,</span> <span class=\"n\">pure</span><span class=\"o\">,</span> <span class=\"n\">singleton</span><span class=\"o\">,</span> <span class=\"n\">LazyList.bind</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">apply</span> <span class=\"n\">append_nil</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">pure_bind</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">ret_bind</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">pure_bind</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"n\">x</span> <span class=\"n\">f</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">ext.2</span> <span class=\"bp\">&lt;|</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">pure_bind</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"bp\">↦</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">pure_def</span><span class=\"o\">,</span> <span class=\"n\">bind_def</span><span class=\"o\">,</span> <span class=\"n\">singleton_bind</span><span class=\"o\">])</span>\n<span class=\"o\">(</span><span class=\"n\">pure_bind</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">f</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">pure_bind</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">pure_bind</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">f</span> <span class=\"bp\">↦</span> <span class=\"n\">pure_bind</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">pure_bind</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">↦</span> <span class=\"n\">rfl</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">pure_bind</span> <span class=\"o\">:=</span> <span class=\"n\">pure_bind</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">pure_bind</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">List.append_nil</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">pure_bind</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">intros</span><span class=\"bp\">;</span> <span class=\"n\">apply</span> <span class=\"n\">OptionT.ext</span><span class=\"bp\">;</span> <span class=\"n\">simp</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">pure_bind</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">intros</span><span class=\"bp\">;</span> <span class=\"n\">ext</span><span class=\"bp\">;</span> <span class=\"n\">rfl</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">pure_bind</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">intros</span><span class=\"bp\">;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">Bind.bind</span><span class=\"o\">,</span> <span class=\"n\">Pure.pure</span><span class=\"o\">,</span> <span class=\"n\">WriterT.mk</span><span class=\"o\">])</span>\n\n<span class=\"o\">(</span><span class=\"n\">id_map</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">intros</span><span class=\"bp\">;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">Functor.map</span><span class=\"o\">,</span> <span class=\"n\">WriterT.mk</span><span class=\"o\">])</span>\n<span class=\"o\">(</span><span class=\"n\">id_map</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">f</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span> <span class=\"n\">funext</span> <span class=\"n\">a</span><span class=\"bp\">;</span> <span class=\"n\">dsimp</span> <span class=\"o\">[</span><span class=\"n\">Functor.map</span><span class=\"o\">,</span> <span class=\"n\">PFun.map</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">cases</span> <span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"bp\">;</span> <span class=\"n\">rfl</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">id_map</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">intro</span> <span class=\"n\">_</span> <span class=\"n\">xs</span><span class=\"bp\">;</span> <span class=\"n\">induction'</span> <span class=\"n\">xs</span> <span class=\"n\">using</span> <span class=\"n\">LazyList.rec</span> <span class=\"k\">with</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">ih</span><span class=\"bp\">;</span> <span class=\"bp\">·</span> <span class=\"n\">rfl</span><span class=\"bp\">;</span> <span class=\"bp\">·</span> <span class=\"n\">simpa</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">Functor.map</span><span class=\"o\">,</span> <span class=\"n\">traverse._eq_2</span><span class=\"o\">,</span> <span class=\"n\">id_eq</span><span class=\"o\">,</span> <span class=\"n\">Id.map_eq</span><span class=\"o\">,</span> <span class=\"n\">Seq.seq</span><span class=\"o\">,</span> <span class=\"n\">cons.injEq</span><span class=\"o\">,</span> <span class=\"n\">true_and</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"bp\">·</span> <span class=\"n\">ext</span><span class=\"bp\">;</span> <span class=\"n\">apply</span> <span class=\"n\">ih</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">id_map</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">map_id</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">id_map</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"n\">q</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">ext.2</span> <span class=\"bp\">&lt;|</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">id_map</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">↦</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">fmap_def</span><span class=\"o\">,</span> <span class=\"n\">id_eq</span><span class=\"o\">,</span> <span class=\"n\">map_id'</span><span class=\"o\">])</span>\n<span class=\"o\">(</span><span class=\"n\">id_map</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">FreeGroup.induction_on</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">map_one</span> <span class=\"n\">id</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">map_pure</span> <span class=\"n\">id</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">ih</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">map_inv</span><span class=\"o\">,</span> <span class=\"n\">ih</span><span class=\"o\">])</span><span class=\"bp\">;</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">ihx</span> <span class=\"n\">ihy</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">map_mul</span><span class=\"o\">,</span> <span class=\"n\">ihx</span><span class=\"o\">,</span> <span class=\"n\">ihy</span><span class=\"o\">])</span>\n<span class=\"o\">(</span><span class=\"n\">id_map</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">↦</span> <span class=\"n\">FreeAbelianGroup.induction_on'</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">FreeAbelianGroup.map_zero</span> <span class=\"n\">id</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">map_pure</span> <span class=\"n\">id</span><span class=\"o\">)</span><span class=\"bp\">;</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">ih</span> <span class=\"bp\">↦</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">FreeAbelianGroup.map_neg</span><span class=\"o\">,</span> <span class=\"n\">ih</span><span class=\"o\">])</span><span class=\"bp\">;</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">ihx</span> <span class=\"n\">ihy</span> <span class=\"bp\">↦</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">FreeAbelianGroup.map_add</span><span class=\"o\">,</span> <span class=\"n\">ihx</span><span class=\"o\">,</span> <span class=\"n\">ihy</span><span class=\"o\">])</span>\n<span class=\"o\">(</span><span class=\"n\">id_map</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">↦</span> <span class=\"n\">FreeMagma.recOnPure</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">↦</span> <span class=\"n\">rfl</span><span class=\"o\">)</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">ih1</span> <span class=\"n\">ih2</span> <span class=\"bp\">↦</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">map_mul'</span><span class=\"o\">,</span> <span class=\"n\">ih1</span><span class=\"o\">,</span> <span class=\"n\">ih2</span><span class=\"o\">])</span><span class=\"bp\">;</span><span class=\"o\">(</span><span class=\"n\">id_map</span> <span class=\"o\">:=</span> <span class=\"n\">id_map</span><span class=\"o\">)</span><span class=\"bp\">;</span><span class=\"o\">(</span><span class=\"n\">id_map</span> <span class=\"o\">:=</span> <span class=\"n\">map_id</span><span class=\"o\">)</span><span class=\"bp\">;</span><span class=\"o\">(</span><span class=\"n\">id_map</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span><span class=\"bp\">;</span><span class=\"n\">intros</span><span class=\"bp\">;</span><span class=\"n\">apply</span> <span class=\"n\">OptionT.ext</span><span class=\"bp\">;</span><span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">OptionT.run_map</span><span class=\"o\">]</span><span class=\"bp\">;</span><span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">map_congr</span><span class=\"o\">,</span> <span class=\"n\">id_map</span><span class=\"o\">]</span><span class=\"bp\">;</span><span class=\"n\">intro</span> <span class=\"n\">a</span><span class=\"bp\">;</span><span class=\"n\">cases</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">rfl</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">id_map</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">intros</span><span class=\"bp\">;</span> <span class=\"n\">rfl</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">id_map</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">intros</span><span class=\"bp\">;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">Functor.map</span><span class=\"o\">,</span> <span class=\"n\">WriterT.mk</span><span class=\"o\">])</span>\n\n<span class=\"o\">(</span><span class=\"n\">bind_assoc</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">intros</span><span class=\"bp\">;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">Bind.bind</span><span class=\"o\">,</span> <span class=\"n\">mul_assoc</span><span class=\"o\">,</span> <span class=\"n\">WriterT.mk</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">bind_pure_comp</span><span class=\"o\">])</span>\n<span class=\"o\">(</span><span class=\"n\">bind_assoc</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"n\">k</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">funext</span> <span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">bind_assoc</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">g</span> <span class=\"n\">b</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"k\">fun</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">k</span> <span class=\"n\">b</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">bind_assoc</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">intro</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">xs</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"bp\">;</span> <span class=\"n\">induction'</span> <span class=\"n\">xs</span> <span class=\"n\">using</span> <span class=\"n\">LazyList.rec</span> <span class=\"k\">with</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">ih</span><span class=\"bp\">;</span> <span class=\"bp\">·</span> <span class=\"n\">rfl</span><span class=\"bp\">;</span> <span class=\"bp\">·</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">bind</span><span class=\"o\">,</span> <span class=\"n\">LazyList.bind</span><span class=\"o\">,</span> <span class=\"n\">append_bind</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">congr</span><span class=\"bp\">;</span>  <span class=\"bp\">·</span> <span class=\"n\">congr</span><span class=\"bp\">;</span> <span class=\"n\">funext</span><span class=\"bp\">;</span> <span class=\"n\">apply</span> <span class=\"n\">ih</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">bind_assoc</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">bind_assoc</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">bind_assoc</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"n\">γ</span> <span class=\"n\">s</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">ext.2</span> <span class=\"bp\">&lt;|</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">bind_def</span><span class=\"o\">,</span> <span class=\"n\">mem_bind</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"k\">fun</span> <span class=\"n\">c</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">⟨</span><span class=\"k\">fun</span> <span class=\"o\">⟨</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">as</span><span class=\"o\">,</span> <span class=\"n\">bf</span><span class=\"o\">⟩,</span> <span class=\"n\">cg</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">as</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">bf</span><span class=\"o\">,</span> <span class=\"n\">cg</span><span class=\"o\">⟩,</span><span class=\"bp\">;</span> <span class=\"k\">fun</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">as</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">bf</span><span class=\"o\">,</span> <span class=\"n\">cg</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">⟨</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">as</span><span class=\"o\">,</span> <span class=\"n\">bf</span><span class=\"o\">⟩,</span> <span class=\"n\">cg</span><span class=\"o\">⟩⟩)</span>\n<span class=\"o\">(</span><span class=\"n\">bind_assoc</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">bind_assoc</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">bind_assoc</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">FreeGroup.induction_on</span> <span class=\"n\">x</span><span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">intros</span><span class=\"bp\">;</span> <span class=\"n\">iterate</span> <span class=\"mi\">3</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">one_bind</span><span class=\"o\">])(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span> <span class=\"n\">intros</span><span class=\"bp\">;</span> <span class=\"n\">iterate</span> <span class=\"mi\">2</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">pure_bind</span><span class=\"o\">])(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">ih</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span> <span class=\"n\">intros</span><span class=\"bp\">;</span><span class=\"o\">(</span><span class=\"n\">iterate</span> <span class=\"mi\">3</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">inv_bind</span><span class=\"o\">])</span><span class=\"bp\">;</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">ih</span><span class=\"o\">])(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">ihx</span> <span class=\"n\">ihy</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span> <span class=\"n\">intros</span><span class=\"bp\">;</span><span class=\"o\">(</span><span class=\"n\">iterate</span> <span class=\"mi\">3</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mul_bind</span><span class=\"o\">])</span><span class=\"bp\">;</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">ihx</span><span class=\"o\">,</span> <span class=\"n\">ihy</span><span class=\"o\">]))</span>\n<span class=\"o\">(</span><span class=\"n\">bind_assoc</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"bp\">↦</span> <span class=\"n\">FreeAbelianGroup.induction_on'</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">iterate</span> <span class=\"mi\">3</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">zero_bind</span><span class=\"o\">])</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">↦</span> <span class=\"kd\">by</span> <span class=\"n\">iterate</span> <span class=\"mi\">2</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">pure_bind</span><span class=\"o\">])</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">ih</span> <span class=\"bp\">↦</span> <span class=\"kd\">by</span> <span class=\"n\">iterate</span> <span class=\"mi\">3</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">neg_bind</span><span class=\"o\">]</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">try</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">ih</span><span class=\"o\">])</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">ihx</span> <span class=\"n\">ihy</span> <span class=\"bp\">↦</span> <span class=\"kd\">by</span> <span class=\"n\">iterate</span> <span class=\"mi\">3</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">add_bind</span><span class=\"o\">]</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">try</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">ihx</span><span class=\"o\">,</span> <span class=\"n\">ihy</span><span class=\"o\">])</span>\n<span class=\"o\">(</span><span class=\"n\">bind_assoc</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"bp\">↦</span> <span class=\"n\">FreeMagma.recOnPure</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">↦</span> <span class=\"n\">rfl</span><span class=\"o\">)</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">ih1</span> <span class=\"n\">ih2</span> <span class=\"bp\">↦</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mul_bind</span><span class=\"o\">,</span> <span class=\"n\">mul_bind</span><span class=\"o\">,</span> <span class=\"n\">mul_bind</span><span class=\"o\">,</span> <span class=\"n\">ih1</span><span class=\"o\">,</span> <span class=\"n\">ih2</span><span class=\"o\">])</span>\n<span class=\"o\">(</span><span class=\"n\">bind_assoc</span> <span class=\"o\">:=</span> <span class=\"n\">bind_bind</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">bind_assoc</span> <span class=\"o\">:=</span> <span class=\"n\">List.bind_assoc</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">bind_assoc</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>  <span class=\"n\">intros</span><span class=\"bp\">;</span> <span class=\"n\">apply</span> <span class=\"n\">OptionT.ext</span><span class=\"bp\">;</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">OptionT.run_bind</span><span class=\"o\">,</span> <span class=\"n\">bind_assoc</span><span class=\"o\">]</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">bind_congr</span><span class=\"o\">]</span> <span class=\"n\">intro</span> <span class=\"n\">a</span><span class=\"bp\">;</span> <span class=\"n\">cases</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">simp</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">bind_assoc</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">intros</span><span class=\"bp\">;</span> <span class=\"n\">ext</span><span class=\"bp\">;</span> <span class=\"n\">rfl</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">bind_assoc</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">intros</span><span class=\"bp\">;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">Bind.bind</span><span class=\"o\">,</span> <span class=\"n\">mul_assoc</span><span class=\"o\">,</span> <span class=\"n\">WriterT.mk</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">bind_pure_comp</span><span class=\"o\">])</span>\n\n<span class=\"o\">(</span><span class=\"n\">bind_pure_comp</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">intros</span><span class=\"bp\">;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">Bind.bind</span><span class=\"o\">,</span> <span class=\"n\">Functor.map</span><span class=\"o\">,</span> <span class=\"n\">Pure.pure</span><span class=\"o\">,</span> <span class=\"n\">WriterT.mk</span><span class=\"o\">,</span> <span class=\"n\">bind_pure_comp</span><span class=\"o\">])</span>\n<span class=\"o\">(</span><span class=\"n\">bind_pure_comp</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">funext</span> <span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Part.bind_some_eq_map</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">bind_pure_comp</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">intro</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">f</span> <span class=\"n\">xs</span><span class=\"bp\">;</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">bind</span><span class=\"o\">,</span> <span class=\"n\">Functor.map</span><span class=\"o\">,</span> <span class=\"n\">pure</span><span class=\"o\">,</span> <span class=\"n\">singleton</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">induction'</span> <span class=\"n\">xs</span> <span class=\"n\">using</span> <span class=\"n\">LazyList.rec</span> <span class=\"k\">with</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">ih</span><span class=\"bp\">;</span> <span class=\"bp\">·</span> <span class=\"n\">rfl</span><span class=\"bp\">;</span> <span class=\"bp\">·</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">bind._eq_2</span><span class=\"o\">,</span> <span class=\"n\">append</span><span class=\"o\">,</span> <span class=\"n\">traverse._eq_2</span><span class=\"o\">,</span> <span class=\"n\">Id.map_eq</span><span class=\"o\">,</span> <span class=\"n\">cons.injEq</span><span class=\"o\">,</span> <span class=\"n\">true_and</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">congr</span><span class=\"bp\">;</span>  <span class=\"bp\">·</span> <span class=\"n\">ext</span><span class=\"bp\">;</span> <span class=\"n\">apply</span> <span class=\"n\">ih</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">bind_pure_comp</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">bind_pure</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">bind_pure_comp</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"n\">f</span> <span class=\"n\">s</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">ext.2</span> <span class=\"bp\">&lt;|</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">eq_comm</span><span class=\"o\">])</span>\n<span class=\"o\">(</span><span class=\"n\">bind_pure_comp</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"bp\">↦</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">pure_def</span><span class=\"o\">,</span> <span class=\"n\">bind_def</span><span class=\"o\">,</span> <span class=\"n\">bind_singleton</span><span class=\"o\">,</span> <span class=\"n\">fmap_def</span><span class=\"o\">])</span>\n<span class=\"o\">(</span><span class=\"n\">bind_pure_comp</span>  <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">FreeGroup.induction_on</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">one_bind</span><span class=\"o\">,</span> <span class=\"n\">map_one</span><span class=\"o\">])</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">pure_bind</span><span class=\"o\">,</span> <span class=\"n\">map_pure</span><span class=\"o\">])</span><span class=\"bp\">;</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">ih</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">inv_bind</span><span class=\"o\">,</span> <span class=\"n\">map_inv</span><span class=\"o\">,</span> <span class=\"n\">ih</span><span class=\"o\">])</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">ihx</span> <span class=\"n\">ihy</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span><span class=\"bp\">;</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mul_bind</span><span class=\"o\">,</span> <span class=\"n\">map_mul</span><span class=\"o\">,</span> <span class=\"n\">ihx</span><span class=\"o\">,</span> <span class=\"n\">ihy</span><span class=\"o\">])</span>\n<span class=\"o\">(</span><span class=\"n\">bind_pure_comp</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rfl</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">bind_pure_comp</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">map_eq_bind</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">bind_pure_comp</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">intros</span><span class=\"bp\">;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">Bind.bind</span><span class=\"o\">,</span> <span class=\"n\">Functor.map</span><span class=\"o\">,</span> <span class=\"n\">Pure.pure</span><span class=\"o\">,</span> <span class=\"n\">WriterT.mk</span><span class=\"o\">,</span> <span class=\"n\">bind_pure_comp</span><span class=\"o\">])</span>\n</code></pre></div>\n<p>I use the simplest method for the first 3, and I guess I don't need a proof of <code>bind_pure_comp</code>.  It just works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Std</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Reader</span> <span class=\"o\">(</span><span class=\"n\">ρ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span> <span class=\"n\">ρ</span> <span class=\"bp\">→</span> <span class=\"n\">α</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">read</span> <span class=\"o\">:</span> <span class=\"n\">Reader</span> <span class=\"n\">ρ</span> <span class=\"n\">ρ</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">env</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">env</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Reader.pure</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Reader</span> <span class=\"n\">ρ</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Reader.bind</span> <span class=\"o\">{</span><span class=\"n\">ρ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">result</span> <span class=\"o\">:</span> <span class=\"n\">ρ</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">next</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">ρ</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ρ</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"o\">:=</span>\n  <span class=\"k\">fun</span> <span class=\"n\">env</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">next</span> <span class=\"o\">(</span><span class=\"n\">result</span> <span class=\"n\">env</span><span class=\"o\">)</span> <span class=\"n\">env</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Monad</span> <span class=\"o\">(</span><span class=\"n\">Reader</span> <span class=\"n\">ρ</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">pure</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span>\n  <span class=\"n\">bind</span> <span class=\"n\">x</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">env</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">env</span><span class=\"o\">)</span> <span class=\"n\">env</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">LawfulMonad</span> <span class=\"o\">(</span><span class=\"n\">Reader</span> <span class=\"n\">ρ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">LawfulMonad.mk'</span>\n  <span class=\"o\">(</span><span class=\"n\">pure_bind</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"n\">f</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rfl</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">id_map</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">intros</span><span class=\"bp\">;</span> <span class=\"n\">rfl</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">bind_assoc</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">intros</span><span class=\"bp\">;</span> <span class=\"n\">rfl</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>I have no idea what these 3 proofs do.  They just work.</p>\n<p>I have no idea when the default proofs of the other properties such as <code>bind_pure_comp</code> and <code>bind_map</code> might be insufficient, and why.</p>\n<p>My editorial takeaway is that, while it doesn't add a substantial amount of additional code in this example, it does seem like developers implementing the more operational aspects of Lean in Lean, or developers tempted to use Lean as a programming language for some other application, would have a very hard time making all of their implementation code \"lawful\", in the sense of proving that every piece of implementation code satisfied some initial pre-coding-phase functional specification.</p>",
        "id": 394222232,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1696171914
    },
    {
        "content": "<p>So anyway, I would mark this Resolved, but I can't:<br>\n<a href=\"/user_uploads/3121/_lnyACBprRspiGjnIi0p-Z1D/Screenshot-from-2023-10-01-12-19-45.png\">Screenshot-from-2023-10-01-12-19-45.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/_lnyACBprRspiGjnIi0p-Z1D/Screenshot-from-2023-10-01-12-19-45.png\" title=\"Screenshot-from-2023-10-01-12-19-45.png\"><img src=\"/user_uploads/3121/_lnyACBprRspiGjnIi0p-Z1D/Screenshot-from-2023-10-01-12-19-45.png\"></a></div>",
        "id": 394232567,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1696177208
    },
    {
        "content": "<p>Dont worry about it we  generally don't use the resolve feature much here</p>",
        "id": 394232827,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1696177396
    },
    {
        "content": "<p>(in fact you should not use it, it breaks links)</p>",
        "id": 394236002,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1696179174
    },
    {
        "content": "<p>The reason there are additional fields is because Lean's <code>Monad</code> typeclass allows you to customize the <code>map</code> function, rather than assuming it is defined in terms of <code>bind</code> and <code>pure</code>. If you do such customization, you have to prove this as an equality instead, that's the <code>bind_pure_comp</code> theorem. If you don't do any customization, those three axioms you mention are sufficient:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Std</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">M</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">M.pure</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"kd\">def</span> <span class=\"n\">M.bind</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">result</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">next</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">M</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"n\">β</span>  <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Monad</span> <span class=\"n\">M</span> <span class=\"n\">where</span>\n  <span class=\"n\">pure</span> <span class=\"o\">:=</span> <span class=\"n\">M.pure</span>\n  <span class=\"n\">bind</span> <span class=\"o\">:=</span> <span class=\"n\">M.bind</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">LawfulMonad</span> <span class=\"n\">M</span> <span class=\"o\">:=</span> <span class=\"n\">LawfulMonad.mk'</span>\n  <span class=\"o\">(</span><span class=\"n\">pure_bind</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"n\">f</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">show</span> <span class=\"n\">M.bind</span> <span class=\"o\">(</span><span class=\"n\">M.pure</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"k\">from</span> <span class=\"gr\">sorry</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">bind_assoc</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">v</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">show</span> <span class=\"n\">bind</span> <span class=\"o\">(</span><span class=\"n\">bind</span> <span class=\"n\">v</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"n\">g</span> <span class=\"bp\">=</span> <span class=\"n\">bind</span> <span class=\"n\">v</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">bind</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"k\">from</span> <span class=\"gr\">sorry</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">id_map</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">show</span> <span class=\"n\">M.bind</span> <span class=\"n\">x</span> <span class=\"n\">M.pure</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"k\">from</span> <span class=\"gr\">sorry</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 394237172,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1696179760
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> the fact that the supplied proof of a field in a structure after the <code>:=</code> is a default that can be overriden is something I learned only in this exercise.  It's an interesting feature, good to know.  I'm not sure where it should go in a full Lean curriculum.  My self-training curriculum for now is in this order:</p>\n<ul>\n<li><a href=\"https://lean-lang.org/functional_programming_in_lean/title.html\">Functional Programming in Lean</a></li>\n<li><a href=\"https://lean-lang.org/theorem_proving_in_lean4/\">Theorem Proving in Lean 4</a></li>\n<li><a href=\"https://hrmacbeth.github.io/math2001/\">The mechanics of proof</a></li>\n<li><a href=\"https://leanprover-community.github.io/mathematics_in_lean/\">Mathematics in Lean</a></li>\n<li><a href=\"https://github.com/leanprover-community/lftcm2020/tree/master/src/exercises_sources\">LTCM 2020 Exercises</a></li>\n</ul>",
        "id": 395486307,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1696737727
    },
    {
        "content": "<p>That last step makes no sense, the code you link to is lean 3!</p>",
        "id": 395499003,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1696747018
    },
    {
        "content": "<p>Is there a Lean 4 version of the LTCM exercises?  That would be an exercise in itself.</p>",
        "id": 395557666,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1696782594
    },
    {
        "content": "<p>Well, there's LFTCM2023</p>",
        "id": 395573373,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1696796229
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"364351\">@Lars Ericson</span> default definitions are covered in <a href=\"https://leanprover.github.io/functional_programming_in_lean/\">#fpil</a>, namely <a href=\"https://lean-lang.org/functional_programming_in_lean/functor-applicative-monad/inheritance.html?highlight=default#default-declarations\">https://lean-lang.org/functional_programming_in_lean/functor-applicative-monad/inheritance.html?highlight=default#default-declarations</a></p>",
        "id": 395597988,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1696816695
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"364351\">Lars Ericson</span> <a href=\"#narrow/stream/113489-new-members/topic/Checking.20that.20a.20Monad.20instance.20is.20a.20Monad/near/394222232\">said</a>:</p>\n<blockquote>\n<p>I have no idea what these 3 proofs do.  They just work.</p>\n</blockquote>\n<p>Just hover on the tactics and it will explain what they do.</p>\n<blockquote>\n<p>My editorial takeaway is that, while it doesn't add a substantial amount of additional code in this example, it does seem like developers implementing the more operational aspects of Lean in Lean, or developers tempted to use Lean as a programming language for some other application, would have a very hard time making all of their implementation code \"lawful\", in the sense of proving that every piece of implementation code satisfied some initial pre-coding-phase functional specification.</p>\n</blockquote>\n<p>I'm sure part of the reason <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Monad#doc\">docs#Monad</a> doesn't include the lawful properties is so that developers aren't forced to provide the proofs when they don't want to. Making <em>all</em> their implementation code lawful could indeed be a burden, but I think it's not fair to say the proofs in the above example are hard (it's just that they're true by definition after all).</p>",
        "id": 395599076,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1696817352
    }
]