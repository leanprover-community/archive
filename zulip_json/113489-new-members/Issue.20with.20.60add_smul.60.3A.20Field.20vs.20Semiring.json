[
    {
        "content": "<p>One of the Axler problems is to show that \"the additive inverse condition can be replaced with the condition that<br>\n0ùë£ = 0 for all ùë£ ‚àà ùëâ\", which wants to proceed by showing that <code>v-v = 1‚Ä¢ v + -1 ‚Ä¢ v = (1 + -1) ‚Ä¢ v = 0 ‚Ä¢  v = 0</code></p>\n<p>In:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.Field.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.Module.Basic</span>\n\n\n<span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">AddCommGroup</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Module</span> <span class=\"n\">F</span> <span class=\"n\">V</span><span class=\"o\">]</span>\n\n<span class=\"kd\">example</span><span class=\"o\">:</span> <span class=\"bp\">‚àÄ</span><span class=\"o\">(</span><span class=\"n\">v</span><span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">)</span><span class=\"bp\">‚Ä¢</span><span class=\"n\">v</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">‚Üí</span> <span class=\"bp\">‚àÉ</span><span class=\"n\">w</span><span class=\"o\">,</span> <span class=\"n\">v</span> <span class=\"bp\">+</span> <span class=\"n\">w</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">v</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span>\n  <span class=\"n\">use</span> <span class=\"o\">((</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"bp\">‚Ä¢</span> <span class=\"n\">v</span><span class=\"o\">)</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">‚Üê</span><span class=\"n\">one_smul</span> <span class=\"n\">F</span> <span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">smul_comm</span><span class=\"o\">,</span> <span class=\"n\">one_smul</span> <span class=\"n\">F</span> <span class=\"o\">((</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"bp\">‚Ä¢</span> <span class=\"n\">v</span><span class=\"o\">),</span> <span class=\"bp\">‚Üê</span> <span class=\"n\">add_smul</span> <span class=\"n\">F</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>I get an odd error at <code>add_smul</code></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">F</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">?</span><span class=\"n\">u.538</span>\n<span class=\"n\">V</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">?</span><span class=\"n\">u.541</span>\n<span class=\"n\">inst</span><span class=\"bp\">‚úù¬≤</span><span class=\"o\">:</span> <span class=\"n\">Field</span> <span class=\"n\">F</span>\n<span class=\"n\">inst</span><span class=\"bp\">‚úù¬π</span><span class=\"o\">:</span> <span class=\"n\">AddCommGroup</span> <span class=\"n\">V</span>\n<span class=\"n\">inst</span><span class=\"bp\">‚úù</span><span class=\"o\">:</span> <span class=\"n\">Module</span> <span class=\"n\">F</span> <span class=\"n\">V</span>\n<span class=\"n\">v</span><span class=\"o\">:</span> <span class=\"n\">V</span>\n<span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">‚Ä¢</span> <span class=\"n\">v</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n<span class=\"bp\">‚ä¢</span> <span class=\"mi\">1</span> <span class=\"bp\">‚Ä¢</span> <span class=\"n\">v</span> <span class=\"bp\">+</span> <span class=\"bp\">-</span><span class=\"mi\">1</span> <span class=\"bp\">‚Ä¢</span> <span class=\"n\">v</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n<span class=\"n\">All</span> <span class=\"n\">Messages</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"o\">)</span>\n<span class=\"n\">Scratch.lean</span><span class=\"o\">:</span><span class=\"mi\">10</span><span class=\"o\">:</span><span class=\"mi\">53</span>\n<span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"kd\">instance</span>\n  <span class=\"n\">Semiring</span> <span class=\"o\">(</span><span class=\"kt\">Type</span> <span class=\"bp\">?</span><span class=\"n\">u.538</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>Which is confusing because <code>Field</code>?</p>",
        "id": 407108109,
        "sender_full_name": "Arien Malec",
        "timestamp": 1702242565
    },
    {
        "content": "<p><code>add_mul</code>'s first explicit argument <code>r</code> should be of type <code>R</code>, where <code>Semiring R</code> is known to be true. Here you provide <code>F</code>, which is of type <code>Type ?u.538</code> ...</p>",
        "id": 407108373,
        "sender_full_name": "Richard Copley",
        "timestamp": 1702242755
    },
    {
        "content": "<p>Right but <code>F: Type ?u.538</code> and <code>Field: F</code>? and <code>Field</code> extend <code>CommRing</code> which extends <code>Ring</code> which extends <code>Semiring</code>?</p>",
        "id": 407108513,
        "sender_full_name": "Arien Malec",
        "timestamp": 1702242869
    },
    {
        "content": "<p>Sure. But you need an <code>r : F</code>, not an <code>r : Type ?u.538</code>.</p>\n<p>Anyway. The real problem is that those 0s and 1s and -1s you're seeing aren't of type <code>F</code>.<br>\nTry</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"bp\">‚Ä¢</span> <span class=\"n\">v</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">‚àÉ</span> <span class=\"n\">w</span><span class=\"o\">,</span> <span class=\"n\">v</span> <span class=\"bp\">+</span> <span class=\"n\">w</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">use</span> <span class=\"o\">((</span><span class=\"bp\">-</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"bp\">‚Ä¢</span> <span class=\"n\">v</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 407108946,
        "sender_full_name": "Richard Copley",
        "timestamp": 1702243307
    },
    {
        "content": "<p>Same issue...</p>",
        "id": 407109069,
        "sender_full_name": "Arien Malec",
        "timestamp": 1702243390
    },
    {
        "content": "<p>I updated the code to make all the things explicit..</p>",
        "id": 407109153,
        "sender_full_name": "Arien Malec",
        "timestamp": 1702243450
    },
    {
        "content": "<p><code>add_smul</code> does not expect a <strong>type</strong>, it expects two <strong>values</strong></p>",
        "id": 407109188,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1702243506
    },
    {
        "content": "<p>This could be seen as inconsistent with <code>one_smul</code>, but I guess there's no value you could pass which lean could derive the type from</p>",
        "id": 407109272,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1702243567
    },
    {
        "content": "<p>I was recently grumping that the <code>foo_smul</code> theorems require an explicit <code>R</code> and just now got used to it :-)</p>",
        "id": 407109382,
        "sender_full_name": "Arien Malec",
        "timestamp": 1702243682
    },
    {
        "content": "<p>It's only the ones that don't take an explicit <code>r : R</code> which instead take an <code>R : Type _</code>, and this is deliberate</p>",
        "id": 407110249,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1702244426
    }
]