[
    {
        "content": "<p>silly question, but I'm trying to refactor some code that often calls the \"obj\" map of a functor.<br>\nLets say I have</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"n\">D</span> <span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">category_theory.category</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">category_theory.category</span> <span class=\"n\">D</span><span class=\"o\">]</span>\n<span class=\"kd\">constant</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"bp\">⥤</span> <span class=\"n\">D</span>\n</code></pre></div>\n<p>if i have a <code>c : C</code>, i would like to write something like <code>c.F x: D</code>, but instead the more clumsy notation <code>(F x).obj c</code> is required. This is even worse when I need to do something with the <code>D</code>.</p>\n<p>you can get around this by having</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">F_obj</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"bp\">→</span> <span class=\"n\">D</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">obj</span>\n</code></pre></div>\n<p>but this seems a bit redundant, and if this is the \"usual\" use-case, it should have a shorter name.</p>\n<p>suggestions?</p>",
        "id": 327181191,
        "sender_full_name": "Calvin Lee",
        "timestamp": 1676083676
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"243562\">@Adam Topaz</span> didn't you have something implemented but not PRed/merged to use <code>has_coe_to_fun</code> instances in order to be able to apply functors like functions? Apologies for the ping if I'm misremembering.</p>",
        "id": 327189488,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1676091486
    },
    {
        "content": "<p>Or maybe that was a Lean 4 test implementation?</p>",
        "id": 327189503,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1676091504
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"197836\">@Jireh Loreaux</span> unless im misunderstanding, wouldn't <code>has_coe_to_fun</code> allow this to be called like <code>F x c</code> but not like <code>c.F x</code>?</p>",
        "id": 327190766,
        "sender_full_name": "Calvin Lee",
        "timestamp": 1676092864
    },
    {
        "content": "<p>That's correct, but I thought it might be something you would want, if it is possible.</p>",
        "id": 327190870,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1676092973
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"197836\">@Jireh Loreaux</span> I set up such a has_coe_to_fun in the examples folder of the lte repo. But it's just for objects. For morphisms you still have to write <code>F.map</code></p>",
        "id": 327245117,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1676119795
    }
]