[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n\n<span class=\"kd\">universe</span> <span class=\"n\">u</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">List</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">LinearOrder</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">min_first</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n  <span class=\"k\">if</span> <span class=\"n\">hl</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">l.length</span> <span class=\"k\">then</span>\n    <span class=\"k\">let</span> <span class=\"n\">μ</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">minimum_of_length_pos</span> <span class=\"n\">hl</span>\n    <span class=\"n\">μ</span> <span class=\"o\">::</span> <span class=\"o\">(</span><span class=\"n\">l.erase</span> <span class=\"n\">μ</span><span class=\"o\">)</span>\n  <span class=\"k\">else</span>\n    <span class=\"o\">[]</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">min_first</span> <span class=\"o\">[</span><span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">]</span> <span class=\"bp\">=</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">l</span> <span class=\"bp\">~</span> <span class=\"n\">min_first</span> <span class=\"n\">l</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 398270521,
        "sender_full_name": "Asei Inoue",
        "timestamp": 1698147600
    },
    {
        "content": "<h2>my effort:</h2>\n<p>I'm having trouble simplifying an if statement in the goal.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">l</span> <span class=\"bp\">~</span> <span class=\"n\">min_first</span> <span class=\"n\">l</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">hl</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">l.length</span>\n  <span class=\"bp\">·</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">min_first</span><span class=\"o\">]</span>\n    <span class=\"k\">show</span> <span class=\"n\">l</span> <span class=\"bp\">~</span>\n      <span class=\"k\">if</span> <span class=\"n\">hl</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">length</span> <span class=\"n\">l</span> <span class=\"k\">then</span>\n        <span class=\"k\">let</span> <span class=\"n\">μ</span> <span class=\"o\">:=</span> <span class=\"n\">minimum_of_length_pos</span> <span class=\"n\">hl</span><span class=\"bp\">;</span>\n        <span class=\"n\">μ</span> <span class=\"o\">::</span> <span class=\"n\">List.erase</span> <span class=\"n\">l</span> <span class=\"n\">μ</span>\n      <span class=\"k\">else</span> <span class=\"o\">[]</span>\n    <span class=\"gr\">sorry</span>\n  <span class=\"bp\">·</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 398271248,
        "sender_full_name": "Asei Inoue",
        "timestamp": 1698147769
    },
    {
        "content": "<p>I suggest starting with rw [min_first] and then using the split tactic. Or by_cases followed by rw [if_pos h]</p>",
        "id": 398271741,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1698147935
    },
    {
        "content": "<p>I think it is more natural to use induction to distinguish the cases of empty and non-empty list</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">l</span> <span class=\"bp\">~</span> <span class=\"n\">min_first</span> <span class=\"n\">l</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">induction</span> <span class=\"n\">l</span>\n  <span class=\"n\">case</span> <span class=\"n\">nil</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">unfold</span> <span class=\"n\">min_first</span>\n    <span class=\"n\">simp</span>\n  <span class=\"n\">case</span> <span class=\"n\">cons</span> <span class=\"n\">h</span> <span class=\"n\">t</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">unfold</span> <span class=\"n\">min_first</span>\n    <span class=\"n\">simp</span>\n    <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 398271777,
        "sender_full_name": "Malvin Gattinger",
        "timestamp": 1698147950
    },
    {
        "content": "<p>If using induction like Malvin suggests, it would be natural to define your function using induction as well.</p>",
        "id": 398271914,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1698147993
    },
    {
        "content": "<p><del>Thanks.  How can I get <code>μ</code> ?</del></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">l</span> <span class=\"bp\">~</span> <span class=\"n\">min_first</span> <span class=\"n\">l</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">min_first</span><span class=\"o\">]</span>\n  <span class=\"n\">split</span>\n\n  <span class=\"n\">case</span> <span class=\"n\">inl</span> <span class=\"n\">hl</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">show</span>\n      <span class=\"k\">let</span> <span class=\"n\">μ</span> <span class=\"o\">:=</span> <span class=\"n\">minimum_of_length_pos</span> <span class=\"n\">hl</span><span class=\"bp\">;</span>\n      <span class=\"n\">l</span> <span class=\"bp\">~</span> <span class=\"n\">μ</span> <span class=\"o\">::</span> <span class=\"n\">List.erase</span> <span class=\"n\">l</span> <span class=\"n\">μ</span>\n    <span class=\"gr\">sorry</span>\n\n  <span class=\"n\">case</span> <span class=\"n\">inr</span> <span class=\"n\">hl</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">simp_all</span> <span class=\"n\">only</span> <span class=\"o\">[</span>\n      <span class=\"n\">not_lt</span><span class=\"o\">,</span>\n      <span class=\"n\">nonpos_iff_eq_zero</span><span class=\"o\">,</span>\n      <span class=\"n\">perm_nil</span>\n    <span class=\"o\">]</span>\n    <span class=\"n\">exact</span> <span class=\"n\">length_eq_zero.mp</span> <span class=\"n\">hl</span>\n</code></pre></div>",
        "id": 398273297,
        "sender_full_name": "Asei Inoue",
        "timestamp": 1698148480
    },
    {
        "content": "<p>I was able to show it myself. Thank you! <span class=\"user-mention\" data-user-id=\"308899\">@Yakov Pechersky</span> <span class=\"user-mention\" data-user-id=\"422703\">@Malvin Gattinger</span> </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">l</span> <span class=\"bp\">~</span> <span class=\"n\">min_first</span> <span class=\"n\">l</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">min_first</span><span class=\"o\">]</span>\n  <span class=\"n\">split</span>\n\n  <span class=\"n\">case</span> <span class=\"n\">inl</span> <span class=\"n\">hl</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">let</span> <span class=\"n\">μ</span> <span class=\"o\">:=</span> <span class=\"n\">minimum_of_length_pos</span> <span class=\"n\">hl</span>\n    <span class=\"k\">show</span> <span class=\"n\">l</span> <span class=\"bp\">~</span> <span class=\"n\">μ</span> <span class=\"o\">::</span> <span class=\"n\">List.erase</span> <span class=\"n\">l</span> <span class=\"n\">μ</span>\n\n    <span class=\"n\">refine</span> <span class=\"n\">perm_cons_erase</span> <span class=\"bp\">?</span><span class=\"n\">h</span>\n    <span class=\"k\">show</span> <span class=\"n\">μ</span> <span class=\"bp\">∈</span> <span class=\"n\">l</span>\n\n    <span class=\"n\">exact</span> <span class=\"n\">minimum_mem</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">coe_minimum_of_length_pos</span><span class=\"o\">])</span>\n\n  <span class=\"n\">case</span> <span class=\"n\">inr</span> <span class=\"n\">hl</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">simp_all</span> <span class=\"n\">only</span> <span class=\"o\">[</span>\n      <span class=\"n\">not_lt</span><span class=\"o\">,</span>\n      <span class=\"n\">nonpos_iff_eq_zero</span><span class=\"o\">,</span>\n      <span class=\"n\">perm_nil</span>\n    <span class=\"o\">]</span>\n    <span class=\"n\">exact</span> <span class=\"n\">length_eq_zero.mp</span> <span class=\"n\">hl</span>\n</code></pre></div>",
        "id": 398274230,
        "sender_full_name": "Asei Inoue",
        "timestamp": 1698148802
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"626349\">Asei Inoue</span> has marked this topic as resolved.</p>",
        "id": 398471040,
        "sender_full_name": "Notification Bot",
        "timestamp": 1698235611
    },
    {
        "content": "<p>It looks like we're missing the lemma that says <code>minimum_of_length_pos</code> is in <code>l</code></p>",
        "id": 398472856,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1698236317
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> </p>\n<blockquote>\n<p>It looks like we're missisng the lemma that says minimum_of_length_pos is in l</p>\n</blockquote>\n<p>Could you please elaborate a bit more, are you saying that mathlib4 is missing a lemma?</p>",
        "id": 398473306,
        "sender_full_name": "Asei Inoue",
        "timestamp": 1698236489
    },
    {
        "content": "<p>Yes, exactly</p>",
        "id": 398478719,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1698238475
    },
    {
        "content": "<p>Your <code>exact minimum_mem ..</code> line should be a lemma</p>",
        "id": 398478749,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1698238488
    },
    {
        "content": "<p>Can I work on adding a lemma to mathlib?</p>",
        "id": 398478922,
        "sender_full_name": "Asei Inoue",
        "timestamp": 1698238549
    },
    {
        "content": "<p>Yes! Check out the contribution guide on github / our website if you haven't already</p>",
        "id": 398481604,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1698239435
    },
    {
        "content": "<p>I wll create a PR later...</p>",
        "id": 398599887,
        "sender_full_name": "Asei Inoue",
        "timestamp": 1698291597
    },
    {
        "content": "<p>I have created a PR: <a href=\"https://github.com/leanprover-community/mathlib4/pull/7943\">https://github.com/leanprover-community/mathlib4/pull/7943</a></p>",
        "id": 398603008,
        "sender_full_name": "Asei Inoue",
        "timestamp": 1698292780
    },
    {
        "content": "<p>Thanks! Unfortunately it seems you missed the part of the contribution guide that says you need to ask for write access to non-master branches of mathlib.</p>",
        "id": 398657965,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1698315497
    },
    {
        "content": "<p>(I've added you, <code>Seasawher</code>, now; but you'll need to re-open the PR from the mathlib4 repo itself)</p>",
        "id": 398658120,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1698315563
    }
]