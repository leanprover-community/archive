[
    {
        "content": "<p>Hey, I am currently playing around with Lean for some functional programming, which has been mostly great so far! ATM, I am struggling to prove termination of this very simple function (actual version has more interesting logic ofc):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">Bool</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span>\n<span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"o\">::</span> <span class=\"n\">xs</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">as</span><span class=\"o\">,</span> <span class=\"n\">bs</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">xs.span</span> <span class=\"n\">p</span><span class=\"bp\">;</span> <span class=\"n\">foo</span> <span class=\"n\">p</span> <span class=\"n\">bs</span>\n</code></pre></div>\n<p>I tried <code>termination_by foo p xs =&gt; xs.length</code>, but I am not able to prove that <code>List.length bs &lt; Nat.succ (List.length xs)</code> in <code>decreasing_by</code>, mostly (I think) because I don't know how to tell Lean that <code>bs = (xs.span p).2</code>. Am I missing sth obvious?</p>\n<p>(Termination is automatic when using separate <code>takeWhile</code>/<code>dropWhile</code> instead of <code>span</code>, but I would really like to know how to prove it for <code>span</code> as above.)</p>",
        "id": 407356845,
        "sender_full_name": "amzorc",
        "timestamp": 1702347315
    },
    {
        "content": "<p>I am guessing this can be significantly shortened. But here you go:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">list_drop_length</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">Bool</span><span class=\"o\">,</span>\n  <span class=\"o\">(</span><span class=\"n\">l.dropWhile</span> <span class=\"n\">p</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">length</span> <span class=\"bp\">&lt;</span> <span class=\"n\">Nat.succ</span> <span class=\"n\">l.length</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">Nat.succ_eq_one_add</span><span class=\"o\">]</span>\n  <span class=\"n\">intro</span> <span class=\"n\">l</span> <span class=\"n\">p</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">List.dropWhile</span>\n  <span class=\"n\">induction</span> <span class=\"n\">l</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">nil</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">simp</span>\n  <span class=\"bp\">|</span> <span class=\"n\">cons</span> <span class=\"n\">head</span> <span class=\"n\">tail</span> <span class=\"n\">ih</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"n\">simp</span>\n      <span class=\"n\">cases</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">head</span><span class=\"o\">)</span> <span class=\"k\">with</span>\n      <span class=\"bp\">|</span> <span class=\"n\">false</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">simp</span>\n      <span class=\"bp\">|</span> <span class=\"n\">true</span> <span class=\"bp\">=&gt;</span>\n          <span class=\"n\">simp</span>\n          <span class=\"n\">unfold</span> <span class=\"n\">List.dropWhile</span>\n          <span class=\"n\">trans</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">List.length</span> <span class=\"n\">tail</span>\n          <span class=\"n\">exact</span> <span class=\"n\">ih</span>\n          <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Nat.succ_eq_one_add</span><span class=\"o\">]</span>\n          <span class=\"n\">simp</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">Bool</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">l</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">0</span>\n  <span class=\"bp\">|</span> <span class=\"n\">x</span> <span class=\"o\">::</span> <span class=\"n\">xs</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"k\">let</span> <span class=\"n\">abs</span> <span class=\"o\">:=</span> <span class=\"n\">xs.span</span> <span class=\"n\">p</span>\n      <span class=\"n\">foo</span> <span class=\"n\">p</span> <span class=\"n\">abs.2</span>\n  <span class=\"n\">termination_by</span> <span class=\"n\">foo</span> <span class=\"n\">p</span> <span class=\"n\">l</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">l.length</span>\n  <span class=\"n\">decreasing_by</span>\n    <span class=\"n\">simp_wf</span>\n    <span class=\"n\">cases</span> <span class=\"n\">xs</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"n\">nil</span> <span class=\"bp\">=&gt;</span>\n        <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">List.dropWhile</span><span class=\"o\">]</span>\n    <span class=\"bp\">|</span> <span class=\"n\">cons</span> <span class=\"n\">head</span> <span class=\"n\">tail</span> <span class=\"bp\">=&gt;</span>\n        <span class=\"n\">apply</span> <span class=\"n\">list_drop_length</span>\n</code></pre></div>",
        "id": 407362897,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1702349038
    },
    {
        "content": "<p>You are losing the hypothesis for <code>span</code> by destructuring the tuple at that <code>let</code></p>",
        "id": 407364858,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1702349638
    },
    {
        "content": "<p>Thanks! So the takeaway is that there is just no way to use destructuring <code>let</code> here?</p>\n<p>Also FTR, I proved your <code>list_drop_length</code> like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">list_drop_length</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">Bool</span><span class=\"o\">,</span>\n  <span class=\"o\">(</span><span class=\"n\">l.dropWhile</span> <span class=\"n\">p</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">length</span> <span class=\"bp\">&lt;</span> <span class=\"n\">Nat.succ</span> <span class=\"n\">l.length</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">l</span> <span class=\"n\">p</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Nat.lt_succ</span><span class=\"o\">]</span>\n  <span class=\"n\">nth_rw</span> <span class=\"mi\">2</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">List.takeWhile_append_dropWhile</span> <span class=\"n\">p</span> <span class=\"n\">l</span><span class=\"o\">]</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">List.length_append</span><span class=\"o\">]</span>\n  <span class=\"n\">linarith</span>\n</code></pre></div>",
        "id": 407365400,
        "sender_full_name": "amzorc",
        "timestamp": 1702349806
    },
    {
        "content": "<p>I would argue that destructuring should work better by introducing hypothesis. At the very least it could add the hypotheses<code>as = (xs.span p).fst</code> and <code>bs = (xs.span p).snd</code>.</p>",
        "id": 407365773,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1702349924
    },
    {
        "content": "<p>Yeah that proof is much neater than mine</p>",
        "id": 407365944,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1702349986
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"466334\">Shreyas Srinivas</span> <a href=\"#narrow/stream/113489-new-members/topic/Termination.20of.20simple.20recursive.20function/near/407365773\">said</a>:</p>\n<blockquote>\n<p>I would argue that destructuring should work better by introducing hypothesis. At the very least it could add the hypotheses<code>as = (xs.span p).fst</code> and <code>bs = (xs.span p).snd</code>.</p>\n</blockquote>\n<p>That would be nice, maybe something like <code>let (as, bs) := xs.span p with h</code> and then you get <code>h : (as, bs) = xs.span p</code>? I guess the closest thing is to use <code>match</code>, ie</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>      <span class=\"k\">match</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">xs.span</span> <span class=\"n\">p</span> <span class=\"k\">with</span>\n      <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">as</span><span class=\"o\">,</span> <span class=\"n\">bs</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">foo</span> <span class=\"n\">p</span> <span class=\"n\">bs</span>\n</code></pre></div>",
        "id": 407369072,
        "sender_full_name": "amzorc",
        "timestamp": 1702350947
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"673876\">amzorc</span> has marked this topic as resolved.</p>",
        "id": 407369194,
        "sender_full_name": "Notification Bot",
        "timestamp": 1702350984
    },
    {
        "content": "<p>Please don't mark topics resolved btw. It messes with zulip links.</p>",
        "id": 407370442,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1702351476
    },
    {
        "content": "<p>Woops, does it help if I unresolve it?</p>",
        "id": 407370667,
        "sender_full_name": "amzorc",
        "timestamp": 1702351582
    },
    {
        "content": "<p>I guess. Not sure. I can't test it on my phone</p>",
        "id": 407370765,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1702351625
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"673876\">amzorc</span> has marked this topic as unresolved.</p>",
        "id": 407372005,
        "sender_full_name": "Notification Bot",
        "timestamp": 1702352086
    }
]