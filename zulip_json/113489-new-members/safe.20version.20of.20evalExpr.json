[
    {
        "content": "<p>I noticed that <code>Lean.Meta.evalExpr</code> is marked <code>unsafe</code>, even when its <code>safety</code> parameter is set to safe.<br>\nIs there a safe version of it I can use to safely evaluate arbitrary <code>Expr</code>s or <code>Term</code>s, which rejects unsafe inputs?</p>",
        "id": 380362074,
        "sender_full_name": "Caroline",
        "timestamp": 1690813078
    },
    {
        "content": "<p>The <code>unsafe</code> keyword means that it's a function that can't be used for mathematics, and the <code>safety</code> parameter has to with whether what's being evaluated is using only mathematically meaningful definitions. Is that the kind of safety you are interested in?</p>",
        "id": 380368518,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1690813972
    },
    {
        "content": "<p>The issue is that while <code>evalExpr</code> evaluates expressions it's mathematically unsafe to depend on the results. It's possible to use it to create terms of empty types.</p>",
        "id": 380369120,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1690814067
    },
    {
        "content": "<p>I don't think it's actually true that you can do that, is it?</p>",
        "id": 380369464,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1690814118
    },
    {
        "content": "<p>The unsafeness is ultimately inherited from <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.Environment.evalConst#doc\">docs#Lean.Environment.evalConst</a></p>",
        "id": 380369746,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1690814161
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> Maybe I don't have an example where you can literally get a term of an empty type, but this is definitely not good:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">nAux</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n\n<span class=\"kd\">@[implemented_by nAux]</span>\n<span class=\"kd\">def</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n\n<span class=\"n\">unsafe</span> <span class=\"kd\">def</span> <span class=\"n\">xAux</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span> <span class=\"bp\">⊕</span> <span class=\"n\">Bool</span> <span class=\"o\">:=</span>\n  <span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"k\">then</span>\n    <span class=\"n\">Sum.inl</span> <span class=\"o\">⟨</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">cases</span> <span class=\"n\">h</span><span class=\"o\">⟩</span>\n  <span class=\"k\">else</span>\n    <span class=\"n\">Sum.inr</span> <span class=\"n\">true</span>\n\n<span class=\"kd\">@[implemented_by xAux]</span>\n<span class=\"kd\">def</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span> <span class=\"bp\">⊕</span> <span class=\"n\">Bool</span> <span class=\"o\">:=</span> <span class=\"n\">Sum.inr</span> <span class=\"n\">true</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">x</span>\n<span class=\"c1\">-- Sum.inl 0</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Meta</span> <span class=\"n\">Elab</span> <span class=\"n\">Term</span>\n<span class=\"k\">#eval</span> <span class=\"k\">do</span>\n  <span class=\"n\">evalExpr</span>\n    <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">n</span> <span class=\"bp\">⊕</span> <span class=\"n\">Bool</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">expectedType</span> <span class=\"o\">:=</span> <span class=\"bp\">←</span> <span class=\"n\">elabTerm</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">n</span> <span class=\"bp\">⊕</span> <span class=\"n\">Bool</span><span class=\"o\">))</span> <span class=\"n\">none</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">value</span> <span class=\"o\">:=</span> <span class=\"bp\">←</span> <span class=\"n\">elabTerm</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"n\">none</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">safety</span> <span class=\"o\">:=</span> <span class=\"bp\">.</span><span class=\"n\">safe</span><span class=\"o\">)</span>\n<span class=\"c1\">-- Sum.inl 0</span>\n</code></pre></div>",
        "id": 380375508,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1690815105
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113489-new-members/topic/safe.20version.20of.20evalExpr/near/380369746\">said</a>:</p>\n<blockquote>\n<p>The unsafeness is ultimately inherited from <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.Environment.evalConst#doc\">docs#Lean.Environment.evalConst</a></p>\n</blockquote>\n<p>Sure, because <code>evalExpr</code> is a thin wrapper around it.</p>",
        "id": 380376029,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1690815200
    },
    {
        "content": "<p>You can make a \"safe\" version of these by requiring that the result be <code>Inhabited</code>, but I'm not sure this is the kind of safety that <span class=\"user-mention\" data-user-id=\"636694\">@Caroline</span> is interested in.</p>",
        "id": 380376236,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1690815239
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">unsafe</span> <span class=\"kd\">def</span> <span class=\"n\">evalExprAux'</span> <span class=\"o\">(</span><span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Inhabited</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">expectedType</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">value</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">safety</span> <span class=\"o\">:=</span> <span class=\"n\">DefinitionSafety.safe</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">MetaM</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">evalExpr</span> <span class=\"n\">α</span> <span class=\"n\">expectedType</span> <span class=\"n\">value</span> <span class=\"n\">safety</span>\n\n<span class=\"sd\">/--  A \"safe\" version of `evalExpr`.  -/</span>\n<span class=\"kd\">@[implemented_by evalExprAux']</span>\n<span class=\"n\">opaque</span> <span class=\"n\">evalExpr'</span> <span class=\"o\">(</span><span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Inhabited</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">expectedType</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">value</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">safety</span> <span class=\"o\">:=</span> <span class=\"n\">DefinitionSafety.safe</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">MetaM</span> <span class=\"n\">α</span>\n</code></pre></div>",
        "id": 380377855,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1690815489
    },
    {
        "content": "<p>Huh, that does work, but why does the type need to be inhabited?<br>\nI would like a way to call the core Lean interpreter on some arbitrary expression with an  expected type, and get either a value of that type or an error.<br>\nSomething in which I could procedurally feed expressions as syntax trees.</p>",
        "id": 380383659,
        "sender_full_name": "Caroline",
        "timestamp": 1690816359
    },
    {
        "content": "<p>Inhabited means there's a term of that type, so <code>evalExpr'</code> can theoretically be constructed. Then with <code>implemented_by</code> you can give it an unrelated definition that is used by <code>eval</code>. The <code>opaque</code> keyword means that while it's theoretically safe to work with <code>evalExpr'</code>, theorems can't see the definition.</p>",
        "id": 380385987,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1690816713
    },
    {
        "content": "<p>Do you have a specific list of types you care about, or do you want to handle arbitrary types?</p>",
        "id": 380386099,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1690816730
    },
    {
        "content": "<p>I would like to handle arbitrary types.<br>\nThis includes theorems, and theorems whose provability is unknown, so I can't restrict myself to inhabited types; though maybe wrapping them inside <code>Either · SomeError</code> would be what I want then?</p>",
        "id": 380386921,
        "sender_full_name": "Caroline",
        "timestamp": 1690816850
    },
    {
        "content": "<p>It's not really meaningful to <code>eval</code> theorems. Propositions don't get evaluated, they're \"computationally irrelevant\"</p>",
        "id": 380388101,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1690817024
    },
    {
        "content": "<p>By the way, here's a bit more convenient of a frontend to <code>evalExpr</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.ToExpr</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span>\n\n<span class=\"n\">unsafe</span> <span class=\"kd\">def</span> <span class=\"n\">evalExpr'</span> <span class=\"o\">(</span><span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">ToExpr</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">value</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">MetaM</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n  <span class=\"n\">Meta.evalExpr</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">ToExpr.toTypeExpr</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"n\">value</span>\n</code></pre></div>",
        "id": 380388333,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1690817055
    },
    {
        "content": "<p><code>ToExpr</code> is a class for reflecting values and types to <code>Expr</code>s. Not everything can be reflected, notably functions.</p>",
        "id": 380388540,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1690817085
    },
    {
        "content": "<p>There's also</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">unsafe</span> <span class=\"kd\">def</span> <span class=\"n\">evalExpr''</span> <span class=\"o\">(</span><span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">ToExpr</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">value</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">MetaM</span> <span class=\"n\">Expr</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">val</span> <span class=\"bp\">←</span> <span class=\"n\">Meta.evalExpr</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">ToExpr.toTypeExpr</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"n\">value</span>\n  <span class=\"n\">return</span> <span class=\"n\">toExpr</span> <span class=\"n\">val</span>\n</code></pre></div>\n<p>if you want an <code>Expr</code></p>",
        "id": 380388828,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1690817127
    },
    {
        "content": "<p>well, i'm thinking of things like for example demanding a <code>∃ x : Nat, x &gt; 2^something ∧ prime x</code> and then also <em>obtaining</em> that <code>x</code><br>\nBut I guess that can be not a thing because of law of excluded middle producing \"uncomputable\" disjunctions ?</p>",
        "id": 380405357,
        "sender_full_name": "Caroline",
        "timestamp": 1690819511
    },
    {
        "content": "<p>If you prove <code>h : ∃ x : Nat, P x</code> in Lean then the term <code>h</code> has forgotten what <code>x</code> was; if you could computably extract <code>x</code> from <code>h</code> then you could prove <code>∃ x : Nat, P x</code> in two different ways (which would be equal according to Lean's type theory, because if <code>Q : Prop</code> and <code>a : Q</code> and <code>b : Q</code> then <code>a = b</code> and the proof is <code>rfl</code>) and then get a contradiction by extracting out different data from the two equal proofs.</p>",
        "id": 380413419,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1690820772
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Nat.find#doc\">docs#Nat.find</a> can give you the minimal such x</p>",
        "id": 380424911,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1690822838
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/113489-new-members/topic/safe.20version.20of.20evalExpr/near/380369120\">said</a>:</p>\n<blockquote>\n<p>The issue is that while <code>evalExpr</code> evaluates expressions it's mathematically unsafe to depend on the results. It's possible to use it to create terms of empty types.</p>\n</blockquote>\n<p>I don't think that's the only reason it's unsafe. You can get an element of <code>Empty</code> by lying about the type:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">evalExpr</span>\n  <span class=\"n\">Empty</span>\n  <span class=\"o\">(</span><span class=\"n\">expectedType</span> <span class=\"o\">:=</span> <span class=\"bp\">.</span><span class=\"n\">const</span> <span class=\"bp\">``</span><span class=\"n\">Unit</span> <span class=\"o\">[])</span>\n  <span class=\"o\">(</span><span class=\"n\">value</span> <span class=\"o\">:=</span> <span class=\"bp\">.</span><span class=\"n\">const</span> <span class=\"bp\">``</span><span class=\"n\">Unit.unit</span> <span class=\"o\">[])</span>\n  <span class=\"o\">(</span><span class=\"n\">safety</span> <span class=\"o\">:=</span> <span class=\"bp\">.</span><span class=\"n\">safe</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>and even if you match the type up you can get in trouble if the environment at run time (i.e. the one in the <code>MetaM</code> state) does not match the one at compile time, because the <code>α</code> is resolved using the types available at compile time while <code>expectedType</code> is resolved at run time.</p>",
        "id": 380549930,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1690861167
    },
    {
        "content": "<blockquote>\n<p>well, i'm thinking of things like for example demanding a <code>∃ x : Nat, x &gt; 2^something ∧ prime x</code> and then also <em>obtaining</em> that <code>x</code><br>\nBut I guess that can be not a thing because of law of excluded middle producing \"uncomputable\" disjunctions ?</p>\n</blockquote>\n<p>Because Lean is proof-irrelevant (see Kevin Buzzard's message above), a proof <code>h : ∃ x : Nat, x &gt; 2^something ∧ prime x</code> does not contain any data whatsoever on how to construct <code>x</code>. Your options are essentially:</p>\n<ul>\n<li>Use <code>Nat.find h</code> (as mentioned above) to find the lowest possible such <code>n</code>. This is computable, but only works on <code>Nat</code>. I think using this to produce a value amounts to checking every single <code>Nat</code> starting at <code>0</code> to see if it is prime and greater than <code>2 ^ something</code>, which could get very slow.</li>\n<li>If you have a proof <code>h : ∃ x : Nat, x &gt; 2^something ∧ prime x</code>, then you can use <code>Classical.choose h</code> (previously called <code>classical.some</code>) to produce such an <code>x</code> using the axiom of choice. <code>Classical.choose_spec h</code> is a proof that <code>Classical.choose h</code> is prime and greater than <code>2 ^ something</code>. Note that if the computer doesn't actually know how to calculate such an <code>x</code> and if you use <code>Classical.choose</code> in a <code>def</code> you will need to mark it as noncomputable.</li>\n<li>Create a function <code>f : Nat -&gt; Nat</code> which takes in <code>z : Nat</code> and outputs a prime <code>x</code>. You can then prove that for all <code>z</code>, <code>f z &gt; 2 ^ z</code> and for all <code>z</code>, <code>prime (f z)</code>. This is usually the best option if you are doing a constructive proof.</li>\n<li>Create a function <code>f : (z : Nat) -&gt; {x : Nat // x &gt; 2 ^ z ∧ prime x}</code>. This is just the previous option but with the proof and function combined into one. You can think of the subtype <code>{x : Nat // x &gt; 2 ^ z ∧ prime x}</code> as just being the computable version of <code>∃ x : Nat, x &gt; 2 ^ z ∧ prime x</code>. In fact, the definitions of <code>Subtype</code> and <code>Exists</code> are almost exactly the same, with the only difference being that <code>Exists</code> lives in <code>Prop</code>.</li>\n</ul>",
        "id": 380566496,
        "sender_full_name": "Niels Voss",
        "timestamp": 1690869495
    }
]