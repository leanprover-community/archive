[
    {
        "content": "<p>I want to do division of natural numbers as a partial function where only division with no remainder is allowed.<br>\nI can do it with this function:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">optional_division</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Option</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span>\n  <span class=\"k\">if</span> <span class=\"n\">n</span> <span class=\"bp\">%</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n  <span class=\"k\">then</span> <span class=\"n\">Option.some</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">/</span> <span class=\"n\">m</span><span class=\"o\">)</span>\n  <span class=\"k\">else</span> <span class=\"n\">Option.none</span>\n</code></pre></div>\n<p>Is there some built in function for this?<br>\nWhat would be a good way to search for built in functions?</p>",
        "id": 394491055,
        "sender_full_name": "Jesse Slater",
        "timestamp": 1696271642
    },
    {
        "content": "<p>I don't think we have it. We avoid partial functions.</p>",
        "id": 394491454,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1696271790
    },
    {
        "content": "<p>@loogle (Nat -&gt; Nat -&gt; Option Nat)</p>",
        "id": 394491548,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1696271830
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"644391\">@loogle</span>  (Nat -&gt; Nat -&gt; Option Nat)</p>",
        "id": 394491583,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1696271843
    },
    {
        "content": "<p><span aria-label=\"search\" class=\"emoji emoji-1f50d\" role=\"img\" title=\"search\">:search:</span> <a href=\"https://leanprover-community.github.io/mathlib4_docs/Init/Data/Array/Basic.html#Array.findIdx%3F.loop\">Array.findIdx?.loop</a>, <a href=\"https://leanprover-community.github.io/mathlib4_docs/Lean/Compiler/LCNF/Simp/JpCases.html#Lean.Compiler.LCNF.Simp.isJpCases%3F.go\">Lean.Compiler.LCNF.Simp.isJpCases?.go</a>, and <a href=\"https://loogle.lean-fro.org/?q=%28Nat%20-%3E%20Nat%20-%3E%20Option%20Nat%29\">4 more</a></p>",
        "id": 394491585,
        "sender_full_name": "loogle",
        "timestamp": 1696271845
    },
    {
        "content": "<p>To my surprise, we have this weird subtraction:<br>\n<a href=\"https://github.com/leanprover-community/mathlib4/blob/51089d8f290c06725d47f07f60d0e42d83f6474b/Mathlib/Data/Nat/PSub.lean#L117-L118\">https://github.com/leanprover-community/mathlib4/blob/51089d8f290c06725d47f07f60d0e42d83f6474b/Mathlib/Data/Nat/PSub.lean#L117-L118</a></p>",
        "id": 394491785,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1696271909
    },
    {
        "content": "<p>loogle seems like the best answer to this question. <br>\nBeing able to look up type signatures will be very helpful, thank you!</p>",
        "id": 394492167,
        "sender_full_name": "Jesse Slater",
        "timestamp": 1696272053
    },
    {
        "content": "<p>I think you've defined 0/0 to be 0, just checking you're ok with that</p>",
        "id": 394499182,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1696274626
    }
]