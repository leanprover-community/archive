[
    {
        "content": "<p>Defining the set of all powers of p dividing n:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">def</span> <span class=\"n\">times_p</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">pos</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">nat</span> <span class=\"err\">↪</span> <span class=\"n\">nat</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">i</span> <span class=\"bp\">*</span> <span class=\"n\">p</span><span class=\"o\">,</span>\n  <span class=\"n\">inj</span> <span class=\"o\">:=</span> <span class=\"k\">begin</span> <span class=\"n\">intros</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">prod</span><span class=\"o\">,</span> <span class=\"n\">dsimp</span> <span class=\"n\">at</span> <span class=\"n\">prod</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">mul_right_inj</span> <span class=\"n\">pos</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mp</span> <span class=\"n\">prod</span><span class=\"o\">,</span> <span class=\"kn\">end</span>\n<span class=\"o\">}</span>\n\n<span class=\"n\">def</span> <span class=\"n\">powers_dividing</span> <span class=\"o\">:</span> <span class=\"n\">nat</span> <span class=\"bp\">→</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">prime</span> <span class=\"n\">p</span><span class=\"o\">],</span> <span class=\"n\">finset</span> <span class=\"n\">nat</span>\n<span class=\"bp\">|</span> <span class=\"n\">n</span> <span class=\"n\">p</span> <span class=\"n\">is_prime</span> <span class=\"o\">:=</span> <span class=\"k\">have</span> <span class=\"n\">n</span> <span class=\"bp\">/</span> <span class=\"n\">p</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">sorry</span><span class=\"o\">,</span>\n  <span class=\"k\">if</span> <span class=\"n\">p</span> <span class=\"err\">∣</span> <span class=\"n\">n</span> <span class=\"k\">then</span>\n    <span class=\"n\">insert</span> <span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"n\">times_p</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">prime</span><span class=\"bp\">.</span><span class=\"n\">pos</span> <span class=\"n\">is_prime</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">powers_dividing</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">/</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"n\">p</span> <span class=\"n\">is_prime</span><span class=\"o\">))</span>\n  <span class=\"k\">else</span>\n    <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">singleton</span> <span class=\"mi\">1</span>\n</code></pre></div>\n\n\n<p>But Lean fails at the recursive call to <code>powers_dividing</code> to synthesise the type class instance that results in <code>nat.prime p</code>, even though it's right there in scope, it's <code>is_prime</code>. Can I tell it any harder to use <code>is_prime</code>?</p>",
        "id": 197186829,
        "sender_full_name": "Patrick Stevens",
        "timestamp": 1589222391
    },
    {
        "content": "<p>Actually now I type this, I realise I can probably look at the Sylow theorems to find something like this</p>",
        "id": 197186916,
        "sender_full_name": "Patrick Stevens",
        "timestamp": 1589222410
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"117987\">Patrick Stevens</span> <a href=\"#narrow/stream/113489-new-members/topic/Failed.20to.20synthesize.20type.20class.20instance/near/197186829\">said</a>:</p>\n<blockquote>\n<p>Can I tell it any harder to use <code>is_prime</code>?</p>\n</blockquote>\n<p>Yes, several ways</p>",
        "id": 197187179,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589222553
    },
    {
        "content": "<p>But the easiest is to move the <code>(p) [nat.prime p]</code> left of the colon</p>",
        "id": 197187270,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589222601
    },
    {
        "content": "<p>since it doesn't seem to be changing anyways</p>",
        "id": 197187284,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589222609
    },
    {
        "content": "<p>Stuff like <code>[nat.prime p]</code> to the right of the colon is not added to the typeclass database.</p>",
        "id": 197187411,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589222673
    },
    {
        "content": "<p>The <code>[]</code> only affects how somebody calls your function and not what is available for instance search.</p>",
        "id": 197187476,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589222704
    },
    {
        "content": "<p>Ah, of course - thanks</p>",
        "id": 197187512,
        "sender_full_name": "Patrick Stevens",
        "timestamp": 1589222724
    },
    {
        "content": "<p><code>def powers_dividing (n : nat) (p : nat) [nat.prime p] : finset nat := ...</code></p>",
        "id": 197187518,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589222728
    },
    {
        "content": "<p>In this case I do need things on the right of the colon, because I need to recurse, I think - but I can certainly move the prime bits over</p>",
        "id": 197187627,
        "sender_full_name": "Patrick Stevens",
        "timestamp": 1589222764
    },
    {
        "content": "<p>If you're really committed to this order of function arguments, then there are other options</p>",
        "id": 197187663,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589222781
    },
    {
        "content": "<p>My next question was \"suppose I do need to change <code>p</code> as I go, what do I do then\", which  comes under the same banner</p>",
        "id": 197187723,
        "sender_full_name": "Patrick Stevens",
        "timestamp": 1589222811
    },
    {
        "content": "<p>You can use <code>letI</code> and <code>haveI</code>  to register instances</p>",
        "id": 197187746,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589222828
    },
    {
        "content": "<p>But <code>def powers_dividing (p : nat) [is_prime : nat.prime p] : nat → finset nat</code> is perfect for my current function</p>",
        "id": 197187755,
        "sender_full_name": "Patrick Stevens",
        "timestamp": 1589222835
    },
    {
        "content": "<p><code>by exactI</code> is one (this will make all local variables available as instances), otherwise <code>@</code> can help you out</p>",
        "id": 197187760,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589222839
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 197187775,
        "sender_full_name": "Patrick Stevens",
        "timestamp": 1589222848
    },
    {
        "content": "<p>I assume <code>@</code> also works with recursive calls although I'm not sure I ever tried it.</p>",
        "id": 197187925,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589222908
    }
]