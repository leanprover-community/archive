[
    {
        "content": "<p>I'm working with some code like this in Lean4:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Std.Data.HashMap</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">T</span> <span class=\"n\">where</span>\n<span class=\"bp\">|</span> <span class=\"n\">tt</span><span class=\"o\">:</span> <span class=\"n\">Std.HashMap</span> <span class=\"n\">String</span> <span class=\"n\">T</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">T</span>\n</code></pre></div>\n<p>And Lean complaints:</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>(kernel) arg #1 of 'T.tt' contains a non valid occurrence of the datatypes being declared\n</code></pre></div>\n<p>I inspected the definition of <code>Std.HashMap</code>, and found it seems not like that <code>T.tt</code> is not strictly positive.</p>\n<hr>\n<p>Besides, when I tried to alter <code>T</code> like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">a</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">b</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">T</span> <span class=\"n\">where</span>\n<span class=\"bp\">|</span> <span class=\"n\">tt</span><span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"n\">String</span> <span class=\"n\">T</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">T</span>\n</code></pre></div>\n<p>Lean complaints something longer:</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>application type mismatch\n  T.rec fun a a_ih =&gt; PProd (PProd ((a_1 : String) → motive (a a_1)) ((a : String) → a_ih a)) PUnit\nargument has type\n  R String T → (String → Sort (max 1 u)) → Sort (max (max 1 (max 1 (imax 1 u)) 1 u) 1 u)\nbut function has type\n  ((a : R String T) → ((a_1 : String) → (fun t =&gt; Sort (max 1 u)) (a a_1)) → (fun t =&gt; Sort (max 1 u)) (T.tt a)) →\n    (t : T) → (fun t =&gt; Sort (max 1 u)) t\n</code></pre></div>\n<p>while Idris2 seems accepting something similar:</p>\n<div class=\"codehilite\" data-code-language=\"Idris\"><pre><span></span><code><span class=\"nf\">R</span><span class=\"w\"> </span><span class=\"ow\">:</span><span class=\"w\"> </span><span class=\"kt\">Type</span><span class=\"w\"> </span><span class=\"ow\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Type</span><span class=\"w\"> </span><span class=\"ow\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Type</span>\n<span class=\"kt\">R</span><span class=\"w\"> </span>a<span class=\"w\"> </span>b<span class=\"w\"> </span><span class=\"ow\">=</span><span class=\"w\"> </span>a<span class=\"w\"> </span><span class=\"ow\">-&gt;</span><span class=\"w\"> </span>b\n\n<span class=\"kr\">data</span><span class=\"w\"> </span><span class=\"kt\">T</span><span class=\"ow\">:</span><span class=\"w\"> </span><span class=\"kt\">Type</span><span class=\"w\"> </span><span class=\"kr\">where</span>\n<span class=\"w\">  </span><span class=\"nf\">Tt</span><span class=\"ow\">:</span><span class=\"w\"> </span><span class=\"kt\">R</span><span class=\"w\"> </span><span class=\"kt\">String</span><span class=\"w\"> </span><span class=\"kt\">T</span><span class=\"w\"> </span><span class=\"ow\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">T</span>\n</code></pre></div>\n<p>How can I alter my code to make such constructors work? Thanks.</p>",
        "id": 397500194,
        "sender_full_name": "Virginia Senioria",
        "timestamp": 1697720328
    }
]