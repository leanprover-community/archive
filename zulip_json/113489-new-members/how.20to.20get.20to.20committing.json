[
    {
        "content": "<p>This is broad, vague, and possibly unanswerable, but how does one get to the point of being able to formalize new things and commit to mathlib? Note that not asking <em>how to commit</em>, but how to get the skills and knowledge to write commitable code.</p>",
        "id": 408625414,
        "sender_full_name": "Andrea Bourque",
        "timestamp": 1702910564
    },
    {
        "content": "<p>This is usually a three steps process. First learn the basics, for instance working through <a href=\"https://leanprover-community.github.io/mathematics_in_lean/\">#mil</a>. Then discuss a suitable project, write code and open a pull-request. Then go through the review process without getting discouraged, and trying to learn.</p>",
        "id": 408625709,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1702910652
    },
    {
        "content": "<p>I agree. At the beginning don't worry about mathlib, just prove something, and <em>then</em> learn the mathlib way.</p>",
        "id": 408626776,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1702910958
    },
    {
        "content": "<p>I somehow wasn't aware of mil. I just finished doing the natural number game (for the second time; I did it a while back and forgot it all), and did some of the follow up challenges. I'll work through that to get an understanding and post back to discuss working on something (I want to work on some of the representation theory that hasn't been done, according to the undergrad todo list)</p>",
        "id": 408630263,
        "sender_full_name": "Andrea Bourque",
        "timestamp": 1702912057
    },
    {
        "content": "<p>For representation theory, there’s <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Action#doc\">docs#Action</a>, but it’s written in category theory language.</p>",
        "id": 408702023,
        "sender_full_name": "Winston Yin (尹維晨)",
        "timestamp": 1702942136
    },
    {
        "content": "<p>As it should be</p>",
        "id": 408702559,
        "sender_full_name": "Andrea Bourque",
        "timestamp": 1702942426
    },
    {
        "content": "<p>Challenge: if you didn't learn representation theory from a categorical PoV, find Schur's lemma in Mathlib.</p>",
        "id": 408702961,
        "sender_full_name": "Winston Yin (尹維晨)",
        "timestamp": 1702942636
    },
    {
        "content": "<p>I played with Lean on/off for over a year before I submitted a proper PR that was merged. I started with <a href=\"https://leanprover.github.io/theorem_proving_in_lean4/\">#tpil</a>, which gave me a good idea of type theory. Then, I set some realistic goals like \"formalise the statement of this theorem in Lean\" or \"write a definition and prove basic facts about it\". By working through them, I learned what's in the library and the standard proof style in Lean. They are probably not going to be PR-ready, but they should prepare you for your first project in Lean.</p>",
        "id": 408703219,
        "sender_full_name": "Winston Yin (尹維晨)",
        "timestamp": 1702942754
    },
    {
        "content": "<p>There was a short window of time early this year when one could get code in by porting mathlib from lean 3 to lean 4. That was my entry point. In programming we often say that it is important to read code that other people have written. This is definitely  true for lean. So once you feel comfortable I would also suggest stepping through some mathlib proofs with your cursor in a local copy.</p>",
        "id": 408965907,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1703002411
    }
]