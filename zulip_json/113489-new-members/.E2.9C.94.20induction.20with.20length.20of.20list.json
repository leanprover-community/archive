[
    {
        "content": "<p>I want to show that selection sorting is in fact a sorting algorithm. As a first step, I want to show that the sorting algorithm returns a list permutation.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n\n<span class=\"kd\">universe</span> <span class=\"n\">uu</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">List</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">uu</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">LinearOrder</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">SelectionSort</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n  <span class=\"k\">if</span> <span class=\"n\">hl</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">l.length</span> <span class=\"k\">then</span>\n    <span class=\"k\">let</span> <span class=\"n\">μ</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">minimum_of_length_pos</span> <span class=\"n\">hl</span>\n    <span class=\"k\">have</span> <span class=\"n\">mem</span> <span class=\"o\">:</span> <span class=\"n\">μ</span> <span class=\"bp\">∈</span> <span class=\"n\">l</span> <span class=\"o\">:=</span> <span class=\"n\">minimum_mem</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">)</span>\n\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">l.length</span> <span class=\"bp\">&gt;</span> <span class=\"o\">(</span><span class=\"n\">l.erase</span> <span class=\"n\">μ</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">length</span> <span class=\"o\">:=</span>\n    <span class=\"k\">calc</span> <span class=\"n\">l.length</span>\n      <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">l.erase</span> <span class=\"n\">μ</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">length</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">length_erase_add_one</span> <span class=\"n\">mem</span><span class=\"o\">]</span>\n      <span class=\"n\">_</span> <span class=\"bp\">&gt;</span> <span class=\"o\">(</span><span class=\"n\">l.erase</span> <span class=\"n\">μ</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">length</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">linarith</span>\n\n    <span class=\"n\">μ</span> <span class=\"o\">::</span> <span class=\"n\">SelectionSort</span> <span class=\"o\">(</span><span class=\"n\">l.erase</span> <span class=\"n\">μ</span><span class=\"o\">)</span>\n  <span class=\"k\">else</span> <span class=\"o\">[]</span>\n<span class=\"n\">termination_by</span> <span class=\"n\">SelectionSort</span> <span class=\"n\">l</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">l.length</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">perm_SelectionSort</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">SelectionSort</span> <span class=\"n\">l</span> <span class=\"bp\">~</span> <span class=\"n\">l</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 395553953,
        "sender_full_name": "Asei Inoue",
        "timestamp": 1696779641
    },
    {
        "content": "<p>Here I want to use induction on the length of the list to show <code>perm_SelectionSort</code>, how can this be achieved?</p>",
        "id": 395554014,
        "sender_full_name": "Asei Inoue",
        "timestamp": 1696779703
    },
    {
        "content": "<p><code>induction h : l.length</code></p>",
        "id": 395554317,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1696779943
    },
    {
        "content": "<p>Thank you very much.  But<code>induction h : l.length</code> occurs an error: </p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>tactic 'induction' failed, major premise type is not an inductive type\n  ?m.32344\nα: Type uu\ninst✝: LinearOrder α\nl: List α\nx✝: ?m.32344\n⊢ SelectionSort l ~ l\n</code></pre></div>",
        "id": 395554434,
        "sender_full_name": "Asei Inoue",
        "timestamp": 1696780053
    },
    {
        "content": "<p>Self-resolved. Thanks</p>",
        "id": 395555978,
        "sender_full_name": "Asei Inoue",
        "timestamp": 1696781127
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">perm_SelectionSort</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">SelectionSort</span> <span class=\"n\">l</span> <span class=\"bp\">~</span> <span class=\"n\">l</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">suffices</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">),</span> <span class=\"n\">l.length</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">SelectionSort</span> <span class=\"n\">l</span> <span class=\"bp\">~</span> <span class=\"n\">l</span> <span class=\"k\">from</span> <span class=\"kd\">by</span>\n    <span class=\"n\">replace</span> <span class=\"o\">:=</span> <span class=\"n\">this</span> <span class=\"n\">l.length</span>\n    <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">this</span>\n    <span class=\"n\">assumption</span>\n\n  <span class=\"n\">intro</span> <span class=\"n\">n</span>\n  <span class=\"n\">induction</span> <span class=\"n\">n</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"bp\">=&gt;</span> <span class=\"gr\">sorry</span>\n  <span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"n\">k</span> <span class=\"n\">ih</span> <span class=\"bp\">=&gt;</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 395556007,
        "sender_full_name": "Asei Inoue",
        "timestamp": 1696781152
    },
    {
        "content": "<p>I'm not sure I understand why my approach doesn't work</p>",
        "id": 395556138,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1696781216
    },
    {
        "content": "<p>my environment is lean4 web.</p>",
        "id": 395556184,
        "sender_full_name": "Asei Inoue",
        "timestamp": 1696781253
    },
    {
        "content": "<p>Does <code>induction h : List.length l</code> do any better?</p>",
        "id": 395556281,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1696781307
    },
    {
        "content": "<p>no. I still get a same error</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n\n<span class=\"kd\">universe</span> <span class=\"n\">uu</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">List</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">uu</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">LinearOrder</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">SelectionSort</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n  <span class=\"k\">if</span> <span class=\"n\">hl</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">l.length</span> <span class=\"k\">then</span>\n    <span class=\"k\">let</span> <span class=\"n\">μ</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">minimum_of_length_pos</span> <span class=\"n\">hl</span>\n    <span class=\"k\">have</span> <span class=\"n\">mem</span> <span class=\"o\">:</span> <span class=\"n\">μ</span> <span class=\"bp\">∈</span> <span class=\"n\">l</span> <span class=\"o\">:=</span> <span class=\"n\">minimum_mem</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">)</span>\n\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">l.length</span> <span class=\"bp\">&gt;</span> <span class=\"o\">(</span><span class=\"n\">l.erase</span> <span class=\"n\">μ</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">length</span> <span class=\"o\">:=</span>\n    <span class=\"k\">calc</span> <span class=\"n\">l.length</span>\n      <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">l.erase</span> <span class=\"n\">μ</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">length</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">length_erase_add_one</span> <span class=\"n\">mem</span><span class=\"o\">]</span>\n      <span class=\"n\">_</span> <span class=\"bp\">&gt;</span> <span class=\"o\">(</span><span class=\"n\">l.erase</span> <span class=\"n\">μ</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">length</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">linarith</span>\n\n    <span class=\"n\">μ</span> <span class=\"o\">::</span> <span class=\"n\">SelectionSort</span> <span class=\"o\">(</span><span class=\"n\">l.erase</span> <span class=\"n\">μ</span><span class=\"o\">)</span>\n  <span class=\"k\">else</span> <span class=\"o\">[]</span>\n<span class=\"n\">termination_by</span> <span class=\"n\">SelectionSort</span> <span class=\"n\">l</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">l.length</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">perm_SelectionSort</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">SelectionSort</span> <span class=\"n\">l</span> <span class=\"bp\">~</span> <span class=\"n\">l</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">induction</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">List.length</span> <span class=\"n\">l</span> <span class=\"c1\">-- error</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 395556404,
        "sender_full_name": "Asei Inoue",
        "timestamp": 1696781408
    },
    {
        "content": "<p>I'm probably getting confused about when that syntax does and doesn't work. Your approach above that worked looks fine too.</p>",
        "id": 395556872,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1696781846
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"626349\">Asei Inoue</span> has marked this topic as resolved.</p>",
        "id": 395556945,
        "sender_full_name": "Notification Bot",
        "timestamp": 1696781885
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span>  The syntax of <code>induction</code> tactic is as follows (in <code>src/lean/Init/Tactics.lean</code> in core):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">syntax</span> <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"n\">induction</span><span class=\"o\">)</span> <span class=\"s2\">\"induction \"</span> <span class=\"n\">term</span><span class=\"o\">,</span><span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"s2\">\" using \"</span> <span class=\"n\">ident</span><span class=\"o\">)</span><span class=\"bp\">?</span>\n  <span class=\"o\">(</span><span class=\"s2\">\" generalizing\"</span> <span class=\"o\">(</span><span class=\"n\">ppSpace</span> <span class=\"n\">colGt</span> <span class=\"n\">term</span><span class=\"o\">:</span><span class=\"n\">max</span><span class=\"o\">)</span><span class=\"bp\">+</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"o\">(</span><span class=\"n\">inductionAlts</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span>\n</code></pre></div>\n<p>That says, <code>induction</code> tactic takes the major premise (i.e. <code>l.length</code> here) as <code>term</code> instead of any type of binders and doesn't <code>generalize</code> it, in contrast to <code>cases</code>.</p>",
        "id": 395557436,
        "sender_full_name": "Jun Yoshida",
        "timestamp": 1696782364
    },
    {
        "content": "<p>Perhaps I'm thinking of <code>induction'</code></p>",
        "id": 395557480,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1696782396
    },
    {
        "content": "<p>Ah, the behavior changed since Lean 3: <a href=\"https://github.com/leanprover-community/mathlib4/wiki/Lean-4-survival-guide-for-Lean-3-users#specific-tactic-changes\">https://github.com/leanprover-community/mathlib4/wiki/Lean-4-survival-guide-for-Lean-3-users#specific-tactic-changes</a> . It's confusion when one's fingers remember the old days.</p>",
        "id": 395558829,
        "sender_full_name": "Jun Yoshida",
        "timestamp": 1696783626
    },
    {
        "content": "<p><code>induction h : List.length l</code> mostly doesn't do anything useful, because the hypothesis makes the inductive hypothesis inapplicable. Although possibly that is not true with <code>generalizing</code></p>",
        "id": 395572329,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1696795226
    }
]