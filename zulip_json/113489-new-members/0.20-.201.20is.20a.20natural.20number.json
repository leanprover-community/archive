[
    {
        "content": "<p>I recently started playing around in lean a bit. And I was a bit surprised that lean was not complaining about the following:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"k\">#check</span> <span class=\"o\">((</span><span class=\"mi\">0</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>I do not really know too much of lean so I'm still feeling a but fuzzy on what kind of semantics to attach to this. However my gut feeling is that I just proved that -1 is a natural number which is very problematic to say the least.</p>",
        "id": 380685601,
        "sender_full_name": "Maarten Derickx",
        "timestamp": 1690893852
    },
    {
        "content": "<p>Subtraction for <code>ℕ</code> is truncated subtraction, meaning that <code>(0 : ℕ) - (1 : ℕ) = 0</code>. You can read more about this <a href=\"https://xenaproject.wordpress.com/2020/07/05/division-by-zero-in-type-theory-a-faq/\">here</a></p>",
        "id": 380686040,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1690893940
    },
    {
        "content": "<p>If you want to use \"standard\" subtraction just use <code>ℤ</code>, so that <code>(0 : ℤ) - (1 : ℤ) = -1</code> as expected.</p>",
        "id": 380686279,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1690893980
    },
    {
        "content": "<p>It's worth a mention that there's no universal <code>-</code> operation, and instead each type can have its own implementation of <code>-</code> without any need for these operations to be related to one another. There's a theorem though that if <code>a b : Nat</code> and <code>b &lt;= a</code> then <code>((a - b : Nat) : Int)</code> is <code>(a : Int) - (b : Int)</code>, where Lean inserts a coercion function <code>Nat -&gt; Int</code> where the types don't match up. This coercion function is defined in the library and it's the sensible one.</p>",
        "id": 380697824,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1690896037
    },
    {
        "content": "<p>Thanks for the quick answers. Ok, so at least I managed as an exercise to actually proof that lean indeed uses truncated subtraction, where I am assuming nothing unexpected is happening with the + and the ≥ symbols.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">truncated_subtraction</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">≥</span> <span class=\"n\">n</span><span class=\"o\">):</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span>\n  <span class=\"n\">exact</span> <span class=\"n\">h</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">normal_subtraction</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">):</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]</span>\n  <span class=\"n\">simp</span>\n</code></pre></div>",
        "id": 380715313,
        "sender_full_name": "Maarten Derickx",
        "timestamp": 1690898997
    },
    {
        "content": "<p>My general suggestion, at least at the beginning, is simply to avoid subtraction of natural numbers (and similarly don't use division for integers) to avoid getting confused. An exception is division by <code>0</code>, that is unavoidable, and it is defined in mathlib (you can prove by <code>simp</code> that <code>(1 : ℚ) / 0 = 0</code> ).</p>\n<p>At the beginning this can look crazy, but the reason behind this (that should be seen just as an implementation detail, it is mathematically irrelevant) is explained in the blogpost I linked above.</p>",
        "id": 380717100,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1690899302
    },
    {
        "content": "<p>This topic was moved here from <a class=\"stream-topic\" data-stream-id=\"287929\" href=\"/#narrow/stream/287929-mathlib4/topic/0.20-.201.20is.20a.20natural.20number\">#mathlib4 &gt; 0 - 1 is a natural number</a> by <span class=\"user-mention silent\" data-user-id=\"130384\">Riccardo Brasca</span>.</p>",
        "id": 380717443,
        "sender_full_name": "Notification Bot",
        "timestamp": 1690899363
    }
]