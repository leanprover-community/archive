[
    {
        "content": "<p>I am currently trying to use <code>Mathlib.Data.List.AList</code> to create a key-value map from <code>Nat</code> to <code>Nat</code>, but am somehow confused what a Sigma type is and how I can create a key-value list from type A to type B that are not further dependently typed related. I feel that should be trivial, but somehow don't found out how to do this.</p>",
        "id": 373370983,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1688785350
    },
    {
        "content": "<p>Sigma is the type of dependent sum types. It is kind of like the Cartesian product <code>A × B</code> but the type of the right element is allowed to depend on the value of left element.<br>\nNote that <code>Sigma</code> is declared as <code>structure Sigma {α : Type u} (β : α → Type v) where ...</code>. If the function <code>β</code> is constant, then the right type doesn't really depend on the left argument, so it is similar to the normal <code>Prod</code> type.<br>\nI haven't used <code>AList</code> before but I did a bit of experimentation and I think that the <code>AList</code> is only dependently typed for additionally flexibility. If you make <code>β</code> a constant function then <code>AList β</code> is essentially just a <code>List (α × β)</code> without duplicate <code>α</code>. For example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.List.AList</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">mylist</span> <span class=\"o\">:</span> <span class=\"n\">AList</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">List.toAList</span> <span class=\"o\">[</span><span class=\"n\">Sigma.mk</span> <span class=\"mi\">1</span> <span class=\"s2\">\"hi\"</span><span class=\"o\">,</span> <span class=\"n\">Sigma.mk</span> <span class=\"mi\">2</span> <span class=\"s2\">\"there\"</span><span class=\"o\">]</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">mylist.lookup</span> <span class=\"mi\">1</span> <span class=\"c1\">-- some \"hi\"</span>\n<span class=\"k\">#eval</span> <span class=\"n\">mylist.lookup</span> <span class=\"mi\">2</span> <span class=\"c1\">-- some \"there\"</span>\n<span class=\"k\">#eval</span> <span class=\"n\">mylist.lookup</span> <span class=\"mi\">3</span> <span class=\"c1\">-- none</span>\n</code></pre></div>\n<p>You'd need to ask someone else if this is the correct way to implement a <code>Nat</code> to <code>Nat</code> map. I think there is also a <code>HashMap</code> for programming purposes.</p>",
        "id": 373375514,
        "sender_full_name": "Niels Voss",
        "timestamp": 1688788480
    },
    {
        "content": "<p>Nice. So this at least works.</p>",
        "id": 373375880,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1688788748
    },
    {
        "content": "<p>I was hoping adding pairs to the list would just work, but it seems the obvious interaction does not:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">abbrev</span> <span class=\"n\">MyList</span> <span class=\"o\">:=</span> <span class=\"n\">AList</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">String</span><span class=\"o\">)</span>\n<span class=\"kd\">def</span> <span class=\"n\">mylist</span> <span class=\"o\">:</span> <span class=\"n\">MyList</span> <span class=\"o\">:=</span> <span class=\"n\">List.toAList</span> <span class=\"o\">[</span><span class=\"n\">Sigma.mk</span> <span class=\"mi\">1</span> <span class=\"s2\">\"hi\"</span><span class=\"o\">,</span> <span class=\"n\">Sigma.mk</span> <span class=\"mi\">2</span> <span class=\"s2\">\"there\"</span><span class=\"o\">]</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">mylist.lookup</span> <span class=\"mi\">1</span> <span class=\"bp\">-</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">mylist.insert</span> <span class=\"mi\">3</span> <span class=\"n\">_</span>\n<span class=\"c1\">-- don't know how to synthesize placeholder for argument 'b'</span>\n<span class=\"c1\">-- context:</span>\n<span class=\"c1\">--  -⊢ String</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">mylist.insert</span> <span class=\"mi\">3</span> <span class=\"s2\">\"bye\"</span>\n<span class=\"c1\">-- expression</span>\n<span class=\"c1\">--   AList.insert 3 \"bye\" mylist</span>\n<span class=\"c1\">-- has type</span>\n<span class=\"c1\">--   AList fun x =&gt; String</span>\n<span class=\"c1\">-- but instance</span>\n<span class=\"c1\">--   Lean.MetaEval (AList fun x =&gt; String)</span>\n<span class=\"c1\">-- failed to be synthesized, this instance instructs Lean on how to display the</span>\n<span class=\"c1\">-- resulting value, recall that any type implementing the `Repr` class also</span>\n<span class=\"c1\">-- implements the `Lean.MetaEval` class</span>\n\n<span class=\"k\">#eval</span> <span class=\"o\">(</span><span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"s2\">\"bye\"</span><span class=\"o\">)</span> <span class=\"o\">::</span> <span class=\"n\">mylist</span>\n<span class=\"c1\">-- application type mismatch</span>\n<span class=\"c1\">--   (3, \"bye\") :: mylist</span>\n<span class=\"c1\">-- argument</span>\n<span class=\"c1\">--   mylist</span>\n<span class=\"c1\">-- has type</span>\n<span class=\"c1\">--   MyList : Type</span>\n<span class=\"c1\">-- but is expected to have type</span>\n<span class=\"c1\">--   List (?m.2096 × String) : Type ?u.2092</span>\n</code></pre></div>",
        "id": 373376719,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1688789305
    },
    {
        "content": "<p>No, the syntax <code>(a, b)</code> only makes elements of <code>Prod</code>, not <code>Sigma</code></p>",
        "id": 373376763,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1688789364
    },
    {
        "content": "<p>you have to use <code>⟨a, b⟩</code> for any other two argument constructor</p>",
        "id": 373376782,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1688789391
    },
    {
        "content": "<p>I see.</p>",
        "id": 373376786,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1688789398
    },
    {
        "content": "<p>What about the funny insert function, where it asks for a string, but if I give it one it complains the string is not a function.</p>",
        "id": 373376852,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1688789422
    },
    {
        "content": "<p>That one is fine, notice that the error is actually about printing the result</p>",
        "id": 373376876,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1688789447
    },
    {
        "content": "<p>if you <code>#check</code> it it should work</p>",
        "id": 373376878,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1688789457
    },
    {
        "content": "<p>apparently <code>AList</code> doesn't have a <code>Repr</code> impl</p>",
        "id": 373376902,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1688789476
    },
    {
        "content": "<p>I just tried your other suggestion:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#eval</span> <span class=\"o\">⟨</span><span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"s2\">\"bye\"</span><span class=\"o\">⟩</span> <span class=\"o\">::</span> <span class=\"n\">mylist</span>\n<span class=\"c1\">-- invalid constructor ⟨...⟩, expected type must be an inductive type</span>\n<span class=\"c1\">--   ?m.2090</span>\n</code></pre></div>",
        "id": 373376998,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1688789531
    },
    {
        "content": "<p>wow that's quite an unhelpful error</p>",
        "id": 373377012,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1688789546
    },
    {
        "content": "<p>my guess is that <code>AList</code> doesn't support the <code>::</code> syntax</p>",
        "id": 373377025,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1688789562
    },
    {
        "content": "<p>I see. Thank you for the explanation.</p>",
        "id": 373377066,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1688789637
    },
    {
        "content": "<p>it makes sense that it wouldn't have a <code>::</code>, it needs to make sure the result is deduplicated</p>",
        "id": 373377105,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1688789644
    },
    {
        "content": "<p>so <code>insert</code> is probably the way to go</p>",
        "id": 373377126,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1688789652
    },
    {
        "content": "<p>There is also an <code>AssocList</code> type in Std</p>",
        "id": 373377142,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1688789681
    },
    {
        "content": "<p>The insert method seems to have semantics that would allow \"::\" to be defined, I feel</p>\n<blockquote>\n<p>/-- Insert a key-value pair into an association list and erase any existing pair<br>\n with the same key. -/</p>\n</blockquote>",
        "id": 373377347,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1688789860
    },
    {
        "content": "<p>that would be <code>insert</code>, no?</p>",
        "id": 373377398,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1688789884
    },
    {
        "content": "<p>if there was a <code>cons</code> function I would expect it to have the semantics \"append a key value pair, given a proof that it is not already in the list\"</p>",
        "id": 373377437,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1688789924
    },
    {
        "content": "<p>I see.</p>",
        "id": 373377442,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1688789934
    },
    {
        "content": "<p>The Std4 AssocList does neither have cons nor insert. How would I add data to the list?</p>",
        "id": 373377485,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1688789993
    },
    {
        "content": "<p><code>cons</code> is a constructor of the type</p>",
        "id": 373377496,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1688790002
    },
    {
        "content": "<p>Ah, I see. So it does not deduplicate.</p>",
        "id": 373377617,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1688790077
    },
    {
        "content": "<p>Interesting. I guess that allowed me to understand the landscape of associative lists.</p>",
        "id": 373377633,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1688790095
    },
    {
        "content": "<p>Thank you!</p>",
        "id": 373377635,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1688790098
    },
    {
        "content": "<p>I guess that helps me move ahead.</p>",
        "id": 373377643,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1688790109
    },
    {
        "content": "<p>As always, Lean zulip proved to be extremely helpful. Thank you <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> for making it this way.</p>",
        "id": 373377733,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1688790167
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"122318\">Tobias Grosser</span> has marked this topic as resolved.</p>",
        "id": 373377734,
        "sender_full_name": "Notification Bot",
        "timestamp": 1688790171
    },
    {
        "content": "<p>And obviously also <span class=\"user-mention\" data-user-id=\"521331\">@Niels Voss</span> for responding within less than an hour. How cool is that.</p>",
        "id": 373378871,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1688790988
    }
]