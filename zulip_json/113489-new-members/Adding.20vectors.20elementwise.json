[
    {
        "content": "<p>I'm defining a type for vector of length n, and a function to add them element wise.  I've taken it mostly from section 8.7 in TPIL.  However, I get an error I don't understand.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">type</span> <span class=\"n\">mismatch</span> <span class=\"n\">at</span> <span class=\"n\">application</span>\n  <span class=\"n\">myadd</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"o\">::</span><span class=\"mi\">3</span><span class=\"o\">::</span><span class=\"n\">nil</span><span class=\"o\">)</span>\n<span class=\"n\">term</span>\n  <span class=\"mi\">2</span><span class=\"o\">::</span><span class=\"mi\">3</span><span class=\"o\">::</span><span class=\"n\">nil</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">vector</span> <span class=\"bp\">?</span><span class=\"n\">m_1</span> <span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">?</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"kt\">Type</span> <span class=\"bp\">?</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"bp\">?+</span><span class=\"mi\">1</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>what am I doing wrong?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.field.basic</span>\n\n<span class=\"kd\">universe</span> <span class=\"n\">u</span>\n<span class=\"kd\">inductive</span> <span class=\"n\">vector</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span>\n<span class=\"bp\">|</span> <span class=\"n\">nil</span> <span class=\"o\">{}</span>                              <span class=\"o\">:</span> <span class=\"n\">vector</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"n\">cons</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">vector</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">vector</span> <span class=\"o\">(</span><span class=\"n\">nat.succ</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">vector</span>\n<span class=\"kn\">local</span> <span class=\"kd\">notation</span> <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"n\">cons</span><span class=\"o\">)</span> <span class=\"n\">h</span> <span class=\"o\">::</span> <span class=\"n\">t</span> <span class=\"o\">:=</span> <span class=\"n\">cons</span> <span class=\"n\">h</span> <span class=\"n\">t</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">F</span><span class=\"o\">]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">myadd</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">},</span> <span class=\"o\">(</span><span class=\"n\">vector</span> <span class=\"n\">F</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">vector</span> <span class=\"n\">F</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">vector</span> <span class=\"n\">F</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">)</span>     <span class=\"n\">nil</span>           <span class=\"n\">nil</span>         <span class=\"o\">:=</span> <span class=\"n\">nil</span>\n<span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">cons</span> <span class=\"bp\">.</span><span class=\"o\">(</span><span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"n\">n</span> <span class=\"n\">a₁</span> <span class=\"n\">v₁</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">cons</span> <span class=\"n\">a₂</span> <span class=\"n\">v₂</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">cons</span> <span class=\"o\">(</span><span class=\"n\">a₁</span> <span class=\"bp\">+</span> <span class=\"n\">a₂</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">myadd</span> <span class=\"n\">v₁</span> <span class=\"n\">v₂</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">myadd</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"o\">::</span> <span class=\"mi\">3</span> <span class=\"o\">::</span> <span class=\"n\">nil</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"mi\">5</span> <span class=\"o\">::</span> <span class=\"mi\">7</span> <span class=\"o\">::</span> <span class=\"n\">nil</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">7</span> <span class=\"o\">::</span> <span class=\"mi\">10</span> <span class=\"o\">::</span> <span class=\"n\">nil</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">vector</span>\n</code></pre></div>",
        "id": 352942125,
        "sender_full_name": "Martin C. Martin",
        "timestamp": 1682541304
    },
    {
        "content": "<p>First explicit argument to <code>myadd</code> is <code>F</code>, not a vector</p>",
        "id": 352942727,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1682541512
    },
    {
        "content": "<p>Oh, I thought it would be implicit since it's a variable imported from the context.  Is there a good description somewhere for what things are implicit or explicit?  Or the <code>def</code> syntax?</p>",
        "id": 352943173,
        "sender_full_name": "Martin C. Martin",
        "timestamp": 1682541695
    },
    {
        "content": "<p><code>(F)</code> is explicit, <code>{F}</code> is implicit (and <code>[field F]</code> is another kind of implicit)</p>",
        "id": 352943358,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1682541756
    },
    {
        "content": "<p>Ah, in the <code>variables</code> statement!  Thanks.</p>",
        "id": 352943513,
        "sender_full_name": "Martin C. Martin",
        "timestamp": 1682541823
    },
    {
        "content": "<p>So now I've ditched the Field altogether, since ℕ isn't a field, and have defined <code>myadd</code> as:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span>\n<span class=\"kd\">def</span> <span class=\"n\">myadd</span> <span class=\"o\">[</span><span class=\"n\">has_add</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">},</span> <span class=\"o\">(</span><span class=\"n\">vector</span> <span class=\"n\">α</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">vector</span> <span class=\"n\">α</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">vector</span> <span class=\"n\">α</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>However, when I try to enable infix <code>+</code> notation like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_add</span> <span class=\"o\">(</span><span class=\"n\">vector</span> <span class=\"n\">α</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">myadd</span><span class=\"o\">⟩</span>\n</code></pre></div>\n<p>It fails because I'm not restricting it only to places where <code>α </code> has <code>has_add α </code>.  How do I do that?</p>",
        "id": 352946929,
        "sender_full_name": "Martin C. Martin",
        "timestamp": 1682543112
    },
    {
        "content": "<p><code>instance [has_add α] : has_add (vector α n) := ⟨myadd⟩</code></p>",
        "id": 352947411,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1682543293
    }
]