[
    {
        "content": "<p>I am trying to learn Lean4's functional programming capabilities by writing some simple programs.</p>\n<p>How do I complete this definition for Quicksort?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- write a simple quicksort function</span>\n<span class=\"kd\">def</span> <span class=\"n\">quicksort</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">List</span> <span class=\"n\">Nat</span>\n  <span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">[]</span>\n  <span class=\"bp\">|</span> <span class=\"n\">x</span> <span class=\"o\">::</span> <span class=\"n\">xs</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"n\">quicksort</span> <span class=\"o\">(</span><span class=\"n\">xs.filter</span> <span class=\"o\">(</span><span class=\"bp\">·</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span><span class=\"o\">))</span>\n      <span class=\"bp\">++</span> <span class=\"o\">[</span><span class=\"n\">x</span><span class=\"o\">]</span> <span class=\"bp\">++</span>\n      <span class=\"n\">quicksort</span> <span class=\"o\">(</span><span class=\"n\">xs.filter</span> <span class=\"o\">(</span><span class=\"bp\">·</span> <span class=\"bp\">≥</span> <span class=\"n\">x</span><span class=\"o\">))</span>\n  <span class=\"n\">termination_by</span>\n    <span class=\"n\">quicksort</span> <span class=\"n\">xs</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">xs.length</span>\n  <span class=\"n\">decreasing_by</span>\n    <span class=\"gr\">sorry</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">quicksort</span> <span class=\"o\">[</span><span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"mi\">4</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">]</span>\n<span class=\"c1\">-- prints [1, 2, 3, 4]</span>\n</code></pre></div>",
        "id": 397325418,
        "sender_full_name": "Agnishom Chattopadhyay",
        "timestamp": 1697639225
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.List.Basic</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">quicksort</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">List</span> <span class=\"n\">Nat</span>\n  <span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">[]</span>\n  <span class=\"bp\">|</span> <span class=\"n\">x</span> <span class=\"o\">::</span> <span class=\"n\">xs</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"n\">quicksort</span> <span class=\"o\">(</span><span class=\"n\">xs.filter</span> <span class=\"o\">(</span><span class=\"bp\">·</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span><span class=\"o\">))</span>\n      <span class=\"bp\">++</span> <span class=\"o\">[</span><span class=\"n\">x</span><span class=\"o\">]</span> <span class=\"bp\">++</span>\n      <span class=\"n\">quicksort</span> <span class=\"o\">(</span><span class=\"n\">xs.filter</span> <span class=\"o\">(</span><span class=\"bp\">·</span> <span class=\"bp\">≥</span> <span class=\"n\">x</span><span class=\"o\">))</span>\n  <span class=\"n\">termination_by</span>\n    <span class=\"n\">quicksort</span> <span class=\"n\">xs</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">xs.length</span>\n  <span class=\"n\">decreasing_by</span>\n    <span class=\"n\">simp_wf</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Nat.lt_succ</span><span class=\"o\">]</span>\n    <span class=\"n\">apply</span> <span class=\"n\">List.length_filter_le</span>\n</code></pre></div>",
        "id": 397329194,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1697640253
    },
    {
        "content": "<p>Thanks! I have some follow up questions.</p>\n<ul>\n<li>When I put my cursor after the <code>decreasing_by</code>, I do not see any goals. Why is that?</li>\n<li>After I write <code>simp_wf</code>, I see two goals. Which goal do the subsequent tactics apply to?</li>\n<li>Why doesn't writing <code>apply?</code> or <code>exact?</code> after <code>simp_wf</code> give me any helpful suggestions?</li>\n</ul>",
        "id": 397329943,
        "sender_full_name": "Agnishom Chattopadhyay",
        "timestamp": 1697640518
    },
    {
        "content": "<p>I had similar questions recently:<br>\n<a href=\"#narrow/stream/270676-lean4/topic/Unfocus.20goal.20after.60decreasing_by.60\">https://leanprover.zulipchat.com/#narrow/stream/270676-lean4/topic/Unfocus.20goal.20after.60decreasing_by.60</a></p>",
        "id": 397330130,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1697640591
    },
    {
        "content": "<p>Oh, interesting. Thanks!</p>\n<p>Now, I have</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">quicksort</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">List</span> <span class=\"n\">Nat</span>\n  <span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">[]</span>\n  <span class=\"bp\">|</span> <span class=\"n\">x</span> <span class=\"o\">::</span> <span class=\"n\">xs</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"o\">(</span>\n      <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">List.length</span> <span class=\"o\">(</span><span class=\"n\">xs.filter</span> <span class=\"o\">(</span><span class=\"bp\">·</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"bp\">&lt;</span> <span class=\"n\">List.length</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">::</span> <span class=\"n\">xs</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span>\n        <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">List.length</span><span class=\"o\">]</span>\n        <span class=\"n\">apply</span> <span class=\"n\">Nat.lt_succ_of_le</span>\n        <span class=\"n\">apply</span> <span class=\"n\">List.length_filter_le</span>\n      <span class=\"o\">}</span>\n      <span class=\"n\">quicksort</span> <span class=\"o\">(</span><span class=\"n\">xs.filter</span> <span class=\"o\">(</span><span class=\"bp\">·</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span><span class=\"o\">))</span>\n      <span class=\"o\">)</span>\n      <span class=\"bp\">++</span> <span class=\"o\">[</span><span class=\"n\">x</span><span class=\"o\">]</span> <span class=\"bp\">++</span>\n      <span class=\"o\">(</span>\n      <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">List.length</span> <span class=\"o\">(</span><span class=\"n\">xs.filter</span> <span class=\"o\">(</span><span class=\"bp\">·</span> <span class=\"bp\">≥</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"bp\">&lt;</span> <span class=\"n\">List.length</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">::</span> <span class=\"n\">xs</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span>\n        <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">List.length</span><span class=\"o\">]</span>\n        <span class=\"n\">apply</span> <span class=\"n\">Nat.lt_succ_of_le</span>\n        <span class=\"n\">apply</span> <span class=\"n\">List.length_filter_le</span>\n      <span class=\"o\">}</span>\n      <span class=\"n\">quicksort</span> <span class=\"o\">(</span><span class=\"n\">xs.filter</span> <span class=\"o\">(</span><span class=\"bp\">·</span> <span class=\"bp\">≥</span> <span class=\"n\">x</span><span class=\"o\">))</span>\n      <span class=\"o\">)</span>\n  <span class=\"n\">termination_by</span>\n    <span class=\"n\">quicksort</span> <span class=\"n\">xs</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">xs.length</span>\n  <span class=\"n\">decreasing_by</span>\n    <span class=\"n\">simp_wf</span>\n    <span class=\"n\">simp_all</span>\n</code></pre></div>\n<p>But I have no idea what is happening here.</p>\n<ul>\n<li>Why can't I see the goals that are created by <code>decreasing_by</code>? </li>\n<li>Does <code>decreasing_by</code> have to be followed by <code>simp_wf</code>? Is <code>simp_wf</code> a tactic?</li>\n<li>How do I select the individual goals after <code>simp_wf</code>?</li>\n<li>What is the meaning of the term <code>(have : ... := ...; x)</code>? Is it the same thing as <code>x</code>? What type does it have?</li>\n</ul>",
        "id": 397333563,
        "sender_full_name": "Agnishom Chattopadhyay",
        "timestamp": 1697641619
    },
    {
        "content": "<p><code>simp_wf</code> is a tactic, you should be able to right click it and jump to its definition to see what its implementation is (its not that complicated iirc, just simp with some extra lemmas thrown in that make it useful for well foundedness proofs).</p>",
        "id": 397366885,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1697654531
    },
    {
        "content": "<p>You don't have to use <code>simp_wf</code>  after decreasing by, but probably 90% of the time it does something useful.</p>",
        "id": 397366925,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1697654563
    },
    {
        "content": "<p><code>#check (have a : True := trivial; 1)</code> shows you what the have statement elaborates to. It should be definitionally equal to just <code>x</code> in your example but it is not literally <code>x</code>.</p>",
        "id": 397367193,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1697654705
    },
    {
        "content": "<p>If I put my cursor on the <code>simp_wf</code> in your big example I can see two goals, so I don't understand your first question</p>",
        "id": 397367343,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1697654784
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"127136\">Alex J. Best</span> <a href=\"#narrow/stream/113489-new-members/topic/Simple.20Termination.20Argument.20for.20Quicksort.3F/near/397367193\">said</a>:</p>\n<blockquote>\n<p><code>#check (have a : True := trivial; 1)</code> shows you what the have statement elaborates to. It should be definitionally equal to just <code>x</code> in your example but it is not literally <code>x</code>.</p>\n</blockquote>\n<p>I think the problem is, if instead of <code>have</code> you want to prove termination after the <code>decreasing_by</code> keyword, both goals are focused. And I don't know how to focus only one of them. As a result, many tools don't work for me the way they should.</p>",
        "id": 397368033,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1697655163
    },
    {
        "content": "<p>Yeah as you may have noticed that thing isn't really a normal goal state with a by block, whatever tactic you add there is used to fill all decreasing proofs and the state for all needed proofs is displayed in that one spot.<br>\nSo you probably have to use things like <code>first | tac1 | tac2</code> to be more flexible if the proofs are complicated</p>",
        "id": 397370333,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1697656328
    },
    {
        "content": "<p>Thats why most of the time its better to put the proofs as <code>have</code> statements in the term</p>",
        "id": 397370364,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1697656349
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"127136\">Alex J. Best</span> <a href=\"#narrow/stream/113489-new-members/topic/Simple.20Termination.20Argument.20for.20Quicksort.3F/near/397367343\">said</a>:</p>\n<blockquote>\n<p>If I put my cursor on the <code>simp_wf</code> in your big example I can see two goals, so I don't understand your first question</p>\n</blockquote>\n<p>Yes, but the goals are only seen _after_ running <code>simp_wf</code>. How do I know what the goal was _before_ running <code>simp_wf</code>?</p>",
        "id": 397515634,
        "sender_full_name": "Agnishom Chattopadhyay",
        "timestamp": 1697724955
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"127136\">Alex J. Best</span> <a href=\"#narrow/stream/113489-new-members/topic/Simple.20Termination.20Argument.20for.20Quicksort.3F/near/397367193\">said</a>:</p>\n<blockquote>\n<p><code>#check (have a : True := trivial; 1)</code> shows you what the have statement elaborates to. It should be definitionally equal to just <code>x</code> in your example but it is not literally <code>x</code>.</p>\n</blockquote>\n<p>That's interesting. I saw that <code>have a : x = y; b</code>is syntactic sugar for <code>(fun a =&gt; b) y</code>. I am not really sure how this lets you feed in y into the proofs later though</p>",
        "id": 397516160,
        "sender_full_name": "Agnishom Chattopadhyay",
        "timestamp": 1697725100
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"417654\">Martin Dvořák</span> <a href=\"#narrow/stream/113489-new-members/topic/Simple.20Termination.20Argument.20for.20Quicksort.3F/near/397368033\">said</a>:</p>\n<blockquote>\n<p>I think the problem is, if instead of <code>have</code> you want to prove termination after the <code>decreasing_by</code> keyword, both goals are focused. And I don't know how to focus only one of them. As a result, many tools don't work for me the way they should.</p>\n</blockquote>\n<p>Yes, exactly. I do not really understand how to focus on individual goals in this situation. With Coq, I would have used <code>-</code> or <code>{</code> but I do not know what is the analogue for that in Lean</p>",
        "id": 397516482,
        "sender_full_name": "Agnishom Chattopadhyay",
        "timestamp": 1697725198
    },
    {
        "content": "<p>For normal proofs you can use <code>.</code> or <code>\\.</code> to focus a goal, but a <code>decreasing_by</code> block is unfortunately not really a normal proof. I'd recommend proving as much as possible inline in the description of the algorithm, using <code>List.length (xs.filter (· ≥ x)) &lt; List.length (x :: xs) </code> etc where you can use focussing like normal</p>",
        "id": 397533726,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1697730610
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"130290\">Agnishom Chattopadhyay</span> <a href=\"#narrow/stream/113489-new-members/topic/Simple.20Termination.20Argument.20for.20Quicksort.3F/near/397515634\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"127136\">Alex J. Best</span> <a href=\"#narrow/stream/113489-new-members/topic/Simple.20Termination.20Argument.20for.20Quicksort.3F/near/397367343\">said</a>:</p>\n<blockquote>\n<p>If I put my cursor on the <code>simp_wf</code> in your big example I can see two goals, so I don't understand your first question</p>\n</blockquote>\n<p>Yes, but the goals are only seen _after_ running <code>simp_wf</code>. How do I know what the goal was _before_ running <code>simp_wf</code>?</p>\n</blockquote>\n<p>If I put my cursor before the <code>s</code> in <code>simp_nf</code> I see the goal before, if I put it after I see the goal after, there is even red/green highlighting to show what changed, in this case basically the whole goal</p>",
        "id": 397533938,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1697730691
    },
    {
        "content": "<p>Thanks, the goal before the <code>simp_wf</code> now seems to be visible</p>",
        "id": 397744702,
        "sender_full_name": "Agnishom Chattopadhyay",
        "timestamp": 1697819631
    },
    {
        "content": "<p>How do I complete this argument?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">gcd</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">y</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">y</span>\n  <span class=\"bp\">|</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span>\n  <span class=\"bp\">|</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">if</span> <span class=\"n\">x</span> <span class=\"bp\">&gt;</span> <span class=\"n\">y</span>\n    <span class=\"k\">then</span> <span class=\"o\">(</span><span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">y</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span>\n      <span class=\"gr\">sorry</span> <span class=\"c1\">-- can't see the hypotheses x &gt; y and x ≠ 0</span>\n      <span class=\"o\">}</span> <span class=\"bp\">;</span>\n      <span class=\"n\">gcd</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"n\">y</span><span class=\"o\">)</span>\n    <span class=\"k\">else</span> <span class=\"o\">(</span><span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"bp\">-</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span><span class=\"bp\">;</span> <span class=\"n\">gcd</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">-</span> <span class=\"n\">x</span><span class=\"o\">))</span>\n  <span class=\"n\">termination_by</span>\n    <span class=\"n\">gcd</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span>\n  <span class=\"n\">decreasing_by</span>\n    <span class=\"n\">simp_wf</span>\n    <span class=\"n\">simp_all</span>\n</code></pre></div>\n<p>The hypotheses <code>x &gt; y</code> and <code>x &lt;&gt; 0</code>  seem to be missing from the context</p>",
        "id": 397744877,
        "sender_full_name": "Agnishom Chattopadhyay",
        "timestamp": 1697819700
    },
    {
        "content": "<p>You can do <code>if h : x &gt; y</code>. In this case  <code>x &gt; y</code> is enough to prove <code>x \\ne 0</code> also so that shouldn't be needed</p>",
        "id": 397745728,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1697820108
    },
    {
        "content": "<p>Seems like <code>linarith</code> is not able to resolve this goal</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">|</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">&gt;</span> <span class=\"n\">y</span>\n    <span class=\"k\">then</span> <span class=\"o\">(</span><span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">y</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span>\n      <span class=\"n\">linarith</span>\n      <span class=\"o\">}</span> <span class=\"bp\">;</span>\n      <span class=\"n\">gcd</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"n\">y</span><span class=\"o\">)</span>\n    <span class=\"k\">else</span> <span class=\"o\">(</span><span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"bp\">-</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span><span class=\"bp\">;</span> <span class=\"n\">gcd</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">-</span> <span class=\"n\">x</span><span class=\"o\">))</span>\n</code></pre></div>",
        "id": 397751619,
        "sender_full_name": "Agnishom Chattopadhyay",
        "timestamp": 1697823074
    },
    {
        "content": "<p>If its an inequality about nats, then you probably need to be more careful with subtraction.<br>\ntry <code>zify [h]</code> as a first step maybe</p>",
        "id": 397752015,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1697823286
    },
    {
        "content": "<p>I think we need the hypothesis <code>y &lt;&gt; 0</code>. If <code>y = 0</code>, then we would have <code>x - y = x</code></p>",
        "id": 397753372,
        "sender_full_name": "Agnishom Chattopadhyay",
        "timestamp": 1697824016
    },
    {
        "content": "<p>Probably the simplest solution is to write it as <code>  | (x + 1), (y+ 1) =&gt; ...</code> then</p>",
        "id": 397754369,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1697824485
    }
]