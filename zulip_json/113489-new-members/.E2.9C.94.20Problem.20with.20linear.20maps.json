[
    {
        "content": "<p>I was wondering if someone can show me how to write out h_one. K is a linear map from R^n to R^m and I am drawing on the 'preservation of scalar multiplication'</p>\n<div class=\"codehilite\" data-code-language=\"import\"><pre><span></span><code>import data.real.basic -- imports the real numbers\nimport analysis.inner_product_space.euclidean_dist\nimport analysis.inner_product_space.pi_L2\nimport algebra.module.linear_map\n\n/-Theorem: Given Ω ⊂ R^n is open, f : Ω → R^m, p ∈ Ω, and Λ.\nIf f is differentiable at p and has two different derivatives K and K', then K = K'. -/\ntheorem deriv_unique  (m n : ℕ) (K: (fin n → ℝ) →ₗ[ℝ] (fin m → ℝ)) : 1 = 1 :=\nbegin\n  have h_one :∀ (e : fin n → ℝ), ‖e‖=1 → ∀ (α : ℝ), α ≠ 0, (K (α • e)) / α = K e,\n    {\n      sorry,\n    },\n  sorry,\nend```\n\n```don't know how to synthesize placeholder\ncontext:\nm n : ℕ,\nK : (fin n → ℝ) →ₗ[ℝ] fin m → ℝ\n⊢ Type ?\n\nunknown identifier 'K'\n\nunknown identifier 'α'\n\nunknown identifier 'e'```\n</code></pre></div>",
        "id": 328722822,
        "sender_full_name": "Abu Al Hassan",
        "timestamp": 1676752090
    },
    {
        "content": "<p>This maybe isn't very helpful but it looks to me like what you wrote should work.</p>",
        "id": 328723651,
        "sender_full_name": "Reid Barton",
        "timestamp": 1676752615
    },
    {
        "content": "<p>Oh the problem is here: <code>∀ (α : ℝ), α ≠ 0, </code></p>",
        "id": 328724536,
        "sender_full_name": "Reid Barton",
        "timestamp": 1676753194
    },
    {
        "content": "<p>You probably meant <code>∀ (α : ℝ), α ≠ 0 → </code></p>",
        "id": 328724587,
        "sender_full_name": "Reid Barton",
        "timestamp": 1676753259
    },
    {
        "content": "<p>Thanks Reid, I did try that earlier and it seems to get rid of the initial error but what remains is:<br>\ntype mismatch at application<br>\n  ⇑K (α • e) / α<br>\nterm<br>\n  α<br>\nhas type<br>\n  ℝ<br>\nbut is expected to have type<br>\n  fin m → ℝ<br>\nstate:<br>\nm n : ℕ,<br>\nK : (fin n → ℝ) →ₗ[ℝ] fin m → ℝ<br>\n⊢ 1 = 1</p>\n<p>Also, I would really appreciate it if you could let me know why implies makes sense there because i just tried it due to trails and error</p>",
        "id": 328724971,
        "sender_full_name": "Abu Al Hassan",
        "timestamp": 1676753526
    },
    {
        "content": "<p>You can't \"divide\" by α the way you would in math; division takes two arguments of the same type in Lean.</p>",
        "id": 328725064,
        "sender_full_name": "Reid Barton",
        "timestamp": 1676753609
    },
    {
        "content": "<p>Instead you can <code>•</code> by <code>\\a\\-1</code> or <code>(1 / \\a)</code>.</p>",
        "id": 328725148,
        "sender_full_name": "Reid Barton",
        "timestamp": 1676753665
    },
    {
        "content": "<p>Because the equation also means something when alpha is zero (in Lean, not in math).<br>\nAnd you don't want to assert that the equation holds in that case. So you want to say <em>if</em> alpha is not zero, then the equation holds.</p>",
        "id": 328725293,
        "sender_full_name": "Reid Barton",
        "timestamp": 1676753773
    },
    {
        "content": "<p>Thanks for explaining the implies.</p>\n<p>When I try :<br>\n<code>have h_one :∀ (e : fin n → ℝ), ‖e‖=1 → ∀ (α : ℝ), α ≠ 0 → K (α • e) • α⁻¹ = K e,</code><br>\nor<br>\n<code>have h_one :∀ (e : fin n → ℝ), ‖e‖=1 → ∀ (α : ℝ), α ≠ 0 → K (α • e) • (1 / α) = K e,</code></p>\n<p>I get:<br>\ntype mismatch, term<br>\n    ⇑K ?m_1<br>\n  has type<br>\n    fin m → ℝ<br>\n  but is expected to have type<br>\n    ℝ<br>\nstate:<br>\nm n : ℕ,<br>\nK : (fin n → ℝ) →ₗ[ℝ] fin m → ℝ<br>\n⊢ 1 = 1</p>\n<p>Please let me know how to type code here so it can be easily read.</p>\n<p>I believe the <code>• (1 / α)</code> isnt working.</p>",
        "id": 328725901,
        "sender_full_name": "Abu Al Hassan",
        "timestamp": 1676754204
    },
    {
        "content": "<p>You can put triple backticks around it, like in your first message, except the triple backticks need to be on their own lines.</p>",
        "id": 328726091,
        "sender_full_name": "Reid Barton",
        "timestamp": 1676754336
    },
    {
        "content": "<p>The real number in <code>r • x</code> needs to be on the left</p>",
        "id": 328726269,
        "sender_full_name": "Reid Barton",
        "timestamp": 1676754448
    },
    {
        "content": "<p>In that case the output has</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">h_one</span><span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">),</span> <span class=\"bp\">‖</span><span class=\"n\">e</span><span class=\"bp\">‖</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">→</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">),</span> <span class=\"n\">α</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">•</span> <span class=\"bp\">⇑</span><span class=\"n\">K</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">•</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">⇑</span><span class=\"n\">K</span> <span class=\"n\">e</span>\n<span class=\"bp\">⊢</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span>\n</code></pre></div>\n<p>not sure what that upward arrow is about.</p>",
        "id": 328726404,
        "sender_full_name": "Abu Al Hassan",
        "timestamp": 1676754559
    },
    {
        "content": "<p><code>K</code> is a linear map of some kind, which is defined as a structure. In <code>K e</code>, you treat <code>K</code> as a function. Lean prints the arrow to indicate the coercion from something to a function.</p>",
        "id": 328726528,
        "sender_full_name": "Reid Barton",
        "timestamp": 1676754663
    },
    {
        "content": "<p>You can write it yourself too but usually it's not needed</p>",
        "id": 328726536,
        "sender_full_name": "Reid Barton",
        "timestamp": 1676754673
    },
    {
        "content": "<p>Amazing, Reid. Thank you for your help!</p>",
        "id": 328726557,
        "sender_full_name": "Abu Al Hassan",
        "timestamp": 1676754700
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"583816\">Abu Al Hassan</span> has marked this topic as resolved.</p>",
        "id": 328726560,
        "sender_full_name": "Notification Bot",
        "timestamp": 1676754703
    }
]