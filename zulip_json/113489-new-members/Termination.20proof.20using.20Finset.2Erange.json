[
    {
        "content": "<p>Does anyone I know speak enough Lean 4 to advise on how to complete this termination proof of the definition of the Bell numbers?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">bell_number</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">1</span>\n  <span class=\"bp\">|</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">Finset.range</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">sum</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">i</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">Nat.choose</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">bell_number</span> <span class=\"n\">i</span><span class=\"o\">))</span>\n<span class=\"n\">decreasing_by</span> <span class=\"o\">{</span>\n  <span class=\"n\">simp_wf</span>\n  <span class=\"n\">rewrite</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">Finset.mem_range</span><span class=\"o\">]</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"o\">}</span>\n</code></pre></div>\n<p>The goal is currently <code>i ∈ Finset.range n</code> which is obvious true to a human, but the proof context doesn't include the fact the derivation of <code>i</code> from <code>Finset.range n</code>. I feel like I need to \"inline\" the body of the lambda argument to <code>Finset.sum</code> in order to expose the source of <code>I</code>, but I'm struggling to find a tactic to achieve it.</p>",
        "id": 400315391,
        "sender_full_name": "Owen Anderson",
        "timestamp": 1699118820
    },
    {
        "content": "<p>It's probably better to use <code> ∑ i : Fin n, ...</code>, since then <code>i.prop</code> contains that proof</p>",
        "id": 400315996,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1699119502
    },
    {
        "content": "<p>I spent a really long time trying to write it that way but could never get big operators to work for me. Lean 4 always rejected the <code>open_locale</code> command.</p>",
        "id": 400316100,
        "sender_full_name": "Owen Anderson",
        "timestamp": 1699119660
    },
    {
        "content": "<p><code>open_locale</code> is not a Lean 4 command -- try <code>open scoped BigOperators</code></p>",
        "id": 400316335,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1699119925
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.BigOperators.Basic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">scoped</span> <span class=\"n\">BigOperators</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">bell_number</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">1</span>\n  <span class=\"bp\">|</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">∑</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">Nat.choose</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">i</span> <span class=\"bp\">*</span> <span class=\"n\">bell_number</span> <span class=\"n\">i</span>\n</code></pre></div>",
        "id": 400316437,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1699120048
    },
    {
        "content": "<p>Bigoperators are nice and make it more legible, but just so you know this is exactly the same as</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">bell_number</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">1</span>\n  <span class=\"bp\">|</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">Finset.univ</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">sum</span> <span class=\"k\">fun</span> <span class=\"n\">i</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Nat.choose</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">i</span> <span class=\"bp\">*</span> <span class=\"n\">bell_number</span> <span class=\"n\">i</span>\n</code></pre></div>\n<p>I.e., you sum over <code>(Finset.univ : Finset (Fin n))</code> rather than <code>Finset.range n</code>.</p>",
        "id": 400316498,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1699120104
    },
    {
        "content": "<p>You could also have summed over <code>(Finset.range n).attach</code>, which is essentially (but not quite) the same thing, and a more general solution to this problem</p>",
        "id": 400317119,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1699120812
    },
    {
        "content": "<p>Is that natural subtraction correct BTW?</p>",
        "id": 400322362,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1699126575
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/Termination.20proof.20using.20Finset.2Erange/near/400322362\">said</a>:</p>\n<blockquote>\n<p>Is that natural subtraction correct BTW?</p>\n</blockquote>\n<p>Yes? <code>Nat.choose 0 0</code> is <code>1</code> so <code>bell_number 1 = 1</code>, which is correct.</p>",
        "id": 400324132,
        "sender_full_name": "Owen Anderson",
        "timestamp": 1699128451
    },
    {
        "content": "<p>Why would you not write that as</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.BigOperators.Basic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">scoped</span> <span class=\"n\">BigOperators</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">bell_number</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">1</span>\n  <span class=\"bp\">|</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">∑</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"n\">Nat.choose</span> <span class=\"n\">n</span> <span class=\"n\">i</span> <span class=\"bp\">*</span> <span class=\"n\">bell_number</span> <span class=\"n\">i</span>\n</code></pre></div>\n<p>?</p>",
        "id": 400325938,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1699130620
    },
    {
        "content": "<p>Seems the same?</p>",
        "id": 400325995,
        "sender_full_name": "Owen Anderson",
        "timestamp": 1699130678
    },
    {
        "content": "<p>No it's much better, because it doesn't involve natural subtraction which is a pathological function. Try proving theorems about the two versions if you're not convinced</p>",
        "id": 400328467,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1699133845
    },
    {
        "content": "<p>But should it be <code>Fin (n+1)</code> <span class=\"user-mention\" data-user-id=\"307953\">@Ruben Van de Velde</span> ?</p>",
        "id": 400328529,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1699133888
    },
    {
        "content": "<p>Yes, fixed</p>",
        "id": 400328565,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1699133984
    },
    {
        "content": "<p>And maybe it's better to use <code>range</code> rather than <code>Fin</code> (again for ease of use later) because then you're not using unnecessary coercions which will also make your life harder.</p>",
        "id": 400328625,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1699134040
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> The <code>Fin</code> is for the termination check. The alternative is using <code>Finset.attach</code>, which is no better.</p>",
        "id": 400328785,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1699134288
    },
    {
        "content": "<p>One can prove that <code>bell_number</code> is equal to the <code>range</code> version though, and then you use that instead of the equation lemma</p>",
        "id": 400328810,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1699134325
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.BigOperators.Basic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">scoped</span> <span class=\"n\">BigOperators</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">bell_number</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">1</span>\n  <span class=\"bp\">|</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">∑</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"n\">Nat.choose</span> <span class=\"n\">n</span> <span class=\"n\">i</span> <span class=\"bp\">*</span> <span class=\"n\">bell_number</span> <span class=\"n\">i</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">bell_number_succ</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">bell_number</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">∑</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"n\">Finset.range</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"n\">Nat.choose</span> <span class=\"n\">n</span> <span class=\"n\">i</span> <span class=\"bp\">*</span> <span class=\"n\">bell_number</span> <span class=\"n\">i</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">change</span> <span class=\"bp\">∑</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"n\">Nat.choose</span> <span class=\"n\">n</span> <span class=\"n\">i</span> <span class=\"bp\">*</span> <span class=\"n\">bell_number</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">_</span>\n  <span class=\"n\">apply</span> <span class=\"n\">Finset.sum_bij</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">a.1</span><span class=\"o\">)</span>\n  <span class=\"bp\">·</span> <span class=\"n\">rintro</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">ha</span><span class=\"o\">⟩</span> <span class=\"bp\">-</span>\n    <span class=\"n\">rwa</span> <span class=\"o\">[</span><span class=\"n\">Finset.mem_range</span><span class=\"o\">]</span>\n  <span class=\"bp\">·</span> <span class=\"n\">intros</span><span class=\"bp\">;</span> <span class=\"n\">rfl</span>\n  <span class=\"bp\">·</span> <span class=\"n\">rintro</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">ha</span><span class=\"o\">⟩</span> <span class=\"o\">⟨</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">hb</span><span class=\"o\">⟩</span> <span class=\"bp\">-</span> <span class=\"bp\">-</span> <span class=\"o\">⟨⟩</span>\n    <span class=\"n\">rfl</span>\n  <span class=\"bp\">·</span> <span class=\"n\">rintro</span> <span class=\"n\">b</span> <span class=\"n\">hb</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Finset.mem_range</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hb</span>\n    <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">Nat.mod_eq_of_lt</span> <span class=\"n\">hb</span><span class=\"o\">]⟩</span>\n</code></pre></div>",
        "id": 400329365,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1699135190
    },
    {
        "content": "<p>You beat me to it</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.BigOperators.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Set.Finite</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">scoped</span> <span class=\"n\">BigOperators</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">bell_number</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">1</span>\n  <span class=\"bp\">|</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">∑</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"n\">Nat.choose</span> <span class=\"n\">n</span> <span class=\"n\">i</span> <span class=\"bp\">*</span> <span class=\"n\">bell_number</span> <span class=\"n\">i</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">Finset.sum_range_eq</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">AddCommMonoid</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"bp\">∑</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"n\">Finset.range</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"bp\">∑</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">Fintype</span> <span class=\"o\">{</span><span class=\"n\">i</span> <span class=\"bp\">//</span> <span class=\"n\">i</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"n\">Set.fintypeLTNat</span> <span class=\"n\">n</span> <span class=\"c1\">-- why doesn't this infer?</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Finset.sum_subtype</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:=</span> <span class=\"n\">this</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">·</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">Finset.range</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">)]</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Fintype.sum_equiv</span> <span class=\"o\">(</span><span class=\"n\">Fin.equivSubtype</span><span class=\"o\">)]</span>\n  <span class=\"n\">simp</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">bell_number_succ</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">bell_number</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">∑</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"n\">Finset.range</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"n\">Nat.choose</span> <span class=\"n\">n</span> <span class=\"n\">i</span> <span class=\"bp\">*</span> <span class=\"n\">bell_number</span> <span class=\"n\">i</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">bell_number</span><span class=\"o\">,</span> <span class=\"n\">Finset.sum_range_eq</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 400329454,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1699135237
    },
    {
        "content": "<p>Your proof is shorter though! I always fall back on <code>sum_bij</code> because I find it quite reliable :-)</p>",
        "id": 400329613,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1699135332
    },
    {
        "content": "<p>Found the library lemma to make it shorter still:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Fintype.BigOperators</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">scoped</span> <span class=\"n\">BigOperators</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">bell_number</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">1</span>\n  <span class=\"bp\">|</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">∑</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"n\">Nat.choose</span> <span class=\"n\">n</span> <span class=\"n\">i</span> <span class=\"bp\">*</span> <span class=\"n\">bell_number</span> <span class=\"n\">i</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">bell_number_succ</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">bell_number</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">∑</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"n\">Finset.range</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"n\">Nat.choose</span> <span class=\"n\">n</span> <span class=\"n\">i</span> <span class=\"bp\">*</span> <span class=\"n\">bell_number</span> <span class=\"n\">i</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">bell_number</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">Fin.sum_univ_eq_sum_range</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 400329793,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1699135519
    },
    {
        "content": "<p>Ok that now looks pretty reasonable :-) So there's no <code>termination_by</code> trick to make the non-Fin definition work out of the box?</p>",
        "id": 400329863,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1699135617
    },
    {
        "content": "<p>You could presumably rewrite back into the fin version in the termination_by somehow</p>",
        "id": 400330448,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1699136295
    },
    {
        "content": "<p>By the way, for computing bell numbers this has much better runtime complexity:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">bell_number_aux</span> <span class=\"o\">(</span><span class=\"n\">acc</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Array</span> <span class=\"n\">Nat</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">acc.push</span> <span class=\"mi\">1</span>\n  <span class=\"bp\">|</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">let</span> <span class=\"n\">acc</span> <span class=\"o\">:=</span> <span class=\"n\">bell_number_aux</span> <span class=\"n\">acc</span> <span class=\"n\">n</span>\n    <span class=\"n\">acc.push</span> <span class=\"o\">(</span><span class=\"bp\">∑</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"n\">Finset.range</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"n\">Nat.choose</span> <span class=\"n\">n</span> <span class=\"n\">i</span> <span class=\"bp\">*</span> <span class=\"n\">acc</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]</span><span class=\"bp\">!</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">bell_number</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">bell_number_aux</span> <span class=\"bp\">#</span><span class=\"o\">[]</span> <span class=\"n\">n</span><span class=\"o\">)[</span><span class=\"n\">n</span><span class=\"o\">]</span><span class=\"bp\">!</span>\n</code></pre></div>\n<p>(I wouldn't define the main <code>bell_number</code> this way! If you prove them equal, you can add a <code>@[csimp]</code> lemma. This version handles <code>bell_number 100</code> instantly, where I got impatient with the other version.)</p>",
        "id": 400330584,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1699136460
    }
]