[
    {
        "content": "<p>As an exercise in learning Lean 4 I am trying to port <a href=\"https://github.com/alreadydone/mathlib/blob/associativity/src/algebraic_geometry/elliptic_curve/weierstrass.lean\">the weierstrass_curve file</a> by <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span>  referred to in <a href=\"https://arxiv.org/pdf/2302.10640.pdf\">this paper</a>.  I made it up to  line 154 of the file.  If this is already ported please let me know the URL of the GitHub so I can see the Lean 4 solution.  Otherwise I would greatly appreciate help.  There are a couple of instances with new syntax I don't know how to translate:</p>\n<p><strong>\"invalid binder annotation\"</strong></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">inhabited</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">inhabited</span> <span class=\"bp\">$</span> <span class=\"n\">weierstrass_curve</span> <span class=\"n\">R</span> <span class=\"o\">:=</span>\n<span class=\"o\">⟨⟨</span><span class=\"n\">default</span><span class=\"o\">,</span> <span class=\"n\">default</span><span class=\"o\">,</span> <span class=\"n\">default</span><span class=\"o\">,</span> <span class=\"n\">default</span><span class=\"o\">,</span> <span class=\"n\">default</span><span class=\"o\">⟩⟩</span>\n</code></pre></div>\n<p><strong>\"expected '}'</strong></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">c_relation</span> <span class=\"o\">:</span> <span class=\"mi\">1728</span> <span class=\"bp\">*</span> <span class=\"n\">W.</span><span class=\"bp\">Δ</span> <span class=\"bp\">=</span> <span class=\"n\">W.c₄</span> <span class=\"bp\">^</span> <span class=\"mi\">3</span> <span class=\"bp\">-</span> <span class=\"n\">W.c₆</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">b₂</span><span class=\"o\">,</span> <span class=\"n\">b₄</span><span class=\"o\">,</span> <span class=\"n\">b₆</span><span class=\"o\">,</span> <span class=\"n\">b₈</span><span class=\"o\">,</span> <span class=\"n\">c₄</span><span class=\"o\">,</span> <span class=\"n\">c₆</span><span class=\"o\">,</span> <span class=\"bp\">Δ</span><span class=\"o\">],</span> <span class=\"n\">ring1</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>Other than that here is the first segment:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c\">/-</span>\n<span class=\"cm\">Lean 4 translation of lines 1-154 of</span>\n\n<span class=\"cm\">https://github.com/alreadydone/mathlib/blob/associativity/src/algebraic_geometry/elliptic_curve/weierstrass.lean</span>\n\n<span class=\"cm\">as referred to in</span>\n\n<span class=\"cm\">https://arxiv.org/pdf/2302.10640.pdf</span>\n\n<span class=\"cm\">Code sections in comments starting with DK for Don't Know are ones I don't know how to translate.</span>\n\n<span class=\"cm\">-/</span>\n\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.PNat.Prime</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.CubicDiscriminant</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Analysis.NormedSpace.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.LinearCombination</span>\n<span class=\"kn\">open</span> <span class=\"n\">Mathlib.Tactic.LinearCombination</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">Cubic.disc</span>\n<span class=\"k\">#check</span> <span class=\"n\">NormedRing</span>\n<span class=\"k\">#check</span> <span class=\"n\">linearCombination</span>\n<span class=\"k\">#check</span> <span class=\"n\">CommRing</span>\n\n<span class=\"c\">/-</span><span class=\"cm\">DK</span>\n\n<span class=\"cm\">private meta def map_simp : tactic unit :=</span>\n<span class=\"cm\">`[simp only [map_one, map_bit0, map_bit1, map_neg, map_add, map_sub, map_mul, map_pow]]</span>\n\n<span class=\"cm\">private meta def eval_simp : tactic unit :=</span>\n<span class=\"cm\">`[simp only [eval_C, eval_X, eval_add, eval_sub, eval_mul, eval_pow]]</span>\n\n<span class=\"cm\">private meta def C_simp : tactic unit := `[simp only [C_0, C_1, C_neg, C_add, C_sub, C_mul, C_pow]]</span>\n\n<span class=\"cm\">-/</span>\n\n<span class=\"kd\">universe</span> <span class=\"n\">u</span> <span class=\"n\">v</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span>\n\n<span class=\"kd\">@[ext]</span> <span class=\"kd\">structure</span> <span class=\"n\">weierstrass_curve</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">a₁</span> <span class=\"n\">a₂</span> <span class=\"n\">a₃</span> <span class=\"n\">a₄</span> <span class=\"n\">a₆</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span>\n\n<span class=\"c\">/-</span><span class=\"cm\">DK: \"invalid binder annotation\"</span>\n\n<span class=\"cm\">instance [inhabited R] : inhabited $ weierstrass_curve R :=</span>\n<span class=\"cm\">⟨⟨default, default, default, default, default⟩⟩</span>\n\n<span class=\"cm\">-/</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">weierstrass_curve</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"n\">CommRing</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">W</span> <span class=\"o\">:</span> <span class=\"n\">weierstrass_curve</span> <span class=\"n\">R</span><span class=\"o\">)</span>\n\n<span class=\"kn\">section</span> <span class=\"n\">quantity</span>\n\n<span class=\"sd\">/-- The `b₂` coefficient of a Weierstrass curve. -/</span>\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">def</span> <span class=\"n\">b₂</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"o\">:=</span> <span class=\"n\">W.a₁</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"mi\">4</span> <span class=\"bp\">*</span> <span class=\"n\">W.a₂</span>\n\n<span class=\"sd\">/-- The `b₄` coefficient of a Weierstrass curve. -/</span>\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">def</span> <span class=\"n\">b₄</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"o\">:=</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">W.a₄</span> <span class=\"bp\">+</span> <span class=\"n\">W.a₁</span> <span class=\"bp\">*</span> <span class=\"n\">W.a₃</span>\n\n<span class=\"sd\">/-- The `b₆` coefficient of a Weierstrass curve. -/</span>\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">def</span> <span class=\"n\">b₆</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"o\">:=</span> <span class=\"n\">W.a₃</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"mi\">4</span> <span class=\"bp\">*</span> <span class=\"n\">W.a₆</span>\n\n<span class=\"sd\">/-- The `b₈` coefficient of a Weierstrass curve. -/</span>\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">def</span> <span class=\"n\">b₈</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"o\">:=</span>\n<span class=\"n\">W.a₁</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">W.a₆</span> <span class=\"bp\">+</span> <span class=\"mi\">4</span> <span class=\"bp\">*</span> <span class=\"n\">W.a₂</span> <span class=\"bp\">*</span> <span class=\"n\">W.a₆</span> <span class=\"bp\">-</span> <span class=\"n\">W.a₁</span> <span class=\"bp\">*</span> <span class=\"n\">W.a₃</span> <span class=\"bp\">*</span> <span class=\"n\">W.a₄</span> <span class=\"bp\">+</span> <span class=\"n\">W.a₂</span> <span class=\"bp\">*</span> <span class=\"n\">W.a₃</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">-</span> <span class=\"n\">W.a₄</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span>\n\n<span class=\"c\">/-</span><span class=\"cm\">DK: \"expected '}'\"</span>\n<span class=\"cm\">lemma b_relation : 4 * W.b₈ = W.b₂ * W.b₆ - W.b₄ ^ 2 := by { simp only [b₂, b₄, b₆, b₈], ring1 }</span>\n<span class=\"cm\">-/</span>\n\n<span class=\"sd\">/-- The `c₄` coefficient of a Weierstrass curve. -/</span>\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">def</span> <span class=\"n\">c₄</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"o\">:=</span> <span class=\"n\">W.b₂</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">-</span> <span class=\"mi\">24</span> <span class=\"bp\">*</span> <span class=\"n\">W.b₄</span>\n\n<span class=\"sd\">/-- The `c₆` coefficient of a Weierstrass curve. -/</span>\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">def</span> <span class=\"n\">c₆</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"o\">:=</span> <span class=\"bp\">-</span><span class=\"n\">W.b₂</span> <span class=\"bp\">^</span> <span class=\"mi\">3</span> <span class=\"bp\">+</span> <span class=\"mi\">36</span> <span class=\"bp\">*</span> <span class=\"n\">W.b₂</span> <span class=\"bp\">*</span> <span class=\"n\">W.b₄</span> <span class=\"bp\">-</span> <span class=\"mi\">216</span> <span class=\"bp\">*</span> <span class=\"n\">W.b₆</span>\n\n<span class=\"sd\">/-- The discriminant `Δ` of a Weierstrass curve. If `R` is a field, then this polynomial vanishes</span>\n<span class=\"sd\">if and only if the cubic curve cut out by this equation is singular. Sometimes only defined up to</span>\n<span class=\"sd\">sign in the literature; we choose the sign used by the LMFDB. For more discussion, see</span>\n<span class=\"sd\">[the LMFDB page on discriminants](https://www.lmfdb.org/knowledge/show/ec.discriminant). -/</span>\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">def</span> <span class=\"bp\">Δ</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"o\">:=</span> <span class=\"bp\">-</span><span class=\"n\">W.b₂</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">W.b₈</span> <span class=\"bp\">-</span> <span class=\"mi\">8</span> <span class=\"bp\">*</span> <span class=\"n\">W.b₄</span> <span class=\"bp\">^</span> <span class=\"mi\">3</span> <span class=\"bp\">-</span> <span class=\"mi\">27</span> <span class=\"bp\">*</span> <span class=\"n\">W.b₆</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"mi\">9</span> <span class=\"bp\">*</span> <span class=\"n\">W.b₂</span> <span class=\"bp\">*</span> <span class=\"n\">W.b₄</span> <span class=\"bp\">*</span> <span class=\"n\">W.b₆</span>\n\n<span class=\"c\">/-</span><span class=\"cm\">DK: \"expected '}'\"</span>\n\n<span class=\"cm\">lemma c_relation : 1728 * W.Δ = W.c₄ ^ 3 - W.c₆ ^ 2 :=</span>\n<span class=\"cm\">by { simp only [b₂, b₄, b₆, b₈, c₄, c₆, Δ], ring1 }</span>\n\n<span class=\"cm\">-/</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">quantity</span>\n\n<span class=\"kn\">section</span> <span class=\"n\">variable_change</span>\n\n<span class=\"c\">/-</span><span class=\"cm\">! ### Variable changes -/</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"bp\">ˣ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span>\n\n<span class=\"sd\">/-- The Weierstrass curve over `R` induced by an admissible linear change of variables</span>\n<span class=\"sd\">$(X, Y) \\mapsto (u^2X + r, u^3Y + u^2sX + t)$ for some $u \\in R^\\times$ and some $r, s, t \\in R$. -/</span>\n<span class=\"kd\">@[simps]</span> <span class=\"kd\">def</span> <span class=\"n\">variable_change</span> <span class=\"o\">:</span> <span class=\"n\">weierstrass_curve</span> <span class=\"n\">R</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">a₁</span> <span class=\"o\">:=</span> <span class=\"bp\">↑</span><span class=\"n\">u</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">W.a₁</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">s</span><span class=\"o\">),</span>\n  <span class=\"n\">a₂</span> <span class=\"o\">:=</span> <span class=\"bp\">↑</span><span class=\"n\">u</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">W.a₂</span> <span class=\"bp\">-</span> <span class=\"n\">s</span> <span class=\"bp\">*</span> <span class=\"n\">W.a₁</span> <span class=\"bp\">+</span> <span class=\"mi\">3</span> <span class=\"bp\">*</span> <span class=\"n\">r</span> <span class=\"bp\">-</span> <span class=\"n\">s</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span><span class=\"o\">),</span>\n  <span class=\"n\">a₃</span> <span class=\"o\">:=</span> <span class=\"bp\">↑</span><span class=\"n\">u</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">^</span> <span class=\"mi\">3</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">W.a₃</span> <span class=\"bp\">+</span> <span class=\"n\">r</span> <span class=\"bp\">*</span> <span class=\"n\">W.a₁</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">t</span><span class=\"o\">),</span>\n  <span class=\"n\">a₄</span> <span class=\"o\">:=</span> <span class=\"bp\">↑</span><span class=\"n\">u</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">^</span> <span class=\"mi\">4</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">W.a₄</span> <span class=\"bp\">-</span> <span class=\"n\">s</span> <span class=\"bp\">*</span> <span class=\"n\">W.a₃</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">r</span> <span class=\"bp\">*</span> <span class=\"n\">W.a₂</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"bp\">+</span> <span class=\"n\">r</span> <span class=\"bp\">*</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">W.a₁</span> <span class=\"bp\">+</span> <span class=\"mi\">3</span> <span class=\"bp\">*</span> <span class=\"n\">r</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">-</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">s</span> <span class=\"bp\">*</span> <span class=\"n\">t</span><span class=\"o\">),</span>\n  <span class=\"n\">a₆</span> <span class=\"o\">:=</span> <span class=\"bp\">↑</span><span class=\"n\">u</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">^</span> <span class=\"mi\">6</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">W.a₆</span> <span class=\"bp\">+</span> <span class=\"n\">r</span> <span class=\"bp\">*</span> <span class=\"n\">W.a₄</span> <span class=\"bp\">+</span> <span class=\"n\">r</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">W.a₂</span> <span class=\"bp\">+</span> <span class=\"n\">r</span> <span class=\"bp\">^</span> <span class=\"mi\">3</span> <span class=\"bp\">-</span> <span class=\"n\">t</span> <span class=\"bp\">*</span> <span class=\"n\">W.a₃</span> <span class=\"bp\">-</span> <span class=\"n\">t</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">-</span> <span class=\"n\">r</span> <span class=\"bp\">*</span> <span class=\"n\">t</span> <span class=\"bp\">*</span> <span class=\"n\">W.a₁</span><span class=\"o\">)</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">variable_change</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">weierstrass_curve</span>\n</code></pre></div>",
        "id": 358274705,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1684076948
    },
    {
        "content": "<p>It's not really recommended to port lean3 code by hand; we have <code>mathport</code> which does 90% of the work for you,</p>",
        "id": 358292531,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684084568
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib-port-status/file/algebraic_geometry%2Felliptic_curve%2Fweierstrass\">port-status#algebraic_geometry/elliptic_curve/weierstrass</a> will tell you if it's been ported already</p>",
        "id": 358292630,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684084624
    },
    {
        "content": "<p>... it has not, because there are 40 files it needs that have also not been ported</p>",
        "id": 358292710,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684084661
    },
    {
        "content": "<p>And all the dependencies whose port is in progress, are blocked, unfortunately, so it's been at 40 for a week or two</p>",
        "id": 358298142,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1684086990
    },
    {
        "content": "<p>OK I'll learn how to run <a href=\"https://github.com/leanprover-community/mathport\">mathport</a>, thanks.  I did the Lean 3 tutorials but I guess there is not a rewrite of these for Lean 4, so I am trying to learn Lean 4 by example (I can look at Mathlib4 for examples) and by translating Lean 3 code that I have an interest in (particularly elliptic curves and anything having to do with the definition of modular forms).  I don't think this is an unusual way to learn Lean, for example <a href=\"https://leanprover-community.github.io/archive/stream/217875-Is-there-code-for-X%3F/topic/modular.20forms.20and.20Hecke.20operators.html\">this note on modular forms</a> starts with \"So I've been slowly learning some lean by looking at the modular forms code\".</p>",
        "id": 358435911,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1684151476
    },
    {
        "content": "<p>You will have a very bad time trying to learn lean4 by porting a file that needs other lean4 code that doesn't exist</p>",
        "id": 358442303,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684153079
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib-port-status/file/algebraic_geometry%2Felliptic_curve%2Fweierstrass#graph\">port-status#algebraic_geometry/elliptic_curve/weierstrass#graph</a> shows there are a very large number of pre-requisites missing</p>",
        "id": 358442495,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684153118
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span>  so, for example, <a href=\"https://github.com/leanprover-community/mathlib/blob/master/src/ring_theory/matrix_algebra.lean\">ring_theory.matrix_algebra</a> is <a href=\"https://leanprover-community.github.io/mathlib-port-status/file/ring_theory/matrix_algebra\">available to port</a>.  The machine-ported version is <a href=\"https://github.com/leanprover-community/mathlib3port/blob/master/Mathbin/RingTheory/MatrixAlgebra.lean\">here</a>.  If I want I can copy that to my local Lean mathlib directory, open it, replace Mathbin. with Mathlib, and I've almost got a ported file.  And then it gets complicated.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">info</span><span class=\"o\">:</span> <span class=\"o\">[</span><span class=\"mi\">498</span><span class=\"bp\">/</span><span class=\"mi\">1017</span><span class=\"o\">]</span> <span class=\"n\">Building</span> <span class=\"n\">Mathlib.Order.Heyting.Basic</span>\n<span class=\"n\">info</span><span class=\"o\">:</span> <span class=\"o\">[</span><span class=\"mi\">509</span><span class=\"bp\">/</span><span class=\"mi\">1017</span><span class=\"o\">]</span> <span class=\"n\">Building</span> <span class=\"n\">Mathlib.Algebra.Order.Sub.Canonical</span>\n<span class=\"n\">info</span><span class=\"o\">:</span> <span class=\"o\">[</span><span class=\"mi\">512</span><span class=\"bp\">/</span><span class=\"mi\">1017</span><span class=\"o\">]</span> <span class=\"n\">Building</span> <span class=\"n\">Mathlib.Algebra.Order.Monoid.WithTop</span>\n<span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"bp\">&gt;</span> <span class=\"n\">LEAN_PATH</span><span class=\"bp\">=./</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">lib</span><span class=\"o\">:</span><span class=\"bp\">./</span><span class=\"n\">lake</span><span class=\"bp\">-</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">Qq</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">lib</span><span class=\"o\">:</span><span class=\"bp\">./</span><span class=\"n\">lake</span><span class=\"bp\">-</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">aesop</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">lib</span><span class=\"o\">:</span><span class=\"bp\">./</span><span class=\"n\">lake</span><span class=\"bp\">-</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">std</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">lib</span> <span class=\"n\">LD_LIBRARY_PATH</span><span class=\"bp\">=/</span><span class=\"n\">usr</span><span class=\"bp\">/</span><span class=\"kn\">local</span><span class=\"bp\">/</span><span class=\"n\">cuda</span><span class=\"bp\">/</span><span class=\"n\">lib64</span><span class=\"o\">:</span><span class=\"bp\">./</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">lib</span><span class=\"o\">:</span><span class=\"bp\">./</span><span class=\"n\">lake</span><span class=\"bp\">-</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">Qq</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">lib</span><span class=\"o\">:</span><span class=\"bp\">./</span><span class=\"n\">lake</span><span class=\"bp\">-</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">aesop</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">lib</span><span class=\"o\">:</span><span class=\"bp\">./</span><span class=\"n\">lake</span><span class=\"bp\">-</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">std</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">lib</span><span class=\"o\">:</span><span class=\"bp\">./</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">lib</span> <span class=\"bp\">/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">catskills</span><span class=\"bp\">/.</span><span class=\"n\">elan</span><span class=\"bp\">/</span><span class=\"n\">toolchains</span><span class=\"bp\">/</span><span class=\"n\">leanprover</span><span class=\"c1\">--lean4---nightly-2023-05-16/bin/lean -DwarningAsError=true -Dpp.unicode.fun=true ./././Mathlib/Algebra/Group/Opposite.lean -R ././. -o ./build/lib/Mathlib/Algebra/Group/Opposite.olean -i ./build/lib/Mathlib/Algebra/Group/Opposite.ilean -c ./build/ir/Mathlib/Algebra/Group/Opposite.c</span>\n<span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">stderr</span><span class=\"o\">:</span>\n<span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">write</span> <span class=\"bp\">'./</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">lib</span><span class=\"bp\">/</span><span class=\"n\">Mathlib</span><span class=\"bp\">/</span><span class=\"n\">Algebra</span><span class=\"bp\">/</span><span class=\"n\">Group</span><span class=\"bp\">/</span><span class=\"n\">Opposite.olean'</span><span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"n\">No</span> <span class=\"n\">such</span> <span class=\"n\">file</span> <span class=\"n\">or</span> <span class=\"n\">directory</span>\n<span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">external</span> <span class=\"n\">command</span> <span class=\"bp\">`/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">catskills</span><span class=\"bp\">/.</span><span class=\"n\">elan</span><span class=\"bp\">/</span><span class=\"n\">toolchains</span><span class=\"bp\">/</span><span class=\"n\">leanprover</span><span class=\"c1\">--lean4---nightly-2023-05-16/bin/lean` exited with code 1</span>\n</code></pre></div>",
        "id": 359295074,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1684375079
    },
    {
        "content": "<p>On the other hand, you could also use <code>scripts/start_port.sh</code> to do that \"copy to local mathlib, replace mathbin\" dance...</p>",
        "id": 359311442,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1684388903
    },
    {
        "content": "<p>It's not just that you _can_ run the script Johan mentions, but it's very strongly preferred that you do, else it creates more work for reviewers</p>",
        "id": 359314584,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684391028
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span>  thank you, I will try <a href=\"https://github.com/leanprover-community/mathlib4/blob/master/scripts/start_port.sh\">https://github.com/leanprover-community/mathlib4/blob/master/scripts/start_port.sh</a><br>\nI have some basic gaps in my understanding of how the process works:</p>\n<ul>\n<li>I don't know the architecture of VS Code, so I don't know how it connects with a Lean 3 or a Lean 4.  </li>\n<li>If I download Mathlib 4 and then cd into it and do \"code .\", and I click on a line of code in that repo, then the Lean Infoview will come up.  If I just name a file \"foo.lean\" and open it in VS code, it starts looking for Lean Server forever, and Lean Infoview doesn't work.</li>\n<li>Lean 4 uses prefix MathLib, but  the partial ports in the <a href=\"https://github.com/leanprover-community/mathlib3port\">mathlib3port</a> repo use MathBin as a prefix.  When I try to load one of those files, it wants to write an OLean file.  </li>\n<li>I don't know what OLean is.</li>\n<li>I don't know if I need to distinguish Lean 4 files from Lean 3 by using a .lean4 extension.  </li>\n<li>I don't know what \"lake\" and \"elan\" are.  </li>\n</ul>\n<p>I want to get into a situation where I have done a Git Update to the latest update of the 3 to 4 port, be able to see a porting leaf node file in VS Code with a Lean InfoView, and be able to try to get it to typecheck, and then submit a pull request for that.  I just want to focus on the individual file editing part, for leaf node files that are 99% complete.  For  Ubuntu, is there a guide to fill in my knowledge gaps above?</p>",
        "id": 359521576,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1684455991
    },
    {
        "content": "<ul>\n<li>The lean extensions just \"know\" based on the directory structure.</li>\n<li>For lean4, you can't just have a naked <code>.lean</code> file and have VSCode \"work\" on it, it requires support from other configuration files in the directory context. <code>lake</code> (Lean-<code>make</code>) handles creation of new projects.</li>\n<li>The <code>start_port.sh</code> scrip handles getting the most recent \"mathbin\" in the background, it does not require you to maintain your own clone of \"mathbin\". The script will also handle all the proper string replacement of \"Mathbin\" to \"Mathlib\".</li>\n<li><code>.olean</code> is the compiled content of a <code>.lean</code>, which relies on the presence of other compatible <code>.olean</code>s. Having <code>.olean</code> means that your VSCode (lean server) won't have to recompile everything every time. During a port, you can run <code>lake exe cache get</code> to retrieve <code>.olean</code> files from a cache that is automatically maintained for Mathlib.</li>\n<li>Like I said above, what differentiates a <code>.lean</code> file in lean3 from lean4 is the context of other files in the directory. (Similar to how <code>.py</code> is the same extension for python2 and python3).</li>\n<li><code>lake</code> is Lean-<code>make</code>. <code>elan</code> is the <code>lean</code> version/release manager. It is invoked almost entirely automatically by <code>lake</code>, and you shouldn't have to interact with <code>elan</code> on the cli to be able to start a port, edit files in VSCode, make git commits, or push.</li>\n</ul>",
        "id": 359524383,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1684458281
    },
    {
        "content": "<p>For <a href=\"https://leanprover-community.github.io/mathlib-port-status/file/algebra/direct_limit\">https://leanprover-community.github.io/mathlib-port-status/file/algebra/direct_limit</a>, what does <strong>please-adopt</strong> mean in the message</p>\n<ul>\n<li>This file is currently being ported at <a href=\"https://github.com/leanprover-community/mathlib/pull/4052\">#4052</a>. please-adopt mathlib-port</li>\n</ul>\n<p>I can't tell if it is already being ported and leave it be, or if an automated translation has been touched up by a human who has issued a pull request and it is waiting for review, or what.</p>",
        "id": 359787608,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1684540785
    },
    {
        "content": "<p>It is listed as an unfinished dependency for <a href=\"https://leanprover-community.github.io/mathlib-port-status/file/algebraic_geometry%2Felliptic_curve%2Fweierstrass#graph\">https://leanprover-community.github.io/mathlib-port-status/file/algebraic_geometry%2Felliptic_curve%2Fweierstrass#graph</a></p>\n<p>This one: <a href=\"https://leanprover-community.github.io/mathlib-port-status/file/linear_algebra/matrix/special_linear_group\">https://leanprover-community.github.io/mathlib-port-status/file/linear_algebra/matrix/special_linear_group</a></p>\n<p>has tags </p>\n<ul>\n<li>This file is currently being ported at <a href=\"https://github.com/leanprover-community/mathlib/pull/3710\">#3710</a>. help-wanted WIP mathlib-port</li>\n</ul>\n<p>It says help-wanted but it looks like somebody did some work but they are not authorized users and merging is blocked.</p>",
        "id": 359788004,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1684540990
    },
    {
        "content": "<p>There are 6 files that algebra.elliptic_curve.weierstrass depends on and they all seem to be in a kind of blocked/ready for review status.</p>",
        "id": 359788195,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1684541114
    },
    {
        "content": "<p>Also for something completely unported like <a href=\"https://leanprover-community.github.io/mathlib-port-status/file/ring_theory/power_series/basic\">https://leanprover-community.github.io/mathlib-port-status/file/ring_theory/power_series/basic</a>, there is no Mathlib4 folder for power_series present, but scripts/start_port.sh is looking for an existing file.  I assume that step 0 is that mathport is run on ring_theory/power_series/basic and the files and directories are renamed from mathlib3 style (underscores) to mathlib4 style (capitalization).  How would I port a file when step 0 hasn't been done yet?</p>",
        "id": 359788727,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1684541511
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"364351\">Lars Ericson</span> <a href=\"#narrow/stream/113489-new-members/topic/Porting.20weierstrass_curve.20as.20an.20exercise.20in.20learning.20Lean.204/near/359788727\">said</a>:</p>\n<blockquote>\n<p>Also for something completely unported like <a href=\"https://leanprover-community.github.io/mathlib-port-status/file/ring_theory/power_series/basic\">https://leanprover-community.github.io/mathlib-port-status/file/ring_theory/power_series/basic</a>, there is no Mathlib4 folder for power_series present, but scripts/start_port.sh is looking for an existing file.  I assume that step 0 is that mathport is run on ring_theory/power_series/basic and the files and directories are renamed from mathlib3 style (underscores) to mathlib4 style (capitalization).  How would I port a file when step 0 hasn't been done yet?</p>\n</blockquote>\n<p>The mathport output exists and start_port will download it if you run it with argument Mathlib/RingTheory/PowerSeries/Basic.lean</p>",
        "id": 359813260,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1684562599
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib3port/blob/master/Mathbin/RingTheory/PowerSeries/Basic.lean\">https://github.com/leanprover-community/mathlib3port/blob/master/Mathbin/RingTheory/PowerSeries/Basic.lean</a></p>",
        "id": 359813443,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1684562744
    },
    {
        "content": "<p>In <a href=\"https://leanprover-community.github.io/mathlib-port-status/file/ring_theory/power_series/basic\">this page</a> I don't see PowerSeries/Basic.lean depending on LinArith/Default.lean, but that's what it is telling me:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">no</span> <span class=\"n\">such</span> <span class=\"n\">file</span> <span class=\"n\">or</span> <span class=\"n\">directory</span> <span class=\"o\">(</span><span class=\"n\">error</span> <span class=\"n\">code</span><span class=\"o\">:</span> <span class=\"mi\">2</span><span class=\"o\">)</span>\n  <span class=\"n\">file</span><span class=\"o\">:</span> <span class=\"bp\">./././</span><span class=\"n\">Mathlib</span><span class=\"bp\">/</span><span class=\"n\">Tactic</span><span class=\"bp\">/</span><span class=\"n\">Linarith</span><span class=\"bp\">/</span><span class=\"n\">Default.lean</span>\n</code></pre></div>\n<p>If I s<a href=\"https://leanprover-community.github.io/mathlib-port-status/?q=linarith\">earch for \"linarith\"</a> in mathlib porting status, I don't get anything.</p>\n<p><a href=\"/user_uploads/3121/FWT5FWISagLC5pZ2-H9th9AJ/Screenshot-from-2023-05-20-08-20-55.png\">Screenshot-from-2023-05-20-08-20-55.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/FWT5FWISagLC5pZ2-H9th9AJ/Screenshot-from-2023-05-20-08-20-55.png\" title=\"Screenshot-from-2023-05-20-08-20-55.png\"><img src=\"/user_uploads/3121/FWT5FWISagLC5pZ2-H9th9AJ/Screenshot-from-2023-05-20-08-20-55.png\"></a></div><p>So I will restart with <code>scripts/start_port.sh Mathlib/Tactic/Linarith/Default.lean</code>.  That seems to create a separate branch on my PC?  I hope that these branches are just local and that I'm not creating branches in the main repository just by running <code>start_port.sh</code>.   Also does that mean I have separate branches for the PowerSeries start_port versus the LinArith start_port?</p>",
        "id": 359880520,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1684585407
    },
    {
        "content": "<p>Note that if I just delete my mathlib4 and start from scratch, it looks good but doesn't create a Default.lean file in the Linarith directory:</p>\n<p><a href=\"/user_uploads/3121/FuWcqPpovKMCfDZWZdfX2HbJ/Screenshot-from-2023-05-20-08-27-34.png\">Screenshot-from-2023-05-20-08-27-34.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/FuWcqPpovKMCfDZWZdfX2HbJ/Screenshot-from-2023-05-20-08-27-34.png\" title=\"Screenshot-from-2023-05-20-08-27-34.png\"><img src=\"/user_uploads/3121/FuWcqPpovKMCfDZWZdfX2HbJ/Screenshot-from-2023-05-20-08-27-34.png\"></a></div>",
        "id": 359881581,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1684585671
    },
    {
        "content": "<p>Just remove the import, we are not porting things in the tactic directory</p>",
        "id": 359944416,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684608794
    },
    {
        "content": "<p>Why does anything even import that file in mathlib 3?</p>",
        "id": 359944667,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1684608911
    },
    {
        "content": "<p>Why wouldn't it?</p>",
        "id": 359950437,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684612020
    },
    {
        "content": "<p>To answer a previous question; yes, <code>start_port.sh</code> creates local branches, and it creates a new one every time you run it</p>",
        "id": 359950629,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684612093
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> suppose I git clone mathlib4, do a <code>start_port.sh</code> and then decide I want to work on a more upstream file.  If I completely remove the directory and start over, then I am only removing a local branch, and it doesn't impact anything on GitHub, is that correct?  I assume so, just double checking.</p>",
        "id": 359964629,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1684621272
    },
    {
        "content": "<p>You don't need to (and shouldn't) delete the folder; git is very happy for you to have multiple local branches.</p>",
        "id": 359966483,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684622613
    },
    {
        "content": "<p>And no, local branches don't impact things on GitHub.</p>",
        "id": 359966511,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684622632
    },
    {
        "content": "<p>After deleting the <code>LinArith</code> import, it breaks around line 129 on</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">monomial</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">σ</span> <span class=\"bp\">→₀</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">MvPowerSeries</span> <span class=\"n\">σ</span> <span class=\"n\">R</span> <span class=\"o\">:=</span>\n  <span class=\"n\">LinearMap.stdBasis</span> <span class=\"n\">R</span> <span class=\"n\">_</span> <span class=\"n\">n</span>\n<span class=\"bp\">#</span><span class=\"n\">align</span> <span class=\"n\">mv_power_series.monomial</span> <span class=\"n\">MvPowerSeries.monomial</span>\n</code></pre></div>\n<p>in particular on</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">LinearMap.stdBasis</span> <span class=\"n\">R</span> <span class=\"n\">_</span> <span class=\"n\">n</span>\n</code></pre></div>\n<p>which has type </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"bp\">?</span><span class=\"n\">m.8198</span> <span class=\"n\">n</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">σ</span> <span class=\"bp\">→₀</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"bp\">?</span><span class=\"n\">m.8198</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"bp\">?</span><span class=\"n\">u.7443</span> <span class=\"bp\">?</span><span class=\"n\">u.7440</span> <span class=\"bp\">?</span><span class=\"n\">u.7443</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>but Lean4 expects type</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">R</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">MvPowerSeries</span> <span class=\"n\">σ</span> <span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"bp\">?</span><span class=\"n\">u.7443</span> <span class=\"bp\">?</span><span class=\"n\">u.7443</span> <span class=\"bp\">?</span><span class=\"n\">u.7440</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>where</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>and MvPowerSeries is declared on line 86 as</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">MvPowerSeries</span> <span class=\"o\">(</span><span class=\"n\">σ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">σ</span> <span class=\"bp\">→₀</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">R</span>\n</code></pre></div>\n<p>so it is unable to unify</p>\n<ul>\n<li><code> ?m.8198 n</code> with <code>R</code>and</li>\n<li><code>?m.8198 i</code> with <code>R</code></li>\n</ul>\n<p>I need a hint.</p>",
        "id": 359968978,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1684624454
    },
    {
        "content": "<p>These sorts of problems are annoying to solve and not great for first time porters</p>",
        "id": 359969652,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684625024
    },
    {
        "content": "<p>The first thing I would try is filling in the underscore</p>",
        "id": 359969769,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684625139
    },
    {
        "content": "<p>I already expect this file to be a pain, for the same reason that the MonoidAlgebra files were; Lean4 is much less happy with us saying things like \"Type A is type B, with the same addition but different multiplication\"</p>",
        "id": 359969879,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684625228
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> that's a good hint but I wonder if it is something more subtle.  The system is giving me this problem explanation:</p>\n<p><a href=\"/user_uploads/3121/V1bSRNdiAwZ7gXpY2MWRBwQH/Screenshot-from-2023-05-21-11-06-46.png\">Screenshot-from-2023-05-21-11-06-46.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/V1bSRNdiAwZ7gXpY2MWRBwQH/Screenshot-from-2023-05-21-11-06-46.png\" title=\"Screenshot-from-2023-05-21-11-06-46.png\"><img src=\"/user_uploads/3121/V1bSRNdiAwZ7gXpY2MWRBwQH/Screenshot-from-2023-05-21-11-06-46.png\"></a></div><p>It is saying it has <code>max ?u.7443 ?u.7440 ?u.7443)</code> but it wants <code>max ?u.7443 ?u.7443 ?u.7440</code> or more simply it sees pattern ABA and it wants pattern AAB.  I'm not sure that filling in the underscore with a concrete type will resolve that.</p>",
        "id": 360074462,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1684681757
    },
    {
        "content": "<p>Note that</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">σ</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">?</span><span class=\"n\">u.7440</span>\n<span class=\"n\">R</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">?</span><span class=\"n\">u.7443</span>\n</code></pre></div>\n<p>so it is saying it expects to have a <code>max R R σ</code> and it is getting a <code>max R σ R</code>, so that's a clue.</p>\n<p>It's telling me that earlier in the conversion process some arguments got switched around in terms of what this definition depends on.</p>",
        "id": 360076248,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1684682384
    },
    {
        "content": "<p>The problem is that it can't work out ?m.8198. Filling out the underscore should fix that.</p>",
        "id": 360077957,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684682857
    },
    {
        "content": "<p>Note that someone else is now working on this file at <a href=\"https://github.com/leanprover-community/mathlib4/pull/4167\">!4#4167</a></p>",
        "id": 360078130,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684682896
    },
    {
        "content": "<p>I just figured it out , replace <code>_</code> with</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">R</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>through the magic of programming by example</p>\n<p><a href=\"/user_uploads/3121/FqKAqpFxVClef8jZ5yXOtf21/Screenshot-from-2023-05-21-11-41-43.png\">Screenshot-from-2023-05-21-11-41-43.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/FqKAqpFxVClef8jZ5yXOtf21/Screenshot-from-2023-05-21-11-41-43.png\" title=\"Screenshot-from-2023-05-21-11-41-43.png\"><img src=\"/user_uploads/3121/FqKAqpFxVClef8jZ5yXOtf21/Screenshot-from-2023-05-21-11-41-43.png\"></a></div><p>That said I will look for another file to work on given <a href=\"https://github.com/leanprover-community/mathlib4/pull/4167\">!4#4167</a>.</p>",
        "id": 360080605,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1684683769
    },
    {
        "content": "<p>I don't understand how that turns a <code>max R σ R</code> into a <code>max R R σ</code> but it works.</p>",
        "id": 360081319,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1684683959
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span>  when there is a <strong>please-adopt</strong> tag for example for <a href=\"https://leanprover-community.github.io/mathlib-port-status/file/algebra/direct_limit\">DirectLimit</a>, does that mean it is open for volunteers?  For some like the above where there is a pending PR, clearly not.  Not as clear for <code>DirectLimit</code>, which has recent activity by <span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> .</p>",
        "id": 360082251,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1684684299
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"364351\">Lars Ericson</span> <a href=\"#narrow/stream/113489-new-members/topic/Porting.20weierstrass_curve.20as.20an.20exercise.20in.20learning.20Lean.204/near/360081319\">said</a>:</p>\n<blockquote>\n<p>I don't understand how that turns a <code>max R σ R</code> into a <code>max R R σ</code> but it works.</p>\n</blockquote>\n<p>Those things (or at least, the <code>?</code>-versions) are equal by definition in the first place</p>",
        "id": 360082398,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684684354
    },
    {
        "content": "<p>For <a href=\"https://leanprover-community.github.io/mathlib-port-status/file/linear_algebra/matrix/special_linear_group\">special linear group</a> it has tags <strong>help-wanted</strong> and was recently worked on by  Parcly-Taxel who added the tag <strong>help-wanted</strong>, does that mean they just want hints but are still working on it?</p>",
        "id": 360082910,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1684684554
    },
    {
        "content": "<p>In summary for <a href=\"https://leanprover-community.github.io/mathlib-port-status/file/algebraic_geometry%2Felliptic_curve%2Fweierstrass#graph\">weierstrass curve</a>, there are now 4 dependencies and all 4 are In Progress, so no work available there.</p>",
        "id": 360083197,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1684684673
    },
    {
        "content": "<p>However the dependency graph shows 4 open items, but the list below of Unported Dependencies lists every node in the graph.   Are these all open to work on, or does the dependency graph only highlight the nodes that are already being worked on?</p>",
        "id": 360083725,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1684684848
    },
    {
        "content": "<p>There is no point in starting to port a module before its dependencies have been ported</p>",
        "id": 360084095,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1684684978
    },
    {
        "content": "<p>Once some of those four in-progress ports have been merged, more work may become available</p>",
        "id": 360084359,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1684685074
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"307953\">@Ruben Van de Velde</span> how about <a href=\"https://leanprover-community.github.io/mathlib-port-status/file/linear_algebra/matrix/charpoly/coeff\">linear_algebra.matrix.charpoly.coeff</a> .   This is shown as</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">linear_algebra.matrix.charpoly.coeff</span> <span class=\"bp\">⟷</span> <span class=\"bp\">?</span>\n</code></pre></div>\n<p>There is no corresponding mathport file.  How does one proceed in this case?</p>",
        "id": 360084426,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1684685105
    },
    {
        "content": "<p>That one is at the root of the dependency graph.   However the 4 files I mentioned are much further down in the dependency graph and have PRs.  So it seems that people are porting modules before their dependencies have been ported, is that correct?</p>\n<p><a href=\"/user_uploads/3121/mGR7-UOmD9vICap59HBSjV6n/Screenshot-from-2023-05-21-12-07-09.png\">Screenshot-from-2023-05-21-12-07-09.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/mGR7-UOmD9vICap59HBSjV6n/Screenshot-from-2023-05-21-12-07-09.png\" title=\"Screenshot-from-2023-05-21-12-07-09.png\"><img src=\"/user_uploads/3121/mGR7-UOmD9vICap59HBSjV6n/Screenshot-from-2023-05-21-12-07-09.png\"></a></div>",
        "id": 360084845,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1684685235
    },
    {
        "content": "<p>Oh, my information was out of date. That one does seem ready for porting, but you're saying the file doesn't exist in the mathlib3port repository? Was it added to mathlib 3 very recently?</p>",
        "id": 360084908,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1684685266
    },
    {
        "content": "<p>That is how I read the ? in this display:</p>\n<p><a href=\"/user_uploads/3121/5pvy_MP1JGO-5gD27iHQflBe/Screenshot-from-2023-05-21-12-08-09.png\">Screenshot-from-2023-05-21-12-08-09.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/5pvy_MP1JGO-5gD27iHQflBe/Screenshot-from-2023-05-21-12-08-09.png\" title=\"Screenshot-from-2023-05-21-12-08-09.png\"><img src=\"/user_uploads/3121/5pvy_MP1JGO-5gD27iHQflBe/Screenshot-from-2023-05-21-12-08-09.png\"></a></div>",
        "id": 360085070,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1684685304
    },
    {
        "content": "<p>There is a <a href=\"https://github.com/leanprover-community/mathlib/blob/1b0a28e1c93409dbf6d69526863cd9984ef652ce/src/linear_algebra/matrix/charpoly/coeff.lean#L43\">coeff.lean</a> in mathlib3.  It doesn't appear in the mathport.  There is only a <a href=\"https://github.com/leanprover-community/mathlib4/blob/master/Mathlib/LinearAlgebra/Matrix/Charpoly/Basic.lean\">Charpoly/Basic.lean</a>.  How to proceed in this case?</p>",
        "id": 360085593,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1684685537
    },
    {
        "content": "<p>Do I do a <code>start_port.sh LinearAlgebra/Matrix/Charpoly/Coeff.lean</code> and then manually create the file from the mathlib3 source?  This will be obviously harder than taking the automatic translation given by <code>mathport</code> if it existed.</p>",
        "id": 360085760,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1684685628
    },
    {
        "content": "<p>The ? in the port status means that the file doesn't exist in mathlib4 yet; it needs to be imported from mathlib3port</p>",
        "id": 360086234,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1684685837
    },
    {
        "content": "<p>This is what <code>start_port.sh</code> does</p>",
        "id": 360086280,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1684685854
    },
    {
        "content": "<p>You can see the autogenerated lean4 code that mathport generated here: <a href=\"https://github.com/leanprover-community/mathlib3port/blob/master/Mathbin/LinearAlgebra/Matrix/Charpoly/Coeff.lean\">https://github.com/leanprover-community/mathlib3port/blob/master/Mathbin/LinearAlgebra/Matrix/Charpoly/Coeff.lean</a></p>",
        "id": 360086425,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1684685905
    },
    {
        "content": "<p>Our job in porting is copying that output into the mathlib4 repository and fixing anything mathport got wrong</p>",
        "id": 360086579,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1684685966
    },
    {
        "content": "<p>So you can go ahead and run <code>start_port.sh LinearAlgebra/Matrix/Charpoly/Coeff.lean</code>, and that will create a branch in your local repository where that file exists, and you can then check if it compiles or needs any adjustments</p>",
        "id": 360086744,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1684686025
    },
    {
        "content": "<p>Does that help?</p>",
        "id": 360086751,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1684686031
    },
    {
        "content": "<p>I just found this conversation and have opened just now a PR...</p>",
        "id": 360086909,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1684686103
    },
    {
        "content": "<p>There is one proof that still need fixing, though...</p>",
        "id": 360086952,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1684686121
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/4169\">!4#4169</a></p>",
        "id": 360087129,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1684686170
    },
    {
        "content": "<p>Okay, then I revert to my previous message: the <del>four</del> five dependencies of <code>algebraic_geometry.elliptic_curve.weierstrass</code> that are available for porting, are already in progress :)</p>",
        "id": 360087397,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1684686285
    },
    {
        "content": "<p>For the record, I was following a path towards quadratic reciprocity, not Weierstrass models...</p>",
        "id": 360087635,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1684686372
    },
    {
        "content": "<p>This is at the top of the list of available modules by dependents, so that's not surprising</p>",
        "id": 360088365,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1684686649
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"321459\">@Damiano Testa</span> I pushed enough to make it build, but need to run now. Can you look at my changes and see if you can tidy it up? Otherwise I'll take another look later tonigh</p>",
        "id": 360089516,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1684687097
    },
    {
        "content": "<p>Ah, sure!  Thanks!</p>",
        "id": 360089945,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1684687255
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"307953\">@Ruben Van de Velde</span>, thank you for the fixes!</p>\n<p>I cleaned up the file: assuming that now the unused variable linter is satisfied, the file is ready for review!</p>",
        "id": 360091809,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1684688082
    },
    {
        "content": "<p>Yes, <code>help-wanted</code> typically means that contributions are welcome, and <code>please-adopt</code> means that not only is help wanted, but the original author doesn't anticipate making further progress (whether do to availability or problems they don't understand).</p>",
        "id": 360123807,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1684704665
    },
    {
        "content": "<p>It seems like <a href=\"https://leanprover-community.github.io/mathlib-port-status/file/ring_theory/integral_closure\">ring_theory.integral_closure</a> is free to work on.  It is now the critical path for weierstrass_curve.</p>\n<p><a href=\"/user_uploads/3121/xI77x7eSVg_2jokjCizDw41_/Screenshot-from-2023-05-21-18-40-32.png\">Screenshot-from-2023-05-21-18-40-32.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/xI77x7eSVg_2jokjCizDw41_/Screenshot-from-2023-05-21-18-40-32.png\" title=\"Screenshot-from-2023-05-21-18-40-32.png\"><img src=\"/user_uploads/3121/xI77x7eSVg_2jokjCizDw41_/Screenshot-from-2023-05-21-18-40-32.png\"></a></div>",
        "id": 360129065,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1684708875
    },
    {
        "content": "<p><a href=\"https://www.math.purdue.edu/~iswanso/trieste.pdf\">Integral closures of ideals and rings</a></p>",
        "id": 360129443,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1684709220
    },
    {
        "content": "<p>Why are you linking to that PDF?</p>",
        "id": 360130047,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1684709841
    },
    {
        "content": "<p>Porting a file shouldn't involve scavenger hunts through the mathematical literature</p>",
        "id": 360130113,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1684709886
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> I feel like I will be better at porting a file about integral closures if I know what an integral closure is.  When I find texts that seem particularly helpful on the topic of integral closures, I like to share them, in case they might be helpful for other people.</p>",
        "id": 360130997,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1684710700
    },
    {
        "content": "<p>That said, there is a problem with this file: It includes </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.RingTheory.Adjoin.Fg</span>\n</code></pre></div>\n<p>but this is <a href=\"https://leanprover-community.github.io/mathlib-port-status/file/ring_theory/integral_closure\">not included in the dependency graph.</a>  Why isn't it included?</p>",
        "id": 360131107,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1684710788
    },
    {
        "content": "<p>Actually <a href=\"https://github.com/leanprover-community/mathlib3port/blob/master/Mathbin/RingTheory/Adjoin/Fg.lean\">Fg.lean is in the porting directory,</a> but it is not in the dependency graph.</p>",
        "id": 360131211,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1684710884
    },
    {
        "content": "<p>I will open a start_port for Fg.lean but, given that it is not in the dependency graph, I'm not sure whether it's non-inclusion is a problem with respect to porting.</p>",
        "id": 360131278,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1684710948
    },
    {
        "content": "<p>Oh wait my bad, it is in mathlib4, but as FG.lean, not Fg.lean, and Lean 4 is case sensitive, where I guess Lean 3 was not, or is it an artifact of the porting script?</p>",
        "id": 360131393,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1684711054
    },
    {
        "content": "<p>So it needs an added </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.RingTheory.Polynomial.Basic</span>\n</code></pre></div>\n<p>and within that file it requires <code>degree_le</code> which is now <code>degreeLE</code> and <code>mem_degree_le</code> now mem_degreeLE<code>.  It is also breaking on the occurence of </code>by_contradiction<code>.  What is the Lean 4 of </code>by_contradiction`?</p>",
        "id": 360133363,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1684712896
    },
    {
        "content": "<p>Never mind that's now <code>byContradiction</code>.</p>",
        "id": 360133519,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1684713081
    },
    {
        "content": "<p>There are quite a few name to be remapped for example <code>aeval_map_algebra_map</code>, <code>nat_degree</code>, <code>mod_by_monic_add_div</code>.  I can find those.</p>",
        "id": 360134236,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1684713763
    },
    {
        "content": "<p>This one I don't understand, the code is:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">fG_adjoin_of_finite</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">A</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hfs</span> <span class=\"o\">:</span> <span class=\"n\">s.Finite</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">his</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">IsIntegral</span> <span class=\"n\">R</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"n\">Algebra.adjoin</span> <span class=\"n\">R</span> <span class=\"n\">s</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">toSubmodule.FG</span> <span class=\"o\">:=</span>\n</code></pre></div>\n<p>and the error message is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">(</span><span class=\"n\">kernel</span><span class=\"o\">)</span> <span class=\"n\">declaration</span> <span class=\"n\">has</span> <span class=\"n\">metavariables</span> <span class=\"bp\">'</span><span class=\"n\">fG_adjoin_of_finite'</span>\n</code></pre></div>\n<p>How to handle <strong>declaration has metavariables </strong>?</p>",
        "id": 360134325,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1684713844
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"364351\">@Lars Ericson</span>, I made an attempt at porting <code>IntegralClosure</code> and fixed some of the issues.  If you want to either push your own attempts or try your hand at what I cannot do, feel free to do so!</p>\n<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/4196\">!4#4196</a></p>",
        "id": 360156290,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1684731736
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"364351\">Lars Ericson</span> <a href=\"#narrow/stream/113489-new-members/topic/Porting.20weierstrass_curve.20as.20an.20exercise.20in.20learning.20Lean.204/near/360131393\">said</a>:</p>\n<blockquote>\n<p>Oh wait my bad, it is in mathlib4, but as FG.lean, not Fg.lean, and Lean 4 is case sensitive, where I guess Lean 3 was not, or is it an artifact of the porting script?</p>\n</blockquote>\n<p>Everything in mathlib 3 is lower case, so mathport has to guess a capitalization, which we don't always agree with.</p>",
        "id": 360157790,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1684732584
    },
    {
        "content": "<p>mathport isn't great at telling the difference between words and acronyms</p>",
        "id": 360157927,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1684732650
    },
    {
        "content": "<p>All of the root nodes of weierstrass are In Progress now.</p>\n<p><a href=\"/user_uploads/3121/EDncqECKe-cCPpdJdqVQAm1d/Screenshot-from-2023-05-22-22-24-12.png\">Screenshot-from-2023-05-22-22-24-12.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/EDncqECKe-cCPpdJdqVQAm1d/Screenshot-from-2023-05-22-22-24-12.png\" title=\"Screenshot-from-2023-05-22-22-24-12.png\"><img src=\"/user_uploads/3121/EDncqECKe-cCPpdJdqVQAm1d/Screenshot-from-2023-05-22-22-24-12.png\"></a></div>",
        "id": 360412090,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1684808694
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"321459\">@Damiano Testa</span> I will look for the <code>sorry</code>s in <code>IntegralClosure.lean</code>.  I am trying to load it now from scratch, it takes about 30+ minutes to build on my PC.</p>",
        "id": 360412261,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1684808821
    },
    {
        "content": "<p>Actually I can't even get to the error messages because it is stuck on the 1010'th construct out of 1129:</p>\n<p><a href=\"/user_uploads/3121/LQyvjFWQRYhrHWdC0HJpIj90/Screenshot-from-2023-05-23-00-53-28.png\">Screenshot-from-2023-05-23-00-53-28.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/LQyvjFWQRYhrHWdC0HJpIj90/Screenshot-from-2023-05-23-00-53-28.png\" title=\"Screenshot-from-2023-05-23-00-53-28.png\"><img src=\"/user_uploads/3121/LQyvjFWQRYhrHWdC0HJpIj90/Screenshot-from-2023-05-23-00-53-28.png\"></a></div><p>Is it possible that this is one of those billion year waits?  I.e. a concrete example of intractibility creeping into the definition stack of Lean 4?</p>",
        "id": 360425485,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1684817704
    },
    {
        "content": "<p>On the other hand it's not using any CPU so I don't know what to make of it.  I will try restarting and see if that helps.</p>",
        "id": 360425646,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1684817797
    },
    {
        "content": "<p>And now it's fine.  Confusing.</p>",
        "id": 360425738,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1684817876
    },
    {
        "content": "<p>I also don't see any <code>sorry</code>'s so I'll assume this file was completed converted.</p>",
        "id": 360425819,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1684817907
    },
    {
        "content": "<p>You shouldn't have to build everything, <code>lake exe cache get</code> will load a build of n-1 of the files you need</p>",
        "id": 360426138,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684818097
    },
    {
        "content": "<p>Make sure that lean is not running when you run it</p>",
        "id": 360426166,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684818118
    },
    {
        "content": "<p>And yes, integral closure has been finished already</p>",
        "id": 360426573,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1684818308
    },
    {
        "content": "<p>The port moves fast, especially with files that are straightforward!</p>\n<p>Once <a href=\"https://github.com/leanprover-community/mathlib4/pull/4238\">!4#4238</a> gets merged, I'll give a go to <code>ring_theory.adjoin_root</code>.</p>",
        "id": 360456895,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1684828880
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"321459\">@Damiano Testa</span>  that one and field_theory.separable are root nodes now.</p>\n<p><a href=\"/user_uploads/3121/wtMKmn54GzK4iky5Pf_eP-f9/Screenshot-from-2023-05-23-07-41-14.png\">Screenshot-from-2023-05-23-07-41-14.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/wtMKmn54GzK4iky5Pf_eP-f9/Screenshot-from-2023-05-23-07-41-14.png\" title=\"Screenshot-from-2023-05-23-07-41-14.png\"><img src=\"/user_uploads/3121/wtMKmn54GzK4iky5Pf_eP-f9/Screenshot-from-2023-05-23-07-41-14.png\"></a></div>",
        "id": 360504813,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1684842111
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span>  thank you, so the drill to start work on porting a file looks like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">git</span> <span class=\"n\">clone</span> <span class=\"n\">https</span><span class=\"o\">:</span><span class=\"bp\">//</span><span class=\"n\">github.com</span><span class=\"bp\">/</span><span class=\"n\">leanprover</span><span class=\"bp\">-</span><span class=\"n\">community</span><span class=\"bp\">/</span><span class=\"n\">mathlib4.git</span>\n<span class=\"n\">cd</span> <span class=\"n\">mathlib4</span>\n<span class=\"n\">lake</span> <span class=\"n\">exe</span> <span class=\"n\">cache</span> <span class=\"n\">get</span>\n<span class=\"n\">scripts</span><span class=\"bp\">/</span><span class=\"n\">start_port.sh</span> <span class=\"n\">Mathlib</span><span class=\"bp\">/</span><span class=\"n\">FieldTheory</span><span class=\"bp\">/</span><span class=\"n\">Separable.lean</span>\n<span class=\"n\">code</span> <span class=\"bp\">.</span>\n</code></pre></div>",
        "id": 360507528,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1684842795
    },
    {
        "content": "<p>Note I am still getting a build sequence for <code>Separable.lean</code> but it is running much faster with the <code>lake exe cache</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">info</span><span class=\"o\">:</span> <span class=\"o\">[</span><span class=\"mi\">819</span><span class=\"bp\">/</span><span class=\"mi\">1138</span><span class=\"o\">]</span> <span class=\"n\">Building</span> <span class=\"n\">Mathlib.Algebra.Module.Hom</span>\n</code></pre></div>",
        "id": 360510948,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1684843628
    },
    {
        "content": "<p>You're missing the <code>get</code> on <code>lake exe cache get</code></p>",
        "id": 360517775,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684845269
    },
    {
        "content": "<p>I am looking at <a href=\"https://github.com/leanprover-community/mathlib3port/blob/master/Mathbin/Algebra/BigOperators/NormNum.lean\">Algebra.BigOperators.NormNum</a> line 52</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">unsafe</span> <span class=\"kd\">def</span> <span class=\"n\">decide_eq</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">expr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"o\">(</span><span class=\"n\">Bool</span> <span class=\"bp\">×</span> <span class=\"n\">expr</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n</code></pre></div>\n<p>the <a href=\"https://github.com/leanprover-community/mathlib/blob/ba5ff5ad5d120fb0ef094ad2994967e9bfaf5112/src/algebra/big_operators/norm_num.lean#L46\">original mathlib 3 text</a> is </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">decide_eq</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">expr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"o\">(</span><span class=\"n\">bool</span> <span class=\"bp\">×</span> <span class=\"n\">expr</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n</code></pre></div>\n<p>The Lean 4 error message is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">function</span> <span class=\"n\">expected</span> <span class=\"n\">at</span>\n  <span class=\"n\">tactic</span>\n<span class=\"n\">term</span> <span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"bp\">?</span><span class=\"n\">m.11</span>\n</code></pre></div>\n<p>on subexpression</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">tactic</span> <span class=\"o\">(</span><span class=\"n\">Bool</span> <span class=\"bp\">×</span> <span class=\"n\">expr</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>where <code>#check tactic</code> gives <code>unknown identifier 'tactic'</code>.</p>\n<p>Any hint greatly appreciated.  I guess Lean 4 tactics are completely different than Lean 3 especially the metaprogramming thereof and this looks like a metaprogramming section.</p>",
        "id": 360642147,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1684877360
    },
    {
        "content": "<p>This is indeed because the file defines a tactic and tactics are very different in Lean 4. I've started a port in the <a href=\"https://github.com/leanprover-community/mathlib4/tree/norm_num-bigop\"><code>norm_num-bigop</code> branch</a>.</p>",
        "id": 360642700,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1684877592
    },
    {
        "content": "<p>Porting tactic files is an exercise in understanding how the tactic worked in lean 3 and then rewriting it largely from scratch, right?</p>",
        "id": 360642832,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684877649
    },
    {
        "content": "<p>Also I came up with a few improvements to the tactic so I'm planning to basically redo it entirely.</p>",
        "id": 360642892,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1684877683
    },
    {
        "content": "<p>I am looking at <a href=\"https://leanprover-community.github.io/mathlib-port-status/file/algebra/category/Algebra/basic\">algebra.category.Algebra.basic</a>.  It lists no dependencies, but <a href=\"https://github.com/leanprover-community/mathlib3port/blob/master/Mathbin/Algebra/Category/Algebra/Basic.lean\">line 14 of the ported file</a></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathbin.Algebra.Category.Module.Basic</span>\n</code></pre></div>\n<p>refers to a dependency <a href=\"https://github.com/leanprover-community/mathlib3port/blob/master/Mathbin/Algebra/Category/Module/Basic.lean\">Module/Basic.lean.</a>   This does not seem to be ported, but it is not listed as a dependency. </p>\n<p>Why is the dependency graph blank/dependency not shown <a href=\"https://leanprover-community.github.io/mathlib-port-status/file/algebra/category/Algebra/basic\">here</a>?</p>",
        "id": 360662979,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1684888750
    },
    {
        "content": "<p>Regarding <a href=\"https://github.com/leanprover-community/mathlib3port/blob/master/Mathbin/Algebra/Category/Module/Basic.lean\">Algebra.Category.Module.Basic</a>, it is marked as already in process:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">WARNING</span><span class=\"o\">:</span> <span class=\"n\">The</span> <span class=\"n\">file</span> <span class=\"n\">is</span> <span class=\"n\">already</span> <span class=\"k\">in</span> <span class=\"n\">the</span> <span class=\"n\">process</span> <span class=\"n\">of</span> <span class=\"n\">being</span> <span class=\"n\">ported</span> <span class=\"k\">in</span> <span class=\"n\">mathlib4</span><span class=\"bp\">#</span><span class=\"mi\">3260</span><span class=\"bp\">.</span>\n</code></pre></div>\n<p>However as I mentioned it is not shown as a dependency (nothing is in the dependency graph of) <a href=\"https://leanprover-community.github.io/mathlib-port-status/file/algebra/category/Algebra/basic\">Algebra.Category.Algebra.basic</a>.  Maybe the problem is the lowercase \"b\" in basic?</p>\n<p>I'm looking at the first page of <strong>Unported files</strong> and it looks like some are actually in process, have dependencies that are not listed, or are otherwise not in the status of being leaf nodes that are not being worked on in some way.  That is, the files in the list are ones that are actually snarled up in some way that is not being shown in the dependency graph display.</p>\n<p><a href=\"/user_uploads/3121/qENyhnNC_1XJf7_HDwAJFEdZ/Screenshot-from-2023-05-23-22-19-25.png\">Screenshot-from-2023-05-23-22-19-25.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/qENyhnNC_1XJf7_HDwAJFEdZ/Screenshot-from-2023-05-23-22-19-25.png\" title=\"Screenshot-from-2023-05-23-22-19-25.png\"><img src=\"/user_uploads/3121/qENyhnNC_1XJf7_HDwAJFEdZ/Screenshot-from-2023-05-23-22-19-25.png\"></a></div>",
        "id": 360672904,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1684894827
    },
    {
        "content": "<p>OK I found one which is unported but all of the imports are ported, <a href=\"https://leanprover-community.github.io/mathlib-port-status/file/measure_theory/function/ae_eq_fun\">MeasureTheory.Function.AeEqFun.lean</a>.  It is listed by the dependency checker as depending on unported <a href=\"https://leanprover-community.github.io/mathlib-port-status/file/analysis/normed/mul_action\">analysis.normed.mul_action.</a>  However, this module is not imported into AeEqFun, so I don't know why it's listed.</p>",
        "id": 360674220,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1684895681
    },
    {
        "content": "<p>First fix for this one is replace <code>Emetric</code> with <code>EMetric</code>.</p>",
        "id": 360674903,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1684896158
    }
]