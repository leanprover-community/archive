[
    {
        "content": "<p>I am trying to extend some results on <code>ℝ</code> to an arbitrary instance of <code>linear_ordered_comm_ring</code>. Specifically, I want to use <code>linarith</code> in this setting. However, I can't seem to set up the instance properly for <code>linarith</code>.</p>\n<p>Here is an example of code using <code>ℝ</code> in contrast to that of <code>linear_ordered_comm_ring</code> (which doesn't compile):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.real.basic</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">incidence_geometry</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">point</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">length</span> <span class=\"o\">:</span> <span class=\"n\">point</span> <span class=\"bp\">→</span> <span class=\"n\">point</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">length_nonneg</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">point</span><span class=\"o\">),</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">length</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">incidence_geometry</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">[</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">incidence_geometry</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">i.point</span><span class=\"o\">}</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">zero_of_le</span> <span class=\"o\">(</span><span class=\"n\">hlen</span><span class=\"o\">:</span> <span class=\"n\">length</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">length</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">linarith</span> <span class=\"o\">[</span><span class=\"n\">length_nonneg</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>vs</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic.linarith</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">incidence_geometry</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">point</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">length_type</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span>\n<span class=\"o\">[</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">linear_ordered_comm_ring</span> <span class=\"n\">length_type</span><span class=\"o\">]</span>\n<span class=\"o\">(</span><span class=\"n\">length</span> <span class=\"o\">:</span> <span class=\"n\">point</span> <span class=\"bp\">→</span> <span class=\"n\">point</span> <span class=\"bp\">→</span> <span class=\"n\">length_type</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">length_nonneg</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">point</span><span class=\"o\">),</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">length</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">incidence_geometry</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">[</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">incidence_geometry</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">i.point</span><span class=\"o\">}</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">zero_of_le</span> <span class=\"o\">[</span><span class=\"n\">has_le</span> <span class=\"n\">length_type</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_zero</span> <span class=\"n\">length_type</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">hlen</span><span class=\"o\">:</span> <span class=\"n\">length</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">length</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">linarith</span> <span class=\"o\">[</span><span class=\"n\">length_nonneg</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 325762054,
        "sender_full_name": "André Hernández-Espiet (Rutgers)",
        "timestamp": 1675480954
    },
    {
        "content": "<p>Does <code>attribute [instance] incidence_geometry.s</code> help?</p>",
        "id": 325779958,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1675496819
    },
    {
        "content": "<p>PS surely <code>incidence geometry</code> should be a structure not a class?</p>",
        "id": 325780050,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1675496888
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/Linarith.20for.20linear_ordered_comm_ring/near/325779958\">said</a>:</p>\n<blockquote>\n<p>Does <code>attribute [instance] incidence_geometry.s</code> help?</p>\n</blockquote>\n<p>And you need to remove <code>[has_le length_type] [has_zero length_type]</code> as well since they introduce different 0 and 1 than 0 and 1 from the <code>linear_ordered_comm_ring</code>.</p>",
        "id": 325848006,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1675525945
    },
    {
        "content": "<p>Thank you so much! That did work. How would I convert this class into a structure? What are the advantages of doing so?</p>",
        "id": 325852327,
        "sender_full_name": "André Hernández-Espiet (Rutgers)",
        "timestamp": 1675527602
    },
    {
        "content": "<p>A class is a structure, but one that is registered with the typeclass system (the system that fills in <code>[blah]</code> arguments for you). So to change from one to the other you just change the word class to structure and change typeclass arguments to regular ones.<br>\nIn general typeclasses should be used when the object you are dealing with is somehow unique (like the field operations on the real numbers, its rare that someone would need a different definition for that). However there are likely many incidence geometries floating around, so having it as a class might make things awkward when you want to apply these lemmas.</p>",
        "id": 325858796,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1675530296
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"407577\">Andre Hernandez-Espiet (Rutgers)</span> has marked this topic as resolved.</p>",
        "id": 326090750,
        "sender_full_name": "Notification Bot",
        "timestamp": 1675680162
    }
]