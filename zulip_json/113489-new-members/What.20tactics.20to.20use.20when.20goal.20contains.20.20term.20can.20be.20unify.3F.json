[
    {
        "content": "<p>Consider the case</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">what_typ</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Type</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">ofNat</span>   <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">ℤ</span> <span class=\"bp\">×</span> <span class=\"n\">ℤ</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">negSucc</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">ℕ</span> <span class=\"bp\">×</span> <span class=\"n\">ℤ</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">my_go</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">what_typ</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">what_typ</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">exact</span> <span class=\"k\">match</span> <span class=\"n\">n</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">ofNat</span>   <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span>\n      <span class=\"n\">dsimp</span>\n      <span class=\"gr\">sorry</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">negSucc</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>before the <code>sorry</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">n</span><span class=\"bp\">✝</span><span class=\"o\">:</span> <span class=\"n\">ℤ</span>\n<span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">what_typ</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">what_typ</span> <span class=\"bp\">↑</span><span class=\"n\">n</span>\n</code></pre></div>\n<p>where the goal can be transform to <code>show ℤ × ℤ -&gt; ℤ × ℤ </code>.</p>\n<p>Partial <code>show</code> can also be used like <code>show ℤ × ℤ -&gt; _</code> to <code>⊢ what_typ (↑n + 1) → what_typ ↑n</code>.</p>\n<p>But some cases partial <code>show</code> does not work, and the goal is too complex.</p>\n<p>Is there a way to do this task more idiomatically?</p>",
        "id": 387405511,
        "sender_full_name": "Alissa Tung",
        "timestamp": 1693040504
    },
    {
        "content": "<p>You could do <code>dsimp [what_type]</code> to unfold the definition</p>",
        "id": 387420308,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1693051349
    },
    {
        "content": "<p>[Quoting…]</p>\n<p>Yes. But some more complicated situations the definition will be unfold to <code>match (ofNat x) + 1 with …</code>, which still not reduce to the ofNat branch. I thought there should have some mechanics to push the match operand into constructor form by definitional equality, and reduce to the branch it should be.</p>",
        "id": 387420704,
        "sender_full_name": "Alissa Tung",
        "timestamp": 1693051690
    },
    {
        "content": "<p>A more concrete goal I am facing is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">⊢</span> <span class=\"n\">CategoryTheory.CategoryStruct.comp</span>\n    <span class=\"o\">(</span><span class=\"k\">match</span> <span class=\"bp\">↑</span><span class=\"n\">a</span><span class=\"bp\">✝</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"n\">Int.ofNat</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"o\">{</span> <span class=\"n\">toAddHom</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">toFun</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">4</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">map_add'</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ZMod</span> <span class=\"mi\">8</span><span class=\"o\">),</span> <span class=\"mi\">4</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">4</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">4</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">},</span>\n        <span class=\"n\">map_smul'</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ZMod</span> <span class=\"mi\">8</span><span class=\"o\">),</span> <span class=\"mi\">4</span> <span class=\"bp\">*</span> <span class=\"n\">r</span> <span class=\"bp\">•</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">r</span> <span class=\"bp\">•</span> <span class=\"o\">(</span><span class=\"mi\">4</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"o\">}</span>\n    <span class=\"bp\">|</span> <span class=\"n\">Int.negSucc</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n    <span class=\"o\">{</span> <span class=\"n\">toAddHom</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">toFun</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">4</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">map_add'</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ZMod</span> <span class=\"mi\">8</span><span class=\"o\">),</span> <span class=\"mi\">4</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">4</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">4</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">},</span>\n      <span class=\"n\">map_smul'</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ZMod</span> <span class=\"mi\">8</span><span class=\"o\">),</span> <span class=\"mi\">4</span> <span class=\"bp\">*</span> <span class=\"n\">r</span> <span class=\"bp\">•</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">r</span> <span class=\"bp\">•</span> <span class=\"o\">(</span><span class=\"mi\">4</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"o\">}</span> <span class=\"bp\">=</span>\n  <span class=\"mi\">0</span>\n</code></pre></div>",
        "id": 387421566,
        "sender_full_name": "Alissa Tung",
        "timestamp": 1693052424
    },
    {
        "content": "<p>It could be that you need <code>simp [what_type]</code> instead, since it might not be a definitional equality, but that adds <code>Eq.rec</code>s into your term.</p>\n<p>Another tactic you can use is <code>split</code>, which is for case splitting on <code>match</code> and <code>if</code> statements that appear in the goal. But again this might give you some gross terms if that matters to you.</p>",
        "id": 387422789,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1693053462
    },
    {
        "content": "<p>Oh thx, that helps a lot. But I am still confusing at my code, which is actually</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.Ring.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.Module.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.Category.ModuleCat.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.Homology.HomologicalComplex</span>\n\n\n<span class=\"kd\">def</span> <span class=\"n\">z_mod_8_c</span> <span class=\"o\">:</span> <span class=\"n\">ChainComplex</span> <span class=\"o\">(</span><span class=\"n\">ModuleCat</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"n\">ℤ</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">refine</span> <span class=\"n\">ChainComplex.of</span> <span class=\"bp\">?</span><span class=\"n\">X</span> <span class=\"bp\">?</span><span class=\"n\">d</span> <span class=\"bp\">?</span><span class=\"n\">d_comp_d'</span>\n  <span class=\"bp\">·</span> <span class=\"n\">exact</span> <span class=\"k\">fun</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">match</span> <span class=\"n\">n</span> <span class=\"k\">with</span>\n      <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">ofNat</span>   <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">ModuleCat.mk</span> <span class=\"bp\">$</span> <span class=\"n\">ZMod</span> <span class=\"mi\">8</span>\n      <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">negSucc</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">ModuleCat.of</span> <span class=\"n\">ℤ</span> <span class=\"n\">PUnit</span>\n  <span class=\"bp\">·</span> <span class=\"n\">exact</span> <span class=\"k\">fun</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">match</span> <span class=\"n\">n</span> <span class=\"k\">with</span>\n      <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">ofNat</span>   <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span>\n          <span class=\"k\">show</span> <span class=\"n\">ModuleCat.mk</span> <span class=\"o\">(</span><span class=\"n\">ZMod</span> <span class=\"mi\">8</span><span class=\"o\">)</span> <span class=\"bp\">⟶</span> <span class=\"n\">ModuleCat.mk</span> <span class=\"o\">(</span><span class=\"n\">ZMod</span> <span class=\"mi\">8</span><span class=\"o\">)</span>\n          <span class=\"n\">refine</span> <span class=\"n\">LinearMap.mk</span> <span class=\"bp\">?</span><span class=\"n\">_</span> <span class=\"bp\">?</span><span class=\"n\">_</span>\n          <span class=\"bp\">·</span> <span class=\"n\">constructor</span><span class=\"bp\">;</span> <span class=\"n\">swap</span>\n            <span class=\"bp\">·</span> <span class=\"n\">intro</span> <span class=\"n\">x</span>\n              <span class=\"n\">exact</span> <span class=\"mi\">4</span> <span class=\"bp\">*</span> <span class=\"n\">x</span>\n            <span class=\"n\">intro</span> <span class=\"n\">x</span> <span class=\"n\">y</span>\n            <span class=\"n\">ring</span>\n          <span class=\"n\">dsimp</span>\n          <span class=\"n\">intro</span> <span class=\"n\">r</span> <span class=\"n\">x</span>\n          <span class=\"n\">ring_nf</span>\n          <span class=\"n\">exact</span> <span class=\"n\">smul_mul_assoc</span> <span class=\"n\">r</span> <span class=\"n\">x</span> <span class=\"mi\">4</span>\n      <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">negSucc</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">0</span>\n  <span class=\"n\">intro</span> <span class=\"n\">n</span>\n  <span class=\"n\">exact</span> <span class=\"k\">match</span> <span class=\"n\">n</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">ofNat</span>   <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span>\n        <span class=\"n\">dsimp</span>\n        <span class=\"gr\">sorry</span>\n\n    <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">negSucc</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>in the sorry after dsimp, which can not use those methods since there is no named function</p>",
        "id": 387426844,
        "sender_full_name": "Alissa Tung",
        "timestamp": 1693056695
    },
    {
        "content": "<p>Seems that this works</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>    <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">ofNat</span>   <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span>\n        <span class=\"n\">dsimp</span>\n        <span class=\"k\">show</span> <span class=\"n\">CategoryTheory.CategoryStruct.comp</span>\n                <span class=\"o\">(</span><span class=\"k\">match</span> <span class=\"o\">((</span><span class=\"bp\">↑</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"k\">with</span>\n                <span class=\"bp\">|</span> <span class=\"n\">Int.ofNat</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">_</span>\n                <span class=\"bp\">|</span> <span class=\"n\">Int.negSucc</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n                <span class=\"n\">_</span> <span class=\"bp\">=</span>\n              <span class=\"mi\">0</span>\n        <span class=\"k\">show</span> <span class=\"n\">CategoryTheory.CategoryStruct.comp</span>\n                <span class=\"o\">(</span><span class=\"k\">match</span> <span class=\"o\">((</span><span class=\"n\">Nat.succ</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"k\">with</span>\n                <span class=\"bp\">|</span> <span class=\"n\">Int.ofNat</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">_</span>\n                <span class=\"bp\">|</span> <span class=\"n\">Int.negSucc</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n                <span class=\"n\">_</span> <span class=\"bp\">=</span>\n              <span class=\"mi\">0</span>\n        <span class=\"n\">simp</span>\n</code></pre></div>",
        "id": 387427627,
        "sender_full_name": "Alissa Tung",
        "timestamp": 1693057352
    }
]