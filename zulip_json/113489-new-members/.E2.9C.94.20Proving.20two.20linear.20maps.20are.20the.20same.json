[
    {
        "content": "<p>Hello, <br>\nI am trying to prove that two linear vectors are the same if for all normalised vectors, their outputs are the same.<br>\nI would have thought there is something for this in Lean documentation but didn't find anything.</p>\n<p>I originally had that:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">h_fix_ε_for_contra</span><span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">),</span> <span class=\"bp\">‖</span><span class=\"n\">e</span><span class=\"bp\">‖</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">→</span> <span class=\"bp\">‖⇑</span><span class=\"n\">K</span> <span class=\"n\">e</span> <span class=\"bp\">-</span> <span class=\"bp\">⇑</span><span class=\"n\">K'</span> <span class=\"n\">e</span><span class=\"bp\">‖</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">K</span> <span class=\"bp\">=</span> <span class=\"n\">K'</span>\n</code></pre></div>\n<p>An MWE is this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">MWE</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"n\">K'</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">ℝ</span><span class=\"o\">]</span> <span class=\"n\">fin</span> <span class=\"n\">m</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">),</span> <span class=\"bp\">‖</span><span class=\"n\">e</span><span class=\"bp\">‖</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">→</span> <span class=\"bp\">‖</span><span class=\"n\">K</span> <span class=\"n\">e</span> <span class=\"bp\">-</span> <span class=\"n\">K'</span> <span class=\"n\">e</span><span class=\"bp\">‖</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">K</span> <span class=\"bp\">=</span> <span class=\"n\">K'</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n\n  <span class=\"n\">specialize</span> <span class=\"n\">h</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">e</span><span class=\"o\">,</span>\n\n  <span class=\"n\">specialize</span> <span class=\"n\">h</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"c1\">--stuck here</span>\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>Which gives:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">mn</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span>\n<span class=\"n\">KK'</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">ℝ</span><span class=\"o\">]</span> <span class=\"n\">fin</span> <span class=\"n\">m</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span>\n<span class=\"n\">e</span><span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span>\n<span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"bp\">‖</span><span class=\"n\">e</span><span class=\"bp\">‖</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">→</span> <span class=\"bp\">‖⇑</span><span class=\"n\">K</span> <span class=\"n\">e</span> <span class=\"bp\">-</span> <span class=\"bp\">⇑</span><span class=\"n\">K'</span> <span class=\"n\">e</span><span class=\"bp\">‖</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n<span class=\"bp\">⊢</span> <span class=\"bp\">‖</span><span class=\"n\">e</span><span class=\"bp\">‖</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span>\n<span class=\"n\">mn</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span>\n<span class=\"n\">KK'</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">ℝ</span><span class=\"o\">]</span> <span class=\"n\">fin</span> <span class=\"n\">m</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span>\n<span class=\"n\">e</span><span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span>\n<span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"bp\">‖⇑</span><span class=\"n\">K</span> <span class=\"n\">e</span> <span class=\"bp\">-</span> <span class=\"bp\">⇑</span><span class=\"n\">K'</span> <span class=\"n\">e</span><span class=\"bp\">‖</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">K</span> <span class=\"bp\">=</span> <span class=\"n\">K'</span>\n</code></pre></div>\n<p>Maybe I need to somehow use an arbitrary vector like e1.<br>\nAnother reason I am asking this is that I believe I am proving something that is correct but I have my doubts.</p>",
        "id": 339928822,
        "sender_full_name": "Abu Al Hassan",
        "timestamp": 1678124119
    },
    {
        "content": "<p>can you please provide a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> complete with all the necessary imports?</p>",
        "id": 339929200,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1678124223
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.real.basic</span> <span class=\"c1\">-- imports the real numbers</span>\n<span class=\"kn\">import</span> <span class=\"n\">analysis.inner_product_space.euclidean_dist</span>\n<span class=\"kn\">import</span> <span class=\"n\">analysis.inner_product_space.pi_L2</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.module.linear_map</span>\n</code></pre></div>",
        "id": 339929382,
        "sender_full_name": "Abu Al Hassan",
        "timestamp": 1678124278
    },
    {
        "content": "<p>Sorry for forgetting to include them earlier</p>",
        "id": 339929497,
        "sender_full_name": "Abu Al Hassan",
        "timestamp": 1678124305
    },
    {
        "content": "<p>Can you please read the info at this link? <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a></p>",
        "id": 339929519,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1678124313
    },
    {
        "content": "<p>Here is the updated MWE:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.real.basic</span> <span class=\"c1\">-- imports the real numbers</span>\n<span class=\"kn\">import</span> <span class=\"n\">analysis.inner_product_space.euclidean_dist</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.module.linear_map</span>\n\n<span class=\"c1\">--K is a linear map from ℝ^n to ℝ^m</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span>\n\n<span class=\"c1\">--Trying to prove that if for all vectors (e) of unit norm, if K(e) = K'(e), then K = K' (meaning teh two linear maps are the same)</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">MWE</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"n\">K'</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">ℝ</span><span class=\"o\">]</span> <span class=\"n\">fin</span> <span class=\"n\">m</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">),</span> <span class=\"bp\">‖</span><span class=\"n\">e</span><span class=\"bp\">‖</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">→</span> <span class=\"bp\">‖</span><span class=\"n\">K</span> <span class=\"n\">e</span> <span class=\"bp\">-</span> <span class=\"n\">K'</span> <span class=\"n\">e</span><span class=\"bp\">‖</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">K</span> <span class=\"bp\">=</span> <span class=\"n\">K'</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n\n  <span class=\"n\">specialize</span> <span class=\"n\">h</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">e</span><span class=\"o\">,</span>\n\n  <span class=\"n\">specialize</span> <span class=\"n\">h</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"c1\">--stuck here</span>\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 339931056,
        "sender_full_name": "Abu Al Hassan",
        "timestamp": 1678124721
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"583816\">Abu Al Hassan</span> has marked this topic as unresolved.</p>",
        "id": 339931164,
        "sender_full_name": "Notification Bot",
        "timestamp": 1678124756
    },
    {
        "content": "<p>Are you able to write down the proof on paper?</p>",
        "id": 339932620,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1678125158
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 339935580,
        "sender_full_name": "Abu Al Hassan",
        "timestamp": 1678125978
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/Z5pu2QlNwXr_7A3ZLJzil8vb/20230306_180512.jpg\">20230306_180512.jpg</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/Z5pu2QlNwXr_7A3ZLJzil8vb/20230306_180512.jpg\" title=\"20230306_180512.jpg\"><img src=\"/user_uploads/3121/Z5pu2QlNwXr_7A3ZLJzil8vb/20230306_180512.jpg\"></a></div>",
        "id": 339935644,
        "sender_full_name": "Abu Al Hassan",
        "timestamp": 1678126005
    },
    {
        "content": "<p>okay, so you're just having trouble translating that into lean</p>",
        "id": 339935966,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1678126101
    },
    {
        "content": "<p>Yes exactly.</p>",
        "id": 339936034,
        "sender_full_name": "Abu Al Hassan",
        "timestamp": 1678126130
    },
    {
        "content": "<p>I hope my MWE is formatted right to reflect what I am trying to achieve</p>",
        "id": 339936184,
        "sender_full_name": "Abu Al Hassan",
        "timestamp": 1678126190
    },
    {
        "content": "<p>The first step in your proof uses the fact that two linear maps are equal if they evaluate to the same value on all vectors.</p>",
        "id": 339936323,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1678126218
    },
    {
        "content": "<p>You can apply <a href=\"https://leanprover-community.github.io/mathlib_docs/find/linear_map.ext\">docs#linear_map.ext</a> to do this step</p>",
        "id": 339936512,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1678126281
    },
    {
        "content": "<p>Next, you consider the case where v = 0 and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>v</mi><mo mathvariant=\"normal\">≠</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">v \\neq 0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\"><span class=\"mrel\"><span class=\"mord vbox\"><span class=\"thinbox\"><span class=\"rlap\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"inner\"><span class=\"mord\"><span class=\"mrel\"></span></span></span><span class=\"fix\"></span></span></span></span></span><span class=\"mrel\">=</span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">0</span></span></span></span> separately. Use <code>by_cases hv : v = 0</code> for this.</p>",
        "id": 339936753,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1678126346
    },
    {
        "content": "<p>So here's the start so far:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">MWE</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"n\">K'</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">ℝ</span><span class=\"o\">]</span> <span class=\"n\">fin</span> <span class=\"n\">m</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">),</span> <span class=\"bp\">‖</span><span class=\"n\">e</span><span class=\"bp\">‖</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">→</span> <span class=\"bp\">‖</span><span class=\"n\">K</span> <span class=\"n\">e</span> <span class=\"bp\">-</span> <span class=\"n\">K'</span> <span class=\"n\">e</span><span class=\"bp\">‖</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">K</span> <span class=\"bp\">=</span> <span class=\"n\">K'</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">apply</span> <span class=\"n\">linear_map.ext</span><span class=\"o\">,</span>\n  <span class=\"n\">intro</span> <span class=\"n\">v</span><span class=\"o\">,</span>\n\n  <span class=\"n\">by_cases</span> <span class=\"n\">hv</span> <span class=\"o\">:</span> <span class=\"n\">v</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"gr\">sorry</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"gr\">sorry</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 339936850,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1678126377
    },
    {
        "content": "<p>Would you like further hints, or do you want to try to fill in those two sorries yourself?</p>",
        "id": 339936953,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1678126412
    },
    {
        "content": "<p>Thank you very much, Adam, I will have a go myself first and get back to you if I get stuck.</p>",
        "id": 339937744,
        "sender_full_name": "Abu Al Hassan",
        "timestamp": 1678126649
    },
    {
        "content": "<p>Hi can I please get another hint :</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">mn</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span>\n<span class=\"n\">KK'</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">ℝ</span><span class=\"o\">]</span> <span class=\"n\">fin</span> <span class=\"n\">m</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span>\n<span class=\"n\">e</span><span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span>\n<span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">),</span> <span class=\"bp\">‖</span><span class=\"n\">e</span><span class=\"bp\">‖</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">→</span> <span class=\"bp\">‖⇑</span><span class=\"n\">K</span> <span class=\"n\">e</span> <span class=\"bp\">-</span> <span class=\"bp\">⇑</span><span class=\"n\">K'</span> <span class=\"n\">e</span><span class=\"bp\">‖</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n<span class=\"n\">v</span><span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span>\n<span class=\"n\">hv</span><span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">v</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n<span class=\"n\">v_hat</span><span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">),</span> <span class=\"n\">v</span> <span class=\"n\">i</span> <span class=\"bp\">/</span> <span class=\"bp\">‖</span><span class=\"n\">v</span><span class=\"bp\">‖</span>\n<span class=\"n\">h_decompose</span><span class=\"o\">:</span> <span class=\"n\">v</span> <span class=\"bp\">=</span> <span class=\"bp\">‖</span><span class=\"n\">v</span><span class=\"bp\">‖</span> <span class=\"bp\">•</span> <span class=\"n\">v_hat</span>\n<span class=\"bp\">⊢</span> <span class=\"bp\">‖</span><span class=\"n\">v_hat</span><span class=\"bp\">‖</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span>\n</code></pre></div>\n<p>This should follow from v_hat (we can even use h_decompose).</p>",
        "id": 339977182,
        "sender_full_name": "Abu Al Hassan",
        "timestamp": 1678140642
    },
    {
        "content": "<p>I am finding it difficult to work with v_hat in lambda form.</p>",
        "id": 339981038,
        "sender_full_name": "Abu Al Hassan",
        "timestamp": 1678142245
    },
    {
        "content": "<p>It seems like in lean you can write ‖v‖ • v but not v /  ‖v‖</p>",
        "id": 339981249,
        "sender_full_name": "Abu Al Hassan",
        "timestamp": 1678142317
    },
    {
        "content": "<p>Yes, Lean 3 does not allow heterogeneous division like that.</p>",
        "id": 339981452,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1678142400
    },
    {
        "content": "<p>But you can write <code>‖v‖⁻¹ • v</code> of course.</p>",
        "id": 339981588,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1678142439
    },
    {
        "content": "<p>Thanks, Patrick, I made that part of a hypothesis and managed to manipulate it enough to get the goal.</p>",
        "id": 339985342,
        "sender_full_name": "Abu Al Hassan",
        "timestamp": 1678144132
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"583816\">Abu Al Hassan</span> has marked this topic as resolved.</p>",
        "id": 339985351,
        "sender_full_name": "Notification Bot",
        "timestamp": 1678144135
    }
]