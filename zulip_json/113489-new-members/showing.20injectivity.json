[
    {
        "content": "<p>I have a definition of a function using the if-then-else pattern, and I want to break it up into cases based on that definition.  How can I do so?  The context is that I am trying to show a function is injective</p>",
        "id": 195609756,
        "sender_full_name": "Adeeb K",
        "timestamp": 1588099913
    },
    {
        "content": "<p>Here is all I have so far</p>",
        "id": 195609814,
        "sender_full_name": "Adeeb K",
        "timestamp": 1588099926
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n\n<span class=\"n\">def</span> <span class=\"n\">injective</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">∀</span> <span class=\"n\">x₁</span> <span class=\"n\">x₂</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x₁</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">x₂</span> <span class=\"bp\">→</span> <span class=\"n\">x₁</span> <span class=\"bp\">=</span> <span class=\"n\">x₂</span>\n\n\n<span class=\"n\">def</span> <span class=\"n\">range</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">y</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"o\">}</span>\n\n\n<span class=\"kn\">theorem</span> <span class=\"n\">comp_inj_is_inj</span>\n<span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">Z</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">Y</span> <span class=\"bp\">→</span> <span class=\"n\">Z</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">p1</span> <span class=\"o\">:</span> <span class=\"n\">injective</span> <span class=\"n\">f</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">p2</span> <span class=\"o\">:</span> <span class=\"n\">injective</span> <span class=\"n\">g</span><span class=\"o\">)</span>\n<span class=\"o\">:</span>  <span class=\"n\">injective</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"err\">∘</span> <span class=\"n\">f</span><span class=\"o\">)</span>\n<span class=\"o\">:=</span> <span class=\"k\">begin</span>\n  <span class=\"n\">introv</span> <span class=\"n\">x</span> <span class=\"n\">p3</span><span class=\"o\">,</span>\n  <span class=\"n\">change</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x₂</span><span class=\"o\">)</span> <span class=\"n\">at</span> <span class=\"n\">p3</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">p1</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">p2</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">p3</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n\n\n<span class=\"kn\">lemma</span> <span class=\"n\">succ_greater_than_nat</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">n</span> <span class=\"bp\">&gt;</span> <span class=\"n\">n</span>\n<span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ_eq_add_one</span><span class=\"o\">,</span>\n  <span class=\"n\">linarith</span>\n<span class=\"kn\">end</span>\n\n\n<span class=\"kn\">lemma</span> <span class=\"n\">pred_exists</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span><span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">exists</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">k</span> <span class=\"bp\">=</span> <span class=\"n\">n</span>\n<span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"n\">induction</span> <span class=\"n\">n</span> <span class=\"k\">with</span> <span class=\"n\">d</span> <span class=\"n\">hd</span><span class=\"o\">,</span>\n<span class=\"o\">{</span><span class=\"n\">linarith</span><span class=\"o\">,},</span>\n<span class=\"o\">{</span>\n    <span class=\"n\">existsi</span> <span class=\"n\">d</span><span class=\"o\">,</span>\n  <span class=\"n\">refl</span>\n<span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n\n\n<span class=\"c1\">-- forgot library function, lifted from square root prime code</span>\n<span class=\"c1\">-- credit to github user dm1237</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">succ_eq_add_one</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n    <span class=\"n\">exact</span> <span class=\"n\">rfl</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n\n<span class=\"c1\">-- forgot library function</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">my_le_trans</span>\n<span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"n\">k</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">p1</span><span class=\"o\">:</span> <span class=\"n\">k</span> <span class=\"bp\">&lt;</span> <span class=\"n\">m</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">p2</span><span class=\"o\">:</span> <span class=\"n\">j</span> <span class=\"bp\">≤</span> <span class=\"n\">k</span><span class=\"o\">)</span>\n<span class=\"o\">:</span> <span class=\"n\">j</span> <span class=\"bp\">&lt;</span> <span class=\"n\">m</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span>\n<span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">intros</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- try induction?</span>\n  <span class=\"n\">sorry</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n\n\n<span class=\"kn\">lemma</span> <span class=\"n\">inequality_fact</span>\n<span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">p</span><span class=\"o\">:</span> <span class=\"n\">j</span> <span class=\"bp\">&lt;</span> <span class=\"n\">m</span><span class=\"o\">)</span>\n\n<span class=\"o\">:</span> <span class=\"n\">j</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"bp\">&lt;</span> <span class=\"n\">m</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span>\n<span class=\"o\">:=</span> <span class=\"k\">begin</span>\n  <span class=\"n\">intros</span><span class=\"o\">,</span>\n  <span class=\"n\">sorry</span>\n<span class=\"kn\">end</span>\n\n<span class=\"c\">/-</span><span class=\"cm\">-</span>\n<span class=\"cm\">Type of pairs (k,p) where k</span>\n<span class=\"cm\">is a natural number and p is a witness to the proof that k &lt; n.</span>\n<span class=\"cm\">-/</span>\n<span class=\"n\">def</span> <span class=\"n\">finite_subset</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"err\">Σ&#39;</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">k</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span>\n\n<span class=\"c\">/-</span><span class=\"cm\">-</span>\n<span class=\"cm\">Every pair that lives in finite_subest m lives in finite_subset n</span>\n<span class=\"cm\">where m &lt; n</span>\n<span class=\"cm\">-/</span>\n<span class=\"n\">def</span> <span class=\"n\">lift_finite</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">finite_subset</span> <span class=\"n\">m</span> <span class=\"bp\">→</span> <span class=\"n\">finite_subset</span> <span class=\"n\">n</span>\n    <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"n\">k</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">lt</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"n\">k</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"n\">p</span><span class=\"bp\">⟩</span>\n\n\n<span class=\"c\">/-</span><span class=\"cm\">-</span>\n<span class=\"cm\">Application of lift_finite from m to m + 1</span>\n<span class=\"cm\">-/</span>\n<span class=\"n\">def</span> <span class=\"n\">lift_one</span>\n<span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span>\n<span class=\"o\">:</span> <span class=\"n\">finite_subset</span> <span class=\"n\">m</span> <span class=\"bp\">→</span> <span class=\"n\">finite_subset</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n<span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">lift_finite</span> <span class=\"n\">m</span> <span class=\"o\">(</span><span class=\"n\">m</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">succ_greater_than_nat</span> <span class=\"n\">m</span><span class=\"o\">))</span>\n\n\n\n<span class=\"kn\">lemma</span> <span class=\"n\">lift_one_fst</span> <span class=\"o\">{</span><span class=\"n\">m</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">finite_subset</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">lift_one</span> <span class=\"n\">m</span> <span class=\"n\">j</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">fst</span> <span class=\"bp\">=</span> <span class=\"n\">j</span><span class=\"bp\">.</span><span class=\"n\">fst</span>\n<span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"n\">refl</span><span class=\"o\">,</span>\n\n<span class=\"kn\">end</span>\n\n\n\n<span class=\"c\">/-</span><span class=\"cm\">-</span>\n<span class=\"cm\">The lifting function is injective</span>\n<span class=\"cm\">-/</span>\n<span class=\"kn\">theorem</span> <span class=\"n\">lift_finite_injective</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n <span class=\"n\">injective</span> <span class=\"o\">(</span><span class=\"n\">lift_finite</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"n\">p</span><span class=\"o\">)</span>\n<span class=\"o\">:=</span> <span class=\"k\">begin</span>\n\n\n<span class=\"c\">/-</span><span class=\"cm\"> pf sketch</span>\n<span class=\"cm\">--  suppose f x1 = f x2 = &lt; k, pf: k &lt; n &gt;</span>\n<span class=\"cm\">--  we know x1 = &lt; l , pf: k &lt; m &gt; and x2 = &lt; j , pf: j &lt; m &gt;</span>\n<span class=\"cm\">--  note that (f x1).1 = (f x2).1 = k</span>\n<span class=\"cm\">--  furthermore, k &lt; m &lt; n</span>\n<span class=\"cm\">--  then x1 = &lt; k, pf: k &lt; m &gt; = x2</span>\n<span class=\"cm\">--  done</span>\n<span class=\"cm\">-/</span>\n\n<span class=\"n\">introv</span> <span class=\"n\">x</span> <span class=\"n\">p2</span><span class=\"o\">,</span>\n<span class=\"n\">cases</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n<span class=\"n\">cases</span> <span class=\"n\">x₂</span><span class=\"o\">,</span>\n<span class=\"n\">cases</span> <span class=\"n\">p2</span><span class=\"o\">,</span>\n<span class=\"n\">refl</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n\n\n<span class=\"c\">/-</span><span class=\"cm\">-</span>\n<span class=\"cm\">The lifting from m to m + 1 injective</span>\n<span class=\"cm\">-/</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">lift_one_injective</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span>\n<span class=\"o\">:</span> <span class=\"n\">injective</span> <span class=\"o\">(</span><span class=\"n\">lift_one</span> <span class=\"n\">m</span><span class=\"o\">)</span>\n<span class=\"o\">:=</span> <span class=\"k\">begin</span>\n<span class=\"n\">apply</span> <span class=\"n\">lift_finite_injective</span> <span class=\"n\">m</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">succ_greater_than_nat</span> <span class=\"n\">m</span><span class=\"o\">),</span>\n<span class=\"kn\">end</span>\n\n\n\n<span class=\"kn\">lemma</span> <span class=\"n\">ext_iff</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">finite_subset</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">↔</span> <span class=\"n\">a</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">cases</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"n\">h</span><span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">cases</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">refl</span><span class=\"o\">,}</span>\n<span class=\"kn\">end</span>\n\n\n\n<span class=\"n\">def</span> <span class=\"n\">relabel</span>\n<span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">p</span><span class=\"o\">:</span> <span class=\"n\">k</span> <span class=\"bp\">&lt;</span> <span class=\"n\">m</span><span class=\"o\">)</span>\n<span class=\"o\">:</span> <span class=\"n\">finite_subset</span> <span class=\"n\">m</span> <span class=\"bp\">→</span> <span class=\"n\">finite_subset</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n<span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"k\">if</span> <span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">j</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">k</span> <span class=\"k\">then</span> <span class=\"bp\">⟨</span><span class=\"n\">j</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">my_le_trans</span> <span class=\"n\">j</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">k</span> <span class=\"n\">m</span> <span class=\"n\">p</span> <span class=\"n\">H</span> <span class=\"bp\">⟩</span> <span class=\"k\">else</span> <span class=\"bp\">⟨</span><span class=\"n\">j</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">inequality_fact</span> <span class=\"n\">j</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">m</span> <span class=\"n\">j</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"bp\">⟩</span>\n\n\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">This formalizes the notion that when f is injective and misses k</span>\n<span class=\"cm\">in the codomain then when we relabel to bring m to m - 1,</span>\n<span class=\"cm\">composition is injective</span>\n<span class=\"cm\">-/</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">relabel_with_inj_f_misses_k_is_inj</span>\n<span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">p</span><span class=\"o\">:</span> <span class=\"n\">k</span> <span class=\"bp\">&lt;</span> <span class=\"n\">m</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">f</span><span class=\"o\">:</span> <span class=\"n\">finite_subset</span> <span class=\"n\">m</span> <span class=\"bp\">→</span> <span class=\"n\">finite_subset</span> <span class=\"n\">m</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">inj</span><span class=\"o\">:</span> <span class=\"n\">injective</span> <span class=\"n\">f</span><span class=\"o\">)</span>\n<span class=\"o\">:</span> <span class=\"n\">injective</span> <span class=\"o\">((</span><span class=\"n\">relabel</span> <span class=\"n\">m</span> <span class=\"n\">k</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"err\">∘</span> <span class=\"n\">f</span><span class=\"o\">)</span>\n<span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">intros</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"n\">intros</span><span class=\"o\">,</span>\n\n  <span class=\"n\">sorry</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n\n\n<span class=\"c1\">--proof that f : [m + 2] -&gt; [m + 1] restricted</span>\n<span class=\"c1\">--to [m + 1] = {0, 1, ..., m} does not hit f(m + 1)</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">miss_proof</span>\n<span class=\"o\">{</span><span class=\"n\">m</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">finite_subset</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">finite_subset</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span>\n<span class=\"o\">(</span><span class=\"n\">inj</span> <span class=\"o\">:</span> <span class=\"n\">injective</span> <span class=\"n\">f</span><span class=\"o\">)</span>\n<span class=\"o\">{</span><span class=\"n\">pf</span><span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">&lt;</span> <span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">}</span>\n<span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">finite_subset</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"err\">∘</span> <span class=\"n\">lift_one</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"n\">j</span> <span class=\"bp\">≠</span> <span class=\"n\">f</span> <span class=\"bp\">⟨</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">,</span>  <span class=\"n\">pf</span><span class=\"bp\">⟩</span>\n<span class=\"o\">:=</span> <span class=\"k\">begin</span>\n\n<span class=\"n\">introv</span> <span class=\"n\">p</span><span class=\"o\">,</span>\n<span class=\"n\">change</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">lift_one</span> <span class=\"o\">(</span><span class=\"n\">m</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"bp\">⟨</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">,</span>  <span class=\"n\">pf</span><span class=\"bp\">⟩</span> <span class=\"n\">at</span> <span class=\"n\">p</span><span class=\"o\">,</span>\n<span class=\"k\">let</span> <span class=\"n\">p2</span> <span class=\"o\">:=</span> <span class=\"n\">inj</span> <span class=\"o\">(</span><span class=\"n\">lift_one</span> <span class=\"o\">(</span><span class=\"n\">m</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"bp\">⟨</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">,</span>  <span class=\"n\">pf</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n<span class=\"k\">let</span> <span class=\"n\">p3</span> <span class=\"o\">:=</span> <span class=\"n\">p2</span> <span class=\"n\">p</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">ext_iff</span> <span class=\"n\">at</span> <span class=\"n\">p3</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">lift_one_fst</span> <span class=\"n\">at</span> <span class=\"n\">p3</span><span class=\"o\">,</span>\n<span class=\"k\">let</span> <span class=\"n\">p4</span> <span class=\"o\">:=</span> <span class=\"n\">j</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">,</span>\n<span class=\"n\">linarith</span><span class=\"o\">,</span>\n\n<span class=\"kn\">end</span>\n\n\n\n\n<span class=\"kn\">lemma</span> <span class=\"n\">relabel_inj</span>\n<span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">p</span><span class=\"o\">:</span> <span class=\"n\">k</span> <span class=\"bp\">&lt;</span> <span class=\"n\">m</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">f</span><span class=\"o\">:</span> <span class=\"n\">finite_subset</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">finite_subset</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span>\n<span class=\"o\">(</span><span class=\"n\">inj</span><span class=\"o\">:</span> <span class=\"n\">injective</span> <span class=\"n\">f</span><span class=\"o\">)</span>\n<span class=\"o\">{</span><span class=\"n\">pf</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">miss</span><span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">finite_subset</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"err\">∘</span> <span class=\"n\">lift_one</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"n\">j</span> <span class=\"bp\">≠</span> <span class=\"bp\">⟨</span><span class=\"n\">k</span><span class=\"o\">,</span>  <span class=\"n\">pf</span><span class=\"bp\">⟩</span> <span class=\"o\">)</span>\n<span class=\"o\">:</span> <span class=\"n\">injective</span> <span class=\"o\">((</span><span class=\"n\">relabel</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">k</span> <span class=\"n\">pf</span><span class=\"o\">)</span> <span class=\"err\">∘</span> <span class=\"n\">f</span> <span class=\"err\">∘</span> <span class=\"n\">lift_one</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span>\n<span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">introv</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"n\">x₂</span><span class=\"o\">,</span>\n  <span class=\"n\">intros</span><span class=\"o\">,</span>\n  <span class=\"n\">change</span> <span class=\"o\">(</span><span class=\"n\">relabel</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">k</span> <span class=\"n\">pf</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">lift_one</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">x</span><span class=\"o\">)))</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">relabel</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">k</span> <span class=\"n\">pf</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">lift_one</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">x₂</span><span class=\"o\">)))</span> <span class=\"n\">at</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">x_l</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">lift_one</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">x</span><span class=\"o\">),</span>\n  <span class=\"k\">let</span> <span class=\"n\">y_l</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">lift_one</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">x₂</span><span class=\"o\">),</span>\n  <span class=\"n\">change</span> <span class=\"n\">relabel</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">k</span> <span class=\"n\">pf</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x_l</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">relabel</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">k</span> <span class=\"n\">pf</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">y_l</span><span class=\"o\">)</span> <span class=\"n\">at</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">r_x_l</span> <span class=\"o\">:=</span> <span class=\"n\">relabel</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">k</span> <span class=\"n\">pf</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x_l</span><span class=\"o\">),</span>\n  <span class=\"k\">let</span> <span class=\"n\">r_y_l</span> <span class=\"o\">:=</span> <span class=\"n\">relabel</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">k</span> <span class=\"n\">pf</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">y_l</span><span class=\"o\">),</span>\n  <span class=\"n\">change</span> <span class=\"n\">r_x_l</span> <span class=\"bp\">=</span> <span class=\"n\">r_y_l</span> <span class=\"n\">at</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n\n  <span class=\"n\">sorry</span><span class=\"o\">,</span>\n\n<span class=\"kn\">end</span>\n\n\n\n<span class=\"c\">/-</span><span class=\"cm\">-</span>\n<span class=\"cm\">Pigeonhole principle, induction on n</span>\n<span class=\"cm\">-/</span>\n<span class=\"kn\">theorem</span> <span class=\"n\">pigeonhole_principle</span>\n    <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">finite_subset</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">finite_subset</span> <span class=\"n\">m</span><span class=\"o\">)</span>\n<span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">&gt;</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">injective</span> <span class=\"n\">f</span><span class=\"o\">)</span>\n<span class=\"o\">:=</span> <span class=\"k\">begin</span>\n\n  <span class=\"n\">intros</span> <span class=\"n\">n_gt_m</span> <span class=\"n\">f_injective</span><span class=\"o\">,</span>\n  <span class=\"n\">induction</span> <span class=\"n\">n</span> <span class=\"k\">with</span> <span class=\"n\">d</span> <span class=\"n\">hd</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">linarith</span><span class=\"o\">,</span> <span class=\"c\">/-</span><span class=\"cm\"> case d = 0 -/</span> <span class=\"o\">},</span>\n\n\n  <span class=\"k\">let</span> <span class=\"n\">g</span> <span class=\"o\">:=</span> <span class=\"n\">f</span> <span class=\"err\">∘</span> <span class=\"o\">(</span><span class=\"n\">lift_one</span> <span class=\"n\">d</span><span class=\"o\">),</span>\n  <span class=\"k\">let</span> <span class=\"n\">hd&#39;</span> <span class=\"o\">:=</span> <span class=\"n\">hd</span> <span class=\"n\">g</span><span class=\"o\">,</span>\n\n  <span class=\"n\">rcases</span> <span class=\"n\">lt_or_eq_of_le</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">lt_succ_iff</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">n_gt_m</span><span class=\"o\">)</span> <span class=\"k\">with</span> <span class=\"n\">h</span> <span class=\"bp\">|</span> <span class=\"n\">rfl</span><span class=\"o\">,</span>\n\n  <span class=\"o\">{</span>   <span class=\"c\">/-</span><span class=\"cm\"> case where d &gt; m -/</span>\n      <span class=\"c\">/-</span><span class=\"cm\"> prove injective g -/</span>\n    <span class=\"n\">apply</span> <span class=\"n\">hd&#39;</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"k\">let</span> <span class=\"n\">g_injective</span> <span class=\"o\">:=</span> <span class=\"n\">comp_inj_is_inj</span> <span class=\"o\">(</span><span class=\"n\">lift_one</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">lift_one_injective</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"n\">f_injective</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">g_injective</span><span class=\"o\">,</span>\n  <span class=\"o\">},</span>\n\n  <span class=\"o\">{</span>   <span class=\"c\">/-</span><span class=\"cm\"> case where d = m -/</span>\n      <span class=\"c\">/-</span><span class=\"cm\"> prove f : finite_subset (nat.succ m) → finite_subset m is not injective -/</span>\n\n    <span class=\"n\">induction</span> <span class=\"n\">m</span> <span class=\"k\">with</span> <span class=\"n\">l</span> <span class=\"n\">hl</span><span class=\"o\">,</span>\n\n    <span class=\"o\">{</span>\n      <span class=\"k\">let</span> <span class=\"n\">e</span><span class=\"o\">:=</span> <span class=\"n\">f</span> <span class=\"bp\">⟨</span><span class=\"mi\">0</span><span class=\"o\">,</span><span class=\"bp\">_</span> <span class=\"bp\">⟩</span><span class=\"o\">,</span>\n      <span class=\"k\">let</span> <span class=\"n\">e2</span> <span class=\"o\">:=</span> <span class=\"n\">e</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">,</span>\n      <span class=\"n\">linarith</span><span class=\"o\">,</span>\n      <span class=\"n\">exact</span> <span class=\"n\">n_gt_m</span><span class=\"o\">,</span>\n    <span class=\"o\">},</span>\n\n\n    <span class=\"k\">let</span> <span class=\"n\">k</span> <span class=\"o\">:=</span> <span class=\"n\">f</span> <span class=\"bp\">⟨</span><span class=\"n\">l</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">succ_greater_than_nat</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"c1\">-- let k = f(l + 1)</span>\n    <span class=\"k\">let</span> <span class=\"n\">violator</span> <span class=\"o\">:=</span> <span class=\"n\">f</span> <span class=\"err\">∘</span> <span class=\"o\">(</span><span class=\"n\">lift_one</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)),</span>\n    <span class=\"k\">let</span> <span class=\"n\">restriction</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">relabel</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">k</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">k</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"err\">∘</span> <span class=\"n\">violator</span><span class=\"o\">,</span>\n    <span class=\"k\">let</span> <span class=\"n\">violator_is_inj</span> <span class=\"o\">:=</span> <span class=\"n\">comp_inj_is_inj</span> <span class=\"o\">(</span><span class=\"n\">lift_one</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">lift_one_injective</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"n\">f_injective</span><span class=\"o\">,</span>\n    <span class=\"k\">let</span> <span class=\"n\">res_is_inj</span> <span class=\"o\">:=</span> <span class=\"n\">relabel_with_inj_f_misses_k_is_inj</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">k</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">k</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"n\">violator</span> <span class=\"n\">violator_is_inj</span><span class=\"o\">,</span>\n    <span class=\"c\">/-</span><span class=\"cm\"> contradiction, since restriction: [m] →  [m - 1] is injective,</span>\n<span class=\"cm\">     but this can&#39;t be true IH</span>\n<span class=\"cm\">     -/</span>\n    <span class=\"n\">refine</span> <span class=\"n\">hl</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"o\">,</span>\n    <span class=\"o\">{</span>\n      <span class=\"n\">intros</span><span class=\"o\">,</span>\n      <span class=\"n\">linarith</span><span class=\"o\">,</span>\n    <span class=\"o\">},</span>\n    <span class=\"o\">{</span>\n      <span class=\"n\">exact</span> <span class=\"n\">restriction</span><span class=\"o\">,</span>\n    <span class=\"o\">},</span>\n    <span class=\"o\">{</span>\n      <span class=\"n\">exact</span> <span class=\"n\">succ_greater_than_nat</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n    <span class=\"o\">},</span>\n    <span class=\"o\">{</span>\n      <span class=\"n\">exact</span> <span class=\"n\">res_is_inj</span><span class=\"o\">,</span>\n    <span class=\"o\">},</span>\n\n  <span class=\"o\">}</span>\n\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 195609902,
        "sender_full_name": "Adeeb K",
        "timestamp": 1588099964
    },
    {
        "content": "<p>I am trying to prove <code>relabel_inj</code>.  It uses the definition of <code>relabel</code>.</p>",
        "id": 195609961,
        "sender_full_name": "Adeeb K",
        "timestamp": 1588100007
    },
    {
        "content": "<p>Should I cut down the size of the code block?</p>",
        "id": 195610365,
        "sender_full_name": "Adeeb K",
        "timestamp": 1588100271
    },
    {
        "content": "<p>I tried cases but that seems to come from if I do induction on k?</p>",
        "id": 195611566,
        "sender_full_name": "Adeeb K",
        "timestamp": 1588100881
    },
    {
        "content": "<p>Try the <code>split_ifs</code> tactic</p>",
        "id": 195611603,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588100887
    },
    {
        "content": "<p>so <code>split_ifs at a</code>, where <code>a : relabel (m + 1) k pf (f x_l) = relabel (m + 1) k pf (f y_l)</code>?</p>",
        "id": 195611717,
        "sender_full_name": "Adeeb K",
        "timestamp": 1588100946
    },
    {
        "content": "<p>I'm getting this error:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">no</span> <span class=\"k\">if</span><span class=\"bp\">-</span><span class=\"k\">then</span><span class=\"bp\">-</span><span class=\"k\">else</span> <span class=\"n\">expressions</span> <span class=\"n\">to</span> <span class=\"n\">split</span>\n</code></pre></div>",
        "id": 195611805,
        "sender_full_name": "Adeeb K",
        "timestamp": 1588100994
    },
    {
        "content": "<p>I think this lemma will benefit from some strategic planning and maybe writing out a proof on paper first.</p>",
        "id": 195611855,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588101004
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#split_ifs\" title=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#split_ifs\">https://leanprover-community.github.io/mathlib_docs/tactics.html#split_ifs</a></p>",
        "id": 195611867,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588101012
    },
    {
        "content": "<p>I did write out a proof on paper</p>",
        "id": 195611881,
        "sender_full_name": "Adeeb K",
        "timestamp": 1588101019
    },
    {
        "content": "<p>Okay, what did you do at this point then?</p>",
        "id": 195611899,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588101028
    },
    {
        "content": "<p>There is a better way to go about this than forging ahead with case splits here--I don't know whether it is a \"spoiler\" though.</p>",
        "id": 195612025,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588101093
    },
    {
        "content": "<p>at this point, I split the proof into two cases based on the definition of <code>relabel</code>.  Either the RHS = LHS ≤ k or RHS = LHS &gt; k</p>",
        "id": 195612028,
        "sender_full_name": "Adeeb K",
        "timestamp": 1588101094
    },
    {
        "content": "<p>then, by <code>miss_proof</code>, we know that RHS = LHS != k</p>",
        "id": 195612129,
        "sender_full_name": "Adeeb K",
        "timestamp": 1588101136
    },
    {
        "content": "<p>So you are splitting based on the <em>output</em> of <code>relabel</code>?</p>",
        "id": 195612157,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588101153
    },
    {
        "content": "<p>yes</p>",
        "id": 195612167,
        "sender_full_name": "Adeeb K",
        "timestamp": 1588101159
    },
    {
        "content": "<p>Okay, that is better than what I thought you were intending, but not what <code>split_if</code>s does.</p>",
        "id": 195612180,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588101174
    },
    {
        "content": "<p>Still, I think breaking things down into more lemmas would help.</p>",
        "id": 195612217,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588101204
    },
    {
        "content": "<p>then I should be able to conclude that either <code>f x_l = f y_l</code> or <code>(&lt; (f x_1) - 1,  (f x_1).snd  &gt;) = (&lt; (f y_1) - 1,  (f y_1).snd  &gt;)</code>, both of which would give me that <code>x = y</code> by injectivity of <code>lift_one</code> and <code>f</code></p>",
        "id": 195612360,
        "sender_full_name": "Adeeb K",
        "timestamp": 1588101270
    },
    {
        "content": "<p>I'm not sure how to split this into lemmas, or at least it isn't _immediately_ obvious to me how to do so</p>",
        "id": 195612444,
        "sender_full_name": "Adeeb K",
        "timestamp": 1588101311
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"283719\">Adeeb K</span> <a href=\"#narrow/stream/113489-new-members/topic/showing.20injectivity/near/195612129\" title=\"#narrow/stream/113489-new-members/topic/showing.20injectivity/near/195612129\">said</a>:</p>\n<blockquote>\n<p>then, by <code>miss_proof</code>, we know that RHS = LHS != k</p>\n</blockquote>\n<p>Actually, this is not true, is it?</p>",
        "id": 195612454,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588101315
    },
    {
        "content": "<p>It should be by <code>miss_proof</code> we gave earlier</p>",
        "id": 195612487,
        "sender_full_name": "Adeeb K",
        "timestamp": 1588101338
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"283719\">Adeeb K</span> <a href=\"#narrow/stream/113489-new-members/topic/showing.20injectivity/near/195612360\" title=\"#narrow/stream/113489-new-members/topic/showing.20injectivity/near/195612360\">said</a>:</p>\n<blockquote>\n<p>then I should be able to conclude that either <code>f x_l = f y_l</code> or <code>(&lt; (f x_1) - 1,  (f x_1).snd  &gt;) = (&lt; (f y_1) - 1,  (f y_1).snd  &gt;)</code>, both of which would give me that <code>x = y</code> by injectivity of <code>lift_one</code> and <code>f</code></p>\n</blockquote>\n<p>How do you know that both <code>f x_1</code> and <code>f y_1</code> fall into the same case of <code>relabel</code>?</p>",
        "id": 195612587,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588101374
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"283719\">Adeeb K</span> <a href=\"#narrow/stream/113489-new-members/topic/showing.20injectivity/near/195612487\" title=\"#narrow/stream/113489-new-members/topic/showing.20injectivity/near/195612487\">said</a>:</p>\n<blockquote>\n<p>It should be by <code>miss_proof</code> we gave earlier</p>\n</blockquote>\n<p>But this is about the input of <code>relabel</code>, not the output of <code>relabel</code>.</p>",
        "id": 195612624,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588101390
    },
    {
        "content": "<p>this whole proof to show that the composition is injective is to lead up to a contradiction in pigeonhole principle - I end up getting this whole thing is an injective function from <code>[m + 1]</code> to <code>[m]</code> which is a contradiction according to my inductive hypothesis</p>",
        "id": 195612628,
        "sender_full_name": "Adeeb K",
        "timestamp": 1588101394
    },
    {
        "content": "<p>because <code>f x_1 = f y_1</code></p>",
        "id": 195612651,
        "sender_full_name": "Adeeb K",
        "timestamp": 1588101407
    },
    {
        "content": "<p>by injectivity of <code>lift_one</code> and <code>f</code> right?</p>",
        "id": 195612713,
        "sender_full_name": "Adeeb K",
        "timestamp": 1588101434
    },
    {
        "content": "<p>Wait, that's what you're trying to prove.</p>",
        "id": 195612722,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588101439
    },
    {
        "content": "<p>right right</p>",
        "id": 195612751,
        "sender_full_name": "Adeeb K",
        "timestamp": 1588101456
    },
    {
        "content": "<p>but by the definition of relabel, they have to either be &lt;= k or &gt; k right?  You can't be &lt;= k and &gt; k at the same time</p>",
        "id": 195612851,
        "sender_full_name": "Adeeb K",
        "timestamp": 1588101494
    },
    {
        "content": "<p>How do you know, for example, that <code>relabel 100 7 _ 3</code> isn't equal to <code>relabel 100 7 _ 21</code>.</p>",
        "id": 195612856,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588101496
    },
    {
        "content": "<p>but wouldn't that imply that 2 = 20?</p>",
        "id": 195612944,
        "sender_full_name": "Adeeb K",
        "timestamp": 1588101556
    },
    {
        "content": "<p>Well, of course it's because <code>3</code> doesn't equal <code>20</code> but you have to consider this case and really use the definition of <code>relabel</code> somehow.</p>",
        "id": 195612949,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588101557
    },
    {
        "content": "<p>oh, so this means I should introduce a lemma</p>",
        "id": 195612990,
        "sender_full_name": "Adeeb K",
        "timestamp": 1588101581
    },
    {
        "content": "<p>So I think this means in your paper proof you are implicitly assuming something which is \"obvious\" about the behavior of <code>relabel</code>, and you should figure out what it is and formulate it as a lemma.</p>",
        "id": 195613107,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588101614
    },
    {
        "content": "<p>if (relabel m k p) x = (relabel m k p) y<br>\nthen x, y &lt;= k or x, y &gt; k</p>",
        "id": 195613137,
        "sender_full_name": "Adeeb K",
        "timestamp": 1588101633
    },
    {
        "content": "<p>suppose not - then WLOG there exists x, y such that x &lt;= k and y &gt; k, but then ((relabel m k p) x).1 = x - 1 &lt; k &lt;= y = ((relabel m k p) y).2</p>",
        "id": 195613326,
        "sender_full_name": "Adeeb K",
        "timestamp": 1588101737
    },
    {
        "content": "<p>contradiction, so no such pair exist?</p>",
        "id": 195613338,
        "sender_full_name": "Adeeb K",
        "timestamp": 1588101744
    },
    {
        "content": "<p>though I made a leap here</p>",
        "id": 195613382,
        "sender_full_name": "Adeeb K",
        "timestamp": 1588101778
    },
    {
        "content": "<p>I assumed then x, y &lt;= k or x, y &gt; k if and only if !(x &lt;= k and y &gt; k)</p>",
        "id": 195613436,
        "sender_full_name": "Adeeb K",
        "timestamp": 1588101812
    },
    {
        "content": "<p>This is not the correct formula for <code>relabel</code></p>",
        "id": 195613444,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588101817
    },
    {
        "content": "<p>It is a good general direction though.</p>",
        "id": 195613624,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588101916
    },
    {
        "content": "<p>what's not the correct formula?</p>",
        "id": 195613802,
        "sender_full_name": "Adeeb K",
        "timestamp": 1588102017
    },
    {
        "content": "<p>oh, the way I split it up?</p>",
        "id": 195613815,
        "sender_full_name": "Adeeb K",
        "timestamp": 1588102024
    },
    {
        "content": "<p>((relabel m k p) x).1 = x - 1 &lt; k &lt;= y = ((relabel m k p) y).2</p>",
        "id": 195613818,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588102025
    },
    {
        "content": "<p>oh right right</p>",
        "id": 195613837,
        "sender_full_name": "Adeeb K",
        "timestamp": 1588102043
    },
    {
        "content": "<p>other way around</p>",
        "id": 195613842,
        "sender_full_name": "Adeeb K",
        "timestamp": 1588102046
    },
    {
        "content": "<p>((relabel m k p) x).1 = x  &lt;= k &lt;= y = ((relabel m k p) y).2<br>\nwhich means either ((relabel m k p) x).1 &lt; ((relabel m k p) y).2, contradiction</p>",
        "id": 195613921,
        "sender_full_name": "Adeeb K",
        "timestamp": 1588102085
    },
    {
        "content": "<p>or ((relabel m k p) x).1 = ((relabel m k p) y).2 = k, contradiction by <code>miss_proof</code></p>",
        "id": 195613954,
        "sender_full_name": "Adeeb K",
        "timestamp": 1588102104
    },
    {
        "content": "<p>I wrote down the statement of the lemma:</p>",
        "id": 195614949,
        "sender_full_name": "Adeeb K",
        "timestamp": 1588102593
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"n\">relabel_behavior</span>\n<span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">p</span><span class=\"o\">:</span> <span class=\"n\">k</span> <span class=\"bp\">&lt;</span> <span class=\"n\">m</span><span class=\"o\">)</span>\n<span class=\"o\">{</span><span class=\"n\">pf</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">miss</span><span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">finite_subset</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">relabel</span> <span class=\"n\">m</span> <span class=\"n\">k</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"n\">j</span> <span class=\"bp\">≠</span> <span class=\"bp\">⟨</span><span class=\"n\">k</span><span class=\"o\">,</span>  <span class=\"n\">pf</span><span class=\"bp\">⟩</span> <span class=\"o\">)</span>\n<span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">finite_subset</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">k</span> <span class=\"bp\">∧</span> <span class=\"n\">y</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"bp\">&gt;</span> <span class=\"n\">k</span> <span class=\"bp\">∧</span> <span class=\"n\">y</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"bp\">&gt;</span> <span class=\"n\">k</span><span class=\"o\">)</span>\n<span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"n\">sorry</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 195614967,
        "sender_full_name": "Adeeb K",
        "timestamp": 1588102603
    },
    {
        "content": "<p>Not sure how to translate the proof above into lean - I imagine it would use a lot of transitivity of inequalities?</p>",
        "id": 195615034,
        "sender_full_name": "Adeeb K",
        "timestamp": 1588102644
    },
    {
        "content": "<p>Well this lemma is true but useless, because <code>miss</code> is just false.</p>",
        "id": 195615316,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588102789
    },
    {
        "content": "<p>it is?</p>",
        "id": 195615371,
        "sender_full_name": "Adeeb K",
        "timestamp": 1588102805
    },
    {
        "content": "<p>wait, how?  If I have an injective function <code>f</code> from <code>{0, 1, ..., m + 1}</code> to <code>{0, 1, ..., m }</code> (no such function exists, but this is a lemma that helps me set up the conclusion to pigeonhole by assuming such an injective function exists in the first place), and I restrict my domain to <code>{0, 1, ..., m }</code> instead, then there is no element in the domain that will equal <code>f(m + 1)</code> since <code>f</code> is injective</p>",
        "id": 195615731,
        "sender_full_name": "Adeeb K",
        "timestamp": 1588102981
    },
    {
        "content": "<p>There is no <code>f</code> in the statement of <code>relabel_behavior</code>.</p>",
        "id": 195615785,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588103008
    },
    {
        "content": "<p>oh right..</p>",
        "id": 195615819,
        "sender_full_name": "Adeeb K",
        "timestamp": 1588103028
    },
    {
        "content": "<p>But, something like it is true and useful.</p>",
        "id": 195615846,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588103042
    },
    {
        "content": "<p>I'm not sure I see it?</p>",
        "id": 195615976,
        "sender_full_name": "Adeeb K",
        "timestamp": 1588103087
    },
    {
        "content": "<p>Adeeb, it seems you should think much more seriously about the proof on paper.</p>",
        "id": 195615988,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1588103093
    },
    {
        "content": "<p>I (believe) I understand the proof, but there are a bunch of steps I think I didn't write out explicitly since they felt ''obvious''</p>",
        "id": 195616219,
        "sender_full_name": "Adeeb K",
        "timestamp": 1588103187
    },
    {
        "content": "<p>But you're here to unlearn that feeling, right?</p>",
        "id": 195616259,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1588103214
    },
    {
        "content": "<p>yes</p>",
        "id": 195616285,
        "sender_full_name": "Adeeb K",
        "timestamp": 1588103223
    },
    {
        "content": "<p>Patrick, you make it sound like The Matrix</p>",
        "id": 195616344,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588103249
    },
    {
        "content": "<p>Lean: the red pill.</p>",
        "id": 195616474,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1588103314
    },
    {
        "content": "<p>Okay, so <code>miss</code> is not true simply because if <code>k &lt; m - 1</code> then <code>k + 1 &lt; m</code>, which means that there is in fact an element for which <code>relabel m k p j = &lt;k, pf&gt;</code></p>",
        "id": 195616483,
        "sender_full_name": "Adeeb K",
        "timestamp": 1588103318
    },
    {
        "content": "<p>and I probably don't really care about <code>miss</code> in the first place</p>",
        "id": 195616655,
        "sender_full_name": "Adeeb K",
        "timestamp": 1588103405
    },
    {
        "content": "<p>what I care about is showing that either <code>x, y &lt;= k</code> or <code>x, y &gt; k</code></p>",
        "id": 195616709,
        "sender_full_name": "Adeeb K",
        "timestamp": 1588103439
    },
    {
        "content": "<p>So what I have now is:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"n\">relabel_behavior</span>\n<span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">p</span><span class=\"o\">:</span> <span class=\"n\">k</span> <span class=\"bp\">&lt;</span> <span class=\"n\">m</span><span class=\"o\">)</span>\n<span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">finite_subset</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">k</span> <span class=\"bp\">∧</span> <span class=\"n\">y</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"bp\">&gt;</span> <span class=\"n\">k</span> <span class=\"bp\">∧</span> <span class=\"n\">y</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"bp\">&gt;</span> <span class=\"n\">k</span><span class=\"o\">)</span>\n<span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"n\">sorry</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 195616854,
        "sender_full_name": "Adeeb K",
        "timestamp": 1588103509
    },
    {
        "content": "<p>is this the full 'useful' statement, or is there another detail I'm missing?</p>",
        "id": 195617005,
        "sender_full_name": "Adeeb K",
        "timestamp": 1588103545
    },
    {
        "content": "<p>wait wait wait one second</p>",
        "id": 195617038,
        "sender_full_name": "Adeeb K",
        "timestamp": 1588103558
    },
    {
        "content": "<p>sorry I meant this:</p>",
        "id": 195617124,
        "sender_full_name": "Adeeb K",
        "timestamp": 1588103595
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"n\">relabel_behavior</span>\n<span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">p</span><span class=\"o\">:</span> <span class=\"n\">k</span> <span class=\"bp\">&lt;</span> <span class=\"n\">m</span><span class=\"o\">)</span>\n<span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">finite_subset</span> <span class=\"n\">m</span><span class=\"o\">,</span>\n<span class=\"o\">(</span><span class=\"n\">relabel</span> <span class=\"n\">m</span> <span class=\"n\">k</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">relabel</span> <span class=\"n\">m</span> <span class=\"n\">k</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"n\">y</span>\n<span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">k</span> <span class=\"bp\">∧</span> <span class=\"n\">y</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"bp\">&gt;</span> <span class=\"n\">k</span> <span class=\"bp\">∧</span> <span class=\"n\">y</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"bp\">&gt;</span> <span class=\"n\">k</span><span class=\"o\">)</span>\n<span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"n\">sorry</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 195617147,
        "sender_full_name": "Adeeb K",
        "timestamp": 1588103603
    },
    {
        "content": "<p>It's getting closer but still not correct.</p>",
        "id": 195617266,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588103648
    },
    {
        "content": "<p>is there something I'm missing or am I asserting something that's too strong?</p>",
        "id": 195617350,
        "sender_full_name": "Adeeb K",
        "timestamp": 1588103691
    },
    {
        "content": "<p>Does the statement look true to you? Forget about the pigeonhole proof.</p>",
        "id": 195617599,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588103801
    },
    {
        "content": "<p>uh I think it probably doesn't match the way I have relabel defined</p>",
        "id": 195617831,
        "sender_full_name": "Adeeb K",
        "timestamp": 1588103891
    },
    {
        "content": "<p>so it would be better like this:</p>",
        "id": 195617849,
        "sender_full_name": "Adeeb K",
        "timestamp": 1588103897
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"n\">relabel_behavior</span>\n<span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">p</span><span class=\"o\">:</span> <span class=\"n\">k</span> <span class=\"bp\">&lt;</span> <span class=\"n\">m</span><span class=\"o\">)</span>\n<span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">finite_subset</span> <span class=\"n\">m</span><span class=\"o\">,</span>\n<span class=\"o\">(</span><span class=\"n\">relabel</span> <span class=\"n\">m</span> <span class=\"n\">k</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">relabel</span> <span class=\"n\">m</span> <span class=\"n\">k</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"n\">y</span>\n<span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">k</span> <span class=\"bp\">∧</span> <span class=\"n\">y</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"bp\">≥</span> <span class=\"n\">k</span> <span class=\"bp\">∧</span> <span class=\"n\">y</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"bp\">≥</span> <span class=\"n\">k</span><span class=\"o\">)</span>\n<span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"n\">sorry</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 195617934,
        "sender_full_name": "Adeeb K",
        "timestamp": 1588103929
    },
    {
        "content": "<p>is this closer?</p>",
        "id": 195618030,
        "sender_full_name": "Adeeb K",
        "timestamp": 1588103965
    },
    {
        "content": "<p>which is really 3 cases?</p>",
        "id": 195618306,
        "sender_full_name": "Adeeb K",
        "timestamp": 1588104040
    },
    {
        "content": "<p>Is there something really big and obvious that I'm missing, or is it more subtle?</p>",
        "id": 195618629,
        "sender_full_name": "Adeeb K",
        "timestamp": 1588104159
    },
    {
        "content": "<p>I think it is okay now.</p>",
        "id": 195618694,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588104195
    },
    {
        "content": "<p>alright, cool!  Then...I'm not sure how to start after maybe an <code>intros</code> or <code>introv</code></p>",
        "id": 195618863,
        "sender_full_name": "Adeeb K",
        "timestamp": 1588104250
    },
    {
        "content": "<p>I <code>introv p</code>, which gives me the following window:</p>",
        "id": 195619555,
        "sender_full_name": "Adeeb K",
        "timestamp": 1588104516
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"mi\">1</span> <span class=\"n\">goal</span>\n<span class=\"n\">m</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span>\n<span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">k</span> <span class=\"bp\">&lt;</span> <span class=\"n\">m</span><span class=\"o\">,</span>\n<span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">finite_subset</span> <span class=\"n\">m</span><span class=\"o\">,</span>\n<span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">relabel</span> <span class=\"n\">m</span> <span class=\"n\">k</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">relabel</span> <span class=\"n\">m</span> <span class=\"n\">k</span> <span class=\"n\">p</span> <span class=\"n\">y</span>\n<span class=\"err\">⊢</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"n\">fst</span> <span class=\"bp\">≤</span> <span class=\"n\">k</span> <span class=\"bp\">∧</span> <span class=\"n\">y</span><span class=\"bp\">.</span><span class=\"n\">fst</span> <span class=\"bp\">≤</span> <span class=\"n\">k</span> <span class=\"bp\">∨</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"n\">fst</span> <span class=\"bp\">≥</span> <span class=\"n\">k</span> <span class=\"bp\">∧</span> <span class=\"n\">y</span><span class=\"bp\">.</span><span class=\"n\">fst</span> <span class=\"bp\">≥</span> <span class=\"n\">k</span>\n</code></pre></div>",
        "id": 195619599,
        "sender_full_name": "Adeeb K",
        "timestamp": 1588104530
    },
    {
        "content": "<p>how can I split the goal?</p>",
        "id": 195619635,
        "sender_full_name": "Adeeb K",
        "timestamp": 1588104544
    },
    {
        "content": "<p>actually, I'm sort of lost as to how I would get cases to examine the <code>relabel m k p x</code> in the first place</p>",
        "id": 195620599,
        "sender_full_name": "Adeeb K",
        "timestamp": 1588104915
    },
    {
        "content": "<p>wait, would split_ifs help me here to split the goal or split the cases for relabel's output?</p>",
        "id": 195623473,
        "sender_full_name": "Adeeb K",
        "timestamp": 1588106194
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"283719\">Adeeb K</span> <a href=\"#narrow/stream/113489-new-members/topic/showing.20injectivity/near/195619635\" title=\"#narrow/stream/113489-new-members/topic/showing.20injectivity/near/195619635\">said</a>:</p>\n<blockquote>\n<p>how can I split the goal?</p>\n</blockquote>\n<p>Have you read <a href=\"https://leanprover.github.io/theorem_proving_in_lean/\" title=\"https://leanprover.github.io/theorem_proving_in_lean/\">Theorem Proving In Lean</a> or played the <a href=\"http://wwwf.imperial.ac.uk/~buzzard/xena/natural_number_game/\" title=\"http://wwwf.imperial.ac.uk/~buzzard/xena/natural_number_game/\">natural number game</a>? If you don't know what to do with a goal which is just logical connectives and propositions then perhaps you've bitten off more than you can chew.</p>",
        "id": 195624074,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588106532
    },
    {
        "content": "<p>Well, I don't think the NNG covers <code>if</code>, does it?</p>",
        "id": 195624350,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588106707
    },
    {
        "content": "<p>I thought the question was what to do with <code>x.fst ≤ k ∧ y.fst ≤ k ∨ x.fst ≥ k ∧ y.fst ≥ k</code>?</p>",
        "id": 195624443,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588106760
    },
    {
        "content": "<p>Well, I'm sort of asking about both.  I'm wondering how I can split up <code>relabel m k p x</code> into cases for its output</p>",
        "id": 195624586,
        "sender_full_name": "Adeeb K",
        "timestamp": 1588106821
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"283719\">@Adeeb K</span> if you read <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#split_ifs\" title=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#split_ifs\">the documentation for <code>split_ifs</code></a> you will see exactly what it does.</p>",
        "id": 195624592,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588106823
    },
    {
        "content": "<p>as for <code>x.fst ≤ k ∧ y.fst ≤ k ∨ x.fst ≥ k ∧ y.fst ≥ k</code> I'll do more of the natural number game - I think I got 3-4 worlds in my last time</p>",
        "id": 195624629,
        "sender_full_name": "Adeeb K",
        "timestamp": 1588106848
    },
    {
        "content": "<p>In particular, <code>split_ifs</code> will only work if it can see an <code>if</code></p>",
        "id": 195624659,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588106871
    },
    {
        "content": "<p>and I should be able to apply it to a statement that isn't the goal?</p>",
        "id": 195624748,
        "sender_full_name": "Adeeb K",
        "timestamp": 1588106903
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/showing.20injectivity/near/195624592\" title=\"#narrow/stream/113489-new-members/topic/showing.20injectivity/near/195624592\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"283719\">Adeeb K</span> if you read <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#split_ifs\" title=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#split_ifs\">the documentation for <code>split_ifs</code></a> you will see exactly what it does.</p>\n</blockquote>",
        "id": 195624767,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588106912
    },
    {
        "content": "<p>but I keep getting errors when I do so..</p>",
        "id": 195624830,
        "sender_full_name": "Adeeb K",
        "timestamp": 1588106946
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/showing.20injectivity/near/195624659\" title=\"#narrow/stream/113489-new-members/topic/showing.20injectivity/near/195624659\">said</a>:</p>\n<blockquote>\n<p>In particular, <code>split_ifs</code> will only work if it can see an <code>if</code></p>\n</blockquote>",
        "id": 195624874,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588106971
    },
    {
        "content": "<p>relabel is defined with an if-then-else and starts with an if.  Do you mean I have to manually put the if into my expression?</p>",
        "id": 195625125,
        "sender_full_name": "Adeeb K",
        "timestamp": 1588107084
    },
    {
        "content": "<p>Yes, it really need to be able to see an if. Can you unfold?</p>",
        "id": 195625326,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588107170
    },
    {
        "content": "<p>Some tactics work up to definitional equality, and some up to syntactic equality. In other words, some tactics will be fine if what you point them at is equal by definition to what they're expecting (e.g. <code>exact</code>) but others will only work if what you point them at is literally the string of characters they are expecting (e.g. <code>rw</code> or <code>split_ifs</code>).</p>",
        "id": 195625482,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588107244
    },
    {
        "content": "<p>I get an error for the simplify tactic failing to simplify when I <code>unfold at p2</code></p>",
        "id": 195625489,
        "sender_full_name": "Adeeb K",
        "timestamp": 1588107248
    },
    {
        "content": "<p><code>unfold at p2</code> doesn't make any sense</p>",
        "id": 195625517,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588107265
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#unfold\" title=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#unfold\">https://leanprover-community.github.io/mathlib_docs/tactics.html#unfold</a></p>",
        "id": 195625558,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588107289
    },
    {
        "content": "<p>okay, I just read through <code>unfold</code>.  I'm not sure how to use it in this case, or what my constants as arguments would be in this case.</p>",
        "id": 195625813,
        "sender_full_name": "Adeeb K",
        "timestamp": 1588107415
    },
    {
        "content": "<p>What is <code>p2</code>?</p>",
        "id": 195626028,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588107510
    },
    {
        "content": "<p><code>p2 : relabel m k p x = relabel m k p y</code></p>",
        "id": 195626073,
        "sender_full_name": "Adeeb K",
        "timestamp": 1588107528
    },
    {
        "content": "<p>Did you mean <code>unfold relabel at p2</code>?</p>",
        "id": 195626088,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588107540
    },
    {
        "content": "<p>The documentation is written in such jargon that someone who understands it would probably already know how to use <code>unfold</code>.<br>\nMore useful would be an example or links to TPIL or similar.</p>",
        "id": 195626189,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588107598
    },
    {
        "content": "<p>oh, that makes sense<br>\nsorry I wasn't seeing it earlier..</p>",
        "id": 195626296,
        "sender_full_name": "Adeeb K",
        "timestamp": 1588107644
    },
    {
        "content": "<p>Yes, the documentation is a bit crappy for unfold :-/</p>",
        "id": 195626381,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588107689
    },
    {
        "content": "<p>The core tactics were only recently documented.</p>",
        "id": 195626425,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588107710
    },
    {
        "content": "<p>[makes a note to PR better docs for <code>unfold</code>]</p>",
        "id": 195627186,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588108060
    },
    {
        "content": "<p>thanks again</p>",
        "id": 195627928,
        "sender_full_name": "Adeeb K",
        "timestamp": 1588108448
    },
    {
        "content": "<p>I'll chew on some of the cases before asking for help with the main theorem</p>",
        "id": 195627940,
        "sender_full_name": "Adeeb K",
        "timestamp": 1588108460
    },
    {
        "content": "<p>okay right now I have two cases: <code>nat.sub k 0 &lt; x.fst</code> and <code>nat.sub k 0 = x.fst</code></p>",
        "id": 195644640,
        "sender_full_name": "Adeeb K",
        "timestamp": 1588118711
    },
    {
        "content": "<p>suppose <code>p : nat.sub k 0 &lt; x.fst</code>.  Is there a tactic that lets me conclude <code>k &lt; x.fst</code>?</p>",
        "id": 195644654,
        "sender_full_name": "Adeeb K",
        "timestamp": 1588118742
    },
    {
        "content": "<p><code>rw nat.sub_zero at p</code></p>",
        "id": 195644931,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1588118931
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">rewrite</span> <span class=\"n\">tactic</span> <span class=\"n\">failed</span><span class=\"o\">,</span> <span class=\"n\">did</span> <span class=\"n\">not</span> <span class=\"n\">find</span> <span class=\"kn\">instance</span> <span class=\"n\">of</span> <span class=\"n\">the</span> <span class=\"n\">pattern</span> <span class=\"k\">in</span> <span class=\"n\">the</span> <span class=\"n\">target</span> <span class=\"n\">expression</span>\n  <span class=\"err\">?</span><span class=\"n\">m_1</span> <span class=\"bp\">-</span> <span class=\"mi\">0</span>\n</code></pre></div>",
        "id": 195645366,
        "sender_full_name": "Adeeb K",
        "timestamp": 1588119317
    },
    {
        "content": "<p><code>erw nat.sub_zero at p</code></p>",
        "id": 195645373,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1588119342
    },
    {
        "content": "<p>it still has the same error</p>",
        "id": 195645441,
        "sender_full_name": "Adeeb K",
        "timestamp": 1588119377
    },
    {
        "content": "<p><code>change k - 0 &lt; x.1 at p; rw nat.sub_zero at p</code></p>",
        "id": 195645455,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1588119401
    },
    {
        "content": "<p>actually</p>",
        "id": 195645483,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1588119466
    },
    {
        "content": "<p><code>change k &lt; x.1 at p</code></p>",
        "id": 195645484,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1588119470
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">match</span> <span class=\"n\">failed</span>\n</code></pre></div>",
        "id": 195645650,
        "sender_full_name": "Adeeb K",
        "timestamp": 1588119629
    },
    {
        "content": "<p>I have <em>no</em> idea what's going on..</p>",
        "id": 195645663,
        "sender_full_name": "Adeeb K",
        "timestamp": 1588119643
    },
    {
        "content": "<p>MWE</p>",
        "id": 195645665,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1588119644
    },
    {
        "content": "<p>sure thing</p>",
        "id": 195645671,
        "sender_full_name": "Adeeb K",
        "timestamp": 1588119651
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">inequality_fact</span>\n<span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">p</span><span class=\"o\">:</span> <span class=\"n\">j</span> <span class=\"bp\">&lt;</span> <span class=\"n\">m</span><span class=\"o\">)</span>\n\n<span class=\"o\">:</span> <span class=\"n\">j</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"bp\">&lt;</span> <span class=\"n\">m</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span>\n<span class=\"o\">:=</span> <span class=\"k\">begin</span>\n  <span class=\"n\">intros</span><span class=\"o\">,</span>\n  <span class=\"n\">sorry</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">ext_iff</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">finite_subset</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">↔</span> <span class=\"n\">a</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">cases</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"n\">h</span><span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">cases</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">refl</span><span class=\"o\">,}</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">relabel_behavior</span>\n<span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">p</span><span class=\"o\">:</span> <span class=\"n\">k</span> <span class=\"bp\">&lt;</span> <span class=\"n\">m</span><span class=\"o\">)</span>\n<span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">finite_subset</span> <span class=\"n\">m</span><span class=\"o\">,</span>\n<span class=\"o\">(</span><span class=\"n\">relabel</span> <span class=\"n\">m</span> <span class=\"n\">k</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">relabel</span> <span class=\"n\">m</span> <span class=\"n\">k</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"n\">y</span>\n<span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">k</span> <span class=\"bp\">∧</span> <span class=\"n\">y</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"bp\">≥</span> <span class=\"n\">k</span> <span class=\"bp\">∧</span> <span class=\"n\">y</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"bp\">≥</span> <span class=\"n\">k</span><span class=\"o\">)</span>\n<span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"n\">introv</span> <span class=\"n\">p2</span><span class=\"o\">,</span>\n<span class=\"n\">unfold</span> <span class=\"n\">relabel</span> <span class=\"n\">at</span> <span class=\"n\">p2</span><span class=\"o\">,</span>\n<span class=\"n\">split_ifs</span> <span class=\"n\">at</span> <span class=\"n\">p2</span><span class=\"o\">,</span>\n<span class=\"o\">{</span> <span class=\"n\">left</span><span class=\"o\">,</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">h_1</span><span class=\"o\">,</span>\n<span class=\"o\">},</span>\n\n\n<span class=\"o\">{</span>\n  <span class=\"n\">right</span><span class=\"o\">,</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n\n  <span class=\"o\">{</span>\n    <span class=\"n\">cases</span> <span class=\"n\">lt_or_eq_of_le</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span>\n      <span class=\"k\">let</span> <span class=\"n\">q</span> <span class=\"o\">:=</span> <span class=\"n\">le_of_not_ge</span> <span class=\"n\">h_1</span><span class=\"o\">,</span>\n      <span class=\"n\">cases</span> <span class=\"n\">lt_or_eq_of_le</span> <span class=\"n\">q</span><span class=\"o\">,</span>\n\n      <span class=\"o\">{</span> <span class=\"n\">exfalso</span><span class=\"o\">,</span>\n        <span class=\"k\">let</span> <span class=\"n\">h4</span> <span class=\"o\">:=</span> <span class=\"n\">inequality_fact</span> <span class=\"n\">k</span> <span class=\"n\">y</span><span class=\"bp\">.</span><span class=\"n\">fst</span> <span class=\"n\">h_3</span><span class=\"o\">,</span>\n        <span class=\"n\">rw</span> <span class=\"n\">ext_iff</span> <span class=\"n\">at</span> <span class=\"n\">p2</span><span class=\"o\">,</span>\n        <span class=\"n\">change</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"n\">fst</span> <span class=\"bp\">=</span> <span class=\"n\">y</span><span class=\"bp\">.</span><span class=\"n\">fst</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"n\">at</span> <span class=\"n\">p2</span><span class=\"o\">,</span>\n        <span class=\"k\">let</span> <span class=\"n\">p2refl</span> <span class=\"o\">:=</span> <span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"n\">p2</span><span class=\"o\">,</span>\n        <span class=\"n\">rw</span> <span class=\"n\">p2refl</span> <span class=\"n\">at</span> <span class=\"n\">h4</span><span class=\"o\">,</span>\n        <span class=\"k\">let</span> <span class=\"n\">rw_h4</span> <span class=\"o\">:=</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">le_of_pred_lt</span> <span class=\"n\">h4</span><span class=\"o\">,</span>\n        <span class=\"n\">change</span> <span class=\"n\">k</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"n\">fst</span> <span class=\"n\">at</span> <span class=\"n\">rw_h4</span><span class=\"o\">,</span>\n\n        <span class=\"n\">cases</span> <span class=\"n\">lt_or_eq_of_le</span> <span class=\"n\">rw_h4</span><span class=\"o\">,</span>\n\n        <span class=\"o\">{</span><span class=\"n\">linarith</span><span class=\"o\">,},</span>\n\n        <span class=\"o\">{},</span>\n\n\n\n        <span class=\"c1\">--change k ≤ x.fst at h4,</span>\n        <span class=\"n\">sorry</span><span class=\"o\">},</span>\n\n      <span class=\"o\">{</span>\n\n        <span class=\"n\">sorry</span><span class=\"o\">},</span>\n\n\n\n    <span class=\"o\">},</span> <span class=\"c1\">--contradiction case</span>\n\n    <span class=\"o\">{</span>\n      <span class=\"n\">exact</span> <span class=\"n\">le_of_eq</span> <span class=\"o\">(</span><span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"n\">h_2</span><span class=\"o\">),</span>\n    <span class=\"o\">},</span>\n  <span class=\"o\">},</span>\n\n  <span class=\"n\">exact</span> <span class=\"n\">le_of_not_ge</span> <span class=\"n\">h_1</span><span class=\"o\">,</span>\n<span class=\"o\">},</span>\n\n\n<span class=\"o\">{</span>\n  <span class=\"n\">right</span><span class=\"o\">,</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">le_of_not_ge</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- same proof but symmetric</span>\n  <span class=\"o\">{</span><span class=\"n\">sorry</span>\n\n\n  <span class=\"o\">},</span>\n\n<span class=\"o\">},</span>\n\n<span class=\"o\">{</span>\n  <span class=\"n\">right</span><span class=\"o\">,</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">le_of_not_ge</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">le_of_not_ge</span> <span class=\"n\">h_1</span><span class=\"o\">,</span>\n  <span class=\"o\">},</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 195645768,
        "sender_full_name": "Adeeb K",
        "timestamp": 1588119771
    },
    {
        "content": "<p>my problem is right above <code>cases lt_or_eq_of_le rw_h4,</code></p>",
        "id": 195645781,
        "sender_full_name": "Adeeb K",
        "timestamp": 1588119790
    },
    {
        "content": "<ol>\n<li><code>inequality_fact</code> is wrong (j=0, m=1)</li>\n<li><code>finite_subset</code> doesn't exist</li>\n<li><code>relabel</code> doesn't exist</li>\n</ol>",
        "id": 195645943,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1588119964
    },
    {
        "content": "<p>in the definition of <code>finite_subset</code>:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">def</span> <span class=\"n\">finite_subset</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"err\">Σ&#39;</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">k</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span>\n</code></pre></div>\n\n\n<p>there's no need to use <code>Σ'</code>: <code>Σ</code> by itself would be fine</p>",
        "id": 195646081,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1588120127
    },
    {
        "content": "<p>not there</p>",
        "id": 195646121,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588120176
    },
    {
        "content": "<p>you need <code>{k // k &lt; n}</code> there</p>",
        "id": 195646127,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588120187
    },
    {
        "content": "<p>ooh shoot lemme give the remaining code.  For <code>inequality_fact</code> I'm aware there's a small error for the 0 case, but I was going to go back and prove the fixed version after I finished the main lemma</p>",
        "id": 195646295,
        "sender_full_name": "Adeeb K",
        "timestamp": 1588120334
    },
    {
        "content": "<p>I'll paste the code here again:</p>",
        "id": 195646301,
        "sender_full_name": "Adeeb K",
        "timestamp": 1588120347
    },
    {
        "content": "<p>The correct version of <code>inequality_fact</code> is <code>nat.sub_lt_sub_right_iff</code></p>",
        "id": 195646333,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588120398
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n\n<span class=\"n\">def</span> <span class=\"n\">finite_subset</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"err\">Σ&#39;</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">k</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">inequality_fact</span>\n<span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">p</span><span class=\"o\">:</span> <span class=\"n\">j</span> <span class=\"bp\">&lt;</span> <span class=\"n\">m</span><span class=\"o\">)</span>\n<span class=\"o\">:</span> <span class=\"n\">j</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"bp\">&lt;</span> <span class=\"n\">m</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span>\n<span class=\"o\">:=</span> <span class=\"k\">begin</span>\n  <span class=\"n\">intros</span><span class=\"o\">,</span>\n  <span class=\"n\">sorry</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">ext_iff</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">finite_subset</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">↔</span> <span class=\"n\">a</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">cases</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"n\">h</span><span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">cases</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">refl</span><span class=\"o\">,}</span>\n<span class=\"kn\">end</span>\n\n\n<span class=\"n\">def</span> <span class=\"n\">relabel</span>\n<span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">p</span><span class=\"o\">:</span> <span class=\"n\">k</span> <span class=\"bp\">&lt;</span> <span class=\"n\">m</span><span class=\"o\">)</span>\n<span class=\"o\">:</span> <span class=\"n\">finite_subset</span> <span class=\"n\">m</span> <span class=\"bp\">→</span> <span class=\"n\">finite_subset</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n<span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"k\">if</span> <span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">j</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">k</span> <span class=\"k\">then</span> <span class=\"bp\">⟨</span><span class=\"n\">j</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">my_le_trans</span> <span class=\"n\">j</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">k</span> <span class=\"n\">m</span> <span class=\"n\">p</span> <span class=\"n\">H</span> <span class=\"bp\">⟩</span> <span class=\"k\">else</span> <span class=\"bp\">⟨</span><span class=\"n\">j</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">inequality_fact</span> <span class=\"n\">j</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">m</span> <span class=\"n\">j</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"bp\">⟩</span>\n\n\n\n<span class=\"kn\">lemma</span> <span class=\"n\">relabel_behavior</span>\n<span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">p</span><span class=\"o\">:</span> <span class=\"n\">k</span> <span class=\"bp\">&lt;</span> <span class=\"n\">m</span><span class=\"o\">)</span>\n<span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">finite_subset</span> <span class=\"n\">m</span><span class=\"o\">,</span>\n<span class=\"o\">(</span><span class=\"n\">relabel</span> <span class=\"n\">m</span> <span class=\"n\">k</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">relabel</span> <span class=\"n\">m</span> <span class=\"n\">k</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"n\">y</span>\n<span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">k</span> <span class=\"bp\">∧</span> <span class=\"n\">y</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"bp\">≥</span> <span class=\"n\">k</span> <span class=\"bp\">∧</span> <span class=\"n\">y</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"bp\">≥</span> <span class=\"n\">k</span><span class=\"o\">)</span>\n<span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"n\">introv</span> <span class=\"n\">p2</span><span class=\"o\">,</span>\n<span class=\"n\">unfold</span> <span class=\"n\">relabel</span> <span class=\"n\">at</span> <span class=\"n\">p2</span><span class=\"o\">,</span>\n<span class=\"n\">split_ifs</span> <span class=\"n\">at</span> <span class=\"n\">p2</span><span class=\"o\">,</span>\n<span class=\"o\">{</span> <span class=\"n\">left</span><span class=\"o\">,</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">h_1</span><span class=\"o\">,</span>\n<span class=\"o\">},</span>\n\n\n<span class=\"o\">{</span>\n  <span class=\"n\">right</span><span class=\"o\">,</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n\n  <span class=\"o\">{</span>\n    <span class=\"n\">cases</span> <span class=\"n\">lt_or_eq_of_le</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span>\n      <span class=\"k\">let</span> <span class=\"n\">q</span> <span class=\"o\">:=</span> <span class=\"n\">le_of_not_ge</span> <span class=\"n\">h_1</span><span class=\"o\">,</span>\n      <span class=\"n\">cases</span> <span class=\"n\">lt_or_eq_of_le</span> <span class=\"n\">q</span><span class=\"o\">,</span>\n\n      <span class=\"o\">{</span> <span class=\"n\">exfalso</span><span class=\"o\">,</span>\n        <span class=\"k\">let</span> <span class=\"n\">h4</span> <span class=\"o\">:=</span> <span class=\"n\">inequality_fact</span> <span class=\"n\">k</span> <span class=\"n\">y</span><span class=\"bp\">.</span><span class=\"n\">fst</span> <span class=\"n\">h_3</span><span class=\"o\">,</span>\n        <span class=\"n\">rw</span> <span class=\"n\">ext_iff</span> <span class=\"n\">at</span> <span class=\"n\">p2</span><span class=\"o\">,</span>\n        <span class=\"n\">change</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"n\">fst</span> <span class=\"bp\">=</span> <span class=\"n\">y</span><span class=\"bp\">.</span><span class=\"n\">fst</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"n\">at</span> <span class=\"n\">p2</span><span class=\"o\">,</span>\n        <span class=\"k\">let</span> <span class=\"n\">p2refl</span> <span class=\"o\">:=</span> <span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"n\">p2</span><span class=\"o\">,</span>\n        <span class=\"n\">rw</span> <span class=\"n\">p2refl</span> <span class=\"n\">at</span> <span class=\"n\">h4</span><span class=\"o\">,</span>\n        <span class=\"k\">let</span> <span class=\"n\">rw_h4</span> <span class=\"o\">:=</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">le_of_pred_lt</span> <span class=\"n\">h4</span><span class=\"o\">,</span>\n        <span class=\"n\">change</span> <span class=\"n\">k</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"n\">fst</span> <span class=\"n\">at</span> <span class=\"n\">rw_h4</span><span class=\"o\">,</span>\n\n        <span class=\"n\">cases</span> <span class=\"n\">lt_or_eq_of_le</span> <span class=\"n\">rw_h4</span><span class=\"o\">,</span>\n\n        <span class=\"o\">{</span><span class=\"n\">linarith</span><span class=\"o\">,},</span>\n\n        <span class=\"o\">{},</span>\n\n\n\n        <span class=\"c1\">--change k ≤ x.fst at h4,</span>\n        <span class=\"n\">sorry</span><span class=\"o\">},</span>\n\n      <span class=\"o\">{</span>\n\n        <span class=\"n\">sorry</span><span class=\"o\">},</span>\n\n\n\n    <span class=\"o\">},</span> <span class=\"c1\">--contradiction case</span>\n\n    <span class=\"o\">{</span>\n      <span class=\"n\">exact</span> <span class=\"n\">le_of_eq</span> <span class=\"o\">(</span><span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"n\">h_2</span><span class=\"o\">),</span>\n    <span class=\"o\">},</span>\n  <span class=\"o\">},</span>\n\n  <span class=\"n\">exact</span> <span class=\"n\">le_of_not_ge</span> <span class=\"n\">h_1</span><span class=\"o\">,</span>\n<span class=\"o\">},</span>\n\n\n<span class=\"o\">{</span>\n  <span class=\"n\">right</span><span class=\"o\">,</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">le_of_not_ge</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- same proof but symmetric</span>\n  <span class=\"o\">{</span><span class=\"n\">sorry</span>\n\n\n  <span class=\"o\">},</span>\n\n<span class=\"o\">},</span>\n\n<span class=\"o\">{</span>\n  <span class=\"n\">right</span><span class=\"o\">,</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">le_of_not_ge</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">le_of_not_ge</span> <span class=\"n\">h_1</span><span class=\"o\">,</span>\n  <span class=\"o\">},</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 195646409,
        "sender_full_name": "Adeeb K",
        "timestamp": 1588120453
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> I'll substitute that in and modify accordingly then.  Thanks!</p>",
        "id": 195646424,
        "sender_full_name": "Adeeb K",
        "timestamp": 1588120482
    },
    {
        "content": "<p>the answer to the <code>nat.sub x 0</code> is that you used <code>let</code> instead of <code>have</code>:</p>\n<div class=\"codehilite\"><pre><span></span><code>          <span class=\"k\">have</span> <span class=\"n\">rw_h4</span> <span class=\"o\">:=</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">le_of_pred_lt</span> <span class=\"n\">h4</span><span class=\"o\">,</span>\n          <span class=\"n\">change</span> <span class=\"n\">k</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">at</span> <span class=\"n\">rw_h4</span><span class=\"o\">,</span>\n</code></pre></div>",
        "id": 195646511,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1588120591
    },
    {
        "content": "<p>(also it was <code>\\le</code> not <code>&lt;</code>)</p>",
        "id": 195646515,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1588120596
    },
    {
        "content": "<p>okay!  give me a second to change it</p>",
        "id": 195646660,
        "sender_full_name": "Adeeb K",
        "timestamp": 1588120773
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">inequality_fact</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">j</span> <span class=\"bp\">&lt;</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">j</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"bp\">&lt;</span> <span class=\"n\">m</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n\n<span class=\"n\">def</span> <span class=\"n\">finite_subset</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">k</span> <span class=\"bp\">//</span> <span class=\"n\">k</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"o\">}</span>\n\n<span class=\"n\">def</span> <span class=\"n\">relabel</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">k</span> <span class=\"bp\">&lt;</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">finite_subset</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">finite_subset</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">if</span> <span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">j</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">k</span> <span class=\"k\">then</span> <span class=\"bp\">⟨</span><span class=\"n\">j</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">sorry</span><span class=\"bp\">⟩</span> <span class=\"k\">else</span> <span class=\"bp\">⟨</span><span class=\"n\">j</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">sorry</span><span class=\"bp\">⟩</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">ext_iff</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">finite_subset</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">↔</span> <span class=\"n\">a</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"n\">subtype</span><span class=\"bp\">.</span><span class=\"n\">ext</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">relabel_behavior</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">k</span> <span class=\"bp\">&lt;</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">finite_subset</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hxy</span> <span class=\"o\">:</span> <span class=\"n\">relabel</span> <span class=\"n\">m</span> <span class=\"n\">k</span> <span class=\"n\">h</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">relabel</span> <span class=\"n\">m</span> <span class=\"n\">k</span> <span class=\"n\">h</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">k</span> <span class=\"bp\">∧</span> <span class=\"n\">y</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"bp\">≥</span> <span class=\"n\">k</span> <span class=\"bp\">∧</span> <span class=\"n\">y</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"bp\">≥</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">relabel</span> <span class=\"n\">at</span> <span class=\"n\">hxy</span><span class=\"o\">,</span>\n  <span class=\"n\">split_ifs</span> <span class=\"n\">at</span> <span class=\"n\">hxy</span> <span class=\"k\">with</span> <span class=\"n\">hxk</span> <span class=\"n\">hyk</span> <span class=\"n\">hyk</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">left</span><span class=\"bp\">;</span> <span class=\"n\">split</span><span class=\"bp\">;</span> <span class=\"n\">assumption</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">right</span><span class=\"bp\">;</span> <span class=\"n\">split</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">subtype</span><span class=\"bp\">.</span><span class=\"n\">mk_eq_mk</span> <span class=\"n\">at</span> <span class=\"n\">hxy</span><span class=\"o\">,</span>\n      <span class=\"n\">cases</span> <span class=\"n\">lt_or_eq_of_le</span> <span class=\"n\">hxk</span> <span class=\"k\">with</span> <span class=\"n\">hxlk</span> <span class=\"n\">hxek</span><span class=\"o\">,</span>\n      <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">hxy</span> <span class=\"n\">at</span> <span class=\"n\">hxlk</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">absurd</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">le_of_pred_lt</span> <span class=\"n\">hxlk</span><span class=\"o\">)</span> <span class=\"n\">hyk</span> <span class=\"o\">},</span>\n      <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">ge_of_eq</span> <span class=\"n\">hxek</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">le_of_not_ge</span> <span class=\"n\">hyk</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">right</span><span class=\"bp\">;</span> <span class=\"n\">split</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">le_of_not_ge</span> <span class=\"n\">hxk</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">subtype</span><span class=\"bp\">.</span><span class=\"n\">mk_eq_mk</span> <span class=\"n\">at</span> <span class=\"n\">hxy</span><span class=\"o\">,</span>\n      <span class=\"n\">cases</span> <span class=\"n\">lt_or_eq_of_le</span> <span class=\"n\">hyk</span> <span class=\"k\">with</span> <span class=\"n\">hylk</span> <span class=\"n\">hyek</span><span class=\"o\">,</span>\n      <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"err\">←</span> <span class=\"n\">hxy</span> <span class=\"n\">at</span> <span class=\"n\">hylk</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">absurd</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">le_of_pred_lt</span> <span class=\"n\">hylk</span><span class=\"o\">)</span> <span class=\"n\">hxk</span> <span class=\"o\">},</span>\n      <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">ge_of_eq</span> <span class=\"n\">hyek</span> <span class=\"o\">}</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">right</span><span class=\"bp\">;</span> <span class=\"n\">split</span><span class=\"bp\">;</span> <span class=\"n\">apply</span> <span class=\"n\">le_of_not_ge</span><span class=\"bp\">;</span> <span class=\"n\">assumption</span> <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 195646954,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1588121082
    },
    {
        "content": "<p>here's your MWE mathlib-stylized</p>",
        "id": 195646960,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1588121096
    },
    {
        "content": "<p>oh damn.  Thank you so much!</p>",
        "id": 195647258,
        "sender_full_name": "Adeeb K",
        "timestamp": 1588121294
    },
    {
        "content": "<p>wait</p>",
        "id": 195649122,
        "sender_full_name": "Adeeb K",
        "timestamp": 1588122722
    },
    {
        "content": "<p>so changing the definition of <code>finite_subset</code> introduced a few errors into my existing code.  Can I give you a snippet of the stuff that has errors?</p>",
        "id": 195649177,
        "sender_full_name": "Adeeb K",
        "timestamp": 1588122758
    },
    {
        "content": "<p>change <code>x.fst</code> to <code>x.1</code></p>",
        "id": 195649187,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1588122772
    },
    {
        "content": "<p>the errors don't pertain to that, at least not as far as I can tell?</p>",
        "id": 195649229,
        "sender_full_name": "Adeeb K",
        "timestamp": 1588122797
    },
    {
        "content": "<p>Here, lemme get an example</p>",
        "id": 195649249,
        "sender_full_name": "Adeeb K",
        "timestamp": 1588122829
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"n\">def</span> <span class=\"n\">injective</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">∀</span> <span class=\"n\">x₁</span> <span class=\"n\">x₂</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x₁</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">x₂</span> <span class=\"bp\">→</span> <span class=\"n\">x₁</span> <span class=\"bp\">=</span> <span class=\"n\">x₂</span>\n\n<span class=\"n\">def</span> <span class=\"n\">finite_subset</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">k</span> <span class=\"bp\">//</span> <span class=\"n\">k</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"o\">}</span>\n\n<span class=\"n\">def</span> <span class=\"n\">lift_finite</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">finite_subset</span> <span class=\"n\">m</span> <span class=\"bp\">→</span> <span class=\"n\">finite_subset</span> <span class=\"n\">n</span>\n    <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"n\">k</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">lt</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"n\">k</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"n\">p</span><span class=\"bp\">⟩</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">lift_finite_injective</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n <span class=\"n\">injective</span> <span class=\"o\">(</span><span class=\"n\">lift_finite</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"n\">p</span><span class=\"o\">)</span>\n<span class=\"o\">:=</span> <span class=\"k\">begin</span>\n<span class=\"n\">introv</span> <span class=\"n\">x</span> <span class=\"n\">p2</span><span class=\"o\">,</span>\n<span class=\"n\">cases</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n<span class=\"n\">cases</span> <span class=\"n\">x₂</span><span class=\"o\">,</span>\n<span class=\"n\">cases</span> <span class=\"n\">p2</span><span class=\"o\">,</span>\n<span class=\"n\">refl</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 195649489,
        "sender_full_name": "Adeeb K",
        "timestamp": 1588123067
    },
    {
        "content": "<p>here there is an error at <code>cases p2,</code></p>",
        "id": 195649494,
        "sender_full_name": "Adeeb K",
        "timestamp": 1588123080
    },
    {
        "content": "<p>the error is: <code>cases tactic failed, unexpected failure when introducing auxiliary equatilies</code></p>",
        "id": 195649560,
        "sender_full_name": "Adeeb K",
        "timestamp": 1588123115
    },
    {
        "content": "<p>I wonder why it ever worked.</p>",
        "id": 195649696,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588123225
    },
    {
        "content": "<p>Anyways, I wouldn't recommend changing your definitions in the middle of working on a huge proof...</p>",
        "id": 195649705,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588123236
    },
    {
        "content": "<p>hmm I wonder why it doesn't work in this case</p>",
        "id": 195649718,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1588123258
    },
    {
        "content": "<p>it seems only this proof was affected.  Luckily, no other proofs were affected ( as far as I can tell based on a glance at the errors)</p>",
        "id": 195649912,
        "sender_full_name": "Adeeb K",
        "timestamp": 1588123487
    },
    {
        "content": "<p>By the way, where did you learn <code>introv</code>? I've never seen anyone else use it.</p>",
        "id": 195649917,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588123499
    },
    {
        "content": "<p>I was browsing the mathlib section looking at <code>intro</code> and <code>intros</code>.  This tactic appeared right after those, so I checked it out.</p>",
        "id": 195649978,
        "sender_full_name": "Adeeb K",
        "timestamp": 1588123565
    },
    {
        "content": "<p>I'm not sure how to fix <code>lift_finite_injective</code></p>",
        "id": 195650561,
        "sender_full_name": "Adeeb K",
        "timestamp": 1588124400
    },
    {
        "content": "<p>Use Kevin's helpful <code>ext_iff</code> lemma.</p>",
        "id": 195650665,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588124504
    },
    {
        "content": "<p>This is its time to shine.</p>",
        "id": 195650672,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588124516
    },
    {
        "content": "<p>okay, I'll try it</p>",
        "id": 195651236,
        "sender_full_name": "Adeeb K",
        "timestamp": 1588125107
    },
    {
        "content": "<p>okay, it did the trick</p>",
        "id": 195652219,
        "sender_full_name": "Adeeb K",
        "timestamp": 1588126006
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">theorem</span> <span class=\"n\">lift_finite_injective</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n <span class=\"n\">injective</span> <span class=\"o\">(</span><span class=\"n\">lift_finite</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"n\">p</span><span class=\"o\">)</span>\n<span class=\"o\">:=</span> <span class=\"k\">begin</span>\n<span class=\"n\">introv</span> <span class=\"n\">x</span> <span class=\"n\">p2</span><span class=\"o\">,</span>\n<span class=\"n\">cases</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n<span class=\"n\">cases</span> <span class=\"n\">x₂</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">ext_iff</span> <span class=\"n\">at</span> <span class=\"n\">p2</span><span class=\"o\">,</span>\n<span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">ext_iff</span> <span class=\"n\">m</span> <span class=\"bp\">⟨</span><span class=\"n\">x_val</span><span class=\"o\">,</span> <span class=\"n\">x_property</span><span class=\"bp\">⟩</span> <span class=\"bp\">⟨</span><span class=\"n\">x₂_val</span><span class=\"o\">,</span> <span class=\"n\">x₂_property</span><span class=\"bp\">⟩</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mpr</span> <span class=\"n\">p2</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 195652252,
        "sender_full_name": "Adeeb K",
        "timestamp": 1588126025
    },
    {
        "content": "<p>Okay. May I suggest:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">theorem</span> <span class=\"n\">lift_finite_injective</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n <span class=\"n\">injective</span> <span class=\"o\">(</span><span class=\"n\">lift_finite</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">intros</span> <span class=\"n\">x₁</span> <span class=\"n\">x₂</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">ext_iff</span> <span class=\"n\">at</span> <span class=\"err\">⊢</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">h</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 195652464,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588126268
    },
    {
        "content": "<p>lemme try that</p>",
        "id": 195652492,
        "sender_full_name": "Adeeb K",
        "timestamp": 1588126322
    },
    {
        "content": "<p>it works!</p>",
        "id": 195652518,
        "sender_full_name": "Adeeb K",
        "timestamp": 1588126341
    },
    {
        "content": "<p>thank you!  I'll examine the differences at these two approaches later tonight</p>",
        "id": 195652524,
        "sender_full_name": "Adeeb K",
        "timestamp": 1588126364
    },
    {
        "content": "<p>Right now, my plan is this:</p>",
        "id": 195652531,
        "sender_full_name": "Adeeb K",
        "timestamp": 1588126380
    },
    {
        "content": "<p>from <code>relabel_behavior</code>, I know that <code>relabel m k p f (x_l) = relabel m k p f (y_l)</code> implies  <code>f (x_1) &lt;= k</code> and <code>f (y_1) &lt;= k</code>, or <code>f (x_1) &gt;= k</code> and <code>f (y_1) &gt;= k</code></p>",
        "id": 195652672,
        "sender_full_name": "Adeeb K",
        "timestamp": 1588126608
    },
    {
        "content": "<p>I want to make a lemma where <code>z &lt;= k</code> implies <code>(relabel m k p) z = &lt; z, z &lt; m&gt;</code></p>",
        "id": 195652685,
        "sender_full_name": "Adeeb K",
        "timestamp": 1588126680
    },
    {
        "content": "<p>and another where <code>z &gt;= k</code> implies <code>(relabel m k p) z = &lt; z - 1, z - 1 &lt; m &gt;</code></p>",
        "id": 195652732,
        "sender_full_name": "Adeeb K",
        "timestamp": 1588126712
    },
    {
        "content": "<p>this shouldn't be too hard based on the definition of <code>relabel</code>, right?</p>",
        "id": 195652738,
        "sender_full_name": "Adeeb K",
        "timestamp": 1588126725
    },
    {
        "content": "<p>actually...I'm not sure how to start</p>",
        "id": 195653280,
        "sender_full_name": "Adeeb K",
        "timestamp": 1588127515
    },
    {
        "content": "<p>to repeat the latest from the noob questions thread</p>",
        "id": 195673775,
        "sender_full_name": "Adeeb K",
        "timestamp": 1588147391
    },
    {
        "content": "<p>I see. I'm getting an error from the following:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">let</span> <span class=\"n\">h1_strict</span> <span class=\"o\">:=</span> <span class=\"n\">lt_of_le_of_ne</span> <span class=\"n\">h1</span> <span class=\"n\">m_x</span><span class=\"o\">,</span>\n</code></pre></div>\n\n\n<p>which is giving me the error:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">type</span> <span class=\"n\">mismatch</span> <span class=\"n\">at</span> <span class=\"n\">application</span>\n  <span class=\"n\">lt_of_le_of_ne</span> <span class=\"n\">h1</span> <span class=\"n\">m_x</span>\n<span class=\"n\">term</span>\n  <span class=\"n\">m_x</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"bp\">¬</span><span class=\"o\">((</span><span class=\"n\">f</span> <span class=\"err\">∘</span> <span class=\"n\">lift_one</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">⟨</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">_⟩</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">val</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">⟨</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">_⟩</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"bp\">≠</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">lift_one</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">x</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">val</span>\n</code></pre></div>",
        "id": 195673806,
        "sender_full_name": "Adeeb K",
        "timestamp": 1588147420
    },
    {
        "content": "<p>read the error</p>",
        "id": 195673870,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1588147451
    }
]