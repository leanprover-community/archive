[
    {
        "content": "<p>Hi, I am trying to prove prop 1.2 (see below). In the statement of the proposition I get an error (attached) when trying to call  dist_to_set. Does anyone have any ideas?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Topology.MetricSpace.Basic</span>\n\n\n<span class=\"kd\">def</span> <span class=\"n\">dist_to_set</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">MetricSpace</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">Set</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span> <span class=\"n\">Inf.inf</span> <span class=\"o\">{</span><span class=\"n\">dist</span> <span class=\"n\">x</span> <span class=\"n\">a</span> <span class=\"bp\">|</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">A</span><span class=\"o\">}</span>\n\n<span class=\"c\">/-</span>\n<span class=\"cm\">Proof of Proposition 1.2</span>\n<span class=\"cm\">Let (X,d) be a metric space, let x ∈ X, y ∈ X and A ⊂ X, with A non-empty. Then</span>\n<span class=\"cm\">      |d(x,A)-d(y,A)| ≤ d(x,y).</span>\n<span class=\"cm\">-/</span>\n\n\n<span class=\"kd\">theorem</span> <span class=\"n\">prop1_2</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">MetricSpace</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">A_subset</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">⊂</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h_A_nonempty</span> <span class=\"o\">:</span> <span class=\"n\">A.Nonempty</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">abs</span> <span class=\"o\">(</span><span class=\"n\">dist_to_set</span> <span class=\"n\">x</span> <span class=\"n\">A</span> <span class=\"bp\">-</span> <span class=\"n\">dist_to_set</span> <span class=\"n\">y</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"n\">dist</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span>\n  <span class=\"c1\">-- Let x ∈ X, y ∈ X and A ⊂ X, with A non-empty. Then</span>\n  <span class=\"c1\">-- |d(x,A)-d(y,A)| ≤ d(x,y).</span>\n  <span class=\"c1\">-- Let a ∈ A be arbitrary</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"o\">}</span>\n</code></pre></div>\n<p><a href=\"/user_uploads/3121/mm8dp0VcgtoCNkvJE8uLO3FC/Screenshot-2023-10-24-at-19.40.56.png\">Screenshot-2023-10-24-at-19.40.56.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/mm8dp0VcgtoCNkvJE8uLO3FC/Screenshot-2023-10-24-at-19.40.56.png\" title=\"Screenshot-2023-10-24-at-19.40.56.png\"><img src=\"/user_uploads/3121/mm8dp0VcgtoCNkvJE8uLO3FC/Screenshot-2023-10-24-at-19.40.56.png\"></a></div>",
        "id": 398343394,
        "sender_full_name": "Joseph Muldoon",
        "timestamp": 1698173337
    },
    {
        "content": "<p>The error message is telling you what is wrong.</p>",
        "id": 398343711,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1698173521
    },
    {
        "content": "<p>You gave <code>x</code> which has type <code>X</code> where you promised Lean you would give something with type <code>Type</code>.</p>",
        "id": 398343817,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1698173556
    },
    {
        "content": "<p>Presumably you intended the first argument of <code>dist_to_set</code> to be implicit.</p>",
        "id": 398343888,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1698173594
    },
    {
        "content": "<p>I edited the definition of dist_to_set and still get the same error. I'm not sure how to rewrite it so that it takes the values I want.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">dist_to_set</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">MetricSpace</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">Set</span> <span class=\"n\">X</span> <span class=\"bp\">→</span>  <span class=\"n\">Set</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">Set</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">A</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Inf.inf</span> <span class=\"o\">{</span><span class=\"n\">dist</span> <span class=\"n\">x</span> <span class=\"n\">a</span> <span class=\"bp\">|</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">A</span><span class=\"o\">}</span>\n</code></pre></div>",
        "id": 398345420,
        "sender_full_name": "Joseph Muldoon",
        "timestamp": 1698174274
    },
    {
        "content": "<p>You didn't touch the first argument, which is the one Lean complained about.</p>",
        "id": 398345548,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1698174348
    },
    {
        "content": "<p>Your edit does almost nothing, the only difference is that you tell Lean to name more arguments itself.</p>",
        "id": 398345671,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1698174403
    },
    {
        "content": "<p>To be more explicit, you need to replace <code>(X : Type)</code> by <code>{X : Type}</code>.</p>",
        "id": 398345730,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1698174441
    },
    {
        "content": "<p>And now I'm looking at the body of the definition instead of only the error message and the argument mentioned by the error message, and I see it doesn't make sense.</p>",
        "id": 398346019,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1698174585
    },
    {
        "content": "<p>Why do you want the body to have type <code>Set ℝ → Set ℝ</code> instead of <code>ℝ</code>?</p>",
        "id": 398346184,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1698174665
    },
    {
        "content": "<p>And in the statement of <code>prop1_2</code>, what is <code>B</code> which does not appear at all in your informal statement?</p>",
        "id": 398346314,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1698174725
    },
    {
        "content": "<p>I was getting errors that told me it expected <code>Set ℝ → Set ℝ </code>. I realise now I don't understand the basics here - e.g. brackets.</p>\n<p>I wanted to have a hypothesis that <code>A  \\subset  X </code> but it was telling me that  <code>X </code>was the wrong type, probably another bracketing/ basic issue, so I added <code>B</code> as a temporary fix.</p>",
        "id": 398346978,
        "sender_full_name": "Joseph Muldoon",
        "timestamp": 1698175063
    },
    {
        "content": "<p>If you write <code>(A : Set X)</code>, then <code>A</code> already is a \"subset\" of <code>X</code> in the informal sense</p>",
        "id": 398347447,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1698175305
    },
    {
        "content": "<p>Unless you mean \"strict subset\"</p>",
        "id": 398347466,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1698175316
    },
    {
        "content": "<p>Joseph, I think you have been too ambitious. You cannot expect to be able to define stuff and state theorems before learning more about the basics of Lean. Proving elementary things that are already stated correctly is easier than definitions and statements.</p>",
        "id": 398348085,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1698175577
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"643984\">Joseph Muldoon</span> has marked this topic as resolved.</p>",
        "id": 398349231,
        "sender_full_name": "Notification Bot",
        "timestamp": 1698176122
    }
]