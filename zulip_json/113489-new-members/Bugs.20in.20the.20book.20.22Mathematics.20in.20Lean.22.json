[
    {
        "content": "<p>Two \"bugs\" in the book (sorry for not opening a pull request, I didn't look at how to do this yet):</p>\n<ol>\n<li>In the 4th line of the calc of the proof of cauchySeq_of_le_geometric_two' in the file S02_Metric_Spaces.lean, the (1 / 2) ^ i seems to evaluate to 0 due to the use of integer division; I propose specifying the type as ℝ.</li>\n<li>In the example starting at line 392 of the file S03_Topological_Spaces.lean, I propose replacing the assumption RegularSpace by T3Space, as otherwise you cannot use the results on Hausdorff spaces proposed in the book.<br>\nPS: If there are some rules about how to post in the Lean Zulip etc., please tell me.</li>\n</ol>",
        "id": 391867292,
        "sender_full_name": "Sven Manthe",
        "timestamp": 1695115143
    },
    {
        "content": "<ol>\n<li>is due to the elaboration issue for <code>^</code>.</li>\n</ol>",
        "id": 391867400,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1695115186
    },
    {
        "content": "<p>I don't think I follow. I was also quite confused about the following example, obtained by minimizing the above:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n<span class=\"kn\">open</span> <span class=\"n\">BigOperators</span>\n<span class=\"k\">#check</span> <span class=\"o\">((</span><span class=\"bp\">∑</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"n\">Finset.range</span> <span class=\"mi\">7</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"mi\">7</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"o\">)</span>\n<span class=\"k\">#check</span> <span class=\"o\">((</span><span class=\"bp\">∑</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"n\">Finset.range</span> <span class=\"mi\">7</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"mi\">7</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"o\">)</span>\n<span class=\"k\">#check</span> <span class=\"o\">((</span><span class=\"bp\">∑</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"n\">Finset.range</span> <span class=\"mi\">7</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"mi\">7</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">3</span><span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">)</span>\n<span class=\"k\">#check</span> <span class=\"o\">((</span><span class=\"bp\">∑</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"n\">Finset.range</span> <span class=\"mi\">7</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"mi\">7</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"o\">:</span><span class=\"n\">ℕ</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">3</span><span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">)</span>\n<span class=\"k\">#check</span> <span class=\"o\">((</span><span class=\"bp\">∑</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"n\">Finset.range</span> <span class=\"mi\">7</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"mi\">7</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">3</span><span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">)</span>\n</code></pre></div>\n<p>In lines 3,4 the 1/7 is interpreted as a natural, in 1,2,5 as a real.</p>",
        "id": 391868471,
        "sender_full_name": "Sven Manthe",
        "timestamp": 1695115545
    },
    {
        "content": "<p>(<span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span> This seems to be a mistake in the exercise, not the <code>^</code> issue)</p>\n<p><span class=\"user-mention\" data-user-id=\"651332\">@Sven Manthe</span> I think you're right, there appear to be missing <code>ℝ</code> ascriptions. (I'm sitting near <span class=\"user-mention\" data-user-id=\"110865\">@Jeremy Avigad</span> right now, but here's a ping <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span>)</p>",
        "id": 391869043,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1695115714
    },
    {
        "content": "<p>Yes, I'm quite sure that there is an error in the proof skeleton of the exercise (after all, my elaborator interprets 1/2 as natural). However, I'm also a bit confused about how the typing/coercing works in this situation (more precisely, I'd have expected a different behavior then in my example above) and would like to understand it if there is an easy explanation</p>",
        "id": 391869924,
        "sender_full_name": "Sven Manthe",
        "timestamp": 1695115997
    },
    {
        "content": "<p>The Lean 4 algorithm for figuring out whether you're a natural or a real is far more arcane than the Lean 3 version and I'm still not sure I understand it. But my understanding of it is that now, in contrast to Lean 3, Lean 4 attempts to assign a type to both sides of an <code>=</code> indepedently, so forcing the RHS to be a real as you do in the last three examples may not have the effect you expect on the LHS. In the third and 4th example, Lean guesses it's a nat because the exponent is a nat. In the 5th example the conclusion is \"I don't know yet, let's look at the RHS\".</p>",
        "id": 391870084,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1695116047
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"651332\">@Sven Manthe</span> Here are some observations:</p>\n<ol>\n<li>In an equality, the sides don't communicate about what types they are until the very end. This means that if one side can be interpreted as a Nat, it will be interpreted as a nat. At the end, if it needs to have been a real, then the whole value is coerced.</li>\n<li>All the basic arithmetic operations are able to work together to figure out what type each of the constituent terms are supposed to be. There's an algorithm that tries to compute one type everything has to be coerced to, and each term is individually coerced.</li>\n<li>Not every operation is able to participate in this algorithm. For example, <code>∑</code> doesn't and isn't able to, but it should still be able to pick up on the expected type when elaborating the inside.</li>\n</ol>",
        "id": 391871746,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1695116477
    },
    {
        "content": "<p>I didn't test it, but this might (almost) give you what you want:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"bp\">∑</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"n\">Finset.range</span> <span class=\"mi\">7</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"mi\">7</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">3</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 391871900,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1695116520
    },
    {
        "content": "<p>You'll run into the thing Yaël mentioned earlier though, where <code>^</code> makes sure the exponent has the same type too if possible. This ideally would fix that, though I'm not sure it does:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"bp\">∑</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"n\">Finset.range</span> <span class=\"mi\">7</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"mi\">7</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">3</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 391872173,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1695116581
    },
    {
        "content": "<p>Re 1. <span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span> isn't the 5th example a counterexample to your claim? The LHS <em>could</em> be a nat but ends up being a real.</p>",
        "id": 391873117,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1695116803
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> You're right, I'm not able to count and I didn't test things, so these last two messages aren't illustrative of anything.</p>",
        "id": 391874721,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1695117153
    },
    {
        "content": "<p>I guess this was supposed to be an example of it inferring as Real without the LHS ascription. This makes sense because Lean doesn't commit to the numerals <code>(1 / 7) ^ 2</code> being in any particular type until the very end, and by that point the type from the RHS propagates to the LHS, and then they become Real with a Real <code>^</code>.</p>",
        "id": 391874912,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1695117219
    },
    {
        "content": "<p>In <code>(1 / 7) ^ (2:ℕ)</code> and <code>(1 / 7) ^ i</code>, it's able to see that <code>2</code> and <code>i</code> are nats, and the arithmetic operation elaborator propagates this type to each of the parts of the expression, which makes <code>1</code> and <code>7</code> be nats, with <code>/</code> and <code>^</code> being the nat operations.</p>",
        "id": 391875305,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1695117326
    },
    {
        "content": "<p>Okay, it seems to be more complicated than I expected (I guess, naively I expected that type checking would proceed only \"from the outside to the inside\" or only \"from the inside to the outside\", realized soon that the second one isn't the case, but the above examples show that the first one also isn't). So probably my \"if there is an easy explanation\" fails, and I won't try to understand the details of the typing algorithm now (and fixing these problems by specifying types seems to be almost always easy). Thank you all for your help</p>",
        "id": 391898453,
        "sender_full_name": "Sven Manthe",
        "timestamp": 1695125371
    },
    {
        "content": "<p>Thanks for the heads up. <span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> and I will fix it!</p>",
        "id": 391901824,
        "sender_full_name": "Jeremy Avigad",
        "timestamp": 1695126582
    },
    {
        "content": "<p>Thanks Sven. I'm sorry about those issues. Very weirdly they were fixed in the solutions but not in the exercises. They should now be fixed everywhere.</p>",
        "id": 391910176,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1695129331
    },
    {
        "content": "<p>Be careful if you update the repository to not overwrite your files (you were told in <a href=\"https://leanprover-community.github.io/mathematics_in_lean/C01_Introduction.html#getting-started\">https://leanprover-community.github.io/mathematics_in_lean/C01_Introduction.html#getting-started</a> to make a copy of the MIL folder in order to avoid that risk).</p>",
        "id": 391910520,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1695129419
    }
]