[
    {
        "content": "<p>(sorry for japanese comment)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n\n<span class=\"kd\">universe</span> <span class=\"n\">u</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">List</span>\n\n<span class=\"c1\">-- `α` は線形順序を持つ</span>\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">LinearOrder</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n\n<span class=\"sd\">/--</span>\n<span class=\"sd\">  選択ソート.</span>\n<span class=\"sd\">  `List.` を名前に付けることにより，リスト `l` に対して `l.selection_sort` で実行できるようになる</span>\n<span class=\"sd\">-/</span>\n<span class=\"kd\">def</span> <span class=\"n\">List.selection_sort</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n  <span class=\"k\">if</span> <span class=\"n\">hl</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">l.length</span> <span class=\"k\">then</span>\n    <span class=\"k\">let</span> <span class=\"n\">μ</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">minimum_of_length_pos</span> <span class=\"n\">hl</span>\n\n    <span class=\"c1\">-- `μ` はリストの要素</span>\n    <span class=\"k\">have</span> <span class=\"n\">mem</span> <span class=\"o\">:</span> <span class=\"n\">μ</span> <span class=\"bp\">∈</span> <span class=\"n\">l</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n      <span class=\"n\">refine</span> <span class=\"n\">minimum_mem</span> <span class=\"bp\">?</span><span class=\"n\">_</span>\n      <span class=\"n\">simp</span><span class=\"bp\">?</span> <span class=\"n\">says</span>\n        <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">coe_minimum_of_length_pos</span><span class=\"o\">]</span>\n\n    <span class=\"k\">let</span> <span class=\"n\">rest</span> <span class=\"o\">:=</span> <span class=\"n\">l.erase</span> <span class=\"n\">μ</span>\n\n    <span class=\"c1\">-- 停止性を示すための補題</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">l.length</span> <span class=\"bp\">&gt;</span> <span class=\"n\">rest.length</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n      <span class=\"k\">calc</span> <span class=\"n\">l.length</span>\n        <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"n\">rest.length</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">length_erase_add_one</span> <span class=\"n\">mem</span><span class=\"o\">]</span>\n        <span class=\"n\">_</span> <span class=\"bp\">&gt;</span> <span class=\"n\">rest.length</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">linarith</span>\n\n    <span class=\"n\">μ</span> <span class=\"o\">::</span> <span class=\"o\">(</span><span class=\"n\">selection_sort</span> <span class=\"n\">rest</span><span class=\"o\">)</span>\n  <span class=\"k\">else</span>\n    <span class=\"o\">[]</span>\n  <span class=\"n\">termination_by</span> <span class=\"n\">_</span> <span class=\"n\">l</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">l.length</span>\n\n<span class=\"c1\">-- テスト</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">[</span><span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">4</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">5</span><span class=\"o\">,</span> <span class=\"mi\">9</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">]</span><span class=\"bp\">.</span><span class=\"n\">selection_sort</span> <span class=\"bp\">=</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"mi\">4</span><span class=\"o\">,</span> <span class=\"mi\">5</span><span class=\"o\">,</span> <span class=\"mi\">9</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">l</span> <span class=\"bp\">~</span> <span class=\"n\">selection_sort</span> <span class=\"n\">l</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"c1\">-- リストの長さに対する帰納法を使う</span>\n  <span class=\"n\">induction'</span> <span class=\"n\">ih</span> <span class=\"o\">:</span> <span class=\"n\">l.length</span> <span class=\"n\">generalizing</span> <span class=\"n\">l</span>\n\n  <span class=\"c1\">-- リストの長さが 0 のとき</span>\n  <span class=\"n\">case</span> <span class=\"n\">zero</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">replace</span> <span class=\"n\">ih</span> <span class=\"o\">:</span> <span class=\"n\">l.length</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">ih</span>\n    <span class=\"k\">have</span> <span class=\"n\">hl</span> <span class=\"o\">:</span> <span class=\"n\">l</span> <span class=\"bp\">=</span> <span class=\"o\">[]</span> <span class=\"o\">:=</span> <span class=\"n\">length_eq_zero.mp</span> <span class=\"n\">ih</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">hl</span><span class=\"o\">]</span>\n\n    <span class=\"c1\">-- `selection_sort l = []` を示せば十分</span>\n    <span class=\"k\">suffices</span> <span class=\"n\">selection_sort</span> <span class=\"n\">l</span> <span class=\"bp\">=</span> <span class=\"o\">[]</span> <span class=\"k\">from</span> <span class=\"n\">nil_perm.mpr</span> <span class=\"n\">rfl</span>\n\n    <span class=\"c1\">-- `selection_sort` を展開して，`simp` で決着</span>\n    <span class=\"n\">unfold</span> <span class=\"n\">selection_sort</span>\n    <span class=\"n\">simp</span><span class=\"bp\">?</span> <span class=\"o\">[</span><span class=\"n\">hl</span><span class=\"o\">]</span> <span class=\"n\">says</span>\n      <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span>\n        <span class=\"n\">hl</span><span class=\"o\">,</span>\n        <span class=\"n\">length_nil</span><span class=\"o\">,</span>\n        <span class=\"n\">lt_self_iff_false</span><span class=\"o\">,</span>\n        <span class=\"n\">erase_nil</span><span class=\"o\">,</span>\n        <span class=\"n\">dite_false</span>\n      <span class=\"o\">]</span>\n\n  <span class=\"c1\">-- リストの長さが `n + 1` であるとき</span>\n  <span class=\"n\">case</span> <span class=\"n\">succ</span> <span class=\"n\">n</span> <span class=\"n\">IH</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">replace</span> <span class=\"n\">ih</span> <span class=\"o\">:</span> <span class=\"n\">length</span> <span class=\"n\">l</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"n\">ih</span>\n\n    <span class=\"c1\">-- `selection_sort` を展開して，`simp` で簡略化</span>\n    <span class=\"n\">unfold</span> <span class=\"n\">selection_sort</span>\n    <span class=\"n\">simp</span><span class=\"bp\">?</span> <span class=\"o\">[</span><span class=\"n\">ih</span><span class=\"o\">]</span> <span class=\"n\">says</span>\n      <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span>\n        <span class=\"n\">ih</span><span class=\"o\">,</span>\n        <span class=\"n\">add_pos_iff</span><span class=\"o\">,</span>\n        <span class=\"n\">or_true</span><span class=\"o\">,</span>\n        <span class=\"n\">dite_true</span>\n      <span class=\"o\">]</span>\n\n    <span class=\"c1\">-- ゴールが複雑で見づらいので変数を導入する</span>\n    <span class=\"n\">set</span> <span class=\"n\">μ</span> <span class=\"o\">:=</span> <span class=\"n\">minimum_of_length_pos</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">length</span> <span class=\"n\">l</span><span class=\"o\">)</span>\n    <span class=\"n\">set</span> <span class=\"n\">rest</span> <span class=\"o\">:=</span> <span class=\"n\">l.erase</span> <span class=\"n\">μ</span>\n\n    <span class=\"c1\">-- `μ` は `l` の要素</span>\n    <span class=\"k\">have</span> <span class=\"n\">mem</span> <span class=\"o\">:</span> <span class=\"n\">μ</span> <span class=\"bp\">∈</span> <span class=\"n\">l</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n      <span class=\"n\">refine</span> <span class=\"n\">minimum_mem</span> <span class=\"bp\">?</span><span class=\"n\">_</span>\n      <span class=\"n\">simp</span><span class=\"bp\">?</span> <span class=\"n\">says</span>\n        <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">coe_minimum_of_length_pos</span><span class=\"o\">]</span>\n\n    <span class=\"c1\">-- `l ~ μ :: selection_sort rest` を示したい</span>\n    <span class=\"k\">show</span> <span class=\"n\">l</span> <span class=\"bp\">~</span> <span class=\"n\">μ</span> <span class=\"o\">::</span> <span class=\"n\">selection_sort</span> <span class=\"n\">rest</span>\n\n    <span class=\"c1\">-- `rest.length = n` を示せば十分であることが言いたい</span>\n    <span class=\"k\">suffices</span> <span class=\"n\">rest.length</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"k\">from</span> <span class=\"kd\">by</span>\n      <span class=\"c1\">-- 帰納法の仮定により，`selection_sort rest ~ rest` が言える</span>\n      <span class=\"k\">have</span> <span class=\"n\">hr</span> <span class=\"o\">:</span> <span class=\"n\">selection_sort</span> <span class=\"n\">rest</span> <span class=\"bp\">~</span> <span class=\"n\">rest</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n        <span class=\"n\">exact</span><span class=\"bp\">?</span> <span class=\"n\">says</span>\n          <span class=\"n\">exact</span> <span class=\"n\">Perm.symm</span> <span class=\"o\">(</span><span class=\"n\">IH</span> <span class=\"n\">rest</span> <span class=\"n\">this</span><span class=\"o\">)</span>\n\n      <span class=\"c1\">-- 置換の推移性により，`l ~ μ :: rest` を示せばいい</span>\n      <span class=\"k\">suffices</span> <span class=\"n\">l</span> <span class=\"bp\">~</span> <span class=\"n\">μ</span> <span class=\"o\">::</span> <span class=\"n\">rest</span> <span class=\"k\">from</span> <span class=\"kd\">by</span>\n        <span class=\"n\">apply</span> <span class=\"n\">this.trans</span>\n        <span class=\"n\">simp</span><span class=\"bp\">?</span> <span class=\"o\">[</span><span class=\"n\">hr.symm</span><span class=\"o\">]</span> <span class=\"n\">says</span>\n          <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">perm_cons</span><span class=\"o\">,</span> <span class=\"n\">hr.symm</span><span class=\"o\">]</span>\n\n      <span class=\"c1\">-- `rest` の定義から従う</span>\n      <span class=\"n\">exact</span> <span class=\"n\">perm_cons_erase</span> <span class=\"n\">mem</span>\n\n    <span class=\"c1\">-- 後は `length rest = n` を示せばいい</span>\n    <span class=\"k\">show</span> <span class=\"n\">rest.length</span> <span class=\"bp\">=</span> <span class=\"n\">n</span>\n\n    <span class=\"c1\">-- これも `rest` の定義から従う</span>\n    <span class=\"n\">convert</span> <span class=\"n\">List.length_erase_of_mem</span> <span class=\"n\">mem</span>\n    <span class=\"n\">simp</span><span class=\"bp\">?</span> <span class=\"o\">[</span><span class=\"n\">ih</span><span class=\"o\">]</span> <span class=\"n\">says</span>\n      <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">ih</span><span class=\"o\">,</span> <span class=\"n\">Nat.pred_succ</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 398493228,
        "sender_full_name": "Asei Inoue",
        "timestamp": 1698242800
    },
    {
        "content": "<p>I want to use <code>mem : μ ∈ l</code> and <code>l.length &gt; rest.length</code> which are proved in definition of <code>selection_sort</code> inorder to prove <code>l ~ selection_sort l </code>.</p>",
        "id": 398493448,
        "sender_full_name": "Asei Inoue",
        "timestamp": 1698242872
    },
    {
        "content": "<p>Currently, it is shown again in the proof of <code>l ~ selection_sort l</code>.</p>",
        "id": 398493597,
        "sender_full_name": "Asei Inoue",
        "timestamp": 1698242906
    },
    {
        "content": "<p>Is there any way to \"reuse\" these proofs?</p>",
        "id": 398493677,
        "sender_full_name": "Asei Inoue",
        "timestamp": 1698242927
    },
    {
        "content": "<p>I think the answer is no, not right now, I think its better to extract these yourself as lemmas first, like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">length_erase_lt</span> <span class=\"o\">(</span><span class=\"bp\">??</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">l.erase</span> <span class=\"n\">a</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">length</span> <span class=\"bp\">&lt;</span> <span class=\"n\">l.length</span>\n</code></pre></div>\n<p>assuming they dont exist already!</p>\n<p>It would be possible (and interesting to write a metaprogram to extract such proofs I guess, but I dont think it exists.</p>\n<p>You can use <code>whatsnew in</code> before a def to see what lemmas are generated by the command, but in this case everything is inline I think</p>",
        "id": 398499063,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1698244419
    },
    {
        "content": "<p>Is that true if <code>a \\notin l</code>?</p>",
        "id": 398499411,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1698244523
    },
    {
        "content": "<p>The lemma, no, that's what the <code>(??)</code> hypothesis in my snippet is a placeholder for</p>",
        "id": 398510469,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1698247448
    },
    {
        "content": "<p>I think using tail recursion is better.<br>\nin other words, rewrite selection_sort by helper function which iterates list.length times.</p>",
        "id": 398517253,
        "sender_full_name": "Asei Inoue",
        "timestamp": 1698249459
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"127136\">@Alex J. Best</span> Thank you!</p>",
        "id": 398517419,
        "sender_full_name": "Asei Inoue",
        "timestamp": 1698249507
    },
    {
        "content": "<p>What is whatsnew? where is the doc of whatsnew?</p>",
        "id": 398517843,
        "sender_full_name": "Asei Inoue",
        "timestamp": 1698249612
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/Util/WhatsNew.html\">https://leanprover-community.github.io/mathlib4_docs/Mathlib/Util/WhatsNew.html</a></p>",
        "id": 398519415,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1698250012
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"626349\">Asei Inoue</span> has marked this topic as resolved.</p>",
        "id": 398577077,
        "sender_full_name": "Notification Bot",
        "timestamp": 1698276461
    }
]