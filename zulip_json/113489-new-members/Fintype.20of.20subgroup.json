[
    {
        "content": "<p>Hi everyone!<br>\nI was trying to write some abstract algebra exercises into lean4. A first exercise I choose is \"Let p, q be distinct primes. Let G be a finite group of order p * q, then G is not a simple group\". I met the problem of showing the <code>Fintype { x // x ∈ Q }</code> for some Sylow <code>q</code> subgroup <code>Q</code>.<br>\nHere is what I have written with infoview:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.GroupTheory.Sylow</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">group_order_pq_not_simple'</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">Fact</span> <span class=\"o\">(</span><span class=\"n\">Nat.Prime</span> <span class=\"n\">p</span><span class=\"o\">)]</span> <span class=\"o\">[</span><span class=\"n\">hq</span> <span class=\"o\">:</span> <span class=\"n\">Fact</span> <span class=\"o\">(</span><span class=\"n\">Nat.Prime</span> <span class=\"n\">q</span><span class=\"o\">)]</span> <span class=\"o\">(</span><span class=\"n\">hpq</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">&lt;</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">Fintype.card</span> <span class=\"n\">G</span> <span class=\"bp\">=</span> <span class=\"n\">p</span> <span class=\"bp\">*</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"n\">IsSimpleGroup</span> <span class=\"n\">G</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"c1\">-- denote a Sylow `q` subgroup by `Q`</span>\n  <span class=\"n\">cases'</span> <span class=\"n\">IsPGroup.exists_le_sylow</span> <span class=\"o\">(</span><span class=\"n\">IsPGroup.of_bot</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:=</span> <span class=\"n\">G</span><span class=\"o\">))</span> <span class=\"k\">with</span> <span class=\"n\">Q</span> <span class=\"n\">triv</span>\n  <span class=\"k\">let</span> <span class=\"n\">N</span> <span class=\"o\">:=</span> <span class=\"n\">Subgroup.normalizer</span> <span class=\"o\">(</span><span class=\"n\">Q</span> <span class=\"o\">:</span> <span class=\"n\">Subgroup</span> <span class=\"n\">G</span><span class=\"o\">)</span>\n  <span class=\"c1\">-- `Q` has `q` elements so `Q ≠ ⊥`</span>\n  <span class=\"k\">have</span> <span class=\"n\">nontriv₁</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">Q</span> <span class=\"o\">:</span> <span class=\"n\">Subgroup</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"bp\">≠</span> <span class=\"bp\">⊥</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">by_contra</span> <span class=\"n\">contra</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">Subgroup.card_eq_one</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">contra</span>\n    <span class=\"k\">have</span> <span class=\"n\">hQ</span> <span class=\"o\">:=</span> <span class=\"n\">Sylow.card_eq_multiplicity</span> <span class=\"n\">Q</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hQ</span>\n    <span class=\"c\">/-</span>\n<span class=\"cm\">    p q : ℕ</span>\n<span class=\"cm\">    hp : Fact (Nat.Prime p)</span>\n<span class=\"cm\">    hq : Fact (Nat.Prime q)</span>\n<span class=\"cm\">    hpq : p &lt; q</span>\n<span class=\"cm\">    G : Type u_1</span>\n<span class=\"cm\">    inst✝¹ : Group G</span>\n<span class=\"cm\">    inst✝ : Fintype G</span>\n<span class=\"cm\">    h : Fintype.card G = p * q</span>\n<span class=\"cm\">    Q : Sylow q G</span>\n<span class=\"cm\">    triv : ⊥ ≤ ↑Q</span>\n<span class=\"cm\">    N : Subgroup G := Subgroup.normalizer ↑Q</span>\n<span class=\"cm\">    contra : Nat.card { x // x ∈ ↑Q } = 1</span>\n<span class=\"cm\">    hQ : Fintype.card { x // x ∈ ↑Q } = q ^ ↑(Nat.factorization (p * q)) q</span>\n<span class=\"cm\">    ⊢ False</span>\n<span class=\"cm\">    -/</span>\n</code></pre></div>\n<p>From here, I was trying to use <code>contra</code> and <code>hQ</code> to get <code> 1 = q ^ ↑(Nat.factorization (p * q)) q</code> then a contradiction.</p>\n<p>But when I tried to write <br>\n<code>    rw [← Nat.card_eq_fintype_card] at hQ</code><br>\n to turn <code>Nat.card</code> into <code>Fintype.card</code>, error happens. Lean says <br>\n**failed to synthesize instance<br>\n  Fintype { x // x ∈ ↑Q }**</p>\n<p>If I write  </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>    <span class=\"k\">have</span> <span class=\"n\">hQ'</span> <span class=\"o\">:=</span> <span class=\"n\">Fintype.ofFinite</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">Q</span> <span class=\"o\">}</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">Nat.card_eq_fintype_card</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hQ</span>\n</code></pre></div>\n<p>Lean still raises error, saying<br>\n**synthesized type class instance is not definitionally equal to expression inferred by typing rules, synthesized<br>\n  hQ'<br>\ninferred<br>\n  Subgroup.instFintypeSubtypeMemSubgroupInstMembershipInstSetLikeSubgroup ↑Q** </p>\n<p>What is the correct way to get the  <code>Fintype { x // x ∈ ↑Q }</code> or avoid this problem?<br>\nWhy is there no written instance of <code>Fintype { x // x ∈ H }</code> with <code>H : Subgroup G</code>  and <code>Fintype G</code>?<br>\nIf possible, could you please explain what is happening here and what is the relation between <code>Finite</code> and <code>Fintype</code> here? (<code>Fintype.ofFinite</code> has info <code>Noncomputably get a Fintype instance from a Finite instance. </code>)  Questions about <code>Fintype</code> keep disturbing me.</p>\n<p>Thanks in advance!</p>",
        "id": 373906173,
        "sender_full_name": "Jiang Jiedong",
        "timestamp": 1688984961
    },
    {
        "content": "<blockquote>\n<p>But when I tried to use Nat.card_eq_fintype_card to turn Nat.card into Fintype.card, error happens. </p>\n</blockquote>\n<p>Please can you include this in the <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>? The <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> should include the thing that causes the problem, not just the code that leads up to it</p>",
        "id": 373908993,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1688985351
    },
    {
        "content": "<p>(please also add the <code>import</code>s that are needed to run your code)</p>",
        "id": 373909127,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1688985371
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113489-new-members/topic/Fintype.20of.20subgroup/near/373909127\">said</a>:</p>\n<blockquote>\n<p>(please also add the <code>import</code>s that are needed to run your code)</p>\n</blockquote>\n<p>I'm very sorry. I've add imports so that the code can work after pasting into an empty file. But it's quite hard for me to judge which detail is not necessary. <span aria-label=\"exhausted\" class=\"emoji emoji-1f625\" role=\"img\" title=\"exhausted\">:exhausted:</span></p>",
        "id": 373925605,
        "sender_full_name": "Jiang Jiedong",
        "timestamp": 1688988562
    },
    {
        "content": "<p>Don't worry! The idea is that we can just copy/paste your code and see what happens. So \"working\" is more important than \"minimal\" (but \"small enough\" is still important)</p>",
        "id": 373926942,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1688988826
    },
    {
        "content": "<p>This works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>    <span class=\"n\">classical</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">Nat.card_eq_fintype_card</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hQ</span>\n</code></pre></div>",
        "id": 373930425,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1688989499
    },
    {
        "content": "<p>As <code>G</code> is finite, lean can find <code>Fintype { x // x ∈ ↑Q }</code> by itself by brute force once you tell it the algorithm to check whether each <code>x</code> is in <code>Q</code> (the algorithm is  \"cheat using the axiom of choice\")</p>",
        "id": 373930725,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1688989549
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113489-new-members/topic/Fintype.20of.20subgroup/near/373930725\">said</a>:</p>\n<blockquote>\n<p>As <code>G</code> is finite, lean can find <code>Fintype { x // x ∈ ↑Q }</code> by itself by brute force once you tell it the algorithm to check whether each <code>x</code> is in <code>Q</code> (the algorithm is  \"cheat using the axiom of choice\")</p>\n</blockquote>\n<p>Thank you very much! May I ask that do you know there is some material to read or learn that can makes me understand <code>classical</code>(and all of the \"noncomputable, axiom of choice, decidable, excluded middle\") better? For now,  <code>classical</code> is very like a magic spell to me. <span aria-label=\"mage\" class=\"emoji emoji-1f9d9\" role=\"img\" title=\"mage\">:mage:</span></p>",
        "id": 373992380,
        "sender_full_name": "Jiang Jiedong",
        "timestamp": 1689001374
    },
    {
        "content": "<p>If you do not believe in classical axioms then probably there are situations where you can't prove that a subset of a finite set is finite (because constructive finiteness implies you know how many elements it has). If you are doing regular mathematics and are not interested in foundations then this is not a situation you want to be in. So switch on <code>classical</code> and everything is fine. There are now two concepts of eg the size of a finite set but there's a theorem saying they're equal.</p>",
        "id": 374016653,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1689005809
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/Fintype.20of.20subgroup/near/374016653\">said</a>:</p>\n<blockquote>\n<p>If you do not believe in classical axioms then probably there are situations where you can't prove that a subset of a finite set is finite (because constructive finiteness implies you know how many elements it has). If you are doing regular mathematics and are not interested in foundations then this is not a situation you want to be in. So switch on <code>classical</code> and everything is fine. There are now two concepts of eg the size of a finite set but there's a theorem saying they're equal.</p>\n</blockquote>\n<p>Thank you, Kevin! I think due to the same reason as \"a subset of a finite set is finite cannot be proved without classical axioms\" , one cannot get \"a subgroup of a finite group is  finite\"  without classical axioms. So there is no such instance in mathlib.  As far as I am concerned, I will just stick to <code>classical</code>.</p>",
        "id": 374044782,
        "sender_full_name": "Jiang Jiedong",
        "timestamp": 1689012108
    },
    {
        "content": "<blockquote>\n<p>one cannot get \"a subgroup of a finite group is finite\" without classical axioms.</p>\n</blockquote>\n<p>One can get this in some but not all cases; indeed, this result is precisely <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Subgroup.instFintypeSubtypeMemSubgroupInstMembershipInstSetLikeSubgroup#doc\">docs#Subgroup.instFintypeSubtypeMemSubgroupInstMembershipInstSetLikeSubgroup</a> which does not use any classical axioms</p>",
        "id": 374045938,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1689012369
    },
    {
        "content": "<p>The <code>DecidablePred fun x =&gt; x ∈ K</code> argument is the relevant one here; some places where this is true without classical axioms include:</p>\n<ul>\n<li>When <code>K = \\bot</code></li>\n<li>When <code>K</code> is <code>MonoidHom.range f</code> for some <code>f</code> with a finite group as its domain, <em>and</em> where the is some algorithm to detect duplicates in the codomain</li>\n</ul>\n<p>Some places where it's not true without classical axioms are:</p>\n<ul>\n<li>When <code>K</code> is defined with a carrier of something like <code>{z : Units Int | x = 1 \\or continuum_hypothesis_is_true}</code></li>\n<li>When <code>K</code> is a subgroup of something like the units of the real numbers, as you cannot decide if two real numbers are equal without these axioms.</li>\n</ul>",
        "id": 374047607,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1689012816
    }
]