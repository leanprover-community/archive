[
    {
        "content": "<p>Hi! I'm an undergrad math &amp; cs student doing research in proof/problem generation for an educational context. I am exploring somehow using Lean in my research (I am new to Lean). I wanted to ask, is there somewhere I can talk to someone more experienced in Lean perhaps to bounce ideas?</p>",
        "id": 257250249,
        "sender_full_name": "Dania Ali",
        "timestamp": 1634063443
    },
    {
        "content": "<p>Do you mean actual talking or writing messages?</p>",
        "id": 257252041,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1634064214
    },
    {
        "content": "<p>Ah i meant messages</p>",
        "id": 257255642,
        "sender_full_name": "Dania Ali",
        "timestamp": 1634065646
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"450476\">@Dania Ali</span> This stream is the right place for that</p>",
        "id": 257256117,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1634065837
    },
    {
        "content": "<p>Great! Well, I'm still in the initial stages of my project so I have no concrete plan yet. I am thinking about how to auto-generate proofs for very simple theorems (from an undergrad course). The theorems are related to simple programming functions, so perhaps more complicated than theorems on propositional formulas.</p>",
        "id": 257259072,
        "sender_full_name": "Dania Ali",
        "timestamp": 1634067077
    },
    {
        "content": "<p>I've come across a paper from microsoft called \"Automatically Generating Problems and Solutions for Natural Deduction\" and their approach is to create a \"Universal Proof Graph\" where the nodes are truth tables and the edges are Inference rules (like Modus Ponens etc.), then their algorithm searches that data structure to generate a proof. I am wondering if I can do something similar but truth tables seem not to apply here. I am trying to come up with an approach.</p>",
        "id": 257259278,
        "sender_full_name": "Dania Ali",
        "timestamp": 1634067162
    }
]