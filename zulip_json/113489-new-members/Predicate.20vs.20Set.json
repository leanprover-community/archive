[
    {
        "content": "<p>My intuition is that a predicate is a denumerable sort of object, consisting of a finite number of terms.  On the other hand, my intuition is that an arbitrary set comes from an enormous universe.  However in lean, these are the same thing, a function <code>P : α → Prop</code>.  </p>\n<p>I'm not sure what my question is, I think I understand what is going on.  I suppose it makes sense to think of membership in an arbitrary set as giving a predicate.   How do other people think about this?</p>",
        "id": 374490674,
        "sender_full_name": "Ryan McCorvie",
        "timestamp": 1689139178
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"459991\">Ryan McCorvie</span> <a href=\"#narrow/stream/113489-new-members/topic/Predicate.20vs.20Set/near/374490674\">said</a>:</p>\n<blockquote>\n<p>I suppose it makes sense to think of membership in an arbitrary set as giving a predicate.</p>\n</blockquote>\n<p>I think you're right on this point.</p>",
        "id": 374495106,
        "sender_full_name": "Bulhwi Cha",
        "timestamp": 1689140684
    },
    {
        "content": "<p>Yes, sets and predicates are the same thing. It's just that sets use set notation.</p>\n<p>Maybe what would unify the two ideas for you is that the only sets you can write down are finite terms.</p>\n<p>My own understanding is that the blurring of predicates and functions is related to what happens when you move from first-order to second-order logic. In first-order logic, the native predicates are all actual formulae (and you can't quantify over them; instead you have schema), but in second-order logic you can quantify over all predicates (which might include ones you can't write down). In Lean, <code>P : α → Prop</code> lets you quantify over all predicates, including the ones you can't write down.</p>",
        "id": 374509705,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1689145807
    },
    {
        "content": "<p>I'm a mathematician who only took a one-semester logic course taught by a mathematician, so I could be saying/thinking incorrectly about this.</p>",
        "id": 374509941,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1689145881
    },
    {
        "content": "<p>I really like Kyle Miller's comment, but I see a potential for confusion, so let me clarify stuff a bit.</p>\n<p>Before I do so, please note that Lean doesn't use first-order logic, so this is just a tangential issue; I am not answering the original question.</p>\n<p>In the first-order logic, the notions \"relation\" and \"set\" exist on completely different levels. First-order logic comes with relations and functions (technically speaking, relations would be enough, but working without function would make formulas very messy (remember Prolog?) so we use both). Relations and functions can have various arities. Any theory in the first-order logic is defined by axioms that speak about relations and functions. On the contrary, sets are non-logical notion related to some particular theories in the first-order logic. In the theory of sets, the universe consists of sets only. Since <code>∈</code> is a binary relation, we can view <code>∈ X</code> as a unary relation.</p>",
        "id": 374515794,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1689147483
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"459991\">Ryan McCorvie</span> <a href=\"#narrow/stream/113489-new-members/topic/Predicate.20vs.20Set/near/374490674\">said</a>:</p>\n<blockquote>\n<p>However in lean, these are the same thing, a function <code>P : α → Prop</code>. </p>\n</blockquote>\n<p>Yes, they are the same thing in Lean. They are definitionally equivalent but I sometimes write <code>setOf</code> to make it explicit which of the equivalent types I am talking about. Sometimes I need to use <code>Set.mem_setOf_eq</code> to transition between them.</p>",
        "id": 374516406,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1689147666
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"417654\">@Martin Dvořák</span> That shouldn't be a \"sometimes\" thing <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span> They're defeq, but you're not supposed to treat them as being defeq -- that's breaking the <code>Set</code> API.</p>\n<p>Here are the ways you're supposed to go back and forth. The primed versions are exactly the same as the non-primed versions:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">fromPredicateToSet</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">setOf</span> <span class=\"n\">P</span>\n<span class=\"kd\">def</span> <span class=\"n\">fromPredicateToSet'</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"bp\">|</span> <span class=\"n\">P</span> <span class=\"n\">x</span><span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">fromSetToPredicate</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">·</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">)</span>\n<span class=\"kd\">def</span> <span class=\"n\">fromSetToPredicate'</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span>\n</code></pre></div>",
        "id": 374521398,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1689149000
    },
    {
        "content": "<p>I'm not sure what the status of it is, but the idea of wrapping <code>Set</code> as a structure to enforce this API has been thrown around:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">Set</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">mem</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n</code></pre></div>\n<p>I remember one of the stumbling blocks was that Lean 3 didn't have eta reduction for structures, so you couldn't round-trip from <code>Set</code> to a predicate and back. Maybe the Lean 4 era will change this?</p>",
        "id": 374522143,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1689149154
    },
    {
        "content": "<p>Eta for structures is what makes the first of these two theorems provable by <code>rfl</code> in Lean 4 but not in Lean 3:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">mk_mem</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Set.mk</span> <span class=\"n\">s.mem</span> <span class=\"bp\">=</span> <span class=\"n\">s</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">mem_mk</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">Set.mk</span> <span class=\"n\">p</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mem</span> <span class=\"bp\">=</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 374523107,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1689149381
    }
]