[
    {
        "content": "<p>Hi, I'm a new user! I'm trying to prove that log is bounded above by the harmonic series by taking the integral of <code>staircase (x : ℝ) := (⌊x⌋ : ℝ)⁻¹</code>, which will be an upper bound on the integral of 1/x. I was able to show that the <code>staircase</code> function is interval_integrable using the fact that it is antitone on <code>set.Ici 1</code>. Now I'm trying to prove the following proposition in order to use <code>measure_theory.integral_congr_ae</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">∀ᵐ</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">∂</span><span class=\"n\">μ</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">set.uIoc</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">staircase</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>However, I'm not sure how to proceed. I don't have much background in measure theory. Should I start with <code>measure_theory.ae_cover_Ico</code>? I've been reading the docs about filters, but I'm having trouble finding an example of how to prove ae equal. Thank you!</p>",
        "id": 339506497,
        "sender_full_name": "Jack Valmadre",
        "timestamp": 1677918171
    },
    {
        "content": "<p>(I previously tried using <code>((⌈x⌉ : ℝ) - 1)⁻¹</code> instead of <code>(⌊x⌋ : ℝ)⁻¹</code> so that the function was constant on <code>(n, n + 1]</code>. However, I ran into trouble using <code>interval_integrable.trans_iterate</code> to prove that it was integrable. I could prove <code>continuous_on</code> for each interval but I couldn't then apply <code>continuous_on.integrable_on_Icc</code>, since it requires <code>is_compact</code>)</p>",
        "id": 339515494,
        "sender_full_name": "Jack Valmadre",
        "timestamp": 1677921989
    },
    {
        "content": "<p>Hi! I guess noone has come to this yet because it's the weekend. It might also help if you set out a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> with all the imports etc. Something like this? I assume that <code>μ</code> stands for Lebesgue measure.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">measure_theory.integral.interval_integral</span>\n<span class=\"kn\">open</span> <span class=\"n\">measure_theory</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">staircase</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">⌊</span><span class=\"n\">x</span><span class=\"bp\">⌋</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"bp\">∀ᵐ</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">∂</span> <span class=\"n\">volume</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">set.uIoc</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">staircase</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">n</span><span class=\"bp\">⁻¹</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n<span class=\"o\">{</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 339541232,
        "sender_full_name": "Alistair Tucker",
        "timestamp": 1677931319
    },
    {
        "content": "<p>Actually I'm not sure why you want to prove this for <code>Ioc</code>. Obviously <code>Ico</code> would be more natural. Is there some further thing that requires it for <code>Ioc</code>?</p>",
        "id": 339542366,
        "sender_full_name": "Alistair Tucker",
        "timestamp": 1677931641
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 339542734,
        "sender_full_name": "Alistair Tucker",
        "timestamp": 1677931737
    },
    {
        "content": "<p>Anyway you don't need to know anything about filters to tackle this problem. In the following proof all reference to them is gone by the end of the first line.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">measure_theory.integral.interval_integral</span>\n<span class=\"kn\">open</span> <span class=\"n\">measure_theory</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">staircase</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">⌊</span><span class=\"n\">x</span><span class=\"bp\">⌋</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"bp\">∀ᵐ</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">∂</span> <span class=\"n\">volume</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">set.uIoc</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">staircase</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">n</span><span class=\"bp\">⁻¹</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n<span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">ae_iff</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">le_zero_iff</span><span class=\"o\">],</span>\n  <span class=\"n\">rw</span> <span class=\"k\">show</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"n\">volume</span> <span class=\"o\">({</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℝ</span><span class=\"o\">),</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">real.volume_singleton</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"n\">apply</span> <span class=\"n\">measure_mono</span><span class=\"o\">,</span>\n  <span class=\"n\">intros</span> <span class=\"n\">x</span> <span class=\"n\">hx</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">set.mem_singleton_iff</span><span class=\"o\">],</span>\n  <span class=\"n\">by_contra</span> <span class=\"n\">hne</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">hx</span><span class=\"o\">,</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">staircase</span><span class=\"o\">,</span>\n  <span class=\"k\">suffices</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">set.Ioc</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">⌊</span><span class=\"n\">x</span><span class=\"bp\">⌋</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">simpa</span> <span class=\"n\">using</span> <span class=\"n\">this</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"n\">rintro</span> <span class=\"o\">⟨</span><span class=\"n\">hl</span><span class=\"o\">,</span> <span class=\"n\">hu</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">congr</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">int.floor_eq_iff</span><span class=\"o\">],</span>\n  <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">le_of_lt</span> <span class=\"n\">hl</span><span class=\"o\">,</span> <span class=\"n\">lt_of_le_of_ne</span> <span class=\"n\">hu</span> <span class=\"n\">hne</span><span class=\"o\">⟩,</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 339543943,
        "sender_full_name": "Alistair Tucker",
        "timestamp": 1677932111
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"111433\">Alistair Tucker</span> <a href=\"#narrow/stream/113489-new-members/topic/How.20to.20prove.20ae.20equal.20on.20interval.3F/near/339542366\">said</a>:</p>\n<blockquote>\n<p>Actually I'm not sure why you want to prove this for <code>Ioc</code>. Obviously <code>Ico</code> would be more natural. Is there some further thing that requires it for <code>Ioc</code>?</p>\n</blockquote>\n<p><code>set.uIco</code> does not exist. No particular reason why. It's a historical accident.</p>",
        "id": 339546300,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1677932952
    },
    {
        "content": "<p>In that case, you shouldn't use the unordered version anyway, given that you know <code>n ≤ n + 1</code></p>",
        "id": 339546427,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1677932991
    },
    {
        "content": "<p>+1 to the <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> suggestion. It's by far the best way to ask a question (in the sense that they're the easiest to answer and hence more likely to be answered)</p>",
        "id": 339547902,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1677933530
    },
    {
        "content": "<p>Thanks for the responses! Really appreciate it! MWE below (I considered the integral of <code>↑⌊x⌋</code> rather than <code>(↑⌊x⌋)⁻¹</code> to make it simpler)</p>\n<p><span class=\"user-mention\" data-user-id=\"111433\">@Alistair Tucker</span> Yep sorry, <code>μ</code> is <code>measure_theory.measure_space.volume</code></p>\n<p><span class=\"user-mention\" data-user-id=\"111433\">@Alistair Tucker</span> Thanks for your solution, that looks great! I couldn't find <code>ae_iff</code> though, where is it? (I'm using mathlib3)</p>\n<p><span class=\"user-mention\" data-user-id=\"111433\">@Alistair Tucker</span> <span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span> I'm using (u)<code>Ioc</code> because it's required by <code>sum_integral_adjacent_intervals_Ico</code> (see second part of MWE below)</p>\n<p>MWE for original question:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.real.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.nat.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.int.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.set.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.set.intervals.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">measure_theory.integral.integrable_on</span>\n<span class=\"kn\">import</span> <span class=\"n\">measure_theory.integral.interval_integral</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">real</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">real_floor</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span> <span class=\"bp\">↑⌊</span><span class=\"n\">x</span><span class=\"bp\">⌋</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">piece_integral_eq</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∫</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"k\">in</span> <span class=\"bp\">↑</span><span class=\"n\">n..</span><span class=\"bp\">↑</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">real_floor</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"bp\">↑</span><span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">interval_integral.integral_congr_ae</span>\n    <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"bp\">∀ᵐ</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">∂</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">_</span> <span class=\"bp\">→</span> <span class=\"n\">real_floor</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">,</span> <span class=\"bp\">↑</span><span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">x</span><span class=\"o\">),</span>\n  <span class=\"o\">{</span> <span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"c1\">-- ⊢ ∀ᵐ (x : ℝ), x ∈ set.uIoc ↑n (↑n + 1) → real_floor x = (λ (_x : ℝ), ↑n) x</span>\n    <span class=\"gr\">sorry</span><span class=\"o\">,</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>MWE for why I'm using Ioc (cont. from above):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">step</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span> <span class=\"bp\">↑</span><span class=\"n\">n</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">step_integral_eq</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∫</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"k\">in</span> <span class=\"n\">step</span> <span class=\"n\">n..step</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"bp\">∫</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"k\">in</span> <span class=\"bp\">↑</span><span class=\"n\">n..</span><span class=\"bp\">↑</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">t</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"n\">step</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"n\">step</span><span class=\"o\">,</span> <span class=\"n\">simp</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">integral_eq</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∫</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"k\">in</span> <span class=\"mi\">1</span><span class=\"bp\">..↑</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">real_floor</span> <span class=\"n\">t</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">finset.Ico</span> <span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">sum</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"bp\">↑</span><span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">simp</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">step</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">step</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"o\">},</span>\n  <span class=\"k\">have</span> <span class=\"n\">hb</span> <span class=\"o\">:</span> <span class=\"n\">step</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">step</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"o\">},</span>\n  <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">hb</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">ha</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">hmn</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- This function uses interval_integral (uIoc):</span>\n  <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">interval_integral.sum_integral_adjacent_intervals_Ico</span> <span class=\"n\">hmn</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">function.funext_iff.mpr</span> <span class=\"n\">step_integral_eq</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">function.funext_iff.mpr</span> <span class=\"n\">piece_integral_eq</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">intro</span> <span class=\"n\">hk</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">monotone.interval_integrable</span><span class=\"o\">,</span> <span class=\"n\">simp</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">monotone_iff_forall_lt</span><span class=\"o\">,</span>\n    <span class=\"n\">intro</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">intro</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">intro</span> <span class=\"n\">hab</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">real_floor</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"n\">real_floor</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">int.floor_mono</span> <span class=\"o\">(</span><span class=\"n\">le_of_lt</span> <span class=\"n\">hab</span><span class=\"o\">),</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 339618448,
        "sender_full_name": "Jack Valmadre",
        "timestamp": 1677969200
    },
    {
        "content": "<p>I should have taken my own advice and included all the <code>import</code>s and <code>open</code>s explicitly! I have edited it now. I think the crucial bit you may have been missing is the <code>open measure_theory</code>.</p>",
        "id": 339623296,
        "sender_full_name": "Alistair Tucker",
        "timestamp": 1677973394
    },
    {
        "content": "<p>Yes I see that all the interval integral stuff is done in terms of <code>Ioc</code>. I guess you could write <code>∫ (x : ℝ) in set.Ico a b, f x</code> instead of <code>∫ (x : ℝ) in a..b, f x</code> but then you wouldn't have all the lemmas.</p>",
        "id": 339623875,
        "sender_full_name": "Alistair Tucker",
        "timestamp": 1677973943
    },
    {
        "content": "<p>Thanks so much! measure_theory.ae_iff was the missing piece that I needed :)</p>",
        "id": 339636494,
        "sender_full_name": "Jack Valmadre",
        "timestamp": 1677985034
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"529592\">Jack Valmadre</span> has marked this topic as resolved.</p>",
        "id": 339770647,
        "sender_full_name": "Notification Bot",
        "timestamp": 1678073060
    }
]