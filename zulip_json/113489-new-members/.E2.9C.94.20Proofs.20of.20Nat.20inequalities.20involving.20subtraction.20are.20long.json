[
    {
        "content": "<p>I thought I would try to write some basic functions over arrays in Lean and challenge myself to prove termination. I hoped the standard tools of automation (simp etc) would make this task easier but I didn't have much success in this regard. I am wondering if there is some type of trick to termination proofs like this one:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">findTwoSum</span> <span class=\"o\">(</span><span class=\"n\">nums</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">target</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Option</span> <span class=\"o\">(</span><span class=\"n\">Nat</span> <span class=\"bp\">×</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"n\">rec</span> <span class=\"n\">loop</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hj_le</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">&lt;</span> <span class=\"n\">nums.size</span> <span class=\"bp\">→</span> <span class=\"n\">j</span> <span class=\"bp\">≤</span> <span class=\"n\">nums.size</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Option</span> <span class=\"o\">(</span><span class=\"n\">Nat</span> <span class=\"bp\">×</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n    <span class=\"k\">if</span> <span class=\"n\">hi</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">&lt;</span> <span class=\"n\">nums.size</span> <span class=\"k\">then</span>\n      <span class=\"k\">if</span> <span class=\"n\">hj</span> <span class=\"o\">:</span> <span class=\"n\">j</span> <span class=\"bp\">&lt;</span> <span class=\"n\">nums.size</span> <span class=\"k\">then</span>\n        <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">nums.size</span> <span class=\"bp\">*</span> <span class=\"n\">nums.size</span> <span class=\"bp\">+</span> <span class=\"n\">nums.size</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">*</span> <span class=\"n\">nums.size</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"bp\">&lt;</span> <span class=\"n\">nums.size</span> <span class=\"bp\">*</span> <span class=\"n\">nums.size</span> <span class=\"bp\">+</span> <span class=\"n\">nums.size</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">*</span> <span class=\"n\">nums.size</span> <span class=\"bp\">+</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n          <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">Nat.add_lt_add_iff_right</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">*</span> <span class=\"n\">nums.size</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))]</span>\n          <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Nat.sub_add_cancel</span> <span class=\"o\">(</span><span class=\"n\">Nat.add_le_add</span> <span class=\"o\">(</span><span class=\"n\">Nat.mul_le_mul_right</span> <span class=\"o\">(</span><span class=\"n\">Array.size</span> <span class=\"n\">nums</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Nat.le_of_lt</span> <span class=\"n\">hi</span><span class=\"o\">))</span> <span class=\"n\">hj</span><span class=\"o\">)]</span>\n          <span class=\"k\">have</span> <span class=\"n\">tmp0</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">,</span> <span class=\"n\">b</span> <span class=\"bp\">&lt;</span> <span class=\"n\">c</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n            <span class=\"n\">intros</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">h</span>\n            <span class=\"n\">by_cases</span> <span class=\"n\">hab_eq</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n            <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">hab_eq</span><span class=\"o\">,</span> <span class=\"n\">zero_add</span><span class=\"o\">]</span>\n              <span class=\"n\">exact</span> <span class=\"n\">Nat.lt_of_le_of_lt</span> <span class=\"o\">(</span><span class=\"n\">Nat.le_of_sub_eq_zero</span> <span class=\"n\">hab_eq</span><span class=\"o\">)</span> <span class=\"n\">h</span> <span class=\"o\">}</span>\n            <span class=\"o\">{</span> <span class=\"k\">have</span> <span class=\"n\">h_b_lt_a</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n                <span class=\"n\">by_contra</span> <span class=\"n\">hn_a_lt_b</span>\n                <span class=\"k\">have</span> <span class=\"n\">tmp2</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"n\">Nat.not_lt.mp</span> <span class=\"n\">hn_a_lt_b</span>\n                <span class=\"k\">have</span> <span class=\"n\">tmp3</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">Nat.sub_eq_zero_of_le</span> <span class=\"n\">tmp2</span>\n                <span class=\"n\">exact</span> <span class=\"n\">hab_eq</span> <span class=\"n\">tmp3</span>\n              <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">tsub_add_eq_add_tsub</span> <span class=\"o\">(</span><span class=\"n\">Nat.le_of_lt</span> <span class=\"n\">h_b_lt_a</span><span class=\"o\">),</span> <span class=\"n\">Nat.add_sub_assoc</span> <span class=\"o\">(</span><span class=\"n\">Nat.le_of_lt</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"n\">a</span><span class=\"o\">]</span>\n              <span class=\"n\">exact</span> <span class=\"n\">Nat.lt_add_of_pos_right</span> <span class=\"o\">(</span><span class=\"n\">Nat.sub_pos_of_lt</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"o\">}</span>\n          <span class=\"n\">exact</span> <span class=\"n\">tmp0</span> <span class=\"o\">(</span><span class=\"n\">Array.size</span> <span class=\"n\">nums</span> <span class=\"bp\">*</span> <span class=\"n\">Array.size</span> <span class=\"n\">nums</span> <span class=\"bp\">+</span> <span class=\"n\">Array.size</span> <span class=\"n\">nums</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">*</span> <span class=\"n\">Array.size</span> <span class=\"n\">nums</span> <span class=\"bp\">+</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">*</span> <span class=\"n\">Array.size</span> <span class=\"n\">nums</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">Nat.lt.base</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">*</span> <span class=\"n\">Array.size</span> <span class=\"n\">nums</span> <span class=\"bp\">+</span> <span class=\"n\">j</span><span class=\"o\">))</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"bp\">+</span> <span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"n\">j</span><span class=\"o\">]</span> <span class=\"bp\">=</span> <span class=\"n\">target</span> <span class=\"k\">then</span>\n          <span class=\"n\">some</span> <span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">j</span><span class=\"o\">)</span>\n        <span class=\"k\">else</span>\n          <span class=\"n\">loop</span> <span class=\"n\">i</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">hj</span><span class=\"o\">)</span>\n      <span class=\"k\">else</span>\n        <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">nums.size</span> <span class=\"bp\">*</span> <span class=\"n\">nums.size</span> <span class=\"bp\">+</span> <span class=\"n\">nums.size</span> <span class=\"bp\">-</span> <span class=\"o\">((</span><span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">nums.size</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">))</span> <span class=\"bp\">&lt;</span> <span class=\"n\">nums.size</span> <span class=\"bp\">*</span> <span class=\"n\">nums.size</span> <span class=\"bp\">+</span> <span class=\"n\">nums.size</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">*</span> <span class=\"n\">nums.size</span> <span class=\"bp\">+</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n          <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Nat.le_antisymm</span> <span class=\"o\">(</span><span class=\"n\">hj_le</span> <span class=\"n\">hi</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Nat.not_lt.mp</span> <span class=\"n\">hj</span><span class=\"o\">),</span> <span class=\"bp\">←</span> <span class=\"n\">Nat.succ_mul</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">Nat.succ_mul</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">Nat.mul_sub_right_distrib</span><span class=\"o\">,</span> <span class=\"n\">Nat.sub_add_eq</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">Nat.mul_sub_right_distrib</span><span class=\"o\">,</span> <span class=\"n\">Nat.sub_add_eq</span> <span class=\"o\">(</span><span class=\"n\">nums.size</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"n\">Nat.sub_right_comm</span><span class=\"o\">,</span> <span class=\"n\">Nat.add_sub_cancel</span><span class=\"o\">]</span>\n          <span class=\"n\">exact</span> <span class=\"n\">Nat.sub_lt</span> <span class=\"o\">(</span><span class=\"n\">Nat.mul_pos</span> <span class=\"o\">(</span><span class=\"n\">Nat.sub_pos_of_lt</span> <span class=\"n\">hi</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Nat.zero_lt_of_lt</span> <span class=\"n\">hi</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">Nat.succ_pos</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span>\n\n        <span class=\"n\">loop</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n    <span class=\"k\">else</span>\n      <span class=\"n\">none</span>\n  <span class=\"n\">loop</span> <span class=\"mi\">0</span> <span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n<span class=\"n\">termination_by</span> <span class=\"n\">loop</span> <span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">nums.size</span> <span class=\"bp\">*</span> <span class=\"n\">nums.size</span> <span class=\"bp\">+</span> <span class=\"n\">nums.size</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">*</span> <span class=\"n\">nums.size</span> <span class=\"bp\">+</span> <span class=\"n\">j</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>Thanks</p>",
        "id": 404174198,
        "sender_full_name": "King Crawford",
        "timestamp": 1700955739
    },
    {
        "content": "<p>Given an array of integers and target value, this function returns the indices of the first pair encountered that sum to the target, or none if no such pair can be found</p>",
        "id": 404174317,
        "sender_full_name": "King Crawford",
        "timestamp": 1700955869
    },
    {
        "content": "<p>Here is a shorter / more conceptual proof for the first one, making use of the <code>zify</code> and <code>linarith</code> tactics</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">findTwoSum</span> <span class=\"o\">(</span><span class=\"n\">nums</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">target</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Option</span> <span class=\"o\">(</span><span class=\"n\">Nat</span> <span class=\"bp\">×</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"n\">rec</span> <span class=\"n\">loop</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hj_le</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">&lt;</span> <span class=\"n\">nums.size</span> <span class=\"bp\">→</span> <span class=\"n\">j</span> <span class=\"bp\">≤</span> <span class=\"n\">nums.size</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Option</span> <span class=\"o\">(</span><span class=\"n\">Nat</span> <span class=\"bp\">×</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n    <span class=\"k\">if</span> <span class=\"n\">hi</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">&lt;</span> <span class=\"n\">nums.size</span> <span class=\"k\">then</span>\n      <span class=\"k\">if</span> <span class=\"n\">hj</span> <span class=\"o\">:</span> <span class=\"n\">j</span> <span class=\"bp\">&lt;</span> <span class=\"n\">nums.size</span> <span class=\"k\">then</span>\n        <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">nums.size</span> <span class=\"bp\">*</span> <span class=\"n\">nums.size</span> <span class=\"bp\">+</span> <span class=\"n\">nums.size</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">*</span> <span class=\"n\">nums.size</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"bp\">&lt;</span> <span class=\"n\">nums.size</span> <span class=\"bp\">*</span> <span class=\"n\">nums.size</span> <span class=\"bp\">+</span> <span class=\"n\">nums.size</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">*</span> <span class=\"n\">nums.size</span> <span class=\"bp\">+</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n          <span class=\"k\">have</span> <span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">*</span> <span class=\"n\">Array.size</span> <span class=\"n\">nums</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"bp\">≤</span> <span class=\"n\">Array.size</span> <span class=\"n\">nums</span> <span class=\"bp\">*</span> <span class=\"n\">Array.size</span> <span class=\"n\">nums</span> <span class=\"bp\">+</span> <span class=\"n\">Array.size</span> <span class=\"n\">nums</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n            <span class=\"n\">nlinarith</span>\n          <span class=\"k\">have</span> <span class=\"n\">hb</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">*</span> <span class=\"n\">Array.size</span> <span class=\"n\">nums</span> <span class=\"bp\">+</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"n\">Array.size</span> <span class=\"n\">nums</span> <span class=\"bp\">*</span> <span class=\"n\">Array.size</span> <span class=\"n\">nums</span> <span class=\"bp\">+</span> <span class=\"n\">Array.size</span> <span class=\"n\">nums</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n            <span class=\"n\">apply</span> <span class=\"n\">LE.le.trans</span> <span class=\"n\">_</span> <span class=\"n\">ha</span>\n            <span class=\"n\">simp</span>\n          <span class=\"n\">zify</span> <span class=\"o\">[</span><span class=\"n\">ha</span><span class=\"o\">,</span> <span class=\"n\">hb</span><span class=\"o\">]</span>\n          <span class=\"n\">linarith</span>\n        <span class=\"k\">if</span> <span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"bp\">+</span> <span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"n\">j</span><span class=\"o\">]</span> <span class=\"bp\">=</span> <span class=\"n\">target</span> <span class=\"k\">then</span>\n          <span class=\"n\">some</span> <span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">j</span><span class=\"o\">)</span>\n        <span class=\"k\">else</span>\n          <span class=\"n\">loop</span> <span class=\"n\">i</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">hj</span><span class=\"o\">)</span>\n      <span class=\"k\">else</span>\n        <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">nums.size</span> <span class=\"bp\">*</span> <span class=\"n\">nums.size</span> <span class=\"bp\">+</span> <span class=\"n\">nums.size</span> <span class=\"bp\">-</span> <span class=\"o\">((</span><span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">nums.size</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">))</span> <span class=\"bp\">&lt;</span> <span class=\"n\">nums.size</span> <span class=\"bp\">*</span> <span class=\"n\">nums.size</span> <span class=\"bp\">+</span> <span class=\"n\">nums.size</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">*</span> <span class=\"n\">nums.size</span> <span class=\"bp\">+</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n          <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Nat.le_antisymm</span> <span class=\"o\">(</span><span class=\"n\">hj_le</span> <span class=\"n\">hi</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Nat.not_lt.mp</span> <span class=\"n\">hj</span><span class=\"o\">),</span> <span class=\"bp\">←</span> <span class=\"n\">Nat.succ_mul</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">Nat.succ_mul</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">Nat.mul_sub_right_distrib</span><span class=\"o\">,</span> <span class=\"n\">Nat.sub_add_eq</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">Nat.mul_sub_right_distrib</span><span class=\"o\">,</span> <span class=\"n\">Nat.sub_add_eq</span> <span class=\"o\">(</span><span class=\"n\">nums.size</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"n\">Nat.sub_right_comm</span><span class=\"o\">,</span> <span class=\"n\">Nat.add_sub_cancel</span><span class=\"o\">]</span>\n          <span class=\"n\">exact</span> <span class=\"n\">Nat.sub_lt</span> <span class=\"o\">(</span><span class=\"n\">Nat.mul_pos</span> <span class=\"o\">(</span><span class=\"n\">Nat.sub_pos_of_lt</span> <span class=\"n\">hi</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Nat.zero_lt_of_lt</span> <span class=\"n\">hi</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">Nat.succ_pos</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span>\n\n        <span class=\"n\">loop</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n    <span class=\"k\">else</span>\n      <span class=\"n\">none</span>\n  <span class=\"n\">loop</span> <span class=\"mi\">0</span> <span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n<span class=\"n\">termination_by</span> <span class=\"n\">loop</span> <span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">nums.size</span> <span class=\"bp\">*</span> <span class=\"n\">nums.size</span> <span class=\"bp\">+</span> <span class=\"n\">nums.size</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">*</span> <span class=\"n\">nums.size</span> <span class=\"bp\">+</span> <span class=\"n\">j</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 404179795,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1700959963
    },
    {
        "content": "<p>Oh wow. Thanks for this. Never heard of the zify or nlinarith tactics. I'm going to look for some documentation on them.</p>",
        "id": 404187561,
        "sender_full_name": "King Crawford",
        "timestamp": 1700964660
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"528143\">King Crawford</span> has marked this topic as resolved.</p>",
        "id": 404191900,
        "sender_full_name": "Notification Bot",
        "timestamp": 1700967985
    }
]