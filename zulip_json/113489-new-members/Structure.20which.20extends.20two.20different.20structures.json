[
    {
        "content": "<p>Is it possible to make a structure which extends two different structures at once?</p>",
        "id": 340884269,
        "sender_full_name": "Dean Young",
        "timestamp": 1678460187
    },
    {
        "content": "<p><a href=\"https://leanprover.github.io/theorem_proving_in_lean/structures_and_records.html#inheritance\">https://leanprover.github.io/theorem_proving_in_lean/structures_and_records.html#inheritance</a></p>",
        "id": 340886943,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1678460839
    },
    {
        "content": "<p>If two structures extend a common substructure, then does their mutual extension know not to duplicate the items in the common substructure?</p>",
        "id": 341018629,
        "sender_full_name": "Dean Young",
        "timestamp": 1678513705
    },
    {
        "content": "<p>Yes</p>",
        "id": 341191595,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1678574074
    },
    {
        "content": "<p>If those fields have the same names.</p>",
        "id": 341191615,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1678574096
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"559197\">@Kind Bubble</span>, have you considered just trying this and seeing what happens?</p>",
        "id": 341195225,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1678576520
    },
    {
        "content": "<p>Lean will give you a much faster answer to \"what does this code do\" than zulip will.</p>",
        "id": 341195231,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1678576529
    },
    {
        "content": "<p>To follow-up on Eric's point, they way you would check this is:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">foo</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">bar</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">baz</span> <span class=\"kd\">extends</span> <span class=\"n\">foo</span><span class=\"o\">,</span> <span class=\"n\">bar</span>\n\n<span class=\"k\">#print</span> <span class=\"n\">baz</span>\n</code></pre></div>",
        "id": 341197648,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1678578555
    }
]