[
    {
        "content": "<p><code>Std.Range</code> has a parameter <code>step</code>. I would assume that, e.g., <code> { start := 1, stop := 10, step := 5 } : Std.Range</code>corresponds to something that has either two, or three elements (I don't know which one and the documentation doesn't say). However,</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"mi\">3</span> <span class=\"bp\">∈</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"mi\">10</span><span class=\"o\">:</span><span class=\"mi\">5</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">Membership.mem</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>because the definition of membership completely ignores the <code>step</code> and only checks the <code>start</code> and <code>stop</code>. Is this intended? It's extremely strange to me and should at least be documented.</p>",
        "id": 388208770,
        "sender_full_name": "Adomas Baliuka",
        "timestamp": 1693436152
    },
    {
        "content": "<p>yup, this seems wrong: <a href=\"https://github.com/leanprover/lean4/blob/a7efe5b60e86b26fefd4795b46d66af369b97329/src/Init/Data/Range.lean#L17-L18\">https://github.com/leanprover/lean4/blob/a7efe5b60e86b26fefd4795b46d66af369b97329/src/Init/Data/Range.lean#L17-L18</a></p>",
        "id": 388211127,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1693437677
    },
    {
        "content": "<p>yes this is a known issue</p>",
        "id": 388213711,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1693439364
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/lean4/pull/1962\">lean4#1962</a></p>",
        "id": 388213833,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1693439434
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"638715\">ab</span> has marked this topic as resolved.</p>",
        "id": 388224761,
        "sender_full_name": "Notification Bot",
        "timestamp": 1693444668
    },
    {
        "content": "<p>Doesn't look like that PR will be resolved soon. Maybe it would be worth at least adding a warning in the definition of Range?</p>",
        "id": 388224907,
        "sender_full_name": "Adomas Baliuka",
        "timestamp": 1693444754
    },
    {
        "content": "<p>How destructive would it be to just fix the <code>Membership</code> instance, <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> ? I can’t imagine it actually being used in too many places…</p>",
        "id": 388225869,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1693445312
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"243562\">@Adam Topaz</span> It's used in <code>for h : i in [a:b] do ...</code> notation for the type of <code>h</code> (<a href=\"https://github.com/leanprover/lean4/blob/a7efe5b60e86b26fefd4795b46d66af369b97329/src/Init/Data/Range.lean#L38-L51\">this code</a>)</p>",
        "id": 388274612,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1693470419
    },
    {
        "content": "<p>yeah, there is a fair amount of code which assumes that in the step=1 case it has that defeq</p>",
        "id": 388274718,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1693470457
    },
    {
        "content": "<p>the step&gt;1 case basically isn't used at all, hence the RFC</p>",
        "id": 388274757,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1693470473
    },
    {
        "content": "<p>Another possibility that was not mentioned is that there is a separate type for step&gt;1, and <code>[a:b:1]</code> and <code>[a:b]</code> are not just synonyms</p>",
        "id": 388274972,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1693470542
    },
    {
        "content": "<p>If you have <code>a : Array Nat</code> and you do <code>for h : i in [0:a.size] do ... something with a[i] ...</code>, then Lean can prove <code>i</code> is within bounds automatically (at least that's what I remembered -- you <em>might</em> need to help it by adding some GetElem tactic)</p>",
        "id": 388274978,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1693470543
    },
    {
        "content": "<p>that way you can just ignore the step argument when you don't care about it, we get <code>Range</code> and <code>StepRange</code> and the latter has an impoverished API</p>",
        "id": 388275062,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1693470574
    }
]