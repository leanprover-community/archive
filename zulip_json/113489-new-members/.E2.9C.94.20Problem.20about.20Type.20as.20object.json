[
    {
        "content": "<p>Hello, I was just messing around with Lean4, but I do not see why the code is not working. Lean tells me that it \"failed to synthesize instance OfNat (xxx 1) 2\", why is that? How to make the code work?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">gender</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">male</span> <span class=\"o\">:</span> <span class=\"n\">gender</span>\n  <span class=\"bp\">|</span> <span class=\"n\">female</span> <span class=\"o\">:</span> <span class=\"n\">gender</span>\n  <span class=\"bp\">|</span> <span class=\"n\">others</span> <span class=\"o\">:</span> <span class=\"n\">gender</span>\n<span class=\"c1\">-- universe v</span>\n<span class=\"kd\">def</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span> <span class=\"o\">:=</span> <span class=\"n\">Prod</span> <span class=\"n\">α</span> <span class=\"n\">α</span>\n<span class=\"kd\">def</span> <span class=\"n\">Nat_to_Type</span><span class=\"o\">:=</span><span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span>\n<span class=\"kd\">def</span> <span class=\"n\">xxx</span><span class=\"o\">:</span> <span class=\"n\">Nat_to_Type</span><span class=\"o\">:=</span>\n<span class=\"k\">fun</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Bool</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Nat</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span>      <span class=\"bp\">=&gt;</span> <span class=\"n\">gender</span>\n<span class=\"kd\">def</span> <span class=\"n\">xt</span><span class=\"o\">:</span> <span class=\"n\">xxx</span> <span class=\"mi\">0</span><span class=\"o\">:=</span><span class=\"n\">true</span>\n<span class=\"kd\">def</span> <span class=\"n\">xf</span><span class=\"o\">:</span> <span class=\"n\">xxx</span> <span class=\"mi\">1</span><span class=\"o\">:=</span><span class=\"mi\">2</span>\n<span class=\"kd\">def</span> <span class=\"n\">xn</span><span class=\"o\">:</span> <span class=\"n\">xxx</span> <span class=\"mi\">2</span><span class=\"o\">:=</span><span class=\"n\">gender.others</span>\n</code></pre></div>",
        "id": 387535483,
        "sender_full_name": "YuanqiPeng",
        "timestamp": 1693147022
    },
    {
        "content": "<p>Can you paste this as code using <a href=\"https://github.com/leanprover-community/mathlib/wiki/Code-in-backticks\">#backticks</a>, rather than as a screenshot?</p>",
        "id": 387535684,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1693147181
    },
    {
        "content": "<p>Number literals have some extra machinery, where it uses the expected type to work out how the literal is supposed to be interpreted. If you write <code>(2 : Nat)</code> you can avoid the error.</p>",
        "id": 387535982,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1693147407
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/113489-new-members/topic/Problem.20about.20Type.20as.20object/near/387535982\">said</a>:</p>\n<blockquote>\n<p>Number literals have some extra machinery, where it uses the expected type to work out how the literal is supposed to be interpreted. If you write <code>(2 : Nat)</code> you can avoid the error.</p>\n</blockquote>\n<p>yes! It solves the problem! Thank you! By the way, is the code \"universe v\" necessary? The tutorial said it does, but I see nothing wrong when I delete it...</p>",
        "id": 387537462,
        "sender_full_name": "YuanqiPeng",
        "timestamp": 1693148701
    },
    {
        "content": "<p>Its needed if you add <code>set_option autoImplicit false</code> at the top of your file</p>",
        "id": 387543548,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1693153823
    },
    {
        "content": "<p>If you don't, lean guesses it automatically</p>",
        "id": 387543559,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1693153836
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113489-new-members/topic/Problem.20about.20Type.20as.20object/near/387543559\">said</a>:</p>\n<blockquote>\n<p>If you don't, lean guesses it automatically</p>\n</blockquote>\n<p>thank you so much!!</p>",
        "id": 387621937,
        "sender_full_name": "YuanqiPeng",
        "timestamp": 1693211126
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"644390\">YuanqiPeng</span> has marked this topic as resolved.</p>",
        "id": 387621951,
        "sender_full_name": "Notification Bot",
        "timestamp": 1693211136
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"644390\">YuanqiPeng</span> has marked this topic as unresolved.</p>",
        "id": 387621974,
        "sender_full_name": "Notification Bot",
        "timestamp": 1693211149
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"644390\">YuanqiPeng</span> has marked this topic as resolved.</p>",
        "id": 387622038,
        "sender_full_name": "Notification Bot",
        "timestamp": 1693211164
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"644390\">YuanqiPeng</span> <a href=\"#narrow/stream/113489-new-members/topic/.E2.9C.94.20Problem.20about.20Type.20as.20object/near/387621937\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113489-new-members/topic/Problem.20about.20Type.20as.20object/near/387543559\">said</a>:</p>\n<blockquote>\n<p>If you don't, lean guesses it automatically</p>\n</blockquote>\n<p>thank you so much!!</p>\n</blockquote>\n<p>You can also do Type _ with autoImplicit false</p>",
        "id": 387631096,
        "sender_full_name": "MangoIV",
        "timestamp": 1693214838
    },
    {
        "content": "<p><code>Type*</code> is usually a better choice</p>",
        "id": 387767077,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1693261765
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> for me, <code>Type*</code> (presumably as a synonym to <code>Type _</code>?)  doesn't seem to work. Is it from an older version of Lean?</p>",
        "id": 387826245,
        "sender_full_name": "Adomas Baliuka",
        "timestamp": 1693295358
    },
    {
        "content": "<p><code>Type*</code> was introduced in Mathlib on August 10th with <a href=\"#narrow/stream/116290-rss/topic/Recent.20Commits.20to.20mathlib4.3Amaster/near/383442181\">this commit</a>.  It has not been removed since.  Did you update to <code>master</code> recently?</p>",
        "id": 387826478,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1693295496
    },
    {
        "content": "<p>Thanks. I've never tried updating yet. Running <code>lake update</code> (is that how to do it?)  gave me this error:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">updating</span> <span class=\"n\">lake</span><span class=\"bp\">-</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">mathlib</span> <span class=\"n\">to</span> <span class=\"n\">revision</span> <span class=\"n\">d7b5d387e1c0701865b8254e5be8c4ed422e7c1a</span>\n<span class=\"n\">warning</span><span class=\"o\">:</span> <span class=\"n\">improperly</span> <span class=\"n\">formatted</span> <span class=\"n\">manifest</span><span class=\"o\">:</span> <span class=\"n\">unknown</span> <span class=\"n\">manifest</span> <span class=\"n\">version</span> <span class=\"bp\">`</span><span class=\"mi\">5</span><span class=\"bp\">`</span>\n<span class=\"n\">updating</span> <span class=\"n\">lake</span><span class=\"bp\">-</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">std</span> <span class=\"n\">to</span> <span class=\"n\">revision</span> <span class=\"mi\">7194</span><span class=\"n\">b6b9b074e15c490e59491843bcd0f0feda68</span>\n<span class=\"n\">updating</span> <span class=\"n\">lake</span><span class=\"bp\">-</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">Qq</span> <span class=\"n\">to</span> <span class=\"n\">revision</span> <span class=\"mi\">99</span><span class=\"n\">ac78fb6d56fc6191eb8e430ba9521c1da0565b</span>\n<span class=\"n\">updating</span> <span class=\"n\">lake</span><span class=\"bp\">-</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">aesop</span> <span class=\"n\">to</span> <span class=\"n\">revision</span> <span class=\"mi\">8</span><span class=\"n\">aa27f2f550ecd856aa47aa612aea710022374b0</span>\n<span class=\"n\">updating</span> <span class=\"n\">lake</span><span class=\"bp\">-</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">Cli</span> <span class=\"n\">to</span> <span class=\"n\">revision</span> <span class=\"mi\">21</span><span class=\"n\">dac2e9cc7e3cf7da5800814787b833e680b2fd</span>\n<span class=\"n\">updating</span> <span class=\"n\">lake</span><span class=\"bp\">-</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">proofwidgets</span> <span class=\"n\">to</span> <span class=\"n\">revision</span> <span class=\"n\">a0c2cd0ac3245a0dade4f925bcfa97e06dd84229</span>\n<span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"bp\">./</span><span class=\"n\">lake</span><span class=\"bp\">-</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">proofwidgets</span><span class=\"bp\">/</span><span class=\"n\">lakefile.lean</span><span class=\"o\">:</span><span class=\"mi\">28</span><span class=\"o\">:</span><span class=\"mi\">27</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">function</span> <span class=\"n\">expected</span> <span class=\"n\">at</span>\n  <span class=\"n\">NPackage</span>\n<span class=\"n\">term</span> <span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"bp\">?</span><span class=\"n\">m.6347</span>\n<span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"bp\">./</span><span class=\"n\">lake</span><span class=\"bp\">-</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">proofwidgets</span><span class=\"bp\">/</span><span class=\"n\">lakefile.lean</span><span class=\"o\">:</span><span class=\"mi\">64</span><span class=\"o\">:</span><span class=\"mi\">29</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">function</span> <span class=\"n\">expected</span> <span class=\"n\">at</span>\n  <span class=\"n\">NPackage</span>\n<span class=\"n\">term</span> <span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"bp\">?</span><span class=\"n\">m.9379</span>\n<span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"bp\">./</span><span class=\"n\">lake</span><span class=\"bp\">-</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">proofwidgets</span><span class=\"bp\">/</span><span class=\"n\">lakefile.lean</span><span class=\"o\">:</span><span class=\"mi\">77</span><span class=\"o\">:</span><span class=\"mi\">26</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">unknown</span> <span class=\"n\">identifier</span> <span class=\"bp\">'</span><span class=\"n\">NPackage'</span>\n<span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"bp\">./</span><span class=\"n\">lake</span><span class=\"bp\">-</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">proofwidgets</span><span class=\"bp\">/</span><span class=\"n\">lakefile.lean</span><span class=\"o\">:</span><span class=\"mi\">80</span><span class=\"o\">:</span><span class=\"mi\">29</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">unknown</span> <span class=\"n\">identifier</span> <span class=\"bp\">'</span><span class=\"n\">NPackage'</span>\n<span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"bp\">./</span><span class=\"n\">lake</span><span class=\"bp\">-</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">proofwidgets</span><span class=\"bp\">/</span><span class=\"n\">lakefile.lean</span><span class=\"o\">:</span><span class=\"mi\">84</span><span class=\"o\">:</span><span class=\"mi\">18</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">unknown</span> <span class=\"n\">identifier</span> <span class=\"bp\">'</span><span class=\"n\">NPackage'</span>\n<span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"bp\">./</span><span class=\"n\">lake</span><span class=\"bp\">-</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">proofwidgets</span><span class=\"bp\">/</span><span class=\"n\">lakefile.lean</span><span class=\"o\">:</span><span class=\"mi\">88</span><span class=\"o\">:</span><span class=\"mi\">10</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">invalid</span> <span class=\"n\">field</span> <span class=\"kd\">notation</span><span class=\"o\">,</span> <span class=\"n\">type</span> <span class=\"n\">is</span> <span class=\"n\">not</span> <span class=\"n\">of</span> <span class=\"n\">the</span> <span class=\"n\">form</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"bp\">...</span><span class=\"o\">)</span> <span class=\"n\">where</span> <span class=\"n\">C</span> <span class=\"n\">is</span> <span class=\"n\">a</span> <span class=\"kd\">constant</span>\n  <span class=\"n\">job₁</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"bp\">?</span><span class=\"n\">m.14602</span>\n<span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"bp\">./</span><span class=\"n\">lake</span><span class=\"bp\">-</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">proofwidgets</span><span class=\"bp\">/</span><span class=\"n\">lakefile.lean</span><span class=\"o\">:</span><span class=\"mi\">89</span><span class=\"o\">:</span><span class=\"mi\">13</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">invalid</span> <span class=\"n\">field</span> <span class=\"kd\">notation</span><span class=\"o\">,</span> <span class=\"n\">type</span> <span class=\"n\">is</span> <span class=\"n\">not</span> <span class=\"n\">of</span> <span class=\"n\">the</span> <span class=\"n\">form</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"bp\">...</span><span class=\"o\">)</span> <span class=\"n\">where</span> <span class=\"n\">C</span> <span class=\"n\">is</span> <span class=\"n\">a</span> <span class=\"kd\">constant</span>\n  <span class=\"n\">lib</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"bp\">?</span><span class=\"n\">m.14586</span> <span class=\"n\">pkg</span> <span class=\"n\">x</span><span class=\"bp\">✝¹</span>\n<span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"bp\">./</span><span class=\"n\">lake</span><span class=\"bp\">-</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">proofwidgets</span><span class=\"bp\">/</span><span class=\"n\">lakefile.lean</span><span class=\"o\">:</span><span class=\"mi\">90</span><span class=\"o\">:</span><span class=\"mi\">10</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">invalid</span> <span class=\"n\">field</span> <span class=\"kd\">notation</span><span class=\"o\">,</span> <span class=\"n\">type</span> <span class=\"n\">is</span> <span class=\"n\">not</span> <span class=\"n\">of</span> <span class=\"n\">the</span> <span class=\"n\">form</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"bp\">...</span><span class=\"o\">)</span> <span class=\"n\">where</span> <span class=\"n\">C</span> <span class=\"n\">is</span> <span class=\"n\">a</span> <span class=\"kd\">constant</span>\n  <span class=\"n\">job₂</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"bp\">?</span><span class=\"n\">m.14687</span>\n<span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"bp\">./</span><span class=\"n\">lake</span><span class=\"bp\">-</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">proofwidgets</span><span class=\"bp\">/</span><span class=\"n\">lakefile.lean</span><span class=\"o\">:</span> <span class=\"n\">package</span> <span class=\"n\">configuration</span> <span class=\"n\">has</span> <span class=\"n\">errors</span>\n</code></pre></div>",
        "id": 387828201,
        "sender_full_name": "Adomas Baliuka",
        "timestamp": 1693296159
    },
    {
        "content": "<p>Hmm, I think that other have had <a href=\"#narrow/stream/270676-lean4/topic/lake.20update.20issue\">similar issues</a> updating old projects.  I'm sorry, but I do not really know how to help with this...</p>",
        "id": 387828952,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1693296435
    },
    {
        "content": "<p>If you run lake update you need to copy <code>lake-packages/mathlib/lean-toolchain</code> to the root directory of your project also to use the more recent and correct lean version for the mathlib you've updated to</p>",
        "id": 387832707,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1693297922
    },
    {
        "content": "<p>The way to update is to follow the update instructions, unfortunately. A lot of people just try <code>lake update</code> which is not enough.</p>",
        "id": 387836406,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1693299357
    },
    {
        "content": "<blockquote>\n<p>Type* (presumably as a synonym to Type _</p>\n</blockquote>\n<p>Just to come back to this specific bit -- I think that the two are not quite the same -- <code>Type *</code> in Lean 4 means \"a type in some arbitrary universe that I don't care about specifically and doesn't really have any particular relationship to anything else in my definition\", whereas <code>Type _</code> means \"a type in some universe, but hey Lean maybe go calculate a specific reasonable value for the universe <code>_</code> based perhaps on other universes in my definition\".</p>\n<p>(I'm still slightly fuzzy myself despite Eric helpfully explaining this to me, so Cunningham's Law may apply and someone may correct the above even further, but maybe it helps to point out.)</p>",
        "id": 387836897,
        "sender_full_name": "Julian Berman",
        "timestamp": 1693299521
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"321696\">@Julian Berman</span>  Interesting. Do you know an example where one cannot be replaced by the other?</p>",
        "id": 387870088,
        "sender_full_name": "Adomas Baliuka",
        "timestamp": 1693311300
    },
    {
        "content": "<p>There are examples in mathlib where using <code>Type _</code> resulted in Lean making universe choices which were not as polymorphic (i.e. general) as they could have been. <code>Type*</code> forces maximal universe polymorphism.</p>",
        "id": 387871172,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1693311684
    },
    {
        "content": "<blockquote>\n<p>Do you know an example where one cannot be replaced by the other?</p>\n</blockquote>\n<p>Maybe here's a trivial one I get by just typing some stuff :)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">f</span> <span class=\"n\">A</span>\n<span class=\"k\">#check</span> <span class=\"n\">f</span>     <span class=\"bp\">■</span> <span class=\"n\">f.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">,</span> <span class=\"n\">u_2</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">u_2</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_2</span>\n                                                                                                                                                                                                               <span class=\"bp\">│~</span>\n<span class=\"kd\">def</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">f</span> <span class=\"n\">A</span>     <span class=\"bp\">■</span> <span class=\"n\">application</span> <span class=\"n\">type</span> <span class=\"n\">mismatch</span>    <span class=\"n\">f</span> <span class=\"n\">A</span>  <span class=\"n\">argument</span>    <span class=\"n\">A</span>  <span class=\"n\">has</span> <span class=\"n\">type</span>    <span class=\"kt\">Type</span> <span class=\"n\">u_1</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">u_1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span>  <span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>    <span class=\"kt\">Type</span> <span class=\"n\">u_2</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">u_2</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span>         <span class=\"bp\">│~</span>\n<span class=\"k\">#check</span> <span class=\"n\">g</span>     <span class=\"bp\">■</span> <span class=\"n\">g.</span><span class=\"o\">{</span><span class=\"n\">u_3</span><span class=\"o\">,</span> <span class=\"n\">u_2</span><span class=\"o\">,</span> <span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_2</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">u_3</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_3</span>\n</code></pre></div>\n<p>In the first one it looks like Lean says \"there are 2 universes here\" (and does some solving to figure out it can make due with 2 with the _'s).<br>\nIn the second one you get 3 universes and an error because Lean doesn't know (or agree to let you) have f's argument live in the universe from the <code>Type*</code> of <code>A</code>.</p>\n<p>(Again someone may explain this better than I can)</p>",
        "id": 387871661,
        "sender_full_name": "Julian Berman",
        "timestamp": 1693311870
    },
    {
        "content": "<p>I guess this is a trivial example of what Kevin just mentioned, the first one is less polymorphic.</p>",
        "id": 387871889,
        "sender_full_name": "Julian Berman",
        "timestamp": 1693311954
    },
    {
        "content": "<p>So here <code>Type*</code> is bad because <code>Type*</code> means <code>Type u_n</code> where <code>u_n</code> means \"new universe variable different to all other ones\". But there are other places where <code>Type _</code> is bad because Lean, although it cleverly worked out the correct universes in Julian's example, sometimes was missing something and creating lemmas which were not as general as they could have been in terms of universes.</p>",
        "id": 387872171,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1693312053
    },
    {
        "content": "<p>Yeah, <code>Type*</code> is \"with a fresh universe level variable <code>u</code>, <code>Type u</code>\", but <code>Type _</code> means \"with a fresh universe level <em>meta</em>variable <code>?u</code>, <code>Type ?u</code>.</p>\n<p>The difference is that Lean is free to assign <code>?u</code> to be anything while it's elaborating expressions to solve constraints, but <code>u</code> is an actual parameter that will appear as an additional universe level parameter in the current theorem/definition and can't be assigned while solving constraints.</p>",
        "id": 387897497,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1693320311
    },
    {
        "content": "<p>Using <code>Type*</code> and <code>Sort*</code> guarantees your definitions/theorems are maximally universe polymorphic, but as <span class=\"user-mention\" data-user-id=\"321696\">@Julian Berman</span> showed, this can be <em>too</em> polymorphic sometimes. In this case, you should write</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">f</span> <span class=\"n\">A</span>\n</code></pre></div>\n<p>to explictly link up the universe levels.</p>",
        "id": 387897842,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1693320403
    },
    {
        "content": "<p>(To add to the confusion, <code>Type*</code> in Lean 3  is <code>Type _</code> in Lean 4. <em>Except</em>, <code>variable (X Y Z : Type*)</code> in Lean 3 is <code>variable (X Y Z : Type*)</code> in Lean 4. The <code>variable</code> command in Lean 3 worked differently from the Lean 4 <code>variable</code> command.)</p>",
        "id": 387898580,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1693320609
    }
]