[
    {
        "content": "<p>I'd really like to make a named subtype inside of a type class declaration, but I get an error that I don't understand when I try this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span><span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">my_subtype</span> <span class=\"o\">:=</span> <span class=\"n\">Subtype</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">:</span><span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">↦</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"o\">))</span>\n  <span class=\"n\">my_fun</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">my_subtype</span>\n  <span class=\"n\">trivial</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">my_fun</span> <span class=\"n\">a</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">property</span>\n  <span class=\"n\">val</span> <span class=\"o\">:</span> <span class=\"n\">my_subtype</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">↦</span> <span class=\"n\">x.val</span>\n</code></pre></div>",
        "id": 387544610,
        "sender_full_name": "zack kenyon",
        "timestamp": 1693154853
    },
    {
        "content": "<p>In particular:</p>\n<p>invalid field notation, type is not of the form (C ...) where C is a constant<br>\n  x<br>\nhas type<br>\n  my_subtype</p>",
        "id": 387544848,
        "sender_full_name": "zack kenyon",
        "timestamp": 1693155092
    },
    {
        "content": "<p><code>:=</code> sets a default value, it doesn't assign things directly</p>",
        "id": 387545015,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1693155236
    },
    {
        "content": "<p>so <code>my_subtype</code> is of type <code>Type u</code></p>",
        "id": 387545068,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1693155248
    },
    {
        "content": "<p>If <code>x : my_subtype</code> then <code>x.val</code> means <code>my_subtype.val x</code> but there's no such function as <code>my_subtype.val</code> so you get the error you see.</p>",
        "id": 387545072,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1693155252
    },
    {
        "content": "<p>If <code>x : my_subtype</code> then <code>x.val</code> means <code>my_subtype.val x</code> but there's no such function as <code>my_subtype.val</code> so you get the error you see.</p>",
        "id": 387545085,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1693155263
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"284160\">Eric Rodriguez</span><br>\nIs there a way to \"assign things directly\"?</p>",
        "id": 387545220,
        "sender_full_name": "zack kenyon",
        "timestamp": 1693155381
    },
    {
        "content": "<p>If you already know what the answer is then why do you want to make a field of the structure?</p>",
        "id": 387545259,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1693155431
    },
    {
        "content": "<p>This seems to work fine</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span><span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">my_prop</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">:</span><span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">↦</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n  <span class=\"c1\">--my_subtype := Subtype (fun (a:α) ↦ (a = a))</span>\n  <span class=\"n\">my_fun</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">Subtype</span> <span class=\"n\">my_prop</span> <span class=\"c1\">--my_subtype</span>\n  <span class=\"n\">val</span> <span class=\"o\">:</span> <span class=\"n\">Subtype</span> <span class=\"n\">my_prop</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">↦</span> <span class=\"n\">x.val</span>\n</code></pre></div>",
        "id": 387545375,
        "sender_full_name": "zack kenyon",
        "timestamp": 1693155522
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> I'm sorry, but I don't know what you're asking me.</p>",
        "id": 387545413,
        "sender_full_name": "zack kenyon",
        "timestamp": 1693155551
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span>  The problem here is that I have hypotheses that my typeclass must satisfy which depend on functions defined over subtypes. These subtypes get very unwieldy to type, and have much more conventional names that I'd like to use instead.</p>",
        "id": 387545695,
        "sender_full_name": "zack kenyon",
        "timestamp": 1693155798
    },
    {
        "content": "<p><code>my_prop := fun (a:α) ↦ (a = a)</code> means \"let the user define <code>my_prop</code> if they want, but <em>if</em> they do not define it then fall back on the default value <code>fun (a:α) ↦ (a = a)</code>. My understanding was that you were asking \"how do I make <code>my_prop</code> always be the default value?\" and my answer was \"don't make <code>my_prop</code> a field of the structure if you don't want the user to be able to choose the value\".</p>",
        "id": 387546642,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1693156779
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> Ah, no, I was just guessing at the behavior of <code>:=</code> inside of the where, and didn't consider the possibility that its purpose was to specify a default.</p>\n<p>My actual question is then: \"how do I declare a variable inside of a where clause that is not a field?\"</p>\n<p>The variable I am interested in can be computed from only alpha and the fields defined so far. It's just an intermediate step which is laborious to type over and over.</p>",
        "id": 387547398,
        "sender_full_name": "zack kenyon",
        "timestamp": 1693157561
    },
    {
        "content": "<p>One could imagine</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span><span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"k\">let</span> <span class=\"n\">my_subtype</span> <span class=\"o\">:=</span> <span class=\"n\">Subtype</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">:</span><span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">↦</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"o\">))</span>\n  <span class=\"n\">my_fun</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">my_subtype</span>\n  <span class=\"n\">trivial</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">my_fun</span> <span class=\"n\">a</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">property</span>\n  <span class=\"n\">val</span> <span class=\"o\">:</span> <span class=\"n\">my_subtype</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">↦</span> <span class=\"n\">x.val</span>\n</code></pre></div>\n<p>but this feature does not exist (yet?)</p>",
        "id": 387547510,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1693157677
    },
    {
        "content": "<p>Aside: I've sometimes felt I wanted this feature for function definitions too, where you could write something like <code>def f (n : Nat) (let ty := Fin n) (x : ty) : ty := ...</code>. The type here would be <code>Nat -&gt; let ty := Fin n; ty -&gt; ty</code>, and if you wanted <code>Nat -&gt; Fin n -&gt; Fin n</code> you'd write <code>letI</code> instead of <code>let</code> (for \"inlined <code>let</code>\")</p>",
        "id": 387547881,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1693158016
    },
    {
        "content": "<p>That does seem like something I have also desired.</p>",
        "id": 387549895,
        "sender_full_name": "zack kenyon",
        "timestamp": 1693160020
    },
    {
        "content": "<p>ok, I'll mark this as closed, thanks.</p>",
        "id": 387549904,
        "sender_full_name": "zack kenyon",
        "timestamp": 1693160036
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"622388\">zack kenyon</span> has marked this topic as resolved.</p>",
        "id": 387549911,
        "sender_full_name": "Notification Bot",
        "timestamp": 1693160041
    }
]