[
    {
        "content": "<p>I just solved level 8 of advanced addition world in the natural number game, but I'm not sure whether my solution is recommended. I get a weirdly labeled number ?m_1 when I try to apply the <code>add_left_cancel</code> statement. Can someone tell me if there's a better solution? </p>\n<p><a href=\"/user_uploads/3121/WUS3DeN57weaN25jk0gte7M3/Screenshot-from-2023-03-24-18-41-54.png\">Screenshot-from-2023-03-24-18-41-54.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/WUS3DeN57weaN25jk0gte7M3/Screenshot-from-2023-03-24-18-41-54.png\" title=\"Screenshot-from-2023-03-24-18-41-54.png\"><img src=\"/user_uploads/3121/WUS3DeN57weaN25jk0gte7M3/Screenshot-from-2023-03-24-18-41-54.png\"></a></div>",
        "id": 344333410,
        "sender_full_name": "Rick de Wolf",
        "timestamp": 1679679871
    },
    {
        "content": "<p>If you specifiy which arguments you want to take for <code>add_left_cancel</code> then you wont get the <code>?m_1</code> goal.<br>\nThese questionmark things are called metavariables and are used to represent placeholders that lean doesn't know how to fill in yet. There is nothing really wrong with having them show up in the middle of a proof, but many people try to avoid it as the proof is often clearer if everything is spelt out from the start.</p>",
        "id": 344334172,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1679680116
    },
    {
        "content": "<p>i.e. you can do <code>apply add_left_cancel a</code> I believe</p>",
        "id": 344334324,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1679680171
    },
    {
        "content": "<p>Ah, that command makes the metavariable disappear, it's all looking good now. </p>\n<p>One thing I'm a little confused by is the fact that in this state:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">mynat</span><span class=\"o\">,</span>\n<span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">a</span>\n<span class=\"bp\">‚ä¢</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">0</span>\n</code></pre></div>\n<p>using <code>exact h</code> solves the goal. The docs for <code>exact</code> say that it'll close the goal if it can unify <code>h</code> and the goal, but it would have to go through all of the theorems to find <code>add_zero</code> to do this. Does unification mean it can close goals if it's just one <code>rw</code> that's in the way?</p>",
        "id": 344489420,
        "sender_full_name": "Rick de Wolf",
        "timestamp": 1679751314
    },
    {
        "content": "<p>No, this is what we call \"definitional equality\". The addition operation on mynat is defined by recursion on the right argument, in such a way that a+0 is just a. You might notice that this wouldn't work with 0+a, for example.</p>",
        "id": 344498618,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1679754030
    },
    {
        "content": "<p>It's generally not great practice to write proofs in a way that relies on the specific definitions you (or someone else) came up with</p>",
        "id": 344498950,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1679754110
    },
    {
        "content": "<p>Definitional equality is a part of the story which I do not talk about in the natural number game. Your <code>exact h</code> proof is a valid proof, because the actual proof of <code>add_zero</code> under the hood is <code>refl</code>. There are several kinds of equality which show up in Lean's type theory and because most of them are not mathematical concepts (mathematicians only have one kind of equality) I decided not to introduce them in the game. Definitional equality is not a mathematical concept in the sense that <code>x+0=x</code> is definitionally true but <code>0+x=x</code> is not, whereas mathematically these statements are in some sense both equally valid.</p>",
        "id": 344500581,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1679754644
    },
    {
        "content": "<p><code>add_zero</code> is presented to you as an axiom but it's proof is secretly <code>refl</code>, whereas <code>zero_add</code> is proved by induction and so uses the axiom <code>mynat.rec</code> under the hood meaning that it's not true but definition.</p>",
        "id": 344501130,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1679754821
    },
    {
        "content": "<p>Thanks for the explanations Ruben and Kevin</p>",
        "id": 344828135,
        "sender_full_name": "Rick de Wolf",
        "timestamp": 1679914522
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"603023\">Rick de Wolf</span> has marked this topic as resolved.</p>",
        "id": 344828164,
        "sender_full_name": "Notification Bot",
        "timestamp": 1679914530
    }
]