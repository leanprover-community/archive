[
    {
        "content": "<p>Hello everyone, <br>\nI am trying to understand the correspondence between range N and fin N.  As far as I understand these two are the same, but I can't figure out how to move one to the other.</p>\n<p>For example in mathlib the geometirc sum is written in terms of <a href=\"https://leanprover-community.github.io/mathlib_docs/algebra/geom_sum.html#geom_sum_eq\">algebra.geom_sum</a>.  If I have a sum over fin N how can I use the geometric sum formula. </p>\n<p>The code below contains a general sum and a geometric sum but with the sum in terms of fin: N instead of range N. </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">sum_finN_sum_rangeN</span> <span class=\"o\">{</span><span class=\"n\">N</span><span class=\"o\">:</span><span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℂ</span><span class=\"o\">):</span>\n  <span class=\"bp\">∑</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">N</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"bp\">∑</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"o\">(</span><span class=\"n\">range</span> <span class=\"n\">N</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"n\">i</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">induction</span> <span class=\"n\">N</span> <span class=\"k\">with</span> <span class=\"n\">N</span> <span class=\"n\">hN</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- The case of N = 0. Both sides are zero</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">fintype.univ_of_is_empty</span><span class=\"o\">,</span> <span class=\"n\">finset.sum_empty</span><span class=\"o\">,</span> <span class=\"n\">range_zero</span><span class=\"o\">],</span>\n\n  <span class=\"c1\">-- The case of N = succ something</span>\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">geom_sum_finN</span> <span class=\"o\">{</span><span class=\"n\">N</span><span class=\"o\">:</span><span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">hN</span><span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">&lt;</span> <span class=\"n\">N</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">α</span><span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hα</span><span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">≠</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"bp\">∑</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">N</span><span class=\"o\">),</span> <span class=\"n\">α</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">:</span><span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">α</span><span class=\"bp\">^</span><span class=\"n\">N</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"c1\">-- rw geom_sum_eq, -- This of course does not work!</span>\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>Thanks!</p>",
        "id": 351079625,
        "sender_full_name": "MohanadAhmed",
        "timestamp": 1681917461
    },
    {
        "content": "<p><code>range n</code> is a finite subset of <code>ℕ</code>. It is a term of type <code>finset ℕ</code>. <code>fin n</code> is a type in and of itself.</p>",
        "id": 351080103,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1681917568
    },
    {
        "content": "<p><del>docs#finset.sum_fin_eq_sum_range</del> <a href=\"https://leanprover-community.github.io/mathlib_docs/find/fin.sum_univ_eq_sum_range\">docs#fin.sum_univ_eq_sum_range</a> { is the theorem that links both together (notice that the name is very guessable)</p>",
        "id": 351080338,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1681917615
    },
    {
        "content": "<p>Also note that in your sum, the <code>i</code> in <code>f i</code> has an arrow before it (if you look at the infoview). This is because Lean is automatically converting the <code>i</code> from a <code>fin n</code> into a natural number using a system called a coercion.</p>",
        "id": 351080545,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1681917660
    },
    {
        "content": "<p>Thanks! that was very informative.</p>",
        "id": 351085248,
        "sender_full_name": "MohanadAhmed",
        "timestamp": 1681918624
    },
    {
        "content": "<p>I guess one subtle difference in this context is that if you want to sum <code>f</code> over <code>range n</code> then <code>f</code> needs to be defined on all naturals, whereas if you only want to sum <code>f</code> over <code>fin n</code> then <code>f</code> only needs to be defined on <code>fin n</code>.</p>",
        "id": 351118919,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1681926966
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/range.20N.20and.20fin.20N/near/351118919\">said</a>:</p>\n<blockquote>\n<p>I guess one subtle difference in this context is that if you want to sum <code>f</code> over <code>range n</code> then <code>f</code> needs to be defined on all naturals, whereas if you only want to sum <code>f</code> over <code>fin n</code> then <code>f</code> only needs to be defined on <code>fin n</code>.</p>\n</blockquote>\n<p>So if I understand correctly, refuses the following lemma because the function is expected to map <code>fin N</code> to <code>\\C</code>.  So is there a way to go the other way round i.e. force a function that takes naturals to take <code>fin N</code>?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">sum_finN_sum_rangeN</span> <span class=\"o\">{</span><span class=\"n\">N</span><span class=\"o\">:</span><span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">ℂ</span><span class=\"o\">):</span>\n  <span class=\"bp\">∑</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">N</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"bp\">∑</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"o\">(</span><span class=\"n\">range</span> <span class=\"n\">N</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">f</span>  <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 351133382,
        "sender_full_name": "MohanadAhmed",
        "timestamp": 1681931217
    },
    {
        "content": "<p>You will have to define <code>f</code> outside of <code>range N</code>. It shouldn't matter what you define it to be, but you'll need <em>something</em>.</p>",
        "id": 351134173,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1681931468
    },
    {
        "content": "<p>Or you can use the lemma I crossed out</p>",
        "id": 351134840,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1681931684
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"284160\">@Eric Rodriguez</span> <br>\nIn the lemma you crossed out, the following scary looking statement is the part Yael is talking about (I am guessing it defines outside fin N to be zero)?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">dite</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">),</span> <span class=\"n\">c</span> <span class=\"o\">⟨</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">⟩)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">i</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">),</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 351136344,
        "sender_full_name": "MohanadAhmed",
        "timestamp": 1681932164
    },
    {
        "content": "<p>Precisely so, yes</p>",
        "id": 351136688,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1681932285
    },
    {
        "content": "<p><code>dite</code> just means \"if then else\"</p>",
        "id": 351143892,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1681934910
    },
    {
        "content": "<p>\"if i &lt; n the evaluate c on i else 0\". The idea is that to make a term of type <code>Fin N</code> you have to give a <em>pair</em> of pieces of data -- first a natural number, and second a proof that it's less than N. That's what <code>⟨i, h⟩</code> is. In particular, an element of <code>Fin N</code> is <em>not</em> \"a natural number\"  -- it is a pair.</p>",
        "id": 351144257,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1681935028
    },
    {
        "content": "<p><strong>d</strong>ependent <strong>i</strong>f <strong>t</strong>hen <strong>e</strong>lse, to be precide. The \"dependent bit refers to the fact that the branches are allowed to use the proofs of <code>p</code> or of <code>¬p</code>.</p>",
        "id": 351144292,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1681935039
    }
]