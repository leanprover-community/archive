[
    {
        "content": "<p>Hello,<br>\nI have a function <code>g(c) = f(x_star + c*d) for c in [0, alpha]</code> and that f is twice continuously differentiable. Then <code>g'(c) = f'(x_star + c*d) d</code>.  Note here that x_star and d are vectors and alpha is a real number. How do I show that something is a derivative of a function in lean? I realise this is probably quite complicated but would like some help in getting started.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span> <span class=\"c1\">-- imports all the Lean tactics</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.real.basic</span> <span class=\"c1\">-- imports the real numbers</span>\n<span class=\"kn\">import</span> <span class=\"n\">analysis.calculus.cont_diff</span>\n<span class=\"kn\">import</span> <span class=\"n\">analysis.calculus.iterated_deriv</span>\n<span class=\"kn\">open</span> <span class=\"n\">set</span>\n\n<span class=\"c1\">-- Declare a type E with some properties</span>\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">normed_add_comm_group</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">normed_space</span> <span class=\"n\">ℝ</span> <span class=\"n\">E</span><span class=\"o\">]</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">MWE</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">E</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">α</span><span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x_star</span> <span class=\"n\">d</span><span class=\"o\">:</span> <span class=\"n\">E</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">hα</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">h_twice_continuous_diffable</span><span class=\"o\">:</span> <span class=\"n\">cont_diff_on</span> <span class=\"n\">ℝ</span> <span class=\"mi\">2</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">x_star</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"bp\">•</span> <span class=\"n\">d</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">Icc</span> <span class=\"mi\">0</span> <span class=\"n\">α</span><span class=\"o\">))</span>\n<span class=\"o\">(</span><span class=\"n\">g</span><span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">x_star</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"bp\">•</span> <span class=\"n\">d</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">hg</span><span class=\"o\">:</span> <span class=\"n\">g</span> <span class=\"bp\">=</span> <span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">x_star</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"bp\">•</span> <span class=\"n\">d</span><span class=\"o\">))</span>\n<span class=\"o\">(</span><span class=\"n\">h_diff_g</span> <span class=\"o\">:</span> <span class=\"n\">differentiable_on</span> <span class=\"n\">ℝ</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">Icc</span> <span class=\"mi\">0</span> <span class=\"n\">α</span><span class=\"o\">)):</span>\n<span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">Icc</span> <span class=\"mi\">0</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">deriv_within</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">Icc</span> <span class=\"mi\">0</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">fderiv_within</span> <span class=\"n\">ℝ</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">E</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">segment</span> <span class=\"n\">ℝ</span> <span class=\"n\">x_star</span> <span class=\"o\">(</span><span class=\"n\">x_star</span> <span class=\"bp\">+</span> <span class=\"n\">α</span> <span class=\"bp\">•</span> <span class=\"n\">d</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">x_star</span> <span class=\"bp\">+</span> <span class=\"n\">x</span> <span class=\"bp\">•</span> <span class=\"n\">d</span><span class=\"o\">))</span> <span class=\"n\">d</span><span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intros</span> <span class=\"n\">x</span> <span class=\"n\">hx</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">hg</span><span class=\"o\">],</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">deriv_within</span><span class=\"o\">,</span>\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 345522555,
        "sender_full_name": "Abu Al Hassan",
        "timestamp": 1680126974
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/fderiv_within.comp\">docs#fderiv_within.comp</a> together with <a href=\"https://leanprover-community.github.io/mathlib_docs/find/fderiv_within_deriv_within\">docs#fderiv_within_deriv_within</a> should get you started, you should not unfold <code>deriv_within</code>.</p>",
        "id": 345561306,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1680151160
    },
    {
        "content": "<p>Thank you, Moritz! That was super helpful.</p>",
        "id": 346330649,
        "sender_full_name": "Abu Al Hassan",
        "timestamp": 1680430334
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"583816\">Abu Al Hassan</span> has marked this topic as resolved.</p>",
        "id": 346330663,
        "sender_full_name": "Notification Bot",
        "timestamp": 1680430340
    }
]