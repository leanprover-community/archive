[
    {
        "content": "<p>Hello, it's my first time here and I'm learning Lean by trying to convert PLFA code into Lean4.</p>\n<p>My issue comes from this section: <a href=\"https://plfa.github.io/Inference/#testing-the-error-cases\">https://plfa.github.io/Inference/#testing-the-error-cases</a></p>\n<p>Given the <code>synthesize</code> function (which returns a decidable),  to assert that the answer is <code>no</code> (called <code>isFalse</code> in Lean terms), we can do the following in Agda:</p>\n<div class=\"codehilite\" data-code-language=\"Agda\"><pre><span></span><code><span class=\"nf\">synthesize</span><span class=\"w\"> </span><span class=\"ow\">:</span><span class=\"w\"> </span><span class=\"ow\">∀</span><span class=\"w\"> </span><span class=\"o\">(</span>Γ<span class=\"w\"> </span><span class=\"ow\">:</span><span class=\"w\"> </span>Context<span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span>M<span class=\"w\"> </span><span class=\"ow\">:</span><span class=\"w\"> </span>Term⁺<span class=\"o\">)</span>\n<span class=\"w\">             </span><span class=\"c1\">---------------------------</span>\n<span class=\"w\">           </span><span class=\"ow\">→</span><span class=\"w\"> </span>Dec<span class=\"w\"> </span><span class=\"o\">(</span>∃[<span class=\"w\"> </span>A<span class=\"w\"> </span>]<span class=\"w\"> </span>Γ<span class=\"w\"> </span>⊢<span class=\"w\"> </span>M<span class=\"w\"> </span>↑<span class=\"w\"> </span>A<span class=\"w\"> </span><span class=\"o\">)</span>\n\n<span class=\"nf\">_</span><span class=\"w\"> </span><span class=\"ow\">:</span><span class=\"w\"> </span>synthesize<span class=\"w\"> </span>∅<span class=\"w\"> </span><span class=\"o\">((</span>ƛ<span class=\"w\"> </span><span class=\"s\">\"x\"</span><span class=\"w\"> </span>⇒<span class=\"w\"> </span>`<span class=\"w\"> </span><span class=\"s\">\"y\"</span><span class=\"w\"> </span>↑<span class=\"o\">)</span><span class=\"w\"> </span>↓<span class=\"w\"> </span><span class=\"o\">(</span>`ℕ<span class=\"w\"> </span>⇒<span class=\"w\"> </span>`ℕ<span class=\"o\">))</span><span class=\"w\"> </span>≡<span class=\"w\"> </span>no<span class=\"w\"> </span>_\n_<span class=\"w\"> </span><span class=\"ow\">=</span><span class=\"w\"> </span>refl\n</code></pre></div>\n<p>In Agda, decidables are proof-relevant, but it seems that there's no such thing as <code>PDecidable</code> in mathlib4, so I have defined it myself:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">abbrev</span> <span class=\"n\">PDecidable</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">IsEmpty</span> <span class=\"n\">α</span> <span class=\"bp\">⊕'</span> <span class=\"n\">α</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">synthesize</span> <span class=\"o\">(</span><span class=\"bp\">Γ</span> <span class=\"o\">:</span> <span class=\"n\">Context</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">TermS</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">PDecidable</span> <span class=\"o\">(</span><span class=\"bp\">Σ</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"bp\">Γ</span> <span class=\"bp\">⊢</span> <span class=\"n\">m</span> <span class=\"bp\">↥</span> <span class=\"n\">a</span><span class=\"o\">)</span>  <span class=\"o\">:=</span> <span class=\"bp\">...</span>\n</code></pre></div>\n<p>Now, as before, I want to assert that the LHS of the equation is indeed of variant <code>.inl</code>, but the translation of the Agda code above gives an error on the underscore:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">synthesize</span> <span class=\"bp\">∅</span> <span class=\"o\">((</span><span class=\"bp\">ƛ</span> <span class=\"s2\">\"x\"</span> <span class=\"o\">:</span> <span class=\"bp\">`</span><span class=\"s2\">\"y\"</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">the</span> <span class=\"o\">(</span><span class=\"n\">ℕt</span> <span class=\"bp\">=⇒</span> <span class=\"n\">ℕt</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"bp\">.</span><span class=\"n\">inl</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rfl</span>\n<span class=\"n\">_</span><span class=\"o\">:</span> <span class=\"n\">don't</span> <span class=\"n\">know</span> <span class=\"n\">how</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"n\">placeholder</span> <span class=\"n\">for</span> <span class=\"n\">argument</span> <span class=\"bp\">'</span><span class=\"n\">val'</span>\n</code></pre></div>\n<p>What is the Lean way of doing this?</p>\n<p>Many thanks!</p>",
        "id": 358878177,
        "sender_full_name": "rami3l",
        "timestamp": 1684286668
    },
    {
        "content": "<p>Can you elaborate more on the objection to using <code>Decidable</code>? I think there's some additional context missing, is there a hypothesis that the proposition underlying<code>synthesize ..</code> is false or that it comes  from the left constructor?</p>",
        "id": 358880301,
        "sender_full_name": "Chris Bailey",
        "timestamp": 1684288270
    },
    {
        "content": "<p>These may or may not be helpful jumping-off points:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span>  <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"n\">h'</span> <span class=\"o\">:</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">isTrue</span> <span class=\"n\">h</span> <span class=\"bp\">=</span> <span class=\"n\">isTrue</span> <span class=\"n\">h'</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span>  <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"n\">h'</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">isFalse</span> <span class=\"n\">h</span> <span class=\"bp\">=</span> <span class=\"n\">isFalse</span> <span class=\"n\">h'</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span>  <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"n\">h'</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">lhs</span> <span class=\"o\">:</span> <span class=\"n\">Decidable</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h''</span> <span class=\"o\">:</span> <span class=\"n\">lhs</span> <span class=\"bp\">=</span> <span class=\"n\">isFalse</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">lhs</span> <span class=\"bp\">=</span> <span class=\"n\">isFalse</span> <span class=\"n\">h'</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h''</span><span class=\"o\">]</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span>  <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">Decidable</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">l</span> <span class=\"bp\">=</span> <span class=\"n\">isFalse</span> <span class=\"n\">h</span>\n  <span class=\"bp\">|</span> <span class=\"n\">isTrue</span> <span class=\"n\">h'</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">absurd</span> <span class=\"n\">h'</span> <span class=\"n\">h</span>\n  <span class=\"bp\">|</span> <span class=\"n\">isFalse</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 358881180,
        "sender_full_name": "Chris Bailey",
        "timestamp": 1684289017
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"228466\">@Chris Bailey</span> Thanks for your reply!</p>\n<p><code>synthesize</code> here is a recursive function that should (by its definition) evaluate(?) to some <code>.inl</code> with the arguments specified above.</p>\n<div class=\"codehilite\" data-code-language=\"Agda\"><pre><span></span><code>synthesize<span class=\"w\"> </span>Γ<span class=\"w\"> </span><span class=\"o\">(</span>L<span class=\"w\"> </span>·<span class=\"w\"> </span>M<span class=\"o\">)</span><span class=\"w\"> </span><span class=\"kr\">with</span><span class=\"w\"> </span>synthesize<span class=\"w\"> </span>Γ<span class=\"w\"> </span>L\n<span class=\"ow\">...</span><span class=\"w\"> </span><span class=\"ow\">|</span><span class=\"w\"> </span>no<span class=\"w\">  </span>¬∃<span class=\"w\">              </span><span class=\"ow\">=</span><span class=\"w\">  </span>no<span class=\"w\">  </span><span class=\"o\">(</span><span class=\"ow\">λ</span><span class=\"o\">{</span><span class=\"w\"> </span>⟨<span class=\"w\"> </span>_<span class=\"w\"> </span>,<span class=\"w\"> </span>⊢L<span class=\"w\">  </span>·<span class=\"w\"> </span>_<span class=\"w\">  </span>⟩<span class=\"w\">  </span><span class=\"ow\">→</span><span class=\"w\">  </span>¬∃<span class=\"w\"> </span>⟨<span class=\"w\"> </span>_<span class=\"w\"> </span>,<span class=\"w\"> </span>⊢L<span class=\"w\"> </span>⟩<span class=\"w\"> </span><span class=\"o\">})</span>\n<span class=\"ow\">...</span><span class=\"w\"> </span><span class=\"ow\">|</span><span class=\"w\"> </span>yes<span class=\"w\"> </span>⟨<span class=\"w\"> </span>`ℕ<span class=\"w\"> </span>,<span class=\"w\">    </span>⊢L<span class=\"w\"> </span>⟩<span class=\"w\">  </span><span class=\"ow\">=</span><span class=\"w\">  </span>no<span class=\"w\">  </span><span class=\"o\">(</span><span class=\"ow\">λ</span><span class=\"o\">{</span><span class=\"w\"> </span>⟨<span class=\"w\"> </span>_<span class=\"w\"> </span>,<span class=\"w\"> </span>⊢L′<span class=\"w\"> </span>·<span class=\"w\"> </span>_<span class=\"w\">  </span>⟩<span class=\"w\">  </span><span class=\"ow\">→</span><span class=\"w\">  </span>ℕ≢⇒<span class=\"w\"> </span><span class=\"o\">(</span>uniq-↑<span class=\"w\"> </span>⊢L<span class=\"w\"> </span>⊢L′<span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">})</span>\n<span class=\"ow\">...</span><span class=\"w\"> </span><span class=\"ow\">|</span><span class=\"w\"> </span>yes<span class=\"w\"> </span>⟨<span class=\"w\"> </span>A<span class=\"w\"> </span>⇒<span class=\"w\"> </span>B<span class=\"w\"> </span>,<span class=\"w\"> </span>⊢L<span class=\"w\"> </span>⟩<span class=\"w\"> </span><span class=\"kr\">with</span><span class=\"w\"> </span>inherit<span class=\"w\"> </span>Γ<span class=\"w\"> </span>M<span class=\"w\"> </span>A\n<span class=\"ow\">...</span><span class=\"w\">    </span><span class=\"ow\">|</span><span class=\"w\"> </span>no<span class=\"w\">  </span>¬⊢M<span class=\"w\">          </span><span class=\"ow\">=</span><span class=\"w\">  </span>no<span class=\"w\">  </span><span class=\"o\">(</span>¬arg<span class=\"w\"> </span>⊢L<span class=\"w\"> </span>¬⊢M<span class=\"o\">)</span>\n<span class=\"ow\">...</span><span class=\"w\">    </span><span class=\"ow\">|</span><span class=\"w\"> </span>yes<span class=\"w\"> </span>⊢M<span class=\"w\">           </span><span class=\"ow\">=</span><span class=\"w\">  </span>yes<span class=\"w\"> </span>⟨<span class=\"w\"> </span>B<span class=\"w\"> </span>,<span class=\"w\"> </span>⊢L<span class=\"w\"> </span>·<span class=\"w\"> </span>⊢M<span class=\"w\"> </span>⟩\n<span class=\"ow\">...</span>\n</code></pre></div>\n<p>Note that this recursive proof does use proof-relevance of decidables in Agda.</p>\n<p>I guess lines like </p>\n<div class=\"codehilite\" data-code-language=\"Agda\"><pre><span></span><code><span class=\"nf\">_</span><span class=\"w\"> </span><span class=\"ow\">:</span><span class=\"w\"> </span>synthesize<span class=\"w\"> </span>∅<span class=\"w\"> </span><span class=\"o\">((</span>ƛ<span class=\"w\"> </span><span class=\"s\">\"x\"</span><span class=\"w\"> </span>⇒<span class=\"w\"> </span>`<span class=\"w\"> </span><span class=\"s\">\"y\"</span><span class=\"w\"> </span>↑<span class=\"o\">)</span><span class=\"w\"> </span>↓<span class=\"w\"> </span><span class=\"o\">(</span>`ℕ<span class=\"w\"> </span>⇒<span class=\"w\"> </span>`ℕ<span class=\"o\">))</span><span class=\"w\"> </span>≡<span class=\"w\"> </span>no<span class=\"w\"> </span>_\n</code></pre></div>\n<p>in the book are more like unit tests to show that the definition has proper behaviors in some specific cases.</p>\n<p>What I'm trying to do is to somehow force its unfolding, but in the equation the <code>_</code> term is too long to be written explicitly. In simpler examples, if I do write the term out, the proof terminates simply with <code>by rfl</code>.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">abbrev</span> <span class=\"n\">fourTy</span> <span class=\"o\">:</span> <span class=\"bp\">Γ</span> <span class=\"bp\">⊢</span> <span class=\"n\">four</span> <span class=\"bp\">↥</span> <span class=\"n\">ℕt</span> <span class=\"o\">:=</span> <span class=\"bp\">...</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">synthesize</span> <span class=\"bp\">∅</span> <span class=\"n\">four</span> <span class=\"bp\">=</span> <span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"o\">⟨</span><span class=\"n\">ℕt</span><span class=\"o\">,</span> <span class=\"n\">fourTy</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rfl</span>\n</code></pre></div>\n<p>Also, I'm not quite sure about using <code>Type</code>s instead of <code>Prop</code>s . For the moment that just makes me stick to the original semantics of the code and makes the conversion easier. Maybe that's not the conventional thing to do?</p>\n<p>(cc <span class=\"user-mention\" data-user-id=\"505123\">@Philip Wadler</span> since its PLFA-related)</p>",
        "id": 358882414,
        "sender_full_name": "rami3l",
        "timestamp": 1684290151
    },
    {
        "content": "<p><code>Decidable</code> is a proof relevant data type</p>",
        "id": 358884893,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1684292519
    },
    {
        "content": "<p>Do you have an <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> for this? It's a bit of an involved question and I doubt you will get good answers without it</p>",
        "id": 358885076,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1684292674
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> Thanks, maybe I'm asking the wrong question, I'll reorganize my words and try again later.</p>",
        "id": 358885698,
        "sender_full_name": "rami3l",
        "timestamp": 1684293248
    },
    {
        "content": "<p>it's not a wrong question, I think, it's just too difficult to answer without having actual code to show</p>",
        "id": 358885727,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1684293296
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span>  Thanks again!</p>\n<p>Hmmm, let's consider the simplified case below:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Even</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">Even</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Even</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">Even</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">synthesize</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">):</span> <span class=\"n\">Decidable</span> <span class=\"o\">(</span><span class=\"n\">Even</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">match</span> <span class=\"n\">n</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">right</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"bp\">.</span><span class=\"n\">z</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">left</span><span class=\"bp\">;</span> <span class=\"n\">intro.</span>\n  <span class=\"bp\">|</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">match</span> <span class=\"n\">synthesize</span> <span class=\"n\">n</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">isTrue</span> <span class=\"n\">e</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">right</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"bp\">.</span><span class=\"n\">s</span> <span class=\"n\">e</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">isFalse</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">left</span><span class=\"bp\">;</span> <span class=\"n\">intro</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">s</span> <span class=\"n\">e'</span><span class=\"o\">)</span><span class=\"bp\">;</span> <span class=\"n\">contradiction</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Decidable</span> <span class=\"o\">(</span><span class=\"n\">Even</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">synthesize</span> <span class=\"n\">n</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">Even</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">decide</span>\n</code></pre></div>\n<p>... which works alright.</p>\n<p>My problem is that somewhere else in the proof requires generating data from <code>Even</code>,  so following your comment <a href=\"#narrow/stream/270676-lean4/topic/.E2.9C.94.20Pattern.20matching.20on.20Prop.20in.20Lean/near/355843720\">here</a> it seems to me that <code>Even n</code> now needs to become a <code>Type</code>, which means I cannot use <code>Even n</code> in <code>Decidable</code> anymore.</p>\n<p>That's where I started with the <code>PDecidable</code> workaround and all.</p>\n<p>If more clarification is needed I'll be glad to modify this example further...</p>",
        "id": 358889149,
        "sender_full_name": "rami3l",
        "timestamp": 1684296066
    },
    {
        "content": "<p>you are missing some imports</p>",
        "id": 358889601,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1684296363
    },
    {
        "content": "<p>I have inferred</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Init.Data.Nat.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.LeftRight</span>\n</code></pre></div>",
        "id": 358889643,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1684296389
    },
    {
        "content": "<p>your example doesn't have any problems in it</p>",
        "id": 358889694,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1684296423
    },
    {
        "content": "<p>In this particular example there is no reason to extract data from <code>Even</code> because there is at most one proof of evenness for any number</p>",
        "id": 358889728,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1684296458
    },
    {
        "content": "<p>Yes that's what I meant by \"proof-relevance of decidables\" in the previous comment, maybe I was causing confusion.</p>\n<p>In the original snippet <a href=\"#narrow/stream/113489-new-members/topic/Proof.20of.20an.20inductive's.20variant.3F/near/358882414\">here</a> you can see that <code>synthesize Γ L</code> is being matched against <code>yes ⟨ `ℕ ,    ⊢L ⟩</code> AND <code>yes ⟨ A ⇒ B , ⊢L ⟩</code> but with Lean's <code>Decidable</code> this distinction cannot be made.</p>\n<p>I'll try harder to modify this example to get it closer to what was actually happening... <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 358890416,
        "sender_full_name": "rami3l",
        "timestamp": 1684296948
    },
    {
        "content": "<p>If you are trying to follow the Agda development line for line, then you will need to have an equivalent of the <code>Dec</code> type, which can be defined as you did, or via</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Dec</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">no</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">False</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Dec</span> <span class=\"n\">A</span>\n  <span class=\"bp\">|</span> <span class=\"n\">yes</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Dec</span> <span class=\"n\">A</span>\n</code></pre></div>\n<p>You are correct to assert that this is not the same as <code>Decidable</code> which is for props</p>",
        "id": 358890512,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1684297010
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"615361\">rami3l</span> <a href=\"#narrow/stream/113489-new-members/topic/Proof.20of.20an.20inductive's.20variant.3F/near/358890416\">said</a>:</p>\n<blockquote>\n<p>In the original snippet <a href=\"#narrow/stream/113489-new-members/topic/Proof.20of.20an.20inductive's.20variant.3F/near/358882414\">here</a> you can see that <code>synthesize Γ L</code> is being matched against <code>yes ⟨ `ℕ ,    ⊢L ⟩</code> AND <code>yes ⟨ A ⇒ B , ⊢L ⟩</code> but with Lean's <code>Decidable</code> this distinction cannot be made.</p>\n</blockquote>\n<p>It would be really helpful if you just showed your translation of this function</p>",
        "id": 358890618,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1684297111
    },
    {
        "content": "<p>I suspect there is a way to do this using <code>Decidable</code> but there might be some rewriting of the original proof involved</p>",
        "id": 358890653,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1684297147
    },
    {
        "content": "<p>A simpler alternative, if you don't actually care about the non-proof evidence in the <code>no</code> variant (which is the common case) / are okay with showing completeness separately is to use <code>Option A</code> instead of <code>Dec A</code></p>",
        "id": 358890765,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1684297221
    },
    {
        "content": "<p>The current translation is available <a href=\"https://github.com/rami3l/plfl/blob/531bc4cb395ed1b12e5ff063f70a0e464a552989/Plfl/Inference.lean#L334-L352\">here</a>, and it has already passed some checks as long as I have written out all the terms, like the line I mentioned above:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">four.infer</span> <span class=\"bp\">∅</span> <span class=\"bp\">=</span> <span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"o\">⟨</span><span class=\"n\">ℕt</span><span class=\"o\">,</span> <span class=\"n\">fourTy</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rfl</span>\n</code></pre></div>\n<p>My focus of this problem is rather, when switching to <code>PDecidable</code> instead of <code>Decidable</code>, I lost access to some niceties and I no longer know how to express something like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Decidable</span> <span class=\"o\">(</span><span class=\"n\">Even</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">synthesize</span> <span class=\"n\">n</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">Even</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">decide</span>\n</code></pre></div>\n<p>... OTOH maybe it's indeed better if I can actually rewrite the proof with <code>Decidable</code>.</p>",
        "id": 358891784,
        "sender_full_name": "rami3l",
        "timestamp": 1684298043
    },
    {
        "content": "<p>I can show you how to do that by <code>Dec</code> if you have a complete example</p>",
        "id": 358892033,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1684298226
    },
    {
        "content": "<p>Something like this?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n\n<span class=\"n\">abbrev</span> <span class=\"n\">PDecidable</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">IsEmpty</span> <span class=\"n\">α</span> <span class=\"bp\">⊕'</span> <span class=\"n\">α</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">Even'</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">Even'</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Even'</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">Even'</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">synthesize'</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">):</span> <span class=\"n\">PDecidable</span> <span class=\"o\">(</span><span class=\"n\">Even'</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">match</span> <span class=\"n\">n</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">right</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"bp\">.</span><span class=\"n\">z</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">left</span><span class=\"bp\">;</span> <span class=\"n\">apply</span> <span class=\"n\">Function.isEmpty</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:=</span> <span class=\"n\">False</span><span class=\"o\">)</span><span class=\"bp\">;</span> <span class=\"n\">intro.</span>\n  <span class=\"bp\">|</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">match</span> <span class=\"n\">synthesize'</span> <span class=\"n\">n</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"n\">e</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">right</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"bp\">.</span><span class=\"n\">s</span> <span class=\"n\">e</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">inl</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">left</span><span class=\"bp\">;</span> <span class=\"n\">apply</span> <span class=\"n\">Function.isEmpty</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:=</span> <span class=\"n\">False</span><span class=\"o\">)</span><span class=\"bp\">;</span> <span class=\"n\">intro</span>\n      <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">s</span> <span class=\"n\">e'</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">exact</span> <span class=\"n\">n.false</span> <span class=\"n\">e'</span>\n\n<span class=\"c1\">-- example : synthesize' 3 = .inl _ := by rfl</span>\n<span class=\"c1\">--^ don't know how to synthesize placeholder for argument 'val'</span>\n<span class=\"c1\">-- context:</span>\n<span class=\"c1\">-- ⊢ IsEmpty (Even' 3)</span>\n</code></pre></div>",
        "id": 358892109,
        "sender_full_name": "rami3l",
        "timestamp": 1684298281
    },
    {
        "content": "<p>... again, I know it's not necessary for <code>Even'</code> to be a <code>Type</code>.</p>",
        "id": 358892199,
        "sender_full_name": "rami3l",
        "timestamp": 1684298327
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:=</span> <span class=\"k\">show</span> <span class=\"n\">synthesize'</span> <span class=\"mi\">3</span> <span class=\"bp\">=</span> <span class=\"bp\">.</span><span class=\"n\">inl</span> <span class=\"n\">_</span> <span class=\"kd\">by</span> <span class=\"n\">rfl</span>\n</code></pre></div>\n<p>works</p>",
        "id": 358892356,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1684298425
    },
    {
        "content": "<p>(the reason for the difference is that when you use the <code>example : type := ...</code> form lean expects to be able to elaborate <code>type</code> without looking at the body)</p>",
        "id": 358892439,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1684298501
    },
    {
        "content": "<p>Wow that's something I haven't thought about. Thanks! I'll give it a try later.</p>",
        "id": 358894996,
        "sender_full_name": "rami3l",
        "timestamp": 1684300272
    },
    {
        "content": "<p>Another option (especially if you want to make this a theorem you can actually apply later) is to define a function <code>IsNo</code> and write <code>IsNo (synthesize' 3)</code></p>",
        "id": 358900017,
        "sender_full_name": "Reid Barton",
        "timestamp": 1684303532
    },
    {
        "content": "<p>Thanks for your patience!</p>\n<p>Now this is a bit more interesting. I tried:</p>\n<div class=\"codehilite\" data-code-language=\"Diff\"><pre><span></span><code><span class=\"gd\">- example : four.infer ∅ = .inr ⟨ℕt, fourTy⟩ := by rfl</span>\n<span class=\"gi\">+ example := four.infer ∅ = .inr ⟨ℕt, _⟩ := by rfl</span>\n</code></pre></div>\n<p>and Lean suddenly says <code>don't know how to synthesize placeholder for argument 'snd'</code>. </p>\n<p>Maybe my example is still oversimplified, but thanks a lot anyways!</p>\n<hr>\n<p>I also tried to use the <code>Decidable</code> instance approach as before:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">namespace</span> <span class=\"n\">PDecidable</span>\n  <span class=\"kd\">def</span> <span class=\"n\">toDecidable</span> <span class=\"o\">:</span> <span class=\"n\">PDecidable</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">Decidable</span> <span class=\"o\">(</span><span class=\"n\">Nonempty</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">intro</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">right</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">⟩</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">inl</span> <span class=\"n\">na</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">left</span><span class=\"bp\">;</span> <span class=\"n\">simpa</span>\n<span class=\"kd\">end</span> <span class=\"n\">PDecidable</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Decidable</span> <span class=\"o\">(</span><span class=\"n\">Nonempty</span> <span class=\"o\">(</span><span class=\"bp\">Σ</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"bp\">Γ</span> <span class=\"bp\">⊢</span> <span class=\"n\">m</span> <span class=\"bp\">↥</span> <span class=\"n\">a</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">m.infer</span> <span class=\"bp\">Γ</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">toDecidable</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"k\">let</span> <span class=\"n\">m</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">ƛ</span> <span class=\"s2\">\"x\"</span> <span class=\"o\">:</span> <span class=\"bp\">`</span><span class=\"s2\">\"y\"</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">the</span> <span class=\"o\">(</span><span class=\"n\">ℕt</span> <span class=\"bp\">=⇒</span> <span class=\"n\">ℕt</span><span class=\"o\">)</span><span class=\"bp\">;</span> <span class=\"n\">IsEmpty</span> <span class=\"o\">(</span><span class=\"bp\">Σ</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"bp\">∅</span> <span class=\"bp\">⊢</span> <span class=\"n\">m</span> <span class=\"bp\">↥</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">not_nonempty_iff</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">decide</span>\n</code></pre></div>\n<p>This gives</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">reduce</span> <span class=\"n\">to</span> <span class=\"bp\">'</span><span class=\"n\">true'</span>\n  <span class=\"n\">Decidable.rec</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">false</span><span class=\"o\">)</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">true</span><span class=\"o\">)</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"n\">instDecidableNot</span>\n</code></pre></div>\n<p>... which is a bit like the case <a href=\"#narrow/stream/113489-new-members/topic/force.20decidability/near/350544276\">here</a>.</p>",
        "id": 358900858,
        "sender_full_name": "rami3l",
        "timestamp": 1684303975
    },
    {
        "content": "<p>the syntax in your example is wrong</p>",
        "id": 358900899,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1684303998
    },
    {
        "content": "<p>it should be <code>example := show four.infer ∅ = .inr ⟨ℕt, _⟩ by rfl</code></p>",
        "id": 358900952,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1684304028
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> Sorry, my bad. This doesn't work either. Might need more investigation on my side...</p>",
        "id": 358901088,
        "sender_full_name": "rami3l",
        "timestamp": 1684304073
    },
    {
        "content": "<p>in what way does it not work?</p>",
        "id": 358901115,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1684304089
    },
    {
        "content": "<p>you might not be able to evaluate <code>infer</code> in the kernel due to the use of mutual recursion</p>",
        "id": 358901301,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1684304175
    },
    {
        "content": "<p>confirmed that the mutual recursion is the problem. You can <code>#eval</code> the function:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#eval</span> <span class=\"k\">let</span> <span class=\"n\">m</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">ƛ</span> <span class=\"s2\">\"x\"</span> <span class=\"o\">:</span> <span class=\"bp\">`</span><span class=\"s2\">\"y\"</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">the</span> <span class=\"o\">(</span><span class=\"n\">ℕt</span> <span class=\"bp\">=⇒</span> <span class=\"n\">ℕt</span><span class=\"o\">)</span><span class=\"bp\">;</span> <span class=\"n\">m.infer</span> <span class=\"bp\">∅</span> <span class=\"n\">matches</span> <span class=\"bp\">.</span><span class=\"n\">inl</span> <span class=\"n\">_</span> <span class=\"c1\">-- true</span>\n</code></pre></div>",
        "id": 358904270,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1684305720
    },
    {
        "content": "<p>but lean currently doesn't know how to compile mutual recursions using the primitive recursors, so the result doesn't compute in the kernel most of the time</p>",
        "id": 358904369,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1684305765
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> Your fix gives</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">type</span> <span class=\"n\">mismatch</span>\n  <span class=\"n\">HEq.rfl</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">HEq</span> <span class=\"bp\">?</span><span class=\"n\">m.591173</span> <span class=\"bp\">?</span><span class=\"n\">m.591173</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"n\">TermS.infer</span> <span class=\"n\">four</span> <span class=\"bp\">∅</span> <span class=\"bp\">=</span> <span class=\"n\">PSum.inr</span> <span class=\"o\">{</span> <span class=\"n\">fst</span> <span class=\"o\">:=</span> <span class=\"n\">ℕt</span><span class=\"o\">,</span> <span class=\"n\">snd</span> <span class=\"o\">:=</span> <span class=\"bp\">?</span><span class=\"n\">m.591165</span> <span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n</code></pre></div>\n<p>... so I agree that this is most likely a problem with mutual recursion. I'll add relevant <code>Repr</code> instances and try <code>#eval</code> instead. Thanks!</p>",
        "id": 358906902,
        "sender_full_name": "rami3l",
        "timestamp": 1684306858
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"615361\">rami3l</span> has marked this topic as resolved.</p>",
        "id": 358906956,
        "sender_full_name": "Notification Bot",
        "timestamp": 1684306880
    }
]