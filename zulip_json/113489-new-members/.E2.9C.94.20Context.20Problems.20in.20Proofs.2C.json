[
    {
        "content": "<p>Here is a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> of a problem that I keep consistently having.  I define structures where some of the fields make statements about the other fields.  Consequently, when I try to define an object of the structure type and then I have to prove the statement, the context doesn't have the information I need.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.List.Basic</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">A</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">some_list</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">â„•</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">proof_non_empty</span> <span class=\"o\">:</span> <span class=\"n\">some_list.length</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"o\">:=</span> <span class=\"o\">{</span>\n  <span class=\"n\">some_list</span> <span class=\"o\">:=</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">2</span><span class=\"o\">,</span><span class=\"mi\">3</span><span class=\"o\">]</span>\n  <span class=\"n\">proof_non_empty</span> <span class=\"o\">:</span> <span class=\"kd\">by</span> <span class=\"o\">{}</span>\n<span class=\"o\">}</span>\n</code></pre></div>\n<p>Once you start the proof in by {}, some_list is not in the context and the goal is \"Sort ?u.299\", which doesn't make much sense to me.  I discovered that the only way I can get some_list in the context is to make some_list be a parameter of the definition.  However, this doesn't fix the problem of the goal being \"Sort?u.299\".    I'm sure I'm doing something wrong.  Anyone have any guidance?</p>",
        "id": 359078954,
        "sender_full_name": "Jonathan Whitehead",
        "timestamp": 1684356320
    },
    {
        "content": "<p>If you use</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"o\">:=</span> <span class=\"o\">{</span>\n  <span class=\"n\">some_list</span> <span class=\"o\">:=</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">2</span><span class=\"o\">,</span><span class=\"mi\">3</span><span class=\"o\">]</span>\n  <span class=\"n\">proof_non_empty</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"bp\">|</span>      <span class=\"c1\">--&lt;-- the vertical bar is where you should place the cursor.</span>\n<span class=\"o\">}</span>\n</code></pre></div>\n<p>it should give you a more sensible goal.  I am not sure whether your syntax is correct, in fact.</p>",
        "id": 359080484,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1684356892
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"321459\">Damiano Testa</span> <a href=\"#narrow/stream/113489-new-members/topic/Context.20Problems.20in.20Proofs.2C/near/359080484\">said</a>:</p>\n<blockquote>\n<p>If you use</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"o\">:=</span> <span class=\"o\">{</span>\n  <span class=\"n\">some_list</span> <span class=\"o\">:=</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">2</span><span class=\"o\">,</span><span class=\"mi\">3</span><span class=\"o\">]</span>\n  <span class=\"n\">proof_non_empty</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"bp\">|</span>      <span class=\"c1\">--&lt;-- the vertical bar is where you should place the cursor.</span>\n<span class=\"o\">}</span>\n</code></pre></div>\n<p>it should give you a more sensible goal.  I am not sure whether your syntax is correct, in fact.</p>\n</blockquote>\n<p>I get syntax errors with your code.  At the vertical bar it says \"expected '{' or tactic\"  That's why I had by {}</p>",
        "id": 359080743,
        "sender_full_name": "Jonathan Whitehead",
        "timestamp": 1684356998
    },
    {
        "content": "<p>Yeah this is a confusing thing. The goal display is super-sensitive to indentation.</p>",
        "id": 359080748,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1684357000
    },
    {
        "content": "<p>The vertical bar is a signpost for where the cursor should be, you should remove it and start typing there.</p>",
        "id": 359080983,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1684357113
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"472585\">Jonathan Whitehead</span> <a href=\"#narrow/stream/113489-new-members/topic/Context.20Problems.20in.20Proofs.2C/near/359080743\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"321459\">Damiano Testa</span> <a href=\"#narrow/stream/113489-new-members/topic/Context.20Problems.20in.20Proofs.2C/near/359080484\">said</a>:</p>\n<blockquote>\n<p>If you use</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"o\">:=</span> <span class=\"o\">{</span>\n  <span class=\"n\">some_list</span> <span class=\"o\">:=</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">2</span><span class=\"o\">,</span><span class=\"mi\">3</span><span class=\"o\">]</span>\n  <span class=\"n\">proof_non_empty</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"bp\">|</span>      <span class=\"c1\">--&lt;-- the vertical bar is where you should place the cursor.</span>\n<span class=\"o\">}</span>\n</code></pre></div>\n<p>it should give you a more sensible goal.  I am not sure whether your syntax is correct, in fact.</p>\n</blockquote>\n<p>I get syntax errors with your code.  At the vertical bar it says \"expected '{' or tactic\"  That's why I had by {}</p>\n</blockquote>\n<p>Nevermind, I see what you're saying.  I don't keep the bar.</p>",
        "id": 359081027,
        "sender_full_name": "Jonathan Whitehead",
        "timestamp": 1684357134
    },
    {
        "content": "<p>Ah, so that fixed it.  Thanks!</p>",
        "id": 359081097,
        "sender_full_name": "Jonathan Whitehead",
        "timestamp": 1684357170
    },
    {
        "content": "<p>The <code>Sort ?u.299</code> is the type of the entire thing, not the proof you're working on, if you don't indent enough in tactic mode.</p>",
        "id": 359081114,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1684357180
    },
    {
        "content": "<p>Lean4 is whitespace sensitive.  It is not always easy to figure out what the error is telling you, if the issue is weird whitespace.</p>",
        "id": 359081158,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1684357200
    },
    {
        "content": "<p>What's strange is that I actually used by {} on other objects that I've defined and it gave me no problems.  In fact, because of the tool tip, it insisted that I put a curly bracket after by.</p>",
        "id": 359081341,
        "sender_full_name": "Jonathan Whitehead",
        "timestamp": 1684357252
    },
    {
        "content": "<p>Oh actually in your case the problem was that you wrote <code>:</code> not <code>:=</code> so Lean was expecting you to tell it a type, not a term.</p>",
        "id": 359081370,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1684357262
    },
    {
        "content": "<p>Ohhh, yeah good catch.</p>",
        "id": 359081441,
        "sender_full_name": "Jonathan Whitehead",
        "timestamp": 1684357288
    },
    {
        "content": "<p>Yes, Lean is lenient with the curly braces, more so than with whitespace...</p>",
        "id": 359081505,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1684357320
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"472585\">Jonathan Whitehead</span> has marked this topic as resolved.</p>",
        "id": 359081794,
        "sender_full_name": "Notification Bot",
        "timestamp": 1684357414
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"472585\">Jonathan Whitehead</span> has marked this topic as unresolved.</p>",
        "id": 359460089,
        "sender_full_name": "Notification Bot",
        "timestamp": 1684431930
    },
    {
        "content": "<p>I've used <code>deriving DecidableEq</code>  on my definitions and Lean creates a function  mk.injEq for each decidable <code>structure</code> that I created.  However, I can't seem to be able to use it.  </p>\n<p><strong>Explanation: </strong>  I defined a <code>Vertex_List</code> to be a <code>List Vertex</code> along with the properties <code>no_dups</code> and <code>nonempty</code>.       So, when I define a concrete example I have to prove that the example meets these properties.   For <code>no_dups</code>, it's more complicated than just using <code>simp</code>.   I feel like <code>use Vertex.mk.injEq u.name v.name</code> should work.  I have a hypothesis with <code>u.name = v.name</code> and I'm trying to show <code>u = v</code> and I thought <code>Vertex.mk.injEq</code> was supposed to be a proof that  <code>u.name = v.name</code> implies that <code>u = v</code>.   </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.List.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Set.Basic</span>\n\n\n<span class=\"kd\">structure</span> <span class=\"n\">Vertex</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">)</span>\n  <span class=\"n\">deriving</span> <span class=\"n\">DecidableEq</span><span class=\"o\">,</span> <span class=\"n\">Repr</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">Edge</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">edge</span> <span class=\"o\">:</span> <span class=\"n\">Vertex</span> <span class=\"bp\">Ã—</span> <span class=\"n\">Vertex</span><span class=\"o\">)</span>\n  <span class=\"n\">deriving</span> <span class=\"n\">DecidableEq</span><span class=\"o\">,</span> <span class=\"n\">Repr</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">Vertex_List</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Vertex</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">nonempty</span> <span class=\"o\">:</span> <span class=\"n\">l.length</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">no_dups</span> <span class=\"o\">:</span> <span class=\"bp\">âˆ€</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">Vertex</span><span class=\"o\">),</span> <span class=\"n\">u</span> <span class=\"bp\">âˆˆ</span> <span class=\"n\">l</span> <span class=\"bp\">â†’</span> <span class=\"n\">v</span> <span class=\"bp\">âˆˆ</span> <span class=\"n\">l</span> <span class=\"bp\">â†’</span> <span class=\"n\">u.name</span> <span class=\"bp\">=</span> <span class=\"n\">v.name</span> <span class=\"bp\">â†’</span> <span class=\"n\">u</span> <span class=\"bp\">=</span> <span class=\"n\">v</span><span class=\"o\">)</span>\n  <span class=\"n\">deriving</span> <span class=\"n\">DecidableEq</span><span class=\"o\">,</span> <span class=\"n\">Repr</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">Edge_List</span> <span class=\"o\">(</span><span class=\"n\">vertices</span> <span class=\"o\">:</span> <span class=\"n\">Vertex_List</span><span class=\"o\">):=</span>\n  <span class=\"o\">(</span><span class=\"n\">edges</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Edge</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">closure</span> <span class=\"o\">:</span> <span class=\"bp\">âˆ€</span> <span class=\"n\">e</span> <span class=\"bp\">âˆˆ</span> <span class=\"n\">edges</span><span class=\"o\">,</span> <span class=\"n\">Prod.fst</span> <span class=\"n\">e.edge</span> <span class=\"bp\">âˆˆ</span> <span class=\"n\">vertices.l</span> <span class=\"bp\">âˆ§</span> <span class=\"n\">Prod.snd</span> <span class=\"n\">e.edge</span> <span class=\"bp\">âˆˆ</span> <span class=\"n\">vertices.l</span><span class=\"o\">)</span>\n  <span class=\"n\">deriving</span> <span class=\"n\">DecidableEq</span><span class=\"o\">,</span> <span class=\"n\">Repr</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">Graph</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">vertices</span> <span class=\"o\">:</span> <span class=\"n\">Vertex_List</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">edges</span> <span class=\"o\">:</span> <span class=\"n\">Edge_List</span> <span class=\"n\">vertices</span><span class=\"o\">)</span>\n<span class=\"n\">deriving</span> <span class=\"n\">DecidableEq</span><span class=\"o\">,</span> <span class=\"n\">Repr</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">v_1</span> <span class=\"o\">:</span> <span class=\"n\">Vertex</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"s2\">\"v_1\"</span><span class=\"o\">}</span>\n<span class=\"kd\">def</span> <span class=\"n\">v_2</span> <span class=\"o\">:</span> <span class=\"n\">Vertex</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"s2\">\"v_2\"</span><span class=\"o\">}</span>\n<span class=\"kd\">def</span> <span class=\"n\">v_3</span> <span class=\"o\">:</span> <span class=\"n\">Vertex</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"s2\">\"v_3\"</span><span class=\"o\">}</span>\n<span class=\"kd\">def</span> <span class=\"n\">v_4</span> <span class=\"o\">:</span> <span class=\"n\">Vertex</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"s2\">\"v_4\"</span><span class=\"o\">}</span>\n\n\n<span class=\"kd\">def</span> <span class=\"n\">e_1</span> <span class=\"o\">:</span> <span class=\"n\">Edge</span> <span class=\"o\">:=</span> <span class=\"o\">{</span>\n  <span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"s2\">\"e_1\"</span><span class=\"o\">,</span>\n  <span class=\"n\">edge</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">v_1</span><span class=\"o\">,</span> <span class=\"n\">v_2</span><span class=\"o\">)</span>\n<span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">e_2</span> <span class=\"o\">:</span> <span class=\"n\">Edge</span> <span class=\"o\">:=</span> <span class=\"o\">{</span>\n  <span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"s2\">\"e_2\"</span>\n  <span class=\"n\">edge</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">v_2</span><span class=\"o\">,</span> <span class=\"n\">v_3</span><span class=\"o\">)</span>\n<span class=\"o\">}</span>\n<span class=\"k\">#check</span> <span class=\"n\">Vertex.mk.injEq</span>\n<span class=\"kd\">def</span> <span class=\"n\">V_G</span> <span class=\"o\">:</span> <span class=\"n\">Vertex_List</span> <span class=\"o\">:=</span> <span class=\"o\">{</span>\n  <span class=\"n\">l</span> <span class=\"o\">:=</span> <span class=\"o\">[</span><span class=\"n\">v_1</span><span class=\"o\">,</span><span class=\"n\">v_2</span><span class=\"o\">,</span><span class=\"n\">v_3</span><span class=\"o\">]</span>\n  <span class=\"n\">nonempty</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">simp</span>\n  <span class=\"n\">no_dups</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">simp</span>\n    <span class=\"n\">intros</span> <span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"n\">uh</span> <span class=\"n\">vk</span>\n    <span class=\"n\">cases</span> <span class=\"n\">uh</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"n\">inl</span> <span class=\"n\">h1</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">intro</span> <span class=\"n\">h</span>\n                         <span class=\"n\">use</span> <span class=\"n\">Vertex.mk.injEq</span> <span class=\"n\">u.name</span> <span class=\"n\">v.name</span>\n    <span class=\"bp\">|</span> <span class=\"n\">inr</span> <span class=\"n\">h2</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">use</span> <span class=\"n\">Vertex.mk.injEq</span> <span class=\"n\">u.name</span> <span class=\"n\">v.name</span>\n<span class=\"o\">}</span>\n</code></pre></div>",
        "id": 359460099,
        "sender_full_name": "Jonathan Whitehead",
        "timestamp": 1684431933
    },
    {
        "content": "<p>Try this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[ext]</span>      <span class=\"c1\">--&lt;--- see what happens if you remove this attribute.</span>\n<span class=\"kd\">structure</span> <span class=\"n\">Vertex</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">)</span>\n  <span class=\"n\">deriving</span> <span class=\"n\">DecidableEq</span><span class=\"o\">,</span> <span class=\"n\">Repr</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">Vinj</span> <span class=\"o\">{</span><span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">Vertex</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">uv</span> <span class=\"o\">:</span> <span class=\"n\">u.name</span> <span class=\"bp\">=</span> <span class=\"n\">v.name</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">u</span> <span class=\"bp\">=</span> <span class=\"n\">v</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">Vertex.ext_iff</span> <span class=\"n\">u</span> <span class=\"n\">v</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mpr</span> <span class=\"n\">uv</span>\n</code></pre></div>",
        "id": 359468791,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1684434479
    },
    {
        "content": "<p>When you want to deduce that two structures are the same because they have the same fields, those are usually <code>ext</code>ensionality lemmas.</p>",
        "id": 359469128,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1684434573
    },
    {
        "content": "<p>The attribute <code>ext</code> tells Lean that you may want it to generate the relevant lemmas.</p>",
        "id": 359469231,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1684434602
    },
    {
        "content": "<p>Below is a proof of the same lemma using the lemma that you had found.</p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>Spoiler</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<div class=\"codehilite\"><pre><span></span><code>  rw [Vertex.mk.injEq]\n  assumption\n</code></pre></div>\n<p>You can also now give a very obscure proof of <code>no_dups</code> in your <code>V_G</code> def:</p>\n<div class=\"codehilite\"><pre><span></span><code>  no_dups := fun _ _ _ _ â†¦ Vinj\n</code></pre></div>\n</div></div>",
        "id": 359470701,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1684435005
    },
    {
        "content": "<p>Okay, I played around with it a bit and I like the <code>ext</code> lemma.  It's cleaner and appears to behave easier, although I'm not quite sure why.  I'm a little fuzzy on extensionality and injective equality.  However, in any case, I don't see any draw back to using the <code>ext</code> compiler directive on everything.  Why doesn't lean do this by default?</p>",
        "id": 359475769,
        "sender_full_name": "Jonathan Whitehead",
        "timestamp": 1684436468
    },
    {
        "content": "<p>it's not a compiler directive, it is a user attribute added in <code>Std</code></p>",
        "id": 359477448,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1684437092
    },
    {
        "content": "<p>Okay, so I finally fixed all of the previously mentioned problems and have arrived at the original problem that inspired this thread.  I was trying to create an add_edge function but I can't finish the proof because I'm missing some key ideas in the context.  The add_edge function only adds the edge if the vertices u and v are actually in the graph.  Hence, I have an if-then statement.  Under the condition that u and v are in the graph, the function updates the graph with the new edge.  However, whenever I try to write the \"closure\" proof for the edges, I can't prove it unless I know that <code>u âˆˆ G.vertices.l âˆ§ v âˆˆ G.vertices.l</code>.   But this is the assumption of this branch in the if-then statement.  How can I get it into my context so I can finish the proof?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.List.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Set.Basic</span>\n\n<span class=\"kd\">@[ext]</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">Vertex</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">)</span>\n  <span class=\"n\">deriving</span> <span class=\"n\">DecidableEq</span><span class=\"o\">,</span> <span class=\"n\">Repr</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">Edge</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">edge</span> <span class=\"o\">:</span> <span class=\"n\">Vertex</span> <span class=\"bp\">Ã—</span> <span class=\"n\">Vertex</span><span class=\"o\">)</span>\n  <span class=\"n\">deriving</span> <span class=\"n\">DecidableEq</span><span class=\"o\">,</span> <span class=\"n\">Repr</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">Vertex_List</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Vertex</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">nonempty</span> <span class=\"o\">:</span> <span class=\"n\">l.length</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">no_dups</span> <span class=\"o\">:</span> <span class=\"bp\">âˆ€</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">Vertex</span><span class=\"o\">),</span> <span class=\"n\">u</span> <span class=\"bp\">âˆˆ</span> <span class=\"n\">l</span> <span class=\"bp\">â†’</span> <span class=\"n\">v</span> <span class=\"bp\">âˆˆ</span> <span class=\"n\">l</span> <span class=\"bp\">â†’</span> <span class=\"n\">u.name</span> <span class=\"bp\">=</span> <span class=\"n\">v.name</span> <span class=\"bp\">â†’</span> <span class=\"n\">u</span> <span class=\"bp\">=</span> <span class=\"n\">v</span><span class=\"o\">)</span>\n  <span class=\"n\">deriving</span> <span class=\"n\">DecidableEq</span><span class=\"o\">,</span> <span class=\"n\">Repr</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">Edge_List</span> <span class=\"o\">(</span><span class=\"n\">vertices</span> <span class=\"o\">:</span> <span class=\"n\">Vertex_List</span><span class=\"o\">):=</span>\n  <span class=\"o\">(</span><span class=\"n\">edges</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Edge</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">closure</span> <span class=\"o\">:</span> <span class=\"bp\">âˆ€</span> <span class=\"n\">e</span> <span class=\"bp\">âˆˆ</span> <span class=\"n\">edges</span><span class=\"o\">,</span> <span class=\"n\">Prod.fst</span> <span class=\"n\">e.edge</span> <span class=\"bp\">âˆˆ</span> <span class=\"n\">vertices.l</span> <span class=\"bp\">âˆ§</span> <span class=\"n\">Prod.snd</span> <span class=\"n\">e.edge</span> <span class=\"bp\">âˆˆ</span> <span class=\"n\">vertices.l</span><span class=\"o\">)</span>\n  <span class=\"n\">deriving</span> <span class=\"n\">DecidableEq</span><span class=\"o\">,</span> <span class=\"n\">Repr</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">Graph</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">vertices</span> <span class=\"o\">:</span> <span class=\"n\">Vertex_List</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">edges</span> <span class=\"o\">:</span> <span class=\"n\">Edge_List</span> <span class=\"n\">vertices</span><span class=\"o\">)</span>\n<span class=\"n\">deriving</span> <span class=\"n\">DecidableEq</span><span class=\"o\">,</span> <span class=\"n\">Repr</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">add_edge</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">Graph</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">Vertex</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">label</span> <span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">):</span> <span class=\"n\">Graph</span><span class=\"o\">:=</span>\n  <span class=\"k\">if</span> <span class=\"n\">u</span> <span class=\"bp\">âˆˆ</span> <span class=\"n\">G.vertices.l</span> <span class=\"bp\">âˆ§</span> <span class=\"n\">v</span> <span class=\"bp\">âˆˆ</span> <span class=\"n\">G.vertices.l</span> <span class=\"k\">then</span> <span class=\"o\">{</span>\n      <span class=\"n\">vertices</span> <span class=\"o\">:=</span> <span class=\"n\">G.vertices</span><span class=\"o\">,</span>\n      <span class=\"n\">edges</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">edges</span> <span class=\"o\">:=</span> <span class=\"n\">G.edges.edges</span> <span class=\"bp\">++</span> <span class=\"o\">[{</span><span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"n\">label</span><span class=\"o\">,</span>\n                                            <span class=\"n\">edge</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">u</span><span class=\"o\">,</span><span class=\"n\">v</span><span class=\"o\">)}]</span>\n                <span class=\"n\">closure</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n                 <span class=\"n\">simp</span>\n                 <span class=\"n\">intro</span> <span class=\"n\">e</span>\n                 <span class=\"n\">intro</span> <span class=\"n\">he</span>\n                 <span class=\"n\">cases</span> <span class=\"n\">he</span> <span class=\"k\">with</span>\n                  <span class=\"bp\">|</span> <span class=\"n\">inl</span> <span class=\"n\">hG</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"n\">G.edges.closure</span> <span class=\"n\">e</span> <span class=\"n\">hG</span>\n                              <span class=\"n\">exact</span> <span class=\"n\">h</span>\n                  <span class=\"bp\">|</span> <span class=\"n\">inr</span> <span class=\"n\">hnew</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Edge.mk.injEq</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hnew</span>\n                                <span class=\"n\">cases</span> <span class=\"n\">hnew</span>\n\n               <span class=\"o\">}</span>\n    <span class=\"o\">}</span>\n    <span class=\"k\">else</span>\n    <span class=\"o\">{</span><span class=\"n\">vertices</span> <span class=\"o\">:=</span> <span class=\"n\">G.vertices</span><span class=\"o\">,</span>\n     <span class=\"n\">edges</span> <span class=\"o\">:=</span> <span class=\"n\">G.edges</span><span class=\"o\">}</span>\n</code></pre></div>",
        "id": 359491115,
        "sender_full_name": "Jonathan Whitehead",
        "timestamp": 1684441842
    },
    {
        "content": "<p>I'm not at a computer, so I'm not really sure what the issue is.  I suspect that</p>\n<ul>\n<li>either you are looking for what lean 3 called <a href=\"https://leanprover-community.github.io/mathlib_docs/find/dite\">docs#dite</a> (maybe <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=dite#doc\">docs4#dite</a> ?), the version of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/ite\">docs#ite</a> (maybe <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=ite#doc\">docs4#ite</a> ?) that begins by assuming the condition and then doing whatever you need to do,</li>\n<li>or you are looking for <a href=\"https://leanprover-community.github.io/mathlib_docs/find/if_pos\">docs#if_pos</a> (maybe <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=if_pos#doc\">docs4#if_pos</a> ?).</li>\n</ul>\n<p>Is one of the above useful?</p>",
        "id": 359496708,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1684443784
    },
    {
        "content": "<p>I'll work on it.  I'll have to look into how to use dite and if_pos, so it might take me a while.</p>",
        "id": 359497999,
        "sender_full_name": "Jonathan Whitehead",
        "timestamp": 1684444212
    },
    {
        "content": "<p>For dite, you do something like <code>dite P (by intro h [...]) (by intro h [...])</code> and the two <code>h</code> in the two branches are <code>P</code> and <code>Â¬P</code> in their respective local contexts.</p>\n<p><code>if_pos</code> is simply a lemma: either <code>apply</code> it or <code>rw</code> with it</p>",
        "id": 359498962,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1684444547
    },
    {
        "content": "<p>I think that's kind of what I'm looking for but I can't get the syntax to do what I want.  It seems like dite introduces the right hypothesis into the context, but wants me to prove a weird type statement like ?m.10321</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">add_edge</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">Graph</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">Vertex</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">label</span> <span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">):</span> <span class=\"n\">Graph</span><span class=\"o\">:=</span>\n  <span class=\"k\">if</span> <span class=\"n\">u</span> <span class=\"bp\">âˆˆ</span> <span class=\"n\">G.vertices.l</span> <span class=\"bp\">âˆ§</span> <span class=\"n\">v</span> <span class=\"bp\">âˆˆ</span> <span class=\"n\">G.vertices.l</span> <span class=\"k\">then</span> <span class=\"o\">{</span>\n      <span class=\"n\">vertices</span> <span class=\"o\">:=</span> <span class=\"n\">G.vertices</span><span class=\"o\">,</span>\n      <span class=\"n\">edges</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">edges</span> <span class=\"o\">:=</span> <span class=\"n\">G.edges.edges</span> <span class=\"bp\">++</span> <span class=\"o\">[{</span><span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"n\">label</span><span class=\"o\">,</span>\n                                            <span class=\"n\">edge</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">u</span><span class=\"o\">,</span><span class=\"n\">v</span><span class=\"o\">)}]</span>\n                <span class=\"n\">closure</span> <span class=\"o\">:=</span> <span class=\"n\">dite</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"bp\">âˆˆ</span> <span class=\"n\">G.vertices.l</span> <span class=\"bp\">âˆ§</span> <span class=\"n\">v</span> <span class=\"bp\">âˆˆ</span> <span class=\"n\">G.vertices.l</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">)</span>\n                 <span class=\"n\">simp</span>\n                 <span class=\"n\">intro</span> <span class=\"n\">e</span>\n                 <span class=\"n\">intro</span> <span class=\"n\">he</span>\n                 <span class=\"n\">cases</span> <span class=\"n\">he</span> <span class=\"k\">with</span>\n                  <span class=\"bp\">|</span> <span class=\"n\">inl</span> <span class=\"n\">hG</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"n\">G.edges.closure</span> <span class=\"n\">e</span> <span class=\"n\">hG</span>\n                              <span class=\"n\">exact</span> <span class=\"n\">h</span>\n                  <span class=\"bp\">|</span> <span class=\"n\">inr</span> <span class=\"n\">hnew</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Edge.mk.injEq</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hnew</span>\n                                <span class=\"n\">cases</span> <span class=\"n\">hnew</span>\n\n               <span class=\"o\">}</span>\n    <span class=\"o\">}</span>\n    <span class=\"k\">else</span>\n    <span class=\"o\">{</span><span class=\"n\">vertices</span> <span class=\"o\">:=</span> <span class=\"n\">G.vertices</span><span class=\"o\">,</span>\n     <span class=\"n\">edges</span> <span class=\"o\">:=</span> <span class=\"n\">G.edges</span><span class=\"o\">}</span>\n</code></pre></div>\n<p>with</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">unsolved</span> <span class=\"n\">goals</span>\n<span class=\"n\">G</span><span class=\"o\">:</span> <span class=\"n\">Graph</span>\n<span class=\"n\">uv</span><span class=\"o\">:</span> <span class=\"n\">Vertex</span>\n<span class=\"n\">label</span><span class=\"o\">:</span> <span class=\"n\">String</span>\n<span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">u</span> <span class=\"bp\">âˆˆ</span> <span class=\"n\">G.vertices.l</span> <span class=\"bp\">âˆ§</span> <span class=\"n\">v</span> <span class=\"bp\">âˆˆ</span> <span class=\"n\">G.vertices.l</span>\n<span class=\"bp\">âŠ¢</span> <span class=\"bp\">?</span><span class=\"n\">m.10321</span>\n</code></pre></div>",
        "id": 359500969,
        "sender_full_name": "Jonathan Whitehead",
        "timestamp": 1684445313
    },
    {
        "content": "<p>Do you maybe want to close the round parenthesis after <code>by intro</code> to the end of the \"if\" part?</p>",
        "id": 359501391,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1684445510
    },
    {
        "content": "<p>That doesn't seem to help either.  It just introduces h but with a different name and still wants me to prove ?m.10321.</p>",
        "id": 359501953,
        "sender_full_name": "Jonathan Whitehead",
        "timestamp": 1684445710
    },
    {
        "content": "<p>Why do you have the <code>dite</code> inside the <code>if</code>? Your code is like <code>if foo then (if foo then x else y) else z</code></p>",
        "id": 359501970,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684445719
    },
    {
        "content": "<p>Which is silly because <code>y</code> is unreachable</p>",
        "id": 359501993,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684445728
    },
    {
        "content": "<p>I'm trying to figure out how to use dite.  Damiano just introduced it to me.</p>",
        "id": 359502070,
        "sender_full_name": "Jonathan Whitehead",
        "timestamp": 1684445756
    },
    {
        "content": "<p>Replace <code>if u âˆˆ G.vertices.l âˆ§ v âˆˆ G.vertices.l then {</code> with <code>if h : u âˆˆ G.vertices.l âˆ§ v âˆˆ G.vertices.l then {</code></p>",
        "id": 359502133,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684445769
    },
    {
        "content": "<p>The latter is syntax for <code>dite</code></p>",
        "id": 359502149,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684445774
    },
    {
        "content": "<p>Thanks, Eric.  That's what I needed.</p>",
        "id": 359502459,
        "sender_full_name": "Jonathan Whitehead",
        "timestamp": 1684445898
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"472585\">Jonathan Whitehead</span> has marked this topic as resolved.</p>",
        "id": 359517377,
        "sender_full_name": "Notification Bot",
        "timestamp": 1684453144
    }
]