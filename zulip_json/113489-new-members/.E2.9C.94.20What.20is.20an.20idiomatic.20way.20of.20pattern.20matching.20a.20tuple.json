[
    {
        "content": "<p>So I want to create a function (named with pattern <code>motive_*</code>) that extracts a proof embedded in an inductively defined <code>Prop</code> in <code>Qa</code>. And the property is about tuples. One way that I can extract the proof can be done by <code>motive_ex1_1</code>. However, I must specify <code>a</code> <code>b</code> explicitly in the argument lists and I want to avoid that. </p>\n<p>In <code>motive_ex1_2</code>, I avoided the destructing  the tuple, but I cannot refer to the destructed value given by the match branch. <br>\nIn <code>motive_ex1_1_wrapper</code>, I kind of achieved it, but this requires having another function.</p>\n<p>And You can understand <code>P</code> as a function that generates a proof for <code>b = b</code> from a proof of <code>a = a</code> whose actual behavior is unimportant.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Qa</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}:</span> <span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">β</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Prop</span> <span class=\"n\">where</span>\n<span class=\"bp\">|</span> <span class=\"n\">Qa1</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span><span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Qa</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">P</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"o\">(</span><span class=\"n\">b</span><span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">motive_ex1_1</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span><span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">t</span><span class=\"o\">:</span> <span class=\"n\">Qa</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">t</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Qa.Qa1</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">P</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">h</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">motive_ex1_2</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">α</span><span class=\"bp\">×</span><span class=\"n\">β</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">t</span><span class=\"o\">:</span> <span class=\"n\">Qa</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">t</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Qa.Qa1</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">P</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">s.1</span> <span class=\"n\">s.2</span> <span class=\"n\">h</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">motive_ex1_1_wrapper</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">α</span><span class=\"bp\">×</span><span class=\"n\">β</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">t</span><span class=\"o\">:</span> <span class=\"n\">Qa</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">@</span><span class=\"n\">motive_ex1_1</span> <span class=\"n\">P</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">s.1</span> <span class=\"n\">s.2</span> <span class=\"n\">t</span>\n</code></pre></div>\n<p>Here are my attempts where none works. Mostly they complain that the resulting type has some metavariables that cannot be inferred. </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">motive_ex2</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">α</span><span class=\"bp\">×</span><span class=\"n\">β</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">t</span><span class=\"o\">:</span> <span class=\"n\">Qa</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">t</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Qa.Qa1</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">P</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">h</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">motive_ex3</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">α</span><span class=\"bp\">×</span><span class=\"n\">β</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">t</span><span class=\"o\">:</span> <span class=\"n\">Qa</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">s.1</span>\n  <span class=\"k\">let</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"n\">s.2</span>\n  <span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">s</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rfl</span>\n  <span class=\"n\">h</span> <span class=\"bp\">▸</span> <span class=\"k\">match</span> <span class=\"n\">t</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Qa.Qa1</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">P</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">h</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">motive_ex4</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">α</span><span class=\"bp\">×</span><span class=\"n\">β</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">t</span><span class=\"o\">:</span> <span class=\"n\">Qa</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">t</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Qa.Qa1</span> <span class=\"n\">s.1</span> <span class=\"n\">s.2</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">motive_ex5</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">α</span><span class=\"bp\">×</span><span class=\"n\">β</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">t</span><span class=\"o\">:</span> <span class=\"n\">Qa</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">t</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Prod.mk</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">Qa.Qa1</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">P</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">h</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">motive_ex6</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">α</span><span class=\"bp\">×</span><span class=\"n\">β</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">t</span><span class=\"o\">:</span> <span class=\"n\">Qa</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"n\">r</span><span class=\"o\">:</span> <span class=\"n\">Qa</span> <span class=\"o\">(</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">t</span>\n  <span class=\"k\">match</span> <span class=\"n\">r</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Qa.Qa1</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">P</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">h</span>\n</code></pre></div>\n<p>Ideally, I want to achieve motive_ex2 with minimal code changes. Do you have any suggestions?</p>",
        "id": 401279880,
        "sender_full_name": "Z. Wu",
        "timestamp": 1699586843
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"649880\">Z. Wu</span> has marked this topic as resolved.</p>",
        "id": 401292549,
        "sender_full_name": "Notification Bot",
        "timestamp": 1699595656
    }
]