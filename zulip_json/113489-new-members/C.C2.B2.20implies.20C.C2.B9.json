[
    {
        "content": "<p>Seems obvious, but I couldn't find this in mathlib. Minimized code:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">diff</span> <span class=\"o\">{</span><span class=\"n\">E</span> <span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hr</span> <span class=\"o\">:</span> <span class=\"n\">r</span> <span class=\"bp\">≥</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">E</span><span class=\"o\">}</span>\n  <span class=\"o\">[</span><span class=\"n\">NormedAddCommGroup</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">NormedSpace</span> <span class=\"n\">ℝ</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">FiniteDimensional</span> <span class=\"n\">ℝ</span> <span class=\"n\">E</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">NormedAddCommGroup</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">NormedSpace</span> <span class=\"n\">ℝ</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">FiniteDimensional</span> <span class=\"n\">ℝ</span> <span class=\"n\">F</span><span class=\"o\">]</span>\n  <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">E</span> <span class=\"bp\">→</span> <span class=\"n\">F</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">ContDiffOn</span> <span class=\"n\">ℝ</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"n\">f</span> <span class=\"n\">w</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ContDiffOn</span> <span class=\"n\">ℝ</span> <span class=\"mi\">1</span> <span class=\"n\">f</span> <span class=\"n\">w</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 391903346,
        "sender_full_name": "Michael Rothgang",
        "timestamp": 1695127125
    },
    {
        "content": "<p>Is this <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=ContDiffOn.of_le#doc\">docs#ContDiffOn.of_le</a> applied to <code>hr</code>? (Maybe you need to transform <code>hr</code>)</p>",
        "id": 391903616,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1695127233
    },
    {
        "content": "<p>Looks promising, let me check...</p>",
        "id": 391903707,
        "sender_full_name": "Michael Rothgang",
        "timestamp": 1695127264
    },
    {
        "content": "<p>The proof of <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=ContDiffOn.one_of_succ#doc\">docs#ContDiffOn.one_of_succ</a> looks helpful to see how to transform <code>hr</code></p>",
        "id": 391904047,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1695127385
    },
    {
        "content": "<p>Works like a charm, thanks! (I need to transform hr.)</p>",
        "id": 391904147,
        "sender_full_name": "Michael Rothgang",
        "timestamp": 1695127426
    }
]