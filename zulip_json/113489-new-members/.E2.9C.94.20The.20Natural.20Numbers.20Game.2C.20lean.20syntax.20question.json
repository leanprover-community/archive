[
    {
        "content": "<p>Hello everyone, <br>\nI'm new to zulip and lean so please point out any of my misunderstandings. I'm working on the level 9 in the inequality world and here is what I have to prove.<br>\n\"For all naturals a and b, either a≤b or b≤a.\"<br>\nI know how to prove it mathematically but I don't know how to express it in lean. My \"strategy\" is using the fact that <br>\n(a or b) is equivalent to ((not a) then b)  </p>\n<p>So here is what I've tried:<br>\nby_cases a≤b,<br>\nby_cases ∃ (c : mynat), b = a + c,<br>\nand in both cases it complains that a proposition I entered is undecidable<br>\nAlso I think I can't use something like have h := a≤b, because then I have to prove that h is true and it's an impossible goal.<br>\nSo being desperate I tried to prove a this lemma \"(a or b) is equivalent to ((not a) then b)\" with \"theorem\" \"begin\" and all these commands, but I think I can't do that in the web lean environment.</p>\n<p>Please don't tell me that there is this easy way to do this level if I do this that and the other. I want to prove it my way and would really appreciate some help on lean syntax and how to translate my ideas into code or resources that might help me.<br>\nThanks,</p>",
        "id": 281452747,
        "sender_full_name": "Dmitry Mishchenko",
        "timestamp": 1651849661
    },
    {
        "content": "<p>You can rewrite using <code>le_iff_exists_add</code> first and then do cases on that, rather than doing <code>by_cases</code>.</p>",
        "id": 281453290,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1651849952
    },
    {
        "content": "<p>In more recent versions of Lean, <code>by_cases</code> doesn't complain about undecidable propositions anymore. If you want to simulate it, you can start your proof with the <code>classical</code> tactic, which isn't introduced by the NNG, but it's still present there.</p>",
        "id": 281453724,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1651850132
    },
    {
        "content": "<p>Note that you don't need classical logic to solve this level.</p>",
        "id": 281461067,
        "sender_full_name": "Patrick Johnson",
        "timestamp": 1651853625
    },
    {
        "content": "<p>(Just to clarify my <code>classical</code> suggestion -- that's just a workaround to be able to use <code>by_cases</code> for something that should be decidable anyway.)</p>",
        "id": 281463683,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1651855031
    },
    {
        "content": "<p>Thank you for your help. <code>classical</code> is exactly what I was looking for but I wasn't able to prove the lemma using it with <code>by_cases</code>. However doing that I realized that I never tried induction and it worked just fine.  So, I don't have any more questions about this level but I will probably soon have some things to say about the notorious <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi><mo>∗</mo><mi>b</mi><mo>=</mo><mi>a</mi><mo>∗</mo><mi>c</mi><mo>→</mo><mi>b</mi><mo>=</mo><mi>c</mi></mrow><annotation encoding=\"application/x-tex\">a * b = a * c → b = c</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4653em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\">b</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.4653em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">c</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\">b</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">c</span></span></span></span> since I'm still working on it.</p>",
        "id": 281469032,
        "sender_full_name": "Dmitry Mishchenko",
        "timestamp": 1651857725
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"499035\">Dmitry Mishchenko</span> has marked this topic as resolved.</p>",
        "id": 281469107,
        "sender_full_name": "Notification Bot",
        "timestamp": 1651857772
    }
]