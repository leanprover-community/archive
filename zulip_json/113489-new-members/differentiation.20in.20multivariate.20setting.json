[
    {
        "content": "<p>Hello,<br>\nI am trying to prove :</p>\n<p>Theorem (Necessary Second Order Optimality Conditions). Let f : U → R be a function<br>\ndefined on an open set U ⊆ R^{n} Suppose that f is twice continuously differentiable over U<br>\nand that x∗ is a stationary point. Then</p>\n<ol>\n<li>if x∗ is a local minimum point, then ∇^{2}f (x∗) ≽ 0</li>\n</ol>\n<p>In doing so I have been trying to set up the problem. I am having two problems. First I want to know what I can use in the mathlib documentation to define that the first derivative f' of f is 0 at x_star, meaning x_star is a stationary point of f.  This could be a hypothesis to input into the theorem.</p>\n<p>Secondly, I would like to know how to write that the hessian is a semi-positive definite in the Prop bit of the theorem (i imagine there is some built-in way to write this).</p>\n<p>So far my code is:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.real.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">analysis.inner_product_space.euclidean_dist</span>\n<span class=\"kn\">import</span> <span class=\"n\">analysis.calculus.deriv</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"n\">f'</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">open_set</span> <span class=\"o\">(</span><span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">U</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">ε</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">),</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">ε</span> <span class=\"bp\">→</span> <span class=\"n\">euclidean.ball</span> <span class=\"n\">x</span> <span class=\"n\">ε</span> <span class=\"bp\">⊆</span> <span class=\"n\">U</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">local_minimum</span> <span class=\"o\">(</span><span class=\"n\">x_star</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">ε</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">),</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">ε</span> <span class=\"bp\">→</span> <span class=\"o\">((</span><span class=\"n\">euclidean.ball</span> <span class=\"n\">x_star</span> <span class=\"n\">ε</span> <span class=\"bp\">⊆</span> <span class=\"n\">U</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">euclidean.ball</span> <span class=\"n\">x_star</span> <span class=\"n\">ε</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x_star</span> <span class=\"bp\">≤</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">))</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">x_star</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">necess_2nd_order_optimality_condit</span> <span class=\"o\">(</span><span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">h_open</span> <span class=\"o\">:</span> <span class=\"n\">open_set</span> <span class=\"n\">U</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">h_f_twice_cont_diff</span> <span class=\"o\">:</span> <span class=\"n\">cont_diff</span> <span class=\"n\">ℝ</span> <span class=\"mi\">2</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h_xstar_in_U</span> <span class=\"o\">:</span> <span class=\"n\">x_star</span> <span class=\"bp\">∈</span> <span class=\"n\">U</span><span class=\"o\">)</span>\n<span class=\"c1\">--{h_xstar_stationary : deriv f x_star = 0}  --not working</span>\n<span class=\"o\">:</span> <span class=\"n\">local_minimum</span> <span class=\"n\">x_star</span> <span class=\"n\">U</span> <span class=\"bp\">→</span> <span class=\"n\">Hessian</span> <span class=\"n\">is</span> <span class=\"n\">positive</span> <span class=\"n\">definite</span>  <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>Any help or hints will be much appreciated!</p>",
        "id": 341862236,
        "sender_full_name": "Abu Al Hassan",
        "timestamp": 1678814867
    },
    {
        "content": "<p>I don't know the answers to your questions but I think where you've written <code>∃ (ε : ℝ), 0 &lt; ε → ...</code> you wanted to write <code>∃ ε (h : 0 &lt; ε), ...</code>.</p>",
        "id": 341910337,
        "sender_full_name": "Alistair Tucker",
        "timestamp": 1678830102
    },
    {
        "content": "<p>Also  <code>fin n → ℝ</code> probably doesn't have the norm you think it does so best to use <code>euclidean_space ℝ (fin n)</code> instead.  Then your first question might be answered by including a hypothesis of the form <code>(h : has_fderiv_at f (0 : euclidean_space ℝ (fin n) →L[ℝ] ℝ) x_star)</code>. To deal with the second it looks like you're going to have to delve into <code>iterated_fderiv</code> and <code>multilinear_map</code>.</p>",
        "id": 341913652,
        "sender_full_name": "Alistair Tucker",
        "timestamp": 1678831503
    },
    {
        "content": "<p>Hi Alistair,<br>\nThanks for pointing out my mistake with the \\epsilon. I have made this mistake in the past but will be more careful going forward.</p>",
        "id": 341931580,
        "sender_full_name": "Abu Al Hassan",
        "timestamp": 1678839299
    },
    {
        "content": "<p>I am still unable to work out how to make progress on the second problem of writing out that the hessian is positive semi-definite.<br>\nI think using <code>iterated_fderiv \\R 2 f</code>  defines the hessian but I couldn't find anything in mathlib that defines such a multilinear map as being positive semi-definite. Maybe there is a way to define the hessian as a matrix so I can use <code>matrix.pos_semidef </code></p>",
        "id": 341932110,
        "sender_full_name": "Abu Al Hassan",
        "timestamp": 1678839570
    },
    {
        "content": "<p>Updated code:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.real.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">analysis.inner_product_space.euclidean_dist</span>\n<span class=\"kn\">import</span> <span class=\"n\">analysis.calculus.deriv</span>\n<span class=\"kn\">import</span> <span class=\"n\">analysis.calculus.cont_diff</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">open_set</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">U</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">ε</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">),</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">ε</span> <span class=\"bp\">→</span> <span class=\"n\">euclidean.ball</span> <span class=\"n\">x</span> <span class=\"n\">ε</span> <span class=\"bp\">⊆</span> <span class=\"n\">U</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">local_minimum</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x_star</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"bp\">∃</span> <span class=\"n\">ε</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">ε</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">euclidean.ball</span> <span class=\"n\">x_star</span> <span class=\"n\">ε</span> <span class=\"bp\">⊆</span> <span class=\"n\">U</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">euclidean.ball</span> <span class=\"n\">x_star</span> <span class=\"n\">ε</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x_star</span> <span class=\"bp\">≤</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">necess_2nd_order_optimality_condit</span>\n<span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">h_open</span> <span class=\"o\">:</span> <span class=\"n\">open_set</span> <span class=\"n\">n</span> <span class=\"n\">U</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">x_star</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">f'</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">h_f_twice_cont_diff</span> <span class=\"o\">:</span> <span class=\"n\">cont_diff</span> <span class=\"n\">ℝ</span> <span class=\"mi\">2</span> <span class=\"n\">f</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">h_xstar_in_U</span> <span class=\"o\">:</span> <span class=\"n\">x_star</span> <span class=\"bp\">∈</span> <span class=\"n\">U</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">has_fderiv_at</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">euclidean_space</span> <span class=\"n\">ℝ</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">→</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"n\">ℝ</span><span class=\"o\">]</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"n\">x_star</span><span class=\"o\">):</span>\n<span class=\"n\">local_minimum</span> <span class=\"n\">n</span> <span class=\"n\">x_star</span> <span class=\"n\">U</span> <span class=\"n\">f</span> <span class=\"bp\">→</span> <span class=\"n\">Hessian</span> <span class=\"n\">is</span> <span class=\"n\">positive</span> <span class=\"n\">semi</span> <span class=\"n\">definite</span>  <span class=\"o\">:=</span>  <span class=\"c1\">--trying to fix this bit</span>\n<span class=\"kd\">begin</span>\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 341932242,
        "sender_full_name": "Abu Al Hassan",
        "timestamp": 1678839618
    },
    {
        "content": "<p>(<a href=\"https://leanprover-community.github.io/mathlib_docs/find/iterated_fderiv\">docs#iterated_fderiv</a> for reference)</p>",
        "id": 341935263,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1678841120
    },
    {
        "content": "<p>You'll almost certainly need to uncurry the multilinear map into a bilinear map</p>",
        "id": 341935639,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1678841307
    },
    {
        "content": "<p>Then we should have something about positive definiteness of bilinear maps</p>",
        "id": 341935687,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1678841340
    },
    {
        "content": "<p>Though actually it might be better to avoid <code>iterated_fderiv</code> altogether, and just use <code>fderiv</code>  twice.</p>",
        "id": 341936122,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1678841517
    },
    {
        "content": "<p>Does seeing how <a href=\"https://leanprover-community.github.io/mathlib_docs/find/second_derivative_symmetric\">docs#second_derivative_symmetric</a> is stated help?</p>",
        "id": 341936208,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1678841530
    },
    {
        "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> , I don't think <code>fderiv</code>  is what I want as it requires you to give a point where f has a derivative. So if i want to write second derivative at x_star, i will need to input an arbitrary point x and after doing fderiv twice evaluate it at x_star.<br>\nSomething like <code>fderiv ℝ (fderiv ℝ f x) x x_star</code> which doesn't work</p>",
        "id": 342045339,
        "sender_full_name": "Abu Al Hassan",
        "timestamp": 1678884190
    },
    {
        "content": "<p>Can you summarise what the question is, perhaps with a much smaller example which doesn't depend on all the calculus? Ultimately is your question just about linear algebra? I feel that the question could do with a lot more minimising but maybe I'm wrong</p>",
        "id": 342045716,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1678884285
    },
    {
        "content": "<p>Further on, hessian contains partial derivatives and not the standard derivative.</p>",
        "id": 342046147,
        "sender_full_name": "Abu Al Hassan",
        "timestamp": 1678884366
    },
    {
        "content": "<p>I dont think an MWE would help and I think the question is quite concise tbh. I will attempt to further break it down now and open another question. Hopefully that will help</p>",
        "id": 342046494,
        "sender_full_name": "Abu Al Hassan",
        "timestamp": 1678884470
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113489-new-members/topic/differentiation.20in.20multivariate.20setting/near/341936208\">said</a>:</p>\n<blockquote>\n<p>Does seeing how <a href=\"https://leanprover-community.github.io/mathlib_docs/find/second_derivative_symmetric\">docs#second_derivative_symmetric</a> is stated help?</p>\n</blockquote>\n<p>Did you look at this? It uses</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">E</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">E</span> <span class=\"bp\">→</span> <span class=\"n\">F</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f'</span> <span class=\"o\">:</span> <span class=\"n\">E</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">E</span> <span class=\"bp\">→</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"n\">ℝ</span><span class=\"o\">]</span> <span class=\"n\">F</span><span class=\"o\">)}</span> <span class=\"o\">{</span><span class=\"n\">f''</span> <span class=\"o\">:</span> <span class=\"n\">E</span> <span class=\"bp\">→</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"n\">ℝ</span><span class=\"o\">]</span> <span class=\"n\">E</span> <span class=\"bp\">→</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"n\">ℝ</span><span class=\"o\">]</span> <span class=\"n\">F</span><span class=\"o\">}</span>\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">E</span><span class=\"o\">),</span> <span class=\"n\">has_fderiv_at</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">f'</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">has_fderiv_at</span> <span class=\"n\">f'</span> <span class=\"n\">f''</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 342046601,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1678884488
    },
    {
        "content": "<p>I'm pretty sure that <code>f''</code> is the hessian in this arrangement</p>",
        "id": 342047038,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1678884592
    },
    {
        "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> , thank you for the hint. Sorry for the late reply, i was trying to understand the way f' and f'' are defined in second_derivative_symmetric.</p>\n<p>I would have thought that <code>f' x</code> is a row vector (1 by n) containing the partial derivatives of f evaluated at x. I think <code>{f' : (fin n → ℝ) → ((fin n → ℝ) →L[ℝ] ℝ)}</code> does that.</p>\n<p>However, the hessian <code>f''</code> is meant to be an n by n matrix (so later I can use matrix.pos_semidef). I am afraid I really dont understand  <code>{f'' : (fin n → ℝ) →L[ℝ] (fin n → ℝ) →L[ℝ] ℝ}</code> achieves this. I am confused why the entries in this hessian are linear functions.</p>",
        "id": 342088002,
        "sender_full_name": "Abu Al Hassan",
        "timestamp": 1678893499
    },
    {
        "content": "<p>I am really sorry for maybe not asking this in the most intelligent manner. I am very new to this stuff in lean.</p>",
        "id": 342088760,
        "sender_full_name": "Abu Al Hassan",
        "timestamp": 1678893654
    },
    {
        "content": "<p>If I understand correctly, <code>f' x dx</code> gives the directional derivative at <code>x</code> in the direction <code>dx</code></p>",
        "id": 342088800,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1678893664
    },
    {
        "content": "<p>... and <code>f'' dx dy</code> gives you the entry of the hessian corresponding to the directions <code>dx</code> and <code>dy</code>. To recover the matrix you can set <code>dx = single i 1</code> and <code>dy = single j 1</code></p>",
        "id": 342088996,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1678893702
    },
    {
        "content": "<p>Perhaps <a href=\"https://leanprover-community.github.io/mathlib_docs/find/bilin_form.to_matrix'\">docs#bilin_form.to_matrix'</a> makes that link clearer?</p>",
        "id": 342089379,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1678893781
    },
    {
        "content": "<p><code>f ''</code> eats two elements of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi mathvariant=\"double-struck\">R</mi><mi>n</mi></msup></mrow><annotation encoding=\"application/x-tex\">\\R^n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6889em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">R</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6644em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span></span></span></span></span></span></span> and returns a real number, in a bilinear way, and every bilinear form on <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi mathvariant=\"double-struck\">R</mi><mi>n</mi></msup></mrow><annotation encoding=\"application/x-tex\">\\R^n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6889em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">R</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6644em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span></span></span></span></span></span></span> is represented by a matrix.</p>",
        "id": 342132933,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1678903901
    },
    {
        "content": "<p>Hi Eric and Prof. Buzzard. Thank you for the help on this query, I know my questioning was a bit all over the place (I was feeling really out of my depth tbh with all the built-in libraries I was having to utilise). I have been able to simplify the problem and be able to define hessian and positive semi-definite from a more basic way.  I will leave my code here in case it helps anyone in the future and mark this query resolved.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">analysis.calculus.deriv</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.matrix.notation</span>\n<span class=\"kn\">import</span> <span class=\"n\">linear_algebra.matrix</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">set</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span>\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">x_star</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n\n<span class=\"c1\">-- f is twice continuously differentiable over U</span>\n<span class=\"kd\">def</span> <span class=\"n\">twice_continuous_diff_on</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"n\">continuous_on</span> <span class=\"o\">(</span><span class=\"n\">fderiv</span> <span class=\"n\">ℝ</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"n\">U</span> <span class=\"bp\">∧</span> <span class=\"c1\">--checks if the first derivative of f is continuous on teh set U</span>\n  <span class=\"n\">continuous_on</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">fderiv</span> <span class=\"n\">ℝ</span> <span class=\"o\">(</span><span class=\"n\">fderiv</span> <span class=\"n\">ℝ</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"n\">U</span> <span class=\"c1\">--checks if the second derivative of f is continuous on the set U</span>\n\n<span class=\"c1\">-- x_star is a stationary point</span>\n<span class=\"kd\">def</span> <span class=\"n\">stationary_point</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x_star</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"n\">fderiv</span> <span class=\"n\">ℝ</span> <span class=\"n\">f</span> <span class=\"n\">x_star</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n\n<span class=\"c1\">-- x_star is a local minimum point</span>\n<span class=\"kd\">def</span> <span class=\"n\">local_minimum</span>  <span class=\"o\">(</span><span class=\"n\">x_star</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">∃</span> <span class=\"n\">ε</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">y</span> <span class=\"bp\">∈</span> <span class=\"n\">U</span><span class=\"o\">,</span> <span class=\"n\">dist</span> <span class=\"n\">y</span> <span class=\"n\">x_star</span> <span class=\"bp\">&lt;</span> <span class=\"n\">ε</span> <span class=\"bp\">→</span> <span class=\"n\">f</span> <span class=\"n\">x_star</span> <span class=\"bp\">≤</span> <span class=\"n\">f</span> <span class=\"n\">y</span>\n\n<span class=\"c1\">-- Hessian matrix. This is a square matrix of second order partial derivatives of f.</span>\n<span class=\"c1\">-- computes the second order partial derivative of f at the ith and jth variables at a point x.</span>\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">hessian</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">fderiv</span> <span class=\"n\">ℝ</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">fderiv</span> <span class=\"n\">ℝ</span> <span class=\"n\">f</span> <span class=\"n\">y</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">j</span>\n\n<span class=\"c1\">-- Hessian matrix at x_star, H is positive semi-definite (∀ x, 0 ≤ xᵀ * H * x ).</span>\n<span class=\"kd\">def</span> <span class=\"n\">hessian_positive_semi_definite</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x_star</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"k\">let</span> <span class=\"n\">H</span> <span class=\"o\">:=</span> <span class=\"n\">hessian</span> <span class=\"n\">f</span> <span class=\"n\">x_star</span> <span class=\"k\">in</span>\n  <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">matrix.dot_product</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">matrix.mul_vec</span> <span class=\"n\">H</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"bp\">≥</span> <span class=\"mi\">0</span>\n</code></pre></div>",
        "id": 342179273,
        "sender_full_name": "Abu Al Hassan",
        "timestamp": 1678919390
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"583816\">Abu Al Hassan</span> has marked this topic as resolved.</p>",
        "id": 342179395,
        "sender_full_name": "Notification Bot",
        "timestamp": 1678919430
    },
    {
        "content": "<p>Your use of <code>dist</code> above is not the euclidean distance; that might be a problem</p>",
        "id": 342181361,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1678920432
    },
    {
        "content": "<p>Note also that you should use <a href=\"https://leanprover-community.github.io/mathlib_docs/find/matrix.of\">docs#matrix.of</a> to build a matrix from coefficients</p>",
        "id": 342183093,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1678921349
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"583816\">Abu Al Hassan</span> has marked this topic as unresolved.</p>",
        "id": 342183130,
        "sender_full_name": "Notification Bot",
        "timestamp": 1678921372
    },
    {
        "content": "<p>Yes you're right, thanks for the spot. I wasn't a fan of the earlier euclidean.ball but the below should be fine:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- x_star is a local minimum point using Euclidean distance</span>\n<span class=\"kd\">def</span> <span class=\"n\">local_minimum</span>  <span class=\"o\">(</span><span class=\"n\">x_star</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">∃</span> <span class=\"n\">ε</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">y</span> <span class=\"bp\">∈</span> <span class=\"n\">U</span><span class=\"o\">,</span> <span class=\"bp\">‖</span> <span class=\"n\">y</span> <span class=\"bp\">-</span> <span class=\"n\">x_star</span> <span class=\"bp\">‖</span> <span class=\"bp\">&lt;</span> <span class=\"n\">ε</span> <span class=\"bp\">→</span> <span class=\"n\">f</span> <span class=\"n\">x_star</span> <span class=\"bp\">≤</span> <span class=\"n\">f</span> <span class=\"n\">y</span>\n</code></pre></div>",
        "id": 342183132,
        "sender_full_name": "Abu Al Hassan",
        "timestamp": 1678921373
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113489-new-members/topic/differentiation.20in.20multivariate.20setting/near/342183093\">said</a>:</p>\n<blockquote>\n<p>Note also that you should use <a href=\"https://leanprover-community.github.io/mathlib_docs/find/matrix.of\">docs#matrix.of</a> to build a matrix from coefficients</p>\n</blockquote>\n<p>Okay I will try to adapt it</p>",
        "id": 342183236,
        "sender_full_name": "Abu Al Hassan",
        "timestamp": 1678921435
    },
    {
        "content": "<p>That doesn't work either. That's not the euclidean norm you claim it is!</p>",
        "id": 342184915,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1678922137
    },
    {
        "content": "<p>I think I mentioned that first of all, but I guess it doesn't matter here</p>",
        "id": 342185227,
        "sender_full_name": "Alistair Tucker",
        "timestamp": 1678922250
    },
    {
        "content": "<p>Btw if <code>f</code> isn't differentiable  then <code>fderiv</code> is defined to be <code>0</code>. That's why I wrote <code>has_fderiv_at f 0 x_star</code> rather than <code>fderiv ℝ f x_star = 0</code> for the first order condition.</p>",
        "id": 342186889,
        "sender_full_name": "Alistair Tucker",
        "timestamp": 1678922882
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113489-new-members/topic/differentiation.20in.20multivariate.20setting/near/342184915\">said</a>:</p>\n<blockquote>\n<p>That doesn't work either. That's not the euclidean norm you claim it is!</p>\n</blockquote>\n<p>Does the following work?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- x_star is a local minimum point using Euclidean distance</span>\n<span class=\"kd\">def</span> <span class=\"n\">local_minimum</span>  <span class=\"o\">(</span><span class=\"n\">x_star</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">∃</span> <span class=\"n\">ε</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">y</span> <span class=\"bp\">∈</span> <span class=\"n\">U</span><span class=\"o\">,</span> <span class=\"n\">euclidean.dist</span> <span class=\"n\">y</span> <span class=\"n\">x_star</span> <span class=\"bp\">&lt;</span> <span class=\"n\">ε</span> <span class=\"bp\">→</span> <span class=\"n\">f</span> <span class=\"n\">x_star</span> <span class=\"bp\">≤</span> <span class=\"n\">f</span> <span class=\"n\">y</span>\n</code></pre></div>",
        "id": 342188285,
        "sender_full_name": "Abu Al Hassan",
        "timestamp": 1678923751
    },
    {
        "content": "<p>Or shall i got back to :</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">local_minimum</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x_star</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"bp\">∃</span> <span class=\"n\">ε</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">ε</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">euclidean.ball</span> <span class=\"n\">x_star</span> <span class=\"n\">ε</span> <span class=\"bp\">⊆</span> <span class=\"n\">U</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">euclidean.ball</span> <span class=\"n\">x_star</span> <span class=\"n\">ε</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x_star</span> <span class=\"bp\">≤</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 342188375,
        "sender_full_name": "Abu Al Hassan",
        "timestamp": 1678923801
    },
    {
        "content": "<p>I think you should use <code>x_star : euclidean_space ℝ (fin n)</code> isntead of <code>x_star : fin n → ℝ</code>, and similar throughout. Then <code>norm</code>, <code>dist</code>, <code>ball</code> etc all mean the right thing.</p>",
        "id": 342188418,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1678923841
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/euclidean.dist\">docs#euclidean.dist</a> is likely to just add extra confusion</p>",
        "id": 342188515,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1678923883
    },
    {
        "content": "<p>Ouch in your definition of <code>hessian</code> you are coercing terms of <code>fin n</code> to <code>fin n → ℝ</code>. Pretty sure that's not what you want to be doing</p>",
        "id": 342188983,
        "sender_full_name": "Alistair Tucker",
        "timestamp": 1678924209
    },
    {
        "content": "<p>I knew it looked fishy, but assumed it was fine because Lean accepted it and I must have misread ...</p>",
        "id": 342189049,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1678924270
    },
    {
        "content": "<p>You don't want the coercion, you want <a href=\"https://leanprover-community.github.io/mathlib_docs/find/euclidean_space.single\">docs#euclidean_space.single</a></p>",
        "id": 342189084,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1678924310
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"111433\">Alistair Tucker</span> <a href=\"#narrow/stream/113489-new-members/topic/differentiation.20in.20multivariate.20setting/near/342188983\">said</a>:</p>\n<blockquote>\n<p>Ouch in your definition of <code>hessian</code> you are coercing terms of <code>fin n</code> to <code>fin n → ℝ</code>. Pretty sure that's not what you want to be doing</p>\n</blockquote>\n<p>Yh i realised that was a error when i tried to implement matrix.of. Currently struggling to make that work</p>",
        "id": 342189151,
        "sender_full_name": "Abu Al Hassan",
        "timestamp": 1678924350
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113489-new-members/topic/differentiation.20in.20multivariate.20setting/near/342189084\">said</a>:</p>\n<blockquote>\n<p>You don't want the coercion, you want <a href=\"https://leanprover-community.github.io/mathlib_docs/find/euclidean_space.single\">docs#euclidean_space.single</a></p>\n</blockquote>\n<p>Or better yet, use</p>\n<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113489-new-members/topic/differentiation.20in.20multivariate.20setting/near/342089379\">said</a>:</p>\n<blockquote>\n<p>Perhaps <a href=\"https://leanprover-community.github.io/mathlib_docs/find/bilin_form.to_matrix'\">docs#bilin_form.to_matrix'</a> makes that link clearer?</p>\n</blockquote>",
        "id": 342189278,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1678924481
    },
    {
        "content": "<p>(combined with <a href=\"https://leanprover-community.github.io/mathlib_docs/find/linear_map.to_bilin\">docs#linear_map.to_bilin</a>)</p>",
        "id": 342189318,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1678924512
    },
    {
        "content": "<p>Would  you recommend that i do <code>(f : (euclidean_space ℝ (fin n)) → ℝ) </code> rather than <code>(f : (fin n → ℝ) → ℝ) </code>?</p>",
        "id": 342192104,
        "sender_full_name": "Abu Al Hassan",
        "timestamp": 1678926267
    },
    {
        "content": "<p>Hi Eric, I tried what you suggested but can't get lean to be alright with the code. Can you please help with how to do it. Here is my MWE:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">analysis.calculus.deriv</span>\n<span class=\"kn\">import</span> <span class=\"n\">linear_algebra.matrix</span>\n<span class=\"kn\">import</span> <span class=\"n\">analysis.inner_product_space.euclidean_dist</span>\n<span class=\"kn\">import</span> <span class=\"n\">linear_algebra.bilinear_form</span>\n<span class=\"kn\">import</span> <span class=\"n\">linear_algebra.matrix.bilinear_form</span>\n<span class=\"kn\">open</span> <span class=\"n\">set</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">euclidean_space</span> <span class=\"n\">ℝ</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">hessian</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">euclidean_space</span> <span class=\"n\">ℝ</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">euclidean_space</span> <span class=\"n\">ℝ</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"n\">H</span> <span class=\"o\">:=</span> <span class=\"n\">linear_map.to_bilin</span> <span class=\"o\">(</span><span class=\"n\">fderiv</span> <span class=\"n\">ℝ</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">euclidean_space</span> <span class=\"n\">ℝ</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">),</span> <span class=\"n\">fderiv</span> <span class=\"n\">ℝ</span> <span class=\"n\">f</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"k\">in</span>\n  <span class=\"n\">bilin_form.to_matrix'</span> <span class=\"n\">H</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">don't</span> <span class=\"n\">know</span> <span class=\"n\">how</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"n\">placeholder</span>\n<span class=\"n\">context</span><span class=\"o\">:</span>\n<span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span>\n<span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">euclidean_space</span> <span class=\"n\">ℝ</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">,</span>\n<span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">euclidean_space</span> <span class=\"n\">ℝ</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n<span class=\"bp\">⊢</span> <span class=\"kt\">Sort</span> <span class=\"bp\">?</span>\n<span class=\"n\">delete2.lean</span><span class=\"o\">:</span><span class=\"mi\">11</span><span class=\"o\">:</span><span class=\"mi\">11</span>\n<span class=\"n\">type</span> <span class=\"n\">mismatch</span> <span class=\"n\">at</span> <span class=\"n\">application</span>\n  <span class=\"bp\">⇑</span><span class=\"n\">linear_map.to_bilin</span> <span class=\"o\">(</span><span class=\"n\">fderiv</span> <span class=\"n\">ℝ</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">euclidean_space</span> <span class=\"n\">ℝ</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)),</span> <span class=\"n\">fderiv</span> <span class=\"n\">ℝ</span> <span class=\"n\">f</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n<span class=\"n\">term</span>\n  <span class=\"n\">fderiv</span> <span class=\"n\">ℝ</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">euclidean_space</span> <span class=\"n\">ℝ</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)),</span> <span class=\"n\">fderiv</span> <span class=\"n\">ℝ</span> <span class=\"n\">f</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"n\">x</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">euclidean_space</span> <span class=\"n\">ℝ</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">→</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"n\">ℝ</span><span class=\"o\">]</span> <span class=\"n\">euclidean_space</span> <span class=\"n\">ℝ</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">→</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"n\">ℝ</span><span class=\"o\">]</span> <span class=\"n\">ℝ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"bp\">?</span><span class=\"n\">m_3</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"bp\">?</span><span class=\"n\">m_1</span><span class=\"o\">]</span> <span class=\"bp\">?</span><span class=\"n\">m_3</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"bp\">?</span><span class=\"n\">m_1</span><span class=\"o\">]</span> <span class=\"bp\">?</span><span class=\"n\">m_1</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"bp\">?</span> <span class=\"bp\">?</span><span class=\"o\">)</span>\n<span class=\"n\">Additional</span> <span class=\"n\">information</span><span class=\"o\">:</span>\n<span class=\"n\">c</span><span class=\"o\">:</span><span class=\"bp\">\\</span><span class=\"n\">Users</span><span class=\"bp\">\\</span><span class=\"n\">ahass</span><span class=\"bp\">\\</span><span class=\"n\">OneDrive</span><span class=\"bp\">\\</span><span class=\"n\">Desktop</span><span class=\"bp\">\\</span><span class=\"n\">formalising</span><span class=\"bp\">-</span><span class=\"n\">mathematics</span><span class=\"bp\">-</span><span class=\"mi\">2023</span><span class=\"bp\">\\</span><span class=\"n\">src</span><span class=\"bp\">\\</span><span class=\"n\">coursework</span><span class=\"bp\">\\</span><span class=\"n\">delete2.lean</span><span class=\"o\">:</span><span class=\"mi\">11</span><span class=\"o\">:</span><span class=\"mi\">11</span><span class=\"o\">:</span> <span class=\"n\">context</span><span class=\"o\">:</span> <span class=\"n\">switched</span> <span class=\"n\">to</span> <span class=\"n\">simple</span> <span class=\"n\">application</span> <span class=\"n\">elaboration</span> <span class=\"n\">procedure</span> <span class=\"n\">because</span> <span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">use</span> <span class=\"n\">expected</span> <span class=\"n\">type</span> <span class=\"n\">to</span> <span class=\"n\">elaborate</span> <span class=\"n\">it</span><span class=\"o\">,</span> <span class=\"n\">error</span> <span class=\"n\">message</span>\n  <span class=\"n\">too</span> <span class=\"n\">many</span> <span class=\"n\">arguments</span>\n</code></pre></div>",
        "id": 342194611,
        "sender_full_name": "Abu Al Hassan",
        "timestamp": 1678927616
    },
    {
        "content": "<p>I am hoping my <code>def hessian_positive_semi_definite</code> will work in its current form later</p>",
        "id": 342194837,
        "sender_full_name": "Abu Al Hassan",
        "timestamp": 1678927748
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"111433\">Alistair Tucker</span> <a href=\"#narrow/stream/113489-new-members/topic/differentiation.20in.20multivariate.20setting/near/342188983\">said</a>:</p>\n<blockquote>\n<p>Ouch in your definition of <code>hessian</code> you are coercing terms of <code>fin n</code> to <code>fin n → ℝ</code>. Pretty sure that's not what you want to be doing</p>\n</blockquote>\n<p>Can you please elaborate on this?</p>",
        "id": 342195823,
        "sender_full_name": "Abu Al Hassan",
        "timestamp": 1678928269
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">type</span> <span class=\"n\">mismatch</span> <span class=\"n\">at</span> <span class=\"n\">application</span>\n  <span class=\"bp\">⇑</span><span class=\"n\">linear_map.to_bilin</span> <span class=\"o\">(</span><span class=\"n\">fderiv</span> <span class=\"n\">ℝ</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">euclidean_space</span> <span class=\"n\">ℝ</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)),</span> <span class=\"n\">fderiv</span> <span class=\"n\">ℝ</span> <span class=\"n\">f</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n<span class=\"n\">term</span>\n  <span class=\"n\">fderiv</span> <span class=\"n\">ℝ</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">euclidean_space</span> <span class=\"n\">ℝ</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)),</span> <span class=\"n\">fderiv</span> <span class=\"n\">ℝ</span> <span class=\"n\">f</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"n\">x</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">euclidean_space</span> <span class=\"n\">ℝ</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">→</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"n\">ℝ</span><span class=\"o\">]</span> <span class=\"n\">euclidean_space</span> <span class=\"n\">ℝ</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">→</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"n\">ℝ</span><span class=\"o\">]</span> <span class=\"n\">ℝ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"bp\">?</span><span class=\"n\">m_3</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"bp\">?</span><span class=\"n\">m_1</span><span class=\"o\">]</span> <span class=\"bp\">?</span><span class=\"n\">m_3</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"bp\">?</span><span class=\"n\">m_1</span><span class=\"o\">]</span> <span class=\"bp\">?</span><span class=\"n\">m_1</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"bp\">?</span> <span class=\"bp\">?</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>This is telling you that you have a <em>continuous</em> bilinear map (<code>→L</code>), but lean is expecting you to provide a regular one (<code>→ₗ</code>)</p>",
        "id": 342197864,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1678929509
    },
    {
        "content": "<p>This is of course rather irritating, and I don't think we have anything that directly converts between the two</p>",
        "id": 342198287,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1678929813
    },
    {
        "content": "<p>You can change the left-most arrow with <code>.to_linear_map</code>, but the rightmost one needs to be eliminated with composition, and we don't have the map to compose with either</p>",
        "id": 342198373,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1678929859
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"583816\">Abu Al Hassan</span> <a href=\"#narrow/stream/113489-new-members/topic/differentiation.20in.20multivariate.20setting/near/342195823\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"111433\">Alistair Tucker</span> <a href=\"#narrow/stream/113489-new-members/topic/differentiation.20in.20multivariate.20setting/near/342188983\">said</a>:</p>\n<blockquote>\n<p>Ouch in your definition of <code>hessian</code> you are coercing terms of <code>fin n</code> to <code>fin n → ℝ</code>. Pretty sure that's not what you want to be doing</p>\n</blockquote>\n<p>Can you please elaborate on this?</p>\n</blockquote>\n<p>When applied to <code>𝕜 : Type*</code> the underlying field, <code>f : E → F</code> the function to be differentiated and <code>x : E</code> the point at which to do so, <code>fderiv</code> will return a linear map of type <code>E →L[𝕜] F</code>. That linear map (let's call it <code>f' x</code>) also takes an argument which must be of type <code>E</code> or able to be coerced to type <code>E</code>. Otherwise Lean will complain. By accident you fooled Lean by providing a term with a valid but wholly unsuitable coercion to <code>E</code>. It surprises me, given that there is no automatic coercion from type <code>ℝ</code> to <code>fin n → ℝ</code>, but there is apparently one from type <code>fin n</code> to <code>fin n → ℝ</code>. Try it yourself by typing <code>#eval ((2 : fin 3) : fin 3 → ℝ)</code> in your editor. One has to look through some noise, but the answer it returns is the vector (2, 2, 2)! This is not what you wanted. The good news is that working with <code>euclidean_space ℝ (fin n)</code> you are less likely to fall into this trap again, because there is no automatic coercion from type <code>fin n</code> to <code>euclidean_space ℝ (fin n)</code>.</p>",
        "id": 342269436,
        "sender_full_name": "Alistair Tucker",
        "timestamp": 1678962608
    },
    {
        "content": "<p>Yes, that is the \"\"canonical\"\" coercion from <code>fin n</code> to any ring. Of course this is absolutely not intended use. Intended use is <code>fin a -&gt; K</code> where <code>K</code> is a characteristic <code>a</code> ring.</p>",
        "id": 342285353,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1678966943
    },
    {
        "content": "<p>I've argued on Xena that we should remove this coercion given its surprisiveness and the fact that the coercion <code>fin a -&gt; fin a</code> is not defeq to <code>id</code>. IIUC <span class=\"user-mention\" data-user-id=\"284160\">@Eric Rodriguez</span> wants to replace it with a <code>fin_cast</code> field in <code>char_p</code>, the same way we have <a href=\"https://leanprover-community.github.io/mathlib_docs/find/add_monoid_with_one.nat_cast\">docs#add_monoid_with_one.nat_cast</a>.</p>",
        "id": 342285829,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1678967080
    },
    {
        "content": "<p>Where's that coercion?</p>",
        "id": 342286722,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1678967283
    },
    {
        "content": "<p>It was for zmod instead of fin, but the same idea stands, yea</p>",
        "id": 342288274,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1678967703
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113489-new-members/topic/differentiation.20in.20multivariate.20setting/near/342198373\">said</a>:</p>\n<blockquote>\n<p>You can change the left-most arrow with <code>.to_linear_map</code>, but the rightmost one needs to be eliminated with composition, and we don't have the map to compose with either</p>\n</blockquote>\n<p>What do you suggest I do? It's sounding like a bit of a dead end.</p>",
        "id": 342299786,
        "sender_full_name": "Abu Al Hassan",
        "timestamp": 1678970676
    },
    {
        "content": "<p>I am doing this for a university module and setting this problem up has been a nightmare compared to the other coursework I have done in lean. Trying to weigh my option of whether I should tackle a different proof.</p>",
        "id": 342299971,
        "sender_full_name": "Abu Al Hassan",
        "timestamp": 1678970732
    },
    {
        "content": "<p>I think it's a good lean exercise to manually write something like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">continuous_linear_map.to_bilin</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">E</span> <span class=\"bp\">→</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"n\">ℝ</span><span class=\"o\">]</span> <span class=\"n\">E</span> <span class=\"bp\">→</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"n\">ℝ</span><span class=\"o\">]</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">bilin_form</span> <span class=\"n\">ℝ</span> <span class=\"n\">E</span>\n</code></pre></div>",
        "id": 342300123,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1678970773
    },
    {
        "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"111433\">@Alistair Tucker</span>, thank you for explaining the problem. I understand it much better now.</p>",
        "id": 342300140,
        "sender_full_name": "Abu Al Hassan",
        "timestamp": 1678970779
    },
    {
        "content": "<p>Is it really necessary to do this through matrices? As I understand it (and I may not—e.g. I initially thought your ∇^{2} was the Laplacian) your and Eric's code can already be brought together into this problem statement:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">analysis.inner_product_space.euclidean_dist</span>\n\n<span class=\"kd\">notation</span> <span class=\"bp\">`𝓔`</span> <span class=\"n\">n</span><span class=\"o\">:</span><span class=\"mi\">50</span> <span class=\"o\">:=</span> <span class=\"n\">euclidean_space</span> <span class=\"n\">ℝ</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">open_set</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"bp\">𝓔</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">U</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">ε</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">ε</span><span class=\"o\">),</span> <span class=\"n\">euclidean.ball</span> <span class=\"n\">x</span> <span class=\"n\">ε</span> <span class=\"bp\">⊆</span> <span class=\"n\">U</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">local_minimum</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">x_star</span> <span class=\"o\">:</span> <span class=\"bp\">𝓔</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"bp\">𝓔</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">𝓔</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">∃</span> <span class=\"n\">ε</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">ε</span><span class=\"o\">),</span> <span class=\"bp\">∀</span> <span class=\"n\">y</span> <span class=\"bp\">∈</span> <span class=\"n\">U</span><span class=\"o\">,</span> <span class=\"bp\">‖</span><span class=\"n\">y</span> <span class=\"bp\">-</span> <span class=\"n\">x_star</span><span class=\"bp\">‖</span> <span class=\"bp\">&lt;</span> <span class=\"n\">ε</span> <span class=\"bp\">→</span> <span class=\"n\">f</span> <span class=\"n\">x_star</span> <span class=\"bp\">≤</span> <span class=\"n\">f</span> <span class=\"n\">y</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">necess_2nd_order_optimality_condit</span>\n    <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"bp\">𝓔</span> <span class=\"n\">n</span><span class=\"o\">)}</span> <span class=\"o\">(</span><span class=\"n\">h_open</span> <span class=\"o\">:</span> <span class=\"n\">open_set</span> <span class=\"n\">U</span><span class=\"o\">)</span>\n    <span class=\"o\">{</span><span class=\"n\">x_star</span> <span class=\"o\">:</span> <span class=\"bp\">𝓔</span> <span class=\"n\">n</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h_xstar_in_U</span> <span class=\"o\">:</span> <span class=\"n\">x_star</span> <span class=\"bp\">∈</span> <span class=\"n\">U</span><span class=\"o\">)</span>\n    <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">𝓔</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f'</span> <span class=\"o\">:</span> <span class=\"bp\">𝓔</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"bp\">𝓔</span> <span class=\"n\">n</span> <span class=\"bp\">→</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"n\">ℝ</span><span class=\"o\">]</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f''</span> <span class=\"o\">:</span> <span class=\"bp\">𝓔</span> <span class=\"n\">n</span> <span class=\"bp\">→</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"n\">ℝ</span><span class=\"o\">]</span> <span class=\"bp\">𝓔</span> <span class=\"n\">n</span> <span class=\"bp\">→</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"n\">ℝ</span><span class=\"o\">]</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span>\n    <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">y</span> <span class=\"bp\">∈</span> <span class=\"n\">U</span><span class=\"o\">,</span> <span class=\"n\">has_fderiv_at</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">f'</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">has_fderiv_at</span> <span class=\"n\">f'</span> <span class=\"n\">f''</span> <span class=\"n\">x_star</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">h_stationary</span> <span class=\"o\">:</span> <span class=\"n\">f'</span> <span class=\"n\">x_star</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">local_minimum</span> <span class=\"n\">x_star</span> <span class=\"n\">U</span> <span class=\"n\">f</span> <span class=\"bp\">→</span> <span class=\"bp\">∀</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">f''</span> <span class=\"n\">y</span> <span class=\"n\">y</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 342325094,
        "sender_full_name": "Alistair Tucker",
        "timestamp": 1678976230
    },
    {
        "content": "<p>I think you might still see some advantage to going through <code>bilin_form</code> as <code>f.to_bilin.to_quadratic_form.pos_def</code> or something instead of <code>∀ y, 0 ≤ f'' y y </code>, but I agree that matrices are probably a distraction</p>",
        "id": 342326821,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1678976540
    },
    {
        "content": "<p>It's annoying that <code>continuous_linear_map.to_bilin</code> is missing, but it's super trivial to prove</p>",
        "id": 342326936,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1678976563
    },
    {
        "content": "<p>Note that you don't need the space to be finite-dimensional for the statement to hold. (And no need for Euclidean norm either). The statement is definitely easier to prove if you put it in the right generality, because you won't be deterred by irrelevant details.</p>",
        "id": 342343557,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1678979621
    },
    {
        "content": "<p>Following on from <span class=\"user-mention\" data-user-id=\"111433\">@Alistair Tucker</span> code above. it would be great if someone can explain what <code>0 ≤ f'' y y</code> means in it.</p>\n<p>Does  <code>0 ≤ f'' y y</code> mean we are saying y^{T}Hessian(x_star)y &gt;= 0 for positive semi definiteness?<br>\n(So our goal is that for all y in R^n,  y transpose times Hessian evaluated at x_star times y is greater or equal to 0)</p>",
        "id": 342443154,
        "sender_full_name": "Abu Al Hassan",
        "timestamp": 1679010101
    },
    {
        "content": "<p>Great, thank you sincerely to everyone that helped.</p>",
        "id": 342444746,
        "sender_full_name": "Abu Al Hassan",
        "timestamp": 1679011037
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"583816\">Abu Al Hassan</span> has marked this topic as resolved.</p>",
        "id": 342575322,
        "sender_full_name": "Notification Bot",
        "timestamp": 1679062919
    },
    {
        "content": "<p>Hi, I have a follow-up from Alistairs's code. <code>(hx: has_fderiv_at f' f'' x_star)</code> isn't exactly what I want because f'' here is fixed here such that it's evaluated at x_star.  I however want f'' where I can evaluate it at any point in U.</p>\n<p>I think changing hx to  <code>(hx : ∀ x_star ∈ U, has_fderiv_at f' f'' x_star)</code> is nonsense and I would probably need to change the structure of <code>{f'' : 𝓔 n →L[ℝ] 𝓔 n →L[ℝ] ℝ}</code>. Not sure how.</p>\n<p>I do have the following which could help. <br>\n<code>\n-- f is twice continuously differentiable over U\ndef twice_continuous_diff_on {n : ℕ} (f : 𝓔 n → ℝ) (U : set (𝓔 n)) : Prop :=\n  continuous_on (fderiv ℝ f) U ∧ --checks if the first derivative of f is continuous on the set U\n  continuous_on (λ x, fderiv ℝ (fderiv ℝ f x)) U --checks if the second derivative of f is continuous on the set U\n</code></p>\n<p>I would really appreciate some further guidance</p>",
        "id": 342688179,
        "sender_full_name": "Abu Al Hassan",
        "timestamp": 1679099391
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"583816\">Abu Al Hassan</span> has marked this topic as unresolved.</p>",
        "id": 342688254,
        "sender_full_name": "Notification Bot",
        "timestamp": 1679099414
    },
    {
        "content": "<p>Can you ask the full question again eg with a working example? I can try and have a look because I feel like we're converging now.</p>",
        "id": 342688709,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1679099694
    },
    {
        "content": "<p>But I'm too lazy to read the entire thread and put everything together, I wasn't following at the beginning because I've had a really busy week</p>",
        "id": 342688750,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1679099722
    },
    {
        "content": "<p>I have opened up another question Prof. Hopefully I have explained my problem there sufficiently well.</p>",
        "id": 342757986,
        "sender_full_name": "Abu Al Hassan",
        "timestamp": 1679137706
    }
]