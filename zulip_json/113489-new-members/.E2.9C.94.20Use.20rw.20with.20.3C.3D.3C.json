[
    {
        "content": "<p>How do I enter a infix function such as  <code>&lt;=&lt;</code> in the rw tactic ? I get an error \"expected ']' \" if I just type it directly. Backticks also didn't work...</p>",
        "id": 344955513,
        "sender_full_name": "Miguel Negrão",
        "timestamp": 1679946531
    },
    {
        "content": "<p>It doesn't seem to work with <code>rw</code>, but you should be able to do <code>simp only [((· &lt;=&lt; ·)]</code> in Lean 4.</p>",
        "id": 344957018,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1679947079
    },
    {
        "content": "<p>But there is really no way to refer to an infix function except creating a lambda around it ? In Haskell I think one can refer to them by using parenthesis <code>(&lt;=&lt;) f g</code>.</p>",
        "id": 345146480,
        "sender_full_name": "Miguel Negrão",
        "timestamp": 1680012832
    },
    {
        "content": "<p>Lean 3 could do this too IIRC</p>",
        "id": 345146690,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1680012859
    },
    {
        "content": "<p>The <code>(· &lt;=&lt; ·)</code> syntax is intended to be usable in the same situations where you would use <code>(&lt;=&lt;)</code> in haskell. The fact that it generates an additional beta redex is an implementation detail which will hopefully be fixed at some point</p>",
        "id": 345150497,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1680013690
    },
    {
        "content": "<p>if you really need to refer to the infix function directly, you always have the option of not using the notation</p>",
        "id": 345151063,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1680013816
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"583642\">Miguel Negrão</span> has marked this topic as resolved.</p>",
        "id": 345920418,
        "sender_full_name": "Notification Bot",
        "timestamp": 1680262983
    }
]