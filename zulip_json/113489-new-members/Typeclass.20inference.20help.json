[
    {
        "content": "<p>Can you help me understand what's going wrong here? The theorem <code>LinearMap.ker_eq_bot</code> does apply to <code>f</code> (a linear map on the <code>TensorProduct</code> of two submodules of a <code>TensorAlgebra</code>), but it needs some cajoling.</p>\n<p>X problem: Find a linear equivalence  <code>e : W₁ ⊗[R] W₂ ≃ₗ[R] W₁ * W₂</code><br>\nW problem: Find a basis for <code>W₁ * W₂</code> given bases for <code>W₁</code> and  <code>W₂</code> (idea : <code>(Basis.tensorProduct ℰ₁ ℰ₂).map e</code>)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.LinearAlgebra.TensorAlgebra.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.LinearAlgebra.TensorProduct</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">autoImplicit</span> <span class=\"n\">false</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">TensorProduct</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">CommRing</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">AddCommGroup</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Module</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">AddCommGroup</span> <span class=\"n\">P</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Module</span> <span class=\"n\">R</span> <span class=\"n\">P</span><span class=\"o\">]</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">W₁</span> <span class=\"n\">W₂</span> <span class=\"o\">:</span> <span class=\"n\">Submodule</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">TensorAlgebra</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">)}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">W₁</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">W₂</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">P</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n    <span class=\"n\">LinearMap.ker</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"bp\">⊥</span> <span class=\"bp\">↔</span> <span class=\"n\">Function.Injective</span> <span class=\"n\">f</span> <span class=\"o\">:=</span>\n  <span class=\"n\">LinearMap.ker_eq_bot</span>\n<span class=\"c1\">--~~~~~~~~~~~~~~~~~~~~</span>\n<span class=\"c1\">-- type mismatch</span>\n<span class=\"c1\">--   LinearMap.ker_eq_bot</span>\n<span class=\"c1\">-- has type</span>\n<span class=\"c1\">--   LinearMap.ker ?m.11471 = ⊥ ↔ Function.Injective ↑?m.11471 : Prop</span>\n<span class=\"c1\">-- but is expected to have type</span>\n<span class=\"c1\">--   LinearMap.ker f = ⊥ ↔ Function.Injective ↑f : Prop</span>\n\n<span class=\"c1\">-- Workaround 1</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">W₁</span> <span class=\"n\">W₂</span> <span class=\"o\">:</span> <span class=\"n\">Submodule</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">TensorAlgebra</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">)}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">W₁</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">W₂</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">P</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n    <span class=\"n\">LinearMap.ker</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"bp\">⊥</span> <span class=\"bp\">↔</span> <span class=\"n\">Function.Injective</span> <span class=\"n\">f</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">@</span><span class=\"n\">LinearMap.ker_eq_bot</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">inferInstance</span> <span class=\"o\">:</span> <span class=\"n\">AddCommGroup</span> <span class=\"o\">(</span><span class=\"n\">W₁</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">W₂</span><span class=\"o\">))</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span>\n\n<span class=\"c1\">-- Workaround 2</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">forgetful_ker_eq_bot</span> <span class=\"o\">{</span><span class=\"n\">W₁</span> <span class=\"n\">W₂</span> <span class=\"o\">:</span> <span class=\"n\">Submodule</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">W₁</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">W₂</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">P</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n    <span class=\"n\">LinearMap.ker</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"bp\">⊥</span> <span class=\"bp\">↔</span> <span class=\"n\">Function.Injective</span> <span class=\"n\">f</span> <span class=\"o\">:=</span>\n  <span class=\"n\">LinearMap.ker_eq_bot</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">W₁</span> <span class=\"n\">W₂</span> <span class=\"o\">:</span> <span class=\"n\">Submodule</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">TensorAlgebra</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">)}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">W₁</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">W₂</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">P</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n    <span class=\"n\">LinearMap.ker</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"bp\">⊥</span> <span class=\"bp\">↔</span> <span class=\"n\">Function.Injective</span> <span class=\"n\">f</span> <span class=\"o\">:=</span>\n  <span class=\"n\">forgetful_ker_eq_bot</span>\n</code></pre></div>",
        "id": 401613267,
        "sender_full_name": "Richard Copley",
        "timestamp": 1699795318
    },
    {
        "content": "<p>Here's another workaround:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">W₁</span> <span class=\"n\">W₂</span> <span class=\"o\">:</span> <span class=\"n\">Submodule</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">TensorAlgebra</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">)}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">W₁</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">W₂</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">P</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n    <span class=\"n\">LinearMap.ker</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"bp\">⊥</span> <span class=\"bp\">↔</span> <span class=\"n\">Function.Injective</span> <span class=\"n\">f</span> <span class=\"o\">:=</span>\n  <span class=\"n\">letI</span> <span class=\"o\">:</span> <span class=\"n\">AddCommGroup</span> <span class=\"o\">(</span><span class=\"n\">W₁</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">W₂</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">inferInstance</span>\n  <span class=\"n\">LinearMap.ker_eq_bot</span>\n</code></pre></div>",
        "id": 401613548,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1699795601
    },
    {
        "content": "<p>Much better! I tried <code>haveI</code>, but not <code>letI</code>.<br>\nAnd with that, I suppose it's not worth worrying the underlying issue. Thanks.</p>",
        "id": 401613825,
        "sender_full_name": "Richard Copley",
        "timestamp": 1699795895
    },
    {
        "content": "<p><code>haveI</code> is for proofs, but this structure is data.</p>\n<p>You can see the trace with <code>set_option trace.Meta.synthInstance true in</code> beforehand. I disagree that it's not worrying about the underlying issue -- something is broken here.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">[</span><span class=\"n\">Meta.synthInstance</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">AddCommGroup</span> <span class=\"o\">((</span><span class=\"bp\">↥</span><span class=\"n\">W₁</span><span class=\"o\">)</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"bp\">↥</span><span class=\"n\">W₂</span><span class=\"o\">)</span> <span class=\"bp\">▼</span>\n  <span class=\"o\">[]</span> <span class=\"n\">new</span> <span class=\"n\">goal</span> <span class=\"n\">AddCommGroup</span> <span class=\"o\">((</span><span class=\"bp\">↥</span><span class=\"n\">W₁</span><span class=\"o\">)</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"bp\">↥</span><span class=\"n\">W₂</span><span class=\"o\">)</span> <span class=\"bp\">▶</span>\n  <span class=\"o\">[]</span> <span class=\"bp\">❌</span> <span class=\"n\">apply</span> <span class=\"n\">inst</span><span class=\"bp\">✝¹</span> <span class=\"n\">to</span> <span class=\"n\">AddCommGroup</span> <span class=\"o\">((</span><span class=\"bp\">↥</span><span class=\"n\">W₁</span><span class=\"o\">)</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"bp\">↥</span><span class=\"n\">W₂</span><span class=\"o\">)</span> <span class=\"bp\">▶</span>\n  <span class=\"o\">[]</span> <span class=\"bp\">❌</span> <span class=\"n\">apply</span> <span class=\"n\">inst</span><span class=\"bp\">✝³</span> <span class=\"n\">to</span> <span class=\"n\">AddCommGroup</span> <span class=\"o\">((</span><span class=\"bp\">↥</span><span class=\"n\">W₁</span><span class=\"o\">)</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"bp\">↥</span><span class=\"n\">W₂</span><span class=\"o\">)</span> <span class=\"bp\">▶</span>\n  <span class=\"o\">[]</span> <span class=\"bp\">❌</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">TensorProduct.addCommGroup</span> <span class=\"n\">to</span> <span class=\"n\">AddCommGroup</span> <span class=\"o\">((</span><span class=\"bp\">↥</span><span class=\"n\">W₁</span><span class=\"o\">)</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"bp\">↥</span><span class=\"n\">W₂</span><span class=\"o\">)</span> <span class=\"bp\">▼</span>\n    <span class=\"o\">[</span><span class=\"n\">tryResolve</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">AddCommGroup</span> <span class=\"o\">((</span><span class=\"bp\">↥</span><span class=\"n\">W₁</span><span class=\"o\">)</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"bp\">↥</span><span class=\"n\">W₂</span><span class=\"o\">)</span> <span class=\"bp\">≟</span> <span class=\"n\">AddCommGroup</span> <span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">m.6801</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"bp\">?</span><span class=\"n\">m.6799</span><span class=\"o\">]</span> <span class=\"bp\">?</span><span class=\"n\">m.6802</span><span class=\"o\">)</span> <span class=\"bp\">▼</span>\n      <span class=\"o\">[]</span> <span class=\"bp\">❌</span> <span class=\"n\">AddCommGroup</span> <span class=\"o\">(</span><span class=\"bp\">↥</span><span class=\"n\">W₁</span><span class=\"o\">)</span> <span class=\"bp\">▼</span>\n        <span class=\"o\">[]</span> <span class=\"n\">new</span> <span class=\"n\">goal</span> <span class=\"n\">AddCommGroup</span> <span class=\"o\">(</span><span class=\"bp\">↥</span><span class=\"n\">W₁</span><span class=\"o\">)</span> <span class=\"bp\">▶</span>\n        <span class=\"o\">[]</span> <span class=\"bp\">❌</span> <span class=\"n\">apply</span> <span class=\"n\">inst</span><span class=\"bp\">✝¹</span> <span class=\"n\">to</span> <span class=\"n\">AddCommGroup</span> <span class=\"o\">(</span><span class=\"bp\">↥</span><span class=\"n\">W₁</span><span class=\"o\">)</span> <span class=\"bp\">▶</span>\n        <span class=\"o\">[]</span> <span class=\"bp\">❌</span> <span class=\"n\">apply</span> <span class=\"n\">inst</span><span class=\"bp\">✝³</span> <span class=\"n\">to</span> <span class=\"n\">AddCommGroup</span> <span class=\"o\">(</span><span class=\"bp\">↥</span><span class=\"n\">W₁</span><span class=\"o\">)</span> <span class=\"bp\">▶</span>\n        <span class=\"o\">[]</span> <span class=\"bp\">❌</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">Submodule.addCommGroup</span> <span class=\"n\">to</span> <span class=\"n\">AddCommGroup</span> <span class=\"o\">(</span><span class=\"bp\">↥</span><span class=\"n\">W₁</span><span class=\"o\">)</span> <span class=\"bp\">▼</span>\n          <span class=\"o\">[</span><span class=\"n\">tryResolve</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">AddCommGroup</span> <span class=\"o\">(</span><span class=\"bp\">↥</span><span class=\"n\">W₁</span><span class=\"o\">)</span> <span class=\"bp\">≟</span> <span class=\"n\">AddCommGroup</span> <span class=\"o\">(</span><span class=\"bp\">↥?</span><span class=\"n\">m.6823</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 401613900,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1699795958
    },
    {
        "content": "<p>I have no idea how to debug this. <code>[tryResolve]</code> is failing to find <code>AddCommGroup (↥W₁)</code> in your original failing example (see above), but  in the <code>letI</code> calculation it succeeds (see below):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">[</span><span class=\"n\">Meta.synthInstance</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"n\">AddCommGroup</span> <span class=\"o\">((</span><span class=\"bp\">↥</span><span class=\"n\">W₁</span><span class=\"o\">)</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"bp\">↥</span><span class=\"n\">W₂</span><span class=\"o\">)</span> <span class=\"bp\">▼</span>\n  <span class=\"o\">[]</span> <span class=\"n\">new</span> <span class=\"n\">goal</span> <span class=\"n\">AddCommGroup</span> <span class=\"o\">((</span><span class=\"bp\">↥</span><span class=\"n\">W₁</span><span class=\"o\">)</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"bp\">↥</span><span class=\"n\">W₂</span><span class=\"o\">)</span> <span class=\"bp\">▶</span>\n  <span class=\"o\">[]</span> <span class=\"bp\">❌</span> <span class=\"n\">apply</span> <span class=\"n\">inst</span><span class=\"bp\">✝¹</span> <span class=\"n\">to</span> <span class=\"n\">AddCommGroup</span> <span class=\"o\">((</span><span class=\"bp\">↥</span><span class=\"n\">W₁</span><span class=\"o\">)</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"bp\">↥</span><span class=\"n\">W₂</span><span class=\"o\">)</span> <span class=\"bp\">▶</span>\n  <span class=\"o\">[]</span> <span class=\"bp\">❌</span> <span class=\"n\">apply</span> <span class=\"n\">inst</span><span class=\"bp\">✝³</span> <span class=\"n\">to</span> <span class=\"n\">AddCommGroup</span> <span class=\"o\">((</span><span class=\"bp\">↥</span><span class=\"n\">W₁</span><span class=\"o\">)</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"bp\">↥</span><span class=\"n\">W₂</span><span class=\"o\">)</span> <span class=\"bp\">▶</span>\n  <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">TensorProduct.addCommGroup</span> <span class=\"n\">to</span> <span class=\"n\">AddCommGroup</span> <span class=\"o\">((</span><span class=\"bp\">↥</span><span class=\"n\">W₁</span><span class=\"o\">)</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"bp\">↥</span><span class=\"n\">W₂</span><span class=\"o\">)</span> <span class=\"bp\">▼</span>\n    <span class=\"o\">[</span><span class=\"n\">tryResolve</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"n\">AddCommGroup</span> <span class=\"o\">((</span><span class=\"bp\">↥</span><span class=\"n\">W₁</span><span class=\"o\">)</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"bp\">↥</span><span class=\"n\">W₂</span><span class=\"o\">)</span> <span class=\"bp\">≟</span> <span class=\"n\">AddCommGroup</span> <span class=\"o\">((</span><span class=\"bp\">↥</span><span class=\"n\">W₁</span><span class=\"o\">)</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"bp\">↥</span><span class=\"n\">W₂</span><span class=\"o\">)</span> <span class=\"bp\">▼</span>\n      <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">AddCommGroup</span> <span class=\"o\">(</span><span class=\"bp\">↥</span><span class=\"n\">W₁</span><span class=\"o\">)</span> <span class=\"bp\">▼</span>\n        <span class=\"o\">[]</span> <span class=\"n\">new</span> <span class=\"n\">goal</span> <span class=\"n\">AddCommGroup</span> <span class=\"o\">(</span><span class=\"bp\">↥</span><span class=\"n\">W₁</span><span class=\"o\">)</span> <span class=\"bp\">▶</span>\n        <span class=\"o\">[]</span> <span class=\"bp\">❌</span> <span class=\"n\">apply</span> <span class=\"n\">inst</span><span class=\"bp\">✝¹</span> <span class=\"n\">to</span> <span class=\"n\">AddCommGroup</span> <span class=\"o\">(</span><span class=\"bp\">↥</span><span class=\"n\">W₁</span><span class=\"o\">)</span> <span class=\"bp\">▶</span>\n        <span class=\"o\">[]</span> <span class=\"bp\">❌</span> <span class=\"n\">apply</span> <span class=\"n\">inst</span><span class=\"bp\">✝³</span> <span class=\"n\">to</span> <span class=\"n\">AddCommGroup</span> <span class=\"o\">(</span><span class=\"bp\">↥</span><span class=\"n\">W₁</span><span class=\"o\">)</span> <span class=\"bp\">▶</span>\n        <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">Submodule.addCommGroup</span> <span class=\"n\">to</span> <span class=\"n\">AddCommGroup</span> <span class=\"o\">(</span><span class=\"bp\">↥</span><span class=\"n\">W₁</span><span class=\"o\">)</span> <span class=\"bp\">▼</span>\n          <span class=\"o\">[</span><span class=\"n\">tryResolve</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"n\">AddCommGroup</span> <span class=\"o\">(</span><span class=\"bp\">↥</span><span class=\"n\">W₁</span><span class=\"o\">)</span> <span class=\"bp\">≟</span> <span class=\"n\">AddCommGroup</span> <span class=\"o\">(</span><span class=\"bp\">↥</span><span class=\"n\">W₁</span><span class=\"o\">)</span> <span class=\"bp\">▼</span>\n            <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">Ring</span> <span class=\"n\">R</span> <span class=\"bp\">▶</span>\n            <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">AddCommGroup</span> <span class=\"o\">(</span><span class=\"n\">TensorAlgebra</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"bp\">▶</span>\n</code></pre></div>\n<p>(oh -- somehow Lean could infer the type metavariable in the succeeding case?)</p>",
        "id": 401614670,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1699796714
    },
    {
        "content": "<p><code>((↥W₁) ⊗[R] ↥W₂)</code> vs <code>(?m.6801 ⊗[?m.6799] ?m.6802)</code></p>",
        "id": 401614824,
        "sender_full_name": "Richard Copley",
        "timestamp": 1699796861
    },
    {
        "content": "<p>I had been thinking the problem must be with finding two non-defeq instances of the same typeclass, which was why 'forgetting' about TensorAlgebra helped. Now I'm not sure.</p>",
        "id": 401615187,
        "sender_full_name": "Richard Copley",
        "timestamp": 1699797208
    },
    {
        "content": "<p>Whatever it is, it's yet more evidence that computer scientists find it extremely hard to implement something which mathematicians do completely intuitively with zero overhead.</p>",
        "id": 401617814,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1699799717
    },
    {
        "content": "<p>Like <code>e : W₁ ⊗[R] W₂ ≃ₗ[R] W₁ * W₂</code> -- just write it with an equals sign and move on :)</p>",
        "id": 401617830,
        "sender_full_name": "Richard Copley",
        "timestamp": 1699799757
    },
    {
        "content": "<p><code>W₁ ⊗[R] W₂ ≃ₗ[R] W₁ * W₂</code> certainly isn't true in general, see my comment about flatness in <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Tensor.20product.20distributes.20over.20submodules/near/401652949\">the other thread</a>.<br>\nHowever it's true if <code>W₁</code> and <code>W₂</code> are invertible modules over a domain <code>R</code>. <code>W</code> being invertible means there is another <code>R</code>-module whose <code>R</code>-tensor product with <code>W</code> is isomorphic to <code>R</code>, which implies that <code>W</code> is flat (in fact projective) and isomorphic to an ideal in <code>R</code>. The invertible modules (over a general CommRing) form a group under the tensor product operation, called the Picard group, and it's isomorphic to the <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=ClassGroup#doc\">docs#ClassGroup</a> of invertible fractional ideals with the submodule product operation. (Invertibility as a fractional ideal is also equivalent to invertibility as a module.) This was on my to-do list because I had some argument about elliptic curves using it, but I later found a different argument, and I only made a <a href=\"https://github.com/leanprover-community/mathlib/compare/master...elliptic_curve_reduction#diff-2cd206e91e60acb54c6dcb373c7810f53794e3488bed9dca4fd98a584560aa35\">measly start</a> in Lean 3.</p>",
        "id": 401657187,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1699837469
    },
    {
        "content": "<p>Interesting! But how does it relate to the (scare quotes) \"equivalence\"?<br>\nDon't we have on the one hand <code>(I⊕0)⊗(0+M)≃I⊗M≃0</code>, and in <code>TensorAlgebra(R,R⊕M)</code> on the other hand, <code>(I⊕0)*(0+M)≃I*M≃0</code>?</p>",
        "id": 401660075,
        "sender_full_name": "Richard Copley",
        "timestamp": 1699838910
    },
    {
        "content": "<p>Oh sorry, I didn't notice this is about submodules of the tensor algebra. (I was puzzled where you got the multiplication from!) Give me some time to think about your question in this setting.</p>",
        "id": 401662026,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1699839988
    },
    {
        "content": "<p>I think in this setting we have a simpler counterexample: take a non-flat <code>R</code>-module <code>M</code>, take an ideal <code>W₁</code> of <code>R</code> sitting in the 0th graded piece, and let <code>W₂ = M</code>sitting in the 1st graded piece of the tensor algebra. Then <code>W₁*W₂</code> completely sits inside the 1st graded piece, and is the submodule <code>W₁*M</code> of <code>M</code>. However, since <code>M</code> is not flat, there is some ideal <code>W₁</code> such that <code>W₁ ⊗[R] M → W₁M</code> isn't injective, so your <code>e</code> isn't injective and can't be a LinearEquiv.</p>",
        "id": 401663780,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1699840605
    },
    {
        "content": "<p><code>I⊕0</code> and <code>0⊕M</code> from my previous example are meant to both sit in the 1st graded piece, and you'd need to consider the tensor algebra of <code>R⊕M</code> over <code>R</code> for the example to apply. I did the example because <span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> extracted the special case of \"1st x 1st -&gt; 2nd graded piece\" in the other thread. In your computations, I agree with <code>(I⊕0)⊗(0⊕M)≃I⊗M</code> and <code>(I⊕0)*(0⊕M)≃I*M</code>, but I don't see why they would be isomorphic to 0.</p>",
        "id": 401665291,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1699840931
    },
    {
        "content": "<p>Yes, those 0s are a mistake. Thanks for this. It's late here, I'll think about this more tomorrow</p>",
        "id": 401669653,
        "sender_full_name": "Richard Copley",
        "timestamp": 1699842306
    },
    {
        "content": "<p>Still thinking ...</p>",
        "id": 401878841,
        "sender_full_name": "Richard Copley",
        "timestamp": 1699925242
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"224323\">@Junyan Xu</span>, did you just introduce me to homological algebra? Sneaky</p>",
        "id": 402188311,
        "sender_full_name": "Richard Copley",
        "timestamp": 1700041419
    }
]