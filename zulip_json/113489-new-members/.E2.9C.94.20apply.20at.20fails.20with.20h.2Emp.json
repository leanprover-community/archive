[
    {
        "content": "<p>The third example below gives two error messages for the line <code> apply h.mp at hA</code>.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">↔</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">B</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">hA</span>\n  <span class=\"n\">apply</span> <span class=\"n\">h.mp</span>\n  <span class=\"n\">assumption</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">B</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">hA</span>\n  <span class=\"n\">apply</span> <span class=\"n\">h</span> <span class=\"n\">at</span> <span class=\"n\">hA</span>\n  <span class=\"n\">assumption</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">↔</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">B</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">hA</span>\n  <span class=\"n\">apply</span> <span class=\"n\">h.mp</span> <span class=\"n\">at</span> <span class=\"n\">hA</span>\n  <span class=\"n\">assumption</span>\n</code></pre></div>\n<p>The error messages are:</p>\n<blockquote>\n<p>invalid use of field notation with <code>@</code> modifier<br>\nFailed: ?m.80 is not the type of a function.</p>\n</blockquote>\n<p>Is this a known limitation of <code>apply at</code> or am I doing something fundamentally wrong?</p>",
        "id": 406612881,
        "sender_full_name": "Marcus Zibrowius",
        "timestamp": 1701979453
    },
    {
        "content": "<p>Apparently parentheses around <code>h.mp</code> removes the error. I don't understand why though.</p>",
        "id": 406622465,
        "sender_full_name": "Yongyi Chen",
        "timestamp": 1701983993
    },
    {
        "content": "<p>Mumble mumble parsing</p>",
        "id": 406623743,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1701984537
    },
    {
        "content": "<p>Does <code>Iff.mp h</code> work?</p>",
        "id": 406677961,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1702009820
    },
    {
        "content": "<p>Yes, that variation works without any parentheses.</p>",
        "id": 406706953,
        "sender_full_name": "Marcus Zibrowius",
        "timestamp": 1702022148
    },
    {
        "content": "<p>my guess is that this is a bug in the <code>apply at</code> tactic implementation, it sees <code>h.mp</code> which looks kinda like a name and says \"let's use <code>@h.mp</code> to get the unapplied version of the expression\"</p>",
        "id": 406721031,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1702028086
    },
    {
        "content": "<p>Why does this \"add @ to raw names\" logic exist? There are still some lingering simp bugs that require <code>simp[(a_simp_lemma)]</code> to work around this behavior</p>",
        "id": 406724559,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1702029587
    },
    {
        "content": "<p>I see, the implementation uses <code>let f ← Term.elabTerm (← `(@$t)) none</code> to elaborate the argument. Maybe using <code>elabTermForApply</code> would fix it?</p>",
        "id": 406807435,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1702056670
    },
    {
        "content": "<p>It seems like you're right, Kyle: <a href=\"https://github.com/leanprover-community/mathlib4/pull/8911\">#8911</a></p>",
        "id": 406835241,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1702068474
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"507231\">Marcus Zibrowius</span> has marked this topic as resolved.</p>",
        "id": 406910276,
        "sender_full_name": "Notification Bot",
        "timestamp": 1702111874
    }
]