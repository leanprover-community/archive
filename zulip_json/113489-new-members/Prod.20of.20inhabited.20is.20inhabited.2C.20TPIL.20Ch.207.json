[
    {
        "content": "<p>Following the advice in <a href=\"https://leanprover.github.io/theorem_proving_in_lean/inductive_types.html\">Chapter 7 of Theorem Proving in Lean</a>, I'm trying to show that the product of inhabited types is inhabited. Thus I've written the following theorem.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">prod_inhab</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">inhabited</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">inhabited</span> <span class=\"n\">β</span><span class=\"o\">):</span> <span class=\"o\">(</span><span class=\"n\">inhabited</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">β</span><span class=\"o\">))</span>  <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p><code>exact prod.inhabited</code> works, but  I'd rather construct the inhabitants myself (as suggested <a href=\"#narrow/stream/113489-new-members/topic/.E2.9C.94.20Show.20bool.20inhabited.2C.20TPIL.20Ch.207\">here</a>). </p>\n<p>I think something like <code>exact (a,b)</code> ought to work, but I can't get it to.</p>\n<p>The output of <code>#reduce prod .inhabited</code> suggests  somehow using <code>default</code>, but I cannot get that to work either.</p>",
        "id": 358145014,
        "sender_full_name": "Quinn Culver",
        "timestamp": 1683998922
    },
    {
        "content": "<p><code>inhabited</code> is not a prop so this should not be a theorem. Is this Lean 3 or Lean 4? Did you read how to make instances of a structure? You want</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">field1</span> <span class=\"o\">:=</span> <span class=\"n\">term1</span><span class=\"o\">,</span>\n  <span class=\"n\">field2</span> <span class=\"o\">:=</span> <span class=\"n\">term2</span><span class=\"o\">,</span>\n  <span class=\"bp\">...</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 358145518,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1683999164
    },
    {
        "content": "<p>Doesn't the goal <code>⊢ inhabited (α × β)</code> mean I'm trying to construct a term of type <code>inhabited (α × β)</code>? And isn't that just what I should be wanting to do?</p>",
        "id": 358145746,
        "sender_full_name": "Quinn Culver",
        "timestamp": 1683999274
    },
    {
        "content": "<p>This is Lean 3.</p>",
        "id": 358145762,
        "sender_full_name": "Quinn Culver",
        "timestamp": 1683999294
    },
    {
        "content": "<p>Kevin's remark above meant \"this should not be a <code>theorem</code>, <em>it should instead be a <code>def</code></em>\"</p>",
        "id": 358149626,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684001333
    },
    {
        "content": "<p><code>exact (a,b)</code> doesn't work because this is a term of type <code>inhabited α × inhabited β</code> not <code>inhabited (α × β)</code></p>",
        "id": 358149866,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684001436
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"245476\">Quinn Culver</span> <a href=\"#narrow/stream/113489-new-members/topic/Prod.20of.20inhabited.20is.20inhabited.2C.20TPIL.20Ch.207/near/358145014\">said</a>:</p>\n<blockquote>\n<p>I think something like <code>exact (a,b)</code> ought to work, but I can't get it to.</p>\n</blockquote>\n<p>This works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">prod_inhab</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">inst_α</span> <span class=\"o\">:</span> <span class=\"n\">inhabited</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">inst_β</span> <span class=\"o\">:</span> <span class=\"n\">inhabited</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"n\">inhabited</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">match</span> <span class=\"n\">inst_α</span><span class=\"o\">,</span> <span class=\"n\">inst_β</span> <span class=\"k\">with</span>\n<span class=\"bp\">|</span> <span class=\"n\">inhabited.mk</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">inhabited.mk</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"n\">inhabited.mk</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 359351138,
        "sender_full_name": "Bulhwi Cha",
        "timestamp": 1684404442
    },
    {
        "content": "<p>That's still a pretty weird way to spell it. <a href=\"https://leanprover-community.github.io/mathlib_docs/find/prod.inhabited/src\">src#prod.inhabited</a> is the best way to spell it, or the slightly more verbose</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">inhabited</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">inhabited</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">inhabited</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">default</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">default</span><span class=\"o\">,</span> <span class=\"n\">default</span><span class=\"o\">)</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 359352802,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684404870
    },
    {
        "content": "<p>Hopefully it should be obvious what's going on when compared to <a href=\"https://leanprover-community.github.io/mathlib_docs/find/prod.has_zero\">docs#prod.has_zero</a>,</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">has_zero</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_zero</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">has_zero</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">zero</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 359353007,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684404948
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113489-new-members/topic/Prod.20of.20inhabited.20is.20inhabited.2C.20TPIL.20Ch.207/near/359352802\">said</a>:</p>\n<blockquote>\n<p>That's still a pretty weird way to spell it. <a href=\"https://leanprover-community.github.io/mathlib_docs/find/prod.inhabited/src\">src#prod.inhabited</a> is the best way to spell it, or the slightly more verbose</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">inhabited</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">inhabited</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">inhabited</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">default</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">default</span><span class=\"o\">,</span> <span class=\"n\">default</span><span class=\"o\">)</span> <span class=\"o\">}</span>\n</code></pre></div>\n</blockquote>\n<p>I think this looks confusing. The two <code>default</code>s of the pair aren't necessarily the same, but they <em>look</em> the same.</p>",
        "id": 359354555,
        "sender_full_name": "Bulhwi Cha",
        "timestamp": 1684405363
    },
    {
        "content": "<p>It still looks much clearer than your version.</p>",
        "id": 359354960,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1684405467
    },
    {
        "content": "<p>It does only when a learner understands that the pair is the same as <code>(@default α inst_α, @default β inst_β)</code>. If they know this, then I have no problem with them using <code>default</code> to solve the exercise.</p>",
        "id": 359355937,
        "sender_full_name": "Bulhwi Cha",
        "timestamp": 1684405736
    },
    {
        "content": "<p><a href=\"https://leanprover.github.io/theorem_proving_in_lean/inductive_types.html\">Chapter 7</a> of <a href=\"https://leanprover.github.io/theorem_proving_in_lean/\">#tpil</a> presents <code>inhabited</code> as follows:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">inhabited</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">mk</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">inhabited</span>\n</code></pre></div>\n<p>It doesn't seem to mention anything about <code>default</code>.</p>",
        "id": 359358244,
        "sender_full_name": "Bulhwi Cha",
        "timestamp": 1684406419
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"417769\">Bulhwi Cha</span> <a href=\"#narrow/stream/113489-new-members/topic/Prod.20of.20inhabited.20is.20inhabited.2C.20TPIL.20Ch.207/near/359354555\">said</a>:</p>\n<blockquote>\n<p>I think this looks confusing. The two <code>default</code>s of the pair aren't necessarily the same, but they <em>look</em> the same.</p>\n</blockquote>\n<p>Would you make the same complaint about my <code>0</code>s in the other example?</p>",
        "id": 359358566,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684406519
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"417769\">Bulhwi Cha</span> <a href=\"#narrow/stream/113489-new-members/topic/Prod.20of.20inhabited.20is.20inhabited.2C.20TPIL.20Ch.207/near/359358244\">said</a>:</p>\n<blockquote>\n<p>Chapter 7 of <a href=\"https://leanprover.github.io/theorem_proving_in_lean/\">#tpil</a> presents <code>inhabited</code> as follows:</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">inhabited</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">mk</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">inhabited</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>Ah, then this is not the same as <a href=\"https://leanprover-community.github.io/mathlib_docs/find/inhabited/src\">src#inhabited</a>, so I guess your approach is the only one available</p>",
        "id": 359358892,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684406599
    },
    {
        "content": "<p>Yes. Maybe that's why my solution, which I wrote in January, looked the way it is.</p>",
        "id": 359359586,
        "sender_full_name": "Bulhwi Cha",
        "timestamp": 1684406792
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113489-new-members/topic/Prod.20of.20inhabited.20is.20inhabited.2C.20TPIL.20Ch.207/near/359358566\">said</a>:</p>\n<blockquote>\n<p>Would you make the same complaint about my <code>0</code>s in the other example?</p>\n</blockquote>\n<p>I'd be happy if there were an option to make the zeros look different. Sometimes I want it, and sometimes I don't.</p>",
        "id": 359361066,
        "sender_full_name": "Bulhwi Cha",
        "timestamp": 1684407169
    },
    {
        "content": "<p>Well <code>(default : α)</code> and <code>(0 : α)</code> are an option</p>",
        "id": 359364365,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684408060
    },
    {
        "content": "<p>Hmm, I also want to see things like <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mn>0</mn><mi mathvariant=\"double-struck\">N</mi></msub></mrow><annotation encoding=\"application/x-tex\"> 0_\\N </annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7944em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3322em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathbb mtight\">N</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mn>0</mn><mtext mathvariant=\"monospace\">Pos</mtext></msub></mrow><annotation encoding=\"application/x-tex\"> 0_\\verb!Pos! </annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7944em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2778em;\"><span style=\"top:-2.85em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord text sizing reset-size3 size6\"><span class=\"mord texttt\">Pos</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> from the Lean Infoview.</p>",
        "id": 359367795,
        "sender_full_name": "Bulhwi Cha",
        "timestamp": 1684409025
    },
    {
        "content": "<p><code>set_option pp.numeral_types true</code> or something</p>",
        "id": 359388477,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684414545
    },
    {
        "content": "<p>It seems all of the suggested methods/solutions use techniques that come after chapter 7 in <a href=\"https://leanprover.github.io/theorem_proving_in_lean/\">#tpil</a>. Is there a (good) solution that doesn't?</p>",
        "id": 360335916,
        "sender_full_name": "Quinn Culver",
        "timestamp": 1684776671
    },
    {
        "content": "<p>I read <a href=\"https://leanprover.github.io/theorem_proving_in_lean4/\">#tpil4</a>, so I'm not certain this is fine:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">prod_inhab</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">inst_α</span> <span class=\"o\">:</span> <span class=\"n\">inhabited</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">inst_β</span> <span class=\"o\">:</span> <span class=\"n\">inhabited</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"n\">inhabited</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">let</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">inst_α</span> <span class=\"k\">in</span>\n<span class=\"k\">let</span> <span class=\"o\">⟨</span><span class=\"n\">b</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">inst_β</span> <span class=\"k\">in</span>\n<span class=\"o\">⟨(</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">)⟩</span>\n</code></pre></div>\n<p>This proof was adapted from <a href=\"https://github.com/mccorvie/tpil4/blob/0cc46c02ac2336628ce86b334b21a9ab909d3ea5/TPIL4-ch7.lean#L104-L108\">https://github.com/mccorvie/tpil4/blob/0cc46c02ac2336628ce86b334b21a9ab909d3ea5/TPIL4-ch7.lean#L104-L108</a>.</p>",
        "id": 360401025,
        "sender_full_name": "Bulhwi Cha",
        "timestamp": 1684802379
    },
    {
        "content": "<p>Generally naming instance arguments doesn't feel like good style, but what you write works. Also, usually destructuring objects suggests that code isn't using the correct interface (unless it's something like <code>and</code> where destructuring is considered to be part of the interface). In tactic proofs in Lean 3, destructuring instance arguments is disallowed unless you wrap it in <code>unfreezingI { ... }</code> to update the instance cache.</p>\n<p>I think the \"right\" answer is what Eric wrote:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">inhabited</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">inhabited</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">inhabited</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">default</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">default</span><span class=\"o\">,</span> <span class=\"n\">default</span><span class=\"o\">)</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>This is because it's using the main interface to <code>inhabited</code>, which is the <code>default</code> function. If you don't like that it doesn't show types, then you're free to write</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">inhabited</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">inhabited</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">inhabited</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">default</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">default</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"bp\">@</span><span class=\"n\">default</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>or</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">inhabited</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">inhabited</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">inhabited</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">default</span> <span class=\"o\">:=</span> <span class=\"o\">((</span><span class=\"n\">default</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">default</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">))</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>The fact the type is implicit isn't a key feature of the interface, and I'd say it's mostly a convenience since often you'd otherwise write <code>default _</code>.</p>",
        "id": 360406324,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1684805004
    },
    {
        "content": "<p>Variations on this is fine too:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">inhabited</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">inhabited</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">inhabited</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">⟨(</span><span class=\"n\">default</span><span class=\"o\">,</span> <span class=\"n\">default</span><span class=\"o\">)⟩</span>\n</code></pre></div>",
        "id": 360406423,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1684805052
    },
    {
        "content": "<p>But I'm just saying all this from the perspective of working with things in common practice.</p>",
        "id": 360406560,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1684805149
    },
    {
        "content": "<p>Hmm, how quickly things change. I forgot that there was ever a time when the argument to <code>default</code> was explicit, but it was just a year ago: <a href=\"https://github.com/leanprover-community/lean/commit/7cb84a2a93c1e2d37b3ad5017fc5372973dbb9fb\">https://github.com/leanprover-community/lean/commit/7cb84a2a93c1e2d37b3ad5017fc5372973dbb9fb</a></p>",
        "id": 360406883,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1684805325
    },
    {
        "content": "<p>If for exercise reasons you are stuck with <code>inhabited</code> as an <code>inductive</code> instead of a <code>structure</code>, then I would suggest defining <code>default</code> yourself (which does use destructuring, but that's ok because it's internal to an API you're defining) and then use that.</p>",
        "id": 360407098,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1684805433
    }
]