[
    {
        "content": "<p>Is there something like \"If a compact set in a topological space is covered by pairwise disjoint opens, the covering is finite.\" in mathlib? I tried to loogle, but without success.</p>",
        "id": 393809833,
        "sender_full_name": "Christian Merten",
        "timestamp": 1695937711
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=IsCompact.elim_finite_subcover#doc\">docs#IsCompact.elim_finite_subcover</a> should do what you want</p>",
        "id": 393814772,
        "sender_full_name": "Michael Rothgang",
        "timestamp": 1695940622
    },
    {
        "content": "<p>(Disjointness of the open sets is not required.)</p>",
        "id": 393814812,
        "sender_full_name": "Michael Rothgang",
        "timestamp": 1695940649
    },
    {
        "content": "<p>Michael, I think you read too quickly Christian's statement.</p>",
        "id": 393815849,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1695941395
    },
    {
        "content": "<p>Of course it will follow from the lemma you quoted, and I'm pretty confident Christian knows this, he simply want to know whether this result is already there.</p>",
        "id": 393815953,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1695941436
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/113489-new-members/topic/disjoint.20covers.20of.20compacts/near/393815953\">said</a>:</p>\n<blockquote>\n<p>Of course it will follow from the lemma you quoted, and I'm pretty confident Christian knows this, he simply want to know whether this result is already there.</p>\n</blockquote>\n<p>Ah, right. Indeed, I was too hasty. I should go to bed :-)</p>",
        "id": 393816536,
        "sender_full_name": "Michael Rothgang",
        "timestamp": 1695941791
    },
    {
        "content": "<p>So I suppose the answer is: It is not there yet?</p>",
        "id": 393863326,
        "sender_full_name": "Christian Merten",
        "timestamp": 1695968608
    },
    {
        "content": "<p>Is this the right way to state this?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Topology.SubsetProperties</span>\n\n<span class=\"kd\">universe</span> <span class=\"n\">v</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">TopologicalSpace</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">CompactSpace</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hUo</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">IsOpen</span> <span class=\"o\">(</span><span class=\"n\">U</span> <span class=\"n\">i</span><span class=\"o\">))</span>\n    <span class=\"o\">(</span><span class=\"n\">hsU</span> <span class=\"o\">:</span> <span class=\"n\">Set.univ</span> <span class=\"bp\">⊆</span> <span class=\"bp\">⋃</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">U</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hdU</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">i</span> <span class=\"bp\">≠</span> <span class=\"n\">j</span> <span class=\"bp\">→</span> <span class=\"n\">Disjoint</span> <span class=\"o\">(</span><span class=\"n\">U</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">U</span> <span class=\"n\">j</span><span class=\"o\">))</span>\n    <span class=\"o\">(</span><span class=\"n\">hnU</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">U</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">Nonempty</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Finite</span> <span class=\"n\">ι</span> <span class=\"o\">:=</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>I formulated it for the whole space, otherwise one would have to say something like:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">TopologicalSpace</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hs</span> <span class=\"o\">:</span> <span class=\"n\">IsCompact</span> <span class=\"n\">s</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hUo</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">IsOpen</span> <span class=\"o\">(</span><span class=\"n\">U</span> <span class=\"n\">i</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">hsU</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"bp\">⊆</span> <span class=\"bp\">⋃</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">U</span> <span class=\"n\">i</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">hdU</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">i</span> <span class=\"bp\">≠</span> <span class=\"n\">j</span> <span class=\"bp\">→</span> <span class=\"n\">Disjoint</span> <span class=\"o\">(</span><span class=\"n\">U</span> <span class=\"n\">i</span> <span class=\"bp\">∩</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">U</span> <span class=\"n\">j</span> <span class=\"bp\">∩</span> <span class=\"n\">s</span><span class=\"o\">))</span>\n    <span class=\"o\">(</span><span class=\"n\">hnU</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">U</span> <span class=\"n\">i</span> <span class=\"bp\">∩</span> <span class=\"n\">s</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">Nonempty</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Finite</span> <span class=\"n\">ι</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>which feels very clumsy.</p>",
        "id": 394003571,
        "sender_full_name": "Christian Merten",
        "timestamp": 1696021274
    }
]