[
    {
        "content": "<p>Hi all,<br>\nI'm going through \"Logic and Proof\" and \"Theorem Proving in Lean\" exercises and got stuck on the ones that make use of negation.<br>\nCould someone outline the line of reasoning ivolved in proving something like</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">variables</span> <span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">A</span> <span class=\"bp\">∧</span> <span class=\"bp\">¬</span><span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">∨</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</code></pre></div>\n\n\n<p>?<br>\nWith conjunction, disjunction and implication I usually start with a corresponding introduction rule and the rest follows naturally, but can't wrap my head around how to apply the same strategy to negation.</p>",
        "id": 196642544,
        "sender_full_name": "Noob",
        "timestamp": 1588775443
    },
    {
        "content": "<p><code>not X</code> is just syntax sugar for <code>X -&gt; false</code> if that helps</p>",
        "id": 196642629,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588775478
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">variables</span> <span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">A</span> <span class=\"bp\">∧</span> <span class=\"bp\">¬</span><span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">∨</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">cases</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"n\">hnA</span> <span class=\"n\">hnB</span><span class=\"o\">,</span>\n  <span class=\"n\">intro</span> <span class=\"n\">hAB</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">hAB</span> <span class=\"k\">with</span> <span class=\"n\">hA</span> <span class=\"n\">hB</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">contradiction</span><span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">contradiction</span><span class=\"o\">},</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 196642803,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588775543
    },
    {
        "content": "<p>If you don't mind using tactics then you can follow the tutorials project. It has several files about negation, starting with <a href=\"https://github.com/leanprover-community/tutorials/blob/master/src/exercises/07_first_negations.lean\" title=\"https://github.com/leanprover-community/tutorials/blob/master/src/exercises/07_first_negations.lean\">https://github.com/leanprover-community/tutorials/blob/master/src/exercises/07_first_negations.lean</a></p>",
        "id": 196642841,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1588775566
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">variables</span> <span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">A</span> <span class=\"bp\">∧</span> <span class=\"bp\">¬</span><span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">∨</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">h</span><span class=\"bp\">.</span><span class=\"n\">elim</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">hnA</span> <span class=\"n\">hnB</span> <span class=\"n\">hAB</span><span class=\"o\">,</span> <span class=\"n\">hAB</span><span class=\"bp\">.</span><span class=\"n\">elim</span> <span class=\"n\">hnA</span> <span class=\"n\">hnB</span>\n</code></pre></div>",
        "id": 196642950,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588775620
    },
    {
        "content": "<p>I'm not familiar with the cases and intro syntax yet, but I suppose it's equavalent to</p>\n<div class=\"codehilite\"><pre><span></span><code>  <span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">A</span> <span class=\"bp\">∧</span> <span class=\"bp\">¬</span><span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">∨</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n    <span class=\"k\">have</span> <span class=\"n\">hnA</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">h</span><span class=\"bp\">.</span><span class=\"n\">left</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">hnB</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">B</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">h</span><span class=\"bp\">.</span><span class=\"n\">right</span><span class=\"o\">,</span>\n    <span class=\"bp\">λ</span> <span class=\"n\">hAB</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">∧</span> <span class=\"n\">B</span><span class=\"o\">,</span>\n</code></pre></div>\n\n\n<p>Is that correct?</p>",
        "id": 196644900,
        "sender_full_name": "Noob",
        "timestamp": 1588776431
    },
    {
        "content": "<p>I'd prefer not use tactics at this point, but do everything manually. Want to understand what is really going on.</p>",
        "id": 196645220,
        "sender_full_name": "Noob",
        "timestamp": 1588776581
    },
    {
        "content": "<p>you probably meant <code>λ hAB : A ∨ B,</code>, but other than that you're right.</p>",
        "id": 196645418,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1588776668
    },
    {
        "content": "<p>Correct. So here</p>\n<div class=\"codehilite\"><pre><span></span><code>  <span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">A</span> <span class=\"bp\">∧</span> <span class=\"bp\">¬</span><span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">∨</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n    <span class=\"k\">have</span> <span class=\"n\">hnA</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">h</span><span class=\"bp\">.</span><span class=\"n\">left</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">hnB</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">B</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">h</span><span class=\"bp\">.</span><span class=\"n\">right</span><span class=\"o\">,</span>\n    <span class=\"bp\">λ</span> <span class=\"n\">hAB</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">∨</span> <span class=\"n\">B</span><span class=\"o\">,</span>\n</code></pre></div>\n\n\n<p>we have destructured our hypothesis such that each part can be referred to individually, we introduced a new hypothesis which is a negation of what needs to be proven.<br>\nDo we need the new hypothesis so we can arrive at a contradiction? I don't see how if so.</p>",
        "id": 196647568,
        "sender_full_name": "Noob",
        "timestamp": 1588777473
    },
    {
        "content": "<p>try eliminating <code>hAB</code> and see if you can then derive <code>false</code> in both cases of the elimination.</p>",
        "id": 196648051,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1588777677
    },
    {
        "content": "<p>I wrote <code>hAB.elim</code> but this is using some cunning dot notation. You can also write <code>or.elim hAB</code></p>",
        "id": 196649196,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588778048
    },
    {
        "content": "<p>Thanks for the hints, I managed to prove it like this:</p>\n<div class=\"codehilite\"><pre><span></span><code>  <span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">A</span> <span class=\"bp\">∧</span> <span class=\"bp\">¬</span><span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">∨</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n    <span class=\"k\">have</span> <span class=\"n\">hnA</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">h</span><span class=\"bp\">.</span><span class=\"n\">left</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">hnB</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">B</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">h</span><span class=\"bp\">.</span><span class=\"n\">right</span><span class=\"o\">,</span>\n    <span class=\"bp\">λ</span> <span class=\"n\">hAB</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">∨</span> <span class=\"n\">B</span><span class=\"o\">,</span>\n      <span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">elim</span> <span class=\"n\">hAB</span>\n        <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">hA</span><span class=\"o\">,</span> <span class=\"n\">absurd</span> <span class=\"n\">hA</span> <span class=\"n\">hnA</span><span class=\"o\">)</span>\n        <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">hB</span><span class=\"o\">,</span> <span class=\"n\">absurd</span> <span class=\"n\">hB</span> <span class=\"n\">hnB</span><span class=\"o\">)</span>\n</code></pre></div>\n\n\n<p>Still can't figure out why this</p>\n<div class=\"codehilite\"><pre><span></span><code>  <span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">A</span> <span class=\"bp\">∧</span> <span class=\"bp\">¬</span><span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">∨</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n    <span class=\"k\">have</span> <span class=\"n\">hnA</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">h</span><span class=\"bp\">.</span><span class=\"n\">left</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">hnB</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">B</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">h</span><span class=\"bp\">.</span><span class=\"n\">right</span><span class=\"o\">,</span>\n    <span class=\"bp\">λ</span> <span class=\"n\">hAB</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">∨</span> <span class=\"n\">B</span><span class=\"o\">,</span>\n      <span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">elim</span> <span class=\"n\">hAB</span>\n        <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">hA</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"n\">false</span><span class=\"bp\">.</span><span class=\"n\">elim</span> <span class=\"o\">(</span><span class=\"n\">hnA</span> <span class=\"n\">hA</span><span class=\"o\">))</span>\n        <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">hB</span> <span class=\"o\">:</span> <span class=\"n\">B</span><span class=\"o\">,</span> <span class=\"n\">false</span><span class=\"bp\">.</span><span class=\"n\">elim</span> <span class=\"o\">(</span><span class=\"n\">hnB</span> <span class=\"n\">hB</span><span class=\"o\">))</span>\n</code></pre></div>\n\n\n<p>doesn't work - it looks the same to me.</p>",
        "id": 196652953,
        "sender_full_name": "Noob",
        "timestamp": 1588779535
    },
    {
        "content": "<p>works for me. note that you don't actually need <code>false.elim</code> or <code>absurd</code> because you're trying to prove <code>false</code> itself.</p>",
        "id": 196654837,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1588780322
    },
    {
        "content": "<p>Actually, it works for me too - VS Code got me confused.<br>\nWith your latest suggestion the proof looks like this:</p>\n<div class=\"codehilite\"><pre><span></span><code>  <span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">A</span> <span class=\"bp\">∧</span> <span class=\"bp\">¬</span><span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">∨</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n    <span class=\"k\">have</span> <span class=\"n\">hnA</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">h</span><span class=\"bp\">.</span><span class=\"n\">left</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">hnB</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">B</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">h</span><span class=\"bp\">.</span><span class=\"n\">right</span><span class=\"o\">,</span>\n    <span class=\"bp\">λ</span> <span class=\"n\">hAB</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">∨</span> <span class=\"n\">B</span><span class=\"o\">,</span>\n      <span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">elim</span> <span class=\"n\">hAB</span>\n        <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">hA</span><span class=\"o\">,</span> <span class=\"n\">hnA</span> <span class=\"n\">hA</span><span class=\"o\">)</span>\n        <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">hB</span><span class=\"o\">,</span> <span class=\"n\">hnB</span> <span class=\"n\">hB</span><span class=\"o\">)</span>\n</code></pre></div>\n\n\n<p>Thanks a lot for the help!</p>",
        "id": 196656356,
        "sender_full_name": "Noob",
        "timestamp": 1588780910
    },
    {
        "content": "<p>another small trick: after using <code>(λ hA, hnA hA) = hnA</code>, your proof will look pretty similar to kevin's.</p>",
        "id": 196667682,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1588785640
    }
]