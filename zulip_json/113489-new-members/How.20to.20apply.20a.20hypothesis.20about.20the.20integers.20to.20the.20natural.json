[
    {
        "content": "<p>I'm stumped. Does anyone know how to prove the following<br>\nexample:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n₁</span> <span class=\"n\">n₂</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">heq</span> <span class=\"o\">:</span> <span class=\"n\">Int.negSucc</span> <span class=\"n\">n₂</span> <span class=\"bp\">+</span> <span class=\"n\">Int.ofNat</span> <span class=\"n\">n₃</span> <span class=\"bp\">=</span> <span class=\"n\">Int.negSucc</span> <span class=\"n\">n₁</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">Nat.succ</span> <span class=\"n\">n₂</span> <span class=\"bp\">=</span> <span class=\"n\">Nat.succ</span> <span class=\"n\">n₁</span> <span class=\"bp\">+</span> <span class=\"n\">n₃</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>If I try:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n₁</span> <span class=\"n\">n₂</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">heq</span> <span class=\"o\">:</span> <span class=\"n\">Int.negSucc</span> <span class=\"n\">n₂</span> <span class=\"bp\">+</span> <span class=\"n\">Int.ofNat</span> <span class=\"n\">n₃</span> <span class=\"bp\">=</span> <span class=\"n\">Int.negSucc</span> <span class=\"n\">n₁</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">Nat.succ</span> <span class=\"n\">n₂</span> <span class=\"bp\">=</span> <span class=\"n\">Nat.succ</span> <span class=\"n\">n₁</span> <span class=\"bp\">+</span> <span class=\"n\">n₃</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">Int.ofNat_inj</span><span class=\"o\">]</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Int.ofNat_eq_cast</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">heq</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Int.negSucc_eq</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">heq</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Int.negSucc_eq</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">heq</span>\n  <span class=\"n\">simp</span>\n  <span class=\"bp\">...</span>\n</code></pre></div>\n<p>I'm left with:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">heq</span><span class=\"o\">:</span> <span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"n\">n₂</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"bp\">↑</span><span class=\"n\">n₃</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"n\">n₁</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n<span class=\"bp\">⊢</span> <span class=\"bp\">↑</span><span class=\"n\">n₂</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"bp\">↑</span><span class=\"n\">n₁</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"bp\">↑</span><span class=\"n\">n₃</span>\n</code></pre></div>\n<p>This seems like it's very close to the end, but<br>\nI can't use some of the ↑n's in a calc or a have,<br>\nbecause then I get an error that says:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"kd\">instance</span>\n  <span class=\"n\">Neg</span> <span class=\"n\">ℕLean</span> <span class=\"mi\">4</span>\n</code></pre></div>\n<p>It looks like it won't synthesize a negative<br>\n<code>-(↑n)</code>, which seems strange to me, because it<br>\nshould be an element of <code>ℤ</code>.</p>\n<p>Thanks!</p>",
        "id": 403470084,
        "sender_full_name": "Mike",
        "timestamp": 1700604280
    },
    {
        "content": "<p>The up arrow is generic notation for a coercion from \"something\" to \"something\". Probably it can't come up with anything better than \"Nat to itself\". Use <code>(n : \\Z)</code> instead</p>",
        "id": 403473531,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1700605998
    },
    {
        "content": "<p>If you get lost with up arrows, there's a pretty printer option to show what they're hiding:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"c1\">-- ⊢ ↑n = ↑n</span>\n  <span class=\"n\">rfl</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">pp.coercions</span> <span class=\"n\">false</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"c1\">-- ⊢ Nat.cast n = Nat.cast n</span>\n  <span class=\"n\">rfl</span>\n</code></pre></div>\n<p>You can also move your mouse over an up arrow in the info view and see the expression it stands for.</p>",
        "id": 403477549,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1700608248
    },
    {
        "content": "<p>Regarding your question, I guess <code>linarith</code> handles it.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n₁</span> <span class=\"n\">n₂</span> <span class=\"n\">n₃</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">heq</span> <span class=\"o\">:</span> <span class=\"n\">Int.negSucc</span> <span class=\"n\">n₂</span> <span class=\"bp\">+</span> <span class=\"n\">Int.ofNat</span> <span class=\"n\">n₃</span> <span class=\"bp\">=</span> <span class=\"n\">Int.negSucc</span> <span class=\"n\">n₁</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">Nat.succ</span> <span class=\"n\">n₂</span> <span class=\"bp\">=</span> <span class=\"n\">Nat.succ</span> <span class=\"n\">n₁</span> <span class=\"bp\">+</span> <span class=\"n\">n₃</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">Int.ofNat_inj</span><span class=\"o\">]</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Int.ofNat_eq_cast</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">heq</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Int.negSucc_eq</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">heq</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Int.negSucc_eq</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">heq</span>\n  <span class=\"n\">simp</span>\n  <span class=\"n\">linarith</span>\n</code></pre></div>",
        "id": 403477733,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1700608352
    },
    {
        "content": "<p>Yeah, <code>linarith</code> did it! <span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span> Thanks!!</p>",
        "id": 403477827,
        "sender_full_name": "Mike",
        "timestamp": 1700608419
    },
    {
        "content": "<p><code>linear_combination -1 * heq</code> works in place of <code>linarith</code> too, if you want to be more explicit.</p>",
        "id": 403477928,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1700608463
    }
]