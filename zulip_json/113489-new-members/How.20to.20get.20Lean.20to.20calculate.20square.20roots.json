[
    {
        "content": "<p>I created a version of the quadratic formula using Lean and I'm trying to use it but, when it gets to  the point of using it, I seem to have to manually tell it that <code>(9:ℝ) = 3 *3 </code>am I missing something that makes this sort of calculation happen automatically</p>\n<p>MWE below</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Real.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Complex.Basic</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">quadFormula</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">(</span> <span class=\"n\">hnotorder2</span><span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">≠</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">:</span><span class=\"n\">F</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">asqrt</span><span class=\"o\">:</span><span class=\"n\">F</span><span class=\"bp\">→</span> <span class=\"n\">F</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hcansqrt</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">asqrt</span> <span class=\"o\">(</span><span class=\"n\">b</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">-</span> <span class=\"mi\">4</span> <span class=\"bp\">*</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">-</span> <span class=\"mi\">4</span><span class=\"bp\">*</span><span class=\"n\">c</span> <span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">F</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"bp\">*</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">asqrt</span> <span class=\"o\">(</span><span class=\"n\">b</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">-</span> <span class=\"mi\">4</span> <span class=\"bp\">*</span> <span class=\"n\">c</span><span class=\"o\">))</span> <span class=\"bp\">/</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">b</span> <span class=\"bp\">-</span> <span class=\"n\">asqrt</span> <span class=\"o\">(</span><span class=\"n\">b</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">-</span> <span class=\"mi\">4</span> <span class=\"bp\">*</span> <span class=\"n\">c</span><span class=\"o\">))</span> <span class=\"bp\">/</span><span class=\"mi\">2</span><span class=\"o\">)</span>\n    <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">example</span><span class=\"o\">:</span> <span class=\"bp\">∀</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"mi\">5</span><span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">4</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">+</span><span class=\"mi\">4</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"kd\">by</span>\n    <span class=\"n\">intro</span> <span class=\"n\">x</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">quadFormula</span> <span class=\"mi\">5</span> <span class=\"mi\">4</span> <span class=\"n\">_</span> <span class=\"n\">Real.sqrt</span> <span class=\"n\">_</span><span class=\"o\">]</span>\n    <span class=\"n\">norm_num</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">9</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span> <span class=\"bp\">*</span><span class=\"mi\">3</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">norm_num</span>\n    <span class=\"n\">rw</span><span class=\"o\">[</span><span class=\"n\">this</span><span class=\"o\">]</span>\n    <span class=\"n\">norm_num</span>\n    <span class=\"n\">ring</span>\n    <span class=\"n\">repeat</span> <span class=\"n\">norm_num</span>\n</code></pre></div>",
        "id": 399338698,
        "sender_full_name": "Leo Shine",
        "timestamp": 1698683725
    },
    {
        "content": "<p>No, I don't think you're missing anything</p>",
        "id": 399339353,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1698683926
    },
    {
        "content": "<p>Thanks</p>",
        "id": 399339471,
        "sender_full_name": "Leo Shine",
        "timestamp": 1698683977
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span><span class=\"o\">:</span> <span class=\"bp\">∀</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"mi\">5</span><span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">4</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">+</span><span class=\"mi\">4</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">x</span>\n  <span class=\"n\">ring</span>\n</code></pre></div>",
        "id": 399343059,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1698685220
    },
    {
        "content": "<p>Haha yes, but I was trying to see what it was like to try to use my version of the quadratic formula, I guess the fact that <code>ring</code> is so powerful might be why this doesn't matter that much in practice</p>",
        "id": 399344253,
        "sender_full_name": "Leo Shine",
        "timestamp": 1698685574
    },
    {
        "content": "<p>Right -- instead of doing what you're doing the way you're doing it, you could make two functions plusroot and minusroot which give you the two roots with the + and - sign on the sqrt, and then prove that your quadratic factors as (x-plusroot)(x-minusroot). Then it would not be possible to use <code>ring</code>.</p>",
        "id": 399344755,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1698685726
    },
    {
        "content": "<p>The functions wouldn't need to assume b^2-4ac&gt;=0, but this assumption would be in the theorem.</p>",
        "id": 399344891,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1698685778
    },
    {
        "content": "<p>Like this?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.BigOperators.Ring</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Real.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Complex.Basic</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">quaddisc</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">b</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">-</span> <span class=\"mi\">4</span> <span class=\"bp\">*</span> <span class=\"n\">c</span>\n<span class=\"kd\">def</span> <span class=\"n\">quadrootplus</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">asqrt</span><span class=\"o\">:</span><span class=\"n\">F</span><span class=\"bp\">→</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">asqrt</span> <span class=\"o\">(</span><span class=\"n\">quaddisc</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">))</span> <span class=\"bp\">/</span><span class=\"mi\">2</span>\n<span class=\"kd\">def</span> <span class=\"n\">quadrootminus</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">asqrt</span><span class=\"o\">:</span><span class=\"n\">F</span><span class=\"bp\">→</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">b</span> <span class=\"bp\">-</span> <span class=\"n\">asqrt</span> <span class=\"o\">(</span><span class=\"n\">quaddisc</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">))</span> <span class=\"bp\">/</span><span class=\"mi\">2</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">quadFormula</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">(</span> <span class=\"n\">hnotchar2</span><span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">≠</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">:</span><span class=\"n\">F</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">asqrt</span><span class=\"o\">:</span><span class=\"n\">F</span><span class=\"bp\">→</span> <span class=\"n\">F</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hcansqrt</span><span class=\"o\">:</span> <span class=\"n\">asqrt</span> <span class=\"o\">(</span><span class=\"n\">quaddisc</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">-</span> <span class=\"mi\">4</span><span class=\"bp\">*</span><span class=\"n\">c</span> <span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">F</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"bp\">*</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">quadrootplus</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">asqrt</span><span class=\"o\">)</span> <span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">quadrootminus</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">asqrt</span><span class=\"o\">))</span>\n    <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 399347273,
        "sender_full_name": "Leo Shine",
        "timestamp": 1698686704
    },
    {
        "content": "<p>This theorem will not be applicable to the real numbers.</p>",
        "id": 399368514,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1698695982
    },
    {
        "content": "<p>Oh OK, more precisely I mean that if you feed in numbers where disc&lt;0 then you can't fill in an input proof, but maybe that's what you want.</p>",
        "id": 399369162,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1698696201
    },
    {
        "content": "<p>Here's a proof of your sorry:</p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">quadFormula</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">(</span> <span class=\"n\">hnotchar2</span><span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">≠</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">:</span><span class=\"n\">F</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">asqrt</span><span class=\"o\">:</span><span class=\"n\">F</span><span class=\"bp\">→</span> <span class=\"n\">F</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hcansqrt</span><span class=\"o\">:</span> <span class=\"n\">asqrt</span> <span class=\"o\">(</span><span class=\"n\">quaddisc</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">-</span> <span class=\"mi\">4</span><span class=\"bp\">*</span><span class=\"n\">c</span> <span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">F</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"bp\">*</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">quadrootplus</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">asqrt</span><span class=\"o\">)</span> <span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">quadrootminus</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">asqrt</span><span class=\"o\">))</span>\n    <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">quadrootplus</span> <span class=\"n\">quadrootminus</span> <span class=\"c1\">-- these should never have been defs; make them `abbrev`s and then you can skip this line</span>\n  <span class=\"n\">intro</span> <span class=\"n\">x</span>\n  <span class=\"n\">ring_nf</span>\n  <span class=\"c1\">-- we didn't unfold `quaddisc` so we can now use this</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">hcansqrt</span><span class=\"o\">]</span>\n  <span class=\"n\">field_simp</span>\n  <span class=\"n\">ring</span>\n</code></pre></div>\n</div></div>",
        "id": 399371419,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1698697227
    },
    {
        "content": "<p>Ah cool that's a lot simpler than my one (for example doesn't need to prove facts like 4 != 0) and I didn't know about abbrev's</p>",
        "id": 399379296,
        "sender_full_name": "Leo Shine",
        "timestamp": 1698701080
    },
    {
        "content": "<p>Lean does not unfold <code>def</code>s by default, whereas for your two roots you want them to be <em>printed</em> as <code>quadrootplus</code> and <code>quadrootminus</code> so you don't have to have the formula leaking out everywhere in your goals and hypotheses, however you really want the <em>computer</em> to just see the underlying definitions, so then you don't have to keep telling it to unfold them. And this is what <code>abbrev</code> does. It's taking advantage of the subtle difference between \"what the computer tells you it's looking at\" and \"what the computer is actually looking at\".</p>",
        "id": 399518318,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1698757896
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"217253\">Leo Shine</span> <a href=\"#narrow/stream/113489-new-members/topic/How.20to.20get.20Lean.20to.20calculate.20square.20roots/near/399379296\">said</a>:</p>\n<blockquote>\n<p>Ah cool that's a lot simpler than my one (for example doesn't need to prove facts like 4 != 0) and I didn't know about abbrev's</p>\n</blockquote>\n<p>Of course I _did_ need to prove 4!=0 somehow, but I let <code>field_simp</code> do it for me (that tactic knows that product of nonzero things is nonzero; I didn't actually prove 4!=0, I proved that 2*2!=0, which is the same _numbers_ but a different _term_.)</p>",
        "id": 399518455,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1698757945
    }
]