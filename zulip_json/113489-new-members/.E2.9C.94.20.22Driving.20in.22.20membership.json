[
    {
        "content": "<p>I'm dealing with a goal of the form:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">⊢</span> <span class=\"n\">f</span> <span class=\"bp\">∈</span>\n  <span class=\"k\">let</span> <span class=\"n\">A</span> <span class=\"o\">:=</span> <span class=\"n\">B</span><span class=\"bp\">;</span>\n  <span class=\"k\">if</span> <span class=\"n\">C</span> <span class=\"k\">then</span> <span class=\"n\">D</span> <span class=\"k\">else</span> <span class=\"n\">E</span>\n</code></pre></div>\n<p>I'd like to <code>intro</code> on the let binding, and then case split on the if-then-else. But both tactics are blocked by the ∈(I think). I can work around it, but it's not very clean. Is there a standard way to convert this goal to:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">⊢</span>\n  <span class=\"k\">let</span> <span class=\"n\">A</span> <span class=\"o\">:=</span> <span class=\"n\">B</span><span class=\"bp\">;</span>\n  <span class=\"k\">if</span> <span class=\"n\">C</span> <span class=\"k\">then</span>  <span class=\"n\">f</span> <span class=\"bp\">∈</span> <span class=\"n\">D</span> <span class=\"k\">else</span>  <span class=\"n\">f</span> <span class=\"bp\">∈</span> <span class=\"n\">E</span>\n</code></pre></div>\n<p>or some other idiomatic way of dealing with this situation?</p>",
        "id": 342854088,
        "sender_full_name": "Graham Leach-Krouse",
        "timestamp": 1679183946
    },
    {
        "content": "<p><a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Pulling.20.60let.60s.20to.20the.20outside.20of.20a.20statement/near/315577197\">this thread</a> is related</p>",
        "id": 342857280,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1679186120
    },
    {
        "content": "<p>Though I guess your question is Lean 4?</p>",
        "id": 342857293,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1679186136
    },
    {
        "content": "<p>Thanks, I'll take a look! Yep, lean 4.</p>",
        "id": 342862416,
        "sender_full_name": "Graham Leach-Krouse",
        "timestamp": 1679189474
    },
    {
        "content": "<p>Dare I ask why you have a let in your goal? Did you incorrectly use <code>let</code> or <code>set</code> instead of <code>have</code> to define a proof earlier in your argument? Or do you actually want it there?</p>",
        "id": 342897617,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1679215918
    },
    {
        "content": "<p>If you can get rid of the <code>let</code> then the <code>split</code> tactic should get rid of the <code>if</code>.</p>",
        "id": 342897813,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1679216029
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> - It doesn't strictly need to be there. Basically <code>let</code> is just helping to abbreviate what would otherwise be a kind of repetitive and unreadable definition of the <code>Ctx</code> (<code>Set</code> of <code>Form</code>s) that I need to prove <code>f</code> belongs to:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">lindenbaumSequence</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">Th</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">Δ</span> <span class=\"o\">:</span> <span class=\"n\">Ctx</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Lex</span> <span class=\"o\">(</span><span class=\"n\">Nat</span> <span class=\"bp\">×</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">Ctx</span>\n  <span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">t.val</span>\n  <span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">{</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Form</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span><span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"bp\">∈</span> <span class=\"n\">lindenbaumSequence</span> <span class=\"n\">t</span> <span class=\"bp\">Δ</span> <span class=\"o\">⟨</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">j</span><span class=\"o\">⟩</span> <span class=\"o\">}</span>\n  <span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">j</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">let</span> <span class=\"n\">prev</span> <span class=\"o\">:=</span> <span class=\"n\">lindenbaumSequence</span> <span class=\"n\">t</span> <span class=\"bp\">Δ</span> <span class=\"o\">⟨</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">j</span><span class=\"o\">⟩</span>\n    <span class=\"k\">let</span> <span class=\"n\">l</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">Denumerable.ofNat</span> <span class=\"o\">(</span><span class=\"n\">Form</span> <span class=\"bp\">×</span> <span class=\"n\">Form</span><span class=\"o\">)</span> <span class=\"n\">j</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">fst</span>\n    <span class=\"k\">let</span> <span class=\"n\">r</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">Denumerable.ofNat</span> <span class=\"o\">(</span><span class=\"n\">Form</span> <span class=\"bp\">×</span> <span class=\"n\">Form</span><span class=\"o\">)</span> <span class=\"n\">j</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">snd</span>\n    <span class=\"k\">if</span> <span class=\"n\">l</span> <span class=\"bp\">¦</span> <span class=\"n\">r</span> <span class=\"bp\">∈</span> <span class=\"bp\">▲</span><span class=\"n\">prev</span>\n    <span class=\"k\">then</span> <span class=\"k\">if</span> <span class=\"bp\">▲</span><span class=\"o\">(</span><span class=\"n\">prev</span> <span class=\"bp\">∪</span> <span class=\"o\">{</span><span class=\"n\">l</span><span class=\"o\">})</span> <span class=\"bp\">∩</span> <span class=\"bp\">Δ</span> <span class=\"bp\">=</span> <span class=\"bp\">∅</span>\n      <span class=\"k\">then</span> <span class=\"n\">prev</span> <span class=\"bp\">∪</span> <span class=\"o\">{</span><span class=\"n\">l</span><span class=\"o\">}</span>\n      <span class=\"k\">else</span> <span class=\"n\">prev</span> <span class=\"bp\">∪</span> <span class=\"o\">{</span><span class=\"n\">r</span><span class=\"o\">}</span>\n    <span class=\"k\">else</span> <span class=\"n\">prev</span>\n  <span class=\"n\">termination_by</span> <span class=\"n\">lindenbaumSequence</span> <span class=\"n\">t</span> <span class=\"bp\">Δ</span> <span class=\"n\">p</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">p.fst</span><span class=\"o\">,</span> <span class=\"n\">p.snd</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>I'd love to know a better way of doing that!</p>",
        "id": 342980187,
        "sender_full_name": "Graham Leach-Krouse",
        "timestamp": 1679253719
    },
    {
        "content": "<p><code>let</code> is fine to use. For your goal state, one step you can take is <code>dsimp only</code>, which should eliminate the <code>let</code>. This tactic is able to apply a number of definitionally true reductions.</p>",
        "id": 342980347,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1679253805
    },
    {
        "content": "<p>It turns out that the <code>change</code> tactic lets me rewrite my goal to position the <code>f ∈</code> below the <code>let</code> binders. Once those are <code>intro</code>ed out of the way, <code>split</code> can do the rest.</p>",
        "id": 342980358,
        "sender_full_name": "Graham Leach-Krouse",
        "timestamp": 1679253815
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span> thank you! <code>dsimp only</code> also would work.</p>",
        "id": 342980458,
        "sender_full_name": "Graham Leach-Krouse",
        "timestamp": 1679253885
    },
    {
        "content": "<p><code>change</code> would work too because (if you give it the right pattern) the unifier is able to do similar reductions.</p>",
        "id": 342980479,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1679253902
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"577178\">Graham Leach-Krouse</span> has marked this topic as resolved.</p>",
        "id": 342980862,
        "sender_full_name": "Notification Bot",
        "timestamp": 1679254166
    }
]