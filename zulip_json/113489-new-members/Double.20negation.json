[
    {
        "content": "<p>Here is a MWE.   Why does it generate an error and how can I fix it?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic.basic</span>\n<span class=\"kd\">reserve</span> <span class=\"kd\">infix</span> <span class=\"bp\">`</span> <span class=\"bp\">∈</span> <span class=\"bp\">`</span> <span class=\"o\">:</span> <span class=\"mi\">49</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">r</span> <span class=\"n\">s</span><span class=\"o\">:</span><span class=\"kt\">Prop</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span><span class=\"o\">:(</span><span class=\"bp\">¬</span> <span class=\"n\">r</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"bp\">→</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"bp\">¬</span> <span class=\"n\">s</span><span class=\"o\">):=</span>\n\n   <span class=\"kd\">begin</span>\n     <span class=\"n\">intro</span> <span class=\"n\">h2</span><span class=\"o\">,</span>\n     <span class=\"n\">intro</span> <span class=\"n\">h3</span><span class=\"o\">,</span>\n     <span class=\"k\">have</span> <span class=\"n\">h4</span><span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">(</span><span class=\"n\">h3</span> <span class=\"n\">h</span><span class=\"o\">)),</span>\n     <span class=\"k\">have</span> <span class=\"n\">h5</span><span class=\"o\">:</span><span class=\"bp\">¬</span> <span class=\"n\">s</span><span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">(</span><span class=\"n\">h3</span> <span class=\"n\">h</span><span class=\"o\">)),</span>\n     <span class=\"n\">exact</span> <span class=\"n\">h4</span><span class=\"o\">,</span>   <span class=\"c1\">-- or exact h5, both work</span>\n   <span class=\"kd\">end</span>\n\n<span class=\"kn\">section</span> <span class=\"n\">TEST</span>\n<span class=\"kd\">class</span>  <span class=\"n\">Model</span> <span class=\"o\">(</span><span class=\"n\">M</span><span class=\"o\">:</span><span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"bp\">𝔽</span><span class=\"o\">:</span><span class=\"n\">M</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">succ</span><span class=\"o\">:</span><span class=\"n\">M</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"bp\">𝕊</span><span class=\"o\">:</span><span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"n\">M</span><span class=\"o\">)</span>  <span class=\"c1\">--successor</span>\n<span class=\"o\">(</span><span class=\"bp\">Λ</span><span class=\"o\">:</span><span class=\"n\">M</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">mem</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"kd\">infix</span>  <span class=\"bp\">∈</span> <span class=\"o\">:=</span>  <span class=\"n\">mem</span> <span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">SSC</span><span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"n\">M</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">emptyset_axiom</span><span class=\"o\">:</span>   <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">¬</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"bp\">Λ</span> <span class=\"o\">))</span>\n<span class=\"o\">(</span><span class=\"n\">binary_union</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"n\">M</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">f</span><span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"n\">M</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">minus</span><span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"n\">M</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">single</span><span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"n\">M</span><span class=\"o\">)</span>\n <span class=\"c\">/-</span><span class=\"cm\"> end of class definition because next line doesn't declare a member -/</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">M</span><span class=\"o\">:</span><span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Model</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"n\">w</span> <span class=\"n\">X</span> <span class=\"n\">R</span> <span class=\"n\">W</span><span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">)</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Model</span>\n<span class=\"kd\">infix</span>  <span class=\"bp\">∈</span> <span class=\"o\">:=</span>  <span class=\"n\">mem</span>\n<span class=\"kd\">infix</span> <span class=\"bp\">∪</span> <span class=\"o\">:=</span> <span class=\"n\">binary_union</span>\n<span class=\"kd\">infix</span> <span class=\"bp\">-</span> <span class=\"o\">:=</span> <span class=\"n\">minus</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">double_negate</span><span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">P</span><span class=\"o\">:</span><span class=\"kt\">Prop</span><span class=\"o\">),</span> <span class=\"n\">P</span> <span class=\"bp\">→</span> <span class=\"bp\">¬¬</span> <span class=\"n\">P</span><span class=\"o\">:=</span>\n  <span class=\"k\">assume</span> <span class=\"n\">P</span><span class=\"o\">,</span>\n  <span class=\"kd\">begin</span>\n    <span class=\"n\">ifinish</span><span class=\"o\">,</span>\n  <span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">push_double_negation</span><span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"n\">Q</span><span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"bp\">¬¬</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"bp\">→</span> <span class=\"n\">Q</span><span class=\"o\">))</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">¬¬</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"bp\">¬¬</span> <span class=\"n\">Q</span><span class=\"o\">:=</span>\n  <span class=\"k\">assume</span> <span class=\"n\">P</span> <span class=\"n\">Q</span><span class=\"o\">,</span>\n  <span class=\"kd\">begin</span>\n    <span class=\"n\">ifinish</span><span class=\"o\">,</span>\n  <span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span>  <span class=\"n\">foo</span><span class=\"o\">(</span><span class=\"n\">m</span><span class=\"o\">:</span><span class=\"n\">M</span><span class=\"o\">):(</span> <span class=\"n\">y</span> <span class=\"bp\">∈</span> <span class=\"bp\">𝔽</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">),</span> <span class=\"n\">u</span> <span class=\"bp\">∈</span> <span class=\"bp\">𝕊</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"bp\">¬¬</span><span class=\"n\">f</span> <span class=\"n\">m</span> <span class=\"n\">y</span> <span class=\"bp\">∈</span> <span class=\"bp\">𝔽</span><span class=\"o\">)</span><span class=\"bp\">→</span>  <span class=\"o\">(</span><span class=\"bp\">¬¬</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">∈</span> <span class=\"o\">(</span><span class=\"bp\">𝔽</span><span class=\"o\">:</span><span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">),</span> <span class=\"n\">u</span> <span class=\"bp\">∈</span> <span class=\"bp\">𝕊</span> <span class=\"n\">y</span><span class=\"o\">))</span><span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">¬¬¬¬</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">m</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">∈</span> <span class=\"bp\">𝔽</span><span class=\"o\">)):=</span>\n  <span class=\"kd\">begin</span>\n    <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">h14</span><span class=\"o\">:=</span> <span class=\"n\">double_negate</span>  <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">∈</span> <span class=\"bp\">𝔽</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">),</span> <span class=\"n\">u</span> <span class=\"bp\">∈</span> <span class=\"bp\">𝕊</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"bp\">¬¬</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">m</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">∈</span> <span class=\"bp\">𝔽</span><span class=\"o\">)</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">h15</span><span class=\"o\">:=</span> <span class=\"n\">push_double_negation</span> <span class=\"o\">((</span><span class=\"n\">y</span> <span class=\"bp\">∈</span> <span class=\"o\">(</span><span class=\"bp\">𝔽</span><span class=\"o\">:</span><span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">),</span> <span class=\"n\">u</span> <span class=\"bp\">∈</span> <span class=\"bp\">𝕊</span> <span class=\"n\">y</span><span class=\"o\">))(</span><span class=\"bp\">¬¬</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">m</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">∈</span> <span class=\"bp\">𝔽</span><span class=\"o\">)</span> <span class=\"n\">h14</span><span class=\"o\">,</span>\n  <span class=\"kd\">end</span>\n\n\n <span class=\"kd\">end</span> <span class=\"n\">TEST</span>\n</code></pre></div>",
        "id": 220025972,
        "sender_full_name": "Michael Beeson",
        "timestamp": 1608058977
    },
    {
        "content": "<p>Looks likely to be mismatched parentheses, is this what you wanted? </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span>  <span class=\"n\">foo</span><span class=\"o\">(</span><span class=\"n\">m</span><span class=\"o\">:</span><span class=\"n\">M</span><span class=\"o\">):</span>\n <span class=\"o\">((</span><span class=\"n\">y</span> <span class=\"bp\">∈</span> <span class=\"bp\">𝔽</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">),</span> <span class=\"n\">u</span> <span class=\"bp\">∈</span> <span class=\"bp\">𝕊</span> <span class=\"n\">y</span><span class=\"o\">))</span> <span class=\"bp\">→</span> <span class=\"bp\">¬¬</span><span class=\"n\">f</span> <span class=\"n\">m</span> <span class=\"n\">y</span> <span class=\"bp\">∈</span> <span class=\"bp\">𝔽</span><span class=\"o\">)</span> <span class=\"bp\">→</span>\n <span class=\"o\">(</span><span class=\"bp\">¬¬</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">∈</span> <span class=\"o\">(</span><span class=\"bp\">𝔽</span><span class=\"o\">:</span><span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">),</span> <span class=\"n\">u</span> <span class=\"bp\">∈</span> <span class=\"bp\">𝕊</span> <span class=\"n\">y</span><span class=\"o\">)))</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">¬¬¬¬</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">m</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">∈</span> <span class=\"bp\">𝔽</span><span class=\"o\">):=</span>\n  <span class=\"kd\">begin</span>\n    <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">h14</span> <span class=\"o\">:=</span> <span class=\"n\">double_negate</span> <span class=\"o\">((</span><span class=\"n\">y</span> <span class=\"bp\">∈</span> <span class=\"bp\">𝔽</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">),</span> <span class=\"n\">u</span> <span class=\"bp\">∈</span> <span class=\"bp\">𝕊</span> <span class=\"n\">y</span><span class=\"o\">))</span> <span class=\"bp\">→</span> <span class=\"bp\">¬¬</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">m</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">∈</span> <span class=\"bp\">𝔽</span><span class=\"o\">)</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">h15</span><span class=\"o\">:=</span> <span class=\"n\">push_double_negation</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">∈</span> <span class=\"o\">(</span><span class=\"bp\">𝔽</span><span class=\"o\">:</span><span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">),</span> <span class=\"n\">u</span> <span class=\"bp\">∈</span> <span class=\"bp\">𝕊</span> <span class=\"n\">y</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"bp\">¬¬</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">m</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">∈</span> <span class=\"bp\">𝔽</span><span class=\"o\">)</span> <span class=\"n\">h14</span><span class=\"o\">,</span>\n  <span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 220030679,
        "sender_full_name": "Logan Murphy",
        "timestamp": 1608060938
    },
    {
        "content": "<p>Does anyone have a working VSCode extension that matches brackets by colour?</p>",
        "id": 220062667,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1608077794
    },
    {
        "content": "<p><a href=\"https://marketplace.visualstudio.com/items?itemName=CoenraadS.bracket-pair-colorizer-2\">Bracket pair colorizer 2</a> still works for me, but <code>begin</code> and <code>end</code> screw it up sometimes (might just be my own settings).</p>",
        "id": 220062805,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1608077893
    },
    {
        "content": "<p>Thank you Logan,  sorry you to bother you with mismatched parens, sheesh.</p>",
        "id": 220075873,
        "sender_full_name": "Michael Beeson",
        "timestamp": 1608092404
    },
    {
        "content": "<p>Works for me too, although occasionally I have to ctrl-P reload</p>",
        "id": 220084736,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1608103779
    },
    {
        "content": "<p>Is there a builtin theorem for <code>¬¬p ↔ p</code>?</p>",
        "id": 300661533,
        "sender_full_name": "Omnikar",
        "timestamp": 1664118707
    },
    {
        "content": "<p>The <a href=\"https://leanprover-community.github.io/contribute/naming.html\">#naming</a> guide would lead you to <a href=\"https://leanprover-community.github.io/mathlib_docs/find/not_not\">docs#not_not</a>. Searching \"double negation\" in the top right box in the docs would also find that</p>",
        "id": 300663082,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1664119792
    },
    {
        "content": "<p>How do I get access to that from the code?</p>",
        "id": 300663217,
        "sender_full_name": "Omnikar",
        "timestamp": 1664119884
    },
    {
        "content": "<p>Access to the naming guide, the docs or the theorem?</p>",
        "id": 300664146,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1664120474
    },
    {
        "content": "<p>The theorem</p>",
        "id": 300664423,
        "sender_full_name": "Omnikar",
        "timestamp": 1664120658
    },
    {
        "content": "<p>Are you using lean3 or lean4?</p>",
        "id": 300664702,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1664120877
    },
    {
        "content": "<p>4</p>",
        "id": 300664792,
        "sender_full_name": "Omnikar",
        "timestamp": 1664120902
    },
    {
        "content": "<p>The <code>not_not</code> theorem is available in <code>Std.Logic</code></p>",
        "id": 300665298,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1664121235
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=not_not#doc\">docs4#not_not</a> (this says it's in <code>Mathlib.Logic.Basic</code> and that will still work but the docs are out of date)</p>",
        "id": 300665313,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1664121241
    },
    {
        "content": "<p>So what code do I actually type to get it? Sorry, I'm completely new to Lean</p>",
        "id": 300665895,
        "sender_full_name": "Omnikar",
        "timestamp": 1664121567
    },
    {
        "content": "<p>Have std4 or mathlib4 as a dependency, then  <code>import Std.Logic</code> or <code>import Mathlib.Logic.Basic</code> at the top of the file, then use <code>not_not</code></p>",
        "id": 300666008,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1664121619
    },
    {
        "content": "<p>And… how do I add a dependency? <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 300666102,
        "sender_full_name": "Omnikar",
        "timestamp": 1664121688
    },
    {
        "content": "<p>it goes in the lakefile.lean</p>",
        "id": 300666196,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1664121726
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">require</span> <span class=\"n\">std</span> <span class=\"k\">from</span> <span class=\"n\">git</span> <span class=\"s2\">\"https://github.com/leanprover/std4\"</span> <span class=\"bp\">@</span> <span class=\"s2\">\"main\"</span>\n</code></pre></div>",
        "id": 300666203,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1664121731
    },
    {
        "content": "<p>or</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">require</span> <span class=\"n\">mathlib</span> <span class=\"k\">from</span> <span class=\"n\">git</span> <span class=\"s2\">\"https://github.com/leanprover-community/mathlib4\"</span> <span class=\"bp\">@</span> <span class=\"s2\">\"master\"</span>\n</code></pre></div>",
        "id": 300666239,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1664121763
    },
    {
        "content": "<p>see for example the lakefile for mathlib4, which depends on std4: <a href=\"https://github.com/leanprover-community/mathlib4/blob/master/lakefile.lean\">https://github.com/leanprover-community/mathlib4/blob/master/lakefile.lean</a></p>",
        "id": 300666328,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1664121828
    },
    {
        "content": "<p>So I create a file called \"lakefile.lean\" and paste that in?</p>",
        "id": 300666334,
        "sender_full_name": "Omnikar",
        "timestamp": 1664121831
    },
    {
        "content": "<p>you should already have one if you used lake to create your project</p>",
        "id": 300666390,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1664121850
    },
    {
        "content": "<p>I don't know what lake is…</p>",
        "id": 300666408,
        "sender_full_name": "Omnikar",
        "timestamp": 1664121865
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/lake#creating-and-building-a-package\">https://github.com/leanprover/lake#creating-and-building-a-package</a></p>",
        "id": 300666420,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1664121879
    },
    {
        "content": "<p>it is the build system for lean 4</p>",
        "id": 300666424,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1664121890
    },
    {
        "content": "<p>it's required if you want to have more than one file and any dependencies other than core lean</p>",
        "id": 300666461,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1664121912
    },
    {
        "content": "<p>Okay</p>",
        "id": 300666477,
        "sender_full_name": "Omnikar",
        "timestamp": 1664121918
    },
    {
        "content": "<p>it's built in to lean</p>",
        "id": 300666488,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1664121926
    },
    {
        "content": "<p>so you should already have it, try <code>lake --help</code></p>",
        "id": 300666527,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1664121942
    },
    {
        "content": "<p>Yeah I do have it</p>",
        "id": 300666547,
        "sender_full_name": "Omnikar",
        "timestamp": 1664121951
    },
    {
        "content": "<p>so just follow the instructions linked there to make a new project and that should set you up with an appropriate lakefile</p>",
        "id": 300666639,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1664121983
    },
    {
        "content": "<p>there is an example of adding mathlib4 further down</p>",
        "id": 300666669,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1664122007
    },
    {
        "content": "<p>Okay, thanks</p>",
        "id": 300666696,
        "sender_full_name": "Omnikar",
        "timestamp": 1664122021
    }
]