[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">Point</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span>\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">collinear</span> <span class=\"o\">:</span> <span class=\"n\">Point</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Point</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Point</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">line</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Point</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">if</span> <span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"n\">b</span> <span class=\"k\">then</span> <span class=\"o\">{</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">Point</span> <span class=\"bp\">//</span> <span class=\"n\">collinear</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">}</span> <span class=\"k\">else</span> <span class=\"o\">{</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">Point</span> <span class=\"bp\">//</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"o\">}</span>\n</code></pre></div>\n<p>I get:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"kd\">instance</span>\n  <span class=\"n\">DecidableEq</span> <span class=\"n\">Point</span>\n</code></pre></div>\n<p>So I understand that I have to tell to lean that the equality of two points is decidable. How can I do that?</p>",
        "id": 406926475,
        "sender_full_name": "abdullah uyu",
        "timestamp": 1702122343
    },
    {
        "content": "<p>Does adding <code>[DecidableEq Point]</code> work?</p>",
        "id": 406926613,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1702122445
    },
    {
        "content": "<p>Oh, before the <code>:=</code>, of course! I'm not sure what that did, though. Does that mean that whenever I want to construct the line passing through <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi></mrow><annotation encoding=\"application/x-tex\">a</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">a</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>b</mi></mrow><annotation encoding=\"application/x-tex\">b</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\">b</span></span></span></span>, I also have to provide that I can decide whether if <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi></mrow><annotation encoding=\"application/x-tex\">a</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">a</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>b</mi></mrow><annotation encoding=\"application/x-tex\">b</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\">b</span></span></span></span> are equal?</p>",
        "id": 406927417,
        "sender_full_name": "abdullah uyu",
        "timestamp": 1702123038
    },
    {
        "content": "<p>What you have looks like it would be pretty awkward to me; I think you'd have a much better time with</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">abbrev</span> <span class=\"n\">line</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Point</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">Point</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">Point</span> <span class=\"bp\">|</span> <span class=\"k\">if</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"k\">then</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"k\">else</span> <span class=\"n\">collinear</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">}</span>\n</code></pre></div>",
        "id": 406927553,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1702123148
    },
    {
        "content": "<p>Or:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">abbrev</span> <span class=\"n\">line</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Point</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">Point</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">Point</span> <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">∧</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"n\">b</span> <span class=\"bp\">∧</span> <span class=\"n\">collinear</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">)}</span>\n</code></pre></div>",
        "id": 406928142,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1702123491
    },
    {
        "content": "<p>Another option would be</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">IsOnLine</span> <span class=\"o\">:</span> <span class=\"n\">Point</span> <span class=\"bp\">→</span> <span class=\"n\">Point</span> <span class=\"bp\">→</span> <span class=\"n\">Point</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span> <span class=\"n\">where</span>\n<span class=\"bp\">|</span> <span class=\"n\">refl</span> <span class=\"o\">:</span> <span class=\"n\">IsOnLine</span> <span class=\"n\">a</span> <span class=\"n\">a</span> <span class=\"n\">a</span>\n<span class=\"bp\">|</span> <span class=\"n\">between</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">Point</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">collinear</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">IsOnLine</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span>\n</code></pre></div>",
        "id": 406928274,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1702123576
    },
    {
        "content": "<p>Well, those make a lot more sense, yes.</p>",
        "id": 406930037,
        "sender_full_name": "abdullah uyu",
        "timestamp": 1702124983
    },
    {
        "content": "<p>Although, with those I get : <code>unknown identifier 'Set'</code>, is Set a lean3 thing, or do I have to import something?</p>",
        "id": 406930444,
        "sender_full_name": "abdullah uyu",
        "timestamp": 1702125290
    },
    {
        "content": "<p>No, <code>Set</code> is lean 4, but you might need some imports</p>",
        "id": 406930598,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1702125374
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113489-new-members/topic/failed.20to.20synthesize.20instance.20DecidableEq.20Point/near/406927553\">said</a>:</p>\n<blockquote>\n<p>What you have looks like it would be pretty awkward to me; I think you'd have a much better time with</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">abbrev</span> <span class=\"n\">line</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Point</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">Point</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">Point</span> <span class=\"bp\">|</span> <span class=\"k\">if</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"k\">then</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"k\">else</span> <span class=\"n\">collinear</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">}</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>So to use <code>Set</code>, I do <code>import Mathlib.Data.Set.Basic</code>. But the error persists, do you mean</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">abbrev</span> <span class=\"n\">line</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Point</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">Point</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">Point</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">Point</span> <span class=\"bp\">|</span> <span class=\"k\">if</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"k\">then</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"k\">else</span> <span class=\"n\">collinear</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">}</span>\n</code></pre></div>\n<p>But even with that, when I try to state the theorem <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi><mo>∈</mo><mi mathvariant=\"normal\">line</mi><mo>⁡</mo><mo stretchy=\"false\">(</mo><mi>a</mi><mo separator=\"true\">,</mo><mi>b</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">a \\in \\operatorname{line}(a, b)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mop\"><span class=\"mord mathrm\">line</span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">a</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">b</span><span class=\"mclose\">)</span></span></span></span> with</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">constructor_inside</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Point</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">Point</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Membership</span> <span class=\"n\">Point</span> <span class=\"kt\">Type</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">line</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n<span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>I get:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">don't</span> <span class=\"n\">know</span> <span class=\"n\">how</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"n\">implicit</span> <span class=\"n\">argument</span>\n  <span class=\"bp\">@</span><span class=\"n\">line</span> <span class=\"n\">Point</span> <span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">m.690</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">↦</span> <span class=\"n\">inst</span><span class=\"bp\">¹</span> <span class=\"n\">a</span> <span class=\"n\">b</span>\n<span class=\"n\">context</span><span class=\"o\">:</span>\n<span class=\"n\">Point</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"n\">collinear</span> <span class=\"o\">:</span> <span class=\"n\">Point</span> <span class=\"bp\">→</span> <span class=\"n\">Point</span> <span class=\"bp\">→</span> <span class=\"n\">Point</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Point</span>\n<span class=\"n\">inst</span><span class=\"bp\">¹</span> <span class=\"o\">:</span> <span class=\"n\">DecidableEq</span> <span class=\"n\">Point</span>\n<span class=\"n\">inst</span> <span class=\"o\">:</span> <span class=\"n\">Membership</span> <span class=\"n\">Point</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">Point</span> <span class=\"bp\">→</span> <span class=\"n\">Point</span> <span class=\"bp\">→</span> <span class=\"n\">Point</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"n\">when</span> <span class=\"n\">the</span> <span class=\"n\">resulting</span> <span class=\"n\">type</span> <span class=\"n\">of</span> <span class=\"n\">a</span> <span class=\"n\">declaration</span> <span class=\"n\">is</span> <span class=\"n\">explicitly</span> <span class=\"n\">provided</span><span class=\"o\">,</span> <span class=\"n\">all</span> <span class=\"n\">holes</span> <span class=\"o\">(</span><span class=\"n\">e.g.</span><span class=\"o\">,</span> <span class=\"bp\">`</span><span class=\"n\">_</span><span class=\"bp\">`</span><span class=\"o\">)</span> <span class=\"k\">in</span> <span class=\"n\">the</span> <span class=\"n\">header</span> <span class=\"n\">are</span> <span class=\"n\">resolved</span> <span class=\"n\">before</span> <span class=\"n\">the</span> <span class=\"n\">declaration</span> <span class=\"n\">body</span> <span class=\"n\">is</span> <span class=\"n\">processed</span>\n</code></pre></div>\n<p>which I think is more obscure than the previous error.</p>",
        "id": 406964270,
        "sender_full_name": "abdullah uyu",
        "timestamp": 1702149071
    },
    {
        "content": "<p>You'd get that error anyway, it's not caused by my change. It's telling you that lean can't work out <code>collinear</code></p>",
        "id": 406965934,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1702150754
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113489-new-members/topic/failed.20to.20synthesize.20instance.20DecidableEq.20Point/near/406928142\">said</a>:</p>\n<blockquote>\n<p>Or:</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">abbrev</span> <span class=\"n\">line</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Point</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">Point</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">Point</span> <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">∧</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"n\">b</span> <span class=\"bp\">∧</span> <span class=\"n\">collinear</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">)}</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>This version does not need <code>DecidableEq</code></p>",
        "id": 406965945,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1702150779
    },
    {
        "content": "<p>I wonder -- do you need whether <code>a = b</code> in the definition of a line? It seems like theorems will need <code>a ≠ b</code> assumptions anyway, so what does ensuring <code>line a a</code> is a single point helpful for?</p>",
        "id": 406966110,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1702150979
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113489-new-members/topic/failed.20to.20synthesize.20instance.20DecidableEq.20Point/near/406965934\">said</a>:</p>\n<blockquote>\n<p>You'd get that error anyway, it's not caused by my change. It's telling you that lean can't work out <code>collinear</code></p>\n</blockquote>\n<p>Yep, I realized that after I posted my response. Not sure I get what does it want from me, though.</p>",
        "id": 406966218,
        "sender_full_name": "abdullah uyu",
        "timestamp": 1702151105
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/113489-new-members/topic/failed.20to.20synthesize.20instance.20DecidableEq.20Point/near/406966110\">said</a>:</p>\n<blockquote>\n<p>I wonder -- do you need whether <code>a = b</code> in the definition of a line? It seems like theorems will need <code>a ≠ b</code> assumptions anyway, so what does ensuring <code>line a a</code> is a single point helpful for?</p>\n</blockquote>\n<p>Maybe. I blindfold transcribed the definition in the book, for the sake of an exercise.</p>",
        "id": 406966289,
        "sender_full_name": "abdullah uyu",
        "timestamp": 1702151165
    },
    {
        "content": "<p>Making <code>collinear</code> explicit seems to solve it. But I presume there is way to tell this to Lean in an elegant way.</p>",
        "id": 406967911,
        "sender_full_name": "abdullah uyu",
        "timestamp": 1702152720
    },
    {
        "content": "<p>If for any P there is a canonical interpretation of \"collinear\", you could use</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">HasCollinear</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n   <span class=\"n\">Collinear</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"bp\">→</span> <span class=\"n\">P</span> <span class=\"bp\">→</span> <span class=\"n\">P</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n\n<span class=\"kn\">export</span> <span class=\"n\">HasCollinear</span> <span class=\"n\">Collinear</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">Point</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">HasCollinear</span> <span class=\"n\">P</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>And then <code>Collinear a b c</code> will find the right version of colinearity automatically</p>",
        "id": 406980508,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1702161952
    }
]