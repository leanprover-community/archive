[
    {
        "content": "<p>I have a function that iterates over an array of bool and returns some index or none (using number n) which finds any index of <code>bool.tt</code>.<br>\nI want to prove that either all elements are ff, or it get \"some\" index, and this index is correct(tt).<br>\nHowever, I have to prove <code>idx &lt; n</code> first to call <code>array.read</code>.<br>\nIn brief, I want to prove two Props that one depends on the other.<br>\nShould I use dependent type like what I have written? or it there better way to express it?<br>\n(I know there's <code>array.read'</code>, but it's more a general question.)<br>\nThanks!</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">noncomputable theory</span>\n<span class=\"kd\">constants</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span><span class=\"n\">ℕ</span><span class=\"o\">)</span>\n<span class=\"kd\">def</span> <span class=\"n\">func</span><span class=\"o\">:</span> <span class=\"n\">array</span> <span class=\"n\">n</span> <span class=\"n\">bool</span> <span class=\"bp\">→</span> <span class=\"n\">fin</span> <span class=\"n\">n.succ</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">th</span><span class=\"o\">(</span><span class=\"n\">ar</span><span class=\"o\">:</span> <span class=\"n\">array</span> <span class=\"n\">n</span> <span class=\"n\">bool</span><span class=\"o\">):</span> <span class=\"o\">(</span><span class=\"bp\">∀</span><span class=\"n\">u</span><span class=\"o\">,</span> <span class=\"n\">ar.read</span> <span class=\"n\">u</span> <span class=\"bp\">=</span> <span class=\"n\">ff</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"bp\">∃</span><span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:(</span><span class=\"n\">func</span> <span class=\"n\">ar</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">),</span> <span class=\"n\">ar.read</span> <span class=\"o\">⟨(</span><span class=\"n\">func</span> <span class=\"n\">ar</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"n\">h</span><span class=\"o\">⟩</span> <span class=\"bp\">=</span> <span class=\"n\">tt</span><span class=\"o\">):=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 338266033,
        "sender_full_name": "uwagjaynoi",
        "timestamp": 1677487034
    },
    {
        "content": "<p>Using <code>Exists</code> like that is fairly reasonable</p>",
        "id": 338282597,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1677492207
    },
    {
        "content": "<p>Thank you!</p>",
        "id": 338547555,
        "sender_full_name": "uwagjaynoi",
        "timestamp": 1677579667
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"545740\">uwagjaynoi</span> has marked this topic as resolved.</p>",
        "id": 338547567,
        "sender_full_name": "Notification Bot",
        "timestamp": 1677579673
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"545740\">uwagjaynoi</span> has marked this topic as unresolved.</p>",
        "id": 338561383,
        "sender_full_name": "Notification Bot",
        "timestamp": 1677583795
    }
]