[
    {
        "content": "<p>I can write </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Validate</span> <span class=\"o\">(</span><span class=\"n\">ε</span> <span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">ok</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">Validate</span> <span class=\"n\">ε</span> <span class=\"n\">α</span>\n  <span class=\"bp\">|</span> <span class=\"n\">errors</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span> <span class=\"bp\">//</span> <span class=\"n\">x.length</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"n\">Validate</span> <span class=\"n\">ε</span> <span class=\"n\">α</span>\n<span class=\"n\">deriving</span> <span class=\"n\">Repr</span>\n</code></pre></div>\n<p>but </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">NonEmptyList</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span> <span class=\"bp\">//</span> <span class=\"n\">x.length</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">}</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">Validate</span> <span class=\"o\">(</span><span class=\"n\">ε</span> <span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">ok</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">Validate</span> <span class=\"n\">ε</span> <span class=\"n\">α</span>\n  <span class=\"bp\">|</span> <span class=\"n\">errors</span> <span class=\"o\">:</span> <span class=\"n\">NonEmptyList</span> <span class=\"n\">ε</span>  <span class=\"bp\">→</span> <span class=\"n\">Validate</span> <span class=\"n\">ε</span> <span class=\"n\">α</span>\n<span class=\"n\">deriving</span> <span class=\"n\">Repr</span>\n</code></pre></div>\n<p>failed. Why?</p>",
        "id": 395771016,
        "sender_full_name": "ZHAO Jiecheng",
        "timestamp": 1696890731
    },
    {
        "content": "<p>Because you never told Lean how to build a <code>Repr (NonEmptyList A)</code></p>",
        "id": 395772359,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1696891956
    },
    {
        "content": "<p>Can you show the error message you get?</p>",
        "id": 395772376,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1696891977
    },
    {
        "content": "<p>Would using <code>abbrev NonEmptyList</code> instead of <code>def NonEmptyList</code> be acceptable?</p>",
        "id": 395772689,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1696892254
    },
    {
        "content": "<p>Eric, you are almost a Lean parser:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"kd\">instance</span>\n  <span class=\"n\">Repr</span> <span class=\"o\">(</span><span class=\"n\">NonEmptyList</span> <span class=\"n\">ε</span><span class=\"bp\">✝</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 395772750,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1696892297
    },
    {
        "content": "<p>If only <span class=\"user-mention silent\" data-user-id=\"250110\">ZHAO Jiecheng</span>  had a lean parser locally so they didn't have to wait 20 minutes for my message <span aria-label=\"snail\" class=\"emoji emoji-1f40c\" role=\"img\" title=\"snail\">:snail:</span></p>",
        "id": 395773442,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1696892853
    },
    {
        "content": "<p>failed to synthesize instance<br>\n  Repr (NonEmptyList α✝)</p>",
        "id": 395774688,
        "sender_full_name": "ZHAO Jiecheng",
        "timestamp": 1696893930
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"321459\">Damiano Testa</span> <a href=\"#narrow/stream/113489-new-members/topic/Deriving.20Repr.20fails.20when.20using.20subtype.20alias.2E/near/395772689\">said</a>:</p>\n<blockquote>\n<p>Would using <code>abbrev NonEmptyList</code> instead of <code>def NonEmptyList</code> be acceptable?</p>\n</blockquote>\n<p><code>Abbrev</code> works well.</p>",
        "id": 395774837,
        "sender_full_name": "ZHAO Jiecheng",
        "timestamp": 1696894054
    },
    {
        "content": "<p>What is the difference between <code>abbrev</code> and <code>def</code></p>",
        "id": 395774980,
        "sender_full_name": "ZHAO Jiecheng",
        "timestamp": 1696894161
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113489-new-members/topic/Deriving.20Repr.20fails.20when.20using.20subtype.20alias.2E/near/395773442\">said</a>:</p>\n<blockquote>\n<p>If only <span class=\"user-mention silent\" data-user-id=\"250110\">ZHAO Jiecheng</span>  had a lean parser locally so they didn't have to wait 20 minutes for my message <span aria-label=\"snail\" class=\"emoji emoji-1f40c\" role=\"img\" title=\"snail\">:snail:</span></p>\n</blockquote>\n<p>just back in 18 mins <span aria-label=\"smirk cat\" class=\"emoji emoji-1f63c\" role=\"img\" title=\"smirk cat\">:smirk_cat:</span></p>",
        "id": 395775099,
        "sender_full_name": "ZHAO Jiecheng",
        "timestamp": 1696894245
    },
    {
        "content": "<p><code>def</code> means \"here is a new box containing the stuff after the := , \", but please don't open it and look inside\", <code>abbrev</code> is the same but looking inside is encouraged.</p>",
        "id": 395775295,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1696894422
    },
    {
        "content": "<p>If you're not allowed to look inside the box then you don't have any way to find the Repr instance</p>",
        "id": 395775410,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1696894487
    },
    {
        "content": "<p><del>(ugh sorry, zulip mobile deleted that message and I can't recover from the message history until I'm back at my laptop)</del></p>",
        "id": 395775484,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1696894545
    },
    {
        "content": "<p>I found something helpful, <a href=\"https://leanprover-community.github.io/archive/stream/270676-lean4/topic/def.20vs.20abbrev.html\">def vs abbrev</a> .</p>",
        "id": 395781349,
        "sender_full_name": "ZHAO Jiecheng",
        "timestamp": 1696898551
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"250110\">ZHAO Jiecheng</span> has marked this topic as resolved.</p>",
        "id": 395782502,
        "sender_full_name": "Notification Bot",
        "timestamp": 1696899146
    }
]