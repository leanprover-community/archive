[
    {
        "content": "<p><code>submodule</code> extends <code>add_submonoid</code>, from which it inherits a field called <code>carrier</code> (via <code>add_subsemigroup</code>), and also <code>sub_mul_action</code>, from which it inherits another field, also called <code>carrier</code>.  How do we ensure that these two <code>carrier</code>s are the same?</p>\n<p>Or is there only one?  <a href=\"https://github.com/leanprover-community/mathlib/blob/master/src/algebra/module/submodule/basic.lean#L55\">Here we refer to <code>submodule.carrier</code></a>, which suggests that maybe there's only a single inherited field?  If so, how does that work?</p>",
        "id": 368053942,
        "sender_full_name": "Martin C. Martin",
        "timestamp": 1687295090
    },
    {
        "content": "<p>There is indeed only one. The answer so as to why it works the way you intend it to depends whether you use flat or nested structures. <code>submodule</code> is a flat structure so I'm going to explain this one.</p>",
        "id": 368054920,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1687295455
    },
    {
        "content": "<p>Section 2 of <a href=\"https://arxiv.org/abs/2306.00617\">arxiv#2306.00617</a> has some examples demonstrating how multiple inheritance works, both with flat inheritance (mathlib3) and nested inheritance (mathlib4, but presented in lean 3 in that paper)</p>",
        "id": 368055480,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1687295670
    },
    {
        "content": "<p><code>submodule</code> extending <code>add_submonoid</code> and <code>sub_mul_action</code> means that Lean takes their fields and makes them fields of <code>submodule</code>, <em>merging fields with the same name</em>, eg <code>carrier</code>. Then it creates the obvious functions <code>submodule.to_add_submonoid : submodule R M → add_submonoid M</code> and <code>submodule.to_sub_mul_action : submodule R M → sub_mul_action R M</code> where the field <code>add_submonoid.x</code>/<code>sub_mul_action.x</code> gets filled in with <code>submodule.x</code>.</p>",
        "id": 368055588,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1687295716
    },
    {
        "content": "<p>\"Flat structures\" is switched on with <code>set_option old_structure_cmd true</code> (the structure ends up having the union of all the fields of everything it extends, rather than using any of the parent structures themselves as fields). Yaël's explaining this, but I just wanted to point out that this option is important.</p>",
        "id": 368055672,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1687295758
    },
    {
        "content": "<p>I was afraid it might be named based.  So this means, if person A maintains a structure somewhere and decides to change the name of a field, and unknown to them, the new name happens to be the same as person B chose for their unrelated structure, then person C, who extends both of them, now has only one field, not two.  However, I suppose the name is part of the external interface of the structure.  There's nothing like hidden fields in OO.  There are no implementation details.  :)</p>",
        "id": 368056261,
        "sender_full_name": "Martin C. Martin",
        "timestamp": 1687295951
    },
    {
        "content": "<p>I didn't realize it's name-based in Lean 4 too. This is fine:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">A</span> <span class=\"n\">where</span>\n  <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">B</span> <span class=\"n\">where</span>\n  <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">C</span> <span class=\"kd\">extends</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"n\">B</span>\n</code></pre></div>\n<p>If the types don't match it'll throw an error though.</p>",
        "id": 368057385,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1687296362
    },
    {
        "content": "<p>If you want to protect against this, then just like in OO I think you'd embed rather than extend.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">C</span> <span class=\"n\">where</span>\n  <span class=\"n\">toA</span> <span class=\"o\">:</span> <span class=\"n\">A</span>\n  <span class=\"n\">toB</span> <span class=\"o\">:</span> <span class=\"n\">B</span>\n</code></pre></div>",
        "id": 368057798,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1687296544
    },
    {
        "content": "<p>Where can I read more about inheritance in Lean 3?</p>",
        "id": 368346047,
        "sender_full_name": "Martin C. Martin",
        "timestamp": 1687376681
    },
    {
        "content": "<p>Did you already read section 2 of <a href=\"https://arxiv.org/abs/2306.00617\">arxiv#2306.00617</a>  above? I'm not sure there's much else to know: inheritance is just syntactic sugar for either copying across all the fields, or inserting a parent field</p>",
        "id": 368346671,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1687376867
    },
    {
        "content": "<p>Ok thanks, I'll read that.</p>",
        "id": 368346921,
        "sender_full_name": "Martin C. Martin",
        "timestamp": 1687376920
    },
    {
        "content": "<p>If your question is actually \"where can I read more about mathematical uses of <code>structure</code>\", <a href=\"https://leanprover-community.github.io/mathematics_in_lean/C07_Hierarchies.html#sub-objects\">https://leanprover-community.github.io/mathematics_in_lean/C07_Hierarchies.html#sub-objects</a> is probably a good resource</p>",
        "id": 368346982,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1687376932
    },
    {
        "content": "<p>(but that's for Lean 4)</p>",
        "id": 368347046,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1687376955
    }
]