[
    {
        "content": "<p>Check \"Mathlib.Algebra.Group.Defs._auxLemma.2\" , why is there a error \"unknown identifier\" ? <br>\nI cannot find it anywhere in mathlib</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Real.Sqrt</span>\n<span class=\"kn\">open</span> <span class=\"n\">Real</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">sqrt</span> <span class=\"mi\">5</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"bp\">-</span><span class=\"n\">sqrt</span> <span class=\"mi\">5</span> <span class=\"o\">:=</span>\n  <span class=\"n\">of_eq_true</span>\n  <span class=\"o\">((</span><span class=\"n\">congrArg</span> <span class=\"n\">Not</span>\n        <span class=\"o\">(((</span><span class=\"n\">Mathlib.Algebra.Group.Defs._auxLemma.2</span> <span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"n\">LeanCourse.LearnLean.Learning1._auxLemma.2</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">trans</span>\n          <span class=\"o\">((</span><span class=\"n\">Mathlib.Data.Real.Sqrt._auxLemma.11</span>\n                <span class=\"o\">(</span><span class=\"n\">of_eq_true</span>\n                  <span class=\"o\">(</span><span class=\"n\">eq_true</span>\n                    <span class=\"o\">(</span><span class=\"n\">Mathlib.Meta.NormNum.isNat_le_true</span> <span class=\"o\">(</span><span class=\"n\">Mathlib.Meta.NormNum.isNat_ofNat</span> <span class=\"n\">ℝ</span> <span class=\"n\">Nat.cast_zero</span><span class=\"o\">)</span>\n                      <span class=\"o\">(</span><span class=\"n\">Mathlib.Meta.NormNum.isNat_ofNat</span> <span class=\"n\">ℝ</span> <span class=\"o\">(</span><span class=\"n\">Eq.refl</span> <span class=\"mi\">5</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">Eq.refl</span> <span class=\"n\">true</span><span class=\"o\">)))))</span><span class=\"bp\">.</span><span class=\"n\">trans</span>\n            <span class=\"o\">(</span><span class=\"n\">eq_false</span>\n              <span class=\"o\">(</span><span class=\"n\">Mathlib.Meta.NormNum.isNat_eq_false</span> <span class=\"o\">(</span><span class=\"n\">Mathlib.Meta.NormNum.isNat_ofNat</span> <span class=\"n\">ℝ</span> <span class=\"o\">(</span><span class=\"n\">Eq.refl</span> <span class=\"mi\">5</span><span class=\"o\">))</span>\n                <span class=\"o\">(</span><span class=\"n\">Mathlib.Meta.NormNum.isNat_ofNat</span> <span class=\"n\">ℝ</span> <span class=\"n\">Nat.cast_zero</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Eq.refl</span> <span class=\"n\">false</span><span class=\"o\">))))))</span><span class=\"bp\">.</span><span class=\"n\">trans</span>\n    <span class=\"o\">(</span><span class=\"n\">not_false_eq_true.trans</span> <span class=\"o\">(</span><span class=\"n\">eq_true</span> <span class=\"n\">True.intro</span><span class=\"o\">)))</span>\n  <span class=\"c1\">-- by norm_num</span>\n  <span class=\"c1\">-- #print h1</span>\n</code></pre></div>",
        "id": 404764489,
        "sender_full_name": "chenjulang",
        "timestamp": 1701225865
    },
    {
        "content": "<p>why is it \"unknown identifier\" ?</p>",
        "id": 404764649,
        "sender_full_name": "chenjulang",
        "timestamp": 1701225931
    },
    {
        "content": "<p>Wating for Help...</p>",
        "id": 404772395,
        "sender_full_name": "chenjulang",
        "timestamp": 1701229224
    },
    {
        "content": "<p>You're looking at the internals of <code>norm_num</code> and sometimes this uses private lemmas (I think). Such lemmas can only be referenced directly within the file in which they were declared. Using <code>#print</code> on a theorem with a proof using a complicated tactic is often a fruitless endeavor.</p>",
        "id": 404778612,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1701231652
    },
    {
        "content": "<p>But how can i get rid of that error?</p>",
        "id": 404786853,
        "sender_full_name": "chenjulang",
        "timestamp": 1701235500
    },
    {
        "content": "<p>Just keep using <code>by norm_num</code></p>",
        "id": 404788775,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1701236995
    },
    {
        "content": "<p>In fact, I want to know what \"norm_num\" actually does. And then I try the \"#print h1\" to find out. And when i replace \"norm_num\" with the results  that \"#print h1\" gives , this error occur</p>",
        "id": 404789114,
        "sender_full_name": "chenjulang",
        "timestamp": 1701237239
    },
    {
        "content": "<p>Maybe it is too early for me to know about details of \"norm_num\"...</p>",
        "id": 404789199,
        "sender_full_name": "chenjulang",
        "timestamp": 1701237282
    },
    {
        "content": "<p>If you want to know how <code>norm_num</code> works, the answer is to go read the source code, not to <code>#print</code> the terms it produces. Like I said, such attempts are fruitless.</p>",
        "id": 404792061,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1701238687
    },
    {
        "content": "<p>Actually these lemmas are not coming from <code>norm_num</code>, they are coming from <code>simp</code></p>",
        "id": 404792502,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1701238945
    },
    {
        "content": "<p>i give up</p>",
        "id": 404803223,
        "sender_full_name": "chenjulang",
        "timestamp": 1701243112
    },
    {
        "content": "<p>Another way to see what <code>norm_num</code> proofs are doing is to use <code>#explode</code> on the resulting theorems</p>",
        "id": 404805059,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1701243913
    },
    {
        "content": "<p>By the way, I can't replicate this example, the MWE</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Real.Sqrt</span>\n<span class=\"kn\">open</span> <span class=\"n\">Real</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">sqrt</span> <span class=\"mi\">5</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"bp\">-</span><span class=\"n\">sqrt</span> <span class=\"mi\">5</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">norm_num</span>\n</code></pre></div>\n<p>fails to prove anything on mathlib master. And this makes sense, because <code>norm_num</code> doesn't know how to evaluate <code>sqrt</code> - any success you are seeing here is caused by <code>simp</code> (well, <code>simp</code> with <code>norm_num</code> discharger)</p>",
        "id": 404805462,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1701244150
    },
    {
        "content": "<p>You can see what <code>Mathlib.Algebra.Group.Defs._auxLemma.2</code> is by hovering over it in the <code>#print</code> display. I see:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">@</span><span class=\"n\">Mathlib.Algebra.Group.Defs._auxLemma.2</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">inst</span> <span class=\"o\">:</span> <span class=\"n\">Add</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">inst_1</span> <span class=\"o\">:</span> <span class=\"n\">IsLeftCancelAdd</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">},</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">c</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>Adding <code>set_option trace.Meta.Tactic.simp.rewrite true</code> also shows the line</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">[</span><span class=\"n\">Meta.Tactic.simp.rewrite</span><span class=\"o\">]</span> <span class=\"bp\">@</span><span class=\"n\">add_right_inj</span><span class=\"o\">:</span><span class=\"mi\">1000</span><span class=\"o\">,</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">Real.sqrt</span> <span class=\"mi\">5</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"bp\">-</span><span class=\"n\">Real.sqrt</span> <span class=\"mi\">5</span> <span class=\"bp\">==&gt;</span> <span class=\"n\">Real.sqrt</span> <span class=\"mi\">5</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span><span class=\"n\">Real.sqrt</span> <span class=\"mi\">5</span>\n</code></pre></div>\n<p>which indicates that the theorem actually being applied here is <code>add_right_inj</code>. <code>simp</code> preprocesses iff <code>@[simp]</code> statements to turn them into equalities (note that <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=add_right_inj#doc\">docs#add_right_inj</a> is an iff statement)</p>",
        "id": 404805999,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1701244414
    },
    {
        "content": "<p>Thanks</p>",
        "id": 404806141,
        "sender_full_name": "chenjulang",
        "timestamp": 1701244469
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113489-new-members/topic/Mathlib.2EAlgebra.2EGroup.2EDefs.2E_auxLemma.20.2C.20.20unknown.20identifier.3F/near/404805462\">said</a>:</p>\n<blockquote>\n<p>By the way, I can't replicate this example, the MWE</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Real.Sqrt</span>\n<span class=\"kn\">open</span> <span class=\"n\">Real</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">sqrt</span> <span class=\"mi\">5</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"bp\">-</span><span class=\"n\">sqrt</span> <span class=\"mi\">5</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">norm_num</span>\n</code></pre></div>\n<p>fails to prove anything on mathlib master. And this makes sense, because <code>norm_num</code> doesn't know how to evaluate <code>sqrt</code> - any success you are seeing here is caused by <code>simp</code> (well, <code>simp</code> with <code>norm_num</code> discharger)</p>\n</blockquote>\n<p>sorry ,  one line missing :</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Real.Sqrt</span>\n<span class=\"kn\">open</span> <span class=\"n\">Real</span>\n\n<span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"n\">div_left_inj'</span> <span class=\"n\">eq_neg_self_iff</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">sqrt</span> <span class=\"mi\">5</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"bp\">-</span><span class=\"n\">sqrt</span> <span class=\"mi\">5</span>\n<span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">norm_num</span>\n\n<span class=\"k\">#print</span> <span class=\"n\">h1</span>\n</code></pre></div>",
        "id": 404807346,
        "sender_full_name": "chenjulang",
        "timestamp": 1701244953
    },
    {
        "content": "<p>something interesting here <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span> <br>\n<a href=\"/user_uploads/3121/yetmVsN2_Mj-IR6-uGuhWKsB/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/yetmVsN2_Mj-IR6-uGuhWKsB/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/yetmVsN2_Mj-IR6-uGuhWKsB/image.png\"></a></div>",
        "id": 404807595,
        "sender_full_name": "chenjulang",
        "timestamp": 1701245066
    },
    {
        "content": "<p>what did you expect to happen? <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 404807657,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1701245105
    },
    {
        "content": "<p>To infinity~~</p>",
        "id": 404807720,
        "sender_full_name": "chenjulang",
        "timestamp": 1701245138
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"665035\">chenjulang</span> has marked this topic as resolved.</p>",
        "id": 404807886,
        "sender_full_name": "Notification Bot",
        "timestamp": 1701245217
    },
    {
        "content": "<p>here's a hackish way to use <code>#print</code> on definitions with <code>.num</code> components:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">macro</span> <span class=\"s2\">\"foo\"</span> <span class=\"o\">:</span> <span class=\"n\">command</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"k\">#print</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">Lean.mkCIdent</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">num</span> <span class=\"bp\">`</span><span class=\"n\">Mathlib.Algebra.Group.Defs._auxLemma</span> <span class=\"mi\">2</span><span class=\"o\">)))</span>\n<span class=\"n\">foo</span>\n<span class=\"c1\">-- theorem Mathlib.Algebra.Group.Defs._auxLemma.2.{u_1} : ∀ {G : Type u_1} [inst : Add G] [inst_1 : IsLeftCancelAdd G]</span>\n<span class=\"c1\">--   (a : G) {b c : G}, (a + b = a + c) = (b = c) :=</span>\n<span class=\"c1\">-- fun {G} [Add G] [IsLeftCancelAdd G] a {b c} ↦ propext (add_right_inj a)</span>\n</code></pre></div>",
        "id": 404808175,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1701245346
    },
    {
        "content": "<p>Oh , Excellent!</p>",
        "id": 404820440,
        "sender_full_name": "chenjulang",
        "timestamp": 1701249831
    }
]