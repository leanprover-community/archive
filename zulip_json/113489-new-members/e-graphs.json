[
    {
        "content": "<p>Welcome! I guess you're talking about the paper <a href=\"http://leodemoura.github.io/files/ematching.pdf\">\"Efficient E-matching for SMT Solvers\"</a>? I'm probably not the right person to try to answer your question but maybe <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> or <span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> can help.</p>",
        "id": 231224127,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1616341937
    },
    {
        "content": "<p>What are e-graphs? Maybe I know them by another name, but that doesn't ring a bell</p>",
        "id": 231224154,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1616341994
    },
    {
        "content": "<p>Chiming here - would also be interested in knowing about egraph use in Lean. I take it the pattern matcher for tactics got an algorithmkc overhaul from Lean 3</p>",
        "id": 232114940,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1616875669
    },
    {
        "content": "<p>Bump. Does the synbolic rewriter in <code>rfl</code> use a particular algorithm for egraphs?</p>",
        "id": 234073628,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1618173181
    },
    {
        "content": "<p>If one wanted to add tactics similar to RUBI, would that be by overloading <code>simp</code>?</p>",
        "id": 234073686,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1618173226
    },
    {
        "content": "<p><a href=\"https://rulebasedintegration.org/\">https://rulebasedintegration.org/</a></p>",
        "id": 234073925,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1618173438
    },
    {
        "content": "<p>What do you mean by the symbolic rewriter in <code>rfl</code>?</p>",
        "id": 234077371,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1618176154
    },
    {
        "content": "<p><code>rfl</code> is just a shorthand for <a href=\"https://leanprover-community.github.io/mathlib_docs/find/eq.refl\">docs#eq.refl</a>, a constructor for <a href=\"https://leanprover-community.github.io/mathlib_docs/find/eq\">docs#eq</a></p>",
        "id": 234077398,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1618176192
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 234090168,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1618189641
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> here's waht I understand:</p>\n<ol>\n<li>Lean4 has a \"symbolic\" rewriter for terms in the goals<br>\nFrom the manual:</li>\n</ol>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- You can prove theorems about your functions.</span>\n<span class=\"c1\">-- The following theorem states that for any natural number `a`,</span>\n<span class=\"c1\">-- adding 2 twice produces a value equal to `a + 4`.</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">twiceAdd2</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">twice</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">4</span> <span class=\"o\">:=</span>\n  <span class=\"c1\">-- The proof is by reflexivity. Lean \"symbolically\" reduces both sides of the equality</span>\n  <span class=\"c1\">-- until they are identical.</span>\n  <span class=\"n\">rfl</span>\n</code></pre></div>\n<ol start=\"2\">\n<li>the <code>eq.refl</code> you pointed to is in mathlib, aka Lean3.</li>\n<li>In RUBI, the symbolic term rewriter is crucial for performance and solvability of integration problems.</li>\n<li>Leo published a fundamental paper of egraphs for symbolic term rewriting, and <span class=\"user-mention\" data-user-id=\"399443\">@Alessandro</span> and I are wondering if that was implemented as the symbolic term rewriter in Lean4.</li>\n</ol>",
        "id": 234090401,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1618189861
    },
    {
        "content": "<p>Lean 4's rfl is the same as lean 3's rfl. It's not a \"symbolic rewriter\", it compares values up to a relation called definitional equality</p>",
        "id": 234090435,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1618189902
    },
    {
        "content": "<p>Thanks Mario, nice to see you around here too :D</p>",
        "id": 234090480,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1618189925
    },
    {
        "content": "<p>which involves weakly normalizing both sides to a constructor</p>",
        "id": 234090497,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1618189938
    },
    {
        "content": "<p>I am everywhere</p>",
        "id": 234090504,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1618189950
    },
    {
        "content": "<p>Well I'm bringing this up because I'm \"close\" <span aria-label=\"tm\" class=\"emoji emoji-2122\" role=\"img\" title=\"tm\">:tm:</span>  to porting RUBI to Julia, and from there porting RUBI to Lean wouldn't be \"that much\" additional effort. I would want to know which tactic I could dump a <code>lhs = rhs</code> ruleset, if at all feasible.</p>",
        "id": 234090560,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1618190038
    },
    {
        "content": "<p>As far as I know, nothing about egraphs or symbolic term rewriting is involved in the implementation of rfl and/or defeq in any version of lean. This is much more based on literature on dependent type theory, reduction and strong normalization stuff</p>",
        "id": 234090628,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1618190077
    },
    {
        "content": "<p>Oh neat.</p>",
        "id": 234090639,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1618190100
    },
    {
        "content": "<p>However, you will find more of leo's creativity in the <code>simp</code> tactic, which does symbolic term rewriting closer to what you are talking about</p>",
        "id": 234090665,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1618190120
    },
    {
        "content": "<p>Ah, that's the one. So I could in theory overload <code>simp</code> with a bunch of these integration rules, right?</p>",
        "id": 234090678,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1618190141
    },
    {
        "content": "<p>yes</p>",
        "id": 234090694,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1618190163
    },
    {
        "content": "<p>We've done that for derivatives in mathlib</p>",
        "id": 234090733,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1618190177
    },
    {
        "content": "<p>I think integration too but I guess the coverage is lower</p>",
        "id": 234090750,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1618190198
    },
    {
        "content": "<p>its ability to pattern match on lambdas is limited though, so most likely you would do a full integration routine as a dedicated tactic</p>",
        "id": 234090774,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1618190244
    },
    {
        "content": "<p>Ouch.</p>",
        "id": 234090786,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1618190258
    },
    {
        "content": "<p>I mean, it's pretty hard to recognize that in the function <code>\\lam x, sin x * (2 / cos x)</code> you want to pull out the constant factor 2 (let's say this is a preprocessing step)</p>",
        "id": 234090969,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1618190456
    },
    {
        "content": "<p>you would have a huge number of possible patterns to look for to find the 2</p>",
        "id": 234091006,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1618190477
    },
    {
        "content": "<p>Yup, that's a transformation that egraphs can achieve linear in the number of patterns that match, without running into the phase ordering problem of some transformations will bork others.</p>\n<p>Hence why we're asking :D</p>",
        "id": 234091025,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1618190520
    },
    {
        "content": "<p>This is a good overview (that I'm still becoming familiar with myself)<br>\n<a href=\"https://egraphs-good.github.io/\">https://egraphs-good.github.io/</a></p>",
        "id": 234091071,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1618190538
    },
    {
        "content": "<p>I don't think I have seen anything like this implemented in lean</p>",
        "id": 234091215,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1618190730
    },
    {
        "content": "<p>It is possible to implement it yourself, of course</p>",
        "id": 234091224,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1618190746
    },
    {
        "content": "<p>(in lean 3 or lean 4, although it's probably better suited for lean 4)</p>",
        "id": 234091267,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1618190765
    },
    {
        "content": "<p>Yeah, condolences to the mathlib crowd, I'm learning Lean4 - the garbage collector's too good to pass up <span aria-label=\"muscle\" class=\"emoji emoji-1f4aa\" role=\"img\" title=\"muscle\">:muscle:</span></p>",
        "id": 234091839,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1618191392
    },
    {
        "content": "<p>(And in fact it will probably do amazingly in the benchmarks what with the functional but in place style not generating tons of allocations in all the symbolic computations.)</p>",
        "id": 234091863,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1618191434
    },
    {
        "content": "<p>Bumping this thread to note a new <a href=\"https://arxiv.org/pdf/2108.02290.pdf\">work</a> which (claims to?) achieve exponential (!) speedups on e-matching queries in the egg library.</p>",
        "id": 268439754,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1642532542
    },
    {
        "content": "<p><span aria-label=\"eyes\" class=\"emoji emoji-1f440\" role=\"img\" title=\"eyes\">:eyes:</span> 2022 <span aria-label=\"eyes\" class=\"emoji emoji-1f440\" role=\"img\" title=\"eyes\">:eyes:</span></p>",
        "id": 268442784,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1642533924
    },
    {
        "content": "<p>I was looking for the counter-part of e-graphs in Lean and came across this thread. Based on some search here, I assume it's not implemented in Lean yet.</p>\n<p>I'm working on something based on it that should have been done in a proof assistant like Lean, but it's tempting to give it a try as it's a lighter, seemingly sufficient and possible faster solution.</p>\n<p>I wonder:</p>\n<ol>\n<li>the level of its efficiency in the eyes of Lean tactic developers</li>\n<li>its soundness in the eyes of Lean type theorists</li>\n<li>the closest mechanism in Lean, pros&amp;cons etc.</li>\n</ol>\n<p>Any comments will be greatly appreciated!</p>\n<p>Also, here's their latest progress:</p>\n<ul>\n<li>paper <a href=\"https://pldi23.sigplan.org/details/pldi-2023-pldi/20/Better-Together-Unifying-Datalog-and-Equality-Saturation\">Better Together: Unifying Datalog and Equality Saturation</a></li>\n<li>web demo (rust compiled to wasm): <a href=\"https://egraphs-good.github.io/egglog/\">https://egraphs-good.github.io/egglog/</a> , there are quite some serious and sophisticated use cases like for Herbie’s EqSat</li>\n<li>code (rust): <a href=\"https://github.com/egraphs-good/egglog/\">https://github.com/egraphs-good/egglog/</a></li>\n<li>code (high-level python binding): <a href=\"https://github.com/metadsl/egglog-python\">https://github.com/metadsl/egglog-python</a></li>\n</ul>",
        "id": 360280036,
        "sender_full_name": "Utensil Song",
        "timestamp": 1684763946
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"315434\">@Andrés Goens</span></p>",
        "id": 360318341,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1684772046
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"296911\">@Utensil Song</span> E-graphs (and congruence closure) were implemented in older versions of Lean: see <a href=\"https://link.springer.com/chapter/10.1007/978-3-319-40229-1_8\">this paper</a> for the Lean 2 description and there's a mathlib tactic for Lean 3 called <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#cc%20(congruence%20closure)\">cc</a> that ports that. If you use Lean 3, then that's great to use! As far as I understand it's not been ported to Lean 4 yet.</p>",
        "id": 360319170,
        "sender_full_name": "Andrés Goens",
        "timestamp": 1684772294
    },
    {
        "content": "<p>We have a prototype that uses <a href=\"https://egraphs-good.github.io/\">egg</a>, the predecessor of egglog in Lean 4, see: <a href=\"https://github.com/opencompl/egg-tactic-code\">https://github.com/opencompl/egg-tactic-code</a> this is not really mature yet, but we might get back to it at some point hopefully, perhaps integrate with egglog instead and/or with a native Lean 4 implementation, but that's work in progress. This is sound too, because it checks the proof witness generated by egg. If this is useful we're happy to help you use it too, but chances are it might not work for your use case (e.g. currently it doesn't support different types in the term, etc, so it's very bare-bones).</p>",
        "id": 360319821,
        "sender_full_name": "Andrés Goens",
        "timestamp": 1684772502
    },
    {
        "content": "<p>What's your use case?</p>",
        "id": 360319838,
        "sender_full_name": "Andrés Goens",
        "timestamp": 1684772508
    },
    {
        "content": "<p>Thanks for the comprehensive explanation! It's great to know it naturally worked/works/will work with Lean 2/3/4 ! I'll check them out</p>",
        "id": 360395955,
        "sender_full_name": "Utensil Song",
        "timestamp": 1684799115
    },
    {
        "content": "<p>I need some experiments before I can determine the extent of my use cases. Now that knowing the results could integrate with Lean, it's definitely worth to dig deeper <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 360397526,
        "sender_full_name": "Utensil Song",
        "timestamp": 1684800272
    },
    {
        "content": "<p>I was aware of <code>cc</code> but didn't connect the dots. It would seem that a full integration with egg/egglog could quite some more than <code>cc</code>.</p>",
        "id": 360398309,
        "sender_full_name": "Utensil Song",
        "timestamp": 1684800825
    },
    {
        "content": "<p>I was a bit concerned with its efficiency (particularly the space complexity) since it preserve more info than usual tree-ish heuristic based approach although it's quite efficient for a graph-based one. Will experiment with complicated use cases and report back.</p>",
        "id": 360398591,
        "sender_full_name": "Utensil Song",
        "timestamp": 1684800989
    }
]