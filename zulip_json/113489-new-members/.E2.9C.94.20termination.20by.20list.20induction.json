[
    {
        "content": "<p>Hi, I've been playing around with Lean and I'm running into issues with a theorem with this basic structure:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">list_test</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">True</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">induction</span> <span class=\"n\">l</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">nil</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">exact</span> <span class=\"n\">True.intro</span>\n  <span class=\"bp\">|</span> <span class=\"n\">cons</span> <span class=\"n\">head</span> <span class=\"n\">tail</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">have</span> <span class=\"n\">result</span> <span class=\"o\">:=</span> <span class=\"n\">list_test</span> <span class=\"n\">head</span> <span class=\"n\">tail</span>\n    <span class=\"n\">exact</span> <span class=\"n\">result</span>\n  <span class=\"n\">termination_by</span> <span class=\"n\">list_test</span> <span class=\"n\">n</span> <span class=\"n\">l</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">l.length</span>\n  <span class=\"n\">decreasing_by</span>\n    <span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">l</span> <span class=\"bp\">=</span> <span class=\"n\">head</span> <span class=\"o\">::</span> <span class=\"n\">tail</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n    <span class=\"n\">simp_wf</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>This seems like it should terminate since at the time of the recursive call the list <code>l</code> should be equal to <code>head :: tail</code>, but I can't tell how this fact could be proven. Where am I going wrong? Thanks!</p>",
        "id": 370985931,
        "sender_full_name": "Rekkyn",
        "timestamp": 1688096554
    },
    {
        "content": "<p>I think what you want is this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">list_test</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">True</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">induction</span> <span class=\"n\">l</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">nil</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">exact</span> <span class=\"n\">True.intro</span>\n  <span class=\"bp\">|</span> <span class=\"n\">cons</span> <span class=\"n\">head</span> <span class=\"n\">tail</span> <span class=\"n\">ih</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">exact</span> <span class=\"n\">ih</span>\n</code></pre></div>\n<p>That is, when using the <code>induction</code> tactic, the induction hypothesis (named <code>ih</code> in this example) is provided for the recursive constructors (<code>cons</code> in this case). </p>\n<p>If you want to define your proof recursively instead of using the <code>induction</code> tactic, the following would work:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">list_test</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">True</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">match</span> <span class=\"n\">l</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">nil</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">exact</span> <span class=\"n\">True.intro</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">cons</span> <span class=\"n\">head</span> <span class=\"n\">tail</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">have</span> <span class=\"n\">result</span> <span class=\"o\">:=</span> <span class=\"n\">list_test</span> <span class=\"n\">head</span> <span class=\"n\">tail</span>\n    <span class=\"n\">exact</span> <span class=\"n\">result</span>\n<span class=\"n\">termination_by</span> <span class=\"n\">list_test</span> <span class=\"n\">n</span> <span class=\"n\">l</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">l.length</span>\n<span class=\"n\">decreasing_by</span>\n  <span class=\"n\">simp_wf</span>\n  <span class=\"n\">apply</span> <span class=\"n\">Nat.lt_succ_self</span>\n</code></pre></div>\n<p>I'm not sure if there's a case where mixing recursion and <code>induction</code> makes sense.</p>",
        "id": 371127827,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1688127776
    },
    {
        "content": "<p>Cool thanks! Originally I needed both the induction hypotheses and a recursive call, but changing the <code>induction</code> to a <code>match</code> and adding a second recursive call worked</p>",
        "id": 371205525,
        "sender_full_name": "Rekkyn",
        "timestamp": 1688138621
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"628830\">Rekkyn</span> has marked this topic as resolved.</p>",
        "id": 371205546,
        "sender_full_name": "Notification Bot",
        "timestamp": 1688138625
    }
]