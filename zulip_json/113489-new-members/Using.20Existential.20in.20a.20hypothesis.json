[
    {
        "content": "<p>Hey, I come from a Coq background, and am not sure how to <code>destruct</code> an existential in a hypothesis.</p>\n<p>I tried <code>cases</code>, but then:</p>\n<ul>\n<li>I failed to name the variables. Like <code>cases tl with | Exists n hn =&gt;</code> doesn't work</li>\n<li>If I let it autogenerate variable names, I get <code>w✝</code> and <code>h✝</code>, which I can not refer to in code without a tokenization error</li>\n</ul>\n<p>I looked for a lot of docs, and asked GPT4, but can't find anything that helps. So as well as help, if you have pointers, that would be very nice</p>",
        "id": 401002372,
        "sender_full_name": "Gabriel Alfour",
        "timestamp": 1699468699
    },
    {
        "content": "<p>I usually use the <code>obtain</code> tactic (from std)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">False</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">hn</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">h</span>\n  <span class=\"c\">/-</span>\n<span class=\"cm\">  α : Type</span>\n<span class=\"cm\">  P : α → Bool</span>\n<span class=\"cm\">  p : ℕ → Prop</span>\n<span class=\"cm\">  n : ℕ</span>\n<span class=\"cm\">  hn : p n</span>\n<span class=\"cm\">  ⊢ False</span>\n<span class=\"cm\">  -/</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>Here are some other options:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">False</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">cases</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"bp\">|</span> <span class=\"n\">intro</span> <span class=\"n\">n</span> <span class=\"n\">hn</span> <span class=\"bp\">=&gt;</span> <span class=\"c1\">-- you need to know that the name of the constructor is `intro`</span>\n  <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">False</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">cases</span> <span class=\"n\">h</span>\n  <span class=\"n\">rename_i</span> <span class=\"n\">n</span> <span class=\"n\">hn</span>\n  <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">False</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">cases'</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"n\">n</span> <span class=\"n\">hn</span> <span class=\"c1\">-- mathlib tactic (like Lean 3 `cases`)</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 401003448,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1699469155
    },
    {
        "content": "<p>The recommended Mathlib style is <code>rcases h with ⟨n, hn⟩</code>.</p>",
        "id": 401003995,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1699469371
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/113488-general/topic/Using.20Existential.20in.20a.20hypothesis/near/401003448\">said</a>:</p>\n<blockquote>\n<p>Here are some other options:</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">False</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">cases</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"bp\">|</span> <span class=\"n\">intro</span> <span class=\"n\">n</span> <span class=\"n\">hn</span> <span class=\"bp\">=&gt;</span> <span class=\"c1\">-- you need to know that the name of the constructor is `intro`</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>The infoview shows the constructor name.</p>",
        "id": 401005108,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1699469837
    },
    {
        "content": "<p>Something I forget we can do now in Lean 4 is <code>let ⟨n, hn⟩ := h</code> in a tactic proof.</p>",
        "id": 401005329,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1699469910
    },
    {
        "content": "<p>Re constructor names, if you have std imported, then in VS Code if you put your cursor on the <code>cases</code> line you can see</p>\n<p><a href=\"/user_uploads/3121/QS13L09Ae8b2doDJAAf8lx01/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/QS13L09Ae8b2doDJAAf8lx01/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/QS13L09Ae8b2doDJAAf8lx01/image.png\"></a></div><p>Clicking that lightbulb shows an option</p>\n<p><a href=\"/user_uploads/3121/dxBZZeetLyyn71lgwIlNg_QN/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/dxBZZeetLyyn71lgwIlNg_QN/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/dxBZZeetLyyn71lgwIlNg_QN/image.png\"></a></div><p>and clicking that option yields</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"n\">cases</span> <span class=\"n\">h</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">intro</span> <span class=\"n\">w</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 401005685,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1699470042
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/113488-general/topic/Using.20Existential.20in.20a.20hypothesis/near/401005329\">said</a>:</p>\n<blockquote>\n<p>Something I forget we can do now in Lean 4 is <code>let ⟨n, hn⟩ := h</code> in a tactic proof.</p>\n</blockquote>\n<p>Also available is <code>have ⟨n, hn⟩ := h</code> (with subtly different effects), and both versions, <code>let</code> and <code>have</code>, work in term mode.<br>\nIn tactic mode, <code>intro</code> does most (but not all) of what <code>rintro</code> does, too. And in term mode, there is <code>fun ⟨n, hn⟩ =&gt; _</code>.</p>",
        "id": 401028969,
        "sender_full_name": "Richard Copley",
        "timestamp": 1699480234
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/113488-general/topic/Using.20Existential.20in.20a.20hypothesis/near/401003995\">said</a>:</p>\n<blockquote>\n<p>The recommended Mathlib style is <code>rcases h with ⟨n, hn⟩</code>.</p>\n</blockquote>\n<p>I really think we should discourage <code>rcases</code>. Its syntax is far from <code>have</code> and its name doesn't reflect the semantics as well as <code>obtain</code> does.</p>",
        "id": 401029621,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1699480543
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span> Thx a lot!</p>",
        "id": 401041130,
        "sender_full_name": "Gabriel Alfour",
        "timestamp": 1699486936
    },
    {
        "content": "<ul>\n<li>Is there a way to have this <code>let/have</code> destruct <code>h</code> at the same time?</li>\n<li>How can I make it so that on my own variants, I can destructure them in tactics mode with <code>let</code> / <code>have</code>?</li>\n<li>I tried to import <code>std</code> but it's not recognizes, and when I <code>open Std</code>, I don't get those suggestions</li>\n</ul>",
        "id": 401041500,
        "sender_full_name": "Gabriel Alfour",
        "timestamp": 1699487228
    },
    {
        "content": "<p>You can nest destructuring:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"bp\">∧</span> <span class=\"n\">q</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">False</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"o\">⟨</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">hp</span><span class=\"o\">,</span> <span class=\"n\">hq</span><span class=\"o\">⟩⟩</span> <span class=\"o\">:=</span> <span class=\"n\">h</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>And you can use that angle bracket notation is right associating:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"bp\">∧</span> <span class=\"n\">q</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">False</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"o\">⟨</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">hp</span><span class=\"o\">,</span> <span class=\"n\">hq</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">h</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 401044429,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1699488858
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"665332\">Gabriel Alfour</span> <a href=\"#narrow/stream/113488-general/topic/Using.20Existential.20in.20a.20hypothesis/near/401041500\">said</a>:</p>\n<blockquote>\n<ul>\n<li>How can I make it so that on my own variants, I can destructure them in tactics mode with <code>let</code> / <code>have</code>?</li>\n</ul>\n</blockquote>\n<p>By \"variant\" do you mean type? So long as your type has just one constructor you can use this angle bracket notation.</p>",
        "id": 401044522,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1699488907
    },
    {
        "content": "<p>Here's a working example with <code>obtain</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Std</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">False</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">hn</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">h</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 401044576,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1699488936
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span> I see, thx a lot!</p>",
        "id": 401044599,
        "sender_full_name": "Gabriel Alfour",
        "timestamp": 1699488950
    },
    {
        "content": "<p>There's still a part that I don't understand with <code>cases</code>: it only destructs variables. But if I have <code>f x</code> in an hypothesis, and I do <code>cases (f x)</code>, nothing happens (except creating as many identical goals as there are cases of the type of <code>f x</code>. But <code>f x</code> itself doesn't get rewritten</p>\n<p>Or possibly something equivalent to <code>case_eq</code>?</p>",
        "id": 401044868,
        "sender_full_name": "Gabriel Alfour",
        "timestamp": 1699489109
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>?</p>",
        "id": 401045191,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1699489297
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">False</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">cases</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"c1\">-- generates h : n + 1 = ... hypotheses in each case</span>\n</code></pre></div>",
        "id": 401045438,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1699489435
    },
    {
        "content": "<p>This topic was moved here from <a class=\"stream-topic\" data-stream-id=\"113488\" href=\"/#narrow/stream/113488-general/topic/Using.20Existential.20in.20a.20hypothesis\">#general &gt; Using Existential in a hypothesis</a> by <span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span>.</p>",
        "id": 401045729,
        "sender_full_name": "Notification Bot",
        "timestamp": 1699489598
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> I have just posted it in <a href=\"#narrow/stream/113489-new-members/topic/Add.20new.20goal.20and.20hypothesis.20at.20the.20same.20time/near/401046232\">https://leanprover.zulipchat.com/#narrow/stream/113489-new-members/topic/Add.20new.20goal.20and.20hypothesis.20at.20the.20same.20time/near/401046232</a></p>\n<p>It might make sense to merge the two threads? Not sure if that's possible</p>",
        "id": 401046559,
        "sender_full_name": "Gabriel Alfour",
        "timestamp": 1699490061
    }
]