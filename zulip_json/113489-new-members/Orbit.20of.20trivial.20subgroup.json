[
    {
        "content": "<p>Sorry, me again... I would like to prove that the trivial subgroup has singleton orbits, and tried</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">orbit_bot</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">mul_action.orbit</span> <span class=\"o\">(</span><span class=\"bp\">⊥</span> <span class=\"o\">:</span> <span class=\"n\">subgroup</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"o\">{</span><span class=\"n\">p</span><span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n  <span class=\"n\">ext1</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">mul_action.mem_orbit_iff</span><span class=\"o\">,</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">cases</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"n\">g</span> <span class=\"n\">g_to_x</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">g_to_x</span><span class=\"o\">,</span><span class=\"n\">set.mem_singleton_iff</span><span class=\"o\">],</span>\n    <span class=\"n\">cases</span> <span class=\"n\">g</span> <span class=\"k\">with</span> <span class=\"n\">_</span> <span class=\"n\">g_bot</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">g_one</span> <span class=\"o\">:=</span> <span class=\"n\">subgroup.mem_bot.mp</span> <span class=\"n\">g_bot</span><span class=\"o\">,</span>\n    <span class=\"gr\">sorry</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>  <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"n\">eq.trans</span> <span class=\"o\">(</span><span class=\"n\">one_smul</span> <span class=\"n\">_</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">set.mem_singleton_iff.mp</span> <span class=\"n\">h</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">⟩</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>but I'm stuck: I have an element <code>g : ↥⊥</code> and would like to conclude <code>g=1</code>, but the only thing I can do is <code>cases g</code> which gives me <code>g_val = 1</code>.  Any suggestion? I feel I'm screwing up with the different coercions...</p>",
        "id": 366258818,
        "sender_full_name": "Laurent Bartholdi",
        "timestamp": 1686764122
    },
    {
        "content": "<p>When you do <code>cases g</code>, <code>g</code> is not in your context anymore, right? It's been replaced by <code>\\&lt;g_val, some_proof_term\\&gt;</code> so <code>g_val = 1</code> is what you want.</p>",
        "id": 366263495,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1686765249
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span> Yes, exactly! I get <code>g_one : g_val = 1</code> but my goal is still <code>⟨g_val, g_bot⟩ • p = p</code>, and I can't rewrite <code>g_one</code> in it to invoke <code>one_smul</code></p>",
        "id": 366266612,
        "sender_full_name": "Laurent Bartholdi",
        "timestamp": 1686766018
    },
    {
        "content": "<p>What does <code>simp</code> do on the goal?</p>",
        "id": 366266694,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1686766039
    },
    {
        "content": "<p>nothing :(, just says it can't simplify</p>",
        "id": 366266780,
        "sender_full_name": "Laurent Bartholdi",
        "timestamp": 1686766066
    },
    {
        "content": "<p>Hmm, that's unfortunate. Can you add the lemma</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[simp, to_additive]</span> <span class=\"kd\">lemma</span> <span class=\"n\">subgroup.mk_smul</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">mul_action</span> <span class=\"n\">G</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n  <span class=\"o\">{</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">subgroup</span> <span class=\"n\">G</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hg</span> <span class=\"o\">:</span> <span class=\"n\">g</span> <span class=\"bp\">∈</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(⟨</span><span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"n\">hg</span><span class=\"o\">⟩</span> <span class=\"o\">:</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"bp\">•</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"bp\">•</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>\n<p>and try again?</p>",
        "id": 366267569,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1686766277
    },
    {
        "content": "<p>You're a goddess!</p>",
        "id": 366268030,
        "sender_full_name": "Laurent Bartholdi",
        "timestamp": 1686766399
    },
    {
        "content": "<p>No, i just come with a brain-inbuilt Lean compiler <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span></p>",
        "id": 366268177,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1686766437
    },
    {
        "content": "<p>Is this something that should be part of the main library?</p>",
        "id": 366268196,
        "sender_full_name": "Laurent Bartholdi",
        "timestamp": 1686766441
    },
    {
        "content": "<p>Definitely. It not being in mathlib is an oversight.</p>",
        "id": 366268339,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1686766462
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/subgroup.smul_def\">docs#subgroup.smul_def</a></p>",
        "id": 366343764,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1686794933
    },
    {
        "content": "<p>I think the lemma Yaël suggests above is not consistent with how we usually do subobject APIs</p>",
        "id": 366343940,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1686795031
    },
    {
        "content": "<p>I recommend you instead prove</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">orbit_bot</span> <span class=\"o\">[</span><span class=\"n\">subsingleton</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">mul_action.orbit</span> <span class=\"n\">G</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"o\">{</span><span class=\"n\">p</span><span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n  <span class=\"n\">ext1</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">mul_action.mem_orbit_iff</span><span class=\"o\">,</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>Which is more general than your statement</p>",
        "id": 366344337,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1686795267
    },
    {
        "content": "<p>Eric, are you claiming <code>subgroup.mk_smul</code> is a bad simp lemma? Why?</p>",
        "id": 366391580,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1686814933
    },
    {
        "content": "<p>If <code>subgroup.smul_def</code> were simp, I would understand, but it's not (and shouldn't be).</p>",
        "id": 366391957,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1686815030
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/113489-new-members/topic/Orbit.20of.20trivial.20subgroup/near/366391580\">said</a>:</p>\n<blockquote>\n<p>Eric, are you claiming <code>subgroup.mk_smul</code> is a bad simp lemma? Why?</p>\n</blockquote>\n<p>Yes, to be consistent with the fact we don't have <code>.mk_zero</code> or <code>.neg_mk</code> or <code>.mk_add_mk</code> or ...</p>",
        "id": 366402957,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1686817412
    },
    {
        "content": "<p>Also the <code>subtype.mk</code> term it uses isn't very well typed (there's no subgroup.subtype_mk); though lean 4 resolves that</p>",
        "id": 366403338,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1686817480
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/add_mem_class.mk_add_mk\">docs#add_mem_class.mk_add_mk</a> <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 366415124,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1686819841
    },
    {
        "content": "<p>Regardless of whether the lemmas you claim are missing, missing simp lemmas is not an argument against adding them!</p>",
        "id": 366415412,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1686819894
    },
    {
        "content": "<p>Missing families of simp lemmas are evidence that the simp set has not been constructed with those lemmas in mind, and introducing them without further analysis might make things less confluent</p>",
        "id": 366417178,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1686820263
    },
    {
        "content": "<p>But yes, given those exist I think the lemma you suggest is sensible after all</p>",
        "id": 366417266,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1686820287
    },
    {
        "content": "<p>I would guess you need to repeat it for every subobject? I don't think we generalized the smul instances to use <code>mul_mem_class</code>, though we certainly could after the port</p>",
        "id": 366417552,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1686820342
    },
    {
        "content": "<p>Yes, I suspect it will have to be subobject-specific for the time being.</p>",
        "id": 366421085,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1686821084
    }
]