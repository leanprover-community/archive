[
    {
        "content": "<p>I am trying to create a lazy-list like <code>[1..]</code> in Haskell. But the following does not seem to work:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">startFrom</span> <span class=\"o\">(</span><span class=\"n\">start</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">LazyList</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span>\n  <span class=\"n\">LazyList.cons</span> <span class=\"n\">start</span>  <span class=\"bp\">$</span> <span class=\"n\">Thunk.pure</span> <span class=\"o\">(</span><span class=\"n\">startFrom</span> <span class=\"o\">(</span><span class=\"n\">start</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span>\n</code></pre></div>\n<p>I see that there is an <code>LazyList.iterate</code> function, but it is marked as <code>unsafe</code>. Is there a non-unsafe way to represent lazy lists in Lean?</p>",
        "id": 397742507,
        "sender_full_name": "Agnishom Chattopadhyay",
        "timestamp": 1697818673
    },
    {
        "content": "<p>I'm also pretty new to Lean, but this is what I found out so far. There are ways to represent structures similar to lazy lists, but they all have significant drawbacks. </p>\n<p>First, there is <a href=\"https://leanprover-community.github.io/mathlib4_docs/Init/Data/Stream.html\"><code>Stream</code></a>, which is an efficient representation of infinite lazy lists, but there are barely any functions implemented for it, and it's a type class rather than a type. Second, there is also <a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/Data/Stream/Defs.html\"><code>Stream'</code></a>, which is a type and has many more helper functions and theorems, but it's only a theoretical model for proofing theorems and results in very inefficient computation. There is an <a href=\"https://github.com/leanprover-community/mathlib4/pull/7512\">open PR</a> which aims at making <code>Stream'</code> more efficient, so I'm hoping this is going to improve the situation significantly. Third, of course there is also <a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/Data/LazyList.html\"><code>LazyList</code></a>, which you have already seen.</p>\n<p>What I've done so far is to use <code>Stream</code> or a custom type very similar to it and implemented the functions I needed myself.</p>",
        "id": 398523586,
        "sender_full_name": "Markus Schmaus",
        "timestamp": 1698251555
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"130290\">@Agnishom Chattopadhyay</span> You're getting a \"failure to prove termination\" error there since the function does not terminate in the strong sense that Lean wants (imagine if it took an eager evaluation strategy and evaluated everything under <code>Thunk.pure</code> ahead of time).</p>\n<p>You can get it to work at runtime by using the <code>unsafe</code> modifier:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">unsafe</span> <span class=\"kd\">def</span> <span class=\"n\">startFrom</span> <span class=\"o\">(</span><span class=\"n\">start</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">LazyList</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span>\n  <span class=\"n\">LazyList.cons</span> <span class=\"n\">start</span> <span class=\"bp\">$</span> <span class=\"n\">Thunk.pure</span> <span class=\"o\">(</span><span class=\"n\">startFrom</span> <span class=\"o\">(</span><span class=\"n\">start</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span>\n</code></pre></div>\n<p>You won't be able to prove anything about the definition, but at least you can use it in programs.</p>",
        "id": 398525206,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1698252173
    },
    {
        "content": "<p>(You could give it the <code>partial</code> modifier, but I'm under the impression you should only use it if you know the definition generates valid values, but I'm not really sure. Infinite <code>LazyList</code>s are not valid values of the <code>LazyList</code> inductive type.)</p>",
        "id": 398525873,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1698252442
    },
    {
        "content": "<p>My understanding of the issue is that Lean has inductive types but no coinductive types, which is what you need to properly represent a LazyList. There are ways of simulating LazyLists with inductive types, but LazyList instead uses <code>unsafe</code> to circumvent the assumption that the lists are finite.</p>",
        "id": 398525947,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1698252476
    },
    {
        "content": "<p>So, there is no official way to represent co-inductive structures like Stream, right?</p>",
        "id": 398528370,
        "sender_full_name": "Agnishom Chattopadhyay",
        "timestamp": 1698253333
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"130290\">Agnishom Chattopadhyay</span> <a href=\"#narrow/stream/113489-new-members/topic/Haskell-like.20Lazy.20Lists.3F/near/398528370\">said</a>:</p>\n<blockquote>\n<p>So, there is no official way to represent co-inductive structures like Stream, right?</p>\n</blockquote>\n<p>I think that's right, but you may find <a href=\"https://github.com/alexkeizer/QpfTypes\">QpfTypes</a> useful.</p>",
        "id": 398560845,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1698267990
    },
    {
        "content": "<p>Quotients of Polynomial Functors? Do they mean \"Final Co-Algebras of Polynomial Functors\"?</p>",
        "id": 398572929,
        "sender_full_name": "Agnishom Chattopadhyay",
        "timestamp": 1698273574
    },
    {
        "content": "<p>Yes, and quotients of such final Co-Algebras. The thread <a href=\"#narrow/stream/287929-mathlib4/topic/.60Stream'.60.20is.20inefficient\">Stream' is inefficient</a> might be interesting to you. Based on this I don't think the QpfTypes library addresses the computational inefficiency.</p>",
        "id": 398613626,
        "sender_full_name": "Markus Schmaus",
        "timestamp": 1698297963
    },
    {
        "content": "<p>Oh, thanks! I like the quotation <code>I don't think you should be deciding \"should lean get coinductive types\" by a poll</code> haha</p>",
        "id": 398720466,
        "sender_full_name": "Agnishom Chattopadhyay",
        "timestamp": 1698335965
    }
]