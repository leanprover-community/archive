[
    {
        "content": "<p>Hello, I would like some help with the following.</p>\n<p>My goal is:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">⊢</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">formal_multilinear_series</span> <span class=\"n\">ℝ</span> <span class=\"n\">ℝ</span> <span class=\"n\">ℝ</span><span class=\"o\">),</span> <span class=\"n\">has_ftaylor_series_up_to_on</span> <span class=\"bp\">↑</span><span class=\"n\">m</span> <span class=\"n\">g</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">set.Icc</span> <span class=\"mi\">0</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>I want to give it a function p, which is the Taylor series of a function g.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">E</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">,</span>\n<span class=\"n\">x_star</span> <span class=\"o\">:</span> <span class=\"n\">E</span><span class=\"o\">,</span>\n<span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">,</span>\n<span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">E</span><span class=\"o\">,</span>\n<span class=\"n\">f'</span> <span class=\"o\">:</span> <span class=\"n\">E</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">E</span> <span class=\"bp\">→</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"n\">ℝ</span><span class=\"o\">]</span> <span class=\"n\">ℝ</span><span class=\"o\">),</span>\n<span class=\"n\">h_stationary</span> <span class=\"o\">:</span> <span class=\"n\">f'</span> <span class=\"n\">x_star</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n<span class=\"n\">h_deriv_exists</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">E</span><span class=\"o\">),</span> <span class=\"n\">y</span> <span class=\"bp\">∈</span> <span class=\"n\">u</span> <span class=\"bp\">→</span> <span class=\"n\">has_fderiv_at</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">f'</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n<span class=\"n\">h_twice_continuous_diffable</span> <span class=\"o\">:</span> <span class=\"n\">cont_diff_on</span> <span class=\"n\">ℝ</span> <span class=\"mi\">2</span> <span class=\"n\">f</span> <span class=\"n\">u</span><span class=\"o\">,</span>\n<span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">x_star</span> <span class=\"bp\">+</span> <span class=\"n\">α</span> <span class=\"bp\">•</span> <span class=\"n\">d</span><span class=\"o\">),</span>\n</code></pre></div>\n<p>I want to set p to be the taylor series of g upto order 1, i have tried:<br>\n<code>set p : ℝ → ℝ := λ α, (f (x_star)) + (matrix.dot_product (f' (x_star + (α • d))) d) with hp,</code> which gives an error.   Matrix_product isn't working for me as I am using bilinear maps (look at structure of f').</p>\n<p>I have also tried <code>use (taylor_within g 1 (set.Icc 0 α) 0),</code> and <code>use (taylor_within f 1 (segment ℝ x_star (x_star + (α • d))) x_star),</code>. Which both fail to instantiate goal such as:<br>\nfailed to instantiate goal with taylor_within f 1 (segment (frozen_name real) x_star ((frozen_name has_add.add) x_star ((frozen_name has_smul.smul) α d))) x_star</p>\n<p>I would appreciate some help in defining f  to be the taylor series of g upto order 1</p>",
        "id": 344710099,
        "sender_full_name": "Abu Al Hassan",
        "timestamp": 1679861124
    },
    {
        "content": "<p>Some context: I am currently trying to prove:<br>\n<code>cont_diff_on ℝ 1 g (set.Icc 0 α)</code> so later i can use theorem taylor_mean_remainder_lagrange on g.</p>",
        "id": 344710847,
        "sender_full_name": "Abu Al Hassan",
        "timestamp": 1679861527
    },
    {
        "content": "<p>Have you read <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>?</p>",
        "id": 344714007,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1679863649
    },
    {
        "content": "<p>I would guess that instead of <code>matrix.dot_product (f' (x_star + (α • d))) d)</code> you just want <code>f' (x_star + (α • d)) d</code></p>",
        "id": 344714047,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1679863675
    },
    {
        "content": "<p>The frechet derivative <code>f'</code> in a sense \"includes the dot product\" you'd write when using <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi><mo>⋅</mo><mi mathvariant=\"normal\">∇</mi><mi>f</mi></mrow><annotation encoding=\"application/x-tex\"> a \\cdot \\nabla f</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4445em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">⋅</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord\">∇</span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span></span></span></span></p>",
        "id": 344714116,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1679863704
    },
    {
        "content": "<p>Hi Eric, thank you, that worked. Sorry for the late reply, I realised I needed to make <code>p: ℝ → formal_multilinear_series ℝ ℝ ℝ</code> so went off on quite a journey figuring out the way of my proof.</p>",
        "id": 345080586,
        "sender_full_name": "Abu Al Hassan",
        "timestamp": 1679997662
    }
]