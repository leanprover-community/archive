[
    {
        "content": "<p>Hi All, <br>\nI started playing with Lean and, in particular, with the <strong>Natural Number Game|Advanced Addition World|Level 8</strong> and I got puzzled with the following:<br>\nThe goal is to prove </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">eq_zero_of_add_right_eq_self</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">mynat</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n</code></pre></div>\n<p>and after typing</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">add_zero</span> <span class=\"n\">a</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">add_assoc</span> <span class=\"n\">a</span> <span class=\"mi\">0</span> <span class=\"n\">b</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">zero_add</span> <span class=\"n\">b</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">add_left_cancel</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n</code></pre></div>\n<p>I see </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">mynat</span><span class=\"o\">,</span>\n<span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">0</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n</code></pre></div>\n<p>so I expect that typing</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">rw</span> <span class=\"n\">add_left_cancel</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"mi\">0</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n</code></pre></div>\n<p>to see </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">mynat</span><span class=\"o\">,</span>\n<span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n</code></pre></div>\n<p>but instead I obtain</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"mi\">2</span> <span class=\"n\">goals</span>\n<span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">mynat</span><span class=\"o\">,</span>\n<span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">0</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n\n<span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">mynat</span><span class=\"o\">,</span>\n<span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">0</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">0</span>\n</code></pre></div>\n<p>How is this possible? I don't fully understand the output...</p>",
        "id": 329806750,
        "sender_full_name": "J F",
        "timestamp": 1677181984
    },
    {
        "content": "<p>What do you mean by comma before <code>at</code> in your boldface example?</p>",
        "id": 329806935,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1677182058
    },
    {
        "content": "<p>The syntax is <code>rw add_left_cancel a b 0 at h</code> without comma</p>",
        "id": 329806950,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1677182064
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"111080\">Floris van Doorn</span> <a href=\"#narrow/stream/113489-new-members/topic/Newbie.20question.20about.20Natural.20Number.20Game.20.7C.20Advance.20Addition/near/329806950\">said</a>:</p>\n<blockquote>\n<p>The syntax is <code>rw add_left_cancel a b 0 at h</code> without comma</p>\n</blockquote>\n<p>Sorry, I misswrote it with the comma. The comma should go at the end, I agree.</p>",
        "id": 329807401,
        "sender_full_name": "J F",
        "timestamp": 1677182236
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"417654\">Martin Dvořák</span> <a href=\"#narrow/stream/113489-new-members/topic/Newbie.20question.20about.20Natural.20Number.20Game.20.7C.20Advance.20Addition/near/329806935\">said</a>:</p>\n<blockquote>\n<p>What do you mean by comma before <code>at</code> in your boldface example?</p>\n</blockquote>\n<p>I edited the text and wrote correctly the comma</p>",
        "id": 329807591,
        "sender_full_name": "J F",
        "timestamp": 1677182300
    },
    {
        "content": "<p>BTW try using three backticks instead of two asterisks.</p>",
        "id": 329808573,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1677182607
    },
    {
        "content": "<p>Back to the original question: It's really weird that the second goal appears.</p>",
        "id": 329808957,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1677182724
    },
    {
        "content": "<p>You should be able to make progress with <code>apply add_left_cancel</code> or finish the proof with <code>exact add_left_cancel h</code>.</p>",
        "id": 329808982,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1677182732
    },
    {
        "content": "<p>Oh <code>add_left_cancel</code> is an implication.</p>",
        "id": 329809238,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1677182849
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"417654\">Martin Dvořák</span> <a href=\"#narrow/stream/113489-new-members/topic/Newbie.20question.20about.20Natural.20Number.20Game.20.7C.20Advance.20Addition/near/329808573\">said</a>:</p>\n<blockquote>\n<p>BTW try using three backticks instead of two asterisks.</p>\n</blockquote>\n<p>You can edit your post above <span class=\"user-mention\" data-user-id=\"591775\">@J F</span>; <a href=\"https://github.com/leanprover-community/mathlib/wiki/Code-in-backticks\">#backticks</a> is a good resource here</p>",
        "id": 329809519,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1677182969
    },
    {
        "content": "<p>Since you already found the correct arguments for the correct lemma, you can directly close the goal by <code>exact add_left_cancel a b 0 h,</code> and that's all.</p>",
        "id": 329809649,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1677183013
    },
    {
        "content": "<p>Yeah this looks like correct behaviour. If you rewrite with P -&gt; Q instead of applying it then lean usually just gives an error, but if Q is of the form X=Y then it will replace X's by Ys and add P as a new goal.</p>",
        "id": 336354839,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1677191248
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"591775\">J F</span> has marked this topic as resolved.</p>",
        "id": 336507675,
        "sender_full_name": "Notification Bot",
        "timestamp": 1677251403
    }
]