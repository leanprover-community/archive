[
    {
        "content": "<p>Hi. The functional equation f(x + y) = f(x) + f(y) is known as Cauchy's Functional Equation, and it is known that while all such functions f : Q -&gt; Q must be in the form f(x) = cx, this is not the case for real functions assuming the axiom of choice, since every vector space has a basis that way, and R can be viewed as a vector space over Q, and we can for example map f(q * sqrt(2)) = 0, and f(x) = x otherwise. I have formalised this as follows:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">f</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">f</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>My questions are:</p>\n<ol>\n<li>How should I construct such a function? In particular, it would be nice to follow the argument above as closely, first \"viewing R as a field over Q\", then \"picking a basis (via choice)\", then of course constructing the function and proving it fits the requirements</li>\n<li>Is there any way that does not follow ^ but also proves the result?<br>\nThanks in advance</li>\n</ol>",
        "id": 325055970,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1675217239
    },
    {
        "content": "<p>Here's the Q version by the way: <a href=\"https://github.com/grhkm21/lean/blob/master/sketch/cauchy.lean#L6\">https://github.com/grhkm21/lean/blob/master/sketch/cauchy.lean#L6</a></p>",
        "id": 325056131,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1675217378
    },
    {
        "content": "<p>Here is an attempt at defining f 2, but of course 2 can be replaced by any real number. How should I map the \"indexing set\" along with the coordinates to a function, and then \"sum over the infinite set\", where only finitely coordinates are non-zero, though not sure if that is included as part of the definition?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">true</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">let</span> <span class=\"n\">real_basis</span> <span class=\"o\">:=</span> <span class=\"n\">basis.of_vector_space</span> <span class=\"n\">ℚ</span> <span class=\"n\">ℝ</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">real_repr</span> <span class=\"o\">:=</span> <span class=\"n\">real_basis.repr</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- two_repr is the coordinates of 2 over Q</span>\n  <span class=\"k\">let</span> <span class=\"n\">two_repr</span> <span class=\"o\">:=</span> <span class=\"n\">real_repr</span> <span class=\"mi\">2</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- how should i define f 2 from here</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 325059274,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1675219760
    },
    {
        "content": "<p>Nevermind, I think I am very close to doing it. I will try a bit more.</p>",
        "id": 325067744,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1675226623
    },
    {
        "content": "<p>Can't wait to share my solution though <span aria-label=\"joy\" class=\"emoji emoji-1f602\" role=\"img\" title=\"joy\">:joy:</span> It's interesting to read the type definitions and try to figure out how they work and what I have to place my arguments. Learning quite a lot</p>",
        "id": 325067798,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1675226653
    },
    {
        "content": "<p>Here is my current code:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">true</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">let</span> <span class=\"n\">real_basis</span> <span class=\"o\">:=</span> <span class=\"n\">basis.of_vector_space</span> <span class=\"n\">ℚ</span> <span class=\"n\">ℝ</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">real_index_set</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span> <span class=\"n\">basis.of_vector_space_index</span> <span class=\"n\">ℚ</span> <span class=\"n\">ℝ</span><span class=\"o\">,</span>\n\n  <span class=\"c1\">-- we prove that the set is nonempty</span>\n  <span class=\"k\">have</span> <span class=\"n\">real_index_set_nonempty</span> <span class=\"o\">:</span> <span class=\"n\">real_index_set.nonempty</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">set.nonempty_coe_sort</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">real_basis.index_nonempty</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"k\">let</span> <span class=\"n\">real_basis_vec₁</span> <span class=\"o\">:=</span> <span class=\"n\">set.nonempty.some</span> <span class=\"n\">real_index_set_nonempty</span><span class=\"o\">,</span>\n\n  <span class=\"c1\">-- we prove that the set is infinite</span>\n  <span class=\"k\">have</span> <span class=\"n\">real_index_set_infinite</span> <span class=\"o\">:</span> <span class=\"n\">real_index_set.infinite</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n\n  <span class=\"c1\">-- then we can choose some basis vectors</span>\n  <span class=\"k\">let</span> <span class=\"n\">real_index_nat_embedding</span> <span class=\"o\">:=</span> <span class=\"n\">set.infinite.nat_embedding</span> <span class=\"n\">real_index_set</span> <span class=\"n\">real_index_set_infinite</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">real_basis_vec₀</span> <span class=\"o\">:=</span> <span class=\"n\">real_index_nat_embedding</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">real_basis_vec₁</span> <span class=\"o\">:=</span> <span class=\"n\">real_index_nat_embedding</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n\n  <span class=\"c1\">-- they are not equal</span>\n  <span class=\"k\">have</span> <span class=\"n\">real_basis_vec₀_ne_real_basis_vec₁</span><span class=\"o\">:</span> <span class=\"n\">real_basis_vec₀</span> <span class=\"bp\">≠</span> <span class=\"n\">real_basis_vec₁</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span>\n    <span class=\"n\">by_contradiction</span><span class=\"o\">,</span>\n    <span class=\"n\">linarith</span> <span class=\"o\">[</span><span class=\"n\">real_index_nat_embedding.injective</span> <span class=\"n\">h</span><span class=\"o\">],</span>\n  <span class=\"o\">},</span>\n\n  <span class=\"k\">let</span> <span class=\"n\">f_map</span> <span class=\"o\">:</span> <span class=\"n\">real_index_set</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">index</span><span class=\"o\">,</span>\n  <span class=\"k\">if</span> <span class=\"n\">index</span> <span class=\"bp\">=</span> <span class=\"n\">real_basis_vec₀</span>\n  <span class=\"k\">then</span>\n    <span class=\"n\">real_basis</span> <span class=\"n\">real_basis_vec₁</span>\n  <span class=\"k\">else</span>\n    <span class=\"n\">real_basis</span> <span class=\"n\">real_basis_vec₀</span><span class=\"o\">,</span>\n\n  <span class=\"k\">let</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span> <span class=\"n\">real_basis.constr</span> <span class=\"n\">ℝ</span> <span class=\"n\">f_map</span><span class=\"o\">,</span>\n\n  <span class=\"c1\">-- now we verify that the two basis vectors map to different values</span>\n  <span class=\"k\">let</span> <span class=\"n\">x₀</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span> <span class=\"n\">real_basis</span> <span class=\"n\">real_basis_vec₀</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">x₁</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span> <span class=\"n\">real_basis</span> <span class=\"n\">real_basis_vec₁</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">x₀</span> <span class=\"bp\">≠</span> <span class=\"n\">f</span> <span class=\"n\">x₁</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">x₀</span><span class=\"o\">,</span> <span class=\"n\">x₁</span><span class=\"o\">],</span>\n    <span class=\"n\">dsimp</span> <span class=\"o\">[</span><span class=\"n\">basis.constr</span><span class=\"o\">],</span>\n    <span class=\"c1\">-- simp only [f, basis.constr, x₀, x₁],</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">basis.repr_self</span><span class=\"o\">,</span> <span class=\"n\">finsupp.map_domain_single</span><span class=\"o\">,</span> <span class=\"n\">finsupp.total_single</span><span class=\"o\">,</span> <span class=\"n\">one_smul</span><span class=\"o\">,</span> <span class=\"n\">id</span><span class=\"o\">,</span>\n               <span class=\"n\">f_map</span><span class=\"o\">],</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">set_coe.ext_iff</span><span class=\"o\">],</span>\n  <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>It constructs the hamel basis of R over Q, then picks two basis vectors v1 and v2, and constructs a linear map that maps v1 -&gt; v2 and every other basis vector to v1. Obviously this does not solve the cauchy's functional equation, but at least it manipulates with the basis vectors itself. Any feedback would be great! In particular, how to fill in the hole with proving that the dimension is infinite?</p>",
        "id": 325069879,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1675228429
    },
    {
        "content": "<p>I can use the typical proof that if x is transcendental, then 1, x, x^2, ... are linearly independent? And so a basis must be infinite</p>",
        "id": 325070038,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1675228584
    },
    {
        "content": "<p>You can look at <a href=\"https://github.com/leanprover-community/mathlib/pull/12933\">#12933</a> to get inspiration.</p>",
        "id": 325077557,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1675233665
    },
    {
        "content": "<p>Note that for the ℚ version we have <a href=\"https://leanprover-community.github.io/mathlib_docs/find/add_monoid_hom.to_rat_linear_map\">docs#add_monoid_hom.to_rat_linear_map</a> which essentially captures the result</p>",
        "id": 325089290,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1675238844
    },
    {
        "content": "<p>I swear I searched for “Cauchy.+functional” but got no results… Thank you both once again!</p>",
        "id": 325192569,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1675266083
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/113489-new-members/topic/Cauchy's.20Functional.20Equation.20over.20R/near/325077557\">said</a>:</p>\n<blockquote>\n<p>You can look at <a href=\"https://github.com/leanprover-community/mathlib/pull/12933\">#12933</a> to get inspiration.</p>\n</blockquote>\n<p>It seems that this PR proves a lot of \"assuming ..., then it's linear\", of which there are like 10+ of them <a href=\"https://math.stackexchange.com/a/423494/948125\">here</a>, but seems to be slightly different from what I am doing, which is constructing a counterexample with no assumptions.</p>",
        "id": 325228842,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1675274112
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113489-new-members/topic/Cauchy's.20Functional.20Equation.20over.20R/near/325089290\">said</a>:</p>\n<blockquote>\n<p>Note that for the ℚ version we have <a href=\"https://leanprover-community.github.io/mathlib_docs/find/add_monoid_hom.to_rat_linear_map\">docs#add_monoid_hom.to_rat_linear_map</a> which essentially captures the result</p>\n</blockquote>\n<p>I found the <code>add_monoid_hom</code> structure, and I guess I should turn <code>f : \\Q \\to \\Q</code> to <code>f' : \\Q \\to+ \\Q</code>, which is the structure. Do you mind explaining how I should create an instance of this structure thing? I am not too familiar with the syntax</p>",
        "id": 325229960,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1675274409
    },
    {
        "content": "<p>Docs: <a href=\"https://leanprover-community.github.io/mathlib_docs/algebra/hom/group.html#add_monoid_hom\">https://leanprover-community.github.io/mathlib_docs/algebra/hom/group.html#add_monoid_hom</a></p>",
        "id": 325230026,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1675274424
    },
    {
        "content": "<p>Nevermind!</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span> <span class=\"bp\">→</span> <span class=\"n\">ℚ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">f</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">f</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"c1\">-- setup f as linear_map from ℚ to ℚ</span>\n  <span class=\"k\">have</span> <span class=\"n\">map_zero</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">specialize</span> <span class=\"n\">h</span> <span class=\"mi\">0</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"k\">let</span> <span class=\"n\">f_lin</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span> <span class=\"bp\">→+</span> <span class=\"n\">ℚ</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">map_zero'</span> <span class=\"o\">:=</span> <span class=\"n\">map_zero</span><span class=\"o\">,</span> <span class=\"n\">map_add'</span> <span class=\"o\">:=</span> <span class=\"n\">h</span> <span class=\"o\">},</span>\n  <span class=\"k\">let</span> <span class=\"n\">f_hom</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">ℚ</span><span class=\"o\">]</span> <span class=\"n\">ℚ</span> <span class=\"o\">:=</span> <span class=\"n\">add_monoid_hom.to_rat_linear_map</span> <span class=\"n\">f_lin</span><span class=\"o\">,</span>\n\n  <span class=\"c1\">-- the rest is straightforward</span>\n  <span class=\"n\">intro</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"o\">:=</span> <span class=\"n\">f_hom.map_smul'</span> <span class=\"n\">x</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 325232056,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1675274903
    },
    {
        "content": "<p>\"simp at this, exact this\" can also be spelled as \"simpa using this\"</p>",
        "id": 325241718,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1675277473
    },
    {
        "content": "<p>And likely to be faster</p>",
        "id": 325241771,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1675277484
    },
    {
        "content": "<p>Similarly, your map_zero tactic proof can be \"simpa using h 0 0\"</p>",
        "id": 325241849,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1675277510
    },
    {
        "content": "<p>Thank you! I tried <code>simpa at this</code> but didn't work :P</p>",
        "id": 325243550,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1675277934
    },
    {
        "content": "<p>Speaking of speed, do you know why <code>dsimp</code> seems to be a lot slower compared to <code>simp only</code> or other <code>simp</code>? Is that some known problem or just my use case? (I can make a minimal code real quick)</p>",
        "id": 325243730,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1675277988
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/add_monoid_hom.mk'\">docs#add_monoid_hom.mk'</a> will save you from having to prove <code>map_zero</code></p>",
        "id": 325243765,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1675278000
    },
    {
        "content": "<p>Now it's just</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- Quicker proof</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span> <span class=\"bp\">→</span> <span class=\"n\">ℚ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">f</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">f</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"c1\">-- Setup f as linear_map from ℚ to ℚ</span>\n  <span class=\"k\">let</span> <span class=\"n\">f_lin</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span> <span class=\"bp\">→+</span> <span class=\"n\">ℚ</span> <span class=\"o\">:=</span> <span class=\"n\">add_monoid_hom.mk'</span> <span class=\"n\">f</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">f_hom</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">ℚ</span><span class=\"o\">]</span> <span class=\"n\">ℚ</span> <span class=\"o\">:=</span> <span class=\"n\">add_monoid_hom.to_rat_linear_map</span> <span class=\"n\">f_lin</span><span class=\"o\">,</span>\n\n  <span class=\"c1\">-- The rest is straightforward</span>\n  <span class=\"n\">intro</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"n\">simpa</span> <span class=\"n\">using</span> <span class=\"n\">f_hom.map_smul'</span> <span class=\"n\">x</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p><span aria-label=\"thumbs up\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"thumbs up\">:thumbs_up:</span></p>",
        "id": 325244972,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1675278337
    }
]