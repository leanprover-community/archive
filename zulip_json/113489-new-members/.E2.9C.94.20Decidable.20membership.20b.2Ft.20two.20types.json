[
    {
        "content": "<p>How can membership between two types be declared decidable? I checked out <code>decidable_mem</code> but that doesn't seem to be what I want. Below I want something like <code>[decidable_mem P L]</code>.</p>\n<p><a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">combinatorics.configuration</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">configuration.has_lines</span>\n<span class=\"kn\">open</span> <span class=\"n\">configuration.has_points</span>\n<span class=\"kn\">open</span> <span class=\"n\">configuration.nondegenerate</span>\n<span class=\"kn\">open</span> <span class=\"n\">classical</span>\n<span class=\"kn\">open</span> <span class=\"n\">set</span>\n\n<span class=\"kd\">universe</span> <span class=\"n\">u</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">P</span> <span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">has_mem</span> <span class=\"n\">P</span> <span class=\"n\">L</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">configuration.has_lines</span> <span class=\"n\">P</span> <span class=\"n\">L</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">configuration.has_points</span> <span class=\"n\">P</span> <span class=\"n\">L</span><span class=\"o\">]</span>\n <span class=\"o\">[</span><span class=\"n\">nontrivial</span> <span class=\"n\">P</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">nontrivial</span> <span class=\"n\">L</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">P</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">L</span><span class=\"o\">]</span>\n\n<span class=\"kd\">variable</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">P</span>\n<span class=\"kd\">variable</span> <span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">L</span>\n<span class=\"k\">#check</span> <span class=\"k\">if</span> <span class=\"n\">p</span> <span class=\"bp\">∈</span> <span class=\"n\">l</span> <span class=\"k\">then</span> <span class=\"n\">tt</span>  <span class=\"c1\">--this throws the error below</span>\n</code></pre></div>\n<p>The <code>if</code> above throws the following error, which is why I need the decidability of membership.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"n\">type</span> <span class=\"kd\">class</span> <span class=\"kd\">instance</span> <span class=\"n\">for</span>\n<span class=\"n\">P</span> <span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">,</span>\n<span class=\"n\">_inst_1</span> <span class=\"o\">:</span> <span class=\"n\">has_mem</span> <span class=\"n\">P</span> <span class=\"n\">L</span><span class=\"o\">,</span>\n<span class=\"n\">_inst_2</span> <span class=\"o\">:</span> <span class=\"n\">configuration.has_lines</span> <span class=\"n\">P</span> <span class=\"n\">L</span><span class=\"o\">,</span>\n<span class=\"n\">_inst_3</span> <span class=\"o\">:</span> <span class=\"n\">configuration.has_points</span> <span class=\"n\">P</span> <span class=\"n\">L</span><span class=\"o\">,</span>\n<span class=\"n\">_inst_4</span> <span class=\"o\">:</span> <span class=\"n\">nontrivial</span> <span class=\"n\">P</span><span class=\"o\">,</span>\n<span class=\"n\">_inst_5</span> <span class=\"o\">:</span> <span class=\"n\">nontrivial</span> <span class=\"n\">L</span><span class=\"o\">,</span>\n<span class=\"n\">_inst_6</span> <span class=\"o\">:</span> <span class=\"n\">decidable_eq</span> <span class=\"n\">P</span><span class=\"o\">,</span>\n<span class=\"n\">_inst_7</span> <span class=\"o\">:</span> <span class=\"n\">decidable_eq</span> <span class=\"n\">L</span><span class=\"o\">,</span>\n<span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">P</span><span class=\"o\">,</span>\n<span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">L</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">decidable</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∈</span> <span class=\"n\">l</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 343016211,
        "sender_full_name": "Quinn Culver",
        "timestamp": 1679281281
    },
    {
        "content": "<p>Just add what lean can't find as an assumption in square brackets</p>",
        "id": 343040551,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1679296982
    },
    {
        "content": "<p>Thanks. I don't see (and cannot figure out) <em>where</em> to add the square-bracketed assumption.</p>",
        "id": 343154757,
        "sender_full_name": "Quinn Culver",
        "timestamp": 1679326493
    },
    {
        "content": "<p>On a <code>variables</code> line with all the other assumptions?</p>",
        "id": 343155557,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1679326667
    },
    {
        "content": "<p>Okay I see. I think my mwe wasn't representative of the actual situation. Is it possible to make all instances of <code>p \\in l</code> decidable; i.e. is it possible to make the membership relation b/t the the types <code>P</code> and <code>L</code> decidable?</p>",
        "id": 343157310,
        "sender_full_name": "Quinn Culver",
        "timestamp": 1679327042
    },
    {
        "content": "<p>Here's a real mwe. Its in the <code>if p ∈ l</code> that's causing problems. I've tried putting <code>[decidable p ∈ l]</code> on that line in a few places, to no avail.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">combinatorics.configuration</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">configuration.has_lines</span>\n<span class=\"kn\">open</span> <span class=\"n\">configuration.has_points</span>\n\n<span class=\"kd\">universe</span> <span class=\"n\">u</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">P</span> <span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">has_mem</span> <span class=\"n\">P</span> <span class=\"n\">L</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">configuration.has_lines</span> <span class=\"n\">P</span> <span class=\"n\">L</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">configuration.has_points</span> <span class=\"n\">P</span> <span class=\"n\">L</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">nontrivial</span> <span class=\"n\">P</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">nontrivial</span> <span class=\"n\">L</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">P</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">L</span><span class=\"o\">]</span>\n\n\n<span class=\"kd\">inductive</span> <span class=\"n\">flats_lattice</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"n\">L</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">points</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">flats_lattice</span>\n<span class=\"bp\">|</span> <span class=\"n\">lines</span>  <span class=\"o\">(</span><span class=\"n\">l</span><span class=\"o\">:</span> <span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">flats_lattice</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">flats_lattice</span>\n<span class=\"kd\">def</span> <span class=\"n\">meet</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">flats_lattice</span> <span class=\"n\">P</span> <span class=\"n\">L</span><span class=\"o\">),</span> <span class=\"n\">flats_lattice</span> <span class=\"n\">P</span> <span class=\"n\">L</span>\n<span class=\"bp\">|</span>  <span class=\"o\">(</span><span class=\"n\">points</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">lines</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">:=</span>  <span class=\"k\">if</span> <span class=\"n\">p</span> <span class=\"bp\">∈</span> <span class=\"n\">l</span> <span class=\"k\">then</span> <span class=\"gr\">sorry</span> <span class=\"c1\">--need decidability here</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">points</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">points</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">lines</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">lines</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">lines</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">points</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 343159305,
        "sender_full_name": "Quinn Culver",
        "timestamp": 1679327488
    },
    {
        "content": "<p><code>[decidable p ∈ l]</code> isn't semantically correct, it'd be <code>[decidable (p ∈ l)]</code>. The error messages probably were saying that there's no <code>`has_mem Type L</code> instance, right?</p>\n<p>Secondly, <code>p</code> and <code>l</code> need to be bound somehow. You can write <code>[∀ (p : P) (l : L), decidable (p ∈ l)]</code>. (Technically <code>[Π (p : P) (l : L), decidable (p ∈ l)]</code> is more correct, but it means exactly the same thing.)</p>",
        "id": 343161189,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1679327912
    },
    {
        "content": "<p>Third, to <a href=\"https://en.wikipedia.org/wiki/XY_problem\">#xy</a> this, are you wanting things to be decidable because you personally want them to be decidable? or are you trying to appease Lean?</p>\n<p>If it's the latter, you can use <code>noncomputable theory</code> and <code>open_locale classical</code>. The first allows definitions to be <code>noncomputable</code> without you needing to mark them yourself. The second introduces all the classical <code>decidable</code> instances, which exist classically but which are not computable.</p>",
        "id": 343161810,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1679328072
    },
    {
        "content": "<p>It was indeed an xy problem. Your suggestions worked. Thanks so much!</p>",
        "id": 343165712,
        "sender_full_name": "Quinn Culver",
        "timestamp": 1679329038
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"245476\">Quinn Culver</span> has marked this topic as resolved.</p>",
        "id": 343165755,
        "sender_full_name": "Notification Bot",
        "timestamp": 1679329049
    },
    {
        "content": "<p>Just note that this isn't a perfect solution and you might run into some issues down the line from non-defeq decidable instances, but those are solvable.</p>",
        "id": 343166561,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1679329234
    },
    {
        "content": "<p>Does adding <code>noncomputable</code> or  <code>open_locale classical</code> mean I should/could remove <code>[decidable_eq P]</code>?</p>",
        "id": 343168300,
        "sender_full_name": "Quinn Culver",
        "timestamp": 1679329630
    },
    {
        "content": "<p>Yes, the <code>open_locale classical</code> gives you <code>[decidable X]</code> for all <code>X</code>.</p>",
        "id": 343169108,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1679329813
    },
    {
        "content": "<p>I would argue that you really do want to write <code>[Π (p : P) (l : L), decidable (p ∈ l)]</code> (or the shorthand <code>[decidable_rel ((∈) : P \\r L \\r Prop)]</code>), because then you can play around with <code>#eval</code> on a toy definition where you enumerate all the points and lines explicitly</p>",
        "id": 343171408,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1679330363
    },
    {
        "content": "<p>I'll stick with <span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span>'s suggestion for now, but will keep that in mind, <span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span>, in case I want to play around with toy definitions later.</p>",
        "id": 343187327,
        "sender_full_name": "Quinn Culver",
        "timestamp": 1679334426
    }
]