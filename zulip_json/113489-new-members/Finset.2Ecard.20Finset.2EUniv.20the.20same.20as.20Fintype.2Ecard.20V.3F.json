[
    {
        "content": "<p>(I'm new to lean so I apologize if this question is basic)<br>\nAt the top of my file I declare </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">V</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>Then at the end of a proof I need the following fact </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Finset.card</span> <span class=\"n\">Finset.Univ</span> <span class=\"bp\">=</span> <span class=\"n\">Fintype.card</span> <span class=\"n\">V</span>\n</code></pre></div>\n<p>I.e. the above is given as the goal in the infoview. This seems easy to prove, but I can't write it down. I get an error when writing </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">Finset.card</span> <span class=\"n\">Finset.Univ</span> <span class=\"bp\">=</span> <span class=\"n\">Fintype.card</span> <span class=\"n\">V</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>Lean gives an error (\"typeclass instance problem is stuck\") when writing out the above line. It seems like Finset.Univ requires a Fintype as input, and then produces the universal set. However, when I pass V as input to Finset.Univ an error is also given (\"function expected at Finset.Univ\"). So I can't yet write down the statement.  The second issue is that refl doesn't work to solve this goal, despite the fact that it seems true by definition.</p>",
        "id": 404482000,
        "sender_full_name": "George King",
        "timestamp": 1701115637
    },
    {
        "content": "<p>With <code>Fintype.univ</code>, you can give it an expected type as a hint, like <code>(Fintype.univ : Finset V)</code></p>",
        "id": 404482212,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1701115748
    },
    {
        "content": "<p>This topic was moved here from <a class=\"stream-topic\" data-stream-id=\"270676\" href=\"/#narrow/stream/270676-lean4/topic/Finset.2Ecard.20Finset.2EUniv.20the.20same.20as.20Fintype.2Ecard.20V.3F\">#lean4 &gt; Finset.card Finset.Univ the same as Fintype.card V?</a> by <span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span>.</p>",
        "id": 404482239,
        "sender_full_name": "Notification Bot",
        "timestamp": 1701115765
    },
    {
        "content": "<p>(<span class=\"user-mention\" data-user-id=\"657437\">@George King</span> This is a fine question. I just moved it over here to \"new members\")</p>",
        "id": 404482274,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1701115785
    },
    {
        "content": "<p>This fact must be in mathlib already -- you can use the <code>exact?</code> tactic to try to search for it, if your goal is that fact.</p>",
        "id": 404482450,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1701115864
    },
    {
        "content": "<p>Thanks, a type annotation fixed it</p>",
        "id": 404482486,
        "sender_full_name": "George King",
        "timestamp": 1701115885
    },
    {
        "content": "<p>This is actually the definition of <code>Fintype.card</code>, and you can use <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Finset.card_univ#doc\">docs#Finset.card_univ</a></p>",
        "id": 404482584,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1701115927
    }
]