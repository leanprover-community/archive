[
    {
        "content": "<p>Hi! I have been looking at tactics for a while now (approximately an hour), and here is what I am trying to do: I am writing a tactic that proves an integer is even! So exciting. The idea is to try each integer one by one, from 0, 1, 2, ... Here's my attempt:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.stream.defs</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.bool.all_any</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.lazy_list</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">expr</span> <span class=\"n\">tactic</span> <span class=\"n\">widget</span>\n\n<span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">prove_even_aux</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"k\">do</span> <span class=\"o\">{</span>\n     <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">even</span> <span class=\"bp\">%%</span><span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">target</span><span class=\"o\">,</span>\n     <span class=\"n\">tp</span> <span class=\"bp\">←</span> <span class=\"n\">infer_type</span> <span class=\"n\">p</span><span class=\"o\">,</span>\n     <span class=\"n\">guard</span> <span class=\"o\">(</span><span class=\"n\">tp</span> <span class=\"bp\">=</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">ℕ</span><span class=\"o\">)),</span>\n     <span class=\"n\">to_expr</span> <span class=\"bp\">``</span><span class=\"o\">(</span><span class=\"bp\">%%</span><span class=\"o\">(</span><span class=\"n\">reflect</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"n\">existsi</span><span class=\"o\">,</span>\n     <span class=\"n\">exact_dec_trivial</span>\n   <span class=\"o\">}</span>\n   <span class=\"c1\">--  &lt;|&gt; fail \"???\"</span>\n   <span class=\"bp\">&lt;|&gt;</span> <span class=\"n\">prove_even_aux</span> <span class=\"n\">n.succ</span>\n\n<span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">prove_even</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span> <span class=\"n\">prove_even_aux</span> <span class=\"mi\">0</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">even</span> <span class=\"mi\">8</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">prove_even</span>\n</code></pre></div>\n<p>It almost works, as in if I remove the <code>&lt;|&gt;</code> and directly prove with 4, then the example succeeds. However, with the code above I am getting a weird error of</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">type</span> <span class=\"n\">mismatch</span> <span class=\"n\">at</span> <span class=\"n\">application</span>\n  <span class=\"n\">prove_even_aux</span> <span class=\"n\">n.succ</span>\n<span class=\"n\">term</span>\n  <span class=\"n\">n.succ</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">ℕ</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"n\">tactic_state</span>\n</code></pre></div>\n<p>Can someone explain how this happens? It seems to me that <code>prove_even_aux</code> takes one ℕ argument.</p>",
        "id": 336417533,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1677226362
    },
    {
        "content": "<p>Here's a minimal code:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">mwc'</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"k\">do</span> <span class=\"k\">if</span> <span class=\"n\">n</span> <span class=\"bp\">%</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"k\">then</span> <span class=\"n\">return</span> <span class=\"o\">()</span> <span class=\"k\">else</span> <span class=\"n\">return</span> <span class=\"o\">(</span><span class=\"n\">mwc'</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 336419146,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1677227043
    },
    {
        "content": "<p>If you want to recurse on an argument it needs to go after the colon</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.stream.defs</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.bool.all_any</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.lazy_list</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">expr</span> <span class=\"n\">tactic</span> <span class=\"n\">widget</span>\n\n<span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">prove_even_aux</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span>\n<span class=\"bp\">|</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"k\">do</span> <span class=\"o\">{</span>\n     <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">even</span> <span class=\"bp\">%%</span><span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">target</span><span class=\"o\">,</span>\n     <span class=\"n\">tp</span> <span class=\"bp\">←</span> <span class=\"n\">infer_type</span> <span class=\"n\">p</span><span class=\"o\">,</span>\n     <span class=\"n\">guard</span> <span class=\"o\">(</span><span class=\"n\">tp</span> <span class=\"bp\">=</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">ℕ</span><span class=\"o\">)),</span>\n     <span class=\"n\">to_expr</span> <span class=\"bp\">``</span><span class=\"o\">(</span><span class=\"bp\">%%</span><span class=\"o\">(</span><span class=\"n\">reflect</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"n\">existsi</span><span class=\"o\">,</span>\n     <span class=\"n\">exact_dec_trivial</span>\n   <span class=\"o\">}</span>\n   <span class=\"c1\">--  &lt;|&gt; fail \"???\"</span>\n   <span class=\"bp\">&lt;|&gt;</span> <span class=\"o\">(</span><span class=\"n\">prove_even_aux</span> <span class=\"n\">n.succ</span><span class=\"o\">)</span>\n\n<span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">prove_even</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span> <span class=\"n\">prove_even_aux</span> <span class=\"mi\">0</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">even</span> <span class=\"mi\">8</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">prove_even</span>\n</code></pre></div>\n<p>from within prove_even_aux the type of itself has those arguments before the colon fixed essentially</p>",
        "id": 336420025,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1677227298
    },
    {
        "content": "<p>This has been changed in lean 4 I think (and I'd recommend learning how to write tactics like this in lean 4 rather than lean 3)</p>",
        "id": 336421922,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1677227952
    },
    {
        "content": "<p>Hi Kevin, I knew you would comment <span aria-label=\"joy\" class=\"emoji emoji-1f602\" role=\"img\" title=\"joy\">:joy:</span> I just wanted to get a feel of how metaprogramming works, I will look at how it works in Lean 4 quite soon :) At least I know now that it's not as hard as I thought it is</p>",
        "id": 336422150,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1677228030
    },
    {
        "content": "<p>Also another question, is <code>to_expr ``(%%(reflect n)) &gt;&gt;= existsi</code> the best way to do it? I essentially want to do <code>use n</code> but Lean refuses</p>",
        "id": 336422424,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1677228126
    }
]