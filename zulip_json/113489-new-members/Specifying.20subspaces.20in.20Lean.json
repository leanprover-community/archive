[
    {
        "content": "<p>I’m translating Linear Algebra Done Right into Lean.  Lean prefers types over sets, and prefers separate types over subtypes.  For example, in Lean ℕ is not a subset of ℤ or ℝ, so we have three different types with e.g. three different objects called 5.</p>\n<p>So my question is, what’s the best way to formalize subspaces in lean?  Requiring that all vector spaces be Lean sets seems too restrictive.  Does Lean have a notion of subtype that would be useful here, and e.g. allow you to say the null space of some arbitrary linear transformation is a subtype of the full vector space?  Use an indicator function from V → bool (or <code>Prop</code>?) to say which elements are in the subspace?  Something else?</p>\n<p>For example, we want to prove that the sum of subspaces is the smallest containing subspace, that if U and W are subspaces, then U + W is a direct sum if and only if U ∩ W = {0}, etc.</p>",
        "id": 359893166,
        "sender_full_name": "Martin C. Martin",
        "timestamp": 1684589310
    },
    {
        "content": "<p>Have you looked at <a href=\"https://leanprover-community.github.io/mathlib_docs/find/submodule\">docs#submodule</a> (or easier <a href=\"https://leanprover-community.github.io/mathlib_docs/find/subgroup\">docs#subgroup</a>).</p>",
        "id": 359898771,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1684590969
    },
    {
        "content": "<p>No, I'll look at that now, thanks!</p>",
        "id": 359904662,
        "sender_full_name": "Martin C. Martin",
        "timestamp": 1684592850
    },
    {
        "content": "<p>It's interesting the dichotomy between sets/predicates and types in Lean, and more generally in modern functional programming.  The type framework seems much more rigid, in that you can't come up with some - perhaps undecidable - predicate and use that to define a type.  Types, having well defined and easily decidable properties, make a lot of things easier.  And of course avoids Russell's paradox.  And yet there are times when we want something more flexible, and so use a set/predicate anyway, and need to have a separate definition like <code>submodule</code>.</p>\n<p>Just thinking out loud.</p>",
        "id": 360328428,
        "sender_full_name": "Martin C. Martin",
        "timestamp": 1684774718
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"348963\">Martin C. Martin</span> <a href=\"#narrow/stream/113489-new-members/topic/Specifying.20subspaces.20in.20Lean/near/360328428\">said</a>:</p>\n<blockquote>\n<p>you can't come up with some - perhaps undecidable - predicate and use that to define a type.  </p>\n</blockquote>\n<p>Indeed you can, since everything is classical here---you only can't define a <em>decidable</em> type like that.</p>",
        "id": 360351371,
        "sender_full_name": "Pedro Sánchez Terraf",
        "timestamp": 1684781251
    },
    {
        "content": "<p>Even in a constructive system you can define a subtype cut out by an undecidable predicate. It just means that whoever produces a term of that type has to provide a proof that the predicate holds.<br>\nOr did you mean something else by \"use an undecidable predicate to define a type\"?</p>",
        "id": 360505824,
        "sender_full_name": "Reid Barton",
        "timestamp": 1684842375
    },
    {
        "content": "<p>By \"decidable\" I'm think of inductive types, where the restrictions on the definition mean you can easily decide whether something exists, or whether two are the same.  As opposed to, say, the set of all Godel numbers of machines that halt, which is famously undecidable.</p>\n<p>In traditional math, we define group as a set with an operation that satisfies a few conditions.  A subgroup just involves a subset of that original set; if you handed someone a subgroup, but didn't tell them about the larger original group, the subgroup would look just like a regular group to them.  In Lean, we use type instead of set, but then when we define subgroup, we do use a set.  If you hand this subgroup to someone, it doesn't quite fit the definition of a set, since the subgroup elements are \"take this type and filter by this predicate\", which is not the argument to the constructor of mathlib's group object.</p>\n<p>It's just interesting that, while we try to stick to the nice world of inductively defined structures, we do sometimes find it useful to \"break out\" and allow an arbitrary predicate to be used to define the elements of our structures.</p>",
        "id": 360593216,
        "sender_full_name": "Martin C. Martin",
        "timestamp": 1684861964
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span> Is there a proof somewhere that a <code>submodule</code> is indeed a <code>module</code>?  How are theorems about <code>modules</code> shown to also hold for <code>submodule</code>s?</p>",
        "id": 360600429,
        "sender_full_name": "Martin C. Martin",
        "timestamp": 1684863934
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/submodule.module\">docs#submodule.module</a></p>",
        "id": 360600660,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1684863986
    },
    {
        "content": "<p>Looks like another win for the naming convention</p>",
        "id": 360600795,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1684864016
    },
    {
        "content": "<p>I was about to type it myself (without first checking the docs, of course)</p>",
        "id": 360600923,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1684864053
    },
    {
        "content": "<p>Cool, thanks <span class=\"user-mention\" data-user-id=\"307953\">@Ruben Van de Velde</span>  (and <span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span> )</p>",
        "id": 360601081,
        "sender_full_name": "Martin C. Martin",
        "timestamp": 1684864092
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"348963\">@Martin C. Martin</span> There's some magic here that I think is worth elaborating. Every <code>submodule</code> is just a term (a structure), but you can regard it as being a type by taking its carrier set and coercing it to a type using <code>subtype</code>. Lean has a coercion facility where you can register coercion functions to convert terms to types, and it kicks in wherever you use something that's not a type where a type is expected.</p>\n<p>So, if you have <code>S : submodule M</code>, then while <code>module S</code> isn't literally type correct since <code>module</code> expects a type, Lean coerces <code>S</code> to be a type, and it's <em>that</em> that is given the module structure, not <code>S</code> itself. But it's as-if <code>S</code> is a module.</p>\n<p>This pattern is used for all algebraic sub-objects, and so some of the boilerplate has been abstracted into <a href=\"https://leanprover-community.github.io/mathlib_docs/find/set_like\">docs#set_like</a>, for the very common case when your sub-object of an object can be identified with the <code>set</code> of elements of the object.</p>",
        "id": 360608549,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1684866029
    },
    {
        "content": "<p>There are then two ways you can work with elements of submodules, and you can relatively freely go back and forth: either you work with terms of <code>M</code> itself along with proofs that they're elements of a submodule <code>S</code>, or you work with terms of (the coerced) <code>S</code> directly, which are each a bundled-up term+proof.</p>",
        "id": 360609588,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1684866294
    },
    {
        "content": "<p>Ah, interesting!  So a type <em>can</em> correspond to some \"crazy\" subset, e.g. Godel numbers of programs that halt, through this coercion.  Thanks!</p>",
        "id": 360616554,
        "sender_full_name": "Martin C. Martin",
        "timestamp": 1684868213
    },
    {
        "content": "<p>I guess <a href=\"https://leanprover-community.github.io/mathlib_docs/find/subgroup.to_group\">docs#subgroup.to_group</a> is the equivalent for groups?</p>",
        "id": 360617174,
        "sender_full_name": "Martin C. Martin",
        "timestamp": 1684868384
    },
    {
        "content": "<blockquote>\n<p>if you handed someone a subgroup, but didn't tell them about the larger original group, the subgroup would look just like a regular group to them</p>\n</blockquote>\n<p>If you didn't tell them about the larger original group, would you have really given them a subgroup?</p>\n<p>So, similarly, when one writes a definition or a lemma that is general over any group as input, one can use it and apply it to subgroups (terms) that are promoted in-situ to types. However, in doing so, one can't rely on, in the body of that definition or lemma, on the subgroup-ness, since we are making a declaration that is general over any group.</p>\n<p>Telling your interlocutor that you gave them a subgroup H -- how does that look like? In mathlib, that might mean providing the data of another group G along with an injective group hom <code>H -&gt;* G</code>.</p>",
        "id": 360636065,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1684874937
    },
    {
        "content": "<p>Sorry, I wasn't very clear.  When I say \"I hand them a subgroup\", I don't mean that I tell them it's a subgroup, I just give them a set &amp; a function.  For example, S = {(x, 3x) | x ∈ ℝ} is an additive group with the usual definition of addition, and I give them that.  It doesn't matter whether I started from there, or started with G = {(x, y) | x, y ∈ ℝ } and then took the null space of some linear transformation.</p>\n<p>Anyway, the fact that you can coerce a predicate into a type means that types <em>can</em> represent many types of sets.</p>",
        "id": 360639733,
        "sender_full_name": "Martin C. Martin",
        "timestamp": 1684876369
    },
    {
        "content": "<p>If you hand them <code>{(x, 3x) | x ∈ ℝ}</code> then you have not met the conditions of</p>\n<blockquote>\n<p>if you handed someone a subgroup, but didn't tell them about the larger original group</p>\n</blockquote>\n<p>because you actually handed them <code>({(x, 3x) | x ∈ ℝ} : set (ℝ ×  ℝ))</code> which told them the original group was <code>ℝ ×  ℝ</code></p>",
        "id": 360640970,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684876848
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span> <span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> I got part way with the <code>set_like</code>, but couldn't complete the definition for treating my custom subspace as a module.  Some of the notation and concepts in <code>set_like</code> is foreign to me, and my attempts at monkey-see-monkey-do failed.  Here's what I have:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.field.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.module.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.set_like.basic</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">subspace</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span>\n  <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">F</span> <span class=\"n\">V</span><span class=\"o\">]:=</span>\n<span class=\"o\">(</span><span class=\"n\">carrier</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">V</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">add_mem'</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">},</span> <span class=\"n\">u</span> <span class=\"bp\">∈</span> <span class=\"n\">carrier</span> <span class=\"bp\">→</span> <span class=\"n\">v</span> <span class=\"bp\">∈</span> <span class=\"n\">carrier</span> <span class=\"bp\">→</span> <span class=\"n\">u</span> <span class=\"bp\">+</span> <span class=\"n\">v</span> <span class=\"bp\">∈</span> <span class=\"n\">carrier</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">zero_mem'</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"bp\">∈</span> <span class=\"n\">carrier</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">smul_mem'</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">},</span> <span class=\"n\">v</span> <span class=\"bp\">∈</span> <span class=\"n\">carrier</span> <span class=\"bp\">→</span> <span class=\"n\">c</span> <span class=\"bp\">•</span> <span class=\"n\">v</span> <span class=\"bp\">∈</span> <span class=\"n\">carrier</span> <span class=\"o\">)</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">subspace</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">F</span> <span class=\"n\">V</span><span class=\"o\">]</span>\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">}</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">set_like</span> <span class=\"o\">(</span><span class=\"n\">subspace</span> <span class=\"n\">F</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"n\">V</span> <span class=\"o\">:=</span>\n<span class=\"o\">⟨</span><span class=\"n\">subspace.carrier</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">cases</span> <span class=\"n\">p</span><span class=\"bp\">;</span> <span class=\"n\">cases</span> <span class=\"n\">q</span><span class=\"bp\">;</span> <span class=\"n\">congr'</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">mem_carrier</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">subspace</span> <span class=\"n\">F</span> <span class=\"n\">V</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">v</span> <span class=\"bp\">∈</span> <span class=\"n\">p.carrier</span> <span class=\"bp\">↔</span> <span class=\"n\">v</span> <span class=\"bp\">∈</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">iff.rfl</span>\n\n<span class=\"kd\">@[ext]</span> <span class=\"kd\">theorem</span> <span class=\"n\">ext</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">subspace</span> <span class=\"n\">F</span> <span class=\"n\">V</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">v</span> <span class=\"bp\">∈</span> <span class=\"n\">p</span> <span class=\"bp\">↔</span> <span class=\"n\">v</span> <span class=\"bp\">∈</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"n\">q</span> <span class=\"o\">:=</span> <span class=\"n\">set_like.ext</span> <span class=\"n\">h</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">subspace</span> <span class=\"n\">F</span> <span class=\"n\">V</span><span class=\"o\">}</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">module'</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_smul</span> <span class=\"n\">F</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">F</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">module</span> <span class=\"n\">F</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">module</span> <span class=\"n\">F</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"n\">p.module'</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">subspace</span>\n</code></pre></div>\n<p>The <code>instance module'</code> gives the error in <code>module F p</code>, \"failed to synthesize type class instance for\".  What do I need to get this working?  Any hints?  I'd like to prove that my subspace really is a module, have all module theorems apply to it.</p>\n<p>Thanks in advance.</p>",
        "id": 361380299,
        "sender_full_name": "Martin C. Martin",
        "timestamp": 1685118564
    },
    {
        "content": "<p><code>[has_smul F V] [module F V]</code> is nonsense, it means \"let there be two unrelated meanings of <code>•</code>, where only the second is a module\"</p>",
        "id": 361380471,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1685118599
    },
    {
        "content": "<p>oh ok</p>",
        "id": 361380737,
        "sender_full_name": "Martin C. Martin",
        "timestamp": 1685118638
    },
    {
        "content": "<blockquote>\n<p>failed to synthesize type class instance for</p>\n</blockquote>\n<p>This is the first line of the message. The important lines come after it, but you didn't tell us what they were!</p>",
        "id": 361380758,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1685118643
    },
    {
        "content": "<p>I've replaced <code>[has_smul F V]</code> with <code>[add_comm_group V] </code>, but that doesn't seem to help.  Here's the full error message:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"n\">type</span> <span class=\"kd\">class</span> <span class=\"kd\">instance</span> <span class=\"n\">for</span>\n<span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"o\">,</span>\n<span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_2</span><span class=\"o\">,</span>\n<span class=\"n\">_inst_1</span> <span class=\"o\">:</span> <span class=\"n\">field</span> <span class=\"n\">F</span><span class=\"o\">,</span>\n<span class=\"n\">_inst_2</span> <span class=\"o\">:</span> <span class=\"n\">add_comm_group</span> <span class=\"n\">V</span><span class=\"o\">,</span>\n<span class=\"n\">_inst_3</span> <span class=\"o\">:</span> <span class=\"n\">module</span> <span class=\"n\">F</span> <span class=\"n\">V</span><span class=\"o\">,</span>\n<span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">subspace</span> <span class=\"n\">F</span> <span class=\"n\">V</span><span class=\"o\">,</span>\n<span class=\"n\">_inst_4</span> <span class=\"o\">:</span> <span class=\"n\">field</span> <span class=\"n\">F</span><span class=\"o\">,</span>\n<span class=\"n\">_inst_5</span> <span class=\"o\">:</span> <span class=\"n\">add_comm_group</span> <span class=\"n\">V</span><span class=\"o\">,</span>\n<span class=\"n\">_inst_6</span> <span class=\"o\">:</span> <span class=\"n\">module</span> <span class=\"n\">F</span> <span class=\"n\">V</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">add_comm_monoid</span> <span class=\"bp\">↥</span><span class=\"n\">p</span>\n</code></pre></div>",
        "id": 361381315,
        "sender_full_name": "Martin C. Martin",
        "timestamp": 1685118767
    },
    {
        "content": "<p>So I need to show my subspace is an <code>add_comm_monoid</code>?  What is the <code>↥</code> symbol in <code>↥p</code>?</p>",
        "id": 361382528,
        "sender_full_name": "Martin C. Martin",
        "timestamp": 1685119070
    },
    {
        "content": "<p>Should I define a <code>subspace_class</code> like the <code>submodule_class</code> in submodule?</p>",
        "id": 361383504,
        "sender_full_name": "Martin C. Martin",
        "timestamp": 1685119290
    },
    {
        "content": "<p>I'm a bit of a monkey that sees and dos when it comes to the algebra hierarchy, but here's a potential way forward:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.field.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.module.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.set_like.basic</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">subspace</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span>\n  <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">F</span> <span class=\"n\">V</span><span class=\"o\">]:=</span>\n<span class=\"o\">(</span><span class=\"n\">carrier</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">V</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">add_mem'</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">},</span> <span class=\"n\">u</span> <span class=\"bp\">∈</span> <span class=\"n\">carrier</span> <span class=\"bp\">→</span> <span class=\"n\">v</span> <span class=\"bp\">∈</span> <span class=\"n\">carrier</span> <span class=\"bp\">→</span> <span class=\"n\">u</span> <span class=\"bp\">+</span> <span class=\"n\">v</span> <span class=\"bp\">∈</span> <span class=\"n\">carrier</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">zero_mem'</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"bp\">∈</span> <span class=\"n\">carrier</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">smul_mem'</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">},</span> <span class=\"n\">v</span> <span class=\"bp\">∈</span> <span class=\"n\">carrier</span> <span class=\"bp\">→</span> <span class=\"n\">c</span> <span class=\"bp\">•</span> <span class=\"n\">v</span> <span class=\"bp\">∈</span> <span class=\"n\">carrier</span> <span class=\"o\">)</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">subspace</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">F</span> <span class=\"n\">V</span><span class=\"o\">]</span>\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">}</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">set_like</span> <span class=\"o\">(</span><span class=\"n\">subspace</span> <span class=\"n\">F</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"n\">V</span> <span class=\"o\">:=</span>\n<span class=\"o\">⟨</span><span class=\"n\">subspace.carrier</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">cases</span> <span class=\"n\">p</span><span class=\"bp\">;</span> <span class=\"n\">cases</span> <span class=\"n\">q</span><span class=\"bp\">;</span> <span class=\"n\">congr'</span><span class=\"o\">⟩</span>\n\n<span class=\"sd\">/-- This is a normalization lemma: we don't want to see `p.carrier` itself but rather its coercion</span>\n<span class=\"sd\">to `set V`. The coercion is inherited from `set_like`. -/</span>\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">mem_carrier</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">subspace</span> <span class=\"n\">F</span> <span class=\"n\">V</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">v</span> <span class=\"bp\">∈</span> <span class=\"n\">p.carrier</span> <span class=\"bp\">↔</span> <span class=\"n\">v</span> <span class=\"bp\">∈</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">iff.rfl</span>\n\n<span class=\"sd\">/-- Standard extensionality lemma: if a type is like a set, then terms are equal if they</span>\n<span class=\"sd\">have the same elements. -/</span>\n<span class=\"kd\">@[ext]</span> <span class=\"kd\">theorem</span> <span class=\"n\">ext</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">subspace</span> <span class=\"n\">F</span> <span class=\"n\">V</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">v</span> <span class=\"bp\">∈</span> <span class=\"n\">p</span> <span class=\"bp\">↔</span> <span class=\"n\">v</span> <span class=\"bp\">∈</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"n\">q</span> <span class=\"o\">:=</span> <span class=\"n\">set_like.ext</span> <span class=\"n\">h</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">subspace</span> <span class=\"n\">F</span> <span class=\"n\">V</span><span class=\"o\">}</span>\n\n<span class=\"sd\">/-- `module F p` requires that `p` is an `add_comm_group` (when it's coerced to a type). -/</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">add_comm_group</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"sd\">/-- The module structure on `p` (when it's coerced to a type). -/</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">module</span> <span class=\"n\">F</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">subspace</span>\n</code></pre></div>",
        "id": 361383808,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1685119354
    },
    {
        "content": "<p><code>↥</code> is how Lean represents that it's inserted a coercion to turn something into a type</p>",
        "id": 361383869,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1685119373
    },
    {
        "content": "<p>A Lean trick I always forget about: if you do <code>instance : add_comm_group p := {! !}</code> then this <code>{! !}</code> tells Lean to tell you available \"hole commands\" and if you select \"Generate skeleton for the structure under construction\" it replaces it with</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">add_comm_group</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">add</span> <span class=\"o\">:=</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">add_assoc</span> <span class=\"o\">:=</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">zero</span> <span class=\"o\">:=</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">zero_add</span> <span class=\"o\">:=</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">add_zero</span> <span class=\"o\">:=</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">nsmul</span> <span class=\"o\">:=</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">nsmul_zero'</span> <span class=\"o\">:=</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">nsmul_succ'</span> <span class=\"o\">:=</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">neg</span> <span class=\"o\">:=</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">sub</span> <span class=\"o\">:=</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">sub_eq_add_neg</span> <span class=\"o\">:=</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">zsmul</span> <span class=\"o\">:=</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">zsmul_zero'</span> <span class=\"o\">:=</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">zsmul_succ'</span> <span class=\"o\">:=</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">zsmul_neg'</span> <span class=\"o\">:=</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">add_left_neg</span> <span class=\"o\">:=</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">add_comm</span> <span class=\"o\">:=</span> <span class=\"n\">_</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 361384360,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1685119495
    },
    {
        "content": "<p>I'm not very familiar with the design behind <code>submodule_class</code> yet, but it's probably solving some engineering challenge that only shows up in the large scale, so you probably can avoid worrying about it for now.</p>",
        "id": 361385201,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1685119700
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/submodule_class\">docs#submodule_class</a> no longer exists</p>",
        "id": 361386019,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1685119902
    },
    {
        "content": "<p>Here's a start:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">add_comm_group</span> <span class=\"n\">p</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">add</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"gr\">sorry</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">zero</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">p.zero_mem'</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">nsmul</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">c</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">c</span> <span class=\"bp\">•</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"gr\">sorry</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">zsmul</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">c</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">c</span> <span class=\"bp\">•</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"gr\">sorry</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">neg</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"bp\">-</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"gr\">sorry</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">sub</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"gr\">sorry</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">add_assoc</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">zero_add</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">add_zero</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">nsmul_zero'</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">nsmul_succ'</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">sub_eq_add_neg</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">zsmul_zero'</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">zsmul_succ'</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">zsmul_neg'</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">add_left_neg</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">add_comm</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>I'm taking advantage of the coercions you get from <code>p</code> to <code>V</code> in these definitions</p>",
        "id": 361386132,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1685119927
    },
    {
        "content": "<p>Building it that way is a lot more work that using <a href=\"https://leanprover-community.github.io/mathlib_docs/find/function.injective.add_comm_group\">docs#function.injective.add_comm_group</a>, which saves you from all but the first 5 sorries</p>",
        "id": 361388906,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1685120496
    }
]