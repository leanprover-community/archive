[
    {
        "content": "<p>Hello everyone,</p>\n<p>I have the following small sorry's that I struggle to resolve, and that I have not been able to find theorems in the Mathlib. <br>\nThe first one is about disjoint sets, saying that [-a,a] and (a,infinity) are disjoint. <br>\nThe next one is about type conversion. Delta is real, but cast as complex, and I need to show that 1 and 2 are both  natural and complex numbers.<br>\nThe third one is about the limit of a real number going to zero, but the number is cast as a complex number.<br>\nAnd the last one is about arctan going to pi/2. <br>\nAny help would be greatly appreciated! Here is the minimal code:<br>\nKind regards!</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">analysis.special_functions.gaussian</span>\n\n<span class=\"kn\">section</span>\n<span class=\"kn\">open</span> <span class=\"n\">set</span>\n<span class=\"kn\">open</span> <span class=\"n\">set</span> <span class=\"n\">filter</span>\n<span class=\"kn\">open</span> <span class=\"n\">real</span>\n\n<span class=\"kd\">noncomputable theory</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">real</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">Icc_disjoint_Iio</span> <span class=\"o\">{</span><span class=\"n\">μ</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"mi\">0</span><span class=\"bp\">≤</span> <span class=\"n\">μ</span><span class=\"o\">):</span> <span class=\"n\">disjoint</span> <span class=\"o\">(</span><span class=\"n\">Icc</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">μ</span><span class=\"o\">)</span> <span class=\"n\">μ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Ioi</span> <span class=\"n\">μ</span><span class=\"o\">):=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">pow_complex_to_natural</span> <span class=\"o\">{</span><span class=\"n\">δ</span><span class=\"o\">:</span><span class=\"n\">ℝ</span> <span class=\"o\">}:</span> <span class=\"o\">(</span><span class=\"n\">δ</span><span class=\"o\">:</span><span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"o\">((</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"n\">ℂ</span><span class=\"o\">)</span><span class=\"bp\">/</span><span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"o\">:</span><span class=\"n\">ℂ</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">δ</span><span class=\"o\">:</span><span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"o\">((</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"n\">ℕ</span><span class=\"o\">)</span><span class=\"bp\">/</span><span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"o\">:</span><span class=\"n\">ℕ</span><span class=\"o\">)):=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">tendsto_coe</span><span class=\"o\">:</span><span class=\"n\">tendsto</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">k</span><span class=\"o\">:</span><span class=\"n\">ℂ</span> <span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">nhds_within</span> <span class=\"mi\">0</span> <span class=\"o\">(</span><span class=\"n\">Ioi</span> <span class=\"mi\">0</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">nhds</span> <span class=\"mi\">0</span><span class=\"o\">):=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span><span class=\"o\">,</span>\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">tendsto_arctan_at_top</span><span class=\"o\">:</span> <span class=\"n\">tendsto</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">),</span> <span class=\"n\">arctan</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"n\">at_top</span> <span class=\"o\">(</span><span class=\"n\">nhds</span> <span class=\"o\">(</span><span class=\"n\">real.pi</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">)):=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 365309546,
        "sender_full_name": "rtertr (Sonia)",
        "timestamp": 1686487034
    },
    {
        "content": "<p>I doubt the second one is true, because <code>(1 : nat) / (2 : nat) = 0 : nat</code></p>",
        "id": 365316208,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1686489055
    },
    {
        "content": "<p>For the first:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">Icc_disjoint_Iio</span> <span class=\"o\">{</span><span class=\"n\">μ</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"mi\">0</span><span class=\"bp\">≤</span> <span class=\"n\">μ</span><span class=\"o\">):</span> <span class=\"n\">disjoint</span> <span class=\"o\">(</span><span class=\"n\">Icc</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">μ</span><span class=\"o\">)</span> <span class=\"n\">μ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Ioi</span> <span class=\"n\">μ</span><span class=\"o\">):=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intros</span> <span class=\"n\">s</span> <span class=\"n\">h1</span> <span class=\"n\">h2</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">set.subset_empty_iff</span><span class=\"o\">,</span> <span class=\"n\">set.eq_empty_iff_forall_not_mem</span><span class=\"o\">],</span>\n  <span class=\"n\">intros</span> <span class=\"n\">x</span> <span class=\"n\">hx</span><span class=\"o\">,</span>\n  <span class=\"n\">specialize</span> <span class=\"n\">h1</span> <span class=\"n\">hx</span><span class=\"o\">,</span>\n  <span class=\"n\">specialize</span> <span class=\"n\">h2</span> <span class=\"n\">hx</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">h1</span> <span class=\"n\">h2</span><span class=\"o\">,</span>\n  <span class=\"n\">linarith</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 365319146,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1686490021
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/Small.20sorrys.20help/near/365316208\">said</a>:</p>\n<blockquote>\n<p>I doubt the second one is true, because <code>(1 : nat) / (2 : nat) = 0 : nat</code></p>\n</blockquote>\n<p>Ah okay, then there must be something wrong else where in my proof! :D</p>",
        "id": 365320634,
        "sender_full_name": "rtertr (Sonia)",
        "timestamp": 1686490456
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"307953\">Ruben Van de Velde</span> <a href=\"#narrow/stream/113489-new-members/topic/Small.20sorrys.20help/near/365319146\">said</a>:</p>\n<blockquote>\n<p>For the first:</p>\n</blockquote>\n<p>Thank you! :D <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span> <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span> <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span></p>",
        "id": 365320839,
        "sender_full_name": "rtertr (Sonia)",
        "timestamp": 1686490532
    },
    {
        "content": "<p><code>intros</code> is generally the wrong way to prove disjoint</p>",
        "id": 365567305,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1686577308
    },
    {
        "content": "<p>(it used to be, but the definition changed to be more general and is now inconvenient)</p>",
        "id": 365567482,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1686577343
    },
    {
        "content": "<p>Eric, do you think we should have made <code>disjoint</code> and <code>codisjoint</code> structures to avoid people trying to <code>intro</code> into them?</p>",
        "id": 365567628,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1686577368
    },
    {
        "content": "<p>Maybe, though then they'd just use <code>split</code></p>",
        "id": 365567895,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1686577427
    },
    {
        "content": "<p>In this case <a href=\"https://leanprover-community.github.io/mathlib_docs/find/set.Iic_disjoint_Ioi\">docs#set.Iic_disjoint_Ioi</a> (and monotonicity) provides a much shorter proof</p>",
        "id": 365568118,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1686577464
    },
    {
        "content": "<p>I quite like the idea because it also matches the status of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/is_compl\">docs#is_compl</a></p>",
        "id": 365568191,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1686577481
    },
    {
        "content": "<p>A nontrivial percentage of my Lean 3 students would use <code>fconstructor</code> (which comes up so often that I suspect that one of those super-generic tactics like <code>hint</code> is suggesting it)</p>",
        "id": 365568763,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1686577599
    },
    {
        "content": "<p>Oh that's really surprising. I literally never used <code>fconstructor</code>.</p>",
        "id": 365568938,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1686577634
    },
    {
        "content": "<p>yeah me neither, but probably you are not trying to write a Lean project as part of your degree when you'd never used the language three weeks before...</p>",
        "id": 365569506,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1686577739
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113489-new-members/topic/Small.20sorrys.20help/near/365568118\">said</a>:</p>\n<blockquote>\n<p>In this case <a href=\"https://leanprover-community.github.io/mathlib_docs/find/set.Iic_disjoint_Ioi\">docs#set.Iic_disjoint_Ioi</a> (and monotonicity) provides a much shorter proof</p>\n</blockquote>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">Icc_disjoint_Iio</span> <span class=\"o\">{</span><span class=\"n\">μ</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">disjoint</span> <span class=\"o\">(</span><span class=\"n\">Icc</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">μ</span><span class=\"o\">)</span> <span class=\"n\">μ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Ioi</span> <span class=\"n\">μ</span><span class=\"o\">):=</span>\n<span class=\"o\">(</span><span class=\"n\">set.Iic_disjoint_Ioi</span> <span class=\"n\">le_rfl</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mono_left</span> <span class=\"n\">set.Icc_subset_Iic_self</span>\n</code></pre></div>\n<p>didn't even need your <code>h</code></p>",
        "id": 365572584,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1686578347
    },
    {
        "content": "<p>Another one:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">tendsto_coe</span> <span class=\"o\">:</span> <span class=\"n\">tendsto</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">nhds_within</span> <span class=\"mi\">0</span> <span class=\"o\">(</span><span class=\"n\">Ioi</span> <span class=\"mi\">0</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">nhds</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">complex.continuous_of_real.tendsto'</span> <span class=\"mi\">0</span> <span class=\"n\">_</span> <span class=\"n\">complex.of_real_zero</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mono_left</span> <span class=\"n\">nhds_within_le_nhds</span>\n</code></pre></div>",
        "id": 365573582,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1686578525
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113489-new-members/topic/Small.20sorrys.20help/near/365573582\">said</a>:</p>\n<blockquote>\n<p>Another one:</p>\n</blockquote>\n<p>Wow, great! Thank you! I might write about it in my thesis. Can I write your name to credit you, or do you have any privacy concerns? It will just be read by my two advisors, btw :) I will also write a credit in my PR, ofc as well.</p>",
        "id": 365576609,
        "sender_full_name": "rtertr (Sonia)",
        "timestamp": 1686579085
    },
    {
        "content": "<p>My name is already plastered all over mathlib header comments, so feel free to</p>",
        "id": 365577090,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1686579185
    },
    {
        "content": "<p>I guess,  this is a general question. How do you give credit to people who helped you on Zulip without potentially causing privacy issues? :) Do you normally write all the usernames of the people who helped or how so? :)</p>",
        "id": 365577147,
        "sender_full_name": "rtertr (Sonia)",
        "timestamp": 1686579199
    },
    {
        "content": "<p>Zulip is public anyway, so I think any personal info written in web-public channels here is probably fair game to include elsewhere (but it does no harm to check)</p>",
        "id": 365577482,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1686579257
    },
    {
        "content": "<p>I tried the last one too, but I'm not familiar enough with filters to know if the last sorry is true:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">tendsto_arctan_at_top</span><span class=\"o\">:</span> <span class=\"n\">tendsto</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">),</span> <span class=\"n\">arctan</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"n\">at_top</span> <span class=\"o\">(</span><span class=\"n\">nhds</span> <span class=\"o\">(</span><span class=\"n\">real.pi</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">)):=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">simp_rw</span> <span class=\"n\">arctan</span><span class=\"o\">,</span>\n  <span class=\"n\">refine</span> <span class=\"n\">tendsto.comp</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">order_iso.tendsto_at_top</span> <span class=\"n\">_</span><span class=\"o\">),</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 365577593,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1686579279
    },
    {
        "content": "<p>Thank you! :D</p>",
        "id": 365579381,
        "sender_full_name": "rtertr (Sonia)",
        "timestamp": 1686579610
    },
    {
        "content": "<p>With the sorry slightly abstracted:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">at_top_eq_nhds_within</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span>  <span class=\"o\">(</span><span class=\"n\">at_top</span> <span class=\"o\">:</span> <span class=\"n\">filter</span> <span class=\"o\">(</span><span class=\"n\">set.Ioo</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">𝓝</span><span class=\"o\">[</span><span class=\"bp\">≤</span><span class=\"o\">]</span> <span class=\"n\">b</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">comap</span> <span class=\"n\">coe</span> <span class=\"o\">:=</span>\n<span class=\"gr\">sorry</span> <span class=\"c1\">-- this might not be true!</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">tendsto_arctan_at_top</span><span class=\"o\">:</span> <span class=\"n\">tendsto</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">),</span> <span class=\"n\">arctan</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"n\">at_top</span> <span class=\"o\">(</span><span class=\"n\">nhds</span> <span class=\"o\">(</span><span class=\"n\">real.pi</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">)):=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">simp_rw</span> <span class=\"n\">arctan</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">tendsto.comp</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">order_iso.tendsto_at_top</span> <span class=\"n\">_</span><span class=\"o\">),</span>\n  <span class=\"n\">rw</span> <span class=\"n\">at_top_eq_nhds_within</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">tendsto_comap.mono_right</span> <span class=\"n\">nhds_within_le_nhds</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 365581181,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1686579949
    },
    {
        "content": "<p>I made <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/filter.2Eat_top.20for.20intervals/near/365591436\">a new thread</a> for that sorry</p>",
        "id": 365591704,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1686582013
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/Small.20sorrys.20help/near/365568763\">said</a>:</p>\n<blockquote>\n<p>A nontrivial percentage of my Lean 3 students would use <code>fconstructor</code> (which comes up so often that I suspect that one of those super-generic tactics like <code>hint</code> is suggesting it)</p>\n</blockquote>\n<p>(This is precisely it, or was for me, <code>fconstructor</code> shows up constantly in <code>hint</code> and I had to learn it was useless after seeing it so often and never having it get me anywhere I couldn't have already gotten to)</p>",
        "id": 365704190,
        "sender_full_name": "Julian Berman",
        "timestamp": 1686613947
    },
    {
        "content": "<p>I knew it would be something like that!</p>",
        "id": 365750686,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1686636670
    },
    {
        "content": "<p>Good evening everyone,<br>\nI have another small sorry question!<br>\nJust trying to prove the following:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">analysis.special_functions.gaussian</span>\n\n<span class=\"kn\">section</span>\n<span class=\"kn\">open</span> <span class=\"n\">real</span>\n\n<span class=\"kd\">noncomputable theory</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">real</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">complex_coe_ne_zero</span> <span class=\"o\">{</span><span class=\"n\">δ</span><span class=\"o\">:</span><span class=\"n\">ℝ</span> <span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hδ</span><span class=\"o\">:</span> <span class=\"mi\">0</span><span class=\"bp\">&lt;</span><span class=\"n\">δ</span><span class=\"o\">):</span> <span class=\"o\">(</span><span class=\"n\">δ</span><span class=\"o\">:</span><span class=\"n\">ℂ</span> <span class=\"o\">)</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">norm_cast</span><span class=\"o\">,</span>\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 369813397,
        "sender_full_name": "rtertr (Sonia)",
        "timestamp": 1687808020
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"n\">exact</span> <span class=\"n\">ne_of_gt</span> <span class=\"n\">hδ</span>\n</code></pre></div>",
        "id": 369815675,
        "sender_full_name": "David Renshaw",
        "timestamp": 1687808382
    },
    {
        "content": "<p>(That's what the <code>library_search</code> tactic told me to do.)</p>",
        "id": 369815832,
        "sender_full_name": "David Renshaw",
        "timestamp": 1687808414
    },
    {
        "content": "<p>Oh, great! Mine just timed-out, so I guess I should extend the thinking time :D <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span></p>",
        "id": 369816031,
        "sender_full_name": "rtertr (Sonia)",
        "timestamp": 1687808468
    },
    {
        "content": "<p>Hm... yeah I see that my <code>.emacs</code> does have a line <code>(setq lean-timeout-limit 1000000)</code>, so maybe that's why mine didn't time out.</p>",
        "id": 369816244,
        "sender_full_name": "David Renshaw",
        "timestamp": 1687808525
    },
    {
        "content": "<p>well, thank you for the time then haha!</p>",
        "id": 369816310,
        "sender_full_name": "rtertr (Sonia)",
        "timestamp": 1687808550
    },
    {
        "content": "<p>Maybe one of <code>exact hδ.ne</code> or <code>exact hδ.ne'</code>works. Or even <code>exact_mod_cast hδ.ne'</code> is a one-liner?</p>\n<p>Note that in Lean 4 <code>library_search</code> is much faster (and is called <code>exact?</code>). Time to upgrade? ;-)</p>",
        "id": 369833290,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1687813365
    }
]