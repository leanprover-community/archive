[
    {
        "content": "<p>The <code>Differentiable</code> part fails with <code>failed to synthesize instance\n  NormedAddCommGroup ↑zero_to_three</code>.   Do I need to provide the proof of <code>NormedAddCommGroup</code> myself, or does it exist in Mathlib somewhere?  Seems like it should exist, but I can't figure out what else to <code>include</code>.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Set.Intervals.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Real.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Analysis.Calculus.FDeriv.Basic</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">zero_to_three</span> <span class=\"o\">:=</span> <span class=\"n\">Set.Ioo</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"mi\">3</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kn\">section</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">zero_to_three</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n<span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"n\">Differentiable</span> <span class=\"n\">ℝ</span> <span class=\"n\">f</span><span class=\"o\">]</span>\n\n<span class=\"kd\">end</span> <span class=\"c1\">-- noncomputable</span>\n</code></pre></div>",
        "id": 404499017,
        "sender_full_name": "Martin C. Martin",
        "timestamp": 1701123987
    },
    {
        "content": "<p>If an instance exists, such as <code>NormedAddCommGroup ℝ</code>, how do I find it using VS Code?</p>",
        "id": 404499931,
        "sender_full_name": "Martin C. Martin",
        "timestamp": 1701124442
    },
    {
        "content": "<p>does it work with <code>abbrev zero_to_three...</code>? The <code>def</code> makes <code>zero_to_three</code> obscure to Lean - by default, it won't look through a <code>def</code>.</p>",
        "id": 404500719,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1701124809
    },
    {
        "content": "<p>Thanks Eric, I didn't know about Lean not looking through <code>def</code> or <code>abbrev</code>.  Alas, switching to <code>abbrev</code> didn't help.</p>",
        "id": 404500867,
        "sender_full_name": "Martin C. Martin",
        "timestamp": 1701124893
    },
    {
        "content": "<blockquote>\n<p>Do I need to provide the proof of NormedAddCommGroup myself</p>\n</blockquote>\n<p>This can't possibly work, because <code>[0, 3]</code> is not an additive group</p>",
        "id": 404501499,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1701125219
    },
    {
        "content": "<p>Good point.  :)  Why does <code>Differentiable</code> need it to be one?</p>",
        "id": 404501577,
        "sender_full_name": "Martin C. Martin",
        "timestamp": 1701125275
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Differentiable#doc\">docs#Differentiable</a> is in the end defined as (some quantifiers over) <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=HasFDerivAtFilter#doc\">docs#HasFDerivAtFilter</a>, which needs the domain to have a well-defined addition and subtraction. I guess you're expecting differentiability at the end-points to be one sided, right?</p>",
        "id": 404502162,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1701125599
    },
    {
        "content": "<p>I would guess that <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=MDifferentiable#doc\">docs#MDifferentiable</a> can be made to work here, but that's above my paygrade</p>",
        "id": 404502164,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1701125600
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"284160\">@Eric Rodriguez</span>  it's actually the open interval <code>(0, 3)</code> so we don't have to worry about end points.  Still not a group though.</p>",
        "id": 404502359,
        "sender_full_name": "Martin C. Martin",
        "timestamp": 1701125688
    },
    {
        "content": "<p>My next attempt is to define the function on all of ℝ, but only declare it differentiable on the open interval.  However, that fails with \"invalid binder annotation, type is not a class instance<br>\n  DifferentiableOn ℝ f zero_to_three\"</p>\n<p>What am I doing wrong here?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n<span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"n\">DifferentiableOn</span> <span class=\"n\">ℝ</span> <span class=\"n\">f</span> <span class=\"n\">zero_to_three</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 404506375,
        "sender_full_name": "Martin C. Martin",
        "timestamp": 1701127892
    },
    {
        "content": "<p>The error suggests that you can't use <code>[]</code> binders, but instead <code>()</code> or <code>{}</code> binders; <code>[]</code> would mean it's an instance, which can be searched for automatically by the system; however, this isn't turned on for <code>DifferentiableOn</code></p>",
        "id": 404506891,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1701128190
    },
    {
        "content": "<p>Thanks.  Why is it not turned on?  Because of the last Set argument?</p>",
        "id": 404507405,
        "sender_full_name": "Martin C. Martin",
        "timestamp": 1701128520
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Differentiable#doc\">docs#Differentiable</a> is not a class either. Why would you want it to be one?</p>",
        "id": 404519493,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1701134411
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"197836\">Jireh Loreaux</span> <a href=\"#narrow/stream/113489-new-members/topic/NormedAddCommGroup.20for.20real.20intervals/near/404519493\">said</a>:</p>\n<blockquote>\n<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Differentiable#doc\">docs#Differentiable</a> is not a class either. Why would you want it to be one?</p>\n</blockquote>\n<p>The same reason the algebraic types are.  Sometimes, you need the fact that a function is differentiable, and rather than trying to remember the name of the theorem, it would be nice if Lean could look it up itself.</p>\n<p>But I guess many functions are not differentiable everywhere, and anyway sometimes you need the actual derivative, so <code>deriv</code> is the main way of using derivatives in Lean?</p>",
        "id": 404691632,
        "sender_full_name": "Martin C. Martin",
        "timestamp": 1701195816
    },
    {
        "content": "<p>Typeclass synthesis is not meant to be a global proof generator.</p>",
        "id": 404692156,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1701196014
    },
    {
        "content": "<p>We have tactics that are specialized for solving goals of a particular shape.</p>",
        "id": 404692232,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1701196047
    },
    {
        "content": "<p>In addition, the typeclass system is already taxed, so creating undue burden is not desirable.</p>",
        "id": 404699119,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1701198333
    },
    {
        "content": "<p>And (I think) even basic lemmas about differentiability would fail to be implemented as instances because Lean wouldn't be able to determine the order in which to synthesize.</p>",
        "id": 404699374,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1701198413
    }
]