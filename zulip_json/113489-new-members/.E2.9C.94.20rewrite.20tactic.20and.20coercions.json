[
    {
        "content": "<p>I tried to learn a bit of lean by implementing basic linear algebra from scratch (only importing fields).<br>\nAt this stage I defined linear maps, and a coercion from linear maps to functions, and am trying to prove that composition of linear maps is linear. However there is a problem when trying to use a rewrite tactic like so in the second line :</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code> <span class=\"k\">calc</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"bp\">∘</span> <span class=\"n\">f</span><span class=\"o\">)(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"o\">)</span>  <span class=\"bp\">=</span> <span class=\"n\">g</span><span class=\"o\">(</span><span class=\"n\">f</span><span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"o\">))</span>             <span class=\"o\">:</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">(</span><span class=\"bp\">∘</span><span class=\"o\">)</span>  <span class=\"c1\">--trying to show that g ∘ f is additive</span>\n                          <span class=\"bp\">...</span>      <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">f</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">f</span><span class=\"o\">(</span><span class=\"n\">y</span><span class=\"o\">))</span>          <span class=\"o\">:</span> <span class=\"kd\">by</span>  <span class=\"n\">rw</span> <span class=\"o\">(</span><span class=\"n\">f.map_add</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>(Here f and g are linear maps that are coerced to functions)<br>\nThe <code>rw</code> tactic does not pattern match because it sees <code>f</code> and not <code>f.to_fun</code>, but the definition of <code>f.map_add</code> is :</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">(</span><span class=\"n\">map_add</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">E</span><span class=\"o\">,</span> <span class=\"n\">to_fun</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">to_fun</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">to_fun</span> <span class=\"n\">y</span><span class=\"o\">))</span>\n</code></pre></div>\n<p><strong>how can I make the <code>rewrite</code> tactic see that the <code>f</code> on the left will be coerced to <code>f.to_fun</code> ?</strong></p>\n<p>(I think this is called an MWE) : </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.field.defs</span>\n\n<span class=\"c1\">-- Vector Spaces</span>\n<span class=\"kd\">class</span> <span class=\"n\">vec_space</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">E</span> <span class=\"o\">:</span><span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">plus</span> <span class=\"o\">:</span> <span class=\"n\">E</span> <span class=\"bp\">→</span> <span class=\"n\">E</span> <span class=\"bp\">→</span> <span class=\"n\">E</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">zero</span> <span class=\"o\">:</span> <span class=\"n\">E</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">zero_l_cancel</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">E</span><span class=\"o\">,</span> <span class=\"n\">plus</span> <span class=\"n\">zero</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">zero</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">inverse</span> <span class=\"o\">:</span> <span class=\"n\">E</span> <span class=\"bp\">→</span> <span class=\"n\">E</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">inv_cancel</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">E</span><span class=\"o\">,</span> <span class=\"n\">plus</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">inverse</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">zero</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">comm</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">E</span><span class=\"o\">,</span> <span class=\"n\">plus</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">plus</span> <span class=\"n\">y</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">assoc</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">E</span><span class=\"o\">,</span> <span class=\"n\">plus</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">plus</span> <span class=\"n\">y</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">plus</span> <span class=\"o\">(</span><span class=\"n\">plus</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"n\">z</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">scale</span> <span class=\"o\">:</span> <span class=\"n\">K</span> <span class=\"bp\">→</span> <span class=\"n\">E</span> <span class=\"bp\">→</span> <span class=\"n\">E</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">scale_linear</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">K</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">E</span><span class=\"o\">,</span> <span class=\"n\">scale</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">plus</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">plus</span> <span class=\"o\">(</span><span class=\"n\">scale</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">scale</span> <span class=\"n\">a</span> <span class=\"n\">c</span><span class=\"o\">))</span>\n<span class=\"kd\">instance</span> <span class=\"n\">vec_space_has_add</span> <span class=\"o\">{</span><span class=\"n\">E</span> <span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">vec_space</span> <span class=\"n\">K</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">has_add</span> <span class=\"n\">E</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">vec_space.plus</span> <span class=\"n\">K</span><span class=\"o\">⟩</span>\n\n<span class=\"c1\">--Linear maps</span>\n<span class=\"kd\">structure</span> <span class=\"n\">linear_map</span> <span class=\"o\">(</span><span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">F</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">vec_space</span> <span class=\"n\">K</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">vec_space</span> <span class=\"n\">K</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">to_fun</span> <span class=\"o\">:</span> <span class=\"n\">E</span> <span class=\"bp\">→</span> <span class=\"n\">F</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">map_add</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">E</span><span class=\"o\">,</span> <span class=\"n\">to_fun</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">to_fun</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">to_fun</span> <span class=\"n\">y</span><span class=\"o\">))</span>                        <span class=\"c1\">--additivity of linear map</span>\n<span class=\"o\">(</span><span class=\"n\">map_mul</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">E</span><span class=\"o\">),</span> <span class=\"n\">to_fun</span> <span class=\"o\">(</span><span class=\"n\">i.scale</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">j.scale</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">to_fun</span> <span class=\"n\">y</span><span class=\"o\">))</span>        <span class=\"c1\">--scaling property of linear map</span>\n<span class=\"kd\">instance</span> <span class=\"o\">{</span><span class=\"n\">E</span> <span class=\"n\">F</span> <span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">vec_space</span> <span class=\"n\">K</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">vec_space</span> <span class=\"n\">K</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">has_coe_to_fun</span> <span class=\"o\">(</span><span class=\"n\">linear_map</span> <span class=\"n\">E</span> <span class=\"n\">F</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">E</span> <span class=\"bp\">→</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">coe</span> <span class=\"o\">:=</span> <span class=\"n\">linear_map.to_fun</span> <span class=\"o\">}</span>\n\n<span class=\"c1\">--Composition of linear maps is a linear map</span>\n<span class=\"kd\">def</span> <span class=\"n\">lin_comp_lin</span> <span class=\"o\">{</span><span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">F</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">G</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">field</span> <span class=\"n\">K</span><span class=\"o\">]</span>\n<span class=\"o\">[</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">vec_space</span> <span class=\"n\">K</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">vec_space</span> <span class=\"n\">K</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">vec_space</span> <span class=\"n\">K</span> <span class=\"n\">G</span><span class=\"o\">]</span>\n<span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">linear_map</span> <span class=\"n\">E</span> <span class=\"n\">F</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">linear_map</span> <span class=\"n\">F</span> <span class=\"n\">G</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">linear_map</span> <span class=\"n\">E</span> <span class=\"n\">G</span> <span class=\"n\">K</span> <span class=\"o\">:=</span> <span class=\"o\">{</span>\n  <span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"n\">g</span> <span class=\"bp\">∘</span> <span class=\"n\">f</span><span class=\"o\">,</span>\n  <span class=\"n\">map_mul</span> <span class=\"o\">:=</span>\n  <span class=\"kd\">begin</span>\n  <span class=\"n\">intros</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n  <span class=\"k\">calc</span> <span class=\"o\">(</span><span class=\"n\">g.to_fun</span> <span class=\"bp\">∘</span> <span class=\"n\">f.to_fun</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i.scale</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span>  <span class=\"bp\">=</span> <span class=\"n\">g.to_fun</span> <span class=\"o\">(</span><span class=\"n\">f.to_fun</span> <span class=\"o\">(</span><span class=\"n\">i.scale</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">))</span>             <span class=\"o\">:</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">(</span><span class=\"bp\">∘</span><span class=\"o\">)</span>\n                    <span class=\"bp\">...</span>      <span class=\"bp\">=</span> <span class=\"n\">g.to_fun</span> <span class=\"o\">(</span><span class=\"n\">j.scale</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">f.to_fun</span> <span class=\"n\">y</span><span class=\"o\">))</span>              <span class=\"o\">:</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">(</span><span class=\"n\">f.map_mul</span><span class=\"o\">)</span>   <span class=\"c1\">--works fine but I use \".to_fun\" everywhere</span>\n                    <span class=\"bp\">...</span>      <span class=\"bp\">=</span> <span class=\"n\">k.scale</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">g.to_fun</span> <span class=\"o\">(</span><span class=\"n\">f.to_fun</span> <span class=\"n\">y</span><span class=\"o\">))</span>              <span class=\"o\">:</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">(</span><span class=\"n\">g.map_mul</span><span class=\"o\">)</span>\n                    <span class=\"bp\">...</span>      <span class=\"bp\">=</span> <span class=\"n\">k.scale</span> <span class=\"n\">x</span> <span class=\"o\">((</span><span class=\"n\">g.to_fun</span> <span class=\"bp\">∘</span> <span class=\"n\">f.to_fun</span><span class=\"o\">)</span> <span class=\"n\">y</span><span class=\"o\">)</span>            <span class=\"o\">:</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">(</span><span class=\"bp\">∘</span><span class=\"o\">),</span>\n  <span class=\"kd\">end</span><span class=\"o\">,</span>\n  <span class=\"n\">map_add</span> <span class=\"o\">:=</span>\n  <span class=\"kd\">begin</span>\n  <span class=\"n\">intros</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n  <span class=\"k\">calc</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"bp\">∘</span> <span class=\"n\">f</span><span class=\"o\">)(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"o\">)</span>  <span class=\"bp\">=</span> <span class=\"n\">g</span><span class=\"o\">(</span><span class=\"n\">f</span><span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"o\">))</span>             <span class=\"o\">:</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">(</span><span class=\"bp\">∘</span><span class=\"o\">)</span>\n              <span class=\"bp\">...</span>      <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">f</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">f</span><span class=\"o\">(</span><span class=\"n\">y</span><span class=\"o\">))</span>          <span class=\"o\">:</span> <span class=\"kd\">by</span>  <span class=\"n\">rw</span> <span class=\"o\">(</span><span class=\"n\">f.map_add</span><span class=\"o\">)</span> <span class=\"c1\">--rewrite tactic failed, did not find instance of the pattern in the target expression --f.to_fun (?m_1 + ?m_2)</span>\n              <span class=\"bp\">...</span>      <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">g.to_fun</span> <span class=\"o\">(</span><span class=\"n\">f.to_fun</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">g.to_fun</span> <span class=\"o\">(</span><span class=\"n\">f.to_fun</span> <span class=\"n\">y</span><span class=\"o\">))</span>      <span class=\"o\">:</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">(</span><span class=\"n\">g.map_add</span><span class=\"o\">)</span>\n              <span class=\"bp\">...</span>      <span class=\"bp\">=</span> <span class=\"o\">((</span><span class=\"n\">g.to_fun</span> <span class=\"bp\">∘</span> <span class=\"n\">f.to_fun</span><span class=\"o\">)</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">((</span><span class=\"n\">g.to_fun</span> <span class=\"bp\">∘</span> <span class=\"n\">f.to_fun</span><span class=\"o\">)</span> <span class=\"n\">y</span><span class=\"o\">)</span>  <span class=\"o\">:</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">(</span><span class=\"bp\">∘</span><span class=\"o\">),</span>\n\n  <span class=\"kd\">end</span><span class=\"o\">,</span>\n<span class=\"o\">}</span>\n</code></pre></div>",
        "id": 338787217,
        "sender_full_name": "Yvon Fredrich",
        "timestamp": 1677664344
    },
    {
        "content": "<p>This is probably not an elegant solution but working:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">--Composition of linear maps is a linear map</span>\n<span class=\"kd\">def</span> <span class=\"n\">lin_comp_lin</span> <span class=\"o\">{</span><span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">F</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">G</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">field</span> <span class=\"n\">K</span><span class=\"o\">]</span>\n<span class=\"o\">[</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">vec_space</span> <span class=\"n\">K</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">vec_space</span> <span class=\"n\">K</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">vec_space</span> <span class=\"n\">K</span> <span class=\"n\">G</span><span class=\"o\">]</span>\n<span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">linear_map</span> <span class=\"n\">E</span> <span class=\"n\">F</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">linear_map</span> <span class=\"n\">F</span> <span class=\"n\">G</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">linear_map</span> <span class=\"n\">E</span> <span class=\"n\">G</span> <span class=\"n\">K</span> <span class=\"o\">:=</span> <span class=\"o\">{</span>\n  <span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"n\">g</span> <span class=\"bp\">∘</span> <span class=\"n\">f</span><span class=\"o\">,</span>\n  <span class=\"n\">map_mul</span> <span class=\"o\">:=</span>\n  <span class=\"kd\">begin</span>\n  <span class=\"n\">intros</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n  <span class=\"k\">calc</span> <span class=\"o\">(</span><span class=\"n\">g.to_fun</span> <span class=\"bp\">∘</span> <span class=\"n\">f.to_fun</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i.scale</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span>  <span class=\"bp\">=</span> <span class=\"n\">g.to_fun</span> <span class=\"o\">(</span><span class=\"n\">f.to_fun</span> <span class=\"o\">(</span><span class=\"n\">i.scale</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">(</span><span class=\"bp\">∘</span><span class=\"o\">)</span>\n                    <span class=\"bp\">...</span>      <span class=\"bp\">=</span> <span class=\"n\">g.to_fun</span> <span class=\"o\">(</span><span class=\"n\">j.scale</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">f.to_fun</span> <span class=\"n\">y</span><span class=\"o\">))</span>              <span class=\"o\">:</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">(</span><span class=\"n\">f.map_mul</span><span class=\"o\">)</span>   <span class=\"c1\">--works fine but I use \".to_fun\" everywhere</span>\n                    <span class=\"bp\">...</span>      <span class=\"bp\">=</span> <span class=\"n\">k.scale</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">g.to_fun</span> <span class=\"o\">(</span><span class=\"n\">f.to_fun</span> <span class=\"n\">y</span><span class=\"o\">))</span>              <span class=\"o\">:</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">(</span><span class=\"n\">g.map_mul</span><span class=\"o\">)</span>\n                    <span class=\"bp\">...</span>      <span class=\"bp\">=</span> <span class=\"n\">k.scale</span> <span class=\"n\">x</span> <span class=\"o\">((</span><span class=\"n\">g.to_fun</span> <span class=\"bp\">∘</span> <span class=\"n\">f.to_fun</span><span class=\"o\">)</span> <span class=\"n\">y</span><span class=\"o\">)</span>            <span class=\"o\">:</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">(</span><span class=\"bp\">∘</span><span class=\"o\">),</span>\n  <span class=\"kd\">end</span><span class=\"o\">,</span>\n  <span class=\"n\">map_add</span> <span class=\"o\">:=</span>\n  <span class=\"kd\">begin</span>\n  <span class=\"n\">intros</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n  <span class=\"k\">calc</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"bp\">∘</span> <span class=\"n\">f</span><span class=\"o\">)(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"o\">)</span>  <span class=\"bp\">=</span> <span class=\"n\">g</span><span class=\"o\">(</span><span class=\"n\">f</span><span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"o\">))</span>             <span class=\"o\">:</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">(</span><span class=\"bp\">∘</span><span class=\"o\">)</span>\n              <span class=\"bp\">...</span>      <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">f</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">f</span><span class=\"o\">(</span><span class=\"n\">y</span><span class=\"o\">))</span>          <span class=\"o\">:</span> <span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">unfold_coes</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"n\">f.map_add</span> <span class=\"o\">}</span>\n              <span class=\"bp\">...</span>      <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">g.to_fun</span> <span class=\"o\">(</span><span class=\"n\">f.to_fun</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">g.to_fun</span> <span class=\"o\">(</span><span class=\"n\">f.to_fun</span> <span class=\"n\">y</span><span class=\"o\">))</span>      <span class=\"o\">:</span>  <span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">unfold_coes</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"n\">g.map_add</span> <span class=\"o\">}</span>\n              <span class=\"bp\">...</span>      <span class=\"bp\">=</span> <span class=\"o\">((</span><span class=\"n\">g.to_fun</span> <span class=\"bp\">∘</span> <span class=\"n\">f.to_fun</span><span class=\"o\">)</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">((</span><span class=\"n\">g.to_fun</span> <span class=\"bp\">∘</span> <span class=\"n\">f.to_fun</span><span class=\"o\">)</span> <span class=\"n\">y</span><span class=\"o\">)</span>  <span class=\"o\">:</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">(</span><span class=\"bp\">∘</span><span class=\"o\">),</span>\n\n  <span class=\"kd\">end</span><span class=\"o\">,</span>\n</code></pre></div>",
        "id": 338788358,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1677664670
    },
    {
        "content": "<p>I just get an error message <code>unknown identifier 'unfold_coes'</code>. Do I need to import something ?<br>\nAlso do you know why I need to do that with my \"self-made\" code but not with things I import from mathlib ?</p>",
        "id": 338793173,
        "sender_full_name": "Yvon Fredrich",
        "timestamp": 1677666021
    },
    {
        "content": "<p>Mathlib solves this by having <a href=\"https://leanprover-community.github.io/mathlib_docs/find/linear_map.map_add\">docs#linear_map.map_add</a> separately to <a href=\"https://leanprover-community.github.io/mathlib_docs/find/linear_map.map_add'\">docs#linear_map.map_add'</a></p>",
        "id": 338793646,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1677666159
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"588936\">Yvon Fredrich</span> has marked this topic as resolved.</p>",
        "id": 338798397,
        "sender_full_name": "Notification Bot",
        "timestamp": 1677667365
    },
    {
        "content": "<p>Ok, a bit ugly but works fine : thank you !</p>",
        "id": 338798673,
        "sender_full_name": "Yvon Fredrich",
        "timestamp": 1677667436
    },
    {
        "content": "<p>The purpose behind mathlib's decision is that you <em>need</em> to pick a simp-normal form for the bare function. In mathlib we choose the coercion, but you can't access that coercion when creating the structure, so you need a new lemma. You should also have a simp lemma that converts to_fun into the coercion.</p>",
        "id": 338948698,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1677702576
    }
]