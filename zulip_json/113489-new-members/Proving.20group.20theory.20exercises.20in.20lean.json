[
    {
        "content": "<p>I have picked up a set of group theory exercises recently and have solved a dozen of them. Now I would like to print my solution in lean. I know full well how to do 100% formal proofs on paper and had a little bit of experience with formalizing my proofs in Mizar and Lean but that was few years ago and let's say I know 0% about lean. My current goals are: introduce <code>my own definition</code> of a group <code>G</code> and definitions of neutral element <code>e_G</code> and inverse element <code>inv(f)</code>. My approach on paper is: any ordered pair <code>(X, circ)</code> consisting of some set <code>X</code>and a function <code>circ : X to X -&gt;</code> such that the following properties hold: <code>1) forall f,g in X g circ f in X 2) forall f,g,h in X (h circ g) circ f = h circ (g circ f), 3) exists e in X (forall f in X f circ e = e circ f = f and forall f in X exists g in X g circ f = f circ g = e)</code> is a group. After introducing my definition I would like to prove first property that <code>forall G if G is a group then  exists! e in X (forall f in X f circ e = e circ f = f and forall f in X exists! g in X g circ f = f circ g = e)</code> (Exists single neutral and inverse element). Based on this theorem I would like to introduce two more definitions with new notations for neutral element and inverse element. First definition is <code>forall G - group e_G in X and forall f in X f circ e_G = e_G circ f = f. </code>Second definition is <code>forall G - group forall f in X inv(f) in X and inv(f) circ f = f circ inv(f) = e_G</code>. Can I do that in lean? Second question: what first material should I start from? I saw Natural Number Game recommended.</p>",
        "id": 392715319,
        "sender_full_name": "Alexander Belov",
        "timestamp": 1695484960
    },
    {
        "content": "<p>On a second thought I think I might want to postpone knowing how to make definitions in Lean. I will be more than happy if you teach me how to use the existing group definition. I would like to prove that if G is a group then the  following cancellation law holds: forall x,y,z in X x circ z = y circ z =&gt; x circ y.</p>",
        "id": 392724174,
        "sender_full_name": "Alexander Belov",
        "timestamp": 1695489982
    },
    {
        "content": "<p>Here's some example code defining a group.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Std</span>\n\n<span class=\"sd\">/-- A type `G` is called a `Group` if it has the following data and proofs. -/</span>\n<span class=\"kd\">class</span> <span class=\"n\">Group</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"sd\">/-- The identity element `e`. -/</span>\n  <span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">G</span>\n  <span class=\"sd\">/-- The composition of two group elements. -/</span>\n  <span class=\"n\">circ</span> <span class=\"o\">:</span> <span class=\"n\">G</span> <span class=\"bp\">→</span> <span class=\"n\">G</span> <span class=\"bp\">→</span> <span class=\"n\">G</span>\n  <span class=\"sd\">/-- Associativity. -/</span>\n  <span class=\"n\">assoc</span> <span class=\"o\">:</span> <span class=\"n\">circ</span> <span class=\"o\">(</span><span class=\"n\">circ</span> <span class=\"n\">f</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"n\">h</span> <span class=\"bp\">=</span> <span class=\"n\">circ</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">circ</span> <span class=\"n\">g</span> <span class=\"n\">h</span><span class=\"o\">)</span>\n  <span class=\"sd\">/-- Left identity. -/</span>\n  <span class=\"n\">e_circ</span> <span class=\"o\">:</span> <span class=\"n\">circ</span> <span class=\"n\">e</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">f</span>\n  <span class=\"sd\">/-- Right identity. -/</span>\n  <span class=\"n\">circ_e</span> <span class=\"o\">:</span> <span class=\"n\">circ</span> <span class=\"n\">f</span> <span class=\"n\">e</span> <span class=\"bp\">=</span> <span class=\"n\">f</span>\n  <span class=\"sd\">/-- The inverse operation. -/</span>\n  <span class=\"n\">inv</span> <span class=\"o\">:</span> <span class=\"n\">G</span> <span class=\"bp\">→</span> <span class=\"n\">G</span>\n  <span class=\"sd\">/-- Left inverse. -/</span>\n  <span class=\"n\">circ_inv_left</span> <span class=\"o\">:</span> <span class=\"n\">circ</span> <span class=\"o\">(</span><span class=\"n\">inv</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">e</span>\n  <span class=\"sd\">/-- Right inverse. -/</span>\n  <span class=\"n\">circ_inv_right</span> <span class=\"o\">:</span> <span class=\"n\">circ</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">inv</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">e</span>\n\n<span class=\"c1\">-- Note: closure is implicit as `circ : G → G → G`.</span>\n</code></pre></div>",
        "id": 392724847,
        "sender_full_name": "Sky Wilshaw",
        "timestamp": 1695490639
    },
    {
        "content": "<p>I made <code>inv</code> a function instead of an existential so that it's easier to work with. Generally if you have something of the form \"there exists a unique x such that y\", it's better to just store x as data and y as a proof about x.</p>",
        "id": 392724932,
        "sender_full_name": "Sky Wilshaw",
        "timestamp": 1695490720
    },
    {
        "content": "<p>Here's an example of a proof of the cancellation law with Mathlib's definition of a group (not the one I just gave).</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.Group.Defs</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">z</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"o\">:=</span>\n  <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">mul_one</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">mul_right_inv</span> <span class=\"n\">z</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">mul_assoc</span><span class=\"o\">,</span> <span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"n\">mul_assoc</span><span class=\"o\">,</span> <span class=\"n\">mul_right_inv</span><span class=\"o\">,</span> <span class=\"n\">mul_one</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>There are quicker ones but this just shows you each step in the process quite clearly.</p>",
        "id": 392725224,
        "sender_full_name": "Sky Wilshaw",
        "timestamp": 1695491010
    },
    {
        "content": "<p>How does a proof look like as a sequence of rw's? Also, I'm a little bit confused why there is no forall quantifier for f inside the definition of properties for group G.</p>",
        "id": 392727066,
        "sender_full_name": "Alexander Belov",
        "timestamp": 1695492752
    },
    {
        "content": "<p>Here is essentially the same proof, rewritten as a calculational proof.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">z</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"o\">:=</span>\n  <span class=\"k\">calc</span> <span class=\"n\">x</span>\n    <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">mul_one</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span>\n    <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"bp\">*</span> <span class=\"n\">z</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mul_right_inv</span><span class=\"o\">]</span>\n    <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">z</span><span class=\"bp\">⁻¹</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mul_assoc</span><span class=\"o\">]</span>\n    <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">z</span><span class=\"bp\">⁻¹</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">hx</span><span class=\"o\">]</span>\n    <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"bp\">*</span> <span class=\"n\">z</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mul_assoc</span><span class=\"o\">]</span>\n    <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mul_right_inv</span><span class=\"o\">]</span>\n    <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"n\">mul_one</span> <span class=\"n\">y</span>\n</code></pre></div>",
        "id": 392727732,
        "sender_full_name": "Dan Velleman",
        "timestamp": 1695493415
    },
    {
        "content": "<p>Okay, why there is no forall quantifier for f,g,h inside associativity, identity and inverse properties of Group G?</p>",
        "id": 392727933,
        "sender_full_name": "Alexander Belov",
        "timestamp": 1695493592
    },
    {
        "content": "<p>Is it autoImplicit?<br>\n[somebody please clarify; I turn autoImplicit off in all my projects]</p>\n<p>PS: In the examples (as well as in all theorems and lemmas) all terms before <code>:</code> are forall-quantified.<br>\nFor example <code>lemma foo (c : Char) : something</code> and <code>lemma foo : ∀ c : Char, something</code> are equivalent.<br>\nThey behave identically on the outside.<br>\nHowever, in their proofs, the former start with <code>c</code> already in the context.</p>",
        "id": 392728213,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1695493862
    },
    {
        "content": "<p>Even in the two examples provided x y z are being used without forall quantifier. Has it always been like that in lean? I think I remember seeing forall quantifiers several years ago.</p>",
        "id": 392728509,
        "sender_full_name": "Alexander Belov",
        "timestamp": 1695494131
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"216358\">Alexander Belov</span> has marked this topic as resolved.</p>",
        "id": 392728871,
        "sender_full_name": "Notification Bot",
        "timestamp": 1695494493
    },
    {
        "content": "<p>The same things happens in informal mathematics written for humans.  You could state the theorem in the example above in two ways:</p>\n<ol>\n<li>\n<p>Let G be a group, and let x, y, and z be elements of G such that x * z = y * z.  Then x = y.<br>\n  The proof would be essentially as above.</p>\n</li>\n<li>\n<p>Let G be a group.  Then for all x, y, and z in G, if x * z = y * z then x = y.<br>\n  You would probably start the proof with \"Let x, y, and z be arbitrary elements of G and suppose x * z = y * z.\"  The rest of the proof would be as above.<br>\nYou can do it either way in Lean.</p>\n</li>\n</ol>",
        "id": 392728877,
        "sender_full_name": "Dan Velleman",
        "timestamp": 1695494502
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"216358\">Alexander Belov</span> has marked this topic as unresolved.</p>",
        "id": 392729057,
        "sender_full_name": "Notification Bot",
        "timestamp": 1695494644
    },
    {
        "content": "<p>Okay, what still confuses me a little bit is why elements f,g,h are omitted in the beginning of assoc property. Should not it look like <code>assoc : (f g h : G) : (circ f g) h = circ f (circ g circ h)</code>?</p>",
        "id": 392729136,
        "sender_full_name": "Alexander Belov",
        "timestamp": 1695494725
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Std</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.Group.Defs</span>\n\n<span class=\"sd\">/-- A type `G` is called a `Group` if it has the following data and proofs. -/</span>\n<span class=\"kd\">class</span> <span class=\"n\">MyGroup</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"sd\">/-- The identity element `e`. -/</span>\n  <span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">G</span>\n  <span class=\"sd\">/-- The composition of two group elements. -/</span>\n  <span class=\"n\">circ</span> <span class=\"o\">:</span> <span class=\"n\">G</span> <span class=\"bp\">→</span> <span class=\"n\">G</span> <span class=\"bp\">→</span> <span class=\"n\">G</span>\n  <span class=\"sd\">/-- Associativity. -/</span>\n  <span class=\"n\">assoc</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">circ</span> <span class=\"o\">(</span><span class=\"n\">circ</span> <span class=\"n\">f</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"n\">h</span> <span class=\"bp\">=</span> <span class=\"n\">circ</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">circ</span> <span class=\"n\">g</span> <span class=\"n\">h</span><span class=\"o\">)</span>\n  <span class=\"sd\">/-- Left identity. -/</span>\n  <span class=\"n\">e_circ</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">circ</span> <span class=\"n\">e</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">f</span>\n  <span class=\"sd\">/-- Right identity. -/</span>\n  <span class=\"n\">circ_e</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">circ</span> <span class=\"n\">f</span> <span class=\"n\">e</span> <span class=\"bp\">=</span> <span class=\"n\">f</span>\n  <span class=\"sd\">/-- The inverse operation. -/</span>\n  <span class=\"n\">inv</span> <span class=\"o\">:</span> <span class=\"n\">G</span> <span class=\"bp\">→</span> <span class=\"n\">G</span>\n  <span class=\"sd\">/-- Left inverse. -/</span>\n  <span class=\"n\">circ_inv_left</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">circ</span> <span class=\"o\">(</span><span class=\"n\">inv</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">e</span>\n  <span class=\"sd\">/-- Right inverse. -/</span>\n  <span class=\"n\">circ_inv_right</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">circ</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">inv</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">e</span>\n</code></pre></div>",
        "id": 392729460,
        "sender_full_name": "Alexander Belov",
        "timestamp": 1695495079
    },
    {
        "content": "<p>This seems to work.</p>",
        "id": 392729465,
        "sender_full_name": "Alexander Belov",
        "timestamp": 1695495089
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"216358\">Alexander Belov</span> has marked this topic as resolved.</p>",
        "id": 392729466,
        "sender_full_name": "Notification Bot",
        "timestamp": 1695495092
    },
    {
        "content": "<blockquote>\n<p>Okay, what still confuses me a little bit is why elements f,g,h are omitted in the beginning of assoc property. Should not it look like assoc : (f g h : G) : (circ f g) h = circ f (circ g circ h)?</p>\n</blockquote>\n<p>I think this is the \"autoImplicit\" feature mentioned by Martin. Basically, Lean automatically universally quantifies over all free variables (which humans also do in informal math).</p>",
        "id": 392729534,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1695495138
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"216358\">Alexander Belov</span> has marked this topic as unresolved.</p>",
        "id": 393795324,
        "sender_full_name": "Notification Bot",
        "timestamp": 1695930739
    },
    {
        "content": "<p>How to show that (Z, +) , (Q/{0}, *) is a group and (N, +) is not in Lean?</p>",
        "id": 393795659,
        "sender_full_name": "Alexander Belov",
        "timestamp": 1695930866
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"216358\">Alexander Belov</span> has marked this topic as unresolved.</p>",
        "id": 393795772,
        "sender_full_name": "Notification Bot",
        "timestamp": 1695930921
    },
    {
        "content": "<p>It depends how much you want to define yourself (are you happy using mathlib's definition of addition for example?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">MyGroup</span> <span class=\"n\">ℤ</span> <span class=\"n\">where</span>\n  <span class=\"n\">e</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n  <span class=\"n\">circ</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"c1\">-- using mathlibs add which is a bit circular....</span>\n  <span class=\"n\">assoc</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n  <span class=\"c1\">-- ... etc for the other fields</span>\n</code></pre></div>",
        "id": 393824190,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1695947279
    },
    {
        "content": "<p>Yes, I just want to see examples how one does such things in Lean. Math library built ins are fine</p>",
        "id": 393839897,
        "sender_full_name": "Alexander Belov",
        "timestamp": 1695955808
    },
    {
        "content": "<p>Here's how to show that (Z,+) is a group in Lean:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">AddCommGroup</span> <span class=\"n\">ℤ</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">infer_instance</span>\n</code></pre></div>\n<p>Your question is far too imprecise to have a sensible answer. What do you mean by Z? What do you mean by addition on Z? You want to define these things yourself or use mathlib's definition? The proof that addition on Z is associative is a horrible 8 case case split because Z is defined in a really horrible way in mathlib as the disjoint union of two copies of the naturals.</p>\n<p>Let me turn the question on its head. Say you read in a textbook the question \"prove that (Z,+) is a group.\" What would you write? I'm pretty sure that whatever you write can be translated into Lean but this question is far more ill-posed than I suspect you think.</p>",
        "id": 393880861,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1695974685
    },
    {
        "content": "<p>Okay, got that. Too early for questions like that.</p>",
        "id": 394226034,
        "sender_full_name": "Alexander Belov",
        "timestamp": 1696173660
    }
]