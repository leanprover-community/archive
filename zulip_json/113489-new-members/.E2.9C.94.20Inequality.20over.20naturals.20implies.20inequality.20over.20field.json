[
    {
        "content": "<p>I have some finite field <code>k</code>, and a natural number n \\neq 0. How would I go about proving that n as a field element is non-zero? This seems very simple, but I think I've just not been looking in the right places. Here's a MWE:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.field.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.fintype.basic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">k</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">k</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">k</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hn</span><span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hn2</span><span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"n\">fintype.card</span> <span class=\"n\">k</span><span class=\"o\">):</span> <span class=\"k\">let</span> <span class=\"n\">n'</span><span class=\"o\">:</span> <span class=\"n\">k</span> <span class=\"o\">:=</span> <span class=\"n\">n</span> <span class=\"k\">in</span> <span class=\"n\">n'</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">library_search</span><span class=\"o\">,</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 343818768,
        "sender_full_name": "Pratyush Mishra",
        "timestamp": 1679539666
    },
    {
        "content": "<p>(Apologies for the very simple question!)</p>",
        "id": 343818891,
        "sender_full_name": "Pratyush Mishra",
        "timestamp": 1679539782
    },
    {
        "content": "<p>First off, I'd remove the<code>let</code> and make the goal <code>(n : k) \\ne 0</code></p>",
        "id": 343867871,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1679552741
    },
    {
        "content": "<p>Second, <code>library_search</code> can only take a single step, so you need to write the hypotheses in the form that are most likely to be expected (this takes some experience). In this case, I'd expect <code>\\not (fintype.card \\mid n)</code>, so try putting <code>have : \\not (fintype.card \\mid n) := sorry,</code> before the search</p>",
        "id": 343869148,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1679552986
    },
    {
        "content": "<p>This statement isn't true. Consider a finite field not of the form <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">Z</mi><mi mathvariant=\"normal\">/</mi><mi>p</mi><mi mathvariant=\"double-struck\">Z</mi></mrow><annotation encoding=\"application/x-tex\">\\Z/p\\Z</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathbb\">Z</span><span class=\"mord\">/</span><span class=\"mord mathnormal\">p</span><span class=\"mord mathbb\">Z</span></span></span></span>.</p>",
        "id": 343905088,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1679560743
    },
    {
        "content": "<p>I guess that's another reason for it not to be in the library</p>",
        "id": 343907275,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1679561399
    },
    {
        "content": "<p>Here's a corrected statement and proof.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.char_p.basic</span>\n\n<span class=\"c1\">-- if a ring has characteristic `ch` then a non-zero natural less than `ch` can't be zero in the ring.</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">k</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">k</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">ch</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">char_p</span> <span class=\"n\">k</span> <span class=\"n\">ch</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hn</span><span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hn2</span><span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"n\">ch</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">suffices</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">assumption_mod_cast</span><span class=\"o\">,</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">char_p.int_cast_eq_zero_iff</span> <span class=\"n\">k</span> <span class=\"n\">ch</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">norm_cast</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">nat.le_of_dvd</span> <span class=\"o\">(</span><span class=\"n\">nat.pos_of_ne_zero</span> <span class=\"n\">hn</span><span class=\"o\">)</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">linarith</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 343921235,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1679565340
    },
    {
        "content": "<p>Hmm, interesting that you had to go through the integers. Do we need a nat_cast variant of the main lemma?</p>",
        "id": 343933955,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1679567789
    },
    {
        "content": "<p>I couldn't see a <a href=\"https://leanprover-community.github.io/mathlib_docs/find/char_p.nat_cast_eq_zero_iff\">docs#char_p.nat_cast_eq_zero_iff</a>, only <a href=\"https://leanprover-community.github.io/mathlib_docs/find/char_p.int_cast_eq_zero_iff\">docs#char_p.int_cast_eq_zero_iff</a>.</p>",
        "id": 343935707,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1679568171
    },
    {
        "content": "<p>Oh, it's <a href=\"https://leanprover-community.github.io/mathlib_docs/find/char_p.cast_eq_zero_iff\">docs#char_p.cast_eq_zero_iff</a></p>",
        "id": 343935838,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1679568192
    },
    {
        "content": "<p>Which I guess probably should be renamed to have a <code>nat_</code> prefix</p>",
        "id": 343935977,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1679568224
    },
    {
        "content": "<p>I should have known really</p>",
        "id": 344107126,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1679607677
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.char_p.basic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">k</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">k</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">ch</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">char_p</span> <span class=\"n\">k</span> <span class=\"n\">ch</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hn</span><span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hn2</span><span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"n\">ch</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">char_p.cast_eq_zero_iff</span> <span class=\"n\">k</span> <span class=\"n\">ch</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">nat.le_of_dvd</span> <span class=\"o\">(</span><span class=\"n\">nat.pos_of_ne_zero</span> <span class=\"n\">hn</span><span class=\"o\">)</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">linarith</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 344115275,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1679611025
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/Inequality.20over.20naturals.20implies.20inequality.20over.20field/near/343905088\">said</a>:</p>\n<blockquote>\n<p>This statement isn't true. Consider a finite field not of the form <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">Z</mi><mi mathvariant=\"normal\">/</mi><mi>p</mi><mi mathvariant=\"double-struck\">Z</mi></mrow><annotation encoding=\"application/x-tex\">\\Z/p\\Z</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathbb\">Z</span><span class=\"mord\">/</span><span class=\"mord mathnormal\">p</span><span class=\"mord mathbb\">Z</span></span></span></span>.</p>\n</blockquote>\n<p>Yes I came to the same conclusion myself a little bit after asking the question  <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span> </p>\n<p>Thank you for the fixed version! After I realized the bug in my theorem I switched to just working with <code>zmod p</code> (that's all I needed), and wrote down the following proof  (which is less general than yours):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic.linarith</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.zmod.basic</span>\n\n<span class=\"kd\">example</span>\n  <span class=\"o\">{</span><span class=\"n\">p</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span>\n  <span class=\"o\">[</span><span class=\"n\">pp</span><span class=\"o\">:</span> <span class=\"n\">fact</span> <span class=\"n\">p.prime</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hn</span><span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hn_lt_p</span><span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"n\">p</span><span class=\"o\">)</span>\n  <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"n\">zmod</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">by_contra</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">zmod.val_eq_zero</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">zmod.val_cast_of_lt</span> <span class=\"n\">hn_lt_p</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">linarith</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>\n</code></pre></div>",
        "id": 344132234,
        "sender_full_name": "Pratyush Mishra",
        "timestamp": 1679619439
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"596810\">Pratyush Mishra</span> has marked this topic as resolved.</p>",
        "id": 344132252,
        "sender_full_name": "Notification Bot",
        "timestamp": 1679619447
    }
]