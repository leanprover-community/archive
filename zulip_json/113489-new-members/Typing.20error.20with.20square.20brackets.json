[
    {
        "content": "<p>The following is not type checking, and it's telling me that the type I have is <code>?m_1[g ^ m.val * h ^ d.val] ℕ : Type ?</code>.  I don't quite understand the syntax in the error: Why is <code>g ^ m.val * h ^ d.val</code> inside square brackets? Is that term being treated as a type class in some way?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.zmod.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">probability.probability_mass_function.monad</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">G</span><span class=\"o\">]</span>\n          <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span>\n          <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">verify</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">zmod</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">zmod</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">c'</span> <span class=\"o\">:=</span> <span class=\"n\">g</span><span class=\"bp\">^</span><span class=\"n\">m.val</span> <span class=\"bp\">*</span> <span class=\"n\">h</span><span class=\"bp\">^</span><span class=\"n\">d.val</span><span class=\"o\">,</span>\n  <span class=\"n\">pure</span> <span class=\"o\">(</span><span class=\"k\">if</span> <span class=\"n\">c'</span> <span class=\"bp\">=</span> <span class=\"n\">c</span> <span class=\"k\">then</span> <span class=\"mi\">1</span> <span class=\"k\">else</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 340883764,
        "sender_full_name": "Ashley Blacquiere",
        "timestamp": 1678460073
    },
    {
        "content": "<p>I think it means \"a metavariable that depends on the bit between the square brackets\"</p>",
        "id": 340884781,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1678460316
    },
    {
        "content": "<p>Is there some way to coerce the <code>c'</code> term to be an element of <code>G</code> then?</p>",
        "id": 340887808,
        "sender_full_name": "Ashley Blacquiere",
        "timestamp": 1678461030
    },
    {
        "content": "<p>What are you trying to do really? The code confuses me a bit, I'm not sure if Prop is a monad, so I don't know how the <code>do</code> notation will work, and what are 1 and 0?</p>",
        "id": 340891563,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1678461819
    },
    {
        "content": "<p>I've <a href=\"https://github.com/ashandoak/cryptolib\">forked a Lean project</a> that proves security properties for ElGamal encryption and I'm attempting to extend it to <a href=\"https://crypto.stackexchange.com/questions/64437/what-is-a-pedersen-commitment\">Pedersen</a> and ElGamal commitments as part of an MSc project. The original project was part of an MSc thesis too, and the author used the pmf monad extensively as sort of a proxy for a <a href=\"https://cstheory.stackexchange.com/questions/1370/shallow-versus-deep-embeddings\">shallow embedding</a> for his game-based security proofs.</p>\n<p>As for what <em>specifically</em> I'm trying to do, the MWE above is a verification function intended to 'accept' or 'reject' (i.e. boolean 1 or 0) a given commit (<code>c : G</code>) given the public parameter (<code>h:G</code>) and the message and opening value (<code>m:zmod q</code> and <code>d:zmod q</code>) . But I could be approaching this completely the wrong way...</p>",
        "id": 340908905,
        "sender_full_name": "Ashley Blacquiere",
        "timestamp": 1678465855
    },
    {
        "content": "<p>If you're writing a pure function you don't really need the do notaiton, then it sounds like you want something like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.zmod.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">probability.probability_mass_function.monad</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">G</span><span class=\"o\">]</span>\n          <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span>\n          <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">verify</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">zmod</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">zmod</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">bool</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"n\">c'</span> <span class=\"o\">:=</span> <span class=\"n\">g</span><span class=\"bp\">^</span><span class=\"n\">m.val</span> <span class=\"bp\">*</span> <span class=\"n\">h</span><span class=\"bp\">^</span><span class=\"n\">d.val</span> <span class=\"k\">in</span> <span class=\"k\">if</span> <span class=\"n\">c'</span> <span class=\"bp\">=</span> <span class=\"n\">c</span> <span class=\"k\">then</span> <span class=\"n\">tt</span> <span class=\"k\">else</span> <span class=\"n\">ff</span>\n</code></pre></div>\n<p>does that fit with your application?</p>",
        "id": 340909489,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1678466006
    },
    {
        "content": "<p>It type checks, so that's good. I'll have to think about whether it'll fit with the rest. There are many lines of code that I am trying to conceptually untangle, so the 'right' approach isn't quite clear to me yet. This has been helpful though. Thanks!</p>",
        "id": 340916122,
        "sender_full_name": "Ashley Blacquiere",
        "timestamp": 1678467562
    }
]