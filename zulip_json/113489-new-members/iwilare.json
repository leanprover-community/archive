[
    {
        "content": "<p>Hello!</p>\n<p>I'm Andrea, I'm a PhD student at Tallinn University of Technology. I'm quite experienced in Agda and type theory, I'm looking forward to try and experiment with Lean a bit, especially in the CategoryTheory section and maybe make some contributions!</p>\n<p>I would like at some point to make some PRs about coends, categorical logic, and fibrations. For now I only have a small contribution ready where I just give a definition of Subcategories, which I couldn't find in the library...  currently have it at this fork: </p>\n<p><a href=\"https://github.com/iwilare/mathlib4/tree/subcategory\">https://github.com/iwilare/mathlib4/tree/subcategory</a><br>\n<a href=\"https://github.com/iwilare/mathlib4/blob/subcategory/Mathlib/CategoryTheory/Subcategory.lean\">https://github.com/iwilare/mathlib4/blob/subcategory/Mathlib/CategoryTheory/Subcategory.lean</a></p>\n<p>I might have at some point some questions on the best practices in Lean, coming from Agda... (like, is there such a thing as proper holes in Lean 4? Or am I doomed to just use <code>by sorry</code> everywhere just to get the type of a hole?)</p>\n<p>Nice to meet you people! <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 394623540,
        "sender_full_name": "Andrea Laretto",
        "timestamp": 1696335576
    },
    {
        "content": "<p>I assume you're aware of <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=FullSubcategory#doc\">docs#FullSubcategory</a>, but it's not what you want?</p>",
        "id": 394625944,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1696336430
    },
    {
        "content": "<p>Yes, I saw that file, but no, I'm precisely trying to relax the <code>Full</code>ness requirement and just have something around the lines of <a href=\"https://ncatlab.org/nlab/show/subcategory\">https://ncatlab.org/nlab/show/subcategory</a></p>",
        "id": 394626506,
        "sender_full_name": "Andrea Laretto",
        "timestamp": 1696336636
    },
    {
        "content": "<p>Welcome! If you'd like to make PRs, the best is to directly work on the main <code>leanprover-community/mathlib4</code> repository. I can give you permission to do so on Github. Just to confirm: <code>iwilare</code> is your own username?</p>\n<p><span class=\"user-mention silent\" data-user-id=\"568205\">Andrea Laretto</span> <a href=\"#narrow/stream/113489-new-members/topic/iwilare/near/394623540\">said</a>:</p>\n<blockquote>\n<p>is there such a thing as proper holes in Lean 4? Or am I doomed to just use <code>by sorry</code> everywhere just to get the type of a hole?</p>\n</blockquote>\n<p>Yes! First of all <code>sorry</code> is also a term that means exactly the same as the tactic call <code>by sorry</code>, saving you a few characters :) More like Agda holes are <code>_</code> and <code>?some_name</code>, either Lean will figure these out through unification, or leave as a hole with an error.</p>",
        "id": 394632037,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1696338510
    },
    {
        "content": "<p>Yes, <code>iwilare</code> is my username, thank you!</p>\n<p>I see, that's pretty useful; I have another small question: another thing that I miss a lot from Agda is not being able to inspect the WHNF of terms; I know of <code>simp_all</code> and <code>reduce</code>, but is there any way to simplify everything in the context? Full automatic unfolding of definitions would also be enough... especially for Hom, since I'm working within CategoryTheory, using <code>unfold at</code> seems to lead to too many unfoldings required, and I'm not sure that making everything as <code>@[simp]</code> is the best option.</p>",
        "id": 394636317,
        "sender_full_name": "Andrea Laretto",
        "timestamp": 1696339830
    },
    {
        "content": "<p>Invite sent! <a href=\"https://github.com/leanprover-community/mathlib4/invitations\">https://github.com/leanprover-community/mathlib4/invitations</a></p>",
        "id": 394639593,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1696340880
    },
    {
        "content": "<p>About unfolding: this is something I had to unlearn coming from Agda. Unfolding in Lean is supposed to be much more of an explicit decision than something that happens automatically, and if the library is correctly designed you should almost never have to unfold things. I'm not so familiar with the category theory library but the general idea is indeed that you mark enough things as <code>@[simp]</code> that you never have to use the <code>unfold</code> tactic.</p>",
        "id": 394640623,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1696341179
    },
    {
        "content": "<p>Thank you! I see, I think it's somewhat of a reasonable decision in order to avoid the \"too simplified\" problem... so I guess there's no way around <code>by simp_all</code> to check the simplified goal types and then switch back to term mode to actually fill in the proof? I was hoping there would be some global flag that could be set to fully reduce stuff (or at least some integration with the vscode extension)</p>",
        "id": 394643338,
        "sender_full_name": "Andrea Laretto",
        "timestamp": 1696341930
    },
    {
        "content": "<p><del>We should probably have <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=CategoryTheory.Subgroupoid#doc\">docs#CategoryTheory.Subgroupoid</a> extend Subcategory when the latter is in mathlib ...</del> Oh, I guess not, since a subgroupoid can be empty ...</p>",
        "id": 394694534,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1696360428
    },
    {
        "content": "<p>I would think that the definition of <code>Subcategory</code> could be slightly closer to the current mathlib definitions in <code>CategoryTheory.FullSubcategory</code>. If we have a category <code>D</code>, then the data for a subcategory of <code>D</code> could be that of a map <code>F : C → D</code> and a condition <code>∀ (X Y : C), Set (F X ⟶ F Y)</code> which satisfies the compatibilities with identities and composition. Then, a suitable type synonym for <code>C</code> can be equipped with a category structure similarly as <code>InducedCategory.category</code> is defined.</p>",
        "id": 394858579,
        "sender_full_name": "Joël Riou",
        "timestamp": 1696431082
    },
    {
        "content": "<p>I would think <code> → Prop</code> is more natural than <code>Set</code> there, but I guess your approach is more similar to things like Submonoid`</p>",
        "id": 394869494,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1696434419
    },
    {
        "content": "<p>I do not see the difference between <code>∀ (X Y : C), Set (F X ⟶ F Y)</code> and <code>∀ (X Y : C), (F X ⟶ F Y) → Prop</code>. What I suggest here is to allow any <code>C</code> which maps to <code>D</code> rather than only subtypes of <code>D</code>, similarly as full subcategories are defined in mathlib.</p>",
        "id": 394875517,
        "sender_full_name": "Joël Riou",
        "timestamp": 1696436429
    }
]