[
    {
        "content": "<p>Here's a MWE: </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"n\">pp1</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"n\">unit</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"err\">∅</span> <span class=\"bp\">∨</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"o\">{</span><span class=\"err\">∅</span><span class=\"o\">}</span> <span class=\"bp\">∨</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"o\">{{()}}</span> <span class=\"bp\">∨</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"o\">{</span><span class=\"err\">∅</span><span class=\"o\">,</span> <span class=\"o\">{()}}</span> <span class=\"o\">:=</span>\n<span class=\"n\">sorry</span>\n</code></pre></div>\n\n\n<p>Golf away! (This came up in the middle of some category theory which I'm hoping to make into a kata)</p>",
        "id": 197082611,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1589149721
    },
    {
        "content": "<p><code>dec_trivial</code> should work but doesn't seem to</p>",
        "id": 197083348,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589150534
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">fintype</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">fintype</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">apply_instance</span>\n</code></pre></div>\n\n\n<p>doesn't either.</p>",
        "id": 197083359,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589150560
    },
    {
        "content": "<p>that instance is classical - does that affect things?</p>",
        "id": 197083411,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1589150678
    },
    {
        "content": "<p>they don't work because <code>set X</code> doesn't have decidable equality</p>",
        "id": 197083412,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1589150684
    },
    {
        "content": "<p>You need decidable equality I think?</p>",
        "id": 197083414,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589150687
    },
    {
        "content": "<p>Then why doesn't dec_trivial work for Bhavik's lemma?</p>",
        "id": 197083421,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589150715
    },
    {
        "content": "<p>that doesn't sound right though</p>",
        "id": 197083423,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589150717
    },
    {
        "content": "<p>the statement <code>x = \\empty</code> is undecidable</p>",
        "id": 197083424,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1589150718
    },
    {
        "content": "<p><code>example (X : Type) [decidable_eq X] [fintype X] : fintype (set X) := by apply_instance</code> works</p>",
        "id": 197083429,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589150734
    },
    {
        "content": "<p>because <code>x</code> can be the set of counter-examples to Riemann's hypothesis</p>",
        "id": 197083430,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1589150737
    },
    {
        "content": "<p>You should not need decidable equality to produce this set, it's just <code>powerset fintype.univ</code></p>",
        "id": 197083435,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589150753
    },
    {
        "content": "<p>Aah, but maybe it doesn't have decidable equality!</p>",
        "id": 197083477,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589150769
    },
    {
        "content": "<p>I'm totally okay with noncomputable/classical proofs for this, by the way</p>",
        "id": 197083483,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1589150790
    },
    {
        "content": "<p><code>example (X : Type) [decidable_eq X] [fintype X] : decidable_eq (set X) := by apply_instance -- fails</code></p>",
        "id": 197083485,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589150792
    },
    {
        "content": "<p>The only requirement of <code>fintype</code> is that you have a constructible list of elements that are all (classically) provably exhaustive and distinct from each other</p>",
        "id": 197083490,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589150821
    },
    {
        "content": "<p>so <code>set (set unit)</code> might not be a fintype after all :-) in constructiveland</p>",
        "id": 197083491,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589150822
    },
    {
        "content": "<p>exactly</p>",
        "id": 197083500,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1589150872
    },
    {
        "content": "<p>An instance of <code>fintype (set (set unit))</code> is <code>&lt;{univ, empty}, &lt;classical proof&gt;&gt;</code></p>",
        "id": 197083502,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589150876
    },
    {
        "content": "<p>in <code>data.fintype</code> the instance <code>set.fintype</code> is given:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">instance</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">fintype</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">fintype</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">pi</span><span class=\"bp\">.</span><span class=\"n\">fintype</span>\n</code></pre></div>",
        "id": 197083539,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1589150894
    },
    {
        "content": "<p>I see, if that's the proof then that explains it</p>",
        "id": 197083544,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589150926
    },
    {
        "content": "<p>there is another proof that avoids the assumption</p>",
        "id": 197083546,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589150939
    },
    {
        "content": "<p>Mario's instance above has one too many <code>set</code>s.</p>",
        "id": 197083716,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589151242
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">instance</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">fintype</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">fintype</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">⟨</span><span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">univ</span> <span class=\"n\">α</span> <span class=\"bp\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">powerset</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"bp\">⟨</span><span class=\"n\">coe</span><span class=\"o\">,</span> <span class=\"n\">to_set_injective</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">s</span><span class=\"o\">,</span>\n  <span class=\"k\">by</span> <span class=\"n\">classical</span><span class=\"bp\">;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">subset_univ</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"bp\">⟨</span><span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">univ</span><span class=\"bp\">.</span><span class=\"n\">filter</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">simp</span><span class=\"bp\">;</span> <span class=\"n\">refl</span><span class=\"bp\">⟩⟩</span>\n</code></pre></div>",
        "id": 197083782,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589151438
    },
    {
        "content": "<p>which is at least enough to prove</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"bp\">#</span><span class=\"kn\">eval</span> <span class=\"n\">fintype</span><span class=\"bp\">.</span><span class=\"n\">card</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"n\">unit</span><span class=\"o\">))</span> <span class=\"c1\">-- 4</span>\n</code></pre></div>\n\n\n<p>(which indeed shows that I don't have enough <code>set</code>s in my instance)</p>",
        "id": 197083836,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589151566
    }
]