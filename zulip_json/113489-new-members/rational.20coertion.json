[
    {
        "content": "<p>having some trouble prooving this </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">theorem</span> <span class=\"n\">simple_01</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"o\">:</span>  <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"err\">↑</span><span class=\"o\">(</span><span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"n\">num</span> <span class=\"bp\">*</span> <span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"n\">num</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"err\">↑</span><span class=\"o\">(</span><span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"n\">num</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"err\">↑</span><span class=\"o\">(</span><span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"n\">num</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>\n\n\n<p>there is some coercion problem</p>",
        "id": 196246519,
        "sender_full_name": "Sayantan Majumdar",
        "timestamp": 1588630625
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/wiki/Minimum-Working-Example-&#40;MWE&#41;\" title=\"https://github.com/leanprover-community/mathlib/wiki/Minimum-Working-Example-&#40;MWE&#41;\">#mwe</a>? This doesn't compile for me. Did you try <code>by norm_cast</code>?</p>",
        "id": 196247115,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588630982
    },
    {
        "content": "<p>no, will now<br>\nI was trying to prove</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"bp\">*</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</code></pre></div>",
        "id": 196247209,
        "sender_full_name": "Sayantan Majumdar",
        "timestamp": 1588631041
    },
    {
        "content": "<p>it talks about class_instance resolution dept<br>\nhave to increase class.instance_max_dept</p>",
        "id": 196247509,
        "sender_full_name": "Sayantan Majumdar",
        "timestamp": 1588631200
    },
    {
        "content": "<p><code>rat.cast_mul</code></p>",
        "id": 196247681,
        "sender_full_name": "Sayantan Majumdar",
        "timestamp": 1588631316
    },
    {
        "content": "<p>thanks, fixed it with <code>int.cast_mul</code> and <code>nat.cast_mul</code> for <code>rat.num</code> and <code>rat.denom</code> respectively</p>",
        "id": 196248471,
        "sender_full_name": "Sayantan Majumdar",
        "timestamp": 1588631871
    },
    {
        "content": "<p>All these <code>cast_mul</code> lemmas are known to the <code>norm_cast</code> tactic, which should in theory solve all problems of this nature in one fell swoop. I still don't know what the up-arrows signify in your original question, they are a coercion but you haven't given enough information to enable people to work out where you're coercing.</p>",
        "id": 196250754,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588633523
    }
]