[
    {
        "content": "<p>Hey all, I'm currently trying to improve my understanding of how to use Lean by building a mental model of the proof state at any given time. (This is similar to how, when you learn an imperative programming language, you'll learn to track the values of all the variables currently in scope etc.) I <em>think</em> the \"Lean Infoview\" is trying to do all this work for me, which is great, but I still find myself failing to correctly predict or understand what it's saying. For example, when I have the cursor placed inside the word <code>calc</code>, sometimes it says \"No goals\" by other times it doesn't.</p>\n<p>Is there any kind of guide I should read on how to think about this?</p>",
        "id": 393745252,
        "sender_full_name": "Alex Altair",
        "timestamp": 1695913514
    },
    {
        "content": "<p>What confuses you is that tactic state display is very sensitive to where you put your cursor. Since Lean 4 is indentation sensitive, moving your cursor inside a line containing only spaces can drastically change the displayed tactic state. We would need an example that you find confusing to be more specific.</p>",
        "id": 393757029,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1695916720
    },
    {
        "content": "<p>There are two (easily confused) pieces of information you can see in the info view too, the \"tactic state\" and the \"expected type\". If you put your cursor at the beginning of an expression, you can see an expected type (which includes the local context for that type), and if you put your cursor at the beginning of a tactic, you can see the tactic state right before that tactic is executed.</p>\n<p>The expected type view is sort of like a tactic state with exactly one goal.</p>",
        "id": 393757725,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1695916927
    },
    {
        "content": "<p>That is indeed another source of confusion independent from what I was describing.</p>",
        "id": 393759604,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1695917405
    },
    {
        "content": "<p>It would help a lot if the \"expected type\" pane had a different border or background color to the current goal; in a long goal state where the headings are offscreen, it's very easy to get confused</p>",
        "id": 393764961,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1695919218
    },
    {
        "content": "<p>Oh nice, thanks! I'm not sure how much the \"Expected type\" pane has been messing me up, but I'll keep an eye on it now</p>",
        "id": 393765493,
        "sender_full_name": "Alex Altair",
        "timestamp": 1695919429
    },
    {
        "content": "<p>Note there is a VSCode extension setting asking to hide the Expected type panel by default (you can still click on its title to reveal it).</p>",
        "id": 393765594,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1695919463
    },
    {
        "content": "<p>What does it mean in the tactic state pane when something is highlighted red or green? Does it mean something like \"the context that your cursor is in has just destroyed/created this object\"?</p>",
        "id": 393766543,
        "sender_full_name": "Alex Altair",
        "timestamp": 1695919850
    },
    {
        "content": "<p>Yes</p>",
        "id": 393766613,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1695919884
    },
    {
        "content": "<p>Okay I managed to figure out the next several confusions by thinking slightly harder, and now here's an example that I'm stuck on. This exercise is from Macbeth's \"The mechanics of proof\" book</p>",
        "id": 393775959,
        "sender_full_name": "Alex Altair",
        "timestamp": 1695923388
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/f8mVic16kOJA4wRukcxxYngn/Screenshot-from-2023-09-28-10-46-30.png\">Screenshot-from-2023-09-28-10-46-30.png</a><br>\nHere, my cursor is on line 56, just after the :=</p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/f8mVic16kOJA4wRukcxxYngn/Screenshot-from-2023-09-28-10-46-30.png\" title=\"Screenshot-from-2023-09-28-10-46-30.png\"><img src=\"/user_uploads/3121/f8mVic16kOJA4wRukcxxYngn/Screenshot-from-2023-09-28-10-46-30.png\"></a></div>",
        "id": 393776057,
        "sender_full_name": "Alex Altair",
        "timestamp": 1695923419
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/EKZFRDYPQP7yP9dcGoAVoItk/Screenshot-from-2023-09-28-10-46-41.png\">Screenshot-from-2023-09-28-10-46-41.png</a><br>\nAnd here, my cursor is one character over, just before the <code>by</code></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/EKZFRDYPQP7yP9dcGoAVoItk/Screenshot-from-2023-09-28-10-46-41.png\" title=\"Screenshot-from-2023-09-28-10-46-41.png\"><img src=\"/user_uploads/3121/EKZFRDYPQP7yP9dcGoAVoItk/Screenshot-from-2023-09-28-10-46-41.png\"></a></div>",
        "id": 393776124,
        "sender_full_name": "Alex Altair",
        "timestamp": 1695923444
    },
    {
        "content": "<p>My question is, why does <code>hxm2</code> pop out of scope between those? Why does <code>hxm1</code> show back up into the tactic state? Why didn't <code>hxm1</code> stay gone after it was used in the previous <code>calc</code> block?</p>",
        "id": 393776270,
        "sender_full_name": "Alex Altair",
        "timestamp": 1695923512
    },
    {
        "content": "<p>I think when your cursor is immediately after the <code>:=</code> you're seeing the tactic state <em>after</em> the <code>exact calc ...</code></p>",
        "id": 393776643,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1695923616
    },
    {
        "content": "<p>I tend to only trust the infoview if my cursor is immediately before a tactic or an expression. If it's somewhere in the middle of some other syntax (and especially if there is whitespace after the cursor) it might be giving you information about somewhere else.</p>",
        "id": 393776912,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1695923715
    },
    {
        "content": "<p>What is that random <code>exact</code> on line 53? you say \"why doesn't <code>hxm1</code> stay gone\" but you didn't close the <code>hxm1</code> goal yet as far as I can see.</p>",
        "id": 393777020,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1695923762
    },
    {
        "content": "<p>Something you could try is hovering your mouse over both locations -- do you see a faint blue highlighting in a region of the source code? When your mouse is right at the end of <code>:=</code> I expect you'll see the whole <code>calc</code> block is highlighted, or at least a whole clause of the calc block. That indicates you might be getting some non-local information.</p>",
        "id": 393777145,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1695923811
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/Understanding.20proof.20state/near/393777020\">said</a>:</p>\n<blockquote>\n<p>What is that random <code>exact</code> on line 53? you say \"why doesn't <code>hxm1</code> stay gone\" but you didn't close the <code>hxm1</code> goal yet as far as I can see.</p>\n</blockquote>\n<p>If I put my cursor immediately before the random <code>exact</code>, then it looks to me like it's showing that it will close the goal involving <code>hxm1</code> (by having a vertical red line in front of it in the tactic state)</p>",
        "id": 393777346,
        "sender_full_name": "Alex Altair",
        "timestamp": 1695923885
    },
    {
        "content": "<p><code>exact</code>by itself  won't do anything. The syntax is <code>exact h</code>. Right now you're doing <code>exact calc (something which assume hxm2 exists already)</code> to close the first goal.</p>",
        "id": 393777437,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1695923933
    },
    {
        "content": "<p>And then after it, in front of the <code>have</code> on line 54, the tactic state shows only the goal involving hxm2</p>",
        "id": 393777450,
        "sender_full_name": "Alex Altair",
        "timestamp": 1695923938
    },
    {
        "content": "<p>Ah, thank you, I was implicitly assuming that the newline did something there</p>",
        "id": 393777591,
        "sender_full_name": "Alex Altair",
        "timestamp": 1695923992
    },
    {
        "content": "<p>I think the answer to \"my syntax is totally screwed on line 53, why I am I confused on line 56?\" is \"because your syntax is totally screwed on line 53\".</p>",
        "id": 393777711,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1695924023
    },
    {
        "content": "<p>(I knew I didn't know what Lean was taking to be exact, but it didn't have a red underline so I assumed it found something that worked for the local goal)</p>",
        "id": 393777797,
        "sender_full_name": "Alex Altair",
        "timestamp": 1695924059
    },
    {
        "content": "<p>yeah I think the newline does nothing.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">exact</span>\n    <span class=\"n\">h</span> <span class=\"c1\">-- works fine</span>\n</code></pre></div>",
        "id": 393777903,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1695924102
    },
    {
        "content": "<p>There seem to be lots of situations where Lean will magically fill in an argument for you so I was imagining this was one of those times</p>",
        "id": 393778021,
        "sender_full_name": "Alex Altair",
        "timestamp": 1695924148
    },
    {
        "content": "<p>This is not the first time I've seen someone trying to close a goal with <code>exact</code> and your comments are beginning to make me understand why people might think this.</p>",
        "id": 393778164,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1695924205
    },
    {
        "content": "<p><code>apply</code>, for example, is extremely good at guessing missing information and filling it in automatically.</p>",
        "id": 393778266,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1695924232
    },
    {
        "content": "<p>Similarly <code>rw [add_zero]</code> will just insert the missing <code>x</code> input to <code>add_zero</code> if it sees <code>x + 0</code> in the goal.</p>",
        "id": 393778530,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1695924279
    },
    {
        "content": "<p>I had also tried <code>exact hx1</code> before and that didn't work</p>",
        "id": 393778547,
        "sender_full_name": "Alex Altair",
        "timestamp": 1695924283
    },
    {
        "content": "<p>(but now I see that I can do <code>left</code> and then <code>exact hx1</code> and that closes the goal)</p>",
        "id": 393778797,
        "sender_full_name": "Alex Altair",
        "timestamp": 1695924338
    },
    {
        "content": "<p>That's because the goal isn't exactly <code>hx1</code>. You should learn to read the error messages; they don't just say \"that didn't work\", they tell you exactly what didn't work and why it didn't work. I know they look very daunting but they often are just the exact answer to the obvious question \"why didn't it work\"?</p>",
        "id": 393778811,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1695924340
    },
    {
        "content": "<p>(and sometimes they're incomprehensible ;-) )</p>",
        "id": 393779093,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1695924394
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/113489-new-members/topic/Understanding.20proof.20state/near/393776912\">said</a>:</p>\n<blockquote>\n<p>I tend to only trust the infoview if my cursor is immediately before a tactic or an expression. If it's somewhere in the middle of some other syntax (and especially if there is whitespace after the cursor) it might be giving you information about somewhere else.</p>\n</blockquote>\n<p>By the way this was also helpful to hear</p>",
        "id": 393779539,
        "sender_full_name": "Alex Altair",
        "timestamp": 1695924511
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/113489-new-members/topic/Understanding.20proof.20state/near/393777145\">said</a>:</p>\n<blockquote>\n<p>Something you could try is hovering your mouse over both locations -- do you see a faint blue highlighting in a region of the source code? When your mouse is right at the end of <code>:=</code> I expect you'll see the whole <code>calc</code> block is highlighted, or at least a whole clause of the calc block. That indicates you might be getting some non-local information.</p>\n</blockquote>\n<p>Oooh, nice, I had seen the window-on-hover, but I didn't notice the blue highlighting because it was too faint given my monitor's contrast. I expect that will be useful as well!</p>",
        "id": 393779701,
        "sender_full_name": "Alex Altair",
        "timestamp": 1695924589
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/Understanding.20proof.20state/near/393778164\">said</a>:</p>\n<blockquote>\n<p>This is not the first time I've seen someone trying to close a goal with <code>exact</code> and your comments are beginning to make me understand why people might think this.</p>\n</blockquote>\n<p>I wonder if the syntax for <code>exact</code> should be changed so that the term after it is optional. Then we could code <code>exact</code> minus the term to throw an error and put the red squiggle under all of \"exact\".</p>",
        "id": 393780298,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1695924795
    },
    {
        "content": "<p>It's common in programming language implementations to put common mistakes into the grammar so that you can get more helpful error messages.</p>",
        "id": 393780383,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1695924832
    },
    {
        "content": "<p>Unfortunately this is one place where Lean cannot possibly be expected to guess what happens after <code>exact</code> because it could be <code>exact (some application of a theorem)</code> or <code>exact (some hypothesis)</code>. If your goal is precisely one of your hypotheses then you can use the <code>assumption</code> tactic, which tries to close the goal with every hypothesis in the local context (and is by the way this tactic the canonical first exercise to write for anyone interested in learning tactic-writing).</p>",
        "id": 393782243,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1695925465
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> I think you might not have understood what I was suggesting. It wouldn't be that <code>exact</code> by itself would try to guess what to do, but that <code>exact</code> by itself would say something like \"expecting a term after <code>exact</code>\" and then put a squiggle under all of \"exact\" so you can't miss the error.</p>",
        "id": 393786334,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1695926916
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">elab</span> <span class=\"s2\">\"my_exact \"</span> <span class=\"n\">t</span><span class=\"bp\">?</span><span class=\"o\">:(</span><span class=\"n\">colGt</span> <span class=\"n\">term</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"k\">match</span> <span class=\"n\">t</span><span class=\"bp\">?</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">none</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">throwError</span> <span class=\"s2\">\"expecting a term after `my_exact`\"</span>\n  <span class=\"bp\">|</span> <span class=\"n\">some</span> <span class=\"n\">t</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span> <span class=\"n\">Lean.Elab.Tactic.evalTactic</span> <span class=\"bp\">&lt;|</span> <span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">exact</span> <span class=\"bp\">$</span><span class=\"n\">t</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">False</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">my_exact</span> <span class=\"c\">/-</span>\n<span class=\"cm\">  ~~~~~~~~ expecting a term after `my_exact` -/</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">True</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">my_exact</span> <span class=\"n\">trivial</span> <span class=\"c1\">-- ok</span>\n</code></pre></div>",
        "id": 393787138,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1695927196
    },
    {
        "content": "<p>Oh sorry Kyle I completely failed to notice that it was you speaking!</p>",
        "id": 393791353,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1695928981
    },
    {
        "content": "<p>But in the example above it's still going to do <code>exact calc...</code> right?</p>",
        "id": 393791505,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1695929048
    },
    {
        "content": "<p>Alex's example is a really really unlucky garbage input. The unlucky part is that Lean tries to understand it for a very long time before giving up, because it sees the <code>have hx2</code> as a <em>term mode</em> have.</p>",
        "id": 393792391,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1695929446
    },
    {
        "content": "<p>For people who want to play with (maybe <span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> since this is an interesting case study), this all happens at line 42 of <a href=\"https://github.com/hrmacbeth/math2001/blob/main/Math2001/02_Proofs_with_Structure/03_Or.lean\">https://github.com/hrmacbeth/math2001/blob/main/Math2001/02_Proofs_with_Structure/03_Or.lean</a> where you need to write</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">-</span> <span class=\"mi\">3</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">∨</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"n\">h1</span> <span class=\"o\">:=</span>\n    <span class=\"k\">calc</span>\n    <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">-</span> <span class=\"mi\">3</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">ring</span>\n    <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">hx</span><span class=\"o\">]</span>\n  <span class=\"k\">have</span> <span class=\"n\">h2</span> <span class=\"o\">:=</span> <span class=\"n\">eq_zero_or_eq_zero_of_mul_eq_zero</span> <span class=\"n\">h1</span>\n  <span class=\"n\">obtain</span> <span class=\"n\">hxm1</span> <span class=\"bp\">|</span> <span class=\"n\">hxm2</span> <span class=\"o\">:=</span> <span class=\"n\">h2</span>\n  <span class=\"k\">have</span> <span class=\"n\">hx1</span> <span class=\"o\">:=</span> <span class=\"k\">calc</span>\n    <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">ring</span>\n    <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">hxm1</span><span class=\"o\">]</span>\n    <span class=\"n\">_</span><span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">ring</span>\n  <span class=\"n\">exact</span>\n  <span class=\"k\">have</span> <span class=\"n\">hx2</span> <span class=\"o\">:=</span> <span class=\"k\">calc</span>\n    <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">ring</span>\n    <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">hxm2</span><span class=\"o\">]</span>\n    <span class=\"n\">_</span><span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">ring</span>\n  <span class=\"n\">exact</span>\n</code></pre></div>",
        "id": 393792563,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1695929523
    },
    {
        "content": "<p>For maximal fun, try the following variation</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">-</span> <span class=\"mi\">3</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">∨</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"n\">h1</span> <span class=\"o\">:=</span>\n    <span class=\"k\">calc</span>\n    <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">-</span> <span class=\"mi\">3</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">ring</span>\n    <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">hx</span><span class=\"o\">]</span>\n  <span class=\"k\">have</span> <span class=\"n\">h2</span> <span class=\"o\">:=</span> <span class=\"n\">eq_zero_or_eq_zero_of_mul_eq_zero</span> <span class=\"n\">h1</span>\n  <span class=\"n\">obtain</span> <span class=\"n\">hxm1</span> <span class=\"bp\">|</span> <span class=\"n\">hxm2</span> <span class=\"o\">:=</span> <span class=\"n\">h2</span>\n  <span class=\"k\">have</span> <span class=\"n\">hx1</span> <span class=\"o\">:=</span> <span class=\"k\">calc</span>\n    <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">ring</span>\n    <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">hxm1</span><span class=\"o\">]</span>\n    <span class=\"n\">_</span><span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">ring</span>\n  <span class=\"n\">exact</span>\n  <span class=\"k\">have</span> <span class=\"n\">hx2</span> <span class=\"o\">:=</span> <span class=\"k\">calc</span>\n    <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">ring</span>\n    <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span> <span class=\"c1\">-- rw [hxm2]</span>\n    <span class=\"n\">_</span><span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">ring</span>\n  <span class=\"n\">Or.inl</span> <span class=\"n\">hx1</span>\n</code></pre></div>\n<p>This one does close the first goal created by obtain. I put a sorry in the second calc block which referred to  hxm2 which does not exist in that branch of the proof. And then my very last line completes the proof term that the middle exact expects to see (without using <code>hx2</code> which is completely irrelevant here).</p>",
        "id": 393792853,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1695929641
    },
    {
        "content": "<p>For <span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> , the very mysterious part is that, even in my \"correct\" proof above, putting the cursor anywhere after the <code>e</code> of exact if showing as tactic state the other case of obtain. An example showing this using only core Lean is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">True</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"n\">fact</span> <span class=\"o\">:</span> <span class=\"n\">True</span> <span class=\"bp\">∨</span> <span class=\"n\">False</span> <span class=\"o\">:=</span> <span class=\"n\">Or.inl</span> <span class=\"n\">trivial</span>\n  <span class=\"n\">apply</span> <span class=\"n\">fact.elim</span>\n  <span class=\"n\">exact</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n    <span class=\"k\">calc</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">n.add_zero</span>\n    <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span>\n  <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">trivial</span>\n  <span class=\"n\">exact</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">trivial</span>\n</code></pre></div>\n<p>The apply line is creating two cases <code>left</code> and <code>right</code>. I see that putting the cursor anywhere after the <code>e</code> of <code>exact</code> shows the tactic state for case <code>right</code>.</p>",
        "id": 393794624,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1695930449
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/Understanding.20proof.20state/near/393791505\">said</a>:</p>\n<blockquote>\n<p>But in the example above it's still going to do <code>exact calc...</code> right?</p>\n</blockquote>\n<p>I set it to use <code>colGt</code> (which means \"the term must start in a column after the beginning of the tactic\"), so</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>    <span class=\"n\">my_exact</span>\n    <span class=\"k\">have</span> <span class=\"n\">hx2</span> <span class=\"o\">:=</span> <span class=\"bp\">...</span>\n</code></pre></div>\n<p>should give you an error on <code>my_exact</code> rather than going down the questionable path of hoping that <code>have hx2 := ...</code> is the start of a term. (I didn't test this though.)</p>",
        "id": 393796176,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1695931088
    },
    {
        "content": "<p>I cannot test this, I just ruined my copy of the book by running lake.</p>",
        "id": 393796503,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1695931209
    },
    {
        "content": "<p>Well, I can test it elsewhere with the Mathlib-free example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n\n<span class=\"n\">elab</span> <span class=\"s2\">\"my_exact \"</span> <span class=\"n\">t</span><span class=\"bp\">?</span><span class=\"o\">:(</span><span class=\"n\">colGt</span> <span class=\"n\">term</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"k\">match</span> <span class=\"n\">t</span><span class=\"bp\">?</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">none</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">throwError</span> <span class=\"s2\">\"expecting a term after `my_exact`\"</span>\n  <span class=\"bp\">|</span> <span class=\"n\">some</span> <span class=\"n\">t</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span> <span class=\"n\">Lean.Elab.Tactic.evalTactic</span> <span class=\"bp\">&lt;|</span> <span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">exact</span> <span class=\"bp\">$</span><span class=\"n\">t</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">True</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"n\">fact</span> <span class=\"o\">:</span> <span class=\"n\">True</span> <span class=\"bp\">∨</span> <span class=\"n\">False</span> <span class=\"o\">:=</span> <span class=\"n\">Or.inl</span> <span class=\"n\">trivial</span>\n  <span class=\"n\">apply</span> <span class=\"n\">fact.elim</span>\n  <span class=\"n\">my_exact</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n    <span class=\"k\">calc</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">n.add_zero</span>\n    <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span>\n  <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">trivial</span>\n  <span class=\"n\">exact</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">trivial</span>\n</code></pre></div>",
        "id": 393796930,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1695931382
    },
    {
        "content": "<p>And indeed this has an error message on <code>my_exact</code>.</p>",
        "id": 393797017,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1695931413
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/113489-new-members/topic/Understanding.20proof.20state/near/393796503\">said</a>:</p>\n<blockquote>\n<p>I cannot test this, I just ruined my copy of the book by running lake.</p>\n</blockquote>\n<p>Curious what \"the book\" means here, is that a reference to Erdős?</p>",
        "id": 393815764,
        "sender_full_name": "Alex Altair",
        "timestamp": 1695941312
    },
    {
        "content": "<p>I mean Heather's book. But I'm sure she'll be happy to read your interpretation.</p>",
        "id": 393815810,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1695941356
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/113489-new-members/topic/Understanding.20proof.20state/near/393796503\">said</a>:</p>\n<blockquote>\n<p>I cannot test this, I just ruined my copy of the book by running lake.</p>\n</blockquote>\n<p>(don't throw books in lakes!)</p>",
        "id": 393859987,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1695967200
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/113489-new-members/topic/Understanding.20proof.20state/near/393794624\">said</a>:</p>\n<blockquote>\n<p>For <span class=\"user-mention silent\" data-user-id=\"110024\">Sebastian Ullrich</span> , the very mysterious part is that, even in my \"correct\" proof above, putting the cursor anywhere after the <code>e</code> of exact if showing as tactic state the other case of obtain.</p>\n</blockquote>\n<p>There may not exist a heuristic that always does what people want here. The current heuristic was chosen so that on <code>apply f (by simp)</code> the goal view behaves the same as on <code>apply f x</code> -- tactics nested in terms are considered \"incidental\" and ignored when deciding whether to show the pre or post state of a surrounding tactic</p>",
        "id": 394092035,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1696086216
    },
    {
        "content": "<p>I don't understand this analogy.</p>",
        "id": 394093519,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1696087534
    },
    {
        "content": "<p>They are both tactic-term-tactic nestings. Based on that, the server decides in both cases that it should show the post state after the first character</p>",
        "id": 394094559,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1696088478
    },
    {
        "content": "<p>Oh, here's another question about understanding what the tactic state means; is there a simple mental model I can use to understand what the <code>?m.55357</code> stuff is about, without grokking a bunch of stuff about dependent type theory?</p>",
        "id": 394102219,
        "sender_full_name": "Alex Altair",
        "timestamp": 1696095589
    },
    {
        "content": "<p>\"a thing that I haven't filled in yet\"</p>",
        "id": 394102610,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1696096013
    },
    {
        "content": "<p>Sure, <code>m</code> stands for mystery.</p>",
        "id": 394102730,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1696096089
    },
    {
        "content": "<p><code>?m.nnnn</code> is a metavariable, and every metavariable consists of a local context and a target type. Metavariables can assigned expressions. The tactic state is just a list of metavariables. Tactics are programs that manipulate this list of metavariables. A completed theorem or definition must not contain any unassigned metavariables.</p>",
        "id": 394106474,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1696100201
    },
    {
        "content": "<p>If you have a goal with <code>?m.37</code> in then you might well have another goal which just says <code>|- Nat</code> or something like that: that shouldn't really be a goal in a tactic proof, because it's not a theorem statement. But if you solve it with <code>exact 42</code> then <code>?m.37</code> might well magically change to 42.</p>",
        "id": 394118439,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1696113057
    }
]