[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span> <span class=\"bp\">/</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"c1\">-- `linarith` fails.</span>\n  <span class=\"c1\">-- How can I show this?</span>\n  <span class=\"n\">linarith</span><span class=\"bp\">!</span>\n</code></pre></div>",
        "id": 401554724,
        "sender_full_name": "Asei Inoue",
        "timestamp": 1699749685
    },
    {
        "content": "<p>I have managed to solve this.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span> <span class=\"bp\">/</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"c1\">-- `linarith` fails.</span>\n  <span class=\"n\">try</span> <span class=\"n\">linarith</span><span class=\"bp\">!</span>\n\n  <span class=\"n\">set</span> <span class=\"n\">r</span> <span class=\"o\">:=</span> <span class=\"n\">b</span> <span class=\"bp\">/</span> <span class=\"n\">a</span> <span class=\"k\">with</span> <span class=\"n\">hr</span>\n\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"k\">show</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">r</span> <span class=\"k\">from</span> <span class=\"bp\">?</span><span class=\"n\">lem</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n  <span class=\"n\">exact</span><span class=\"bp\">?</span> <span class=\"n\">says</span>\n    <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">mul_lt_mul_left</span> <span class=\"n\">ha</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mp</span> <span class=\"n\">h</span>\n  <span class=\"n\">clear</span> <span class=\"n\">h</span>\n\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">hr</span><span class=\"o\">]</span>\n  <span class=\"n\">field_simp</span>\n  <span class=\"n\">rw_search</span> <span class=\"n\">says</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Rat.mul_comm</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 401558344,
        "sender_full_name": "Asei Inoue",
        "timestamp": 1699751692
    },
    {
        "content": "<p>But could it be shown more shortly?</p>",
        "id": 401558860,
        "sender_full_name": "Asei Inoue",
        "timestamp": 1699752054
    },
    {
        "content": "<p>Does <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=lt_div_iff%27#doc\">docs#lt_div_iff'</a> help?</p>",
        "id": 401566497,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1699758078
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"321459\">@Damiano Testa</span> Thank you. It works well.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span> <span class=\"bp\">/</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">lt_div_iff'</span> <span class=\"n\">ha</span><span class=\"o\">]</span>\n  <span class=\"n\">assumption</span>\n</code></pre></div>",
        "id": 401567642,
        "sender_full_name": "Asei Inoue",
        "timestamp": 1699758871
    },
    {
        "content": "<p>It can also be found with <code>rw?</code>.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span> <span class=\"bp\">/</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span><span class=\"bp\">?</span> <span class=\"n\">says</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">propext</span> <span class=\"o\">(</span><span class=\"n\">lt_div_iff'</span> <span class=\"n\">ha</span><span class=\"o\">)]</span>\n  <span class=\"n\">assumption</span>\n</code></pre></div>",
        "id": 401567853,
        "sender_full_name": "Asei Inoue",
        "timestamp": 1699759045
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"626349\">Asei Inoue</span> has marked this topic as resolved.</p>",
        "id": 401567993,
        "sender_full_name": "Notification Bot",
        "timestamp": 1699759183
    }
]