[
    {
        "content": "<p>I'm trying</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">to_complex</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">[</span><span class=\"n\">ω</span><span class=\"o\">])</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span> <span class=\"o\">:=</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"n\">re</span> <span class=\"bp\">+</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"n\">im</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">I</span> <span class=\"bp\">*</span> <span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">sqrt</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span>\n</pre></div>\n\n\n<p>but getting <code>definition 'to_complex' is noncomputable, it depends on 'complex.discrete_field'</code>.<br>\nIs there some <code>import</code> or <code>open</code> that will \"deal\" with this? What are the consequences of ignoring the noncomputability of sqrt?<br>\nIt looks like an interesting exercise to make <code>real.sqrt</code> computable (looks like there is a proof sketch in the comments of <code>real.sqrt</code>'s definition). Is that worth trying? Is it just a matter of constructing the Cauchy sequence that converges to sqrt(n)?</p>",
        "id": 188389789,
        "sender_full_name": "Paul van Wamelen",
        "timestamp": 1581955687
    },
    {
        "content": "<p>The real numbers as implemented in mathlib have no useful computational structure anyways (they are Cauchy sequences without any explicit rate of convergence). You should just put <code>noncomputable theory</code> at the top of your file if you are going to use the reals a lot.</p>",
        "id": 188390057,
        "sender_full_name": "Reid Barton",
        "timestamp": 1581955949
    },
    {
        "content": "<p>Thanks!<br>\nAre you saying that even if we complete the proof of <code>sqrt_aux_converges</code> sqrt would still be \"uncomputable\"?</p>",
        "id": 188391256,
        "sender_full_name": "Paul van Wamelen",
        "timestamp": 1581956947
    },
    {
        "content": "<p>It would be computable in the sense that Lean wouldn't have the <code>noncomputable</code> tag, but it would not be computable in any practical sense. There is no computable function <code>real -&gt; bool</code> for example, so there's basically nothing you can do with a \"computable\" function on the current implementation of the reals.</p>",
        "id": 188391396,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1581957068
    },
    {
        "content": "<p>I think I see :)<br>\nThanks again! (I must say I'm blown away by the support here...)</p>",
        "id": 188391780,
        "sender_full_name": "Paul van Wamelen",
        "timestamp": 1581957453
    },
    {
        "content": "<p>I tend to not put <code>noncomputable theory</code> at the top of my files, and then every time Lean complains something is noncomputable I just write <code>noncomputable</code> in front of it, so e.g. <code>noncomputable def to_complex ...</code> would also remove the error.</p>",
        "id": 188394508,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1581959805
    },
    {
        "content": "<p>Why for such simple theorems I need the <code>noncomputable</code> in front of the theorems? </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">constant</span> <span class=\"n\">Class</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n\n<span class=\"c1\">-- SUMO immediateSubclass</span>\n<span class=\"kn\">constant</span> <span class=\"n\">subClass</span> <span class=\"o\">:</span> <span class=\"n\">Class</span> <span class=\"bp\">→</span> <span class=\"n\">Class</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span>\n\n<span class=\"c1\">-- SUMO subclass</span>\n<span class=\"kn\">constant</span> <span class=\"n\">Inherits</span> <span class=\"o\">:</span> <span class=\"n\">Class</span> <span class=\"bp\">→</span> <span class=\"n\">Class</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span>\n\n<span class=\"kn\">constant</span> <span class=\"n\">inhz</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">Class</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Inherits</span> <span class=\"n\">c</span> <span class=\"n\">c</span>\n<span class=\"kn\">constant</span> <span class=\"n\">inhs</span> <span class=\"o\">(</span><span class=\"n\">c1</span> <span class=\"n\">c2</span> <span class=\"n\">c3</span> <span class=\"o\">:</span> <span class=\"n\">Class</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">subClass</span> <span class=\"n\">c1</span> <span class=\"n\">c2</span> <span class=\"bp\">→</span> <span class=\"n\">Inherits</span> <span class=\"n\">c2</span> <span class=\"n\">c3</span> <span class=\"bp\">→</span> <span class=\"n\">Inherits</span> <span class=\"n\">c1</span> <span class=\"n\">c3</span>\n\n<span class=\"kn\">constants</span> <span class=\"n\">Human</span> <span class=\"n\">Hominid</span> <span class=\"n\">Entity</span> <span class=\"o\">:</span> <span class=\"n\">Class</span>\n\n<span class=\"kn\">constant</span> <span class=\"n\">human_hominid</span> <span class=\"o\">:</span> <span class=\"n\">subClass</span> <span class=\"n\">Human</span> <span class=\"n\">Hominid</span>\n<span class=\"kn\">constant</span> <span class=\"n\">hominid_entity</span> <span class=\"o\">:</span> <span class=\"n\">subClass</span> <span class=\"n\">Hominid</span> <span class=\"n\">Entity</span>\n\n<span class=\"n\">noncomputable</span> <span class=\"kn\">theorem</span> <span class=\"n\">test1</span> <span class=\"o\">:</span> <span class=\"n\">Inherits</span> <span class=\"n\">Human</span> <span class=\"n\">Hominid</span> <span class=\"o\">:=</span>\n <span class=\"n\">inhs</span> <span class=\"n\">Human</span> <span class=\"n\">Hominid</span> <span class=\"n\">Hominid</span> <span class=\"n\">human_hominid</span> <span class=\"o\">(</span><span class=\"n\">inhz</span> <span class=\"n\">Hominid</span><span class=\"o\">)</span>\n\n<span class=\"n\">noncomputable</span> <span class=\"kn\">theorem</span> <span class=\"n\">test2</span> <span class=\"o\">:</span> <span class=\"n\">Inherits</span> <span class=\"n\">Human</span> <span class=\"n\">Entity</span> <span class=\"o\">:=</span>\n <span class=\"n\">inhs</span> <span class=\"n\">Human</span> <span class=\"n\">Hominid</span> <span class=\"n\">Entity</span> <span class=\"n\">human_hominid</span> <span class=\"o\">(</span><span class=\"n\">inhs</span> <span class=\"n\">Hominid</span> <span class=\"n\">Entity</span> <span class=\"n\">Entity</span> <span class=\"n\">hominid_entity</span> <span class=\"o\">(</span><span class=\"n\">inhz</span> <span class=\"n\">Entity</span><span class=\"o\">))</span>\n</code></pre></div>\n\n\n<p>Is it possible, using some tactics, to let Lean come up of the proof terms automatically? That is, to synthesize the proof term?</p>",
        "id": 196719006,
        "sender_full_name": "Alexandre Rademaker",
        "timestamp": 1588815731
    },
    {
        "content": "<p><code>noncomputable</code> has nothing to do with computation in this sense</p>",
        "id": 196719042,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588815813
    },
    {
        "content": "<p>it's <code>noncomputable</code> because you can't directly execute the proofs because they use undefined constants</p>",
        "id": 196719112,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588815844
    },
    {
        "content": "<p>undefined constants? but in my example, they are all defined.</p>",
        "id": 196719141,
        "sender_full_name": "Alexandre Rademaker",
        "timestamp": 1588815908
    },
    {
        "content": "<p><code>noncomputable theorem</code> is an indication that you have incorrectly marked a <code>def</code> as a theorem, or you have a type where you wanted a prop. Are <code>subClass</code> and <code>Inherits</code> supposed to be propositions? They are named like such</p>",
        "id": 196719144,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588815923
    },
    {
        "content": "<p><code>constant</code> is the same as <code>axiom</code></p>",
        "id": 196719145,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588815933
    },
    {
        "content": "<p>No, subClass is supposed to be a dependent type and Inherits a function.</p>",
        "id": 196719208,
        "sender_full_name": "Alexandre Rademaker",
        "timestamp": 1588815998
    },
    {
        "content": "<p>You may want to consider using <code>variable</code> or <code>parameter</code> here</p>",
        "id": 196719236,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588816058
    },
    {
        "content": "<p>actually, I would like to be able to have a term like <code>inhs Human Hominid Hominid human_hominid (inhz Hominid)</code> produced automatically for a type <code>Inherits Human Hominid</code></p>",
        "id": 196719239,
        "sender_full_name": "Alexandre Rademaker",
        "timestamp": 1588816071
    },
    {
        "content": "<p>you can probably do that using typeclass inference</p>",
        "id": 196719286,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588816098
    },
    {
        "content": "<p>Wow! Thank you Mario. Can you give me any reference to understand it better? Probably I have to read <a href=\"https://leanprover.github.io/theorem_proving_in_lean/type_classes.html\" title=\"https://leanprover.github.io/theorem_proving_in_lean/type_classes.html\">https://leanprover.github.io/theorem_proving_in_lean/type_classes.html</a>, right?</p>",
        "id": 196719362,
        "sender_full_name": "Alexandre Rademaker",
        "timestamp": 1588816230
    },
    {
        "content": "<p>BTW, nice, I don't need the noncomputable with variables </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">constant</span> <span class=\"n\">Class</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n\n<span class=\"c1\">-- SUMO immediateSubclass</span>\n<span class=\"kn\">constant</span> <span class=\"n\">subClass</span> <span class=\"o\">:</span> <span class=\"n\">Class</span> <span class=\"bp\">→</span> <span class=\"n\">Class</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span>\n\n<span class=\"c1\">-- SUMO subclass</span>\n<span class=\"kn\">constant</span> <span class=\"n\">Inherits</span> <span class=\"o\">:</span> <span class=\"n\">Class</span> <span class=\"bp\">→</span> <span class=\"n\">Class</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span>\n\n<span class=\"kn\">variable</span> <span class=\"n\">inhz</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">Class</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Inherits</span> <span class=\"n\">c</span> <span class=\"n\">c</span>\n<span class=\"kn\">variable</span> <span class=\"n\">inhs</span> <span class=\"o\">(</span><span class=\"n\">c1</span> <span class=\"n\">c2</span> <span class=\"n\">c3</span> <span class=\"o\">:</span> <span class=\"n\">Class</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">subClass</span> <span class=\"n\">c1</span> <span class=\"n\">c2</span> <span class=\"bp\">→</span> <span class=\"n\">Inherits</span> <span class=\"n\">c2</span> <span class=\"n\">c3</span> <span class=\"bp\">→</span> <span class=\"n\">Inherits</span> <span class=\"n\">c1</span> <span class=\"n\">c3</span>\n\n<span class=\"kn\">variables</span> <span class=\"n\">Human</span> <span class=\"n\">Hominid</span> <span class=\"n\">Entity</span> <span class=\"o\">:</span> <span class=\"n\">Class</span>\n\n<span class=\"kn\">variable</span> <span class=\"n\">human_hominid</span> <span class=\"o\">:</span> <span class=\"n\">subClass</span> <span class=\"n\">Human</span> <span class=\"n\">Hominid</span>\n<span class=\"kn\">variable</span> <span class=\"n\">hominid_entity</span> <span class=\"o\">:</span> <span class=\"n\">subClass</span> <span class=\"n\">Hominid</span> <span class=\"n\">Entity</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">test1</span> <span class=\"o\">:</span> <span class=\"n\">Inherits</span> <span class=\"n\">Human</span> <span class=\"n\">Hominid</span> <span class=\"o\">:=</span>\n <span class=\"n\">inhs</span> <span class=\"n\">Human</span> <span class=\"n\">Hominid</span> <span class=\"n\">Hominid</span> <span class=\"n\">human_hominid</span> <span class=\"o\">(</span><span class=\"n\">inhz</span> <span class=\"n\">Hominid</span><span class=\"o\">)</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">test2</span> <span class=\"o\">:</span> <span class=\"n\">Inherits</span> <span class=\"n\">Human</span> <span class=\"n\">Entity</span> <span class=\"o\">:=</span>\n <span class=\"n\">inhs</span> <span class=\"n\">Human</span> <span class=\"n\">Hominid</span> <span class=\"n\">Entity</span> <span class=\"n\">human_hominid</span> <span class=\"o\">(</span><span class=\"n\">inhs</span> <span class=\"n\">Hominid</span> <span class=\"n\">Entity</span> <span class=\"n\">Entity</span> <span class=\"n\">hominid_entity</span> <span class=\"o\">(</span><span class=\"n\">inhz</span> <span class=\"n\">Entity</span><span class=\"o\">))</span>\n</code></pre></div>",
        "id": 196719384,
        "sender_full_name": "Alexandre Rademaker",
        "timestamp": 1588816280
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">constant</span> <span class=\"n\">Class</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n\n<span class=\"c1\">-- SUMO immediateSubclass</span>\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">class</span><span class=\"o\">]</span> <span class=\"kn\">constant</span> <span class=\"n\">subClass</span> <span class=\"o\">:</span> <span class=\"n\">Class</span> <span class=\"bp\">→</span> <span class=\"n\">Class</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span>\n\n<span class=\"c1\">-- SUMO subclass</span>\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">class</span><span class=\"o\">]</span> <span class=\"kn\">constant</span> <span class=\"n\">Inherits</span> <span class=\"o\">:</span> <span class=\"n\">Class</span> <span class=\"bp\">→</span> <span class=\"n\">Class</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"kn\">instance</span><span class=\"o\">]</span> <span class=\"kn\">constant</span> <span class=\"n\">inhz</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">Class</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Inherits</span> <span class=\"n\">c</span> <span class=\"n\">c</span>\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"kn\">instance</span><span class=\"o\">]</span> <span class=\"kn\">constant</span> <span class=\"n\">inhs</span> <span class=\"o\">(</span><span class=\"n\">c1</span> <span class=\"n\">c2</span> <span class=\"n\">c3</span> <span class=\"o\">:</span> <span class=\"n\">Class</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Inherits</span> <span class=\"n\">c2</span> <span class=\"n\">c3</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">subClass</span> <span class=\"n\">c1</span> <span class=\"n\">c2</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Inherits</span> <span class=\"n\">c1</span> <span class=\"n\">c3</span>\n\n<span class=\"kn\">constants</span> <span class=\"n\">Human</span> <span class=\"n\">Hominid</span> <span class=\"n\">Entity</span> <span class=\"o\">:</span> <span class=\"n\">Class</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"kn\">instance</span><span class=\"o\">]</span> <span class=\"kn\">constant</span> <span class=\"n\">human_hominid</span> <span class=\"o\">:</span> <span class=\"n\">subClass</span> <span class=\"n\">Human</span> <span class=\"n\">Hominid</span>\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"kn\">instance</span><span class=\"o\">]</span> <span class=\"kn\">constant</span> <span class=\"n\">hominid_entity</span> <span class=\"o\">:</span> <span class=\"n\">subClass</span> <span class=\"n\">Hominid</span> <span class=\"n\">Entity</span>\n\n<span class=\"n\">noncomputable</span> <span class=\"n\">def</span> <span class=\"n\">test1</span> <span class=\"o\">:</span> <span class=\"n\">Inherits</span> <span class=\"n\">Human</span> <span class=\"n\">Hominid</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">apply_instance</span>\n\n<span class=\"n\">noncomputable</span> <span class=\"n\">def</span> <span class=\"n\">test2</span> <span class=\"o\">:</span> <span class=\"n\">Inherits</span> <span class=\"n\">Human</span> <span class=\"n\">Entity</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">apply_instance</span>\n</code></pre></div>",
        "id": 196719490,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588816420
    },
    {
        "content": "<p>thank you. I am getting two errors </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"bp\">.</span><span class=\"err\">…</span>    <span class=\"mi\">19</span>  <span class=\"mi\">19</span> <span class=\"n\">warning</span>         <span class=\"kn\">definition</span> <span class=\"err\">&#39;</span><span class=\"n\">test1&#39;</span> <span class=\"n\">was</span> <span class=\"n\">incorrectly</span> <span class=\"n\">marked</span> <span class=\"n\">as</span> <span class=\"n\">noncomputable</span> <span class=\"o\">(</span><span class=\"n\">lean</span><span class=\"bp\">-</span><span class=\"n\">checker</span><span class=\"o\">)</span>\n<span class=\"bp\">.</span><span class=\"err\">…</span>    <span class=\"mi\">19</span>  <span class=\"mi\">27</span> <span class=\"n\">error</span>           <span class=\"n\">maximum</span> <span class=\"n\">class</span><span class=\"bp\">-</span><span class=\"kn\">instance</span> <span class=\"n\">resolution</span> <span class=\"n\">depth</span> <span class=\"n\">has</span> <span class=\"n\">been</span> <span class=\"n\">reached</span> <span class=\"o\">(</span><span class=\"n\">the</span> <span class=\"n\">limit</span> <span class=\"n\">can</span> <span class=\"n\">be</span> <span class=\"n\">increased</span> <span class=\"k\">by</span> <span class=\"n\">setting</span> <span class=\"n\">option</span> <span class=\"err\">&#39;</span><span class=\"n\">class</span><span class=\"bp\">.</span><span class=\"n\">instance_max_depth&#39;</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">the</span> <span class=\"n\">class</span><span class=\"bp\">-</span><span class=\"kn\">instance</span> <span class=\"n\">resolution</span> <span class=\"n\">trace</span> <span class=\"n\">can</span> <span class=\"n\">be</span> <span class=\"n\">visualized</span> <span class=\"k\">by</span> <span class=\"n\">setting</span> <span class=\"n\">option</span> <span class=\"err\">&#39;</span><span class=\"n\">trace</span><span class=\"bp\">.</span><span class=\"n\">class_instances&#39;</span><span class=\"o\">)</span>\n <span class=\"n\">state</span><span class=\"o\">:</span>\n <span class=\"err\">⊢</span> <span class=\"n\">Inherits</span> <span class=\"n\">Human</span> <span class=\"n\">Hominid</span> <span class=\"o\">(</span><span class=\"n\">lean</span><span class=\"bp\">-</span><span class=\"n\">checker</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 196719663,
        "sender_full_name": "Alexandre Rademaker",
        "timestamp": 1588816662
    },
    {
        "content": "<p>You won't be able to use a variable for typeclass inference here. Instances have to be <code>def</code>s or <code>constant</code>s</p>",
        "id": 196720067,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588817141
    },
    {
        "content": "<p>The error is because you missed that I swapped the arguments to <code>inhs</code></p>",
        "id": 196720121,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588817176
    },
    {
        "content": "<p>I make no guarantees about the behavior of this typeclass search, and there are issues with infinite searches if it follows the wrong path</p>",
        "id": 196720152,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588817243
    },
    {
        "content": "<p>but it works in a pinch</p>",
        "id": 196720153,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588817256
    },
    {
        "content": "<p>I see. But I copied and pasted your code. So I didn't understand your point about the swapping of the arguments of inhs...</p>",
        "id": 196720203,
        "sender_full_name": "Alexandre Rademaker",
        "timestamp": 1588817293
    },
    {
        "content": "<p>Are you sure? What version of lean are you running</p>",
        "id": 196720248,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588817377
    }
]