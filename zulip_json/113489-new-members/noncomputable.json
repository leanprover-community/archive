[
    {
        "content": "<p>I'm trying</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">to_complex</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">[</span><span class=\"n\">ω</span><span class=\"o\">])</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span> <span class=\"o\">:=</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"n\">re</span> <span class=\"bp\">+</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"n\">im</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">I</span> <span class=\"bp\">*</span> <span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">sqrt</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span>\n</pre></div>\n\n\n<p>but getting <code>definition 'to_complex' is noncomputable, it depends on 'complex.discrete_field'</code>.<br>\nIs there some <code>import</code> or <code>open</code> that will \"deal\" with this? What are the consequences of ignoring the noncomputability of sqrt?<br>\nIt looks like an interesting exercise to make <code>real.sqrt</code> computable (looks like there is a proof sketch in the comments of <code>real.sqrt</code>'s definition). Is that worth trying? Is it just a matter of constructing the Cauchy sequence that converges to sqrt(n)?</p>",
        "id": 188389789,
        "sender_full_name": "Paul van Wamelen",
        "timestamp": 1581955687
    },
    {
        "content": "<p>The real numbers as implemented in mathlib have no useful computational structure anyways (they are Cauchy sequences without any explicit rate of convergence). You should just put <code>noncomputable theory</code> at the top of your file if you are going to use the reals a lot.</p>",
        "id": 188390057,
        "sender_full_name": "Reid Barton",
        "timestamp": 1581955949
    },
    {
        "content": "<p>Thanks!<br>\nAre you saying that even if we complete the proof of <code>sqrt_aux_converges</code> sqrt would still be \"uncomputable\"?</p>",
        "id": 188391256,
        "sender_full_name": "Paul van Wamelen",
        "timestamp": 1581956947
    },
    {
        "content": "<p>It would be computable in the sense that Lean wouldn't have the <code>noncomputable</code> tag, but it would not be computable in any practical sense. There is no computable function <code>real -&gt; bool</code> for example, so there's basically nothing you can do with a \"computable\" function on the current implementation of the reals.</p>",
        "id": 188391396,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1581957068
    },
    {
        "content": "<p>I think I see :)<br>\nThanks again! (I must say I'm blown away by the support here...)</p>",
        "id": 188391780,
        "sender_full_name": "Paul van Wamelen",
        "timestamp": 1581957453
    },
    {
        "content": "<p>I tend to not put <code>noncomputable theory</code> at the top of my files, and then every time Lean complains something is noncomputable I just write <code>noncomputable</code> in front of it, so e.g. <code>noncomputable def to_complex ...</code> would also remove the error.</p>",
        "id": 188394508,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1581959805
    }
]