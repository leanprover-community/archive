[
    {
        "content": "<p>I tried the Finite example from <br>\n<a href=\"https://leanprover.github.io/functional_programming_in_lean/dependent-types/universe-pattern.html\">https://leanprover.github.io/functional_programming_in_lean/dependent-types/universe-pattern.html</a></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Finite</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">unit</span> <span class=\"o\">:</span> <span class=\"n\">Finite</span>\n  <span class=\"bp\">|</span> <span class=\"n\">bool</span> <span class=\"o\">:</span> <span class=\"n\">Finite</span>\n  <span class=\"bp\">|</span> <span class=\"n\">pair</span> <span class=\"o\">:</span> <span class=\"n\">Finite</span> <span class=\"bp\">→</span> <span class=\"n\">Finite</span> <span class=\"bp\">→</span> <span class=\"n\">Finite</span>\n  <span class=\"bp\">|</span> <span class=\"n\">arr</span> <span class=\"o\">:</span> <span class=\"n\">Finite</span> <span class=\"bp\">→</span> <span class=\"n\">Finite</span> <span class=\"bp\">→</span> <span class=\"n\">Finite</span>\n\n<span class=\"n\">abbrev</span> <span class=\"n\">Finite.asType</span> <span class=\"o\">:</span> <span class=\"n\">Finite</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">unit</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Unit</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">bool</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Bool</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">pair</span> <span class=\"n\">t1</span> <span class=\"n\">t2</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">asType</span> <span class=\"n\">t1</span> <span class=\"bp\">×</span> <span class=\"n\">asType</span> <span class=\"n\">t2</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">arr</span> <span class=\"n\">t1</span> <span class=\"n\">t2</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">asType</span> <span class=\"n\">t1</span> <span class=\"bp\">→</span> <span class=\"n\">asType</span> <span class=\"n\">t2</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Finite.beq</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">Finite</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">t.asType</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">t</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">unit</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">true</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">bool</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span> <span class=\"bp\">==</span> <span class=\"n\">y</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">pair</span> <span class=\"n\">t1</span> <span class=\"n\">t2</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">beq</span> <span class=\"n\">t1</span> <span class=\"n\">x.fst</span> <span class=\"n\">y.fst</span> <span class=\"bp\">&amp;&amp;</span> <span class=\"n\">beq</span> <span class=\"n\">t2</span> <span class=\"n\">x.snd</span> <span class=\"n\">y.snd</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">arr</span> <span class=\"n\">t1</span> <span class=\"n\">t2</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">t1.enumerate.all</span> <span class=\"k\">fun</span> <span class=\"n\">arg</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">beq</span> <span class=\"n\">t2</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">arg</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"n\">arg</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>And got this error:</p>\n<blockquote>\n<p>invalid field 'enumerate', the environment does not contain 'Finite.enumerate'<br>\n  t1<br>\nhas type<br>\n  Finite</p>\n</blockquote>\n<p>Any hints on what could be wrong?</p>",
        "id": 378279383,
        "sender_full_name": "Anders Larsson",
        "timestamp": 1690233965
    },
    {
        "content": "<p>the definition of <code>Finite.enumerate</code> is given later on</p>",
        "id": 378279624,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1690234080
    },
    {
        "content": "<p>Thank you! Now it works!</p>",
        "id": 378281519,
        "sender_full_name": "Anders Larsson",
        "timestamp": 1690234819
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"430763\">Anders Larsson</span> has marked this topic as resolved.</p>",
        "id": 378281558,
        "sender_full_name": "Notification Bot",
        "timestamp": 1690234834
    }
]