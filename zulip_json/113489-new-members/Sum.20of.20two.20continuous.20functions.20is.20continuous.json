[
    {
        "content": "<p>My mathlib search fu is weak.  How do I find the name of that theorem?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Analysis.SpecialFunctions.Trigonometric.Deriv</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Analysis.Calculus.Deriv.Pow</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Analysis.Calculus.MeanValue</span>\n\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Analysis.SpecialFunctions.Pow.Continuity</span>\n\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Topology.Basic</span>\n\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">Continuous</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hg</span> <span class=\"o\">:</span> <span class=\"n\">Continuous</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">Continuous</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">+</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">library_search</span>\n</code></pre></div>\n<p>I included a bunch of irrelevant files, in the hope that they would transitively include whatever file has the theorem I'm looking for.</p>\n<p><code>library_search</code> gives suggestions.  In fact, it gives about 20 screen fulls of suggestions!  I looked through the first few screens, none seemed to be what I wanted.</p>\n<p>Using tab completion on <code>continuous_add</code> produces a short list, none of which seems to be what I want.</p>\n<p>The equivalent theorem for derivatives is <code>deriv_add</code>, so I'm surprised <code>continuous_add</code> isn't what I want.  The theorem that a constant function is continuous is <code>continuous_const</code>, so I would have thought that <code>continuous_add</code> was a winner.  <code>add_continuous</code> also came up empty.</p>\n<p>I looked through Mathlib/Topology/Basic.lean, but it didn't seem to be in there.  Maybe I haven't included the correct file?</p>\n<p>So, two questions:</p>\n<ol>\n<li>How can I complete the proof above?</li>\n<li>More importantly, how could I have found it on my own?</li>\n</ol>",
        "id": 403266808,
        "sender_full_name": "Martin C. Martin",
        "timestamp": 1700525057
    },
    {
        "content": "<p>The answer to the first is (<a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Continuous.add#doc\">docs#Continuous.add</a>)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">Continuous</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hg</span> <span class=\"o\">:</span> <span class=\"n\">Continuous</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">Continuous</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">+</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">hf.add</span> <span class=\"n\">hg</span>\n</code></pre></div>",
        "id": 403267636,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1700525535
    },
    {
        "content": "<p>Ah, so it's <code>Continuous.add</code>.  I forgot about theorems as fields of main definitions.  Thanks.</p>",
        "id": 403271116,
        "sender_full_name": "Martin C. Martin",
        "timestamp": 1700527166
    },
    {
        "content": "<p>Did <code>exact?</code> not find it because it was beta reduced?</p>",
        "id": 403271228,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1700527204
    },
    {
        "content": "<p>Wait, Martin, <code>library_search</code> is old. Maybe you want to update Mathlib?</p>",
        "id": 403271353,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1700527255
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"197836\">Jireh Loreaux</span> <a href=\"#narrow/stream/113489-new-members/topic/Sum.20of.20two.20continuous.20functions.20is.20continuous/near/403271353\">said</a>:</p>\n<blockquote>\n<p>Wait, Martin, <code>library_search</code> is old. Maybe you want to update Mathlib?</p>\n</blockquote>\n<p><a href=\"https://github.com/leanprover-community/mathlib4/commit/c77531abe48e2d2cb5029d5a270f7b6f5cb964a0\">My commit</a> is from 3 weeks ago, so not too old.  It's my searching abilities that need to be updated.  :)</p>\n<p>So <code>apply?</code> is the new <code>library_search</code>?  In general, any advice for searching?  I can guess parts of the name, put _ between them and use tab completion.  I can \"go to definition\" and look through source files.  Anything else?</p>",
        "id": 403272156,
        "sender_full_name": "Martin C. Martin",
        "timestamp": 1700527562
    },
    {
        "content": "<p>Does <code>exact?</code> look through the context, or just look at the goal?</p>",
        "id": 403272333,
        "sender_full_name": "Martin C. Martin",
        "timestamp": 1700527618
    },
    {
        "content": "<p>Also, I see the <code>@[continuity]</code> attribute, what's that?  Is there a <code>continuity</code> tactic?</p>",
        "id": 403272967,
        "sender_full_name": "Martin C. Martin",
        "timestamp": 1700527870
    },
    {
        "content": "<p>Some answers; the experts can add more.</p>\n<ul>\n<li>IIUC, <code>library_search</code> was split into <code>exact?</code>, <code>apply</code> and <code>rw?</code>. Each will look for a single lemma/theorem to apply to the given tactic. So, in principle <code>exact?</code> and <code>apply?</code> should both work here; don't know about the subtle differences.</li>\n<li>yup, <a href=\"https://github.com/haruhisa-enomoto/mathlib4-all-tactics/blob/main/all-tactics.md#continuity'\">there is</a> a continuity tactic. (That list of tactics is not up to date, though.)</li>\n</ul>",
        "id": 403337596,
        "sender_full_name": "Michael Rothgang",
        "timestamp": 1700559020
    },
    {
        "content": "<p>Three more tricks for searching:</p>\n<ul>\n<li>look at the API docs, especially for that concept. Try to search that page. (Say, on the continuity page, looking for \"add\" or so. (Sometimes, lemmas are misnamed/named differently from what you thing.)</li>\n<li>Use <a href=\"http://loogle.lean-fro.org/\">loogle.lean-fro.org/</a>, or <a href=\"http://moogle.ai/\">moogle.ai/</a> (uses natural language).</li>\n<li>The new <code>rw_search</code> (searches for a chain of multiple rewrites, not just one lemma) and <code>hint</code> tactics (tries several tactics in parallel, including <code>simp</code>, <code>aesop</code>, <code>intros</code>, <code>exact?</code> and <code>decide</code>  in parallel) can also be handy.</li>\n</ul>",
        "id": 403337807,
        "sender_full_name": "Michael Rothgang",
        "timestamp": 1700559100
    }
]