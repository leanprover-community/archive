[
    {
        "content": "<p>Hi. Can someone kindly provide a more concise proof of the following? Here is my attempt for reference</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">D</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">((</span><span class=\"n\">B</span> <span class=\"bp\">→</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"bp\">→</span> <span class=\"n\">F</span><span class=\"o\">)))</span> <span class=\"bp\">→</span> <span class=\"o\">(((</span><span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">D</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"bp\">→</span> <span class=\"n\">E</span><span class=\"o\">))</span> <span class=\"bp\">→</span> <span class=\"o\">((</span><span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">D</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"bp\">→</span> <span class=\"n\">F</span><span class=\"o\">)))</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n\n<span class=\"n\">intros</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span><span class=\"o\">,</span>\n<span class=\"n\">apply</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n<span class=\"n\">apply</span> <span class=\"n\">c</span><span class=\"o\">,</span>\n<span class=\"n\">apply</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n<span class=\"n\">apply</span> <span class=\"n\">c</span><span class=\"o\">,</span>\n<span class=\"n\">exact</span> <span class=\"n\">d</span><span class=\"o\">,</span>\n\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>Thank you :)</p>",
        "id": 328427236,
        "sender_full_name": "Pehan Amarathunge",
        "timestamp": 1676627991
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">begin</span>\n<span class=\"n\">intros</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span><span class=\"o\">,</span>\n<span class=\"n\">exact</span> <span class=\"n\">a</span> <span class=\"n\">c</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"n\">d</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 328429183,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1676628555
    },
    {
        "content": "<p>Hi Thank you for your reply.</p>\n<p>What exactly is the difference in how Lean interprets the  above statement if b(c) was used instead of (b c)?</p>",
        "id": 328432046,
        "sender_full_name": "Pehan Amarathunge",
        "timestamp": 1676629303
    },
    {
        "content": "<p>This issue is not specific to propositions. It happens with all kinds of functions. Lean has a similar syntax to Haskell and other lambda-calculussy languages.<br>\nIn math on paper you write:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">f</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">,</span><span class=\"n\">y</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>In Lean you write:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"n\">y</span>\n</code></pre></div>\n<p>You could also write <code>f(x)(y)</code> for the same effect but that is less readable. You cannot write <code>fxy</code> because it would be a single identifier.</p>",
        "id": 328432605,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1676629482
    },
    {
        "content": "<p>Parenthesis come when more-than-one-identifier term is an argument inside a bigger expression.<br>\nFor example, in math on paper you write:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">f</span><span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"n\">g</span><span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"o\">,</span><span class=\"mi\">3</span><span class=\"o\">),</span><span class=\"n\">h</span><span class=\"o\">(</span><span class=\"mi\">4</span><span class=\"o\">,</span><span class=\"mi\">5</span><span class=\"o\">),</span><span class=\"mi\">6</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>In Lean you write:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">f</span> <span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"mi\">2</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"mi\">4</span> <span class=\"mi\">5</span><span class=\"o\">)</span> <span class=\"mi\">6</span>\n</code></pre></div>",
        "id": 328433074,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1676629620
    },
    {
        "content": "<p>Thank you very much. That makes a lot of sense</p>",
        "id": 328433629,
        "sender_full_name": "Pehan Amarathunge",
        "timestamp": 1676629792
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"579866\">Pehan Amarathunge</span> has marked this topic as resolved.</p>",
        "id": 328433647,
        "sender_full_name": "Notification Bot",
        "timestamp": 1676629797
    },
    {
        "content": "<p>You're welcome! Feel free to ask anything you'll need to know!</p>",
        "id": 328433816,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1676629837
    }
]