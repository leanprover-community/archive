[
    {
        "content": "<p>I have a subtype of a tuple with some property defined in <code>SimpCompose</code>. Now I want to extract the property using pattern match. <br>\nHere's the code and I want to make <code>match s0 with ...</code> work so I can extract a proof of type <code>P n1 n2</code>. <br>\nHowever, <code>s0</code> is not matched with the inductive branch, and the error message is as follows:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">P</span><span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Nat</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span>\n<span class=\"kd\">inductive</span> <span class=\"n\">SimpCompose</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">Nat</span> <span class=\"bp\">×</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Prop</span> <span class=\"n\">where</span>\n<span class=\"bp\">|</span> <span class=\"n\">SimpPara</span> <span class=\"n\">n1</span> <span class=\"n\">n2</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"n\">n1</span> <span class=\"n\">n2</span><span class=\"o\">):</span> <span class=\"n\">SimpCompose</span> <span class=\"o\">(</span><span class=\"n\">n1</span><span class=\"o\">,</span><span class=\"n\">n2</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">extractLeft</span> <span class=\"o\">(</span><span class=\"n\">stm</span><span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">s</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">Nat</span> <span class=\"bp\">×</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">//</span> <span class=\"n\">SimpCompose</span> <span class=\"n\">s</span> <span class=\"o\">})</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"n\">s0</span><span class=\"o\">:</span> <span class=\"n\">SimpCompose</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">stm.property</span>\n  <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">x1</span><span class=\"o\">,</span> <span class=\"n\">x2</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">stm.val</span>  <span class=\"c1\">-- i can do this</span>\n  <span class=\"k\">match</span> <span class=\"n\">s0</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">SimpCompose.SimpPara</span> <span class=\"n\">n1</span> <span class=\"n\">n2</span> <span class=\"n\">p</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">p</span>\n<span class=\"c\">/-</span><span class=\"cm\"> error messages</span>\n<span class=\"cm\">type mismatch</span>\n<span class=\"cm\">  SimpCompose.SimpPara n1 n2 p</span>\n<span class=\"cm\">has type</span>\n<span class=\"cm\">  SimpCompose (n1, n2) : Prop</span>\n<span class=\"cm\">but is expected to have type</span>\n<span class=\"cm\">  SimpCompose stm.val : Prop</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>\n<p>I'm wondering is there some way I could make it work? I'm also wondering why the code wouldn't work even if I can write <code>let (x1, x2) := stm.val</code>. Thanks!</p>",
        "id": 401065561,
        "sender_full_name": "Z. Wu",
        "timestamp": 1699500753
    },
    {
        "content": "<p>I'm not exactly happy with the following because it uses tactics , but it is one possible solution:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">extractLeft</span> <span class=\"o\">(</span><span class=\"n\">stm</span><span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">s</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">Nat</span> <span class=\"bp\">×</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">//</span> <span class=\"n\">SimpCompose</span> <span class=\"n\">s</span> <span class=\"o\">})</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span>  <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"n\">x1</span> <span class=\"o\">:=</span> <span class=\"n\">stm.val.1</span>\n  <span class=\"k\">let</span> <span class=\"n\">x2</span> <span class=\"o\">:=</span> <span class=\"n\">stm.val.2</span>\n  <span class=\"k\">let</span> <span class=\"n\">s</span><span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"n\">x1</span> <span class=\"n\">x2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"k\">let</span> <span class=\"n\">s0</span><span class=\"o\">:</span> <span class=\"n\">SimpCompose</span> <span class=\"o\">(</span><span class=\"n\">x1</span><span class=\"o\">,</span> <span class=\"n\">x2</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">stm.property</span>\n    <span class=\"n\">cases</span> <span class=\"n\">s0</span>\n    <span class=\"n\">rename_i</span> <span class=\"n\">h0</span>\n    <span class=\"n\">exact</span> <span class=\"n\">h0</span>\n  <span class=\"n\">s</span>\n</code></pre></div>",
        "id": 401085647,
        "sender_full_name": "Z. Wu",
        "timestamp": 1699511087
    },
    {
        "content": "<p>My other attempt involves using the following, and trying to use propositional inequality, but seems not working with the same error (apparently, b/c x1 and x2 are not the same as n1 and n2)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">extractLeft</span> <span class=\"o\">(</span><span class=\"n\">stm</span><span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">s</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">Nat</span> <span class=\"bp\">×</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">//</span> <span class=\"n\">SimpCompose</span> <span class=\"n\">s</span> <span class=\"o\">})</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span>  <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"n\">x1</span> <span class=\"o\">:=</span> <span class=\"n\">stm.val.1</span>\n  <span class=\"k\">let</span> <span class=\"n\">x2</span> <span class=\"o\">:=</span> <span class=\"n\">stm.val.2</span>\n  <span class=\"k\">let</span> <span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x1</span><span class=\"o\">,</span> <span class=\"n\">x2</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">stm.val</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">unfold_let</span><span class=\"bp\">;</span> <span class=\"n\">rfl</span>\n  <span class=\"n\">h</span> <span class=\"bp\">▸</span> <span class=\"k\">match</span> <span class=\"n\">stm.property</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">SimpPara</span> <span class=\"n\">n1</span> <span class=\"n\">n2</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">h</span>\n</code></pre></div>",
        "id": 401087103,
        "sender_full_name": "Z. Wu",
        "timestamp": 1699512140
    },
    {
        "content": "<p>Ok final attempt, which works much better like coq:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">P</span><span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Nat</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span>\n<span class=\"kd\">inductive</span> <span class=\"n\">SimpCompose</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">Nat</span> <span class=\"bp\">×</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Prop</span> <span class=\"n\">where</span>\n<span class=\"bp\">|</span> <span class=\"n\">SimpPara</span> <span class=\"n\">n1</span> <span class=\"n\">n2</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"n\">n1</span> <span class=\"n\">n2</span><span class=\"o\">):</span> <span class=\"n\">SimpCompose</span> <span class=\"o\">(</span><span class=\"n\">n1</span><span class=\"o\">,</span><span class=\"n\">n2</span><span class=\"o\">)</span>\n\n\n<span class=\"kd\">def</span> <span class=\"n\">extractLeft</span> <span class=\"o\">(</span><span class=\"n\">stm</span><span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">s</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">Nat</span> <span class=\"bp\">×</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">//</span> <span class=\"n\">SimpCompose</span> <span class=\"n\">s</span> <span class=\"o\">})</span>  <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"n\">res</span><span class=\"o\">:</span> <span class=\"n\">SimpCompose</span> <span class=\"o\">(</span><span class=\"n\">P</span><span class=\"o\">:=</span><span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">stm.property</span>\n  <span class=\"k\">match</span> <span class=\"n\">res</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">SimpPara</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">h</span>\n</code></pre></div>",
        "id": 401091132,
        "sender_full_name": "Z. Wu",
        "timestamp": 1699514598
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"649880\">Z. Wu</span> has marked this topic as resolved.</p>",
        "id": 401091448,
        "sender_full_name": "Notification Bot",
        "timestamp": 1699514781
    },
    {
        "content": "<p>If it is not essential that <code>SimpCompose</code> be a type,</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">simpCompose</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">×</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"o\">⟨</span><span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">n</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">P</span> <span class=\"n\">m</span> <span class=\"n\">n</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">simpCompose</span> <span class=\"n\">P</span> <span class=\"o\">(</span><span class=\"mi\">7</span><span class=\"o\">,</span> <span class=\"mi\">11</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"mi\">7</span> <span class=\"mi\">11</span> <span class=\"o\">:=</span> <span class=\"n\">h</span>\n</code></pre></div>",
        "id": 401145104,
        "sender_full_name": "Richard Copley",
        "timestamp": 1699532429
    }
]