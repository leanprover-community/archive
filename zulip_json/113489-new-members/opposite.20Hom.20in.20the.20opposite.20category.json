[
    {
        "content": "<p>Just starting to learn categories from Aluffi. What are the differences between the two C^op I defined here, and why does mathlib go for the second one?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.CategoryTheory.Category.Basic</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">autoImplicit</span> <span class=\"n\">false</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">CategoryTheory</span>\n\n<span class=\"c1\">-- 3.1.  Let C be a category. Consider a structure C·µí·µñ with Obj(C·µí·µñ) := Obj(C);</span>\n<span class=\"c1\">-- for A, B objects of C·µí·µñ (hence objects of C), Hom_C·µí·µñ(A, B) := Hom_C(B, A).</span>\n<span class=\"c1\">-- Show how to make this into a category (that is, define composition of morphisms in C·µí·µñ</span>\n<span class=\"c1\">-- and verify the properties listed in ¬ß3.1).</span>\n<span class=\"c1\">-- Intuitively, the 'opposite' category C·µí·µñ is simply obtained by `reversing all the arrows' in C.</span>\n<span class=\"c1\">-- [5.1, ¬ßVIII.1.1, ¬ßIX.1.2, IX.1.10]</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">hC</span> <span class=\"o\">:</span> <span class=\"n\">Category</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Category</span> <span class=\"o\">(</span><span class=\"n\">C</span><span class=\"bp\">·µí·µñ</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">Hom</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">hC.Hom</span> <span class=\"n\">b.unop</span> <span class=\"n\">a.unop</span><span class=\"o\">)</span>\n  <span class=\"n\">id</span> <span class=\"n\">X</span> <span class=\"o\">:=</span> <span class=\"mi\">ùüô</span> <span class=\"n\">X.unop</span>\n  <span class=\"n\">comp</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:=</span> <span class=\"n\">g</span> <span class=\"bp\">‚â´</span> <span class=\"n\">f</span>\n  <span class=\"n\">id_comp</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"n\">hC.comp_id</span> <span class=\"n\">f</span>\n  <span class=\"n\">comp_id</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"n\">hC.id_comp</span> <span class=\"n\">f</span>\n  <span class=\"n\">assoc</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">hC.assoc</span> <span class=\"n\">h</span> <span class=\"n\">g</span> <span class=\"n\">f</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">hC</span> <span class=\"o\">:</span> <span class=\"n\">Category</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Category</span> <span class=\"o\">(</span><span class=\"n\">C</span><span class=\"bp\">·µí·µñ</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">Hom</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">hC.Hom</span> <span class=\"n\">b.unop</span> <span class=\"n\">a.unop</span><span class=\"o\">)</span><span class=\"bp\">·µí·µñ</span>\n  <span class=\"n\">id</span> <span class=\"n\">X</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"mi\">ùüô</span> <span class=\"n\">X.unop</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">op</span>\n  <span class=\"n\">comp</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">g.unop</span> <span class=\"bp\">‚â´</span> <span class=\"n\">f.unop</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">op</span>\n  <span class=\"n\">id_comp</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"n\">Opposite.unop_injective</span> <span class=\"o\">(</span><span class=\"n\">hC.comp_id</span> <span class=\"n\">f.unop</span><span class=\"o\">)</span>\n  <span class=\"n\">comp_id</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"n\">Opposite.unop_injective</span> <span class=\"o\">(</span><span class=\"n\">hC.id_comp</span> <span class=\"n\">f.unop</span><span class=\"o\">)</span>\n  <span class=\"n\">assoc</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"n\">Opposite.unop_injective</span> <span class=\"o\">(</span><span class=\"n\">hC.assoc</span> <span class=\"n\">h.unop</span> <span class=\"n\">g.unop</span> <span class=\"n\">f.unop</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span>\n</code></pre></div>",
        "id": 359654396,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1684501471
    },
    {
        "content": "<p>This topic was moved here from <a class=\"stream-topic\" data-stream-id=\"113489\" href=\"/#narrow/stream/113489-new-members/topic/opposite.20Him.20in.20the.20opposite.20category\">#new members &gt; opposite Him in the opposite category</a> by <span class=\"user-mention silent\" data-user-id=\"308899\">Yakov Pechersky</span>.</p>",
        "id": 359654483,
        "sender_full_name": "Notification Bot",
        "timestamp": 1684501488
    },
    {
        "content": "<p>I could be wrong, but I suspect that the choice of the second one has to do with avoiding seeing through the defeq of the morphisms. This way it is protected under the <code>op</code>. But I'm speculating.</p>",
        "id": 359656530,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1684501882
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Opposite#doc\">docs4#Opposite</a> aah it's a one field structure</p>",
        "id": 359656985,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1684501970
    },
    {
        "content": "<p>I made the change in this PR <a href=\"https://github.com/leanprover-community/mathlib4/pull/3193\">!4#3193</a>. The reason was what <span class=\"user-mention\" data-user-id=\"197836\">@Jireh Loreaux</span> guessed.</p>",
        "id": 359745801,
        "sender_full_name": "Jo√´l Riou",
        "timestamp": 1684522760
    }
]