[
    {
        "content": "<p>I am trying to prove this simple lemma:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x.length</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">List.foldr</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"mi\">0</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">List.length_eq_zero</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 372423408,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1688509767
    },
    {
        "content": "<p>I am surprised <code>x</code> is not turned into <code>[]</code></p>",
        "id": 372423505,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1688509813
    },
    {
        "content": "<p><code>simp [List.length_eq_zero] at h</code></p>",
        "id": 372425455,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1688511094
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">List.length_eq_zero</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 372425615,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1688511214
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"122318\">Tobias Grosser</span> has marked this topic as resolved.</p>",
        "id": 372425625,
        "sender_full_name": "Notification Bot",
        "timestamp": 1688511226
    },
    {
        "content": "<p>Thank you, <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span></p>",
        "id": 372425646,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1688511242
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x.length</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">List.foldr</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"mi\">0</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp_all</span> <span class=\"o\">[</span><span class=\"n\">List.length_eq_zero</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 372425912,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1688511417
    },
    {
        "content": "<p>That's even better.</p>",
        "id": 372426039,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1688511491
    },
    {
        "content": "<p>Nice.</p>",
        "id": 372426044,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1688511496
    },
    {
        "content": "<p>Yeah I'd never heard of that tactic but I searched through the maths library trying to find a one-liner :-)</p>",
        "id": 372426446,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1688511720
    },
    {
        "content": "<p>Its especially nice if you have an induction and you are toolazy to name the assumptions and goals after induction are trivially provable via simp + assumptions</p>",
        "id": 372426535,
        "sender_full_name": "Henrik BÃ¶ving",
        "timestamp": 1688511766
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/.E2.9C.94.20foldr.20on.20empty.20list/near/372426446\">said</a>:</p>\n<blockquote>\n<p>Yeah I'd never heard of that tactic but I searched through the maths library trying to find a one-liner :-)</p>\n</blockquote>\n<p>In lean 3 it was spelled <code>simp [*] at *</code></p>",
        "id": 372428768,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1688513485
    },
    {
        "content": "<p>Cool. I new it before, just somehow see it as a a tool for proof exploration that may sometimes cross-simplify to a degree that I loose structure (or even information). Hence, I use it cautiously.</p>",
        "id": 372471207,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1688536187
    },
    {
        "content": "<p>I am still surprised when I run into cases where the simplification is clear, but Lean needs some guidance.</p>",
        "id": 372471324,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1688536224
    },
    {
        "content": "<p>Interestingly, the more I understand the easier it is to do the right thing,</p>",
        "id": 372471356,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1688536251
    },
    {
        "content": "<p>Thank you all for the quick help here.</p>",
        "id": 372471375,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1688536261
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> the point is that <code>simp [*] at *</code> doesn't close the goal</p>",
        "id": 372476255,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1688538067
    }
]