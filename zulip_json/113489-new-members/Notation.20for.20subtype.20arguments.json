[
    {
        "content": "<p>I've been playing around with functions on subtypes and I noticed when I want to have arguments from a subtype I end up typing things like <br>\n<code>(n : {n : ℕ //  2 ∣ n})</code>, which awkwardly repeats <code>n :</code>. Is there a better notation for this? I've been considering writing a macro which translates <code>(n : ℕ //  2 ∣ n)</code>, into the previous form, would this be a good idea?</p>\n<p>Here is a mwe:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">trueDiv</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">//</span> <span class=\"mi\">2</span> <span class=\"bp\">∣</span> <span class=\"n\">n</span><span class=\"o\">})</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"n\">n</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span>\n</code></pre></div>\n<p>PS: Is new members the right place to ask this question?</p>",
        "id": 396640020,
        "sender_full_name": "Markus Schmaus",
        "timestamp": 1697280697
    },
    {
        "content": "<p>Another option here is <code>def trueDiv (n : Subtype (2 ∣ ·)) : ℕ := n / 2</code>, though I'm not sure if it's better</p>",
        "id": 396640668,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1697281125
    },
    {
        "content": "<p>I guess we could have a special syntax for arguments, <code>(n : Nat // 2 | n)</code> does look quite clean to me. In the mean time, your best option is probably to give a name to your subtype if you use it repeatedly</p>",
        "id": 396642191,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1697282201
    },
    {
        "content": "<p>Such syntax was already talked about (cc <span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span>). I'm personally in favour of it.</p>",
        "id": 396643240,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1697283108
    },
    {
        "content": "<p>That looks nice.</p>",
        "id": 396672974,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1697311725
    },
    {
        "content": "<p><a href=\"#narrow/stream/270676-lean4/topic/.E2.9C.94.20definition.20for.20lambda.2Fsubtype.20sugar\">A while back</a>,  I proposed syntax  <br>\n<code>n : {// 2 ∣ ·}</code> for this <br>\n(which, IMO, is the most succinct and consistent).</p>",
        "id": 396863632,
        "sender_full_name": "Somo S.",
        "timestamp": 1697449738
    },
    {
        "content": "<p>At the time, it was suggested that perhaps there is not enough of an advantage to adding such syntax to lean itself, so maybe not worthwhile to add upstream.. Anyway, <span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span>  hacked together a quick implementation of it which inspired me to write it into a little convenience library (called <a href=\"https://github.com/somombo/supertype\">Supertype</a> ) that I use for my own projects where I want this feature.</p>",
        "id": 396863727,
        "sender_full_name": "Somo S.",
        "timestamp": 1697449764
    },
    {
        "content": "<p>The next thing I'd like to explore in <a href=\"https://github.com/somombo/supertype\">Supertype</a> is incorporating \"destructured\" pattern match syntax like:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">{(</span><span class=\"n\">a</span><span class=\"o\">,</span><span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">//</span> <span class=\"mi\">5</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">}</span>\n</code></pre></div>\n<p>which, in this case, would be exactly the same as:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Subtype</span> <span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span><span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">5</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span>\n</code></pre></div>",
        "id": 396884382,
        "sender_full_name": "Somo S.",
        "timestamp": 1697456634
    },
    {
        "content": "<blockquote>\n<p>\"destructured\" pattern match syntax like <code>{(a,b) // 5 ≤ a + b}</code></p>\n</blockquote>\n<p>I continued pursuing this over here:<br>\n<a href=\"#narrow/stream/239415-metaprogramming-.2F-tactics/topic/.E2.9C.94.20destructured.20subtype.20pattern-match.20syntax\">https://leanprover.zulipchat.com/#narrow/stream/239415-metaprogramming-.2F-tactics/topic/.E2.9C.94.20destructured.20subtype.20pattern-match.20syntax</a></p>",
        "id": 398867845,
        "sender_full_name": "Somo S.",
        "timestamp": 1698401530
    }
]