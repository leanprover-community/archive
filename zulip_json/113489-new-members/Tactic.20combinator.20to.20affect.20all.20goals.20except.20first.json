[
    {
        "content": "<p>Say I have one goal. After <code>t1</code> there are now many goals. I think that <code>t2</code> should be able to solve all goals except the first. In these scenarios I often do <code>t1 &lt;;&gt; try t2</code>. Even though I <em>think</em> that <code>t2</code>should be able to deal with all goals except the first, it might not. Since I use <code>try</code>, the tactic won't fail. I am looking for a cleaner way to compose tactics (including failure if not all but the first goal could be solved) but couldn't find any. Is there one? Thanks!</p>",
        "id": 408985093,
        "sender_full_name": "Lorenz Leutgeb",
        "timestamp": 1703007286
    },
    {
        "content": "<p>I think this would be really nice, I'm not aware of such a combinator existing</p>",
        "id": 408985504,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1703007431
    },
    {
        "content": "<p>Just to nail down the specification, are you saying you want some combinator that runs a tactic on all the \"side goals\" produced by the first tactic? (And which will fail if the tactic fails on any of the side goals?)</p>",
        "id": 408986095,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1703007664
    },
    {
        "content": "<p>I think so, yes.</p>",
        "id": 408986167,
        "sender_full_name": "Lorenz Leutgeb",
        "timestamp": 1703007699
    },
    {
        "content": "<p>It seems like there ought to be a dual to <code>focus</code>, where it focuses on all goals but the first. Let's call it <code>defocus</code>. Then you could write</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">t1</span>\n<span class=\"n\">defocus</span> <span class=\"n\">all_goals</span> <span class=\"n\">t2</span>\n</code></pre></div>",
        "id": 408986451,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1703007815
    },
    {
        "content": "<p>That's assuming you're starting with just one goal.</p>",
        "id": 408986566,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1703007846
    },
    {
        "content": "<p>Yes, I found out about <code>focus</code> and had a similar idea. But that turned out to be a dead end.</p>",
        "id": 408986658,
        "sender_full_name": "Lorenz Leutgeb",
        "timestamp": 1703007887
    },
    {
        "content": "<p>A missing combinator is a version of <code>&lt;;&gt;</code> that makes it so that the goal state is all the goals produced by the first tactic, rather than running the second tactic on each goal.</p>",
        "id": 408986678,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1703007894
    },
    {
        "content": "<p>Which part is the dead end? That it's missing, or that there's a reason it can't be implemented?</p>",
        "id": 408986716,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1703007911
    },
    {
        "content": "<p>Ideally, I'd also hope the syntax to be shorter. I'm thinking of <code>&lt;1&gt;</code> or something similar. For the \"version of <code>&lt;;&gt;</code>\" that you are describing.</p>",
        "id": 408986818,
        "sender_full_name": "Lorenz Leutgeb",
        "timestamp": 1703007960
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/113489-new-members/topic/Tactic.20combinator.20to.20affect.20all.20goals.20except.20first/near/408986716\">said</a>:</p>\n<blockquote>\n<p>Which part is the dead end? That it's missing, or that there's a reason it can't be implemented?</p>\n</blockquote>\n<p>That it's missing. I would be very surprised if it couldn't be implemented.</p>",
        "id": 408986892,
        "sender_full_name": "Lorenz Leutgeb",
        "timestamp": 1703007983
    },
    {
        "content": "<p>I wonder what a good syntax would be for \"run this on all but the first.\" The strongest I've come up with so far is <code>&lt;-;&gt;</code>, where the <code>-</code> is supposed to hint that it's without one of the goals. I think the <code>;</code> hints that it's like <code>&lt;;&gt;</code>.</p>",
        "id": 408987317,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1703008171
    },
    {
        "content": "<p>Yeah, I do see the argument for keeping <code>;</code> around. But we're bikeshedding :)</p>",
        "id": 408987580,
        "sender_full_name": "Lorenz Leutgeb",
        "timestamp": 1703008283
    },
    {
        "content": "<p>The only real question here is what color should the bike shed be, and we're stuck with its color once it's chosen.</p>",
        "id": 408987641,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1703008310
    },
    {
        "content": "<p>Well, if that tactic combinator gets released as part of Lean/mathlib, then we'd be stuck. But I'd also be happy to just copy someone else's implementation into my project and enjoy that while someone else does the bikeshedding :)</p>",
        "id": 408987881,
        "sender_full_name": "Lorenz Leutgeb",
        "timestamp": 1703008421
    },
    {
        "content": "<p>(<span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> Would this <code>t1 &lt;-;&gt; t2</code> combinator (specific notation pending) be crazy to add to std? I know I've written things like <code>apply foo &lt;;&gt; try assumption</code> when <code>apply foo &lt;-;&gt; assumption</code> would be more accurate. The assumption is that tactics tend to put side goals after the \"main\" goal, so the purpose of this combinator is to run the tactic on all generated goals but the first.)</p>",
        "id": 408987965,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1703008450
    },
    {
        "content": "<p>It might be nice if this were part of some set of more composable combinators. My reservation is that this one seems like it is too specific, but on the other hand if the combinators are too expressive it could get difficult to follow proofs that use them.</p>",
        "id": 408988133,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1703008531
    },
    {
        "content": "<p><code>t1 &lt;;&gt; (?_ :: t2)</code> maybe, to match <code>t1 &lt;;&gt; [?_, t2, t2, t2]</code>?</p>",
        "id": 408993622,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1703010572
    },
    {
        "content": "<p>I was thinking of <code>t1; rest =&gt; t2</code></p>",
        "id": 409004021,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1703014691
    },
    {
        "content": "<p>or <code>case -foo =&gt; t2</code></p>",
        "id": 409004065,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1703014723
    },
    {
        "content": "<p>because I think you sometimes also want to exclude a non-first goal, e.g. in an induction where almost all the cases are trivial</p>",
        "id": 409004149,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1703014764
    }
]