[
    {
        "content": "<p>Working in lean 4, I have a term defined by a match involving two terms with some specific cases I pull out and then a wildcard case covering everything else.</p>\n<p>For a somewhat simplified example, something like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">diag</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">:</span><span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span><span class=\"o\">:</span><span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"k\">match</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span> <span class=\"k\">with</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">true</span>\n<span class=\"bp\">|</span> <span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">true</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">false</span>\n</code></pre></div>\n<p>I'm running into trouble proving anything about the wildcard case, though (e.g. lemma x (a:ℕ) (b:ℕ) : diag a b → (a=0∨ a=1) ). When I try to use the same match set up in the proof, the wildcard case doesn't seem to have any hypothesis recognizing that it's not in one of the overlapping cases, so I can't prove it that way, and I haven't been able to make other tactics (e.g. cases) work either, though perhaps there's a subtlety I haven't caught.</p>\n<p>(In this case handling the cases manually with by_cases or the like wouldn't be so bad, but the actual example involves more cases and I need to prove several lemmas that all parallel the match structure of the definition, so it would be nice to have a structured way to do this.)</p>",
        "id": 367731449,
        "sender_full_name": "Henry Towsner",
        "timestamp": 1687201829
    },
    {
        "content": "<p>the easiest way to reason about this function is to use the <code>split</code> tactic after it appears in the goal</p>",
        "id": 367737482,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1687203960
    },
    {
        "content": "<p>How does one use the split tactic? When I use it unmodified, it says \"tactic 'split' failed\", and when I try something like \"split diag\" it says \"'split' tactic, term to split is not supported yet\", and I can't seem to figure out the right way to use it.</p>",
        "id": 367768689,
        "sender_full_name": "Henry Towsner",
        "timestamp": 1687219343
    },
    {
        "content": "<p>Aha, found it. The answer, for anyone else with the same problem, is that you have to unfold or expand the definition into a big match expression before using split.</p>",
        "id": 367768997,
        "sender_full_name": "Henry Towsner",
        "timestamp": 1687219583
    }
]