[
    {
        "content": "<p>Hey there, I have a fiel in which I defined an inductive type, and I'd like to tell Lean that equality over this type is decidable (which, if I am not mistaken, is always the case ?).</p>\n<p>I can't find a way to do so, am I missing something ?</p>",
        "id": 396501125,
        "sender_full_name": "Thomas Vigouroux",
        "timestamp": 1697201949
    },
    {
        "content": "<p>You can write <code>deriving DecidableEq</code> after the type</p>",
        "id": 396501206,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1697201990
    },
    {
        "content": "<p>Awesome !</p>\n<p>I feel I am missing a lot of reading on things, what should I be reading to avoid bothering with too many questions ?</p>",
        "id": 396501670,
        "sender_full_name": "Thomas Vigouroux",
        "timestamp": 1697202135
    },
    {
        "content": "<p>Inductives being decidable: It is definitely not always decidable! What if your type encodes a pair of real numbers?</p>\n<p>Bothering with too many questions: please just ask questions here in <a class=\"stream\" data-stream-id=\"113489\" href=\"/#narrow/stream/113489-new-members\">#new members</a> , it's absolutely fine. Lean 4 is a very new language and documentation is still being written. Perhaps you would like <a href=\"https://leanprover.github.io/functional_programming_in_lean/\">#fpil</a> and <a href=\"https://leanprover.github.io/theorem_proving_in_lean4/\">#tpil</a> ? If you're more mathematical you might like <a href=\"https://leanprover-community.github.io/mathematics_in_lean/\">#mil</a> .</p>",
        "id": 396504627,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1697203181
    },
    {
        "content": "<p>Indeed !</p>\n<p>Thanks for the reading suggestions. I have been following a little <a href=\"https://leanprover.github.io/theorem_proving_in_lean4/\">#tpil</a> to learn too.</p>\n<p>I still keep getting blocked though !</p>",
        "id": 396505102,
        "sender_full_name": "Thomas Vigouroux",
        "timestamp": 1697203324
    },
    {
        "content": "<p>Okay so I encounter another problem now.</p>\n<p>I have a type</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">Assignement</span> <span class=\"o\">(</span><span class=\"n\">S</span><span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span> <span class=\"n\">S</span> <span class=\"bp\">â†’</span> <span class=\"n\">Bool</span>\n</code></pre></div>\n<p>For which I'd like to do <code>deriving DecidableEq</code>, but it says it fails. Does this mean I have to make the proof myself ?</p>",
        "id": 396543287,
        "sender_full_name": "Thomas Vigouroux",
        "timestamp": 1697216596
    },
    {
        "content": "<p>Yes, unfortunately <code>deriving</code> only works on inductive types</p>",
        "id": 396543507,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1697216699
    },
    {
        "content": "<p>The proof is easy though; you just have to tell Lean to look at how Assignement is defined, and it can find the rest automatically</p>",
        "id": 396543565,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1697216728
    },
    {
        "content": "<p>I am not sure I know how to do that though...</p>",
        "id": 396543704,
        "sender_full_name": "Thomas Vigouroux",
        "timestamp": 1697216768
    },
    {
        "content": "<p>The easy path here is to replace <code>def</code> with <code>abbrev</code></p>",
        "id": 396543762,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1697216804
    },
    {
        "content": "<p>Either your type is genuinely a new thing (in which case you probably should use a <code>structure</code> and <code>deriving</code> will work), or it's not and you should tell lean it's just a shorthand with <code>abbrev</code></p>",
        "id": 396543879,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1697216856
    },
    {
        "content": "<p>Oh then I might have been using <code>def</code> too much indeed.<br>\nI'll try with <code>abbrev</code> when I get back to this, thanks for the suggestion!</p>",
        "id": 396545679,
        "sender_full_name": "Thomas Vigouroux",
        "timestamp": 1697217718
    },
    {
        "content": "<p>Every definition hides what it's defining. Lean does not unfold definitions by default -- if it did, then the kind of things I study as a mathematician would be monstrously huge and unusable. If you define <code>def X := Nat</code> then <code>37 : X</code> won't work because Lean will not unfold <code>X</code>. No tactics about naturals will work for <code>X</code> etc.</p>",
        "id": 396546093,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1697217907
    },
    {
        "content": "<p>Okay, so it works great with using <code>abbrev</code> indeed, thank you very much for this help !</p>",
        "id": 396622302,
        "sender_full_name": "Thomas Vigouroux",
        "timestamp": 1697265869
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"658705\">Thomas Vigouroux</span> has marked this topic as resolved.</p>",
        "id": 396622306,
        "sender_full_name": "Notification Bot",
        "timestamp": 1697265873
    }
]