[
    {
        "content": "<p>I'm currently playing around with sheaves of rings and need to express a bunch of times that one ring is an algebra of another. For example there is the following instance of an algebra induced by morphisms of sheaves (natural transformations)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">homAlgebra</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">TopCat</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">O</span> <span class=\"n\">O'</span><span class=\"o\">:</span> <span class=\"n\">TopCat.Presheaf</span> <span class=\"n\">CommRingCat</span> <span class=\"n\">X</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">O</span> <span class=\"bp\">⟶</span> <span class=\"n\">O'</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">TopologicalSpace.Opens</span> <span class=\"n\">X</span><span class=\"o\">)</span><span class=\"bp\">ᵒᵖ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">Algebra</span> <span class=\"o\">(</span><span class=\"n\">O.obj</span> <span class=\"n\">U</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">O'.obj</span> <span class=\"n\">U</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">f.app</span> <span class=\"n\">U</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">toAlgebra</span>\n</code></pre></div>\n<p>Ideally I would like to write something like the following</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">KaehlerObj</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">TopCat</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">O</span> <span class=\"n\">O'</span><span class=\"o\">:</span> <span class=\"n\">TopCat.Presheaf</span> <span class=\"n\">CommRingCat</span> <span class=\"n\">X</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">O</span> <span class=\"bp\">⟶</span> <span class=\"n\">O'</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">TopologicalSpace.Opens</span> <span class=\"n\">X</span><span class=\"o\">)</span><span class=\"bp\">ᵒᵖ</span> <span class=\"bp\">→</span> <span class=\"n\">Ab</span>\n  <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">U</span> <span class=\"bp\">↦</span> <span class=\"n\">AddCommGroupCat.of</span> <span class=\"bp\">$</span> <span class=\"bp\">Ω</span><span class=\"o\">[</span><span class=\"n\">O'.obj</span> <span class=\"n\">U</span> <span class=\"bp\">⁄</span> <span class=\"n\">O.obj</span> <span class=\"n\">U</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>but it complains that it cannot synthesize an instance of <code>Algebra (O.obj U) (O'.obj U) </code>. I could explicitly pass the instance using the <code>@</code> notation but this will get out of hand really quickly as some definitions use up to 12 instances most of which cannot be derived implicitly. Is there any way to make this easier and automatically synthesize the types?</p>",
        "id": 383959406,
        "sender_full_name": "Jonas van der Schaaf",
        "timestamp": 1691759983
    },
    {
        "content": "<p>Your first instance isn't useful to Lean, because it doesn't know how to find <code>f</code>.</p>",
        "id": 384041049,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1691773547
    },
    {
        "content": "<p>I think you need to define a \"sheaf of algebras\", and then you can use that.</p>",
        "id": 384041137,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1691773564
    },
    {
        "content": "<p>Thank you, that solves this problem.</p>\n<p>I'm also running into essentially the same problem again where I would like the restriction maps to induce algebras as such:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">restrictAlgebra</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">TopCat</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">sheaf</span> <span class=\"o\">:</span> <span class=\"n\">AlgebraSheaf</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">U</span> <span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">TopologicalSpace.Opens</span> <span class=\"n\">X</span><span class=\"o\">)</span><span class=\"bp\">ᵒᵖ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f_UV</span> <span class=\"o\">:</span> <span class=\"n\">U</span> <span class=\"bp\">⟶</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Algebra</span> <span class=\"o\">(</span><span class=\"n\">sheaf.base.obj</span> <span class=\"n\">U</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">sheaf.base.obj</span> <span class=\"n\">V</span><span class=\"o\">)</span>\n  <span class=\"o\">:=</span> <span class=\"n\">RingHom.toAlgebra</span> <span class=\"o\">(</span><span class=\"n\">sheaf.base.map</span> <span class=\"n\">f_UV</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>I'm not quite sure how to proceed in a similar way to your previous solution.</p>",
        "id": 384099918,
        "sender_full_name": "Jonas van der Schaaf",
        "timestamp": 1691790682
    },
    {
        "content": "<p>Can you make a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> ? This is probably easy to solve by just inserting the instance at the point of use, but I don't know the imports. Edit: oh forget it, <code>import Mathlib</code> works fine :-)</p>",
        "id": 384104846,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1691793029
    },
    {
        "content": "<p>You've hit a diamond:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">⊢</span> <span class=\"n\">CategoryTheory.Groupoid.toCategory</span> <span class=\"bp\">=</span> <span class=\"n\">Preorder.smallCategory</span> <span class=\"o\">(</span><span class=\"n\">TopologicalSpace.Opens</span> <span class=\"bp\">↑</span><span class=\"n\">X</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 384105730,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1691793411
    },
    {
        "content": "<p>Your error is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">synthesized</span> <span class=\"n\">type</span> <span class=\"kd\">class</span> <span class=\"kd\">instance</span> <span class=\"n\">is</span> <span class=\"n\">not</span> <span class=\"n\">definitionally</span> <span class=\"n\">equal</span> <span class=\"n\">to</span> <span class=\"n\">expression</span> <span class=\"n\">inferred</span> <span class=\"kd\">by</span> <span class=\"n\">typing</span> <span class=\"n\">rules</span><span class=\"o\">,</span> <span class=\"n\">synthesized</span>\n  <span class=\"n\">CategoryTheory.Category.opposite</span>\n<span class=\"n\">inferred</span>\n  <span class=\"n\">CategoryTheory.Category.opposite</span>\n</code></pre></div>\n<p>but if you switch <code>pp.all</code> on then you can compare the terms and find out what's different about them, and it's these two category constructions on <code>TopologicalSpace.Opens X</code>, which apparently aren't definitionally equal. At least that's what happens with my imports -- you never told me yours...</p>",
        "id": 384106113,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1691793624
    },
    {
        "content": "<p>Oh, with <code>attribute [-instance] CategoryTheory.Groupoid.toCategory in</code> I see the error that you're probably seeing, and here's how to fix it:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"bp\">-</span><span class=\"kd\">instance</span><span class=\"o\">]</span> <span class=\"n\">CategoryTheory.Groupoid.toCategory</span> <span class=\"k\">in</span>\n<span class=\"kd\">def</span> <span class=\"n\">KaehlerObj</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">TopCat.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}}</span> <span class=\"o\">{</span><span class=\"n\">O</span> <span class=\"n\">O'</span><span class=\"o\">:</span> <span class=\"n\">TopCat.Presheaf.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">,</span><span class=\"mi\">0</span><span class=\"o\">,</span><span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"n\">CommRingCat</span> <span class=\"n\">X</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">O</span> <span class=\"bp\">⟶</span> <span class=\"n\">O'</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"n\">TopologicalSpace.Opens</span> <span class=\"n\">X</span><span class=\"o\">)</span><span class=\"bp\">ᵒᵖ</span> <span class=\"bp\">→</span> <span class=\"n\">Ab</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">λ</span> <span class=\"n\">U</span> <span class=\"bp\">↦</span>\n    <span class=\"k\">let</span> <span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">Algebra</span> <span class=\"o\">(</span><span class=\"n\">O.obj</span> <span class=\"n\">U</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">O'.obj</span> <span class=\"n\">U</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">RingHom.toAlgebra</span> <span class=\"o\">(</span><span class=\"n\">f.app</span> <span class=\"n\">U</span><span class=\"o\">)</span>\n    <span class=\"n\">AddCommGroupCat.of</span> <span class=\"bp\">$</span> <span class=\"bp\">Ω</span><span class=\"o\">[</span><span class=\"n\">O'.obj</span> <span class=\"n\">U</span> <span class=\"bp\">⁄</span> <span class=\"n\">O.obj</span> <span class=\"n\">U</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 384106528,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1691793846
    },
    {
        "content": "<p>Thank you so much, sorry for not providing a proper mwe.</p>",
        "id": 384254137,
        "sender_full_name": "Jonas van der Schaaf",
        "timestamp": 1691844215
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"631408\">Jonas van der Schaaf</span> has marked this topic as resolved.</p>",
        "id": 384254225,
        "sender_full_name": "Notification Bot",
        "timestamp": 1691844240
    }
]