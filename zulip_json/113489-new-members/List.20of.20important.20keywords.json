[
    {
        "content": "<p>I recently learned about the \"list of all tactics\" (<a href=\"https://github.com/haruhisa-enomoto/mathlib4-all-tactics/blob/main/all-tactics.md\">github</a>). It's sorted alphabetically, not by \"commonness\" or \"typo of situation to use in\", but it's still great to have. I think the learning materials  (e.g. manual, books) should mention it.</p>\n<p>Is there something analogous that <strong>lists all keywords</strong> of the base language? I'm wondering, for example, where I can find out about the difference between <code>def</code>and <code>abbrev</code>. (<em>Note: I do want to know the difference, but my question is really where to find answers to such questions</em>)</p>",
        "id": 390072640,
        "sender_full_name": "Adomas Baliuka",
        "timestamp": 1694302164
    },
    {
        "content": "<p>Ideally you would just type each into the editor, and inspect the documentation that appears when you hover over them</p>",
        "id": 390073618,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1694303082
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span>  most of them give no documentation at all. Such as <code>abbrev</code> or <code>def</code> or <code>noncomputable</code>....  Some do work, for example <code>lemma</code> tells you it's the same as <code>theorem</code></p>",
        "id": 390073982,
        "sender_full_name": "Adomas Baliuka",
        "timestamp": 1694303433
    },
    {
        "content": "<p>At least this is a more reasonable task than trying to grok all tactics (of which there are dozens); my feeling is that there are only a few keywords. I think I've just picked them all up by osmosis and <a href=\"https://leanprover.github.io/theorem_proving_in_lean4/\">#tpil</a> .</p>",
        "id": 390074119,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1694303604
    },
    {
        "content": "<p>Optimistically then this could be fixed by a PR that just adds docstrings to lean4 itself where those commands are defined?</p>",
        "id": 390074312,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1694303787
    },
    {
        "content": "<p>Would such PRs be accepted? Personally I don't like how declarations like <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Nat.gcd#doc\">docs#Nat.gcd</a> don't have a docstring and would happily PR them.</p>",
        "id": 390074361,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1694303861
    },
    {
        "content": "<p>I take marks off students for writing definitions with no docstrings, so it's a shame to see it happening for definitions which they're using.</p>",
        "id": 390074417,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1694303891
    },
    {
        "content": "<p>As a new user, I would love more docstrings. </p>\n<p>Some things might <em>also</em> deserve something like a manual page. For example \"all keywords (ways?) to declare functions/Propositions/classes and the differences between them\". It feels to me like most (but not all) of these keywords are just redundant conveniences (e.g. probably <code>theorem</code>and certainly <code>lemma</code>). For example, I wonder if it's possible to define a type class without the <code>class</code>keyword, since the \"Functional Programming\" book says that classes are really \"just\" inductive types. But I don't know where to look for such details.</p>",
        "id": 390074837,
        "sender_full_name": "Adomas Baliuka",
        "timestamp": 1694304204
    },
    {
        "content": "<p><a href=\"https://leanprover.github.io/theorem_proving_in_lean4/\">#tpil</a> defines almost all keywords and gives lengthy explanations and examples (for example it explains how classes are really just inductive types)</p>",
        "id": 390075311,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1694304539
    },
    {
        "content": "<p>67 messages were moved from this topic to <a class=\"stream-topic\" data-stream-id=\"287929\" href=\"/#narrow/stream/287929-mathlib4/topic/lemma.20vs.20theorem\">#mathlib4 &gt; lemma vs theorem</a> by <span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span>.</p>",
        "id": 391499070,
        "sender_full_name": "Notification Bot",
        "timestamp": 1694955611
    },
    {
        "content": "<p>The following message is manually moved back from <a href=\"#narrow/stream/287929-mathlib4/topic/lemma.20vs.20theorem\">#mathlib4 &gt; lemma vs theorem </a> because personally, I want to dig deeper into this issue of understanding the keywords and symbols, but the following is the best I can do for now.</p>\n<blockquote>\n<p>While <a href=\"https://leanprover.github.io/theorem_proving_in_lean4/\">#tpil</a> is the most valuable book to read and understand what's under the hood of Lean and how they form high level abstractions, if you're looking for a list of \"keywords\" (which is hard to search) or \"symbols\" (even harder to search), they are mostly in the source of Lean 4 here: <a href=\"https://github.com/leanprover/lean4/tree/master/src/Lean/Parser\">Lean.Parser</a>, most of them are in <code>Term.lean</code> and <code>Command.lean</code>. They are declared here then implemented in <code>Lean.Elab</code> but it has less doc and is less readable there. The good thing is that you can search them better in these files with something like <code>«fun»</code> or <code>\"fun\"</code>, and you can find them in <a href=\"https://leanprover-community.github.io/mathlib4_docs/\">Mathlib4 doc</a> too like <code>Lean.Parser.Command.def</code> or <code>Parser.Term.fun</code>, but the source is better. You'll have a direct idea about how different are they parsed and elaborated, or it might be just one calling the other.</p>\n</blockquote>\n<blockquote>\n<p>I also find GPT-4 has good knowledge about Lean 4 syntax and notations, I usually paste a random code from Mathlib4 and ask it to explain the code for each keyword, notation or tactics depending on what I don't understand. Or just ask the differences between two keywords etc. and it gives good result as long as you quote them with `,  and you can even ask for examples. Sometimes the answer could be misleading, so remember to cross-check what it's telling you with Zulip search or doc/book search. In some cases, all it can give you is the inspiration of how to search.</p>\n</blockquote>",
        "id": 391609134,
        "sender_full_name": "Utensil Song",
        "timestamp": 1695007365
    }
]