[
    {
        "content": "<p>I've been banging my head against the wall, but can't get anything like this to work. It works fine if I change <code>k</code> to <code>Nat</code>.  But I can't get it to work for <code>Fin</code>.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">bounded_decrement</span> <span class=\"o\">(</span><span class=\"n\">k</span><span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"mi\">20</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span>\n<span class=\"k\">match</span> <span class=\"n\">k</span> <span class=\"k\">with</span>\n<span class=\"bp\">|</span> <span class=\"n\">Nat.zero</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"n\">Nat.succ</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">n</span>\n</code></pre></div>",
        "id": 377647446,
        "sender_full_name": "Dax Fohl",
        "timestamp": 1690045091
    },
    {
        "content": "<p>I'm ultimately looking for <code>def bounded_decrement (n: Nat) (k: Fin n) : Fin (n - 1)</code></p>",
        "id": 377647955,
        "sender_full_name": "Dax Fohl",
        "timestamp": 1690045282
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Fin.predAbove#doc\">docs#Fin.predAbove</a> ?</p>",
        "id": 377650400,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1690046256
    },
    {
        "content": "<p>For the first half of your question, maybe something like this?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">bounded_decrement</span> <span class=\"o\">(</span><span class=\"n\">k</span><span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"mi\">20</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span>\n<span class=\"k\">match</span> <span class=\"n\">k</span> <span class=\"k\">with</span>\n<span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"n\">Nat.zero</span><span class=\"o\">,</span> <span class=\"n\">hk</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"n\">Nat.succ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">hk</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">n</span>\n</code></pre></div>\n<p><code>hk</code> will be a proof that the natural number is less than <code>20</code>. What you have to be put in the <code>match</code> clause must be the same as how <code>Fin</code> is defined. A term <code>k</code> of type <code>Fin n</code> is essentially a <code>Nat</code> and a proof that <code>k &lt; n</code>, so to match on it you have to have a variable that stores that proof.</p>",
        "id": 377672297,
        "sender_full_name": "Niels Voss",
        "timestamp": 1690055503
    },
    {
        "content": "<p>(In case it isn't clear, <code>⟨Nat.zero, hk⟩</code> is in this context shorthand for <code>Fin.mk (Nat.zero) hk</code> and <code>⟨Nat.succ n, hk⟩</code> is shorthand for <code>Fin.mk (Nat.succ n) hk</code>.)</p>",
        "id": 377672617,
        "sender_full_name": "Niels Voss",
        "timestamp": 1690055654
    },
    {
        "content": "<p>Thanks! yeah I stumbled across that notation when looking at the def for <code>Fin.succ</code>.</p>",
        "id": 377717501,
        "sender_full_name": "Dax Fohl",
        "timestamp": 1690078589
    },
    {
        "content": "<p>You could also check out <code>Fin2</code>, which is like <code>Fin</code> but defined recursively. I don't know when you'd use it, but I found it interesting</p>",
        "id": 377729816,
        "sender_full_name": "Niels Voss",
        "timestamp": 1690086466
    }
]