[
    {
        "content": "<p>Hi all, I'm trying to figure out how I would encode type families a la Haskell. (For example, <code>Base</code> in <a href=\"https://hackage.haskell.org/package/recursion-schemes-5.2.2.4/docs/Data-Functor-Foldable.html\">Data.Functor.Foldable from recursion-schemes</a>) The best I can come up with is something approximating fundeps:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">Base</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">outParam</span> <span class=\"o\">(</span><span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">))</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">Base</span> <span class=\"o\">(</span><span class=\"n\">List</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ListF</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">Recursive</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span><span class=\"o\">:</span> <span class=\"n\">outParam</span> <span class=\"o\">(</span><span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">))</span> <span class=\"kd\">extends</span> <span class=\"n\">Base</span> <span class=\"n\">g</span> <span class=\"n\">f</span> <span class=\"n\">where</span>\n  <span class=\"n\">project</span> <span class=\"o\">:</span> <span class=\"n\">g</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">f</span> <span class=\"n\">g</span>\n</code></pre></div>\n<p>Please teach me how to make this idiomatic Lean! Thanks :)</p>",
        "id": 391043612,
        "sender_full_name": "Eric Conlon",
        "timestamp": 1694739225
    }
]