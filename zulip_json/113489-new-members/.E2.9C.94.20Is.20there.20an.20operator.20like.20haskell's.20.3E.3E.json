[
    {
        "content": "<p>Is there an operator like haskells <code>&gt;&gt;</code> for monads? Which would have something like this definition in Lean: <code>def bindAndDiscard [Monad F] (m1 : F a) (m2 : F b) -&gt; F b := m1 &gt;&gt;= fun _ =&gt; m2</code>. I see there's <code>&gt;&gt;</code> in Lean, but I don't know what's it for since I couldn't get it to work not matter what arguments I tried <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 373470500,
        "sender_full_name": "dariof4",
        "timestamp": 1688818929
    },
    {
        "content": "<p>Wait nvm, I just found <code>*&gt;</code> which does what I want.</p>",
        "id": 373471761,
        "sender_full_name": "dariof4",
        "timestamp": 1688819248
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"630721\">dariof4</span> has marked this topic as resolved.</p>",
        "id": 373471768,
        "sender_full_name": "Notification Bot",
        "timestamp": 1688819251
    },
    {
        "content": "<p>You should also know that a lot of this ascii art is unneeded in Lean 4 because the do notation is so much more powerful.</p>",
        "id": 373471909,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1688819287
    },
    {
        "content": "<p>e.g. I might just write</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"n\">Monad</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"n\">β</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"n\">_</span> <span class=\"bp\">←</span> <span class=\"n\">x</span>\n  <span class=\"n\">y</span>\n</code></pre></div>\n<p>in this situation. There is admittedly a small amount of ascii art in the <code>_ ←</code>, but it is pretty mild.</p>",
        "id": 373472441,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1688819427
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/113489-new-members/topic/.E2.9C.94.20Is.20there.20an.20operator.20like.20haskell's.20.3E.3E/near/373472441\">said</a>:</p>\n<blockquote>\n<p>a small amount of ascii art in the <code>_ ←</code>, but it is pretty mild.</p>\n</blockquote>\n<p>2/3 of the characters in <code>_ ←</code> are ascii. And you call it a \"small amount\" <span aria-label=\"shocked\" class=\"emoji emoji-1f92f\" role=\"img\" title=\"shocked\">:shocked:</span></p>",
        "id": 373472787,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1688819520
    },
    {
        "content": "<p>I know that I could just use do notation, but I'm also rather fond of the operator soup  =)</p>",
        "id": 373473456,
        "sender_full_name": "dariof4",
        "timestamp": 1688819683
    },
    {
        "content": "<p>In Haskell you would write just the same thing (without Unicode I guess) and can also omit <code>_ &lt;-</code>. Or <code>do x; y</code>.</p>",
        "id": 373493213,
        "sender_full_name": "Reid Barton",
        "timestamp": 1688824976
    },
    {
        "content": "<p>Lean's <code>do</code> notation does have a lot of extra features, but they are not used here.</p>",
        "id": 373493311,
        "sender_full_name": "Reid Barton",
        "timestamp": 1688825009
    }
]