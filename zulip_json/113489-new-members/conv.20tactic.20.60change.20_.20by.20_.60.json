[
    {
        "content": "<p>Is there a version of conv tactic <code>change</code> that can replace goal with a term that is propositionally equal? </p>\n<p>I couldn't find it and here is a quick implementation</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Parser</span> <span class=\"n\">Tactic</span> <span class=\"n\">Conv</span>\n\n<span class=\"n\">syntax</span> <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"n\">change_by</span><span class=\"o\">)</span> <span class=\"s2\">\"change \"</span> <span class=\"n\">term</span> <span class=\"s2\">\" by \"</span> <span class=\"n\">tacticSeq</span> <span class=\"o\">:</span> <span class=\"n\">conv</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Meta</span> <span class=\"n\">Elab</span> <span class=\"n\">Tactic</span> <span class=\"n\">Conv</span>\n<span class=\"kd\">@[</span><span class=\"n\">tactic</span> <span class=\"n\">change_by</span><span class=\"kd\">]</span> <span class=\"kd\">def</span> <span class=\"n\">evalChange</span> <span class=\"o\">:</span> <span class=\"n\">Tactic</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">stx</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"k\">match</span> <span class=\"n\">stx</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">conv</span><span class=\"bp\">|</span> <span class=\"n\">change</span> <span class=\"bp\">$</span><span class=\"n\">e</span> <span class=\"kd\">by</span> <span class=\"bp\">$</span><span class=\"n\">tac</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">withMainContext</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">lhs</span> <span class=\"bp\">←</span> <span class=\"n\">getLhs</span>\n    <span class=\"k\">let</span> <span class=\"n\">lhs'</span> <span class=\"bp\">←</span> <span class=\"n\">elabTermEnsuringType</span> <span class=\"n\">e</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">inferType</span> <span class=\"n\">lhs</span><span class=\"o\">)</span>\n    <span class=\"k\">let</span> <span class=\"n\">eq</span> <span class=\"bp\">←</span> <span class=\"n\">mkEq</span> <span class=\"n\">lhs</span> <span class=\"n\">lhs'</span>\n    <span class=\"k\">let</span> <span class=\"n\">proof</span> <span class=\"bp\">←</span> <span class=\"n\">elabTermEnsuringType</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"bp\">$</span><span class=\"n\">tac</span><span class=\"o\">))</span> <span class=\"n\">eq</span>\n    <span class=\"n\">updateLhs</span> <span class=\"n\">lhs'</span> <span class=\"n\">proof</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">throwUnsupportedSyntax</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span>\n  <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span>\n  <span class=\"n\">conv</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">lhs</span><span class=\"bp\">;</span> <span class=\"n\">change</span> <span class=\"n\">n</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span>\n</code></pre></div>",
        "id": 403632981,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1700672659
    },
    {
        "content": "<p>This reminds me of <code>convert_to</code> , which doesn't have a conv version as far as I'm aware.</p>",
        "id": 403635152,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1700673460
    },
    {
        "content": "<p>I'm on mobile, so this may be less relevant, but recently there was a <code>conv equals</code> tactic</p>\n<p><a href=\"#narrow/stream/287929-mathlib4/topic/New.20conv.20.3D.3E.20.E2.80.A6.20equals.20tactic\">https://leanprover.zulipchat.com/#narrow/stream/287929-mathlib4/topic/New.20conv.20.3D.3E.20.E2.80.A6.20equals.20tactic</a></p>\n<p>Is this related?</p>",
        "id": 403635597,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1700673635
    },
    {
        "content": "<p>Yup works exactly the same :)</p>",
        "id": 403635895,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1700673751
    },
    {
        "content": "<p>In case you're not aware of it, hidden in the mathlib documentation there's a list of all <code>conv</code> tactics, at least as of a few months ago: <a href=\"https://leanprover-community.github.io/mathlib4_docs/docs/Conv/Guide.html\">https://leanprover-community.github.io/mathlib4_docs/docs/Conv/Guide.html</a></p>",
        "id": 403638400,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1700674814
    },
    {
        "content": "<p>Yeah I just discovered it from the original thread about <code>equals</code></p>",
        "id": 403639989,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1700675484
    }
]