[
    {
        "content": "<p>Hello everyone,</p>\n<p>Is there a specific lemma which can simplify the hypothesis i_property into false?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">i_val₄</span><span class=\"o\">:</span>  <span class=\"n\">ℕ</span>\n<span class=\"n\">i_property</span><span class=\"o\">:</span> <span class=\"n\">i_val₄.succ.succ.succ.succ</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">false</span>\n</code></pre></div>\n<p>In my mind it clearly follows that if i_val₄ is a natural number, then  i_val₄.succ.succ.succ.succ &gt;= 4.</p>\n<p>Appreciate the help!</p>",
        "id": 378893135,
        "sender_full_name": "Zahir Bingen",
        "timestamp": 1690393578
    },
    {
        "content": "<p><code>by linarith</code> appears to work</p>",
        "id": 378896561,
        "sender_full_name": "Julian Berman",
        "timestamp": 1690394309
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"321696\">Julian Berman</span> <a href=\"#narrow/stream/113489-new-members/topic/Searching.20for.20a.20lemma.20succ.20not.20less.20than.20self/near/378896561\">said</a>:</p>\n<blockquote>\n<p><code>by linarith</code> appears to work</p>\n</blockquote>\n<p>Linarith failed to find a contradiction in the hypothesis. Do you perhaps know why? </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">i_val₄</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i_property</span> <span class=\"o\">:</span> <span class=\"n\">i_val₄.succ.succ.succ.succ</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">false</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">linarith</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">i_val₄</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i_property</span> <span class=\"o\">:</span> <span class=\"n\">i_val₄.succ</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">false</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">finish</span>\n</code></pre></div>\n<p>In this case I can use the finish tactic, but it fails on the longer chain.</p>",
        "id": 378904404,
        "sender_full_name": "Zahir Bingen",
        "timestamp": 1690395835
    },
    {
        "content": "<p>I get <code>goals accomplished</code> here with <code>import Mathlib.Tactic</code> -- what imports do you have?</p>",
        "id": 378905432,
        "sender_full_name": "Julian Berman",
        "timestamp": 1690396006
    },
    {
        "content": "<p>import tactic, is what I'm using. I'm currently also using LEAN3, does that make a difference?</p>",
        "id": 378906091,
        "sender_full_name": "Zahir Bingen",
        "timestamp": 1690396115
    },
    {
        "content": "<p>Ah ok, I indeed assumed you were on Lean 4 -- let's see...</p>",
        "id": 378906553,
        "sender_full_name": "Julian Berman",
        "timestamp": 1690396210
    },
    {
        "content": "<p>This appears to do it in Lean 3:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">i_val₄</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i_property</span> <span class=\"o\">:</span> <span class=\"n\">i_val₄.succ.succ.succ.succ</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">false</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n  <span class=\"n\">repeat</span> <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">nat.succ_eq_add_one</span> <span class=\"n\">at</span> <span class=\"n\">i_property</span> <span class=\"o\">},</span>\n  <span class=\"n\">linarith</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>I don't understand enough about <code>linarith</code> to know what changed but Lean 4 clearly has at least one extra superpower here :)</p>",
        "id": 378906909,
        "sender_full_name": "Julian Berman",
        "timestamp": 1690396293
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"321696\">Julian Berman</span> <a href=\"#narrow/stream/113489-new-members/topic/Searching.20for.20a.20lemma.20succ.20not.20less.20than.20self/near/378906909\">said</a>:</p>\n<blockquote>\n<p>This appears to do it in Lean 3:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">i_val₄</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i_property</span> <span class=\"o\">:</span> <span class=\"n\">i_val₄.succ.succ.succ.succ</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">false</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n  <span class=\"n\">repeat</span> <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">nat.succ_eq_add_one</span> <span class=\"n\">at</span> <span class=\"n\">i_property</span> <span class=\"o\">},</span>\n  <span class=\"n\">linarith</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>I don't understand enough about <code>linarith</code> to know what changed but Lean 4 clearly has at least one extra superpower here :)</p>\n</blockquote>\n<p>Thank you so much! Maybe it's time to upgrade after I finish my project haha!</p>",
        "id": 378907195,
        "sender_full_name": "Zahir Bingen",
        "timestamp": 1690396347
    },
    {
        "content": "<p>Mathlib is ported, so indeed it likely is!</p>",
        "id": 378907555,
        "sender_full_name": "Julian Berman",
        "timestamp": 1690396421
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"618701\">Zahir Bingen</span> has marked this topic as resolved.</p>",
        "id": 378907860,
        "sender_full_name": "Notification Bot",
        "timestamp": 1690396475
    }
]