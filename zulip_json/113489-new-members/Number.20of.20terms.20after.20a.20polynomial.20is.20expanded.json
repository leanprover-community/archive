[
    {
        "content": "<p>If I wanted to figure out the number of terms after simplification of the expansion of <code>(8* x^2 + 4 * x* y + 3 * y^2)^n</code> would there be a nice way to do it in lean?</p>",
        "id": 272074580,
        "sender_full_name": "Callum Cassidy-Nolan",
        "timestamp": 1644988465
    },
    {
        "content": "<p>It's 2n+1, you don't need lean. What's your actual question? Is n a variable? Do you want a formula or an algorithm etc</p>",
        "id": 272086310,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1645000486
    },
    {
        "content": "<p>I'm trying to state and then prove that it's equal to that in lean, so I'm having trouble writing the statement I'm trying to prove</p>",
        "id": 272187880,
        "sender_full_name": "Callum Cassidy-Nolan",
        "timestamp": 1645050232
    },
    {
        "content": "<p>I guess there would be a way to do this. A polynomial is stored as a function with finite support and you just want to count the size of the support.</p>",
        "id": 272189935,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1645051383
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.mv_polynomial</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">card_support</span> <span class=\"o\">{</span><span class=\"n\">σ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">mv_polynomial</span> <span class=\"n\">σ</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">delta</span> <span class=\"n\">mv_polynomial</span> <span class=\"n\">at</span> <span class=\"n\">f</span><span class=\"o\">,</span>\n  <span class=\"n\">delta</span> <span class=\"n\">add_monoid_algebra</span> <span class=\"n\">at</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"c1\">-- f is now a finsupp</span>\n  <span class=\"n\">exact</span> <span class=\"n\">f.support.card</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>There's probably a more idiomatic way to do it.</p>",
        "id": 272190625,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1645051754
    },
    {
        "content": "<p>Ah ok, thanks for showing me that!</p>",
        "id": 272190741,
        "sender_full_name": "Callum Cassidy-Nolan",
        "timestamp": 1645051827
    },
    {
        "content": "<p>It looks like <code>f.support.card</code> works without all that unfolding.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">card_support</span> <span class=\"o\">{</span><span class=\"n\">σ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">mv_polynomial</span> <span class=\"n\">σ</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span>\n<span class=\"n\">f.support.card</span>\n</code></pre></div>",
        "id": 272191585,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1645052370
    },
    {
        "content": "<p>Oh great! <code>mv_polynomial.support</code> exists :-)</p>",
        "id": 272192134,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1645052599
    }
]