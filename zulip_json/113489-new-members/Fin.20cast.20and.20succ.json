[
    {
        "content": "<p>I thought this one should be (true and) easy, but I am stuck.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Fin.Basic</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">fin_succ_succ</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">i.succ.succ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"kd\">by</span>\n  <span class=\"n\">apply</span> <span class=\"n\">Fin.eq_of_veq</span>\n  <span class=\"n\">simp</span>\n  <span class=\"c1\">-- why do I now have three cast arrows in the left side?</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>Probably I should not use <code>Fin.eq_of_veq</code> at all? Am I misunderstanding <code>Fin</code>? I am assuming that the = I want to show is within <code>Fin (n+2)</code> right?</p>",
        "id": 397648754,
        "sender_full_name": "Malvin Gattinger",
        "timestamp": 1697787323
    },
    {
        "content": "<p>It would be easier to investigate if you added the imports needed to make this a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a></p>",
        "id": 397650162,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1697787935
    },
    {
        "content": "<p>Oh, sorry. I wrongly thought Fin would be available by default.</p>",
        "id": 397650516,
        "sender_full_name": "Malvin Gattinger",
        "timestamp": 1697788067
    },
    {
        "content": "<p>What's the goal state after the <code>by</code>? I suspect there are coercions in weird places</p>",
        "id": 397651613,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1697788484
    },
    {
        "content": "<p>The statement is true, but it seems quite confusing to me. Lean knows that this has to be an equality in <code>Fin (n+2)</code> only by considering the RHS: if you do <code>let j := i + 1 + 1</code>, Lean will not accept this term! The correct way to take the successor of something in <code>Fin</code> is to use the syntax <code>i.succ</code>.<br>\nOtherwise, if you really want to prove this, the definition of <code>+</code> in <code>Fin.add</code> is by taking the sum in the natural numbers and then taking the reminder of a division: proving the equality can be quite painful, but <code>simp</code> and <code>linarith</code> can handle it:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">fin_succ_succ</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">i.succ.succ</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">ext</span>\n  <span class=\"n\">dsimp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">HAdd.hAdd</span><span class=\"o\">,</span> <span class=\"n\">Add.add</span><span class=\"o\">,</span> <span class=\"n\">Fin.add</span><span class=\"o\">]</span>\n  <span class=\"n\">simp</span>\n  <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">i.is_lt</span>\n  <span class=\"n\">linarith</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>\n</code></pre></div>",
        "id": 397651752,
        "sender_full_name": "Joël Riou",
        "timestamp": 1697788540
    },
    {
        "content": "<p>Right, my mistake was to use <code>i + 1</code> instead of <code>i.succ</code> in the larger theorem for which I then reached this as a subgoal. Using <code>i.succ</code> instead makes the whole problem go away <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span>  Thanks everyone!</p>",
        "id": 397652770,
        "sender_full_name": "Malvin Gattinger",
        "timestamp": 1697788871
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"422703\">Malvin Gattinger</span> has marked this topic as resolved.</p>",
        "id": 397652816,
        "sender_full_name": "Notification Bot",
        "timestamp": 1697788890
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"422703\">Malvin Gattinger</span> has marked this topic as unresolved.</p>",
        "id": 397656077,
        "sender_full_name": "Notification Bot",
        "timestamp": 1697790014
    },
    {
        "content": "<p>I have another <code>+1</code> vs <code>succ</code> problem when using vectors. Would you also find this statement confusing, and can I do something else to avoid the coercions? (When does one say coercion and when cast, btw?)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Vector.Basic</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">vec_succ</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ys</span> <span class=\"o\">:</span> <span class=\"n\">Vector</span> <span class=\"n\">α</span> <span class=\"n\">n.succ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">::</span><span class=\"bp\">ᵥ</span> <span class=\"n\">ys</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">get</span> <span class=\"o\">(</span><span class=\"n\">i.succ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">ys.get</span> <span class=\"n\">i</span> <span class=\"o\">:=</span>\n  <span class=\"kd\">by</span>\n  <span class=\"c1\">-- Vector.get (a ::ᵥ ys) ↑↑(Fin.succ i) = Vector.get ys ↑↑i</span>\n  <span class=\"n\">simp</span>\n  <span class=\"c1\">-- Vector.get (a ::ᵥ ys) (↑↑i + 1) = Vector.get ys (Fin.castSucc i)</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 397656081,
        "sender_full_name": "Malvin Gattinger",
        "timestamp": 1697790015
    },
    {
        "content": "<p>That looks very weird; shouldn't the <code>n.succ</code> just be <code>n</code>?</p>",
        "id": 397658277,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1697790595
    },
    {
        "content": "<p>Indeed with <code>n</code> instead of <code>n.succ</code> it goes through just with simp, but with a one-item-longer vector it should still be true?</p>",
        "id": 397672693,
        "sender_full_name": "Malvin Gattinger",
        "timestamp": 1697795734
    },
    {
        "content": "<p>With the one-time longer vector it's a very weird statement</p>",
        "id": 397673104,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1697795870
    },
    {
        "content": "<p>The <code>+1</code> in your second goal comment is in <code>Fin n</code> which has modular arithmetic</p>",
        "id": 397673258,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1697795919
    },
    {
        "content": "<p>The  ↑↑ in your first goal statement is effectively <code>i.succ.val % (n + 2)</code></p>",
        "id": 397673475,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1697795998
    }
]