[
    {
        "content": "<p>Mathlib4's SetLike/Basic.lean <a href=\"https://github.com/leanprover-community/mathlib4/blob/master/Mathlib/Data/SetLike/Basic.lean#L42\">contains</a> this example usage in a comment:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">SetLike</span> <span class=\"o\">(</span><span class=\"n\">MySubobject</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"n\">X</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨</span><span class=\"n\">MySubobject.carrier</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">cases</span> <span class=\"n\">p</span><span class=\"bp\">;</span> <span class=\"n\">cases</span> <span class=\"n\">q</span><span class=\"bp\">;</span> <span class=\"n\">congr'</span><span class=\"o\">⟩</span>\n</code></pre></div>\n<p>Is that proper Lean 4 syntax?  OneShot translated my equivalent to:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"o\">⟨</span><span class=\"n\">MySubobject.carrier</span><span class=\"o\">,</span> <span class=\"k\">fun</span> <span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span> <span class=\"n\">cases</span> <span class=\"n\">p</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">cases</span> <span class=\"n\">q</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">congr</span><span class=\"o\">⟩</span>\n</code></pre></div>\n<p>Which is correct?</p>",
        "id": 398747640,
        "sender_full_name": "Martin C. Martin",
        "timestamp": 1698346070
    },
    {
        "content": "<p>Most likely you'll get a warning that the <code>&lt;;&gt;</code> is unnecessary (though it will work)</p>",
        "id": 398752311,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1698347774
    },
    {
        "content": "<p><code>&lt;;&gt;</code> and <code>;</code> are only different if the tactic before it created multiple goals, which I'm guessing <code>cases</code> doesn't do in this case</p>",
        "id": 398752403,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1698347820
    },
    {
        "content": "<p>Lean 3's <code>;</code> is Lean 4's <code>&lt;;&gt;</code>, but I think the Lean 3 should have been written as <code>by { cases p, cases q, congr' }</code> (too frequently people used <code>;</code> to avoid needing to reach for the braces)</p>",
        "id": 398754690,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1698348878
    },
    {
        "content": "<p>I think the Lean 4 could be <code>by cases p; cases q; congr!</code> since <code>p</code> and <code>q</code> are structures, and since <code>congr!</code> is the analogue of <code>congr'</code> (it might make a difference if the structures have things like <code>Decidable</code> fields)</p>",
        "id": 398754801,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1698348934
    },
    {
        "content": "<p>I tested Kyle's suggestion on Subgroup and that worked. So: <a href=\"https://github.com/leanprover-community/mathlib4/pull/7986\">#7986</a>.</p>",
        "id": 398905749,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1698415570
    }
]