[
    {
        "content": "<p>Hi there.</p>\n<p>I have just started learning Lean and I am confused about how functions work.</p>\n<p>I was able to solve the below example in a sequence of steps, but I don't understand why the following code does not solve the same problem in one line. I would really appreciate some sort of help on this.</p>\n<p>Thank you :)</p>\n<p><a href=\"/user_uploads/3121/har0OYxGgeopW5_MtlyOS_aO/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/har0OYxGgeopW5_MtlyOS_aO/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/har0OYxGgeopW5_MtlyOS_aO/image.png\"></a></div>",
        "id": 323807022,
        "sender_full_name": "Pehan Amarathunge",
        "timestamp": 1674757516
    },
    {
        "content": "<p>Hey, next time post the code directly instead, enclosed using \\`\\`\\`, so that people can copy and paste :) Anyways, try this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">C</span> <span class=\"n\">D</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">B</span> <span class=\"bp\">→</span> <span class=\"n\">C</span> <span class=\"bp\">→</span> <span class=\"n\">D</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">D</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">exact</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">z</span><span class=\"o\">,</span> <span class=\"c1\">-- g x = g(x)</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 323809823,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1674758139
    },
    {
        "content": "<p>The problem can be seen if you run your code and look at the error:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">function</span> <span class=\"n\">expected</span> <span class=\"n\">at</span>\n  <span class=\"n\">x</span>\n<span class=\"n\">term</span> <span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">A</span>\n</code></pre></div>\n<p>which occurs in your parentheses <code>(x g(x) z)</code>. It is because if you put parentheses around them, it will treat it as a single expression and try to compute/evaluate it. And since you wrote <code>x _ _</code>, it only makes sense if <code>x</code> is a function, but it is not - it is just a type <code>A</code></p>",
        "id": 323810345,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1674758292
    },
    {
        "content": "<p>If you remove the parentheses like I did, this is what happens:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">f</span>         <span class=\"c1\">-- Type: A -&gt; B -&gt; C -&gt; D</span>\n  <span class=\"n\">x</span>       <span class=\"c1\">-- We evaluate the above line at x. Now (f x) has type B -&gt; C -&gt; D</span>\n    <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"c1\">-- We evaluate the above line at (g x). (g x) = g(x) has type B,</span>\n          <span class=\"c1\">-- so (f x g(x)) has type C -&gt; D</span>\n      <span class=\"n\">z</span>   <span class=\"c1\">-- Finish it</span>\n</code></pre></div>",
        "id": 323810799,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1674758426
    },
    {
        "content": "<p>Oh also if you write <code>f x g(x) z</code> it will be interpreted as <code>(f x g)(x) z</code>.</p>",
        "id": 323811185,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1674758535
    },
    {
        "content": "<p><code>f (x g(x) z)</code> is the same as <code>f (x g x z)</code> I think ...</p>",
        "id": 323931462,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1674776559
    }
]