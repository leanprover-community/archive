[
    {
        "content": "<p>So I'm trying to work through Dummit and Foote using Lean and I've been wrestling with this issue for a little bit. The problem I'm working on is, if you have the interval <code>[0, 1)</code> in the reals, and a binary operation <code> x ⋆ y  =  x  +  y - ⌊ x + y ⌋</code>, prove that this is a group. Here's what I have so far:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">group</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"n\">noncomputable</span> <span class=\"n\">theory</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">classical</span>\n\n<span class=\"c1\">--namespace group</span>\n\n<span class=\"n\">def</span> <span class=\"n\">star_set</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span> <span class=\"bp\">∧</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">1</span><span class=\"o\">}</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"n\">star_set</span>\n\n\n<span class=\"kn\">section</span> <span class=\"n\">star_group</span>\n\n<span class=\"c1\">--instance : floor star_set := ⟨ℝ.floor⟩</span>\n\n\n\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"n\">has_coe_to_sort</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"n\">semigroup</span>\n\n<span class=\"n\">def</span> <span class=\"n\">star</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span>\n<span class=\"bp\">|</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span> <span class=\"bp\">-</span> <span class=\"err\">⌊</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span> <span class=\"err\">⌋</span>\n\n\n<span class=\"kn\">notation</span> <span class=\"n\">x</span><span class=\"bp\">`</span><span class=\"err\">⋆</span><span class=\"bp\">`</span><span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"n\">star</span> <span class=\"n\">x</span> <span class=\"n\">y</span>\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"n\">star_set</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">star_closed</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">star_set</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"err\">⋆</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"err\">∈</span> <span class=\"n\">star_set</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n    <span class=\"n\">unfold</span> <span class=\"n\">star</span><span class=\"o\">,</span>\n    <span class=\"n\">unfold</span> <span class=\"n\">star_set</span><span class=\"o\">,</span>\n    <span class=\"n\">split</span><span class=\"o\">,</span>\n    <span class=\"n\">sorry</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n\n\n<span class=\"kn\">lemma</span> <span class=\"n\">star_assoc</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">star_set</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"err\">⋆</span> <span class=\"n\">b</span> <span class=\"err\">⋆</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"err\">⋆</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"err\">⋆</span> <span class=\"n\">c</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n    <span class=\"n\">sorry</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">star_group</span><span class=\"bp\">```</span>\n</code></pre></div>",
        "id": 201799954,
        "sender_full_name": "Alena Gusakov",
        "timestamp": 1592957619
    },
    {
        "content": "<p>Basically, the problem that I'm having now is, if I don't have <code>(a b : ℝ)</code> declared in the assumptions, then the goal looks like <code>⊢ ↑a + ↑b - ↑⌊↑a + ↑b⌋ ∈ {x : ℝ | 0 ≤ x ∧ x &lt; 1}</code></p>",
        "id": 201800130,
        "sender_full_name": "Alena Gusakov",
        "timestamp": 1592957790
    },
    {
        "content": "<p>I think it's probably a casting problem, I just don't know how to define things to fix it</p>",
        "id": 201800150,
        "sender_full_name": "Alena Gusakov",
        "timestamp": 1592957834
    },
    {
        "content": "<p>This is almost surely not what you want:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"n\">star_closed</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">star_set</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"err\">⋆</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"err\">∈</span> <span class=\"n\">star_set</span> <span class=\"o\">:=</span>\n</code></pre></div>\n\n\n<p>This gives you two <code>a</code>s and two <code>b</code>s of different types:</p>\n<div class=\"codehilite\"><pre><span></span><code>1 goal\na b : ↥star_set,\na b : ℝ\n⊢ (a⋆b) ∈ star_set\n</code></pre></div>",
        "id": 201800224,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1592957930
    },
    {
        "content": "<p>You'll want something like this instead:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"n\">star_closed</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"err\">∈</span> <span class=\"n\">star_set</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hb</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"err\">∈</span> <span class=\"n\">star_set</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"err\">⋆</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"err\">∈</span> <span class=\"n\">star_set</span> <span class=\"o\">:=</span>\n</code></pre></div>",
        "id": 201800311,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1592958040
    },
    {
        "content": "<p>Also, you can define <code>star_set</code> using <a href=\"https://leanprover-community.github.io/mathlib_docs/find/set.Ico/src\">src#set.Ico</a> and I suspect that some <code>Ico</code> lemmas will come in handy.</p>",
        "id": 201800414,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1592958146
    },
    {
        "content": "<p>Ah okay, thank you!</p>",
        "id": 201800437,
        "sender_full_name": "Alena Gusakov",
        "timestamp": 1592958177
    },
    {
        "content": "<p>Actually wait - I still have this problem: <code>⊢ a + b - ↑⌊a + b⌋ &lt; 1</code></p>",
        "id": 201800472,
        "sender_full_name": "Alena Gusakov",
        "timestamp": 1592958234
    },
    {
        "content": "<p>this should be a lemma about floor</p>",
        "id": 201800645,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1592958374
    },
    {
        "content": "<p>probably stated in the form <code>x &lt; floor x + 1</code></p>",
        "id": 201800657,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1592958392
    },
    {
        "content": "<p>See <a href=\"https://leanprover-community.github.io/mathlib_docs/find/fract_nonneg/src\">src#fract_nonneg</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/fract_lt_one/src\">src#fract_lt_one</a></p>",
        "id": 201800662,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1592958408
    },
    {
        "content": "<p><code>suggest</code> can find these, but <code>library_search</code> doesn't for some reason.</p>",
        "id": 201800752,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1592958492
    },
    {
        "content": "<p>I mean the problem is the up arrow <code>↑⌊a + b⌋</code></p>",
        "id": 201800790,
        "sender_full_name": "Alena Gusakov",
        "timestamp": 1592958543
    },
    {
        "content": "<p>there is no problem, the up arrow also appears in these theorems about floor and fract</p>",
        "id": 201800803,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1592958567
    },
    {
        "content": "<p>Ahh okay good to know</p>",
        "id": 201800813,
        "sender_full_name": "Alena Gusakov",
        "timestamp": 1592958579
    },
    {
        "content": "<p>because floor returns an int and it needs to be coerced back to the base ring</p>",
        "id": 201800815,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1592958586
    },
    {
        "content": "<p>Gotcha, thanks!</p>",
        "id": 201800834,
        "sender_full_name": "Alena Gusakov",
        "timestamp": 1592958602
    },
    {
        "content": "<p>(I've moved the tail end of this thread, which turned into a discussion of <code>library_search</code> to another thread.)</p>",
        "id": 201805457,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1592964370
    }
]