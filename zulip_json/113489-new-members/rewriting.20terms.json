[
    {
        "content": "<p>I know how to rewrite the goal in Lean 4, but how to you rewrite a particular term?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span>\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">x₁</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">}</span>\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">x₂</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">}</span>\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">x₁</span> <span class=\"bp\">=</span> <span class=\"n\">x₂</span><span class=\"o\">}</span>\n<span class=\"kd\">def</span> <span class=\"n\">in_this_theorem_rewrite_the_term_x₁_to_x₂_using_p</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n<span class=\"n\">rewrite_using_p</span> <span class=\"n\">x₁</span> <span class=\"n\">p</span><span class=\"bp\">???</span>\n<span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 355283211,
        "sender_full_name": "Dean Young",
        "timestamp": 1683069802
    },
    {
        "content": "<p>Please provide a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a></p>",
        "id": 355283442,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1683069944
    },
    {
        "content": "<p>I assume you know about <code>rw [p] at foo</code>?</p>",
        "id": 355283548,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1683069987
    },
    {
        "content": "<p>I didn't know about the \"at foo\" feature.</p>\n<p>Here is the example that I got to work using that:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span>\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">Y₁</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span>\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">Y₂</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span>\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">Z</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span>\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">Y₁</span> <span class=\"bp\">=</span> <span class=\"n\">Y₂</span><span class=\"o\">}</span>\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">Y₁</span><span class=\"o\">}</span>\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">Y₂</span> <span class=\"bp\">→</span> <span class=\"n\">Z</span><span class=\"o\">}</span>\n<span class=\"kd\">def</span> <span class=\"n\">element_of_X</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">Z</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n<span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">p</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">f</span>\n<span class=\"n\">exact</span> <span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>Thanks!</p>",
        "id": 355285099,
        "sender_full_name": "Dean Young",
        "timestamp": 1683070980
    },
    {
        "content": "<p>I think <code>def element_of_X : X → Z := g ∘ p.mp ∘ f</code> is another way to write that specific example in case that's also helpful (though obviously for others yeah, <code>rw at</code> is good to know about).</p>",
        "id": 355285589,
        "sender_full_name": "Julian Berman",
        "timestamp": 1683071317
    },
    {
        "content": "<p>When I use it, other structures start giving me errors of the form \"(kernel) declaration has free variables\". What does that mean?</p>",
        "id": 355285801,
        "sender_full_name": "Dean Young",
        "timestamp": 1683071514
    },
    {
        "content": "<p>That is something which shouldn't happen normally. Can you give us an example of where this happens for you. Try the <code>recover</code> tactic at the end of the proof which causes this error and see if any goals appear.</p>",
        "id": 355285973,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1683071614
    }
]