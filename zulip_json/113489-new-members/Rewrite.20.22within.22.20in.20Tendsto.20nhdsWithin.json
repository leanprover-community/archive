[
    {
        "content": "<p>I want to prove</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Real</span> <span class=\"n\">Filter</span> <span class=\"n\">Classical</span> <span class=\"n\">Set</span> <span class=\"n\">Topology</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">tendsto_abs_logx_rpow</span> <span class=\"o\">{</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hr</span><span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">r</span><span class=\"o\">)</span>\n<span class=\"o\">:</span> <span class=\"n\">Tendsto</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">|</span><span class=\"n\">log</span> <span class=\"n\">x</span><span class=\"bp\">|</span> <span class=\"bp\">*</span> <span class=\"bp\">|</span><span class=\"n\">x</span><span class=\"bp\">|</span> <span class=\"bp\">^</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">𝓝</span><span class=\"o\">[</span><span class=\"bp\">&gt;</span><span class=\"o\">]</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">𝓝</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>I want to \"rewrite\" using the fact that I only care about <code>x &gt; 0</code>. So I want to do something like <code>rw</code> and reduce the goal to <code>Tendsto (fun x =&gt; |log x| * x ^ r) (𝓝[&gt;] 0) (𝓝 0)</code>. Then, I want to do a by-cases analysis of <code>x &lt; 1</code> or <code>x &gt; 1</code>, which removes the absolute value around <code>log</code>. Then the rest follows from  <code>tendsto_log_mul_rpow_nhds_zero</code>. </p>\n<p>I didn't find a way to do this \"rewrite\". Is the following theorem true? I was looking for something like that. I also didn't find anything looking for \"eventually equal\" (a lemma that might be called \"tendsto_nhdsWithin_of_eventuallyEqual\").</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">tendstoNhdsWithin_of_eq_within</span>\n    <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span>\n    <span class=\"o\">(</span><span class=\"n\">eq_within</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span><span class=\"n\">x</span><span class=\"bp\">∈</span><span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">tenF</span> <span class=\"o\">:</span> <span class=\"n\">Tendsto</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"bp\">𝓝</span><span class=\"o\">[</span><span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">𝓝</span> <span class=\"n\">l</span><span class=\"o\">))</span>\n    <span class=\"o\">:</span> <span class=\"n\">Tendsto</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"bp\">𝓝</span><span class=\"o\">[</span><span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">𝓝</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>Maybe this isn't the idiomatic approach?</p>",
        "id": 404487041,
        "sender_full_name": "Adomas Baliuka",
        "timestamp": 1701118057
    },
    {
        "content": "<p>That second lemma isn't true. The <code>eq_within</code> assumption isn't strong enough.</p>",
        "id": 404491224,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1701120068
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Filter.Tendsto.congr%27#doc\">docs#Filter.Tendsto.congr'</a> might be what you're looking for?</p>",
        "id": 404492172,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1701120550
    },
    {
        "content": "<p>Sorry, I got interrupted by a student question. Yes, the lemma that Eric pointed out is the main relevant lemma.</p>",
        "id": 404492503,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1701120691
    },
    {
        "content": "<p>This works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">tendstoNhdsWithin_of_eq_within</span>\n    <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span>\n    <span class=\"o\">(</span><span class=\"n\">eq_within</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span><span class=\"n\">x</span><span class=\"bp\">∈</span><span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">tenF</span> <span class=\"o\">:</span> <span class=\"n\">Tendsto</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"bp\">𝓝</span><span class=\"o\">[</span><span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">𝓝</span> <span class=\"n\">l</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n    <span class=\"n\">Tendsto</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"bp\">𝓝</span><span class=\"o\">[</span><span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">𝓝</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">tenF.congr'</span> <span class=\"o\">(</span><span class=\"n\">Set.EqOn.symm</span> <span class=\"n\">eq_within</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">eventuallyEq_nhdsWithin</span>\n</code></pre></div>",
        "id": 404492528,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1701120707
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/113489-new-members/topic/Rewrite.20.22within.22.20in.20Tendsto.20nhdsWithin/near/404491224\">said</a>:</p>\n<blockquote>\n<p>That second lemma isn't true. The <code>eq_within</code> assumption isn't strong enough.</p>\n</blockquote>\n<p>Which lemma isn't true? Eric Wieser proved what I would have called \"the second lemma\" from my post.</p>",
        "id": 404493029,
        "sender_full_name": "Adomas Baliuka",
        "timestamp": 1701120934
    },
    {
        "content": "<p>Which seems to contradict Patrick's claim that it's false: perhaps this was fixed in an edit that Zulip is not loading for me; or maybe there's a junk value coming into play somewhere</p>",
        "id": 404493542,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1701121182
    },
    {
        "content": "<p>Sorry, I read your lemma too quickly. I shouldn't try to answer questions on Zulip and questions from students in parallel.</p>",
        "id": 404493621,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1701121206
    },
    {
        "content": "<p>I think I was misled by the surrounding text and this influenced my reading of the Lean code. Why did you discuss splitting depending on <code>x &lt; 1</code>?</p>",
        "id": 404493846,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1701121330
    },
    {
        "content": "<p>It's not really splitting I guess, it's just saying \"wlog <code>x &lt; 1</code>\".  I want to use it to remove the absolute value around the <code>log</code>. (Will post solution later if I manage to get it)</p>",
        "id": 404493948,
        "sender_full_name": "Adomas Baliuka",
        "timestamp": 1701121401
    },
    {
        "content": "<p>I think you just want to apply <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=squeeze_zero_norm%27#doc\">docs#squeeze_zero_norm'</a></p>",
        "id": 404494200,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1701121543
    },
    {
        "content": "<p>oh, or even just <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Filter.Tendsto.norm#doc\">docs#Filter.Tendsto.norm</a>, which makes more sense</p>",
        "id": 404494396,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1701121649
    },
    {
        "content": "<p>Thanks! As an aside, I just saw <code>squeeze_one_norm'</code> (and <code>squeeze_zero_norm'</code>, which have the same docstring, which might be a typo?). I'm really confused why <code>squeeze_one_norm'</code> is true (must be misunderstanding it). Maybe I'll have to learn filters properly after all</p>",
        "id": 404495037,
        "sender_full_name": "Adomas Baliuka",
        "timestamp": 1701121982
    },
    {
        "content": "<p>Yes, the docstring should be fixed. Note the difference between <code>SeminormedGroup</code> and <code>SeminormedAddGroup</code>.</p>",
        "id": 404495205,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1701122054
    },
    {
        "content": "<p>Can/should one PR individual small doc typos like this?</p>",
        "id": 404495317,
        "sender_full_name": "Adomas Baliuka",
        "timestamp": 1701122129
    },
    {
        "content": "<p>Yes, definitely. You can mark it as <code>easy</code>.</p>",
        "id": 404495784,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1701122373
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Real</span> <span class=\"n\">Filter</span> <span class=\"n\">Classical</span> <span class=\"n\">Set</span> <span class=\"n\">Topology</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">tendsto_abs_logx_rpow</span> <span class=\"o\">{</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hr</span><span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">Tendsto</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">|</span><span class=\"n\">log</span> <span class=\"n\">x</span><span class=\"bp\">|</span> <span class=\"bp\">*</span> <span class=\"bp\">|</span><span class=\"n\">x</span><span class=\"bp\">|</span> <span class=\"bp\">^</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">𝓝</span><span class=\"o\">[</span><span class=\"bp\">&gt;</span><span class=\"o\">]</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">𝓝</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">convert</span> <span class=\"o\">(</span><span class=\"n\">tendsto_log_mul_rpow_nhds_zero</span> <span class=\"n\">hr</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">norm.congr'</span> <span class=\"bp\">?</span><span class=\"n\">_</span>\n  <span class=\"bp\">·</span> <span class=\"n\">simp</span>\n  <span class=\"bp\">·</span> <span class=\"n\">filter_upwards</span> <span class=\"o\">[</span><span class=\"n\">self_mem_nhdsWithin</span><span class=\"o\">]</span> <span class=\"k\">with</span> <span class=\"n\">x</span> <span class=\"n\">hx</span>\n    <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">norm_mul</span><span class=\"o\">,</span> <span class=\"n\">norm_rpow_of_nonneg</span> <span class=\"o\">(</span><span class=\"n\">mem_Ioi.mp</span> <span class=\"n\">hx</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">le</span><span class=\"o\">,</span> <span class=\"n\">norm_eq_abs</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 404495826,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1701122392
    },
    {
        "content": "<p>I'm sorry I keep being interrupted, but I'm in office hours. Closer to the intended proof is:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Real</span> <span class=\"n\">Filter</span> <span class=\"n\">Classical</span> <span class=\"n\">Set</span> <span class=\"n\">Topology</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">tendsto_abs_logx_rpow</span> <span class=\"o\">{</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hr</span><span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">Tendsto</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">↦</span> <span class=\"bp\">|</span><span class=\"n\">log</span> <span class=\"n\">x</span><span class=\"bp\">|</span> <span class=\"bp\">*</span> <span class=\"bp\">|</span><span class=\"n\">x</span><span class=\"bp\">|</span> <span class=\"bp\">^</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">𝓝</span><span class=\"o\">[</span><span class=\"bp\">&gt;</span><span class=\"o\">]</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">𝓝</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">suffices</span> <span class=\"n\">Tendsto</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">↦</span> <span class=\"bp\">-</span><span class=\"n\">log</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">𝓝</span><span class=\"o\">[</span><span class=\"bp\">&gt;</span><span class=\"o\">]</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">𝓝</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"kd\">by</span>\n    <span class=\"n\">apply</span> <span class=\"n\">this.congr'</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">eventuallyEq_nhdsWithin_iff</span><span class=\"o\">]</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">Ioo</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"mi\">1</span> <span class=\"bp\">∈</span>  <span class=\"bp\">𝓝</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n      <span class=\"n\">apply</span> <span class=\"n\">Ioo_mem_nhds</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">norm_num</span>\n    <span class=\"n\">apply</span> <span class=\"n\">mem_of_superset</span> <span class=\"n\">this</span>\n    <span class=\"n\">rintro</span> <span class=\"n\">x</span> <span class=\"o\">⟨</span><span class=\"bp\">-</span><span class=\"o\">,</span> <span class=\"n\">hx</span><span class=\"o\">⟩</span> <span class=\"o\">(</span><span class=\"n\">hx'</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">abs_of_pos</span> <span class=\"n\">hx'</span><span class=\"o\">,</span> <span class=\"n\">abs_of_neg</span> <span class=\"o\">(</span><span class=\"n\">log_neg</span> <span class=\"n\">hx'</span> <span class=\"n\">hx</span><span class=\"o\">)]</span>\n  <span class=\"n\">convert</span> <span class=\"o\">(</span><span class=\"n\">tendsto_log_mul_rpow_nhds_zero</span> <span class=\"n\">hr</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">neg</span> <span class=\"n\">using</span> <span class=\"mi\">1</span>\n  <span class=\"n\">simp</span>\n</code></pre></div>\n<p>I hope this will be useful for future proofs.</p>",
        "id": 404496023,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1701122454
    },
    {
        "content": "<p>Wow, thanks a lot! I didn't even ask for the proof of this :)</p>",
        "id": 404496135,
        "sender_full_name": "Adomas Baliuka",
        "timestamp": 1701122500
    },
    {
        "content": "<p>Oh, the reason for that \"typo\" is actually that <code>squeeze_zero_norm'</code> is auto-generated by <code>to_additive</code>. I guess it's fine then</p>",
        "id": 404497456,
        "sender_full_name": "Adomas Baliuka",
        "timestamp": 1701123113
    },
    {
        "content": "<p>You can still fix the docstring!</p>",
        "id": 404498464,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1701123692
    },
    {
        "content": "<p>You mean write it so it matches both cases? Or is there some trick to customize <code>to_additive</code>?</p>",
        "id": 404498612,
        "sender_full_name": "Adomas Baliuka",
        "timestamp": 1701123752
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[</span><span class=\"n\">to_additive</span> <span class=\"s2\">\"blah blah\"</span><span class=\"kd\">]</span>\n</code></pre></div>",
        "id": 404498653,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1701123782
    },
    {
        "content": "<p>There is already a hand-written docstring there, but it's wrong.</p>",
        "id": 404499585,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1701124274
    },
    {
        "content": "<p>I made a <a href=\"https://github.com/leanprover-community/mathlib4/pull/8667\">PR</a></p>",
        "id": 404499912,
        "sender_full_name": "Adomas Baliuka",
        "timestamp": 1701124432
    }
]