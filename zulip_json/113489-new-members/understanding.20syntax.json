[
    {
        "content": "<p>I have the following in my local state:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">M</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span>\n<span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">:</span> <span class=\"n\">monoid</span> <span class=\"n\">M</span>\n<span class=\"n\">P</span><span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">_</span><span class=\"n\">inst_2</span><span class=\"o\">:</span> <span class=\"n\">decidable</span> <span class=\"n\">P</span>\n<span class=\"n\">ab</span><span class=\"o\">:</span> <span class=\"n\">M</span>\n<span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">P</span>\n<span class=\"err\">‚ä¢</span> <span class=\"n\">ite</span> <span class=\"n\">P</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">ite</span> <span class=\"n\">P</span> <span class=\"n\">a</span> <span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"n\">ite</span> <span class=\"n\">P</span> <span class=\"n\">b</span> <span class=\"mi\">1</span>\n</code></pre></div>\n\n\n<p>I've spent a good part of the last few hours trying to figure out the syntax I need to type to evolve the goal forward.  When I trace the <code>simp[h]</code>, I get the following:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"mi\">0</span><span class=\"bp\">.</span> <span class=\"o\">[</span><span class=\"n\">simplify</span><span class=\"bp\">.</span><span class=\"n\">rewrite</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]:</span> <span class=\"n\">P</span> <span class=\"bp\">==&gt;</span> <span class=\"n\">true</span>\n<span class=\"mi\">0</span><span class=\"bp\">.</span> <span class=\"o\">[</span><span class=\"n\">simplify</span><span class=\"bp\">.</span><span class=\"n\">rewrite</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">if_true</span><span class=\"o\">]:</span> <span class=\"n\">ite</span> <span class=\"n\">true</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"mi\">1</span> <span class=\"bp\">==&gt;</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span>\n<span class=\"mi\">0</span><span class=\"bp\">.</span> <span class=\"o\">[</span><span class=\"n\">simplify</span><span class=\"bp\">.</span><span class=\"n\">rewrite</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]:</span> <span class=\"n\">P</span> <span class=\"bp\">==&gt;</span> <span class=\"n\">true</span>\n<span class=\"mi\">0</span><span class=\"bp\">.</span> <span class=\"o\">[</span><span class=\"n\">simplify</span><span class=\"bp\">.</span><span class=\"n\">rewrite</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">if_true</span><span class=\"o\">]:</span> <span class=\"n\">ite</span> <span class=\"n\">true</span> <span class=\"n\">a</span> <span class=\"mi\">1</span> <span class=\"bp\">==&gt;</span> <span class=\"n\">a</span>\n<span class=\"mi\">0</span><span class=\"bp\">.</span> <span class=\"o\">[</span><span class=\"n\">simplify</span><span class=\"bp\">.</span><span class=\"n\">rewrite</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]:</span> <span class=\"n\">P</span> <span class=\"bp\">==&gt;</span> <span class=\"n\">true</span>\n<span class=\"mi\">0</span><span class=\"bp\">.</span> <span class=\"o\">[</span><span class=\"n\">simplify</span><span class=\"bp\">.</span><span class=\"n\">rewrite</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">if_true</span><span class=\"o\">]:</span> <span class=\"n\">ite</span> <span class=\"n\">true</span> <span class=\"n\">b</span> <span class=\"mi\">1</span> <span class=\"bp\">==&gt;</span> <span class=\"n\">b</span>\n<span class=\"mi\">0</span><span class=\"bp\">.</span> <span class=\"o\">[</span><span class=\"n\">simplify</span><span class=\"bp\">.</span><span class=\"n\">rewrite</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">eq_self_iff_true</span><span class=\"o\">]:</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">==&gt;</span> <span class=\"n\">true</span>\n</code></pre></div>\n\n\n<p>But I just don't understand the syntax I am supposed to use.  Any assistance would be greatly appreciated.</p>",
        "id": 210811148,
        "sender_full_name": "Brent A Ritterbeck",
        "timestamp": 1600729454
    },
    {
        "content": "<p>Does <code>simp [h]</code> work?</p>",
        "id": 210811219,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1600729524
    },
    {
        "content": "<p>Maybe I need to state the broader context here.  I was trying to break down the <code>lemma ite_mul_one</code> in the basic.lean file in the algebra.group portion of the library just to try to understand the syntax.  Here is what I have so far:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">to_additive</span><span class=\"o\">]</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">ite_mul_one</span> <span class=\"o\">{</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">decidable</span> <span class=\"n\">P</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"n\">ite</span> <span class=\"n\">P</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">ite</span> <span class=\"n\">P</span> <span class=\"n\">a</span> <span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"n\">ite</span> <span class=\"n\">P</span> <span class=\"n\">b</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">P</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span>\n    <span class=\"n\">simp</span><span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">],</span>\n  <span class=\"o\">},</span>\n  <span class=\"o\">{</span>\n    <span class=\"n\">simp</span><span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">],</span>\n  <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n</code></pre></div>\n\n\n<p>This clears the proof, but I want to replace the first simp[h] with what simp[h] is trying to do.  That's where I am getting stuck.</p>",
        "id": 210811628,
        "sender_full_name": "Brent A Ritterbeck",
        "timestamp": 1600729868
    },
    {
        "content": "<p>Oh sorry, I didn't read what you wrote carefully enough.  If you do <code>squeeze_simp [h]</code> you can see which lemmas <code>simp</code> is using.</p>",
        "id": 210812080,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1600730182
    },
    {
        "content": "<p>But this should probably just give you something like <code>simp only [h, if_true, eq_self_iff_true]</code>, based on the simp trace.</p>",
        "id": 210812124,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1600730240
    },
    {
        "content": "<p>I'm not sure exactly what <code>simp</code> does with <code>h</code>, but you can use <code>repeat { rw [if_pos h] }</code> in the first case and <code>repeat { rw [if_neg h] }</code> in the second to simplify the <code>ite</code>'s.</p>",
        "id": 210812579,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1600730621
    },
    {
        "content": "<p>Thank you.  This was enough to get me moving.  I was able to close everything with the following.</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">to_additive</span><span class=\"o\">]</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">ite_mul_one</span> <span class=\"o\">{</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">decidable</span> <span class=\"n\">P</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"n\">ite</span> <span class=\"n\">P</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">ite</span> <span class=\"n\">P</span> <span class=\"n\">a</span> <span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"n\">ite</span> <span class=\"n\">P</span> <span class=\"n\">b</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">P</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">if_pos</span> <span class=\"n\">h</span><span class=\"o\">],</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">if_pos</span> <span class=\"n\">h</span><span class=\"o\">],</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">if_pos</span> <span class=\"n\">h</span><span class=\"o\">],</span>\n  <span class=\"o\">},</span>\n  <span class=\"o\">{</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">if_neg</span> <span class=\"n\">h</span><span class=\"o\">],</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">if_neg</span> <span class=\"n\">h</span><span class=\"o\">],</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">if_neg</span> <span class=\"n\">h</span><span class=\"o\">],</span>\n    <span class=\"n\">rw</span> <span class=\"n\">mul_one</span><span class=\"o\">,</span>\n  <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 210813167,
        "sender_full_name": "Brent A Ritterbeck",
        "timestamp": 1600731078
    },
    {
        "content": "<p>There is also the <code>split_ifs</code> tactic</p>",
        "id": 210831691,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1600755899
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/understanding.20syntax/near/210831691\">said</a>:</p>\n<blockquote>\n<p>There is also the <code>split_ifs</code> tactic</p>\n</blockquote>\n<p>Thank you, Kevin, both for the comment and the \"The Future of Mathematics?\" talk you gave, which is how I found out about Lean. I will try the <code>split_ifs</code> tactic later today.</p>",
        "id": 210848938,
        "sender_full_name": "Brent A Ritterbeck",
        "timestamp": 1600768490
    }
]