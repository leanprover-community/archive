[
    {
        "content": "<p>Hi, I noticed that if I run</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Control.Random</span>\n\n<span class=\"k\">#eval</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">rec</span> <span class=\"n\">fact</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span>\n    <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">1</span>\n    <span class=\"bp\">|</span> <span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">fact</span> <span class=\"n\">n</span>\n  <span class=\"k\">let</span> <span class=\"n\">n</span> <span class=\"bp\">←</span> <span class=\"n\">IO.runRand</span> <span class=\"o\">(</span><span class=\"n\">Random.randBound</span> <span class=\"n\">Nat</span> <span class=\"mi\">0</span> <span class=\"mi\">6</span> <span class=\"o\">(</span><span class=\"n\">Nat.zero_le</span> <span class=\"mi\">6</span><span class=\"o\">))</span>\n  <span class=\"n\">return</span> <span class=\"n\">fact</span> <span class=\"n\">n</span>\n</code></pre></div>\n<p>then I get the error <code>(kernel) declaration has metavariables '_eval'</code>.<br>\nIs some kind of metaprogramming thing failing to happen fully? The elaborator maybe, based on <a href=\"https://github.com/leanprover-community/lean4-metaprogramming-book/blob/master/md/main/02_overview.md#connection-to-compilers\">this diagram</a>?</p>\n<p>This error does not occur if I define <code>fact</code> outside of the <code>do</code> block, but I'd like to understand why it fails here, and how to fix it.</p>",
        "id": 380306529,
        "sender_full_name": "Caroline",
        "timestamp": 1690803746
    },
    {
        "content": "<p>This indeed looks like a bug in the elaborator. If there is an error in your code the elaborator should catch it, and here it went on to the kernel.</p>",
        "id": 380368429,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1690813958
    },
    {
        "content": "<p>In fact, if you make a separate definition for your code and run it, things work fine:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Control.Random</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">randFact</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">rec</span> <span class=\"n\">fact</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span>\n    <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">1</span>\n    <span class=\"bp\">|</span> <span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">fact</span> <span class=\"n\">n</span>\n  <span class=\"k\">let</span> <span class=\"n\">n</span> <span class=\"bp\">←</span> <span class=\"n\">IO.runRand</span> <span class=\"o\">(</span><span class=\"n\">Random.randBound</span> <span class=\"n\">Nat</span> <span class=\"mi\">0</span> <span class=\"mi\">6</span> <span class=\"o\">(</span><span class=\"n\">Nat.zero_le</span> <span class=\"mi\">6</span><span class=\"o\">))</span>\n  <span class=\"n\">return</span> <span class=\"n\">fact</span> <span class=\"n\">n</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">randFact</span> <span class=\"c1\">-- 24 in my case</span>\n</code></pre></div>",
        "id": 380368716,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1690814002
    },
    {
        "content": "<p>Ah, I see. Thanks for the response</p>",
        "id": 380387524,
        "sender_full_name": "Caroline",
        "timestamp": 1690816945
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"636694\">Caroline</span> has marked this topic as resolved.</p>",
        "id": 380387590,
        "sender_full_name": "Notification Bot",
        "timestamp": 1690816955
    },
    {
        "content": "<p>This might be worth filling a bug report for; or at least, moving this thread to <a class=\"stream\" data-stream-id=\"270676\" href=\"/#narrow/stream/270676-lean4\">#lean4</a></p>",
        "id": 380591898,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1690876624
    },
    {
        "content": "<p>Here's a small reproduction:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"n\">rec</span> <span class=\"n\">bar</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n  <span class=\"mi\">37</span>\n<span class=\"k\">#eval</span> <span class=\"n\">foo</span> <span class=\"c1\">-- works, evaluates to 37</span>\n\n<span class=\"k\">#eval</span> <span class=\"c1\">-- error: (kernel) declaration has metavariables '_eval'</span>\n  <span class=\"k\">let</span> <span class=\"n\">rec</span> <span class=\"n\">bar</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n  <span class=\"mi\">37</span>\n</code></pre></div>",
        "id": 380612495,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1690880547
    },
    {
        "content": "<p>I'll file an issue.</p>",
        "id": 380612606,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1690880568
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/lean4/pull/2374\">lean4#2374</a></p>",
        "id": 380616542,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1690881236
    }
]