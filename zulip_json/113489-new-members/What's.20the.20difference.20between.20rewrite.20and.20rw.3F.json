[
    {
        "content": "<p>Very silly question I'm sure. I assumed these were the same thing, and the documentation (<a href=\"https://lean-lang.org/theorem_proving_in_lean4/tactics.html#basic-tactics\">https://lean-lang.org/theorem_proving_in_lean4/tactics.html#basic-tactics</a>) says that they are. I couldn't google anything about them being different. However here are two proofs:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span>\n  <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">add_assoc</span><span class=\"o\">]</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">add_comm</span> <span class=\"n\">b</span><span class=\"o\">]</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">add_assoc</span><span class=\"o\">]</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span>\n  <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rewrite</span> <span class=\"o\">[</span><span class=\"n\">add_assoc</span><span class=\"o\">]</span>\n  <span class=\"n\">rewrite</span> <span class=\"o\">[</span><span class=\"n\">add_comm</span> <span class=\"n\">b</span><span class=\"o\">]</span>\n  <span class=\"n\">rewrite</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">add_assoc</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>The first one type-checks, the second leaves this goal:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">⊢</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"n\">b</span>\n</code></pre></div>\n<p>It can be closed by rfl of course, but are rw and rewrite not interchangeable? If I go through a proof and replace every 'rewrite' with 'rw', are there any risks? Thanks.</p>",
        "id": 393561093,
        "sender_full_name": "Andreas Gittis",
        "timestamp": 1695844430
    },
    {
        "content": "<p>Not the same in Lean 4 - hover over <code>rw</code> in VS code for the explanation. </p>\n<blockquote>\n<p>If I go through a proof and replace every 'rewrite' with 'rw', are there any risks? Thanks.</p>\n</blockquote>\n<p>They mean different things, so my suggestion is to use the one you mean. (But some people do use <code>rw</code> everywhere. That wastes a very little CPU time, but nothing more serious.)</p>",
        "id": 393561555,
        "sender_full_name": "Richard Copley",
        "timestamp": 1695844593
    },
    {
        "content": "<p>See <a href=\"https://github.com/leanprover/lean4/blob/06e057758e3d63f286b023e3f6ef0468d7b0441e/src/Init/Tactics.lean#L365-L373\">https://github.com/leanprover/lean4/blob/06e057758e3d63f286b023e3f6ef0468d7b0441e/src/Init/Tactics.lean#L365-L373</a></p>",
        "id": 393561583,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1695844607
    },
    {
        "content": "<p>Okay I see, thanks!</p>",
        "id": 393562349,
        "sender_full_name": "Andreas Gittis",
        "timestamp": 1695844892
    }
]