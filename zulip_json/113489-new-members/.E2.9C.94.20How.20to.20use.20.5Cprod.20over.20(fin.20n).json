[
    {
        "content": "<p>Hi there, I want to do something like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span>\n<span class=\"bp\">...</span>\n<span class=\"bp\">∏</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">),</span> <span class=\"n\">lambda</span> <span class=\"n\">i</span>\n</code></pre></div>\n<p>but of course that doesn't work because <code>fin n</code> is a subtype of <code>ℕ</code> rather than a finset. I could do</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">∏</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"n\">finset.range</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">lambda</span> <span class=\"n\">i</span>\n</code></pre></div>\n<p>but <code>lambda</code> is type <code>(fin n) -&gt; complex</code>, so this also fails since <code>i</code> is of type <code>ℕ</code> rather than <code>fin n</code> and I don't think there's a way to convert. Here's a minimal example and proof state:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">ex1</span>\n  <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">lambda</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">complex</span><span class=\"o\">)</span>\n  <span class=\"o\">:</span> <span class=\"n\">complex</span>\n  <span class=\"o\">:=</span> <span class=\"bp\">∏</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"n\">finset.range</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">lambda</span> <span class=\"o\">⟨</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"kd\">begin</span>  <span class=\"kd\">end</span><span class=\"o\">⟩</span>\n</code></pre></div>\n<p>And the proof state</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">tactic</span> <span class=\"n\">failed</span><span class=\"o\">,</span> <span class=\"n\">there</span> <span class=\"n\">are</span> <span class=\"n\">unsolved</span> <span class=\"n\">goals</span>\n<span class=\"n\">state</span><span class=\"o\">:</span>\n<span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span>\n<span class=\"n\">lambda</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">ℂ</span><span class=\"o\">,</span>\n<span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">i</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span>\n</code></pre></div>\n<p>So, what's the right way to do this so that I get the range but it's still type <code>fin n</code> rather than <code>ℕ</code>?</p>\n<p>Thanks in advance!</p>",
        "id": 361412861,
        "sender_full_name": "Nilay Patel",
        "timestamp": 1685126738
    },
    {
        "content": "<p>Does <code>\\prod i, lambda i</code> do what you want?</p>",
        "id": 361416533,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1685127842
    },
    {
        "content": "<p>What Yaël wrote is short for <code>∏ i : fin n, lambda i</code>, which is a synonym for <code>∏ i in (finset.univ : finset (fin n)), lambda i</code></p>",
        "id": 361418402,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1685128408
    },
    {
        "content": "<p>Wonderful, that works perfectly. Thanks to you both.</p>",
        "id": 361421081,
        "sender_full_name": "Nilay Patel",
        "timestamp": 1685129243
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"567494\">Nilay Patel</span> has marked this topic as resolved.</p>",
        "id": 361421089,
        "sender_full_name": "Notification Bot",
        "timestamp": 1685129246
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/113489-new-members/topic/.E2.9C.94.20How.20to.20use.20.5Cprod.20over.20.28fin.20n.29/near/361418402\">said</a>:</p>\n<blockquote>\n<p>What Yaël wrote is short for <code>∏ i : fin n, lambda i</code>, which is a synonym for <code>∏ i in (finset.univ : finset (fin n)), lambda i</code></p>\n</blockquote>\n<p>Can I use this shorthand in Lean 4?</p>",
        "id": 379558683,
        "sender_full_name": "Bulhwi Cha",
        "timestamp": 1690559973
    },
    {
        "content": "<p>Yes.</p>",
        "id": 379559215,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1690560072
    },
    {
        "content": "<p>You should be able to</p>",
        "id": 379559328,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1690560095
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Nat.Prime</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.SetTheory.Cardinal.Basic</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">Nat.Primes</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">countable</span> <span class=\"o\">:</span> <span class=\"n\">Countable</span> <span class=\"n\">Primes</span> <span class=\"o\">:=</span> <span class=\"o\">⟨⟨</span><span class=\"n\">Subtype.val</span><span class=\"o\">,</span> <span class=\"n\">coe_nat_injective</span><span class=\"o\">⟩⟩</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">scoped</span> <span class=\"n\">BigOperators</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">infinite</span> <span class=\"o\">:</span> <span class=\"n\">Infinite</span> <span class=\"n\">Primes</span> <span class=\"n\">where</span>\n  <span class=\"n\">not_finite</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">intro</span> <span class=\"n\">h</span>\n    <span class=\"k\">let</span> <span class=\"bp\">@</span><span class=\"n\">Finite.intro</span> <span class=\"n\">Primes</span> <span class=\"n\">n</span> <span class=\"n\">e</span> <span class=\"o\">:=</span> <span class=\"n\">h</span>\n    <span class=\"k\">let</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"bp\">∏</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"o\">(</span><span class=\"n\">Finset.univ</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">)),</span> <span class=\"n\">e.invFun</span> <span class=\"n\">i</span>\n    <span class=\"gr\">sorry</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">scoped</span> <span class=\"n\">Cardinal</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">card_eq_aleph0</span> <span class=\"o\">:</span> <span class=\"bp\">#</span><span class=\"n\">Primes</span> <span class=\"bp\">=</span> <span class=\"n\">ℵ₀</span> <span class=\"o\">:=</span> <span class=\"n\">Cardinal.mk_eq_aleph0</span> <span class=\"n\">Primes</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">Nat.Primes</span>\n</code></pre></div>\n<p>When I replace <code>(Finset.univ : Finset (Fin n))</code> with <code>Fin n</code> in the above code, I get this error:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">application</span> <span class=\"n\">type</span> <span class=\"n\">mismatch</span>\n  <span class=\"n\">Finset.prod</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n<span class=\"n\">argument</span>\n  <span class=\"n\">Fin</span> <span class=\"n\">n</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"kt\">Type</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"mi\">1</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"n\">Finset</span> <span class=\"bp\">?</span><span class=\"n\">m.129</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">?</span><span class=\"n\">u.126</span>\n</code></pre></div>",
        "id": 379560472,
        "sender_full_name": "Bulhwi Cha",
        "timestamp": 1690560273
    },
    {
        "content": "<p>you need to use <code>\\prod t : F, ...</code> when you8 quantify over a finite type</p>",
        "id": 379560663,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1690560313
    },
    {
        "content": "<p>Oh, my bad. Thanks!</p>",
        "id": 379561886,
        "sender_full_name": "Bulhwi Cha",
        "timestamp": 1690560569
    }
]