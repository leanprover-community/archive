[
    {
        "content": "<p>I am trying to prove that a set is compact by using the theorem <code>Metric.isCompact_of_isClosed_bounded</code>, which says in a proper space, the closure of a bounded set is compact. <br>\nHowever, I encountered a type mismatch issue. Here is my code and the error message. I suspect this may be related to type inference.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Topology.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Topology.Sequences</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Order.Filter.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Set.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Logic.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Order.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Topology.Sets.Closeds</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Topology.Bases</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Order.Bounds.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Topology.SubsetProperties</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Topology.MetricSpace.Basic</span>\n\n\n<span class=\"kn\">open</span> <span class=\"n\">Function</span> <span class=\"n\">Topology</span> <span class=\"n\">Filter</span> <span class=\"n\">Set</span> <span class=\"n\">TopologicalSpace</span> <span class=\"n\">Metric</span>\n\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"bp\">ùïú</span> <span class=\"n\">E</span> <span class=\"n\">Œ±</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"n\">LinearOrderedRing</span> <span class=\"bp\">ùïú</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">AddCommMonoid</span> <span class=\"n\">E</span><span class=\"o\">]</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"bp\">ùïú</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">SMul</span> <span class=\"bp\">ùïú</span> <span class=\"n\">E</span><span class=\"o\">]</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"n\">TopologicalSpace</span> <span class=\"bp\">ùïú</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">TopologicalSpace</span> <span class=\"n\">E</span><span class=\"o\">]</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"n\">SequentialSpace</span> <span class=\"n\">E</span><span class=\"o\">]</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"n\">FirstCountableTopology</span> <span class=\"n\">E</span><span class=\"o\">]</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"n\">Preorder</span> <span class=\"n\">E</span><span class=\"o\">]</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"n\">PseudoMetricSpace</span> <span class=\"n\">E</span><span class=\"o\">]</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"n\">ProperSpace</span> <span class=\"n\">E</span><span class=\"o\">]</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"n\">T2Space</span> <span class=\"n\">E</span><span class=\"o\">]</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"n\">UniformSpace</span> <span class=\"n\">E</span><span class=\"o\">]</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">IsClosed</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h'</span> <span class=\"o\">:</span> <span class=\"n\">Bounded</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">IsCompact</span> <span class=\"n\">s</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">exact</span> <span class=\"n\">isCompact_of_isClosed_bounded</span> <span class=\"n\">h</span> <span class=\"n\">h'</span>\n</code></pre></div>\n<p><a href=\"/user_uploads/3121/xN81aeNrcVitjsTjL9SiRxew/Êà™Â±è2023-08-23-16.45.24.png\">Êà™Â±è2023-08-23-16.45.24.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/xN81aeNrcVitjsTjL9SiRxew/Êà™Â±è2023-08-23-16.45.24.png\" title=\"Êà™Â±è2023-08-23-16.45.24.png\"><img src=\"/user_uploads/3121/xN81aeNrcVitjsTjL9SiRxew/Êà™Â±è2023-08-23-16.45.24.png\"></a></div>",
        "id": 386793473,
        "sender_full_name": "Daniel Lambert",
        "timestamp": 1692780397
    },
    {
        "content": "<p>You've put two topologies on E, one from the topology and one from the pseudometric. Keep the metric and drop the topology.</p>",
        "id": 386795437,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1692781031
    },
    {
        "content": "<p>It does work! Thanks!</p>",
        "id": 386797002,
        "sender_full_name": "Daniel Lambert",
        "timestamp": 1692781556
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"639150\">Daniel Lambert</span> has marked this topic as resolved.</p>",
        "id": 386797019,
        "sender_full_name": "Notification Bot",
        "timestamp": 1692781562
    }
]