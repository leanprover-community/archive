[
    {
        "content": "<p>I'm having trouble proving the statement below:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Real.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Complex.Basic</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">x</span><span class=\"bp\">*</span><span class=\"n\">x</span><span class=\"bp\">^</span><span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>It says the instance for HPow cannot be synthesized because they are reals.  I understand that Reals are undecidable and noncomputable, but is there a way to still work with them in the exponent?</p>",
        "id": 397854121,
        "sender_full_name": "Colin Jones ⚛️",
        "timestamp": 1697898580
    },
    {
        "content": "<p>try adding</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Analysis.SpecialFunctions.Pow.Real</span>\n</code></pre></div>",
        "id": 397854450,
        "sender_full_name": "David Renshaw",
        "timestamp": 1697898854
    },
    {
        "content": "<p>Thank you. It works now.</p>",
        "id": 397854579,
        "sender_full_name": "Colin Jones ⚛️",
        "timestamp": 1697898962
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"628490\">Colin Jones ⚛️</span> has marked this topic as resolved.</p>",
        "id": 397854617,
        "sender_full_name": "Notification Bot",
        "timestamp": 1697898967
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"628490\">Colin Jones ⚛️</span> has marked this topic as unresolved.</p>",
        "id": 397874082,
        "sender_full_name": "Notification Bot",
        "timestamp": 1697917854
    },
    {
        "content": "<p>It only works when x &gt; 0.  I understand this is to prevent the number from being complex.  Is there a general lemma for complex as well that does not require the additional hypothesis : x &gt; 0?</p>",
        "id": 397874189,
        "sender_full_name": "Colin Jones ⚛️",
        "timestamp": 1697917964
    },
    {
        "content": "<p>Can you explain what you mean with a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>?</p>",
        "id": 397874293,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1697918100
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Real.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Complex.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Analysis.SpecialFunctions.Pow.Real</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Real</span>\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">x</span><span class=\"bp\">*</span><span class=\"n\">x</span><span class=\"bp\">^</span><span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mul_comm</span><span class=\"o\">]</span>\n  <span class=\"n\">convert</span> <span class=\"n\">Real.rpow_add_nat</span> <span class=\"n\">h</span> <span class=\"n\">y</span> <span class=\"mi\">1</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">simp</span>\n</code></pre></div>",
        "id": 397874377,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1697918198
    },
    {
        "content": "<p>Yes sorry, here:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Real.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Complex.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Analysis.SpecialFunctions.Pow.Real</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"bp\">\\</span><span class=\"n\">C</span><span class=\"o\">)</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">x</span><span class=\"bp\">^</span><span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"bp\">^</span><span class=\"n\">z</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>How could I prove this? Or is this not true?</p>",
        "id": 397874469,
        "sender_full_name": "Colin Jones ⚛️",
        "timestamp": 1697918291
    },
    {
        "content": "<p>It's not:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Real.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Complex.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Analysis.SpecialFunctions.Pow.Real</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">),</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">x</span><span class=\"bp\">^</span><span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"bp\">^</span><span class=\"n\">z</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">push_neg</span>\n  <span class=\"n\">use</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">1</span>\n  <span class=\"n\">simp</span>\n</code></pre></div>",
        "id": 397874771,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1697918547
    },
    {
        "content": "<p>What if I added the hypothesis x is not equal to 0?</p>",
        "id": 397874907,
        "sender_full_name": "Colin Jones ⚛️",
        "timestamp": 1697918666
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Real.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Complex.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Analysis.SpecialFunctions.Pow.Real</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">x</span><span class=\"bp\">^</span><span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"bp\">^</span><span class=\"n\">z</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">apply</span><span class=\"bp\">?</span> <span class=\"n\">says</span> <span class=\"n\">exact</span> <span class=\"n\">Complex.cpow_add</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"n\">h</span>\n</code></pre></div>",
        "id": 397874928,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1697918716
    },
    {
        "content": "<p>Thanks that lemma that you mentioned worked!</p>",
        "id": 397879388,
        "sender_full_name": "Colin Jones ⚛️",
        "timestamp": 1697924664
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"628490\">Colin Jones ⚛️</span> has marked this topic as resolved.</p>",
        "id": 397879389,
        "sender_full_name": "Notification Bot",
        "timestamp": 1697924668
    }
]