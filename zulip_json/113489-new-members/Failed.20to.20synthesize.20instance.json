[
    {
        "content": "<p>Can anyone shed light on why I'm getting \"failed to synthesize instance, Inter ↑subsets\" on this snippet:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[</span><span class=\"n\">ext</span><span class=\"kd\">]</span>\n<span class=\"kd\">structure</span> <span class=\"n\">SetPartition</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">subsets</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"o\">(</span><span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n  <span class=\"n\">union_to_all</span><span class=\"o\">:</span> <span class=\"n\">Set.sUnion</span> <span class=\"n\">subsets</span> <span class=\"bp\">=</span> <span class=\"n\">set</span>\n  <span class=\"n\">all_disjoint</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">suba</span> <span class=\"n\">subb</span> <span class=\"o\">:</span> <span class=\"n\">subsets</span><span class=\"o\">),</span> <span class=\"n\">suba</span> <span class=\"bp\">≠</span> <span class=\"n\">subb</span> <span class=\"bp\">→</span> <span class=\"n\">suba</span> <span class=\"bp\">∩</span> <span class=\"n\">subb</span> <span class=\"bp\">=</span> <span class=\"bp\">∅</span>\n</code></pre></div>",
        "id": 399648011,
        "sender_full_name": "Owen Anderson",
        "timestamp": 1698809366
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>, please</p>",
        "id": 399665702,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1698820120
    },
    {
        "content": "<p>You should convince lean that <code>suba</code> must be regarder as a set:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">SetPartition</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">subsets</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"o\">(</span><span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n  <span class=\"n\">union_to_all</span><span class=\"o\">:</span> <span class=\"n\">sUnion</span> <span class=\"n\">subsets</span> <span class=\"bp\">=</span> <span class=\"n\">set</span>\n  <span class=\"n\">all_disjoint</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">suba</span> <span class=\"n\">subb</span> <span class=\"o\">:</span> <span class=\"n\">subsets</span><span class=\"o\">),</span> <span class=\"n\">suba</span> <span class=\"bp\">≠</span> <span class=\"n\">subb</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">suba</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">∩</span> <span class=\"n\">subb</span> <span class=\"bp\">=</span> <span class=\"bp\">∅</span>\n</code></pre></div>",
        "id": 399715583,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1698841748
    },
    {
        "content": "<p>It would be much better to have them being sets from the beginning: </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[</span><span class=\"n\">ext</span><span class=\"kd\">]</span>\n<span class=\"kd\">structure</span> <span class=\"n\">SetPartition</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">subsets</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"o\">(</span><span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n  <span class=\"n\">union_to_all</span><span class=\"o\">:</span> <span class=\"n\">Set.sUnion</span> <span class=\"n\">subsets</span> <span class=\"bp\">=</span> <span class=\"n\">set</span>\n  <span class=\"n\">all_disjoint</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">suba</span> <span class=\"bp\">∈</span> <span class=\"n\">subsets</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">subb</span> <span class=\"bp\">∈</span> <span class=\"n\">subsets</span><span class=\"o\">,</span> <span class=\"n\">suba</span> <span class=\"bp\">≠</span> <span class=\"n\">subb</span> <span class=\"bp\">→</span> <span class=\"n\">suba</span> <span class=\"bp\">∩</span> <span class=\"n\">subb</span> <span class=\"bp\">=</span> <span class=\"bp\">∅</span>\n</code></pre></div>",
        "id": 399725650,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1698845395
    }
]