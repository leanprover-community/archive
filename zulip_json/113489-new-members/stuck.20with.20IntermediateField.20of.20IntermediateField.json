[
    {
        "content": "<p>I'm sutck with problems regarding <code>IntermediateField</code> of <code>IntermediateField</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.FieldTheory.SplittingField.Construction</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.FieldTheory.IsAlgClosed.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.FieldTheory.Separable</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.RingTheory.IntegralDomain</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Algebra</span> <span class=\"n\">F</span> <span class=\"n\">E</span><span class=\"o\">]</span>\n    <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"n\">IntermediateField</span> <span class=\"n\">F</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"n\">IntermediateField</span> <span class=\"n\">F</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">True</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"n\">hdvd</span> <span class=\"o\">:</span> <span class=\"n\">minpoly</span> <span class=\"n\">K</span> <span class=\"n\">α</span> <span class=\"bp\">∣</span> <span class=\"n\">Polynomial.map</span> <span class=\"o\">(</span><span class=\"n\">algebraMap</span> <span class=\"n\">L</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">minpoly</span> <span class=\"n\">L</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n    <span class=\"gr\">sorry</span> <span class=\"c1\">-- minpoly.dvd_map_of_isScalarTower L K α</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>Lean complains that K is not an L-algebra. I have no idea how to fix it. Any suggestions?</p>",
        "id": 393303077,
        "sender_full_name": "Jz Pan",
        "timestamp": 1695753700
    },
    {
        "content": "<p>It typechecks if I change <code>L</code> to <code>L.toSubfield</code>, but the proof still doesn't work:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Algebra</span> <span class=\"n\">F</span> <span class=\"n\">E</span><span class=\"o\">]</span>\n    <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"n\">IntermediateField</span> <span class=\"n\">F</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"n\">IntermediateField</span> <span class=\"n\">F</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">True</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"n\">hdvd</span> <span class=\"o\">:</span> <span class=\"n\">minpoly</span> <span class=\"n\">K</span> <span class=\"n\">α</span> <span class=\"bp\">∣</span> <span class=\"n\">Polynomial.map</span> <span class=\"o\">(</span><span class=\"n\">algebraMap</span> <span class=\"n\">L.toSubfield</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">minpoly</span> <span class=\"n\">L.toSubfield</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n    <span class=\"n\">minpoly.dvd_map_of_isScalarTower</span> <span class=\"n\">L.toSubfield</span> <span class=\"n\">K</span> <span class=\"n\">α</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>It complains that <code>failed to synthesize  SMul { x // x ∈ K } { x // x ∈ K }</code>.</p>",
        "id": 393303926,
        "sender_full_name": "Jz Pan",
        "timestamp": 1695754010
    },
    {
        "content": "<p>What's the full error? Does it say it timed out?</p>",
        "id": 393310824,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1695756192
    },
    {
        "content": "<p>Yes that looks like a timeout, but sometimes it just says it doesn't find the instance.</p>",
        "id": 393313704,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1695757353
    },
    {
        "content": "<p>Can you get away with <code>L : IntermediateField F E</code> and <code>L &lt;= K</code>?</p>",
        "id": 393326736,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1695761399
    },
    {
        "content": "<p>I've found that Lean is unfortunately not very good at nested structures, like <code>IntermediateField</code>s of <code>IntermediateField</code>s, or subalgebras of quotients of polynomials of splitting fields, etc. If you're taking an <code>IntermediateField</code> as an assumption, like here, very often you can replace it with an arbitrary field + <code>IsScalarTower</code> hypothesis:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.FieldTheory.SplittingField.Construction</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.FieldTheory.IsAlgClosed.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.FieldTheory.Separable</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.RingTheory.IntegralDomain</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"n\">E</span> <span class=\"n\">K</span> <span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Algebra</span> <span class=\"n\">F</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">L</span><span class=\"o\">]</span>\n    <span class=\"o\">[</span><span class=\"n\">Algebra</span> <span class=\"n\">F</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Algebra</span> <span class=\"n\">K</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">IsScalarTower</span> <span class=\"n\">F</span> <span class=\"n\">K</span> <span class=\"n\">E</span><span class=\"o\">]</span>\n    <span class=\"o\">[</span><span class=\"n\">Algebra</span> <span class=\"n\">F</span> <span class=\"n\">L</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Algebra</span> <span class=\"n\">L</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">IsScalarTower</span> <span class=\"n\">F</span> <span class=\"n\">L</span> <span class=\"n\">K</span><span class=\"o\">]</span>\n    <span class=\"o\">[</span><span class=\"n\">Algebra</span> <span class=\"n\">L</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">IsScalarTower</span> <span class=\"n\">L</span> <span class=\"n\">K</span> <span class=\"n\">E</span><span class=\"o\">]</span>\n    <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">True</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"n\">hdvd</span> <span class=\"o\">:</span> <span class=\"n\">minpoly</span> <span class=\"n\">K</span> <span class=\"n\">α</span> <span class=\"bp\">∣</span> <span class=\"n\">Polynomial.map</span> <span class=\"o\">(</span><span class=\"n\">algebraMap</span> <span class=\"n\">L</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">minpoly</span> <span class=\"n\">L</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n    <span class=\"n\">minpoly.dvd_map_of_isScalarTower</span> <span class=\"n\">L</span> <span class=\"n\">K</span> <span class=\"n\">α</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 393427484,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1695804759
    },
    {
        "content": "<p>Thanks. In fact I'm working on this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.FieldTheory.SplittingField.Construction</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.FieldTheory.IsAlgClosed.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.FieldTheory.Separable</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.RingTheory.IntegralDomain</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">scoped</span> <span class=\"n\">Classical</span> <span class=\"n\">Polynomial</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">FiniteDimensional</span> <span class=\"n\">Polynomial</span> <span class=\"n\">IntermediateField</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">E</span><span class=\"o\">]</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"n\">Algebra</span> <span class=\"n\">F</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">FiniteDimensional</span> <span class=\"n\">F</span> <span class=\"n\">E</span><span class=\"o\">]</span>\n\n<span class=\"c1\">-- A finite simple extension has only finitely many intermediate fields</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">Field.finite_intermediateField_of_exists_primitive_element</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">E</span><span class=\"o\">,</span> <span class=\"n\">F</span><span class=\"bp\">⟮</span><span class=\"n\">α</span><span class=\"bp\">⟯</span> <span class=\"bp\">=</span> <span class=\"bp\">⊤</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">Finite</span> <span class=\"o\">(</span><span class=\"n\">IntermediateField</span> <span class=\"n\">F</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"o\">⟨</span><span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">⟩</span>\n  <span class=\"c1\">-- Let `f` bethe minimal polynomial of `α ∈ E` over `F`</span>\n  <span class=\"k\">let</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Polynomial</span> <span class=\"n\">F</span> <span class=\"o\">:=</span> <span class=\"n\">minpoly</span> <span class=\"n\">F</span> <span class=\"n\">α</span>\n  <span class=\"c1\">-- If `K` is an intermediate field of `E/F`, let `g` be the minimal polynomial of `α ∈ E` over `K`</span>\n  <span class=\"k\">let</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"n\">IntermediateField</span> <span class=\"n\">F</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">Polynomial</span> <span class=\"n\">K</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">K</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">minpoly</span> <span class=\"n\">K</span> <span class=\"n\">α</span>\n  <span class=\"c1\">-- ... and let `L` be the field over `F` generated by coefficients of `g`</span>\n  <span class=\"k\">let</span> <span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"n\">IntermediateField</span> <span class=\"n\">F</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">IntermediateField</span> <span class=\"n\">F</span> <span class=\"n\">K</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">K</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">IntermediateField.adjoin</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"n\">Set.range</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"n\">K</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">toFinsupp</span><span class=\"o\">)</span>\n  <span class=\"c1\">-- Then `L = K`</span>\n  <span class=\"k\">have</span> <span class=\"n\">hL</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">K</span><span class=\"o\">,</span> <span class=\"n\">L</span> <span class=\"n\">K</span> <span class=\"bp\">=</span> <span class=\"bp\">⊤</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">K</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span>\n    <span class=\"k\">let</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">Polynomial</span> <span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"n\">K</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">toSubfield</span> <span class=\"o\">:=</span> <span class=\"n\">minpoly</span> <span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"n\">K</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">toSubfield</span> <span class=\"n\">α</span>\n    <span class=\"k\">have</span> <span class=\"n\">hdvd</span> <span class=\"o\">:</span> <span class=\"n\">g</span> <span class=\"n\">K</span> <span class=\"bp\">∣</span> <span class=\"n\">Polynomial.map</span> <span class=\"o\">(</span><span class=\"n\">algebraMap</span> <span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"n\">K</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">toSubfield</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"n\">h</span> <span class=\"o\">:=</span>\n      <span class=\"gr\">sorry</span> <span class=\"c1\">-- minpoly.dvd_map_of_isScalarTower (L K).toSubfield K α</span>\n    <span class=\"gr\">sorry</span>\n  <span class=\"k\">let</span> <span class=\"n\">G</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">Polynomial</span> <span class=\"n\">E</span> <span class=\"bp\">//</span> <span class=\"n\">g.Monic</span> <span class=\"bp\">∧</span> <span class=\"n\">g</span> <span class=\"bp\">∣</span> <span class=\"n\">f.map</span> <span class=\"o\">(</span><span class=\"n\">algebraMap</span> <span class=\"n\">F</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">}</span>\n  <span class=\"c1\">-- ... and `g` is a monid factor of `f`</span>\n  <span class=\"k\">let</span> <span class=\"n\">g'</span> <span class=\"o\">:</span> <span class=\"n\">IntermediateField</span> <span class=\"n\">F</span> <span class=\"n\">E</span> <span class=\"bp\">→</span> <span class=\"n\">G</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">K</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"o\">⟨(</span><span class=\"n\">g</span> <span class=\"n\">K</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"n\">algebraMap</span> <span class=\"n\">K</span> <span class=\"n\">E</span><span class=\"o\">),</span> <span class=\"o\">⟨</span><span class=\"n\">Monic.map</span> <span class=\"o\">(</span><span class=\"n\">algebraMap</span> <span class=\"n\">K</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"bp\">$</span>\n      <span class=\"n\">minpoly.monic</span> <span class=\"bp\">$</span> <span class=\"n\">isAlgebraic_iff_isIntegral.1</span> <span class=\"bp\">$</span> <span class=\"n\">isAlgebraic_of_finite</span> <span class=\"n\">K</span> <span class=\"n\">α</span><span class=\"o\">,</span>\n    <span class=\"kd\">by</span>\n      <span class=\"n\">simp</span> <span class=\"n\">only</span>\n      <span class=\"k\">have</span> <span class=\"n\">hdvd</span> <span class=\"o\">:</span> <span class=\"n\">minpoly</span> <span class=\"n\">K</span> <span class=\"n\">α</span> <span class=\"bp\">∣</span> <span class=\"n\">Polynomial.map</span> <span class=\"o\">(</span><span class=\"n\">algebraMap</span> <span class=\"n\">F</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">minpoly</span> <span class=\"n\">F</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n        <span class=\"n\">minpoly.dvd_map_of_isScalarTower</span> <span class=\"n\">F</span> <span class=\"n\">K</span> <span class=\"n\">α</span>\n      <span class=\"gr\">sorry</span><span class=\"o\">⟩⟩</span>\n  <span class=\"c1\">-- The map `K ↦ g` is injective</span>\n  <span class=\"k\">have</span> <span class=\"n\">hinj</span> <span class=\"o\">:</span> <span class=\"n\">Function.Injective</span> <span class=\"n\">g'</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n  <span class=\"c1\">-- and `f` has only finitely many monic factors</span>\n  <span class=\"k\">have</span> <span class=\"n\">hfin</span> <span class=\"o\">:</span> <span class=\"n\">Finite</span> <span class=\"n\">G</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n  <span class=\"c1\">-- therefore there are only finitely many intermediate fields</span>\n  <span class=\"n\">exact</span> <span class=\"n\">Finite.of_injective</span> <span class=\"n\">g'</span> <span class=\"n\">hinj</span>\n</code></pre></div>\n<p>and its statement naturally uses <code>IntermediateField</code>. Let me see if I can find a way to convert the statement to your form.</p>",
        "id": 393618431,
        "sender_full_name": "Jz Pan",
        "timestamp": 1695878428
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"253861\">@Thomas Browning</span> do you have any comments?</p>",
        "id": 393627550,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1695882437
    },
    {
        "content": "<p>I would probably suggest redefining <code>L</code> to go from <code>IntermediateField F E → IntermediateField F E</code> by immediately applying <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=IntermediateField.lift#doc\">docs#IntermediateField.lift</a></p>",
        "id": 393630978,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1695883771
    },
    {
        "content": "<p>Right -- this is how you did normal closure, right? Normal closure of K (in F/E) was also in F/E rather than in F/K because it is easier to work with at the end of the day.</p>",
        "id": 393635682,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1695885333
    },
    {
        "content": "<p>Yes, that's right. Staying within a single intermediate field type just seems to make life easier.</p>",
        "id": 393753879,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1695915757
    },
    {
        "content": "<p>You just need injectivity of <code>g</code> and you don't need to take the subfield generated by the coefficients of the minimal polynomial: if <code>p := minpoly K α = minpoly K' α</code> (when coerced into E) then the coefficients lies in <code>K ⊓ K'</code>, so <code>q := minpoly (K ⊓ K') α</code> divides <code>p</code>. But <code>p</code> has degree [E:K], which is smaller than the degree of <code>q</code> [E:K ⊓ K'], if K ≠ K'.</p>\n<p>Given how <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Ideal.finite_factors#doc\">docs#Ideal.finite_factors</a> is proved, I suppose we don't have a lemma saying a nonzero element in a UFD has only finitely many factors up to associates. Minpolys are monic so <code>g</code> composed with the map E[X] -&gt; Associates E[X] is still injective. (Update: Oh there is <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=UniqueFactorizationMonoid.fintypeSubtypeDvd#doc\">docs#UniqueFactorizationMonoid.fintypeSubtypeDvd</a> which can be applied there but not here ...)</p>",
        "id": 393756395,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1695916508
    },
    {
        "content": "<p>Thanks. Now there is only a few <code>sorry</code>s to go.</p>",
        "id": 396178091,
        "sender_full_name": "Jz Pan",
        "timestamp": 1697066360
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.FieldTheory.SplittingField.Construction</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.FieldTheory.IsAlgClosed.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.FieldTheory.Separable</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.RingTheory.IntegralDomain</span>\n\n<span class=\"kd\">universe</span> <span class=\"n\">u</span> <span class=\"n\">v</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">scoped</span> <span class=\"n\">Classical</span> <span class=\"n\">Polynomial</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">FiniteDimensional</span> <span class=\"n\">Polynomial</span> <span class=\"n\">IntermediateField</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">E</span><span class=\"o\">]</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"n\">Algebra</span> <span class=\"n\">F</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">FiniteDimensional</span> <span class=\"n\">F</span> <span class=\"n\">E</span><span class=\"o\">]</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">Field.finite_intermediateField_of_exists_primitive_element.aux_1</span>\n    <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hprim</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"bp\">⟮</span><span class=\"n\">α</span><span class=\"bp\">⟯</span> <span class=\"bp\">=</span> <span class=\"bp\">⊤</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"n\">IntermediateField</span> <span class=\"n\">F</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">K</span><span class=\"bp\">⟮</span><span class=\"n\">α</span><span class=\"bp\">⟯</span> <span class=\"bp\">=</span> <span class=\"bp\">⊤</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">Field.finite_intermediateField_of_exists_primitive_element.aux_2</span>\n    <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hprim</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"bp\">⟮</span><span class=\"n\">α</span><span class=\"bp\">⟯</span> <span class=\"bp\">=</span> <span class=\"bp\">⊤</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"n\">K'</span> <span class=\"o\">:</span> <span class=\"n\">IntermediateField</span> <span class=\"n\">F</span> <span class=\"n\">E</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">heq</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">minpoly</span> <span class=\"n\">K</span> <span class=\"n\">α</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"n\">algebraMap</span> <span class=\"n\">K</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">minpoly</span> <span class=\"n\">K'</span> <span class=\"n\">α</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"n\">algebraMap</span> <span class=\"n\">K'</span> <span class=\"n\">E</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n    <span class=\"n\">K</span> <span class=\"bp\">=</span> <span class=\"n\">K</span> <span class=\"bp\">⊓</span> <span class=\"n\">K'</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">set</span> <span class=\"n\">g</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">minpoly</span> <span class=\"n\">K</span> <span class=\"n\">α</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"n\">algebraMap</span> <span class=\"n\">K</span> <span class=\"n\">E</span><span class=\"o\">)</span>\n  <span class=\"n\">set</span> <span class=\"n\">g'</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">minpoly</span> <span class=\"n\">K'</span> <span class=\"n\">α</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"n\">algebraMap</span> <span class=\"n\">K'</span> <span class=\"n\">E</span><span class=\"o\">)</span>\n  <span class=\"n\">set</span> <span class=\"n\">K''</span> <span class=\"o\">:=</span> <span class=\"n\">K</span> <span class=\"bp\">⊓</span> <span class=\"n\">K'</span>\n  <span class=\"k\">have</span> <span class=\"n\">hcoeff</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">g.coeff</span> <span class=\"n\">n</span> <span class=\"bp\">∈</span> <span class=\"n\">K''</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"o\">(</span><span class=\"n\">mem_inf</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:=</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">T</span> <span class=\"o\">:=</span> <span class=\"n\">K'</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"mi\">2</span>\n      <span class=\"o\">⟨</span><span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">coeff_map</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"o\">((</span><span class=\"n\">minpoly</span> <span class=\"n\">K</span> <span class=\"n\">α</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">coeff</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">property</span><span class=\"o\">,</span>\n        <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">heq</span><span class=\"o\">,</span> <span class=\"n\">coeff_map</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"o\">((</span><span class=\"n\">minpoly</span> <span class=\"n\">K'</span> <span class=\"n\">α</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">coeff</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">property</span><span class=\"o\">⟩</span>\n  <span class=\"k\">let</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">Polynomial</span> <span class=\"n\">K''</span> <span class=\"o\">:=</span> <span class=\"n\">g.sum</span> <span class=\"bp\">$</span> <span class=\"k\">fun</span> <span class=\"n\">n</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">C</span> <span class=\"o\">⟨</span><span class=\"n\">g.coeff</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">hcoeff</span> <span class=\"n\">n</span><span class=\"o\">⟩</span> <span class=\"bp\">*</span> <span class=\"n\">X</span> <span class=\"bp\">^</span> <span class=\"n\">n</span>\n  <span class=\"k\">have</span> <span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">p.map</span> <span class=\"o\">(</span><span class=\"n\">algebraMap</span> <span class=\"n\">K''</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"gr\">sorry</span>\n  <span class=\"k\">let</span> <span class=\"n\">q</span> <span class=\"o\">:=</span> <span class=\"n\">minpoly</span> <span class=\"n\">K''</span> <span class=\"n\">α</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"n\">hqdvdp</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"k\">show</span> <span class=\"n\">q</span> <span class=\"bp\">∣</span> <span class=\"n\">p</span> <span class=\"kd\">by</span>\n    <span class=\"n\">apply</span> <span class=\"n\">minpoly.dvd</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">aeval_def</span><span class=\"o\">,</span> <span class=\"n\">eval₂_eq_eval_map</span><span class=\"o\">,</span> <span class=\"n\">hp</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">eval₂_eq_eval_map</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">aeval_def</span><span class=\"o\">]</span>\n    <span class=\"n\">exact</span> <span class=\"n\">minpoly.aeval</span> <span class=\"n\">K</span> <span class=\"n\">α</span>\n  <span class=\"k\">have</span> <span class=\"n\">hpne0</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">apply_fun</span> <span class=\"n\">Polynomial.map</span> <span class=\"o\">(</span><span class=\"n\">algebraMap</span> <span class=\"n\">K''</span> <span class=\"n\">E</span><span class=\"o\">)</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">hp</span><span class=\"o\">,</span> <span class=\"n\">Polynomial.map_zero</span><span class=\"o\">,</span> <span class=\"n\">Polynomial.map_ne_zero_iff</span> <span class=\"bp\">$</span> <span class=\"n\">NoZeroSMulDivisors.algebraMap_injective</span> <span class=\"n\">K</span> <span class=\"n\">E</span><span class=\"o\">]</span>\n    <span class=\"n\">exact</span> <span class=\"n\">minpoly.ne_zero</span> <span class=\"bp\">$</span> <span class=\"n\">isAlgebraic_iff_isIntegral.1</span> <span class=\"bp\">$</span> <span class=\"n\">isAlgebraic_of_finite</span> <span class=\"n\">K</span> <span class=\"n\">α</span>\n  <span class=\"k\">have</span> <span class=\"n\">hqne0</span> <span class=\"o\">:</span> <span class=\"n\">q</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">hqdvdp</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hpne0</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">left_ne_zero_of_mul</span> <span class=\"n\">hpne0</span>\n  <span class=\"k\">have</span> <span class=\"n\">hrne0</span> <span class=\"o\">:</span> <span class=\"n\">r</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">hqdvdp</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hpne0</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">right_ne_zero_of_mul</span> <span class=\"n\">hpne0</span>\n  <span class=\"k\">have</span> <span class=\"n\">hpdeg</span> <span class=\"o\">:=</span> <span class=\"n\">IntermediateField.adjoin.finrank</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"o\">:=</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:=</span> <span class=\"n\">isIntegral_of_finite</span> <span class=\"n\">K</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Field.finite_intermediateField_of_exists_primitive_element.aux_1</span> <span class=\"n\">F</span> <span class=\"n\">E</span> <span class=\"n\">α</span> <span class=\"n\">hprim</span> <span class=\"n\">K</span><span class=\"o\">,</span>\n    <span class=\"bp\">←</span> <span class=\"n\">Polynomial.natDegree_map_eq_of_injective</span> <span class=\"o\">(</span><span class=\"n\">NoZeroSMulDivisors.algebraMap_injective</span> <span class=\"n\">K</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">minpoly</span> <span class=\"n\">K</span> <span class=\"n\">α</span><span class=\"o\">),</span>\n    <span class=\"k\">show</span> <span class=\"o\">(</span><span class=\"n\">minpoly</span> <span class=\"n\">K</span> <span class=\"n\">α</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"n\">algebraMap</span> <span class=\"n\">K</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"kd\">by</span> <span class=\"n\">rfl</span><span class=\"o\">,</span>\n    <span class=\"bp\">←</span> <span class=\"n\">hp</span><span class=\"o\">,</span>\n    <span class=\"n\">Polynomial.natDegree_map_eq_of_injective</span> <span class=\"o\">(</span><span class=\"n\">NoZeroSMulDivisors.algebraMap_injective</span> <span class=\"n\">K''</span> <span class=\"n\">E</span><span class=\"o\">),</span>\n    <span class=\"n\">hqdvdp</span><span class=\"o\">,</span>\n    <span class=\"n\">Polynomial.natDegree_mul</span> <span class=\"n\">hqne0</span> <span class=\"n\">hrne0</span><span class=\"o\">,</span>\n    <span class=\"bp\">←</span> <span class=\"n\">IntermediateField.adjoin.finrank</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"o\">:=</span> <span class=\"n\">K''</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:=</span> <span class=\"n\">isIntegral_of_finite</span> <span class=\"n\">K''</span> <span class=\"n\">α</span><span class=\"o\">),</span>\n    <span class=\"n\">Field.finite_intermediateField_of_exists_primitive_element.aux_1</span> <span class=\"n\">F</span> <span class=\"n\">E</span> <span class=\"n\">α</span> <span class=\"n\">hprim</span> <span class=\"n\">K''</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hpdeg</span>\n  <span class=\"c1\">-- FiniteDimensional.finrank_mul_finrank</span>\n  <span class=\"k\">have</span> <span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">K''</span> <span class=\"bp\">≤</span> <span class=\"n\">K</span> <span class=\"o\">:=</span> <span class=\"n\">inf_le_left</span>\n  <span class=\"k\">have</span> <span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">finrank</span> <span class=\"n\">F</span> <span class=\"n\">K''</span> <span class=\"bp\">≥</span> <span class=\"n\">finrank</span> <span class=\"n\">F</span> <span class=\"n\">K</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 396178127,
        "sender_full_name": "Jz Pan",
        "timestamp": 1697066393
    },
    {
        "content": "<ul>\n<li>The first one is, if <code>E/F</code> is a field extension, <code>α</code> is an element of <code>E</code> such that <code>F⟮α⟯ = E</code>, then for any intermediate field <code>K</code>, we should also have <code>K⟮α⟯ = E</code>. I have no idea using existing API to prove this.</li>\n<li>The second one is, I have a polynomial in <code>E</code> but its coefficients are all come from <code>K''</code>. I just want to extract its coefficients and form a polynomial in <code>K''</code>. I suspect I used wrong API.</li>\n<li>The third one is my attempt to use <code>FiniteDimensional.finrank_mul_finrank</code>. Before it I got</li>\n</ul>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">hpdeg</span><span class=\"o\">:</span> <span class=\"n\">finrank</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">K</span> <span class=\"o\">}</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"bp\">⊤</span> <span class=\"o\">}</span> <span class=\"bp\">=</span> <span class=\"n\">finrank</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">K''</span> <span class=\"o\">}</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"bp\">⊤</span> <span class=\"o\">}</span> <span class=\"bp\">+</span> <span class=\"n\">natDegree</span> <span class=\"n\">r</span>\n</code></pre></div>\n<p>and I want to transfer it into <code>h2</code>. However, the various spaces in it are expressed in weird and twisted ways.</p>\n<ul>\n<li>The last one is to conclude the result using <code>h1</code> and <code>h2</code>. I suspect there should be an API for it, but I didn't find it yet.</li>\n</ul>\n<p>Any suggestions?</p>",
        "id": 396178939,
        "sender_full_name": "Jz Pan",
        "timestamp": 1697066950
    },
    {
        "content": "<p>OK, finally there is only one <code>sorry</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.FieldTheory.SplittingField.Construction</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.FieldTheory.IsAlgClosed.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.FieldTheory.Separable</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.RingTheory.IntegralDomain</span>\n\n<span class=\"kd\">universe</span> <span class=\"n\">u</span> <span class=\"n\">v</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">scoped</span> <span class=\"n\">Classical</span> <span class=\"n\">Polynomial</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">FiniteDimensional</span> <span class=\"n\">Polynomial</span> <span class=\"n\">IntermediateField</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">E</span><span class=\"o\">]</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"n\">Algebra</span> <span class=\"n\">F</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">FiniteDimensional</span> <span class=\"n\">F</span> <span class=\"n\">E</span><span class=\"o\">]</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">Field.finite_intermediateField_of_exists_primitive_element.aux_1</span>\n    <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hprim</span> <span class=\"o\">:</span> <span class=\"n\">adjoin</span> <span class=\"n\">F</span> <span class=\"n\">S</span> <span class=\"bp\">=</span> <span class=\"bp\">⊤</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"n\">IntermediateField</span> <span class=\"n\">F</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">adjoin</span> <span class=\"n\">K</span> <span class=\"n\">S</span> <span class=\"bp\">=</span> <span class=\"bp\">⊤</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">apply</span> <span class=\"n\">restrictScalars_injective</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"o\">:=</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">L'</span> <span class=\"o\">:=</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"o\">:=</span> <span class=\"n\">E</span><span class=\"o\">)</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">restrictScalars_top</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">top_le_iff</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">hprim</span><span class=\"o\">,</span> <span class=\"n\">adjoin_le_iff</span><span class=\"o\">,</span>\n    <span class=\"n\">coe_restrictScalars</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">adjoin_le_iff</span><span class=\"o\">]</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">Field.finite_intermediateField_of_exists_primitive_element.aux_2</span>\n    <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hprim</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"bp\">⟮</span><span class=\"n\">α</span><span class=\"bp\">⟯</span> <span class=\"bp\">=</span> <span class=\"bp\">⊤</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"n\">K'</span> <span class=\"o\">:</span> <span class=\"n\">IntermediateField</span> <span class=\"n\">F</span> <span class=\"n\">E</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">heq</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">minpoly</span> <span class=\"n\">K</span> <span class=\"n\">α</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"n\">algebraMap</span> <span class=\"n\">K</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">minpoly</span> <span class=\"n\">K'</span> <span class=\"n\">α</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"n\">algebraMap</span> <span class=\"n\">K'</span> <span class=\"n\">E</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n    <span class=\"n\">K</span> <span class=\"bp\">=</span> <span class=\"n\">K</span> <span class=\"bp\">⊓</span> <span class=\"n\">K'</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">set</span> <span class=\"n\">g</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">minpoly</span> <span class=\"n\">K</span> <span class=\"n\">α</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"n\">algebraMap</span> <span class=\"n\">K</span> <span class=\"n\">E</span><span class=\"o\">)</span>\n  <span class=\"n\">set</span> <span class=\"n\">g'</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">minpoly</span> <span class=\"n\">K'</span> <span class=\"n\">α</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"n\">algebraMap</span> <span class=\"n\">K'</span> <span class=\"n\">E</span><span class=\"o\">)</span>\n  <span class=\"n\">set</span> <span class=\"n\">K''</span> <span class=\"o\">:=</span> <span class=\"n\">K</span> <span class=\"bp\">⊓</span> <span class=\"n\">K'</span>\n  <span class=\"k\">have</span> <span class=\"n\">hcoeff</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">g.coeff</span> <span class=\"n\">n</span> <span class=\"bp\">∈</span> <span class=\"n\">K''</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"o\">(</span><span class=\"n\">mem_inf</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:=</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">T</span> <span class=\"o\">:=</span> <span class=\"n\">K'</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"mi\">2</span>\n      <span class=\"o\">⟨</span><span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">coeff_map</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"o\">((</span><span class=\"n\">minpoly</span> <span class=\"n\">K</span> <span class=\"n\">α</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">coeff</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">property</span><span class=\"o\">,</span>\n        <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">heq</span><span class=\"o\">,</span> <span class=\"n\">coeff_map</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"o\">((</span><span class=\"n\">minpoly</span> <span class=\"n\">K'</span> <span class=\"n\">α</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">coeff</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">property</span><span class=\"o\">⟩</span>\n  <span class=\"k\">let</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">Polynomial</span> <span class=\"n\">K''</span> <span class=\"o\">:=</span> <span class=\"n\">Finset.sum</span> <span class=\"n\">g.support</span> <span class=\"k\">fun</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">C</span> <span class=\"o\">⟨</span><span class=\"n\">g.coeff</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">hcoeff</span> <span class=\"n\">n</span><span class=\"o\">⟩</span> <span class=\"bp\">*</span> <span class=\"n\">X</span> <span class=\"bp\">^</span> <span class=\"n\">n</span>\n  <span class=\"k\">have</span> <span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">p.map</span> <span class=\"o\">(</span><span class=\"n\">algebraMap</span> <span class=\"n\">K''</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">sum_C_mul_X_pow_eq</span> <span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"n\">Polynomial.sum_def</span><span class=\"o\">,</span> <span class=\"n\">Polynomial.map_sum</span><span class=\"o\">]</span>\n    <span class=\"n\">congr</span>\n    <span class=\"n\">funext</span> <span class=\"n\">n</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Polynomial.map_mul</span><span class=\"o\">,</span> <span class=\"n\">Polynomial.map_pow</span><span class=\"o\">,</span> <span class=\"n\">Polynomial.map_X</span><span class=\"o\">,</span> <span class=\"n\">Polynomial.map_C</span><span class=\"o\">]</span>\n    <span class=\"n\">congr</span>\n  <span class=\"k\">let</span> <span class=\"n\">q</span> <span class=\"o\">:=</span> <span class=\"n\">minpoly</span> <span class=\"n\">K''</span> <span class=\"n\">α</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"n\">hqdvdp</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"k\">show</span> <span class=\"n\">q</span> <span class=\"bp\">∣</span> <span class=\"n\">p</span> <span class=\"kd\">by</span>\n    <span class=\"n\">apply</span> <span class=\"n\">minpoly.dvd</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">aeval_def</span><span class=\"o\">,</span> <span class=\"n\">eval₂_eq_eval_map</span><span class=\"o\">,</span> <span class=\"n\">hp</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">eval₂_eq_eval_map</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">aeval_def</span><span class=\"o\">]</span>\n    <span class=\"n\">exact</span> <span class=\"n\">minpoly.aeval</span> <span class=\"n\">K</span> <span class=\"n\">α</span>\n  <span class=\"k\">have</span> <span class=\"n\">hpne0</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">apply_fun</span> <span class=\"n\">Polynomial.map</span> <span class=\"o\">(</span><span class=\"n\">algebraMap</span> <span class=\"n\">K''</span> <span class=\"n\">E</span><span class=\"o\">)</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">hp</span><span class=\"o\">,</span> <span class=\"n\">Polynomial.map_zero</span><span class=\"o\">,</span> <span class=\"n\">Polynomial.map_ne_zero_iff</span> <span class=\"bp\">$</span> <span class=\"n\">NoZeroSMulDivisors.algebraMap_injective</span> <span class=\"n\">K</span> <span class=\"n\">E</span><span class=\"o\">]</span>\n    <span class=\"n\">exact</span> <span class=\"n\">minpoly.ne_zero</span> <span class=\"bp\">$</span> <span class=\"n\">isAlgebraic_iff_isIntegral.1</span> <span class=\"bp\">$</span> <span class=\"n\">isAlgebraic_of_finite</span> <span class=\"n\">K</span> <span class=\"n\">α</span>\n  <span class=\"k\">have</span> <span class=\"n\">hqne0</span> <span class=\"o\">:</span> <span class=\"n\">q</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">hqdvdp</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hpne0</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">left_ne_zero_of_mul</span> <span class=\"n\">hpne0</span>\n  <span class=\"k\">have</span> <span class=\"n\">hrne0</span> <span class=\"o\">:</span> <span class=\"n\">r</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">hqdvdp</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hpne0</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">right_ne_zero_of_mul</span> <span class=\"n\">hpne0</span>\n  <span class=\"k\">have</span> <span class=\"n\">hpdeg</span> <span class=\"o\">:=</span> <span class=\"n\">IntermediateField.adjoin.finrank</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"o\">:=</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:=</span> <span class=\"n\">isIntegral_of_finite</span> <span class=\"n\">K</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Field.finite_intermediateField_of_exists_primitive_element.aux_1</span> <span class=\"n\">F</span> <span class=\"n\">E</span> <span class=\"n\">_</span> <span class=\"n\">hprim</span> <span class=\"n\">K</span><span class=\"o\">,</span>\n    <span class=\"bp\">←</span> <span class=\"n\">Polynomial.natDegree_map_eq_of_injective</span> <span class=\"o\">(</span><span class=\"n\">NoZeroSMulDivisors.algebraMap_injective</span> <span class=\"n\">K</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">minpoly</span> <span class=\"n\">K</span> <span class=\"n\">α</span><span class=\"o\">),</span>\n    <span class=\"k\">show</span> <span class=\"o\">(</span><span class=\"n\">minpoly</span> <span class=\"n\">K</span> <span class=\"n\">α</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"n\">algebraMap</span> <span class=\"n\">K</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"kd\">by</span> <span class=\"n\">rfl</span><span class=\"o\">,</span>\n    <span class=\"bp\">←</span> <span class=\"n\">hp</span><span class=\"o\">,</span>\n    <span class=\"n\">Polynomial.natDegree_map_eq_of_injective</span> <span class=\"o\">(</span><span class=\"n\">NoZeroSMulDivisors.algebraMap_injective</span> <span class=\"n\">K''</span> <span class=\"n\">E</span><span class=\"o\">),</span>\n    <span class=\"n\">hqdvdp</span><span class=\"o\">,</span>\n    <span class=\"n\">Polynomial.natDegree_mul</span> <span class=\"n\">hqne0</span> <span class=\"n\">hrne0</span><span class=\"o\">,</span>\n    <span class=\"bp\">←</span> <span class=\"n\">IntermediateField.adjoin.finrank</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"o\">:=</span> <span class=\"n\">K''</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:=</span> <span class=\"n\">isIntegral_of_finite</span> <span class=\"n\">K''</span> <span class=\"n\">α</span><span class=\"o\">),</span>\n    <span class=\"n\">Field.finite_intermediateField_of_exists_primitive_element.aux_1</span> <span class=\"n\">F</span> <span class=\"n\">E</span> <span class=\"n\">_</span> <span class=\"n\">hprim</span> <span class=\"n\">K''</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hpdeg</span>\n  <span class=\"k\">let</span> <span class=\"n\">finrank_K_E</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"bp\">?</span><span class=\"n\">_</span>\n  <span class=\"k\">let</span> <span class=\"n\">finrank_K''_E</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"bp\">?</span><span class=\"n\">_</span>\n  <span class=\"n\">replace</span> <span class=\"n\">hpdeg</span> <span class=\"o\">:</span> <span class=\"n\">finrank_K_E</span> <span class=\"bp\">=</span> <span class=\"n\">finrank_K''_E</span> <span class=\"bp\">+</span> <span class=\"n\">r.natDegree</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">exact</span> <span class=\"n\">hpdeg</span>\n  <span class=\"n\">replace</span> <span class=\"n\">hpdeg</span> <span class=\"o\">:</span> <span class=\"n\">finrank_K_E</span> <span class=\"bp\">≥</span> <span class=\"n\">finrank_K''_E</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">linarith</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">hpdeg</span><span class=\"o\">,</span> <span class=\"n\">Nat.le_add_right</span><span class=\"o\">]</span>\n  <span class=\"k\">have</span> <span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">finrank_K_E</span> <span class=\"bp\">=</span> <span class=\"n\">finrank</span> <span class=\"n\">K</span> <span class=\"n\">E</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"gr\">sorry</span>\n  <span class=\"k\">have</span> <span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">finrank_K''_E</span> <span class=\"bp\">=</span> <span class=\"n\">finrank</span> <span class=\"n\">K''</span> <span class=\"n\">E</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n  <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">eq_of_le_of_finrank_le'</span> <span class=\"n\">inf_le_left</span> <span class=\"bp\">$</span> <span class=\"n\">h1.subst</span> <span class=\"bp\">$</span> <span class=\"n\">h2.subst</span> <span class=\"n\">hpdeg</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span>\n</code></pre></div>",
        "id": 397287332,
        "sender_full_name": "Jz Pan",
        "timestamp": 1697627148
    },
    {
        "content": "<p>I need to use the fact that <code>IhtermediateField.restrictScalars</code> does not change <code>finrank</code>. I can't find it in mathlib yet.</p>\n<p>Besides, I failed to type the value of <code>finrank_K_E</code> by hand, it's shown as <code>finrank { x // x ∈ K } { x // x ∈ ⊤ }</code> in the infoview, I believe that both of the field are <code>IntermediateField K E</code>, but if I type them manually it doesn't typecheck. So I used the trick mentioned in Terry's thread.</p>",
        "id": 397288317,
        "sender_full_name": "Jz Pan",
        "timestamp": 1697627438
    },
    {
        "content": "<p>This is the full infoview before the first <code>sorry</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">F</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span>\n<span class=\"n\">E</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span>\n<span class=\"n\">inst</span><span class=\"bp\">✝³</span><span class=\"o\">:</span> <span class=\"n\">Field</span> <span class=\"n\">F</span>\n<span class=\"n\">inst</span><span class=\"bp\">✝²</span><span class=\"o\">:</span> <span class=\"n\">Field</span> <span class=\"n\">E</span>\n<span class=\"n\">inst</span><span class=\"bp\">✝¹</span><span class=\"o\">:</span> <span class=\"n\">Algebra</span> <span class=\"n\">F</span> <span class=\"n\">E</span>\n<span class=\"n\">inst</span><span class=\"bp\">✝</span><span class=\"o\">:</span> <span class=\"n\">FiniteDimensional</span> <span class=\"n\">F</span> <span class=\"n\">E</span>\n<span class=\"n\">α</span><span class=\"o\">:</span> <span class=\"n\">E</span>\n<span class=\"n\">hprim</span><span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"bp\">⟮</span><span class=\"n\">α</span><span class=\"bp\">⟯</span> <span class=\"bp\">=</span> <span class=\"bp\">⊤</span>\n<span class=\"n\">KK'</span><span class=\"o\">:</span> <span class=\"n\">IntermediateField</span> <span class=\"n\">F</span> <span class=\"n\">E</span>\n<span class=\"n\">g</span><span class=\"o\">:</span> <span class=\"n\">E</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"n\">Polynomial.map</span> <span class=\"o\">(</span><span class=\"n\">algebraMap</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">K</span> <span class=\"o\">}</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">minpoly</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">K</span> <span class=\"o\">}</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n<span class=\"n\">g'</span><span class=\"o\">:</span> <span class=\"n\">E</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"n\">Polynomial.map</span> <span class=\"o\">(</span><span class=\"n\">algebraMap</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">K'</span> <span class=\"o\">}</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">minpoly</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">K'</span> <span class=\"o\">}</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n<span class=\"n\">heq</span><span class=\"o\">:</span> <span class=\"n\">g</span> <span class=\"bp\">=</span> <span class=\"n\">g'</span>\n<span class=\"n\">K''</span><span class=\"o\">:</span> <span class=\"n\">IntermediateField</span> <span class=\"n\">F</span> <span class=\"n\">E</span> <span class=\"o\">:=</span> <span class=\"n\">K</span> <span class=\"bp\">⊓</span> <span class=\"n\">K'</span>\n<span class=\"n\">hcoeff</span><span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">coeff</span> <span class=\"n\">g</span> <span class=\"n\">n</span> <span class=\"bp\">∈</span> <span class=\"n\">K''</span>\n<span class=\"n\">p</span><span class=\"o\">:</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">K''</span> <span class=\"o\">}[</span><span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"n\">Finset.sum</span> <span class=\"o\">(</span><span class=\"n\">support</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"k\">fun</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">↑</span><span class=\"n\">C</span> <span class=\"o\">{</span> <span class=\"n\">val</span> <span class=\"o\">:=</span> <span class=\"n\">coeff</span> <span class=\"n\">g</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">property</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">coeff</span> <span class=\"n\">g</span> <span class=\"n\">n</span> <span class=\"bp\">∈</span> <span class=\"n\">K''</span><span class=\"o\">)</span> <span class=\"o\">}</span> <span class=\"bp\">*</span> <span class=\"n\">X</span> <span class=\"bp\">^</span> <span class=\"n\">n</span>\n<span class=\"n\">hp</span><span class=\"o\">:</span> <span class=\"n\">Polynomial.map</span> <span class=\"o\">(</span><span class=\"n\">algebraMap</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">K''</span> <span class=\"o\">}</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"n\">g</span>\n<span class=\"n\">q</span><span class=\"o\">:</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">K''</span> <span class=\"o\">}[</span><span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"n\">minpoly</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">K''</span> <span class=\"o\">}</span> <span class=\"n\">α</span>\n<span class=\"n\">r</span><span class=\"o\">:</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">K''</span> <span class=\"o\">}[</span><span class=\"n\">X</span><span class=\"o\">]</span>\n<span class=\"n\">hqdvdp</span><span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"n\">q</span> <span class=\"bp\">*</span> <span class=\"n\">r</span>\n<span class=\"n\">hpne0</span><span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span>\n<span class=\"n\">hqne0</span><span class=\"o\">:</span> <span class=\"n\">q</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span>\n<span class=\"n\">hrne0</span><span class=\"o\">:</span> <span class=\"n\">r</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span>\n<span class=\"n\">finrank_K_E</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"n\">finrank</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">K</span> <span class=\"o\">}</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"bp\">⊤</span> <span class=\"o\">}</span>\n<span class=\"n\">finrank_K''_E</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"n\">finrank</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">K''</span> <span class=\"o\">}</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"bp\">⊤</span> <span class=\"o\">}</span>\n<span class=\"n\">hpdeg</span><span class=\"o\">:</span> <span class=\"n\">finrank_K_E</span> <span class=\"bp\">≥</span> <span class=\"n\">finrank_K''_E</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">finrank_K_E</span> <span class=\"bp\">=</span> <span class=\"n\">finrank</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">K</span> <span class=\"o\">}</span> <span class=\"n\">E</span>\n</code></pre></div>\n<p>Do you have any suggestions? Thanks.</p>",
        "id": 397288582,
        "sender_full_name": "Jz Pan",
        "timestamp": 1697627535
    },
    {
        "content": "<p>Maybe this is sort of MWE:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.FieldTheory.SplittingField.Construction</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.FieldTheory.IsAlgClosed.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.FieldTheory.Separable</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.RingTheory.IntegralDomain</span>\n\n<span class=\"kd\">universe</span> <span class=\"n\">u</span> <span class=\"n\">v</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">scoped</span> <span class=\"n\">Classical</span> <span class=\"n\">Polynomial</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">FiniteDimensional</span> <span class=\"n\">Polynomial</span> <span class=\"n\">IntermediateField</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">E</span><span class=\"o\">]</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"n\">Algebra</span> <span class=\"n\">F</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">FiniteDimensional</span> <span class=\"n\">F</span> <span class=\"n\">E</span><span class=\"o\">]</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">test</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"n\">IntermediateField</span> <span class=\"n\">F</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"n\">IntermediateField</span> <span class=\"n\">K</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">True</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">let</span> <span class=\"n\">m</span> <span class=\"o\">:=</span> <span class=\"n\">finrank</span> <span class=\"n\">F</span> <span class=\"n\">K</span> <span class=\"c1\">-- OK</span>\n  <span class=\"k\">let</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"n\">finrank</span> <span class=\"n\">K</span> <span class=\"n\">L</span> <span class=\"c1\">-- does not typecheck</span>\n  <span class=\"c\">/-</span>\n<span class=\"cm\">  failed to synthesize</span>\n<span class=\"cm\">    Module { x // x ∈ K } { x // x ∈ L }</span>\n<span class=\"cm\">  (deterministic) timeout at 'typeclass', maximum number of heartbeats (20000) has been reached (use 'set_option synthInstance.maxHeartbeats &lt;num&gt;' to set the limit)</span>\n<span class=\"cm\">  -/</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>I assume that the <code>finrank { x // x ∈ K } { x // x ∈ ⊤ }</code> is a special case of <code>finrank K L</code>, but it turns out that <code>finrank K L</code> does not typecheck at all. The problem reduced to the very beginning of the thread. :(</p>",
        "id": 397314867,
        "sender_full_name": "Jz Pan",
        "timestamp": 1697636168
    },
    {
        "content": "<p>This is also not working:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"k\">let</span> <span class=\"n\">K₁</span> <span class=\"o\">:</span> <span class=\"bp\">?</span><span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"bp\">?</span><span class=\"n\">_</span>\n  <span class=\"k\">let</span> <span class=\"n\">E₁</span> <span class=\"o\">:</span> <span class=\"bp\">?</span><span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"bp\">?</span><span class=\"n\">_</span>\n  <span class=\"k\">let</span> <span class=\"n\">K''₂</span> <span class=\"o\">:</span> <span class=\"bp\">?</span><span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"bp\">?</span><span class=\"n\">_</span>\n  <span class=\"k\">let</span> <span class=\"n\">E₂</span> <span class=\"o\">:</span> <span class=\"bp\">?</span><span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"bp\">?</span><span class=\"n\">_</span>\n  <span class=\"n\">replace</span> <span class=\"n\">hpdeg</span> <span class=\"o\">:</span> <span class=\"n\">finrank</span> <span class=\"n\">K₁</span> <span class=\"n\">E₁</span> <span class=\"bp\">=</span> <span class=\"n\">finrank</span> <span class=\"n\">K''₂</span> <span class=\"n\">E₂</span> <span class=\"bp\">+</span> <span class=\"n\">r.natDegree</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">exact</span> <span class=\"n\">hpdeg</span>\n\n<span class=\"c\">/-</span>\n<span class=\"cm\">failed to synthesize</span>\n<span class=\"cm\">  Module { x // x ∈ K } { x // x ∈ ⊤ }</span>\n<span class=\"cm\">(deterministic) timeout at 'typeclass', maximum number of heartbeats (20000) has been reached (use 'set_option synthInstance.maxHeartbeats &lt;num&gt;' to set the limit)</span>\n\n<span class=\"cm\">failed to synthesize</span>\n<span class=\"cm\">  Module { x // x ∈ K'' } { x // x ∈ ⊤ }</span>\n<span class=\"cm\">(deterministic) timeout at 'typeclass', maximum number of heartbeats (20000) has been reached (use 'set_option synthInstance.maxHeartbeats &lt;num&gt;' to set the limit)</span>\n\n<span class=\"cm\">application type mismatch</span>\n<span class=\"cm\">  @finrank { x // x ∈ K'' } E₂</span>\n<span class=\"cm\">argument</span>\n<span class=\"cm\">  E₂</span>\n<span class=\"cm\">has type</span>\n<span class=\"cm\">  ?intro.refine_3.refine_3.refine_3.refine_1 : Sort ?u.49665</span>\n<span class=\"cm\">but is expected to have type</span>\n<span class=\"cm\">  Type v : Type (v + 1)</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>",
        "id": 397320334,
        "sender_full_name": "Jz Pan",
        "timestamp": 1697637798
    },
    {
        "content": "<p>This is slightly surprising because at the end of the day you have a completely symmetric situation: you have <code>inst : FiniteDimensional F E</code> and <code>K : IntermediateField F E</code> and then <code>finrank F K</code> works, but you also have <code>inst : FiniteDimensional K E</code> (typeclass inference can find this) and <code>L : IntermediateField K E</code> but <code>finrank K L</code> fails. You say it does not typecheck but this is incorrect really, typeclass inference is timing out as opposed to a typechecking failure.</p>",
        "id": 397325895,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1697639384
    },
    {
        "content": "<p>This works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"k\">let</span> <span class=\"n\">m</span> <span class=\"o\">:=</span> <span class=\"n\">finrank</span> <span class=\"n\">F</span> <span class=\"n\">K</span> <span class=\"c1\">-- OK</span>\n  <span class=\"c1\">-- these are both instances anyway, but it takes too long for lean to find them</span>\n  <span class=\"n\">letI</span> <span class=\"o\">:</span> <span class=\"n\">Algebra</span> <span class=\"n\">K</span> <span class=\"n\">L</span> <span class=\"o\">:=</span> <span class=\"n\">IntermediateField.algebra</span> <span class=\"n\">_</span>\n  <span class=\"n\">letI</span> <span class=\"o\">:</span> <span class=\"n\">Module</span> <span class=\"n\">K</span> <span class=\"n\">L</span> <span class=\"o\">:=</span> <span class=\"n\">Algebra.toModule</span>\n  <span class=\"k\">let</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"n\">finrank</span> <span class=\"n\">K</span> <span class=\"n\">L</span> <span class=\"c1\">-- OK</span>\n</code></pre></div>",
        "id": 397328744,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1697640128
    },
    {
        "content": "<p>This doesn't:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">test</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"n\">IntermediateField</span> <span class=\"n\">F</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"n\">IntermediateField</span> <span class=\"n\">K</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">True</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">let</span> <span class=\"n\">erm</span> <span class=\"o\">:</span> <span class=\"n\">AddCommMonoid</span> <span class=\"n\">L</span> <span class=\"o\">:=</span> <span class=\"n\">inferInstance</span> <span class=\"c1\">-- deterministic timeout</span>\n</code></pre></div>",
        "id": 397328977,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1697640190
    },
    {
        "content": "<p>I am more horrified than amused by this <span aria-label=\"shock\" class=\"emoji emoji-1f628\" role=\"img\" title=\"shock\">:shock:</span></p>",
        "id": 397329112,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1697640235
    },
    {
        "content": "<p>I think we already saw this a bunch when porting for the simpler case of <code>L : Subalgebra R A</code></p>",
        "id": 397329249,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1697640277
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.FieldTheory.IntermediateField</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">E</span><span class=\"o\">]</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"n\">Algebra</span> <span class=\"n\">F</span> <span class=\"n\">E</span><span class=\"o\">]</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">synthInstance.maxHeartbeats</span> <span class=\"mi\">40000</span> <span class=\"k\">in</span> <span class=\"c1\">-- fails without this bump</span>\n<span class=\"kd\">instance</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"n\">IntermediateField</span> <span class=\"n\">F</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"n\">IntermediateField</span> <span class=\"n\">K</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">AddCommMonoid</span> <span class=\"n\">L</span> <span class=\"o\">:=</span> <span class=\"n\">inferInstance</span>\n</code></pre></div>\n<p>We can't even prove that an intermediate field is an AddCommMonoid without bumping heartbeats??</p>",
        "id": 397334477,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1697641899
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"366779\">@Jz Pan</span> can you just stick with everything being <code>IntermediateField F E</code> and have a hypothesis <code>K &lt;= L</code>?</p>",
        "id": 397334649,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1697641952
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>   <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">OrderedCancelAddCommMonoid.toAddCommMonoid</span> <span class=\"n\">to</span> <span class=\"n\">AddCommMonoid</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">L</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>That is such a costly mistake. There are so many ways to prove that something has an order and they're all taking 0.1 or more seconds to fail.</p>",
        "id": 397336136,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1697642431
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/stuck.20with.20IntermediateField.20of.20IntermediateField/near/397334649\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"366779\">Jz Pan</span> can you just stick with everything being <code>IntermediateField F E</code> and have a hypothesis <code>K &lt;= L</code>?</p>\n</blockquote>\n<p>Currently I haven't find a way to do it yet. I think of several methods, bu they eventually they involve <code>IntermediateField</code> of <code>IntermediateField</code>. More specifically, it comes from <code>IntermediateField.adjoin.finrank</code>.</p>",
        "id": 397337148,
        "sender_full_name": "Jz Pan",
        "timestamp": 1697642756
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113489-new-members/topic/stuck.20with.20IntermediateField.20of.20IntermediateField/near/397328744\">said</a>:</p>\n<blockquote>\n<p>This works:</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"k\">let</span> <span class=\"n\">m</span> <span class=\"o\">:=</span> <span class=\"n\">finrank</span> <span class=\"n\">F</span> <span class=\"n\">K</span> <span class=\"c1\">-- OK</span>\n  <span class=\"c1\">-- these are both instances anyway, but it takes too long for lean to find them</span>\n  <span class=\"n\">letI</span> <span class=\"o\">:</span> <span class=\"n\">Algebra</span> <span class=\"n\">K</span> <span class=\"n\">L</span> <span class=\"o\">:=</span> <span class=\"n\">IntermediateField.algebra</span> <span class=\"n\">_</span>\n  <span class=\"n\">letI</span> <span class=\"o\">:</span> <span class=\"n\">Module</span> <span class=\"n\">K</span> <span class=\"n\">L</span> <span class=\"o\">:=</span> <span class=\"n\">Algebra.toModule</span>\n  <span class=\"k\">let</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"n\">finrank</span> <span class=\"n\">K</span> <span class=\"n\">L</span> <span class=\"c1\">-- OK</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>Thanks, it works! At least I can write down a fake result which can be used in <code>rw</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">test</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"n\">IntermediateField</span> <span class=\"n\">F</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"n\">IntermediateField</span> <span class=\"n\">K</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">haveI</span> <span class=\"o\">:</span> <span class=\"n\">Algebra</span> <span class=\"n\">K</span> <span class=\"n\">L</span> <span class=\"o\">:=</span> <span class=\"n\">IntermediateField.algebra</span> <span class=\"n\">_</span>\n    <span class=\"n\">haveI</span> <span class=\"o\">:</span> <span class=\"n\">Module</span> <span class=\"n\">K</span> <span class=\"n\">L</span> <span class=\"o\">:=</span> <span class=\"n\">Algebra.toModule</span>\n    <span class=\"n\">finrank</span> <span class=\"n\">K</span> <span class=\"n\">L</span> <span class=\"bp\">=</span> <span class=\"mi\">42</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n\n<span class=\"c1\">-- ......</span>\n\n  <span class=\"k\">have</span> <span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">finrank_K_E</span> <span class=\"bp\">=</span> <span class=\"mi\">42</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">exact</span> <span class=\"n\">test</span> <span class=\"n\">F</span> <span class=\"n\">E</span> <span class=\"n\">K</span> <span class=\"n\">_</span>\n</code></pre></div>\n<p>Next step is to write down the correct version of the lemma (probably involving <code>IntermediateField.restrictScalars</code>) and then the whole proof is sorry-free.</p>",
        "id": 397337898,
        "sender_full_name": "Jz Pan",
        "timestamp": 1697642968
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/stuck.20with.20IntermediateField.20of.20IntermediateField/near/397334477\">said</a>:</p>\n<blockquote>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.FieldTheory.IntermediateField</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">E</span><span class=\"o\">]</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"n\">Algebra</span> <span class=\"n\">F</span> <span class=\"n\">E</span><span class=\"o\">]</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">synthInstance.maxHeartbeats</span> <span class=\"mi\">40000</span> <span class=\"k\">in</span> <span class=\"c1\">-- fails without this bump</span>\n<span class=\"kd\">instance</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"n\">IntermediateField</span> <span class=\"n\">F</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"n\">IntermediateField</span> <span class=\"n\">K</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">AddCommMonoid</span> <span class=\"n\">L</span> <span class=\"o\">:=</span> <span class=\"n\">inferInstance</span>\n</code></pre></div>\n<p>We can't even prove that an intermediate field is an AddCommMonoid without bumping heartbeats??</p>\n</blockquote>\n<p><a href=\"https://github.com/leanprover/lean4/pull/2478\">lean4#2478</a></p>",
        "id": 397340857,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1697643862
    },
    {
        "content": "<p>OK this is the last lemma I need to prove:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.FieldTheory.SplittingField.Construction</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.FieldTheory.IsAlgClosed.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.FieldTheory.Separable</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.RingTheory.IntegralDomain</span>\n\n<span class=\"kd\">universe</span> <span class=\"n\">u</span> <span class=\"n\">v</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">scoped</span> <span class=\"n\">Classical</span> <span class=\"n\">Polynomial</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">FiniteDimensional</span> <span class=\"n\">Polynomial</span> <span class=\"n\">IntermediateField</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">E</span><span class=\"o\">]</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"n\">Algebra</span> <span class=\"n\">F</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">FiniteDimensional</span> <span class=\"n\">F</span> <span class=\"n\">E</span><span class=\"o\">]</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">test</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"n\">IntermediateField</span> <span class=\"n\">F</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">haveI</span> <span class=\"o\">:</span> <span class=\"n\">Algebra</span> <span class=\"n\">K</span> <span class=\"o\">(</span><span class=\"bp\">⊤</span> <span class=\"o\">:</span> <span class=\"n\">IntermediateField</span> <span class=\"n\">K</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">IntermediateField.algebra</span> <span class=\"n\">_</span>\n    <span class=\"n\">haveI</span> <span class=\"o\">:</span> <span class=\"n\">Module</span> <span class=\"n\">K</span> <span class=\"o\">(</span><span class=\"bp\">⊤</span> <span class=\"o\">:</span> <span class=\"n\">IntermediateField</span> <span class=\"n\">K</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">Algebra.toModule</span>\n    <span class=\"n\">finrank</span> <span class=\"n\">K</span> <span class=\"o\">(</span><span class=\"bp\">⊤</span> <span class=\"o\">:</span> <span class=\"n\">IntermediateField</span> <span class=\"n\">K</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">finrank</span> <span class=\"n\">K</span> <span class=\"n\">E</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>It looks trivial but I'm not familiar with the <code>finrank</code> API yet.<br>\nLet's see if I can find a way to prove it.</p>",
        "id": 397341296,
        "sender_full_name": "Jz Pan",
        "timestamp": 1697644015
    },
    {
        "content": "<p>I would guess <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=LinearEquiv.finrank_eq#doc\">docs#LinearEquiv.finrank_eq</a> is what you need</p>",
        "id": 397341609,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1697644139
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"224323\">Junyan Xu</span> <a href=\"#narrow/stream/113489-new-members/topic/stuck.20with.20IntermediateField.20of.20IntermediateField/near/393756395\">said</a>:</p>\n<blockquote>\n<p>Given how <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Ideal.finite_factors#doc\">docs#Ideal.finite_factors</a> is proved, I suppose we don't have a lemma saying a nonzero element in a UFD has only finitely many factors up to associates. Minpolys are monic so <code>g</code> composed with the map E[X] -&gt; Associates E[X] is still injective. (Update: Oh there is <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=UniqueFactorizationMonoid.fintypeSubtypeDvd#doc\">docs#UniqueFactorizationMonoid.fintypeSubtypeDvd</a> which can be applied there but not here ...)</p>\n</blockquote>\n<p>I think this should be easy to prove.</p>",
        "id": 397470225,
        "sender_full_name": "Jz Pan",
        "timestamp": 1697709405
    },
    {
        "content": "<p>In fact I suspect that in a Noetherian integral domain, any non-zero element has only finitely many factors up to unit (namely, any non-zero principal ideal is contained in finitely many principal ideals); maybe this is related to Krull's principal ideal theorem. I can't find a proof yet, though.</p>",
        "id": 397470479,
        "sender_full_name": "Jz Pan",
        "timestamp": 1697709515
    },
    {
        "content": "<p>These are called finite factorization domains and there are examples of Noetherian IDs which are not finite factorization domains -- for example the subring of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">C</mi><mo stretchy=\"false\">[</mo><mi>X</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">\\mathbb{C}[X]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathbb\">C</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"mclose\">]</span></span></span></span> consisting of polynomials with real constant term is not an FFD because <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>z</mi><mi>X</mi></mrow><annotation encoding=\"application/x-tex\">zX</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.04398em;\">z</span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span></span></span></span> divides <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>X</mi><mn>2</mn></msup></mrow><annotation encoding=\"application/x-tex\">X^2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span></span></span> for all non-zero complex <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>z</mi></mrow><annotation encoding=\"application/x-tex\">z</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.04398em;\">z</span></span></span></span>, but the units are only the non-zero reals.</p>",
        "id": 397485616,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1697715066
    },
    {
        "content": "<p>OK let's stick to UFD then.<br>\nOr is it true for Noetherian integrally closed domain? Your example is not integrally closed.</p>",
        "id": 397486450,
        "sender_full_name": "Jz Pan",
        "timestamp": 1697715369
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113489-new-members/topic/stuck.20with.20IntermediateField.20of.20IntermediateField/near/397341609\">said</a>:</p>\n<blockquote>\n<p>I would guess <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=LinearEquiv.finrank_eq#doc\">docs#LinearEquiv.finrank_eq</a> is what you need</p>\n</blockquote>\n<p>Thanks, I'm trying. Meanwhile I found that I have to use <code>letI</code> instead of <code>haveI</code> otherwise Lean complains that two instances are not equal.</p>",
        "id": 397487136,
        "sender_full_name": "Jz Pan",
        "timestamp": 1697715632
    },
    {
        "content": "<p>I'm almost done (by a naive way) except for a <code>map_smul'</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.FieldTheory.SplittingField.Construction</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.FieldTheory.IsAlgClosed.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.FieldTheory.Separable</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.RingTheory.IntegralDomain</span>\n\n<span class=\"kd\">universe</span> <span class=\"n\">u</span> <span class=\"n\">v</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">scoped</span> <span class=\"n\">Classical</span> <span class=\"n\">Polynomial</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">FiniteDimensional</span> <span class=\"n\">Polynomial</span> <span class=\"n\">IntermediateField</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">E</span><span class=\"o\">]</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"n\">Algebra</span> <span class=\"n\">F</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">FiniteDimensional</span> <span class=\"n\">F</span> <span class=\"n\">E</span><span class=\"o\">]</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">test</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"n\">IntermediateField</span> <span class=\"n\">F</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">letI</span> <span class=\"o\">:</span> <span class=\"n\">Algebra</span> <span class=\"n\">K</span> <span class=\"o\">(</span><span class=\"bp\">⊤</span> <span class=\"o\">:</span> <span class=\"n\">IntermediateField</span> <span class=\"n\">K</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">IntermediateField.algebra</span> <span class=\"n\">_</span>\n    <span class=\"n\">letI</span> <span class=\"o\">:</span> <span class=\"n\">Module</span> <span class=\"n\">K</span> <span class=\"o\">(</span><span class=\"bp\">⊤</span> <span class=\"o\">:</span> <span class=\"n\">IntermediateField</span> <span class=\"n\">K</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">Algebra.toModule</span>\n    <span class=\"n\">finrank</span> <span class=\"n\">K</span> <span class=\"o\">(</span><span class=\"bp\">⊤</span> <span class=\"o\">:</span> <span class=\"n\">IntermediateField</span> <span class=\"n\">K</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">finrank</span> <span class=\"n\">K</span> <span class=\"n\">E</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">letI</span> <span class=\"o\">:</span> <span class=\"n\">Algebra</span> <span class=\"n\">K</span> <span class=\"o\">(</span><span class=\"bp\">⊤</span> <span class=\"o\">:</span> <span class=\"n\">IntermediateField</span> <span class=\"n\">K</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">IntermediateField.algebra</span> <span class=\"n\">_</span>\n  <span class=\"n\">letI</span> <span class=\"o\">:</span> <span class=\"n\">Module</span> <span class=\"n\">K</span> <span class=\"o\">(</span><span class=\"bp\">⊤</span> <span class=\"o\">:</span> <span class=\"n\">IntermediateField</span> <span class=\"n\">K</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">Algebra.toModule</span>\n  <span class=\"n\">apply</span> <span class=\"n\">LinearEquiv.finrank_eq</span>\n  <span class=\"k\">let</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">⊤</span> <span class=\"o\">:</span> <span class=\"n\">IntermediateField</span> <span class=\"n\">K</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">E</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x.1</span>\n  <span class=\"k\">let</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">E</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">⊤</span> <span class=\"o\">:</span> <span class=\"n\">IntermediateField</span> <span class=\"n\">K</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">mem_top</span><span class=\"o\">⟩</span>\n  <span class=\"n\">exact</span> <span class=\"o\">{</span>\n    <span class=\"n\">toFun</span> <span class=\"o\">:=</span> <span class=\"n\">f</span><span class=\"o\">,</span>\n    <span class=\"n\">map_add'</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">top_toSubalgebra</span><span class=\"o\">,</span> <span class=\"n\">Subsemiring.coe_add</span><span class=\"o\">,</span>\n      <span class=\"n\">Algebra.top_toSubsemiring</span><span class=\"o\">,</span> <span class=\"n\">Subsemiring.coe_top</span><span class=\"o\">],</span>\n    <span class=\"n\">map_smul'</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">r</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span>\n      <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">AddHom.toFun</span><span class=\"o\">]</span>\n      <span class=\"n\">simp</span>\n      <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n    <span class=\"n\">invFun</span> <span class=\"o\">:=</span> <span class=\"n\">g</span><span class=\"o\">,</span>\n    <span class=\"n\">left_inv</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"n\">only</span><span class=\"o\">,</span>\n    <span class=\"n\">right_inv</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"n\">only</span><span class=\"o\">,</span>\n  <span class=\"o\">}</span>\n</code></pre></div>\n<p>At the second <code>simp</code> it is said that</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span>\n  <span class=\"n\">SMul</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">K</span> <span class=\"o\">}</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">K</span> <span class=\"o\">}</span>\n<span class=\"o\">(</span><span class=\"n\">deterministic</span><span class=\"o\">)</span> <span class=\"n\">timeout</span> <span class=\"n\">at</span> <span class=\"bp\">'</span><span class=\"n\">typeclass'</span><span class=\"o\">,</span> <span class=\"n\">maximum</span> <span class=\"n\">number</span> <span class=\"n\">of</span> <span class=\"n\">heartbeats</span> <span class=\"o\">(</span><span class=\"mi\">20000</span><span class=\"o\">)</span> <span class=\"n\">has</span> <span class=\"n\">been</span> <span class=\"n\">reached</span> <span class=\"o\">(</span><span class=\"n\">use</span> <span class=\"bp\">'</span><span class=\"kd\">set_option</span> <span class=\"n\">synthInstance.maxHeartbeats</span> <span class=\"bp\">&lt;</span><span class=\"n\">num</span><span class=\"bp\">&gt;'</span> <span class=\"n\">to</span> <span class=\"n\">set</span> <span class=\"n\">the</span> <span class=\"n\">limit</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>I have no idea how to fix it. Perhaps I should use an algebra map from an <code>IntermediateField K E</code> to <code>E</code> provided in mathlib? Are there any?</p>",
        "id": 397494139,
        "sender_full_name": "Jz Pan",
        "timestamp": 1697718215
    },
    {
        "content": "<p>The thing I tried to prove is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">r</span><span class=\"o\">:</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">K</span> <span class=\"o\">}</span>\n<span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"bp\">⊤</span> <span class=\"o\">}</span>\n<span class=\"bp\">⊢</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"bp\">•</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">RingHom.id</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">K</span> <span class=\"o\">})</span> <span class=\"n\">r</span> <span class=\"bp\">•</span> <span class=\"bp\">↑</span><span class=\"n\">x</span>\n</code></pre></div>",
        "id": 397494344,
        "sender_full_name": "Jz Pan",
        "timestamp": 1697718282
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"366779\">Jz Pan</span> <a href=\"#narrow/stream/113489-new-members/topic/stuck.20with.20IntermediateField.20of.20IntermediateField/near/397486450\">said</a>:</p>\n<blockquote>\n<p>OK let's stick to UFD then.<br>\nOr is it true for Noetherian integrally closed domain? Your example is not integrally closed.</p>\n</blockquote>\n<p>Yes, my memory is that integrally closed Noetherian IDs are FFDs but I don't know a proof (it might not be hard, I just don't have time to think right now)</p>",
        "id": 397499599,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1697720130
    },
    {
        "content": "<p>Finally I use this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">Field.finite_intermediateField_of_exists_primitive_element.aux_finrank</span>\n    <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"n\">IntermediateField</span> <span class=\"n\">F</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">letI</span> <span class=\"o\">:</span> <span class=\"n\">Algebra</span> <span class=\"n\">K</span> <span class=\"o\">(</span><span class=\"bp\">⊤</span> <span class=\"o\">:</span> <span class=\"n\">IntermediateField</span> <span class=\"n\">K</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">IntermediateField.algebra</span> <span class=\"n\">_</span>\n    <span class=\"n\">letI</span> <span class=\"o\">:</span> <span class=\"n\">Module</span> <span class=\"n\">K</span> <span class=\"o\">(</span><span class=\"bp\">⊤</span> <span class=\"o\">:</span> <span class=\"n\">IntermediateField</span> <span class=\"n\">K</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">Algebra.toModule</span>\n    <span class=\"n\">finrank</span> <span class=\"n\">K</span> <span class=\"o\">(</span><span class=\"bp\">⊤</span> <span class=\"o\">:</span> <span class=\"n\">IntermediateField</span> <span class=\"n\">K</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">finrank</span> <span class=\"n\">K</span> <span class=\"n\">E</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">letI</span> <span class=\"o\">:</span> <span class=\"n\">Algebra</span> <span class=\"n\">K</span> <span class=\"o\">(</span><span class=\"bp\">⊤</span> <span class=\"o\">:</span> <span class=\"n\">IntermediateField</span> <span class=\"n\">K</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">IntermediateField.algebra</span> <span class=\"n\">_</span>\n  <span class=\"n\">letI</span> <span class=\"o\">:</span> <span class=\"n\">Module</span> <span class=\"n\">K</span> <span class=\"o\">(</span><span class=\"bp\">⊤</span> <span class=\"o\">:</span> <span class=\"n\">IntermediateField</span> <span class=\"n\">K</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">Algebra.toModule</span>\n  <span class=\"n\">apply</span> <span class=\"n\">LinearEquiv.finrank_eq</span>\n  <span class=\"n\">exact</span> <span class=\"o\">{</span>\n    <span class=\"n\">toFun</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x.1</span><span class=\"o\">,</span>\n    <span class=\"n\">map_add'</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">IntermediateField.coe_add</span><span class=\"o\">],</span>\n    <span class=\"n\">map_smul'</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">r</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span>\n      <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">AddHom.toFun</span><span class=\"o\">,</span> <span class=\"n\">RingHom.id_apply</span><span class=\"o\">]</span>\n      <span class=\"n\">letI</span> <span class=\"o\">:</span> <span class=\"n\">SMul</span> <span class=\"n\">K</span> <span class=\"n\">K</span> <span class=\"o\">:=</span> <span class=\"n\">Algebra.toSMul</span> <span class=\"o\">(</span><span class=\"n\">self</span> <span class=\"o\">:=</span> <span class=\"n\">Algebra.id</span> <span class=\"n\">K</span><span class=\"o\">)</span>\n      <span class=\"n\">letI</span> <span class=\"o\">:</span> <span class=\"n\">IsScalarTower</span> <span class=\"n\">K</span> <span class=\"n\">K</span> <span class=\"n\">E</span> <span class=\"o\">:=</span> <span class=\"n\">IsScalarTower.left</span> <span class=\"n\">K</span>\n      <span class=\"n\">exact</span> <span class=\"n\">IntermediateField.coe_smul</span> <span class=\"o\">(</span><span class=\"bp\">⊤</span> <span class=\"o\">:</span> <span class=\"n\">IntermediateField</span> <span class=\"n\">K</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"n\">r</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n    <span class=\"n\">invFun</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">mem_top</span><span class=\"o\">⟩,</span>\n    <span class=\"n\">left_inv</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"n\">only</span><span class=\"o\">,</span>\n    <span class=\"n\">right_inv</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"n\">only</span><span class=\"o\">,</span>\n  <span class=\"o\">}</span>\n</code></pre></div>\n<p>and the whole proof is sorry-free.</p>",
        "id": 397600607,
        "sender_full_name": "Jz Pan",
        "timestamp": 1697763713
    },
    {
        "content": "<p>As for the finiteness of the monic factors, I use this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.FieldTheory.SplittingField.Construction</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.FieldTheory.IsAlgClosed.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.FieldTheory.Separable</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.RingTheory.IntegralDomain</span>\n\n<span class=\"kd\">universe</span> <span class=\"n\">u</span> <span class=\"n\">v</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">scoped</span> <span class=\"n\">Classical</span> <span class=\"n\">Polynomial</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">FiniteDimensional</span> <span class=\"n\">Polynomial</span> <span class=\"n\">IntermediateField</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">E</span><span class=\"o\">]</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"n\">Algebra</span> <span class=\"n\">F</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">FiniteDimensional</span> <span class=\"n\">F</span> <span class=\"n\">E</span><span class=\"o\">]</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">Field.finite_intermediateField_of_exists_primitive_element.aux_fin</span>\n    <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Polynomial</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">Finite</span> <span class=\"o\">{</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">Polynomial</span> <span class=\"n\">E</span> <span class=\"bp\">//</span> <span class=\"n\">g.Monic</span> <span class=\"bp\">∧</span> <span class=\"n\">g</span> <span class=\"bp\">∣</span> <span class=\"n\">f</span> <span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">set</span> <span class=\"n\">G</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">Polynomial</span> <span class=\"n\">E</span> <span class=\"bp\">//</span> <span class=\"n\">g.Monic</span> <span class=\"bp\">∧</span> <span class=\"n\">g</span> <span class=\"bp\">∣</span> <span class=\"n\">f</span> <span class=\"o\">}</span>\n  <span class=\"k\">let</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Associates</span> <span class=\"bp\">$</span> <span class=\"n\">Polynomial</span> <span class=\"n\">E</span> <span class=\"o\">:=</span> <span class=\"n\">Associates.mk</span> <span class=\"n\">f</span>\n  <span class=\"k\">have</span> <span class=\"n\">hy</span> <span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">Associates.mk_ne_zero.mpr</span> <span class=\"n\">h</span>\n  <span class=\"k\">let</span> <span class=\"n\">H</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Associates</span> <span class=\"bp\">$</span> <span class=\"n\">Polynomial</span> <span class=\"n\">E</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"bp\">∣</span> <span class=\"n\">y</span> <span class=\"o\">}</span>\n  <span class=\"k\">have</span> <span class=\"n\">hfin</span> <span class=\"o\">:</span> <span class=\"n\">Finite</span> <span class=\"n\">H</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">Finite.of_fintype</span> <span class=\"n\">_</span> <span class=\"bp\">$</span> <span class=\"n\">UniqueFactorizationMonoid.fintypeSubtypeDvd</span> <span class=\"n\">y</span> <span class=\"n\">hy</span>\n  <span class=\"k\">let</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">G</span> <span class=\"bp\">→</span> <span class=\"n\">H</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">⟨</span><span class=\"n\">Associates.mk</span> <span class=\"n\">x.1</span><span class=\"o\">,</span> <span class=\"n\">Associates.mk_dvd_mk.2</span> <span class=\"n\">x.2.2</span><span class=\"o\">⟩</span>\n  <span class=\"k\">have</span> <span class=\"n\">hinj</span> <span class=\"o\">:</span> <span class=\"n\">Function.Injective</span> <span class=\"n\">i</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">heq</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Subtype.mk.injEq</span><span class=\"o\">,</span> <span class=\"n\">Associates.mk_eq_mk_iff_associated</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">heq</span>\n    <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">z</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">heq</span>\n    <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">h2</span><span class=\"o\">⟩⟩</span> <span class=\"o\">:=</span> <span class=\"n\">Polynomial.isUnit_iff.1</span> <span class=\"o\">(</span><span class=\"n\">Units.isUnit</span> <span class=\"n\">z</span><span class=\"o\">)</span>\n    <span class=\"k\">have</span> <span class=\"n\">h'</span> <span class=\"o\">:=</span> <span class=\"n\">congr_arg</span> <span class=\"n\">Polynomial.leadingCoeff</span> <span class=\"n\">h</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mul_comm</span><span class=\"o\">,</span> <span class=\"n\">Polynomial.leadingCoeff_mul_monic</span> <span class=\"n\">x.2.1</span><span class=\"o\">,</span> <span class=\"n\">y.2.1</span><span class=\"o\">,</span>\n      <span class=\"bp\">←</span> <span class=\"n\">h2</span><span class=\"o\">,</span> <span class=\"n\">Polynomial.leadingCoeff_C</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h'</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">h2</span><span class=\"o\">,</span> <span class=\"n\">h'</span><span class=\"o\">,</span> <span class=\"n\">map_one</span><span class=\"o\">,</span> <span class=\"n\">mul_one</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n    <span class=\"n\">rwa</span> <span class=\"o\">[</span><span class=\"n\">Subtype.mk.injEq</span><span class=\"o\">]</span>\n  <span class=\"n\">exact</span> <span class=\"n\">Finite.of_injective</span> <span class=\"n\">i</span> <span class=\"n\">hinj</span>\n</code></pre></div>",
        "id": 397600893,
        "sender_full_name": "Jz Pan",
        "timestamp": 1697763845
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"366779\">Jz Pan</span> <a href=\"#narrow/stream/113489-new-members/topic/stuck.20with.20IntermediateField.20of.20IntermediateField/near/397600607\">said</a>:</p>\n<blockquote>\n<p>Finally I use this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">Field.finite_intermediateField_of_exists_primitive_element.aux_finrank</span>\n    <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"n\">IntermediateField</span> <span class=\"n\">F</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">letI</span> <span class=\"o\">:</span> <span class=\"n\">Algebra</span> <span class=\"n\">K</span> <span class=\"o\">(</span><span class=\"bp\">⊤</span> <span class=\"o\">:</span> <span class=\"n\">IntermediateField</span> <span class=\"n\">K</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">IntermediateField.algebra</span> <span class=\"n\">_</span>\n    <span class=\"n\">letI</span> <span class=\"o\">:</span> <span class=\"n\">Module</span> <span class=\"n\">K</span> <span class=\"o\">(</span><span class=\"bp\">⊤</span> <span class=\"o\">:</span> <span class=\"n\">IntermediateField</span> <span class=\"n\">K</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">Algebra.toModule</span>\n    <span class=\"n\">finrank</span> <span class=\"n\">K</span> <span class=\"o\">(</span><span class=\"bp\">⊤</span> <span class=\"o\">:</span> <span class=\"n\">IntermediateField</span> <span class=\"n\">K</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">finrank</span> <span class=\"n\">K</span> <span class=\"n\">E</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">letI</span> <span class=\"o\">:</span> <span class=\"n\">Algebra</span> <span class=\"n\">K</span> <span class=\"o\">(</span><span class=\"bp\">⊤</span> <span class=\"o\">:</span> <span class=\"n\">IntermediateField</span> <span class=\"n\">K</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">IntermediateField.algebra</span> <span class=\"n\">_</span>\n  <span class=\"n\">letI</span> <span class=\"o\">:</span> <span class=\"n\">Module</span> <span class=\"n\">K</span> <span class=\"o\">(</span><span class=\"bp\">⊤</span> <span class=\"o\">:</span> <span class=\"n\">IntermediateField</span> <span class=\"n\">K</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">Algebra.toModule</span>\n  <span class=\"n\">apply</span> <span class=\"n\">LinearEquiv.finrank_eq</span>\n  <span class=\"n\">exact</span> <span class=\"o\">{</span>\n    <span class=\"n\">toFun</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x.1</span><span class=\"o\">,</span>\n    <span class=\"n\">map_add'</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">IntermediateField.coe_add</span><span class=\"o\">],</span>\n    <span class=\"n\">map_smul'</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">r</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span>\n      <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">AddHom.toFun</span><span class=\"o\">,</span> <span class=\"n\">RingHom.id_apply</span><span class=\"o\">]</span>\n      <span class=\"n\">letI</span> <span class=\"o\">:</span> <span class=\"n\">SMul</span> <span class=\"n\">K</span> <span class=\"n\">K</span> <span class=\"o\">:=</span> <span class=\"n\">Algebra.toSMul</span> <span class=\"o\">(</span><span class=\"n\">self</span> <span class=\"o\">:=</span> <span class=\"n\">Algebra.id</span> <span class=\"n\">K</span><span class=\"o\">)</span>\n      <span class=\"n\">letI</span> <span class=\"o\">:</span> <span class=\"n\">IsScalarTower</span> <span class=\"n\">K</span> <span class=\"n\">K</span> <span class=\"n\">E</span> <span class=\"o\">:=</span> <span class=\"n\">IsScalarTower.left</span> <span class=\"n\">K</span>\n      <span class=\"n\">exact</span> <span class=\"n\">IntermediateField.coe_smul</span> <span class=\"o\">(</span><span class=\"bp\">⊤</span> <span class=\"o\">:</span> <span class=\"n\">IntermediateField</span> <span class=\"n\">K</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"n\">r</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n    <span class=\"n\">invFun</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">mem_top</span><span class=\"o\">⟩,</span>\n    <span class=\"n\">left_inv</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"n\">only</span><span class=\"o\">,</span>\n    <span class=\"n\">right_inv</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"n\">only</span><span class=\"o\">,</span>\n  <span class=\"o\">}</span>\n</code></pre></div>\n<p>and the whole proof is sorry-free.</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"644391\">@loogle</span> (<a href=\"http://Top.top\">Top.top</a> : IntermediateField _ _)</p>",
        "id": 397653628,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1697789179
    },
    {
        "content": "<p>Failure! Bot is unavailable</p>",
        "id": 397653667,
        "sender_full_name": "loogle",
        "timestamp": 1697789201
    },
    {
        "content": "<p>OK, <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=IntermediateField.topEquiv#doc\">docs#IntermediateField.topEquiv</a> saves you from having to write all that</p>",
        "id": 397653942,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1697789293
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"644391\">loogle</span> <a href=\"#narrow/stream/113489-new-members/topic/stuck.20with.20IntermediateField.20of.20IntermediateField/near/397653667\">said</a>:</p>\n<blockquote>\n<p>Failure! Bot is unavailable</p>\n</blockquote>\n<p>But you asked for Top...?</p>",
        "id": 397661688,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1697791696
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"644391\">@loogle</span> finrank, <a href=\"http://Top.top\">Top.top</a></p>",
        "id": 397661851,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1697791743
    },
    {
        "content": "<p><span aria-label=\"exclamation\" class=\"emoji emoji-2757\" role=\"img\" title=\"exclamation\">:exclamation:</span> unknown identifier 'finrank'<br>\nDid you mean <a href=\"https://loogle.lean-lang.org/?q=FiniteDimensional.finrank%2C%20Top.top\">FiniteDimensional.finrank, Top.top</a> or <a href=\"https://loogle.lean-lang.org/?q=finrank%2C%20Top.top\">something else</a>?</p>",
        "id": 397661855,
        "sender_full_name": "loogle",
        "timestamp": 1697791744
    },
    {
        "content": "<p><code>exact finrank_top</code> should work too</p>",
        "id": 397661915,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1697791770
    },
    {
        "content": "<p>Thank you very much. Both of them works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.FieldTheory.SplittingField.Construction</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.FieldTheory.IsAlgClosed.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.FieldTheory.Separable</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.RingTheory.IntegralDomain</span>\n\n<span class=\"kd\">universe</span> <span class=\"n\">u</span> <span class=\"n\">v</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">scoped</span> <span class=\"n\">Classical</span> <span class=\"n\">Polynomial</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">FiniteDimensional</span> <span class=\"n\">Polynomial</span> <span class=\"n\">IntermediateField</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">E</span><span class=\"o\">]</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"n\">Algebra</span> <span class=\"n\">F</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">FiniteDimensional</span> <span class=\"n\">F</span> <span class=\"n\">E</span><span class=\"o\">]</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">Field.finite_intermediateField_of_exists_primitive_element.aux_finrank</span>\n    <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"n\">IntermediateField</span> <span class=\"n\">F</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">letI</span> <span class=\"o\">:</span> <span class=\"n\">Algebra</span> <span class=\"n\">K</span> <span class=\"o\">(</span><span class=\"bp\">⊤</span> <span class=\"o\">:</span> <span class=\"n\">IntermediateField</span> <span class=\"n\">K</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">IntermediateField.algebra</span> <span class=\"n\">_</span>\n    <span class=\"n\">letI</span> <span class=\"o\">:</span> <span class=\"n\">Module</span> <span class=\"n\">K</span> <span class=\"o\">(</span><span class=\"bp\">⊤</span> <span class=\"o\">:</span> <span class=\"n\">IntermediateField</span> <span class=\"n\">K</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">Algebra.toModule</span>\n    <span class=\"n\">finrank</span> <span class=\"n\">K</span> <span class=\"o\">(</span><span class=\"bp\">⊤</span> <span class=\"o\">:</span> <span class=\"n\">IntermediateField</span> <span class=\"n\">K</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">finrank</span> <span class=\"n\">K</span> <span class=\"n\">E</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">letI</span> <span class=\"o\">:</span> <span class=\"n\">Algebra</span> <span class=\"n\">K</span> <span class=\"o\">(</span><span class=\"bp\">⊤</span> <span class=\"o\">:</span> <span class=\"n\">IntermediateField</span> <span class=\"n\">K</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">IntermediateField.algebra</span> <span class=\"n\">_</span>\n  <span class=\"n\">letI</span> <span class=\"o\">:</span> <span class=\"n\">Module</span> <span class=\"n\">K</span> <span class=\"o\">(</span><span class=\"bp\">⊤</span> <span class=\"o\">:</span> <span class=\"n\">IntermediateField</span> <span class=\"n\">K</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">Algebra.toModule</span>\n  <span class=\"n\">exact</span> <span class=\"n\">finrank_top</span> <span class=\"n\">K</span> <span class=\"n\">E</span>\n  <span class=\"c1\">-- exact LinearEquiv.finrank_eq $ (IntermediateField.topEquiv (F := K) (E := E)).toLinearEquiv</span>\n</code></pre></div>\n<p>Interestingly, I remembered that I have tried <code>finrank_top</code> before, but it didn't work at that time.</p>",
        "id": 397727654,
        "sender_full_name": "Jz Pan",
        "timestamp": 1697813743
    },
    {
        "content": "<p>I'm stuck again :(</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.FieldTheory.SplittingField.Construction</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.FieldTheory.IsAlgClosed.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.FieldTheory.Separable</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.RingTheory.IntegralDomain</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">scoped</span> <span class=\"n\">Classical</span> <span class=\"n\">Polynomial</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">FiniteDimensional</span> <span class=\"n\">Polynomial</span> <span class=\"n\">IntermediateField</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">E</span><span class=\"o\">]</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"n\">Algebra</span> <span class=\"n\">F</span> <span class=\"n\">E</span><span class=\"o\">]</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">Field</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">halg</span> <span class=\"o\">:</span> <span class=\"n\">Algebra.IsAlgebraic</span> <span class=\"n\">F</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Finite</span> <span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n    <span class=\"n\">FiniteDimensional</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"n\">adjoin</span> <span class=\"n\">F</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">let</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">S</span> <span class=\"bp\">→</span> <span class=\"n\">IntermediateField</span> <span class=\"n\">F</span> <span class=\"n\">E</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">↦</span> <span class=\"n\">F</span><span class=\"bp\">⟮</span><span class=\"n\">x.1</span><span class=\"bp\">⟯</span>\n  <span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"n\">FiniteDimensional</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">↦</span>\n    <span class=\"n\">adjoin.finiteDimensional</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">isAlgebraic_iff_isIntegral.1</span> <span class=\"o\">(</span><span class=\"n\">halg</span> <span class=\"n\">x.1</span><span class=\"o\">)</span>\n  <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">finiteDimensional_iSup_of_finite</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:=</span> <span class=\"n\">t</span><span class=\"o\">)</span>\n  <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">adjoin</span> <span class=\"n\">F</span> <span class=\"n\">S</span> <span class=\"bp\">⊔</span> <span class=\"n\">adjoin</span> <span class=\"n\">F</span> <span class=\"n\">T</span> <span class=\"bp\">=</span> <span class=\"n\">adjoin</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"bp\">∪</span> <span class=\"n\">T</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">Field</span>\n</code></pre></div>\n<p>I need <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>F</mi><mo stretchy=\"false\">(</mo><mi>S</mi><mo stretchy=\"false\">)</mo><mo>=</mo><msub><mo>∏</mo><mrow><mi>x</mi><mo>∈</mo><mi>S</mi></mrow></msub><mi>F</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\"> F(S)=\\prod_{x\\in S}F(x) </annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.0771em;vertical-align:-0.3271em;\"></span><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:0em;\">∏</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1786em;\"><span style=\"top:-2.4003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">x</span><span class=\"mrel mtight\">∈</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.05764em;\">S</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3271em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span></span></span></span> but I can't find it in mathlib. In fact I even can't find <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>F</mi><mo stretchy=\"false\">(</mo><mi>S</mi><mo stretchy=\"false\">)</mo><mi>F</mi><mo stretchy=\"false\">(</mo><mi>T</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mi>F</mi><mo stretchy=\"false\">(</mo><mi>S</mi><mo>∪</mo><mi>T</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\"> F(S)F(T)=F(S\\cup T) </annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mclose\">)</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">∪</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mclose\">)</span></span></span></span>.</p>",
        "id": 397979713,
        "sender_full_name": "Jz Pan",
        "timestamp": 1698017843
    },
    {
        "content": "<p>Yeah, the second sorry is apparently missing but should be easy from antisymmetry. The first example shouldn't be hard from <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Set.Finite.induction_on#doc\">docs#Set.Finite.induction_on</a> and <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=IntermediateField.finiteDimensional_sup#doc\">docs#IntermediateField.finiteDimensional_sup</a>.</p>",
        "id": 398005112,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1698033207
    },
    {
        "content": "<p>This also follows from <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=IntermediateField.gc#doc\">docs#IntermediateField.gc</a></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">adjoin</span> <span class=\"n\">F</span> <span class=\"n\">S</span> <span class=\"bp\">⊔</span> <span class=\"n\">adjoin</span> <span class=\"n\">F</span> <span class=\"n\">T</span> <span class=\"bp\">=</span> <span class=\"n\">adjoin</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"bp\">∪</span> <span class=\"n\">T</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">gc.l_sup.symm</span>\n</code></pre></div>",
        "id": 398005657,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1698033420
    },
    {
        "content": "<p>Thanks. It's weird that <code>exact?</code> doesn't work for the second example. So probably I can also use <code>gc.l_iSup</code> for the first example.</p>",
        "id": 398124178,
        "sender_full_name": "Jz Pan",
        "timestamp": 1698079994
    },
    {
        "content": "<p>OK this works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.FieldTheory.SplittingField.Construction</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.FieldTheory.IsAlgClosed.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.FieldTheory.Separable</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.RingTheory.IntegralDomain</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">scoped</span> <span class=\"n\">Classical</span> <span class=\"n\">Polynomial</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">FiniteDimensional</span> <span class=\"n\">Polynomial</span> <span class=\"n\">IntermediateField</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">E</span><span class=\"o\">]</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"n\">Algebra</span> <span class=\"n\">F</span> <span class=\"n\">E</span><span class=\"o\">]</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">Field</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">halg</span> <span class=\"o\">:</span> <span class=\"n\">Algebra.IsAlgebraic</span> <span class=\"n\">F</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Finite</span> <span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n    <span class=\"n\">FiniteDimensional</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"n\">adjoin</span> <span class=\"n\">F</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">let</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">S</span> <span class=\"bp\">→</span> <span class=\"n\">IntermediateField</span> <span class=\"n\">F</span> <span class=\"n\">E</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">↦</span> <span class=\"n\">F</span><span class=\"bp\">⟮</span><span class=\"n\">x.1</span><span class=\"bp\">⟯</span>\n  <span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"n\">FiniteDimensional</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">↦</span>\n    <span class=\"n\">adjoin.finiteDimensional</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">isAlgebraic_iff_isIntegral.1</span> <span class=\"o\">(</span><span class=\"n\">halg</span> <span class=\"n\">x.1</span><span class=\"o\">)</span>\n  <span class=\"k\">have</span> <span class=\"n\">hfin</span> <span class=\"o\">:=</span> <span class=\"n\">finiteDimensional_iSup_of_finite</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:=</span> <span class=\"n\">t</span><span class=\"o\">)</span>\n  <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">gc</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:=</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">E</span> <span class=\"o\">:=</span> <span class=\"n\">E</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">l_iSup</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"bp\">↦</span> <span class=\"o\">{</span><span class=\"n\">x.1</span><span class=\"o\">})</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">Set.iSup_eq_iUnion</span><span class=\"o\">,</span> <span class=\"n\">Set.iUnion_singleton_eq_range</span><span class=\"o\">,</span> <span class=\"n\">Subtype.range_coe_subtype</span><span class=\"o\">,</span>\n    <span class=\"n\">Set.setOf_mem_eq</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">this</span>\n  <span class=\"n\">rwa</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">this</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hfin</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">adjoin</span> <span class=\"n\">F</span> <span class=\"n\">S</span> <span class=\"bp\">⊔</span> <span class=\"n\">adjoin</span> <span class=\"n\">F</span> <span class=\"n\">T</span> <span class=\"bp\">=</span> <span class=\"n\">adjoin</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"bp\">∪</span> <span class=\"n\">T</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">exact</span> <span class=\"n\">gc.l_sup.symm</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">Field</span>\n</code></pre></div>",
        "id": 398165858,
        "sender_full_name": "Jz Pan",
        "timestamp": 1698100871
    }
]