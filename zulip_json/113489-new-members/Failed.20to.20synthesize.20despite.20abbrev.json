[
    {
        "content": "<p>What is the reason the second <code>#synth</code> fails below? I expected abbrev to solve this typeclass issue.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.LinearAlgebra.Basic</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">F</span><span class=\"o\">]</span>\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n\n<span class=\"bp\">#</span><span class=\"n\">synth</span> <span class=\"n\">AddCommMonoid</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"c1\">-- ok</span>\n\n<span class=\"n\">abbrev</span> <span class=\"n\">Vec</span> <span class=\"o\">:=</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">F</span>\n\n<span class=\"bp\">#</span><span class=\"n\">synth</span> <span class=\"n\">AddCommMonoid</span> <span class=\"o\">(</span><span class=\"n\">Vec</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"c1\">-- failed to synthesize</span>\n</code></pre></div>",
        "id": 405217298,
        "sender_full_name": "Francisco Giordano",
        "timestamp": 1701382492
    },
    {
        "content": "<p>Lean doesn't know what <code>F</code> you want to use</p>",
        "id": 405223423,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1701385281
    },
    {
        "content": "<p><code>#synth AddCommMonoid (Vec (F := F) n)</code> works</p>",
        "id": 405223427,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1701385283
    }
]