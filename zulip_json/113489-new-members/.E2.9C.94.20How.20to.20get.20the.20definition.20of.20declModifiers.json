[
    {
        "content": "<p>Hi, I am studying some code in Std lib. I wonder what dose the <code>@[specialize]</code> here mean but can not find the definition. How can I learn about these things?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[</span><span class=\"n\">specialize</span><span class=\"kd\">]</span> <span class=\"kd\">def</span> <span class=\"n\">fold</span> <span class=\"o\">(</span><span class=\"n\">v₀</span> <span class=\"o\">:</span> <span class=\"n\">σ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">σ</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">σ</span> <span class=\"bp\">→</span> <span class=\"n\">σ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">RBNode</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">σ</span>\n  <span class=\"bp\">|</span> <span class=\"n\">nil</span>          <span class=\"bp\">=&gt;</span> <span class=\"n\">v₀</span>\n  <span class=\"bp\">|</span> <span class=\"n\">node</span> <span class=\"n\">_</span> <span class=\"n\">l</span> <span class=\"n\">v</span> <span class=\"n\">r</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">l.fold</span> <span class=\"n\">v₀</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"n\">v</span> <span class=\"o\">(</span><span class=\"n\">r.fold</span> <span class=\"n\">v₀</span> <span class=\"n\">f</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 398777635,
        "sender_full_name": "ZHAO Jiecheng",
        "timestamp": 1698359946
    },
    {
        "content": "<p>Specialize is used when a function is compiled for use with <code>#eval</code> or as part of a generated binary. It tells the compiler to compile a new version of the function fold for each function <code>f</code> that it is called with, so that that specific <code>f</code> is fixed and potentially optimizations can be made, compared to passing <code>f</code> around as a function, this is quite often a good idea for higher order arguments. Normally this happens by default for typeclass arguments, but not in this case, hence the attribute to tell the compiler it is a good idea in this case</p>",
        "id": 398778023,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1698360214
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"127136\">Alex J. Best</span> <a href=\"#narrow/stream/113489-new-members/topic/How.20to.20get.20the.20definition.20of.20declModifiers/near/398778023\">said</a>:</p>\n<blockquote>\n<p>Specialize is used when a function is compiled for use with <code>#eval</code> or as part of a generated binary. It tells the compiler to compile a new version of the function fold for each function <code>f</code> that it is called with, so that that specific <code>f</code> is fixed and potentially optimizations can be made, compared to passing <code>f</code> around as a function, this is quite often a good idea for higher order arguments. Normally this happens by default for typeclass arguments, but not in this case, hence the attribute to tell the compiler it is a good idea in this case</p>\n</blockquote>\n<p>Thank you. Another question is  \"How can I learn about these things?\". Just go to Zulip and ask question one by one? <span aria-label=\"rolling on the floor laughing\" class=\"emoji emoji-1f923\" role=\"img\" title=\"rolling on the floor laughing\">:rolling_on_the_floor_laughing:</span></p>",
        "id": 398778329,
        "sender_full_name": "ZHAO Jiecheng",
        "timestamp": 1698360411
    },
    {
        "content": "<p>Oh, I noticed that for other modifier, hovering on it will give some description in VSCode. Why <code>specialize</code> is special?</p>",
        "id": 398778669,
        "sender_full_name": "ZHAO Jiecheng",
        "timestamp": 1698360613
    },
    {
        "content": "<p>Others are also accessible via jumping to definition by F12.</p>",
        "id": 398778806,
        "sender_full_name": "ZHAO Jiecheng",
        "timestamp": 1698360716
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"250110\">ZHAO Jiecheng</span> <a href=\"#narrow/stream/113489-new-members/topic/How.20to.20get.20the.20definition.20of.20declModifiers/near/398778329\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"127136\">Alex J. Best</span> <a href=\"#narrow/stream/113489-new-members/topic/How.20to.20get.20the.20definition.20of.20declModifiers/near/398778023\">said</a>:</p>\n<blockquote>\n<p>Specialize is used when a function is compiled for use with <code>#eval</code> or as part of a generated binary. It tells the compiler to compile a new version of the function fold for each function <code>f</code> that it is called with, so that that specific <code>f</code> is fixed and potentially optimizations can be made, compared to passing <code>f</code> around as a function, this is quite often a good idea for higher order arguments. Normally this happens by default for typeclass arguments, but not in this case, hence the attribute to tell the compiler it is a good idea in this case</p>\n</blockquote>\n<p>Thank you. Another question is  \"How can I learn about these things?\". Just go to Zulip and ask question one by one? <span aria-label=\"rolling on the floor laughing\" class=\"emoji emoji-1f923\" role=\"img\" title=\"rolling on the floor laughing\">:rolling_on_the_floor_laughing:</span></p>\n</blockquote>\n<p>Unfortunately not everything in core is very well documented yet, so somethings have nice docs / description and others do not. I think this will slowly improve over time, but for now some things like specialize here might be the best place to find out.</p>",
        "id": 398780140,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1698361426
    },
    {
        "content": "<p>Most things should have jump to definition, sometimes you have to make sure you explicitly <code>import Lean</code> at the top for that to be available though</p>",
        "id": 398780240,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1698361463
    },
    {
        "content": "<p>Specialization is the same process used in the haskell compiler, so maybe <a href=\"https://wiki.haskell.org/Inlining_and_Specialisation#What_is_specialisation.3F\">https://wiki.haskell.org/Inlining_and_Specialisation#What_is_specialisation.3F</a> would be a useful thing to read. And there is a slight hint to go looking in haskell-land in <a href=\"https://pp.ipd.kit.edu/uploads/publikationen/demoura21lean4.pdf\">https://pp.ipd.kit.edu/uploads/publikationen/demoura21lean4.pdf</a> , section 3</p>",
        "id": 398780681,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1698361755
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"250110\">ZHAO Jiecheng</span> has marked this topic as resolved.</p>",
        "id": 398788393,
        "sender_full_name": "Notification Bot",
        "timestamp": 1698366505
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"127136\">Alex J. Best</span> <a href=\"#narrow/stream/113489-new-members/topic/.E2.9C.94.20How.20to.20get.20the.20definition.20of.20declModifiers/near/398780240\">said</a>:</p>\n<blockquote>\n<p>Most things should have jump to definition, sometimes you have to make sure you explicitly <code>import Lean</code> at the top for that to be available though</p>\n</blockquote>\n<p><code>import Lean</code> works, though the def is not very helpful to me. The wiki is good. Thank you for your help.</p>",
        "id": 398788660,
        "sender_full_name": "ZHAO Jiecheng",
        "timestamp": 1698366629
    }
]