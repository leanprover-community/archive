[
    {
        "content": "<p>I've been reading Theorem Proving in Lean and in section 3.5 it mentions proving the law of the excluded middle from the double negative elimination principle.</p>\n<p>I started with this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">¬¬</span><span class=\"n\">p</span><span class=\"bp\">→</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"bp\">¬</span><span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>but was only able to prove EM -&gt; DNE and not the other way around. <br>\nI did some research and <a href=\"https://www.reddit.com/r/logic/comments/5cl8d8/does_double_negation_elimination_implies_law_of/\">this</a> seems to say its not possible with this formulation so I tried changing it to this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">q</span><span class=\"o\">,</span> <span class=\"bp\">¬¬</span><span class=\"n\">q</span> <span class=\"bp\">→</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"bp\">¬</span><span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>With this I have only managed to get this far. Is this possible? Does anyone have any hints? Thanks!</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">q</span><span class=\"o\">,</span> <span class=\"bp\">¬¬</span><span class=\"n\">q</span> <span class=\"bp\">→</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"bp\">¬</span><span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">iff.intro</span>\n    <span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n     <span class=\"k\">assume</span> <span class=\"n\">q</span><span class=\"o\">,</span>\n     <span class=\"k\">suffices</span> <span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"bp\">¬¬</span><span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"bp\">∨</span> <span class=\"bp\">¬</span><span class=\"n\">q</span><span class=\"o\">),</span> <span class=\"k\">from</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"bp\">∨</span> <span class=\"bp\">¬</span><span class=\"n\">q</span><span class=\"o\">),</span>\n     <span class=\"k\">assume</span> <span class=\"n\">h₂</span><span class=\"o\">,</span>\n     <span class=\"gr\">sorry</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n     <span class=\"k\">assume</span> <span class=\"n\">q</span><span class=\"o\">,</span>\n     <span class=\"k\">assume</span> <span class=\"n\">hnnq</span><span class=\"o\">,</span>\n     <span class=\"n\">or.elim</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"n\">q</span><span class=\"o\">)</span>\n      <span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"n\">hq</span><span class=\"o\">,</span> <span class=\"n\">hq</span><span class=\"o\">)</span>\n      <span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"n\">hnq</span><span class=\"o\">,</span> <span class=\"n\">absurd</span> <span class=\"n\">hnq</span> <span class=\"n\">hnnq</span><span class=\"o\">))</span>\n</code></pre></div>",
        "id": 347556847,
        "sender_full_name": "Daniel James",
        "timestamp": 1680836347
    },
    {
        "content": "<p>Yes, that is possible and you started the proof correctly</p>",
        "id": 347557388,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1680836707
    },
    {
        "content": "<p>The hint is to try proving <code>¬q</code></p>",
        "id": 347557443,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1680836728
    },
    {
        "content": "<p>Ah good to know it is possible!</p>",
        "id": 347557890,
        "sender_full_name": "Daniel James",
        "timestamp": 1680836924
    },
    {
        "content": "<p>It just seems like the only thing I can do from here is <code>suffices h₃ : q ∨ ¬q, from h₂ h₃,</code> which is just back to square one.</p>",
        "id": 347558141,
        "sender_full_name": "Daniel James",
        "timestamp": 1680837070
    },
    {
        "content": "<p>oh but is it?</p>",
        "id": 347558188,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1680837103
    },
    {
        "content": "<p>try proving the <code>¬q</code> case</p>",
        "id": 347558272,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1680837125
    },
    {
        "content": "<p>well we do have an extra hypothesis which is helpful (?)</p>",
        "id": 347558284,
        "sender_full_name": "Daniel James",
        "timestamp": 1680837136
    },
    {
        "content": "<p>Alright starting from here</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">q</span><span class=\"o\">,</span> <span class=\"bp\">¬¬</span><span class=\"n\">q</span> <span class=\"bp\">→</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"bp\">¬</span><span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">iff.intro</span>\n    <span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n     <span class=\"k\">assume</span> <span class=\"n\">q</span><span class=\"o\">,</span>\n     <span class=\"k\">suffices</span> <span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"bp\">¬¬</span><span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"bp\">∨</span> <span class=\"bp\">¬</span><span class=\"n\">q</span><span class=\"o\">),</span> <span class=\"k\">from</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"bp\">∨</span> <span class=\"bp\">¬</span><span class=\"n\">q</span><span class=\"o\">),</span>\n     <span class=\"k\">assume</span> <span class=\"n\">h₂</span><span class=\"o\">,</span>\n     <span class=\"k\">suffices</span> <span class=\"n\">h₃</span> <span class=\"o\">:</span> <span class=\"n\">q</span> <span class=\"bp\">∨</span> <span class=\"bp\">¬</span><span class=\"n\">q</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">h₂</span> <span class=\"n\">h₃</span><span class=\"o\">,</span>\n     <span class=\"n\">or.inr</span>\n      <span class=\"o\">(</span><span class=\"n\">_</span><span class=\"o\">))</span>\n    <span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n     <span class=\"k\">assume</span> <span class=\"n\">q</span><span class=\"o\">,</span>\n     <span class=\"k\">assume</span> <span class=\"n\">hnnq</span><span class=\"o\">,</span>\n     <span class=\"n\">or.elim</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"n\">q</span><span class=\"o\">)</span>\n      <span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"n\">hq</span><span class=\"o\">,</span> <span class=\"n\">hq</span><span class=\"o\">)</span>\n      <span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"n\">hnq</span><span class=\"o\">,</span> <span class=\"n\">absurd</span> <span class=\"n\">hnq</span> <span class=\"n\">hnnq</span><span class=\"o\">))</span>\n</code></pre></div>",
        "id": 347558296,
        "sender_full_name": "Daniel James",
        "timestamp": 1680837151
    },
    {
        "content": "<p>Ah! I got it!!</p>",
        "id": 347558355,
        "sender_full_name": "Daniel James",
        "timestamp": 1680837206
    },
    {
        "content": "<p>Ok I think this should be it</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">q</span><span class=\"o\">,</span> <span class=\"bp\">¬¬</span><span class=\"n\">q</span> <span class=\"bp\">→</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"bp\">¬</span><span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">iff.intro</span>\n    <span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n     <span class=\"k\">assume</span> <span class=\"n\">q</span><span class=\"o\">,</span>\n     <span class=\"k\">suffices</span> <span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"bp\">¬¬</span><span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"bp\">∨</span> <span class=\"bp\">¬</span><span class=\"n\">q</span><span class=\"o\">),</span> <span class=\"k\">from</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"bp\">∨</span> <span class=\"bp\">¬</span><span class=\"n\">q</span><span class=\"o\">),</span>\n     <span class=\"k\">assume</span> <span class=\"n\">h₂</span><span class=\"o\">,</span>\n     <span class=\"k\">suffices</span> <span class=\"n\">h₃</span> <span class=\"o\">:</span> <span class=\"n\">q</span> <span class=\"bp\">∨</span> <span class=\"bp\">¬</span><span class=\"n\">q</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">h₂</span> <span class=\"n\">h₃</span><span class=\"o\">,</span>\n     <span class=\"n\">or.inr</span>\n      <span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"n\">hq</span><span class=\"o\">,</span>\n       <span class=\"k\">suffices</span> <span class=\"n\">h₃</span> <span class=\"o\">:</span> <span class=\"n\">q</span> <span class=\"bp\">∨</span> <span class=\"bp\">¬</span><span class=\"n\">q</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">h₂</span> <span class=\"n\">h₃</span><span class=\"o\">,</span>\n       <span class=\"n\">or.inl</span> <span class=\"n\">hq</span><span class=\"o\">))</span>\n    <span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n     <span class=\"k\">assume</span> <span class=\"n\">q</span><span class=\"o\">,</span>\n     <span class=\"k\">assume</span> <span class=\"n\">hnnq</span><span class=\"o\">,</span>\n     <span class=\"n\">or.elim</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"n\">q</span><span class=\"o\">)</span>\n      <span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"n\">hq</span><span class=\"o\">,</span> <span class=\"n\">hq</span><span class=\"o\">)</span>\n      <span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"n\">hnq</span><span class=\"o\">,</span> <span class=\"n\">absurd</span> <span class=\"n\">hnq</span> <span class=\"n\">hnnq</span><span class=\"o\">))</span>\n</code></pre></div>\n<p>But I'm getting an error message on the <code>iff</code></p>",
        "id": 347558465,
        "sender_full_name": "Daniel James",
        "timestamp": 1680837297
    },
    {
        "content": "<p>what message?</p>",
        "id": 347558512,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1680837326
    },
    {
        "content": "<p>alot</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">type</span> <span class=\"n\">mismatch</span> <span class=\"n\">at</span> <span class=\"n\">application</span>\n  <span class=\"n\">iff.intro</span>\n    <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">),</span> <span class=\"bp\">¬¬</span><span class=\"n\">q</span> <span class=\"bp\">→</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">),</span>\n       <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"bp\">¬¬</span><span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"bp\">∨</span> <span class=\"bp\">¬</span><span class=\"n\">q</span><span class=\"o\">)),</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"bp\">∨</span> <span class=\"bp\">¬</span><span class=\"n\">q</span><span class=\"o\">))</span>\n         <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"bp\">∨</span> <span class=\"bp\">¬</span><span class=\"n\">q</span><span class=\"o\">)),</span>\n            <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">h₃</span> <span class=\"o\">:</span> <span class=\"n\">q</span> <span class=\"bp\">∨</span> <span class=\"bp\">¬</span><span class=\"n\">q</span><span class=\"o\">),</span> <span class=\"n\">h₂</span> <span class=\"n\">h₃</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">or.inr</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">hq</span> <span class=\"o\">:</span> <span class=\"n\">q</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">h₃</span> <span class=\"o\">:</span> <span class=\"n\">q</span> <span class=\"bp\">∨</span> <span class=\"bp\">¬</span><span class=\"n\">q</span><span class=\"o\">),</span> <span class=\"n\">h₂</span> <span class=\"n\">h₃</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">or.inl</span> <span class=\"n\">hq</span><span class=\"o\">)))))</span>\n<span class=\"n\">term</span>\n  <span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">),</span> <span class=\"bp\">¬¬</span><span class=\"n\">q</span> <span class=\"bp\">→</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">),</span>\n    <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"bp\">¬¬</span><span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"bp\">∨</span> <span class=\"bp\">¬</span><span class=\"n\">q</span><span class=\"o\">)),</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"bp\">∨</span> <span class=\"bp\">¬</span><span class=\"n\">q</span><span class=\"o\">))</span>\n      <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"bp\">∨</span> <span class=\"bp\">¬</span><span class=\"n\">q</span><span class=\"o\">)),</span>\n         <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">h₃</span> <span class=\"o\">:</span> <span class=\"n\">q</span> <span class=\"bp\">∨</span> <span class=\"bp\">¬</span><span class=\"n\">q</span><span class=\"o\">),</span> <span class=\"n\">h₂</span> <span class=\"n\">h₃</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">or.inr</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">hq</span> <span class=\"o\">:</span> <span class=\"n\">q</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">h₃</span> <span class=\"o\">:</span> <span class=\"n\">q</span> <span class=\"bp\">∨</span> <span class=\"bp\">¬</span><span class=\"n\">q</span><span class=\"o\">),</span> <span class=\"n\">h₂</span> <span class=\"n\">h₃</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">or.inl</span> <span class=\"n\">hq</span><span class=\"o\">))))</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">),</span> <span class=\"bp\">¬¬</span><span class=\"n\">q</span> <span class=\"bp\">→</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">),</span> <span class=\"bp\">¬¬</span><span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"bp\">∨</span> <span class=\"bp\">¬</span><span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">q</span> <span class=\"bp\">∨</span> <span class=\"bp\">¬</span><span class=\"n\">q</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">),</span> <span class=\"bp\">¬¬</span><span class=\"n\">q</span> <span class=\"bp\">→</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">),</span> <span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"bp\">¬</span><span class=\"n\">p</span>\n</code></pre></div>",
        "id": 347558533,
        "sender_full_name": "Daniel James",
        "timestamp": 1680837347
    },
    {
        "content": "<p>Use tactic mode</p>",
        "id": 347559110,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1680837661
    },
    {
        "content": "<p>I'm in the part of the book that hasn't introduced tactics yet.</p>",
        "id": 347559192,
        "sender_full_name": "Daniel James",
        "timestamp": 1680837683
    },
    {
        "content": "<p>So I am trying to do it without them</p>",
        "id": 347559233,
        "sender_full_name": "Daniel James",
        "timestamp": 1680837693
    },
    {
        "content": "<p>even if it is significantly more tedious</p>",
        "id": 347559278,
        "sender_full_name": "Daniel James",
        "timestamp": 1680837704
    },
    {
        "content": "<p>And far more prone to errors of the form you just posted</p>",
        "id": 347559391,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1680837732
    },
    {
        "content": "<p>I always tell my students not to believe what they read in books</p>",
        "id": 347559436,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1680837760
    },
    {
        "content": "<p>Books don't always do it the easiest way</p>",
        "id": 347559459,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1680837777
    },
    {
        "content": "<p>The suffices seems to be breaking it. This has a similar error.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">q</span><span class=\"o\">,</span> <span class=\"bp\">¬¬</span><span class=\"n\">q</span> <span class=\"bp\">→</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"bp\">¬</span><span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">iff.intro</span>\n    <span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n     <span class=\"k\">assume</span> <span class=\"n\">q</span><span class=\"o\">,</span>\n     <span class=\"k\">suffices</span> <span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"bp\">¬¬</span><span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"bp\">∨</span> <span class=\"bp\">¬</span><span class=\"n\">q</span><span class=\"o\">),</span> <span class=\"k\">from</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"bp\">∨</span> <span class=\"bp\">¬</span><span class=\"n\">q</span><span class=\"o\">),</span>\n     <span class=\"gr\">sorry</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n     <span class=\"k\">assume</span> <span class=\"n\">q</span><span class=\"o\">,</span>\n     <span class=\"k\">assume</span> <span class=\"n\">hnnq</span><span class=\"o\">,</span>\n     <span class=\"n\">or.elim</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"n\">q</span><span class=\"o\">)</span>\n      <span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"n\">hq</span><span class=\"o\">,</span> <span class=\"n\">hq</span><span class=\"o\">)</span>\n      <span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"n\">hnq</span><span class=\"o\">,</span> <span class=\"n\">absurd</span> <span class=\"n\">hnq</span> <span class=\"n\">hnnq</span><span class=\"o\">))</span>\n</code></pre></div>",
        "id": 347559488,
        "sender_full_name": "Daniel James",
        "timestamp": 1680837807
    },
    {
        "content": "<p>Doing it not in tactic mode won't teach you anything other than the fact that it's a pain not doing it in tactic mode</p>",
        "id": 347559511,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1680837830
    },
    {
        "content": "<p>idk. I feel like after doing these excercises without tactic mode I understand the type system much better. And this is the last one in the chapter.</p>",
        "id": 347559746,
        "sender_full_name": "Daniel James",
        "timestamp": 1680837915
    },
    {
        "content": "<p>I guess you should take my comments with a pinch of salt then because I have no desire to understand the type system, I just want to prove theorems</p>",
        "id": 347559845,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1680837962
    },
    {
        "content": "<p>A strategy to get more localized errors is to replace individual subterms with <code>_</code>, and try to ensure that there are no errors other than on <code>_</code></p>",
        "id": 347560358,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1680838268
    },
    {
        "content": "<p>Oh I know what's going on. You can't just pull <code>q ∨ ¬q</code> out of nowhere. That's the thing we are trying to prove.</p>",
        "id": 347560386,
        "sender_full_name": "Daniel James",
        "timestamp": 1680838288
    },
    {
        "content": "<p>Yup</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">q</span><span class=\"o\">,</span> <span class=\"bp\">¬¬</span><span class=\"n\">q</span> <span class=\"bp\">→</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"bp\">¬</span><span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">iff.intro</span>\n    <span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n     <span class=\"k\">assume</span> <span class=\"n\">p</span><span class=\"o\">,</span>\n     <span class=\"k\">suffices</span> <span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"bp\">¬¬</span><span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"bp\">∨</span> <span class=\"bp\">¬</span><span class=\"n\">q</span><span class=\"o\">),</span> <span class=\"k\">from</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n     <span class=\"k\">assume</span> <span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"bp\">∨</span> <span class=\"bp\">¬</span><span class=\"n\">q</span><span class=\"o\">),</span>\n     <span class=\"k\">suffices</span> <span class=\"n\">h₃</span> <span class=\"o\">:</span> <span class=\"n\">q</span> <span class=\"bp\">∨</span> <span class=\"bp\">¬</span><span class=\"n\">q</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">h₂</span> <span class=\"n\">h₃</span><span class=\"o\">,</span>\n     <span class=\"n\">or.inr</span>\n      <span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"n\">hq</span><span class=\"o\">,</span>\n       <span class=\"k\">suffices</span> <span class=\"n\">h₃</span> <span class=\"o\">:</span> <span class=\"n\">q</span> <span class=\"bp\">∨</span> <span class=\"bp\">¬</span><span class=\"n\">q</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">h₂</span> <span class=\"n\">h₃</span><span class=\"o\">,</span>\n       <span class=\"n\">or.inl</span> <span class=\"n\">hq</span><span class=\"o\">))</span>\n    <span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n     <span class=\"k\">assume</span> <span class=\"n\">q</span><span class=\"o\">,</span>\n     <span class=\"k\">assume</span> <span class=\"n\">hnnq</span><span class=\"o\">,</span>\n     <span class=\"n\">or.elim</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"n\">q</span><span class=\"o\">)</span>\n      <span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"n\">hq</span><span class=\"o\">,</span> <span class=\"n\">hq</span><span class=\"o\">)</span>\n      <span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"n\">hnq</span><span class=\"o\">,</span> <span class=\"n\">absurd</span> <span class=\"n\">hnq</span> <span class=\"n\">hnnq</span><span class=\"o\">))</span>\n</code></pre></div>\n<p>This works</p>",
        "id": 347560503,
        "sender_full_name": "Daniel James",
        "timestamp": 1680838349
    },
    {
        "content": "<p>I think the issue is the subterm <code>h (q ∨ ¬q)</code></p>",
        "id": 347560514,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1680838356
    },
    {
        "content": "<p>right</p>",
        "id": 347560521,
        "sender_full_name": "Daniel James",
        "timestamp": 1680838367
    },
    {
        "content": "<p>that's not a proof of <code>q ∨ ¬q</code></p>",
        "id": 347560534,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1680838376
    },
    {
        "content": "<p>it is a proof of <code>¬¬(q ∨ ¬q) -&gt; q ∨ ¬q</code></p>",
        "id": 347560569,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1680838403
    },
    {
        "content": "<p>you need to apply it to <code>h2</code> that you just introduced</p>",
        "id": 347560593,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1680838426
    },
    {
        "content": "<p>adding more <code>show</code> will also help localize the errors</p>",
        "id": 347560730,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1680838512
    },
    {
        "content": "<p>Hmm. Very close</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">type</span> <span class=\"n\">mismatch</span> <span class=\"n\">at</span> <span class=\"n\">application</span>\n  <span class=\"n\">h</span> <span class=\"n\">h₂</span>\n<span class=\"n\">term</span>\n  <span class=\"n\">h₂</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"bp\">¬¬</span><span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"bp\">∨</span> <span class=\"bp\">¬</span><span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"kt\">Prop</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n</code></pre></div>",
        "id": 347560769,
        "sender_full_name": "Daniel James",
        "timestamp": 1680838531
    },
    {
        "content": "<p>So if I understand correctly this means that <code>h₂</code> is a proof of <code>¬¬(q ∨ ¬q)</code> not the statement itself.</p>",
        "id": 347560972,
        "sender_full_name": "Daniel James",
        "timestamp": 1680838678
    },
    {
        "content": "<p>yes, <code>h</code> takes two arguments, a proposition and then a proof of its double negation</p>",
        "id": 347562175,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1680839300
    },
    {
        "content": "<p>the former can be inferred from the latter so <code>h _ h₂</code> should suffice</p>",
        "id": 347562222,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1680839330
    },
    {
        "content": "<p>Ah! That fixed it! Thank you very much for your help</p>",
        "id": 347562303,
        "sender_full_name": "Daniel James",
        "timestamp": 1680839375
    }
]