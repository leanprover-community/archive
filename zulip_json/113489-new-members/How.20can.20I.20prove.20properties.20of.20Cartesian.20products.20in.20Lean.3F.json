[
    {
        "content": "<p>I'm trying to prove the below goal:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">section</span>\n\n  <span class=\"kn\">open</span> <span class=\"n\">set</span>\n\n  <span class=\"c1\">-- Proof Designer Suggested Problems - 46</span>\n\n  <span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span>\n  <span class=\"kd\">variables</span> <span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">U</span>\n\n  <span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">×</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"bp\">∩</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">×</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"bp\">∩</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">×</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>When I type this goal into Lean, it gives me the below error:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">type</span> <span class=\"n\">mismatch</span> <span class=\"n\">at</span> <span class=\"n\">application</span>\n  <span class=\"bp\">⁇</span> <span class=\"bp\">∩</span> <span class=\"o\">(</span><span class=\"bp\">↥</span><span class=\"n\">A</span> <span class=\"bp\">×</span> <span class=\"bp\">↥</span><span class=\"n\">C</span><span class=\"o\">)</span>\n<span class=\"n\">term</span>\n  <span class=\"bp\">↥</span><span class=\"n\">A</span> <span class=\"bp\">×</span> <span class=\"bp\">↥</span><span class=\"n\">C</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"kt\">Type</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"mi\">1</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"n\">set</span> <span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n</code></pre></div>\n<p>I've looked in <a href=\"https://leanprover.github.io/theorem_proving_in_lean/\">Theorem Proving in Lean</a>, <a href=\"https://leanprover.github.io/logic_and_proof/\">Logic and Proof in Lean</a>,  and the mathlib docs, but I wasn't able to find anything that would allow me to prove properties of Cartesian products. Can someone point me in the right direction?</p>",
        "id": 269945810,
        "sender_full_name": "Andrew Lubrino",
        "timestamp": 1643564812
    },
    {
        "content": "<p>You are using the wrong kind of product, that's the problem.</p>",
        "id": 269945829,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1643564850
    },
    {
        "content": "<p><code>×</code> is product of types, not product of subsets. I'm pretty sure that there are products of subsets somewhere; let's try <a href=\"https://leanprover-community.github.io/mathlib_docs/find/set.prod\">docs#set.prod</a></p>",
        "id": 269945882,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1643564895
    },
    {
        "content": "<p>Aah, according to <a href=\"https://leanprover-community.github.io/mathlib_docs/find/set.mem_prod\">docs#set.mem_prod</a> you should be using <code>×ˢ</code></p>",
        "id": 269945911,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1643564958
    },
    {
        "content": "<p>Awesome, thanks for the reply. When I type if I replace all my \\times by \\x, I'm still getting an error. How do I type the x with the small s above?</p>",
        "id": 269946594,
        "sender_full_name": "Andrew Lubrino",
        "timestamp": 1643565693
    },
    {
        "content": "<p>I got it and it's working. Thank you!</p>",
        "id": 269946665,
        "sender_full_name": "Andrew Lubrino",
        "timestamp": 1643565780
    },
    {
        "content": "<p>Type <code>\\tim\\^s</code></p>",
        "id": 269946696,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1643565840
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"466607\">Andrew Lubrino</span> <a href=\"#narrow/stream/113489-new-members/topic/How.20can.20I.20prove.20properties.20of.20Cartesian.20products.20in.20Lean.3F/near/269946594\">said</a>:</p>\n<blockquote>\n<p>Awesome, thanks for the reply. When I type if I replace all my \\times by \\x, I'm still getting an error. How do I type the x with the small s above?</p>\n</blockquote>\n<p>It's also helpful to know VSCode will tell you what Yaël shared -- if you paste the symbol into your file and then hold your mouse over it it will say: <code>Type × using \\x or \\times or \\multiplication</code> and <code>Type ˢ using \\^s</code></p>",
        "id": 269946956,
        "sender_full_name": "Julian Berman",
        "timestamp": 1643566118
    },
    {
        "content": "<p>Note however that VScode won't tell you the smallest number of characters to get away with.</p>",
        "id": 269946999,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1643566201
    },
    {
        "content": "<p><del>I learned them through sweat and blood</del> I tried <code>\\t</code>, <code>\\ti</code>, <code>\\tim</code> and oh! it works</p>",
        "id": 269947048,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1643566231
    },
    {
        "content": "<p>oh man, I've been using Lean in the web editor this entire time and just downloading and uploading files back when I want to stop or continue working. Maybe I should really switch to using VS code if there really is some benefit to doing so.</p>",
        "id": 269947077,
        "sender_full_name": "Andrew Lubrino",
        "timestamp": 1643566315
    },
    {
        "content": "<p>Yes please, for your own sake!</p>",
        "id": 269947372,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1643566669
    },
    {
        "content": "<p>There are many many benefits to doing so! Not least that you can just do stuff like <code>#check set.mem_prod</code> and then right click on it and jump to definition and then you're right there in mathlib and can see all the API for set products. Follow instructions here <a href=\"https://leanprover-community.github.io/get_started.html\">https://leanprover-community.github.io/get_started.html</a> to install Lean and the community tools, and then make a new project and open it with VS Code.</p>",
        "id": 269947373,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1643566672
    },
    {
        "content": "<p>Haha, I'm sold. I'm going to switch over this morning. Thanks!</p>",
        "id": 269947700,
        "sender_full_name": "Andrew Lubrino",
        "timestamp": 1643567043
    },
    {
        "content": "<p>I know I've been asking a lot about Cartesian products, but I've been having some trouble and want to ask one more. I have the below code:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span>\n  <span class=\"kd\">variables</span> <span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">U</span>\n\n  <span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">×ˢ</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"bp\">∩</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">×ˢ</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"bp\">∩</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">×ˢ</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"k\">assume</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">U</span><span class=\"o\">,</span>\n  <span class=\"k\">assume</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">U</span><span class=\"o\">,</span>\n  <span class=\"k\">assume</span> <span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">∈</span> <span class=\"n\">A</span> <span class=\"bp\">×ˢ</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"bp\">∩</span> <span class=\"n\">C</span><span class=\"o\">),</span>\n  <span class=\"k\">have</span> <span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">∈</span> <span class=\"n\">A</span> <span class=\"bp\">×ˢ</span> <span class=\"n\">B</span> <span class=\"bp\">∩</span> <span class=\"n\">C</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">A</span> <span class=\"bp\">∧</span> <span class=\"n\">y</span> <span class=\"bp\">∈</span> <span class=\"n\">B</span> <span class=\"bp\">∩</span> <span class=\"n\">C</span><span class=\"o\">),</span> <span class=\"k\">from</span> <span class=\"n\">prod_mk_mem_set_prod_eq</span>\n</code></pre></div>\n<p>In my line starting with <code>have h2</code>, I'm getting an error: <code>failed to synthesize type class instance</code>. Does anyone have an idea about how I can fix this?</p>",
        "id": 270129283,
        "sender_full_name": "Andrew Lubrino",
        "timestamp": 1643674441
    },
    {
        "content": "<p>what are your <code>import</code>s?</p>",
        "id": 270129477,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1643674552
    },
    {
        "content": "<p>only <code>open set</code></p>",
        "id": 270129594,
        "sender_full_name": "Andrew Lubrino",
        "timestamp": 1643674625
    },
    {
        "content": "<p>you may need the brackets around the <code>B ∩ C</code> on the <code>have</code> in the last line</p>",
        "id": 270129610,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1643674634
    },
    {
        "content": "<p>wow, clutch. Thanks!</p>",
        "id": 270129670,
        "sender_full_name": "Andrew Lubrino",
        "timestamp": 1643674667
    },
    {
        "content": "<p>Okay, I wrote up a proof in Lean about the equality of Cartesian products, but I'm having getting it to compile. I proved both sides of the equality, but I'm now getting errors when I try to finish off the proof with <code>eq_of_subset_of_subset</code>.  What command should I use to prove the equality of Cartesian products?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">×ˢ</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"bp\">∩</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">×ˢ</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"bp\">∩</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">×ˢ</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n    <span class=\"n\">eq_of_subset_of_subset</span>\n    <span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">U</span><span class=\"o\">,</span>\n    <span class=\"k\">assume</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">U</span><span class=\"o\">,</span>\n    <span class=\"k\">assume</span> <span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">∈</span> <span class=\"n\">A</span> <span class=\"bp\">×ˢ</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"bp\">∩</span> <span class=\"n\">C</span><span class=\"o\">),</span>\n    <span class=\"k\">have</span> <span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">∈</span> <span class=\"n\">A</span> <span class=\"bp\">×ˢ</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"bp\">∩</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">A</span> <span class=\"bp\">∧</span> <span class=\"n\">y</span> <span class=\"bp\">∈</span> <span class=\"n\">B</span> <span class=\"bp\">∩</span> <span class=\"n\">C</span><span class=\"o\">),</span> <span class=\"k\">from</span> <span class=\"n\">prod_mk_mem_set_prod_eq</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">h₃</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">A</span> <span class=\"bp\">∧</span> <span class=\"n\">y</span> <span class=\"bp\">∈</span> <span class=\"n\">B</span> <span class=\"bp\">∩</span> <span class=\"n\">C</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">eq.subst</span> <span class=\"n\">h₂</span> <span class=\"n\">h₁</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">h₄</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">∈</span> <span class=\"n\">A</span> <span class=\"bp\">×ˢ</span> <span class=\"n\">B</span><span class=\"o\">,</span> <span class=\"k\">from</span>\n      <span class=\"o\">(</span><span class=\"k\">have</span> <span class=\"n\">h₅</span> <span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"bp\">∈</span> <span class=\"n\">B</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"o\">(</span><span class=\"n\">h₃.right</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">left</span><span class=\"o\">,</span>\n      <span class=\"k\">show</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">∈</span> <span class=\"n\">A</span> <span class=\"bp\">×ˢ</span> <span class=\"n\">B</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">mk_mem_prod</span> <span class=\"o\">(</span><span class=\"n\">h₃.left</span><span class=\"o\">)</span> <span class=\"n\">h₅</span><span class=\"o\">),</span>\n    <span class=\"k\">have</span> <span class=\"n\">h₅</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">∈</span> <span class=\"n\">A</span> <span class=\"bp\">×ˢ</span> <span class=\"n\">C</span><span class=\"o\">,</span> <span class=\"k\">from</span>\n      <span class=\"o\">(</span><span class=\"k\">have</span> <span class=\"n\">h₆</span> <span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"bp\">∈</span> <span class=\"n\">C</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"o\">(</span><span class=\"n\">h₃.right</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">right</span><span class=\"o\">,</span>\n      <span class=\"k\">show</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">∈</span> <span class=\"n\">A</span> <span class=\"bp\">×ˢ</span> <span class=\"n\">C</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">mk_mem_prod</span> <span class=\"o\">(</span><span class=\"n\">h₃.left</span><span class=\"o\">)</span> <span class=\"n\">h₆</span><span class=\"o\">),</span>\n    <span class=\"k\">show</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">∈</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">×ˢ</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"bp\">∩</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">×ˢ</span> <span class=\"n\">C</span><span class=\"o\">),</span> <span class=\"k\">from</span> <span class=\"n\">and.intro</span> <span class=\"n\">h₄</span> <span class=\"n\">h₅</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">U</span><span class=\"o\">,</span>\n    <span class=\"k\">assume</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">U</span><span class=\"o\">,</span>\n    <span class=\"k\">assume</span> <span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">∈</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">×ˢ</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"bp\">∩</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">×ˢ</span> <span class=\"n\">C</span><span class=\"o\">),</span>\n    <span class=\"k\">have</span> <span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">A</span> <span class=\"bp\">∧</span> <span class=\"n\">y</span> <span class=\"bp\">∈</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"bp\">∩</span> <span class=\"n\">C</span><span class=\"o\">),</span> <span class=\"k\">from</span>\n      <span class=\"o\">(</span><span class=\"k\">have</span> <span class=\"n\">h₃</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">∈</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">×ˢ</span> <span class=\"n\">B</span><span class=\"o\">),</span> <span class=\"k\">from</span> <span class=\"n\">h₁.left</span><span class=\"o\">,</span>\n      <span class=\"k\">have</span> <span class=\"n\">h₄</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">∈</span> <span class=\"n\">A</span> <span class=\"bp\">×ˢ</span> <span class=\"n\">B</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">A</span> <span class=\"bp\">∧</span> <span class=\"n\">y</span> <span class=\"bp\">∈</span> <span class=\"n\">B</span><span class=\"o\">),</span> <span class=\"k\">from</span> <span class=\"n\">prod_mk_mem_set_prod_eq</span><span class=\"o\">,</span>\n      <span class=\"k\">have</span> <span class=\"n\">h₅</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">A</span> <span class=\"bp\">∧</span> <span class=\"n\">y</span> <span class=\"bp\">∈</span> <span class=\"n\">B</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">eq.subst</span> <span class=\"n\">h₄</span> <span class=\"n\">h₃</span><span class=\"o\">,</span>\n      <span class=\"k\">have</span> <span class=\"n\">h₆</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">∈</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">×ˢ</span> <span class=\"n\">C</span><span class=\"o\">),</span> <span class=\"k\">from</span> <span class=\"n\">h₁.right</span><span class=\"o\">,</span>\n      <span class=\"k\">have</span> <span class=\"n\">h₇</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">∈</span> <span class=\"n\">A</span> <span class=\"bp\">×ˢ</span> <span class=\"n\">C</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">A</span> <span class=\"bp\">∧</span> <span class=\"n\">y</span> <span class=\"bp\">∈</span> <span class=\"n\">C</span><span class=\"o\">),</span> <span class=\"k\">from</span> <span class=\"n\">prod_mk_mem_set_prod_eq</span><span class=\"o\">,</span>\n      <span class=\"k\">have</span> <span class=\"n\">h₈</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">A</span> <span class=\"bp\">∧</span> <span class=\"n\">y</span> <span class=\"bp\">∈</span> <span class=\"n\">C</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">eq.subst</span> <span class=\"n\">h₇</span> <span class=\"n\">h₆</span><span class=\"o\">,</span>\n      <span class=\"k\">show</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">A</span> <span class=\"bp\">∧</span> <span class=\"n\">y</span> <span class=\"bp\">∈</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"bp\">∩</span> <span class=\"n\">C</span><span class=\"o\">),</span> <span class=\"k\">from</span> <span class=\"n\">and.intro</span> <span class=\"n\">h₅.left</span> <span class=\"o\">(</span><span class=\"n\">and.intro</span> <span class=\"o\">(</span><span class=\"n\">h₅.right</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₈.right</span><span class=\"o\">))),</span>\n    <span class=\"k\">have</span> <span class=\"n\">h₃</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">∈</span> <span class=\"n\">A</span> <span class=\"bp\">×ˢ</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"bp\">∩</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">A</span> <span class=\"bp\">∧</span> <span class=\"n\">y</span> <span class=\"bp\">∈</span> <span class=\"n\">B</span> <span class=\"bp\">∩</span> <span class=\"n\">C</span><span class=\"o\">),</span> <span class=\"k\">from</span> <span class=\"n\">prod_mk_mem_set_prod_eq</span><span class=\"o\">,</span>\n    <span class=\"k\">show</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">∈</span> <span class=\"n\">A</span> <span class=\"bp\">×ˢ</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"bp\">∩</span> <span class=\"n\">C</span><span class=\"o\">),</span> <span class=\"k\">from</span> <span class=\"n\">eq.subst</span> <span class=\"n\">h₃</span> <span class=\"n\">h₂</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 270138806,
        "sender_full_name": "Andrew Lubrino",
        "timestamp": 1643680418
    },
    {
        "content": "<p>I've also tried <code>ext</code> with <code>iff.intro</code>, but I'm not able to get it to work</p>",
        "id": 270141909,
        "sender_full_name": "Andrew Lubrino",
        "timestamp": 1643682828
    },
    {
        "content": "<p>Is there a reason you're not using tactic mode?</p>",
        "id": 270162958,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1643700338
    },
    {
        "content": "<p><code>ext, simp</code> can probably close this, if we don't already have <a href=\"https://leanprover-community.github.io/mathlib_docs/find/set.prod_inter\">docs#set.prod_inter</a></p>",
        "id": 270163059,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1643700432
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"466607\">@Andrew Lubrino</span> <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> . Can you please include your imports and opens in your initial post so that other people can run your code more easily?</p>",
        "id": 270169786,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1643704886
    },
    {
        "content": "<p>Hi everyone. I posted a similar question about one week ago, but I took a break from Lean for a few days and missed all the responses. I'm going to post my question again with some details addressing questions on my first post. I'm using Lean mainly to learn formal logic and abstract math for the first time, so I don't want to use tactics because tactics make it hard to see what's actually happening under the hood. Below is MWE example of the problem I'm having. I think there is some issue with the types of my variables, but I can't get anything with Cartesian products to work:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.set</span>\n<span class=\"kn\">open</span> <span class=\"n\">set</span>\n\n<span class=\"c1\">-- Proof Designer Suggested Problems - 46</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span>\n<span class=\"kd\">variables</span> <span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">U</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">×</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"bp\">∩</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"bp\">⊆</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">×</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"bp\">∩</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">×</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">assume</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n<span class=\"k\">assume</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n<span class=\"k\">assume</span> <span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">∈</span> <span class=\"n\">A</span> <span class=\"bp\">×</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"bp\">∩</span> <span class=\"n\">C</span><span class=\"o\">),</span>\n<span class=\"k\">have</span> <span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">∈</span> <span class=\"n\">A</span> <span class=\"bp\">×ˢ</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"bp\">∩</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">A</span> <span class=\"bp\">∧</span> <span class=\"n\">y</span> <span class=\"bp\">∈</span> <span class=\"n\">B</span> <span class=\"bp\">∩</span> <span class=\"n\">C</span><span class=\"o\">),</span> <span class=\"k\">from</span> <span class=\"n\">prod_mk_mem_set_prod_eq</span><span class=\"o\">,</span>\n<span class=\"k\">have</span> <span class=\"n\">h₃</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">A</span> <span class=\"bp\">∧</span> <span class=\"n\">y</span> <span class=\"bp\">∈</span> <span class=\"n\">B</span> <span class=\"bp\">∩</span> <span class=\"n\">C</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">eq.subst</span> <span class=\"n\">h₂</span> <span class=\"n\">h₁</span><span class=\"o\">,</span>\n<span class=\"k\">have</span> <span class=\"n\">h₄</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">∈</span> <span class=\"n\">A</span> <span class=\"bp\">×ˢ</span> <span class=\"n\">B</span><span class=\"o\">,</span> <span class=\"k\">from</span>\n  <span class=\"o\">(</span><span class=\"k\">have</span> <span class=\"n\">h₅</span> <span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"bp\">∈</span> <span class=\"n\">B</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"o\">(</span><span class=\"n\">h₃.right</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">left</span><span class=\"o\">,</span>\n  <span class=\"k\">show</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">∈</span> <span class=\"n\">A</span> <span class=\"bp\">×ˢ</span> <span class=\"n\">B</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">mk_mem_prod</span> <span class=\"o\">(</span><span class=\"n\">h₃.left</span><span class=\"o\">)</span> <span class=\"n\">h₅</span><span class=\"o\">),</span>\n<span class=\"k\">have</span> <span class=\"n\">h₅</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">∈</span> <span class=\"n\">A</span> <span class=\"bp\">×ˢ</span> <span class=\"n\">C</span><span class=\"o\">,</span> <span class=\"k\">from</span>\n  <span class=\"o\">(</span><span class=\"k\">have</span> <span class=\"n\">h₆</span> <span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"bp\">∈</span> <span class=\"n\">C</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"o\">(</span><span class=\"n\">h₃.right</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">right</span><span class=\"o\">,</span>\n  <span class=\"k\">show</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">∈</span> <span class=\"n\">A</span> <span class=\"bp\">×ˢ</span> <span class=\"n\">C</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">mk_mem_prod</span> <span class=\"o\">(</span><span class=\"n\">h₃.left</span><span class=\"o\">)</span> <span class=\"n\">h₆</span><span class=\"o\">),</span>\n<span class=\"k\">show</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">∈</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">×ˢ</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"bp\">∩</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">×ˢ</span> <span class=\"n\">C</span><span class=\"o\">),</span> <span class=\"k\">from</span> <span class=\"n\">and.intro</span> <span class=\"n\">h₄</span> <span class=\"n\">h₅</span>\n</code></pre></div>\n<p>I'm getting <code>failed to synthesize type class instance</code> errors on my first assume. Any idea what's causing this and how I might fix it? Thanks!</p>",
        "id": 270829418,
        "sender_full_name": "Andrew Lubrino",
        "timestamp": 1644070854
    },
    {
        "content": "<p>I think you want to use <code>×ˢ</code> consistently--your theorem statement is about whatever <code>×</code> is, and it's probably causing your error</p>",
        "id": 270829593,
        "sender_full_name": "Reid Barton",
        "timestamp": 1644071083
    },
    {
        "content": "<p>Okay, that helped. But now I'm getting an error on my assume x line <code>type mismatch</code> and it's basically displaying the proven goal in formal logic format rather than set theory format. What do you think is causing the issue?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.set</span>\n<span class=\"kn\">open</span> <span class=\"n\">set</span>\n\n<span class=\"c1\">-- Proof Designer Suggested Problems - 46</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span>\n<span class=\"kd\">variables</span> <span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">U</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">×ˢ</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"bp\">∩</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"bp\">⊆</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">×ˢ</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"bp\">∩</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">×ˢ</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">assume</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n<span class=\"k\">assume</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n<span class=\"k\">assume</span> <span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">∈</span> <span class=\"n\">A</span> <span class=\"bp\">×ˢ</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"bp\">∩</span> <span class=\"n\">C</span><span class=\"o\">),</span>\n<span class=\"k\">have</span> <span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">∈</span> <span class=\"n\">A</span> <span class=\"bp\">×ˢ</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"bp\">∩</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">A</span> <span class=\"bp\">∧</span> <span class=\"n\">y</span> <span class=\"bp\">∈</span> <span class=\"n\">B</span> <span class=\"bp\">∩</span> <span class=\"n\">C</span><span class=\"o\">),</span> <span class=\"k\">from</span> <span class=\"n\">prod_mk_mem_set_prod_eq</span><span class=\"o\">,</span>\n<span class=\"k\">have</span> <span class=\"n\">h₃</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">A</span> <span class=\"bp\">∧</span> <span class=\"n\">y</span> <span class=\"bp\">∈</span> <span class=\"n\">B</span> <span class=\"bp\">∩</span> <span class=\"n\">C</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">eq.subst</span> <span class=\"n\">h₂</span> <span class=\"n\">h₁</span><span class=\"o\">,</span>\n<span class=\"k\">have</span> <span class=\"n\">h₄</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">∈</span> <span class=\"n\">A</span> <span class=\"bp\">×ˢ</span> <span class=\"n\">B</span><span class=\"o\">,</span> <span class=\"k\">from</span>\n  <span class=\"o\">(</span><span class=\"k\">have</span> <span class=\"n\">h₅</span> <span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"bp\">∈</span> <span class=\"n\">B</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"o\">(</span><span class=\"n\">h₃.right</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">left</span><span class=\"o\">,</span>\n  <span class=\"k\">show</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">∈</span> <span class=\"n\">A</span> <span class=\"bp\">×ˢ</span> <span class=\"n\">B</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">mk_mem_prod</span> <span class=\"o\">(</span><span class=\"n\">h₃.left</span><span class=\"o\">)</span> <span class=\"n\">h₅</span><span class=\"o\">),</span>\n<span class=\"k\">have</span> <span class=\"n\">h₅</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">∈</span> <span class=\"n\">A</span> <span class=\"bp\">×ˢ</span> <span class=\"n\">C</span><span class=\"o\">,</span> <span class=\"k\">from</span>\n  <span class=\"o\">(</span><span class=\"k\">have</span> <span class=\"n\">h₆</span> <span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"bp\">∈</span> <span class=\"n\">C</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"o\">(</span><span class=\"n\">h₃.right</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">right</span><span class=\"o\">,</span>\n  <span class=\"k\">show</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">∈</span> <span class=\"n\">A</span> <span class=\"bp\">×ˢ</span> <span class=\"n\">C</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">mk_mem_prod</span> <span class=\"o\">(</span><span class=\"n\">h₃.left</span><span class=\"o\">)</span> <span class=\"n\">h₆</span><span class=\"o\">),</span>\n<span class=\"k\">show</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">∈</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">×ˢ</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"bp\">∩</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">×ˢ</span> <span class=\"n\">C</span><span class=\"o\">),</span> <span class=\"k\">from</span> <span class=\"n\">and.intro</span> <span class=\"n\">h₄</span> <span class=\"n\">h₅</span>\n</code></pre></div>",
        "id": 270829882,
        "sender_full_name": "Andrew Lubrino",
        "timestamp": 1644071476
    },
    {
        "content": "<p>I actually just set up Lean with VSCode and put my code in there and I'm getting a different error now. <code>unexpected token</code> pops up on my product symbol with the small s on top.</p>",
        "id": 270830123,
        "sender_full_name": "Andrew Lubrino",
        "timestamp": 1644071801
    },
    {
        "content": "<p>Yes, I assume a missing import or wrong version of mathlib</p>",
        "id": 270830137,
        "sender_full_name": "Reid Barton",
        "timestamp": 1644071834
    },
    {
        "content": "<p>So this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">×ˢ</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"bp\">∩</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"bp\">⊆</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">×ˢ</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"bp\">∩</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">×ˢ</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">assume</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n<span class=\"k\">assume</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n<span class=\"k\">assume</span> <span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">∈</span> <span class=\"n\">A</span> <span class=\"bp\">×ˢ</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"bp\">∩</span> <span class=\"n\">C</span><span class=\"o\">),</span>\n<span class=\"n\">_</span>\n</code></pre></div>\n<p>is already wrong. You can delete the third assume to see what the types of <code>x</code> and <code>y</code> are, they are not what you think.</p>",
        "id": 270830219,
        "sender_full_name": "Reid Barton",
        "timestamp": 1644071908
    },
    {
        "content": "<p>If you want to write proofs this long in term mode, you basically have to preserve the invariant that your proof type checks aside from places where you used <code>_</code> to fill in for a part of the proof you haven't gotten to yet.</p>",
        "id": 270830237,
        "sender_full_name": "Reid Barton",
        "timestamp": 1644071971
    },
    {
        "content": "<p>yep, just realized I didn't have <code>data.set</code> imported. Lean's telling me I don't have that in my path. I'll figure out how to download that and get it set up. </p>\n<p>When I delete the third assume, I get that <code>x</code> and <code>y</code> are <code>Type U</code>. They should both be <code>set U</code> right?</p>",
        "id": 270830301,
        "sender_full_name": "Andrew Lubrino",
        "timestamp": 1644072062
    },
    {
        "content": "<p>Also this will get a bit easier if you replace <code>example</code> by <code>lemma moo</code>, for boring technical reasons--Lean is trying to use your proof to understand the statement for some reason, and it's going to have a hard time if your proof is not correct/finished yet.</p>",
        "id": 270830376,
        "sender_full_name": "Reid Barton",
        "timestamp": 1644072147
    },
    {
        "content": "<p>I think you'd better get your imports sorted out before we worry about any other questions. If Lean doesn't know the notation you're using then the errors you see may well be consequences of this.</p>\n<blockquote>\n<p>but I took a break from Lean for a few days and missed all the responses.</p>\n</blockquote>\n<p>You understand that all the responses are still there though, right? Just click on your own name and search for \"view messages sent\" and then click on a message to see the reponses.</p>",
        "id": 270830386,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1644072164
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"466607\">Andrew Lubrino</span> <a href=\"#narrow/stream/113489-new-members/topic/Cartesian.20products.20agains/near/270830301\">said</a>:</p>\n<blockquote>\n<p>When I delete the third assume, I get that <code>x</code> and <code>y</code> are <code>Type U</code>. They should both be <code>set U</code> right?</p>\n</blockquote>\n<p>I don't agree that that's what you get. Probably Kevin is right that something more fundamental is not working yet.</p>",
        "id": 270830403,
        "sender_full_name": "Reid Barton",
        "timestamp": 1644072220
    },
    {
        "content": "<p>Furthermore you didn't need to start a new thread to discuss this -- it's just as easy to resurrect an old thread, and more convenient too.</p>",
        "id": 270830463,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1644072286
    },
    {
        "content": "<p>What happened to <code>set.prod</code> btw?</p>",
        "id": 270830476,
        "sender_full_name": "Reid Barton",
        "timestamp": 1644072310
    },
    {
        "content": "<p>Okay, let me sort out my imports. And wow, thanks for that Kevin. Didn't realize I could look at history in this chat. I'll know for next time and make sure not to start new threads like that! sorry</p>",
        "id": 270830479,
        "sender_full_name": "Andrew Lubrino",
        "timestamp": 1644072315
    },
    {
        "content": "<p>Zulip is an extremely powerful chat instance. You can browse threads from years ago (and find interesting threads by searching)</p>",
        "id": 270830496,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1644072352
    },
    {
        "content": "<p>got it. I'll make sure to make use of that.</p>",
        "id": 270830543,
        "sender_full_name": "Andrew Lubrino",
        "timestamp": 1644072394
    },
    {
        "content": "<p>okay so <code>leanpkg</code> is definitely installed on my machine</p>",
        "id": 270830702,
        "sender_full_name": "Andrew Lubrino",
        "timestamp": 1644072640
    },
    {
        "content": "<p>how should I use that to install data.set? I think that's my problem</p>",
        "id": 270830710,
        "sender_full_name": "Andrew Lubrino",
        "timestamp": 1644072661
    },
    {
        "content": "<p>have you opened not just a file but a Lean project folder in VS Code using the \"open folder\" functionality? Have you read the information at the URL contained in the error message?</p>",
        "id": 270830731,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1644072705
    },
    {
        "content": "<p>yes, I created an empty folder that I created specifically for Lean files and then opened that folder in VSCode and created a new lean file from there. I also just visited the link in the error message.  I'm working through those instructions now. Thanks!</p>",
        "id": 270831026,
        "sender_full_name": "Andrew Lubrino",
        "timestamp": 1644073114
    },
    {
        "content": "<blockquote>\n<p>yes, I created an empty folder that I created specifically for Lean files and then opened that folder in VSCode and created a new lean file from there. </p>\n</blockquote>\n<p>Yeah, that won't work, because that's an empty folder, not a Lean project. You have to create what is called a Lean project on your computer. Instructions for doing that are here <a href=\"https://leanprover-community.github.io/install/project.html\">https://leanprover-community.github.io/install/project.html</a> and instructions on how to install Lean and the community tools are here <a href=\"https://leanprover-community.github.io/get_started.html\">https://leanprover-community.github.io/get_started.html</a> .</p>",
        "id": 270831644,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1644073917
    },
    {
        "content": "<p>Okay, I had <code>leanproject</code> create a folder and I put my <code>test.lean</code> file in <code>src</code>. I tried <code>import data.set</code>, but still I'm getting errors. I took a look in <code>_target/mathlib/deps/src</code> and was able to find <code>data/set</code>,  and I checked where Lean is looking for the files and I'm in the right spot.</p>",
        "id": 270831701,
        "sender_full_name": "Andrew Lubrino",
        "timestamp": 1644073962
    },
    {
        "content": "<p>Why don't you send a screenshot of your VS Code with the file explorer tab open. Here's what mine looks like:<br>\n<a href=\"/user_uploads/3121/NmpQLPHqxKmUvPuiS2D2rPdV/working_project.png\">working_project.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/NmpQLPHqxKmUvPuiS2D2rPdV/working_project.png\" title=\"working_project.png\"><img src=\"/user_uploads/3121/NmpQLPHqxKmUvPuiS2D2rPdV/working_project.png\"></a></div>",
        "id": 270831804,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1644074081
    },
    {
        "content": "<p>And can you clarify what the errors are, and where they are (e.g. are they on imports or are we on to some new errors now?)</p>",
        "id": 270831883,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1644074190
    },
    {
        "content": "<p>Here's what my screen looks like. I just have <code>import data.set</code> in a file and nothing else, so the only error I'm getting now is <code>invalid import: data.set could not resolve import: data.set</code><br>\n<a href=\"/user_uploads/3121/pIzsVCGqP194Bey8g9L9ZDU5/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/pIzsVCGqP194Bey8g9L9ZDU5/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/pIzsVCGqP194Bey8g9L9ZDU5/image.png\"></a></div>",
        "id": 270832030,
        "sender_full_name": "Andrew Lubrino",
        "timestamp": 1644074403
    },
    {
        "content": "<p>Did you do <code>leanproject add-mathlib</code>?</p>",
        "id": 270832078,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1644074488
    },
    {
        "content": "<p>just tried that and got <code>This project already depends on  mathlib</code></p>",
        "id": 270832122,
        "sender_full_name": "Andrew Lubrino",
        "timestamp": 1644074528
    },
    {
        "content": "<p>also just tried <code>leanproject get-mathlib-cache</code> and <code>leanpkg configure</code> to no avail</p>",
        "id": 270832361,
        "sender_full_name": "Andrew Lubrino",
        "timestamp": 1644074837
    },
    {
        "content": "<p>Maybe <code>import mathlib.data.set</code> (I'm guessing at this point)</p>",
        "id": 270832979,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1644075520
    },
    {
        "content": "<p>In vscode you should open the directory with leanpkg.path in <code>test</code> it looks like you opened one directory higher in the screenshot</p>",
        "id": 270833106,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1644075660
    },
    {
        "content": "<p>I think Alex is right -- you still have not opened a Lean project folder; right now you have opened a directory which contains a Lean project folder.</p>",
        "id": 270833141,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1644075721
    },
    {
        "content": "<p>And the less you fiddle with typing random <code>leanproject</code> commands, the better! The problem is and has always been that you have not opened a Lean project folder with VS Code's open folder functionality.</p>",
        "id": 270833242,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1644075796
    },
    {
        "content": "<p>that did the trick. Thanks!</p>",
        "id": 270833251,
        "sender_full_name": "Andrew Lubrino",
        "timestamp": 1644075805
    },
    {
        "content": "<p>also, to answer Reid's initial question the type of <code>x</code> is <code>U × U</code> and the type of <code>y</code> is <code>x ∈ A ×ˢ (B ∩ C)</code> in my below example (pasted again for reference): </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.set</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">set</span>\n\n<span class=\"c1\">-- Proof Designer Suggested Problems - 46</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span>\n<span class=\"kd\">variables</span> <span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">U</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">moo</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">×ˢ</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"bp\">∩</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"bp\">⊆</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">×ˢ</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"bp\">∩</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">×ˢ</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">assume</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n<span class=\"k\">assume</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n<span class=\"c1\">--assume h₁ : (x, y) ∈ A ×ˢ (B ∩ C),</span>\n<span class=\"k\">have</span> <span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">∈</span> <span class=\"n\">A</span> <span class=\"bp\">×ˢ</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"bp\">∩</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">A</span> <span class=\"bp\">∧</span> <span class=\"n\">y</span> <span class=\"bp\">∈</span> <span class=\"n\">B</span> <span class=\"bp\">∩</span> <span class=\"n\">C</span><span class=\"o\">),</span> <span class=\"k\">from</span> <span class=\"n\">prod_mk_mem_set_prod_eq</span><span class=\"o\">,</span>\n<span class=\"k\">have</span> <span class=\"n\">h₃</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">A</span> <span class=\"bp\">∧</span> <span class=\"n\">y</span> <span class=\"bp\">∈</span> <span class=\"n\">B</span> <span class=\"bp\">∩</span> <span class=\"n\">C</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">eq.subst</span> <span class=\"n\">h₂</span> <span class=\"n\">h₁</span><span class=\"o\">,</span>\n<span class=\"k\">have</span> <span class=\"n\">h₄</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">∈</span> <span class=\"n\">A</span> <span class=\"bp\">×ˢ</span> <span class=\"n\">B</span><span class=\"o\">,</span> <span class=\"k\">from</span>\n  <span class=\"o\">(</span><span class=\"k\">have</span> <span class=\"n\">h₅</span> <span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"bp\">∈</span> <span class=\"n\">B</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"o\">(</span><span class=\"n\">h₃.right</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">left</span><span class=\"o\">,</span>\n  <span class=\"k\">show</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">∈</span> <span class=\"n\">A</span> <span class=\"bp\">×ˢ</span> <span class=\"n\">B</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">mk_mem_prod</span> <span class=\"o\">(</span><span class=\"n\">h₃.left</span><span class=\"o\">)</span> <span class=\"n\">h₅</span><span class=\"o\">),</span>\n<span class=\"k\">have</span> <span class=\"n\">h₅</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">∈</span> <span class=\"n\">A</span> <span class=\"bp\">×ˢ</span> <span class=\"n\">C</span><span class=\"o\">,</span> <span class=\"k\">from</span>\n  <span class=\"o\">(</span><span class=\"k\">have</span> <span class=\"n\">h₆</span> <span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"bp\">∈</span> <span class=\"n\">C</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"o\">(</span><span class=\"n\">h₃.right</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">right</span><span class=\"o\">,</span>\n  <span class=\"k\">show</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">∈</span> <span class=\"n\">A</span> <span class=\"bp\">×ˢ</span> <span class=\"n\">C</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">mk_mem_prod</span> <span class=\"o\">(</span><span class=\"n\">h₃.left</span><span class=\"o\">)</span> <span class=\"n\">h₆</span><span class=\"o\">),</span>\n<span class=\"k\">show</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">∈</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">×ˢ</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"bp\">∩</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">×ˢ</span> <span class=\"n\">C</span><span class=\"o\">),</span> <span class=\"k\">from</span> <span class=\"n\">and.intro</span> <span class=\"n\">h₄</span> <span class=\"n\">h₅</span>\n</code></pre></div>",
        "id": 270833437,
        "sender_full_name": "Andrew Lubrino",
        "timestamp": 1644075977
    },
    {
        "content": "<p>I've tried changing the types to <code>U</code> and <code>set U</code>. I still get errors either way. Any ideas on how I can fix this?</p>",
        "id": 270833495,
        "sender_full_name": "Andrew Lubrino",
        "timestamp": 1644076035
    },
    {
        "content": "<p>that is, I've changed both types to <code>U</code> and then I changed both types to <code>set U</code>, they always have the same type</p>",
        "id": 270833527,
        "sender_full_name": "Andrew Lubrino",
        "timestamp": 1644076067
    },
    {
        "content": "<p>The types of <code>x</code> and <code>y</code> are determined by the statement you are proving, you can't just change them.</p>",
        "id": 270833842,
        "sender_full_name": "Reid Barton",
        "timestamp": 1644076356
    },
    {
        "content": "<p>hmmm, well the <code>x</code> I declared is <code>U × U</code>, maybe I could use that and access its members using <code>x.fst</code> and <code>x.snd</code>. I was looking at the Lean docs for <code>prod</code> and found some examples that use that structure.</p>",
        "id": 270834131,
        "sender_full_name": "Andrew Lubrino",
        "timestamp": 1644076614
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">,</span>\n<span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">U</span><span class=\"o\">,</span>\n<span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">U</span> <span class=\"bp\">×</span> <span class=\"n\">U</span><span class=\"o\">,</span>\n<span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">A</span> <span class=\"bp\">×ˢ</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"bp\">∩</span> <span class=\"n\">C</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>is your context. I think that you think x and y are different to what Lean thinks they are.</p>\n<p>Also, this proof would be much easier in tactic mode. That way you'd be able to see what you were doing instead of coding blind.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">moo</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">×ˢ</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"bp\">∩</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"bp\">⊆</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">×ˢ</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"bp\">∩</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">×ˢ</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"n\">intro</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- realisation that x and y are not what you think they are</span>\n  <span class=\"k\">have</span> <span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">A</span> <span class=\"bp\">×ˢ</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"bp\">∩</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">x.1</span> <span class=\"bp\">∈</span> <span class=\"n\">A</span> <span class=\"bp\">∧</span> <span class=\"n\">x.2</span> <span class=\"bp\">∈</span> <span class=\"n\">B</span> <span class=\"bp\">∩</span> <span class=\"n\">C</span><span class=\"o\">),</span> <span class=\"k\">from</span> <span class=\"n\">prod_mk_mem_set_prod_eq</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- etc etc</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 270834145,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1644076642
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"466607\">Andrew Lubrino</span> <a href=\"#narrow/stream/113489-new-members/topic/Cartesian.20products.20agains/near/270834131\">said</a>:</p>\n<blockquote>\n<p>hmmm, well the <code>x</code> I declared is <code>U × U</code>, maybe I could use that and access its members using <code>x.fst</code> and <code>x.snd</code>.</p>\n</blockquote>\n<p>Yes, you can. Or you can use <code>assume ⟨x, y⟩,</code> to introduce the argument and break it into components at the same time.</p>",
        "id": 270834171,
        "sender_full_name": "Reid Barton",
        "timestamp": 1644076676
    },
    {
        "content": "<p>oh wow. Thanks so much for the help here. I just tried my first suggestion and that seemed to work. I'll probably use your suggestion in the future since it's more clear.</p>",
        "id": 270834302,
        "sender_full_name": "Andrew Lubrino",
        "timestamp": 1644076776
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">moo</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">×ˢ</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"bp\">∩</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"bp\">⊆</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">×ˢ</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"bp\">∩</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">×ˢ</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rintro</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">⟩,</span>\n  <span class=\"c1\">-- x and y are now what you think they are</span>\n  <span class=\"k\">have</span> <span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">∈</span> <span class=\"n\">A</span> <span class=\"bp\">×ˢ</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"bp\">∩</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">A</span> <span class=\"bp\">∧</span> <span class=\"n\">y</span> <span class=\"bp\">∈</span> <span class=\"n\">B</span> <span class=\"bp\">∩</span> <span class=\"n\">C</span><span class=\"o\">),</span> <span class=\"k\">from</span> <span class=\"n\">prod_mk_mem_set_prod_eq</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- etc etc</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 270834320,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1644076794
    },
    {
        "content": "<p>yes, tactic mode is on my list next of things to do with Lean. I should really figure out the tactic mode. Thanks again for all the help with this.</p>",
        "id": 270834480,
        "sender_full_name": "Andrew Lubrino",
        "timestamp": 1644076874
    },
    {
        "content": "<p><a href=\"https://leanprover.github.io/theorem_proving_in_lean/\">#tpil</a> does a lot of stuff in term mode before introducing it, but by the end of chapter 4 some of the proofs are getting really unwieldy, and one false move (e.g. a bracket in the wrong place) brings the house down (e.g. random <code>sync</code> errors at unpredictable places, leading to code which is hard to debug). I introduce my students (mathematicians, not computer scientists) to tactic mode on day 1 before I've even talked about what a term and a type are.</p>",
        "id": 270834543,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1644076957
    },
    {
        "content": "<p>got it. And your students have no previous experience with formal logic? If that's the case, I'll dig into tactic mode right now. I was a little hesitant because up until now, I thought tactics = automation, which is not what I want, but if that's not the case then I'm okay with it.</p>",
        "id": 270834725,
        "sender_full_name": "Andrew Lubrino",
        "timestamp": 1644077184
    },
    {
        "content": "<p>Some tactics are heavy automation, others are really just essential ways of building terms that would be unweildy to cosntruct by hand, any long chain of rewrites (i.e. eq.subst) is really so much easier to do in tactic mode</p>",
        "id": 270834800,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1644077283
    },
    {
        "content": "<p>Okay, that makes sense. I'll take a look at tpil and use the examples in there to get started. Thanks for the suggestions</p>",
        "id": 270834843,
        "sender_full_name": "Andrew Lubrino",
        "timestamp": 1644077380
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/How.20can.20I.20prove.20properties.20of.20Cartesian.20products.20in.20Lean.3F/near/270830463\">said</a>:</p>\n<blockquote>\n<p>Furthermore you didn't need to start a new thread to discuss this -- it's just as easy to resurrect an old thread, and more convenient too.</p>\n</blockquote>\n<p>I merged together the three threads</p>",
        "id": 270881040,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1644140842
    }
]