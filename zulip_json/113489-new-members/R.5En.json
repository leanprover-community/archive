[
    {
        "content": "<p>Ok so this is a dumb question as I am discovering mathlib's linear algebra library, but I can't find anything about ℝ^n being a vector_space <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 206766089,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1597275493
    },
    {
        "content": "<p>i actually don't know whether this answers your question, but have you watched anne baanen's <a href=\"https://www.youtube.com/watch?v=EnZvGCU_jpc\">video on linear algebra</a> from lftcm2020?</p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"EnZvGCU_jpc\" href=\"https://www.youtube.com/watch?v=EnZvGCU_jpc\"><img src=\"https://i.ytimg.com/vi/EnZvGCU_jpc/default.jpg\"></a></div>",
        "id": 206773622,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1597283980
    },
    {
        "content": "<p>If you write <code>fin n -&gt; ℝ</code> (or even better <code>\\i -&gt; ℝ</code>, possibly with <code>[fintype \\i]</code>) then <code>by apply_instance</code> should find the instance <a href=\"https://leanprover-community.github.io/mathlib_docs/find/pi.semimodule\">docs#pi.semimodule</a> . At least, I hope, since <code>vector_space</code> is defined to be <code>semimodule</code>.</p>",
        "id": 206774902,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1597285461
    },
    {
        "content": "<p>Yes I thought about using <code>fin n -&gt; \\R</code>, which definitely work, but I didn't know if it was the appropriate way to talk about R^n (I was expecting some kind of Cartesian product). Also thanks <span class=\"user-mention\" data-user-id=\"252300\">@Jalex Stark</span> I'll watch this.</p>",
        "id": 206794657,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1597310131
    },
    {
        "content": "<p>Fun fact, I told a friend of mine who didn't know Lean about defining R^n as <code>fin n -&gt; \\R</code> (which I translated as <code>⟦1,n⟧ → ℝ</code>), and I think he started to doubt my sanity</p>",
        "id": 206795136,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1597310519
    },
    {
        "content": "<p>It doesn't matter what the implementation is to a user, and this implementation is easier to use than the inductive definition (which is the only other one I can imagine).</p>",
        "id": 206795651,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1597310920
    },
    {
        "content": "<p>Indeed, but he just told me \"that's not what R^n <strong>is</strong> (i.e a cartesian product)\"</p>",
        "id": 206795774,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1597311020
    },
    {
        "content": "<p>Then he needs to and learn about implementation v specification. Does he believe that 3 <strong>is</strong> {0,1,2}?</p>",
        "id": 206796850,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1597312002
    },
    {
        "content": "<p>Because if he's using ZFC and he unwraps all the packaging, he might find out that this is what it <strong>is</strong>, except if he's looking at the real number 3, which of course <strong>is</strong> an uncountable set of Cauchy sequences.</p>",
        "id": 206796886,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1597312049
    },
    {
        "content": "<p>A cartesian product only works for two sets. How can you use cartesian products for n sets?</p>",
        "id": 206796961,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1597312097
    },
    {
        "content": "<p>He meant a recursive cartesian product, like <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi mathvariant=\"double-struck\">R</mi><mi>n</mi></msup></mrow><annotation encoding=\"application/x-tex\">\\mathbb{R}^n</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathbb\">R</span></span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span></span></span></span></span></span></span> is <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi mathvariant=\"double-struck\">R</mi><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow></msup><mo>×</mo><mi mathvariant=\"double-struck\">R</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{R}^{n-1} \\times \\mathbb{R}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.897438em;vertical-align:-0.08333em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathbb\">R</span></span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span><span class=\"mbin mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">R</span></span></span></span></span></p>",
        "id": 206797426,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1597312530
    },
    {
        "content": "<p>But yeah I told him about hidden isomorphisms and all</p>",
        "id": 206797509,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1597312580
    },
    {
        "content": "<p>So he wants to prove e.g. that R^n is a group by induction on n? And in your definition you just get it immediately, right?</p>",
        "id": 206807202,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1597320809
    },
    {
        "content": "<p>So this shows that your definition is a better implementation</p>",
        "id": 206807221,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1597320825
    },
    {
        "content": "<p>I think the point in this case is that you need to think about <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi mathvariant=\"double-struck\">R</mi><mi>S</mi></msup></mrow><annotation encoding=\"application/x-tex\">\\mathbb{R}^S</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8413309999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathbb\">R</span></span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8413309999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.05764em;\">S</span></span></span></span></span></span></span></span></span></span></span> for some arbitrary set <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>S</mi></mrow><annotation encoding=\"application/x-tex\">S</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span></span></span></span>, and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi mathvariant=\"double-struck\">R</mi><mi>n</mi></msup></mrow><annotation encoding=\"application/x-tex\">\\mathbb{R}^n</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathbb\">R</span></span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span></span></span></span></span></span></span> is the special case where <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>S</mi></mrow><annotation encoding=\"application/x-tex\">S</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span></span></span></span> is the canonical set of size n.</p>",
        "id": 206817439,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1597326932
    },
    {
        "content": "<p>May I ask how could R^n be defined in lean?</p>",
        "id": 382832993,
        "sender_full_name": "tsuki  hao",
        "timestamp": 1691475454
    },
    {
        "content": "<p>We have <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=EuclideanSpace#doc\">docs#EuclideanSpace</a> but depending on the goal we prefer to state theorems in terms of arbitrary finite dimensional vector spaces.</p>",
        "id": 382838793,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1691476957
    },
    {
        "content": "<p>[Quoting…]</p>\n<p>Thank you! I'll try it！</p>",
        "id": 382843789,
        "sender_full_name": "tsuki  hao",
        "timestamp": 1691478240
    },
    {
        "content": "<p>There is also the type <code>Vector ℝ n</code>, whose terms are lists of real numbers, that have length <code>n</code>. <a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/Data/Vector.html#Vector\">docs#Vector</a></p>",
        "id": 383188605,
        "sender_full_name": "Flo (Florent Schaffhauser)",
        "timestamp": 1691569601
    },
    {
        "content": "<p>It's very unlikely that you want that type</p>",
        "id": 383191743,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1691570300
    },
    {
        "content": "<p>OK, so democratically I am wrong :-) But I cannot really see why it is <em>unlikely</em> that one might want that type. </p>\n<p>Of course I do not know what the OP had in mind, whether they wanted <code>R^n</code> with its canonical structure of Euclidean space, or just <code>n</code>-tuples of real numbers. Would you agree in that case that this is the type to look at? Or would you recommend something like <code>Fin n → \\R</code> instead?.</p>\n<p>But it sounded to me that the next question that may come to mind might be how to define <code>C^n</code> then <code>Q^n</code>, then <code>(Z/pZ)^n</code> etc. So <a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/Analysis/InnerProductSpace/PiL2.html#EuclideanSpace\">docs#EuclideanSpace</a> might not be the ideal starting point.</p>\n<p>I am just trying to understand why you think it is unlikely that the <code>Vector \\R n</code> type might be helpful <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 383219708,
        "sender_full_name": "Flo (Florent Schaffhauser)",
        "timestamp": 1691576101
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"513540\">Flo (Florent Schaffhauser)</span> <a href=\"#narrow/stream/113489-new-members/topic/R.5En/near/383219708\">said</a>:</p>\n<blockquote>\n<p>Of course I do not know what the OP had in mind, whether they wanted <code>R^n</code> with its canonical structure of Euclidean space, or just <code>n</code>-tuples of real numbers. Would you agree in that case that this is the type to look at?</p>\n</blockquote>\n<p>Even then, probably no. Chances are even if you don't want the metric space structure of <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=EuclideanSpace#doc\">docs#EuclideanSpace</a>, you still want basic elementwise addition of tuples, which you do not get with <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Vector#doc\">docs#Vector</a>.</p>\n<blockquote>\n<p>Or would you recommend something like <code>Fin n → \\R</code> instead?.</p>\n</blockquote>\n<p>Yes, this is reasonable; you just have to avoid the trap that <code>norm ![3, 4] = 4</code> not <code>5</code>!</p>\n<blockquote>\n<p>But it sounded to me that the next question that may come to mind might be how to define <code>C^n</code> then <code>Q^n</code>, then <code>(Z/pZ)^n</code> etc. So <a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/Analysis/InnerProductSpace/PiL2.html#EuclideanSpace\">docs#EuclideanSpace</a> might not be the ideal starting point.</p>\n</blockquote>\n<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=EuclideanSpace#doc\">docs#EuclideanSpace</a> already works for <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi mathvariant=\"double-struck\">C</mi><mi>n</mi></msup></mrow><annotation encoding=\"application/x-tex\">\\mathbb{C}^n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6889em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">C</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6644em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span></span></span></span></span></span></span>. <del>Probably this is an argument that <code>EuclideanSpace</code> should be generalized to allow <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">Q</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{Q}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8556em;vertical-align:-0.1667em;\"></span><span class=\"mord mathbb\">Q</span></span></span></span> too...</del> (Edit: it doesn't permit a real-vector-space structure, so you can't normalize vectors)</p>",
        "id": 383222055,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1691576498
    },
    {
        "content": "<p><code>PiLp</code> should work for <code>Fin n \\to F</code> as long as <code>F</code> has a metric or a norm.</p>",
        "id": 383306385,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1691591396
    }
]