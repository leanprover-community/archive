[
    {
        "content": "<p>Hi,</p>\n<p>It seems the <code>linear_algebra</code> directory in mathlib is abstract, and doesn't talk about matrices as 2D arrays of scalars, even <code>linear_algebra.matrix</code> is that right?</p>\n<p><code>data.matrix</code> seems to be the \"2D array of scalars\", and doesn't have a separate concept of vector, instead using 1xn or nx1 matrices as vectors.  Is that also right?</p>\n<p>Is there a structure like an n-tuple or n-dimensional vector that's compatible with <code>linear_algebra</code>?</p>\n<p>The context is, I'm having a go at formalizing Axler's Linear Algebra Done Right, and in section 1.A he defined n-tuple, and I'm wondering where the equivalent definition is inside mathlib.</p>",
        "id": 344970984,
        "sender_full_name": "Martin C. Martin",
        "timestamp": 1679952478
    },
    {
        "content": "<p>The preferred spelling of a n-tuple in mathlib is <code>ι → R</code>, where <code>n = fintype.card ι</code></p>",
        "id": 344971160,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1679952570
    },
    {
        "content": "<p>If you pushed really hard on the \"no, I want to number each coefficient from 0 to n-1\", then you can use <code>fin n → R</code></p>",
        "id": 344971302,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1679952627
    },
    {
        "content": "<p>Perhaps <a href=\"https://leanprover-community.github.io/mathlib_docs/find/matrix.mul_vec\">docs#matrix.mul_vec</a> helps you see how this is expected to be used?</p>",
        "id": 344971355,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1679952654
    },
    {
        "content": "<p>Ah interesting, thanks.</p>",
        "id": 344972127,
        "sender_full_name": "Martin C. Martin",
        "timestamp": 1679953018
    },
    {
        "content": "<p>For <code>{x y : ℝ}</code>, the type of <code>(x, y, x)</code> is <code>ℝ × ℝ × ℝ</code>.  Can this be expressed as a <code>v : fin n → ℝ</code>?</p>",
        "id": 344973658,
        "sender_full_name": "Martin C. Martin",
        "timestamp": 1679953836
    },
    {
        "content": "<p>Yes, as <code>![x, y, z]</code>which has type <code>fin 3 → ℝ</code>, which you can use after <code>import data.fin.vec_notation</code></p>",
        "id": 344973778,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1679953901
    },
    {
        "content": "<p>And matrices can be written as <code>!![a, b; c, d]</code> with a similar import</p>",
        "id": 344973828,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1679953918
    },
    {
        "content": "<p>Note however that R x R x R is not <em>definitionally</em> equal to <code>fin 3 -&gt; R</code> so it's a slight hassle converting from one to the other. </p>\n<p>(Off-topic: I have a new phone and really should find that thread where Eric showed me how to type Unicode on android)</p>",
        "id": 344974452,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1679954197
    },
    {
        "content": "<p>(I should really redo that with the last 2 years of vscode shortcut fixes...)</p>",
        "id": 344974983,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1679954500
    }
]