[
    {
        "content": "<p>I'm new to lean and I found the behaviour of tactic rw hard to comprehend.<br>\n<strong>First problem:</strong></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∣</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∣</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∣</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"n\">k</span> <span class=\"bp\">*</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"o\">⟨</span><span class=\"n\">k₁</span><span class=\"o\">,</span> <span class=\"n\">d₁</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">h₁</span>\n  <span class=\"k\">let</span> <span class=\"o\">⟨</span><span class=\"n\">k₂</span><span class=\"o\">,</span> <span class=\"n\">d₂</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">h₂</span>\n  <span class=\"o\">⟨</span><span class=\"n\">k₁</span> <span class=\"bp\">+</span> <span class=\"n\">k</span> <span class=\"bp\">*</span> <span class=\"n\">k₂</span><span class=\"o\">,</span>\n    <span class=\"k\">calc</span>\n      <span class=\"o\">(</span><span class=\"n\">k₁</span> <span class=\"bp\">+</span> <span class=\"n\">k</span> <span class=\"bp\">*</span> <span class=\"n\">k₂</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">k₁</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">k</span> <span class=\"bp\">*</span> <span class=\"n\">k₂</span> <span class=\"bp\">*</span> <span class=\"n\">x</span>   <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Nat.add_mul</span><span class=\"o\">]</span>\n              <span class=\"n\">_</span>         <span class=\"bp\">=</span> <span class=\"n\">k₁</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">k</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">k₂</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Nat.mul_assoc</span><span class=\"o\">]</span>\n              <span class=\"n\">_</span>         <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"n\">k</span> <span class=\"bp\">*</span> <span class=\"n\">z</span>             <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">d₁</span><span class=\"o\">,</span> <span class=\"n\">d₂</span><span class=\"o\">]⟩</span>\n</code></pre></div>\n<p>The above code works, however after a slight modification, it no longer works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∣</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∣</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∣</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"n\">k</span> <span class=\"bp\">*</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"o\">⟨</span><span class=\"n\">k₁</span><span class=\"o\">,</span> <span class=\"n\">d₁</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">h₁</span>\n  <span class=\"k\">let</span> <span class=\"o\">⟨</span><span class=\"n\">k₂</span><span class=\"o\">,</span> <span class=\"n\">d₂</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">h₂</span>\n  <span class=\"o\">⟨</span><span class=\"n\">k₁</span> <span class=\"bp\">+</span> <span class=\"n\">k</span> <span class=\"bp\">*</span> <span class=\"n\">k₂</span><span class=\"o\">,</span>\n    <span class=\"k\">calc</span>\n      <span class=\"o\">(</span><span class=\"n\">k₁</span> <span class=\"bp\">+</span> <span class=\"n\">k</span> <span class=\"bp\">*</span> <span class=\"n\">k₂</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">k₁</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">k</span> <span class=\"bp\">*</span> <span class=\"n\">k₂</span> <span class=\"bp\">*</span> <span class=\"n\">x</span>   <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Nat.add_mul</span><span class=\"o\">]</span>\n              <span class=\"n\">_</span>         <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"n\">k</span> <span class=\"bp\">*</span> <span class=\"n\">z</span>             <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">→</span><span class=\"n\">Nat.mul_assoc</span><span class=\"o\">,</span> <span class=\"bp\">→</span><span class=\"n\">d₁</span><span class=\"o\">,</span> <span class=\"bp\">→</span><span class=\"n\">d₂</span><span class=\"o\">]</span> <span class=\"o\">⟩</span>\n</code></pre></div>\n<p><strong>Second problem:</strong> I was experimenting with the rw tactic and found this. It might seem made-up</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">5</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">H</span><span class=\"o\">]</span>\n<span class=\"c\">/-</span><span class=\"cm\">  rw fails -/</span>\n</code></pre></div>\n<p>I thought that it wouldn't fail because <code>5</code> is <code>Nat.succ (Nat.succ 3)</code>.</p>",
        "id": 293707886,
        "sender_full_name": "Yicheng Qian",
        "timestamp": 1660653867
    },
    {
        "content": "<p>Do <code>rw [H]</code> instead of <code>rw [← H]</code> to replace <code>x</code> by <code>3</code>.</p>",
        "id": 293744216,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1660664928
    },
    {
        "content": "<p>I noticed it is written in Lean 4, which I have no experience with. Better wait for someone else's reply.</p>",
        "id": 293744704,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1660665085
    },
    {
        "content": "<p><code>I thought that it wouldn't fail because 5 is Nat.succ (Nat.succ 3)</code> : it is definitionally that, but not syntactically that, and <code>rw</code> works up to syntactic equality.</p>",
        "id": 293749850,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1660666549
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"524339\">Yicheng Qian</span> has marked this topic as resolved.</p>",
        "id": 294448536,
        "sender_full_name": "Notification Bot",
        "timestamp": 1661005753
    },
    {
        "content": "<p>I am currently  at line 94, and the tactic state looks a bit strange, does anyone knows what's the problem?<br>\n<a href=\"/user_uploads/3121/pNIUzoIuB9hApY2fv_Q7FGBz/SharedScreenshot.jpg\">SharedScreenshot.jpg</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/pNIUzoIuB9hApY2fv_Q7FGBz/SharedScreenshot.jpg\" title=\"SharedScreenshot.jpg\"><img src=\"/user_uploads/3121/pNIUzoIuB9hApY2fv_Q7FGBz/SharedScreenshot.jpg\"></a></div>",
        "id": 303530192,
        "sender_full_name": "Ruizhe Wan",
        "timestamp": 1665526942
    },
    {
        "content": "<p>oh I miss to add a at the end...</p>",
        "id": 303530740,
        "sender_full_name": "Ruizhe Wan",
        "timestamp": 1665527247
    },
    {
        "content": "<p>Yeah, ?m_1 is just lean's way of saying \"unknown variable\". Note that one of your goals is just <code>G</code>, which isn't a true/false statement.</p>",
        "id": 303574439,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1665560298
    }
]