[
    {
        "content": "<p>Hello I was trying to prove the theorem that convex functions on the real line were continuous, and I decided I needed this lemma below</p>\n<p>before I did the epsilon delta arguments. In order to prove this I will need to expand out the convexity of g 4 times, with different parameters, but just doing it once seemed incredibly painful, and it seemed like just in order to prove that the arguments to it sum to one, I have to expand out 4 levels of Div.div, LinearOrderedField.toDiv... etc.</p>\n<p>Presumably I'm doing something wrong here? Am I supposed to just prove that if something is convex on the reals that I can get the statements written out nicely directly? Or is there a nicer way of automatically unfolding everything so I can just use tactics like ring and field_simp?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.BigOperators.Ring</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Real.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Analysis.Convex.Function</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Topology.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Topology.Instances.NNReal</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">convexcontinuousineq</span> <span class=\"o\">(</span><span class=\"n\">g</span><span class=\"o\">:</span><span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span> <span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span><span class=\"n\">ℝ</span> <span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hαpos</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">&gt;</span><span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hconv</span> <span class=\"o\">:</span> <span class=\"n\">ConvexOn</span> <span class=\"n\">ℝ</span> <span class=\"n\">Set.univ</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hmid</span><span class=\"o\">:</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">+</span><span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">α</span><span class=\"o\">))</span>\n  <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"bp\">|</span><span class=\"n\">x</span><span class=\"bp\">-</span> <span class=\"n\">y</span><span class=\"bp\">|</span> <span class=\"bp\">&lt;</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">g</span> <span class=\"n\">y</span> <span class=\"bp\">≤</span>  <span class=\"n\">g</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"bp\">|</span><span class=\"n\">x</span><span class=\"bp\">-</span><span class=\"n\">y</span><span class=\"bp\">|</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"n\">g</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"n\">α</span> <span class=\"bp\">∧</span>  <span class=\"n\">g</span> <span class=\"n\">y</span> <span class=\"bp\">≥</span>  <span class=\"n\">g</span> <span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"bp\">|</span><span class=\"n\">x</span><span class=\"bp\">-</span><span class=\"n\">y</span><span class=\"bp\">|</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"n\">g</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"n\">α</span>\n    <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">intro</span> <span class=\"n\">y</span> <span class=\"n\">hy</span>\n    <span class=\"n\">by_cases</span> <span class=\"n\">y</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span>\n    <span class=\"bp\">.</span> <span class=\"n\">constructor</span>\n      <span class=\"k\">calc</span> <span class=\"n\">g</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">g</span>  <span class=\"o\">(((</span><span class=\"n\">α</span> <span class=\"bp\">-</span> <span class=\"bp\">|</span><span class=\"n\">x</span><span class=\"bp\">-</span><span class=\"n\">y</span><span class=\"bp\">|</span><span class=\"o\">)</span><span class=\"bp\">/</span><span class=\"n\">α</span>  <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"o\">)</span>  <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"bp\">|</span><span class=\"n\">x</span><span class=\"bp\">-</span><span class=\"n\">y</span><span class=\"bp\">|/</span><span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">α</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">ring</span><span class=\"bp\">;</span> <span class=\"n\">field_simp</span><span class=\"bp\">;</span> <span class=\"n\">rw</span><span class=\"o\">[</span><span class=\"n\">abs_of_nonneg</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">ring</span><span class=\"bp\">;</span> <span class=\"n\">rw</span><span class=\"o\">[</span><span class=\"n\">mul_comm</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">mul_assoc</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">field_simp</span><span class=\"bp\">;</span> <span class=\"n\">linarith</span>\n          <span class=\"n\">_</span> <span class=\"bp\">≤</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">-</span> <span class=\"bp\">|</span><span class=\"n\">x</span><span class=\"bp\">-</span><span class=\"n\">y</span><span class=\"bp\">|</span><span class=\"o\">)</span> <span class=\"bp\">/</span><span class=\"o\">(</span><span class=\"n\">α</span><span class=\"o\">)</span><span class=\"bp\">*</span>  <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">+</span>  <span class=\"o\">(</span><span class=\"bp\">|</span><span class=\"n\">x</span><span class=\"bp\">-</span><span class=\"n\">y</span><span class=\"bp\">|/</span><span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">-</span><span class=\"n\">α</span><span class=\"o\">)</span>   <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n                                                                        <span class=\"n\">apply</span> <span class=\"n\">hconv.2</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span>\n                                                                        <span class=\"c1\">-- surely there's a nicer way to do this???</span>\n                                                                        <span class=\"n\">unfold</span> <span class=\"n\">Div.div</span>\n                                                                        <span class=\"n\">rw</span><span class=\"o\">[</span><span class=\"n\">LinearOrderedField.toDiv</span><span class=\"o\">,</span> <span class=\"n\">Real.instLinearOrderedFieldReal</span><span class=\"o\">]</span>\n                                                                        <span class=\"n\">simp</span>\n                                                                        <span class=\"n\">rw</span><span class=\"o\">[</span><span class=\"n\">DivInvMonoid.div'</span><span class=\"o\">,</span> <span class=\"n\">DivInvMonoid.div'</span><span class=\"o\">]</span>\n                                                                        <span class=\"n\">ring_nf</span>\n                                                                        <span class=\"n\">field_simp</span>\n                                                                        <span class=\"n\">simp</span>\n                                                                        <span class=\"n\">simp</span>\n                                                                        <span class=\"c1\">-- Seems like I'd need to do all that rewriting again????</span>\n                                                                        <span class=\"gr\">sorry</span>\n                                                                        <span class=\"gr\">sorry</span>\n          <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"bp\">|</span><span class=\"n\">x</span><span class=\"bp\">-</span><span class=\"n\">y</span><span class=\"bp\">|</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"n\">g</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n      <span class=\"gr\">sorry</span>\n    <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 400563728,
        "sender_full_name": "Leo Shine",
        "timestamp": 1699286610
    },
    {
        "content": "<p>There should not be a <code>Div.div</code> in your goal state. I'm looking where it comes from...</p>",
        "id": 400564815,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1699286817
    },
    {
        "content": "<p>Something seems to have gone wrong here; you shouldn't have ended up with <code>Div.div</code> in the goal in the first place</p>",
        "id": 400565029,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1699286873
    },
    {
        "content": "<p>Here's a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Real.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Analysis.Convex.Function</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span> <span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hconv</span> <span class=\"o\">:</span> <span class=\"n\">ConvexOn</span> <span class=\"n\">ℝ</span> <span class=\"n\">Set.univ</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">g</span> <span class=\"o\">(((</span><span class=\"n\">α</span> <span class=\"bp\">-</span> <span class=\"bp\">|</span><span class=\"n\">x</span><span class=\"bp\">-</span><span class=\"n\">y</span><span class=\"bp\">|</span><span class=\"o\">)</span><span class=\"bp\">/</span><span class=\"n\">α</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"bp\">|</span><span class=\"n\">x</span><span class=\"bp\">-</span><span class=\"n\">y</span><span class=\"bp\">|/</span><span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">α</span><span class=\"o\">))</span> <span class=\"bp\">≤</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">-</span> <span class=\"bp\">|</span><span class=\"n\">x</span><span class=\"bp\">-</span><span class=\"n\">y</span><span class=\"bp\">|</span><span class=\"o\">)</span><span class=\"bp\">/</span><span class=\"n\">α</span> <span class=\"bp\">*</span> <span class=\"n\">g</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"bp\">|</span><span class=\"n\">x</span><span class=\"bp\">-</span><span class=\"n\">y</span><span class=\"bp\">|/</span><span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">-</span><span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">hconv.2</span> <span class=\"o\">(</span><span class=\"n\">Set.mem_univ</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Set.mem_univ</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">α</span><span class=\"o\">))</span>\n  <span class=\"n\">apply</span> <span class=\"n\">this</span>\n  <span class=\"c1\">-- why do the goals contain `Div.div`?</span>\n</code></pre></div>",
        "id": 400565897,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1699287161
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">smul_eq_mul</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>before the <code>apply</code> fixes the issue</p>",
        "id": 400566169,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1699287262
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.BigOperators.Ring</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Real.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Analysis.Convex.Function</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Topology.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Topology.Instances.NNReal</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">convexcontinuousineq</span> <span class=\"o\">(</span><span class=\"n\">g</span><span class=\"o\">:</span><span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span> <span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span><span class=\"n\">ℝ</span> <span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hαpos</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">&gt;</span><span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hconv</span> <span class=\"o\">:</span> <span class=\"n\">ConvexOn</span> <span class=\"n\">ℝ</span> <span class=\"n\">Set.univ</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hmid</span><span class=\"o\">:</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">+</span><span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">α</span><span class=\"o\">))</span>\n  <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"bp\">|</span><span class=\"n\">x</span><span class=\"bp\">-</span> <span class=\"n\">y</span><span class=\"bp\">|</span> <span class=\"bp\">&lt;</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">g</span> <span class=\"n\">y</span> <span class=\"bp\">≤</span>  <span class=\"n\">g</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"bp\">|</span><span class=\"n\">x</span><span class=\"bp\">-</span><span class=\"n\">y</span><span class=\"bp\">|</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"n\">g</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"n\">α</span> <span class=\"bp\">∧</span>  <span class=\"n\">g</span> <span class=\"n\">y</span> <span class=\"bp\">≥</span>  <span class=\"n\">g</span> <span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"bp\">|</span><span class=\"n\">x</span><span class=\"bp\">-</span><span class=\"n\">y</span><span class=\"bp\">|</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"n\">g</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"n\">α</span>\n    <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">intro</span> <span class=\"n\">y</span> <span class=\"n\">hy</span>\n    <span class=\"n\">by_cases</span> <span class=\"n\">y</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span>\n    <span class=\"bp\">.</span> <span class=\"n\">constructor</span>\n      <span class=\"k\">calc</span> <span class=\"n\">g</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">g</span>  <span class=\"o\">(((</span><span class=\"n\">α</span> <span class=\"bp\">-</span> <span class=\"bp\">|</span><span class=\"n\">x</span><span class=\"bp\">-</span><span class=\"n\">y</span><span class=\"bp\">|</span><span class=\"o\">)</span><span class=\"bp\">/</span><span class=\"n\">α</span>  <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"o\">)</span>  <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"bp\">|</span><span class=\"n\">x</span><span class=\"bp\">-</span><span class=\"n\">y</span><span class=\"bp\">|/</span><span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">α</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">ring</span><span class=\"bp\">;</span> <span class=\"n\">field_simp</span><span class=\"bp\">;</span> <span class=\"n\">rw</span><span class=\"o\">[</span><span class=\"n\">abs_of_nonneg</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">ring</span><span class=\"bp\">;</span> <span class=\"n\">rw</span><span class=\"o\">[</span><span class=\"n\">mul_comm</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">mul_assoc</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">field_simp</span><span class=\"bp\">;</span> <span class=\"n\">linarith</span>\n          <span class=\"n\">_</span> <span class=\"bp\">≤</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">-</span> <span class=\"bp\">|</span><span class=\"n\">x</span><span class=\"bp\">-</span><span class=\"n\">y</span><span class=\"bp\">|</span><span class=\"o\">)</span> <span class=\"bp\">/</span><span class=\"o\">(</span><span class=\"n\">α</span><span class=\"o\">)</span><span class=\"bp\">*</span>  <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">+</span>  <span class=\"o\">(</span><span class=\"bp\">|</span><span class=\"n\">x</span><span class=\"bp\">-</span><span class=\"n\">y</span><span class=\"bp\">|/</span><span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">-</span><span class=\"n\">α</span><span class=\"o\">)</span>   <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n            <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">smul_eq_mul</span><span class=\"o\">]</span>\n            <span class=\"n\">apply</span> <span class=\"n\">hconv.2</span> <span class=\"o\">(</span><span class=\"n\">Set.mem_univ</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Set.mem_univ</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">α</span><span class=\"o\">))</span> <span class=\"n\">_</span> <span class=\"n\">_</span>\n            <span class=\"bp\">·</span> <span class=\"n\">ring_nf</span>\n              <span class=\"n\">field_simp</span>\n            <span class=\"bp\">·</span> <span class=\"n\">apply</span> <span class=\"n\">div_nonneg</span> <span class=\"bp\">?</span><span class=\"n\">_</span> <span class=\"n\">hαpos.le</span>\n              <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">sub_nonneg</span><span class=\"o\">]</span>\n              <span class=\"n\">exact</span> <span class=\"n\">hy.le</span>\n            <span class=\"bp\">·</span> <span class=\"n\">apply</span> <span class=\"n\">div_nonneg</span> <span class=\"bp\">?</span><span class=\"n\">_</span> <span class=\"n\">hαpos.le</span>\n              <span class=\"n\">exact</span> <span class=\"n\">abs_nonneg</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">y</span><span class=\"o\">)</span>\n          <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"bp\">|</span><span class=\"n\">x</span><span class=\"bp\">-</span><span class=\"n\">y</span><span class=\"bp\">|</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"n\">g</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n      <span class=\"gr\">sorry</span>\n    <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 400566527,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1699287418
    },
    {
        "content": "<p>Just FYI I have started the general argument here: <a href=\"https://github.com/leanprover-community/mathlib/pull/17081\">!3#17081</a>. You might also be inspired by <span class=\"user-mention\" data-user-id=\"203577\">@Malo Jaffré</span>'s proof: <a href=\"https://github.com/leanprover-community/mathlib/compare/convex-continuous\">https://github.com/leanprover-community/mathlib/compare/convex-continuous</a></p>",
        "id": 400566545,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1699287423
    },
    {
        "content": "<p>(How many mathlib3 PRs of yours are gathering dust at this point?)</p>",
        "id": 400566642,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1699287462
    },
    {
        "content": "<p>~30. I am slowly but surely moving them to LeanCamCombi.</p>",
        "id": 400566792,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1699287509
    },
    {
        "content": "<p>(possibly forever now that bors is dead on mathlib3 too)</p>",
        "id": 400567177,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1699287612
    },
    {
        "content": "<p>Thanks everyone, what was my mistake? Should I have started by using the \\smul operation in the statement  instead so that I didn't end up in this situation?</p>",
        "id": 400568301,
        "sender_full_name": "Leo Shine",
        "timestamp": 1699287878
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span>  Cool I'll have a look</p>",
        "id": 400568522,
        "sender_full_name": "Leo Shine",
        "timestamp": 1699287958
    },
    {
        "content": "<p>The issue was using a lemma that's written in terms of smul and using it on a goal that uses <code>*</code>, which shouldn't really work but worked almost but not quite well enough here :)</p>",
        "id": 400574956,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1699289683
    }
]