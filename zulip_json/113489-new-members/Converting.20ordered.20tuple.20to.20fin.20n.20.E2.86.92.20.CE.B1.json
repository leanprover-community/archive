[
    {
        "content": "<p>Given <code>def tuple (n : ℕ) := fin n → Type u</code>, how do ai convert e.g. <code>(5, 23, 99)</code> to a <code>tuple 3</code>?</p>",
        "id": 358318198,
        "sender_full_name": "Martin C. Martin",
        "timestamp": 1684097175
    },
    {
        "content": "<p><code>![5, 23, 99]</code></p>",
        "id": 358318356,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1684097271
    },
    {
        "content": "<p>That's not working for me.  I'm in Lean 3, is that a Lean 4 construct?</p>",
        "id": 358319130,
        "sender_full_name": "Martin C. Martin",
        "timestamp": 1684097819
    },
    {
        "content": "<p>I get that <code>!</code> expects a bool.</p>",
        "id": 358319168,
        "sender_full_name": "Martin C. Martin",
        "timestamp": 1684097854
    },
    {
        "content": "<p>It's Lean 3 and it needs an import. Something like <code>data.vector.notation</code> or something?</p>",
        "id": 358319357,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1684097991
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.matrix.notation</span>\n\n<span class=\"k\">#check</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">2</span><span class=\"o\">,</span><span class=\"mi\">3</span><span class=\"o\">]</span> <span class=\"c1\">-- works</span>\n</code></pre></div>",
        "id": 358319504,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1684098083
    },
    {
        "content": "<p>Lean 4 has it too, with the same import</p>",
        "id": 358320383,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684098748
    },
    {
        "content": "<p>Thanks, that works!  My definition of tuple should be:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">tuple</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">α</span>\n</code></pre></div>",
        "id": 358456288,
        "sender_full_name": "Martin C. Martin",
        "timestamp": 1684156517
    },
    {
        "content": "<p>.</p>",
        "id": 358456995,
        "sender_full_name": "Martin C. Martin",
        "timestamp": 1684156679
    },
    {
        "content": "<p>You'll have an easier time if you put <code>@[reducible]</code> on that</p>",
        "id": 358464664,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684158423
    },
    {
        "content": "<p>How do I expand the notation?  For example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.matrix.notation</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"mi\">5</span><span class=\"o\">]</span> <span class=\"bp\">≠</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"mi\">5</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">matrix.cons_val_zero</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 358827817,
        "sender_full_name": "Martin C. Martin",
        "timestamp": 1684264661
    },
    {
        "content": "<p>(The <code>rw</code> fails saying there's no instance of <code>matrix.vec_cons</code> in <code>h</code>.)</p>",
        "id": 358827977,
        "sender_full_name": "Martin C. Martin",
        "timestamp": 1684264703
    },
    {
        "content": "<p>That's not what the error says, it says it can't find <code>matrix.vec_cons ?m_3 ?m_4 0</code></p>",
        "id": 358829154,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684265091
    },
    {
        "content": "<p>Which is true, <code>h</code> is of the form <code>matrix.vec_cons ?m_3 ?m_4  = _</code> without a <code>0</code> anywhere</p>",
        "id": 358829197,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684265103
    },
    {
        "content": "<p><code>rw function.ne_iff,</code> makes good progress on the original goal</p>",
        "id": 358829319,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684265146
    },
    {
        "content": "<p>Ah, thanks!</p>",
        "id": 358830517,
        "sender_full_name": "Martin C. Martin",
        "timestamp": 1684265519
    },
    {
        "content": "<p>And <code>dec_trivial</code> can just solve the original goal immediately</p>",
        "id": 358830673,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684265558
    },
    {
        "content": "<p>I hadn't heard of <code>dec_trivial</code> before.  Thanks.</p>",
        "id": 358832543,
        "sender_full_name": "Martin C. Martin",
        "timestamp": 1684266192
    },
    {
        "content": "<p>The type of <code>(3, 5)</code> is <code>ℕ × ℕ</code>.  The type of <code>(3, 5, 23)</code> is <code>ℕ × ℕ × ℕ</code>.  Is there an existing type for <code>ℕ^n</code>?</p>",
        "id": 358955352,
        "sender_full_name": "Martin C. Martin",
        "timestamp": 1684321980
    },
    {
        "content": "<p>I assume you're not looking for <code>fin n → ℕ</code>, since that's in the title of the thread already</p>",
        "id": 358955809,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684322134
    },
    {
        "content": "<p>What type do you want for <code>ℕ^0</code>?</p>",
        "id": 358955986,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684322177
    },
    {
        "content": "<p>I'm wondering what it would take to create a function from <code>ℕ^n</code> to <code>fin n → ℕ</code>.</p>",
        "id": 358956014,
        "sender_full_name": "Martin C. Martin",
        "timestamp": 1684322187
    },
    {
        "content": "<p>So I could say <code>(3, 5).tup</code> instead of <code>![3, 5]</code>.  The custom function from <code>ℕ^n</code> would probably be worse, but I just want to understand what's involved.</p>",
        "id": 358956484,
        "sender_full_name": "Martin C. Martin",
        "timestamp": 1684322319
    },
    {
        "content": "<p>You can write your own:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[reducible]</span> <span class=\"kd\">def</span> <span class=\"n\">nprod</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">unit</span>\n<span class=\"bp\">|</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"n\">α</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">nprod</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">ℕ</span> <span class=\"bp\">×</span> <span class=\"n\">ℕ</span> <span class=\"bp\">×</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">nprod</span> <span class=\"n\">ℕ</span> <span class=\"mi\">3</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>\n<p>but I wouldn't recommend it</p>",
        "id": 358956901,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684322427
    },
    {
        "content": "<p>Because now you have to deal with three different cases depending on the length of <code>n</code>, rather than just one or two</p>",
        "id": 358956947,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684322450
    },
    {
        "content": "<p>Ok, thanks.  I figured if the type didn't already exist, which it seems it doesn't, then that's probably because there are better ways to accomplish the same goal.  :)</p>",
        "id": 358957235,
        "sender_full_name": "Martin C. Martin",
        "timestamp": 1684322537
    },
    {
        "content": "<p>This seems to work slightly better as a definition:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">nprod</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">cases</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">unit</span> <span class=\"o\">},</span>\n  <span class=\"n\">induction</span> <span class=\"n\">n</span> <span class=\"k\">with</span> <span class=\"n\">n</span> <span class=\"n\">ih</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">α</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">ih</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n\n<span class=\"k\">#check</span> <span class=\"o\">((</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">nprod</span> <span class=\"n\">ℕ</span> <span class=\"mi\">3</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 358957435,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684322612
    },
    {
        "content": "<p>And then you can write what you asked for as</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">nprod.to_fin</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">n</span><span class=\"o\">},</span> <span class=\"n\">nprod</span> <span class=\"n\">α</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"bp\">!</span><span class=\"o\">[]</span>\n<span class=\"bp\">|</span> <span class=\"mi\">1</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"n\">x</span><span class=\"o\">]</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">xs</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">matrix.vec_cons</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">nprod.to_fin</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">xs</span><span class=\"o\">)</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">nprod.to_fin</span> <span class=\"o\">(</span><span class=\"k\">show</span> <span class=\"n\">nprod</span> <span class=\"n\">ℕ</span> <span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">))</span>\n</code></pre></div>",
        "id": 358957976,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684322804
    },
    {
        "content": "<p>Here's one more way</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">has_to_tuple</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">out_param</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">out_param</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span> <span class=\"n\">to_fun</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">has_to_tuple.base</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">has_to_tuple</span> <span class=\"n\">α</span> <span class=\"mi\">1</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"n\">a</span><span class=\"o\">]</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">has_to_tuple.prod</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">has_to_tuple</span> <span class=\"n\">β</span> <span class=\"n\">n</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">has_to_tuple</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">matrix.vec_cons</span> <span class=\"n\">a.1</span> <span class=\"o\">(</span><span class=\"n\">has_to_tuple.to_fun</span> <span class=\"n\">a.2</span><span class=\"o\">)</span> <span class=\"o\">}</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">has_to_tuple.to_fun</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">)</span>  <span class=\"c1\">-- ![1, 2, 3]</span>\n</code></pre></div>\n<p>If you never want to refer to <code>nprod</code> for a variable <code>n</code>, then this should be enough</p>",
        "id": 358958942,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684323107
    },
    {
        "content": "<p>Oh interesting, I haven't used the class stuff much, and hadn't thought of it as an alternative to definition by cases.  Cheers.</p>",
        "id": 358959263,
        "sender_full_name": "Martin C. Martin",
        "timestamp": 1684323215
    },
    {
        "content": "<p>Classes are the tool you need if the thing you want to case on is the type itself</p>",
        "id": 358959413,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684323261
    }
]