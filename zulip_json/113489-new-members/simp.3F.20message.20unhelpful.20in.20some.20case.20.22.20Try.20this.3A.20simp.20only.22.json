[
    {
        "content": "<p>I am wondering why there is no indication in the second case below.<br>\n(I tried with 4.0 and 4.3.0-rc1 it seems the same)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">MySet2</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">2</span><span class=\"o\">}</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">∈</span> <span class=\"n\">MySet2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">MySet2</span><span class=\"o\">]</span>\n  <span class=\"n\">simp</span><span class=\"bp\">?</span>  <span class=\"c1\">-- Try this: simp only [Set.mem_singleton_iff, Set.mem_insert_iff]</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">∈</span> <span class=\"n\">MySet2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">MySet2</span><span class=\"o\">]</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">@</span><span class=\"n\">Set.mem_insert_iff</span><span class=\"o\">]</span>\n  <span class=\"n\">simp</span><span class=\"bp\">?</span> <span class=\"c1\">-- Try this: simp only</span>\n</code></pre></div>",
        "id": 401501528,
        "sender_full_name": "Nicolas Rolland",
        "timestamp": 1699699959
    },
    {
        "content": "<p>Well, <code>simp only</code> seems to solve it?</p>",
        "id": 401503955,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1699702202
    },
    {
        "content": "<p>Yes, but I imagined it would tell me by which lemma, just like in the other case.</p>\n<p>isn't <code>simp only [lemma, lemma'm ..]</code>  supposed to restrict <code>simp</code>. I imagine <code>simp only</code> without anything just does <code>simp</code></p>\n<p><a href=\"https://leanprover-community.github.io/extras/simp.html\">https://leanprover-community.github.io/extras/simp.html</a></p>",
        "id": 401506778,
        "sender_full_name": "Nicolas Rolland",
        "timestamp": 1699704827
    },
    {
        "content": "<p>No, it does simp only with an empty list.</p>",
        "id": 401515533,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1699712963
    },
    {
        "content": "<p><code>simp? (config := {decide := false})</code> gives you a list of lemmas</p>",
        "id": 401527823,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1699720475
    },
    {
        "content": "<p>(this will be the default in the next lean release)</p>",
        "id": 401527835,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1699720488
    },
    {
        "content": "<p>This is probably clear from Eric's message, but just to be sure: <code>simp only</code> is not the same as <code>simp</code>, but in the current version of Lean both <code>simp only</code> and <code>simp</code> try to use decidability instances. Since <code>decide</code> closes your goal, so does <code>simp only</code>. <code>simp (config := {decide := false}) only</code> does not close your goal.</p>",
        "id": 401528408,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1699721109
    }
]