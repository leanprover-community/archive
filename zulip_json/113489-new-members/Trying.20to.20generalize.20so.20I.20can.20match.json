[
    {
        "content": "<p>I'm trying to mess around with creating a lambda calculus and am having trouble with a specific proof that I'm not sure how to approach in Lean. My MWE is below (there's probably a smaller one, but this keeps everything in context).</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Typ</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">number</span>\n\n<span class=\"n\">abbrev</span> <span class=\"n\">Ctx</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span> <span class=\"n\">List</span> <span class=\"n\">Typ</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">InCtx</span> <span class=\"o\">:</span> <span class=\"n\">Ctx</span> <span class=\"bp\">→</span> <span class=\"n\">Typ</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">here</span> <span class=\"o\">{</span><span class=\"bp\">Γ</span> <span class=\"o\">:</span> <span class=\"n\">Ctx</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">typ</span> <span class=\"o\">:</span> <span class=\"n\">Typ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">InCtx</span> <span class=\"o\">(</span><span class=\"n\">typ</span> <span class=\"o\">::</span> <span class=\"bp\">Γ</span><span class=\"o\">)</span> <span class=\"n\">typ</span>\n  <span class=\"bp\">|</span> <span class=\"n\">there</span> <span class=\"o\">{</span><span class=\"bp\">Γ</span> <span class=\"o\">:</span> <span class=\"n\">Ctx</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">typ₁</span> <span class=\"n\">typ₂</span> <span class=\"o\">:</span> <span class=\"n\">Typ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">InCtx</span> <span class=\"bp\">Γ</span> <span class=\"n\">typ₂</span> <span class=\"bp\">→</span> <span class=\"n\">InCtx</span> <span class=\"o\">(</span><span class=\"n\">typ₁</span> <span class=\"o\">::</span> <span class=\"bp\">Γ</span><span class=\"o\">)</span> <span class=\"n\">typ₂</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">Term</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">Γ</span> <span class=\"o\">:</span> <span class=\"n\">Ctx</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">typ</span> <span class=\"o\">:</span> <span class=\"n\">Typ</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">var</span> <span class=\"o\">{</span><span class=\"bp\">Γ</span> <span class=\"o\">:</span> <span class=\"n\">Ctx</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">typ</span> <span class=\"o\">:</span> <span class=\"n\">Typ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">InCtx</span> <span class=\"bp\">Γ</span> <span class=\"n\">typ</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">Term</span> <span class=\"bp\">Γ</span> <span class=\"n\">typ</span>\n  <span class=\"bp\">|</span> <span class=\"n\">number</span> <span class=\"o\">{</span><span class=\"bp\">Γ</span> <span class=\"o\">:</span> <span class=\"n\">Ctx</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Term</span> <span class=\"bp\">Γ</span> <span class=\"n\">Typ.number</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">«</span><span class=\"k\">let</span><span class=\"bp\">»</span> <span class=\"o\">{</span><span class=\"bp\">Γ</span> <span class=\"o\">:</span> <span class=\"n\">Ctx</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">typ₁</span> <span class=\"n\">typ₂</span> <span class=\"o\">:</span> <span class=\"n\">Typ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">t₁</span> <span class=\"o\">:</span> <span class=\"n\">Term</span> <span class=\"bp\">Γ</span> <span class=\"n\">typ₁</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">t₂</span> <span class=\"o\">:</span> <span class=\"n\">Term</span> <span class=\"o\">(</span><span class=\"n\">typ₁</span> <span class=\"o\">::</span> <span class=\"bp\">Γ</span><span class=\"o\">)</span> <span class=\"n\">typ₂</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Term</span> <span class=\"bp\">Γ</span> <span class=\"n\">typ₂</span>\n\n<span class=\"n\">abbrev</span> <span class=\"n\">Rename</span> <span class=\"o\">(</span><span class=\"bp\">Γ</span> <span class=\"bp\">Δ</span> <span class=\"o\">:</span> <span class=\"n\">Ctx</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">typ</span> <span class=\"o\">:</span> <span class=\"n\">Typ</span><span class=\"o\">},</span> <span class=\"o\">(</span><span class=\"n\">InCtx</span> <span class=\"bp\">Γ</span> <span class=\"n\">typ</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">InCtx</span> <span class=\"bp\">Δ</span> <span class=\"n\">typ</span><span class=\"o\">)</span>\n\n<span class=\"n\">abbrev</span> <span class=\"n\">Subst</span> <span class=\"o\">(</span><span class=\"bp\">Γ</span> <span class=\"bp\">Δ</span> <span class=\"o\">:</span> <span class=\"n\">Ctx</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">typ</span> <span class=\"o\">:</span> <span class=\"n\">Typ</span><span class=\"o\">},</span> <span class=\"o\">(</span><span class=\"n\">InCtx</span> <span class=\"bp\">Γ</span> <span class=\"n\">typ</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">Term</span> <span class=\"bp\">Δ</span> <span class=\"n\">typ</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">ext</span> <span class=\"o\">{</span><span class=\"bp\">Γ</span> <span class=\"bp\">Δ</span> <span class=\"o\">:</span> <span class=\"n\">Ctx</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">typ</span> <span class=\"o\">:</span> <span class=\"n\">Typ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">ρ</span> <span class=\"o\">:</span> <span class=\"n\">Rename</span> <span class=\"bp\">Γ</span> <span class=\"bp\">Δ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Rename</span> <span class=\"o\">(</span><span class=\"n\">typ</span> <span class=\"o\">::</span> <span class=\"bp\">Γ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">typ</span> <span class=\"o\">::</span> <span class=\"bp\">Δ</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"bp\">.</span><span class=\"n\">here</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">InCtx.here</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"bp\">.</span><span class=\"n\">there</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">InCtx.there</span> <span class=\"o\">(</span><span class=\"n\">ρ</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">rename</span> <span class=\"o\">{</span><span class=\"bp\">Γ</span> <span class=\"bp\">Δ</span> <span class=\"o\">:</span> <span class=\"n\">Ctx</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">typ</span> <span class=\"o\">:</span> <span class=\"n\">Typ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">ρ</span> <span class=\"o\">:</span> <span class=\"n\">Rename</span> <span class=\"bp\">Γ</span> <span class=\"bp\">Δ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">Term</span> <span class=\"bp\">Γ</span> <span class=\"n\">typ</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">Term</span> <span class=\"bp\">Δ</span> <span class=\"n\">typ</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">var</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Term.var</span> <span class=\"o\">(</span><span class=\"n\">ρ</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">number</span> <span class=\"n\">num</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Term.number</span> <span class=\"n\">num</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"k\">let</span> <span class=\"n\">t₁</span> <span class=\"n\">t₂</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Term.let</span> <span class=\"o\">(</span><span class=\"n\">rename</span> <span class=\"n\">ρ</span> <span class=\"n\">t₁</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">rename</span> <span class=\"o\">(</span><span class=\"n\">ext</span> <span class=\"n\">ρ</span><span class=\"o\">)</span> <span class=\"n\">t₂</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">exts</span> <span class=\"o\">{</span><span class=\"bp\">Γ</span> <span class=\"bp\">Δ</span> <span class=\"o\">:</span> <span class=\"n\">Ctx</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">typ</span> <span class=\"o\">:</span> <span class=\"n\">Typ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">σ</span> <span class=\"o\">:</span> <span class=\"n\">Subst</span> <span class=\"bp\">Γ</span> <span class=\"bp\">Δ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Subst</span> <span class=\"o\">(</span><span class=\"n\">typ</span> <span class=\"o\">::</span> <span class=\"bp\">Γ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">typ</span> <span class=\"o\">::</span> <span class=\"bp\">Δ</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"bp\">.</span><span class=\"n\">here</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Term.var</span> <span class=\"n\">InCtx.here</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"bp\">.</span><span class=\"n\">there</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rename</span> <span class=\"n\">InCtx.there</span> <span class=\"o\">(</span><span class=\"n\">σ</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">subst</span> <span class=\"o\">{</span><span class=\"bp\">Γ</span> <span class=\"bp\">Δ</span> <span class=\"o\">:</span> <span class=\"n\">Ctx</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">typ</span> <span class=\"o\">:</span> <span class=\"n\">Typ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">σ</span> <span class=\"o\">:</span> <span class=\"n\">Subst</span> <span class=\"bp\">Γ</span> <span class=\"bp\">Δ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">Term</span> <span class=\"bp\">Γ</span> <span class=\"n\">typ</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">Term</span> <span class=\"bp\">Δ</span> <span class=\"n\">typ</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">var</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">σ</span> <span class=\"n\">a</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">number</span> <span class=\"n\">num</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Term.number</span> <span class=\"n\">num</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"k\">let</span> <span class=\"n\">t₁</span> <span class=\"n\">t₂</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Term.let</span> <span class=\"o\">(</span><span class=\"n\">subst</span> <span class=\"n\">σ</span> <span class=\"n\">t₁</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">subst</span> <span class=\"o\">(</span><span class=\"n\">exts</span> <span class=\"n\">σ</span><span class=\"o\">)</span> <span class=\"n\">t₂</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">zero</span> <span class=\"o\">{</span><span class=\"bp\">Γ</span> <span class=\"o\">:</span> <span class=\"n\">Ctx</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">typ</span> <span class=\"o\">:</span> <span class=\"n\">Typ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">Term</span> <span class=\"bp\">Γ</span> <span class=\"n\">typ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Subst</span> <span class=\"o\">(</span><span class=\"n\">typ</span> <span class=\"o\">::</span> <span class=\"bp\">Γ</span><span class=\"o\">)</span> <span class=\"bp\">Γ</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"bp\">.</span><span class=\"n\">here</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">t</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"bp\">.</span><span class=\"n\">there</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Term.var</span> <span class=\"n\">a</span>\n\n<span class=\"n\">abbrev</span> <span class=\"n\">subst_zero</span> <span class=\"o\">{</span><span class=\"bp\">Γ</span> <span class=\"o\">:</span> <span class=\"n\">Ctx</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">typ</span> <span class=\"n\">typ'</span> <span class=\"o\">:</span> <span class=\"n\">Typ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">Term</span> <span class=\"bp\">Γ</span> <span class=\"n\">typ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">t'</span> <span class=\"o\">:</span> <span class=\"n\">Term</span> <span class=\"o\">(</span><span class=\"n\">typ</span> <span class=\"o\">::</span> <span class=\"bp\">Γ</span><span class=\"o\">)</span> <span class=\"n\">typ'</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Term</span> <span class=\"bp\">Γ</span> <span class=\"n\">typ'</span> <span class=\"o\">:=</span> <span class=\"n\">subst</span> <span class=\"o\">(</span><span class=\"n\">zero</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"n\">t'</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">Reduction</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"bp\">Γ</span> <span class=\"o\">:</span> <span class=\"n\">Ctx</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"o\">{</span><span class=\"n\">typ</span> <span class=\"o\">:</span> <span class=\"n\">Typ</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"n\">Term</span> <span class=\"bp\">Γ</span> <span class=\"n\">typ</span> <span class=\"bp\">→</span> <span class=\"n\">Term</span> <span class=\"bp\">Γ</span> <span class=\"n\">typ</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">ξ_let</span> <span class=\"o\">{</span><span class=\"bp\">Γ</span> <span class=\"o\">:</span> <span class=\"n\">Ctx</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">typ</span> <span class=\"o\">:</span> <span class=\"n\">Typ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">t₁</span> <span class=\"n\">t₁'</span> <span class=\"o\">:</span> <span class=\"n\">Term</span> <span class=\"bp\">Γ</span> <span class=\"n\">typ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">t₂</span> <span class=\"o\">:</span> <span class=\"n\">Term</span> <span class=\"o\">(</span><span class=\"n\">typ</span> <span class=\"o\">::</span> <span class=\"bp\">Γ</span><span class=\"o\">)</span> <span class=\"n\">typ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">Reduction</span> <span class=\"n\">t₁</span> <span class=\"n\">t₁'</span> <span class=\"bp\">→</span> <span class=\"n\">Reduction</span> <span class=\"o\">(</span><span class=\"n\">Term.let</span> <span class=\"n\">t₁</span> <span class=\"n\">t₂</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Term.let</span> <span class=\"n\">t₁'</span> <span class=\"n\">t₂</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">β_let</span> <span class=\"o\">{</span><span class=\"bp\">Γ</span> <span class=\"o\">:</span> <span class=\"n\">Ctx</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">typ</span> <span class=\"o\">:</span> <span class=\"n\">Typ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">t₁</span> <span class=\"o\">:</span> <span class=\"n\">Term</span> <span class=\"bp\">Γ</span> <span class=\"n\">typ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">t₂</span> <span class=\"o\">:</span> <span class=\"n\">Term</span> <span class=\"o\">(</span><span class=\"n\">typ</span> <span class=\"o\">::</span> <span class=\"bp\">Γ</span><span class=\"o\">)</span> <span class=\"n\">typ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">Reduction</span> <span class=\"o\">(</span><span class=\"n\">Term.let</span> <span class=\"n\">t₁</span> <span class=\"n\">t₂</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">subst_zero</span> <span class=\"n\">t₁</span> <span class=\"n\">t₂</span><span class=\"o\">)</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">thm</span>\n  <span class=\"o\">{</span><span class=\"bp\">Γ</span> <span class=\"o\">:</span> <span class=\"n\">Ctx</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">typ₁</span> <span class=\"n\">typ₂</span> <span class=\"o\">:</span> <span class=\"n\">Typ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">t₁</span> <span class=\"n\">t₁'</span> <span class=\"o\">:</span> <span class=\"n\">Term</span> <span class=\"bp\">Γ</span> <span class=\"n\">typ₁</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">t₂</span> <span class=\"o\">:</span> <span class=\"n\">Term</span> <span class=\"o\">(</span><span class=\"n\">typ₁</span> <span class=\"o\">::</span> <span class=\"bp\">Γ</span><span class=\"o\">)</span> <span class=\"n\">typ₂</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">tr</span> <span class=\"o\">:</span> <span class=\"n\">Reduction</span> <span class=\"o\">(</span><span class=\"n\">Term.let</span> <span class=\"n\">t₁</span> <span class=\"n\">t₂</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Term.let</span> <span class=\"n\">t₁'</span> <span class=\"n\">t₂</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∃</span> <span class=\"n\">tr'</span> <span class=\"o\">:</span> <span class=\"n\">Reduction</span> <span class=\"n\">t₁</span> <span class=\"n\">t₁'</span><span class=\"o\">,</span> <span class=\"n\">tr</span> <span class=\"bp\">=</span> <span class=\"n\">Reduction.ξ_let</span> <span class=\"n\">tr'</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span>\n  <span class=\"c1\">-- This gives error: tactic 'generalize' failed, result is not type correct - ∀ (tmp : Term Γ typ₂) (tr : Reduction (Term.let t₁ t₂) tmp), ∃ tr', tr = Reduction.ξ_let</span>\n  <span class=\"c1\">-- generalize Term.let t₁' t₂ = tmp at tr</span>\n\n  <span class=\"k\">match</span> <span class=\"n\">tr</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">ξ_let</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"gr\">sorry</span>\n  <span class=\"c1\">-- This gives error</span>\n  <span class=\"c1\">-- type mismatch</span>\n  <span class=\"c1\">--   Reduction.β_let</span>\n  <span class=\"c1\">-- has type</span>\n  <span class=\"c1\">--   Reduction (Term.let t₁ t₂) (subst_zero t₁ t₂) : Type</span>\n  <span class=\"c1\">-- but is expected to have type</span>\n  <span class=\"c1\">--   Reduction (Term.let t₁ t₂) (Term.let t₁' t₂) : Type</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">β_let</span> <span class=\"bp\">=&gt;</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>I'm trying to prove the last theorem (it was originally part of a larger proof but I've made it more isolated to focus on the problem). Essentially, I want to pattern match on <code>tr</code> but can't because Lean tries to unify in the case of <code>β_let</code>. This case is impossible but I'm not sure how or where I can convince Lean of this. I tried generalizing the target term of the reduction so it could be unified, but it says the result is not type correct (I don't totally understand why this is the case). Does anyone have a suggestion for how I can proceed with the proof?</p>",
        "id": 351876547,
        "sender_full_name": "sgcs",
        "timestamp": 1682170039
    },
    {
        "content": "<p>I think the short answer is that having functions in type indices makes it hard to do cases.</p>\n<p>I'm not sure what the best thing to do is, but one strategy you could take is to redefine <code>Reduction</code> have</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"bp\">|</span> <span class=\"n\">β_let</span> <span class=\"o\">{</span><span class=\"bp\">Γ</span> <span class=\"o\">:</span> <span class=\"n\">Ctx</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">typ</span> <span class=\"o\">:</span> <span class=\"n\">Typ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">t₁</span> <span class=\"o\">:</span> <span class=\"n\">Term</span> <span class=\"bp\">Γ</span> <span class=\"n\">typ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">t₂</span> <span class=\"o\">:</span> <span class=\"n\">Term</span> <span class=\"o\">(</span><span class=\"n\">typ</span> <span class=\"o\">::</span> <span class=\"bp\">Γ</span><span class=\"o\">)</span> <span class=\"n\">typ</span><span class=\"o\">}</span>\n      <span class=\"o\">(</span><span class=\"n\">t₃</span> <span class=\"o\">:</span> <span class=\"n\">Term</span> <span class=\"bp\">Γ</span> <span class=\"n\">typ'</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">subst_zero</span> <span class=\"n\">t₁</span> <span class=\"n\">t₂</span> <span class=\"bp\">=</span> <span class=\"n\">t₃</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Reduction</span> <span class=\"o\">(</span><span class=\"n\">Term.let</span> <span class=\"n\">t₁</span> <span class=\"n\">t₂</span><span class=\"o\">)</span> <span class=\"n\">t₃</span>\n</code></pre></div>\n<p>which makes it easier to make progress. (By the way, it looks like you need to use <code>cases</code> instead of <code>match</code>. I don't understand the error, but I'm getting \"tag not found\". The only difference in syntax is that you drop the <code>.</code>s.)</p>",
        "id": 351902950,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1682178175
    },
    {
        "content": "<p>I think of this transformation as some kind of \"pre-generalization\". The biggest tradeoff I see is that dependent elimination might not auto-exclude cases for you, since relevant information is behind equalities inside the constructor.</p>",
        "id": 351903219,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1682178272
    },
    {
        "content": "<p>Thanks, that seems to get everything working. Does seem a bit unfortunate that I can't generalize in the proof since, as you said, it does have tradeoffs but at least they're manageable.</p>",
        "id": 351904275,
        "sender_full_name": "sgcs",
        "timestamp": 1682178718
    }
]