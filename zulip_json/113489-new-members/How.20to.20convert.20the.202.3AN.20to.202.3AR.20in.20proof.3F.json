[
    {
        "content": "<p>I have this problem:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Real.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Complex.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Analysis.SpecialFunctions.Pow.Real</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.FieldTheory.Perfect</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hy</span> <span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"bp\">≥</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span><span class=\"bp\">*</span><span class=\"n\">y</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">→</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">Real.sqrt</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h1</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mul_comm</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">div_left_inj'</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">mul_div_assoc</span><span class=\"o\">,</span> <span class=\"n\">mul_div_assoc</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h1</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"k\">show</span> <span class=\"n\">x</span><span class=\"bp\">/</span><span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"kd\">by</span> <span class=\"n\">apply</span> <span class=\"n\">div_self</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">mul_one</span><span class=\"o\">,</span> <span class=\"n\">mul_one</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h1</span>\n  <span class=\"k\">have</span> <span class=\"n\">h1'</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">apply</span> <span class=\"n\">Eq.symm</span> <span class=\"n\">h1</span>\n  <span class=\"k\">have</span> <span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"o\">((</span><span class=\"mi\">2</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"o\">((</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">)</span><span class=\"bp\">/</span><span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"mi\">2</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">norm_num</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Real.sqrt_eq_rpow</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">nth_rw</span> <span class=\"mi\">1</span> <span class=\"o\">[</span><span class=\"n\">h2</span><span class=\"o\">,</span> <span class=\"n\">h1</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">norm_num</span>\n  <span class=\"n\">apply</span> <span class=\"n\">Eq.symm</span>\n  <span class=\"k\">calc</span>\n    <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"bp\">/</span><span class=\"mi\">2</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">Real.rpow_mul</span> <span class=\"n\">hy</span><span class=\"o\">]</span>\n    <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">norm_num</span>\n</code></pre></div>\n<p>The error in the goal statement looks like: <br>\n<a href=\"/user_uploads/3121/BRIrEezrTMt4Hc2YesZDoWmQ/Screenshot-2023-11-08-170853.png\">Screenshot-2023-11-08-170853.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/BRIrEezrTMt4Hc2YesZDoWmQ/Screenshot-2023-11-08-170853.png\" title=\"Screenshot-2023-11-08-170853.png\"><img src=\"/user_uploads/3121/BRIrEezrTMt4Hc2YesZDoWmQ/Screenshot-2023-11-08-170853.png\"></a></div><p>The difference I found out was the first 2 is a natural number but the calc block uses a real number 2 instead.  How do I convert?</p>",
        "id": 401032483,
        "sender_full_name": "Colin Jones ⚛️",
        "timestamp": 1699481798
    },
    {
        "content": "<p>There are ways to convert, but they will not work in this case as the natural number <code>1/2</code> is actually 0 (division of the natural numbers is defined to be floor division) so instead you should try to never introduce <code>1/2</code> as a natural number in the first place. You can use a type ascription like <code>(y ^ 2) ^ (1 / 2 : ℝ)</code> to force the meaning you want, but the proof you have written there in the calc block wont work any more without changes</p>",
        "id": 401035649,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1699483446
    },
    {
        "content": "<p>Is this <a href=\"https://github.com/leanprover/lean4/pull/2220\">lean4#2220</a> again?</p>",
        "id": 401038602,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1699485131
    },
    {
        "content": "<p>It’s not the 1/2 that’s the issue. It’s the first number 2 in y^2 that’s causing the discrepancy.</p>",
        "id": 401038905,
        "sender_full_name": "Colin Jones ⚛️",
        "timestamp": 1699485358
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113489-new-members/topic/How.20to.20convert.20the.202.3AN.20to.202.3AR.20in.20proof.3F/near/401038602\">said</a>:</p>\n<blockquote>\n<p>Is this <a href=\"https://github.com/leanprover/lean4/pull/2220\">lean4#2220</a> again?</p>\n</blockquote>\n<p>Is it a bug?</p>",
        "id": 401038998,
        "sender_full_name": "Colin Jones ⚛️",
        "timestamp": 1699485396
    },
    {
        "content": "<p>Can anyone offer a way to fix this?</p>",
        "id": 401856504,
        "sender_full_name": "Colin Jones ⚛️",
        "timestamp": 1699914860
    },
    {
        "content": "<p>Have you tried adding</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">macro_rules</span> <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"bp\">$</span><span class=\"n\">y</span><span class=\"o\">)</span>   <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">HPow.hPow</span> <span class=\"bp\">$</span><span class=\"n\">x</span> <span class=\"bp\">$</span><span class=\"n\">y</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>to the top of your file?</p>",
        "id": 401859370,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1699916377
    },
    {
        "content": "<p>Colin, this is a workaround for a Lean 4 issue that's been already fixed. We're working on updating mathlib to the newest version of Lean 4 at the moment, so it shouldn't be necessary soon.</p>",
        "id": 401859680,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1699916490
    },
    {
        "content": "<p>This workaround makes it so you can reliably control whether you're getting the <code>^</code> with a Nat exponent or a Real exponent by inserting type ascriptions.</p>",
        "id": 401859887,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1699916561
    }
]