[
    {
        "content": "<p>I'm stuck trying to prove the following; is there a standard theorem for this? (It seems relatively basic, so I'd guess so). The math reasoning would be : extend a finite set S to an infinite set S by appending the empty-set infinitely often; by 'he' we can then use the hypothesis hcountable_union. </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">universe</span> <span class=\"n\">u</span>\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">finite_from_union</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">he</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">∅</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hcountable_union</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"o\">(</span><span class=\"n\">Set</span> <span class=\"n\">X</span><span class=\"o\">)),</span> <span class=\"n\">S.Countable</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">s</span> <span class=\"bp\">∈</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"bp\">⋃</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">s</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"o\">(</span><span class=\"n\">Set</span> <span class=\"n\">X</span><span class=\"o\">)),</span> <span class=\"n\">S.Finite</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">s</span> <span class=\"bp\">∈</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"bp\">⋃</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">s</span><span class=\"o\">))</span>\n</code></pre></div>",
        "id": 408550836,
        "sender_full_name": "Josha Dekker",
        "timestamp": 1702884869
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 408553046,
        "sender_full_name": "Josha Dekker",
        "timestamp": 1702885621
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Set.Countable#doc\">docs#Set.Countable</a></p>",
        "id": 408572950,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1702893140
    },
    {
        "content": "<p>Looks to me like finite sets are countable in lean so you don't need to do any extending.</p>",
        "id": 408573070,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1702893197
    },
    {
        "content": "<p>So just use <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Set.Finite.countable#doc\">docs#Set.Finite.countable</a> (found with <a href=\"http://moogle.ai\">moogle.ai</a>)</p>",
        "id": 408573432,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1702893323
    },
    {
        "content": "<p>Excellent, thank you! I tried Google, but somehow must've overlooked this one!</p>",
        "id": 408580167,
        "sender_full_name": "Josha Dekker",
        "timestamp": 1702895550
    },
    {
        "content": "<p>(now at a computer)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n<span class=\"kd\">universe</span> <span class=\"n\">u</span>\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">finite_from_union</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">he</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">∅</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">hcountable_union</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"o\">(</span><span class=\"n\">Set</span> <span class=\"n\">X</span><span class=\"o\">)),</span> <span class=\"n\">S.Countable</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">s</span> <span class=\"bp\">∈</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"bp\">⋃</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">s</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n    <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"o\">(</span><span class=\"n\">Set</span> <span class=\"n\">X</span><span class=\"o\">)),</span> <span class=\"n\">S.Finite</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">s</span> <span class=\"bp\">∈</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"bp\">⋃</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">peel</span> <span class=\"n\">hcountable_union</span> <span class=\"k\">with</span> <span class=\"n\">hS</span> <span class=\"n\">S</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h</span>\n  <span class=\"n\">apply</span> <span class=\"n\">hS</span>\n  <span class=\"n\">exact</span> <span class=\"n\">Set.Finite.countable</span> <span class=\"n\">h</span>\n</code></pre></div>",
        "id": 408581979,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1702896182
    },
    {
        "content": "<p>Thank you, that works neatly!</p>",
        "id": 408584450,
        "sender_full_name": "Josha Dekker",
        "timestamp": 1702897066
    }
]