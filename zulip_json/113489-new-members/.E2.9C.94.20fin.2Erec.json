[
    {
        "content": "<p>Could someone please explain to me what is fin.rec and how should I work with it? In particular, I have the following state:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">L</span><span class=\"o\">:</span> <span class=\"n\">arith_lang</span>\n<span class=\"n\">S</span><span class=\"o\">:</span> <span class=\"n\">arith_struc</span> <span class=\"n\">L</span>\n<span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"bp\">+</span>\n<span class=\"n\">rel</span><span class=\"o\">:</span> <span class=\"n\">L.to_lang.R</span> <span class=\"n\">n</span>\n<span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">∈</span> <span class=\"o\">(</span><span class=\"n\">vector.of_fn</span> <span class=\"n\">L.ar</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">to_list</span>\n<span class=\"n\">rel_val</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span>\n<span class=\"n\">rel_property</span><span class=\"o\">:</span> <span class=\"n\">rel_val</span> <span class=\"bp\">&lt;</span> <span class=\"n\">list.count</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">vector.of_fn</span> <span class=\"n\">L.ar</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">to_list</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">fin.rec</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">rel_val</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">rel_property</span> <span class=\"o\">:</span> <span class=\"n\">rel_val</span> <span class=\"bp\">&lt;</span> <span class=\"n\">list.count</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">vector.of_fn</span> <span class=\"n\">L.ar</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">to_list</span><span class=\"o\">),</span> <span class=\"n\">S.rels.nth</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">list.index_of_nth_entry</span> <span class=\"o\">(</span><span class=\"n\">vector.of_fn</span> <span class=\"n\">L.ar</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">to_list</span> <span class=\"n\">rel_val</span> <span class=\"n\">n</span> <span class=\"n\">rel_property</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">_.mp</span> <span class=\"n\">rel</span><span class=\"o\">)</span> <span class=\"bp\">∈</span> <span class=\"n\">S.rels.to_list</span>\n</code></pre></div>\n<p>And I would like to apply the underlying lambda expression to rel_val and rel_property values that I have in order to simplify the goal to something like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">S.rels.nth</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">list.index_of_nth_entry</span> <span class=\"o\">(</span><span class=\"n\">vector.of_fn</span> <span class=\"n\">L.ar</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">to_list</span> <span class=\"n\">rel_val</span> <span class=\"n\">n</span> <span class=\"n\">rel_property</span><span class=\"o\">)</span> <span class=\"bp\">∈</span> <span class=\"n\">S.rels.to_list</span>\n</code></pre></div>\n<p>However, I can't seem to figure out how to do that. Strangely enough, when I click on fin.rec and go to definition, vscode sends me to the definition of fin, which doesn't make a whole lot of sense to me, since S.rels.to_list has type <code>list (formula ordered_semiring_lang)</code> (which kinda has nothing to do with <code>fin</code>)<br>\nP.S. I am incredibly sorry, but I don't think I can provide a MWE in this case, seeing that there is quite a lot of code in the project</p>",
        "id": 347912601,
        "sender_full_name": "Ilya Dudnikov",
        "timestamp": 1680983536
    },
    {
        "content": "<p>It might help to know the type of the <code>_</code> in <code>_.mp rel</code>. Also, am I correct that <code>L.to_lang.R n</code> is a <code>fin</code>?</p>",
        "id": 347918682,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1680988272
    },
    {
        "content": "<p>What you should know about <code>fin.rec</code> is that <code>fin.rec f (fin.mk val property) = f val property</code> is true by definition. It comes from the <code>structure</code> command itself.</p>",
        "id": 347918783,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1680988394
    },
    {
        "content": "<p>There are a couple strategies you could use here. They revolve around trying to split up the second argument so that <code>simp</code> can do something about it. Maybe <code>cases rel</code> then <code>simp</code> will do it if you're lucky?</p>",
        "id": 347918886,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1680988491
    },
    {
        "content": "<p>Maybe this theorem might help:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">fin.rec_eq</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">motive</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"kt\">Sort</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">val</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">property</span> <span class=\"o\">:</span> <span class=\"n\">val</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">),</span> <span class=\"n\">motive</span> <span class=\"o\">⟨</span><span class=\"n\">val</span><span class=\"o\">,</span> <span class=\"n\">property</span><span class=\"o\">⟩)</span>\n  <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">@</span><span class=\"n\">fin.rec</span> <span class=\"n\">n</span> <span class=\"n\">motive</span> <span class=\"n\">f</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"n\">m.eta</span> <span class=\"n\">m.property</span> <span class=\"bp\">▸</span> <span class=\"n\">f</span> <span class=\"n\">m.val</span> <span class=\"n\">m.property</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">cases</span> <span class=\"n\">m</span><span class=\"o\">,</span>\n  <span class=\"n\">refl</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>Unfortunately there's an <code>eq.subst</code> (the <code>▸</code>) since <code>⟨m.val, m.property⟩ = m</code> is not a definitional equality. (It would use the \"eta for structures\" rule, which Lean 3 does not have.)</p>",
        "id": 347919558,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1680989163
    },
    {
        "content": "<p>I just noticed you have <code>rel_val</code> and <code>rel_property</code> in your context, suggesting you've already done <code>cases</code> on <code>rel</code>, but <code>rel</code> itself wasn't eliminated. There's <code>cases h : rel</code> to preserve the connection as an equality named <code>h</code>.</p>",
        "id": 347920084,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1680989633
    },
    {
        "content": "<p>Yeah maybe the right question is \" how did you get that in your goal and are you sure you took the right turn at that point\"?</p>",
        "id": 347944691,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1681007338
    },
    {
        "content": "<p>I most certainly am not sure I took the right turn at that point. Here's how I got it in my goal:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">rel_to_formula</span> <span class=\"o\">{</span><span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"n\">arith_lang</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">arith_struc</span> <span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"bp\">+</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">rel</span> <span class=\"o\">:</span> <span class=\"n\">L.to_lang.R</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">formula</span> <span class=\"n\">ordered_semiring_lang</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"n\">ar_vec</span> <span class=\"o\">:=</span> <span class=\"n\">vector.of_fn</span> <span class=\"n\">L.ar</span> <span class=\"k\">in</span>\n  <span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">∈</span> <span class=\"n\">ar_vec.to_list</span> <span class=\"k\">then</span>\n  <span class=\"kd\">by</span> <span class=\"o\">{</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">arith_lang.to_lang</span><span class=\"o\">,</span> <span class=\"n\">if_pos</span> <span class=\"n\">h</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">rel</span><span class=\"o\">,</span>\n    <span class=\"n\">cases</span> <span class=\"n\">rel</span><span class=\"o\">,</span>\n    <span class=\"k\">let</span> <span class=\"n\">index</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">vector.of_fn</span> <span class=\"n\">L.ar</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">to_list.index_of_nth_entry</span> <span class=\"n\">rel_val</span> <span class=\"n\">n</span> <span class=\"n\">rel_property</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">S.rels.nth</span> <span class=\"n\">index</span>\n  <span class=\"o\">}</span>\n  <span class=\"k\">else</span> <span class=\"bp\">⊥'</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">rel_to_formula_in_rels</span> <span class=\"o\">{</span><span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"n\">arith_lang</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">arith_struc</span> <span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"bp\">+</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">rel</span> <span class=\"o\">:</span> <span class=\"n\">L.to_lang.R</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">n</span> <span class=\"bp\">∈</span> <span class=\"o\">(</span><span class=\"n\">vector.of_fn</span> <span class=\"n\">L.ar</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">to_list</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">rel_to_formula</span> <span class=\"n\">S</span> <span class=\"n\">rel</span><span class=\"o\">)</span> <span class=\"bp\">∈</span> <span class=\"n\">S.rels.to_list</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">arith_lang.to_lang</span><span class=\"o\">,</span> <span class=\"n\">if_pos</span> <span class=\"n\">h</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">rel</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">rel</span><span class=\"o\">,</span>\n\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">rel_to_formula</span><span class=\"o\">,</span> <span class=\"n\">dif_pos</span> <span class=\"n\">h</span><span class=\"o\">],</span>\n  <span class=\"c1\">-- here is where the fin.rec appeared</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>As for the type of <code>_</code> in <code>_.mp rel</code>, Lean Infoview says it's <code>L.to_lang.R n = fin (list.count n (vector.of_fn L.ar).to_list)</code>, so <code>_.mp rel</code> is <code>fin (list.count n (vector.of_fn L.ar).to_list)</code>, so it would be helpful to be able to use <code>fin.rec f (fin.mk val property) = f val property</code> here, but I'm not sure how to do that. I am currently trying to make use of <code>fin.rec_eq</code> theorem, will respond how it goes in a little while</p>",
        "id": 347982883,
        "sender_full_name": "Ilya Dudnikov",
        "timestamp": 1681030249
    },
    {
        "content": "<p>So using tactics to make definitions can cause problems like this. The simplifier might be making a very complex term and this term would not normally be seen in a proof, but it seems to me like you're using it to actually make your definition. Is there a way of avoiding this? In terms of the subject matter I'm way out of my comfort zone but if you can somehow use something like the equation compiler instead of dropping into tactic mode then you might have a better experience.</p>",
        "id": 347985452,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1681031161
    },
    {
        "content": "<p>Yes, in fact, I do use this to make my definition. I had no idea it could make things that much harder, but I think equation compiler just might save me here, thanks for suggestion!<br>\nUPD: after a little refactoring, it worked! I'll leave the result here, maybe it'll help someone in the future</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">rel_to_formula</span> <span class=\"o\">{</span><span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"n\">arith_lang</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">arith_struc</span> <span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"bp\">+</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">L.to_lang.R</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">formula</span> <span class=\"n\">ordered_semiring_lang</span>\n<span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"n\">rel_val</span><span class=\"o\">,</span> <span class=\"n\">rel_property</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"k\">let</span> <span class=\"n\">ar_vec</span> <span class=\"o\">:=</span> <span class=\"n\">vector.of_fn</span> <span class=\"n\">L.ar</span> <span class=\"k\">in</span>\n                             <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">ar_vec.to_list.count</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"k\">then</span> <span class=\"bp\">⊥'</span>\n                             <span class=\"k\">else</span>\n                              <span class=\"k\">let</span> <span class=\"n\">index</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">vector.of_fn</span> <span class=\"n\">L.ar</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">to_list.index_of_nth_entry</span> <span class=\"n\">rel_val</span> <span class=\"n\">n</span> <span class=\"n\">rel_property</span> <span class=\"k\">in</span>\n                              <span class=\"n\">S.rels.nth</span> <span class=\"n\">index</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">rel_to_formula_in_rels</span> <span class=\"o\">{</span><span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"n\">arith_lang</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">arith_struc</span> <span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"bp\">+</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">rel</span> <span class=\"o\">:</span> <span class=\"n\">L.to_lang.R</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">n</span> <span class=\"bp\">∈</span> <span class=\"o\">(</span><span class=\"n\">vector.of_fn</span> <span class=\"n\">L.ar</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">to_list</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">rel_to_formula</span> <span class=\"n\">S</span> <span class=\"n\">rel</span><span class=\"o\">)</span> <span class=\"bp\">∈</span> <span class=\"n\">S.rels.to_list</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n\n  <span class=\"n\">cases</span> <span class=\"n\">rel</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">rel_to_formula</span><span class=\"o\">],</span>\n  <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">if_pos</span> <span class=\"n\">h</span><span class=\"o\">]</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 347989099,
        "sender_full_name": "Ilya Dudnikov",
        "timestamp": 1681032441
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"608154\">Ilya Dudnikov</span> has marked this topic as resolved.</p>",
        "id": 348000909,
        "sender_full_name": "Notification Bot",
        "timestamp": 1681036213
    }
]