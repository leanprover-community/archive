[
    {
        "content": "<p>Let's say I have the following:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">Quantity</span> <span class=\"o\">(</span><span class=\"n\">dimension</span><span class=\"o\">:</span> <span class=\"n\">Dimension</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">val</span><span class=\"o\">:</span> <span class=\"n\">Float</span>\n<span class=\"n\">deriving</span> <span class=\"n\">Repr</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">Dimension</span> <span class=\"n\">where</span>\n  <span class=\"n\">val</span><span class=\"o\">:</span> <span class=\"n\">Int</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">HPow</span> <span class=\"n\">Dimension</span> <span class=\"n\">Int</span> <span class=\"n\">Dimension</span> <span class=\"n\">where</span>\n  <span class=\"n\">hPow</span> <span class=\"n\">d</span> <span class=\"n\">power</span> <span class=\"o\">:=</span> <span class=\"o\">{</span>\n    <span class=\"n\">val</span> <span class=\"o\">:=</span> <span class=\"n\">d.val</span> <span class=\"bp\">*</span> <span class=\"n\">power</span>\n  <span class=\"o\">}</span>\n</code></pre></div>\n<p>Is it possible to define the exponentation of <code>Quantity</code> by <code>Int</code> such that<br>\nthe value of the <code>Int</code> is used in the type of the output parameter?</p>\n<p>Something like along the lines of:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">{</span><span class=\"n\">d</span><span class=\"o\">:</span> <span class=\"n\">Dimension</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">HPow</span> <span class=\"o\">(</span><span class=\"n\">Quantity</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"n\">Int</span> <span class=\"o\">(</span><span class=\"n\">Quantity</span> <span class=\"o\">(</span><span class=\"n\">d</span><span class=\"bp\">^</span><span class=\"n\">power</span><span class=\"o\">))</span> <span class=\"n\">where</span>\n  <span class=\"n\">hPow</span> <span class=\"n\">quantity</span> <span class=\"n\">power</span> <span class=\"o\">:=</span>  <span class=\"o\">{</span> <span class=\"n\">val</span> <span class=\"o\">:=</span> <span class=\"n\">quantity.val</span><span class=\"bp\">^</span><span class=\"o\">(</span><span class=\"n\">Float.ofInt</span> <span class=\"n\">power</span><span class=\"o\">)}</span>\n</code></pre></div>\n<p>or </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">{</span><span class=\"n\">d</span> <span class=\"n\">d'</span><span class=\"o\">:</span> <span class=\"n\">Dimension</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">HPow</span> <span class=\"o\">(</span><span class=\"n\">Quantity</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"n\">Int</span> <span class=\"o\">(</span><span class=\"n\">Quantity</span> <span class=\"n\">d'</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">hPow</span> <span class=\"n\">quantity</span> <span class=\"n\">power</span> <span class=\"o\">:=</span>  <span class=\"o\">{</span> <span class=\"n\">val</span> <span class=\"o\">:=</span> <span class=\"n\">quantity.val</span><span class=\"bp\">^</span><span class=\"o\">(</span><span class=\"n\">Float.ofInt</span> <span class=\"n\">power</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">Quantity</span> <span class=\"o\">(</span><span class=\"n\">d</span><span class=\"bp\">^</span><span class=\"n\">power</span><span class=\"o\">))}</span>\n</code></pre></div>\n<p>?</p>",
        "id": 396659290,
        "sender_full_name": "Alexander Niederbühl",
        "timestamp": 1697297311
    },
    {
        "content": "<p>Unfortunately I don't think this is possible with the design of <code>HPow</code>, but you could write a custom <code>HPowDep</code> typeclass</p>",
        "id": 396665623,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1697303102
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=GradedMonoid.GMonoid.gnpow#doc\">docs#GradedMonoid.GMonoid.gnpow</a> is pretty much what you want I think</p>",
        "id": 396665733,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1697303248
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113489-new-members/topic/Type.20classes.20and.20dependent.20types/near/396665733\">said</a>:</p>\n<blockquote>\n<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=GradedMonoid.GMonoid.gnpow#doc\">docs#GradedMonoid.GMonoid.gnpow</a> is pretty much what you want I think</p>\n</blockquote>\n<p>Thanks, but I'm really lost on how to apply this to the problem. Could you give me an example?</p>",
        "id": 396734380,
        "sender_full_name": "Alexander Niederbühl",
        "timestamp": 1697360915
    },
    {
        "content": "<p>Looking more closely that doesn't work for you out of the box; quantities are a multiplicatively-gtaded monoid but mathlib only has the additive case</p>",
        "id": 396736423,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1697362174
    },
    {
        "content": "<p>The link would be to show <code>GradedMonoid.GMonoid (fun d : Additive Dimension =&gt; Quantity (Additive.toMul d)</code>, which might be an interesting exercise but probably won't help you much</p>",
        "id": 396736509,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1697362240
    },
    {
        "content": "<p>Ok, how about the approach to write  a custom <code>HPowDep</code>, would this be more viable?</p>",
        "id": 396738402,
        "sender_full_name": "Alexander Niederbühl",
        "timestamp": 1697363782
    },
    {
        "content": "<p>That would certainly work for your use case, and should be straightforward</p>",
        "id": 396739536,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1697364662
    },
    {
        "content": "<p>Persuading Lean corr to adopt that typeclass might be slightly harder!</p>",
        "id": 396739552,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1697364678
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113489-new-members/topic/Type.20classes.20and.20dependent.20types/near/396739536\">said</a>:</p>\n<blockquote>\n<p>That would certainly work for your use case, and should be straightforward</p>\n</blockquote>\n<p>I'm sorry these are my first lines of lean code and I'm completely lost at how that would look like.</p>",
        "id": 396743652,
        "sender_full_name": "Alexander Niederbühl",
        "timestamp": 1697367825
    },
    {
        "content": "<p>It would look something like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">HPowDep</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">γ</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">hPow</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">γ</span> <span class=\"n\">b</span>\n\n<span class=\"kd\">infixr</span><span class=\"o\">:</span><span class=\"mi\">80</span> <span class=\"s2\">\" ^ \"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">HPowDep.hPow</span>\n</code></pre></div>",
        "id": 396745860,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1697369584
    },
    {
        "content": "<p>Then you can provide a <code>instance : HPowDep (Quantity d) Int (fun power =&gt; Quantity (d^power))</code> instance</p>",
        "id": 396745896,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1697369613
    },
    {
        "content": "<p>This is a good starting point for me, thanks!</p>",
        "id": 397165202,
        "sender_full_name": "Alexander Niederbühl",
        "timestamp": 1697568604
    }
]