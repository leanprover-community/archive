[
    {
        "content": "<p>Hi there! I'm trying to debug a minor puzzle involving the behavior of termination checker - is this a reasonable place to ask about that?</p>",
        "id": 338396718,
        "sender_full_name": "Graham Leach-Krouse",
        "timestamp": 1677517839
    },
    {
        "content": "<p>Yes, but you should make a new thread for your question!</p>",
        "id": 338397011,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1677517910
    },
    {
        "content": "<p>2 messages were moved here from <a class=\"stream-topic\" data-stream-id=\"113489\" href=\"/#narrow/stream/113489-new-members/topic/Finite.20fields.20in.20lean\">#new members &gt; Finite fields in lean</a> by <span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span>.</p>",
        "id": 338397029,
        "sender_full_name": "Notification Bot",
        "timestamp": 1677517917
    },
    {
        "content": "<p>Thanks - also a bit new to Zulip.</p>",
        "id": 338397194,
        "sender_full_name": "Graham Leach-Krouse",
        "timestamp": 1677517950
    },
    {
        "content": "<p>I've moved your message to a similar existing thread; feel free to move it again</p>",
        "id": 338397237,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1677517962
    },
    {
        "content": "<p>OK, so I'm doing a soundness proof, for a relevant logic with the following structure:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">BTheorem</span> <span class=\"o\">:</span> <span class=\"n\">Form</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span>\n  <span class=\"bp\">|</span> <span class=\"n\">taut</span> <span class=\"o\">{</span><span class=\"n\">p</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">BTheorem</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">⊃</span> <span class=\"n\">p</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">andE₁</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"n\">q</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">BTheorem</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">&amp;</span> <span class=\"n\">q</span> <span class=\"bp\">⊃</span> <span class=\"n\">p</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">andE₂</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"n\">q</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">BTheorem</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">&amp;</span> <span class=\"n\">q</span> <span class=\"bp\">⊃</span> <span class=\"n\">q</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">andI</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"n\">r</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">BTheorem</span> <span class=\"o\">((</span><span class=\"n\">p</span> <span class=\"bp\">⊃</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">&amp;</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">⊃</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">⊃</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">⊃</span> <span class=\"n\">q</span> <span class=\"bp\">&amp;</span> <span class=\"n\">r</span><span class=\"o\">))</span>\n  <span class=\"bp\">|</span> <span class=\"n\">orI₁</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"n\">q</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">BTheorem</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">⊃</span> <span class=\"n\">p</span> <span class=\"bp\">¦</span> <span class=\"n\">q</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">orI₂</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"n\">q</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">BTheorem</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"bp\">⊃</span> <span class=\"n\">p</span> <span class=\"bp\">¦</span> <span class=\"n\">q</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">orE</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"n\">r</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">BTheorem</span> <span class=\"o\">((</span><span class=\"n\">p</span> <span class=\"bp\">⊃</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">&amp;</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"bp\">⊃</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">⊃</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">¦</span> <span class=\"n\">q</span> <span class=\"bp\">⊃</span> <span class=\"n\">r</span><span class=\"o\">))</span>\n  <span class=\"bp\">|</span> <span class=\"n\">dne</span> <span class=\"o\">{</span><span class=\"n\">p</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">BTheorem</span> <span class=\"o\">(</span><span class=\"bp\">~~</span><span class=\"n\">p</span> <span class=\"bp\">⊃</span> <span class=\"n\">p</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">dist</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"n\">r</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">BTheorem</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">&amp;</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"bp\">¦</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">⊃</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">&amp;</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">¦</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">&amp;</span> <span class=\"n\">r</span><span class=\"o\">))</span>\n  <span class=\"bp\">|</span> <span class=\"n\">mp</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"n\">q</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">BTheorem</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"n\">BTheorem</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">⊃</span> <span class=\"n\">q</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">BTheorem</span> <span class=\"n\">q</span>\n  <span class=\"bp\">|</span> <span class=\"n\">adj</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"n\">q</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">BTheorem</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"n\">BTheorem</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">BTheorem</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">&amp;</span> <span class=\"n\">q</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">cp</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"n\">q</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">BTheorem</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">⊃</span> <span class=\"bp\">~</span><span class=\"n\">q</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">BTheorem</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"bp\">⊃</span> <span class=\"bp\">~</span><span class=\"n\">p</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">hs</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"n\">r</span> <span class=\"n\">s</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">BTheorem</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">⊃</span> <span class=\"n\">q</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"n\">BTheorem</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"bp\">⊃</span> <span class=\"n\">s</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">BTheorem</span> <span class=\"o\">((</span><span class=\"n\">q</span> <span class=\"bp\">⊃</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">⊃</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">⊃</span> <span class=\"n\">s</span><span class=\"o\">))</span>\n</code></pre></div>",
        "id": 338397472,
        "sender_full_name": "Graham Leach-Krouse",
        "timestamp": 1677518025
    },
    {
        "content": "<p>Everything seems to work except for MP, where the case looks like:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"n\">case</span> <span class=\"n\">mp</span> <span class=\"n\">thm₁</span> <span class=\"n\">thm₂</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">rename_i</span> <span class=\"n\">P</span>\n    <span class=\"k\">have</span> <span class=\"n\">l₁</span> <span class=\"o\">:</span> <span class=\"n\">M.identity</span> <span class=\"bp\">⊨</span> <span class=\"n\">P</span> <span class=\"o\">:=</span> <span class=\"n\">systemBSoundness</span> <span class=\"n\">thm₁</span> <span class=\"n\">α</span> <span class=\"n\">M</span>\n    <span class=\"k\">have</span> <span class=\"n\">l₃</span> <span class=\"o\">:</span> <span class=\"n\">M.identity</span> <span class=\"bp\">⊨</span> <span class=\"n\">P</span> <span class=\"bp\">⊃</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"n\">systemBSoundness</span> <span class=\"n\">thm₂</span> <span class=\"n\">α</span> <span class=\"n\">M</span>\n    <span class=\"k\">have</span> <span class=\"n\">l₄</span> <span class=\"o\">:=</span> <span class=\"n\">l₃</span> <span class=\"n\">l₁</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">M.appLeftIdent</span> <span class=\"n\">M.identity</span><span class=\"o\">]</span>\n    <span class=\"n\">assumption</span>\n</code></pre></div>",
        "id": 338398087,
        "sender_full_name": "Graham Leach-Krouse",
        "timestamp": 1677518146
    },
    {
        "content": "<p>and the second recursive call to systemBSoundness (the theorem being proved) seems to be causing trouble. Replacing that with sorry makes everything else check out.</p>",
        "id": 338398334,
        "sender_full_name": "Graham Leach-Krouse",
        "timestamp": 1677518207
    },
    {
        "content": "<p>I think it's got something to do with the fact that that mp constructs a <code>BTheorem q</code>, and that lean identifies the <code>q</code> being produced with the <code>f</code> that occurs in the statement of the theorem:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">systemBSoundness</span> <span class=\"o\">(</span><span class=\"n\">prf</span><span class=\"o\">:</span> <span class=\"n\">BTheorem</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">valid</span> <span class=\"n\">f</span>\n</code></pre></div>",
        "id": 338398778,
        "sender_full_name": "Graham Leach-Krouse",
        "timestamp": 1677518330
    },
    {
        "content": "<p>If I rewrite mp so that it produces <code>BTheorem (q &amp; q)</code>, then mutatis mutandis everything goes through. But this seems silly to me, and I feel like there must be a better way of doing things.</p>",
        "id": 338398983,
        "sender_full_name": "Graham Leach-Krouse",
        "timestamp": 1677518383
    },
    {
        "content": "<p>(if there's any more information I can provide that might be helpful, please let me know)</p>",
        "id": 338399850,
        "sender_full_name": "Graham Leach-Krouse",
        "timestamp": 1677518585
    },
    {
        "content": "<p>You could post a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> illustrating the error; that would be helpful for others involved in the debugging process.</p>",
        "id": 338401014,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1677518864
    },
    {
        "content": "<p>I'll see what I can do.</p>",
        "id": 338403817,
        "sender_full_name": "Graham Leach-Krouse",
        "timestamp": 1677518980
    },
    {
        "content": "<p>OK, this exhibits the same behavior:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">proofDepth</span> <span class=\"o\">(</span><span class=\"n\">prf</span> <span class=\"o\">:</span> <span class=\"n\">BTheorem</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">cases</span> <span class=\"n\">prf</span>\n  <span class=\"n\">case</span> <span class=\"n\">taut</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">exact</span> <span class=\"mi\">0</span>\n  <span class=\"n\">case</span> <span class=\"n\">andE₁</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">exact</span> <span class=\"mi\">0</span>\n  <span class=\"n\">case</span> <span class=\"n\">andE₂</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">exact</span> <span class=\"mi\">0</span>\n  <span class=\"n\">case</span> <span class=\"n\">andI</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">exact</span> <span class=\"mi\">0</span>\n  <span class=\"n\">case</span> <span class=\"n\">orI₁</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">exact</span> <span class=\"mi\">0</span>\n  <span class=\"n\">case</span> <span class=\"n\">orI₂</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">exact</span> <span class=\"mi\">0</span>\n  <span class=\"n\">case</span> <span class=\"n\">dne</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">exact</span> <span class=\"mi\">0</span>\n  <span class=\"n\">case</span> <span class=\"n\">dist</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">exact</span> <span class=\"mi\">0</span>\n  <span class=\"n\">case</span> <span class=\"n\">mp</span> <span class=\"n\">thm₁</span> <span class=\"n\">thm₂</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">have</span> <span class=\"n\">l₁</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"n\">proofDepth</span> <span class=\"n\">thm₁</span>\n    <span class=\"k\">have</span> <span class=\"n\">l₂</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"n\">proofDepth</span> <span class=\"n\">thm₂</span>\n    <span class=\"n\">exact</span> <span class=\"n\">l₁</span> <span class=\"bp\">+</span> <span class=\"n\">l₂</span>\n  <span class=\"n\">case</span> <span class=\"n\">adj</span> <span class=\"n\">thm₁</span> <span class=\"n\">thm₂</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">exact</span> <span class=\"mi\">0</span>\n  <span class=\"n\">case</span> <span class=\"n\">cp</span> <span class=\"n\">thm₁</span> <span class=\"n\">thm₂</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">exact</span> <span class=\"mi\">0</span>\n  <span class=\"n\">case</span> <span class=\"n\">hs</span> <span class=\"n\">thm₁</span> <span class=\"n\">thm₂</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">exact</span> <span class=\"mi\">0</span>\n</code></pre></div>",
        "id": 338405473,
        "sender_full_name": "Graham Leach-Krouse",
        "timestamp": 1677519375
    },
    {
        "content": "<p>This still isn't a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>, because we can't run that code; even if we combine it with the above</p>",
        "id": 338405613,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1677519412
    },
    {
        "content": "<p>Ah, understood.</p>",
        "id": 338405838,
        "sender_full_name": "Graham Leach-Krouse",
        "timestamp": 1677519478
    },
    {
        "content": "<p>How's this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Form</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n  <span class=\"bp\">|</span> <span class=\"n\">atom</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Form</span>\n  <span class=\"bp\">|</span> <span class=\"n\">impl</span> <span class=\"o\">:</span> <span class=\"n\">Form</span> <span class=\"bp\">→</span> <span class=\"n\">Form</span> <span class=\"bp\">→</span> <span class=\"n\">Form</span>\n\n<span class=\"kd\">infix</span><span class=\"o\">:</span><span class=\"mi\">256</span> <span class=\"s2\">\"⊃\"</span>  <span class=\"bp\">=&gt;</span> <span class=\"n\">Form.impl</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">BTheorem</span> <span class=\"o\">:</span> <span class=\"n\">Form</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span>\n  <span class=\"bp\">|</span> <span class=\"n\">taut</span> <span class=\"o\">{</span><span class=\"n\">p</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">BTheorem</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">⊃</span> <span class=\"n\">p</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">mp</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"n\">q</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">BTheorem</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"n\">BTheorem</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">⊃</span> <span class=\"n\">q</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">BTheorem</span> <span class=\"n\">q</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">proofDepth</span> <span class=\"o\">(</span><span class=\"n\">prf</span> <span class=\"o\">:</span> <span class=\"n\">BTheorem</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">cases</span> <span class=\"n\">prf</span>\n  <span class=\"n\">case</span> <span class=\"n\">taut</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">exact</span> <span class=\"mi\">0</span>\n  <span class=\"n\">case</span> <span class=\"n\">mp</span> <span class=\"n\">thm₁</span> <span class=\"n\">thm₂</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">have</span> <span class=\"n\">l₁</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"n\">proofDepth</span> <span class=\"n\">thm₁</span>\n    <span class=\"k\">have</span> <span class=\"n\">l₂</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"n\">proofDepth</span> <span class=\"n\">thm₂</span>\n    <span class=\"n\">exact</span> <span class=\"n\">l₁</span> <span class=\"bp\">+</span> <span class=\"n\">l₂</span>\n</code></pre></div>",
        "id": 338406534,
        "sender_full_name": "Graham Leach-Krouse",
        "timestamp": 1677519637
    },
    {
        "content": "<p><code>induction prf</code> instead of <code>cases prf</code> should help.</p>",
        "id": 338407443,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1677519880
    },
    {
        "content": "<p>OK. This gives me that the code genereator doesn't support the recursor BTheorem.rec yet - is that a lean4 limitation?</p>",
        "id": 338407808,
        "sender_full_name": "Graham Leach-Krouse",
        "timestamp": 1677519980
    },
    {
        "content": "<p>You might want to take your MWE to <a class=\"stream\" data-stream-id=\"270676\" href=\"/#narrow/stream/270676-lean4\">#lean4</a> to get the lean 4 people's eyes on it. I don't really see why structural recursion can't be used but then again I'm a mathematician, I only ever do induction on naturals.</p>",
        "id": 338409165,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1677520303
    },
    {
        "content": "<p>OK, thank you! The induction tactic at least gives me something to go on. I appreciate the help.</p>",
        "id": 338409459,
        "sender_full_name": "Graham Leach-Krouse",
        "timestamp": 1677520370
    },
    {
        "content": "<p>Managed to patch the original proof with <code>induction</code>.</p>",
        "id": 338413110,
        "sender_full_name": "Graham Leach-Krouse",
        "timestamp": 1677521210
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"577178\">Graham Leach-Krouse</span> has marked this topic as resolved.</p>",
        "id": 338413125,
        "sender_full_name": "Notification Bot",
        "timestamp": 1677521215
    }
]