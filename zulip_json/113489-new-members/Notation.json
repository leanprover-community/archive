[
    {
        "content": "<p>Section 6.6 of Theorem Proving in Lean says,</p>\n<p>Lean’s core library declares the left-binding powers of a number of common symbols.<br>\n<a href=\"https://github.com/leanprover/lean/blob/master/library/init/core.lean\">https://github.com/leanprover/lean/blob/master/library/init/core.lean</a><br>\nYou are welcome to overload these symbols for your own use, but you cannot change their binding power.</p>\n<p>That seems to be false--in my ignorance I declared binding powers for some of these operators<br>\nat the top of my first file.  If I remove those lines  there's no problem with the parsing, indicating that<br>\ninfix is still ok,  but my proofs no longer check,  indicating that the binding powers I had declared<br>\nwere in force, rather than the defaults,  before I removed those lines.   Put those lines back,  of <br>\ncourse the project builds again.</p>",
        "id": 210800122,
        "sender_full_name": "Michael Beeson",
        "timestamp": 1600722460
    },
    {
        "content": "<p>I also believe that to be false. You _can_ change the binding power. Maybe what the book means is that you _probably_ shouldn't.</p>",
        "id": 210818731,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1600736368
    },
    {
        "content": "<p>For reference, this is an thread where redefining the binding power of existing notation fixed a problem I was having: <a href=\"#narrow/stream/113489-new-members/topic/Substitution.20notation\">https://leanprover.zulipchat.com/#narrow/stream/113489-new-members/topic/Substitution.20notation</a></p>",
        "id": 210818805,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1600736421
    },
    {
        "content": "<p>Also. It is always possible that it wasn't possible when the book was written.</p>",
        "id": 210818819,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1600736438
    },
    {
        "content": "<p>The statement was probably true when it was first written. Lean changed a lot over the years, and I am guessing that this changed and nobody noticed  (until now) that the documentation was out of date. I'll fix it.</p>",
        "id": 210891488,
        "sender_full_name": "Jeremy Avigad",
        "timestamp": 1600790261
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.real.basic</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">converges_to</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">∀</span> <span class=\"n\">ε</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">N</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"bp\">≥</span> <span class=\"n\">N</span><span class=\"o\">,</span> <span class=\"n\">abs</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"n\">ε</span>\n</code></pre></div>\n<p>If I want to use a predicate as an infix predicate or use a new symbol to denote it, what should do? (taking the above predicate \"converges_to\" as an example)</p>",
        "id": 240913429,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1622538131
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.real.basic</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">converges_to</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">∀</span> <span class=\"n\">ε</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">N</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"bp\">≥</span> <span class=\"n\">N</span><span class=\"o\">,</span> <span class=\"n\">abs</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"n\">ε</span>\n\n<span class=\"kd\">infixl</span> <span class=\"bp\">`↣`</span> <span class=\"o\">:</span> <span class=\"mi\">30</span> <span class=\"o\">:=</span> <span class=\"n\">converges_to</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"bp\">↣</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 240913866,
        "sender_full_name": "Horațiu Cheval",
        "timestamp": 1622538399
    },
    {
        "content": "<p>You can use <code>infixl</code> or <code>infixr</code> depending on the associativity you want from your infix. The number after the colon is the precedence</p>",
        "id": 240913966,
        "sender_full_name": "Horațiu Cheval",
        "timestamp": 1622538476
    }
]