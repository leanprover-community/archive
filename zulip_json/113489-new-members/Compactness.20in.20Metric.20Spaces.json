[
    {
        "content": "<p>Hello! I am currently writing a proof in lean for  the following, </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">ClosedBounded</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">X</span><span class=\"o\">):</span> <span class=\"n\">compact</span> <span class=\"n\">S</span> <span class=\"bp\">→</span> <span class=\"n\">Closed</span> <span class=\"n\">S</span> <span class=\"bp\">∧</span> <span class=\"n\">Bounded</span> <span class=\"n\">S</span>\n</code></pre></div>\n<p>where I have written my own definitions for compact, closed, and bounded.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">Open</span> <span class=\"o\">(</span><span class=\"n\">S</span><span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">∀</span><span class=\"n\">x</span><span class=\"bp\">∈</span><span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"bp\">∃</span><span class=\"n\">r</span><span class=\"bp\">&gt;</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">ball</span> <span class=\"n\">x</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">⊆</span> <span class=\"n\">S</span>\n<span class=\"kd\">def</span> <span class=\"n\">Closed</span> <span class=\"o\">(</span><span class=\"n\">S</span><span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">Open</span> <span class=\"n\">S</span><span class=\"bp\">ᶜ</span>\n<span class=\"kd\">def</span> <span class=\"n\">Bounded</span> <span class=\"o\">(</span><span class=\"n\">S</span><span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">∃</span><span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"n\">S</span> <span class=\"bp\">⊆</span> <span class=\"n\">ball</span> <span class=\"n\">x</span> <span class=\"n\">r</span>\n<span class=\"kd\">def</span> <span class=\"n\">Opencover</span> <span class=\"o\">(</span><span class=\"n\">F</span><span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"o\">(</span><span class=\"n\">Set</span> <span class=\"n\">X</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">S</span><span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">S</span> <span class=\"bp\">⊆</span> <span class=\"bp\">⋃₀</span> <span class=\"n\">F</span> <span class=\"bp\">∧</span> <span class=\"bp\">∀</span><span class=\"n\">f</span><span class=\"bp\">∈</span><span class=\"n\">F</span><span class=\"o\">,</span> <span class=\"n\">Open</span> <span class=\"n\">f</span>\n<span class=\"kd\">def</span> <span class=\"n\">finiteOpenCover</span> <span class=\"o\">(</span><span class=\"n\">F</span><span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"o\">(</span><span class=\"n\">Set</span> <span class=\"n\">X</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">S</span><span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">Opencover</span> <span class=\"n\">F</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"n\">Finite</span> <span class=\"n\">F</span>\n<span class=\"kd\">def</span> <span class=\"n\">compact</span> <span class=\"o\">(</span><span class=\"n\">S</span><span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">∀</span> <span class=\"n\">F</span><span class=\"o\">,</span> <span class=\"n\">Opencover</span> <span class=\"n\">F</span> <span class=\"n\">S</span> <span class=\"bp\">→</span> <span class=\"bp\">∃</span> <span class=\"n\">G</span><span class=\"o\">,</span> <span class=\"n\">G</span> <span class=\"bp\">⊆</span> <span class=\"n\">F</span> <span class=\"bp\">∧</span> <span class=\"n\">finiteOpenCover</span> <span class=\"n\">G</span> <span class=\"n\">S</span>\n</code></pre></div>\n<p>I want to use the fact that  the  family of balls {B(x0,n)} covers S, for n in the naturals and some x0 in X (the metric space). However I am unsure how to specialize the F in the definition of compact to my sequence of sets. I am also a bit unsure on how to write such a sequence in lean. Any help would be appreciated, thanks!</p>",
        "id": 401074057,
        "sender_full_name": "Nelitha Kulasiri",
        "timestamp": 1699504342
    },
    {
        "content": "<p>A sequence would probably be represented as a function from <code>Nat</code> to <code>Set X</code></p>",
        "id": 401083648,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1699509996
    },
    {
        "content": "<p>There are a couple of things that could help you. First you need to be more efficient at asking for help by reading the link <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>, making sure people can copy-paste your code in an empty Lean file and start playing with it. In your case that would mean replacing your second snippet by</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">MetricSpace</span> <span class=\"n\">X</span><span class=\"o\">]</span>\n<span class=\"kn\">open</span> <span class=\"n\">Metric</span> <span class=\"n\">Set</span> <span class=\"n\">Function</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Open</span> <span class=\"o\">(</span><span class=\"n\">S</span><span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">∀</span><span class=\"n\">x</span><span class=\"bp\">∈</span><span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"bp\">∃</span><span class=\"n\">r</span><span class=\"bp\">&gt;</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">ball</span> <span class=\"n\">x</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">⊆</span> <span class=\"n\">S</span>\n<span class=\"kd\">def</span> <span class=\"n\">Closed</span> <span class=\"o\">(</span><span class=\"n\">S</span><span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">Open</span> <span class=\"n\">S</span><span class=\"bp\">ᶜ</span>\n<span class=\"kd\">def</span> <span class=\"n\">Bounded</span> <span class=\"o\">(</span><span class=\"n\">S</span><span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">∃</span><span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"n\">S</span> <span class=\"bp\">⊆</span> <span class=\"n\">ball</span> <span class=\"n\">x</span> <span class=\"n\">r</span>\n<span class=\"kd\">def</span> <span class=\"n\">Opencover</span> <span class=\"o\">(</span><span class=\"n\">F</span><span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"o\">(</span><span class=\"n\">Set</span> <span class=\"n\">X</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">S</span><span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">S</span> <span class=\"bp\">⊆</span> <span class=\"bp\">⋃₀</span> <span class=\"n\">F</span> <span class=\"bp\">∧</span> <span class=\"bp\">∀</span><span class=\"n\">f</span><span class=\"bp\">∈</span><span class=\"n\">F</span><span class=\"o\">,</span> <span class=\"n\">Open</span> <span class=\"n\">f</span>\n<span class=\"kd\">def</span> <span class=\"n\">finiteOpenCover</span> <span class=\"o\">(</span><span class=\"n\">F</span><span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"o\">(</span><span class=\"n\">Set</span> <span class=\"n\">X</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">S</span><span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">Opencover</span> <span class=\"n\">F</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"bp\">∧</span>  <span class=\"n\">Finite</span> <span class=\"n\">F</span>\n<span class=\"kd\">def</span> <span class=\"n\">compact</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">∀</span> <span class=\"n\">F</span><span class=\"o\">,</span> <span class=\"n\">Opencover</span> <span class=\"n\">F</span> <span class=\"n\">S</span> <span class=\"bp\">→</span> <span class=\"bp\">∃</span> <span class=\"n\">G</span><span class=\"o\">,</span> <span class=\"n\">G</span> <span class=\"bp\">⊆</span> <span class=\"n\">F</span> <span class=\"bp\">∧</span> <span class=\"n\">finiteOpenCover</span> <span class=\"n\">G</span> <span class=\"n\">S</span>\n</code></pre></div>\n<p>(of course you can replace <code>import Mathlib</code> by something more refined.</p>",
        "id": 401174860,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1699542327
    },
    {
        "content": "<p>Then I think that <code>Finite F</code> is a typo, it should be <code>Set.Finite F</code> or <code>F.Finite</code>. They are equivalent, but the <code>Set.Finite</code> version is probably more convenient.</p>",
        "id": 401175060,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1699542381
    },
    {
        "content": "<p>Then you need a lemma restating the compactness property for indexed unions. In the definition you need to choose between using set unions or indexed unions, but in proofs you need both. So you need something like:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">compact.finite_subcover</span> <span class=\"o\">{</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">X</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hS</span> <span class=\"o\">:</span> <span class=\"n\">compact</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">ι</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">Set</span> <span class=\"n\">X</span><span class=\"o\">}</span>\n    <span class=\"o\">(</span><span class=\"n\">hF</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">Open</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"n\">i</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">hSF</span> <span class=\"o\">:</span> <span class=\"n\">S</span> <span class=\"bp\">⊆</span> <span class=\"bp\">⋃</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">F</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">ι</span><span class=\"o\">,</span> <span class=\"n\">I.Finite</span> <span class=\"bp\">∧</span> <span class=\"n\">S</span> <span class=\"bp\">⊆</span> <span class=\"bp\">⋃</span> <span class=\"n\">i</span> <span class=\"bp\">∈</span> <span class=\"n\">I</span><span class=\"o\">,</span> <span class=\"n\">F</span> <span class=\"n\">i</span>\n</code></pre></div>",
        "id": 401175272,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1699542447
    },
    {
        "content": "<p>In order to prove that you will probably need answers to <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Image.20and.20InjOn/near/401173467\">this question</a>, but you can sorry those lemmas in the mean time.</p>",
        "id": 401175533,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1699542506
    },
    {
        "content": "<p>Also, depending on what you want to do, I'm not sure that restricting to radii that are natural numbers will buy you anything but trouble with the coercion between Nat and Real.</p>",
        "id": 401177459,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1699543083
    },
    {
        "content": "<p>Thank you!</p>",
        "id": 401297574,
        "sender_full_name": "Nelitha Kulasiri",
        "timestamp": 1699599127
    }
]