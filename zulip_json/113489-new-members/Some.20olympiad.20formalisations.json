[
    {
        "content": "<p>As a first exercise in formalisation after Kevin's natural number game and Lean maths challenges, I tried <a href=\"https://github.com/jsm28/bmo2-2020-lean\" title=\"https://github.com/jsm28/bmo2-2020-lean\">formalising solutions</a> to some problems from this year's <a href=\"https://bmos.ukmt.org.uk/home/bmo2-2020.pdf\" title=\"https://bmos.ukmt.org.uk/home/bmo2-2020.pdf\">British Mathematical Olympiad round 2</a>. A couple of questions that arose from this. (a) In the course of those formalisations I found I wanted various trivial lemmas that I couldn't locate in mathlib, but that seemed of more general relevance than just those particular olympiad problems; see p1_lemmas.lean, p3_lemmas.lean and p4_lemmas.lean at the link. Are some of those actually in mathlib in a different form, or do any of them belong there? (b) The proof of problem 3 (p3.lean) got very bogged down proving trivialities. Are there key Lean tricks I'm missing that could make it, say, five times shorter (which would still be longer than either of the other proofs there)?</p>",
        "id": 194557725,
        "sender_full_name": "Joseph Myers",
        "timestamp": 1587234656
    },
    {
        "content": "<p>Thanks for mentioning this stuff here Joseph, I know you told me about it weeks ago but I've been focusing on other things.</p>",
        "id": 194559223,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587236891
    },
    {
        "content": "<p>I only briefly skimmed your lemmas, but mostly these look useful and appropriate for mathlib.</p>",
        "id": 194568695,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1587252043
    },
    {
        "content": "<p>I'd double check on some of the simpler ones that <code>library_search</code> doesn't find any matches.</p>",
        "id": 194568698,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1587252058
    },
    {
        "content": "<p>and then start PR'ing them. It's probably best to do them in small chunks, as it makes it more likely that the relevant reviewer who knows the file the lemmas belong in will have time to check them.</p>",
        "id": 194568704,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1587252089
    },
    {
        "content": "<p>(But my first impression is that everything was written nicely, and had good mathlib-style names, so PRing should be pretty straightforward, beyond looking for existing matches.)</p>",
        "id": 194568708,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1587252120
    },
    {
        "content": "<p>OK, I've filed PR  <a href=\"https://github.com/leanprover-community/mathlib/issues/2460\" title=\"https://github.com/leanprover-community/mathlib/issues/2460\">#2460</a> for some of the modular arithmetic lemmas after checking with <code>library_search</code>. Though as <code>library_search</code> is very sensitive to the exact form in which a lemma is stated, it's quite possible something very similar is already present. (E.g. at one point in doing these formalisations I wanted the name of the lemma that turns out to be <code>nat.add_mul_div_right</code>, but because I had the additions the other way round, <code>library_search</code> didn't find it.) I left out one of the modular arithmetic lemmas from this PR, both because it's more complicated and because I got a mysterious timeout after updating to the latest Lean and mathlib. Why does this code timeout on <code>use</code> (but not if <code>existsi</code> is used instead, or with different imports)? This is with Lean 3.9.0, mathlib commit 99245b33741b6b3adc6832858c88e7b0ce2de519, and didn't appear with Lean 3.8.0, mathlib commit d2db3e831a8f8e20564e7c702409bd3bdda691f5.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"c1\">-- This import is needed; the timeout does not appear with &quot;import tactic&quot; instead.</span>\n<span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">mod_mul_eq_cases</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hbpos</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hcpos</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">c</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hmod</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"err\">%</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∃</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">,</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">d</span> <span class=\"bp\">∧</span> <span class=\"n\">d</span> <span class=\"bp\">&lt;</span> <span class=\"n\">c</span> <span class=\"bp\">∧</span> <span class=\"n\">n</span> <span class=\"err\">%</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">d</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">use</span> <span class=\"o\">((</span><span class=\"n\">n</span> <span class=\"err\">%</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">))</span> <span class=\"bp\">/</span> <span class=\"n\">b</span><span class=\"o\">),</span> <span class=\"c1\">-- Times out (works with &quot;existsi&quot;)</span>\n  <span class=\"n\">sorry</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 194603866,
        "sender_full_name": "Joseph Myers",
        "timestamp": 1587311229
    },
    {
        "content": "<p>Having got a first few batches of lemmas intro mathlib, a couple of followup questions.</p>\n<ol>\n<li>One of the lemmas I have is one where the statement seems reasonable for mathlib, but the proof I have surely isn't.</li>\n</ol>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">cardinality</span>\n\n<span class=\"c\">/-</span><span class=\"cm\">- Any open interval of reals is uncountable. -/</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">not_countable_real_Ioo</span> <span class=\"o\">{</span><span class=\"n\">k1</span> <span class=\"n\">k2</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">k1</span> <span class=\"bp\">&lt;</span> <span class=\"n\">k2</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">¬</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">countable</span> <span class=\"o\">(</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">Ioo</span> <span class=\"n\">k1</span> <span class=\"n\">k2</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">sorry</span>\n<span class=\"kn\">end</span>\n</code></pre></div>\n\n\n<p>The proof I have (in p4_lemmas.lean) deducing this from <code>not_countable_real</code> is about as long as the whole of <code>data.real.cardinality</code> once you include the auxiliary lemmas. Maybe someone can see a much simpler proof of this and can PR that to mathlib instead?</p>\n<ol start=\"2\">\n<li>I only formalised solutions to three of the four problems on the paper because the other one is geometry and mathlib doesn't have any Euclidean geometry. I know there have been various attempts at Euclidean geometry in Lean, are there any plans to add it (at least basic definitions) to mathlib? (I tend to think the natural starting point is the <a href=\"https://en.wikipedia.org/wiki/Euclidean_space#Technical_definition\" title=\"https://en.wikipedia.org/wiki/Euclidean_space#Technical_definition\">definition</a> of a Euclidean space as an affine space whose associated vector space is a finite-dimensional real inner product space. mathlib has real inner product spaces, but not affine spaces.)</li>\n</ol>",
        "id": 195620616,
        "sender_full_name": "Joseph Myers",
        "timestamp": 1588104921
    },
    {
        "content": "<p>For 1, it would be nice to know that an open interval is homeomorphic to ℝ anyways, from which the uncountability follows. (Maybe <span class=\"user-mention\" data-user-id=\"110050\">@Sebastien Gouezel</span> knows whether we have this already?)</p>",
        "id": 195622197,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588105637
    },
    {
        "content": "<p>For 2, I don't know of any plans to add Euclidean geometry to mathlib. But PRs are welcome!</p>",
        "id": 195622357,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588105701
    },
    {
        "content": "<p>Not having affine spaces is really really sad, especially now calculus is very advanced in the wrong direction (using linear spaces everywhere instead of affine spaces)</p>",
        "id": 195622504,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1588105776
    },
    {
        "content": "<p>For 1. I would guess that it is not too hard to show that the interval <code>Ioo a b</code> is uncountable if the unit interval <code>Ioo 0 1</code> is.</p>",
        "id": 195622510,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588105777
    },
    {
        "content": "<p>I tried to define affine spaces a very very long time ago, but I never managed to get elaboration to cooperate.</p>",
        "id": 195622601,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1588105805
    },
    {
        "content": "<p>And we know that <code>exp</code> is injective. So <code>R</code> injects into the positive reals. That's also only a couple of lines.</p>",
        "id": 195622655,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588105830
    },
    {
        "content": "<p>Then you apply negation, and another <code>exp</code>.</p>",
        "id": 195622762,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588105873
    },
    {
        "content": "<p>We know that exp is monotone as well, I htink.</p>",
        "id": 195622789,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588105888
    },
    {
        "content": "<p>Library-wise I don't think we should look for a tricky proof. We need to make sure we have an bijection from R to any nonempty open interval</p>",
        "id": 195623114,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1588106041
    },
    {
        "content": "<p>The library should have (a) <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mn>0</mn><mo separator=\"true\">,</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mo>≅</mo><mo stretchy=\"false\">(</mo><mi>a</mi><mo separator=\"true\">,</mo><mi>b</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(0, 1) \\cong (a, b)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\">0</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≅</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">a</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathdefault\">b</span><span class=\"mclose\">)</span></span></span></span> for any <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi><mo>&lt;</mo><mi>b</mi></mrow><annotation encoding=\"application/x-tex\">a &lt; b</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"mord mathdefault\">a</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">b</span></span></span></span>, (b) <a href=\"https://en.wikipedia.org/wiki/Sigmoid_function\" title=\"https://en.wikipedia.org/wiki/Sigmoid_function\">https://en.wikipedia.org/wiki/Sigmoid_function</a> or similar.</p>",
        "id": 195623282,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588106117
    },
    {
        "content": "<p>Hmmm, didn't <span class=\"user-mention\" data-user-id=\"110050\">@Sebastien Gouezel</span> do the sigmoid function, or something similar?</p>",
        "id": 195623442,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588106176
    },
    {
        "content": "<p>Assuming of course <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>≅</mo></mrow><annotation encoding=\"application/x-tex\">\\cong</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.589em;vertical-align:0em;\"></span><span class=\"mrel\">≅</span></span></span></span> means diffemorphism.</p>",
        "id": 195623475,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1588106194
    },
    {
        "content": "<p>Oh I guess I always thought that the sigmoid function specifically meant what that page calls the logistic function, but the point is we should have at least one such function which also has some other utility.</p>",
        "id": 195623483,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588106198
    },
    {
        "content": "<p>Oooh, I was thinking of</p>\n<div class=\"codehilite\"><pre><span></span><code>src/analysis/calculus/specific_functions.lean:\nThe real function `exp_neg_inv_glue` given by `x ↦ exp (-1/x)` for `x &gt; 0` and `0`\n</code></pre></div>",
        "id": 195623725,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588106327
    },
    {
        "content": "<p>There is <code>exp_neg_inv_glue</code>, but this is a bit different (and more difficult)</p>",
        "id": 195623732,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588106332
    },
    {
        "content": "<p>But <code>exp_neg_inv_glue</code> would also do the trick, right?</p>",
        "id": 195623869,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588106412
    },
    {
        "content": "<p>For 2, one has to think about how to formalise a general Euclidean geometry question. If it says something like \"Let ABC be a triangle, now construct D,E,F,G,H and prove that ABDH all lie on a circle\" then you can either use a coordinate approach or a synthetic approach. There has been a lot of work towards getting the synthetic approach to work in a theorem prover, including some serious stuff done in Coq (<a href=\"https://mathoverflow.net/questions/337558/automatically-solving-olympiad-geometry-problems\" title=\"https://mathoverflow.net/questions/337558/automatically-solving-olympiad-geometry-problems\">some links here</a>). I had a student formalise a load of stuff in Lean <a href=\"https://github.com/ImperialCollegeLondon/xena-UROP-2018/tree/master/src/Geometry\" title=\"https://github.com/ImperialCollegeLondon/xena-UROP-2018/tree/master/src/Geometry\">here</a> but they didn't document what they did so the code is impenetrable.</p>",
        "id": 195623879,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588106417
    },
    {
        "content": "<p>I don't think we have the sigmoid (and I just learned this name). But it would be very easy to do.</p>",
        "id": 195623977,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1588106480
    },
    {
        "content": "<p>And then we can claim Lean does AI</p>",
        "id": 195623991,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1588106494
    },
    {
        "content": "<p>Sébastien, this fancy sigmoid name is AI</p>",
        "id": 195624014,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1588106514
    },
    {
        "content": "<p>I'm interested in formalising (e.g. olympiad) Euclidean geometry in Lean and I would love to learn from/contribute to any project related to this, something like Geocoq perhaps?</p>",
        "id": 195631489,
        "sender_full_name": "Alastair Horn",
        "timestamp": 1588110427
    },
    {
        "content": "<p>Geocoq is synthetic, right?</p>",
        "id": 195632945,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588111112
    },
    {
        "content": "<p>I was going to have a student look at this this summer but my plans are now a bit up in the air.</p>",
        "id": 195632988,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588111139
    },
    {
        "content": "<p>It's one thing formalising the theorems, it's another to make the tactics which prove them automatically</p>",
        "id": 195633036,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588111161
    },
    {
        "content": "<p>Assuming I understand what synthetic is, then yes I believe it is since it's based off Tarski's axioms</p>",
        "id": 195634375,
        "sender_full_name": "Alastair Horn",
        "timestamp": 1588111812
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/113489-new-members/topic/Some.20olympiad.20formalisations/near/195623869\" title=\"#narrow/stream/113489-new-members/topic/Some.20olympiad.20formalisations/near/195623869\">said</a>:</p>\n<blockquote>\n<p>But <code>exp_neg_inv_glue</code> would also do the trick, right?</p>\n</blockquote>\n<p>It does one trick (via Cantor-Schroeder-Bernstein) but not all tricks.</p>",
        "id": 195634377,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588111813
    },
    {
        "content": "<p>I suppose a synthetic approach wouldn't be appropriate for mathlib, since nothing else would really depend on it. Though synthetic would presumably be the logical choice for a formalisation of Olympiad geometry.</p>",
        "id": 195635728,
        "sender_full_name": "Alastair Horn",
        "timestamp": 1588112530
    }
]