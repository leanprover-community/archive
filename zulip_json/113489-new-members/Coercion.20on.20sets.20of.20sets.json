[
    {
        "content": "<p>I was trying to prove some simple results about the generators of the Borel sets on <code>ℝ</code>.<br>\nThings very going pretty well until I got stuck showing the following:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Set</span>\n\n<span class=\"kd\">notation</span> <span class=\"s2\">\"paving\"</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Set</span> <span class=\"o\">(</span><span class=\"n\">Set</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Open_Interval</span> <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">),</span> <span class=\"n\">I</span> <span class=\"bp\">=</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"bp\">|</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span> <span class=\"bp\">∧</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span><span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Open_Interval_R</span> <span class=\"o\">:</span> <span class=\"n\">paving</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">I</span> <span class=\"bp\">|</span> <span class=\"n\">Open_Interval</span> <span class=\"n\">I</span><span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Open_Interval_q</span> <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">),</span> <span class=\"n\">I</span> <span class=\"bp\">=</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"bp\">|</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span> <span class=\"bp\">∧</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span><span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Open_Interval_Q</span> <span class=\"o\">:</span> <span class=\"n\">paving</span> <span class=\"n\">ℚ</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">I</span> <span class=\"bp\">|</span> <span class=\"n\">Open_Interval_q</span> <span class=\"n\">I</span><span class=\"o\">}</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">univ</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"bp\">⊆</span> <span class=\"o\">(</span><span class=\"n\">univ</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">↑</span><span class=\"n\">Open_Interval_Q</span> <span class=\"bp\">⊆</span> <span class=\"n\">Open_Interval_R</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>I know that Lean is build around types and not sets, but I thought the coercion would take care of things. What do I do?</p>",
        "id": 381039758,
        "sender_full_name": "Peter Hansen",
        "timestamp": 1690982852
    },
    {
        "content": "<p>What do you want the coercion from <code>Set ℚ</code> to <code>Set ℝ</code> to mean?</p>",
        "id": 381041612,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1690983206
    },
    {
        "content": "<p>Because the answer to your question is currently \"write that explicitly\"</p>",
        "id": 381041847,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1690983246
    },
    {
        "content": "<p>One way to write that explicitly is <code>(↑) '' (univ : Set ℚ)</code> for the image under the coercion function</p>",
        "id": 381047709,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1690984280
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113489-new-members/topic/Coercion.20on.20sets.20of.20sets/near/381041612\">said</a>:</p>\n<blockquote>\n<p>What do you want the coercion from <code>Set ℚ</code> to <code>Set ℝ</code> to mean?</p>\n</blockquote>\n<p>I had not really thought about that. Intuitively, it just seemed to make sense. But I guess with sets being propositions on types, it perhaps doesn't. </p>\n<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/113489-new-members/topic/Coercion.20on.20sets.20of.20sets/near/381047709\">said</a>:</p>\n<blockquote>\n<p>One way to write that explicitly is <code>(↑) '' (univ : Set ℚ)</code> for the image under the coercion function</p>\n</blockquote>\n<p>Thanks :) That <em>sort of</em> worked. Though I suspect my whole approach is a bit flawed.</p>",
        "id": 381052815,
        "sender_full_name": "Peter Hansen",
        "timestamp": 1690985170
    },
    {
        "content": "<p>I think I solved my issue</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Set</span>\n\n<span class=\"kd\">notation</span> <span class=\"s2\">\"paving\"</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Set</span> <span class=\"o\">(</span><span class=\"n\">Set</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Open_Interval</span> <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">),</span> <span class=\"n\">I</span> <span class=\"bp\">=</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"bp\">|</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span> <span class=\"bp\">∧</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span><span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Open_Interval_R</span> <span class=\"o\">:</span> <span class=\"n\">paving</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">I</span> <span class=\"bp\">|</span> <span class=\"n\">Open_Interval</span> <span class=\"n\">I</span><span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Open_Interval_q</span> <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">),</span> <span class=\"n\">I</span> <span class=\"bp\">=</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"bp\">|</span> <span class=\"bp\">↑</span><span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span> <span class=\"bp\">∧</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"bp\">↑</span><span class=\"n\">b</span><span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Open_Interval_Q</span> <span class=\"o\">:</span> <span class=\"n\">paving</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">I</span> <span class=\"bp\">|</span> <span class=\"n\">Open_Interval_q</span> <span class=\"n\">I</span><span class=\"o\">}</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">Open_Interval_Q</span> <span class=\"bp\">⊆</span> <span class=\"n\">Open_Interval_R</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">x</span> <span class=\"n\">H</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">H</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">g</span><span class=\"o\">⟩</span>\n  <span class=\"n\">use</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span>\n  <span class=\"n\">exact</span> <span class=\"n\">g</span>\n</code></pre></div>\n<p>What I actually wanted was just the interval with rational end points, which doesn't cause any issues. Thank pushing me in the right direction.</p>",
        "id": 381059976,
        "sender_full_name": "Peter Hansen",
        "timestamp": 1690986203
    }
]