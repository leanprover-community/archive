[
    {
        "content": "<p>Using the <code>rcases</code>, I get the error message above. Can a kind soul tell me what's going wrong/point to some documentation? (Searching zulip doesn't yield any results I understand --- if they're relevant, I would need a pointer to some more basic explanation first.)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Topology.MetricSpace.Lipschitz</span>\n<span class=\"kn\">open</span> <span class=\"n\">Topology</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">autoImplicit</span> <span class=\"n\">false</span>\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">MetricSpace</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">MetricSpace</span> <span class=\"n\">Y</span><span class=\"o\">]</span>\n\n<span class=\"sd\">/-- `f : X ‚Üí Y` is **locally Lipschitz** iff every point `p ‚àà X` has a neighourhood</span>\n<span class=\"sd\">on which `f` is Lipschitz. -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">LocallyLipschitz</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"bp\">‚àÄ</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"bp\">‚àÉ</span> <span class=\"n\">K</span><span class=\"o\">,</span> <span class=\"bp\">‚àÉ</span> <span class=\"n\">t</span> <span class=\"bp\">‚àà</span> <span class=\"bp\">ùìù</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">LipschitzOnWith</span> <span class=\"n\">K</span> <span class=\"n\">f</span> <span class=\"n\">t</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">minimized</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">Y</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">LocallyLipschitz</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">X</span><span class=\"o\">}:</span> <span class=\"n\">True</span> <span class=\"c\">/-</span><span class=\"cm\"> dummy statement -/</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"c1\">-- Consider the cover (U_x) of s induced by hf: each N_s is an open subset containing x</span>\n  <span class=\"c1\">-- on which f is Lipschitz, say with constant K_x.</span>\n  <span class=\"k\">let</span> <span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">Set</span> <span class=\"n\">X</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">intro</span> <span class=\"n\">x</span>\n    <span class=\"c1\">-- ERROR: uncommenting this line fails with error message</span>\n    <span class=\"c1\">-- tactic 'induction' failed, recursor 'Exists.casesOn' can only eliminate into Prop</span>\n    <span class=\"c1\">-- rcases hf x with ‚ü®Kx, t, ht, hfL‚ü©</span>\n    <span class=\"c1\">-- my aim: return the set t</span>\n    <span class=\"gr\">sorry</span>\n  <span class=\"n\">trivial</span>\n</code></pre></div>",
        "id": 392510111,
        "sender_full_name": "Michael Rothgang",
        "timestamp": 1695386693
    },
    {
        "content": "<p>The summary is that you can't construct data (computably) by splitting apart an existential; you need the axiom of choice</p>",
        "id": 392511118,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1695387061
    },
    {
        "content": "<p>You can either write <code>(hf x).choose</code> and <code>(hf x).choose_spec</code>, or you can use the <code>choose</code> tactic as <code>choose hf x with ...</code> where I'm afraid you'll have to guess what to use for the <code>...</code></p>",
        "id": 392511235,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1695387108
    },
    {
        "content": "<p>Thanks. That solves it :-)</p>",
        "id": 392594591,
        "sender_full_name": "Michael Rothgang",
        "timestamp": 1695413887
    }
]