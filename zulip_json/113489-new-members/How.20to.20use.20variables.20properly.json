[
    {
        "content": "<p>I'm trying to figure out how to use variables in a way that aligns with normal mathematics writing. For example suppose I want to write \"Let k \\in N, let R = Z/(2^k Z), and let f: R -&gt; R, f(x) = 2^x\".</p>\n<p>My attempt at writing this in Lean 4 is:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.ZMod.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.ZMod.Defs</span>\n\n<span class=\"kn\">section</span> <span class=\"n\">foo</span>\n  <span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n  <span class=\"kd\">def</span> <span class=\"n\">R</span> <span class=\"o\">:=</span> <span class=\"n\">ZMod</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">^</span> <span class=\"n\">k</span><span class=\"o\">)</span>\n  <span class=\"kd\">def</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">R</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">2</span> <span class=\"bp\">^</span> <span class=\"n\">x.val</span>\n<span class=\"kd\">end</span> <span class=\"n\">foo</span>\n</code></pre></div>\n<p>But:</p>\n<ol>\n<li>\n<p>I was under the impression that defining variables like this would mean you don't have to keep writing out all the variables that a definition depends on every time you use them, but apparently I need to keep writing <code>R k</code> instead of <code>R</code>, even though I already defined <code>R</code> as a single type depending on <code>k</code>, not as a function from ℕ to types (I thought this generalization would happen outside of the section once the variable <code>k</code> is no longer in scope, but not inside the section). This seems unnecessarily annoying to have to deal with, because it means I also have to keep referring to <code>f</code> as <code>f k</code> everywhere too.</p>\n</li>\n<li>\n<p>My definition of <code>R</code> (or <code>R k</code>) seems to have \"forgotten\" everything about <code>ZMod</code>. For example, converting from ℕ to <code>ZMod (2 ^ 8)</code> is trivial: <code>def x : ZMod (2 ^ 8) := 10</code>, but converting from <code>ℕ</code> to <code>R 8</code> where <code>R k := ZMod (2 ^ k)</code> doesn't work: <code>def x : R 8 := 10</code> results in</p>\n</li>\n</ol>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"kd\">instance</span>\n  <span class=\"n\">OfNat</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"mi\">8</span><span class=\"o\">)</span> <span class=\"mi\">10</span>\n</code></pre></div>\n<p>Surely I am doing something wrong and there is a trivial solution to these problems.</p>",
        "id": 399226397,
        "sender_full_name": "Ben Whitmore",
        "timestamp": 1698642177
    },
    {
        "content": "<p>Using <code>abbrev R</code> might help with the instance.  The explicitness of <code>k</code> is set by the parentheses in the <code>variable</code> command.  I'm not sure that making <code>k</code> implicit is a good idea, though, since lean would not know what natural to use otherwise.</p>",
        "id": 399229024,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1698644662
    },
    {
        "content": "<p>Just to pick up on a pedantic point here, what do you mean by \"let f: R -&gt; R, f(x)=2^x\"? I would argue that this function is not well-defined on the quotient, because, for example, 0 and 2^k are equal elements of the domain, but f(0)=2^0=1 and f(2^k)=2^(2^k) are not congruent modulo 2^k, so the function does not naturally descend to a map on the quotient. We might have different mental models of Z/nZ here? Are you actually talking about <code>Fin n</code>?</p>",
        "id": 399297879,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1698671332
    }
]