[
    {
        "content": "<p>Hello. Currently I have the following definition:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">ordinary_line</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">p1</span> <span class=\"n\">p2</span> <span class=\"o\">:</span> <span class=\"n\">P</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">p1</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">p2</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">∀</span> <span class=\"n\">p</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"n\">p1</span> <span class=\"bp\">∨</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"n\">p2</span> <span class=\"bp\">∨</span> <span class=\"n\">p</span> <span class=\"bp\">∉</span> <span class=\"n\">line</span><span class=\"o\">[</span><span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">p1</span><span class=\"o\">,</span> <span class=\"n\">p2</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>And I would like to state the Sylvester-Gallai theorem, which says that for a non-collinear set of points, there exists an ordinary line. So I tried the following:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">sylvester_gallai</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">Pt</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">collinear</span> <span class=\"n\">ℝ</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">Pt</span><span class=\"o\">))):</span>\n<span class=\"bp\">∃</span> <span class=\"n\">p1</span> <span class=\"n\">p2</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">ordinary_line</span> <span class=\"n\">s</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">:=</span>\n</code></pre></div>\n<p>However, Lean of course is unable to fill it in. Surprisingly, I got the following stupid-looking method working:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">sylvester_gallai</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">Pt</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">collinear</span> <span class=\"n\">ℝ</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">Pt</span><span class=\"o\">))):</span>\n<span class=\"bp\">∃</span> <span class=\"n\">p1</span> <span class=\"n\">p2</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">ordinary_line</span> <span class=\"n\">s</span> <span class=\"o\">(</span><span class=\"k\">show</span> <span class=\"n\">p1</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"bp\">*</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"k\">show</span> <span class=\"n\">p2</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"bp\">*</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n</code></pre></div>\n<p>Another alternative would be</p>\n<div class=\"codehilite\" data-code-language=\"leantheorem\"><pre><span></span><code>∃ p1 p2 ∈ s, ordinary_line s (show p1 ∈ s, by { clear H, exact H }) H:=\n</code></pre></div>\n<p>So my question is, what is the correct way to write this? That is, how do I name the local hypothesis from <code>p1 \\in s</code>?</p>",
        "id": 327028262,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1676029451
    },
    {
        "content": "<p>You can give it a name by doing <code>\\exists p1 (hp1 : p1 \\in s) p2 (hp2 : p2 \\in s), ...</code>. But in that case I wouldn't even take the membership hypotheses in <code>ordinary_line</code>, but the points directly.</p>",
        "id": 327028694,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1676029606
    },
    {
        "content": "<p>Wll the change be \"correct\" with mathlib style? It seems that a lot of lemmas and stuff takes just the requirements and deduces the remaining variables</p>",
        "id": 327029012,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1676029694
    },
    {
        "content": "<p>What change? Taking the points directly would certainly be more mathlib style.</p>",
        "id": 327029557,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1676029834
    },
    {
        "content": "<p>Yea I mean the taking the points change. I was thinking about stuff like <code>nat.prime_pos</code>, where it only takes a hypothesis <code>hp : nat.prime p</code> instead of say <code>nat.prime_pos p hp</code>.</p>",
        "id": 327030062,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1676029961
    },
    {
        "content": "<p>That's not the same situation; <code>ordinary_line</code> is a def, <code>prime_pos</code> is a lemma</p>",
        "id": 327171704,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1676075433
    }
]