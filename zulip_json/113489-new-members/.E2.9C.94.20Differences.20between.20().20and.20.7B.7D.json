[
    {
        "content": "<p>Hi everyone,<br>\nI am trying to complete the tutorial and meet a (maybe stupid) question.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- 0015</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hc</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"bp\">≤</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hab</span> <span class=\"o\">:</span>  <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">b</span><span class=\"bp\">*</span><span class=\"n\">c</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">c</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">sub_nonneg</span><span class=\"o\">,</span>\n  <span class=\"k\">calc</span> <span class=\"mi\">0</span>  <span class=\"bp\">≤</span>  <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">mul_nonneg_of_nonpos_of_nonpos</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">rwa</span> <span class=\"n\">sub_nonpos</span><span class=\"o\">)</span> <span class=\"n\">hc</span>\n  <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"bp\">-</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"kd\">by</span> <span class=\"n\">ring</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>In this exercise, if I change the line <br>\n<code>  calc 0  ≤  (a - b) * c : mul_nonneg_of_nonpos_of_nonpos (by rwa sub_nonpos) hc </code><br>\nby <br>\n<code>  calc 0  ≤  (a - b) * c : mul_nonneg_of_nonpos_of_nonpos {by rwa sub_nonpos} hc </code><br>\nthen lean rejects this proof. However, when I change the line <br>\n<code> example (a b c : ℝ) (hc : c ≤ 0) (hab :  a ≤ b) : b*c ≤ a*c := </code><br>\ninto<br>\n<code>example {a b c : ℝ} {hc : c ≤ 0} {hab :  a ≤ b} : b*c ≤ a*c :=</code><br>\nThen lean says everything is fine. So I wonder that what is the correct usage/meaning of () and {}. Thank you!</p>",
        "id": 351369134,
        "sender_full_name": "Jiang Jiedong",
        "timestamp": 1682006577
    },
    {
        "content": "<p>Does <a href=\"https://www.ma.imperial.ac.uk/~buzzard/xena/formalising-mathematics-2023/Part_B/brackets.html\">this</a> help? It's a page from my course. <code>{ }</code> and <code>[ ]</code> means \"computer figures it out\", <code>( )</code> means \"human has to input it\"</p>",
        "id": 351375464,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1682008197
    },
    {
        "content": "<p><code>{}</code> vs <code>()</code> in a binder (what Kevin is describing) is very different from <code>{}</code> vs<code>()</code> in an expression.</p>",
        "id": 351377086,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1682008565
    },
    {
        "content": "<p>In an expression <code>(x)</code> is just <code>x</code>, but <code>{x}</code> is <code>{y | y = x}</code> i.e. the set of one element</p>",
        "id": 351377174,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1682008584
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/Differences.20between.20.28.29.20and.20.7B.7D/near/351375464\">said</a>:</p>\n<blockquote>\n<p>Does <a href=\"https://www.ma.imperial.ac.uk/~buzzard/xena/formalising-mathematics-2023/Part_B/brackets.html\">this</a> help? It's a page from my course. <code>{ }</code> and <code>[ ]</code> means \"computer figures it out\", <code>( )</code> means \"human has to input it\"</p>\n</blockquote>\n<p>Thanks you for your carefully written notes! It helps very much!<br>\nNow I see that the use of different brackets (as binders) is a design of Lean to make life much easier. Unload works from human to Lean unifier and type class inference system.</p>",
        "id": 351386141,
        "sender_full_name": "Jiang Jiedong",
        "timestamp": 1682011030
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"611077\">@Jiang Jiedong</span> You are passing an argument to <code>mul_nonneg_of_nonpos_of_nonpos</code>. Indeed, you have to prove a certain side-condition so that you can apply the lemma, and you prove this using <code>by rwa sub_nonpos</code>.<br>\nIf you don't put <code>()</code> around it, then Lean will try to make <code>by</code> the first argument to <code>mul_nonneg_of_nonpos_of_nonpos</code> and <code>rwa</code> the second, etc... But that is not what you want. Hence you put the <code>()</code> around it.</p>",
        "id": 351386186,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1682011043
    },
    {
        "content": "<p>But putting <code>{}</code> around it, Lean will get quite confused, I guess. It probably thinks that you are trying to create a set (as Eric explained), and pass that as the first argument.</p>",
        "id": 351386397,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1682011093
    },
    {
        "content": "<p>It might be a bit confusing in the beginning. There are several things that you need to be aware of:</p>\n<ul>\n<li>the difference between <code>()</code> and <code>{}</code> in statements of lemmas and definitions. This is what Kevin's answer is about.</li>\n<li>the fact that you can use <code>{}</code> to describe (sub)sets. This is what Eric's answer is about.</li>\n<li>and then you also use <code>{}</code> in tactic proofs to structure the code: by writing <code>{}</code> around a few tactics, you make them focus on the topmost goal (modulo some exceptions).</li>\n</ul>",
        "id": 351386872,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1682011218
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/113489-new-members/topic/Differences.20between.20.28.29.20and.20.7B.7D/near/351386186\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"611077\">Jiang Jiedong</span> You are passing an argument to <code>mul_nonneg_of_nonpos_of_nonpos</code>. Indeed, you have to prove a certain side-condition so that you can apply the lemma, and you prove this using <code>by rwa sub_nonpos</code>.<br>\nIf you don't put <code>()</code> around it, then Lean will try to make <code>by</code> the first argument to <code>mul_nonneg_of_nonpos_of_nonpos</code> and <code>rwa</code> the second, etc... But that is not what you want. Hence you put the <code>()</code> around it.</p>\n</blockquote>\n<p>Oh Thank you! I was just about to ask why I can use <code>{}</code> after the <code>have</code> tactic.  Now I learned that <code>{}</code> has these three different usage in different occasions. Thanks!</p>",
        "id": 351388162,
        "sender_full_name": "Jiang Jiedong",
        "timestamp": 1682011596
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"611077\">Jiang Jiedong</span> has marked this topic as resolved.</p>",
        "id": 351389071,
        "sender_full_name": "Notification Bot",
        "timestamp": 1682011878
    }
]