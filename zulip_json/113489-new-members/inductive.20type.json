[
    {
        "content": "<p>Hi! <br>\nI am doing some stuff with mathematical logic in Lean and i would like to ask you the following. <br>\nI have defined logic formulas as an inductive type with implication and negation (logic atoms are represented by natural numbers) the following way. </p>\n<div class=\"codehilite\"><pre><span></span><code>  <span class=\"kn\">inductive</span> <span class=\"n\">Form</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n  <span class=\"bp\">|</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">Form</span>\n  <span class=\"bp\">|</span> <span class=\"n\">imp</span> <span class=\"o\">:</span> <span class=\"n\">Form</span> <span class=\"bp\">→</span> <span class=\"n\">Form</span> <span class=\"bp\">→</span> <span class=\"n\">Form</span>\n  <span class=\"bp\">|</span> <span class=\"n\">neg</span> <span class=\"o\">:</span> <span class=\"n\">Form</span> <span class=\"bp\">→</span> <span class=\"n\">Form</span>\n</code></pre></div>\n\n\n<p>I would like to somehow express the fact, that some formula B is a sub-formula of some other formula A.  That means, that either A = B or that somewhere during the process of creating formula A with the inductive rules, the formula B  is used (either in implication or negation (or even as a logical atom) ). Is there some way to express that? Cheers, Jachym</p>",
        "id": 195689594,
        "sender_full_name": "jachym simon",
        "timestamp": 1588156834
    },
    {
        "content": "<p>This could be an inductively defined Prop</p>",
        "id": 195689656,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1588156875
    },
    {
        "content": "<p>How does lean know to prevent lists of heterogeneous types?<br>\ne.g. </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">inductive</span> <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">nil</span> <span class=\"o\">{}</span> <span class=\"o\">:</span> <span class=\"n\">list</span>\n<span class=\"bp\">|</span> <span class=\"n\">cons</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">list</span> <span class=\"bp\">→</span> <span class=\"n\">list</span>\n\n<span class=\"n\">def</span> <span class=\"n\">mylist</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">cons</span> <span class=\"mi\">2</span> <span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">nil</span><span class=\"o\">)</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"o\">(</span><span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">cons</span> <span class=\"n\">bool</span><span class=\"bp\">.</span><span class=\"n\">true</span> <span class=\"n\">mylist</span><span class=\"o\">)</span> <span class=\"c1\">-- error</span>\n</code></pre></div>\n\n\n<p>The <code>cons</code>  constructor takes a type <code>α</code> and a <code>list</code> but there is no type specified. I guess I'm not sure why we don't do<br>\n<code>| cons : α → list α → list α</code>  (which doesn't work)</p>",
        "id": 195863932,
        "sender_full_name": "Brandon Brown",
        "timestamp": 1588263614
    },
    {
        "content": "<p>The type is a parameter, the <code>(α : Type u)</code> on the first line</p>",
        "id": 195864053,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588263677
    },
    {
        "content": "<p>you are required not to write parameters in the definition of the inductive, they get added in the real type of the constructor</p>",
        "id": 195864109,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588263702
    },
    {
        "content": "<p>Ah I see, yeah</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">cons</span> <span class=\"c1\">-- list.cons : ?M_1 → list ?M_1 → list ?M_1</span>\n</code></pre></div>",
        "id": 195864256,
        "sender_full_name": "Brandon Brown",
        "timestamp": 1588263773
    }
]