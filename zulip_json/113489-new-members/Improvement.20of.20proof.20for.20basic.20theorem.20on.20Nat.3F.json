[
    {
        "content": "<p>I was writing a proof of a theorem and needed what seemed like a basic fact on the natural numbers, that <code>c - b + a = c - (b - a)</code> if <code>a ≤ b</code> and <code>b ≤ c</code>. Of course, I've just started learning Lean, so I'm not all that familiar with the basic toolbox yet, but I took a look at the theorems available for <code>Nat</code> and didn't see this precise statement. I took a crack at proving it myself and quickly found that the complexity of my proof got a bit out of hand:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">Nat.sub_add</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hab</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hbc</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"bp\">-</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">c</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">-</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"n\">h1</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">sub_succ</span> <span class=\"n\">c</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">-</span> <span class=\"n\">n</span><span class=\"o\">))</span>\n  <span class=\"k\">have</span> <span class=\"n\">h2</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">Nat.sub_sub_self</span> <span class=\"o\">(</span><span class=\"n\">le_trans</span> <span class=\"o\">(</span><span class=\"n\">sub_le</span> <span class=\"n\">b</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">hbc</span><span class=\"o\">)</span>\n  <span class=\"k\">have</span> <span class=\"n\">h3</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">succ</span> <span class=\"n\">m</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">Nat.lt_of_lt_of_le</span> <span class=\"o\">(</span><span class=\"n\">lt_succ.mpr</span> <span class=\"o\">(</span><span class=\"n\">le_refl</span> <span class=\"n\">m</span><span class=\"o\">))</span> <span class=\"n\">h</span>\n  <span class=\"k\">have</span> <span class=\"n\">h4</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hm</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hn</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">succ</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"n\">Nat.sub_lt_sub_left</span> <span class=\"n\">hn</span> <span class=\"n\">hm</span>\n  <span class=\"k\">have</span> <span class=\"n\">h5</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hmn</span> <span class=\"o\">:</span> <span class=\"n\">succ</span> <span class=\"n\">m</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">Nat.sub_pos_of_lt</span> <span class=\"o\">(</span><span class=\"n\">h3</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"n\">hmn</span><span class=\"o\">)</span>\n  <span class=\"k\">have</span> <span class=\"n\">h6</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hlm</span> <span class=\"o\">:</span> <span class=\"n\">succ</span> <span class=\"n\">l</span> <span class=\"bp\">≤</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hmn</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n    <span class=\"n\">Nat.sub_sub_self</span> <span class=\"o\">(</span><span class=\"n\">le_trans</span> <span class=\"o\">(</span><span class=\"n\">h4</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">-</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">h5</span> <span class=\"n\">l</span> <span class=\"n\">m</span> <span class=\"n\">hlm</span><span class=\"o\">)</span>\n      <span class=\"o\">(</span><span class=\"n\">Nat.lt_of_lt_of_le</span> <span class=\"n\">succ_pos'</span> <span class=\"o\">(</span><span class=\"n\">le_trans</span> <span class=\"n\">hlm</span> <span class=\"n\">hmn</span><span class=\"o\">)))</span> <span class=\"o\">(</span><span class=\"n\">le_refl</span> <span class=\"n\">n</span><span class=\"o\">))</span>\n  <span class=\"n\">induction</span> <span class=\"n\">a</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">simp</span>\n  <span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"n\">a</span> <span class=\"n\">ih</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"n\">h1</span> <span class=\"n\">a</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h2</span> <span class=\"n\">a</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">add_succ</span><span class=\"o\">,</span> <span class=\"n\">sub_succ</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">h6</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">hab</span> <span class=\"n\">hbc</span><span class=\"o\">,</span> <span class=\"n\">ih</span> <span class=\"o\">(</span><span class=\"n\">le_trans</span> <span class=\"o\">(</span><span class=\"n\">le_succ</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"n\">hab</span><span class=\"o\">)]</span>\n</code></pre></div>\n<p>Surely there's a better way to show this?</p>",
        "id": 377958960,
        "sender_full_name": "Michael Lee",
        "timestamp": 1690160898
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">Nat.sub_add</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hab</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hbc</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"bp\">-</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">c</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">-</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">tsub_tsub_assoc</span> <span class=\"n\">hbc</span> <span class=\"n\">hab</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span>\n</code></pre></div>",
        "id": 377959583,
        "sender_full_name": "David Renshaw",
        "timestamp": 1690161128
    },
    {
        "content": "<p>I found that using the <code>exact?</code> tactic</p>",
        "id": 377959663,
        "sender_full_name": "David Renshaw",
        "timestamp": 1690161163
    },
    {
        "content": "<p>Oh, that's nice. Didn't know about <code>exact?</code>. How does that work? Is it documented somewhere?</p>",
        "id": 377960270,
        "sender_full_name": "Michael Lee",
        "timestamp": 1690161389
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/Tactic/LibrarySearch.html\">https://leanprover-community.github.io/mathlib4_docs/Mathlib/Tactic/LibrarySearch.html</a></p>",
        "id": 377960346,
        "sender_full_name": "David Renshaw",
        "timestamp": 1690161426
    },
    {
        "content": "<p>Hm... I do wonder what the best way to prove your theorem would be <em>without</em> using mathlib</p>",
        "id": 377960567,
        "sender_full_name": "David Renshaw",
        "timestamp": 1690161505
    },
    {
        "content": "<p>I realize now that I could have saved about 12 hours of painstakingly looking through the library while working on the larger theorem with the help of <code>apply?</code> and <code>exact?</code></p>",
        "id": 377961038,
        "sender_full_name": "Michael Lee",
        "timestamp": 1690161704
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243791\">David Renshaw</span> <a href=\"#narrow/stream/113489-new-members/topic/Improvement.20of.20proof.20for.20basic.20theorem.20on.20Nat.3F/near/377960567\">said</a>:</p>\n<blockquote>\n<p>Hm... I do wonder what the best way to prove your theorem would be <em>without</em> using mathlib</p>\n</blockquote>\n<p>Most of these theorems are being migrated to std, although they need some decoding to revert them to their original Nat-based forms</p>",
        "id": 377973869,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1690167770
    }
]