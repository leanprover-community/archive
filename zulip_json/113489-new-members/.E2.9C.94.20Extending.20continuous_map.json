[
    {
        "content": "<p>Hello, I am working on developing the notion of a directed topological space (a.k.a. dispace): a topological space with special set of directed paths (dipaths).</p>\n<p>Implementation:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">topology.path_connected</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">subparam</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">γ</span> <span class=\"o\">:</span> <span class=\"n\">path</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">I</span> <span class=\"bp\">→</span> <span class=\"n\">I</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hfcont</span> <span class=\"o\">:</span> <span class=\"n\">continuous</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">path</span> <span class=\"o\">(</span><span class=\"n\">γ</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"mi\">0</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">γ</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span>\n  <span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"n\">γ</span> <span class=\"bp\">∘</span> <span class=\"n\">f</span><span class=\"o\">,</span>\n  <span class=\"n\">continuous_to_fun</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">continuity</span><span class=\"o\">,</span>\n  <span class=\"n\">source'</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">,</span>\n  <span class=\"n\">target'</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span>\n<span class=\"o\">}</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">directed_space</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">topological_space</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">is_dipath</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">},</span> <span class=\"n\">path</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">is_dipath_constant</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">is_dipath</span> <span class=\"o\">(</span><span class=\"n\">path.refl</span> <span class=\"n\">x</span><span class=\"o\">))</span>\n  <span class=\"o\">(</span><span class=\"n\">is_dipath_concat</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">γ₁</span> <span class=\"o\">:</span> <span class=\"n\">path</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">γ₂</span> <span class=\"o\">:</span> <span class=\"n\">path</span> <span class=\"n\">y</span> <span class=\"n\">z</span><span class=\"o\">},</span> <span class=\"n\">is_dipath</span> <span class=\"n\">γ₁</span> <span class=\"bp\">→</span> <span class=\"n\">is_dipath</span> <span class=\"n\">γ₂</span> <span class=\"bp\">→</span> <span class=\"n\">is_dipath</span> <span class=\"o\">(</span><span class=\"n\">path.trans</span> <span class=\"n\">γ₁</span> <span class=\"n\">γ₂</span><span class=\"o\">))</span>\n  <span class=\"o\">(</span><span class=\"n\">is_dipath_reparam</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">γ</span> <span class=\"o\">:</span> <span class=\"n\">path</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">I</span> <span class=\"bp\">→</span> <span class=\"n\">I</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">hfcont</span> <span class=\"o\">:</span> <span class=\"n\">continuous</span> <span class=\"n\">f</span><span class=\"o\">},</span> <span class=\"n\">monotone</span> <span class=\"n\">f</span> <span class=\"bp\">→</span> <span class=\"n\">is_dipath</span> <span class=\"n\">γ</span> <span class=\"bp\">→</span> <span class=\"n\">is_dipath</span> <span class=\"o\">(</span><span class=\"n\">subparam</span> <span class=\"n\">γ</span> <span class=\"n\">f</span> <span class=\"n\">hfcont</span><span class=\"o\">))</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">is_dipath</span> <span class=\"o\">[</span><span class=\"n\">directed_space</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">γ</span> <span class=\"o\">:</span> <span class=\"n\">path</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span>  <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">directed_space.is_dipath</span> <span class=\"n\">α</span> <span class=\"o\">‹</span><span class=\"n\">_</span><span class=\"o\">›</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">γ</span>\n</code></pre></div>\n<p>Between such spaces, a directed map is a continuous map (on the underlying topological spaces) that maps dipaths to dipaths: so if <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mo>:</mo><mi>X</mi><mo>→</mo><mi>Y</mi></mrow><annotation encoding=\"application/x-tex\">f: X \\rightarrow Y</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">Y</span></span></span></span> is continuous and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mo>∘</mo><mi>γ</mi></mrow><annotation encoding=\"application/x-tex\">f  \\circ \\gamma</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">∘</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05556em;\">γ</span></span></span></span> is a dipath in <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>Y</mi></mrow><annotation encoding=\"application/x-tex\">Y</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">Y</span></span></span></span> for all dipaths <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>γ</mi></mrow><annotation encoding=\"application/x-tex\">\\gamma</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05556em;\">γ</span></span></span></span> in <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>X</mi></mrow><annotation encoding=\"application/x-tex\">X</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span></span></span></span>.</p>\n<p>To me, it seems like there are three ways to define this notion of directedness:<br>\n1) Define directed as an \"extends continuous\"-Structure<br>\n2) Define directed as a Prop of a continuous-Prop parameter<br>\n3) Define directed as a Prop of a continuous_map-Type parameter</p>\n<p>My implementations of the three versions:<br>\n1)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">directed</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">directed_space</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">directed_space</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"kd\">extends</span> <span class=\"n\">continuous</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">paths_to_paths</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">⦃</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">⦄</span> <span class=\"o\">(</span><span class=\"n\">γ</span> <span class=\"o\">:</span> <span class=\"n\">path</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">),</span> <span class=\"n\">is_dipath</span> <span class=\"n\">γ</span> <span class=\"bp\">→</span> <span class=\"n\">is_dipath</span> <span class=\"o\">(</span><span class=\"n\">γ.map</span> <span class=\"n\">to_continuous</span><span class=\"o\">))</span>\n</code></pre></div>\n<p>2) </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">directed</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">directed_space</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">directed_space</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">continuous</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">paths_to_paths</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">⦃</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">⦄</span> <span class=\"o\">(</span><span class=\"n\">γ</span> <span class=\"o\">:</span> <span class=\"n\">path</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">),</span> <span class=\"n\">is_dipath</span> <span class=\"n\">γ</span> <span class=\"bp\">→</span> <span class=\"n\">is_dipath</span> <span class=\"o\">(</span><span class=\"n\">γ.map</span> <span class=\"n\">hf</span><span class=\"o\">))</span>\n</code></pre></div>\n<p>3)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">directed</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">directed_space</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">directed_space</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">(</span><span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">β</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">paths_to_paths</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">⦃</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">⦄</span> <span class=\"o\">(</span><span class=\"n\">γ</span> <span class=\"o\">:</span> <span class=\"n\">path</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">),</span> <span class=\"n\">is_dipath</span> <span class=\"n\">γ</span> <span class=\"bp\">→</span> <span class=\"n\">is_dipath</span> <span class=\"o\">(</span><span class=\"n\">γ.map</span> <span class=\"n\">f.continuous_to_fun</span><span class=\"o\">))</span>\n</code></pre></div>\n<p>I also want to extend <code>continuous_map</code> into <code>directed_map</code> using a <code>directed_to_fun</code>-field and create a <code>directed_map_class</code> type. A fourth option is to forgo the separate directed structure and have <code>paths_to_paths</code> directly as a field of <code>directed_map</code></p>\n<p>Should one of these methods be preferred over others? Intuitively, I started with option 1, but I notice that each time I want to prove that a continuous map is directed, I have to resupply the <code>is_open_preimage</code> field.</p>",
        "id": 343164401,
        "sender_full_name": "Dominique Lawson",
        "timestamp": 1679328708
    },
    {
        "content": "<p>I would expect you to use option 3, except I would call it <code>directed_continuous_map</code> and make it <code>extend C(α, β)</code>. These are the morphisms in this category after all, and in general we prefer (read: we think it's easier) to have bundled morphisms in mathlib. Continuity is one of the more rare situations where we have both the unbundled <a href=\"https://leanprover-community.github.io/mathlib_docs/find/continuous\">docs#continuous</a> as well as the bundled <a href=\"https://leanprover-community.github.io/mathlib_docs/find/continuous_map\">docs#continuous_map</a>. The argument goes basically that continuity is used everywhere across the library in many contexts, so it makes sense to have an unbundled version.</p>\n<p>So something like this is what I suggest:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">directed_continuous_map</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">directed_space</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">directed_space</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"kd\">extends</span> <span class=\"n\">C</span><span class=\"o\">(</span><span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">paths_to_paths</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">⦃</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">⦄</span> <span class=\"o\">(</span><span class=\"n\">γ</span> <span class=\"o\">:</span> <span class=\"n\">path</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">),</span> <span class=\"n\">is_dipath</span> <span class=\"n\">γ</span> <span class=\"bp\">→</span> <span class=\"n\">is_dipath</span> <span class=\"o\">(</span><span class=\"n\">γ.map</span> <span class=\"n\">continuous_to_fun</span><span class=\"o\">))</span>\n</code></pre></div>\n<p>And then go on to give the <code>directed_continuous_map_class</code> and so forth.</p>\n<p>One final note: we're about to (read: as soon as I finish the PR) have <code>topology.path_connected</code> ported to mathlib 4, and since this is new material, you could directly start it in mathlib 4! On that note, I'll go see if I can finish the remaining issues in that PR.</p>",
        "id": 343187576,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1679334487
    },
    {
        "content": "<p>Hey Jireh, thank you for your answer! After some rewriting, it seems that my original approach was indeed somewhat redundant and your suggestion works great.</p>",
        "id": 343248623,
        "sender_full_name": "Dominique Lawson",
        "timestamp": 1679356678
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"601528\">Dominique Lawson</span> has marked this topic as resolved.</p>",
        "id": 343248626,
        "sender_full_name": "Notification Bot",
        "timestamp": 1679356680
    }
]