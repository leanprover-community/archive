[
    {
        "content": "<p>I think <a href=\"https://github.com/ImperialCollegeLondon/M40001_lean\" target=\"_blank\" title=\"https://github.com/ImperialCollegeLondon/M40001_lean\">https://github.com/ImperialCollegeLondon/M40001_lean</a> deserves its own thread.</p>",
        "id": 177978299,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1570869516
    },
    {
        "content": "<p>I just played the first two levels. Some remarks about design:<br>\n<a href=\"/user_uploads/3121/HgHeGnhs-IQHwiDl8jeGKS1b/pasted_image.png\" target=\"_blank\" title=\"pasted_image.png\">pasted image</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/HgHeGnhs-IQHwiDl8jeGKS1b/pasted_image.png\" target=\"_blank\" title=\"pasted image\"><img src=\"/user_uploads/3121/HgHeGnhs-IQHwiDl8jeGKS1b/pasted_image.png\"></a></div>",
        "id": 177978303,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1570869537
    },
    {
        "content": "<p>What is this huge white gap at the bottom of my proof? It's constantly there, and feels weird.</p>",
        "id": 177978320,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1570869568
    },
    {
        "content": "<p>The tick mark left of \"Lemma\" feels weird before the lemma is proven.</p>",
        "id": 177978325,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1570869597
    },
    {
        "content": "<p>You really need some postprocessing of the state window. The most important is that displaying information on <code>refl</code> is very distracting. The line numbers refer to nothing meaningful to the player. Syntax highlighting is missing. The upper right switch is irrelevant.</p>",
        "id": 177978428,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1570869730
    },
    {
        "content": "<p>When proving, the red squiggle under the last character which simply indicates the proof is not finished is very confusing.</p>",
        "id": 177978434,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1570869777
    },
    {
        "content": "<p>When navigating from page to page, the browser remembers the proofs, but still displays \"Click to prove\", hiding the proof.</p>",
        "id": 177978485,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1570869860
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"132175\">@Mohammad Pedramfar</span></p>",
        "id": 177978486,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1570869864
    },
    {
        "content": "<p>Mohammad -- the undergraduates also have some feedback about this game. I have some notes in my office -- we should maybe meet on Monday. It's just about playable but we should make some minor changes before I start banging on about it on Twitter. In my mind one big question is whether we should make it all very beautiful -- but this is something that I am incapable of doing and which might take forever. Another big question is how this compares to the approach which <span class=\"user-mention\" data-user-id=\"123965\">@Bryan Gin-ge Chen</span> was taking using Observable. I know that Patrick feels like proving things about natural numbers is hellishly boring, but it's actually what we're teaching the undergraduates at Imperial right now so I thought it was worth pushing on with this.</p>",
        "id": 177980319,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1570873270
    },
    {
        "content": "<p>I have a bunch of levels which aren't pushed. By the way, Mohammad's code which made the website from the Lean code is here <a href=\"https://github.com/mpedramfar/Lean-game-maker\" target=\"_blank\" title=\"https://github.com/mpedramfar/Lean-game-maker\">https://github.com/mpedramfar/Lean-game-maker</a> and the Lean code which we used is here <a href=\"https://github.com/mpedramfar/natural_number_game\" target=\"_blank\" title=\"https://github.com/mpedramfar/natural_number_game\">https://github.com/mpedramfar/natural_number_game</a> although I made some local modifications which I didn't push because I got confused about if I could fork his fork of my project :-)</p>",
        "id": 177980381,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1570873378
    },
    {
        "content": "<p>Is there a link to a \"live\" version of the site that I'm missing or do we have to install it locally to try it out? I did actually experiment a bit with implementing some of the \"natural number game\" in Observable back when you first mentioned it but I didn't get much further than parsing some edited version of the comments into markdown (see <a href=\"https://observablehq.com/d/2398a546dac54a5d\" target=\"_blank\" title=\"https://observablehq.com/d/2398a546dac54a5d\">here</a>, but there's really not much).</p>",
        "id": 177992132,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1570891948
    },
    {
        "content": "<p>yeah it's live</p>",
        "id": 177994184,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1570894971
    },
    {
        "content": "<p><a href=\"http://wwwf.imperial.ac.uk/~buzzard/xena/natural_number_game/\" target=\"_blank\" title=\"http://wwwf.imperial.ac.uk/~buzzard/xena/natural_number_game/\">http://wwwf.imperial.ac.uk/~buzzard/xena/natural_number_game/</a></p>",
        "id": 177994193,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1570894997
    },
    {
        "content": "<p>I'm getting the undergraduates to debug it.</p>",
        "id": 177994200,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1570895019
    },
    {
        "content": "<blockquote>\n<p>I just played the first two levels. Some remarks about design:<br>\n<a href=\"/user_uploads/3121/HgHeGnhs-IQHwiDl8jeGKS1b/pasted_image.png\" target=\"_blank\" title=\"pasted_image.png\">pasted image</a></p>\n</blockquote>\n<p>Thanks, these are good points. Most of them are easy to implement and I'll get to them soon. This is the first version.</p>",
        "id": 178065162,
        "sender_full_name": "Mohammad Pedramfar",
        "timestamp": 1571017907
    },
    {
        "content": "<blockquote>\n<p>Mohammad -- the undergraduates also have some feedback about this game. I have some notes in my office -- we should maybe meet on Monday. It's just about playable but we should make some minor changes before I start banging on about it on Twitter. In my mind one big question is whether we should make it all very beautiful -- but this is something that I am incapable of doing and which might take forever. Another big question is how this compares to the approach which <span class=\"user-mention silent\" data-user-id=\"123965\">Bryan Gin-ge Chen</span> was taking using Observable. I know that Patrick feels like proving things about natural numbers is hellishly boring, but it's actually what we're teaching the undergraduates at Imperial right now so I thought it was worth pushing on with this.</p>\n</blockquote>\n<p>Yeah, sure. Monday's fine. I'm not an expert on Observable so I'm not sure, but it seems to me that it's ideal for when you want people to be able to play around with \"everything\" in the page, including the javascript. If I understand it correctly, whether it's a website or observable, the codes to make it more beautiful and shiny must be written and are almost the same codes, but Observable might limit how much we will be able to control the design. I'm not sure though.</p>",
        "id": 178065412,
        "sender_full_name": "Mohammad Pedramfar",
        "timestamp": 1571018220
    },
    {
        "content": "<p>There are indeed some style limitations for Observable notebooks hosted on the observablehq site. However, it's possible to host notebooks on your own without those restrictions. There's probably not a big advantage to redoing all your work in a notebook if you've already gotten things to work well with the <code>lean-web-editor</code> project though.</p>",
        "id": 178065792,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1571018732
    },
    {
        "content": "<blockquote>\n<p>I have a bunch of levels which aren't pushed. By the way, Mohammad's code which made the website from the Lean code is here <a href=\"https://github.com/mpedramfar/Lean-game-maker\" target=\"_blank\" title=\"https://github.com/mpedramfar/Lean-game-maker\">https://github.com/mpedramfar/Lean-game-maker</a> and the Lean code which we used is here <a href=\"https://github.com/mpedramfar/natural_number_game\" target=\"_blank\" title=\"https://github.com/mpedramfar/natural_number_game\">https://github.com/mpedramfar/natural_number_game</a> although I made some local modifications which I didn't push because I got confused about if I could fork his fork of my project :-)</p>\n</blockquote>\n<p>I forgot that I had access to the repository. I updated it, which didn't modify any files, just added the \"game\" folder.</p>",
        "id": 178066026,
        "sender_full_name": "Mohammad Pedramfar",
        "timestamp": 1571019008
    },
    {
        "content": "<blockquote>\n<p>There are indeed some style limitations for Observable notebooks hosted on the observablehq site. However, it's possible to host notebooks on your own without those restrictions. There's probably not a big advantage to redoing all your work in a notebook if you've already gotten things to work well with the <code>lean-web-editor</code> project though.</p>\n</blockquote>\n<p>Makes sense. <br>\nIs it really easier to work with it ?</p>",
        "id": 178066042,
        "sender_full_name": "Mohammad Pedramfar",
        "timestamp": 1571019049
    },
    {
        "content": "<blockquote>\n<p>Is it really easier to work with it?</p>\n</blockquote>\n<p>I can't really give an unbiased answer to this. I did try to make it easier to do some things, like embed a bunch of different Lean editors into a document and pass data between Lean and JavaScript...</p>",
        "id": 178066396,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1571019533
    },
    {
        "content": "<p>Yeah, that embedding was good. It definitely makes it easy to make some kinds of interactive pages, in a way that you can play with it.</p>",
        "id": 178066632,
        "sender_full_name": "Mohammad Pedramfar",
        "timestamp": 1571019800
    },
    {
        "content": "<p>Hi, I'm interested in doing a foreign language translation of the natural numbers game. Javascript is out of my comfort zone so this might be a stupid question, but if I build a game and it works locally when accessed through the <code>run_locally.sh</code> script, can I just take out the html directory and serve people the index.html or are there other items from the repo that need to be on the server?</p>",
        "id": 187976049,
        "sender_full_name": "Chris Bailey",
        "timestamp": 1581473369
    },
    {
        "content": "<p>Also I guess this is a question for Prof. Buzzard, but are there any resources being used that require an API key or anything like that?</p>",
        "id": 187976053,
        "sender_full_name": "Chris Bailey",
        "timestamp": 1581473381
    },
    {
        "content": "<p>I think the answers are \"yes, you only need the html directory\" and \"no, there are no such resources\", respectively, but the right person to tag would probably be <span class=\"user-mention\" data-user-id=\"132175\">@Mohammad Pedramfar</span> .</p>",
        "id": 187976723,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1581474482
    },
    {
        "content": "<p>Perfect, thanks.</p>",
        "id": 187977037,
        "sender_full_name": "Chris Bailey",
        "timestamp": 1581475029
    },
    {
        "content": "<p>Yes, everything you would need to run the server is in the html directory.</p>",
        "id": 188066546,
        "sender_full_name": "Mohammad Pedramfar",
        "timestamp": 1581552499
    },
    {
        "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> , in Level 6/17 of inequality world, <code>have h0 := eq_zero_of_add_right_eq_self he</code> at some point works, but using <code>ave h0, from eq_zero_of_add_right_eq_self he</code> didn't work! This is strange because the <code>have P, from ...</code> works in some situations but the tactic is documented in the game only with the <code>have P := ...</code> syntax.</p>\n<p>Sorry if this is already reported.</p>",
        "id": 217016581,
        "sender_full_name": "Alexandre Rademaker",
        "timestamp": 1605626571
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">have</span> <span class=\"n\">he</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n  <span class=\"n\">sorry</span><span class=\"o\">,</span>\n<span class=\"k\">have</span> <span class=\"n\">h0</span> <span class=\"o\">:=</span> <span class=\"n\">eq_zero_of_add_right_eq_self</span> <span class=\"n\">he</span><span class=\"o\">,</span>\n<span class=\"k\">have</span> <span class=\"n\">h1</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">eq_zero_of_add_right_eq_self</span> <span class=\"n\">he</span><span class=\"o\">,</span>\n<span class=\"n\">sorry</span><span class=\"o\">,</span>\n</code></pre></div>\n<p>works for me, and the local context just before the final <code>sorry</code> is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">mynat</span><span class=\"o\">,</span>\n<span class=\"n\">hab</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n<span class=\"n\">hba</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n<span class=\"n\">he</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n<span class=\"n\">h0</span> <span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span>\n</code></pre></div>",
        "id": 217020259,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1605628136
    },
    {
        "content": "<p>Oh , this is strange! Ok, my mistake</p>",
        "id": 217074351,
        "sender_full_name": "Alexandre Rademaker",
        "timestamp": 1605653415
    },
    {
        "content": "<p>I was just thinking some more about what <span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> said during the panel, about students \"spamming\" their solutions into lean (trying every possible tactic without really thinking what they expect to work ahead of time).<br>\nLean and the natural number game are very good at providing positive reinforcement of what works (\"Goals accomplished <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span> \") but have no real negatives to trying 100 things without thinking (typing is easier than thinking hard after all, I'm definitely guilty of getting lost in a lean proof and just spamming tactics without taking a step back).<br>\nI'd be very interested in seeing the impact on student experiences if there was some sort of feedback for doing this, I'm thinking something like at each new world you start with 100 points in the top right, each time you enter a new tactic line and the line fails you get your points reduced by 90% of your total, and a cumulative total is kept summing the totals for all levels completed or something, nothing as harsh as actually losing lives and dying and being reset to a new level in a video game, but some extra stat people will want to keep up.<br>\nOf course this might discourage genuine experimentation with different proof strategies (which is of course a good thing), so I really have no idea if its actually a useful addition so it would be very cool to see some actual A/B testing type data on this (as always).</p>",
        "id": 222060918,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1610104614
    },
    {
        "content": "<p>Maybe this could be a \"hard mode\" option on the nng people opt into or something? <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span>  you don't get any data from the nng do you?</p>",
        "id": 222061007,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1610104697
    },
    {
        "content": "<p>I don't, and I don't know how to, and Mohammad now works for Uber. I've read that penalising people for wrong moves makes your game less popular though ;-)</p>",
        "id": 222062455,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1610105842
    },
    {
        "content": "<p>Can you really go that far in the natural number game just trying random tactics? In my opinion it is not that students realize that for easy stuff they can basically  go in \"autopilot mode\". It is the same for a more experienced mathematician when he has to prove that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mn>2</mn><mi>x</mi><mo>−</mo><mi>y</mi><msup><mo stretchy=\"false\">)</mo><mn>5</mn></msup><mo>−</mo><mi>x</mi><msup><mi>y</mi><mn>6</mn></msup><mo>=</mo><mn>32</mn><msup><mi>x</mi><mn>5</mn></msup><mo>−</mo><mn>80</mn><msup><mi>x</mi><mn>4</mn></msup><mi>y</mi><mo>+</mo><mn>80</mn><msup><mi>x</mi><mn>3</mn></msup><msup><mi>y</mi><mn>2</mn></msup><mo>−</mo><mn>40</mn><msup><mi>x</mi><mn>2</mn></msup><msup><mi>y</mi><mn>3</mn></msup><mo>−</mo><mi>x</mi><msup><mi>y</mi><mn>6</mn></msup><mo>+</mo><mn>10</mn><mi>x</mi><msup><mi>y</mi><mn>4</mn></msup><mo>−</mo><msup><mi>y</mi><mn>5</mn></msup></mrow><annotation encoding=\"application/x-tex\">(2x-y)^5-xy^6= 32 x^5 - 80 x^4 y + 80 x^3 y^2 - 40 x^2 y^3 - x y^6 + 10 x y^4 - y^5</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\">2</span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.064108em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">5</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.008548em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">6</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.897438em;vertical-align:-0.08333em;\"></span><span class=\"mord\">3</span><span class=\"mord\">2</span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">5</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.008548em;vertical-align:-0.19444em;\"></span><span class=\"mord\">8</span><span class=\"mord\">0</span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">4</span></span></span></span></span></span></span></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.008548em;vertical-align:-0.19444em;\"></span><span class=\"mord\">8</span><span class=\"mord\">0</span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">3</span></span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.008548em;vertical-align:-0.19444em;\"></span><span class=\"mord\">4</span><span class=\"mord\">0</span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">3</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.008548em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">6</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.008548em;vertical-align:-0.19444em;\"></span><span class=\"mord\">1</span><span class=\"mord\">0</span><span class=\"mord mathnormal\">x</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">4</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.008548em;vertical-align:-0.19444em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">5</span></span></span></span></span></span></span></span></span></span></span>: we don't think, we just start doing the computation, and we know that this will work. Knowing that sometimes there is no need of thinking is a good skill... of course this is not interesting mathematics, but that will come a little later, with more difficult exercises.</p>",
        "id": 222063780,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1610106854
    },
    {
        "content": "<p>I lacked time yesterday but indeed one of the first thing I tell students in this course is I want them to be able to stop thinking when no thinking is required. When a goal starts with \"forall epsilon : ...\" I don't want them to think before writing: \"Let epsilon be ...\". But somehow this works too well in Lean and they have trouble transferring that skill to paper.</p>",
        "id": 222070810,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1610111940
    },
    {
        "content": "<p>I actually tried to play the NNG in Lean 4 a few days ago, and I was surprised to find out that it really is possible to solve most of these on \"autopilot\", i.e. just try induction with <code>rfl</code> in the base case without even thinking about it, or just keep adding the first lemma that come to mind in a <code>rw</code> call, etc.</p>",
        "id": 222076663,
        "sender_full_name": "Frédéric Dupuis",
        "timestamp": 1610115467
    },
    {
        "content": "<p>where is NNG4?</p>",
        "id": 222076757,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1610115513
    },
    {
        "content": "<p>Part of that game (the hardest part in fact!) is to translate the definitions of <code>mynat</code> into Lean 4 :-)</p>",
        "id": 222076847,
        "sender_full_name": "Frédéric Dupuis",
        "timestamp": 1610115574
    },
    {
        "content": "<p>One benefit of playing in Lean 4 is that you can add the line <code>notation \"ℕ\" =&gt; mynat</code> and not mess up anything.</p>",
        "id": 222077063,
        "sender_full_name": "Frédéric Dupuis",
        "timestamp": 1610115694
    },
    {
        "content": "<p>Is it online?</p>",
        "id": 222077481,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1610115883
    },
    {
        "content": "<p>I could put what I have online if there is interest.</p>",
        "id": 222077600,
        "sender_full_name": "Frédéric Dupuis",
        "timestamp": 1610115940
    },
    {
        "content": "<p>So by you trying to play the NNG in Lean 4 what you meant is that you ported NNG to Lean 4 yourself?</p>",
        "id": 222077754,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1610116005
    },
    {
        "content": "<p>It depends what you mean by \"ported the NNG\": I ported the basic setup (definition of <code>mynat</code>, instances to make it usable with numeric literals, etc), but I haven't written custom tactics or anything to make it as beginner-friendly as the original.</p>",
        "id": 222077939,
        "sender_full_name": "Frédéric Dupuis",
        "timestamp": 1610116090
    },
    {
        "content": "<p>I found it pretty playable with the tactics currently in Lean 4.</p>",
        "id": 222077977,
        "sender_full_name": "Frédéric Dupuis",
        "timestamp": 1610116121
    },
    {
        "content": "<p>oh never mind then</p>",
        "id": 222078555,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1610116390
    },
    {
        "content": "<p>I mean, maybe other people might still be interested.</p>",
        "id": 222078602,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1610116413
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> e.g.</p>",
        "id": 222078619,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1610116424
    },
    {
        "content": "<p>Yeah, there's really not much to it, I just wanted to try out Lean 4.</p>",
        "id": 222078874,
        "sender_full_name": "Frédéric Dupuis",
        "timestamp": 1610116551
    },
    {
        "content": "<p>It's on my infinitely long job list to have a go at NNG in Lean 4, I'm sure it will teach me a lot. But I wasn't considering a full port to e.g. a browser game seriously -- it is not clear to me that the gain will be worth the pain.</p>",
        "id": 222086231,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1610120259
    },
    {
        "content": "<p>I encountered far fewer obstacles than I thought, actually. The biggest issue was figuring out what happened to <code>has_zero</code> and <code>has_one</code>.</p>",
        "id": 222095672,
        "sender_full_name": "Frédéric Dupuis",
        "timestamp": 1610124732
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"311453\">@Frédéric Dupuis</span> I'd be curious in seeing your code if you don't mind putting it online!</p>",
        "id": 222096681,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1610125174
    },
    {
        "content": "<p><a href=\"https://github.com/dupuisf/lean4-experimentation/blob/master/src/nng.lean\">https://github.com/dupuisf/lean4-experimentation/blob/master/src/nng.lean</a></p>",
        "id": 222100150,
        "sender_full_name": "Frédéric Dupuis",
        "timestamp": 1610126720
    },
    {
        "content": "<p>Hi :) I just finished the natural number game, it was really fun! The levels are well designed and explanations are sufficient to understand the material but not spoil the solutions.</p>\n<p>A few questions</p>\n<ul>\n<li>I noticed in Proposition World, many of the levels are very similar to Function world. I assume this is to instill the \"moral\" that propositions and functions can be thought of as similar? Level 7 proposition world still says \"Function world\" though, and there are few more typos. Should I submit a PR for these, or is this intended?</li>\n<li>I'm not much of a mathematician but I can probably help out on the more programming aspects, are the issues in <a href=\"https://github.com/ImperialCollegeLondon/natural_number_game/issues\">https://github.com/ImperialCollegeLondon/natural_number_game/issues</a> good to start with if I wanted to help out?</li>\n<li>I'm a little fuzzy on the concept of \"fixed\" variables (as introduced in Adv Mult 4/4). If there's a declaration <code>a: mynat</code>, does that mean <code>a</code> is fixed in this context? If I'm doing an induction (for example) on <code>b</code> in <code>a+b&gt;a</code> and my inductive hypothesis ends up being <code>a+k&gt;a</code>, are both <code>a</code> and <code>k</code> the same \"kinds\" of variables in this context? Fixed? It seems a bit weird because I should be able to substitute anything I want for <code>a</code> in the inductive hypothesis and still have the proof be correct, but of course I cannot substitute <code>succ k</code> for <code>k</code>. Are there other kinds of variables? For example, in <code>\\exists z.z \\geq 0</code>, is z thought of as \"fixed\"?</li>\n</ul>",
        "id": 232857906,
        "sender_full_name": "Rei",
        "timestamp": 1617336706
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span></p>",
        "id": 232859472,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1617338374
    },
    {
        "content": "<p>Oh yeah proposition world and function world are a kind of joke way of teaching mathematicians about the Curry Howard correspondence. I did it like that because at the time I was convinced that mathematicians would better understand intro and apply in the context of functions and I thought that this was quite an amusing way to teach it. Since then I've discovered that mathematicians are just fine with the whole intro apply thing applied directly to propositions and proofs (see for example workshop 1 of <a href=\"https://xenaproject.wordpress.com/2021/01/24/formalising-mathematics-workshop-1/\">my recent course</a> where I just dive straight in) so if I were to write the game again then probably function world would not be in there. I would happily look at PRs, maybe it's about time I added less than world</p>",
        "id": 232879388,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1617355915
    },
    {
        "content": "<p>As a mathematician with no logic background, I can confirm that Kevin's joke landed, and \"amusing\" is an understatement.</p>\n<p>I was wondering, however, if it is worth avoiding explicit spoilers about that. At least I personally really appreciated sitting back and enjoying the NNG show.</p>",
        "id": 232884094,
        "sender_full_name": "Kalle Kytölä",
        "timestamp": 1617359303
    },
    {
        "content": "<p>In Power World, I noticed that the first two (at least) can be solved using only \"refl,\". I don't think that should be a valid strategy for either, as they are not literally equal.</p>",
        "id": 232911663,
        "sender_full_name": "n Simplex Pachinko",
        "timestamp": 1617377006
    },
    {
        "content": "<p>They are definitionally equal though, and that's what refl tests for, and I can't change the behaviour of lean there. I guess I could make a bunch of stuff irreducible, but in practice the one big change to lean I did make (disabling refl after rw) has caused some confusion when people come from NNG to proper lean so I'm reluctant to make any more changes such as breaking refl</p>",
        "id": 232932382,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1617386842
    },
    {
        "content": "<p>Can I ask a question about the Natural number game here? It looks like if I close a proof by \"simp\", the game does not acknowledge that the proof is complete. For example in Power World, Level 2, there is a very short proof like \"rw pow_succ, rw mul_zero, simp,\" but all I get is \"no goals\". However, if instead of \"simp\" I say \"refl\" it says \"Proof complete\". What am I missing here?</p>",
        "id": 249781858,
        "sender_full_name": "Jukka Kohonen",
        "timestamp": 1629235952
    },
    {
        "content": "<p>Weird. Just <code>simp [pow_succ]</code> also shows \"Proof complete\"</p>",
        "id": 249782166,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1629236125
    },
    {
        "content": "<p>it's just a bug (an annoying one tbf); don't worry about it!</p>",
        "id": 249782167,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1629236127
    },
    {
        "content": "<p>it can happen with <code>refl</code> and with other things too, it's very unpredictable in my experience</p>",
        "id": 249782188,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1629236144
    },
    {
        "content": "<p>Ok thanks :) It's just confusing that even if I complete all levels, the world stays blue in the Main Menu (because some of the levels were not \"really\" completed). I get the feeling that I missed something. Now that I know, I won't worry</p>",
        "id": 249782376,
        "sender_full_name": "Jukka Kohonen",
        "timestamp": 1629236248
    },
    {
        "content": "<p>Just hit enter a few times</p>",
        "id": 249820201,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1629274931
    },
    {
        "content": "<p>Where is the definition of prime numbers in lean? I tried <a href=\"http://data.nat.prime\">data.nat.prime</a> and <a href=\"http://init.data.nat.prime\">init.data.nat.prime</a> and many close variants thereof. It seems to have moved from where the online tutorials say they are, and I am having trouble finding it.</p>",
        "id": 249906510,
        "sender_full_name": "Lucas",
        "timestamp": 1629318090
    },
    {
        "content": "<p>Is <a href=\"https://leanprover-community.github.io/mathlib_docs/find/nat.prime\">docs#nat.prime</a> what you're looking for?</p>",
        "id": 249906671,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1629318160
    },
    {
        "content": "<p>it looks like it is, how do you set it up to be imported?</p>",
        "id": 249906909,
        "sender_full_name": "Lucas",
        "timestamp": 1629318276
    },
    {
        "content": "<p>Make sure your <a href=\"https://leanprover-community.github.io/install/project.html\">Lean project depends on mathlib</a> and add the line <code>import data.nat.prime</code> at the top of your file.</p>",
        "id": 249907386,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1629318558
    },
    {
        "content": "<p>Which online tutorial are you talking about?</p>",
        "id": 249907515,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1629318612
    },
    {
        "content": "<p>I'm going to look at what Bryan mentioned, I didn't know you needed this extra setup. Thanks for the help!</p>",
        "id": 249907685,
        "sender_full_name": "Lucas",
        "timestamp": 1629318712
    },
    {
        "content": "<p>Also, it was on youtube tutorials, lean for the curious mathematician</p>",
        "id": 249907762,
        "sender_full_name": "Lucas",
        "timestamp": 1629318731
    },
    {
        "content": "<p>they gave the example of proving the infinitude of primes</p>",
        "id": 249907783,
        "sender_full_name": "Lucas",
        "timestamp": 1629318748
    },
    {
        "content": "<p>The videos are unfortunately impossible to keep updated. However you can download an updated version of all the Lean files from those lectures as described <a href=\"https://leanprover-community.github.io/lftcm2020/exercises.html\">here</a>.</p>",
        "id": 249907922,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1629318840
    },
    {
        "content": "<p>are they already outdated?</p>",
        "id": 249908042,
        "sender_full_name": "Lucas",
        "timestamp": 1629318905
    },
    {
        "content": "<p>Anything about Lean + mathlib which is more than one day old is outdated: <a href=\"https://leanprover-community.github.io/mathlib_stats.html\">https://leanprover-community.github.io/mathlib_stats.html</a></p>",
        "id": 249908279,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1629319049
    },
    {
        "content": "<p>You can still learn a lot from those talks, but you can't expect the details to be accurate.</p>",
        "id": 249908326,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1629319077
    },
    {
        "content": "<p>alright, good to know for the future</p>",
        "id": 249908610,
        "sender_full_name": "Lucas",
        "timestamp": 1629319218
    },
    {
        "content": "<p>Hi guys! I have recently started exploring Lean. I am not able to access the Natural Number Game link  today. Few days ago it was just working fine. (<a href=\"https://www.ma.imperial.ac.uk/~buzzard/xena/natural_number_game/\">https://www.ma.imperial.ac.uk/~buzzard/xena/natural_number_game/</a> ) . Can anyone advise please?</p>",
        "id": 255634194,
        "sender_full_name": "Ayush Agrawal",
        "timestamp": 1633030415
    },
    {
        "content": "<p>The issue is also being discussed in this thread: <a href=\"#narrow/stream/113488-general/topic/natural.20numbers.20game\">https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/natural.20numbers.20game</a></p>",
        "id": 255635632,
        "sender_full_name": "Horațiu Cheval",
        "timestamp": 1633030948
    },
    {
        "content": "<p>I don't know what's going on. I've opened a ticket with the people who maintain the site but I've not heard back from them</p>",
        "id": 255658054,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1633040469
    },
    {
        "content": "<p>I found the natural number game recently and I am still working on finishing it, but I am getting an error with the website.<br>\n\"403 Forbidden<br>\nYou don't have permission to access this resource.\"</p>",
        "id": 290522451,
        "sender_full_name": "Galen Selligman",
        "timestamp": 1658502357
    },
    {
        "content": "<p>The NNG is also available at &lt;<a href=\"https://cbirkbeck.github.io/natural_number_game/\">https://cbirkbeck.github.io/natural_number_game/</a>&gt; .</p>",
        "id": 290524878,
        "sender_full_name": "Kalle Kytölä",
        "timestamp": 1658503342
    },
    {
        "content": "<p>Thanks. I've put in the usual complaint. Basically all of <a href=\"http://www.ma.imperial.ac.uk\">www.ma.imperial.ac.uk</a> is down right now and the issue is that there are some people high up in the system who would like it to be down always.</p>",
        "id": 290556940,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1658518562
    },
    {
        "content": "<p>Hello, I've been really enjoying the Natural Number Game for the past few days. I was wondering if there is a way to solve Advanced Proposition world lvl 10 using tactics in a way that might be more intuitive to someone who might approach the proof \"by hand\" like this:</p>\n<p>lemma contrapositive2 (P Q : Prop) : (¬ Q → ¬ P) → (P → Q) := sorry</p>\n<p>assume (¬ Q → ¬ P):<br>\n__assume P:<br>\n____assume ¬ Q:<br>\n______¬ P<br>\n____ ¬¬ Q<br>\n____Q<br>\n__P → Q<br>\n(¬ Q → ¬ P) → (P → Q) </p>\n<p>Thanks!</p>",
        "id": 295616830,
        "sender_full_name": "King Crawford",
        "timestamp": 1661617590
    },
    {
        "content": "<p>Maybe this is close enough?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">intro</span> <span class=\"n\">nqinp</span><span class=\"o\">,</span>\n<span class=\"n\">intro</span> <span class=\"n\">p</span><span class=\"o\">,</span>\n<span class=\"n\">by_contra</span> <span class=\"n\">nq</span><span class=\"o\">,</span>\n<span class=\"k\">have</span> <span class=\"n\">np</span> <span class=\"o\">:=</span> <span class=\"n\">nqinp</span> <span class=\"n\">nq</span><span class=\"o\">,</span>\n<span class=\"n\">exact</span> <span class=\"n\">np</span> <span class=\"n\">p</span><span class=\"o\">,</span>\n</code></pre></div>",
        "id": 295623530,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1661621870
    },
    {
        "content": "<p>This is exactly what I was looking for. Appreciate it!</p>",
        "id": 295623926,
        "sender_full_name": "King Crawford",
        "timestamp": 1661622098
    },
    {
        "content": "<p>I'm working through NNG and stuck on <code>eq_zero_or_eq_zero_of_mul_eq_zero</code>.</p>\n<p>I have </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">case</span> <span class=\"n\">mynat.succ</span>\n<span class=\"n\">a</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">mynat</span><span class=\"o\">,</span>\n<span class=\"n\">hd</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">∨</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n<span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">succ</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">∨</span> <span class=\"n\">succ</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n</code></pre></div>\n<p>which gets me <code>a=0</code> either through <code>succ_ne_zero</code> (assume right, leads to contradiction), or more directly by rewriting via <code>mul_succ</code> then <code>add_left_eq_zero</code> which gets me the left branch. </p>\n<p>But the latter rewrite fails due to \"metavariable\" issues, and I don't now how to get Lean to assume right.... I guess I could also get there through <code>hd</code> applied to <code>h</code>, but that also fails due to \"metavariable\" issues...</p>",
        "id": 298263540,
        "sender_full_name": "Arien Malec",
        "timestamp": 1662910654
    },
    {
        "content": "<p>Do you need to generalise <code>c</code>?</p>",
        "id": 298269228,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1662914278
    },
    {
        "content": "<p>Because the goal doesn't seem provable from your induction hypothesis</p>",
        "id": 298269436,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1662914444
    },
    {
        "content": "<p>Right now your inductive hypothesis <code>hd</code> is unusable because it needs as input a proof that <code>a*c=0</code> and you only have a hypothesis that <code>a*(c+1)=0</code>.</p>",
        "id": 298270339,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1662915040
    },
    {
        "content": "<p>the issue is the same if I use  <code>cases</code> -- agree that <code>hd</code> doesn't do much here. (If I understand the logic of cases, it splits the proof into a proof for zero <code>n</code> and a proof for non-zero (<code>succ n</code>) at which point I should be done with the disjunction but I can't tell that to Lean. With <code>cases</code> I get to:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">case</span> <span class=\"n\">mynat.succ</span>\n<span class=\"n\">a</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">mynat</span><span class=\"o\">,</span>\n<span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">succ</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">∨</span> <span class=\"n\">succ</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n</code></pre></div>\n<p>and since I know <code>succ_ne_zero</code> I should be done.</p>",
        "id": 298278265,
        "sender_full_name": "Arien Malec",
        "timestamp": 1662920722
    },
    {
        "content": "<p>No you're not at all done -- all you've managed to do is to reduce the question to the question you started with!</p>",
        "id": 298278360,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1662920784
    },
    {
        "content": "<p>Or maybe I'm not understanding your logic. Sure you know <code>succ c \\ne 0</code>. But how do you deduce a = 0 without assuming the thing you're supposed to be proving?</p>",
        "id": 298278426,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1662920848
    },
    {
        "content": "<p>Maybe you can show me an explicit example of the \"metavariable\" issues? Can you post some code which you think should work and doesn't?</p>",
        "id": 298278552,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1662920927
    },
    {
        "content": "<p>here are the moves that get the metavariable issue -- from the above:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">rw</span> <span class=\"n\">mul_succ</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">add_left_eq_zero</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">rewrite</span> <span class=\"n\">tactic</span> <span class=\"n\">failed</span><span class=\"o\">,</span> <span class=\"kd\">lemma</span> <span class=\"n\">lhs</span> <span class=\"n\">is</span> <span class=\"n\">a</span> <span class=\"n\">metavariable</span>\n<span class=\"n\">state</span><span class=\"o\">:</span>\n<span class=\"n\">case</span> <span class=\"n\">mynat.succ</span>\n<span class=\"n\">a</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">mynat</span><span class=\"o\">,</span>\n<span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">∨</span> <span class=\"n\">succ</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n</code></pre></div>\n<p>There's an implicit assumption that <code>a*c</code> : <code>mynat</code>...</p>",
        "id": 298279265,
        "sender_full_name": "Arien Malec",
        "timestamp": 1662921400
    },
    {
        "content": "<p>yeesh I got it with <code>left</code> + <code>exact add_left_eq_zero h</code></p>",
        "id": 298279906,
        "sender_full_name": "Arien Malec",
        "timestamp": 1662921872
    },
    {
        "content": "<p>Nice! Sorry, I'm just doing several other things at the same time. Let me try and figure out the error</p>",
        "id": 298279947,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1662921929
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/add_left_eq_zero\">docs#add_left_eq_zero</a></p>",
        "id": 298280022,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1662921971
    },
    {
        "content": "<p>OK after firing up NNG it appears that <code>add_left_eq_zero : a + b = 0 -&gt; b = 0</code></p>",
        "id": 298280125,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1662922066
    },
    {
        "content": "<p>so your error about metavariables is a very unhelpful error message which should instead say \"hey! You cannot <code>rw add_left_eq_zero</code> because <code>rw X</code> <em>only</em> works for lemmas <code>X</code> which are of the form <code>P = Q</code> or <code>P &lt;-&gt; Q</code>\"</p>",
        "id": 298280254,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1662922143
    },
    {
        "content": "<p>In fact <code>add_left_eq_zero</code> is a <em>function</em> which eats as input a proof that <code>X + Y = 0</code> for some X and Y, and returns a proof that <code>Y = 0</code>.</p>",
        "id": 298280348,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1662922217
    },
    {
        "content": "<p>And indeed <code>exact add_left_eq_zero h</code> works because this means \"feed <code>h</code> into the <code>add_left_eq_zero</code> function and the goal is exactly the output\". Sorry about the obscure error messages but hopefully that explains your problem!</p>",
        "id": 298280413,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1662922271
    },
    {
        "content": "<p>I also now understand that the inductive hypo was irrelevant -- I had imagined that one needed to do this by induction but as you point out you don't need the inductive hypothesis at all! It's been a while since I played through the game :-)</p>",
        "id": 298280452,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1662922313
    },
    {
        "content": "<p>super helpful! Bitten by the rw vs apply conceptual issue.</p>",
        "id": 298289337,
        "sender_full_name": "Arien Malec",
        "timestamp": 1662929715
    },
    {
        "content": "<p>Another issue here with inequality level 14 (<code>add_le_add_left</code>).</p>\n<p>My first thought was that <code>t + a ≤ t + b</code> is just <code>a + t ≤ b + t</code> by commutativity, but there's a quantification issue with how <code>add_le_add_right</code> is defined relative to <code>add_le_add_left</code>. Signature of right is <code>{a b : mynat} : a ≤ b → ∀ t, (a + t) ≤ (b + t)</code> and left is <code>add_le_add_left {a b : mynat} (h : a ≤ b) (t : mynat) : t + a ≤ t + b</code> which leads to an error:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">invalid</span> <span class=\"n\">type</span> <span class=\"n\">ascription</span><span class=\"o\">,</span> <span class=\"n\">term</span> <span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">mynat</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">t</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">t</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"n\">t</span> <span class=\"bp\">+</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">t</span> <span class=\"bp\">+</span> <span class=\"n\">b</span>\n</code></pre></div>\n<p>Is there a trick to address the quantification mismatch?</p>",
        "id": 298798584,
        "sender_full_name": "Arien Malec",
        "timestamp": 1663170887
    },
    {
        "content": "<p>Oh nevermind, <code>add_comm</code> applied to wrong side &amp; I didn't read the error message well enough. <span aria-label=\"flushed\" class=\"emoji emoji-1f633\" role=\"img\" title=\"flushed\">:flushed:</span></p>",
        "id": 298798930,
        "sender_full_name": "Arien Malec",
        "timestamp": 1663170996
    },
    {
        "content": "<p>But once I fixed that bonehead error, I still have the type error:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">invalid</span> <span class=\"n\">type</span> <span class=\"n\">ascription</span><span class=\"o\">,</span> <span class=\"n\">term</span> <span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">mynat</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">t</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">t</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">t</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">t</span>\n</code></pre></div>",
        "id": 298799083,
        "sender_full_name": "Arien Malec",
        "timestamp": 1663171059
    },
    {
        "content": "<p>Something like this?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">add_comm</span> <span class=\"n\">t</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">add_comm</span> <span class=\"n\">t</span> <span class=\"n\">b</span><span class=\"o\">],</span>\n<span class=\"n\">exact</span> <span class=\"n\">add_le_add_right</span> <span class=\"n\">h</span> <span class=\"n\">t</span><span class=\"o\">,</span>\n</code></pre></div>",
        "id": 298800831,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1663171573
    },
    {
        "content": "<p>Quck question, how would this expression be simplified |x - y + z| + w ^ 2 ≤ 10 + 5 + 4 + 3 ^ 2? I've tried combinations of abs_sub/abs_add and it always says it cannot find expressions of type |a+b| to get the inequality of &lt;= |a| + |b| or something of that sort. and le_trans doesn't do anything</p>",
        "id": 298809453,
        "sender_full_name": "Ryan Duan",
        "timestamp": 1663174172
    },
    {
        "content": "<p>Probably you need the fact that a \\le b and c \\le d implies a+c \\le b+d</p>",
        "id": 298809825,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1663174284
    },
    {
        "content": "<p>I see, there's no way to just evaluate away an abs value expression with three elements with just abs_sub/add?</p>",
        "id": 298810985,
        "sender_full_name": "Ryan Duan",
        "timestamp": 1663174663
    },
    {
        "content": "<p>adding <code>t</code> as a parameter worked -- collapses <code>∀ t</code> to  my <code>t : mynat</code> ?</p>",
        "id": 298813844,
        "sender_full_name": "Arien Malec",
        "timestamp": 1663175554
    },
    {
        "content": "<p>It now occurs to me that Lean does currying...</p>",
        "id": 298814249,
        "sender_full_name": "Arien Malec",
        "timestamp": 1663175720
    },
    {
        "content": "<p>Yeah, that's right</p>",
        "id": 298815809,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1663176310
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"533309\">@Ryan Duan</span> if you ask your question in a new thread it'll be much clearer whats going on here. Also check out the <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> guide, this will make your questions easier to answer</p>",
        "id": 298817095,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1663176779
    },
    {
        "content": "<p>As feedback to the NNG maintainers, the biggest issues in NNG were often the syntax of function calls - when I can call <code>foo_bar_baz h</code> and when I have to call <code>foo_bar_baz a b h</code>, etc., as well as the mental table I had to construct of when I have to <code>cases h</code> vs <code>split</code> vs etc. depending on if I'm in hypothesis space or goal space, etc.</p>\n<p>If I hadn't \"cheated\" and found some examples of how to do all this stuff, I'd still be in a maze working through <code>mul_left_cancel</code>...)</p>",
        "id": 298881140,
        "sender_full_name": "Arien Malec",
        "timestamp": 1663198254
    },
    {
        "content": "<p>But generally kudos -- have been interested in this space since I discovered OCaml and heard about this thing called Coq, but getting my arms around what automated theory provers did and how they worked was a bit overwhelming. NNG is an amazing intro to the curious computer scientist.</p>",
        "id": 298881489,
        "sender_full_name": "Arien Malec",
        "timestamp": 1663198538
    },
    {
        "content": "<p>Yeah I definitely could have said something about implicit and explicit inputs to functions. If you look at the type of a function, the inputs it can implicitly infer are those in <code>{}</code> brackets, but I'm not sure this is ever explicitly mentioned</p>",
        "id": 298913153,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1663225484
    },
    {
        "content": "<p>Advanced Addition world level 1/13 It says 'You should know a couple of ways to prove the below -- one directly using an exact' But I don't see how to prove directly and it without using apply. Any suggestion? Thanks!</p>",
        "id": 299549170,
        "sender_full_name": "Alberto Navarro Garmendia",
        "timestamp": 1663588333
    },
    {
        "content": "<p>If you can prove something in one line using <code>apply</code> you should be able to prove the same using <code>exact</code>, using the same lemma. The difference is that with <code>exact</code> you can specify all the arguments, that are \"guessed\" by Lean using <code>apply</code>. (You can also just use <code>_</code> as an argument.)</p>",
        "id": 299549350,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1663588451
    },
    {
        "content": "<p><a href=\"https://github.com/ImperialCollegeLondon/natural_number_game/blob/f29b6c2884299fc63fdfc81ae5d7daaa3219f9fd/src/game/world8/level1.lean#L46\">Spoiler from the source code</a></p>",
        "id": 299552519,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1663589719
    },
    {
        "content": "<p>Advanced Addition World, level 8/13. Typing <br>\n<code>intro h,\nrw ← add_left_cancel a b 0,</code><br>\nproduces two goals. Why??</p>\n<p>Second question: it is a little weird to always work <em>backwards</em>. For example, here, after <code>intro h</code> the goal is <code>b=0</code> while the hypothesis is <code>h:a+b=a</code> . The way to think <em>forward</em> would be that somehow <code>add_zero</code> should produce somehow  <code>p: a+b=a+0</code>  and <code>add_left_cancel</code> should produce  <code>q:b=0</code>. Is there a way to do so?</p>\n<p>Thanks in advance</p>",
        "id": 299729363,
        "sender_full_name": "Alberto Navarro Garmendia",
        "timestamp": 1663673169
    },
    {
        "content": "<p><code>add_left_cancel a b 0</code> has type <code>a + b = a + 0 -&gt; b = 0</code>. This is not an equality or an iff statement, so you cannot rewrite it. You attempt to use the <code>rw</code> tactic anyway, so Lean has to make a decision about what you could mean, and it decides that probably you're going to give a proof of <code>a + b = a + 0</code> later on (and creates this as a new goal) and then it tries to rewrite the new conclusion <code>b = 0</code> (which <em>is</em> an equality, so is rewritable) backwards, so it changes the 0 to a <code>b</code> giving you the first goal you see.</p>",
        "id": 299731218,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1663673968
    },
    {
        "content": "<p>Sure you can argue forwards in Lean, using repeated <code>have</code> statements, but it almost always takes longer. Here's a Lean version of your sketch proof:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"k\">have</span> <span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">add_zero</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"n\">exact</span> <span class=\"n\">add_left_cancel</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">h2</span><span class=\"o\">,</span>\n</code></pre></div>",
        "id": 299731803,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1663674229
    },
    {
        "content": "<p>The general structure of a formal proof is that you have multiple hypotheses but only one goal. The hypotheses tend to stick around, even when you've finished with them. The goal is fluid, it can change during a proof, and previous goals can be thrown away as the proof moves on. If you want to argue via \"we know this stuff, so we can deduce this, and now we can deduce this, and now this, and now we're done\" then you are constantly adding to the list of hypotheses. If you are instead arguing backwards, saying \"reduce the problem to this, and then to this, and then to this, and now we're done\" then you don't have to keep adding hypotheses to the local context and you can throw away previous goals. So from the point of view of formalisation it's less clutter.</p>\n<p>Under the hood, a proof is a function. What a tactic proof is really doing is building that function in an extremely flexible way, adding in parts of the function in funny places and leaving \"holes\" which become new goals. Thought of in this way, a forwards (\"normal for mathematician\") proof can be thought of as building other functions along the way which you plug into the definition of the function you actually want. Arguing backwards is building the function you actually want directly, by building the \"end part\" of it first (you build a function from A to C by directly plugging in the function from B to C and reducing the question to building the function from A to B -- this is the <code>apply</code> tactic). If instead you want to build the function from A to B first, you can't plug it in directly, you need to give it a new name and then apply it to the input (a term of type A) to get the term of type B which as mathematicians we're trained to think we want to have.</p>",
        "id": 299732613,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1663674575
    },
    {
        "content": "<p>Advanced Multiplication World 4/4. Hi all, I'm not too sure how to solve the first goal of this proof:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">mynat</span><span class=\"o\">,</span>\n<span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n<span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">mynat</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n</code></pre></div>\n<p>I assume the use of <code>eq_zero_or_eq_zero_of_mul_eq_zero</code> or <code>mul_eq_zero_iff</code> is necassary but I'm unsure what tactics I can use with them. Thanks!</p>",
        "id": 299772378,
        "sender_full_name": "Will Midwood",
        "timestamp": 1663685357
    },
    {
        "content": "<p>If you <code>intro hab</code> then you'll be able to feed <code>hab</code> into <code>eq_zero_or_eq_zero_of_mul_eq_zero</code> and you'll be able to <code>rw mul_eq_zero_iff at hab</code>.</p>",
        "id": 299785409,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1663687017
    },
    {
        "content": "<p>Multiplication World 1/13: Question about syntaxis . Writing</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">induction</span> <span class=\"n\">m</span> <span class=\"n\">on</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n<span class=\"n\">exact</span> <span class=\"n\">mul_zero</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">mul_succ</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">m_ih</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">zero_add</span><span class=\"o\">,</span>\n<span class=\"n\">refl</span><span class=\"o\">,</span>\n</code></pre></div>\n<p>Lean says \"no goals\" but no \"Proof complete!\" The console writes</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"mi\">60</span><span class=\"o\">:</span><span class=\"mi\">12</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span>\n<span class=\"n\">invalid</span> <span class=\"bp\">'</span><span class=\"kd\">begin</span><span class=\"bp\">-</span><span class=\"kd\">end</span><span class=\"bp\">'</span> <span class=\"n\">expression</span><span class=\"o\">,</span> <span class=\"sc\">','</span> <span class=\"n\">expected</span>\n<span class=\"mi\">61</span><span class=\"o\">:</span><span class=\"mi\">0</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span>\n<span class=\"n\">sync</span>\n</code></pre></div>\n<p>I usually find that several times Lean says <code>no goals</code> but no <code>Proof complete!</code>. Usually, when this happens I erase and write again the last line few times until it says <code>Proof complete!</code> , but this time it does not work. Surely I am writing something wrong, but I don't see it...</p>\n<p>Thanks in advance.</p>",
        "id": 299927874,
        "sender_full_name": "Alberto Navarro Garmendia",
        "timestamp": 1663757470
    },
    {
        "content": "<p>Pro-tip: you can surround a longer quotation by three <a href=\"https://github.com/leanprover-community/mathlib/wiki/Code-in-backticks\">#backticks</a> on their own line</p>",
        "id": 299930182,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1663758408
    },
    {
        "content": "<p>The error you're encountering means there's some syntax error like forgetting to close a parenthesis but I don't see any in your code...</p>",
        "id": 299930282,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1663758458
    },
    {
        "content": "<p>I see <code>induction m on n</code>, which is not valid syntax</p>",
        "id": 299936692,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1663760934
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"307953\">Ruben Van de Velde</span> <a href=\"#narrow/stream/113489-new-members/topic/Natural.20number.20game/near/299936692\">ha dicho</a>:</p>\n<blockquote>\n<p>I see <code>induction m on n</code>, which is not valid syntax</p>\n</blockquote>\n<p>Thanx a lot, that was it. Although it is surprising, while using  <code>induction m on n</code>doesn't display any error at that moment and the proof goes all the way correctly (only that it does not say <code>Proof complete</code> at the end). Now, with <code>induction m with n</code>every step works the same, except the final one wich says <code>Proof complete </code>.  Anyway. Thank you very much!</p>",
        "id": 299944190,
        "sender_full_name": "Alberto Navarro Garmendia",
        "timestamp": 1663763580
    },
    {
        "content": "<p>Me again, struggling with Advanced Multiplication world Level 4/4 again, I'm just not sure how to proceed? Here is my Goal</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">case</span> <span class=\"n\">mynat.succ</span>\n<span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">mynat</span><span class=\"o\">,</span>\n<span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n<span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">mynat</span><span class=\"o\">,</span>\n<span class=\"n\">hd</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">mynat</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">d</span> <span class=\"bp\">→</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">d</span><span class=\"o\">,</span>\n<span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">mynat</span><span class=\"o\">,</span>\n<span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">succ</span> <span class=\"n\">d</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">succ</span> <span class=\"n\">d</span>\n</code></pre></div>\n<p>I'm not sure if I should be manipulating the hypotheses or the goal or if I need to retry my tactics. Any help would be much appreciated!</p>",
        "id": 300169529,
        "sender_full_name": "Will Midwood",
        "timestamp": 1663855597
    },
    {
        "content": "<p>I tried <code>cases a with n</code> but couldn't get anything more solvable</p>",
        "id": 300169718,
        "sender_full_name": "Will Midwood",
        "timestamp": 1663855667
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"534386\">Alberto Navarro Garmendia</span> <a href=\"#narrow/stream/113489-new-members/topic/Natural.20number.20game/near/299927874\">said</a>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">I</span> <span class=\"n\">usually</span> <span class=\"n\">find</span> <span class=\"n\">that</span> <span class=\"n\">several</span> <span class=\"n\">times</span> <span class=\"n\">Lean</span> <span class=\"n\">says</span> <span class=\"bp\">```</span><span class=\"n\">no</span> <span class=\"n\">goals</span><span class=\"bp\">```</span> <span class=\"n\">but</span> <span class=\"n\">no</span> <span class=\"bp\">```</span><span class=\"n\">Proof</span> <span class=\"n\">complete</span><span class=\"bp\">!```.</span> <span class=\"n\">Usually</span><span class=\"o\">,</span> <span class=\"n\">when</span> <span class=\"n\">this</span> <span class=\"n\">happens</span> <span class=\"n\">I</span> <span class=\"n\">erase</span> <span class=\"n\">and</span> <span class=\"n\">write</span> <span class=\"n\">again</span> <span class=\"n\">the</span> <span class=\"n\">last</span> <span class=\"n\">line</span> <span class=\"n\">few</span> <span class=\"n\">times</span> <span class=\"n\">until</span> <span class=\"n\">it</span> <span class=\"n\">says</span> <span class=\"bp\">```</span><span class=\"n\">Proof</span> <span class=\"n\">complete</span><span class=\"bp\">!```</span> <span class=\"o\">,</span> <span class=\"n\">but</span> <span class=\"n\">this</span> <span class=\"n\">time</span> <span class=\"n\">it</span> <span class=\"n\">does</span> <span class=\"n\">not</span> <span class=\"n\">work.</span> <span class=\"n\">Surely</span> <span class=\"n\">I</span> <span class=\"n\">am</span> <span class=\"n\">writing</span> <span class=\"n\">something</span> <span class=\"n\">wrong</span><span class=\"o\">,</span> <span class=\"n\">but</span> <span class=\"n\">I</span> <span class=\"n\">don't</span> <span class=\"n\">see</span> <span class=\"n\">it...</span>\n</code></pre></div>\n<p>I didn't see a reply here -- when I was doing NNG, adding a newline after the last line in the proof usually triggered the transition between <code>no goals</code> and <code>Proof complete!</code>.</p>",
        "id": 300198818,
        "sender_full_name": "Arien Malec",
        "timestamp": 1663864321
    },
    {
        "content": "<p>Two questions:</p>\n<p>First: I am having troubles with the syntaxis of  <code>add_left_equal_zero</code>,  <code>eq_zero_or_eq_zero_of_mul_eq_zero</code>and similar statements.</p>\n<p>More concretely, let <code>p: 0=succ a * succ b </code>.  I want to produce <code>q : succ a =0 ∨ succ b =0 </code> out of <code>p</code>, but I fail to do so.  The command <code>have q:= eq_zero_or_eq_zero_of_mul_eq_zero (p)</code> does not work. </p>\n<p>Second, very stupid: is there a quick command to switch <code>p: P=Q</code>into some <code>q:Q=P</code>, where <code>P</code>and <code>Q</code>are different expressions?</p>\n<p>Thanks in advance.</p>",
        "id": 300204867,
        "sender_full_name": "Alberto Navarro Garmendia",
        "timestamp": 1663866102
    },
    {
        "content": "<p>2/ <code>rw eq_comm at p</code> or <code>have q := p.symm</code></p>",
        "id": 300208831,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1663867354
    },
    {
        "content": "<p>1/ what's the error?</p>",
        "id": 300208880,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1663867372
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"545295\">Will Midwood</span> <a href=\"#narrow/stream/113489-new-members/topic/Natural.20number.20game/near/300169529\">said</a>:</p>\n<blockquote>\n<p>Me again, struggling with Advanced Multiplication world Level 4/4 again, I'm just not sure how to proceed? Here is my Goal</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">case</span> <span class=\"n\">mynat.succ</span>\n<span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">mynat</span><span class=\"o\">,</span>\n<span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n<span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">mynat</span><span class=\"o\">,</span>\n<span class=\"n\">hd</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">mynat</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">d</span> <span class=\"bp\">→</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">d</span><span class=\"o\">,</span>\n<span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">mynat</span><span class=\"o\">,</span>\n<span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">succ</span> <span class=\"n\">d</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">succ</span> <span class=\"n\">d</span>\n</code></pre></div>\n<p>I'm not sure if I should be manipulating the hypotheses or the goal or if I need to retry my tactics. Any help would be much appreciated!</p>\n</blockquote>\n<p>Do you know the maths proof from where you have got to, to the goal, or are you just kind of trying things at random? Before embarking on this Lean proof you might want to plan your route on paper.</p>",
        "id": 300235317,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1663876525
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"307953\">Ruben Van de Velde</span> <a href=\"#narrow/stream/113489-new-members/topic/Natural.20number.20game/near/300208880\">ha dicho</a>:</p>\n<blockquote>\n<p>1/ what's the error?</p>\n</blockquote>\n<p>I solved the problem. For the sake of completeness: the console said</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">type</span> <span class=\"n\">mismatch</span> <span class=\"n\">at</span> <span class=\"n\">application</span>\n  <span class=\"n\">eq_zero_or_eq_zero_of_mul_eq_zero</span> <span class=\"n\">p</span>\n<span class=\"n\">term</span>\n  <span class=\"n\">p</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"n\">succ</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">succ</span> <span class=\"n\">c_n</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"n\">mynat</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n</code></pre></div>\n<p>The error, seems to be syntatic: Using <code>rw eq_comm at p</code>  I had <code>p: succ a * succ c_n =0</code> and then the command <code>have q:= eq_zero_or_eq_zero_of_mul_eq_zero (p) </code>works nicely.</p>",
        "id": 300263151,
        "sender_full_name": "Alberto Navarro Garmendia",
        "timestamp": 1663888234
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/Natural.20number.20game/near/300235317\">said</a>:</p>\n<blockquote>\n<p>Do you know the maths proof from where you have got to, to the goal, or are you just kind of trying things at random? Before embarking on this Lean proof you might want to plan your route on paper.</p>\n</blockquote>\n<p>You make an excellent point. Without the use of division I actually do not not how to prove this statement from here anyways. I guess back to the drawing board!</p>",
        "id": 300325874,
        "sender_full_name": "Will Midwood",
        "timestamp": 1663926495
    },
    {
        "content": "<p>I'm not \"being cruel\" not giving you access to division -- you don't get to division until you've built the rationals and to build the rationals you need all the theorems about naturals first!</p>",
        "id": 300340964,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1663932495
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"534386\">Alberto Navarro Garmendia</span> <a href=\"#narrow/stream/113489-new-members/topic/Natural.20number.20game/near/300263151\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"307953\">Ruben Van de Velde</span> <a href=\"#narrow/stream/113489-new-members/topic/Natural.20number.20game/near/300208880\">ha dicho</a>:</p>\n<blockquote>\n<p>1/ what's the error?</p>\n</blockquote>\n<p>I solved the problem. For the sake of completeness: the console said</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">type</span> <span class=\"n\">mismatch</span> <span class=\"n\">at</span> <span class=\"n\">application</span>\n  <span class=\"n\">eq_zero_or_eq_zero_of_mul_eq_zero</span> <span class=\"n\">p</span>\n<span class=\"n\">term</span>\n  <span class=\"n\">p</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"n\">succ</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">succ</span> <span class=\"n\">c_n</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"n\">mynat</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>Right -- so <code>eq_zero_or_eq_zero_of_mul_eq_zero</code> seems to want to eat a natural number next, not <code>p</code>. You could try <code>eq_zero_or_eq_zero_of_mul_eq_zero _ _ p</code> or something (the number of <code>_</code>s is the number of natural numbers which you don't want to give but which the system wants before <code>p</code>).</p>",
        "id": 300341305,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1663932611
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/Natural.20number.20game/near/300340964\">said</a>:</p>\n<blockquote>\n<p>I'm not \"being cruel\" not giving you access to division -- you don't get to division until you've built the rationals and to build the rationals you need all the theorems about naturals first!</p>\n</blockquote>\n<p>I'm getting a bit nerdsniped by what we are actually proving --- something like the natural numbers under multiplication are a cancellable semigroup?</p>\n<p>Is there a way in Lean to do induction starting at a different base case? The  paper outline of the proof here is far easier if we can start <code>a</code> with 1, which is sort of what my now rewritten proof does, just inside out... (induction over <code>b</code> then sorta induction by <code>case</code> over <code>c</code>).</p>",
        "id": 300469318,
        "sender_full_name": "Arien Malec",
        "timestamp": 1663978801
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"542196\">Arien Malec</span> <a href=\"#narrow/stream/113489-new-members/topic/Natural.20number.20game/near/300469318\">said</a>:</p>\n<blockquote>\n<p>Is there a way in Lean to do induction starting at a different base case? The  paper outline of the proof here is far easier if we can start <code>a</code> with 1, which is sort of what my now rewritten proof does, just inside out... (induction over <code>b</code> then sorta induction by <code>case</code> over <code>c</code>).</p>\n</blockquote>\n<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/nat.le_induction\">docs#nat.le_induction</a></p>",
        "id": 300469479,
        "sender_full_name": "Newell Jensen",
        "timestamp": 1663978928
    },
    {
        "content": "<p>but you probably don't have access to that in the game...not sure</p>",
        "id": 300469509,
        "sender_full_name": "Newell Jensen",
        "timestamp": 1663978972
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"542196\">@Arien Malec</span> If you want to start at <code>1</code> without additional library lemmas, you can do <code>cases a, { ... proof for 0 ... }, induction a</code></p>",
        "id": 300471197,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1663980813
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/113489-new-members/topic/Natural.20number.20game/near/300471197\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"542196\">Arien Malec</span> If you want to start at <code>1</code> without additional library lemmas, you can do <code>cases a, { ... proof for 0 ... }, induction a</code></p>\n</blockquote>\n<p>Sadly I think that leads to a dead end...</p>",
        "id": 300478606,
        "sender_full_name": "Arien Malec",
        "timestamp": 1663988695
    },
    {
        "content": "<p>No that's exactly the right way to do induction on a&gt;=1.</p>",
        "id": 300500647,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1664007794
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/Natural.20number.20game/near/300500647\">said</a>:</p>\n<blockquote>\n<p>No that's exactly the right way to do induction on a&gt;=1.</p>\n</blockquote>\n<p>It works, but it's not shorter, simpler or easier to understand than the original proof...</p>",
        "id": 300552754,
        "sender_full_name": "Arien Malec",
        "timestamp": 1664033781
    },
    {
        "content": "<p>I have a syntaxis doubt. Having <code>h :  a * c + a = a * d + a </code>and the goal being  <code>a * c = a * d </code> my question is: why does  <code>apply add_right_cancel _ _ _ h, </code>solves the goal?</p>\n<p>As far as I know, the <code>apply</code> tactic with <code>add_right_cancel _ a _ </code>transforms the goal precisely into <code> a * c + a = a * d + a </code>, Why can I just simply write h after the apply tactic in the same line? I don't understand the syntaxis and the description of the apply tactic does not explain this use.</p>\n<p>Thanks in advance.</p>",
        "id": 301184031,
        "sender_full_name": "Alberto Navarro Garmendia",
        "timestamp": 1664355040
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"534386\">@Alberto Navarro Garmendia</span> <a href=\"https://leanprover-community.github.io/mathlib_docs/find/add_right_cancel\">docs#add_right_cancel</a> is a function that takes (some elements and) a proof that <code>X + a = Y + a</code> and returns a proof that <code>X = Y</code>.</p>\n<p>So you can either</p>\n<ol>\n<li><code>apply add_right_cancel</code> which will require you to provide <code>h</code> afterwards. In particular that is the new goal that you are seeing; or</li>\n<li><code>apply (add_right_cancel _ _ _ h)</code> which applies the function immediately to <code>h</code> and closes the goal with the resulting proof of <code>X = Y</code>. (I added the parentheses after the <code>apply</code> for some clarity. They aren't needed.)</li>\n</ol>",
        "id": 301187252,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1664356269
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span>  I see . </p>\n<p>I still have a doubt:  it seems to me that the <code>apply</code> tactic can also work on hypothesis, not only on the goal as I learnt. More concretely, If  I understand correctly,  having a theorem  (let's denote it theorem_1) saying <code>P →  Q</code> and having  <code>p : P</code> then <code>apply (theorem_1 p)</code> would solve a goal  <code>Q</code>.    But, , is there a way to simply get <code>q : Q</code>out of   <code>apply (Theorem_1 p)</code>or a similar syntaxis? Thanks in advance</p>",
        "id": 301189196,
        "sender_full_name": "Alberto Navarro Garmendia",
        "timestamp": 1664356995
    },
    {
        "content": "<p>You could do</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">have</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">Q</span> <span class=\"o\">:=</span> <span class=\"n\">theorem_1</span> <span class=\"n\">p</span>\n<span class=\"c1\">-- or</span>\n<span class=\"n\">apply_fun</span> <span class=\"n\">theorem_1</span> <span class=\"n\">at</span> <span class=\"n\">p</span>\n</code></pre></div>",
        "id": 301189426,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1664357068
    },
    {
        "content": "<p>Probably <code>apply_fun</code> is closest to what you want. But the downside is that it doesn't update the name. So now you will suddenly have <code>p : Q</code>, which looks a bit odd.</p>",
        "id": 301189530,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1664357106
    },
    {
        "content": "<p>I am currently trying to use the add_left_cancel theorem to get from h2 to the goal, it says that the type of h2 should be mynat instead of Prop, which I think is problematic? I have also tried to just repeat again the proofs of all the theorems I need, but at the end I could not use induction on (a * d), so this doesn't work either, does anyone have some hint of it?<br>\n<a href=\"/user_uploads/3121/rPZbAsqqwSvN1oz-F_z0_YTC/SharedScreenshot.jpg\">SharedScreenshot.jpg</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/rPZbAsqqwSvN1oz-F_z0_YTC/SharedScreenshot.jpg\" title=\"SharedScreenshot.jpg\"><img src=\"/user_uploads/3121/rPZbAsqqwSvN1oz-F_z0_YTC/SharedScreenshot.jpg\"></a></div>",
        "id": 303067047,
        "sender_full_name": "Ruizhe Wan",
        "timestamp": 1665266068
    },
    {
        "content": "<p>The reason is that <code>add_left_cancel</code> wants to eat three numbers before it eats <code>h2</code>. You can see on the left it says <code>add_left_cancel (t a b : mynat) : ...</code>, which means \"I want to eat t, a and b, before I eat the proof that t+a=t+b and then I'll spit out the proof that a = b\". You can probably write <code>have h3 := add_left_cancel _ _ _ h2</code>.</p>",
        "id": 303067141,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1665266169
    },
    {
        "content": "<p>It still doesn't seem to work, and I have also tried writing explicitly (a * d) 0 a out, but there is still error <a href=\"/user_uploads/3121/nCiC910g8pO3IIYdN7ghJWtC/SharedScreenshot.jpg\">SharedScreenshot.jpg</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/nCiC910g8pO3IIYdN7ghJWtC/SharedScreenshot.jpg\" title=\"SharedScreenshot.jpg\"><img src=\"/user_uploads/3121/nCiC910g8pO3IIYdN7ghJWtC/SharedScreenshot.jpg\"></a></div>",
        "id": 303067430,
        "sender_full_name": "Ruizhe Wan",
        "timestamp": 1665266485
    },
    {
        "content": "<p>You've got two <code>d</code>s</p>",
        "id": 303067645,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1665266647
    },
    {
        "content": "<p>Oh I see, I will try to fix that. Thanks  a lot.</p>",
        "id": 303067780,
        "sender_full_name": "Ruizhe Wan",
        "timestamp": 1665266785
    },
    {
        "content": "<p>Yeah, sorry the error message is confusing, the reason it's talking about d and d_1 is that you've called two things d</p>",
        "id": 303070616,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1665269384
    },
    {
        "content": "<p>Did you consider making the infix notations <code>+</code> and <code>*</code> nonassociative in the NNG?  I have some students working through it as part of a class in formalization, and they frequently have trouble remembering that <code>a + b + c</code> actually means <code>(a + b) + c</code>.  (To be honest, I have trouble remembering that myself!)</p>",
        "id": 303073079,
        "sender_full_name": "Mike Shulman",
        "timestamp": 1665271709
    },
    {
        "content": "<p>I don't think lean 3 supports nonassociative operators</p>",
        "id": 303076630,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1665275280
    },
    {
        "content": "<p>actually that's not true, you can do it with <code>notation</code> if you set all the precedences manually</p>",
        "id": 303076687,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1665275318
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"381187\">@Mike Shulman</span> (btw you seem to have two active accounts here which makes you harder to @) I agree that the lack of brackets causes confusion. I think <span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span> made some pp.bracket option which you can now switch on to see where they are. At the time people convinced me that it was important to learn lean's conventions for associativity and I didn't know anything about how to make the brackets appear so I just went with what we have</p>",
        "id": 303077476,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1665276207
    },
    {
        "content": "<p>(Huh, I had no idea I had a second account.  I wonder how that happened, let's see if I can delete it.)</p>",
        "id": 303081125,
        "sender_full_name": "Mike Shulman",
        "timestamp": 1665280234
    },
    {
        "content": "<p>Is there an important reason to use Lean's <code>has_add</code>?  In another proof assistant I would just declare <code>+</code> directly to be an infix notation without associativity.  I presume that going through <code>has_add</code> forces you to use the same associativity as all other \"add\"s in the library.</p>",
        "id": 303081197,
        "sender_full_name": "Mike Shulman",
        "timestamp": 1665280322
    },
    {
        "content": "<p>You can do that, but you either have to shadow the original notation (meaning that your new add can't be used along with the old one), or you have to use lean's type-based disambiguation mechanism which is largely avoided in mathlib because it doesn't play well with typeclasses</p>",
        "id": 303081614,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1665280802
    },
    {
        "content": "<p>for teaching purposes the former approach is often reasonable</p>",
        "id": 303081668,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1665280827
    },
    {
        "content": "<p>Hey guys! I'm new to the lean-community and hope this is the right way to ask questions. </p>\n<p>I'm starting to learn Lean by the excellent tutorial <a href=\"https://cbirkbeck.github.io/natural_number_game/\">natural_number_game</a>, and I would like to do it locally since the website doesn't keep my progress sometimes.</p>\n<p>Also, I find a <a href=\"https://github.com/ImperialCollegeLondon/natural_number_game\">GitHub-repo</a> for the game, but fails to import the library in my machine. I'm wondering if there is a way to do it properly.</p>\n<p>![深度截图_选择区域_20221213222226](<a href=\"https://cdn.jsdelivr.net/gh/zhihongecnu/PicBed3/picgo/深度截图_选择区域_20221213222226.png\">https://cdn.jsdelivr.net/gh/zhihongecnu/PicBed3/picgo/深度截图_选择区域_20221213222226.png</a>)</p>\n<div class=\"message_inline_image\"><a href=\"https://cdn.jsdelivr.net/gh/zhihongecnu/PicBed3/picgo/深度截图_选择区域_20221213222226.png\"><img src=\"https://uploads.zulipusercontent.net/ab42e0e2c1dbc5430d9dbbe6b96921c859c0a546/68747470733a2f2f63646e2e6a7364656c6976722e6e65742f67682f7a6869686f6e6765636e752f506963426564332f706963676f2fe6b7b1e5baa6e688aae59bbe5fe98089e68ba9e58cbae59f9f5f32303232313231333232323232362e706e67\"></a></div><p>Thanks in advance!</p>",
        "id": 315602472,
        "sender_full_name": "RexWang",
        "timestamp": 1670941423
    },
    {
        "content": "<p>You need to use the \"Open folder\" option in vscode to open the folder \"natural_number_game\".</p>\n<p>Also its easier to keep things organised if you make a new thread for your question in future <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 315603638,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1670941776
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"127136\">Alex J. Best</span> <a href=\"#narrow/stream/113489-new-members/topic/Contributing.20to.20mathlib/near/315603638\">发言道</a>：</p>\n<blockquote>\n<p>You need to use the \"Open folder\" option in vscode to open the folder \"natural_number_game\".</p>\n<p>Also its easier to keep things organised if you make a new thread for your question in future :)</p>\n</blockquote>\n<p>Thanks a lot!  I just noticed the post tags on Zulip.</p>",
        "id": 315605596,
        "sender_full_name": "RexWang",
        "timestamp": 1670942304
    },
    {
        "content": "<p>3 messages were moved here from <a class=\"stream-topic\" data-stream-id=\"113489\" href=\"/#narrow/stream/113489-new-members/topic/Contributing.20to.20mathlib\">#new members &gt; Contributing to mathlib</a> by <span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span>.</p>",
        "id": 315606032,
        "sender_full_name": "Notification Bot",
        "timestamp": 1670942428
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"572535\">RexWang</span> has marked this topic as resolved.</p>",
        "id": 315606638,
        "sender_full_name": "Notification Bot",
        "timestamp": 1670942568
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"572535\">RexWang</span> has marked this topic as unresolved.</p>",
        "id": 315606790,
        "sender_full_name": "Notification Bot",
        "timestamp": 1670942604
    },
    {
        "content": "<p>The <a href=\"https://cbirkbeck.github.io/natural_number_game/?world=7&amp;level=10\">last question</a> in the Advanced Proposition world has left me confused. </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">contrapositive2</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"n\">Q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">¬</span> <span class=\"n\">Q</span> <span class=\"bp\">→</span> <span class=\"bp\">¬</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"bp\">→</span> <span class=\"n\">Q</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>The hint suggests <strong>using a black box strategy <code>cc</code></strong>. But in the previous six worlds, a pattern of axioms + reasoning was used, which makes this step difficult for me to accept. Is there a handwritten solution to this problem? Thanks in advance!</p>\n<hr>\n<p>If I understand correctly, the tactic <code>exfalso</code> and <code>by_cases</code> are equivalent to introducing the following axioms to express the principle of contradiction:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">false</span> <span class=\"bp\">→</span> <span class=\"n\">P</span> <span class=\"c1\">-- for all P</span>\n<span class=\"n\">Q</span> <span class=\"bp\">→</span> <span class=\"n\">P</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"bp\">→</span> <span class=\"n\">false</span><span class=\"o\">)</span> <span class=\"c1\">-- for all P, Q</span>\n</code></pre></div>\n<p>Is it possible to reason about this problem based on these axioms, or by introducing more axioms, rather than using the <code>cc</code> strategy?</p>",
        "id": 315964297,
        "sender_full_name": "RexWang",
        "timestamp": 1671084170
    },
    {
        "content": "<p>(<code>by_cases</code> is actually equivalent to just <code>P ∨ (P → false)</code>, a theorem available under the name <code>em</code> for excluded middle)</p>",
        "id": 315966573,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1671085747
    },
    {
        "content": "<p>Yes you can prove it with just <code>em</code> and basic logic. Hint: do cases on <code>Q</code></p>",
        "id": 315966608,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1671085777
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113489-new-members/topic/natural.20number.20game/near/315966608\">发言道</a>：</p>\n<blockquote>\n<p>Yes you can prove it with just <code>em</code> and basic logic. Hint: do cases on <code>Q</code></p>\n</blockquote>\n<p>Thank you very much! Here might be a proof(incomplete).</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">contrapositive2</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"n\">Q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">¬</span> <span class=\"n\">Q</span> <span class=\"bp\">→</span> <span class=\"bp\">¬</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"bp\">→</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intros</span> <span class=\"n\">f</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"c1\">-- skip to claim an element of Q</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">q</span><span class=\"o\">:</span> <span class=\"n\">Q</span><span class=\"o\">,</span> <span class=\"c1\">-- divide into two goals: Q is true or false</span>\n  <span class=\"c1\">-- if Q is true than P → Q is trivial</span>\n  <span class=\"n\">exact</span> <span class=\"n\">q</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- if Q is not true, i.e. ∃ q ∈ ¬Q</span>\n  <span class=\"c1\">-- we work on the left side of the prop. P → Q</span>\n  <span class=\"k\">have</span> <span class=\"n\">np</span> <span class=\"o\">:=</span> <span class=\"n\">f</span><span class=\"o\">(</span><span class=\"n\">q</span><span class=\"o\">),</span> <span class=\"c1\">-- fq : ¬P</span>\n  <span class=\"c1\">-- get an element of ¬P, so ¬P is true</span>\n  <span class=\"c1\">-- it remains to prove ¬P ∧ P → Q</span>\n  <span class=\"k\">have</span> <span class=\"n\">pnp</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"bp\">∧</span> <span class=\"bp\">¬</span><span class=\"n\">P</span><span class=\"o\">,</span> <span class=\"c1\">-- we first construct ¬P ∧ P</span>\n    <span class=\"n\">split</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">p</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">np</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- a lemma before, we know that ¬P ∧ P → false</span>\n  <span class=\"n\">apply</span> <span class=\"n\">contra</span> <span class=\"n\">P</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">pnp</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>But I got stuck at the last step: how can I apply the lemma to reduce the question? Thanks again for the suggestion!</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- previous lemma</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">contra</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"n\">Q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"bp\">∧</span> <span class=\"bp\">¬</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">Q</span>\n<span class=\"kd\">begin</span>\n<span class=\"c1\">-- use axiom false → any, by exfalso</span>\n<span class=\"n\">rw</span> <span class=\"n\">not_iff_imp_false</span><span class=\"o\">,</span>\n<span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"n\">cases</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"n\">p</span> <span class=\"n\">np</span><span class=\"o\">,</span>\n<span class=\"k\">have</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">false</span> <span class=\"o\">:=</span> <span class=\"n\">np</span><span class=\"o\">(</span><span class=\"n\">p</span><span class=\"o\">),</span>\n<span class=\"n\">exfalso</span><span class=\"o\">,</span>\n<span class=\"n\">apply</span> <span class=\"n\">f</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 315971640,
        "sender_full_name": "RexWang",
        "timestamp": 1671088641
    },
    {
        "content": "<p>Note that if <code>np : ¬P</code> and <code>p : P</code> then <code>np p : false</code></p>",
        "id": 315971976,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1671088845
    },
    {
        "content": "<p>so <code>exfalso</code> should close the gap</p>",
        "id": 315971996,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1671088856
    },
    {
        "content": "<p>at <a href=\"https://www.ma.imperial.ac.uk/~buzzard/xena/natural_number_game/?world=7&amp;level=10\">https://www.ma.imperial.ac.uk/~buzzard/xena/natural_number_game/?world=7&amp;level=10</a></p>\n<p>there is the tactic <code>by_cases p : P; by_cases q : Q,</code> with the semicolon. if I omit the semicolon, then I would have 3 goals instead of 4, and I can prove all 3 (i.e. no unreachable goals). that seems for me that, say, if I seeded the bug (using colon instead of semicolon), then the fourth case just slipped from the proving. still, the proof is valid from Lean perspective. does it mean that a proof itself might have a bug in tactics?</p>",
        "id": 318858045,
        "sender_full_name": "Alex Myltsev",
        "timestamp": 1672579564
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">by_cases</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">P</span><span class=\"bp\">;</span> <span class=\"n\">by_cases</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">Q</span><span class=\"o\">,</span>\n<span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>Is the same as</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">by_cases</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">P</span><span class=\"o\">,</span>\n<span class=\"n\">by_cases</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">Q</span><span class=\"o\">,</span>\n<span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"n\">by_cases</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">Q</span><span class=\"o\">,</span>\n<span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>Does that answer your question?</p>",
        "id": 318866039,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1672583598
    },
    {
        "content": "<p>The answer to your question \"does this mean that lean has a bug\" is \"no\"</p>",
        "id": 318991030,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1672665575
    },
    {
        "content": "<p>This topic was moved here from <a class=\"stream-topic\" data-stream-id=\"187764\" href=\"/#narrow/stream/187764-Lean-for-teaching/topic/natural.20number.20game\">#Lean for teaching &gt; natural number game</a> by <span class=\"user-mention silent\" data-user-id=\"260507\">Heather Macbeth</span>.</p>",
        "id": 319528806,
        "sender_full_name": "Notification Bot",
        "timestamp": 1672904236
    }
]