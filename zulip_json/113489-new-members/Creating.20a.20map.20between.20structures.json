[
    {
        "content": "<p>I have defined a structure <code>Metric_Space</code> as so:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">Metric_Space</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">d_nonneg</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">d</span> <span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"bp\">≥</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">a_eq_b_iff</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">A</span> <span class=\"bp\">=</span> <span class=\"n\">B</span> <span class=\"bp\">↔</span> <span class=\"n\">d</span> <span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">symm</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">d</span> <span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"bp\">=</span> <span class=\"n\">d</span> <span class=\"n\">B</span> <span class=\"n\">A</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">tri_ineq</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">d</span> <span class=\"n\">A</span> <span class=\"n\">C</span> <span class=\"bp\">≤</span> <span class=\"n\">d</span> <span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"bp\">+</span> <span class=\"n\">d</span> <span class=\"n\">B</span> <span class=\"n\">C</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>and I want to be able to define a map between one <code>Metric_Space</code> and another and define if it is an isometry. My current idea is that a map between two Metric_Spaces would really just be a map between their associated type. So I have this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">dx</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">Metric_Space</span> <span class=\"n\">α</span> <span class=\"n\">dx</span><span class=\"o\">)</span>\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">dy</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"n\">Metric_Space</span> <span class=\"n\">β</span> <span class=\"n\">dy</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Bijection</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">∃</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">,</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">A</span> <span class=\"bp\">∧</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">B</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Distance_Preserving</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">∀</span> <span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">dy</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">dx</span> <span class=\"n\">A</span> <span class=\"n\">B</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Isometry</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">Bijection</span> <span class=\"n\">f</span> <span class=\"bp\">∧</span> <span class=\"n\">Distance_Preserving</span> <span class=\"n\">f</span>\n</code></pre></div>\n<p>However, it seems that in my definition of <code>Isometry</code>, it gets confused about the usage of the distance functions in <code>Distance_Preserving f</code> and gives <code>don't know how to synthesize implicit argument @Distance_Preserving  α (?m.40962 X Y Isometry f) β (?m.40963 X Y Isometry f) f</code>. What would be the correct way to achieve what I'm trying to do here? I've considered making another structure like <code>Metric_Space_Map</code> but I'm having a hard time thinking of what that would look like. Thanks for your time.</p>\n<p>I had the idea to try to make <code>Metric_Space</code> a <code>class</code> instead, and directly give the definition of <code>Distance_Preserving</code> the typeclass declaration like: </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">Distance_Preserving</span> <span class=\"o\">[</span><span class=\"n\">Metric_Space</span> <span class=\"n\">α</span> <span class=\"n\">dx</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Metric_Space</span> <span class=\"n\">β</span> <span class=\"n\">dy</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">∀</span> <span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">dy</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">dx</span> <span class=\"n\">A</span> <span class=\"n\">B</span>\n</code></pre></div>\n<p>but this similarly gives the error <code>failed to synthesize instance Metric_Space α ?m.40798</code>. It's definitely making me confused about this concept in the first place. I declare <code>dx</code> as <code>α → α → ℝ</code> as needed in the definition of <code>Metric_Space</code>, so why is it not able to recognize it when I use the definition again? What exactly does that error even mean?</p>\n<p>EDIT: Probably, this is not a real problem. I have instead made everything explicitly defined rather than implicit and it seems to be working more according to how I expect it to work.</p>",
        "id": 343573549,
        "sender_full_name": "debord",
        "timestamp": 1679458803
    },
    {
        "content": "<p>Yeah, making things type-classes is probably the way to go. <br>\nNote that the mathlib definition of metric space also bundles the distance function <code>dx</code> and <code>dy</code> inside the metric space structure: <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=MetricSpace#doc\">docs4#MetricSpace</a></p>",
        "id": 344930319,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1679938956
    }
]