[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n<span class=\"kn\">open</span> <span class=\"n\">Mathlib.Tactic</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">RatDenomAtMostTwo</span> <span class=\"o\">:=</span>\n  <span class=\"n\">val</span><span class=\"o\">:</span> <span class=\"n\">Rat</span>\n  <span class=\"n\">at_most_two</span><span class=\"o\">:</span> <span class=\"n\">val.den</span> <span class=\"bp\">&lt;=</span> <span class=\"mi\">2</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Zero</span> <span class=\"n\">RatDenomAtMostTwo</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">Nat.le_succ</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">den</span><span class=\"o\">⟩</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">One</span> <span class=\"n\">RatDenomAtMostTwo</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">Nat.le_succ</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">den</span><span class=\"o\">⟩</span> <span class=\"c1\">-- works</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">One</span> <span class=\"n\">RatDenomAtMostTwo</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">Nat.le_succ</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">den</span><span class=\"o\">⟩</span> <span class=\"c1\">-- ?</span>\n</code></pre></div>\n<p>The first two instances are straightforward to me, but I don't understand why the third also works. is it because lean that <code>0.den = 1 = 1.den</code> and so they prove the same thing?<br>\nI am aware that other tactics provide a more explainable result (<code>by simp; linarith</code>, <code>by decide</code>).</p>",
        "id": 405131999,
        "sender_full_name": "SaNoy SaKnoi",
        "timestamp": 1701355358
    },
    {
        "content": "<blockquote>\n<p>is it because lean that `0.den = 1 = 1.den and so they prove the same thing?</p>\n</blockquote>\n<p>Yes; but more so, it's because that equality is true <em>by definition</em></p>",
        "id": 405133428,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1701355759
    },
    {
        "content": "<p>ah, that makes sense, they are treated as the same thing but written differently (i assume this is what people mean by defeq - definitional equality). Thank you!</p>",
        "id": 405137724,
        "sender_full_name": "SaNoy SaKnoi",
        "timestamp": 1701356927
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"667038\">SaNoy SaKnoi</span> has marked this topic as resolved.</p>",
        "id": 405137747,
        "sender_full_name": "Notification Bot",
        "timestamp": 1701356933
    }
]