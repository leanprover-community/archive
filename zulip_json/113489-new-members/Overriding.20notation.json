[
    {
        "content": "<p>Is it possible to override <code>∧</code>,  <code>∨</code>, <code>¬</code> and <code>≤</code>? If so, where did I go wrong?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">BooleanAlgebra</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">or</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span>\n  <span class=\"n\">and</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span>\n  <span class=\"n\">not</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span>\n  <span class=\"n\">or_comm</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">},</span> <span class=\"n\">or</span> <span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"bp\">=</span> <span class=\"n\">or</span> <span class=\"n\">q</span> <span class=\"n\">p</span>\n  <span class=\"n\">or_assoc</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">},</span> <span class=\"n\">or</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">or</span> <span class=\"n\">q</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">or</span> <span class=\"o\">(</span><span class=\"n\">or</span> <span class=\"n\">p</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"n\">r</span>\n  <span class=\"n\">or_absorb</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">},</span> <span class=\"n\">or</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">and</span> <span class=\"n\">p</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">p</span>\n  <span class=\"n\">or_distrib</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">},</span> <span class=\"n\">or</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">and</span> <span class=\"n\">q</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">and</span> <span class=\"o\">(</span><span class=\"n\">or</span> <span class=\"n\">p</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">or</span> <span class=\"n\">p</span> <span class=\"n\">r</span><span class=\"o\">)</span>\n  <span class=\"n\">or_bot</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">},</span> <span class=\"n\">or</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">and</span> <span class=\"n\">q</span> <span class=\"o\">(</span><span class=\"n\">not</span> <span class=\"n\">q</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"n\">p</span>\n  <span class=\"n\">and_comm</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">},</span> <span class=\"n\">and</span> <span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"bp\">=</span> <span class=\"n\">and</span> <span class=\"n\">q</span> <span class=\"n\">p</span>\n  <span class=\"n\">and_assoc</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">},</span> <span class=\"n\">and</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">and</span> <span class=\"n\">q</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">and</span> <span class=\"o\">(</span><span class=\"n\">and</span> <span class=\"n\">p</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"n\">r</span>\n  <span class=\"n\">and_absorb</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">},</span> <span class=\"n\">and</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">or</span> <span class=\"n\">p</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">p</span>\n  <span class=\"n\">and_distrib</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">},</span> <span class=\"n\">and</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">or</span> <span class=\"n\">q</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">or</span> <span class=\"o\">(</span><span class=\"n\">and</span> <span class=\"n\">p</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">and</span> <span class=\"n\">p</span> <span class=\"n\">r</span><span class=\"o\">)</span>\n  <span class=\"n\">and_top</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">},</span> <span class=\"n\">and</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">or</span> <span class=\"n\">q</span> <span class=\"o\">(</span><span class=\"n\">not</span> <span class=\"n\">q</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"n\">p</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">BooleanAlgebra</span>\n\n<span class=\"kd\">infixr</span><span class=\"o\">:</span><span class=\"mi\">135</span> <span class=\"s2\">\" ∧ \"</span>  <span class=\"bp\">=&gt;</span> <span class=\"n\">BooleanAlgebra.and</span>\n<span class=\"kd\">infixr</span><span class=\"o\">:</span><span class=\"mi\">130</span> <span class=\"s2\">\" ∨ \"</span>  <span class=\"bp\">=&gt;</span> <span class=\"n\">BooleanAlgebra.or</span>\n<span class=\"kd\">notation</span><span class=\"o\">:</span><span class=\"n\">max</span> <span class=\"s2\">\"¬\"</span> <span class=\"n\">p</span><span class=\"o\">:</span><span class=\"mi\">140</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">BooleanAlgebra.not</span> <span class=\"n\">p</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">or_idem</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">BooleanAlgebra</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"k\">calc</span>\n  <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"n\">p</span><span class=\"o\">)</span>                   <span class=\"o\">:=</span> <span class=\"n\">or_absorb.symm</span>\n  <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">p</span><span class=\"o\">)</span>             <span class=\"o\">:=</span> <span class=\"n\">or_distrib</span>\n  <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"o\">((</span><span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"o\">((</span><span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">and_distrib</span>\n  <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">p</span><span class=\"o\">))</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">p</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">and_comm</span><span class=\"o\">]</span>\n  <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">p</span>                         <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">and_absorb</span><span class=\"o\">]</span>\n\n<span class=\"c1\">-- Fails:</span>\n<span class=\"c1\">--   38:80:</span>\n<span class=\"c1\">--   application type mismatch</span>\n<span class=\"c1\">--     Or p</span>\n<span class=\"c1\">--   argument</span>\n<span class=\"c1\">--     p</span>\n<span class=\"c1\">--   has type</span>\n<span class=\"c1\">--     α : Type ?u.23329</span>\n<span class=\"c1\">--   but is expected to have type</span>\n<span class=\"c1\">--     Prop : Type</span>\n<span class=\"c1\">--def BooleanAlgebra.entails {α : Type _} [BooleanAlgebra α] (p q : α) : Prop := p ∨ q = q</span>\n<span class=\"c1\">--                                                                               ~</span>\n\n<span class=\"c1\">-- OK</span>\n<span class=\"kd\">def</span> <span class=\"n\">BooleanAlgebra.entails</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">BooleanAlgebra</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"n\">q</span> <span class=\"bp\">=</span> <span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">q</span>\n\n<span class=\"kd\">infix</span><span class=\"o\">:</span><span class=\"mi\">150</span> <span class=\"s2\">\" ≤ \"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">BooleanAlgebra.entails</span>\n\n<span class=\"c1\">-- OK</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">entails.rfl</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">BooleanAlgebra</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">≤</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"n\">or_idem</span>\n\n<span class=\"c1\">-- Fails:</span>\n<span class=\"c1\">--   64:77:</span>\n<span class=\"c1\">--   application type mismatch</span>\n<span class=\"c1\">--     q ∧ q ≤ p</span>\n<span class=\"c1\">--   argument</span>\n<span class=\"c1\">--     q ≤ p</span>\n<span class=\"c1\">--   has type</span>\n<span class=\"c1\">--     Prop : Type</span>\n<span class=\"c1\">--   but is expected to have type</span>\n<span class=\"c1\">--     α : Type ?u.30939</span>\n<span class=\"c1\">--   64:69:</span>\n<span class=\"c1\">--   failed to synthesize instance</span>\n<span class=\"c1\">--     LE α</span>\n<span class=\"c1\">--theorem entails.antisymm {α : Type _} [BooleanAlgebra α] {p q : α} : p ≤ q ∧ q ≤ p → p = q := by sorry</span>\n<span class=\"c1\">--                                                                     ~       ~~~~~</span>\n</code></pre></div>",
        "id": 385273001,
        "sender_full_name": "Richard Copley",
        "timestamp": 1692127053
    },
    {
        "content": "<p>Here is the definition in mathlib.  <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=GeneralizedBooleanAlgebra#doc\">docs#GeneralizedBooleanAlgebra</a>. If you look at the source and follow back the classes this extends you can see how type classes like <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=LE#doc\">docs#LE</a> can be used for overloading.</p>",
        "id": 385301885,
        "sender_full_name": "Jason Rute",
        "timestamp": 1692143123
    },
    {
        "content": "<p>That would be sensible! Except...<br>\nThe reason I want to do it in this unusual way is that I'm following a particular text (Logic As Algebra by Halmos and Givant). I want to use Lean as a guardrail/handholder.</p>",
        "id": 385302533,
        "sender_full_name": "Richard Copley",
        "timestamp": 1692143619
    },
    {
        "content": "<p>You can still follow the same override notation with type class pattern, no?</p>",
        "id": 385302679,
        "sender_full_name": "Jason Rute",
        "timestamp": 1692143739
    },
    {
        "content": "<p>Thanks! <a href=\"https://leanprover.github.io/theorem_proving_in_lean/type_classes.html\">I'll try</a>. (But if you will indulge a poor beginner: I don't know what you mean.)</p>",
        "id": 385302835,
        "sender_full_name": "Richard Copley",
        "timestamp": 1692143877
    },
    {
        "content": "<p><code>sorry</code>! I can't get a handle on what it is you're suggesting.</p>\n<p>I could work in a <code>BooleanRing</code> (or algebra), with the more usual notation and \"multiplication is idempotent\" as an axiom. I imagine if I skip a few lemmas, I will be able to join the text soon enough.</p>\n<p>But the <code>Y</code> part of the <code>XY</code>? If I <strong><em>really</em></strong> wanted to override the notation, could I?</p>",
        "id": 385309553,
        "sender_full_name": "Richard Copley",
        "timestamp": 1692146910
    },
    {
        "content": "<p>I’m not sure about overriding notation  the way you are.  I’m sure someone here can give you a better answer on that.  As for using the existing type classes (or reimplementing them), I give a simpler example in <a href=\"https://proofassistants.stackexchange.com/a/1755/122\">this PA answer</a>.</p>",
        "id": 385312580,
        "sender_full_name": "Jason Rute",
        "timestamp": 1692147726
    },
    {
        "content": "<p>Seems like I should look to overload, not override. (Tomorrow.)</p>",
        "id": 385314008,
        "sender_full_name": "Richard Copley",
        "timestamp": 1692148212
    },
    {
        "content": "<p>Note that <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=BooleanAlgebra#doc\">docs#BooleanAlgebra</a> in mathlib uses slightly different notation in order to avoid having to overload the <code>And</code>/<code>Or</code> notation</p>",
        "id": 385420257,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1692177274
    },
    {
        "content": "<p>Your entails failure was just an operator precedence issue:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">BooleanAlgebra.entails</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">BooleanAlgebra</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">q</span>\n</code></pre></div>",
        "id": 385420387,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1692177324
    },
    {
        "content": "<p>As is your last failure:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">entails.antisymm</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">BooleanAlgebra</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">≤</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"bp\">≤</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"n\">q</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 385420597,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1692177400
    }
]