[
    {
        "content": "<p>Hi again, <br>\nI have a question regarding going from <code>ℝ</code>  to this <code>A</code> space. I had to add a few extra conditions on my <code>A</code>.<br>\nI am not sure if it still the Banach space. My main issue is now <code>‖x‖ = ‖↑x‖</code>. Is there anyway this can be true?<br>\nAnd then I was able to before to use <code>iterated_fderiv_eq_equiv_comp</code> and  <code>iterated_deriv_eq_iterate</code>. <br>\nCan I add  some conditions on A such that I am able to use these theorems again?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.complex.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">analysis.normed_space.exponential</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">topology.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">analysis.calculus.iterated_deriv</span>\n<span class=\"kn\">import</span> <span class=\"n\">analysis.special_functions.exp_deriv</span>\n<span class=\"kn\">import</span> <span class=\"n\">number_theory.dioph</span>\n<span class=\"kn\">import</span> <span class=\"n\">analysis.complex.real_deriv</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">complex</span>\n<span class=\"kn\">open</span> <span class=\"n\">real</span>\n\n<span class=\"kd\">noncomputable theory</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">real</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">normed_add_comm_group</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">normed_space</span> <span class=\"n\">ℝ</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">complete_space</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">nontrivially_normed_field</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">normed_space</span> <span class=\"n\">A</span> <span class=\"n\">ℂ</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">normed_space</span> <span class=\"n\">A</span> <span class=\"n\">ℝ</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_lift_t</span> <span class=\"n\">A</span> <span class=\"n\">ℂ</span><span class=\"o\">]</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">norm_complex_abs</span> <span class=\"o\">{</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">A</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">k</span> <span class=\"n\">j</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">}:</span><span class=\"bp\">‖</span><span class=\"n\">x</span><span class=\"bp\">‖</span> <span class=\"bp\">^</span> <span class=\"n\">k</span> <span class=\"bp\">*</span> <span class=\"bp\">‖</span><span class=\"n\">x</span><span class=\"bp\">‖</span> <span class=\"bp\">^</span> <span class=\"n\">j</span> <span class=\"bp\">=</span> <span class=\"n\">complex.abs</span> <span class=\"bp\">↑</span><span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"n\">j</span><span class=\"o\">):=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">pow_add</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"bp\">←</span><span class=\"n\">complex.norm_eq_abs</span><span class=\"o\">,</span>\n  <span class=\"n\">congr</span><span class=\"o\">,</span>\n  <span class=\"n\">norm_cast</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">A</span><span class=\"o\">}</span>  <span class=\"o\">{</span><span class=\"n\">n</span><span class=\"o\">:</span><span class=\"n\">ℕ</span> <span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">a</span><span class=\"o\">:</span><span class=\"n\">ℂ</span><span class=\"o\">}:</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">),</span><span class=\"n\">iterated_fderiv</span> <span class=\"n\">ℝ</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">),</span> <span class=\"n\">complex.exp</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"bp\">↑‖</span><span class=\"n\">x</span><span class=\"bp\">‖</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span><span class=\"o\">)))</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">),</span><span class=\"n\">deriv</span><span class=\"bp\">^</span><span class=\"o\">[</span><span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">),</span> <span class=\"n\">complex.exp</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">a</span> <span class=\"bp\">*</span>  <span class=\"bp\">↑‖</span><span class=\"n\">x</span><span class=\"bp\">‖</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span><span class=\"o\">))</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">iterated_fderiv_eq_equiv_comp</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">iterated_deriv_eq_iterate</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">linear_isometry_equiv.norm_map</span><span class=\"o\">],</span>\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">real</span>\n</code></pre></div>\n<p>Kind regards,<br>\nSonia</p>",
        "id": 342648847,
        "sender_full_name": "rtertr (Sonia)",
        "timestamp": 1679080906
    },
    {
        "content": "<p>Depends on what coercion that arrow stands for</p>",
        "id": 342651254,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1679081724
    },
    {
        "content": "<blockquote>\n<p><code>variables {A : Type*} [normed_add_comm_group A] [normed_space ℝ A] [complete_space A] [nontrivially_normed_field A] [normed_space A ℂ] [normed_space A ℝ] [has_lift_t A ℂ]</code></p>\n</blockquote>\n<p>Are you sure about all that?</p>",
        "id": 342651424,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1679081785
    },
    {
        "content": "<p>Yes, that's definitely not something you want</p>",
        "id": 342652135,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1679082062
    },
    {
        "content": "<p>In your code I get an error on <code>norm_cast</code>. The goal is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">⊢</span> <span class=\"bp\">‖</span><span class=\"n\">x</span><span class=\"bp\">‖</span> <span class=\"bp\">=</span> <span class=\"bp\">‖↑</span><span class=\"n\">x</span><span class=\"bp\">‖</span>\n</code></pre></div>\n<p>If I start clicking on the LHS and unravelling until I find out how this is working (so, more precisely, I click on <code>‖x‖</code> then <code>normed_field.to_has_norm</code> then <code>nontrivially_normed_field.to_normed_field</code>), I run into <code>_inst_4: nontrivially_normed_field A</code>. If I click on the RHS and do the same thing (<code>↑x</code>) I rrun into <code>_inst_7: has_lift_t A ℂ</code>. As far as I can see, <code>_inst_4</code> and <code>_inst_7</code> are two unrelated constants, so I would guess that <code>‖x‖ = ‖↑x‖</code> is not provable and in general not true.</p>",
        "id": 342652146,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1679082070
    },
    {
        "content": "<p>Writing <code>[has_lift_t A B]</code> in a mathematical statement is pretty much always incorrect</p>",
        "id": 342652217,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1679082104
    },
    {
        "content": "<p>One issue I have with mathlib is that for parts of the library I'm unfamiliar with, I find it very hard to discover how exactly one is supposed to state random things such as \"let <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi></mrow><annotation encoding=\"application/x-tex\">A</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">A</span></span></span></span> be a normed <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">R</mi></mrow><annotation encoding=\"application/x-tex\">\\R</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6889em;\"></span><span class=\"mord mathbb\">R</span></span></span></span>-algebra which is a field and such that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">C</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{C}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6889em;\"></span><span class=\"mord mathbb\">C</span></span></span></span> is a normed space over <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi></mrow><annotation encoding=\"application/x-tex\">A</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">A</span></span></span></span>\", because you have to have a good feeling about which typeclasses are fundamental, which are mixins, which are data, how you're supposed to be telling the system that various diagrams commute etc. Looking at your code, like Eric I immediately see a code smell with the <code>has_lift_t</code> but there might be other errors too which are harder for me to find. Even in areas I know a bit better I still struggle -- for example even the evening before I was giving a class on unique factorization domains in my course recently, I was desperately asking on the Discord how to say \"let <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi></mrow><annotation encoding=\"application/x-tex\">A</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">A</span></span></span></span> be a unique factorization domain\".</p>\n<p>The one thing I do know how to do now though is to debug -- for example discovering that one side depended on <code>_inst_4</code> and the other side depended on <code>_inst_7</code> was very easy for me, because of the amazing widgets we have now. So at least I can see that something's wrong quickly rather than bashing my head against the wall trying to solve an unsolvable goal.</p>",
        "id": 342652719,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1679082311
    },
    {
        "content": "<blockquote>\n<p>but there might be other errors too which are harder for me to find</p>\n</blockquote>\n<p>Indeed, <code>[normed_add_comm_group A] [nontrivially_normed_field A]</code> is also wrong as it defines two different <code>+</code> operators on <code>A</code></p>",
        "id": 342652931,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1679082383
    },
    {
        "content": "<p>Can we lint for this? I'm sure it never happens in mathlib because that code has been reviewed, but it would be great for beginners if stuff like \"you just put two norms on <code>A</code>, both called <code>‖x‖</code>\" can be explicitly flagged.</p>",
        "id": 342653080,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1679082453
    },
    {
        "content": "<p>Usually linters are for \"you proved this but made a mess\". The case you're describing is \"you have no hope of proving this because you made a mess so your theorem is false\"</p>",
        "id": 342656000,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1679083498
    },
    {
        "content": "<p>You could potentially have a tactic that just tries to find out if multiple different <code>has_add</code> instances can be produced from the context</p>",
        "id": 342658111,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1679084301
    },
    {
        "content": "<p>(and same for all <code>notation_class</code>es)</p>",
        "id": 342658140,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1679084309
    },
    {
        "content": "<p>Isn't this <em>literally</em> just the problem of detecting non-defeq diamonds? Because you don't care if you can get the <code>has_add</code> instances two different ways as long as they are the same. And to figure out if there are no non-defeq diamonds you potentially have to traverse all instance paths, right?</p>\n<p>I think what seems more feasible to me (and somewhat useful) would be some sort of check where you could could specify some classes to check (e.g., <code>has_add</code> or <code>has_mul</code>) and see if there are disjoint subsets of your context which produce that class.</p>\n<p>Although as I write it I realize that disjointness isn't quite the right condition, because you may have something in context which is needed by both things. In particular, if you wanted to know if there were two <code>has_smul R A</code> instances and your context contained <code>[comm_semiring R]</code>, <code>[semiring A]</code>, <code>[module R A]</code>, <code>[algebra R A]</code> then disjoint subsets are no possible. So maybe what we want is <em>distinct minimal collections of hypotheses</em>?</p>\n<p>As long as your context isn't huge then this seems somewhat feasible, but it's not something you would want to have running all the time. You would want to call it explicitly, and that seems quite handy, especially for newcomers. I'm imagining an interface like </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">generate</span> <span class=\"n\">has_smul</span> <span class=\"n\">R</span> <span class=\"n\">A</span>\n<span class=\"c1\">-- a tactic that shows all the distinct minimal collections of hypotheses in the local context from which you can infer a `has_smul` instance</span>\n\n<span class=\"bp\">#</span><span class=\"n\">generate</span> <span class=\"n\">has_smul</span> <span class=\"n\">R</span> <span class=\"n\">A</span>\n<span class=\"c1\">-- a command that does the same with whatever currently is included in `#where`.</span>\n</code></pre></div>",
        "id": 342662915,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1679086147
    },
    {
        "content": "<p>Eric, now that I re-read your message, maybe this is what you meant, but I didn't read it that way the first time.</p>",
        "id": 342663174,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1679086236
    },
    {
        "content": "<p>Another thought I had (which I think should be less computationally intensive), would be to consider all structure projections from instances in context and make sure all the data ones with the same name and type are defeq.</p>",
        "id": 342663752,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1679086484
    },
    {
        "content": "<p>Note that neither of these is really detecting non-defeq diamonds. The purpose would only be to help you make sure you didn't do something silly.</p>",
        "id": 342664053,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1679086599
    },
    {
        "content": "<p>I'm 90% of the way to a working tactic to do the above</p>",
        "id": 342666028,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1679087536
    },
    {
        "content": "<p>17 messages were moved here from <a class=\"stream-topic\" data-stream-id=\"116395\" href=\"/#narrow/stream/116395-maths/topic/Exponential.20Banach.20Algebra\">#maths &gt; Exponential Banach Algebra</a> by <span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span>.</p>",
        "id": 342666080,
        "sender_full_name": "Notification Bot",
        "timestamp": 1679087566
    },
    {
        "content": "<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>bad.lean</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic.core</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.nat.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.module.basic</span>\n\n<span class=\"c1\">-- extended as needed</span>\n<span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">possible_type_classes</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">expr</span> <span class=\"bp\">→</span> <span class=\"n\">tactic</span> <span class=\"o\">(</span><span class=\"n\">list</span> <span class=\"n\">expr</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"o\">:=</span> <span class=\"n\">pure</span> <span class=\"o\">[]</span>\n<span class=\"bp\">|</span> <span class=\"o\">[</span><span class=\"n\">x</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"n\">list.traverse</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">tactic.mk_app</span> <span class=\"n\">n</span> <span class=\"o\">[</span><span class=\"n\">x</span><span class=\"o\">])</span>\n    <span class=\"o\">[</span><span class=\"bp\">``</span><span class=\"n\">has_add</span><span class=\"o\">,</span>\n     <span class=\"bp\">``</span><span class=\"n\">has_zero</span><span class=\"o\">,</span>\n     <span class=\"bp\">``</span><span class=\"n\">has_mul</span><span class=\"o\">,</span>\n     <span class=\"bp\">``</span><span class=\"n\">has_one</span><span class=\"o\">]</span>\n<span class=\"bp\">|</span> <span class=\"o\">[</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"n\">list.traverse</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">tactic.mk_app</span> <span class=\"n\">n</span> <span class=\"o\">[</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">])</span>\n    <span class=\"o\">[</span><span class=\"bp\">``</span><span class=\"n\">has_smul</span><span class=\"o\">]</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">pure</span> <span class=\"o\">[]</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">tactic.interactive.classical</span>\n\n<span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">tactic.interactive.find_conflicts</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"k\">do</span>\n  <span class=\"n\">some</span> <span class=\"n\">frozen</span> <span class=\"bp\">←</span> <span class=\"n\">tactic.frozen_local_instances</span><span class=\"o\">,</span>\n  <span class=\"n\">all_bad</span> <span class=\"bp\">←</span> <span class=\"n\">list.join</span> <span class=\"bp\">&lt;$&gt;</span> <span class=\"n\">frozen.mmap</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">fi</span><span class=\"o\">,</span> <span class=\"k\">do</span>\n    <span class=\"n\">t</span> <span class=\"bp\">←</span> <span class=\"n\">tactic.infer_type</span> <span class=\"n\">fi</span><span class=\"o\">,</span>\n    <span class=\"n\">args</span> <span class=\"bp\">←</span> <span class=\"n\">list.reverse</span> <span class=\"bp\">&lt;$&gt;</span> <span class=\"n\">t.list_explicit_args</span><span class=\"o\">,</span>\n    <span class=\"n\">tactic.trace</span> <span class=\"n\">format</span><span class=\"bp\">!</span><span class=\"s2\">\"trying {fi}\"</span><span class=\"o\">,</span>\n    <span class=\"n\">possible</span> <span class=\"bp\">←</span> <span class=\"n\">possible_type_classes</span> <span class=\"n\">args</span><span class=\"o\">,</span>\n    <span class=\"n\">insts</span> <span class=\"bp\">←</span> <span class=\"n\">list.join</span> <span class=\"bp\">&lt;$&gt;</span> <span class=\"n\">possible.mmap</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"k\">do</span>\n      <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"n\">with_fi</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">tactic.try_core</span> <span class=\"o\">(</span><span class=\"n\">tactic.mk_instance</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"bp\">|</span> <span class=\"n\">pure</span> <span class=\"o\">[],</span>\n      <span class=\"n\">some</span> <span class=\"n\">without_fi</span> <span class=\"bp\">←</span> <span class=\"n\">tactic.retrieve</span> <span class=\"o\">(</span><span class=\"k\">do</span>\n        <span class=\"n\">tactic.unfreeze_local_instances</span><span class=\"o\">,</span>\n        <span class=\"n\">tactic.clear'</span> <span class=\"n\">tt</span> <span class=\"o\">[</span><span class=\"n\">fi</span><span class=\"o\">],</span>\n        <span class=\"n\">tactic.try_core</span> <span class=\"o\">(</span><span class=\"n\">tactic.mk_instance</span> <span class=\"n\">p</span><span class=\"o\">))</span> <span class=\"bp\">|</span> <span class=\"n\">pure</span> <span class=\"o\">[],</span>\n      <span class=\"n\">ok</span> <span class=\"bp\">←</span> <span class=\"n\">succeeds</span> <span class=\"o\">(</span><span class=\"n\">tactic.is_def_eq</span> <span class=\"n\">with_fi</span> <span class=\"n\">without_fi</span><span class=\"o\">),</span>\n      <span class=\"k\">if</span> <span class=\"n\">ok</span> <span class=\"k\">then</span>\n        <span class=\"n\">pure</span> <span class=\"o\">[]</span>\n      <span class=\"k\">else</span>\n        <span class=\"n\">pure</span> <span class=\"o\">[(</span><span class=\"n\">fi</span><span class=\"o\">,</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">with_fi</span><span class=\"o\">,</span> <span class=\"n\">without_fi</span><span class=\"o\">)]</span> <span class=\"o\">),</span>\n    <span class=\"n\">pure</span> <span class=\"n\">insts</span><span class=\"o\">),</span>\n  <span class=\"n\">all_bad.mmap</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"k\">do</span>\n    <span class=\"o\">(</span><span class=\"n\">fi</span><span class=\"o\">,</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">with_fi</span><span class=\"o\">,</span> <span class=\"n\">without_fi</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">pure</span> <span class=\"n\">i</span><span class=\"o\">,</span>\n    <span class=\"n\">prod_t</span> <span class=\"bp\">←</span> <span class=\"n\">tactic.mk_app</span> <span class=\"bp\">`</span><span class=\"n\">prod</span> <span class=\"o\">[</span><span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">p</span><span class=\"o\">],</span>\n    <span class=\"n\">prod_v</span> <span class=\"bp\">←</span> <span class=\"n\">tactic.mk_app</span> <span class=\"bp\">`</span><span class=\"n\">prod.mk</span> <span class=\"o\">[</span><span class=\"n\">with_fi</span><span class=\"o\">,</span> <span class=\"n\">without_fi</span><span class=\"o\">],</span>\n    <span class=\"n\">tactic.definev</span> <span class=\"o\">(</span><span class=\"n\">fi.local_pp_name</span> <span class=\"bp\">++</span> <span class=\"bp\">`«</span><span class=\"n\">bad</span> <span class=\"n\">instances</span><span class=\"bp\">»</span><span class=\"o\">)</span> <span class=\"n\">prod_t</span> <span class=\"n\">prod_v</span><span class=\"o\">),</span>\n  <span class=\"k\">match</span> <span class=\"n\">all_bad</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"o\">:=</span> <span class=\"n\">tactic.trace</span> <span class=\"s2\">\"no conflicts\"</span>\n  <span class=\"bp\">|</span> <span class=\"n\">l</span> <span class=\"o\">:=</span> <span class=\"n\">tactic.trace</span> <span class=\"n\">format</span><span class=\"bp\">!</span><span class=\"s2\">\"Found non-defeq instances, inspect the context for more info\"</span>\n  <span class=\"kd\">end</span>\n</code></pre></div>\n</div></div>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">analysis.normed_space.exponential</span>\n<span class=\"kn\">import</span> <span class=\"n\">bad</span>\n\n<span class=\"kd\">example</span>\n  <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n  <span class=\"o\">[</span><span class=\"n\">normed_add_comm_group</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">normed_space</span> <span class=\"n\">ℝ</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">complete_space</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">nontrivially_normed_field</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">normed_space</span> <span class=\"n\">A</span> <span class=\"n\">ℂ</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">normed_space</span> <span class=\"n\">A</span> <span class=\"n\">ℝ</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_lift_t</span> <span class=\"n\">A</span> <span class=\"n\">ℂ</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n    <span class=\"n\">true</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">find_conflicts</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 342667595,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1679088293
    },
    {
        "content": "<p>This prints a trace message and adds</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">_inst_4.</span><span class=\"bp\">«</span><span class=\"n\">bad</span> <span class=\"n\">instances</span><span class=\"bp\">»</span> <span class=\"o\">:</span> <span class=\"n\">has_add</span> <span class=\"n\">A</span> <span class=\"bp\">×</span> <span class=\"n\">has_add</span> <span class=\"n\">A</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">distrib.to_has_add</span> <span class=\"n\">A</span> <span class=\"o\">(</span><span class=\"n\">ring.to_distrib</span> <span class=\"n\">A</span><span class=\"o\">),</span> <span class=\"n\">add_zero_class.to_has_add</span> <span class=\"n\">A</span> <span class=\"o\">(</span><span class=\"n\">add_monoid.to_add_zero_class</span> <span class=\"n\">A</span><span class=\"o\">)),</span>\n<span class=\"n\">_inst_4.</span><span class=\"bp\">«</span><span class=\"n\">bad</span> <span class=\"n\">instances</span><span class=\"bp\">»</span> <span class=\"o\">:</span> <span class=\"n\">has_zero</span> <span class=\"n\">A</span> <span class=\"bp\">×</span> <span class=\"n\">has_zero</span> <span class=\"n\">A</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">mul_zero_class.to_has_zero</span> <span class=\"n\">A</span> <span class=\"o\">(</span><span class=\"n\">non_unital_non_assoc_semiring.to_mul_zero_class</span> <span class=\"n\">A</span><span class=\"o\">),</span>\n   <span class=\"n\">add_zero_class.to_has_zero</span> <span class=\"n\">A</span> <span class=\"o\">(</span><span class=\"n\">add_monoid.to_add_zero_class</span> <span class=\"n\">A</span><span class=\"o\">))</span>\n</code></pre></div>\n<p>to the context, which you can inspect in the widget view. <code>fst</code> is the instance that come from <code>_inst_4</code>, <code>snd</code> is the instance that comes from omitting <code>_inst_4</code>.</p>",
        "id": 342667693,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1679088342
    },
    {
        "content": "<p>This only works if your assumptions conflict with each other, it doesn't detect conflicts with global instances (so won't tell you that <code>[ring real]</code> is not what you want)</p>",
        "id": 342667770,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1679088371
    },
    {
        "content": "<p>What would have solved my problem the other day (and perhaps also Sonia's) would be a thing saying \"ok so I've definitely made a UFD now but please tell me which things to delete\".</p>",
        "id": 342681096,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1679094689
    },
    {
        "content": "<p>Right, the above doesn't tell you which things to delete</p>",
        "id": 342681493,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1679094881
    },
    {
        "content": "<p>But it does tell you that <code>nontrivially_normed_field A</code> was where things started going wrong</p>",
        "id": 342681588,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1679094925
    },
    {
        "content": "<p>So either you need to remove <code>nontrivially_normed_field A</code>, or work out what was conflicting with it and remove that instead</p>",
        "id": 342681605,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1679094940
    },
    {
        "content": "<p>Unfortunately I've seen <code>ring real</code> in the wild :-/</p>",
        "id": 342684467,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1679096896
    },
    {
        "content": "<p>Hello again,<br>\nThank you for all your input! I was trying to adjust my file in <code>ℝ</code> to the Banach space, but then it asked for more conditions on <code>A</code>, which I then just added to see how far I could go. It is unfortunate that they are in conflict with each other, but very cool tactic you made, the <code>find_conflict</code> one.<br>\nThe <code>nontrivially_normed_field A</code> popped up around the time I said <br>\n<code>have h₁:=mono_exp_neg_sq_bounded_nonneg_banach n ha,</code> which was of the form<br>\n<code>(n : ℕ) {a : ℂ } (ha : 0 &lt; a.re):  ∃ (C : ℝ),  ∀ x:A, (‖x‖ ≥ 0 →  ‖x‖ ^ (n) * complex.abs (complex.exp (-a*↑‖x‖ ^ 2)) ≤ C)</code>, which was not proved yet, since I was working backwards. <br>\n I think I might just return to <code>(x : fin d → ℝ)</code> for now then, since I am not sure I can you my previous work on the Banach space. <br>\nThank you again :)</p>",
        "id": 342803007,
        "sender_full_name": "rtertr (Sonia)",
        "timestamp": 1679153748
    },
    {
        "content": "<p>To elaborate on the problem; you can't have both <code>[normed_add_comm_group A] [nontrivially_normed_field A]</code> at the same time, just as you can't have <code>[add_comm_group A] [ring A]</code>. But you don't need both, as the latter implies the former. Just use the stronger one, <code>nontrivially_normed_field A</code></p>",
        "id": 342805428,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1679154697
    },
    {
        "content": "<p>Hmm, I guess I am confused about the <code>nontrivially_normed_field A</code>. Because the condition <code>∃ (x : α), 1 &lt; ‖x‖</code> seems fine.<br>\nBut to show a function is in the Schwartz space, I need to show it is of rapid decrease, which is <code>∀ (k n : ℕ), ∃ (C : ℝ), ∀ (x : fin d → ℝ), ‖x‖ ^ k * ‖iterated_fderiv ℝ n (λ (x : fin d → ℝ), cexp (-a * ↑‖x‖ ^ 2)) x‖ ≤ C</code>. But is seems all the theorems regarding <code>iterated_fderiv</code> require a <code>nontrivially_normed_field</code>,  but I am not sure why <code>fin d → ℝ</code> is not a <code>nontrivially_normed_field</code>.</p>",
        "id": 342810357,
        "sender_full_name": "rtertr (Sonia)",
        "timestamp": 1679156852
    },
    {
        "content": "<p>It's not a field. Nonzero elements of fields have inverses. But (0,1) has no inverse.</p>",
        "id": 342811721,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1679157436
    },
    {
        "content": "<blockquote>\n<p>But is seems all the theorems regarding iterated_fderiv require a nontrivially_normed_field</p>\n</blockquote>\n<p>Can you give an example of such a theorem?</p>",
        "id": 342811906,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1679157519
    },
    {
        "content": "<p>I don't know this part of the library well but my guess is that if the system is asking you for a nontrivially normed field then it's presumably expecting you to put in something like the field where the epsilons are living (i.e. probably the reals in your case), rather than the vector spaces where all the functions are going from and to.</p>",
        "id": 342811977,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1679157570
    },
    {
        "content": "<p>So before in my previous proof I was using <code>iterated_deriv_within_eq_equiv_comp</code>. <br>\nAnd then the theorems in <a href=\"https://leanprover-community.github.io/mathlib_docs/analysis/calculus/cont_diff.html#iterated_fderiv\">https://leanprover-community.github.io/mathlib_docs/analysis/calculus/cont_diff.html#iterated_fderiv</a> seemed to require a  nontrivially_normed_field :D</p>",
        "id": 342812362,
        "sender_full_name": "rtertr (Sonia)",
        "timestamp": 1679157730
    },
    {
        "content": "<p>Yes, but you're giving it one when you write <code>iterated_fderiv ℝ</code>. It wants <code>nontrivially_normed_field 𝕜</code> (<code>𝕜 = ℝ</code>) not <code>nontrivially_normed_field E</code> (<code>E = (fin d → ℝ)</code>)</p>",
        "id": 342812643,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1679157866
    },
    {
        "content": "<p>What made you conclude you needed <code>nontrivially_normed_field A</code>? Did you get an error message and add it to fix it?</p>",
        "id": 342812829,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1679157965
    },
    {
        "content": "<p>It was created as a sub-goal :D Let me try to make a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a></p>",
        "id": 342813069,
        "sender_full_name": "rtertr (Sonia)",
        "timestamp": 1679158055
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.complex.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">analysis.normed_space.exponential</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.polynomial.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.polynomial.eval</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">analysis.special_functions.exp_deriv</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">is_absolute_value</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">classical</span> <span class=\"n\">big_operators</span> <span class=\"n\">nat</span> <span class=\"n\">complex_conjugate</span>\n\n<span class=\"kn\">section</span>\n<span class=\"kn\">open</span> <span class=\"n\">polynomial</span>\n\n<span class=\"kd\">noncomputable theory</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">real</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">normed_add_comm_group</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">normed_space</span> <span class=\"n\">ℝ</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">complete_space</span> <span class=\"n\">A</span><span class=\"o\">]</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">polynomial_mul_exp_neg_sq_bounded_banach</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">:</span><span class=\"n\">ℂ</span> <span class=\"o\">)</span>  <span class=\"o\">(</span><span class=\"n\">ha</span><span class=\"o\">:</span> <span class=\"mi\">0</span><span class=\"bp\">&lt;</span><span class=\"n\">a.re</span><span class=\"o\">):</span> <span class=\"bp\">∀</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">polynomial</span> <span class=\"n\">ℂ</span><span class=\"o\">),</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">),</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">A</span><span class=\"o\">),</span> <span class=\"bp\">‖</span><span class=\"n\">x</span><span class=\"bp\">‖^</span><span class=\"n\">k</span> <span class=\"bp\">*</span> <span class=\"bp\">‖</span><span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">A</span>  <span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">p.eval</span> <span class=\"bp\">↑‖</span><span class=\"n\">x</span><span class=\"bp\">‖</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">complex.exp</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">a</span><span class=\"bp\">*↑‖</span><span class=\"n\">x</span><span class=\"bp\">‖</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span><span class=\"o\">))</span> <span class=\"n\">x</span><span class=\"bp\">‖</span> <span class=\"bp\">≤</span> <span class=\"n\">C</span><span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">deriv_iterative_exp_neg_sq_banach</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">:</span><span class=\"n\">ℂ</span><span class=\"o\">):</span> <span class=\"bp\">∃</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">polynomial</span> <span class=\"n\">ℂ</span> <span class=\"o\">),</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"o\">,</span> <span class=\"n\">deriv</span><span class=\"bp\">^</span><span class=\"o\">[</span><span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"o\">),</span> <span class=\"n\">complex.exp</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">a</span><span class=\"bp\">*↑‖</span><span class=\"n\">x</span><span class=\"bp\">‖</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span><span class=\"o\">))</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">A</span>  <span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">p.eval</span> <span class=\"bp\">↑‖</span><span class=\"n\">x</span><span class=\"bp\">‖</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">complex.exp</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">a</span><span class=\"bp\">*↑‖</span><span class=\"n\">x</span><span class=\"bp\">‖</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span><span class=\"o\">))</span> <span class=\"n\">x</span><span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">gaussian_decay_banach</span>  <span class=\"o\">{</span><span class=\"n\">d</span><span class=\"o\">:</span><span class=\"n\">ℕ</span> <span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">a</span><span class=\"o\">:</span><span class=\"n\">ℂ</span><span class=\"o\">}</span>  <span class=\"o\">(</span><span class=\"n\">ha</span><span class=\"o\">:</span> <span class=\"mi\">0</span><span class=\"bp\">&lt;</span><span class=\"n\">a.re</span><span class=\"o\">):</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">),</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">),</span> <span class=\"bp\">‖</span><span class=\"n\">x</span><span class=\"bp\">‖</span> <span class=\"bp\">^</span> <span class=\"n\">k</span> <span class=\"bp\">*</span> <span class=\"bp\">‖</span><span class=\"n\">iterated_fderiv</span> <span class=\"n\">ℝ</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">),</span> <span class=\"n\">complex.exp</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"bp\">↑‖</span><span class=\"n\">x</span><span class=\"bp\">‖</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span><span class=\"o\">))</span> <span class=\"n\">x</span><span class=\"bp\">‖</span> <span class=\"bp\">≤</span> <span class=\"n\">C</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">k</span><span class=\"o\">,</span>\n  <span class=\"n\">intro</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">h₁</span><span class=\"o\">:=</span><span class=\"n\">deriv_iterative_exp_neg_sq_banach</span><span class=\"o\">,</span>\n  <span class=\"n\">specialize</span> <span class=\"n\">h₁</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n  <span class=\"n\">specialize</span> <span class=\"n\">h₁</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">p</span><span class=\"o\">,</span><span class=\"n\">h₁</span><span class=\"o\">⟩:=</span><span class=\"n\">h₁</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">h₂</span><span class=\"o\">:=</span> <span class=\"n\">polynomial_mul_exp_neg_sq_bounded_banach</span> <span class=\"n\">a</span> <span class=\"n\">ha</span><span class=\"o\">,</span>\n  <span class=\"n\">specialize</span> <span class=\"n\">h₂</span> <span class=\"n\">p</span><span class=\"o\">,</span>\n  <span class=\"n\">specialize</span> <span class=\"n\">h₂</span> <span class=\"n\">k</span><span class=\"o\">,</span>\n  <span class=\"n\">specialize</span> <span class=\"n\">h₂</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">C</span><span class=\"o\">,</span><span class=\"n\">h₂</span><span class=\"o\">⟩:=</span><span class=\"n\">h₂</span><span class=\"o\">,</span>\n  <span class=\"n\">use</span> <span class=\"n\">C</span><span class=\"o\">,</span>\n  <span class=\"n\">intro</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">iterated_fderiv_eq_equiv_comp</span><span class=\"o\">,</span> <span class=\"c1\">-- now allowed to apply</span>\n  <span class=\"n\">rw</span> <span class=\"n\">iterated_deriv_eq_iterate</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">linear_isometry_equiv.norm_map</span><span class=\"o\">],</span>\n  <span class=\"k\">have</span> <span class=\"n\">h₃</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">),</span> <span class=\"n\">deriv</span><span class=\"bp\">^</span><span class=\"o\">[</span><span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"o\">),</span> <span class=\"n\">complex.exp</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"bp\">↑‖</span><span class=\"n\">x</span><span class=\"bp\">‖</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span><span class=\"o\">))</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">x</span><span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">),</span>  <span class=\"n\">eval</span> <span class=\"bp\">↑‖</span><span class=\"n\">x</span><span class=\"bp\">‖</span> <span class=\"n\">p</span> <span class=\"bp\">*</span> <span class=\"n\">complex.exp</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"bp\">↑‖</span><span class=\"n\">x</span><span class=\"bp\">‖</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span><span class=\"o\">))</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"o\">{</span><span class=\"n\">dsimp</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"n\">h₁</span> <span class=\"n\">x</span><span class=\"o\">,},</span>\n  <span class=\"k\">have</span> <span class=\"n\">h₄</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">),</span> <span class=\"n\">deriv</span><span class=\"bp\">^</span><span class=\"o\">[</span><span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"o\">),</span> <span class=\"n\">complex.exp</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"bp\">↑‖</span><span class=\"n\">x</span><span class=\"bp\">‖</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span><span class=\"o\">))</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">),</span>  <span class=\"n\">eval</span> <span class=\"bp\">↑‖</span><span class=\"n\">x</span><span class=\"bp\">‖</span> <span class=\"n\">p</span> <span class=\"bp\">*</span> <span class=\"n\">complex.exp</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"bp\">↑‖</span><span class=\"n\">x</span><span class=\"bp\">‖</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span><span class=\"o\">)),</span> <span class=\"kd\">by</span> <span class=\"o\">{</span><span class=\"n\">simp</span> <span class=\"n\">only</span><span class=\"o\">,</span> <span class=\"n\">apply</span> <span class=\"n\">funext</span> <span class=\"n\">h₁</span><span class=\"o\">,},</span>\n  <span class=\"k\">have</span> <span class=\"n\">h₅</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">),</span> <span class=\"n\">deriv</span><span class=\"bp\">^</span><span class=\"o\">[</span><span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"o\">),</span> <span class=\"n\">complex.exp</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"bp\">↑‖</span><span class=\"n\">x</span><span class=\"bp\">‖</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span><span class=\"o\">))</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">x</span><span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">A</span>  <span class=\"o\">),</span>  <span class=\"n\">eval</span> <span class=\"bp\">↑‖</span><span class=\"n\">x</span><span class=\"bp\">‖</span> <span class=\"n\">p</span> <span class=\"bp\">*</span> <span class=\"n\">complex.exp</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"bp\">↑‖</span><span class=\"n\">x</span><span class=\"bp\">‖</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span><span class=\"o\">))</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">exact</span> <span class=\"n\">congr_fun</span> <span class=\"n\">h₄</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"n\">at</span> <span class=\"n\">h₃</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"n\">at</span> <span class=\"n\">h₅</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">h₆</span><span class=\"o\">:</span> <span class=\"bp\">‖</span><span class=\"n\">x</span><span class=\"bp\">‖</span> <span class=\"bp\">^</span> <span class=\"n\">k</span> <span class=\"bp\">*</span> <span class=\"bp\">‖</span><span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">),</span> <span class=\"n\">deriv</span><span class=\"bp\">^</span><span class=\"o\">[</span><span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"o\">),</span> <span class=\"n\">complex.exp</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"bp\">↑‖</span><span class=\"n\">x</span><span class=\"bp\">‖</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span><span class=\"o\">))</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">x</span><span class=\"bp\">‖</span> <span class=\"bp\">≤</span> <span class=\"n\">C</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span><span class=\"n\">dsimp</span> <span class=\"n\">only</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">h₅</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">h₂</span> <span class=\"n\">x</span><span class=\"o\">,},</span>\n  <span class=\"n\">rw</span> <span class=\"n\">iterated_fderiv_eq_equiv_comp</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">iterated_deriv_eq_iterate</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">linear_isometry_equiv.norm_map</span><span class=\"o\">],</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 342813292,
        "sender_full_name": "rtertr (Sonia)",
        "timestamp": 1679158143
    },
    {
        "content": "<p>Not sure it necessarily a subgoal, but when you click at the issue at <code>deriv_iterative_exp_neg_sq_banach</code>, it  says</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"n\">type</span> <span class=\"kd\">class</span> <span class=\"kd\">instance</span> <span class=\"n\">for</span>\n<span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"o\">,</span>\n<span class=\"n\">_inst_1</span> <span class=\"o\">:</span> <span class=\"n\">normed_add_comm_group</span> <span class=\"n\">A</span><span class=\"o\">,</span>\n<span class=\"n\">_inst_2</span> <span class=\"o\">:</span> <span class=\"n\">normed_space</span> <span class=\"n\">ℝ</span> <span class=\"n\">A</span><span class=\"o\">,</span>\n<span class=\"n\">_inst_3</span> <span class=\"o\">:</span> <span class=\"n\">complete_space</span> <span class=\"n\">A</span><span class=\"o\">,</span>\n<span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span>\n<span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">,</span>\n<span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">ℂ</span><span class=\"o\">,</span>\n<span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">A</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">nontrivially_normed_field</span> <span class=\"n\">A</span>\n</code></pre></div>",
        "id": 342813482,
        "sender_full_name": "rtertr (Sonia)",
        "timestamp": 1679158217
    },
    {
        "content": "<p>So I just assumed it was A that needed to be <code>nontrivially_normed_field</code>.</p>",
        "id": 342813576,
        "sender_full_name": "rtertr (Sonia)",
        "timestamp": 1679158263
    },
    {
        "content": "<p>And it is the same if I replace <code>A</code> with <code>fin d → ℝ</code>.</p>",
        "id": 342813760,
        "sender_full_name": "rtertr (Sonia)",
        "timestamp": 1679158344
    },
    {
        "content": "<p>You're confused between <a href=\"https://leanprover-community.github.io/mathlib_docs/find/iterated_fderiv\">docs#iterated_fderiv</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/iterated_deriv\">docs#iterated_deriv</a>. The former works on any normed space (over some field <code>k</code>), and is a multilinear map. The latter only works on the base field itself, and is a scalar. Just like the right general notion of a derivative is the Frechet derivative, which is a linear map, but when the space you are working on turns out to be the base field then you can canonically identify this linear map with a number.</p>",
        "id": 342813851,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1679158405
    },
    {
        "content": "<p>Okay, great! Thank you for all your help and patience! I will try to work around this then <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 342816012,
        "sender_full_name": "rtertr (Sonia)",
        "timestamp": 1679159437
    }
]