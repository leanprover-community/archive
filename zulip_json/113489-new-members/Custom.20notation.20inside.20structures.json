[
    {
        "content": "<p>Hi,<br>\nI have a structure whose constructor takes, among other things, a quaternary congruence relation and proofs of some of its properties as arguments. I would like to define a custom notation, so that I can write <code>a b ≅ c d</code> instead of <code>congruence a b c d</code>. However, if I use the <code>notation</code> command and then try to use the newly defined notation, I get an error.<br>\nMy code:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">space</span> <span class=\"n\">where</span>\n<span class=\"o\">(</span><span class=\"n\">point_t</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">congruence</span> <span class=\"o\">:</span> <span class=\"n\">point_t</span> <span class=\"bp\">→</span> <span class=\"n\">point_t</span> <span class=\"bp\">→</span> <span class=\"n\">point_t</span> <span class=\"bp\">→</span> <span class=\"n\">point_t</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n<span class=\"kd\">notation</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"s2\">\" ≅ \"</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">space.congruence</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span>\n<span class=\"o\">(</span><span class=\"n\">symmetry_of_congruence</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">point_t</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">≅</span> <span class=\"n\">b</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>Error message (relating to the congruence symbol on the last line):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">expected</span> <span class=\"n\">token</span>\n</code></pre></div>",
        "id": 359517221,
        "sender_full_name": "Kuba",
        "timestamp": 1684453075
    },
    {
        "content": "<p>The parser won't let you declare notation inside a structure declaration. You would want to declare the notation beforehand somewhere in the syntax/macro/notation hierarchy. One way of doing it (someone can probably give you a more clean implementation):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">set_option</span> <span class=\"n\">hygiene</span> <span class=\"n\">false</span> <span class=\"k\">in</span>\n<span class=\"n\">macro</span> <span class=\"n\">a</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"n\">b</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"s2\">\" ≅ \"</span> <span class=\"n\">c</span><span class=\"o\">:</span><span class=\"n\">term</span><span class=\"o\">:</span><span class=\"n\">max</span> <span class=\"n\">d</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"o\">:</span> <span class=\"n\">term</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">congruence</span> <span class=\"bp\">$</span><span class=\"n\">a</span> <span class=\"bp\">$</span><span class=\"n\">b</span> <span class=\"bp\">$</span><span class=\"n\">c</span> <span class=\"bp\">$</span><span class=\"n\">d</span><span class=\"o\">)</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">space</span> <span class=\"n\">where</span>\n<span class=\"o\">(</span><span class=\"n\">point_t</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">congruence</span> <span class=\"o\">:</span> <span class=\"n\">point_t</span> <span class=\"bp\">→</span> <span class=\"n\">point_t</span> <span class=\"bp\">→</span> <span class=\"n\">point_t</span> <span class=\"bp\">→</span> <span class=\"n\">point_t</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">symmetry_of_congruence</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">point_t</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">≅</span> <span class=\"n\">b</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n\n<span class=\"k\">#print</span> <span class=\"n\">space</span>\n</code></pre></div>",
        "id": 359540713,
        "sender_full_name": "Chris Bailey",
        "timestamp": 1684469959
    },
    {
        "content": "<p>Does putting the notation command in <code>()</code> help?</p>",
        "id": 359550044,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684475933
    },
    {
        "content": "<p>Oh nevermind, this is lean4</p>",
        "id": 359550119,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684475969
    },
    {
        "content": "<p>Hmm, thanks for the answer, but I feel a bit queasy about disabling an option that has \"hygiene\" in its name. Does anyone know whether there is a cleaner way of doing this? I would have thought that my use case is a pretty common one. Or maybe the problem is with me using a lean structure here? What I am trying to achieve, is to describe a space made up of points and equipped with two relations that satisfy certain axioms. Both the points and the relations are primitive notions.</p>",
        "id": 360394047,
        "sender_full_name": "Kuba",
        "timestamp": 1684797854
    },
    {
        "content": "<p>Of course you can always manually expand the notation while defining the structure, and the worst that can happen is it may be hard to read/write.</p>",
        "id": 360505008,
        "sender_full_name": "Reid Barton",
        "timestamp": 1684842154
    },
    {
        "content": "<p>Sometimes it could also make sense to split the structure into two parts, and define the notation in between.</p>",
        "id": 360505057,
        "sender_full_name": "Reid Barton",
        "timestamp": 1684842175
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"587316\">Kuba</span> <a href=\"#narrow/stream/113489-new-members/topic/Custom.20notation.20inside.20structures/near/360394047\">said</a>:</p>\n<blockquote>\n<p>Hmm, thanks for the answer, but I feel a bit queasy about disabling an option that has \"hygiene\" in its name. Does anyone know whether there is a cleaner way of doing this? </p>\n</blockquote>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">macro</span> <span class=\"n\">a</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"n\">b</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"s2\">\" ≅ \"</span> <span class=\"n\">c</span><span class=\"o\">:</span><span class=\"n\">term</span><span class=\"o\">:</span><span class=\"n\">max</span> <span class=\"n\">d</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"o\">:</span> <span class=\"n\">term</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">mkIdent</span> <span class=\"bp\">`</span><span class=\"n\">congruence</span><span class=\"o\">)</span> <span class=\"bp\">$</span><span class=\"n\">a</span> <span class=\"bp\">$</span><span class=\"n\">b</span> <span class=\"bp\">$</span><span class=\"n\">c</span> <span class=\"bp\">$</span><span class=\"n\">d</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>(This produces pretty much identical code, but if it makes you feel better to not write the word hygiene, go for it)</p>",
        "id": 360539581,
        "sender_full_name": "Chris Bailey",
        "timestamp": 1684850126
    },
    {
        "content": "<p>\"Hygienic macros\" refers to making sure that identifiers in a macro expansion do not accidentally refer to local variables -- here, you <em>do</em> want <code>congruence</code> to refer to the local <code>congruence</code>. Think of it not that your macro is dirty, but that the hygiene system doesn't understand what you're trying to do.</p>\n<p>Since <code>congruence</code> is the only literal identifier in your macro expansion, <code>set_option hygiene false</code> will only has affect on the handling of that one identifier.</p>",
        "id": 360742915,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1684922491
    },
    {
        "content": "<p>I see, that makes sense. What I ended up doing was separating out the two relations as separate type classes and then having the axioms as a structure. This is what I ended up with (the code has grown a bit since I started):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">set_option</span> <span class=\"n\">autoImplicit</span> <span class=\"n\">false</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">Congruence</span> <span class=\"o\">(</span><span class=\"n\">point_t</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n<span class=\"o\">(</span><span class=\"n\">congruence</span> <span class=\"o\">:</span> <span class=\"n\">point_t</span> <span class=\"bp\">→</span> <span class=\"n\">point_t</span> <span class=\"bp\">→</span> <span class=\"n\">point_t</span> <span class=\"bp\">→</span> <span class=\"n\">point_t</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n<span class=\"kd\">notation</span><span class=\"o\">:</span><span class=\"mi\">37</span> <span class=\"n\">a</span><span class=\"o\">:</span><span class=\"mi\">38</span> <span class=\"n\">b</span><span class=\"o\">:</span><span class=\"mi\">38</span> <span class=\"s2\">\" ≅ \"</span> <span class=\"n\">c</span><span class=\"o\">:</span><span class=\"n\">max</span> <span class=\"n\">d</span><span class=\"o\">:</span><span class=\"mi\">38</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Congruence.congruence</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">Betweennes</span> <span class=\"o\">(</span><span class=\"n\">point_t</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n<span class=\"o\">(</span><span class=\"n\">betweennes</span> <span class=\"o\">:</span> <span class=\"n\">point_t</span> <span class=\"bp\">→</span> <span class=\"n\">point_t</span> <span class=\"bp\">→</span> <span class=\"n\">point_t</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n<span class=\"kd\">notation</span><span class=\"o\">:</span><span class=\"mi\">37</span> <span class=\"n\">a</span><span class=\"o\">:</span><span class=\"mi\">38</span> <span class=\"s2\">\" B \"</span> <span class=\"n\">b</span><span class=\"o\">:</span><span class=\"n\">max</span> <span class=\"n\">c</span><span class=\"o\">:</span><span class=\"mi\">38</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Betweennes.betweennes</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span>\n\n<span class=\"c1\">-- Five Segment Configuration</span>\n<span class=\"kd\">def</span> <span class=\"n\">FSC</span> <span class=\"o\">{</span><span class=\"n\">point_t</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Congruence</span> <span class=\"n\">point_t</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Betweennes</span> <span class=\"n\">point_t</span><span class=\"o\">]</span>\n<span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">point_t</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a'</span> <span class=\"n\">b'</span> <span class=\"n\">c'</span> <span class=\"n\">d'</span> <span class=\"o\">:</span> <span class=\"n\">point_t</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n    <span class=\"n\">b</span> <span class=\"n\">B</span> <span class=\"n\">a</span> <span class=\"n\">c</span> <span class=\"bp\">∧</span>\n    <span class=\"n\">b'</span> <span class=\"n\">B</span> <span class=\"n\">a'</span> <span class=\"n\">c'</span> <span class=\"bp\">∧</span>\n    <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">≅</span> <span class=\"n\">a'</span> <span class=\"n\">b'</span> <span class=\"bp\">∧</span>\n    <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"bp\">≅</span> <span class=\"n\">b'</span> <span class=\"n\">c'</span> <span class=\"bp\">∧</span>\n    <span class=\"n\">a</span> <span class=\"n\">d</span> <span class=\"bp\">≅</span> <span class=\"n\">a'</span> <span class=\"n\">d'</span> <span class=\"bp\">∧</span>\n    <span class=\"n\">b</span> <span class=\"n\">d</span> <span class=\"bp\">≅</span> <span class=\"n\">b'</span> <span class=\"n\">d'</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">TarskisAxioms</span> <span class=\"o\">(</span><span class=\"n\">point_t</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Congruence</span> <span class=\"n\">point_t</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Betweennes</span> <span class=\"n\">point_t</span><span class=\"o\">]</span> <span class=\"n\">where</span>\n<span class=\"o\">(</span><span class=\"n\">congruence_of_reversed</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">point_t</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">≅</span> <span class=\"n\">b</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">transitivity_of_congruence</span> <span class=\"o\">:</span>\n    <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"n\">r</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">point_t</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">≅</span> <span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"bp\">∧</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">≅</span> <span class=\"n\">r</span> <span class=\"n\">s</span> <span class=\"bp\">→</span> <span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"bp\">≅</span> <span class=\"n\">r</span> <span class=\"n\">s</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">identity_axiom_for_congruence</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">point_t</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">≅</span> <span class=\"n\">c</span> <span class=\"n\">c</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">segment_extension_axiom</span> <span class=\"o\">:</span>\n    <span class=\"bp\">∀</span> <span class=\"n\">o</span> <span class=\"n\">p</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">point_t</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">point_t</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">B</span> <span class=\"n\">o</span> <span class=\"n\">q</span> <span class=\"bp\">∧</span> <span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"bp\">≅</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">five_segment_axiom</span> <span class=\"o\">:</span>\n    <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"n\">a'</span> <span class=\"n\">b'</span> <span class=\"n\">c'</span> <span class=\"n\">d'</span> <span class=\"o\">:</span> <span class=\"n\">point_t</span><span class=\"o\">,</span>\n        <span class=\"n\">FSC</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"n\">a'</span> <span class=\"n\">b'</span> <span class=\"n\">c'</span> <span class=\"n\">d'</span> <span class=\"bp\">∧</span> <span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"bp\">≅</span> <span class=\"n\">c'</span> <span class=\"n\">d'</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">identity_axiom_for_betweennes</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">point_t</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"n\">B</span> <span class=\"n\">b</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>Does this approach make sense? I think this may be similar to how mathlib does it, but I only took a brief look. Also, how do you choose the precedence values? I think I managed to tune them by trial and error, but I am wondering if there is a recipe to follow.</p>",
        "id": 360899399,
        "sender_full_name": "Kuba",
        "timestamp": 1684963260
    }
]