[
    {
        "content": "<p>I'm having trouble getting add_pow (binomial theorem) to run properly. For example:</p>\n<p>import data.nat.basic<br>\nimport data.real.basic<br>\nimport data.nat.choose.sum -- Binomial Theorem<br>\nvariables (x y : ℝ)<br>\nvariables (z : ℕ)<br>\ndef x : ℝ := 2.0<br>\ndef y : ℝ := 3.0<br>\ndef z : ℕ := 4</p>\n<p>#eval add_pow x y z   </p>\n<p>produces the message \"cannot evaluate function: 0 arguments given but expected 3\".  When I tried:</p>\n<p>#eval add_pow 2.0 3.0 4 </p>\n<p>it returned an answer of <a href=\"https://github.com/leanprover-community/mathlib4/pull/0\">#0</a> with \"result type does not have an instance of type class 'has_repr', dumping internal representation\". Any suggestions?</p>",
        "id": 368511279,
        "sender_full_name": "Andrew Wheen",
        "timestamp": 1687431536
    },
    {
        "content": "<p><code>add_pow</code> is a theorem that says that two real numbers (in this case) are equal.<br>\nWhat are you expecting to happen when you \"run\" it?</p>",
        "id": 368512139,
        "sender_full_name": "Reid Barton",
        "timestamp": 1687431707
    },
    {
        "content": "<p>Maybe <code>#check add_pow 2.0 3.0 4</code> is more like what you want?</p>",
        "id": 368512305,
        "sender_full_name": "Reid Barton",
        "timestamp": 1687431735
    },
    {
        "content": "<p>(Please also take a look at <a href=\"https://github.com/leanprover-community/mathlib/wiki/Code-in-backticks\">#backticks</a>)</p>",
        "id": 368512377,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1687431748
    },
    {
        "content": "<p>I don't think <code>#eval</code> is going to do much for you, especially with real numbers</p>",
        "id": 368512855,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1687431842
    },
    {
        "content": "<p>My expectation was that  '''#eval 2 3 4''' would return a result of 625 (ie (2 + 3)^4). The definition of add_pow says that it is an implementation of the binomial theorem. I've tried making x and y into natural numbers but the result is the same.<br>\nThanks for the guidance on backticks.</p>",
        "id": 368516899,
        "sender_full_name": "Andrew Wheen",
        "timestamp": 1687432700
    },
    {
        "content": "<p><code>#eval (2 + 3)^4</code> should print 625.</p>",
        "id": 368518389,
        "sender_full_name": "Reid Barton",
        "timestamp": 1687433039
    },
    {
        "content": "<p>Yes, '''#eval (2 + 3)^4'''  does print 625, but for some reason '''#eval add_pow 2 3 4''' prints <a href=\"https://github.com/leanprover-community/mathlib4/pull/0\">#0</a>.</p>",
        "id": 368520043,
        "sender_full_name": "Andrew Wheen",
        "timestamp": 1687433379
    },
    {
        "content": "<p>Right, it doesn't really make sense to <code>#eval</code> a theorem.</p>",
        "id": 368520785,
        "sender_full_name": "Reid Barton",
        "timestamp": 1687433511
    },
    {
        "content": "<p>More precisely, <code>add_pow 2 3 4</code> is the <em>proof</em> of a theorem.</p>",
        "id": 368521267,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1687433584
    },
    {
        "content": "<p>(in this case it's a proof that 625=625)</p>",
        "id": 368521478,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1687433627
    },
    {
        "content": "<p>And all that lean stores about proofs at runtime is \"Yep, that was a proof indeed\" (which is printed as <code>#0</code>)</p>",
        "id": 368522739,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1687433877
    },
    {
        "content": "<p>OK. So why does <code>#eval nat.choose 5 3</code> return a result of 10 (as I expected)?</p>",
        "id": 368524578,
        "sender_full_name": "Andrew Wheen",
        "timestamp": 1687434244
    },
    {
        "content": "<p>Because <code>nat.choose</code> is a function, and <code>nat.choose 5 3</code> is a number.</p>",
        "id": 368524955,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1687434311
    },
    {
        "content": "<p>It’s a <code>def</code>.</p>",
        "id": 368525399,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1687434355
    },
    {
        "content": "<p><code>def</code>’s can store data that your computer can compute on.</p>",
        "id": 368525771,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1687434414
    },
    {
        "content": "<p>Is the binomial theorem available as a function?</p>",
        "id": 368525833,
        "sender_full_name": "Andrew Wheen",
        "timestamp": 1687434425
    },
    {
        "content": "<p>What does that question even mean? The binomial theorem is a theorem statement or a theorem proof, depending on what precisely you mean. It is not a number or a function.</p>",
        "id": 368525977,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1687434457
    },
    {
        "content": "<p>I guess strictly speaking <code>add_pow</code> is a function which eats three numbers and then returns a proof, so it is a function in that sense.</p>",
        "id": 368526294,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1687434513
    },
    {
        "content": "<p><code>theorem</code>s carry no such data. As Mauricio, they are evidence to the Lean kernel that a theorem statement is ok</p>",
        "id": 368526361,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1687434530
    },
    {
        "content": "<p>But <code>nat.choose</code> is a function which eats two numbers and returns a number.</p>",
        "id": 368526399,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1687434538
    },
    {
        "content": "<p>Can you rephrase your question without the phrase \"binomial theorem\"?</p>",
        "id": 368526747,
        "sender_full_name": "Reid Barton",
        "timestamp": 1687434602
    },
    {
        "content": "<p>OK. Perhaps I've asked the wrong question. In simple terms, I want to prove that <code>(a + b)^n  &gt;  a^n + b^n</code> if <code>n &gt; 1</code>, and the simplest way to do this seemed to be to use a binomial expansion and show that the total is greater than the first and last terms. Is there a better way of doing this in Lean3 ?</p>",
        "id": 368529157,
        "sender_full_name": "Andrew Wheen",
        "timestamp": 1687435053
    },
    {
        "content": "<p>Sure you can do that, that will work just fine (as long as a,b&gt;0). But what does that have to do with <code>#eval</code>?</p>",
        "id": 368529750,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1687435162
    },
    {
        "content": "<p>Try <code>#check</code> as suggested above.</p>",
        "id": 368532875,
        "sender_full_name": "Reid Barton",
        "timestamp": 1687435745
    },
    {
        "content": "<p>I used <code>#eval</code> because I hadn't spotted the distinction between <code>add_pow</code> returning a proof while <code>choose</code> returns a number . I therefore assumed that add_pow  wasn't working properly when I started getting strange error messages, and my first response in these circumstances is typically to try <code>#eval</code> and <code>#check</code>.  <br>\nMany thanks to everyone who replied. I think I can now see a way forward.</p>",
        "id": 368534134,
        "sender_full_name": "Andrew Wheen",
        "timestamp": 1687436013
    }
]