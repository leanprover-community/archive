[
    {
        "content": "<p>I'm trying to use the degree function of combinatorics.simple_graph but I'm getting the error<br>\n \"failed to synthesize type class instance for ⊢ fintype ↥(gr.neighbor_set 3)\"</p>\n<p>The code:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">combinatorics.simple_graph.basic</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">gr</span> <span class=\"o\">:</span> <span class=\"n\">simple_graph</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">5</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span><span class=\"n\">adj</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">n</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">n</span> <span class=\"bp\">≠</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">symm</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">ne.symm</span><span class=\"o\">,</span> <span class=\"n\">loopless</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">ha</span><span class=\"o\">,</span> <span class=\"n\">ha</span> <span class=\"n\">rfl</span><span class=\"o\">}</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">gr.degree</span> <span class=\"mi\">3</span>\n</code></pre></div>\n<p>It worked when I tried to do it explicitly like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#check</span> <span class=\"bp\">@</span><span class=\"n\">simple_graph.degree</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">5</span><span class=\"o\">)</span> <span class=\"n\">gr</span> <span class=\"mi\">3</span> <span class=\"o\">(</span><span class=\"n\">fintype.of_finite</span> <span class=\"bp\">↥</span><span class=\"o\">(</span><span class=\"n\">gr.neighbor_set</span> <span class=\"mi\">3</span><span class=\"o\">))</span>\n</code></pre></div>\n<p>What I should do to make it happen automaticly?</p>\n<p>In addition there is a guide/lectures on how to work with graphs or fintype including tactics?</p>",
        "id": 358958039,
        "sender_full_name": "Shimon Cohen",
        "timestamp": 1684322823
    },
    {
        "content": "<p>Adding <code>instance : decidable_rel gr.adj := by rw [gr]; apply_instance</code> works</p>",
        "id": 358959688,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684323363
    },
    {
        "content": "<p>Note that this uses <a href=\"https://leanprover-community.github.io/mathlib_docs/find/simple_graph.neighbor_set_fintype\">docs#simple_graph.neighbor_set_fintype</a> not <code>fintype.of_finite</code></p>",
        "id": 358959887,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684323421
    },
    {
        "content": "<p>Which has the bonus of letting you write <code>#eval gr.degree 3</code> and getting <code>4</code></p>",
        "id": 358959990,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684323454
    },
    {
        "content": "<p>Can you explain what it do?</p>\n<p>I tried to do it for another graph and it didn't worked</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">combinatorics.simple_graph.basic</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">gr</span> <span class=\"o\">:</span> <span class=\"n\">simple_graph</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">5</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span><span class=\"n\">adj</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">n</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">n</span> <span class=\"bp\">≠</span> <span class=\"n\">m</span><span class=\"o\">}</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">decidable_rel</span> <span class=\"n\">gr.adj</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">gr</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">apply_instance</span>\n<span class=\"k\">#eval</span> <span class=\"n\">gr.degree</span> <span class=\"mi\">4</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">gra</span> <span class=\"o\">:</span> <span class=\"n\">simple_graph</span> <span class=\"o\">(</span><span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span><span class=\"n\">adj</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">n</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">n</span> <span class=\"bp\">≠</span> <span class=\"n\">m</span> <span class=\"bp\">∧</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">m</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">100</span><span class=\"o\">,</span> <span class=\"n\">symm</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"o\">⟨</span><span class=\"n\">ne</span><span class=\"o\">,</span> <span class=\"n\">lt</span><span class=\"o\">⟩,</span> <span class=\"o\">⟨</span><span class=\"n\">ne.symm</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">linarith</span><span class=\"o\">)⟩</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">decidable_rel</span> <span class=\"n\">gra.adj</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">gra</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">apply_instance</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">gra.degree</span> <span class=\"mi\">3</span>\n</code></pre></div>",
        "id": 358978832,
        "sender_full_name": "Shimon Cohen",
        "timestamp": 1684328792
    },
    {
        "content": "<p>it doesn't work for that one because Lean doesn't know how to deduce that there are a finite number of nodes</p>",
        "id": 358981913,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684329589
    },
    {
        "content": "<p>The first one worked because the underlying carrier was finite</p>",
        "id": 358982096,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684329633
    },
    {
        "content": "<p>If you can tell Lean how the neighbor set is a <code>fintype</code> then it'll compute degrees for you:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">combinatorics.simple_graph.basic</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">gr</span> <span class=\"o\">:</span> <span class=\"n\">simple_graph</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">5</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span><span class=\"n\">adj</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">n</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">n</span> <span class=\"bp\">≠</span> <span class=\"n\">m</span><span class=\"o\">}</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">decidable_rel</span> <span class=\"n\">gr.adj</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">gr</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">apply_instance</span>\n<span class=\"k\">#eval</span> <span class=\"n\">gr.degree</span> <span class=\"mi\">4</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">gra</span> <span class=\"o\">:</span> <span class=\"n\">simple_graph</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span><span class=\"n\">adj</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">n</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">n</span> <span class=\"bp\">≠</span> <span class=\"n\">m</span> <span class=\"bp\">∧</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">m</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">100</span><span class=\"o\">,</span> <span class=\"n\">symm</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"o\">⟨</span><span class=\"n\">ne</span><span class=\"o\">,</span> <span class=\"n\">lt</span><span class=\"o\">⟩,</span> <span class=\"o\">⟨</span><span class=\"n\">ne.symm</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">linarith</span><span class=\"o\">)⟩</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">gra_neighbor_set</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">gra.neighbor_set</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"bp\">|</span> <span class=\"n\">n</span> <span class=\"bp\">≠</span> <span class=\"n\">m</span> <span class=\"bp\">∧</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">m</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">100</span><span class=\"o\">}</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">ext</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">refl</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">fintype</span> <span class=\"o\">(</span><span class=\"n\">gra.neighbor_set</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">fintype.of_finset</span> <span class=\"o\">((</span><span class=\"n\">finset.range</span> <span class=\"mi\">100</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">filter</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">n</span> <span class=\"bp\">≠</span> <span class=\"n\">m</span> <span class=\"bp\">∧</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">m</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">100</span><span class=\"o\">))</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">gra_neighbor_set</span><span class=\"o\">],</span>\n  <span class=\"n\">simp</span><span class=\"o\">,</span>\n  <span class=\"n\">intros</span> <span class=\"n\">h</span> <span class=\"n\">hnx</span><span class=\"o\">,</span>\n  <span class=\"n\">linarith</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">gra.degree</span> <span class=\"mi\">3</span>\n</code></pre></div>",
        "id": 359016479,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1684337951
    },
    {
        "content": "<p>You don't need a <code>decidable_eq</code> instance for this in general -- the <a href=\"https://leanprover-community.github.io/mathlib_docs/find/simple_graph.neighbor_set_fintype\">docs#simple_graph.neighbor_set_fintype</a> instance works by using the <code>decidable_eq</code> instance to filter the finset of all vertices, assuming your vertex type is finite. As Eric said, that can't work in this case since <code>ℕ</code> is not finite.</p>",
        "id": 359016922,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1684338082
    },
    {
        "content": "<p>Here's another strategy:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">decidable_rel</span> <span class=\"n\">gra.adj</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">gra</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">apply_instance</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">fintype</span> <span class=\"o\">(</span><span class=\"n\">gra.neighbor_set</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">set.fintype_subset</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"bp\">|</span> <span class=\"n\">m</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">100</span><span class=\"o\">}</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">gra</span><span class=\"o\">],</span>\n  <span class=\"n\">intros</span><span class=\"o\">,</span>\n  <span class=\"n\">linarith</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 359017918,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1684338359
    }
]