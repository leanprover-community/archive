[
    {
        "content": "<p>Dear All,</p>\n<p>I wanted to extract the lemma below about natural numbers from PR <a href=\"https://github.com/leanprover-community/mathlib/issues/7082\">#7082</a>.  The natural place would seem  to be <code>data/nat/lemmas</code>.  As you can see, the proof uses <code>dvd_refl</code> which is the statement <code>n | n</code>.  However, this lemma appears in larger generality and is not imported by <code>data/nat/lemmas</code>.  Should the <code>nat</code>-version of <code>rfl.dvd</code> be also added?  Is there a reason that it is not there?</p>\n<p>Thanks!</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- lemma to be extracted from PR</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">nat_dvd_iff_eq</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">m</span> <span class=\"bp\">∣</span> <span class=\"n\">a</span> <span class=\"bp\">↔</span> <span class=\"n\">n</span> <span class=\"bp\">∣</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">nat.dvd_antisymm</span> <span class=\"o\">((</span><span class=\"n\">h</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mpr</span> <span class=\"o\">(</span><span class=\"n\">dvd_refl</span> <span class=\"n\">_</span><span class=\"o\">))</span> <span class=\"o\">((</span><span class=\"n\">h</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mp</span> <span class=\"o\">(</span><span class=\"n\">dvd_refl</span> <span class=\"n\">_</span><span class=\"o\">)),</span> <span class=\"bp\">λ</span> <span class=\"n\">h</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"n\">h</span><span class=\"o\">⟩</span>\n\n<span class=\"c1\">-- auxiliary lemma?</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">rfl.dvd</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">∣</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">mul_one</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">⟩</span>\n</code></pre></div>",
        "id": 233792542,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1617960938
    },
    {
        "content": "<p>How could it not import <code>dvd_refl</code>? I would assume it is in the same file that defines <code>dvd</code>, so how are you getting <code>dvd</code> on nat in that case?</p>",
        "id": 233793155,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1617961320
    },
    {
        "content": "<p>anyway the lemma should be called <code>nat.dvd_refl</code></p>",
        "id": 233793258,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1617961352
    },
    {
        "content": "<p>We don't usually prove the nat version of a lemma if it is an application of the generic lemma</p>",
        "id": 233793389,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1617961419
    },
    {
        "content": "<p>(unless it happens to come up during bootstrapping)</p>",
        "id": 233793425,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1617961442
    },
    {
        "content": "<p>There's a root namespace <code>dvd_refl</code> in <code>algebra.divisibility</code> which applies to all monoids.</p>",
        "id": 233793463,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1617961446
    },
    {
        "content": "<p>I must have messed something up, but this is the beginning of the file that VSCode opens, when I tell it to open <code>data/nat/lemmas</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">prelude</span>\n<span class=\"kn\">import</span> <span class=\"n\">init.data.nat.basic</span> <span class=\"n\">init.data.nat.div</span> <span class=\"n\">init.meta</span> <span class=\"n\">init.algebra.functions</span>\n</code></pre></div>",
        "id": 233793488,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1617961457
    },
    {
        "content": "<p>prelude?</p>",
        "id": 233793504,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1617961468
    },
    {
        "content": "<p>what file are you working on?</p>",
        "id": 233793526,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1617961481
    },
    {
        "content": "<p>Hoewever, if I look at the path of the file, I see this:<br>\n<code>/home/damiano/.elan/toolchains/leanprover-community-lean-3.28.0/lib/lean/library/init/data/nat/lemmas.lean</code></p>",
        "id": 233793541,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1617961489
    },
    {
        "content": "<p>There aren't any prelude files in mathlib</p>",
        "id": 233793542,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1617961490
    },
    {
        "content": "<p>Oh this is <code>init.data.nat.lemmas</code></p>",
        "id": 233793564,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1617961501
    },
    {
        "content": "<p>That's core Lean!</p>",
        "id": 233793585,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1617961513
    },
    {
        "content": "<p>But I opened it by browsing to <code>src/data/nat/lemmas.lean</code>: something is weird...</p>",
        "id": 233793635,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1617961537
    },
    {
        "content": "<p>Core lean doesn't have any lemmas about nat unless they are absolutely necessary for setting up some part of the tactic framework or other core stuff</p>",
        "id": 233793643,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1617961542
    },
    {
        "content": "<p>Ok, then I would like to add this to the non-core file, but I do not know how to open it...</p>",
        "id": 233793737,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1617961575
    },
    {
        "content": "<p>The main initial mathlib file about nat is <code>data.nat.basic</code></p>",
        "id": 233793776,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1617961599
    },
    {
        "content": "<p>and you should already have <code>dvd_refl</code> available in that file</p>",
        "id": 233793795,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1617961614
    },
    {
        "content": "<p>I don't think there is a mathlib file called <code>data.nat.lemmas</code></p>",
        "id": 233793865,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1617961655
    },
    {
        "content": "<p>Ok, I think that what happened is that I clicked on \"go to def\" and it went to the <code>prelude</code>file, and, after that, I was navigating already in the wrong path.  I think that I found the correct file now!</p>\n<p>No wonder I could not use <code>library_search</code>!</p>",
        "id": 233794069,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1617961759
    },
    {
        "content": "<p>PS Damiano, if you edited a core Lean file then be super-careful to change it back to exactly how it was, or you'll break your entire set-up (in a way which leanproject will not be able to fix)</p>",
        "id": 233794072,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1617961759
    },
    {
        "content": "<p>I will try to be careful: I had no idea that this was a potential pitfall!</p>",
        "id": 233794130,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1617961796
    },
    {
        "content": "<p>In fact, I do not <em>intend</em> to change these files: this was a mistake!</p>",
        "id": 233794211,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1617961815
    },
    {
        "content": "<p>If later on you find yourself not being able to get rid of orange bars whatever you try, then come and ask for help in re-downloading Lean 3.28.0 on your system.</p>",
        "id": 233794345,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1617961893
    },
    {
        "content": "<p>Ok, thanks!  I have had difficulty working with those files, so I think that I did all my experimenting in a git.ignored file, so I am hoping that I will not have problems!</p>",
        "id": 233794612,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1617962022
    },
    {
        "content": "<p>The latest version of <code>elan</code> should make those files read-only on your system. So upgrade your elans (-;</p>",
        "id": 233795289,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1617962360
    },
    {
        "content": "<p>What do you need to do to upgrade <code>elan</code>?</p>",
        "id": 233795600,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1617962484
    },
    {
        "content": "<p><code>elan update</code></p>",
        "id": 233795767,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1617962546
    },
    {
        "content": "<p>Also, PR <a href=\"https://github.com/leanprover-community/mathlib/issues/7132\">#7132</a>!</p>",
        "id": 233795921,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1617962627
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"321459\">@Damiano Testa</span> Your PR is true more generally in an arbitrary <code>semiring_with_one_unit</code> <span aria-label=\"stuck out tongue wink\" class=\"emoji emoji-1f61c\" role=\"img\" title=\"stuck out tongue wink\">:stuck_out_tongue_wink:</span></p>",
        "id": 233796249,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1617962778
    },
    {
        "content": "<p>I actually wanted it to be a formulation of Yoneda's lemma for the category associated to the divisibility lattice on <code>nat</code>, but decided against the alternate proof...</p>",
        "id": 233796343,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1617962845
    },
    {
        "content": "<p>Isn't that just a monoid?</p>",
        "id": 233796366,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1617962854
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> I mean that <code>units M</code> has cardinality 1</p>",
        "id": 233796443,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1617962892
    },
    {
        "content": "<p>Maybe it's a distrib-monoid</p>",
        "id": 233796445,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1617962893
    },
    {
        "content": "<p>I believe there is already a version of this lemma stated for partial orders with le</p>",
        "id": 233796447,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1617962894
    },
    {
        "content": "<p>But I guess <code>semiring</code> can be weakened to <code>div_monoid</code>.</p>",
        "id": 233796513,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1617962920
    },
    {
        "content": "<p>I remember that there was a discussion about putting the order structure on <code>nat</code> given by divisibility, but I was scared of working with a \"non-standard\" ordering on <code>nat</code> and decided not following this route.</p>",
        "id": 233796580,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1617962967
    },
    {
        "content": "<p>We should make a type alias for that</p>",
        "id": 233796616,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1617963000
    },
    {
        "content": "<p>How many other such monoid are there? I guess <code>polynomial nat</code> is a useful one.</p>",
        "id": 233796703,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1617963027
    },
    {
        "content": "<p>Once you have this, the lemma is a statement about existence of inf/sups, essentially.</p>",
        "id": 233796704,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1617963028
    },
    {
        "content": "<p>And <code>polynomial (zmod 2)</code>, I guess</p>",
        "id": 233796729,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1617963051
    },
    {
        "content": "<p><code>mv_polynomial S nat</code></p>",
        "id": 233796734,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1617963057
    },
    {
        "content": "<p>you could prove that elements that divide the same elements are <code>associated</code> and then get more mileage out of this.</p>",
        "id": 233796770,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1617963085
    },
    {
        "content": "<p>The <code>nat_dvd_iff_eq</code> lemma is just true in all partial orders</p>",
        "id": 233796772,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1617963086
    },
    {
        "content": "<p>you don't need inf/sup for that</p>",
        "id": 233796789,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1617963096
    },
    {
        "content": "<p>Right so we need <code>associated_iff_eq</code> for a couple of rings (-;</p>",
        "id": 233796894,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1617963133
    },
    {
        "content": "<p>Any ring can be usefully turned into a partial order and a semilattice using the divisibility order</p>",
        "id": 233796959,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1617963164
    },
    {
        "content": "<p>Marios type alias could possibly be a quotient by <code>associated</code>, and then we can use it for arbitrary monoids.</p>",
        "id": 233796972,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1617963176
    },
    {
        "content": "<p>Ok, this is motivating to pull up my sleeves and actually prove this with for partial orders and using the dvd-lattice.  I would like to have a hint at a start for this, though...</p>",
        "id": 233796973,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1617963178
    },
    {
        "content": "<p>partial orders can have loops?</p>",
        "id": 233797017,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1617963205
    },
    {
        "content": "<p>Oh, good point about the preorder issue</p>",
        "id": 233797021,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1617963207
    },
    {
        "content": "<p>I am worried about non-cancellative stuff.</p>",
        "id": 233797048,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1617963220
    },
    {
        "content": "<p>I would do it in two stages: make a preorder from the divisibility, and then make an arbitrary preorder into a partial order by quotienting</p>",
        "id": 233797066,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1617963241
    },
    {
        "content": "<p>maybe <code>no_zero_divisors</code> is good enough?</p>",
        "id": 233797112,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1617963247
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113489-new-members/topic/nat.2Erfl.2Edvd/near/233797066\">said</a>:</p>\n<blockquote>\n<p>I would do it in two stages: make a preorder from the divisibility, and then make an arbitrary preorder into a partial order by quotienting</p>\n</blockquote>\n<p>But we still need glue with <code>associated</code>, right?</p>",
        "id": 233797149,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1617963267
    },
    {
        "content": "<p>I guess you can prove that <code>associated</code> is either equivalent to or defeq with the equivalence on a preorder</p>",
        "id": 233797191,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1617963303
    },
    {
        "content": "<p>ah, I was going via the route of assuming enough to avoid pathologies, but I also like the approach of getting pathological stuff and \"making it work\" by quotienting!  Assuming that I understood Mario's approach.</p>",
        "id": 233797203,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1617963306
    },
    {
        "content": "<p>You can also prove that the preorder quotient is an isomorphism if the preorder is already a partial order</p>",
        "id": 233797274,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1617963348
    },
    {
        "content": "<p>which would be the case for nat, for instance</p>",
        "id": 233797287,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1617963360
    },
    {
        "content": "<p>Can I suggest moving this conversation to a new topic: \"semilattice, dvd, associated\"?  I still think that the lemma on naturals could work fine as is...</p>",
        "id": 233797346,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1617963374
    },
    {
        "content": "<p>Is it possible to move all that is here starting from Johan's comment directed a me to the new topic?  Or should I simply start a new topic?</p>",
        "id": 233797473,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1617963461
    },
    {
        "content": "<p>anyone can change topics retroactively</p>",
        "id": 233797558,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1617963500
    },
    {
        "content": "<p>Ok, topic name changed!  Now, let's continue, since I found it quite interesting!</p>",
        "id": 233797622,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1617963560
    },
    {
        "content": "<p>Yeah, if <code> (∀ a : M, m ∣ a ↔ n ∣ a) ↔ associated m n</code> is missing then that's one thing, and then for nat you need associated iff equal.</p>",
        "id": 233797886,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1617963713
    },
    {
        "content": "<p>So, I would define a relation on a monoid to simply be that <code>r a b</code> if <code>b</code> is divisible by <code>a</code>.  To \"remove\" loops, I would need to quotient by them.</p>\n<p>How do you form quotients by relations?</p>",
        "id": 233797949,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1617963730
    },
    {
        "content": "<p>Once that is done, I would prove that the relation <del>is</del> induces a partial order on the quotient.</p>",
        "id": 233798066,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1617963803
    },
    {
        "content": "<p>I think you need commutativity to make this sensible. To form a quotient by a relation check out the section on quotients in <a href=\"https://leanprover.github.io/theorem_proving_in_lean/\">#tpil</a> or my notes on quotients from my course <a href=\"https://xenaproject.wordpress.com/2021/03/04/formalising-mathematics-workshop-7-quotients/\">https://xenaproject.wordpress.com/2021/03/04/formalising-mathematics-workshop-7-quotients/</a></p>",
        "id": 233799693,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1617964687
    },
    {
        "content": "<p>Also, I'm suggesting here that the construction of a partial order quotienting a preorder is independent of anything about divisibility</p>",
        "id": 233800528,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1617965191
    },
    {
        "content": "<p>although it has some relations to <code>associated</code> and other things when you instantiate the construction in this setting</p>",
        "id": 233800585,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1617965225
    },
    {
        "content": "<p>Yes, I was going to take a \"general\" approach, where each step \"resets the bar\".</p>",
        "id": 233800635,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1617965270
    },
    {
        "content": "<p>How bad an idea is this statement</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- `dvd` is injective in the left argument -/</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">dvd_left_injective</span> <span class=\"o\">:</span> <span class=\"n\">function.injective</span> <span class=\"o\">((</span><span class=\"bp\">∣</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"k\">let</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"n\">congr_fun</span> <span class=\"n\">h</span> <span class=\"k\">in</span> <span class=\"n\">dvd_antisymm</span> <span class=\"o\">((</span><span class=\"n\">h</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mpr</span> <span class=\"o\">(</span><span class=\"n\">dvd_refl</span> <span class=\"n\">_</span><span class=\"o\">))</span> <span class=\"o\">((</span><span class=\"n\">h</span> <span class=\"n\">m</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mp</span> <span class=\"o\">(</span><span class=\"n\">dvd_refl</span> <span class=\"n\">_</span><span class=\"o\">))</span>\n</code></pre></div>",
        "id": 233851329,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1617985284
    },
    {
        "content": "<p>From which the original statement recovers as</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">dvd_right_iff_eq</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">m</span> <span class=\"bp\">∣</span> <span class=\"n\">a</span> <span class=\"bp\">↔</span> <span class=\"n\">n</span> <span class=\"bp\">∣</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"n\">iff.trans</span> <span class=\"o\">(</span><span class=\"n\">forall_congr</span> <span class=\"bp\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">eq_iff_iff.symm</span><span class=\"o\">)</span> <span class=\"bp\">$</span>\n  <span class=\"n\">function.funext_iff.symm.trans</span> <span class=\"n\">dvd_left_injective.eq_iff</span>\n</code></pre></div>",
        "id": 233853289,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1617986008
    },
    {
        "content": "<p>That's a great way of thinking about it!</p>",
        "id": 233853481,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1617986080
    },
    {
        "content": "<p>That is a very funny way of expressing the result!  I had never thought about it like this!</p>",
        "id": 233871463,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1617993796
    },
    {
        "content": "<p>Eric, if you want, I can add it to PR <a href=\"https://github.com/leanprover-community/mathlib/issues/7132\">#7132</a>, unless you want to PR it on its own.</p>",
        "id": 233871606,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1617993858
    },
    {
        "content": "<p>I think your original version is better, but perhaps proving mine in terms of yours is fine to have too, if only to leave in as a puzzle for the reader to teach them more about equality in lean</p>",
        "id": 233880495,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1617997665
    },
    {
        "content": "<p>I have been playing with the circle of ideas that was discussed here: I now have a (very easy) proof that divisibility in a <code>monoid</code> is a <code>preorder</code>.</p>\n<p>I also proved that two elements that divide each other in a <code>cancel_comm_monoid</code> are \"associated\": they differ by a unit.</p>\n<p>The next step would be to form the quotient of a <code>preorder</code> to obtain a <code>partial_order</code>.</p>\n<p>Finally, in the case of the <code>partial_order</code> obtained as above from a <code>cancel_comm_monoid</code>, I will want to establish that the \"fibres\" of this quotient are torsors under the group of units (this is essentially already available).</p>\n<p>My next main obstacle is that I do not know how to form quotients.  I found <code>quotient</code>, but there is very little guidance on how to use it.  Also, it is in the folder of files that I have been warned to not touch, so I feel a little worried about even browsing it!</p>\n<p>Should I simply pull up my sleeves and learn how to use <code>quotient</code>, or is there some easier file that I can look at?</p>",
        "id": 234060657,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1618160660
    },
    {
        "content": "<p>You can read Kevin's post on <a href=\"https://xenaproject.wordpress.com/2021/03/04/formalising-mathematics-workshop-7-quotients/\">https://xenaproject.wordpress.com/2021/03/04/formalising-mathematics-workshop-7-quotients/</a>, and look at the exercises in <a href=\"https://github.com/ImperialCollegeLondon/formalising-mathematics/tree/master/src/week_7\">https://github.com/ImperialCollegeLondon/formalising-mathematics/tree/master/src/week_7</a></p>",
        "id": 234061285,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1618161312
    },
    {
        "content": "<p>The basic aspect of it, if you have a <code>setoid X</code>, which you get from some equivalence on X, which is just a relation <code>r : X -&gt; X -&gt; Prop</code> such that <code>reflexive r</code>, <code>symmetric r</code>, <code>transitive r</code>, you can form a <code>quotient</code>.</p>",
        "id": 234061372,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1618161381
    },
    {
        "content": "<p>Yakov, thanks for the pointer: I will take a look!</p>",
        "id": 234061634,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1618161668
    }
]