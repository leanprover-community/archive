[
    {
        "content": "<p>I am trying to define a matrix with a function but I have only been able to get it to work using an auxiliary function.  How can I get this to work without needing the auxiliary function?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Matrix.Notation</span>\n\n<span class=\"c1\">-- Errors</span>\n<span class=\"kd\">def</span> <span class=\"n\">test1</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Matrix</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">ℕ</span><span class=\"bp\">+</span> <span class=\"o\">:=</span>\n  <span class=\"n\">Matrix.of</span> <span class=\"k\">fun</span> <span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">if</span> <span class=\"n\">i</span> <span class=\"bp\">==</span> <span class=\"n\">j</span> <span class=\"k\">then</span> <span class=\"mi\">1</span> <span class=\"k\">else</span> <span class=\"o\">(</span><span class=\"k\">if</span> <span class=\"n\">i</span> <span class=\"bp\">==</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"bp\">∨</span> <span class=\"n\">j</span> <span class=\"bp\">==</span> <span class=\"n\">n</span> <span class=\"bp\">-</span><span class=\"mi\">1</span> <span class=\"k\">then</span> <span class=\"mi\">2</span> <span class=\"k\">else</span> <span class=\"mi\">3</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">testAux</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"bp\">+</span> <span class=\"o\">:=</span>\n  <span class=\"k\">fun</span> <span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">if</span> <span class=\"n\">i</span> <span class=\"bp\">==</span> <span class=\"n\">j</span> <span class=\"k\">then</span> <span class=\"mi\">1</span> <span class=\"k\">else</span> <span class=\"o\">(</span><span class=\"k\">if</span> <span class=\"n\">i</span> <span class=\"bp\">==</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"bp\">∨</span> <span class=\"n\">j</span> <span class=\"bp\">==</span> <span class=\"n\">n</span> <span class=\"bp\">-</span><span class=\"mi\">1</span> <span class=\"k\">then</span> <span class=\"mi\">2</span> <span class=\"k\">else</span> <span class=\"mi\">3</span><span class=\"o\">)</span>\n\n<span class=\"c1\">-- No Errors</span>\n<span class=\"kd\">def</span> <span class=\"n\">test2</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Matrix</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">ℕ</span><span class=\"bp\">+</span> <span class=\"o\">:=</span>\n  <span class=\"n\">Matrix.of</span> <span class=\"n\">testAux</span>\n</code></pre></div>",
        "id": 401044954,
        "sender_full_name": "Newell Jensen",
        "timestamp": 1699489163
    },
    {
        "content": "<p>Providing explicit types on <code>i</code> and <code>j</code> helps:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">test1</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Matrix</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">ℕ</span><span class=\"bp\">+</span> <span class=\"o\">:=</span>\n  <span class=\"n\">Matrix.of</span> <span class=\"k\">fun</span> <span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">if</span> <span class=\"n\">i</span> <span class=\"bp\">==</span> <span class=\"n\">j</span> <span class=\"k\">then</span> <span class=\"mi\">1</span> <span class=\"k\">else</span> <span class=\"o\">(</span><span class=\"k\">if</span> <span class=\"n\">i</span> <span class=\"bp\">==</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"bp\">∨</span> <span class=\"n\">j</span> <span class=\"bp\">==</span> <span class=\"n\">n</span> <span class=\"bp\">-</span><span class=\"mi\">1</span> <span class=\"k\">then</span> <span class=\"mi\">2</span> <span class=\"k\">else</span> <span class=\"mi\">3</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 401045626,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1699489547
    },
    {
        "content": "<p>I think Lean gets confused because <code>of</code> is an <code>Equiv</code> not a function, so doesn't work thinks out automatically</p>",
        "id": 401045708,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1699489582
    },
    {
        "content": "<p>Ah okay, yeah, thanks.</p>",
        "id": 401045747,
        "sender_full_name": "Newell Jensen",
        "timestamp": 1699489609
    },
    {
        "content": "<p>Adding a <code>by exact</code> works too:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">test1</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Matrix</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">ℕ</span><span class=\"bp\">+</span> <span class=\"o\">:=</span>\n  <span class=\"n\">Matrix.of</span> <span class=\"bp\">&lt;|</span> <span class=\"kd\">by</span> <span class=\"n\">exact</span> <span class=\"k\">fun</span> <span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">if</span> <span class=\"n\">i</span> <span class=\"bp\">==</span> <span class=\"n\">j</span> <span class=\"k\">then</span> <span class=\"mi\">1</span> <span class=\"k\">else</span> <span class=\"o\">(</span><span class=\"k\">if</span> <span class=\"n\">i</span> <span class=\"bp\">==</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"bp\">∨</span> <span class=\"n\">j</span> <span class=\"bp\">==</span> <span class=\"n\">n</span> <span class=\"bp\">-</span><span class=\"mi\">1</span> <span class=\"k\">then</span> <span class=\"mi\">2</span> <span class=\"k\">else</span> <span class=\"mi\">3</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 401045756,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1699489618
    }
]