[
    {
        "content": "<p>How can I prove this in Lean (using open classical)<br>\n(h: (¬ A ∨ ¬ B)): ¬ (A ∧ B)</p>",
        "id": 380998407,
        "sender_full_name": "Disha Sharma",
        "timestamp": 1690975053
    },
    {
        "content": "<p>How can I prove this in Lean (using open classical)<br>\n(h: (¬ A ∨ ¬ B)): ¬ (A ∧ B)</p>",
        "id": 380998551,
        "sender_full_name": "Disha Sharma",
        "timestamp": 1690975078
    },
    {
        "content": "<p>How can I prove this in Lean (using open classical)<br>\n(h: (¬ A ∨ ¬ B)): ¬ (A ∧ B)</p>",
        "id": 380998703,
        "sender_full_name": "Disha Sharma",
        "timestamp": 1690975102
    },
    {
        "content": "<p><a href=\"#narrow/stream/113489-new-members/topic/Disha.20Sharma/near/380998407\">A message</a> was moved here from <a class=\"stream-topic\" data-stream-id=\"113489\" href=\"/#narrow/stream/113489-new-members/topic/Why.20is.20.5Bfield.20F.5D.20not.20an.20implicit.20argument.3F\">#new members &gt; Why is [field F] not an implicit argument?</a> by <span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span>.</p>",
        "id": 380999696,
        "sender_full_name": "Notification Bot",
        "timestamp": 1690975316
    },
    {
        "content": "<p><a href=\"#narrow/stream/113489-new-members/topic/Disha.20Sharma/near/380998551\">A message</a> was moved here from <a class=\"stream-topic\" data-stream-id=\"270676\" href=\"/#narrow/stream/270676-lean4/topic/Recursive.20proposition.20definition\">#lean4 &gt; Recursive proposition definition</a> by <span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span>.</p>",
        "id": 380999902,
        "sender_full_name": "Notification Bot",
        "timestamp": 1690975358
    },
    {
        "content": "<p><a href=\"#narrow/stream/113489-new-members/topic/Disha.20Sharma/near/380998703\">A message</a> was moved here from <a class=\"stream-topic\" data-stream-id=\"113488\" href=\"/#narrow/stream/113488-general/topic/Getting.20Started.20With.20Lean.20Theorem.20Provers\">#general &gt; Getting Started With Lean Theorem Provers</a> by <span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span>.</p>",
        "id": 381000030,
        "sender_full_name": "Notification Bot",
        "timestamp": 1690975392
    },
    {
        "content": "<p>Please don't post a message multiple times in different topics, especially if your message is not related to those topics!</p>",
        "id": 381000253,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1690975430
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"637467\">@Disha Sharma</span>, what have you tried so far? Can you post a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>?</p>",
        "id": 381009586,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1690977308
    },
    {
        "content": "<p>I am able to prove the inverse but cannot prove the original statement.<br>\nexample (h : ¬ (A ∧ B)) : (¬ A ∨ ¬ B) :=<br>\n  or.elim (em A)<br>\n    (assume a : A,<br>\n    have ¬ B, from <br>\n      (assume b : B,<br>\n      have and : A ∧ B, from and.intro a b,<br>\n      show false, from h and),<br>\n    show (¬ A ∨ ¬ B), from or.inr this)</p>",
        "id": 381013493,
        "sender_full_name": "Disha Sharma",
        "timestamp": 1690978077
    },
    {
        "content": "<p>Can you edit your message to use <a href=\"https://github.com/leanprover-community/mathlib/wiki/Code-in-backticks\">#backticks</a>?</p>",
        "id": 381018258,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1690979056
    },
    {
        "content": "<p>Also, you should consider moving to Lean 4. Lean 3 is end-of-life now!</p>",
        "id": 381019679,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1690979341
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">∧</span> <span class=\"n\">B</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">¬</span> <span class=\"n\">A</span> <span class=\"bp\">∨</span> <span class=\"bp\">¬</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">exact</span><span class=\"bp\">?</span>   <span class=\"c1\">-- Try this: exact Iff.mp not_and_or h</span>\n</code></pre></div>",
        "id": 381020270,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1690979453
    },
    {
        "content": "<p>(<code>exact?</code> will also find the other direction)</p>",
        "id": 381020587,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1690979517
    }
]