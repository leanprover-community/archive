[
    {
        "content": "<p>I am looking for a theorem: </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">foldr_snoc</span>\n  <span class=\"o\">(</span><span class=\"n\">f</span><span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">b</span><span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">xs</span><span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"n\">List.foldr</span> <span class=\"n\">f</span> <span class=\"n\">b</span> <span class=\"o\">(</span><span class=\"n\">xs.push</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">List.foldr</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"n\">xs</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>Did I miss it or is it not yet in mathlib4/std4?</p>",
        "id": 372472793,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1688536864
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"130575\">@Siddharth Bhat</span> wrote a proof of that Lemma, so I am just checking if I can use an official version or rather should upstream it to Mathlib (or ask <span class=\"user-mention\" data-user-id=\"130575\">@Siddharth Bhat</span> to upstream it).</p>",
        "id": 372472971,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1688536926
    },
    {
        "content": "<p>does <code>List</code> have a <code>push</code> function?</p>",
        "id": 372476415,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1688538139
    },
    {
        "content": "<p>it's normally spelled <code>xs ++ [x]</code></p>",
        "id": 372476497,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1688538169
    },
    {
        "content": "<p>and I would guess that this <code>simp</code>s the way you want</p>",
        "id": 372476553,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1688538192
    },
    {
        "content": "<p>Right. I missed that we introduced <code>List.push</code> as an alias for <code>List.concat</code> in our code. The simplification works. Do you think it makes sense to have some of the following theorems in Mathlib?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">List.foldr_concat</span>\n  <span class=\"o\">(</span><span class=\"n\">f</span><span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span><span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">xs</span><span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">List.foldr</span> <span class=\"n\">f</span> <span class=\"n\">b</span> <span class=\"o\">(</span><span class=\"n\">xs.concat</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">List.foldr</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"n\">xs</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">List.concat_eq_append</span><span class=\"o\">,</span> <span class=\"n\">List.foldr_append</span><span class=\"o\">,</span> <span class=\"n\">List.foldr</span><span class=\"o\">]</span>\n<span class=\"o\">}</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">List.foldr_concat'</span>\n  <span class=\"o\">(</span><span class=\"n\">f</span><span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span><span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">xs</span><span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">List.foldr</span> <span class=\"n\">f</span> <span class=\"n\">b</span> <span class=\"o\">(</span><span class=\"n\">xs</span> <span class=\"bp\">++</span> <span class=\"o\">[</span><span class=\"n\">x</span><span class=\"o\">])</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">List.foldr</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"n\">xs</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">List.foldr_append</span><span class=\"o\">,</span> <span class=\"n\">List.foldr</span><span class=\"o\">]</span>\n<span class=\"o\">}</span>\n</code></pre></div>",
        "id": 372484275,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1688540579
    },
    {
        "content": "<p>I addded the foldx_concat lemmas: <a href=\"https://github.com/leanprover-community/mathlib4/pull/5733\">https://github.com/leanprover-community/mathlib4/pull/5733</a>. They have meanwhile already been merged.</p>",
        "id": 373142886,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1688722829
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"122318\">Tobias Grosser</span> has marked this topic as resolved.</p>",
        "id": 373142908,
        "sender_full_name": "Notification Bot",
        "timestamp": 1688722833
    }
]