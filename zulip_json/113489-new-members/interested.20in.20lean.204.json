[
    {
        "content": "<p>Hello, i am a cs student interested in functional languages. Where can i find the most up to date lean 4 tutorial, list of packages and package manager; and information about the compiler. I am particularly interested about novel optimizations \"counting inmutable beans\" and the like that may make lean 4 faster than idris2</p>",
        "id": 348059306,
        "sender_full_name": "Diego Antonio Rosario Palomino",
        "timestamp": 1681056767
    },
    {
        "content": "<p>For theorem proving: <a href=\"https://leanprover.github.io/theorem_proving_in_lean4/\">https://leanprover.github.io/theorem_proving_in_lean4/</a><br>\nFor programming (almost finished): <a href=\"https://leanprover.github.io/functional_programming_in_lean/\">https://leanprover.github.io/functional_programming_in_lean/</a><br>\nAbout the project itself: <a href=\"https://leanprover.github.io/lean4/doc/whatIsLean.html\">https://leanprover.github.io/lean4/doc/whatIsLean.html</a> (although the ifnromation here is a bit sparse)</p>\n<p>Our package manager is: <a href=\"http://github.com/leanprover/lake\">github.com/leanprover/lake</a> you can find documentation about both the standard as well as the mathematics library here: <a href=\"https://leanprover-community.github.io/mathlib4_docs/\">https://leanprover-community.github.io/mathlib4_docs/</a> </p>\n<p>If you want to know things about the compiler itself you'll have to resort to reading the papers, the compiler source code itself and asking people the specific questions you are interested in here. We do not have full comprehensive documentation on many parts of the system yet.</p>",
        "id": 348059758,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1681056926
    },
    {
        "content": "<p>Thanks<br>\n-Does lake have a package database ?<br>\n-How would you expect lean 4 to perform against idris2? ( canonically compiles to chez scheme with dynamic type checks off ). Other than functional but in place, what other optimizations are you implementing?</p>",
        "id": 348072905,
        "sender_full_name": "Diego Antonio Rosario Palomino",
        "timestamp": 1681062852
    },
    {
        "content": "<ul>\n<li>No you just refer to github repos right now</li>\n<li>I would generally speaking expect Lean to at least hold up again Idris2 (compiled Lean that is, the interpreter is not particularly hard optimized). We compile to C (or also experimentally directly LLVM) and besides FBIP we mosty do \"regular\" compiler optimizations like CSE, simplification of case statements like iin Haskell Core etc. To my knowledge we do not have optimizations for the compiler itself that are considered particularly novel (apart from FBIP). However the runtime has some nice optimizations such as real contigious in memory Arrays that you can mutate in place while the ref count is one for example</li>\n</ul>",
        "id": 348080052,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1681066733
    },
    {
        "content": "<p>What would be the benefits of compiling to llvm? Functional constructs can be mapped to c with defunctionalization, de-recursion, etc<br>\nIt would improve compile times but would that be important considering the cost of type checking and optimization?</p>",
        "id": 348081601,
        "sender_full_name": "Diego Antonio Rosario Palomino",
        "timestamp": 1681067603
    },
    {
        "content": "<p>To me it's been that we will in the future be able to generate LLVM code with very specific annotations based on knowledge that we have about the environment which would get lost if we were to translate first to C and then to LLVM with clang. But <span class=\"user-mention\" data-user-id=\"130575\">@Siddharth Bhat</span> can most likely answer the question betterr.</p>",
        "id": 348081858,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1681067745
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"608288\">@Diego Antonio Rosario Palomino</span> Defunctionalization is usually a whole program optimisation. This might be prohibitive for something like Lean. I'd say in general, some information is only expressible in the C level via compiler specific annotations (eg. this call is a tail call), or inexpressible (eg. <a href=\"https://llvm.org/docs/ExceptionHandling.html\">unwinding the stack</a>, <a href=\"https://llvm.org/docs/Coroutines.html\">coroutines</a>). Whether we take advantage of these exotics is a different question <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span> .</p>",
        "id": 348091888,
        "sender_full_name": "Siddharth Bhat",
        "timestamp": 1681074114
    },
    {
        "content": "<p>I am personally interested in LLVM because my background is high performance computing. Lean should allow us to control code generation to a degree where we are able to build the LLVM IR we expect to see programatically. This is feasible for numeric codes, and my hope is that it allows us to write numerical programs in Lean that hit the performance roofline.</p>",
        "id": 348091942,
        "sender_full_name": "Siddharth Bhat",
        "timestamp": 1681074130
    },
    {
        "content": "<p>Arbitrary recursion can be optimized away without the target language having tail call support. With cps ( or anf, i think ) optimizations<br>\nThose and defunctionalization are usually global operations, but there are parallel or local versions and alternatives</p>",
        "id": 348107729,
        "sender_full_name": "Diego Antonio Rosario Palomino",
        "timestamp": 1681084912
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"130575\">@Siddharth Bhat</span> have you considered targeting this functional compiler <a href=\"https://github.com/grin-compiler\">https://github.com/grin-compiler</a>?<br>\nFunctional languages can target it ( now via STG, instead of GRIN ir directly ) to achieve the tecniques i mentioned</p>",
        "id": 348107933,
        "sender_full_name": "Diego Antonio Rosario Palomino",
        "timestamp": 1681085058
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"608288\">@Diego Antonio Rosario Palomino</span> Yes, I have conversed with Csaba about GRIN. I find the ideas very interesting, and the project very ambitious. Last I checked in with GRIN, the key points-to analysis is still a whole program analysis. Also, it takes design decisions which adapt it very well to Haskell. It is unclear to me how much reuse we would get by trying to compile Lean's IR to it. </p>\n<hr>\n<p>Would exploring whether we can easily adapt our backend to reuse GRIN be something you'd be interested to explore? I'd love to understand this space better, and would be interested to oversee this.</p>",
        "id": 348110060,
        "sender_full_name": "Siddharth Bhat",
        "timestamp": 1681086685
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"130575\">@Siddharth Bhat</span> <br>\n-Key to points analysis being global is one of the reasons current GRIN IR is being supplemented by STG ( and possibly replaced by a new IR in the future )</p>\n<p>-Andorp has already tried to use a language other than haskell: <a href=\"https://github.com/andorp/IdrisExtSTGCodegen\">https://github.com/andorp/IdrisExtSTGCodegen</a><br>\nit seems to work well.</p>\n<p>-I am very  interested in state of the art language ( dependent and functional as far as i know ) optimization. Eg  i toyed with an ml backend for idris2 ( for use with mlton )<br>\nSo i would be interested to take over Andorp's work , implement  a lean4 front end for Csbasas compiler, etc</p>",
        "id": 348123715,
        "sender_full_name": "Diego Antonio Rosario Palomino",
        "timestamp": 1681096135
    },
    {
        "content": "<p>And you seem to have your own optimization ideas, i would love to hear how they compare against other projects</p>",
        "id": 348124183,
        "sender_full_name": "Diego Antonio Rosario Palomino",
        "timestamp": 1681096519
    }
]