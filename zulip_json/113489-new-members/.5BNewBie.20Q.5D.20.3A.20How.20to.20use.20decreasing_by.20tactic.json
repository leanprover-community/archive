[
    {
        "content": "<p>I am trying to write a function which converts a decimal number to hexadecimal number.<br>\nThis is the function I wrote</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"kd\">def</span> <span class=\"n\">decToHex</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">String</span> <span class=\"o\">:=</span>\n    <span class=\"k\">match</span> <span class=\"n\">n</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">|</span> <span class=\"mi\">1</span> <span class=\"bp\">|</span> <span class=\"mi\">2</span> <span class=\"bp\">|</span> <span class=\"mi\">3</span> <span class=\"bp\">|</span> <span class=\"mi\">4</span> <span class=\"bp\">|</span> <span class=\"mi\">5</span> <span class=\"bp\">|</span> <span class=\"mi\">6</span> <span class=\"bp\">|</span> <span class=\"mi\">7</span> <span class=\"bp\">|</span> <span class=\"mi\">8</span> <span class=\"bp\">|</span> <span class=\"mi\">9</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Nat.repr</span> <span class=\"n\">n</span>\n    <span class=\"bp\">|</span> <span class=\"mi\">10</span> <span class=\"bp\">|</span> <span class=\"mi\">11</span> <span class=\"bp\">|</span> <span class=\"mi\">12</span> <span class=\"bp\">|</span> <span class=\"mi\">13</span> <span class=\"bp\">|</span> <span class=\"mi\">14</span> <span class=\"bp\">|</span> <span class=\"mi\">15</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Char.repr</span> <span class=\"bp\">$</span> <span class=\"n\">Char.ofNat</span> <span class=\"o\">(</span><span class=\"mi\">107</span> <span class=\"bp\">-</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n    <span class=\"bp\">|</span> <span class=\"n\">_</span>       <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">Nat.repr</span> <span class=\"bp\">$</span> <span class=\"n\">n</span> <span class=\"bp\">/</span> <span class=\"mi\">16</span><span class=\"o\">)</span> <span class=\"bp\">++</span> <span class=\"n\">decToHex</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">%</span> <span class=\"mi\">16</span><span class=\"o\">)</span>\n    <span class=\"n\">decreasing_by</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">%</span> <span class=\"mi\">16</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>but I don't think I am doing it right, where am I going wrong?</p>",
        "id": 324938686,
        "sender_full_name": "Shubham Kumar ðŸ¦€ (he/him)",
        "timestamp": 1675178121
    },
    {
        "content": "<p>Are you aware of <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Nat.toDigits#doc\">docs4#Nat.toDigits</a> ? Your question is still fine as an exercise though.</p>",
        "id": 324943780,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1675179269
    },
    {
        "content": "<p>You're looking for <code>termination_by</code>, but you're not going to be able to really use it here because in a <code>match</code>, you don't get the information that you're not in any of the previous cases.</p>\n<p>(Also, a couple of logic errors: <code>Char.ofNat (107 - n)</code> looks wrong, and if you put 255 into <code>decToHex</code> rather than FF you'd get 15F)</p>",
        "id": 324944500,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1675179448
    },
    {
        "content": "<p>Here's how I might go about writing this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">decToHex</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">String</span> <span class=\"o\">:=</span>\n  <span class=\"k\">if</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"k\">then</span>\n    <span class=\"s2\">\"0\"</span>\n  <span class=\"k\">else</span>\n    <span class=\"n\">aux</span> <span class=\"n\">n</span>\n<span class=\"n\">where</span>\n  <span class=\"n\">aux</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">String</span> <span class=\"o\">:=</span>\n    <span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"k\">then</span>\n      <span class=\"s2\">\"\"</span>\n    <span class=\"k\">else</span>\n      <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">/</span> <span class=\"mi\">16</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n        <span class=\"n\">apply</span> <span class=\"n\">Nat.div_lt_self</span>\n        <span class=\"n\">exact</span> <span class=\"n\">Nat.zero_lt_of_ne_zero</span> <span class=\"n\">h</span>\n        <span class=\"n\">simp</span>\n      <span class=\"n\">aux</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">/</span> <span class=\"mi\">16</span><span class=\"o\">)</span> <span class=\"bp\">|&gt;.</span><span class=\"n\">push</span> <span class=\"o\">(</span><span class=\"n\">digit</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">%</span> <span class=\"mi\">16</span><span class=\"o\">))</span>\n  <span class=\"n\">digit</span> <span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Char</span> <span class=\"o\">:=</span>\n    <span class=\"k\">if</span> <span class=\"n\">d</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">10</span> <span class=\"k\">then</span>\n      <span class=\"n\">Char.ofNat</span> <span class=\"o\">(</span><span class=\"mi\">48</span> <span class=\"bp\">+</span> <span class=\"n\">d</span><span class=\"o\">)</span>\n    <span class=\"k\">else</span>\n      <span class=\"n\">Char.ofNat</span> <span class=\"o\">(</span><span class=\"mi\">97</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"bp\">-</span> <span class=\"mi\">10</span><span class=\"o\">))</span>\n<span class=\"n\">termination_by</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">n</span>\n</code></pre></div>\n<p>(Try deleting the <code>have</code> block to see why I wrote it)</p>",
        "id": 324944576,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1675179469
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113489-new-members/topic/.5BNewBie.20Q.5D.20.3A.20How.20to.20use.20decreasing_by.20tactic/near/324943780\">said</a>:</p>\n<blockquote>\n<p>Are you aware of <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Nat.toDigits#doc\">docs4#Nat.toDigits</a> ? Your question is still fine as an exercise though.</p>\n</blockquote>\n<p>Oh I didn't know that I'll use <code>Nat.toDigits</code></p>",
        "id": 324944799,
        "sender_full_name": "Shubham Kumar ðŸ¦€ (he/him)",
        "timestamp": 1675179514
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/113489-new-members/topic/.5BNewBie.20Q.5D.20.3A.20How.20to.20use.20decreasing_by.20tactic/near/324944500\">said</a>:</p>\n<blockquote>\n<p>You're looking for <code>termination_by</code>, but you're not going to be able to really use it here because in a <code>match</code>, you don't get the information that you're not in any of the previous cases.</p>\n<p>(Also, a couple of logic errors: <code>Char.ofNat (107 - n)</code> looks wrong, and if you put 255 into this rather than FF you'd get 15F)</p>\n</blockquote>\n<p>Oh! thanks for the help and reviewing my code, I'll try your code to experiment and also remove the <code>have</code> block to understand it</p>",
        "id": 324945202,
        "sender_full_name": "Shubham Kumar ðŸ¦€ (he/him)",
        "timestamp": 1675179620
    },
    {
        "content": "<p>If you're not interested in proving anything about your function, you can also just put the <code>partial</code> keyword before <code>def</code>, which turns off termination checking.</p>",
        "id": 324946326,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1675179887
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span> I want to write a toy json parser which is verified in lean4 that's why I am avoiding partial functions.<br>\nThis input was very helpful. I initially started to write lox interpreter and verify it but it was a huge task so I am trying to do something smaller and easier for me.</p>\n<p>Thanks for all the help till now &lt;3</p>",
        "id": 324946807,
        "sender_full_name": "Shubham Kumar ðŸ¦€ (he/him)",
        "timestamp": 1675180009
    },
    {
        "content": "<p>how about a lisp interpreter?</p>",
        "id": 324946952,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1675180045
    },
    {
        "content": "<p>even json is more complicated than lisp, syntactically</p>",
        "id": 324947029,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1675180065
    },
    {
        "content": "<p>yeah a scheme interpreter would be easier but I have already started with json. I found a nice blog where there is a tutorial to write json parser : <a href=\"https://abhinavsarkar.net/posts/json-parsing-from-scratch-in-haskell/\">https://abhinavsarkar.net/posts/json-parsing-from-scratch-in-haskell/</a></p>\n<p>And it's more \"practical\" because people do use json. Also I understand some parts would be undecidable hence not provable but I think would be a nice project nonetheless. </p>\n<p>Maybe the next one can be a verified scheme interpreter</p>",
        "id": 324948018,
        "sender_full_name": "Shubham Kumar ðŸ¦€ (he/him)",
        "timestamp": 1675180293
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"557243\">@Shubham Kumar ðŸ¦€ (he/him)</span> There are some complexities with that parser if you're going to try doing it in Lean. For example, <code>jString</code> has recursion with its <code>jString'</code> that you can't write in a way that'll pass the termination checker.</p>",
        "id": 324950162,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1675180773
    },
    {
        "content": "<p>I'm not really sure what you're supposed to do with parser combinators like these to prove termination.</p>",
        "id": 324950679,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1675180887
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span> <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> I understand I don't have the foresight to see the complexities. Are there any verified parsers for json in coq, agda or even lean which I can use as a reference? If not I'll abandon the project and work on verification of a scheme interpreter</p>",
        "id": 324952587,
        "sender_full_name": "Shubham Kumar ðŸ¦€ (he/him)",
        "timestamp": 1675181356
    },
    {
        "content": "<p>This affects parsing Scheme too -- I wrote some toy Lisp-like parser once in Lean 4 using parser combinators, and it too had to be <code>partial</code>.</p>",
        "id": 324953347,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1675181526
    },
    {
        "content": "<p>I think parsing JSON (or at least some subset of it) is a good project. If you did a Lisp-like language, your next issue would be choosing which specific Lisp-like language you'd be implementing. R5RS or R6RS Scheme seems like a much more difficult project to me than parsing JSON and figuring out how to check whether you've implemented the spec.</p>",
        "id": 324954067,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1675181720
    },
    {
        "content": "<p>I don't really know what I'm talking about here -- I've never done PL formalization -- but maybe it's not too hard to make a version of parser combinators that come with a guarantee that they either consume a nonzero amount of input or fail, and then it might not be so bad to show a <code>many</code> combinator has the same property?</p>",
        "id": 324954530,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1675181839
    },
    {
        "content": "<p>I did that proof, at least for the <a href=\"https://leanprover-community.github.io/mathlib_docs/find/parser.nat_eq_done\">docs#parser.nat_eq_done</a>, thanks to input from many, making a TC-based \"guarantee checker\"</p>",
        "id": 324957043,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1675182459
    },
    {
        "content": "<p>where \"consume a nonzero amount of input\" is <a href=\"https://leanprover-community.github.io/mathlib_docs/find/parser.prog\">docs#parser.prog</a>, and the proof for the \"many1\" combinator is <a href=\"https://leanprover-community.github.io/mathlib_docs/find/parser.prog.many1\">docs#parser.prog.many1</a>. Importantly, <code>many</code> is not <code>prog</code>!</p>",
        "id": 324957480,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1675182560
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/113489-new-members/topic/.5BNewBie.20Q.5D.20.3A.20How.20to.20use.20decreasing_by.20tactic/near/324954067\">said</a>:</p>\n<blockquote>\n<p>I think parsing JSON (or at least some subset of it) is a good project. If you did a Lisp-like language, your next issue would be choosing which specific Lisp-like language you'd be implementing. R5RS or R6RS Scheme seems like a much more difficult project to me than parsing JSON and figuring out how to check whether you've implemented the spec.</p>\n</blockquote>\n<p>even a subset of JSON is good enough :)</p>",
        "id": 324958428,
        "sender_full_name": "Shubham Kumar ðŸ¦€ (he/him)",
        "timestamp": 1675182798
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"308899\">Yakov Pechersky</span> <a href=\"#narrow/stream/113489-new-members/topic/.5BNewBie.20Q.5D.20.3A.20How.20to.20use.20decreasing_by.20tactic/near/324957043\">said</a>:</p>\n<blockquote>\n<p>I did that proof, at least for the <a href=\"https://leanprover-community.github.io/mathlib_docs/find/parser.nat_eq_done\">docs#parser.nat_eq_done</a>, thanks to input from many, making a TC-based \"guarantee checker\"</p>\n</blockquote>\n<p>I'll checkout the parser combinator that you mentioned, thanks for the input</p>",
        "id": 324958587,
        "sender_full_name": "Shubham Kumar ðŸ¦€ (he/him)",
        "timestamp": 1675182839
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/113489-new-members/topic/.5BNewBie.20Q.5D.20.3A.20How.20to.20use.20decreasing_by.20tactic/near/324954067\">said</a>:</p>\n<blockquote>\n<p>I think parsing JSON (or at least some subset of it) is a good project. If you did a Lisp-like language, your next issue would be choosing which specific Lisp-like language you'd be implementing. R5RS or R6RS Scheme seems like a much more difficult project to me than parsing JSON and figuring out how to check whether you've implemented the spec.</p>\n</blockquote>\n<p>Umm.... that is significantly more ambitious than I was intending to suggest. I was thinking something more along the lines of the language supported by the one-page self-evaluator in <a href=\"https://www.ecb.torontomu.ca/~elf/pub/misc/micromanualLISP.pdf\">McCarthy's paper</a> on the topic. The nice thing about lisp is that it is highly configurable how much you want to support. For a toy verification project I would start with just nil, cons, integer literals, variables, lambda, and define (and maybe some builtin functions too like <code>+</code> and <code>car</code>). If you simplify it enough it's basically just lambda calculus</p>",
        "id": 324983467,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1675189292
    },
    {
        "content": "<p>One book that I found very helpful while building the metaprogramming language for MM0 (which is similar to scheme) is <a href=\"https://en.wikibooks.org/wiki/Write_Yourself_a_Scheme_in_48_Hours\">https://en.wikibooks.org/wiki/Write_Yourself_a_Scheme_in_48_Hours</a> . I think I did actually end up writing a scheme in about that much time</p>",
        "id": 324984944,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1675189710
    }
]