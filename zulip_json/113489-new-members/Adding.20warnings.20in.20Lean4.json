[
    {
        "content": "<p>How does one add warnings in a lean code when we know the user has inputted a false value? For example, I want my program to exit when someone inputs an empty list in this function :-</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">non_empty</span><span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">â„•</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">l</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"n\">panic</span><span class=\"bp\">!</span> <span class=\"s2\">\"list is empty\"</span>\n  <span class=\"bp\">|</span> <span class=\"n\">head</span> <span class=\"o\">::</span> <span class=\"n\">tail</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">true</span>\n</code></pre></div>\n<p>I read somewhere that panic works, but how exactly does it work?</p>",
        "id": 351391351,
        "sender_full_name": "Michael Wahlberg",
        "timestamp": 1682012539
    },
    {
        "content": "<p><code>panic!</code> will just return the default value of the required type (so it requires an <code>Inhabited</code> instance for the return type, which <code>Bool</code> has).</p>",
        "id": 351414710,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1682019767
    },
    {
        "content": "<p>But when you evaluate it at the empty case, it will give an error.</p>",
        "id": 351414767,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1682019789
    },
    {
        "content": "<p>You should not use <code>panic!</code> like this. It is allowed to be optimized away, so you cannot use it for anything except as a best effort way to catch implementation bugs</p>",
        "id": 351414819,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1682019810
    },
    {
        "content": "<p>Functions in lean are required to be total. If you want to report an error, use a return type like <code>Except String Bool</code> or <code>IO Bool</code> that allows you to report errors</p>",
        "id": 351415111,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1682019908
    }
]