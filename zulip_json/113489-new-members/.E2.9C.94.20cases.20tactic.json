[
    {
        "content": "<p>Hy, It's my first time here, I got this error, what is the problem and how I can fix it?<br>\n<a href=\"/user_uploads/3121/liYyf3Fzx4MU6VHZlARHg8OM/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/liYyf3Fzx4MU6VHZlARHg8OM/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/liYyf3Fzx4MU6VHZlARHg8OM/image.png\"></a></div>",
        "id": 356473984,
        "sender_full_name": "Shimon Cohen",
        "timestamp": 1683461232
    },
    {
        "content": "<p>Hint: you'll get help more easily if you paste <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> (the previous word is a link) rather than screenshots.</p>",
        "id": 356474808,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1683461501
    },
    {
        "content": "<p>You're not allowed to do <code>cases</code> on a proposition if the goal is not a proposition. What you can do is first set <code>x</code>, <code>y</code>, and <code>z</code>, leaving you with a proposition to prove, and then you're free to do <code>cases</code>.</p>",
        "id": 356474886,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1683461522
    },
    {
        "content": "<p>Using <code>cases</code> as if <code>or</code> was an operator with three inputs also won't work.</p>",
        "id": 356475038,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1683461564
    },
    {
        "content": "<p>you can use <code>use [x, y, z]</code> or <code>refine ⟨x, y, z, _⟩</code> to set <code>x</code>, <code>y</code>, and <code>z</code> (I'm assuming <code>mk'</code> is meant to be setting <code>x</code>, <code>y</code>, and <code>z</code> to <code>x</code>, <code>y</code>, and <code>z</code> here)</p>",
        "id": 356475138,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1683461585
    },
    {
        "content": "<p>Thanks, <span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span>  this works I will probebly will help me in the futre. Anyway cases not help me here because I need the negotion, I use if else insteed and now I'm getting another error</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.real.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">point3</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">unique</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"bp\">∧</span> <span class=\"n\">z</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">∧</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">∧</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">∧</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">))</span>\n\n\n<span class=\"kn\">namespace</span> <span class=\"n\">point3</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">mk'</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">nz</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"bp\">∨</span> <span class=\"n\">y</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"bp\">∨</span> <span class=\"n\">z</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">point3</span> <span class=\"o\">:=</span>\n  <span class=\"k\">if</span> <span class=\"n\">hz</span><span class=\"o\">:</span> <span class=\"n\">z</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"k\">then</span>\n    <span class=\"k\">if</span> <span class=\"n\">hy</span> <span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"k\">then</span>\n      <span class=\"n\">point3.mk</span> <span class=\"mi\">1</span> <span class=\"mi\">0</span> <span class=\"mi\">0</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">norm_num</span><span class=\"o\">)</span>\n    <span class=\"k\">else</span>\n      <span class=\"n\">point3.mk</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">/</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"mi\">1</span> <span class=\"mi\">0</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">norm_num</span><span class=\"o\">)</span>\n  <span class=\"k\">else</span>\n    <span class=\"n\">point3.mk</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">/</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">/</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">norm_num</span><span class=\"o\">)</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">point3</span>\n</code></pre></div>\n<p>Should I ignore it and just write \"noncomputable\" as suggested? what it's mean?</p>",
        "id": 356497734,
        "sender_full_name": "Shimon Cohen",
        "timestamp": 1683469243
    },
    {
        "content": "<p>this is the error \"missing 'noncomputable' modifier, definition 'mk'' depends on 'real.decidable_eq'\"</p>",
        "id": 356498049,
        "sender_full_name": "Shimon Cohen",
        "timestamp": 1683469339
    },
    {
        "content": "<p>Yeah, I would not assume anything related to real numbers to be computable, so add the <code>noncomputable</code> keyword freely</p>",
        "id": 356498239,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1683469416
    },
    {
        "content": "<p>Note that <code>z = 1</code> implies <code>z ≠ 0</code> so you can just remove it in <code>unique</code></p>",
        "id": 356512473,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1683474227
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"615364\">Shimon Cohen</span> has marked this topic as resolved.</p>",
        "id": 357353385,
        "sender_full_name": "Notification Bot",
        "timestamp": 1683737368
    }
]