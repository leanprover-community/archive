[
    {
        "content": "<p>I have a goal <code>a :: as = b :: bs</code>, how do I split this into two goals as <code>a = b</code> and <code>as = bs</code>?</p>",
        "id": 403627212,
        "sender_full_name": "Alex Meiburg",
        "timestamp": 1700670545
    },
    {
        "content": "<p><code>congr</code>?</p>",
        "id": 403627243,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1700670560
    },
    {
        "content": "<p>ah thanks, didn't know that name &gt;__&lt;</p>",
        "id": 403627397,
        "sender_full_name": "Alex Meiburg",
        "timestamp": 1700670608
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"448405\">Alex Meiburg</span> has marked this topic as resolved.</p>",
        "id": 403627409,
        "sender_full_name": "Notification Bot",
        "timestamp": 1700670612
    },
    {
        "content": "<p>NB:  <code>congr</code> isn’t specific to constructors, but neither is your goal.If you had a hypothesis with <code>a :: as = b :: bs</code>, you’d have to rely on the injectivity of constructor, and there is a special tactic for that whose name I always forget.</p>",
        "id": 403637612,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1700674497
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">xs</span> <span class=\"n\">ys</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"o\">::</span> <span class=\"n\">xs</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"o\">::</span> <span class=\"n\">ys</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">False</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">injection</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"n\">h1</span> <span class=\"n\">h2</span>\n  <span class=\"c\">/-</span>\n<span class=\"cm\">  x y : ℕ</span>\n<span class=\"cm\">  xs ys : List ℕ</span>\n<span class=\"cm\">  h1 : x = y</span>\n<span class=\"cm\">  h2 : xs = ys</span>\n<span class=\"cm\">  ⊢ False</span>\n<span class=\"cm\">  -/</span>\n</code></pre></div>",
        "id": 403638710,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1700674951
    }
]