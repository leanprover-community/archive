[
    {
        "content": "<p>Under what circumstances are types equal? I understand that, e.g., dependent types (depending on values) will be equal if the parameters are equal:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n<span class=\"kn\">open</span> <span class=\"n\">Real</span>\n<span class=\"kd\">inductive</span> <span class=\"n\">T</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n    <span class=\"bp\">|</span> <span class=\"n\">a</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">T0</span> <span class=\"o\">:=</span> <span class=\"n\">T</span> <span class=\"mi\">0</span>\n<span class=\"kd\">def</span> <span class=\"n\">Tsin0</span> <span class=\"o\">:=</span> <span class=\"n\">T</span> <span class=\"o\">(</span><span class=\"n\">Real.sin</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">T0</span> <span class=\"bp\">=</span> <span class=\"n\">Tsin0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">T0</span><span class=\"o\">,</span> <span class=\"n\">Tsin0</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>I'm assuming this true if <em>and only if</em> the parameters are equal. Can one prove this in Lean?</p>\n<p>Similarly, can one prove this (or, alternatively, without negation)?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">X</span> <span class=\"n\">where</span>\n    <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">Y</span> <span class=\"n\">where</span>\n    <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"bp\">=</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 395028742,
        "sender_full_name": "Adomas Baliuka",
        "timestamp": 1696507732
    },
    {
        "content": "<p>In general you should assume that equality between types is not a useful property to think about</p>",
        "id": 395029395,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1696507953
    },
    {
        "content": "<p>The only thing I'm aware you can prove is that types with a different cardinality are not equal</p>",
        "id": 395029509,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1696507996
    },
    {
        "content": "<p>Even stronger: as I understand it, <a href=\"https://github.com/digama0/lean-type-theory/releases/tag/v1.0\">#leantt</a> shows that there is a model where types of equal cardinality are in fact equal.</p>",
        "id": 395032634,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1696509080
    },
    {
        "content": "<p>See also: <a href=\"#narrow/stream/113488-general/topic/.E2.84.95.20.E2.89.A0.20.E2.84.A4\">ℕ ≠ ℤ</a></p>",
        "id": 395033271,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1696509280
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"238446\">Anne Baanen</span> <a href=\"#narrow/stream/113489-new-members/topic/When.20are.20types.20equal/near/395033271\">said</a>:</p>\n<blockquote>\n<p>See also: <a href=\"#narrow/stream/113488-general/topic/.E2.84.95.20.E2.89.A0.20.E2.84.A4\">ℕ ≠ ℤ</a></p>\n</blockquote>\n<p>That indeed answer the question (as well as I should expect). Sorry I wasn't able to find it using search.</p>",
        "id": 395039249,
        "sender_full_name": "Adomas Baliuka",
        "timestamp": 1696511100
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"638715\">ab</span> has marked this topic as resolved.</p>",
        "id": 395039266,
        "sender_full_name": "Notification Bot",
        "timestamp": 1696511108
    }
]