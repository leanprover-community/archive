[
    {
        "content": "<p>Hello. I proved that the cofinite topology is compact, and I have a couple questions about my proof (I couldn't find it in Mathlib or I would just compare with that).</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Set</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">CompactSpace</span> <span class=\"o\">(</span><span class=\"n\">CofiniteTopology</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">constructor</span>\n  <span class=\"n\">apply</span> <span class=\"n\">isCompact_of_finite_subcover</span>\n  <span class=\"n\">intro</span> <span class=\"n\">I</span> <span class=\"n\">cover</span> <span class=\"n\">open_of_cover</span> <span class=\"n\">is_cover</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">emptyCover</span> <span class=\"o\">:</span> <span class=\"n\">Set.Nonempty</span> <span class=\"o\">(</span><span class=\"bp\">⋃</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">I</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">cover</span> <span class=\"n\">i</span><span class=\"o\">))</span>\n  <span class=\"bp\">·</span> <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">hi</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">nonempty_iUnion.mp</span> <span class=\"n\">emptyCover</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">Nonempty</span> <span class=\"n\">I</span> <span class=\"o\">:=</span> <span class=\"n\">Nonempty.intro</span> <span class=\"n\">i</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"o\">(</span><span class=\"n\">cover</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">ᶜ</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">I</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">cover</span> <span class=\"n\">j</span> <span class=\"o\">:=</span>\n      <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">_</span> <span class=\"bp\">↦</span> <span class=\"n\">mem_iUnion.mp</span> <span class=\"o\">(</span><span class=\"n\">is_cover</span> <span class=\"o\">(</span><span class=\"n\">mem_univ</span> <span class=\"n\">x</span><span class=\"o\">))</span>\n    <span class=\"n\">choose</span><span class=\"bp\">!</span> <span class=\"n\">f</span> <span class=\"n\">this</span> <span class=\"n\">using</span> <span class=\"n\">this</span>\n    <span class=\"k\">let</span> <span class=\"n\">subcover</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">i</span><span class=\"o\">}</span> <span class=\"bp\">∪</span>  <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">''</span> <span class=\"o\">((</span><span class=\"n\">cover</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">ᶜ</span><span class=\"o\">))</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">Set.Finite</span> <span class=\"n\">subcover</span> <span class=\"o\">:=</span>\n      <span class=\"n\">finite_union.mpr</span> <span class=\"o\">⟨</span><span class=\"n\">finite_singleton</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">Finite.image</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">open_of_cover</span> <span class=\"n\">i</span> <span class=\"n\">hi</span><span class=\"o\">)⟩</span>\n    <span class=\"n\">use</span> <span class=\"o\">(</span><span class=\"n\">Finite.toFinset</span> <span class=\"n\">this</span><span class=\"o\">)</span>\n    <span class=\"n\">intro</span> <span class=\"n\">x</span> <span class=\"n\">_</span>\n    <span class=\"n\">by_cases</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"o\">(</span><span class=\"n\">cover</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">aesop</span>\n  <span class=\"bp\">·</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">not_nonempty_iff_eq_empty</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">emptyCover</span>\n    <span class=\"n\">aesop</span>\n</code></pre></div>\n<p>In particular:<br>\n1) Is hammering away at stuff with <code>aesop</code> good practice? I could imagine it might break proofs if / when <code>aesop</code>is modified. My initial proof was <code>aesop</code>-free but the cases I closed with it required a whole bunch of rather boring set-theoretic rewriting<br>\n2) I extract the finite subcover using <code>choose!</code>. Is that the canonical approach for this kind of construction?<br>\n3) Bonus: is there anything  that might be improved?</p>",
        "id": 400399266,
        "sender_full_name": "Luigi Massacci",
        "timestamp": 1699195087
    },
    {
        "content": "<ol>\n<li>Yes that's exactly the use case of <code>aesop</code>.</li>\n<li>That's the use case of <code>choose</code>.</li>\n</ol>",
        "id": 400399916,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1699195726
    },
    {
        "content": "<p>Hi, Luigi. Nice work! There are a couple of things you could improve. First you need to read the link <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> and post code snippets accordingly. Then you can use <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Set.eq_empty_or_nonempty#doc\">docs#Set.eq_empty_or_nonempty</a> and use it as in:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">CompactSpace</span> <span class=\"o\">(</span><span class=\"n\">CofiniteTopology</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">constructor</span>\n  <span class=\"n\">apply</span> <span class=\"n\">isCompact_of_finite_subcover</span>\n  <span class=\"n\">intro</span> <span class=\"n\">I</span> <span class=\"n\">cover</span> <span class=\"n\">open_of_cover</span> <span class=\"n\">is_cover</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">eq_empty_or_nonempty</span> <span class=\"o\">(</span><span class=\"bp\">⋃</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">I</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">cover</span> <span class=\"n\">i</span><span class=\"o\">))</span> <span class=\"k\">with</span> <span class=\"n\">H</span> <span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩,</span> <span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">cover</span> <span class=\"n\">i</span><span class=\"o\">⟩</span>\n  <span class=\"bp\">·</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">H</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">is_cover</span>\n    <span class=\"n\">aesop</span>\n  <span class=\"bp\">·</span> <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">Nonempty</span> <span class=\"n\">I</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">i</span><span class=\"o\">⟩</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"o\">(</span><span class=\"n\">cover</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">ᶜ</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">I</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">cover</span> <span class=\"n\">j</span> <span class=\"o\">:=</span>\n      <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">_</span> <span class=\"bp\">↦</span> <span class=\"n\">mem_iUnion.mp</span> <span class=\"o\">(</span><span class=\"n\">is_cover</span> <span class=\"o\">(</span><span class=\"n\">mem_univ</span> <span class=\"n\">x</span><span class=\"o\">))</span>\n    <span class=\"n\">choose</span><span class=\"bp\">!</span> <span class=\"n\">f</span> <span class=\"n\">hf</span> <span class=\"n\">using</span> <span class=\"n\">this</span>\n    <span class=\"k\">let</span> <span class=\"n\">subcover</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">i</span><span class=\"o\">}</span> <span class=\"bp\">∪</span>  <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">''</span> <span class=\"o\">((</span><span class=\"n\">cover</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">ᶜ</span><span class=\"o\">))</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">Set.Finite</span> <span class=\"n\">subcover</span> <span class=\"o\">:=</span>\n      <span class=\"n\">finite_union.mpr</span> <span class=\"o\">⟨</span><span class=\"n\">finite_singleton</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">Finite.image</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">open_of_cover</span> <span class=\"n\">i</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">hx</span><span class=\"o\">⟩)⟩</span>\n    <span class=\"n\">use</span> <span class=\"n\">Finite.toFinset</span> <span class=\"n\">this</span>\n    <span class=\"n\">intro</span> <span class=\"n\">x</span> <span class=\"n\">_</span>\n    <span class=\"n\">by_cases</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"o\">(</span><span class=\"n\">cover</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">aesop</span>\n</code></pre></div>",
        "id": 400405644,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1699200559
    },
    {
        "content": "<p>Those are local improvements. But the global one is to avoid the bad move at the very beginning which is to go back to the inefficient definition of compactness.</p>",
        "id": 400405663,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1699200600
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">CompactSpace</span> <span class=\"o\">(</span><span class=\"n\">CofiniteTopology</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"n\">isCompact_iff_ultrafilter_le_nhds.2</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">F</span> <span class=\"bp\">↦</span> <span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">)⟩</span>\n  <span class=\"k\">suffices</span> <span class=\"bp\">∃</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"o\">{</span><span class=\"n\">a</span><span class=\"o\">}</span> <span class=\"bp\">∈</span> <span class=\"n\">F</span> <span class=\"bp\">∨</span> <span class=\"n\">F.toFilter</span> <span class=\"bp\">≤</span> <span class=\"n\">Filter.cofinite</span> <span class=\"kd\">by</span> <span class=\"n\">simpa</span> <span class=\"o\">[</span><span class=\"n\">CofiniteTopology.nhds_eq</span><span class=\"o\">]</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">F.le_cofinite_or_eq_pure</span> <span class=\"k\">with</span> <span class=\"n\">hF</span> <span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"n\">a</span> <span class=\"o\">,</span><span class=\"n\">rfl</span><span class=\"o\">⟩</span>\n  <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">Classical.choice</span> <span class=\"o\">(</span><span class=\"n\">Filter.nonempty_of_neBot</span> <span class=\"n\">F</span><span class=\"o\">),</span> <span class=\"n\">Or.inr</span> <span class=\"n\">hF</span><span class=\"o\">⟩</span>\n  <span class=\"n\">simp</span>\n</code></pre></div>",
        "id": 400405709,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1699200607
    },
    {
        "content": "<p>Merci to the both of you! I guess it’s time to borrow a copy of Bourbaki from the library…</p>",
        "id": 400417818,
        "sender_full_name": "Luigi Massacci",
        "timestamp": 1699212470
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"466290\">Luigi Massacci</span> has marked this topic as resolved.</p>",
        "id": 400417976,
        "sender_full_name": "Notification Bot",
        "timestamp": 1699212633
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"466290\">Luigi Massacci</span> has marked this topic as unresolved.</p>",
        "id": 401502766,
        "sender_full_name": "Notification Bot",
        "timestamp": 1699701007
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"466290\">Luigi Massacci</span> has marked this topic as resolved.</p>",
        "id": 401502777,
        "sender_full_name": "Notification Bot",
        "timestamp": 1699701021
    }
]