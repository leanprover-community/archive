[
    {
        "content": "<p>Let's say we have a proof of the following example, is there a way where I don't have to type <code>12345678</code> in the  proof, and still be able to construct a proof?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">prop1</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Nat</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Nat</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Prop</span>\n<span class=\"kd\">inductive</span> <span class=\"n\">prop2</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">sample2</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"n\">v</span><span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ih</span><span class=\"o\">:</span> <span class=\"bp\">∀</span><span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">),</span> <span class=\"bp\">∃</span><span class=\"o\">(</span><span class=\"n\">z</span><span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">),</span> <span class=\"n\">prop1</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"bp\">∧</span> <span class=\"n\">z</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">prop1</span> <span class=\"mi\">12345678</span> <span class=\"n\">v</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"n\">ih</span> <span class=\"mi\">12345678</span> <span class=\"n\">v</span>\n  <span class=\"k\">have</span> <span class=\"o\">⟨</span><span class=\"n\">z</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">hh</span><span class=\"o\">,</span> <span class=\"n\">zv</span><span class=\"o\">⟩⟩</span> <span class=\"o\">:=</span> <span class=\"n\">h</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">&lt;-</span> <span class=\"n\">zv</span><span class=\"o\">]</span>\n  <span class=\"n\">exact</span> <span class=\"n\">hh</span>\n</code></pre></div>",
        "id": 399561621,
        "sender_full_name": "Z. Wu",
        "timestamp": 1698770353
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">prop1</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Nat</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Nat</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Prop</span>\n<span class=\"kd\">inductive</span> <span class=\"n\">prop2</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">sample2</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"n\">v</span><span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ih</span><span class=\"o\">:</span> <span class=\"bp\">∀</span><span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">),</span> <span class=\"bp\">∃</span><span class=\"o\">(</span><span class=\"n\">z</span><span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">),</span> <span class=\"n\">prop1</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"bp\">∧</span> <span class=\"n\">z</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">prop1</span> <span class=\"mi\">12345678</span> <span class=\"n\">v</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">let</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"bp\">?</span><span class=\"n\">_</span>\n  <span class=\"k\">have</span> <span class=\"o\">⟨</span><span class=\"n\">z</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">hh</span><span class=\"o\">,</span> <span class=\"n\">zv</span><span class=\"o\">⟩⟩</span> <span class=\"o\">:=</span> <span class=\"n\">ih</span> <span class=\"n\">a</span> <span class=\"n\">v</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">&lt;-</span> <span class=\"n\">zv</span><span class=\"o\">]</span>\n  <span class=\"n\">exact</span> <span class=\"n\">hh</span>\n\n<span class=\"k\">#print</span> <span class=\"kd\">axioms</span> <span class=\"n\">sample2</span>\n</code></pre></div>",
        "id": 399562125,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1698770546
    },
    {
        "content": "<p>thanks! is there a name for <code>?_</code></p>",
        "id": 399567580,
        "sender_full_name": "Z. Wu",
        "timestamp": 1698772418
    },
    {
        "content": "<p>That is a metavariable, just an anonymous one you could call it <code>?a</code> or something if you want</p>",
        "id": 399567860,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1698772520
    },
    {
        "content": "<p>i see, thanks!</p>",
        "id": 399568385,
        "sender_full_name": "Z. Wu",
        "timestamp": 1698772741
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"649880\">Z. Wu</span> has marked this topic as resolved.</p>",
        "id": 399568393,
        "sender_full_name": "Notification Bot",
        "timestamp": 1698772743
    }
]