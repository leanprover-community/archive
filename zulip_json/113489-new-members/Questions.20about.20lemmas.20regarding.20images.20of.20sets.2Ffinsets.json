[
    {
        "content": "<p>In fact, I fell on this question of <a href=\"#narrow/stream/113489-new-members/topic/set.2Emem_image.20vs.20finset.2Emem_image/near/265412519\">https://leanprover.zulipchat.com/#narrow/stream/113489-new-members/topic/set.2Emem_image.20vs.20finset.2Emem_image/near/265412519</a> while writing the following lemmas :</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.finset.basic</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">test</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hfg</span> <span class=\"o\">:</span> <span class=\"n\">function.left_inverse</span> <span class=\"n\">g</span> <span class=\"n\">f</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hb_fa</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">g</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">change</span> <span class=\"n\">g</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">id</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">function.left_inverse.id</span> <span class=\"n\">hfg</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">congr_arg</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">hb_fa</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">test2</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hfg</span> <span class=\"o\">:</span> <span class=\"n\">function.left_inverse</span> <span class=\"n\">g</span> <span class=\"n\">f</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hb_fs</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">finset.image</span> <span class=\"n\">f</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">g</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">hb</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">finset.mem_image.mp</span> <span class=\"n\">hb_fs</span><span class=\"o\">,</span>\n  <span class=\"n\">change</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"bp\">∘</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"n\">b</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">function.left_inverse.id</span> <span class=\"n\">hfg</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">hb</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">test3</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hfg</span> <span class=\"o\">:</span> <span class=\"n\">function.right_inverse</span> <span class=\"n\">g</span> <span class=\"n\">f</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hb_fs</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">∉</span> <span class=\"n\">finset.image</span> <span class=\"n\">f</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">g</span> <span class=\"n\">a</span> <span class=\"bp\">∉</span> <span class=\"n\">s</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">by_contradiction</span> <span class=\"n\">hga_s</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">hb_fs</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">finset.mem_image.mpr</span><span class=\"o\">,</span>\n  <span class=\"n\">use</span> <span class=\"n\">g</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">and.intro</span> <span class=\"n\">hga_s</span><span class=\"o\">,</span>\n  <span class=\"n\">change</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">∘</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">function.right_inverse.id</span> <span class=\"n\">hfg</span><span class=\"o\">,</span>\n  <span class=\"n\">refl</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>Three more questions :</p>\n<p>1) Should it exist explicitly in the library, as well as the analogues for sets. <br>\n(In the context of mul_action, <code>f</code> and <code>g</code> are actually an element of a group and its inverse, acting on a <code>finset</code>.  For <code>set</code>, here is <a href=\"https://leanprover-community.github.io/mathlib_docs/find/mem_smul_set_iff_inv_smul_mem\">docs#mem_smul_set_iff_inv_smul_mem</a>, but this is kind of the analogues for <code>finset</code>.)</p>\n<p>2) Certainly you can do it quicker, using some existing suff (which I couldn't find)</p>\n<p>3) If the two variants (for sets and finsets) have to coexist, should the proof of that for finsets reduce to the one for sets, using <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finset.mem_coe\">docs#finset.mem_coe</a> or should they both be done directly ?</p>",
        "id": 265413502,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1639827086
    },
    {
        "content": "<p>It might be worth editing the topic of that message so that the original question doesn't get lost</p>",
        "id": 265414006,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1639827801
    },
    {
        "content": "<p>Those lemmas look like they might be related to <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finset.preimage\">docs#finset.preimage</a></p>",
        "id": 265414013,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1639827841
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113489-new-members/topic/set.2Emem_image.20vs.20finset.2Emem_image/near/265414006\">said</a>:</p>\n<blockquote>\n<p>It might be worth editing the topic of that message so that the original question doesn't get lost</p>\n</blockquote>\n<p>Do you have a suggestion? (In fact, I'm not sure of what you mean…)</p>",
        "id": 265414124,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1639827974
    },
    {
        "content": "<p>You can edit a message and change its title.</p>",
        "id": 265414290,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1639828320
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113489-new-members/topic/set.2Emem_image.20vs.20finset.2Emem_image/near/265414290\">said</a>:</p>\n<blockquote>\n<p>You can edit a message and change its title.</p>\n</blockquote>\n<p>I found that but it is unclear what title you wish me to write. (I can change the title of what follows my second question, or change the title of the initial one…)</p>",
        "id": 265415736,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1639830367
    },
    {
        "content": "<p>Eric just means that you asked three more questions and you could start a separate thread for them, and Zulip makes it very easy to do this (just edit the thread name of the post where you asked the new questions)</p>",
        "id": 265419817,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1639835863
    },
    {
        "content": "<p>Done, but the answers of Johan and Yaël now refer to another thread…</p>",
        "id": 265420377,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1639836573
    },
    {
        "content": "<p>I didn't say it was a good idea! I was just explaining what Eric was talking about ;-)</p>",
        "id": 265420447,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1639836643
    }
]