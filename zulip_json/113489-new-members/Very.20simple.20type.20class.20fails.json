[
    {
        "content": "<p>Hello everyone, I believe this will be a very silly question, but I can't figure out what's going wrong.<br>\nI'm trying to play around with groups based on <a href=\"https://tqft.net/web/notes/load.php?name=students/20180219-MitchRowett-ASC-report-on-Lean\">this document</a>.</p>\n<p>However, the second type class is giving me trouble:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">has_mul</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">mul</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">semigroup</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">has_mul</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">mul_assoc</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">*</span>  <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">c</span><span class=\"o\">))</span>\n</code></pre></div>\n<p><code>has_mul</code> seems to work, but <code>semigroup</code> fails (<code>failed to synthesize type class instance</code>). Am I missing something very obvious here? I feel like this might also just be a version issue, since I've had issues like this due to breaking API changes before. <br>\nThanks for your help!</p>",
        "id": 326364444,
        "sender_full_name": "Andre Graubner (安德)",
        "timestamp": 1675777200
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"419316\">@Andre Graubner (安德)</span> What do you have at the top of your file?</p>",
        "id": 326364709,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1675777263
    },
    {
        "content": "<p>Can you make sure that you are not by accident importing part of mathlibs existing hierarchy?</p>",
        "id": 326364828,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1675777288
    },
    {
        "content": "<p>If you literally wrote the lines as you pasted them, with nothing in between, then <code>*</code> is certainly referring to the existing <code>has_mul</code>.</p>",
        "id": 326365038,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1675777345
    },
    {
        "content": "<p>Because you didn't set up your own notation.</p>",
        "id": 326365091,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1675777359
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> thanks for the reply, I'm trying to avoid this by opening a new namespace:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">namespace</span> <span class=\"n\">toy_group</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">has_mul</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">mul</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">semigroup</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">has_mul</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">mul_assoc</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">*</span>  <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">c</span><span class=\"o\">))</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">toy_group</span>\n</code></pre></div>\n<p>Is this enough?</p>",
        "id": 326365122,
        "sender_full_name": "Andre Graubner (安德)",
        "timestamp": 1675777368
    },
    {
        "content": "<p>You will have to teach Lean that <code>*</code> means <code>has_mul.mul</code>.</p>",
        "id": 326365209,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1675777392
    },
    {
        "content": "<p>I don't know if you can easily overload.</p>",
        "id": 326365252,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1675777403
    },
    {
        "content": "<p>You might need to start your file with <code>prelude</code>. Which means you'll not be able to use any predefined things...</p>",
        "id": 326365293,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1675777424
    },
    {
        "content": "<p>Thanks, that makes sense.</p>",
        "id": 326365297,
        "sender_full_name": "Andre Graubner (安德)",
        "timestamp": 1675777427
    },
    {
        "content": "<p>If you start with <code>prelude</code> then you won't even get <code>=</code>!</p>",
        "id": 326365348,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1675777443
    },
    {
        "content": "<p>Alright, I'll have a look :)</p>",
        "id": 326365455,
        "sender_full_name": "Andre Graubner (安德)",
        "timestamp": 1675777470
    },
    {
        "content": "<p>It might be easier to take <code>has_mul</code> for granted, and start building your stuff from <code>semigroup</code> upwards.</p>",
        "id": 326365507,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1675777490
    },
    {
        "content": "<p>That solved it, amazing</p>",
        "id": 326365695,
        "sender_full_name": "Andre Graubner (安德)",
        "timestamp": 1675777544
    }
]