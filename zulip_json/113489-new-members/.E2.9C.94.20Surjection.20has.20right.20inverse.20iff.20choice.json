[
    {
        "content": "<p>Hello, I'm doing some basic proof training, trying to formalize some exercises in MacLane and Birkoff's \"Algebra\". I'm currently struggling with formulating the type for the following theorem in set theory: Every surjection having a right inverse is equivalent to the axiom of choice. </p>\n<p>But <a href=\"https://leanprover-community.github.io/mathlib_docs/init/classical.html#classical.choice\">classical#classical.choice</a> does not have type <code>Prop</code>, so this won't work. Do I have to state the AoC differently here? Do I need to to use <a href=\"https://en.wikipedia.org/wiki/Axiom_of_choice#Axiom_of_choice_in_type_theory\">the AoC from type theory</a>?</p>\n<p>This is what I have so far (which doesn't work):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">surjective_has_right_inverse_iff_choice</span>\n  <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n  <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">,</span> <span class=\"n\">surjective</span> <span class=\"n\">f</span> <span class=\"bp\">↔</span> <span class=\"n\">right_inverse</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"n\">classical.choice</span>\n<span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>I will probably need some <code>nonempty</code> instance in there too, I assume...</p>\n<p>Thanks a lot in advance :)</p>",
        "id": 389895388,
        "sender_full_name": "Aron Erben",
        "timestamp": 1694184326
    },
    {
        "content": "<p><code>classical.choice</code> is the <em>proof</em> of choice, you need the <em>statement</em> of it</p>",
        "id": 389901456,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1694186266
    },
    {
        "content": "<p>The statement is the thing after the colon when you do <code>#check @classical.choice</code></p>",
        "id": 389901611,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1694186297
    },
    {
        "content": "<p>I suspect the statement you're proving is false though, and that it implies choice only for a particular type</p>",
        "id": 389901705,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1694186332
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113489-new-members/topic/Surjection.20has.20right.20inverse.20iff.20choice/near/389901611\">said</a>:</p>\n<blockquote>\n<p>The statement is the thing after the colon when you do <code>#check @classical.choice</code></p>\n</blockquote>\n<p>Thanks for the response, I had tried that too, something along these lines:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">surjective_has_right_inverse_iff_choice</span>\n  <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n  <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">,</span> <span class=\"n\">surjective</span> <span class=\"n\">f</span> <span class=\"bp\">↔</span> <span class=\"n\">right_inverse</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"n\">nonempty</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n<span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>But I think it boils down to <code>α</code> not having type <code>Prop</code>, as I'm using <code>→</code>not as an implication, so I think I'm on the wrong path in general.</p>",
        "id": 389908293,
        "sender_full_name": "Aron Erben",
        "timestamp": 1694188464
    },
    {
        "content": "<p>You could state this using <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Equiv#doc\">docs#Equiv</a> (and <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=PLift#doc\">docs#PLift</a>) instead of <code>Iff</code>, which I think would be fine</p>",
        "id": 389909448,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1694188927
    },
    {
        "content": "<p>Putting <code>Nonempty</code> around the RHS will also be legal, though I'm not certain whether it is still true if phrased that way</p>",
        "id": 389909524,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1694188954
    },
    {
        "content": "<p>I think there are several versions of what is called \"the axiom of choice\". Do you mean \"the product of nonempty sets is nonempty\"? This is not what is called the axiom of choice in mathlib , and I suspect the mathlib version is stronger, but I can be wrong.</p>",
        "id": 389909533,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1694188958
    },
    {
        "content": "<p>I would recommend not wasting too much time on set theory exercises in lean, because lean uses dependent type theory which is a different (but equivalent) foundation. This means that regular algebra questions will translate fine into lean but foundational questions involving axioms of set theory like AC may well not.</p>",
        "id": 389942874,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1694203535
    },
    {
        "content": "<p>In particular when a type theorist talks about the axiom of choice they mean a rather different thing to when a set theorist does. Related, but different. I would just skip that exercise.</p>",
        "id": 389943063,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1694203634
    },
    {
        "content": "<p>Alternatively, you can totally ignore all references to <code>choice</code> in lean, formalise what a set theorist means by the axiom of choice, and then prove that.</p>",
        "id": 389943279,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1694203730
    },
    {
        "content": "<p>I would also switch to Lean 4; Lean 3 is end of life and you'll get far less support for it.</p>",
        "id": 389943584,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1694203874
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"130384\">Riccardo Brasca</span> <a href=\"#narrow/stream/113489-new-members/topic/Surjection.20has.20right.20inverse.20iff.20choice/near/389909533\">said</a>:</p>\n<blockquote>\n<p>Do you mean \"the product of nonempty sets is nonempty\"?</p>\n</blockquote>\n<p>More along the lines of:</p>\n<blockquote>\n<p>For any set X of disjoint nonvoid sets, there exists a set C such that each for each element of X the intersection with C has exactly one element.</p>\n</blockquote>\n<p>Not sure if this is equivalent to what you stated.</p>\n<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/Surjection.20has.20right.20inverse.20iff.20choice/near/389942874\">said</a>:</p>\n<blockquote>\n<p>I would recommend not wasting too much time on set theory exercises in lean</p>\n</blockquote>\n<p>Thanks for the guidance here, I think it's best I skip it then, as it doesn't feel too valuable didactically :) </p>\n<p>I'll leave what I came up with here, in case someone from the future finds this thread and maybe can use it:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- α is the set of sets, and i can select a specific set from it</span>\n<span class=\"kd\">axiom</span> <span class=\"n\">choice</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">nonempty</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">i</span> <span class=\"n\">x</span><span class=\"o\">),</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">_</span>\n</code></pre></div>\n<p>It still has a hole, which I'm not sure how to fill, but I'm resolving this for now :)</p>\n<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/Surjection.20has.20right.20inverse.20iff.20choice/near/389943584\">said</a>:</p>\n<blockquote>\n<p>I would also switch to Lean 4; Lean 3 is end of life and you'll get far less support for it.</p>\n</blockquote>\n<p>Good to know, I've been waiting for that!</p>",
        "id": 390068431,
        "sender_full_name": "Aron Erben",
        "timestamp": 1694297694
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"460930\">Aron Erben</span> has marked this topic as resolved.</p>",
        "id": 390068464,
        "sender_full_name": "Notification Bot",
        "timestamp": 1694297748
    }
]