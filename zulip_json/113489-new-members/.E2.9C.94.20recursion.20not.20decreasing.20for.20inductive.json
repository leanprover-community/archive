[
    {
        "content": "<p>I have a inductive class form which represents boolean formulas, and I have a function norm_neg which converts a boolean formula into its normal negative form, the problem comes when i try to convert a form a-&gt;b to (not a) or  b which is its normal negative form. Because a or b in this cause represent another formula or variable it must also be converted using norm_neg recursively. Only it gives me \"failed to prove recursive application is decreasing\". Any adivce on how to solve this,<br>\n<a href=\"/user_uploads/3121/J27Rf-IF9iMSwUCW_Em_TFPM/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/J27Rf-IF9iMSwUCW_Em_TFPM/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/J27Rf-IF9iMSwUCW_Em_TFPM/image.png\"></a></div>",
        "id": 323296629,
        "sender_full_name": "Henkie67",
        "timestamp": 1674577645
    },
    {
        "content": "<p>the problem seems to be that adding the form.Fnefg to f1 makes the total size to stay the same even tough it would eventually go down or that using another form-&gt;form function makes it unclear if the form increases or decreases in size</p>",
        "id": 323462012,
        "sender_full_name": "Henkie67",
        "timestamp": 1674646524
    },
    {
        "content": "<p>This isn't great, but you can substitute in <code>norm_neg (form.Fneg f1)</code> by hand. For example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">norm_neg</span><span class=\"o\">:</span> <span class=\"n\">form</span><span class=\"bp\">-&gt;</span><span class=\"n\">form</span>\n<span class=\"bp\">|</span><span class=\"o\">(</span><span class=\"n\">form.Fneg</span><span class=\"o\">(</span><span class=\"n\">form.Fneg</span> <span class=\"n\">f1</span><span class=\"o\">)):=</span> <span class=\"n\">f1</span>\n<span class=\"bp\">|</span><span class=\"o\">(</span><span class=\"n\">form.Fneg</span><span class=\"o\">(</span><span class=\"n\">form.Fand</span> <span class=\"n\">f1</span> <span class=\"n\">f2</span><span class=\"o\">)):=</span> <span class=\"n\">form.Ffor</span><span class=\"o\">(</span><span class=\"n\">form.Fneg</span> <span class=\"o\">(</span><span class=\"n\">norm_neg</span> <span class=\"n\">f1</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">form.Fneg</span> <span class=\"o\">(</span><span class=\"n\">norm_neg</span> <span class=\"n\">f2</span><span class=\"o\">))</span>\n<span class=\"bp\">|</span><span class=\"o\">(</span><span class=\"n\">form.Fneg</span><span class=\"o\">(</span><span class=\"n\">form.Ffor</span> <span class=\"n\">f1</span> <span class=\"n\">f2</span><span class=\"o\">)):=</span> <span class=\"n\">form.Fand</span><span class=\"o\">(</span><span class=\"n\">form.Fneg</span> <span class=\"o\">(</span><span class=\"n\">norm_neg</span> <span class=\"n\">f1</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">form.Fneg</span> <span class=\"o\">(</span><span class=\"n\">norm_neg</span> <span class=\"n\">f2</span><span class=\"o\">))</span>\n<span class=\"bp\">|</span><span class=\"o\">(</span><span class=\"n\">form.Fand</span> <span class=\"n\">f1</span> <span class=\"n\">f2</span><span class=\"o\">):=</span> <span class=\"n\">form.Fand</span> <span class=\"o\">(</span><span class=\"n\">norm_neg</span> <span class=\"n\">f1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">norm_neg</span> <span class=\"n\">f2</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span><span class=\"o\">(</span><span class=\"n\">form.Ffor</span> <span class=\"n\">f1</span> <span class=\"n\">f2</span><span class=\"o\">):=</span> <span class=\"n\">form.Ffor</span> <span class=\"o\">(</span><span class=\"n\">norm_neg</span> <span class=\"n\">f1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">norm_neg</span> <span class=\"n\">f2</span><span class=\"o\">)</span>\n\n<span class=\"bp\">|</span><span class=\"o\">(</span><span class=\"n\">form.Fimpl</span> <span class=\"o\">(</span><span class=\"n\">form.Fneg</span> <span class=\"n\">f1</span><span class=\"o\">)</span> <span class=\"n\">f2</span><span class=\"o\">):=</span><span class=\"n\">form.Ffor</span> <span class=\"n\">f1</span> <span class=\"o\">(</span><span class=\"n\">norm_neg</span> <span class=\"n\">f2</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span><span class=\"o\">(</span><span class=\"n\">form.Fimpl</span> <span class=\"o\">(</span><span class=\"n\">form.Fand</span> <span class=\"n\">f11</span> <span class=\"n\">f12</span><span class=\"o\">)</span> <span class=\"n\">f2</span><span class=\"o\">):=</span><span class=\"n\">form.Ffor</span> <span class=\"o\">(</span><span class=\"n\">form.Ffor</span><span class=\"o\">(</span><span class=\"n\">form.Fneg</span> <span class=\"o\">(</span><span class=\"n\">norm_neg</span> <span class=\"n\">f11</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">form.Fneg</span> <span class=\"o\">(</span><span class=\"n\">norm_neg</span> <span class=\"n\">f12</span><span class=\"o\">)))</span> <span class=\"o\">(</span><span class=\"n\">norm_neg</span> <span class=\"n\">f2</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span><span class=\"o\">(</span><span class=\"n\">form.Fimpl</span> <span class=\"o\">(</span><span class=\"n\">form.Ffor</span> <span class=\"n\">f11</span> <span class=\"n\">f12</span><span class=\"o\">)</span> <span class=\"n\">f2</span><span class=\"o\">):=</span><span class=\"n\">form.Ffor</span> <span class=\"o\">(</span><span class=\"n\">form.Fand</span><span class=\"o\">(</span><span class=\"n\">form.Fneg</span> <span class=\"o\">(</span><span class=\"n\">norm_neg</span> <span class=\"n\">f11</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">form.Fneg</span> <span class=\"o\">(</span><span class=\"n\">norm_neg</span> <span class=\"n\">f12</span><span class=\"o\">)))</span> <span class=\"o\">(</span><span class=\"n\">norm_neg</span> <span class=\"n\">f2</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span><span class=\"o\">(</span><span class=\"n\">form.Fimpl</span> <span class=\"n\">f1</span> <span class=\"n\">f2</span><span class=\"o\">):=</span><span class=\"n\">form.Ffor</span> <span class=\"o\">(</span><span class=\"n\">form.Fneg</span> <span class=\"n\">f1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">norm_neg</span> <span class=\"n\">f2</span><span class=\"o\">)</span>\n\n<span class=\"bp\">|</span><span class=\"o\">(</span><span class=\"n\">form.Fneg</span> <span class=\"n\">f1</span><span class=\"o\">):=(</span><span class=\"n\">form.Fneg</span> <span class=\"n\">f1</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">x</span>\n</code></pre></div>",
        "id": 323466715,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1674647947
    },
    {
        "content": "<p>yeah but this removes recursion on f1 and for it to work i need to pass on negated formula aka:   norm_neg (form.Fneg f1)</p>",
        "id": 323471173,
        "sender_full_name": "Henkie67",
        "timestamp": 1674649286
    },
    {
        "content": "<p>I'm not sure I understand what your objecting to -- I took <code>norm_neg (form.Fneg f1)</code> and added cases for each possibility. It should be computing the exact same function as what you originally wrote (assuming I didn't introduce any mistakes).</p>",
        "id": 323472504,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1674649636
    },
    {
        "content": "<p>|(form.Fimpl (form.Fneg f1) f2):=form.Ffor f1 (norm_neg f2)<br>\nin this case all negated f1 are no longer being recursed</p>",
        "id": 323474322,
        "sender_full_name": "Henkie67",
        "timestamp": 1674650136
    },
    {
        "content": "<p>but i think besides this one it could work</p>",
        "id": 323474643,
        "sender_full_name": "Henkie67",
        "timestamp": 1674650218
    },
    {
        "content": "<p>yes it works now thank you very much</p>",
        "id": 323476830,
        "sender_full_name": "Henkie67",
        "timestamp": 1674650896
    },
    {
        "content": "<p>In your definition you had <code>|(form.Fneg(form.Fneg f1)):= f1</code>. This means that if you have <code>form.Fimpl (form.Fneg f1) f2</code>, your formula gives <code>form.Ffor (norm_neg (form.Fneg (form.Fneg f1))) (norm_neg f2)</code>, and so according to the definition the double negation reduces to <code>form.Ffor f1 (norm_neg f2)</code>.</p>",
        "id": 323477520,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1674651099
    },
    {
        "content": "<p>oh wait i see what you mean, my mistake</p>",
        "id": 323479030,
        "sender_full_name": "Henkie67",
        "timestamp": 1674651525
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"582257\">Henkie67</span> has marked this topic as resolved.</p>",
        "id": 323480657,
        "sender_full_name": "Notification Bot",
        "timestamp": 1674652009
    }
]