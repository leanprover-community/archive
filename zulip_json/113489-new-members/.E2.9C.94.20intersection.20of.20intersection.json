[
    {
        "content": "<p>do theorems like the following exist?</p>\n<p>EDIT: well, they were easy to prove</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Finset.Sigma</span>\n\n<span class=\"kn\">section</span> <span class=\"n\">Finset</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"n\">β</span> <span class=\"bp\">Ω</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">κ</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">Finset.iInter_sigma</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">Finset</span> <span class=\"o\">(</span><span class=\"n\">κ</span> <span class=\"n\">i</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">κ</span> <span class=\"n\">i</span> <span class=\"bp\">→</span> <span class=\"n\">Set</span> <span class=\"bp\">Ω</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"k\">let</span> <span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"o\">(</span><span class=\"bp\">Σ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">κ</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">Finset.sigma</span> <span class=\"n\">S</span> <span class=\"n\">T</span>\n    <span class=\"bp\">⋂</span> <span class=\"n\">i</span> <span class=\"bp\">∈</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"bp\">⋂</span> <span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">κ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"bp\">=</span> <span class=\"bp\">⋂</span> <span class=\"n\">ij</span> <span class=\"bp\">∈</span> <span class=\"o\">(</span><span class=\"n\">Finset.sigma</span> <span class=\"n\">S</span> <span class=\"n\">T</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"n\">ij.1</span> <span class=\"n\">ij.2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">Set.iInter_sigma</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">Set</span> <span class=\"o\">(</span><span class=\"n\">κ</span> <span class=\"n\">i</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">κ</span> <span class=\"n\">i</span> <span class=\"bp\">→</span> <span class=\"n\">Set</span> <span class=\"bp\">Ω</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"bp\">⋂</span> <span class=\"n\">i</span> <span class=\"bp\">∈</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"bp\">⋂</span> <span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">κ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"bp\">=</span> <span class=\"bp\">⋂</span> <span class=\"n\">ij</span> <span class=\"bp\">∈</span> <span class=\"o\">(</span><span class=\"n\">Set.Sigma</span> <span class=\"n\">S</span> <span class=\"n\">T</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"n\">ij.1</span> <span class=\"n\">ij.2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">Finset</span>\n</code></pre></div>\n<p>I have used a similar theorem <code>Finset.prod_sigma</code> which worked perfectly, but my search Moogle, Loogle, docs, and github repository didn't find anything for the above</p>",
        "id": 406419639,
        "sender_full_name": "llllvvuu",
        "timestamp": 1701911230
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"607118\">llllvvuu</span> has marked this topic as resolved.</p>",
        "id": 406431772,
        "sender_full_name": "Notification Bot",
        "timestamp": 1701916300
    },
    {
        "content": "<p><code>simp</code> should prove both of these</p>",
        "id": 406486235,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1701935391
    },
    {
        "content": "<p><code>simp</code> doesn't do it right away, but <code>aesop?</code> does, showing the following setup:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">apply</span> <span class=\"n\">Set.ext</span>\n<span class=\"n\">intro</span> <span class=\"n\">x</span>\n<span class=\"n\">constructor</span> <span class=\"bp\">&lt;;&gt;</span>\n<span class=\"n\">simp_all</span>\n</code></pre></div>",
        "id": 406537954,
        "sender_full_name": "llllvvuu",
        "timestamp": 1701954140
    },
    {
        "content": "<p><code>ext1; simp</code> is generally a good way to prove equality of sets (and this is roughly what <code>aesop</code> produced here). <code>ext1</code> instead of <code>ext</code> is useful to avoid overzealous ext, for example when the sets are on a product space.</p>",
        "id": 406540123,
        "sender_full_name": "Rémy Degenne",
        "timestamp": 1701954917
    },
    {
        "content": "<p>Please use <code>ext : 1</code> rather than <code>ext1</code>!</p>",
        "id": 406540179,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1701954943
    },
    {
        "content": "<p>Is ext1 deprecated? TIL!</p>",
        "id": 406540284,
        "sender_full_name": "Rémy Degenne",
        "timestamp": 1701954970
    },
    {
        "content": "<p>It's an internal in the definition of <code>ext</code>. I don't think it's officially deprecated, but nobody should have ever known about it in the first place.</p>",
        "id": 406540447,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1701955044
    },
    {
        "content": "<p>The advantage of the <code>ext : 1</code> spelling is that you can tweak it to <code>ext : 2</code>, <code>ext : 3</code>, etc... while <code>ext2</code>, <code>ext3</code> don't exist.</p>",
        "id": 406540600,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1701955088
    },
    {
        "content": "<p>Yes I knew about the <code>ext : n</code> way of writing it. I don't think I ever needed to write it with an explicit <code>n &gt; 1</code>.<br>\n I may have pushed a number of <code>ext1</code> to Mathlib and PFR. I'll switch to <code>ext : 1</code> from now on!</p>",
        "id": 406541189,
        "sender_full_name": "Rémy Degenne",
        "timestamp": 1701955310
    }
]