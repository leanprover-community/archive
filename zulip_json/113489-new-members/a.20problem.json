[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Real.Basic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">log</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">exp</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"n\">log</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">exp</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"n\">h₀</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span><span class=\"n\">exp</span> <span class=\"n\">a</span> <span class=\"o\">:=</span><span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n  <span class=\"k\">have</span> <span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span><span class=\"n\">exp</span> <span class=\"n\">b</span> <span class=\"o\">:=</span><span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n  <span class=\"n\">apply</span> <span class=\"o\">(</span><span class=\"n\">log_le_log</span> <span class=\"n\">h₀</span> <span class=\"n\">h₁</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mpr</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>Does anyone know how to complete this code？</p>",
        "id": 375652342,
        "sender_full_name": "tsuki  hao",
        "timestamp": 1689470959
    },
    {
        "content": "<p>I would guess that there will be a lemma called something like <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Real.exp_pos#doc\">docs#Real.exp_pos</a> which might help?</p>",
        "id": 375652852,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1689471237
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Analysis.SpecialFunctions.Log.Basic</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">Real</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">log</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">exp</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"n\">log</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">exp</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">exp</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">positivity</span>\n  <span class=\"k\">have</span> <span class=\"n\">hb</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">exp</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">positivity</span>\n  <span class=\"n\">apply</span> <span class=\"o\">(</span><span class=\"n\">strictMonoOn_log.lt_iff_lt</span> <span class=\"n\">ha</span> <span class=\"n\">hb</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mpr</span>\n  <span class=\"n\">simpa</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">Real</span>\n</code></pre></div>",
        "id": 375654339,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1689472194
    },
    {
        "content": "<p>One-liner:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Analysis.SpecialFunctions.Log.Basic</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">Real</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">log</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">exp</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"n\">log</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">exp</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">log_lt_log</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">positivity</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">simpa</span><span class=\"o\">)</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">Real</span>\n</code></pre></div>",
        "id": 375654728,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1689472425
    },
    {
        "content": "<p>In mathlib, to cut down on variable use and generalise, your theorem would be written like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Analysis.SpecialFunctions.Log.Basic</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">Real</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">strictMono_softplus</span> <span class=\"o\">:</span> <span class=\"n\">StrictMono</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">log</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">exp</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">StrictMono</span>\n  <span class=\"n\">intros</span>\n  <span class=\"n\">exact</span> <span class=\"n\">log_lt_log</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">positivity</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">simpa</span><span class=\"o\">)</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">Real</span>\n</code></pre></div>",
        "id": 375655654,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1689472959
    },
    {
        "content": "<p>Come on <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> <span class=\"user-mention\" data-user-id=\"598052\">@Jeremy Tan</span>, this is not the modern way to do this!</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Analysis.SpecialFunctions.Log.Basic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Real</span>\n\n<span class=\"c1\">-- missing `gcongr` lemmas</span>\n<span class=\"n\">alias</span> <span class=\"n\">log_le_log</span> <span class=\"bp\">↔</span> <span class=\"n\">_</span> <span class=\"n\">log_le_log_of_le</span>\n<span class=\"n\">alias</span> <span class=\"n\">exp_le_exp</span> <span class=\"bp\">↔</span> <span class=\"n\">_</span> <span class=\"n\">exp_le_exp_of_le</span>\n<span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"n\">gcongr</span><span class=\"o\">]</span> <span class=\"n\">log_le_log_of_le</span> <span class=\"n\">exp_le_exp_of_le</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">log</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">exp</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"n\">log</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">exp</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">gcongr</span>\n</code></pre></div>",
        "id": 375656660,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1689473637
    },
    {
        "content": "<p>The newcomer probably doesn't know what <code>gcongr</code> does</p>",
        "id": 375656766,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1689473696
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">log</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">exp</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"n\">log</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">exp</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rel</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>if you prefer.  If you can understand <code>rw</code> then you can understand <code>gcongr</code>.</p>",
        "id": 375656822,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1689473730
    },
    {
        "content": "<p>Thank you all for your help, I can now solve this problem!</p>",
        "id": 375658382,
        "sender_full_name": "tsuki  hao",
        "timestamp": 1689474728
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Real.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Nat.Prime</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Real</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">S04</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n<span class=\"kd\">example</span>  <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h₀</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"n\">y</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">y</span> <span class=\"bp\">∧</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">constructor</span>\n  <span class=\"bp\">·</span> <span class=\"n\">assumption</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h</span>\n  <span class=\"n\">apply</span> <span class=\"n\">h₁</span>\n  <span class=\"n\">rw</span><span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>Does anyone know why I wrote this wrong?</p>",
        "id": 375872809,
        "sender_full_name": "tsuki  hao",
        "timestamp": 1689561464
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"631681\">@tsuki  hao</span>, that seems fine to me. Can you explain why you think something is wrong?</p>",
        "id": 375880105,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1689565536
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/113489-new-members/topic/a.20problem/near/375880105\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"631681\">tsuki  hao</span>, that seems fine to me. Can you explain why you think something is wrong?</p>\n</blockquote>\n<p>I'm sorry this is my problem, there is an error in another part.</p>",
        "id": 375880446,
        "sender_full_name": "tsuki  hao",
        "timestamp": 1689565698
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">convergesTo_const</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ConvergesTo</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">↦</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">ε</span> <span class=\"n\">εpos</span>\n  <span class=\"n\">use</span> <span class=\"mi\">0</span>\n  <span class=\"n\">intro</span> <span class=\"n\">n</span> <span class=\"n\">nge</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">sub_self</span><span class=\"o\">,</span> <span class=\"n\">abs_zero</span><span class=\"o\">]</span>\n  <span class=\"n\">apply</span> <span class=\"n\">εpos</span>\n</code></pre></div>\n<p>Can I ask why this gives 'tactic 'introN' failed' error</p>",
        "id": 375880834,
        "sender_full_name": "tsuki  hao",
        "timestamp": 1689565898
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>, please! :-)</p>",
        "id": 375887618,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1689569608
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/113489-new-members/topic/a.20problem/near/375887618\">said</a>:</p>\n<blockquote>\n<p><a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>, please! :-)</p>\n</blockquote>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Real.Basic</span>\n<span class=\"kn\">open</span> <span class=\"n\">Real</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">ConvergesTo</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">∀</span> <span class=\"n\">ε</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">N</span> <span class=\"o\">,</span><span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"bp\">≥</span> <span class=\"n\">N</span><span class=\"o\">,</span> <span class=\"bp\">|</span><span class=\"n\">s</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">a</span><span class=\"bp\">|&lt;</span> <span class=\"n\">ε</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">convergesTo_const</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ConvergesTo</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">↦</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">ε</span> <span class=\"n\">εpos</span>\n  <span class=\"n\">use</span> <span class=\"mi\">0</span>\n  <span class=\"n\">intro</span> <span class=\"n\">n</span> <span class=\"n\">nge</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">sub_self</span><span class=\"o\">,</span> <span class=\"n\">abs_zero</span><span class=\"o\">]</span>\n  <span class=\"n\">apply</span> <span class=\"n\">εpos</span>\n</code></pre></div>\n<p>Sorry, and can I ask what it mean by use 0 here</p>",
        "id": 375896629,
        "sender_full_name": "tsuki  hao",
        "timestamp": 1689573667
    },
    {
        "content": "<p>If your goal is an exists (there exists an X such that blah(X)) then <code>use 0</code> is the claim that X=0 works so your goal changes to blah(0). Note that it can turn true goals into false ones if used incorrectly.</p>",
        "id": 375900410,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1689575101
    },
    {
        "content": "<p>Does anyone know how to formulate the problem: All elements on the intersection of the finite group and the unit group of the complex filed have modulo 1?</p>",
        "id": 376849336,
        "sender_full_name": "tsuki  hao",
        "timestamp": 1689830217
    },
    {
        "content": "<p>Do you mean</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">Subgroup</span> <span class=\"o\">(</span><span class=\"n\">Units</span> <span class=\"n\">ℂ</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">hG</span> <span class=\"o\">:</span> <span class=\"n\">Finite</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Units</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">‖</span><span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span><span class=\"bp\">‖</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 376849825,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1689830429
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/113489-new-members/topic/a.20problem/near/376849825\">said</a>:</p>\n<blockquote>\n<p>Do you mean</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">Subgroup</span> <span class=\"o\">(</span><span class=\"n\">Units</span> <span class=\"n\">ℂ</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">hG</span> <span class=\"o\">:</span> <span class=\"n\">Finite</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Units</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">‖</span><span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span><span class=\"bp\">‖</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>Thank you very much! That's exactly what I meant!</p>",
        "id": 376850784,
        "sender_full_name": "tsuki  hao",
        "timestamp": 1689830858
    },
    {
        "content": "<p>May I ask if there is a theorem that any element in a finite group，its order is bounded in lean?</p>",
        "id": 376860101,
        "sender_full_name": "tsuki  hao",
        "timestamp": 1689834432
    },
    {
        "content": "<p>Sure there are many theorems in mathlib about orders of elements. Why don't you figure out how to search the library yourself? Click on the magnifying glass on GitHub and type \"order of element\" or \"order of the element\" or \"order of an element\" and see what you find. Don't ever seem to get any results? Click on the three dots near the search window and then click on the blue cog to make it not blue.</p>",
        "id": 376862214,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1689835169
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/a.20problem/near/376862214\">said</a>:</p>\n<blockquote>\n<p>Sure there are many theorems in mathlib about orders of elements. Why don't you figure out how to search the library yourself? Click on the magnifying glass on GitHub and type \"order of element\" or \"order of the element\" or \"order of an element\" and see what you find. Don't ever seem to get any results? Click on the three dots near the search window and then click on the blue cog to make it not blue.</p>\n</blockquote>\n<p>Thank you!</p>",
        "id": 376880153,
        "sender_full_name": "tsuki  hao",
        "timestamp": 1689840136
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"631681\">tsuki  hao</span> has marked this topic as resolved.</p>",
        "id": 376880881,
        "sender_full_name": "Notification Bot",
        "timestamp": 1689840295
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"634308\">Billlie Franch</span> has marked this topic as unresolved.</p>",
        "id": 376899592,
        "sender_full_name": "Notification Bot",
        "timestamp": 1689844119
    },
    {
        "content": "<p>If you want the answer, I proved this just yesterday for my project.</p>",
        "id": 376927315,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1689849589
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/113489-new-members/topic/a.20problem/near/376927315\">said</a>:</p>\n<blockquote>\n<p>If you want the answer, I proved this just yesterday for my project.</p>\n</blockquote>\n<p>That would be great ！ can I have a look at your proof？</p>",
        "id": 377154995,
        "sender_full_name": "tsuki  hao",
        "timestamp": 1689905381
    },
    {
        "content": "<p>Here is an informal outline of the proof:</p>\n<ul>\n<li>use <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=exists_pow_eq_one#doc\">docs#exists_pow_eq_one</a> and <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=isOfFinOrder_iff_coe#doc\">docs#isOfFinOrder_iff_coe</a> to show that <code>x</code> has finite order.</li>\n<li>since <code>x ^ n = 1</code>, we have <code>‖x‖ ^ n = 1</code>, thus <code>‖x‖ = 1</code></li>\n</ul>",
        "id": 377178104,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1689917300
    },
    {
        "content": "<p>The second step could be formulated as</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">IsOfFinOrder.norm_eq_one</span> <span class=\"o\">{</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">NormedDivisionRing</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">K</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">IsOfFinOrder</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"bp\">‖</span><span class=\"n\">a</span><span class=\"bp\">‖</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"n\">_</span>\n</code></pre></div>",
        "id": 377178355,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1689917423
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"631681\">tsuki  hao</span> has marked this topic as resolved.</p>",
        "id": 377204971,
        "sender_full_name": "Notification Bot",
        "timestamp": 1689926183
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span> <a href=\"#narrow/stream/113489-new-members/topic/.E2.9C.94.20a.20problem/near/377178104\">said</a>:</p>\n<blockquote>\n<p>Here is an informal outline of the proof:</p>\n<ul>\n<li>use <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=exists_pow_eq_one#doc\">docs#exists_pow_eq_one</a> and <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=isOfFinOrder_iff_coe#doc\">docs#isOfFinOrder_iff_coe</a> to show that <code>x</code> has finite order.</li>\n<li>since <code>x ^ n = 1</code>, we have <code>‖x‖ ^ n = 1</code>, thus <code>‖x‖ = 1</code></li>\n</ul>\n</blockquote>\n<p>Thank you very much!</p>",
        "id": 377205026,
        "sender_full_name": "tsuki  hao",
        "timestamp": 1689926204
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.Group.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.GroupTheory.Subgroup.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Real.Basic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">∣</span> <span class=\"n\">b</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">∣</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>Can someone prove this proposition?</p>",
        "id": 378134012,
        "sender_full_name": "tsuki  hao",
        "timestamp": 1690204028
    },
    {
        "content": "<p>What have you tried so far? The point is to prove that <code>b - (b - 1) = 1</code>. This is surely in the library in some form or another, it's even possible that <code>exact?</code> is able to do it.</p>",
        "id": 378134629,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1690204132
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"130384\">Riccardo Brasca</span> <a href=\"#narrow/stream/113489-new-members/topic/a.20problem/near/378134629\">said</a>:</p>\n<blockquote>\n<p>What have you tried so far? The point is to prove that <code>b - (b - 1) = 1</code>. This is surely in the library in some form or another, it's even possible that <code>exact?</code> is able to do it.</p>\n</blockquote>\n<p>I tried apply? and exact? but didn’t find the tactic I want, I want to use rw but I don’t know how to use it</p>",
        "id": 378136601,
        "sender_full_name": "tsuki  hao",
        "timestamp": 1690204460
    },
    {
        "content": "<p>Have you tried to prove <code>b - (b - 1) = 1</code> in isolation?</p>",
        "id": 378136684,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1690204477
    },
    {
        "content": "<blockquote>\n<p>This is surely in the library in some form or another</p>\n</blockquote>\n<p>Not in the form you stated, as it's false when <code>b = 0</code>!</p>",
        "id": 378136814,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1690204503
    },
    {
        "content": "<p>Ops, you're right</p>",
        "id": 378137166,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1690204571
    },
    {
        "content": "<p>so in fact the example as stated can't be proved, as a=2 and b=0 is a counterexample.</p>",
        "id": 378143040,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1690205413
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.Group.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.GroupTheory.Subgroup.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Real.Basic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">∣</span> <span class=\"n\">b</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">∣</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"gr\">sorry</span>\n  <span class=\"n\">rw</span><span class=\"o\">[</span><span class=\"n\">h1</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n  <span class=\"n\">exact</span> <span class=\"n\">h</span>\n</code></pre></div>\n<p>Is it not possible to prove it in this form? I don’t understand it.</p>",
        "id": 378143968,
        "sender_full_name": "tsuki  hao",
        "timestamp": 1690205554
    },
    {
        "content": "<p>If b = 0, then b - (b - 1) = 0 - (0 - 1) = 0 - 0 = 0</p>",
        "id": 378144979,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1690205720
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"307953\">Ruben Van de Velde</span> <a href=\"#narrow/stream/113489-new-members/topic/a.20problem/near/378144979\">said</a>:</p>\n<blockquote>\n<p>If b = 0, then b - (b - 1) = 0 - (0 - 1) = 0 - 0 = 0</p>\n</blockquote>\n<p>Thank you!</p>",
        "id": 378145094,
        "sender_full_name": "tsuki  hao",
        "timestamp": 1690205746
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"631681\">tsuki  hao</span> has marked this topic as resolved.</p>",
        "id": 378145119,
        "sender_full_name": "Notification Bot",
        "timestamp": 1690205750
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> has marked this topic as unresolved.</p>",
        "id": 378289604,
        "sender_full_name": "Notification Bot",
        "timestamp": 1690238224
    },
    {
        "content": "<p>Note that on the original question, <code>slim_check</code> immediately identifies the problem:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.Group.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.GroupTheory.Subgroup.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Real.Basic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">∣</span> <span class=\"n\">b</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">∣</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">slim_check</span>\n</code></pre></div>",
        "id": 378289639,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1690238242
    },
    {
        "content": "<p>We really need to be running <code>exact?</code> and <code>slim_check</code> in the infoview automatically whenever your cursor rests at a <code>sorry</code>. :-)</p>",
        "id": 378289677,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1690238282
    },
    {
        "content": "<p>And <code>simp</code> and <code>aesop</code></p>",
        "id": 378291167,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1690239062
    },
    {
        "content": "<p>How about a zulip bot that does that?</p>",
        "id": 378294105,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1690240566
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/113489-new-members/topic/a.20problem/near/378289639\">said</a>:</p>\n<blockquote>\n<p>Note that on the original question, <code>slim_check</code> immediately identifies the problem:</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.Group.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.GroupTheory.Subgroup.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Real.Basic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">∣</span> <span class=\"n\">b</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">∣</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">slim_check</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>Thank you!</p>",
        "id": 378305032,
        "sender_full_name": "tsuki  hao",
        "timestamp": 1690245782
    },
    {
        "content": "<p>I would like to ask the three kinds of brackets in lean4, what are the uses of (), [], and {} respectively</p>",
        "id": 378987929,
        "sender_full_name": "Billlie Franch",
        "timestamp": 1690427504
    },
    {
        "content": "<ul>\n<li>() are for explicit arguments, you pass these normally to a function like <code>f x</code></li>\n<li>{} are for implicit arguments, you don't pass these yourself, lean figures them out as though you wrote <code>f _</code></li>\n<li>[] are for instance implicit arguments, you also don't pass these manually but they are found by type class inference instead of unification</li>\n<li>{{}} are semi-implicit arguments, these act like implicits unless you use the term unapplied, meaning that <code>f</code> acts like <code>f</code> and <code>f x</code> acts like <code>f _ x</code> if the first argument is semi-implicit and the second argument is explicit</li>\n</ul>",
        "id": 378988125,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1690427645
    },
    {
        "content": "<p>if you put <code>@</code> before a function name then all parameters are treated as explicit</p>",
        "id": 378988248,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1690427730
    },
    {
        "content": "<p>and you can always pass a parameter by name as in <code>f (a := x)</code> even if it is implicit</p>",
        "id": 378988266,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1690427754
    },
    {
        "content": "<p>I would like to ask if there is any trick to use [] and &lt;&gt; when using <code>rintro</code><br>\nIn addition, can I ask if there is any useful tactic in proving the set contains relationship<br>\nThanks</p>",
        "id": 379014590,
        "sender_full_name": "Billlie Franch",
        "timestamp": 1690437489
    }
]