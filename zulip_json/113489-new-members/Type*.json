[
    {
        "content": "<p>Hi, thank you all for the awesome work done on Lean. I have been messing with it for the past month or so, and I'm absolutely amazed by it. Quick question: what does <code>Type*</code> mean? I haven't encountered an asterisk like that before, and first encountered it when reading Logic and Proof after doing all of the exercises in TPiL.</p>",
        "id": 184686187,
        "sender_full_name": "Enrico Borba",
        "timestamp": 1578000788
    },
    {
        "content": "<p>It usually means <code>Type u</code> where <code>u</code> is a universe variable. Basically it lets Lean choose the universe, and it usually chooses the most polymorphic option.</p>",
        "id": 184686474,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1578000984
    },
    {
        "content": "<p>Oh interesting. Is this a more general notation that can be used elsewhere or is it specific to being a placeholder for universes?</p>",
        "id": 184686544,
        "sender_full_name": "Enrico Borba",
        "timestamp": 1578001067
    },
    {
        "content": "<p>I think it's just <code>Type*</code> and <code>Sort*</code>. I think <code>Type*</code> might be the same as <code>Type _</code> and underscores can be used in a lot of places</p>",
        "id": 184689349,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1578003843
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110044\">@Chris Hughes</span>  Does this means that if I don't want to go through the universe details, then I can use Type * or Type _ ?</p>",
        "id": 184715911,
        "sender_full_name": "Mukesh Tiwari",
        "timestamp": 1578037050
    },
    {
        "content": "<p>Yes. <code>Type*</code> is what is used most of the time to avoid having to think about universes.</p>",
        "id": 184718394,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1578040803
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110044\">@Chris Hughes</span>  Sorry for disturbing you, but could you please tell me that why the second one is not accepted by Lean? <br>\nThis is accepted by Lean:</p>\n<div class=\"codehilite\"><pre><span></span>universe u\nclass Associative {G : Type u} (f : G → G → G) : Type u :=\n(Hassoc : ∀ x y z : G, f (f x y) z = f x (f y z))\n</pre></div>\n\n\n<p>But this one not:</p>\n<div class=\"codehilite\"><pre><span></span>class Associative {G : Type _} (f : G → G → G) : Type _ :=\n(Hassoc : ∀ x y z : G, f (f x y) z = f x (f y z))\n</pre></div>",
        "id": 184828115,
        "sender_full_name": "Mukesh Tiwari",
        "timestamp": 1578188142
    },
    {
        "content": "<p>I guess I was wrong about <code>Type*</code> being the same as <code>Type _</code>. <code>Type _</code> will probably try to infer from the context what the universe should be - it will fill it in with whatever it is forced to be, and will fail if there's nothing forcing it to be a particular universe. and <code>Type*</code> will fill it in with something sensible basically. I don't know the precise algorithms.</p>",
        "id": 184828333,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1578188545
    },
    {
        "content": "<p>These are not the same; one uses <code>Type u</code> and the other uses <code>Type _</code>. I'm pretty sure that <code>Type*</code> and <code>Type _</code> are identical</p>",
        "id": 184829264,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1578190630
    },
    {
        "content": "<p>The error message makes it clear what the problem is:</p>\n<div class=\"codehilite\"><pre><span></span>failed to add declaration &#39;Associative&#39; to environment, type has metavariables\n</pre></div>\n\n\n<p>It successfully unified, but it wasn't completely able to pin down the target type because this is also valid:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">universe</span> <span class=\"n\">u</span>\n<span class=\"n\">class</span> <span class=\"n\">Associative</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">G</span> <span class=\"bp\">→</span> <span class=\"n\">G</span> <span class=\"bp\">→</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">37</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">Hassoc</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"n\">z</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">y</span> <span class=\"n\">z</span><span class=\"o\">))</span>\n</pre></div>",
        "id": 184829336,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1578190770
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span>  Thanks for the answer. The purpose of the question was to avoid universe hierarchy, and let Lean figured out the universe; hence, I left the return type as Type _.  If I do not mention any return type, then it is fine. </p>\n<div class=\"codehilite\"><pre><span></span>class Associative {G : Type _} (f : G → G → G) :=\n(Hassoc : ∀ x y z : G, f (f x y) z = f x (f y z))\n\n#check Associative\nreturns Associative : (?M_1 → ?M_1 → ?M_1) → Type\n</pre></div>\n\n\n<p>Coming back to my question (also because of my Coq background), if I want to avoid the universe hierarchy, then what is the best way to go?</p>",
        "id": 184834481,
        "sender_full_name": "Mukesh Tiwari",
        "timestamp": 1578201605
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"239476\">@Mukesh Tiwari</span> This technique almost always works, but inductive types are special because you actually have to make a choice of what universe they should live in; the target type is only lower bounded, and different choices above that lead to different types. For definitions and theorems, the universe is uniquely determined from the inputs so you can use <code>Type*</code> consistently and lean will just figure everything out.</p>",
        "id": 184847581,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1578228349
    }
]