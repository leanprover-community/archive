[
    {
        "content": "<p>I'm currently making a second attempt to learn Lean. I've found it very challenging so far, as all resources jump into explaining various things within a certain context without explaining the context, as if assuming that the reader is already familiar with Lean. I've searched through the <em>Lean Manual</em> and <em>Theorem Proving in Lean 4</em> and couldn't find any explanation of the keywords <em>example</em>, <em>lemma</em> and <em>theorem</em>. Is there some documentation available somewhere?</p>",
        "id": 382319641,
        "sender_full_name": "Fredrik",
        "timestamp": 1691316876
    },
    {
        "content": "<p>The <em>Tour of Lean</em> in the <em>Lean Manual</em> is a striking example. Even before the chapter explaining how to install Lean, it assumes that the reader already knows Lean well enough to be able to read a several pages long module showcasing a variety of language features that are not explained in the manual.</p>",
        "id": 382320867,
        "sender_full_name": "Fredrik",
        "timestamp": 1691317204
    },
    {
        "content": "<p><code>theorem</code> is introduced here in tpil4: <a href=\"https://leanprover.github.io/theorem_proving_in_lean4/propositions_and_proofs.html\">https://leanprover.github.io/theorem_proving_in_lean4/propositions_and_proofs.html</a></p>\n<p><code>lemma</code> is just a synonym for <code>theorem</code></p>\n<p><code>example</code> is introduced here: <a href=\"https://leanprover.github.io/theorem_proving_in_lean4/propositions_and_proofs.html?highlight=example#conjunction\">https://leanprover.github.io/theorem_proving_in_lean4/propositions_and_proofs.html?highlight=example#conjunction</a></p>",
        "id": 382320973,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1691317232
    },
    {
        "content": "<p>I'm guessing the intention of the manual is more \"this is what lean looks like\" than expecting a newcomer to understand it all</p>",
        "id": 382321627,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1691317401
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"307953\">Ruben Van de Velde</span> Thank you. It wasn't obvious that these are the places these concepts are introduced.</p>",
        "id": 382322244,
        "sender_full_name": "Fredrik",
        "timestamp": 1691317568
    },
    {
        "content": "<p>On this note, is <code>theorem</code> also the same as <code>def</code>? The effect seems to be very similar.</p>",
        "id": 382333891,
        "sender_full_name": "Adomas Baliuka",
        "timestamp": 1691320608
    },
    {
        "content": "<p>From my first link:</p>\n<blockquote>\n<p>Note that the theorem command is really a version of the def command: under the propositions and types correspondence, proving the theorem p → q → p is really the same as defining an element of the associated type. To the kernel type checker, there is no difference between the two.</p>\n</blockquote>",
        "id": 382334679,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1691320816
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"638770\">@Fredrik</span>, perhaps if you describe your background a little (programming, CS, mathematics research?) we can point you to better starting places.</p>",
        "id": 382336033,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1691321196
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> Good point. My background is in systems development, programming languages and compilers, mainly languages of practical use for systems development (C, Rust, Python, etc.) as opposed to languages that are there just to be theoretically interesting for mathematicians (Haskell), and I want to use Lean for proving the correctness of programs. Anything that uses mathematical notation or vocabulary tends to confuse me, but when it gets translated to a domain that I understand, I tend to see how simple it is.</p>\n<p>One thing that made me start to understand Lean is the insight that a proposition is the same thing as a set, and a set is the same thing as a type in a programming language, and a proof is the same thing as a member of a set, and a member of a set is the same thing as a value of a type, and constructing a proof of a proposition is the same thing as producing a value of a type by using definitions that have already been made, either directly or calling them as a function that produces a value of one type from a value of another type.</p>",
        "id": 382351071,
        "sender_full_name": "Fredrik",
        "timestamp": 1691325250
    },
    {
        "content": "<p>I think the proper starting point is the book <a href=\"https://leanprover.github.io/functional_programming_in_lean/\">Functional Programming in Lean</a>.  It is by far the most accessible resource.</p>",
        "id": 382722971,
        "sender_full_name": "Ioannis Konstantoulas",
        "timestamp": 1691431972
    },
    {
        "content": "<p>Accessible is very much in the eye of the beholder! I would say that mathematics in Lean is far more accessible, but then I am a professional mathematician with very little programming experience.</p>",
        "id": 382726333,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1691432776
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"577163\">Ioannis Konstantoulas</span> That book was not yet written when I made my first attempt to learn Lean, so it's very helpful that you pointed it out. This sentence (as well as the rest of the paragraph) in the introduction appeals to me:</p>\n<blockquote>\n<p>This book is intended for programmers who want to learn Lean, but who have not necessarily used a functional programming language before.</p>\n</blockquote>",
        "id": 382974115,
        "sender_full_name": "Fredrik",
        "timestamp": 1691504235
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> You're the one who made the natural numbers game. <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span> Thank you. I studied the whole thing and I liked it a lot. It was however very confusing at first to write the code that goes inside the proofs without understanding the basic structure of Lean that surrounds the proofs. I would have got started much quicker if I had first understood the basic structure of a Lean file.</p>",
        "id": 382975714,
        "sender_full_name": "Fredrik",
        "timestamp": 1691504518
    },
    {
        "content": "<p>I had the opposite experience, personally - I found it much easier to get started with the NNG focusing on just the proofs</p>",
        "id": 382979088,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1691505174
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"307953\">Ruben Van de Velde</span> I suppose it depends on your background. If you're familiar with doing proofs by hand, the NNG focuses on the relevant parts of Lean, whereas as someone who understands programming languages well, but can't do a proof by hand, I can figure things out by first knowing the language and what the computer will do with it.</p>",
        "id": 383015163,
        "sender_full_name": "Fredrik",
        "timestamp": 1691512007
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"638770\">@Fredrik</span> I would recommend <a href=\"https://leanprover.github.io/theorem_proving_in_lean/\">#tpil</a> if you want to see the details of the terms. It's been empirically observed for years on this site that there are many users (typically with computer science backgrounds) who really want to understand the concept of what a Lean type and term are and how to write code, and will move on to tactic from there; conversely there are also many users (typically with mathematics backgrounds) who want to see how an ITP does mathematics -- how it <em>thinks</em> about mathematics -- and how to use tactics, before ever caring about the underlying type theory (mathematicians typically are taught mathematics with no explanation of the foundations). One big difference is when tactics are introduced; TPIL doesn't introduce them until chapter 5 whereas NNG introduces them immediately, for example. One question which might distinguish the CS people from the maths people -- do you care about the actual term produced by a tactic, or do you just want to apply the technique which it has packaged up and then move on to the next line of the proof?</p>",
        "id": 383023510,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1691513897
    },
    {
        "content": "<p>ooh the linkifier is still linking to the Lean 3 version so it seems: I mean this <a href=\"https://leanprover.github.io/theorem_proving_in_lean4/\">https://leanprover.github.io/theorem_proving_in_lean4/</a> .</p>",
        "id": 383023661,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1691513946
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"638715\">ab</span> <a href=\"#narrow/stream/113489-new-members/topic/Lean.20basics.20documentation/near/382333891\">said</a>:</p>\n<blockquote>\n<p>On this note, is <code>theorem</code> also the same as <code>def</code>? The effect seems to be very similar.</p>\n</blockquote>\n<p>If I remember correctly, <code>theorem</code> is the same as<code>noncomputable def</code></p>",
        "id": 383049576,
        "sender_full_name": "Niels Voss",
        "timestamp": 1691520588
    },
    {
        "content": "<p>no, they are different</p>",
        "id": 383051033,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1691520924
    },
    {
        "content": "<p><del>I believe <code>noncomputable</code> is an independent setting</del></p>",
        "id": 383051095,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1691520944
    },
    {
        "content": "<p><code>theorem</code> is closest to <code>@[irreducible] def</code>, but it has different elaboration behavior (the type is required and the body cannot influence the type)</p>",
        "id": 383051412,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1691521016
    },
    {
        "content": "<p>Actually you are right, <code>theorem</code> implies <code>noncomputable</code></p>",
        "id": 383052057,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1691521179
    }
]