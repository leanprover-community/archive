[
    {
        "content": "<p>I am brand new in the world of proof assistants. Is lean suitable for proving the correctness of simple graph algorithms such as Dijkstra's shortest path algorithm?</p>",
        "id": 390043777,
        "sender_full_name": "Raphael",
        "timestamp": 1694273239
    },
    {
        "content": "<p>Right now I think the answer is \"yes in theory, but in practice not many people are working on this kind of question\"</p>",
        "id": 390044772,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1694273911
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"648306\">Raphael</span> <a href=\"#narrow/stream/113489-new-members/topic/Lean.20proofs.20of.20graph.20algorithms/near/390043777\">said</a>:</p>\n<blockquote>\n<p>I am brand new in the world of proof assistants. Is lean suitable for proving the correctness of simple graph algorithms such as Dijkstra's shortest path algorithm?</p>\n</blockquote>\n<p>I am working on this. Some very very basic stuff is already in std or mathlib. Basic data structures are already in std. You will find some useful graph theoretic definitions and results in the combinatorics folder of Mathlib. If you are looking for a guide, see these books for <a href=\"https://softwarefoundations.cis.upenn.edu/vfa-current/toc.html\">Coq</a> and <a href=\"https://functional-algorithms-verified.org/\">Isabelle</a> (the second one is still a WIP apparently)</p>\n<p>The biggest challenge is to translate textbook graph theory definitions into <strong>convenient</strong> inductive definitions, especially when you want to identify subgraphs in a graph. So even if you were to ignore the \"algorithmic\" aspects and just verify the transformation being performed, the definitions get unwieldy very quickly.  But this is not a lean specific issue.</p>",
        "id": 390045175,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1694274266
    },
    {
        "content": "<p>Once you get past this barrier, the next big headache is how sparse algorithms papers can be in details that are very important for you to even check the proof yourself with pen and paper.</p>",
        "id": 390045360,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1694274471
    },
    {
        "content": "<p>If you are new to this, I would recommend starting with string algorithms. They have a much simpler structure and there has been a lot of interesting work in this area in recent times, in particular on levenshtein distance.</p>",
        "id": 390046586,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1694275581
    },
    {
        "content": "<p>Thanks so much. String algorithms could be very interesting</p>",
        "id": 390050024,
        "sender_full_name": "Raphael",
        "timestamp": 1694278632
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"466334\">@Shreyas Srinivas</span>, this question was also asked on Stack Exchange at <a href=\"https://proofassistants.stackexchange.com/questions/2437/lean-proofs-for-graph-algorithms\">https://proofassistants.stackexchange.com/questions/2437/lean-proofs-for-graph-algorithms</a> --- any chance you'd be interested in answering there as well?</p>\n<p>(I think it's helpful for Lean generally if we have answers up in public places. The zulip is great, but needn't be everything!)</p>",
        "id": 390088689,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1694313161
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> : A stackexchange answer would have to be written much better than what I have currently written. I have too much on my plate at the moment to do anything today. But maybe sometime this week I will try to construct a nice stackexchange answer.</p>\n<p>Another issue: Termination checking. Lean (and Coq too I believe) termination checks recursive functions which meet a certain positivity criteria which I'd say roughly corresponds to top-down recursion. Most algorithms work bottom up. For example dijkstra's algorithm constructs the shortest path subgraph from a starting node. So now the onus is on the user to prove that this algorithm that is producing a larger and larger subgraph eventually terminates because the input graph is finite (it wouldn't if the input graph was not finite).</p>",
        "id": 390120832,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1694336562
    },
    {
        "content": "<p>BTW, if you are handling modern string algorithms for edit distance, you might want to formalize some of the math in this paper,  in particular the stuff about the so-called seaweed products of permutation matrices: <a href=\"https://link.springer.com/article/10.1007/s00453-013-9830-z\">https://link.springer.com/article/10.1007/s00453-013-9830-z</a></p>",
        "id": 390394751,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1694469647
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 390395151,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1694469784
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 390395202,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1694469808
    },
    {
        "content": "<p>The (min, +) matrix products stuff is also useful in other places</p>",
        "id": 390395206,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1694469808
    }
]