[
    {
        "content": "<p>Is there a way to use calc to proof </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">aeval</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"mi\">3</span><span class=\"o\">)))</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"bp\">^</span> <span class=\"mi\">3</span> <span class=\"bp\">-</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n</code></pre></div>",
        "id": 405701207,
        "sender_full_name": "Ludwig Monnerjahn",
        "timestamp": 1701640340
    },
    {
        "content": "<p><a href=\"#narrow/stream/113489-new-members/topic/proof.20aeval.20with.20calc/near/405701207\">A message</a> was moved here from <a class=\"stream-topic\" data-stream-id=\"113489\" href=\"/#narrow/stream/113489-new-members/topic/.02klzzwxh.3A0000.03.20weirdness\">#new members &gt; <code>norm_num</code> weirdness</a> by <span class=\"user-mention silent\" data-user-id=\"671805\">Ludwig Monnerjahn</span>.</p>",
        "id": 405701351,
        "sender_full_name": "Notification Bot",
        "timestamp": 1701640463
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"k\">calc</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">aeval</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"mi\">3</span><span class=\"o\">)))</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"bp\">^</span> <span class=\"mi\">3</span> <span class=\"bp\">-</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"mi\">3</span><span class=\"o\">))</span> <span class=\"bp\">^</span> <span class=\"mi\">3</span> <span class=\"bp\">-</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n  <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"bp\">-</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n  <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 405701487,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1701640565
    },
    {
        "content": "<p>when I try this I get </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"n\">invalid</span> <span class=\"bp\">'</span><span class=\"k\">calc</span><span class=\"bp\">'</span> <span class=\"n\">step</span><span class=\"o\">,</span> <span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"bp\">`</span><span class=\"n\">Trans</span><span class=\"bp\">`</span> <span class=\"kd\">instance</span>\n          <span class=\"n\">Trans</span> <span class=\"n\">Eq</span> <span class=\"n\">Eq</span> <span class=\"bp\">?</span><span class=\"n\">m.3217</span>\n</code></pre></div>",
        "id": 405701571,
        "sender_full_name": "Ludwig Monnerjahn",
        "timestamp": 1701640660
    },
    {
        "content": "<p>I'm going to need the full code including imports that triggers that error</p>",
        "id": 405701679,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1701640737
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">LeanCourse.Common</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">FiniteDimensional</span> <span class=\"n\">Polynomial</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">scoped</span> <span class=\"n\">Classical</span> <span class=\"n\">Polynomial</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">minpoly</span> <span class=\"n\">ℚ</span> <span class=\"o\">(</span><span class=\"mi\">2</span>  <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"bp\">/</span><span class=\"mi\">3</span><span class=\"o\">):</span> <span class=\"n\">ℂ</span> <span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">X</span> <span class=\"bp\">^</span> <span class=\"mi\">3</span> <span class=\"bp\">-</span> <span class=\"mi\">2</span>  <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">symm</span>\n    <span class=\"n\">apply</span> <span class=\"n\">minpoly.eq_of_irreducible_of_monic</span>\n    <span class=\"n\">case</span> <span class=\"n\">hp1</span> <span class=\"bp\">=&gt;</span> <span class=\"gr\">sorry</span>\n    <span class=\"n\">case</span> <span class=\"n\">hp2</span> <span class=\"bp\">=&gt;</span>\n        <span class=\"k\">calc</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">aeval</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"mi\">3</span><span class=\"o\">)))</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"bp\">^</span> <span class=\"mi\">3</span> <span class=\"bp\">-</span> <span class=\"mi\">2</span><span class=\"o\">)</span>\n        <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"mi\">3</span><span class=\"o\">))</span> <span class=\"bp\">^</span> <span class=\"mi\">3</span> <span class=\"bp\">-</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rfl</span>\n        <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"bp\">-</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">norm_num</span>\n        <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">norm_num</span>\n    <span class=\"n\">case</span> <span class=\"n\">hp3</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rw</span><span class=\"o\">[</span><span class=\"n\">Polynomial.Monic.def</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">apply</span> <span class=\"n\">monic_X_pow_sub_C</span><span class=\"bp\">;</span> <span class=\"n\">simp</span>\n</code></pre></div>",
        "id": 405701717,
        "sender_full_name": "Ludwig Monnerjahn",
        "timestamp": 1701640776
    },
    {
        "content": "<p>And LeanCourse.Common is </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n\n<span class=\"c1\">-- don't edit this file!</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">warningAsError</span> <span class=\"n\">false</span>\n\n<span class=\"kn\">section</span>\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Parser</span> <span class=\"n\">Tactic</span>\n\n<span class=\"n\">macro</span> <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"n\">ring</span><span class=\"o\">)</span> <span class=\"s2\">\"ring\"</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">first</span> <span class=\"bp\">|</span> <span class=\"n\">ring1</span> <span class=\"bp\">|</span> <span class=\"n\">ring_nf</span><span class=\"o\">)</span>\n\n<span class=\"n\">macro</span> <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"n\">ring_at</span><span class=\"o\">)</span> <span class=\"s2\">\"ring\"</span> <span class=\"n\">cfg</span><span class=\"o\">:</span><span class=\"n\">config</span> <span class=\"bp\">?</span> <span class=\"n\">loc</span><span class=\"o\">:</span><span class=\"n\">location</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">ring_nf</span> <span class=\"bp\">$</span><span class=\"n\">cfg</span> <span class=\"bp\">?</span> <span class=\"bp\">$</span><span class=\"n\">loc</span><span class=\"o\">)</span>\n\n<span class=\"kd\">end</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">Nat</span>\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Elab</span> <span class=\"n\">Term</span> <span class=\"n\">Meta</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">elabIdentFactorial</span> <span class=\"o\">:</span> <span class=\"n\">TermElab</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">stx</span> <span class=\"n\">expectedType</span><span class=\"bp\">?</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"k\">match</span> <span class=\"n\">stx</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">name</span><span class=\"o\">:</span><span class=\"n\">ident</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"n\">name.getId</span>\n    <span class=\"k\">if</span> <span class=\"n\">name.hasMacroScopes</span> <span class=\"k\">then</span>\n      <span class=\"c1\">-- I think this would mean the name appears from within a quote.</span>\n      <span class=\"c1\">-- I'm not sure how to properly deal with this, and it seems ok to just not.</span>\n      <span class=\"n\">throwUnsupportedSyntax</span>\n    <span class=\"k\">else</span>\n      <span class=\"n\">try</span>\n        <span class=\"n\">elabIdent</span> <span class=\"n\">stx</span> <span class=\"n\">expectedType</span><span class=\"bp\">?</span>\n      <span class=\"n\">catch</span> <span class=\"n\">e</span> <span class=\"bp\">=&gt;</span>\n        <span class=\"k\">match</span> <span class=\"n\">name</span> <span class=\"k\">with</span>\n        <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">str</span> <span class=\"n\">n</span> <span class=\"n\">s</span> <span class=\"bp\">=&gt;</span>\n          <span class=\"k\">if</span> <span class=\"n\">s.endsWith</span> <span class=\"s2\">\"!\"</span> <span class=\"k\">then</span>\n            <span class=\"k\">let</span> <span class=\"n\">name'</span> <span class=\"o\">:=</span> <span class=\"n\">Name.str</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">s.dropRight</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n            <span class=\"n\">try</span>\n              <span class=\"n\">elabTerm</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">Nat.factorial</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">mkIdent</span> <span class=\"n\">name'</span><span class=\"o\">)))</span> <span class=\"n\">expectedType</span><span class=\"bp\">?</span>\n            <span class=\"n\">catch</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span>\n              <span class=\"n\">throw</span> <span class=\"n\">e</span>\n          <span class=\"k\">else</span>\n            <span class=\"n\">throw</span> <span class=\"n\">e</span>\n        <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">throw</span> <span class=\"n\">e</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">throwUnsupportedSyntax</span>\n\n<span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"n\">scoped</span> <span class=\"n\">term_elab</span> <span class=\"n\">ident</span><span class=\"o\">]</span> <span class=\"n\">elabIdentFactorial</span>\n\n<span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"n\">eliminator</span><span class=\"o\">]</span> <span class=\"n\">Nat.recAux</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">elab_as_elim</span><span class=\"kd\">]</span>\n<span class=\"kd\">def</span> <span class=\"n\">two_step_induction</span> <span class=\"o\">{</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Sort</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">zero</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">one</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">step</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">IH0</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">IH1</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"bp\">→</span> <span class=\"n\">P</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">P</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">induction</span> <span class=\"n\">n</span> <span class=\"n\">using</span> <span class=\"n\">Nat.strongRec</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">ind</span> <span class=\"n\">n</span> <span class=\"n\">ih</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">rcases</span> <span class=\"n\">n</span> <span class=\"k\">with</span> <span class=\"n\">_</span><span class=\"bp\">|</span><span class=\"n\">n</span>\n    <span class=\"bp\">·</span> <span class=\"n\">exact</span> <span class=\"n\">zero</span>\n    <span class=\"n\">rcases</span> <span class=\"n\">n</span> <span class=\"k\">with</span> <span class=\"n\">_</span><span class=\"bp\">|</span><span class=\"n\">n</span>\n    <span class=\"bp\">·</span> <span class=\"n\">exact</span> <span class=\"n\">one</span>\n    <span class=\"n\">apply</span> <span class=\"n\">step</span>\n    <span class=\"bp\">·</span> <span class=\"n\">apply</span> <span class=\"n\">ih</span><span class=\"bp\">;</span> <span class=\"n\">linarith</span>\n    <span class=\"bp\">·</span> <span class=\"n\">apply</span> <span class=\"n\">ih</span><span class=\"bp\">;</span> <span class=\"n\">linarith</span>\n\n\n\n<span class=\"kd\">end</span> <span class=\"n\">Nat</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">Filter</span>\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">}</span>\n<span class=\"kd\">@[</span><span class=\"n\">gcongr</span><span class=\"kd\">]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">map_le_map</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">Filter</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">F</span> <span class=\"bp\">≤</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">map</span> <span class=\"n\">m</span> <span class=\"n\">F</span> <span class=\"bp\">≤</span> <span class=\"n\">map</span> <span class=\"n\">m</span> <span class=\"n\">G</span> <span class=\"o\">:=</span>\n  <span class=\"n\">map_mono</span> <span class=\"n\">h</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">gcongr</span><span class=\"kd\">]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">comap_le_comap</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">Filter</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">F</span> <span class=\"bp\">≤</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">comap</span> <span class=\"n\">m</span> <span class=\"n\">F</span> <span class=\"bp\">≤</span> <span class=\"n\">comap</span> <span class=\"n\">m</span> <span class=\"n\">G</span> <span class=\"o\">:=</span>\n  <span class=\"n\">comap_mono</span> <span class=\"n\">h</span>\n<span class=\"kd\">end</span> <span class=\"n\">Filter</span>\n\n<span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"n\">gcongr</span><span class=\"o\">]</span> <span class=\"n\">interior_mono</span> <span class=\"n\">closure_mono</span>\n\n<span class=\"kn\">section</span> <span class=\"n\">ExtraLemmas</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">pow_self_ne_zero</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">hn</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n  <span class=\"bp\">·</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">hn</span><span class=\"o\">]</span>\n  <span class=\"bp\">·</span> <span class=\"n\">positivity</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Real</span>\n\n<span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"n\">div_left_inj'</span> <span class=\"n\">neg_eq_self_iff</span> <span class=\"n\">eq_neg_self_iff</span> <span class=\"n\">sqrt_eq_zero'</span> <span class=\"n\">Int.ModEq.rfl</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">ExtraLemmas</span>\n</code></pre></div>",
        "id": 405701810,
        "sender_full_name": "Ludwig Monnerjahn",
        "timestamp": 1701640821
    },
    {
        "content": "<p>Oh, I see</p>",
        "id": 405701901,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1701640864
    },
    {
        "content": "<p>Lean is confused by your numeric literals and thinks they're natural rather than complex numbers. I also didn't immediately see how to write the <code>aeval</code> call correctly, so I left it implicit:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">minpoly</span> <span class=\"n\">ℚ</span> <span class=\"o\">(</span><span class=\"mi\">2</span>  <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"bp\">/</span><span class=\"mi\">3</span><span class=\"o\">):</span> <span class=\"n\">ℂ</span> <span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">X</span> <span class=\"bp\">^</span> <span class=\"mi\">3</span> <span class=\"bp\">-</span> <span class=\"mi\">2</span>  <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">symm</span>\n    <span class=\"n\">apply</span> <span class=\"n\">minpoly.eq_of_irreducible_of_monic</span>\n    <span class=\"n\">case</span> <span class=\"n\">hp1</span> <span class=\"bp\">=&gt;</span> <span class=\"gr\">sorry</span>\n    <span class=\"n\">case</span> <span class=\"n\">hp2</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"k\">calc</span>\n        <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"mi\">3</span> <span class=\"bp\">-</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n        <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"bp\">-</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n        <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">norm_num</span>\n    <span class=\"n\">case</span> <span class=\"n\">hp3</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rw</span><span class=\"o\">[</span><span class=\"n\">Polynomial.Monic.def</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">apply</span> <span class=\"n\">monic_X_pow_sub_C</span><span class=\"bp\">;</span> <span class=\"n\">simp</span>\n</code></pre></div>",
        "id": 405702226,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1701641042
    },
    {
        "content": "<p>Thanks I did not know you can do this.</p>",
        "id": 405702409,
        "sender_full_name": "Ludwig Monnerjahn",
        "timestamp": 1701641194
    },
    {
        "content": "<p>Why does </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">...</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"mi\">3</span> <span class=\"bp\">-</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n        <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"bp\">-</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">norm_num</span>\n</code></pre></div>\n<p>return unsolved Goals </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">False</span>\n</code></pre></div>\n<p>and ring </p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mo>−</mo><mn>1</mn><mo>=</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">-1 = 0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7278em;vertical-align:-0.0833em;\"></span><span class=\"mord\">−</span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">0</span></span></span></span></span></p>\n<p>The Cast to $\\mathbb{C}$ should not change the result of the equation</p>",
        "id": 405703204,
        "sender_full_name": "Ludwig Monnerjahn",
        "timestamp": 1701641836
    },
    {
        "content": "<p>This is because <code>2 ^ (1 / 3) = 2 ^ 0 = 1</code>. <code>1 / 3</code> is by default interpreted as a natural number, and natural division is flooring!</p>",
        "id": 405703323,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1701641948
    },
    {
        "content": "<p>ok so I need to write <code>(2 ^ (1 / (3 : ℝ)) : ℂ) ^ 3 - 2 </code>?</p>",
        "id": 405703546,
        "sender_full_name": "Ludwig Monnerjahn",
        "timestamp": 1701642138
    },
    {
        "content": "<p>or <code>(2 ^ (1 / 3 : ℝ) : ℂ) ^ 3 - 2</code>, yes</p>",
        "id": 405703706,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1701642300
    },
    {
        "content": "<p>Do I need to import something that a can write <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>x</mi><mi>r</mi></msup></mrow><annotation encoding=\"application/x-tex\">x^r</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6644em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6644em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.02778em;\">r</span></span></span></span></span></span></span></span></span></span></span> for <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>r</mi><mo>∈</mo><mi mathvariant=\"double-struck\">R</mi></mrow><annotation encoding=\"application/x-tex\">r\\in\\mathbb{R}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6889em;\"></span><span class=\"mord mathbb\">R</span></span></span></span> (<code>x  ^ (r  : ℝ) </code>), because I get </p>\n<blockquote>\n<p>failed to synthesize instance<br>\n  HPow ℕ ℝ ℂLean 4</p>\n</blockquote>",
        "id": 405704018,
        "sender_full_name": "Ludwig Monnerjahn",
        "timestamp": 1701642590
    },
    {
        "content": "<p>Ah no, you just need to replace the left <code>2</code> by <code>(2 : ℂ)</code>. It's annoying how Lean 4 insists that you really should try having operations taking elements from two types and outputting in a third.</p>",
        "id": 405704259,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1701642788
    },
    {
        "content": "<p>When I replace the first 2 with (2 : ℂ) Lean 4 does not find the output Type</p>\n<blockquote>\n<p>failed to synthesize instance<br>\n  HPow ℂ ℝ ?m.2123</p>\n</blockquote>",
        "id": 405704556,
        "sender_full_name": "Ludwig Monnerjahn",
        "timestamp": 1701643062
    },
    {
        "content": "<p>and <code>(2 : ℝ)</code>?</p>",
        "id": 405704631,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1701643107
    },
    {
        "content": "<p>Gives me the same Error</p>",
        "id": 405704713,
        "sender_full_name": "Ludwig Monnerjahn",
        "timestamp": 1701643170
    },
    {
        "content": "<p>Try <code>import Mathlib</code> or updating mathlib</p>",
        "id": 405707861,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1701645656
    },
    {
        "content": "<p>Interestingly <code>simp</code> proves<br>\n<code>↑(aeval ((2 : ℂ) ^ (1 / 3 : ℂ))) (X ^ 3 - 2) = 0</code><br>\nbut it is, for some reason, harder to prove<br>\n<code>↑(aeval ((2 : ℝ) ^ (1 / 3 : ℝ))) (X ^ 3 - 2) = 0</code>.</p>",
        "id": 405713193,
        "sender_full_name": "Yongyi Chen",
        "timestamp": 1701649590
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/proof.20aeval.20with.20calc/near/405707861\">schrieb</a>:</p>\n<blockquote>\n<p>Try <code>import Mathlib</code> or updating mathlib</p>\n</blockquote>\n<p>I took a while to Update the Import but the Error is gone <strong>Thanks a Lot</strong></p>",
        "id": 405714240,
        "sender_full_name": "Ludwig Monnerjahn",
        "timestamp": 1701650186
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"582393\">Yongyi Chen</span> <a href=\"#narrow/stream/113489-new-members/topic/proof.20aeval.20with.20calc/near/405713193\">schrieb</a>:</p>\n<blockquote>\n<p>Interestingly <code>simp</code> proves<br>\n<code>↑(aeval ((2 : ℂ) ^ (1 / 3 : ℂ))) (X ^ 3 - 2) = 0</code><br>\nbut it is, for some reason, harder to prove<br>\n<code>↑(aeval ((2 : ℝ) ^ (1 / 3 : ℝ))) (X ^ 3 - 2) = 0</code>.</p>\n</blockquote>\n<p>Interesting when I try simp I end up whit <code>(2 ^ 3⁻¹) ^ 3 - 2 = 0</code>, where <code>0</code>is of Type </p>\n<blockquote>\n<p>@OfNat.ofNat ((fun x ↦ ℂ) (X ^ 3 - 2)) 0 Zero.toOfNat0 : (fun x ↦ ℂ) (X ^ 3 - 2)</p>\n</blockquote>\n<p>Witch I can't handle</p>",
        "id": 405715991,
        "sender_full_name": "Ludwig Monnerjahn",
        "timestamp": 1701651016
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"582393\">@Yongyi Chen</span>  What do you do that <code>simp</code> proves it?</p>",
        "id": 405716138,
        "sender_full_name": "Ludwig Monnerjahn",
        "timestamp": 1701651102
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"671805\">@Ludwig Monnerjahn</span> </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"mi\">3</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">))</span> <span class=\"bp\">^</span> <span class=\"mi\">3</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">one_div</span><span class=\"o\">]</span>\n  <span class=\"n\">change</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">Nat.cast</span> <span class=\"mi\">3</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"mi\">3</span> <span class=\"bp\">=</span> <span class=\"n\">_</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Real.rpow_nat_inv_pow_nat</span> <span class=\"o\">(</span><span class=\"k\">show</span> <span class=\"mi\">2</span> <span class=\"bp\">≥</span> <span class=\"mi\">0</span> <span class=\"kd\">by</span> <span class=\"n\">norm_num</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"k\">show</span> <span class=\"mi\">3</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"kd\">by</span> <span class=\"n\">decide</span><span class=\"o\">)]</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"mi\">3</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">))</span> <span class=\"bp\">^</span> <span class=\"mi\">3</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span>\n</code></pre></div>",
        "id": 405716373,
        "sender_full_name": "Yongyi Chen",
        "timestamp": 1701651203
    },
    {
        "content": "<p>Thanks!  Helped me a lot</p>",
        "id": 405720315,
        "sender_full_name": "Ludwig Monnerjahn",
        "timestamp": 1701653132
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"671805\">Ludwig Monnerjahn</span> has marked this topic as resolved.</p>",
        "id": 405827153,
        "sender_full_name": "Notification Bot",
        "timestamp": 1701697507
    }
]