[
    {
        "content": "<p>Hello, I wanted to use <code>add_div</code> with my positive reals subtype and was surprised that I couldn't because it requires a <code>DivisionSemiring</code> instance.<br>\n<a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/Algebra/Field/Basic.html#add_div\">https://leanprover-community.github.io/mathlib4_docs/Mathlib/Algebra/Field/Basic.html#add_div</a></p>\n<p>I had to write my own version that uses only <code>DivInvMonoid</code> and <code>RightDistribClass</code>.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">add_div''</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span>\n<span class=\"o\">[</span><span class=\"n\">DivInvMonoid</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Add</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">RightDistribClass</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n<span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">):</span>\n<span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"bp\">/</span><span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"bp\">/</span><span class=\"n\">c</span> <span class=\"o\">:=</span>\n  <span class=\"kd\">by</span> <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">div_eq_mul_inv</span><span class=\"o\">,</span> <span class=\"n\">add_mul</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>Is there any reason for this that I'm missing?<br>\nDisclaimer: I am terrible at math so sorry if I'm saying something stupid.</p>",
        "id": 364490010,
        "sender_full_name": "Daniele Pusceddu",
        "timestamp": 1686215106
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/right_distrib_class\">docs#right_distrib_class</a> is fairly new, so I think we just didn't notice this generalization becoming available</p>",
        "id": 364497200,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1686216716
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113489-new-members/topic/add_div.20not.20as.20general.20as.20it.20should.20be.3F/near/364497200\">said</a>:</p>\n<blockquote>\n<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/right_distrib_class\">docs#right_distrib_class</a> is fairly new, so I think we just didn't notice this generalization becoming available</p>\n</blockquote>\n<p>Since I would like this generalization for myself, would it be too difficult for me to contribute it to mathlib, having no previous experience? I assume there will be other theorems requiring the same generalization for consistency</p>",
        "id": 364553556,
        "sender_full_name": "Daniele Pusceddu",
        "timestamp": 1686229125
    },
    {
        "content": "<p>Ideally you would either:</p>\n<ul>\n<li>Contribute the generalization to mathlib3, then forward port it</li>\n<li>Wait for the port from mathlib3 to mathlib4 to be complete, then contribute it in mathlib4</li>\n</ul>",
        "id": 364558859,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1686230167
    },
    {
        "content": "<p>Eric, given that this is just a type class generalization, is there any reason not to contribute directly to mathlib4?</p>",
        "id": 364592339,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1686236411
    },
    {
        "content": "<p>Generalizations can sometimes cause unification problems downstream. It also stops someone generalizing the mathlib3 results in a different direction somehow</p>",
        "id": 364617809,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1686241438
    },
    {
        "content": "<p>We had a case recently where things were added to mathlib4 and then conflicted with bits of mathlib3 that hadn't been ported yet</p>",
        "id": 364617982,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1686241468
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113489-new-members/topic/add_div.20not.20as.20general.20as.20it.20should.20be.3F/near/364558859\">said</a>:</p>\n<blockquote>\n<p>Ideally you would either:</p>\n<ul>\n<li>Contribute the generalization to mathlib3, then forward port it</li>\n<li>Wait for the port from mathlib3 to mathlib4 to be complete, then contribute it in mathlib4</li>\n</ul>\n</blockquote>\n<p>I'd have to opt for the second option since I have never even touched Lean3 and I believe that would be too much work for me right now sadly.</p>",
        "id": 364730158,
        "sender_full_name": "Daniele Pusceddu",
        "timestamp": 1686286714
    },
    {
        "content": "<p>You could start working on the PR now and then it could be reviewed when people are confident that it won't cause problems with the port. In two weeks' time the port might be all over bar the shouting anyway</p>",
        "id": 364745628,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1686292774
    }
]