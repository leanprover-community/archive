[
    {
        "content": "<p>Hi folks, I've been trying to get through the first section of advanced multiplication world off and on for about a week, and I think I'm stuck. The theorem that needs to be proven is this one:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">mul_pos</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">mynat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"n\">b</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span>\n</code></pre></div>\n<p>My current approach is this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">intros</span> <span class=\"n\">ha</span> <span class=\"n\">hb</span><span class=\"o\">,</span>\n<span class=\"n\">cases</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">mul_zero</span><span class=\"o\">,</span>\n<span class=\"n\">exact</span> <span class=\"n\">hb</span><span class=\"o\">,</span>\n</code></pre></div>\n<p>which leaves the game in the following state</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">case</span> <span class=\"n\">mynat.succ</span>\n<span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">mynat</span><span class=\"o\">,</span>\n<span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n<span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">mynat</span><span class=\"o\">,</span>\n<span class=\"n\">hb</span> <span class=\"o\">:</span> <span class=\"n\">succ</span> <span class=\"n\">b</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">succ</span> <span class=\"n\">b</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span>\n</code></pre></div>\n<p>Now my plan is to rewrite the equality <code>succ b = 0</code> hidden inside <code>hb</code> to <code>a * succ b = 0</code>. The logic here being that if something is zero, it doesn't matter what you multiply it with (ignoring infinity), it will simply remain zero. I'm not able to figure out a way to do this with the tactics and theorems that were taught in the earlier parts of the game. </p>\n<p>Could someone give me a hint to nudge me in the right direction, preferably without just giving away the answer?</p>",
        "id": 345784757,
        "sender_full_name": "Rick de Wolf",
        "timestamp": 1680209522
    },
    {
        "content": "<p>This looks like a fine start but I don't know what you're talking about with this hidden <code>succ b = 0</code> -- that fact is <em>not there</em> in <code>hb</code>. Why not do to <code>a</code> what you did to <code>b</code> next?</p>",
        "id": 345791098,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1680211958
    },
    {
        "content": "<p>In contrast to your idea about <code>hb</code> I claim that you can do <code>clear hb</code> and forget about it -- it is vacuously true and hence no information can be extracted from it</p>",
        "id": 345791499,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1680212124
    },
    {
        "content": "<blockquote>\n<p>it is vacuously true and hence no information can be extracted from it</p>\n</blockquote>\n<p>well, it's not always the case that true hypotheses are useless, after all that's what the <code>have</code> tactic is for</p>",
        "id": 345791728,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1680212221
    },
    {
        "content": "<p>but it is true that you can always safely delete true hypotheses without backing yourself into a corner</p>",
        "id": 345791930,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1680212310
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/Looking.20for.20a.20subtle.20hint.20for.20advanced.20multiplication.20world/near/345791098\">said</a>:</p>\n<blockquote>\n<p>This looks like a fine start but I don't know what you're talking about with this hidden <code>succ b = 0</code> -- that fact is <em>not there</em> in <code>hb</code>. Why not do to <code>a</code> what you did to <code>b</code> next?</p>\n</blockquote>\n<p>I realized after posting that there was a problem with my reasoning, or at least my explanation, sorry about that. The argument that I was trying to make was that a hypothesis <code>z = 0</code> implies <code>a * z = 0</code> for any natural number <code>a</code>. Additionally, anything implies <code>false</code>. These two things taken together means that if you have the hypothesis <code>z = 0 -&gt; false</code>, you also have <code>a * z =0 -&gt; false</code>. I feel like this reasoning holds up, but maybe it's not something I can implement in Lean? I've not been able to come up with a way to do this at least - the rewrite command seemingly can't handle this as far as I can see.</p>",
        "id": 345803241,
        "sender_full_name": "Rick de Wolf",
        "timestamp": 1680217515
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/Looking.20for.20a.20subtle.20hint.20for.20advanced.20multiplication.20world/near/345791499\">said</a>:</p>\n<blockquote>\n<p>In contrast to your idea about <code>hb</code> I claim that you can do <code>clear hb</code> and forget about it -- it is vacuously true and hence no information can be extracted from it</p>\n</blockquote>\n<p>Ah yes, it being vacuously true should have been a hint that it's not very useful. Thanks for the pointer to doing another <code>cases</code>, I think I see a way out now <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 345803754,
        "sender_full_name": "Rick de Wolf",
        "timestamp": 1680217757
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"603023\">Rick de Wolf</span> <a href=\"#narrow/stream/113489-new-members/topic/Looking.20for.20a.20subtle.20hint.20for.20advanced.20multiplication.20world/near/345803241\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/Looking.20for.20a.20subtle.20hint.20for.20advanced.20multiplication.20world/near/345791098\">said</a>:</p>\n<blockquote>\n<p>This looks like a fine start but I don't know what you're talking about with this hidden <code>succ b = 0</code> -- that fact is <em>not there</em> in <code>hb</code>. Why not do to <code>a</code> what you did to <code>b</code> next?</p>\n</blockquote>\n<p>I realized after posting that there was a problem with my reasoning, or at least my explanation, sorry about that. The argument that I was trying to make was that a hypothesis <code>z = 0</code> implies <code>a * z = 0</code> for any natural number <code>a</code>. Additionally, anything implies <code>false</code>. These two things taken together means that if you have the hypothesis <code>z = 0 -&gt; false</code>, you also have <code>a * z =0 -&gt; false</code>. I feel like this reasoning holds up, but maybe it's not something I can implement in Lean? I've not been able to come up with a way to do this at least - the rewrite command seemingly can't handle this as far as I can see.</p>\n</blockquote>\n<p>Actually nevermind, I just realized the case where <code>a</code> is zero breaks my reasoning</p>",
        "id": 345804666,
        "sender_full_name": "Rick de Wolf",
        "timestamp": 1680218224
    },
    {
        "content": "<blockquote>\n<p>The argument that I was trying to make was that a hypothesis <code>z = 0</code> implies <code>a * z = 0</code> for any natural number <code>a</code>.</p>\n</blockquote>\n<p>true</p>\n<blockquote>\n<p>Additionally, anything implies <code>false</code>.</p>\n</blockquote>\n<p>This is false, I think you want to say <code>false</code> implies anything.</p>\n<blockquote>\n<p>These two things taken together means that if you have the hypothesis <code>z = 0 -&gt; false</code>, you also have <code>a * z =0 -&gt; false</code>.</p>\n</blockquote>\n<p>This is also false, you have swapped the direction of implication.<br>\nIf <code>a * z = 0</code> implies <code>z = 0</code>, then <code>z = 0 -&gt; false</code> implies <code>a * z = 0 -&gt; false</code>.</p>",
        "id": 345805047,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1680218409
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113489-new-members/topic/Looking.20for.20a.20subtle.20hint.20for.20advanced.20multiplication.20world/near/345805047\">said</a>:</p>\n<blockquote>\n<blockquote>\n<p>The argument that I was trying to make was that a hypothesis <code>z = 0</code> implies <code>a * z = 0</code> for any natural number <code>a</code>.</p>\n</blockquote>\n<p>true</p>\n<blockquote>\n<p>Additionally, anything implies <code>false</code>.</p>\n</blockquote>\n<p>This is false, I think you want to say <code>false</code> implies anything.</p>\n<blockquote>\n<p>These two things taken together means that if you have the hypothesis <code>z = 0 -&gt; false</code>, you also have <code>a * z =0 -&gt; false</code>.</p>\n</blockquote>\n<p>This is also false, you have swapped the direction of implication.<br>\nIf <code>a * z = 0</code> implies <code>z = 0</code>, then <code>z = 0 -&gt; false</code> implies <code>a * z = 0 -&gt; false</code>.</p>\n</blockquote>\n<p>Ah yes, I was mixing up '<code>false</code> implies anything' with the reverse statement.</p>",
        "id": 345805819,
        "sender_full_name": "Rick de Wolf",
        "timestamp": 1680218787
    },
    {
        "content": "<p>I finished this section with the second cases, it's all good now :)</p>",
        "id": 345806094,
        "sender_full_name": "Rick de Wolf",
        "timestamp": 1680218951
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"603023\">Rick de Wolf</span> has marked this topic as resolved.</p>",
        "id": 345806096,
        "sender_full_name": "Notification Bot",
        "timestamp": 1680218954
    }
]