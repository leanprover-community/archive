[
    {
        "content": "<p>I have the following mwe that has a termination problem:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Foo</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">foo</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">Bar</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">bar</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">Baz</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span> <span class=\"bp\">→</span> <span class=\"n\">Bar</span> <span class=\"bp\">→</span> <span class=\"n\">Foo</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">baz</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Baz</span> <span class=\"n\">f</span> <span class=\"n\">Bar.bar</span> <span class=\"n\">Foo.foo</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">Ex</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">ex</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"n\">f_in</span> <span class=\"n\">f_out</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Bar</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Baz</span> <span class=\"n\">f</span> <span class=\"n\">b</span> <span class=\"n\">f_in</span> <span class=\"bp\">→</span> <span class=\"n\">Ex</span> <span class=\"n\">f_in</span> <span class=\"bp\">→</span> <span class=\"n\">Ex</span> <span class=\"n\">f_out</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">thm</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">Ex</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">cases</span> <span class=\"n\">e</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">ex</span> <span class=\"n\">b</span> <span class=\"n\">bz</span> <span class=\"n\">e</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"k\">let</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">thm</span> <span class=\"n\">e</span>\n\n      <span class=\"n\">cases</span> <span class=\"n\">b</span> <span class=\"k\">with</span>\n      <span class=\"bp\">|</span> <span class=\"n\">bar</span> <span class=\"bp\">=&gt;</span>\n          <span class=\"n\">cases</span> <span class=\"n\">bz</span> <span class=\"c1\">-- why does this cause the termination problem?</span>\n          <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>The error is:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">fail</span> <span class=\"n\">to</span> <span class=\"k\">show</span> <span class=\"n\">termination</span> <span class=\"n\">for</span>\n  <span class=\"n\">thm</span>\n<span class=\"k\">with</span> <span class=\"n\">errors</span>\n<span class=\"n\">argument</span> <span class=\"bp\">#</span><span class=\"mi\">2</span> <span class=\"n\">was</span> <span class=\"n\">not</span> <span class=\"n\">used</span> <span class=\"n\">for</span> <span class=\"n\">structural</span> <span class=\"n\">recursion</span>\n  <span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">eliminate</span> <span class=\"n\">recursive</span> <span class=\"n\">application</span>\n    <span class=\"n\">thm</span> <span class=\"n\">e</span>\n\n<span class=\"n\">structural</span> <span class=\"n\">recursion</span> <span class=\"n\">cannot</span> <span class=\"n\">be</span> <span class=\"n\">used</span>\n\n<span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">prove</span> <span class=\"n\">termination</span><span class=\"o\">,</span> <span class=\"n\">use</span> <span class=\"bp\">`</span><span class=\"n\">termination_by</span><span class=\"bp\">`</span> <span class=\"n\">to</span> <span class=\"n\">specify</span> <span class=\"n\">a</span> <span class=\"n\">well</span><span class=\"bp\">-</span><span class=\"n\">founded</span> <span class=\"n\">relation</span>\n</code></pre></div>\n<p>I'm confused why this is problematic, and it only happens when <code>cases bz</code> is present. Calling it recursively without that has no problems, but for some reason once <code>bz</code> is pattern matched on and the index of <code>e</code> becomes <code>Foo.foo</code> Lean suddenly has a problem with the recursive call. Would be helpful is someone could explain why this is happening and a way to work around it.</p>",
        "id": 399188047,
        "sender_full_name": "sgcs",
        "timestamp": 1698616569
    },
    {
        "content": "<p>You shouldn't be using tactics for defining recursive definitions. Here's some <code>match</code> syntax for you:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">thm</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">Ex</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">e</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">ex</span> <span class=\"n\">b</span> <span class=\"n\">bz</span> <span class=\"n\">e</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"k\">let</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">thm</span> <span class=\"n\">e</span>\n      <span class=\"k\">match</span> <span class=\"n\">b</span> <span class=\"k\">with</span>\n      <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">bar</span> <span class=\"bp\">=&gt;</span>\n          <span class=\"k\">match</span> <span class=\"n\">bz</span> <span class=\"k\">with</span>\n          <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">baz</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span>\n            <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 399188603,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1698617107
    },
    {
        "content": "<p>Thanks, that makes sense. Though I've mixed tactics before with no problems a lot, so it's interesting it fails here. Using <code>cases</code> has been more convenient ime because it doesn't require a lot of redundant matches on other variables to allow for pattern matching to succeed. Like I switched to <code>match</code> in the full code and now I have to match on 3 other things to let me complete the proof, is that expected usage of <code>match</code>?</p>",
        "id": 399189551,
        "sender_full_name": "sgcs",
        "timestamp": 1698618169
    },
    {
        "content": "<p>Basically using recursion with <code>cases</code> isn't supported. You might be able to use <code>induction</code>, but you have to be sure to use the induction hypothesis and not <code>thm</code> itself.</p>\n<p>Without a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> it's hard to know what's expected or not, at least for me.</p>",
        "id": 399190166,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1698618834
    }
]