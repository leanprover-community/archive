[
    {
        "content": "<p>Hello, I have an expression that repeats a lot of times in the types of my parameters.<br>\nIn particular I have a proposition which I then use to call other functions that return values.<br>\nI tried explaining the situation in pseudocode:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">ex</span> <span class=\"o\">(</span><span class=\"n\">p</span><span class=\"o\">:</span> <span class=\"n\">big_prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h1</span><span class=\"o\">:</span> <span class=\"n\">p1</span><span class=\"o\">(</span><span class=\"n\">get_val</span><span class=\"o\">(</span><span class=\"n\">p</span><span class=\"o\">)))</span> <span class=\"o\">(</span><span class=\"n\">h2</span><span class=\"o\">:</span> <span class=\"n\">p2</span><span class=\"o\">(</span><span class=\"n\">get_val</span><span class=\"o\">(</span><span class=\"n\">p</span><span class=\"o\">)))</span>\n</code></pre></div>\n<p>I would like to do something like this, to name the expression:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">ex</span> <span class=\"o\">(</span><span class=\"n\">p</span><span class=\"o\">:</span> <span class=\"n\">big_prop</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">v</span> <span class=\"o\">:=</span> <span class=\"n\">get_val</span><span class=\"o\">(</span><span class=\"n\">p</span><span class=\"o\">)}</span>\n       <span class=\"o\">(</span><span class=\"n\">h1</span><span class=\"o\">:</span> <span class=\"n\">p1</span><span class=\"o\">(</span><span class=\"n\">v</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">h2</span><span class=\"o\">:</span> <span class=\"n\">p2</span><span class=\"o\">(</span><span class=\"n\">v</span><span class=\"o\">))</span>\n</code></pre></div>\n<p>Is it possible?<br>\nThank you.</p>",
        "id": 355778042,
        "sender_full_name": "Daniele Pusceddu",
        "timestamp": 1683207609
    },
    {
        "content": "<p>what about just making it  a function?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">get_val</span> <span class=\"o\">(</span><span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">v</span> <span class=\"o\">:=</span> <span class=\"n\">blah</span>\n<span class=\"kd\">def</span> <span class=\"n\">ex</span> <span class=\"o\">(</span><span class=\"n\">p</span><span class=\"o\">:</span> <span class=\"n\">big_prop</span><span class=\"o\">)</span>\n       <span class=\"o\">(</span><span class=\"n\">h1</span><span class=\"o\">:</span> <span class=\"n\">p1</span><span class=\"o\">(</span><span class=\"n\">get_val</span> <span class=\"n\">p</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">h2</span><span class=\"o\">:</span> <span class=\"n\">p2</span><span class=\"o\">(</span><span class=\"n\">get_val</span> <span class=\"n\">p</span><span class=\"o\">))</span>\n</code></pre></div>",
        "id": 355780529,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1683208158
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"127136\">Alex J. Best</span> <a href=\"#narrow/stream/113489-new-members/topic/.22let.22.20among.20parameters.3F/near/355780529\">said</a>:</p>\n<blockquote>\n<p>what about just making it  a function?</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">get_val</span> <span class=\"o\">(</span><span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">v</span> <span class=\"o\">:=</span> <span class=\"n\">blah</span>\n<span class=\"kd\">def</span> <span class=\"n\">ex</span> <span class=\"o\">(</span><span class=\"n\">p</span><span class=\"o\">:</span> <span class=\"n\">big_prop</span><span class=\"o\">)</span>\n       <span class=\"o\">(</span><span class=\"n\">h1</span><span class=\"o\">:</span> <span class=\"n\">p1</span><span class=\"o\">(</span><span class=\"n\">get_val</span> <span class=\"n\">p</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">h2</span><span class=\"o\">:</span> <span class=\"n\">p2</span><span class=\"o\">(</span><span class=\"n\">get_val</span> <span class=\"n\">p</span><span class=\"o\">))</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>I'm figuring that out, for now it did seem to make the infoview much more bearable and I think I can apply it elsewhere to improve the situation further.<br>\nInsane how I didn't think of this. Programming with dependent types is interesting <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span> <br>\nI'll mark as resolved as soon as I am certain this is what I need, thanks</p>",
        "id": 355785120,
        "sender_full_name": "Daniele Pusceddu",
        "timestamp": 1683209142
    },
    {
        "content": "<p>Actually I want to reopen because I’m also interested</p>",
        "id": 355795631,
        "sender_full_name": "Roberto Pettinau",
        "timestamp": 1683211097
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"127136\">Alex J. Best</span> <a href=\"#narrow/stream/113489-new-members/topic/.22let.22.20among.20parameters.3F/near/355780529\">said</a>:</p>\n<blockquote>\n<p>what about just making it  a function?</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">get_val</span> <span class=\"o\">(</span><span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">v</span> <span class=\"o\">:=</span> <span class=\"n\">blah</span>\n<span class=\"kd\">def</span> <span class=\"n\">ex</span> <span class=\"o\">(</span><span class=\"n\">p</span><span class=\"o\">:</span> <span class=\"n\">big_prop</span><span class=\"o\">)</span>\n       <span class=\"o\">(</span><span class=\"n\">h1</span><span class=\"o\">:</span> <span class=\"n\">p1</span><span class=\"o\">(</span><span class=\"n\">get_val</span> <span class=\"n\">p</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">h2</span><span class=\"o\">:</span> <span class=\"n\">p2</span><span class=\"o\">(</span><span class=\"n\">get_val</span> <span class=\"n\">p</span><span class=\"o\">))</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>How does that do anything? Is ‘ex’ not exactly the same as it was before?</p>",
        "id": 355795914,
        "sender_full_name": "Roberto Pettinau",
        "timestamp": 1683211152
    },
    {
        "content": "<p>I think I made some typos in my pseudocode indeed, but the point is that the very long expression that appears in the types is only written out and seen once rather than repeatedly</p>",
        "id": 355903816,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1683243363
    },
    {
        "content": "<p>To directly answer the question without the valid un-#xy-ing, you can push the parameters after the <code>let</code> inside a <code>∀</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"k\">let</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"n\">x</span><span class=\"bp\">*</span><span class=\"mi\">2</span> <span class=\"k\">in</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">z</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 355904919,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1683244088
    },
    {
        "content": "<p>This works too but I don't think many people expect it to:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"kd\">notation</span> <span class=\"bp\">`</span><span class=\"n\">y</span><span class=\"bp\">`</span> <span class=\"o\">:=</span> <span class=\"n\">x</span><span class=\"bp\">*</span><span class=\"n\">x</span><span class=\"bp\">*</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span>\n<span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>or if you want to use <code>y</code> after the colon too:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"kd\">notation</span> <span class=\"bp\">`</span><span class=\"n\">y</span><span class=\"bp\">`</span> <span class=\"o\">:=</span> <span class=\"n\">x</span><span class=\"bp\">*</span><span class=\"n\">x</span><span class=\"bp\">*</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"k\">let</span> <span class=\"kd\">notation</span> <span class=\"bp\">`</span><span class=\"n\">y</span><span class=\"bp\">`</span> <span class=\"o\">:=</span> <span class=\"n\">x</span><span class=\"bp\">*</span><span class=\"n\">x</span><span class=\"bp\">*</span><span class=\"n\">x</span> <span class=\"k\">in</span> <span class=\"n\">y</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span>\n<span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 355905144,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1683244249
    }
]