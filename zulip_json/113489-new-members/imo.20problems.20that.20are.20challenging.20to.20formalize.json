[
    {
        "content": "<p>Hello everyone <span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span> </p>\n<p>I am interested in getting my hands dirty with Lean4 by formalizing some IMO problems (hopefully can also make some useful contributions to mathlib on the way) ... </p>\n<p>can someone point me to some IMO problems that are known to be difficult to formalize ... I can tell the geometry ones are challenging, but are there other ones as well?</p>\n<p>Thanks in advance!</p>",
        "id": 376531421,
        "sender_full_name": "Horst Staley",
        "timestamp": 1689740975
    },
    {
        "content": "<p>I'm not sure you'll find someone with a ready answer for you. One simple answer is anything that hasn't yet been formalized!</p>",
        "id": 376531632,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1689741097
    },
    {
        "content": "<p>The geometry problems are difficult because they need a lot of Mathlib development to build good API --- but that is not what a beginner wants to tackle!</p>",
        "id": 376531690,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1689741129
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> that was definitely my plan B ... if nobody pointed out particularly interesting or challenging ones, I will just take a random one :)</p>",
        "id": 376532063,
        "sender_full_name": "Horst Staley",
        "timestamp": 1689741386
    },
    {
        "content": "<p>The basic problem is that \"difficult to formalize\" doesn't correlate at all well with \"difficult as an exam question\". Any generally \"difficult to formalize\" means \"you have to design new API in Mathlib\", which is not what you're looking for initially.</p>",
        "id": 376532171,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1689741471
    },
    {
        "content": "<p>If you're just looking for \"difficult as an exam question\", start with Q6s. :-)</p>",
        "id": 376532228,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1689741488
    },
    {
        "content": "<p>nono, definitely not ... I'm just looking for difficult to formalize (and I was thinking of starting with just the problem statements)</p>",
        "id": 376532342,
        "sender_full_name": "Horst Staley",
        "timestamp": 1689741568
    },
    {
        "content": "<p>if I just wanted to solve hard math problems, I have my chalkboard, no need for lean :D</p>",
        "id": 376532454,
        "sender_full_name": "Horst Staley",
        "timestamp": 1689741613
    },
    {
        "content": "<p>Much better exercise to do the proofs. :-)</p>",
        "id": 376532460,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1689741619
    },
    {
        "content": "<p>It's hard to be sure your formal statement is correct if you don't formalize a proof (consider the case of an AI that claimed a solution to a hard problem that had been wrongly formalized using <code>ℕ</code> subtraction).</p>\n<p>Having a detailed written informal solution is important before starting formalizing (see e.g. The IMO Compendium (for 1959-2009) or <a href=\"https://www.imo-official.org/problems.aspx\">shortlist booklets</a> (2006-2022) (but watch out for the version of a problem in the shortlist differing significantly from the version on the final exam) or <a href=\"https://artofproblemsolving.com/wiki/index.php/IMO_Problems_and_Solutions\">the AoPS wiki</a>).</p>\n<p>See also <code>archive/imo/README.md</code> (in mathlib3, one of the miscellaneous <code>.md</code> files not yet ported to mathlib4) for more discussion of IMO formalizations.</p>",
        "id": 376629257,
        "sender_full_name": "Joseph Myers",
        "timestamp": 1689766354
    },
    {
        "content": "<p>FYI, I've been doing a bunch of olympiad formalization <a href=\"https://github.com/dwrensha/math-puzzles-in-lean4/\">here</a> and contributions are welcome.</p>",
        "id": 376647633,
        "sender_full_name": "David Renshaw",
        "timestamp": 1689769853
    },
    {
        "content": "<p>I think all 386 past IMO problems would be appropriate for the mathlib archive (we currently have 32 of them, for an average of half a problem per IMO), as would problems from other (e.g. national / regional) olympiads (or proof-based mathematics competitions in general) such as you have in that repository, if brought up to mathlib standards (including in particular factoring out any results of more general use and putting those in mathlib proper). Of course getting something up to mathlib standards may be a lot of work - I don't expect to convert my British MO formalizations to Lean 4 or to attempt to get them up to mathlib standards.</p>",
        "id": 376810317,
        "sender_full_name": "Joseph Myers",
        "timestamp": 1689809839
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"266253\">Joseph Myers</span> <a href=\"#narrow/stream/113489-new-members/topic/imo.20problems.20that.20are.20challenging.20to.20formalize/near/376629257\">said</a>:</p>\n<blockquote>\n<p>See also <code>archive/imo/README.md</code> (in mathlib3, one of the miscellaneous <code>.md</code> files not yet ported to mathlib4) for more discussion of IMO formalizations.</p>\n</blockquote>\n<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/6031\">#6031</a></p>",
        "id": 377043114,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1689870331
    },
    {
        "content": "<p>Do we have a list of files/webpages that we should migrate? The <a href=\"https://leanprover-community.github.io/contribute/style.html\">style guide</a> still talks about Lean 3.</p>",
        "id": 377081075,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1689879014
    },
    {
        "content": "<p>I left some comments on <a href=\"https://github.com/leanprover-community/mathlib4/pull/6031\">#6031</a></p>",
        "id": 377082121,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1689879240
    },
    {
        "content": "<p>I think there are some additional <code>.md</code> files to migrate (<code>CITATION.md</code> for example), though of course not all the placeholder files that say that some documentation was moved to the website. And the whole website needs updating to Lean 4 where not already done.</p>",
        "id": 377144142,
        "sender_full_name": "Joseph Myers",
        "timestamp": 1689900723
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"266253\">@Joseph Myers</span></p>",
        "id": 377948010,
        "sender_full_name": "Horst Staley",
        "timestamp": 1690156070
    },
    {
        "content": "<p>Hello everyone, I have decided to start with <a href=\"https://artofproblemsolving.com/wiki/index.php/1961_IMO_Problems/Problem_3\">IMO 1961 Q3</a></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">ProblemEquation</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">cos</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">sin</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">evenSet</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"bp\">↑</span><span class=\"n\">k</span> <span class=\"bp\">*</span> <span class=\"n\">π</span><span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">oddSet</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">,</span>\n  <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"o\">((</span><span class=\"mi\">4</span> <span class=\"bp\">*</span> <span class=\"bp\">↑</span><span class=\"n\">k</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">π</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">))</span> <span class=\"bp\">∨</span>\n  <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"o\">((</span><span class=\"mi\">4</span> <span class=\"bp\">*</span> <span class=\"bp\">↑</span><span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">π</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">))}</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">imo1961_q3</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">Even</span> <span class=\"n\">n</span> <span class=\"bp\">∧</span> <span class=\"n\">ProblemEquation</span> <span class=\"n\">n</span> <span class=\"n\">x</span> <span class=\"bp\">↔</span>\n  <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">evenSet</span><span class=\"o\">))</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">Odd</span> <span class=\"n\">n</span> <span class=\"bp\">∧</span> <span class=\"n\">ProblemEquation</span> <span class=\"n\">n</span> <span class=\"n\">x</span> <span class=\"bp\">↔</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">oddSet</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">constructor</span>\n</code></pre></div>\n<p>Before I started cranking on the proof, I just wanted to doublecheck that I've set it up in the best possible way ... I appreciate any feedback! <span aria-label=\"pray\" class=\"emoji emoji-1f64f\" role=\"img\" title=\"pray\">:pray:</span></p>",
        "id": 379868324,
        "sender_full_name": "Horst Staley",
        "timestamp": 1690655692
    },
    {
        "content": "<p>In this problem, part of the answer is actually coming up with the solution set, and your setup does not really surface that.</p>",
        "id": 379870785,
        "sender_full_name": "David Renshaw",
        "timestamp": 1690656608
    },
    {
        "content": "<p>I would do something more like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">solutionSet</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span>\n  <span class=\"k\">if</span> <span class=\"n\">Even</span> <span class=\"n\">n</span>\n  <span class=\"k\">then</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"bp\">↑</span><span class=\"n\">k</span> <span class=\"bp\">*</span> <span class=\"n\">π</span><span class=\"o\">}</span>\n  <span class=\"k\">else</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">,</span>\n         <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"o\">((</span><span class=\"mi\">4</span> <span class=\"bp\">*</span> <span class=\"bp\">↑</span><span class=\"n\">k</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">π</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">))</span> <span class=\"bp\">∨</span>\n         <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"o\">((</span><span class=\"mi\">4</span> <span class=\"bp\">*</span> <span class=\"bp\">↑</span><span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">π</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">))}</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">imo1961_q3</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"n\">cos</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">sin</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">↔</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">solutionSet</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 379870822,
        "sender_full_name": "David Renshaw",
        "timestamp": 1690656620
    },
    {
        "content": "<p>And I think we're eventually going to want some kind of annotation that we can put on that <code>solutionSet</code> def, to make it clear that supplying that term is supposed to be part of the problem.</p>",
        "id": 379870934,
        "sender_full_name": "David Renshaw",
        "timestamp": 1690656670
    },
    {
        "content": "<p>Lately I've been adding a <code>-- @[solution_data]</code> commented-out (fake) annotation for such defs, as here: <a href=\"https://github.com/dwrensha/math-puzzles-in-lean4/blob/ea6cedd064e12e7853c8e8fed89e3d585ac3ce54/MathPuzzles/Usa1998Q4.lean#L53-L54\">https://github.com/dwrensha/math-puzzles-in-lean4/blob/ea6cedd064e12e7853c8e8fed89e3d585ac3ce54/MathPuzzles/Usa1998Q4.lean#L53-L54</a></p>",
        "id": 379871429,
        "sender_full_name": "David Renshaw",
        "timestamp": 1690656849
    },
    {
        "content": "<p>thank you, much more elegant</p>",
        "id": 379875366,
        "sender_full_name": "Horst Staley",
        "timestamp": 1690658376
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"243791\">@David Renshaw</span> or others, is there an example of how to construct the solutionSet somehow within a Lean environment?</p>\n<p>Seems like most of the answers here figure it out via pen and paper ...</p>",
        "id": 380091667,
        "sender_full_name": "Horst Staley",
        "timestamp": 1690737713
    },
    {
        "content": "<p>You want to automatically fill in the term for <code>solutionSet</code>? That's really difficult, but it's ultimately something we'll need to do as part of the IMO Grand Challenge.</p>",
        "id": 380098093,
        "sender_full_name": "David Renshaw",
        "timestamp": 1690739553
    },
    {
        "content": "<p>Hm... I suppose a tricky aspect is that if you are filling in the term in tactic mode, you don't have easy access to the later definition <code>imo1961_q3</code> where the def is used.</p>",
        "id": 380098320,
        "sender_full_name": "David Renshaw",
        "timestamp": 1690739614
    },
    {
        "content": "<p>eventually yes, but at first I was thinking just demonstrating that it could be done manually in the Lean environment would be a good step</p>",
        "id": 380098813,
        "sender_full_name": "Horst Staley",
        "timestamp": 1690739729
    },
    {
        "content": "<p>what do you mean by \"in the Lean environment\"?</p>",
        "id": 380099099,
        "sender_full_name": "David Renshaw",
        "timestamp": 1690739806
    },
    {
        "content": "<p>I mean, a sequence of steps/tactics that would begin with just (cos x)^n - (sin x)^n = 1, and end up with the contents of solutionSet ...</p>",
        "id": 380099713,
        "sender_full_name": "Horst Staley",
        "timestamp": 1690739931
    },
    {
        "content": "<p>maybe the best analogue would be to scratch work?</p>",
        "id": 380099848,
        "sender_full_name": "Horst Staley",
        "timestamp": 1690739965
    },
    {
        "content": "<p>hopefully what I am saying makes sense, I am new to Lean</p>",
        "id": 380100055,
        "sender_full_name": "Horst Staley",
        "timestamp": 1690740016
    },
    {
        "content": "<p>In Lean 3 it was possible to write:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">the_problem</span> <span class=\"o\">(</span><span class=\"n\">ans</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"n\">ans</span>\n\n<span class=\"c1\">-- this should be a theorem, but if you make it a def then the `_` can be filled in later</span>\n<span class=\"kd\">def</span> <span class=\"n\">obvious</span> <span class=\"o\">:</span> <span class=\"n\">the_problem</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">obvious</span> <span class=\"c1\">-- the_problem (1 + 2)</span>\n</code></pre></div>",
        "id": 380101401,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1690740371
    },
    {
        "content": "<p>I like the word \"proplem\", but I don't understand what Eric is saying</p>",
        "id": 380102492,
        "sender_full_name": "David Renshaw",
        "timestamp": 1690740621
    },
    {
        "content": "<p>In our case we could do</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">imo1961_q3</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">solutionSet</span><span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"n\">cos</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">sin</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">↔</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">solutionSet</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>and then ... ?</p>",
        "id": 380102683,
        "sender_full_name": "David Renshaw",
        "timestamp": 1690740693
    },
    {
        "content": "<p>The point is that in Lean 3 you could use a <code>def</code> where you would normally use a theorem, and it leaves a metavariable to solve mid-proof</p>",
        "id": 380103817,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1690740920
    },
    {
        "content": "<p>interesting</p>",
        "id": 380104519,
        "sender_full_name": "David Renshaw",
        "timestamp": 1690741065
    },
    {
        "content": "<p>is there a way to do this in Lean4?</p>",
        "id": 380105988,
        "sender_full_name": "Horst Staley",
        "timestamp": 1690741382
    },
    {
        "content": "<p>is there a better channel to get feedback on my lean code? or should I just keep posting it here</p>",
        "id": 380116683,
        "sender_full_name": "Horst Staley",
        "timestamp": 1690745189
    },
    {
        "content": "<p>Posting here is fine</p>",
        "id": 380119167,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1690746052
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 380119654,
        "sender_full_name": "Horst Staley",
        "timestamp": 1690746243
    },
    {
        "content": "<p>Uploading code by attaching it is quite inconvenient, eg I can't see it on mobile. Just paste the code in between triple backticks unless it's well over 100 lines in which case link to a gist</p>",
        "id": 380120199,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1690746466
    },
    {
        "content": "<p>Sorry I’m also on mobile :)</p>",
        "id": 380120385,
        "sender_full_name": "Horst Staley",
        "timestamp": 1690746534
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Real.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Nat.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Analysis.SpecialFunctions.Trigonometric.Complex</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.Linarith</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Real</span>\n<span class=\"kn\">open</span> <span class=\"n\">Nat</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">sin_even_nonneg</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">even_n</span> <span class=\"o\">:</span> <span class=\"n\">Even</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">sin</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">even_n</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"n\">hr</span><span class=\"o\">⟩</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">hr</span><span class=\"o\">]</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">two_mul</span><span class=\"o\">]</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">rpow_nat_cast</span><span class=\"o\">]</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">pow_mul</span><span class=\"o\">]</span>\n  <span class=\"n\">apply</span> <span class=\"n\">pow_nonneg</span>\n  <span class=\"n\">apply</span> <span class=\"n\">sq_nonneg</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">cos_pow_ge_one</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">even_n</span> <span class=\"o\">:</span> <span class=\"n\">Even</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">cos</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"bp\">↑</span><span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">sin</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"bp\">↑</span><span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">cos</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"bp\">↑</span><span class=\"n\">n</span> <span class=\"bp\">≥</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">f</span><span class=\"o\">]</span>\n  <span class=\"n\">apply</span> <span class=\"n\">le_add_of_nonneg_right</span>\n  <span class=\"n\">exact</span> <span class=\"n\">sin_even_nonneg</span> <span class=\"n\">x</span> <span class=\"n\">n</span> <span class=\"n\">even_n</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">abs_cos_pow_le_one</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">abs</span> <span class=\"o\">(</span><span class=\"n\">cos</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"bp\">≤</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">apply</span> <span class=\"n\">rpow_le_one</span>\n  <span class=\"n\">apply</span> <span class=\"n\">abs_nonneg</span>\n  <span class=\"n\">apply</span> <span class=\"n\">abs_cos_le_one</span>\n  <span class=\"n\">apply</span> <span class=\"n\">cast_nonneg</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">cos_pow_le_one</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">cos</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"bp\">≤</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"n\">le_abs_self</span> <span class=\"o\">((</span><span class=\"n\">cos</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n  <span class=\"k\">have</span> <span class=\"n\">g</span> <span class=\"o\">:=</span> <span class=\"n\">abs_cos_pow_le_one</span> <span class=\"n\">x</span> <span class=\"n\">n</span>\n  <span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"n\">abs_rpow_le_abs_rpow</span> <span class=\"o\">(</span><span class=\"n\">cos</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">↑</span><span class=\"n\">n</span>\n  <span class=\"k\">have</span> <span class=\"n\">j</span> <span class=\"o\">:=</span> <span class=\"n\">le_trans</span> <span class=\"n\">f</span> <span class=\"n\">h</span>\n  <span class=\"k\">have</span> <span class=\"n\">k</span> <span class=\"o\">:=</span> <span class=\"n\">le_trans</span> <span class=\"n\">j</span> <span class=\"n\">g</span>\n  <span class=\"n\">exact</span> <span class=\"n\">k</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">sin_eq_zero_if_n_even_and_f</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">even_n</span> <span class=\"o\">:</span> <span class=\"n\">Even</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"o\">(</span><span class=\"n\">cos</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">sin</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">→</span> <span class=\"n\">sin</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">sub_eq_iff_eq_add</span><span class=\"o\">]</span>\n  <span class=\"n\">intro</span> <span class=\"n\">f</span>\n  <span class=\"k\">have</span> <span class=\"n\">g</span> <span class=\"o\">:=</span> <span class=\"n\">cos_pow_ge_one</span> <span class=\"n\">x</span> <span class=\"n\">n</span> <span class=\"n\">even_n</span> <span class=\"n\">f</span>\n  <span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"n\">cos_pow_le_one</span> <span class=\"n\">x</span> <span class=\"n\">n</span>\n  <span class=\"k\">have</span> <span class=\"n\">k</span> <span class=\"o\">:=</span> <span class=\"n\">le_antisymm</span> <span class=\"n\">h</span> <span class=\"n\">g</span>\n  <span class=\"k\">have</span> <span class=\"n\">l</span> <span class=\"o\">:=</span> <span class=\"n\">congr_arg</span> <span class=\"n\">abs</span> <span class=\"n\">k</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">abs_one</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">l</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">rpow_nat_cast</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">l</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">abs_pow_eq_one</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">l</span>\n  <span class=\"k\">have</span> <span class=\"n\">m</span> <span class=\"o\">:=</span> <span class=\"n\">eq_or_eq_neg_of_abs_eq</span> <span class=\"n\">l</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"bp\">@</span><span class=\"n\">sin_eq_zero_iff_cos_eq</span> <span class=\"n\">x</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">m</span>\n  <span class=\"n\">exact</span> <span class=\"n\">m</span>\n  <span class=\"n\">apply</span> <span class=\"n\">Nat.pos_of_ne_zero</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">k</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">f</span>\n  <span class=\"n\">contrapose</span> <span class=\"n\">f</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">neZero_iff</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">f</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">not_neZero</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">f</span>\n  <span class=\"n\">intro</span> <span class=\"n\">f_1</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">f</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">f_1</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">rpow_nat_cast</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">f_1</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">_root_.pow_zero</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">f_1</span>\n  <span class=\"n\">norm_num</span> <span class=\"n\">at</span> <span class=\"n\">f_1</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">f_holds_if_n_nonzero_even_and_x_integer_multiple_of_pi</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">n_zero</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">even_n</span> <span class=\"o\">:</span> <span class=\"n\">Even</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"bp\">↑</span><span class=\"n\">k</span> <span class=\"bp\">*</span> <span class=\"n\">π</span> <span class=\"bp\">→</span>\n<span class=\"n\">cos</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"bp\">↑</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">sin</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"bp\">↑</span><span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">f</span>\n  <span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">,</span> <span class=\"bp\">↑</span><span class=\"n\">k</span> <span class=\"bp\">*</span> <span class=\"n\">π</span> <span class=\"bp\">=</span> <span class=\"n\">x</span>\n  <span class=\"n\">use</span> <span class=\"n\">k</span>\n  <span class=\"n\">exact</span> <span class=\"n\">symm</span> <span class=\"n\">f</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">sin_eq_zero_iff</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">sin_eq_zero_iff_cos_eq</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"n\">h1</span> <span class=\"bp\">|</span> <span class=\"n\">h2</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h1</span><span class=\"o\">]</span>\n  <span class=\"n\">norm_num</span>\n  <span class=\"n\">exact</span> <span class=\"n\">Nat.pos_of_ne_zero</span> <span class=\"n\">n_zero</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h2</span><span class=\"o\">,</span> <span class=\"n\">rpow_nat_cast</span><span class=\"o\">,</span> <span class=\"n\">rpow_nat_cast</span><span class=\"o\">,</span> <span class=\"n\">zero_pow</span><span class=\"o\">,</span> <span class=\"n\">sub_zero</span><span class=\"o\">,</span>\n  <span class=\"n\">neg_one_pow_eq_one_iff_even</span><span class=\"o\">]</span>\n  <span class=\"n\">exact</span> <span class=\"n\">even_n</span>\n  <span class=\"n\">norm_num</span>\n  <span class=\"n\">exact</span> <span class=\"n\">Nat.pos_of_ne_zero</span> <span class=\"n\">n_zero</span>\n\n<span class=\"c1\">-- @[solution_data]</span>\n<span class=\"kd\">def</span> <span class=\"n\">solutionSet</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span>\n  <span class=\"k\">if</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n  <span class=\"k\">then</span> <span class=\"bp\">∅</span>\n  <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"n\">Even</span> <span class=\"n\">n</span>\n  <span class=\"k\">then</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"bp\">↑</span><span class=\"n\">k</span> <span class=\"bp\">*</span> <span class=\"n\">π</span><span class=\"o\">}</span>\n  <span class=\"k\">else</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">,</span>\n         <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"o\">((</span><span class=\"mi\">4</span> <span class=\"bp\">*</span> <span class=\"bp\">↑</span><span class=\"n\">k</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">π</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">))</span> <span class=\"bp\">∨</span>\n         <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"o\">((</span><span class=\"mi\">4</span> <span class=\"bp\">*</span> <span class=\"bp\">↑</span><span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">π</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">))}</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">imo1961_q3</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">cos</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">sin</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">↔</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">solutionSet</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">solutionSet</span><span class=\"o\">]</span>\n  <span class=\"n\">split_ifs</span> <span class=\"k\">with</span> <span class=\"n\">n_zero</span> <span class=\"n\">n_even</span>\n  <span class=\"n\">constructor</span>\n\n  <span class=\"c1\">-- case n=0</span>\n  <span class=\"n\">intro</span> <span class=\"n\">f</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">rpow_nat_cast</span><span class=\"o\">,</span> <span class=\"n\">rpow_nat_cast</span><span class=\"o\">,</span> <span class=\"n\">sub_eq_iff_eq_add</span><span class=\"o\">,</span> <span class=\"n\">n_zero</span><span class=\"o\">,</span> <span class=\"n\">_root_.pow_zero</span><span class=\"o\">,</span>\n  <span class=\"n\">_root_.pow_zero</span><span class=\"o\">,</span> <span class=\"n\">one_add_one_eq_two</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">f</span>\n  <span class=\"n\">norm_num</span> <span class=\"n\">at</span> <span class=\"n\">f</span>\n  <span class=\"n\">exfalso</span>\n\n  <span class=\"c1\">-- case n even, forward direction</span>\n  <span class=\"n\">constructor</span>\n  <span class=\"n\">intro</span> <span class=\"n\">f</span>\n  <span class=\"k\">have</span> <span class=\"n\">g</span> <span class=\"o\">:=</span> <span class=\"n\">sin_eq_zero_if_n_even_and_f</span> <span class=\"n\">x</span> <span class=\"n\">n</span> <span class=\"n\">n_even</span> <span class=\"n\">f</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">sin_eq_zero_iff</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">g</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">g</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">g1</span><span class=\"o\">⟩</span>\n  <span class=\"n\">constructor</span>\n  <span class=\"n\">exact</span> <span class=\"n\">symm</span> <span class=\"n\">g1</span>\n\n  <span class=\"c1\">-- case n even, reverse direction</span>\n  <span class=\"n\">intro</span> <span class=\"n\">f</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">f</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">⟩</span>\n  <span class=\"n\">exact</span> <span class=\"n\">f_holds_if_n_nonzero_even_and_x_integer_multiple_of_pi</span> <span class=\"n\">x</span> <span class=\"n\">n</span> <span class=\"n\">a</span> <span class=\"n\">n_zero</span> <span class=\"n\">n_even</span> <span class=\"n\">b</span>\n\n  <span class=\"c1\">--case n odd</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 380120473,
        "sender_full_name": "Horst Staley",
        "timestamp": 1690746560
    },
    {
        "content": "<p>Edit the post to use <code> ``` </code> at top and bottom (you've used the wrong ticks)</p>",
        "id": 380120937,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1690746663
    },
    {
        "content": "<p><code>sin_even_nonneg</code> shouldn't exist in that form -- <em>any</em> real raised to an even power is nonnegative. Make the result more general and change the name?</p>",
        "id": 380121256,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1690746770
    },
    {
        "content": "<p><code>cos_pow_le_one</code> has a much more elegant proof as a three line <code>calc</code> block</p>",
        "id": 380121624,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1690746892
    },
    {
        "content": "<p><code>sin_eq_zero_if_n_even</code> : lemma names shouldn't have <code>if</code> or an <code>and</code> in -- take a look at the <a href=\"https://leanprover-community.github.io/contribute/naming.html\">#naming</a> convention. We use <code>of</code> for both. <code>and</code> would only be in the name of a lemma which explicitly mentioned the logical <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>∧</mo></mrow><annotation encoding=\"application/x-tex\">\\land</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5556em;\"></span><span class=\"mord\">∧</span></span></span></span> symbol</p>",
        "id": 380122254,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1690747124
    },
    {
        "content": "<p>The layout of the <code>sin_eq_zero_if_n_even</code> proof is poor -- you should never have two open goals in your context; when this happens you need to indent. If you don't do this it makes proofs very hard to read away from lean</p>",
        "id": 380122445,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1690747210
    },
    {
        "content": "<p>Nice job though -- you're half way there!</p>",
        "id": 380122588,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1690747251
    },
    {
        "content": "<p>2/3 :) if you consider the n=0 case</p>",
        "id": 380122737,
        "sender_full_name": "Horst Staley",
        "timestamp": 1690747317
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 380122748,
        "sender_full_name": "Horst Staley",
        "timestamp": 1690747322
    },
    {
        "content": "<p>OK, I just had the time to do another pass, would you mind critiquing again?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Real.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Nat.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Analysis.SpecialFunctions.Trigonometric.Complex</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.Linarith</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Real</span>\n<span class=\"kn\">open</span> <span class=\"n\">Nat</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">rpow_even_nonneg</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span>\n<span class=\"o\">(</span><span class=\"n\">even_n</span> <span class=\"o\">:</span> <span class=\"n\">Even</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">even_n</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"n\">hr</span><span class=\"o\">⟩</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">hr</span><span class=\"o\">,</span> <span class=\"bp\">←</span><span class=\"n\">two_mul</span><span class=\"o\">,</span> <span class=\"n\">rpow_nat_cast</span><span class=\"o\">,</span> <span class=\"n\">mul_comm</span><span class=\"o\">,</span> <span class=\"n\">pow_mul</span><span class=\"o\">]</span>\n  <span class=\"k\">have</span> <span class=\"n\">g</span><span class=\"o\">:=</span> <span class=\"n\">sq_nonneg</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">^</span><span class=\"n\">r</span><span class=\"o\">)</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">rpow_nat_cast</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">g</span>\n  <span class=\"n\">exact</span> <span class=\"n\">g</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">cos_pow_ge_one</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span>\n<span class=\"o\">(</span><span class=\"n\">even_n</span> <span class=\"o\">:</span> <span class=\"n\">Even</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">cos</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"bp\">↑</span><span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">sin</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"bp\">↑</span><span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">cos</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"bp\">↑</span><span class=\"n\">n</span> <span class=\"bp\">≥</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">f</span><span class=\"o\">]</span>\n  <span class=\"n\">apply</span> <span class=\"n\">le_add_of_nonneg_right</span>\n  <span class=\"n\">exact</span> <span class=\"n\">rpow_even_nonneg</span> <span class=\"n\">even_n</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">abs_cos_pow_le_one</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">abs</span> <span class=\"o\">(</span><span class=\"n\">cos</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"bp\">≤</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">apply</span> <span class=\"n\">rpow_le_one</span>\n  <span class=\"n\">apply</span> <span class=\"n\">abs_nonneg</span>\n  <span class=\"n\">apply</span> <span class=\"n\">abs_cos_le_one</span>\n  <span class=\"n\">apply</span> <span class=\"n\">cast_nonneg</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">cos_pow_le_one</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">cos</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"bp\">≤</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n  <span class=\"k\">calc</span>\n    <span class=\"o\">(</span><span class=\"n\">cos</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"bp\">≤</span> <span class=\"n\">abs</span> <span class=\"o\">((</span><span class=\"n\">cos</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">le_abs_self</span> <span class=\"o\">((</span><span class=\"n\">cos</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"n\">n</span><span class=\"o\">)</span>\n    <span class=\"n\">_</span>           <span class=\"bp\">≤</span> <span class=\"n\">abs</span> <span class=\"o\">(</span><span class=\"n\">cos</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"n\">n</span>   <span class=\"o\">:=</span> <span class=\"n\">abs_rpow_le_abs_rpow</span> <span class=\"o\">(</span><span class=\"n\">cos</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">↑</span><span class=\"n\">n</span>\n    <span class=\"n\">_</span>           <span class=\"bp\">≤</span> <span class=\"mi\">1</span>                 <span class=\"o\">:=</span> <span class=\"n\">abs_cos_pow_le_one</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">sin_eq_zero_of_even_f</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">even_n</span> <span class=\"o\">:</span> <span class=\"n\">Even</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"o\">(</span><span class=\"n\">cos</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">sin</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">→</span> <span class=\"n\">sin</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">sub_eq_iff_eq_add</span><span class=\"o\">]</span>\n  <span class=\"n\">intro</span> <span class=\"n\">f</span>\n  <span class=\"k\">if</span> <span class=\"n\">hn</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"k\">then</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">rpow_nat_cast</span><span class=\"o\">,</span> <span class=\"n\">rpow_nat_cast</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">f</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">hn</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">f</span>\n    <span class=\"n\">norm_num</span> <span class=\"n\">at</span> <span class=\"n\">f</span>\n  <span class=\"k\">else</span>\n    <span class=\"k\">have</span> <span class=\"n\">g</span> <span class=\"o\">:=</span>\n    <span class=\"n\">congr_arg</span> <span class=\"n\">abs</span> <span class=\"o\">(</span><span class=\"n\">le_antisymm</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">cos_pow_le_one</span> <span class=\"n\">x</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">cos_pow_ge_one</span> <span class=\"n\">even_n</span> <span class=\"n\">f</span><span class=\"o\">))</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">abs_one</span><span class=\"o\">,</span> <span class=\"n\">rpow_nat_cast</span><span class=\"o\">,</span> <span class=\"n\">abs_pow_eq_one</span> <span class=\"o\">(</span><span class=\"n\">cos</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Nat.pos_of_ne_zero</span> <span class=\"n\">hn</span><span class=\"o\">)]</span> <span class=\"n\">at</span> <span class=\"n\">g</span>\n    <span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"n\">eq_or_eq_neg_of_abs_eq</span> <span class=\"n\">g</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"bp\">@</span><span class=\"n\">sin_eq_zero_iff_cos_eq</span> <span class=\"n\">x</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n    <span class=\"n\">exact</span> <span class=\"n\">h</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">exists_integer_of_integer</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"bp\">↑</span><span class=\"n\">k</span> <span class=\"bp\">*</span> <span class=\"n\">π</span> <span class=\"bp\">→</span> <span class=\"bp\">∃</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">,</span> <span class=\"bp\">↑</span><span class=\"n\">k</span> <span class=\"bp\">*</span> <span class=\"n\">π</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">f</span>\n  <span class=\"n\">use</span> <span class=\"n\">k</span>\n  <span class=\"n\">exact</span> <span class=\"n\">symm</span> <span class=\"n\">f</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">f_holds_of_n_nonzero_even_x_int_multiple_of_pi</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">}</span>\n<span class=\"o\">(</span><span class=\"n\">n_zero</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">even_n</span> <span class=\"o\">:</span> <span class=\"n\">Even</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"bp\">↑</span><span class=\"n\">k</span> <span class=\"bp\">*</span> <span class=\"n\">π</span> <span class=\"bp\">→</span>\n<span class=\"n\">cos</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"bp\">↑</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">sin</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"bp\">↑</span><span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">f</span>\n  <span class=\"k\">have</span> <span class=\"n\">g</span> <span class=\"o\">:=</span> <span class=\"n\">exists_integer_of_integer</span> <span class=\"n\">f</span>\n  <span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"n\">Nat.pos_of_ne_zero</span> <span class=\"n\">n_zero</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">sin_eq_zero_iff</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">g</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">g</span><span class=\"o\">]</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">sin_eq_zero_iff_cos_eq</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">g</span>\n  <span class=\"n\">apply</span> <span class=\"n\">Or.elim</span> <span class=\"n\">g</span>\n  <span class=\"bp\">.</span> <span class=\"n\">intro</span> <span class=\"n\">g1</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">g1</span><span class=\"o\">]</span>\n    <span class=\"n\">norm_num</span>\n    <span class=\"n\">exact</span> <span class=\"n\">Nat.pos_of_ne_zero</span> <span class=\"n\">n_zero</span>\n  <span class=\"bp\">.</span> <span class=\"n\">intro</span> <span class=\"n\">g2</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">g2</span><span class=\"o\">,</span> <span class=\"n\">rpow_nat_cast</span><span class=\"o\">,</span> <span class=\"n\">rpow_nat_cast</span><span class=\"o\">,</span> <span class=\"n\">zero_pow</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">sub_zero</span><span class=\"o\">,</span> <span class=\"n\">neg_one_pow_eq_one_iff_even</span><span class=\"o\">]</span>\n    <span class=\"n\">exact</span> <span class=\"n\">even_n</span>\n    <span class=\"n\">norm_num</span>\n\n<span class=\"c1\">-- @[solution_data]</span>\n<span class=\"kd\">def</span> <span class=\"n\">solutionSet</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span>\n  <span class=\"k\">if</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n  <span class=\"k\">then</span> <span class=\"bp\">∅</span>\n  <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"n\">Even</span> <span class=\"n\">n</span>\n  <span class=\"k\">then</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"bp\">↑</span><span class=\"n\">k</span> <span class=\"bp\">*</span> <span class=\"n\">π</span><span class=\"o\">}</span>\n  <span class=\"k\">else</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">,</span>\n         <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"o\">((</span><span class=\"mi\">4</span> <span class=\"bp\">*</span> <span class=\"bp\">↑</span><span class=\"n\">k</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">π</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">))</span> <span class=\"bp\">∨</span>\n         <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"o\">((</span><span class=\"mi\">4</span> <span class=\"bp\">*</span> <span class=\"bp\">↑</span><span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">π</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">))}</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">imo1961_q3</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">cos</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">sin</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">↔</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">solutionSet</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">solutionSet</span><span class=\"o\">]</span>\n  <span class=\"n\">split_ifs</span> <span class=\"k\">with</span> <span class=\"n\">n_zero</span> <span class=\"n\">n_even</span>\n  <span class=\"n\">constructor</span>\n\n  <span class=\"c1\">-- case n=0</span>\n  <span class=\"n\">intro</span> <span class=\"n\">f</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">rpow_nat_cast</span><span class=\"o\">,</span> <span class=\"n\">rpow_nat_cast</span><span class=\"o\">,</span> <span class=\"n\">sub_eq_iff_eq_add</span><span class=\"o\">,</span> <span class=\"n\">n_zero</span><span class=\"o\">,</span> <span class=\"n\">_root_.pow_zero</span><span class=\"o\">,</span>\n  <span class=\"n\">_root_.pow_zero</span><span class=\"o\">,</span> <span class=\"n\">one_add_one_eq_two</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">f</span>\n  <span class=\"n\">norm_num</span> <span class=\"n\">at</span> <span class=\"n\">f</span>\n  <span class=\"n\">exfalso</span>\n\n  <span class=\"c1\">-- case n even, forward direction</span>\n  <span class=\"n\">constructor</span>\n  <span class=\"n\">intro</span> <span class=\"n\">f</span>\n  <span class=\"k\">have</span> <span class=\"n\">g</span> <span class=\"o\">:=</span> <span class=\"n\">sin_eq_zero_of_even_f</span> <span class=\"n\">n_even</span> <span class=\"n\">f</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">sin_eq_zero_iff</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">g</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">g</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">g1</span><span class=\"o\">⟩</span>\n  <span class=\"n\">constructor</span>\n  <span class=\"n\">exact</span> <span class=\"n\">symm</span> <span class=\"n\">g1</span>\n\n  <span class=\"c1\">-- case n even, reverse direction</span>\n  <span class=\"n\">intro</span> <span class=\"n\">f</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">f</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">⟩</span>\n  <span class=\"n\">exact</span> <span class=\"n\">f_holds_of_n_nonzero_even_x_int_multiple_of_pi</span> <span class=\"n\">n_zero</span> <span class=\"n\">n_even</span> <span class=\"n\">b</span>\n\n  <span class=\"c1\">--case n odd</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 381958380,
        "sender_full_name": "Horst Staley",
        "timestamp": 1691177362
    },
    {
        "content": "<p>The exists_integer_of_integer lemma seemed a bit hacky to me, but i couldn’t figure out a simpler way to transform it</p>",
        "id": 381958469,
        "sender_full_name": "Horst Staley",
        "timestamp": 1691177399
    },
    {
        "content": "<p>Instead of pulling that out as a lemma, you could directly do</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"k\">have</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">,</span> <span class=\"bp\">↑</span><span class=\"n\">k</span> <span class=\"bp\">*</span> <span class=\"n\">π</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">f.symm</span><span class=\"o\">⟩</span>\n</code></pre></div>",
        "id": 381973577,
        "sender_full_name": "David Renshaw",
        "timestamp": 1691182255
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"266253\">Joseph Myers</span> <a href=\"#narrow/stream/113489-new-members/topic/imo.20problems.20that.20are.20challenging.20to.20formalize/near/376629257\">said</a>:</p>\n<blockquote>\n<p>It's hard to be sure your formal statement is correct if you don't formalize a proof (consider the case of an AI that claimed a solution to a hard problem that had been wrongly formalized using <code>ℕ</code> subtraction).</p>\n</blockquote>\n<p>Can you link to that story?</p>",
        "id": 382747512,
        "sender_full_name": "Ioannis Konstantoulas",
        "timestamp": 1691438717
    },
    {
        "content": "<p><a href=\"https://arxiv.org/pdf/2205.11491.pdf\">https://arxiv.org/pdf/2205.11491.pdf</a> (last page, proof of an incorrect version of IMO 2001 problem 6).</p>",
        "id": 382783470,
        "sender_full_name": "Joseph Myers",
        "timestamp": 1691453498
    }
]