[
    {
        "content": "<p>Hi! For a proof that I'm writing, I need to prove that a list of numbers are prime:<br>\n<code>def nums := [2, 3, 5, 7, 13, 23, 43, 83, 163, 317, 631, 1259, 2503, 4001]</code><br>\nI can check this myself using:<br>\n<code>#eval to_bool (list.all₂ nat.prime nums)</code><br>\nIs there a way to turn this into a proof by evaluation?<br>\n<code>lemma nums_prime : list.all₂ nat.prime nums := ??</code></p>",
        "id": 390041714,
        "sender_full_name": "Jack Valmadre",
        "timestamp": 1694271689
    },
    {
        "content": "<p>Looks like you are using lean 3 which is now end of life, I definitely recommend you switch to lean 4 which has lots of nice new features (including some that would probably make answering this easier).<br>\nThat said if you want to prove numbers prime its better to use the dedicated norm_num extension rather than try and have the kernel do it.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.nat.prime</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.nat.prime_norm_num</span>\n<span class=\"kd\">def</span> <span class=\"n\">nums</span> <span class=\"o\">:=</span> <span class=\"o\">[</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"mi\">5</span><span class=\"o\">,</span> <span class=\"mi\">7</span><span class=\"o\">,</span> <span class=\"mi\">13</span><span class=\"o\">,</span> <span class=\"mi\">23</span><span class=\"o\">,</span> <span class=\"mi\">43</span><span class=\"o\">,</span> <span class=\"mi\">83</span><span class=\"o\">,</span> <span class=\"mi\">163</span><span class=\"o\">,</span> <span class=\"mi\">317</span><span class=\"o\">,</span> <span class=\"mi\">631</span><span class=\"o\">,</span> <span class=\"mi\">1259</span><span class=\"o\">,</span> <span class=\"mi\">2503</span><span class=\"o\">,</span> <span class=\"mi\">4001</span><span class=\"o\">]</span>\n<span class=\"k\">#eval</span> <span class=\"n\">to_bool</span> <span class=\"o\">(</span><span class=\"n\">list.all₂</span> <span class=\"n\">nat.prime</span> <span class=\"n\">nums</span><span class=\"o\">)</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">nums_prime</span> <span class=\"o\">:</span> <span class=\"n\">list.all₂</span> <span class=\"n\">nat.prime</span> <span class=\"n\">nums</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">nums</span><span class=\"o\">,</span>\n  <span class=\"n\">norm_num</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 390042725,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1694272454
    },
    {
        "content": "<p>You can see how this was done for the proof of Bertrand's postulate in <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Nat.bertrand#doc\">docs#Nat.bertrand</a>. (This list of primes looks suspiciously similar to yours, so beware of spoilers).</p>",
        "id": 390065658,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1694294701
    },
    {
        "content": "<p>Thank you! <code>norm_num</code> with <code>import data.nat.prime_norm_num</code> worked perfectly. I'll move to Lean 4. And thanks for the spoiler warning - that's exactly the theorem that I'm proving as an exercise :)</p>",
        "id": 390081954,
        "sender_full_name": "Jack Valmadre",
        "timestamp": 1694308436
    },
    {
        "content": "<p>Do you know if there is something similar for <code>list.sorted</code>? It works with <code>#eval to_bool ...</code> but neither of these worked:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.list</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">nums</span> <span class=\"o\">:=</span> <span class=\"o\">[</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"mi\">5</span><span class=\"o\">,</span> <span class=\"mi\">7</span><span class=\"o\">,</span> <span class=\"mi\">13</span><span class=\"o\">,</span> <span class=\"mi\">23</span><span class=\"o\">,</span> <span class=\"mi\">43</span><span class=\"o\">,</span> <span class=\"mi\">83</span><span class=\"o\">,</span> <span class=\"mi\">163</span><span class=\"o\">,</span> <span class=\"mi\">317</span><span class=\"o\">,</span> <span class=\"mi\">631</span><span class=\"o\">,</span> <span class=\"mi\">1259</span><span class=\"o\">,</span> <span class=\"mi\">2503</span><span class=\"o\">,</span> <span class=\"mi\">4001</span><span class=\"o\">]</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">to_bool</span> <span class=\"o\">(</span><span class=\"n\">list.sorted</span> <span class=\"n\">nat.lt</span> <span class=\"n\">nums</span><span class=\"o\">)</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">sorted_nums</span> <span class=\"o\">:</span> <span class=\"n\">list.sorted</span> <span class=\"n\">nat.lt</span> <span class=\"n\">nums</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">nums</span><span class=\"o\">,</span>\n  <span class=\"n\">norm_num</span><span class=\"o\">,</span>  <span class=\"c1\">-- slow (n^2?); does not evaluate inequalities</span>\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">eq_insertion_sort_nums</span> <span class=\"o\">:</span> <span class=\"n\">nums</span> <span class=\"bp\">=</span> <span class=\"n\">list.insertion_sort</span> <span class=\"n\">nat.lt</span> <span class=\"n\">nums</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">nums</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span><span class=\"o\">,</span>\n  <span class=\"n\">norm_num</span><span class=\"o\">,</span>  <span class=\"c1\">-- failed to simplify</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>I think I need <code>norm_num.eval_ineq</code> with <code>expr.lt</code> but I'm not sure how to use it.</p>",
        "id": 390088811,
        "sender_full_name": "Jack Valmadre",
        "timestamp": 1694313247
    },
    {
        "content": "<p>Update: I was able to solve it using <code>refl</code> although it does seem a bit slow. Is this an acceptable way to do it? (Had to switch from <code>lt</code> to <code>le</code> to have total ordering for <code>list.sorted_insertion_sort</code>)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">nums_eq_insertion_sort_self</span> <span class=\"o\">:</span> <span class=\"n\">nums</span> <span class=\"bp\">=</span> <span class=\"n\">list.insertion_sort</span> <span class=\"n\">nat.le</span> <span class=\"n\">nums</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">nums</span><span class=\"o\">,</span>\n  <span class=\"n\">refl</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">sorted_nums</span> <span class=\"o\">:</span> <span class=\"n\">list.sorted</span> <span class=\"n\">nat.le</span> <span class=\"n\">nums</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">nums_eq_insertion_sort_self</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">list.sorted_insertion_sort</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 390091420,
        "sender_full_name": "Jack Valmadre",
        "timestamp": 1694315284
    },
    {
        "content": "<p>Doing anything new in lean 3 is not really an acceptable way to do it any more</p>",
        "id": 390110584,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1694329331
    },
    {
        "content": "<p>OK, sounds good. Thanks for the responses!</p>",
        "id": 390119223,
        "sender_full_name": "Jack Valmadre",
        "timestamp": 1694335405
    },
    {
        "content": "<p>More precisely, I mean \"nobody is going to be motivated to work on fixing something which is slow in Lean 3\" because there is an obvious fix for this.</p>",
        "id": 390119653,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1694335696
    },
    {
        "content": "<p>Ah ok, makes sense, thank you!</p>",
        "id": 390120076,
        "sender_full_name": "Jack Valmadre",
        "timestamp": 1694335997
    },
    {
        "content": "<p>Hi! I'm now trying to do the same thing in Lean 4: I would like to prove <code>List.All₂ Nat.Prime nums</code> where <code>nums</code> is a list of 14 primes. <code>#eval decide ...</code> is fast but proving with <code>norm_num</code> times out (even after importing <code>Mathlib.Tactic.NormNum.Prime</code>). Is there an easy way to achieve this? Thanks!</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.List.Defs</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Nat.Prime</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.NormNum</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.NormNum.Prime</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">nums</span> <span class=\"o\">:=</span> <span class=\"o\">[</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"mi\">5</span><span class=\"o\">,</span> <span class=\"mi\">7</span><span class=\"o\">,</span> <span class=\"mi\">13</span><span class=\"o\">,</span> <span class=\"mi\">23</span><span class=\"o\">,</span> <span class=\"mi\">43</span><span class=\"o\">,</span> <span class=\"mi\">83</span><span class=\"o\">,</span> <span class=\"mi\">163</span><span class=\"o\">,</span> <span class=\"mi\">317</span><span class=\"o\">,</span> <span class=\"mi\">631</span><span class=\"o\">,</span> <span class=\"mi\">1259</span><span class=\"o\">,</span> <span class=\"mi\">2503</span><span class=\"o\">,</span> <span class=\"mi\">4001</span><span class=\"o\">]</span>\n\n<span class=\"c1\">-- Fast</span>\n<span class=\"k\">#eval</span> <span class=\"n\">decide</span> <span class=\"o\">(</span><span class=\"n\">List.All₂</span> <span class=\"n\">Nat.Prime</span> <span class=\"n\">nums</span><span class=\"o\">)</span>\n\n<span class=\"c1\">-- Fast</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">largest</span> <span class=\"o\">:</span> <span class=\"n\">Nat.Prime</span> <span class=\"mi\">4001</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">norm_num</span>\n\n<span class=\"c1\">-- Slow (maximum number of heartbeats (200000) has been reached)</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">allPrimeNums</span> <span class=\"o\">:</span> <span class=\"n\">List.All₂</span> <span class=\"n\">Nat.Prime</span> <span class=\"n\">nums</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">nums</span><span class=\"o\">]</span>\n  <span class=\"n\">norm_num</span>\n</code></pre></div>",
        "id": 390389131,
        "sender_full_name": "Jack Valmadre",
        "timestamp": 1694466973
    },
    {
        "content": "<p><code>simp</code> is timing out, it seems.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">allPrimeNums</span> <span class=\"o\">:</span> <span class=\"n\">List.All₂</span> <span class=\"n\">Nat.Prime</span> <span class=\"n\">nums</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">nums</span><span class=\"o\">]</span> <span class=\"c1\">-- deterministic timeout</span>\n</code></pre></div>",
        "id": 390389522,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1694467182
    },
    {
        "content": "<p>I think it is using <code>decide</code></p>",
        "id": 390389618,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694467214
    },
    {
        "content": "<p>this works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">allPrimeNums</span> <span class=\"o\">:</span> <span class=\"n\">List.All₂</span> <span class=\"n\">Nat.Prime</span> <span class=\"n\">nums</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span> <span class=\"o\">(</span><span class=\"n\">config</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">decide</span> <span class=\"o\">:=</span> <span class=\"n\">false</span><span class=\"o\">})</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">nums</span><span class=\"o\">,</span> <span class=\"n\">List.All₂</span><span class=\"o\">]</span>\n  <span class=\"n\">norm_num1</span>\n  <span class=\"n\">simp</span>\n</code></pre></div>",
        "id": 390389685,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694467241
    },
    {
        "content": "<p>This doesn't:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">not_largest</span> <span class=\"o\">:</span> <span class=\"n\">Nat.Prime</span> <span class=\"mi\">317</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">norm_num</span> <span class=\"c1\">-- timeout</span>\n</code></pre></div>",
        "id": 390390018,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1694467414
    },
    {
        "content": "<p>here's a slightly more manual version:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">allPrimeNums</span> <span class=\"o\">:</span> <span class=\"n\">List.All₂</span> <span class=\"n\">Nat.Prime</span> <span class=\"n\">nums</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">iterate</span> <span class=\"mi\">13</span> <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"kd\">by</span> <span class=\"n\">norm_num1</span><span class=\"o\">,</span> <span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">⟩</span>\n  <span class=\"n\">simp</span><span class=\"bp\">;</span> <span class=\"n\">norm_num1</span>\n</code></pre></div>",
        "id": 390390110,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694467455
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">allPrimeNums</span> <span class=\"o\">:</span> <span class=\"n\">List.All₂</span> <span class=\"n\">Nat.Prime</span> <span class=\"n\">nums</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span> <span class=\"o\">(</span><span class=\"n\">config</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">decide</span> <span class=\"o\">:=</span> <span class=\"n\">false</span><span class=\"o\">})</span>\n  <span class=\"n\">constructor</span><span class=\"bp\">;</span> <span class=\"n\">norm_num</span>\n  <span class=\"n\">constructor</span><span class=\"bp\">;</span> <span class=\"n\">norm_num</span>\n  <span class=\"n\">constructor</span><span class=\"bp\">;</span> <span class=\"n\">norm_num</span>\n  <span class=\"n\">constructor</span><span class=\"bp\">;</span> <span class=\"n\">norm_num</span>\n  <span class=\"n\">constructor</span><span class=\"bp\">;</span> <span class=\"n\">norm_num</span>\n  <span class=\"n\">constructor</span><span class=\"bp\">;</span> <span class=\"n\">norm_num</span>\n  <span class=\"n\">constructor</span><span class=\"bp\">;</span> <span class=\"n\">norm_num</span>\n  <span class=\"n\">constructor</span><span class=\"bp\">;</span> <span class=\"n\">norm_num</span>\n  <span class=\"n\">constructor</span><span class=\"bp\">;</span> <span class=\"n\">norm_num</span>\n  <span class=\"n\">constructor</span><span class=\"bp\">;</span> <span class=\"gr\">sorry</span> <span class=\"c1\">-- ignore 317</span>\n  <span class=\"n\">constructor</span><span class=\"bp\">;</span> <span class=\"n\">norm_num</span>\n  <span class=\"n\">constructor</span><span class=\"bp\">;</span> <span class=\"n\">norm_num</span>\n  <span class=\"n\">constructor</span><span class=\"bp\">;</span> <span class=\"n\">norm_num</span>\n  <span class=\"n\">norm_num</span>\n</code></pre></div>",
        "id": 390390131,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1694467469
    },
    {
        "content": "<p>317 is the new 37...</p>",
        "id": 390390169,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1694467499
    },
    {
        "content": "<p><code>norm_num1</code> does 317 <em>shrug</em></p>",
        "id": 390390184,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1694467506
    },
    {
        "content": "<p>I see a pattern here.</p>",
        "id": 390390211,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1694467523
    },
    {
        "content": "<p>By the way, this list of primes looks familiar: are you aware that mathlib has a proof of Bertrand's postulate?</p>",
        "id": 390390397,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694467622
    },
    {
        "content": "<p>Indeed Jack is: <a href=\"#narrow/stream/113489-new-members/topic/Prove.20decidable.20statement.20by.20evaluation/near/390081954\">https://leanprover.zulipchat.com/#narrow/stream/113489-new-members/topic/Prove.20decidable.20statement.20by.20evaluation/near/390081954</a></p>",
        "id": 390390583,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1694467715
    },
    {
        "content": "<p>It appears that for the numbers less than <code>317</code>, the proof generated by norm_num looks like <code>of_eq_true (eq_true_of_decide (Eq.refl true))</code>, and for the ones greater than it it produces </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">of_eq_true</span>\n  <span class=\"o\">(</span><span class=\"n\">eq_true</span>\n    <span class=\"o\">(</span><span class=\"n\">Mathlib.Meta.NormNum.isNat_prime_2</span> <span class=\"o\">(</span><span class=\"n\">Mathlib.Meta.NormNum.isNat_ofNat</span> <span class=\"n\">ℕ</span> <span class=\"o\">(</span><span class=\"n\">Eq.refl</span> <span class=\"mi\">631</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">Eq.refl</span> <span class=\"n\">true</span><span class=\"o\">)</span>\n      <span class=\"o\">(</span><span class=\"n\">Mathlib.Meta.NormNum.isNat_minFac_4</span> <span class=\"o\">(</span><span class=\"n\">Mathlib.Meta.NormNum.IsNat.raw_refl</span> <span class=\"mi\">631</span><span class=\"o\">)</span>\n        <span class=\"o\">(</span><span class=\"n\">Mathlib.Meta.NormNum.minFacHelper_2</span> <span class=\"o\">(</span><span class=\"n\">Eq.refl</span> <span class=\"mi\">27</span><span class=\"o\">)</span>\n          <span class=\"o\">(</span><span class=\"n\">Mathlib.Meta.NormNum.not_prime_mul_of_ble</span> <span class=\"mi\">5</span> <span class=\"mi\">5</span> <span class=\"mi\">25</span> <span class=\"o\">(</span><span class=\"n\">Eq.refl</span> <span class=\"mi\">25</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Eq.refl</span> <span class=\"n\">false</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Eq.refl</span> <span class=\"n\">false</span><span class=\"o\">))</span>\n<span class=\"bp\">...</span>\n</code></pre></div>\n<p>In other words, simp is using decide sometimes and just giving up and letting norm_num core have a shot when it gets too hard</p>",
        "id": 390390693,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694467783
    },
    {
        "content": "<p>and <code>317</code> seems to be just on the edge where <code>decide</code> thinks it can take it but it can't really</p>",
        "id": 390390794,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694467815
    },
    {
        "content": "<p>Btw, for numbers of the form <code>311...17</code>, every third one is divisible by <code>3</code>, the next one is divisible by <code>37</code>, of the remaining ones, <code>317</code> is prime and then they are all composite at least until <code>311111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111117</code>, although a formal proof of this fact is lacking.</p>",
        "id": 390393714,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1694469208
    },
    {
        "content": "<p>Thanks very much! That's interesting! I'll use the <code>config := {decide := false}</code> and <code>norm_num1</code> approach <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 390394214,
        "sender_full_name": "Jack Valmadre",
        "timestamp": 1694469425
    },
    {
        "content": "<p><code>311111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111117</code> is prime.</p>",
        "id": 390395408,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1694469880
    },
    {
        "content": "<p>The next two primes in the sequence are (28/9)(10^692-1)+9 and (28/9)(10^1805-1)+9.</p>",
        "id": 390396640,
        "sender_full_name": "Richard Copley",
        "timestamp": 1694470438
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/7112\">#7112</a> (sadly not a prime) implements <code>norm_num (config := ...)</code> so you should be able to do this with just <code>norm_num (config := {decide := false}) [nums, List.All₂]</code></p>",
        "id": 390396999,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694470584
    }
]