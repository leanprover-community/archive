[
    {
        "content": "<p>Hello everybody!</p>\n<p>Before I explain my problem, let me first make clear that I know about <code>elan</code>, <code>lake exe cache get</code> and all the other tools which automate the process here.</p>\n<p>What I am trying to do is to understand the Lean tool chain. However, <a href=\"https://leanprover-community.github.io/toolchain.html\">the wiki page</a> seems to be about Lean 3.</p>\n<p>I am on a computer running Ubuntu. I have downloaded Lean 4.1.0. <a href=\"https://github.com/leanprover/lean4/releases/tag/v4.1.0\">here</a> and std4.1.0. <a href=\"https://github.com/leanprover/std4/tree/bump-v4.1.0-rc1\">here</a>. I have also tried with the tag std4.0.0. but got the exact same problem.<br>\nMy goal is to compile mathlib4 using only the <code>lean</code> command. But I first need to compile std4 to do so, and this is where I got stuck.</p>\n<p>I made a script which compiles every <code>.lean</code> file with the command <code>lean -o $FILENAME.olean $FILENAME.lean</code>. It works the following way: whenever the compilation fails because some <code>.olean</code> file is missing, it tries to compile that missing file first.</p>\n<p>And this script works very well at first, and compiles the following files:</p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>./Std/Linter/UnreachableTactic.olean</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<p>./Std/Linter/UnnecessarySeqFocus.olean<br>\n./Std/Util/LibraryNote.olean<br>\n./Std/Util/TermUnsafe.olean<br>\n./Std/Logic.olean<br>\n./Std/Tactic/ByCases.olean<br>\n./Std/Tactic/NoMatch.olean<br>\n./Std/Tactic/GuardExpr.olean<br>\n./Std/Tactic/SimpTrace.olean<br>\n./Std/Tactic/Unreachable.olean<br>\n./Std/Tactic/TryThis.olean<br>\n./Std/Tactic/SeqFocus.olean<br>\n./Std/Tactic/CoeExt.olean<br>\n./Std/Tactic/OpenPrivate.olean<br>\n./Std/Tactic/ShowTerm.olean<br>\n./Std/Tactic/Simpa.olean<br>\n./Std/Tactic/Lint/Misc.olean<br>\n./Std/Tactic/Lint/Basic.olean<br>\n./Std/Tactic/Basic.olean<br>\n./Std/Lean/Tactic.olean<br>\n./Std/Lean/Command.olean<br>\n./Std/Lean/Meta/LCtx.olean<br>\n./Std/Lean/Meta/Basic.olean<br>\n./Std/Lean/TagAttribute.olean<br>\n./Std/Lean/Delaborator.olean<br>\n./Std/Lean/Position.olean<br>\n./Std/Lean/Name.olean<br>\n./Std/Lean/AttributeExtra.olean<br>\n./Std/Lean/Parser.olean<br>\n./Std/Lean/NameMapAttribute.olean<br>\n./Std/Lean/Format.olean<br>\n./Std/Data/List/Init/Lemmas.olean<br>\n./Std/Data/Array/Init/Basic.olean<br>\n./Std/Data/Array/Basic.olean<br>\n./Std/Data/Nat/Init/Lemmas.olean<br>\n./Std/Data/Nat/Basic.olean<br>\n./Std/Data/Ord.olean<br>\n./Std/Linter.olean<br>\n./Std/Classes/Dvd.olean<br>\n./Std/Classes/BEq.olean<br>\n./Std/Classes/LawfulMonad.olean<br>\n./Std/Classes/Order.olean<br>\n./Std/Classes/Cast.olean</p>\n</div></div>\n<p>And then comes <code>./Std/Data/Nat/Lemmas.lean</code> (source <a href=\"https://github.com/leanprover/std4/blob/bump-v4.1.0-rc1/Std/Data/Nat/Lemmas.lean\">here</a>)... The compilation always fails with the following errors:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Lemmas.lean</span><span class=\"o\">:</span><span class=\"mi\">147</span><span class=\"o\">:</span><span class=\"mi\">2</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">kernel</span><span class=\"o\">)</span> <span class=\"kd\">constant</span> <span class=\"n\">has</span> <span class=\"n\">already</span> <span class=\"n\">been</span> <span class=\"n\">declared</span> <span class=\"bp\">'</span><span class=\"n\">Lemmas._auxLemma.1'</span>\n<span class=\"n\">Lemmas.lean</span><span class=\"o\">:</span><span class=\"mi\">150</span><span class=\"o\">:</span><span class=\"mi\">2</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">kernel</span><span class=\"o\">)</span> <span class=\"kd\">constant</span> <span class=\"n\">has</span> <span class=\"n\">already</span> <span class=\"n\">been</span> <span class=\"n\">declared</span> <span class=\"bp\">'</span><span class=\"n\">Lemmas._auxLemma.1'</span>\n<span class=\"n\">Lemmas.lean</span><span class=\"o\">:</span><span class=\"mi\">219</span><span class=\"o\">:</span><span class=\"mi\">11</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">kernel</span><span class=\"o\">)</span> <span class=\"kd\">constant</span> <span class=\"n\">has</span> <span class=\"n\">already</span> <span class=\"n\">been</span> <span class=\"n\">declared</span> <span class=\"bp\">'</span><span class=\"n\">Lemmas._auxLemma.1'</span>\n<span class=\"n\">Lemmas.lean</span><span class=\"o\">:</span><span class=\"mi\">219</span><span class=\"o\">:</span><span class=\"mi\">11</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">kernel</span><span class=\"o\">)</span> <span class=\"kd\">constant</span> <span class=\"n\">has</span> <span class=\"n\">already</span> <span class=\"n\">been</span> <span class=\"n\">declared</span> <span class=\"bp\">'</span><span class=\"n\">Lemmas._auxLemma.1'</span>\n<span class=\"n\">Lemmas.lean</span><span class=\"o\">:</span><span class=\"mi\">483</span><span class=\"o\">:</span><span class=\"mi\">2</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">kernel</span><span class=\"o\">)</span> <span class=\"kd\">constant</span> <span class=\"n\">has</span> <span class=\"n\">already</span> <span class=\"n\">been</span> <span class=\"n\">declared</span> <span class=\"bp\">'</span><span class=\"n\">Lemmas._auxLemma.1'</span>\n<span class=\"n\">Lemmas.lean</span><span class=\"o\">:</span><span class=\"mi\">516</span><span class=\"o\">:</span><span class=\"mi\">68</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">kernel</span><span class=\"o\">)</span> <span class=\"kd\">constant</span> <span class=\"n\">has</span> <span class=\"n\">already</span> <span class=\"n\">been</span> <span class=\"n\">declared</span> <span class=\"bp\">'</span><span class=\"n\">Lemmas._auxLemma.1'</span>\n<span class=\"n\">Lemmas.lean</span><span class=\"o\">:</span><span class=\"mi\">560</span><span class=\"o\">:</span><span class=\"mi\">15</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">kernel</span><span class=\"o\">)</span> <span class=\"kd\">constant</span> <span class=\"n\">has</span> <span class=\"n\">already</span> <span class=\"n\">been</span> <span class=\"n\">declared</span> <span class=\"bp\">'</span><span class=\"n\">Lemmas._auxLemma.1'</span>\n<span class=\"n\">Lemmas.lean</span><span class=\"o\">:</span><span class=\"mi\">567</span><span class=\"o\">:</span><span class=\"mi\">51</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">kernel</span><span class=\"o\">)</span> <span class=\"kd\">constant</span> <span class=\"n\">has</span> <span class=\"n\">already</span> <span class=\"n\">been</span> <span class=\"n\">declared</span> <span class=\"bp\">'</span><span class=\"n\">Lemmas._auxLemma.1'</span>\n<span class=\"n\">Lemmas.lean</span><span class=\"o\">:</span><span class=\"mi\">570</span><span class=\"o\">:</span><span class=\"mi\">4</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">type</span> <span class=\"n\">mismatch</span>\n  <span class=\"n\">Nat.lt_of_lt_of_le</span> <span class=\"bp\">?</span><span class=\"n\">m.33061</span> <span class=\"o\">(</span><span class=\"n\">le_add_right</span> <span class=\"bp\">?</span><span class=\"n\">m.33063</span> <span class=\"bp\">?</span><span class=\"n\">m.33064</span><span class=\"o\">)</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"bp\">?</span><span class=\"n\">m.33058</span> <span class=\"bp\">&lt;</span> <span class=\"bp\">?</span><span class=\"n\">m.33063</span> <span class=\"bp\">+</span> <span class=\"bp\">?</span><span class=\"n\">m.33064</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"bp\">¬</span><span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">k</span> <span class=\"bp\">≤</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n<span class=\"n\">Lemmas.lean</span><span class=\"o\">:</span><span class=\"mi\">567</span><span class=\"o\">:</span><span class=\"mi\">51</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">kernel</span><span class=\"o\">)</span> <span class=\"kd\">constant</span> <span class=\"n\">has</span> <span class=\"n\">already</span> <span class=\"n\">been</span> <span class=\"n\">declared</span> <span class=\"bp\">'</span><span class=\"n\">Lemmas._auxLemma.1'</span>\n<span class=\"n\">Lemmas.lean</span><span class=\"o\">:</span><span class=\"mi\">848</span><span class=\"o\">:</span><span class=\"mi\">6</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">kernel</span><span class=\"o\">)</span> <span class=\"kd\">constant</span> <span class=\"n\">has</span> <span class=\"n\">already</span> <span class=\"n\">been</span> <span class=\"n\">declared</span> <span class=\"bp\">'</span><span class=\"n\">Lemmas._auxLemma.1'</span>\n<span class=\"n\">Lemmas.lean</span><span class=\"o\">:</span><span class=\"mi\">849</span><span class=\"o\">:</span><span class=\"mi\">6</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">kernel</span><span class=\"o\">)</span> <span class=\"kd\">constant</span> <span class=\"n\">has</span> <span class=\"n\">already</span> <span class=\"n\">been</span> <span class=\"n\">declared</span> <span class=\"bp\">'</span><span class=\"n\">Lemmas._auxLemma.1'</span>\n</code></pre></div>\n<p>Why is it happening? One can notice from the source code that this always happen with the <code>simp</code> keyword. But this keyword is used multiple times before without any issue.</p>\n<p>Of course, I know that what I am doing is very stupid, and that this is not how std4 is usually compiled. But I want to understand <em>why</em> exactly this is stupid and doomed to fail, so I can gain a better understanding of the tool chain.</p>\n<p>Thanks!</p>",
        "id": 397183257,
        "sender_full_name": "Rubén Muñoz--Bertrand",
        "timestamp": 1697577411
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"659869\">Rubén Muñoz--Bertrand</span> <a href=\"#narrow/stream/113489-new-members/topic/Bare-bones.20mathlib4.20compilation/near/397183257\">said</a>:</p>\n<blockquote>\n<p>It works the following way: whenever the compilation fails because some <code>.olean</code> file is missing, it tries to compile that missing file first.</p>\n</blockquote>\n<p>You can run <code>lean --deps</code> or similar on a file to build the dependency tree without repeated trial and error :)</p>",
        "id": 397183561,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1697577568
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 397188684,
        "sender_full_name": "Lessness",
        "timestamp": 1697580498
    },
    {
        "content": "<p>I got a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> with a way to reproduce the error. Thanks to <span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> my script went much faster!</p>\n<p>1) Download Lean 4.1.0. from the link above.</p>\n<p>2) Extract the archive.</p>\n<p>3) Run <code>chmod +x lean-4.1.0-linux/bin/lean</code> to make Lean software executable; for simplicity we will call the file just <code>lean</code> without the full path in what follows.</p>\n<p>4) Run <code>mkdir -p lean-4.1.0-linux/Test/Std/Data/List/Init lean-4.1.0-linux/Test/Std/Data/Nat</code></p>\n<p>5) Create a file <code>lean-4.1.0-linux/Test/Std/Data/List/Init/Lemmas.lean</code> with contents:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">namespace</span> <span class=\"n\">List</span>\n\n<span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"n\">mapM.loop</span> <span class=\"n\">append_assoc</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span> <span class=\"kd\">def</span> <span class=\"n\">mapM'</span> <span class=\"o\">[</span><span class=\"n\">Monad</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">m</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">m</span> <span class=\"o\">(</span><span class=\"n\">List</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">pure</span> <span class=\"o\">[]</span>\n  <span class=\"bp\">|</span> <span class=\"n\">a</span> <span class=\"o\">::</span> <span class=\"n\">l</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">return</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">::</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">l.mapM'</span> <span class=\"n\">f</span><span class=\"o\">)</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">mapM'_eq_mapM</span> <span class=\"o\">[</span><span class=\"n\">Monad</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">LawfulMonad</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">m</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">mapM'</span> <span class=\"n\">f</span> <span class=\"n\">l</span> <span class=\"bp\">=</span> <span class=\"n\">mapM</span> <span class=\"n\">f</span> <span class=\"n\">l</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">go</span><span class=\"o\">,</span> <span class=\"n\">mapM</span><span class=\"o\">]</span> <span class=\"n\">where</span>\n  <span class=\"n\">go</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">l</span> <span class=\"n\">acc</span><span class=\"o\">,</span> <span class=\"n\">mapM.loop</span> <span class=\"n\">f</span> <span class=\"n\">l</span> <span class=\"n\">acc</span> <span class=\"bp\">=</span> <span class=\"n\">return</span> <span class=\"n\">acc.reverse</span> <span class=\"bp\">++</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">mapM'</span> <span class=\"n\">f</span> <span class=\"n\">l</span><span class=\"o\">)</span>\n    <span class=\"bp\">|</span> <span class=\"o\">[],</span> <span class=\"n\">acc</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span>\n    <span class=\"bp\">|</span> <span class=\"n\">a</span><span class=\"o\">::</span><span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"n\">acc</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">go</span> <span class=\"n\">l</span><span class=\"o\">]</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span> <span class=\"kd\">theorem</span> <span class=\"n\">mapM_cons</span> <span class=\"o\">[</span><span class=\"n\">Monad</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">LawfulMonad</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">m</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">::</span> <span class=\"n\">l</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mapM</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">return</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">::</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">l.mapM</span> <span class=\"n\">f</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">mapM'_eq_mapM</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>6) Create a file <code>lean-4.1.0-linux/Test/Std/Data/Nat/Lemmas.lean</code> with contents:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Std.Data.List.Init.Lemmas</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">Nat</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span> <span class=\"kn\">protected</span> <span class=\"kd\">theorem</span> <span class=\"n\">not_le</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"bp\">↔</span> <span class=\"n\">b</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨</span><span class=\"n\">Nat.gt_of_not_le</span><span class=\"o\">,</span> <span class=\"n\">Nat.not_le_of_gt</span><span class=\"o\">⟩</span>\n</code></pre></div>\n<p>7) Run <code>lean -o lean-4.1.0-linux/Test/Std/Data/List/Init/Lemmas.olean lean-4.1.0-linux/Test/Std/Data/List/Init/Lemmas.lean</code>.</p>\n<p>8) Run <code>LEAN_PATH=lean-4.1.0-linux/Test lean -o lean-4.1.0-linux/Test/Std/Data/Nat/Lemmas.olean lean-4.1.0-linux/Test/Std/Data/Nat/Lemmas.lean</code>. You successfully get the error:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Lemmas.lean</span><span class=\"o\">:</span><span class=\"mi\">5</span><span class=\"o\">:</span><span class=\"mi\">2</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">kernel</span><span class=\"o\">)</span> <span class=\"kd\">constant</span> <span class=\"n\">has</span> <span class=\"n\">already</span> <span class=\"n\">been</span> <span class=\"n\">declared</span> <span class=\"bp\">'</span><span class=\"n\">Lemmas._auxLemma.1'</span>\n</code></pre></div>\n<p>Remarks:</p>\n<ul>\n<li>It runs without a problem if the files are not located in these folders (I did not try every combination, but it seems important).</li>\n<li>It runs without a problem if instead of doing an import, we put the code in one single file.</li>\n</ul>\n<p>I have a zillion questions, but for now let us focus on: why is this happening?</p>",
        "id": 397363629,
        "sender_full_name": "Rubén Muñoz--Bertrand",
        "timestamp": 1697653055
    },
    {
        "content": "<p>Can we step back for a moment and ask \"for what reason do you need a bare-bones install\"?</p>",
        "id": 397367049,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1697654639
    },
    {
        "content": "<p>It is a way to learn about a language (I did the same thing by compiling LaTeX from iniTeX and learned a lot that way). For instance here, understanding the error would make me discover the mechanisms behind it.<br>\nThere is also a second reason, but more subjective. If Lean is a proof checker, then it should be able to check all of mathlib without wrappers. If I run <code>lake build</code>, I noticed that <code>clang</code> is called which is quite weird to me, and the whole process is very obscure (or at least because I did not find the relevant documentation). So I would be glad to understand why we still need to compile some more C++ code in order to make things work with the error above.<br>\nBut as I said, it is for learning purposes. I don't \"need\" this install. I actually have another one working just fine, but this is not my goal.</p>",
        "id": 397368044,
        "sender_full_name": "Rubén Muñoz--Bertrand",
        "timestamp": 1697655170
    },
    {
        "content": "<blockquote>\n<p>If Lean is a proof checker, then it should be able to check all of mathlib without wrappers.</p>\n</blockquote>\n<p>Arguably <code>lean</code> is not the proof checker, <code>leanchecker</code> is. <code>lean</code> just assembles the artifacts that the proof checker consumes, with enough basic sanity checks that you can usually trust it.</p>",
        "id": 397368481,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1697655416
    },
    {
        "content": "<p>If you're at the point where you don't trust the <em>build system</em> that runs lean, then you almost certainly are of a mindset that means you should not trust <code>lean</code> to do the checking!</p>",
        "id": 397368574,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1697655480
    },
    {
        "content": "<p>Okay thank you very much for this information! I apologize for the idiotic question, but where can I find <code>leanchecker</code>? A Google search with quotes only yields 23 results, and all seem to be about Lean 3. I don't have this executable in the downloaded <code>bin</code> folder either.</p>",
        "id": 397369376,
        "sender_full_name": "Rubén Muñoz--Bertrand",
        "timestamp": 1697655848
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113489-new-members/topic/Bare-bones.20mathlib4.20compilation/near/397368574\">said</a>:</p>\n<blockquote>\n<p>If you're at the point where you don't trust the <em>build system</em> that runs lean, then you almost certainly are of a mindset that means you should not trust <code>lean</code> to do the checking!</p>\n</blockquote>\n<p>Exactly! But I would take less time to understand <code>lean</code> than <code>lean</code> and <code>lake</code>. Also, I have been told that <code>lean</code>'s code was not too hard to review. Somebody told be I could be done by a graduate student given in a few months, and that this has been actually done by a few students before. But maybe was this a wrong information.</p>",
        "id": 397369746,
        "sender_full_name": "Rubén Muñoz--Bertrand",
        "timestamp": 1697656043
    },
    {
        "content": "<p>That graduate student? Albert E... <em>checks notes</em>... Mario Carneiro</p>",
        "id": 397371007,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1697656674
    },
    {
        "content": "<p>But seriously, I think you're referring to the kernel specifically</p>",
        "id": 397371072,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1697656693
    },
    {
        "content": "<p>And indeed, for Lean 3 there are many independent checkers, and some of those are currently being ported to verify Lean 4 exported code</p>",
        "id": 397371272,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1697656811
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"325367\">Mauricio Collares</span> <a href=\"#narrow/stream/113489-new-members/topic/Bare-bones.20mathlib4.20compilation/near/397371072\">said</a>:</p>\n<blockquote>\n<p>But seriously, I think you're referring to the kernel specifically</p>\n</blockquote>\n<p>Yes, thank you. This conversation makes me realize that lean is not the kernel. I expected it to be a standalone executable for some reason. But comparing Lean 3 and Lean 4 FAQ's, it seems it was the case only for version 3, or was it?<br>\nIn all cases it seems I might be asking all these questions too early if the other checkers still have not been ported to Lean 4.</p>",
        "id": 397371584,
        "sender_full_name": "Rubén Muñoz--Bertrand",
        "timestamp": 1697657000
    },
    {
        "content": "<p>Regarding your original error; you maybe need to delete any oleans you created badly first?</p>",
        "id": 397373069,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1697657749
    },
    {
        "content": "<p>I thought of that, but I have removed all the oleans and still got the problem.</p>",
        "id": 397373184,
        "sender_full_name": "Rubén Muñoz--Bertrand",
        "timestamp": 1697657811
    },
    {
        "content": "<p>The clang calls are to compile tactics and the likes so that the proof terms can be generated faster. There isn't really much to learn about lean by reverse engineering how lake assembles the compilation plan for mathlib. Looking at <code>lake build -v</code> should be enough information unless you plan on working with lake.</p>\n<p><a href=\"https://github.com/leanprover/lean4checker/\">https://github.com/leanprover/lean4checker/</a> this is the mentioned proof checker</p>\n<p>If you want to understand <code>lean</code> that opens up the question whether you want to understand the kernel which you could indeed read in quite a short amount of time, it's here: <a href=\"https://github.com/leanprover/lean4/tree/master/src/kernel\">https://github.com/leanprover/lean4/tree/master/src/kernel</a> Alternatively if you want to understand the process of how lean goes from surface level syntax to the terms that it finally presents to the kernel  that is the elaborator in <code>src/Elab</code> which is a gigantic codebase compared to the kernel.</p>",
        "id": 397373995,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1697658255
    },
    {
        "content": "<p>Ah! I should have thought of adding a 4 between \"lean\" and \"checker\"!</p>",
        "id": 397375229,
        "sender_full_name": "Rubén Muñoz--Bertrand",
        "timestamp": 1697658922
    },
    {
        "content": "<p>lean4checker is not a standalone implementation, though. lean4lean is standalone but written in Lean. But iirc an independent and standalone implementation is expected before the end of the year (this was mentioned in the last community meeting)</p>",
        "id": 397375927,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1697659243
    },
    {
        "content": "<p>Thank you so much for this very detailed answer. Indeed I thought the elaborator was part of the kernel, so I had this misconception that given a little bit of time, one can understand how to go from level syntax code to an automated verification.</p>",
        "id": 397375932,
        "sender_full_name": "Rubén Muñoz--Bertrand",
        "timestamp": 1697659246
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"325367\">Mauricio Collares</span> <a href=\"#narrow/stream/113489-new-members/topic/Bare-bones.20mathlib4.20compilation/near/397375927\">said</a>:</p>\n<blockquote>\n<p>lean4checker is not a standalone implementation, though. lean4lean is standalone but written in Lean. But iirc an independent and standalone implementation is expected before the end of the year (this was mentioned in the last community meeting)</p>\n</blockquote>\n<p>I would still classify lean4lean as an independent checker, the only thing it shares with lean is the implementation language (except it doesn't, the original checker is in C++)</p>",
        "id": 397380146,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1697661281
    },
    {
        "content": "<p>Last update: problem solved!</p>",
        "id": 397578864,
        "sender_full_name": "Rubén Muñoz--Bertrand",
        "timestamp": 1697750265
    },
    {
        "content": "<p>It turns out the issue was as stupid as expected: while compiling it is necessary to add a package root directory using the <code>--root</code> argument. I discovered it thanks to that <code>lake build -v</code> verbose mode I did not know about, thanks for the tip!<br>\nSo no need to call <code>lake</code> nor <code>leanc</code>, and both Std4 and Mathlib4 compile like a charm!</p>",
        "id": 397578919,
        "sender_full_name": "Rubén Muñoz--Bertrand",
        "timestamp": 1697750292
    },
    {
        "content": "<p>A comment though: the output of <code>lake build -v</code> gives the <code>-R</code> argument which does not appear in <code>lean --help</code>. I had to search inside of <code>src/util/shell.cpp</code> in Lean's source to find its meaning. Maybe this can be added in the help prompt?</p>",
        "id": 397578953,
        "sender_full_name": "Rubén Muñoz--Bertrand",
        "timestamp": 1697750319
    },
    {
        "content": "<p>Anyway, if a clueless reader finds this, it is the moment to recall that what I have done is not the recommended setup.<br>\nIt was more about the journey than the destination: I learned a lot that way about Lean's tool chain, metaprogramming (I recommend this <a href=\"https://github.com/leanprover-community/lean4-metaprogramming-book\">very interesting book</a>), and the workings of Lean.<br>\nI guess the real compilation was the friends I made along the way, so thanks again everybody for the help!</p>",
        "id": 397579033,
        "sender_full_name": "Rubén Muñoz--Bertrand",
        "timestamp": 1697750381
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"659869\">Rubén Muñoz--Bertrand</span> has marked this topic as resolved.</p>",
        "id": 397579053,
        "sender_full_name": "Notification Bot",
        "timestamp": 1697750398
    },
    {
        "content": "<p>I now remember that I also ran into problems invoking lean manually, until I found the <code>--root</code> argument!</p>",
        "id": 397580073,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1697750965
    }
]