[
    {
        "content": "<p>I opened my local copy of the branch of mathlib I'm working on (to make some changes to my PR). However, the infoview shows nothing and the yellow loading indicators at the left side of the screen light up for the whole file. If I copy-paste the code into a different file (in the local repository I originally wrote it in before creating a branch of mathlib and submitting a PR), then the file loads fine. Any idea what's happening? One possibly relevant piece of information is that I recently merged master into my branch.</p>",
        "id": 350866991,
        "sender_full_name": "Luke Mantle",
        "timestamp": 1681845294
    },
    {
        "content": "<p>If you recently merged master into your branch then you have changed your version of mathlib so you either need to compile it or download precompiled binaries for precisely that version.</p>",
        "id": 350868059,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1681845670
    },
    {
        "content": "<p>If you push the current version of your branch to github then mathlib's continuous integration will compile for you. If you already did this a while ago then perhaps it's done already and you can get your compiled binaries with <code>leanproject get-cache</code></p>",
        "id": 350868278,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1681845735
    },
    {
        "content": "<p>I committed and pushed the current version of my branch to Github, and then ran <code>leanproject get-cache</code> from the directory where my branch is saved locally. I got this result, and the same behaviour in vscode remains:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Looking</span> <span class=\"n\">for</span> <span class=\"n\">mathlib</span> <span class=\"n\">oleans</span> <span class=\"n\">for</span> <span class=\"mi\">9</span><span class=\"n\">a4f789258</span>\n  <span class=\"n\">locally...</span>\n  <span class=\"n\">remotely...</span>\n<span class=\"n\">No</span> <span class=\"n\">cache</span> <span class=\"n\">available</span> <span class=\"n\">for</span> <span class=\"n\">revision</span> <span class=\"mi\">9</span><span class=\"n\">a4f789258</span>\n<span class=\"n\">Looking</span> <span class=\"n\">for</span> <span class=\"n\">mathlib</span> <span class=\"n\">oleans</span> <span class=\"n\">for</span> <span class=\"mi\">61</span><span class=\"n\">c4eea577</span>\n  <span class=\"n\">locally...</span>\n  <span class=\"n\">remotely...</span>\n  <span class=\"n\">Found</span> <span class=\"n\">remote</span> <span class=\"n\">mathlib</span> <span class=\"n\">oleans</span>\n<span class=\"n\">No</span> <span class=\"n\">cache</span> <span class=\"n\">was</span> <span class=\"n\">available</span> <span class=\"n\">for</span> <span class=\"mi\">9</span><span class=\"n\">a4f789258.</span> <span class=\"n\">A</span> <span class=\"n\">cache</span> <span class=\"n\">was</span> <span class=\"n\">found</span> <span class=\"n\">for</span> <span class=\"n\">the</span> <span class=\"n\">ancestor</span> <span class=\"mi\">61</span><span class=\"n\">c4eea577.</span>\n<span class=\"n\">To</span> <span class=\"n\">see</span> <span class=\"n\">the</span> <span class=\"n\">intermediate</span> <span class=\"n\">commits</span><span class=\"o\">,</span> <span class=\"n\">run</span><span class=\"o\">:</span>\n  <span class=\"n\">git</span> <span class=\"n\">log</span> <span class=\"c1\">--graph 9a4f789258 61c4eea577^!</span>\n<span class=\"n\">Run</span> <span class=\"bp\">`</span><span class=\"n\">leanproject</span> <span class=\"n\">get</span><span class=\"bp\">-</span><span class=\"n\">cache</span> <span class=\"c1\">--rev` on one of the available commits above.</span>\n<span class=\"n\">Failed</span> <span class=\"n\">to</span> <span class=\"n\">fetch</span> <span class=\"n\">cached</span> <span class=\"n\">oleans</span>\n</code></pre></div>",
        "id": 350870976,
        "sender_full_name": "Luke Mantle",
        "timestamp": 1681846727
    },
    {
        "content": "<p>The workflow is that you push to github, _you wait_, and when the cloud (\"someone else's computer\") is done compiling for you, you can download the results. But the waiting really is necessary - there's no such thing as a free compilation</p>",
        "id": 350874380,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1681847954
    },
    {
        "content": "<p>I doubt it is necessary here</p>",
        "id": 350877124,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1681848981
    },
    {
        "content": "<p><code>leanproject get-cache --fallback=download-first</code> will almost certainly do the right thing</p>",
        "id": 350877142,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1681848995
    },
    {
        "content": "<blockquote>\n<p>I got this result, and the same behaviour in vscode remains</p>\n</blockquote>\n<p>The result is an error message that tells you what to do next! The behavior will remain until you do what it says (the <code>--fallback</code> suggestion I make above does it automatically for you).</p>",
        "id": 350877392,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1681849091
    },
    {
        "content": "<p>You can't just randomly create a new version of mathlib (e.g. by merging two branches) and then expect it to work -- it needs to be built. It takes hours to compile mathlib. Either you do it manually or you push the result to github and let github do it for you, but it will take time.</p>",
        "id": 350883516,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1681851419
    },
    {
        "content": "<p>Ah, ok, thanks for the explanations. By now it had finished compiling online so <code>leanproject get-cache</code> got it</p>",
        "id": 350888921,
        "sender_full_name": "Luke Mantle",
        "timestamp": 1681853655
    },
    {
        "content": "<blockquote>\n<p>create a new version of mathlib (e.g. by merging two branches) and then expect it to work</p>\n</blockquote>\n<p>If you only modified a single new file, then you can expect it to work and <code>leanproject get-cache --fallback=download-first</code> will get you a cache that is right for everything except that new file</p>",
        "id": 350891486,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1681854983
    }
]