[
    {
        "content": "<p>What is the correct syntax to create (or speak of) a proposition with a <em>free</em> variable ? Say I want to call my variable <code>(x : Nat)</code>, consider a proposition where x is free such as <code>x = 2</code> (btw, this would not have type Prop, so what type would it be ?), and evaluate this at a particular integer, e.g. at 3, to get <code>3 = 2 : Prop</code>?</p>",
        "id": 376343613,
        "sender_full_name": "Guillaume Dubach",
        "timestamp": 1689685707
    },
    {
        "content": "<p>This isn't related to the above discussion and would be better off in a new thread in <a class=\"stream\" data-stream-id=\"113489\" href=\"/#narrow/stream/113489-new-members\">#new members</a> .</p>",
        "id": 376344884,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1689685929
    },
    {
        "content": "<p>Sorry about this !</p>",
        "id": 376345760,
        "sender_full_name": "Guillaume Dubach",
        "timestamp": 1689686083
    },
    {
        "content": "<p>2 messages were moved here from <a class=\"stream-topic\" data-stream-id=\"270676\" href=\"/#narrow/stream/270676-lean4/topic/Lean.204.20variable.20command.20discussion\">#lean4 &gt; Lean 4 variable command discussion</a> by <span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span>.</p>",
        "id": 376345887,
        "sender_full_name": "Notification Bot",
        "timestamp": 1689686105
    },
    {
        "content": "<p>(I moved these messages to a new topic and didn't realize <span class=\"user-mention\" data-user-id=\"350289\">@Guillaume Dubach</span> already create a new one, so then I merged them. Kevin's message is irrelevant in this new context. Sorry if any of this causes confusion!)</p>",
        "id": 376346466,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1689686226
    },
    {
        "content": "<p>I think you're looking for the type <code>Nat -&gt; Prop</code>. You write functions like <code>fun x =&gt; x = 2</code> to create things of this type.</p>",
        "id": 376347968,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1689686508
    },
    {
        "content": "<p>No, <code>Nat -&gt; Prop</code> will not do, it's not the same thing. In <code>Nat -&gt; Prop</code> you can change the proposition completely, the image of 2 and the image of 3 do not need to be related in any way...</p>",
        "id": 376348538,
        "sender_full_name": "Guillaume Dubach",
        "timestamp": 1689686623
    },
    {
        "content": "<p>For instance: there are uncountably many things of type <code>Nat -&gt; Prop</code>, right ? But there should be countably many well-built propositions with a free variable...</p>",
        "id": 376349206,
        "sender_full_name": "Guillaume Dubach",
        "timestamp": 1689686739
    },
    {
        "content": "<p><code>fun x =&gt; x = 2</code> is the proposition with a free variable <code>x</code></p>",
        "id": 376349214,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1689686742
    },
    {
        "content": "<p>If <code>p := fun x =&gt; x = 2</code>, then <code>p 3</code> is <code>3 = 2 : Prop</code>.</p>",
        "id": 376349398,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1689686775
    },
    {
        "content": "<p>Sure, I agree that what I am talking about can be seen as a particular case of <code>Nat -&gt; Prop</code>. But so is the function that would associate <code>x = 2</code> to even numbers and <code>x = 3</code> to odd numbers, and this example is not just a given proposition with a free variable.</p>\n<p>Edit: of course it is, as Kevin's example below shows; and anything I actually write could be turned into a <code>Nat -&gt; Prop</code> the same way, but my point was that I am interested in the (countably many) propositions that can be written, then evaluated at any particular <code>n</code>.</p>",
        "id": 376350741,
        "sender_full_name": "Guillaume Dubach",
        "timestamp": 1689687007
    },
    {
        "content": "<p>This is fine if you just want a single such proposition with a free variable, but if you want to quantify over propositions with a single free variable (and you only want the ones that come from a syntactic one) I think you have to create your own type that represents propositions and give a <code>Prop</code>  interpretation of them.</p>",
        "id": 376350906,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1689687037
    },
    {
        "content": "<p>What's your goal here?</p>",
        "id": 376350930,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1689687041
    },
    {
        "content": "<p>Yes, I would like to quantify over such propositions, exactly !</p>",
        "id": 376351114,
        "sender_full_name": "Guillaume Dubach",
        "timestamp": 1689687075
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"350289\">Guillaume Dubach</span> <a href=\"#narrow/stream/113489-new-members/topic/Free.20variables/near/376349206\">said</a>:</p>\n<blockquote>\n<p>For instance: there are uncountably many things of type <code>Nat -&gt; Prop</code>, right ? But there should be countably many well-built propositions with a free variable...</p>\n</blockquote>\n<p>This is mixing the semantic and syntactic levels.</p>",
        "id": 376351133,
        "sender_full_name": "Reid Barton",
        "timestamp": 1689687078
    },
    {
        "content": "<p>I am confused about what your question is. A proposition with a free variable is the same thing as a family of propositions is the same thing as a function from Nat to Prop. Note that this is unrelated to the Lean <code>variable</code> command, which does something else :-)</p>",
        "id": 376351155,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1689687083
    },
    {
        "content": "<p>The even/odd example is just the proposition P(x)=if x is even then x=2 else x=3 (<code>def P : ℕ → Prop := fun x ↦ if x % 2 = 0 then x = 2 else x = 3</code>)</p>",
        "id": 376351513,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1689687154
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"350289\">Guillaume Dubach</span> <a href=\"#narrow/stream/113489-new-members/topic/Free.20variables/near/376351114\">said</a>:</p>\n<blockquote>\n<p>Yes, I would like to quantify over such propositions, exactly !</p>\n</blockquote>\n<p>What are you trying to do by quantifying over propositions though? The details matter. In Lean we're generally happy with quantifying over <code>Nat -&gt; Prop</code> as propositions-with-a-free-variable.</p>",
        "id": 376351540,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1689687160
    },
    {
        "content": "<p>I would like to see why Richard's paradox is wrong: I know why it is wrong in usual terms, I would be curious to see what prevents to write it in lean. Just curiosity.</p>",
        "id": 376351994,
        "sender_full_name": "Guillaume Dubach",
        "timestamp": 1689687247
    },
    {
        "content": "<p>I don't know anything about Richard's paradox. Does that mean you're wanting to do inductive arguments on the syntactic structure of a proposition?</p>",
        "id": 376352177,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1689687285
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span>  Could you perhaps explain a bit more ?</p>",
        "id": 376352357,
        "sender_full_name": "Guillaume Dubach",
        "timestamp": 1689687322
    },
    {
        "content": "<p>Richard's paradox just appears to be the statement that the power set of the naturals is uncountable.</p>",
        "id": 376352386,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1689687327
    },
    {
        "content": "<p>Whatever argument you have in mind to conclude that there are only countably many \"propositions with a free variable\" applies with equal force to conclude that there are also only countably many \"things of type <code>Nat -&gt; Bool</code>\".</p>",
        "id": 376352809,
        "sender_full_name": "Reid Barton",
        "timestamp": 1689687410
    },
    {
        "content": "<p>So, we may as well forget about \"propositions with a free variable\".</p>",
        "id": 376352960,
        "sender_full_name": "Reid Barton",
        "timestamp": 1689687437
    },
    {
        "content": "<p>The Lean version of the paradox I guess is that there are only countably many functions <code>Nat -&gt; Prop</code> that we can actually write down in Lean, but we can prove that <code>Nat -&gt; Prop</code> is uncountable. (That's defeq to what Kevin said <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span>)</p>",
        "id": 376353026,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1689687451
    },
    {
        "content": "<p>What is going on with <code>Nat -&gt; Bool</code>? The trick is that we're conflating syntactic presentations of functions with the actual/internal functions themselves.</p>",
        "id": 376353790,
        "sender_full_name": "Reid Barton",
        "timestamp": 1689687551
    },
    {
        "content": "<p>I see! Well, that answers my question I guess. Thanks!</p>",
        "id": 376353860,
        "sender_full_name": "Guillaume Dubach",
        "timestamp": 1689687559
    },
    {
        "content": "<p>But just to be sure: could we speak of a (countable) type whose elements would be exactly such syntactic presentations with one variable being free ? This by itself doesn't seem to be problematic ?</p>",
        "id": 376355142,
        "sender_full_name": "Guillaume Dubach",
        "timestamp": 1689687734
    },
    {
        "content": "<p>I imagine you could make a subtype of <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.Expr#doc\">docs#Lean.Expr</a> (the type that represents Lean expressions themselves) of well-typed expressions with a single <code>bvar</code> that's <code>bvar 0</code> (where the type checker assumes <code>bvar 0</code> has some given type, like <code>Nat</code>)</p>",
        "id": 376356117,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1689687915
    },
    {
        "content": "<p>This would cover everything that you could actually enter into Lean</p>",
        "id": 376356243,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1689687937
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span> Thank you very much, I think this is exactly what I was looking for.</p>",
        "id": 376706187,
        "sender_full_name": "Guillaume Dubach",
        "timestamp": 1689780306
    },
    {
        "content": "<p>As this is built inductively, I guess one can write a proof in Lean that it is countable?</p>",
        "id": 376707651,
        "sender_full_name": "Guillaume Dubach",
        "timestamp": 1689780544
    },
    {
        "content": "<p>I might be wrong but I think <code>Lean.Expr</code> was designed for usage in meta-code, not usage in proofs. You won't be able to find a function usable outside meta-code which converts <code>Expr</code> to terms. It still might be interesting to see what you can prove about <code>Expr</code> but <code>Expr</code> is just an inductive type and won't let you prove anything new about terms.<br>\nI think you can prove <code>Expr</code> is countable but it won't be that easy because <code>Expr</code> is made out of a bunch of other types you also have to prove are countable, including <code>Lean.Name</code> and <code>Lean.MData</code>.</p>",
        "id": 376761247,
        "sender_full_name": "Niels Voss",
        "timestamp": 1689792293
    },
    {
        "content": "<p>You could also use the <code>ModelTheory</code> folder. I think <code>Formula Unit</code> or something might be what you're looking for. It's a first order formula with one free variable, but you'll have to define a first order language first to use that.</p>",
        "id": 377089660,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1689880979
    }
]