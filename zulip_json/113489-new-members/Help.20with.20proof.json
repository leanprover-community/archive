[
    {
        "content": "<p>I am working on a proof and my tactics state looks like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">h_prod</span><span class=\"o\">:</span> <span class=\"n\">List.prod</span> <span class=\"n\">dvds</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"bp\">/</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">List.prod</span> <span class=\"n\">acc</span><span class=\"o\">)</span>\n<span class=\"n\">h_x_mem_div</span><span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∣</span> <span class=\"n\">n</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">List.prod</span> <span class=\"n\">dvds</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"n\">List.prod</span> <span class=\"n\">acc</span>\n</code></pre></div>\n<p>I think I know what needs to happen. Apply <code>Nat.mul_assoc</code> to the right hand side of <code>h_prod</code> and then <code>Nat.div_mul_cancel</code> with <code>h_x_mem_div</code> gives me the result.</p>\n<p>But I can't get lean to do that, I similar looking cases I have used<code>simp</code> or <code>rw</code>, but for some reason I can't get either to work. Can someone give me a hint?</p>",
        "id": 396174068,
        "sender_full_name": "Markus Schmaus",
        "timestamp": 1697063460
    },
    {
        "content": "<p>Could you please help us helping you by reading <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> and then editing your post?</p>",
        "id": 396175049,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1697064176
    },
    {
        "content": "<p>I think this should be a mwe</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">example</span>\n  <span class=\"o\">(</span><span class=\"n\">h_prod</span><span class=\"o\">:</span> <span class=\"n\">List.prod</span> <span class=\"n\">dvds</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"bp\">/</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">List.prod</span> <span class=\"n\">acc</span><span class=\"o\">))</span>\n  <span class=\"o\">(</span><span class=\"n\">h_n_eq_0</span><span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h_x_mem_div</span><span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∣</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n  <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">List.prod</span> <span class=\"n\">dvds</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"n\">List.prod</span> <span class=\"n\">acc</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 396175623,
        "sender_full_name": "Markus Schmaus",
        "timestamp": 1697064654
    },
    {
        "content": "<p>Can you include the <code>rw</code> /<code>simp</code> / whatever invocation that you tried?</p>",
        "id": 396176151,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1697065076
    },
    {
        "content": "<p>Your outline works without any difficulty for me, so it seems that the problem is with how you attempted to lean-ify it</p>",
        "id": 396176214,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1697065108
    },
    {
        "content": "<p>This is what I expected to work: <code>simp [Nat.mul_assoc, Nat.div_mul_cancel] at h_prod</code>. I tried all permutations of this I could think off, including throwing in some <code>Nat.mul_comm</code>. So yes, the problem is that I don't know how to lean-ify it.</p>",
        "id": 396177653,
        "sender_full_name": "Markus Schmaus",
        "timestamp": 1697066050
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> Could you tell me how you solved the outline without any difficulty?</p>",
        "id": 396223760,
        "sender_full_name": "Markus Schmaus",
        "timestamp": 1697092592
    },
    {
        "content": "<p>I'm not Eric, but this is how I tackled it:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span>\n    <span class=\"o\">(</span><span class=\"n\">h_prod</span><span class=\"o\">:</span> <span class=\"n\">List.prod</span> <span class=\"n\">dvds</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"bp\">/</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">List.prod</span> <span class=\"n\">acc</span><span class=\"o\">))</span>\n    <span class=\"o\">(</span><span class=\"n\">h_n_eq_0</span><span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">h_x_mem_div</span><span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∣</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">List.prod</span> <span class=\"n\">dvds</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"n\">List.prod</span> <span class=\"n\">acc</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h_prod</span><span class=\"o\">]</span> <span class=\"c1\">-- eliminate `dvds`, this is now just a theorem about natural numbers</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">mul_assoc</span><span class=\"o\">]</span> <span class=\"c1\">-- move the parentheses around so we can work on `(n / x * x)`</span>\n  <span class=\"n\">congr</span> <span class=\"c1\">-- optional: remove the parts of the expression that are the same on both sides</span>\n  <span class=\"c1\">-- Goal is `n / x * x = n`: there should be a theorem in the library that states this</span>\n  <span class=\"c1\">-- `apply?` tells us what it's called:</span>\n  <span class=\"n\">exact</span> <span class=\"n\">Nat.div_mul_cancel</span> <span class=\"n\">h_x_mem_div</span>\n</code></pre></div>",
        "id": 396229009,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1697094987
    },
    {
        "content": "<p>Thank you, this was the piece I was missing: <code>←</code></p>",
        "id": 396230836,
        "sender_full_name": "Markus Schmaus",
        "timestamp": 1697095732
    }
]