[
    {
        "content": "<p>Hello, I would like some help with the following. I have that the function f  has a local minimum at x_star for some neighbourhood in u. I think is_local_min_on defines the neighbourhood as some general concept of the neighbourhood but because E in my case is a normed_space, I believe I should be able to get an epsilon neighbourhood. </p>\n<p>Here is the MWE, I am working in the have statement.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.real.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">analysis.calculus.cont_diff</span>\n<span class=\"kn\">import</span> <span class=\"n\">topology.local_extr</span>\n<span class=\"kn\">import</span> <span class=\"n\">topology.basic</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">normed_add_comm_group</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">normed_space</span> <span class=\"n\">ℝ</span> <span class=\"n\">E</span><span class=\"o\">]</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">necess_2nd_order_optimality_condit</span>\n    <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">E</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h_open</span> <span class=\"o\">:</span> <span class=\"n\">is_open</span> <span class=\"n\">u</span><span class=\"o\">)</span>\n    <span class=\"o\">{</span><span class=\"n\">x_star</span> <span class=\"o\">:</span> <span class=\"n\">E</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h_x_star</span> <span class=\"o\">:</span> <span class=\"n\">x_star</span> <span class=\"bp\">∈</span> <span class=\"n\">u</span><span class=\"o\">)</span>\n    <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">E</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">}:</span>\n    <span class=\"n\">is_local_min_on</span> <span class=\"n\">f</span> <span class=\"n\">u</span> <span class=\"n\">x_star</span> <span class=\"bp\">→</span> <span class=\"n\">x_star</span> <span class=\"bp\">≠</span> <span class=\"n\">x_star</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">assume</span> <span class=\"n\">h_local_min</span><span class=\"o\">,</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">h_local_min</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">hv_open</span><span class=\"o\">,</span> <span class=\"n\">hv_subset</span><span class=\"o\">,</span> <span class=\"n\">hx_min</span><span class=\"o\">⟩,</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">ε</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">,</span> <span class=\"n\">ε</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">metric.ball</span> <span class=\"n\">x_star</span> <span class=\"n\">ε</span> <span class=\"bp\">⊆</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">metric.ball</span> <span class=\"n\">x_star</span> <span class=\"n\">ε</span> <span class=\"bp\">⊆</span> <span class=\"n\">v</span><span class=\"o\">),</span>\n  <span class=\"o\">{</span>\n\n    <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n    <span class=\"o\">},</span>\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>Here is the infoview of have statement.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">E</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span>\n<span class=\"n\">_inst_1</span><span class=\"o\">:</span> <span class=\"n\">normed_add_comm_group</span> <span class=\"n\">E</span>\n<span class=\"n\">_inst_2</span><span class=\"o\">:</span> <span class=\"n\">normed_space</span> <span class=\"n\">ℝ</span> <span class=\"n\">E</span>\n<span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span>\n<span class=\"n\">u</span><span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">E</span>\n<span class=\"n\">h_open</span><span class=\"o\">:</span> <span class=\"n\">is_open</span> <span class=\"n\">u</span>\n<span class=\"n\">x_star</span><span class=\"o\">:</span> <span class=\"n\">E</span>\n<span class=\"n\">h_x_star</span><span class=\"o\">:</span> <span class=\"n\">x_star</span> <span class=\"bp\">∈</span> <span class=\"n\">u</span>\n<span class=\"n\">f</span><span class=\"o\">:</span> <span class=\"n\">E</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span>\n<span class=\"n\">v</span><span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">E</span>\n<span class=\"n\">hv_open</span><span class=\"o\">:</span> <span class=\"n\">v</span> <span class=\"bp\">∈</span> <span class=\"n\">nhds</span> <span class=\"n\">x_star</span>\n<span class=\"n\">hv_subset</span><span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">E</span>\n<span class=\"n\">hx_min</span><span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">hv_subset</span> <span class=\"bp\">∈</span> <span class=\"n\">filter.principal</span> <span class=\"n\">u</span><span class=\"o\">),</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">E</span> <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">E</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"n\">x_star</span> <span class=\"bp\">≤</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">x</span><span class=\"o\">}</span> <span class=\"bp\">=</span> <span class=\"n\">v</span> <span class=\"bp\">∩</span> <span class=\"n\">hv_subset</span>\n<span class=\"bp\">⊢</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">ε</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">),</span> <span class=\"n\">ε</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span> <span class=\"bp\">∧</span> <span class=\"n\">metric.ball</span> <span class=\"n\">x_star</span> <span class=\"n\">ε</span> <span class=\"bp\">⊆</span> <span class=\"n\">u</span> <span class=\"bp\">∧</span> <span class=\"n\">metric.ball</span> <span class=\"n\">x_star</span> <span class=\"n\">ε</span> <span class=\"bp\">⊆</span> <span class=\"n\">v</span>\n</code></pre></div>",
        "id": 342930386,
        "sender_full_name": "Abu Al Hassan",
        "timestamp": 1679230349
    },
    {
        "content": "<p>I have a feeling that this problem is much more complex than I think. So any hints will be appreciated.</p>",
        "id": 342931175,
        "sender_full_name": "Abu Al Hassan",
        "timestamp": 1679230656
    },
    {
        "content": "<p>Your theorem looks false to me, did you really intend to write <code>x_star ≠ x_star</code>?</p>",
        "id": 342931753,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1679230873
    },
    {
        "content": "<p>Yh i just did that for the sake of the MWE.</p>",
        "id": 342932064,
        "sender_full_name": "Abu Al Hassan",
        "timestamp": 1679231019
    },
    {
        "content": "<p>Sorry, if thats not good practice I can change it. it was kind of just a placeholder. I am just interested in the have the statement</p>",
        "id": 342932559,
        "sender_full_name": "Abu Al Hassan",
        "timestamp": 1679231174
    },
    {
        "content": "<p>My instinct is that it's a multistep process: first prove <code>u</code> is in <code>nhds x_star</code>, then deduce that <code>u \\inter v</code> is in <code>nhds x_star</code>, then find the lemma in the library that says that for neighbourhoods of a point in a metric space there's an epsilon, and apply that to <code>u \\inter v</code> and this epsilon will work.</p>",
        "id": 342934703,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1679232179
    },
    {
        "content": "<p>You should learn how to break down a complex goal into simpler steps.</p>",
        "id": 342934781,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1679232216
    }
]