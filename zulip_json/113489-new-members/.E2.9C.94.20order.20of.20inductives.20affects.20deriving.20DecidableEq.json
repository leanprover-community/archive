[
    {
        "content": "<p>Is this normal or should it work in both cases?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">namespace</span> <span class=\"n\">One</span>\n<span class=\"kd\">mutual</span>\n  <span class=\"kd\">inductive</span> <span class=\"n\">Tree</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span>\n    <span class=\"bp\">|</span> <span class=\"n\">node</span> <span class=\"o\">:</span> <span class=\"n\">ListTree</span> <span class=\"bp\">→</span> <span class=\"n\">Tree</span>\n    <span class=\"n\">deriving</span> <span class=\"n\">Repr</span><span class=\"o\">,</span> <span class=\"n\">DecidableEq</span>\n\n  <span class=\"kd\">inductive</span> <span class=\"n\">ListTree</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span>\n    <span class=\"bp\">|</span> <span class=\"n\">nil</span> <span class=\"o\">:</span> <span class=\"n\">ListTree</span>\n    <span class=\"bp\">|</span> <span class=\"n\">cons</span> <span class=\"o\">:</span> <span class=\"n\">Tree</span> <span class=\"bp\">→</span> <span class=\"n\">ListTree</span> <span class=\"bp\">→</span> <span class=\"n\">ListTree</span>\n    <span class=\"n\">deriving</span> <span class=\"n\">Repr</span><span class=\"o\">,</span> <span class=\"n\">DecidableEq</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">Wrap</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">|</span> <span class=\"n\">wrap</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span> <span class=\"bp\">→</span> <span class=\"n\">Tree</span> <span class=\"bp\">→</span> <span class=\"n\">Wrap</span>\n  <span class=\"n\">deriving</span> <span class=\"n\">Repr</span><span class=\"o\">,</span> <span class=\"n\">DecidableEq</span> <span class=\"c1\">-- works :-)</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">ListWrap</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">|</span> <span class=\"n\">wrap</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span> <span class=\"bp\">→</span> <span class=\"n\">ListTree</span> <span class=\"bp\">→</span> <span class=\"n\">ListWrap</span>\n  <span class=\"n\">deriving</span> <span class=\"n\">Repr</span><span class=\"o\">,</span> <span class=\"n\">DecidableEq</span> <span class=\"c1\">-- failed to synthesize instance</span>\n<span class=\"kd\">end</span> <span class=\"n\">One</span>\n\n<span class=\"c1\">-- Here we flip the order of the mutual definitions:</span>\n<span class=\"kn\">namespace</span> <span class=\"n\">Two</span>\n<span class=\"kd\">mutual</span>\n  <span class=\"kd\">inductive</span> <span class=\"n\">ListTree</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span>\n    <span class=\"bp\">|</span> <span class=\"n\">nil</span> <span class=\"o\">:</span> <span class=\"n\">ListTree</span>\n    <span class=\"bp\">|</span> <span class=\"n\">cons</span> <span class=\"o\">:</span> <span class=\"n\">Tree</span> <span class=\"bp\">→</span> <span class=\"n\">ListTree</span> <span class=\"bp\">→</span> <span class=\"n\">ListTree</span>\n    <span class=\"n\">deriving</span> <span class=\"n\">Repr</span><span class=\"o\">,</span> <span class=\"n\">DecidableEq</span>\n\n  <span class=\"kd\">inductive</span> <span class=\"n\">Tree</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span>\n    <span class=\"bp\">|</span> <span class=\"n\">node</span> <span class=\"o\">:</span> <span class=\"n\">ListTree</span> <span class=\"bp\">→</span> <span class=\"n\">Tree</span>\n    <span class=\"n\">deriving</span> <span class=\"n\">Repr</span><span class=\"o\">,</span> <span class=\"n\">DecidableEq</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">Wrap</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">|</span> <span class=\"n\">wrap</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span> <span class=\"bp\">→</span> <span class=\"n\">Tree</span> <span class=\"bp\">→</span> <span class=\"n\">Wrap</span>\n  <span class=\"n\">deriving</span> <span class=\"n\">Repr</span><span class=\"o\">,</span> <span class=\"n\">DecidableEq</span> <span class=\"c1\">-- failed to synthesize instance</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">ListWrap</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">|</span> <span class=\"n\">wrap</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span> <span class=\"bp\">→</span> <span class=\"n\">ListTree</span> <span class=\"bp\">→</span> <span class=\"n\">ListWrap</span>\n  <span class=\"n\">deriving</span> <span class=\"n\">Repr</span><span class=\"o\">,</span> <span class=\"n\">DecidableEq</span> <span class=\"c1\">-- But this one works.</span>\n<span class=\"kd\">end</span> <span class=\"n\">Two</span>\n</code></pre></div>",
        "id": 407669737,
        "sender_full_name": "Malvin Gattinger",
        "timestamp": 1702456182
    },
    {
        "content": "<p>This is a bug, yes. If you <code>set_option trace.Elab.Deriving.decEq true</code>, you will see that only the first <code>deriving</code> is triggered. This issue also affects <code>Repr</code> here.</p>",
        "id": 407679233,
        "sender_full_name": "Arthur Adjedj",
        "timestamp": 1702459191
    },
    {
        "content": "<p>Until this gets fixed, here is a workaround:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">mutual</span>\n  <span class=\"kd\">inductive</span> <span class=\"n\">Tree</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span>\n    <span class=\"bp\">|</span> <span class=\"n\">node</span> <span class=\"o\">:</span> <span class=\"n\">ListTree</span> <span class=\"bp\">→</span> <span class=\"n\">Tree</span>\n    <span class=\"n\">deriving</span> <span class=\"n\">Repr</span><span class=\"o\">,</span> <span class=\"n\">DecidableEq</span>\n\n  <span class=\"kd\">inductive</span> <span class=\"n\">ListTree</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span>\n    <span class=\"bp\">|</span> <span class=\"n\">nil</span> <span class=\"o\">:</span> <span class=\"n\">ListTree</span>\n    <span class=\"bp\">|</span> <span class=\"n\">cons</span> <span class=\"o\">:</span> <span class=\"n\">Tree</span> <span class=\"bp\">→</span> <span class=\"n\">ListTree</span> <span class=\"bp\">→</span> <span class=\"n\">ListTree</span>\n<span class=\"kd\">end</span>\n\n<span class=\"n\">deriving</span> <span class=\"kd\">instance</span> <span class=\"n\">Repr</span><span class=\"o\">,</span><span class=\"n\">DecidableEq</span> <span class=\"n\">for</span> <span class=\"n\">Tree</span>\n<span class=\"n\">deriving</span> <span class=\"kd\">instance</span> <span class=\"n\">Repr</span><span class=\"o\">,</span><span class=\"n\">DecidableEq</span> <span class=\"n\">for</span> <span class=\"n\">ListTree</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">Wrap</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">|</span> <span class=\"n\">wrap</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span> <span class=\"bp\">→</span> <span class=\"n\">Tree</span> <span class=\"bp\">→</span> <span class=\"n\">Wrap</span>\n  <span class=\"n\">deriving</span> <span class=\"n\">Repr</span><span class=\"o\">,</span> <span class=\"n\">DecidableEq</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">ListWrap</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">|</span> <span class=\"n\">wrap</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span> <span class=\"bp\">→</span> <span class=\"n\">ListTree</span> <span class=\"bp\">→</span> <span class=\"n\">ListWrap</span>\n  <span class=\"n\">deriving</span> <span class=\"n\">Repr</span><span class=\"o\">,</span> <span class=\"n\">DecidableEq</span>\n</code></pre></div>",
        "id": 407684123,
        "sender_full_name": "Arthur Adjedj",
        "timestamp": 1702460496
    },
    {
        "content": "<p>Thanks! Should I report this as an issue too? And in general is #lean4 the better place for questions like this?</p>",
        "id": 407685139,
        "sender_full_name": "Malvin Gattinger",
        "timestamp": 1702460733
    },
    {
        "content": "<p>I'll add it as an issue, and will fix it along with some other things as part of a bigger refactoring soon</p>",
        "id": 407687017,
        "sender_full_name": "Arthur Adjedj",
        "timestamp": 1702461183
    },
    {
        "content": "<p>Just for reference, this is the issue I assume <a href=\"https://github.com/leanprover/lean4/issues/3057\">https://github.com/leanprover/lean4/issues/3057</a></p>",
        "id": 407969576,
        "sender_full_name": "Malvin Gattinger",
        "timestamp": 1702563440
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"422703\">Malvin Gattinger</span> has marked this topic as resolved.</p>",
        "id": 407969658,
        "sender_full_name": "Notification Bot",
        "timestamp": 1702563469
    }
]