[
    {
        "content": "<p>I want to show that C[0,1] is an \\R-module. GitHub copilot was able to handle the proof that it's a commutative monoid but not that it's a module.  Can I get a hint please? I think I'm also not using the statement <code>C01_comm_monoid</code> correctly in <code>C01_module</code>. What is the correct syntax there? Thank you</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span> <span class=\"c1\">-- imports all the Lean tactics</span>\n<span class=\"kn\">import</span> <span class=\"n\">linear_algebra.basis</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.real.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.complex.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.complex.module</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">C01</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">set.Icc</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"mi\">1</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span> <span class=\"bp\">|</span> <span class=\"n\">continuous</span> <span class=\"n\">f</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">C01_comm_monoid</span> <span class=\"o\">:</span> <span class=\"n\">add_comm_monoid</span> <span class=\"n\">C01</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">add</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">f</span> <span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">f.val</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">g.val</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">continuous.add</span> <span class=\"n\">f.property</span> <span class=\"n\">g.property</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">add_assoc</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">subtype.eq</span> <span class=\"o\">(</span><span class=\"n\">add_assoc</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">),</span>\n  <span class=\"n\">zero</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">continuous_const</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">zero_add</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">subtype.eq</span> <span class=\"o\">(</span><span class=\"n\">zero_add</span> <span class=\"n\">_</span><span class=\"o\">),</span>\n  <span class=\"n\">add_zero</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">subtype.eq</span> <span class=\"o\">(</span><span class=\"n\">add_zero</span> <span class=\"n\">_</span><span class=\"o\">),</span>\n  <span class=\"n\">add_comm</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">f</span> <span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"n\">subtype.eq</span> <span class=\"o\">(</span><span class=\"n\">add_comm</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">C01_module</span> <span class=\"o\">(</span><span class=\"n\">C01_comm_monoid</span> <span class=\"o\">:</span> <span class=\"n\">add_comm_monoid</span> <span class=\"n\">C01</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">module</span> <span class=\"n\">ℝ</span> <span class=\"n\">C01</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">smul</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">f.val</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">continuous.mul</span> <span class=\"n\">continuous_const</span> <span class=\"n\">f.property</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">one_smul</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">subtype.eq</span> <span class=\"o\">(</span><span class=\"n\">one_mul</span> <span class=\"n\">_</span><span class=\"o\">),</span>\n  <span class=\"n\">mul_smul</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">subtype.eq</span> <span class=\"o\">(</span><span class=\"n\">mul_assoc</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">),</span>\n  <span class=\"n\">smul_add</span> <span class=\"o\">:=</span>\n    <span class=\"kd\">begin</span>\n      <span class=\"n\">intros</span> <span class=\"n\">a</span> <span class=\"n\">f</span> <span class=\"n\">g</span><span class=\"o\">,</span>\n      <span class=\"n\">apply</span> <span class=\"n\">subtype.eq</span><span class=\"o\">,</span>\n      <span class=\"n\">ext</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n      <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n    <span class=\"kd\">end</span><span class=\"o\">,</span>\n  <span class=\"n\">smul_zero</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">subtype.eq</span> <span class=\"o\">(</span><span class=\"n\">mul_zero</span> <span class=\"n\">_</span><span class=\"o\">),</span>\n  <span class=\"n\">add_smul</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">subtype.eq</span> <span class=\"o\">(</span><span class=\"n\">add_mul</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">),</span>\n  <span class=\"n\">zero_smul</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">subtype.eq</span> <span class=\"o\">(</span><span class=\"n\">zero_mul</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 348993745,
        "sender_full_name": "Vasily Ilin",
        "timestamp": 1681359437
    },
    {
        "content": "<p>you are aware of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/continuous_map.module\">docs#continuous_map.module</a> ?</p>",
        "id": 348996448,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1681361228
    },
    {
        "content": "<p>nope! I tried to find it in mathlib but could not. Lean is so daunting...</p>",
        "id": 348997484,
        "sender_full_name": "Vasily Ilin",
        "timestamp": 1681361783
    },
    {
        "content": "<p>Since I don't understand the mathlib statement though, I would rather prove it myself</p>",
        "id": 348997913,
        "sender_full_name": "Vasily Ilin",
        "timestamp": 1681362071
    },
    {
        "content": "<p>Actually, I have a different question. What is a good sequence of resources to learn Lean? I have tried the following:</p>\n<ol>\n<li>I have solved (most of) the exercises in formalising-mathematics-2022 by Kevin Buzzard. Once everything is set up for me, the proofs are usually easy. It's the setting up part that I am struggling with.</li>\n<li>I have tried formalizing Hopf algebras and showed that k[x] is a Hopf algebra. That was very hard and Leo Meyer did most of the heavy lifting.</li>\n<li>I have tried formalizing \"Linear algebra done right\" but each exercise takes forever, and I got help from this server on most of them.</li>\n</ol>\n<p>The only way to get better is to work through the book \"Theorem Proving in Lean\" but that is extremely not fun and a lot of the concepts seem not applicable to \"normal\" theorem proving. Maybe there is another resource that explains things like:</p>\n<ol>\n<li>Difference between class, structure, instance, def, etc</li>\n<li>How to find things in mathlib</li>\n<li>Other things that are not just applying existing theorems inside a <code>begin</code> <code>end</code> block -- that seems to be the easy part.</li>\n</ol>",
        "id": 349001342,
        "sender_full_name": "Vasily Ilin",
        "timestamp": 1681363550
    },
    {
        "content": "<p>I haven't fired up Lean, but I think at your sorry you'll want <a href=\"https://leanprover-community.github.io/mathlib_docs/find/mul_add\">docs#mul_add</a></p>",
        "id": 349001456,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1681363605
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"414458\">@Vasily Ilin</span> Are you aware of the stuff at <a href=\"https://leanprover-community.github.io/learn.html\">https://leanprover-community.github.io/learn.html</a> ?</p>",
        "id": 349002374,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1681364133
    },
    {
        "content": "<p>I was not aware of that, Johan. Thank you!</p>",
        "id": 349184419,
        "sender_full_name": "Vasily Ilin",
        "timestamp": 1681410591
    },
    {
        "content": "<p>That formalising-mathematics course isn't about filling in those sorries -- the guts of the course is people doing their own projects. Do a project, get stuck, ask for help!</p>",
        "id": 349219282,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1681423080
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"414458\">@Vasily Ilin</span> you were stuck because <code>(C01_comm_monoid : add_comm_monoid C01)</code> is wrong. Once you fix it by using the typeclass inference system, <code>mul_add</code> works fine.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span> <span class=\"c1\">-- imports all the Lean tactics</span>\n<span class=\"kn\">import</span> <span class=\"n\">linear_algebra.basis</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.real.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.complex.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.complex.module</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">C01</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">set.Icc</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"mi\">1</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span> <span class=\"bp\">|</span> <span class=\"n\">continuous</span> <span class=\"n\">f</span> <span class=\"o\">}</span>\n\n<span class=\"c1\">-- instance, not def</span>\n<span class=\"kd\">instance</span> <span class=\"n\">C01_comm_monoid</span> <span class=\"o\">:</span> <span class=\"n\">add_comm_monoid</span> <span class=\"n\">C01</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">add</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">f</span> <span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">f.val</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">g.val</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">continuous.add</span> <span class=\"n\">f.property</span> <span class=\"n\">g.property</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">add_assoc</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">subtype.eq</span> <span class=\"o\">(</span><span class=\"n\">add_assoc</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">),</span>\n  <span class=\"n\">zero</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">continuous_const</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">zero_add</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">subtype.eq</span> <span class=\"o\">(</span><span class=\"n\">zero_add</span> <span class=\"n\">_</span><span class=\"o\">),</span>\n  <span class=\"n\">add_zero</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">subtype.eq</span> <span class=\"o\">(</span><span class=\"n\">add_zero</span> <span class=\"n\">_</span><span class=\"o\">),</span>\n  <span class=\"n\">add_comm</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">f</span> <span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"n\">subtype.eq</span> <span class=\"o\">(</span><span class=\"n\">add_comm</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">}</span>\n\n<span class=\"c1\">-- don't give the instance explicitly!</span>\n<span class=\"kd\">instance</span> <span class=\"n\">C01_module</span> <span class=\"o\">:</span> <span class=\"n\">module</span> <span class=\"n\">ℝ</span> <span class=\"n\">C01</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">smul</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">f.val</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">continuous.mul</span> <span class=\"n\">continuous_const</span> <span class=\"n\">f.property</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">one_smul</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">subtype.eq</span> <span class=\"o\">(</span><span class=\"n\">one_mul</span> <span class=\"n\">_</span><span class=\"o\">),</span>\n  <span class=\"n\">mul_smul</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">subtype.eq</span> <span class=\"o\">(</span><span class=\"n\">mul_assoc</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">),</span>\n  <span class=\"n\">smul_add</span> <span class=\"o\">:=</span>\n    <span class=\"kd\">begin</span>\n      <span class=\"n\">rintros</span> <span class=\"n\">a</span> <span class=\"o\">⟨</span><span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">hf</span><span class=\"o\">⟩</span> <span class=\"o\">⟨</span><span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"n\">hg</span><span class=\"o\">⟩,</span>\n      <span class=\"n\">ext</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n      <span class=\"n\">exact</span> <span class=\"n\">mul_add</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"n\">x</span><span class=\"o\">),</span>\n    <span class=\"kd\">end</span><span class=\"o\">,</span>\n  <span class=\"n\">smul_zero</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">subtype.eq</span> <span class=\"o\">(</span><span class=\"n\">mul_zero</span> <span class=\"n\">_</span><span class=\"o\">),</span>\n  <span class=\"n\">add_smul</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">subtype.eq</span> <span class=\"o\">(</span><span class=\"n\">add_mul</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">),</span>\n  <span class=\"n\">zero_smul</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">subtype.eq</span> <span class=\"o\">(</span><span class=\"n\">zero_mul</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 349383259,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1681478880
    },
    {
        "content": "<p>The problem with your attempt is that <code>(C01_comm_monoid : add_comm_monoid C01)</code> creates a local variable called <code>C01_comm_monoid</code> and with no definition (it's just a constant). In particular it has nothing to do with the definition just above it, so the addition is just defined as \"some addition exists\" as opposed to the formula for addition you were giving above it.</p>",
        "id": 349383811,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1681478992
    },
    {
        "content": "<p>Thank you for such a detailed explanation!</p>",
        "id": 349980965,
        "sender_full_name": "Vasily Ilin",
        "timestamp": 1681485892
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"414458\">Vasily Ilin</span> <a href=\"#narrow/stream/113489-new-members/topic/C.5B0.2C1.5D.20is.20an.20.5CR.20module/near/348997913\">said</a>:</p>\n<blockquote>\n<p>Since I don't understand the mathlib statement though, I would rather prove it myself</p>\n</blockquote>\n<p>Is it the mathlib <em>statement</em> you don't understand, or is the \"proof\" (really, definition)?</p>",
        "id": 349981331,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1681485990
    }
]