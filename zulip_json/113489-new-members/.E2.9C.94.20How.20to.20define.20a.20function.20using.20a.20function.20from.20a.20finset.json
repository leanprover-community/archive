[
    {
        "content": "<p>I have a function <code>g : (s : Finset ℕ) → ℕ</code> and I want to extend it to all natural numbers, returning 0 when the parameter is not a member of the finset <code>s</code>.<br>\nI would like to do something like this: </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span>\n  <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"k\">then</span> <span class=\"n\">g</span> <span class=\"n\">x</span> <span class=\"k\">else</span> <span class=\"mi\">0</span>\n</code></pre></div>\n<p>However, this doesn't work, as <code>g</code> expects something of type <code>{ x // x ∈ s }</code> instead of type ℕ. How can I do it?</p>",
        "id": 398378150,
        "sender_full_name": "Mateo Carranza Vélez",
        "timestamp": 1698192653
    },
    {
        "content": "<p>The immediate answer is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span>\n  <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">↦</span> <span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span> <span class=\"k\">then</span> <span class=\"n\">g</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">⟩</span> <span class=\"k\">else</span> <span class=\"mi\">0</span>\n</code></pre></div>\n<p>but a deeper answer may be that you should really think whether you really really want to do this.</p>",
        "id": 398379618,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1698193681
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"657108\">Mateo Carranza Vélez</span> has marked this topic as resolved.</p>",
        "id": 398381440,
        "sender_full_name": "Notification Bot",
        "timestamp": 1698194741
    },
    {
        "content": "<p>See also <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Function.extend#doc\">docs#Function.extend</a></p>",
        "id": 398414169,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1698212601
    }
]