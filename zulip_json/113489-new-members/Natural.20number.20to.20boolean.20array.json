[
    {
        "content": "<p>Hello everyone,</p>\n<p>I have defined a function that converts a boolean array to a natural number as follows:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">bool_arr_to_nat</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">array</span> <span class=\"n\">n</span> <span class=\"n\">bool</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"n\">acc</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span> <span class=\"k\">in</span>\n  <span class=\"n\">v.foldl</span> <span class=\"n\">acc</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">b</span> <span class=\"n\">acc</span><span class=\"o\">,</span> <span class=\"n\">cond</span> <span class=\"n\">b</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">acc</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">acc</span> <span class=\"bp\">+</span> <span class=\"mi\">0</span><span class=\"o\">))</span>\n</code></pre></div>\n<p>Now I'm wondering, how can I define a function that takes a natural number, and returns an array n bool.<br>\nThe issue I'm arising at is that the length returned by functions such as .to_array and nat.bits, are different in length.<br>\nHow can I convert these lengths to n?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">nat_to_bool_array</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">num</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">array</span> <span class=\"n\">n</span> <span class=\"n\">bool</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"k\">if</span> <span class=\"n\">num</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"k\">then</span> <span class=\"o\">[</span><span class=\"n\">ff</span><span class=\"o\">]</span><span class=\"bp\">.</span><span class=\"n\">to_array</span> <span class=\"k\">else</span> <span class=\"o\">(</span><span class=\"n\">nat.bits</span> <span class=\"n\">num</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">to_array</span>\n</code></pre></div>",
        "id": 374215814,
        "sender_full_name": "Zahir Bingen",
        "timestamp": 1689071924
    },
    {
        "content": "<p>Note that your <code>cond</code> expression is <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Nat.bit#doc\">docs#Nat.bit</a></p>",
        "id": 374220348,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1689072861
    }
]