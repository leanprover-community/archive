[
    {
        "content": "<p>I have this problem where I want to prove termination in a <code>mutual</code> definition. The specificity here is  the <code>termination_by</code> value is decreasing in the first <code>def</code>, while it stays the same in the second (which acts as some kind of \"shorthand\"). Could this possibly work?</p>\n<p>In the following <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>, please imagine that the body of <code>helper</code> is so long that it will make the body of <code>doesNotWork</code> very unreadable:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n\n<span class=\"c1\">-- This works...</span>\n<span class=\"kd\">def</span> <span class=\"n\">works</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">Bool</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">True</span>\n<span class=\"bp\">|</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">works</span> <span class=\"n\">n</span>\n\n<span class=\"c1\">-- This doesn't.</span>\n<span class=\"kd\">mutual</span>\n  <span class=\"kd\">def</span> <span class=\"n\">doesNotWork</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">Bool</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">True</span>\n  <span class=\"bp\">|</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">helper</span> <span class=\"n\">n</span>\n\n  <span class=\"n\">abbrev</span> <span class=\"n\">helper</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span> <span class=\"o\">:=</span> <span class=\"n\">doesNotWork</span> <span class=\"n\">n</span>\n  <span class=\"c\">/-</span>\n<span class=\"cm\">  failed to prove termination, possible solutions:</span>\n<span class=\"cm\">  - Use `have`-expressions to prove the remaining goals</span>\n<span class=\"cm\">  - Use `termination_by` to specify a different well-founded relation</span>\n<span class=\"cm\">  - Use `decreasing_by` to specify your own tactic for discharging this kind of goal</span>\n<span class=\"cm\">  n : ℕ</span>\n<span class=\"cm\">  ⊢ False</span>\n<span class=\"cm\">  -/</span>\n<span class=\"kd\">end</span>\n<span class=\"n\">termination_by</span> <span class=\"n\">_</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">n</span>\n</code></pre></div>",
        "id": 378732600,
        "sender_full_name": "rami3l",
        "timestamp": 1690365372
    },
    {
        "content": "<p>you need a more specific termination measure, that one doesn't work</p>",
        "id": 378733350,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1690365522
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">mutual</span>\n  <span class=\"kd\">def</span> <span class=\"n\">works</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">Bool</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">True</span>\n  <span class=\"bp\">|</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">helper</span> <span class=\"n\">n</span>\n\n  <span class=\"n\">abbrev</span> <span class=\"n\">helper</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span> <span class=\"o\">:=</span> <span class=\"n\">works</span> <span class=\"n\">n</span>\n<span class=\"kd\">end</span>\n<span class=\"n\">termination_by</span>\n  <span class=\"n\">works</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n  <span class=\"n\">helper</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 378733953,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1690365630
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> Thanks for your timely response!</p>\n<p>I'm wondering how I could inform Lean of the fact that \"the <code>termination_by</code> value is decreasing in the first def, while it stays the same in the second\"... <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 378734015,
        "sender_full_name": "rami3l",
        "timestamp": 1690365643
    },
    {
        "content": "<p>Oh, that is interesting. I'll give it a try!</p>",
        "id": 378734141,
        "sender_full_name": "rami3l",
        "timestamp": 1690365668
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> Thanks a lot for helping me out! So the trick here is to use (n, 0) and  (n, 1) to create a continuously decreasing sequence?</p>",
        "id": 378735877,
        "sender_full_name": "rami3l",
        "timestamp": 1690365993
    },
    {
        "content": "<p>I think I have figured out why it works now. Many thanks!</p>",
        "id": 378982550,
        "sender_full_name": "rami3l",
        "timestamp": 1690424046
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"615361\">rami3l</span> has marked this topic as resolved.</p>",
        "id": 378982572,
        "sender_full_name": "Notification Bot",
        "timestamp": 1690424072
    }
]