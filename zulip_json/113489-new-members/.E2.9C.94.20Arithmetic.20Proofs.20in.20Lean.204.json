[
    {
        "content": "<p>Below is a very simple theorem to prove, but I can't seem to find the right Lemmas.  In addition, a few of the tactics that I thought would help (e.g. linarith, norm_num, etc.) don't seem to exist in Lean 4.  Also, can someone help me out with the proper syntax for cases?  It seems like sometimes I can use </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">cases</span> <span class=\"n\">x</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">inl</span> <span class=\"n\">x1</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">...</span>\n  <span class=\"bp\">|</span> <span class=\"n\">inr</span> <span class=\"n\">x2</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">...</span>\n</code></pre></div>\n<p>and then in other cases, Lean will complain that inl is not a valid name.  Or it might say that it expected a curly brack or something else.  How does cases work when I want to name the newly introduced hypotheses? </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">Proof</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">Nat.pred</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">transitivity</span> <span class=\"mi\">1</span>\n  <span class=\"n\">simp</span>\n</code></pre></div>",
        "id": 359768020,
        "sender_full_name": "Jonathan Whitehead",
        "timestamp": 1684530543
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/wiki/Code-in-backticks\">#backticks</a> for better presentation of your question</p>",
        "id": 359768104,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1684530576
    },
    {
        "content": "<p>And those tactics exist in mathlib4; try importing them</p>",
        "id": 359768250,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1684530613
    },
    {
        "content": "<p>Apologies, forgot about the back ticks.</p>",
        "id": 359768266,
        "sender_full_name": "Jonathan Whitehead",
        "timestamp": 1684530620
    },
    {
        "content": "<p>Oh, okay.  They're mathlib tactics.</p>",
        "id": 359768349,
        "sender_full_name": "Jonathan Whitehead",
        "timestamp": 1684530658
    },
    {
        "content": "<p><code>inl</code> is a valid name if a constructor of the thing you're casing on is called <code>inl</code>. To be honest I find this a bit frustrating; in Lean 3 we just did <code>cases</code> and it always worked regardless of constructor names, and I don't know constructor names in general (because who cares about what they're called)</p>",
        "id": 359768393,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1684530668
    },
    {
        "content": "<p>But <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> if you want help with a <code>cases</code> proof.</p>",
        "id": 359768427,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1684530680
    },
    {
        "content": "<p>Yes, it's frustrating because I don't know what the names of the constructor are that I'm casing over.  I'll see if I can make some good examples.</p>",
        "id": 359769062,
        "sender_full_name": "Jonathan Whitehead",
        "timestamp": 1684530902
    },
    {
        "content": "<p>The good old Lean 3 \"we don't care about the constructor names\" <code>cases</code> is I think now called <code>cases'</code> in mathlib. So you can hopefully just do <code>cases' x with h1 h2</code> (after <code>import Mathlib.Tactic</code>)</p>",
        "id": 359769263,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1684530971
    },
    {
        "content": "<p>OTOH it's easy to figure out the names of the constructors of your type, just ctrl-click on the type in the infoview and look at the definition.</p>",
        "id": 359769342,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1684531005
    },
    {
        "content": "<p>Great info.  Thanks!</p>",
        "id": 359769417,
        "sender_full_name": "Jonathan Whitehead",
        "timestamp": 1684531034
    },
    {
        "content": "<blockquote>\n<p>OTOH it's easy to figure out the names of the constructors of your type, just ctrl-click on the type in the infoview and look at the definition.</p>\n</blockquote>\n<p>This unfortunately doesn't work in the web editor</p>",
        "id": 359772050,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684532152
    },
    {
        "content": "<p>Can someone tell me the proper import statement to get the Mathlib4 tactics?  I tried </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Mathlib.Tactic.Basic</span>\n</code></pre></div>\n<p>but I still couldn't use linarith or norm_num.  I looked in the linarith directory and I don't see a Basic.lean file in there.</p>",
        "id": 359775961,
        "sender_full_name": "Jonathan Whitehead",
        "timestamp": 1684534153
    },
    {
        "content": "<p><code>import Mathlib.Tactic</code> should do it (that should import all of them)</p>",
        "id": 359776001,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1684534173
    },
    {
        "content": "<p>That worked!</p>",
        "id": 359777461,
        "sender_full_name": "Jonathan Whitehead",
        "timestamp": 1684534891
    },
    {
        "content": "<p>That is not surprising :-)</p>",
        "id": 359777487,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1684534913
    },
    {
        "content": "<p>I started this thread by giving a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> of my problem. I updated it to be about lists below.  </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">Proof</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">ℕ</span> <span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">≤</span> <span class=\"n\">List.length</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">Nat.pred</span> <span class=\"o\">(</span><span class=\"n\">List.length</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">cases</span> <span class=\"n\">l</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">nil</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">contradiction</span>\n  <span class=\"bp\">|</span> <span class=\"n\">cons</span> <span class=\"n\">he</span> <span class=\"n\">t</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">simp</span>\n                 <span class=\"n\">by_contra</span> <span class=\"n\">x</span>\n                 <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">x</span>\n                 <span class=\"n\">cases</span> <span class=\"n\">t</span> <span class=\"k\">with</span>\n                  <span class=\"bp\">|</span> <span class=\"n\">nil</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n                  <span class=\"bp\">|</span> <span class=\"n\">cons</span> <span class=\"n\">he'</span> <span class=\"n\">t'</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">contradiction</span>\n</code></pre></div>\n<p>I was able to prove Proof by using cases (thanks to Kevin for helping me out on finding the proper constructors).  For the nil case, it was simply solved by  using contradiction because after letting <code>l = []</code>, it was apparent in the context that  <code>2 &lt;= List.length []</code> was false.  </p>\n<p>However, when I adapt this proof to my real problem, when I uses cases on my list, Lean fails to update each instance of the list in my context with [].   I'm guessing it has to do something with the complexity of the list, but is there some tactic where I can tell Lean \"don't forget to update the context with <code>l = nil</code>\".   Otherwise, I can't use contradiction in the proof of my real program.  Below is a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> of my actual problem:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.List.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Set.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n\n<span class=\"kd\">@[ext]</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">Vertex</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">)</span>\n  <span class=\"n\">deriving</span> <span class=\"n\">DecidableEq</span><span class=\"o\">,</span> <span class=\"n\">Repr</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">Edge</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">edge</span> <span class=\"o\">:</span> <span class=\"n\">Vertex</span> <span class=\"bp\">×</span> <span class=\"n\">Vertex</span><span class=\"o\">)</span>\n  <span class=\"n\">deriving</span> <span class=\"n\">DecidableEq</span><span class=\"o\">,</span> <span class=\"n\">Repr</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">Vertex_List</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Vertex</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">nonempty</span> <span class=\"o\">:</span> <span class=\"n\">l.length</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">no_dups</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">Vertex</span><span class=\"o\">),</span> <span class=\"n\">u</span> <span class=\"bp\">∈</span> <span class=\"n\">l</span> <span class=\"bp\">→</span> <span class=\"n\">v</span> <span class=\"bp\">∈</span> <span class=\"n\">l</span> <span class=\"bp\">→</span> <span class=\"n\">u.name</span> <span class=\"bp\">=</span> <span class=\"n\">v.name</span> <span class=\"bp\">→</span> <span class=\"n\">u</span> <span class=\"bp\">=</span> <span class=\"n\">v</span><span class=\"o\">)</span>\n  <span class=\"n\">deriving</span> <span class=\"n\">DecidableEq</span><span class=\"o\">,</span> <span class=\"n\">Repr</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">Edge_List</span> <span class=\"o\">(</span><span class=\"n\">vertices</span> <span class=\"o\">:</span> <span class=\"n\">Vertex_List</span><span class=\"o\">):=</span>\n  <span class=\"o\">(</span><span class=\"n\">edges</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Edge</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">closure</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">e</span> <span class=\"bp\">∈</span> <span class=\"n\">edges</span><span class=\"o\">,</span> <span class=\"n\">Prod.fst</span> <span class=\"n\">e.edge</span> <span class=\"bp\">∈</span> <span class=\"n\">vertices.l</span> <span class=\"bp\">∧</span> <span class=\"n\">Prod.snd</span> <span class=\"n\">e.edge</span> <span class=\"bp\">∈</span> <span class=\"n\">vertices.l</span><span class=\"o\">)</span>\n  <span class=\"n\">deriving</span> <span class=\"n\">DecidableEq</span><span class=\"o\">,</span> <span class=\"n\">Repr</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">Graph</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">vertices</span> <span class=\"o\">:</span> <span class=\"n\">Vertex_List</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">edges</span> <span class=\"o\">:</span> <span class=\"n\">Edge_List</span> <span class=\"n\">vertices</span><span class=\"o\">)</span>\n<span class=\"n\">deriving</span> <span class=\"n\">DecidableEq</span><span class=\"o\">,</span> <span class=\"n\">Repr</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">subtract_vertex</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">Graph</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"n\">Vertex</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Graph</span> <span class=\"o\">:=</span>\n  <span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">u</span> <span class=\"bp\">∈</span> <span class=\"n\">G.vertices.l</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">G.vertices.l.length</span> <span class=\"bp\">≥</span>  <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"k\">then</span>\n  <span class=\"o\">{</span><span class=\"n\">vertices</span> <span class=\"o\">:=</span> <span class=\"o\">{</span>\n    <span class=\"n\">l</span> <span class=\"o\">:=</span> <span class=\"n\">G.vertices.l.erase</span> <span class=\"n\">u</span>\n    <span class=\"n\">nonempty</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n      <span class=\"k\">have</span> <span class=\"n\">h1</span> <span class=\"o\">:=</span> <span class=\"n\">And.right</span> <span class=\"n\">h</span>\n      <span class=\"k\">have</span> <span class=\"n\">h2</span> <span class=\"o\">:=</span> <span class=\"n\">And.left</span> <span class=\"n\">h</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">List.length_erase_of_mem</span><span class=\"o\">]</span>\n      <span class=\"n\">simp</span>\n      <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">h1</span>\n      <span class=\"n\">cases</span> <span class=\"n\">G.vertices.l</span> <span class=\"k\">with</span>\n        <span class=\"bp\">|</span> <span class=\"n\">nil</span> <span class=\"bp\">=&gt;</span> <span class=\"gr\">sorry</span>\n        <span class=\"bp\">|</span> <span class=\"n\">cons</span> <span class=\"bp\">=&gt;</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n      <span class=\"n\">no_dups</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span> <span class=\"o\">}</span>\n   <span class=\"n\">edges</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">edges</span> <span class=\"o\">:=</span> <span class=\"n\">G.edges.edges</span><span class=\"o\">,</span>\n             <span class=\"n\">closure</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span><span class=\"o\">}</span>\n  <span class=\"o\">}</span>\n  <span class=\"k\">else</span>\n  <span class=\"n\">G</span>\n</code></pre></div>",
        "id": 359790718,
        "sender_full_name": "Jonathan Whitehead",
        "timestamp": 1684542937
    },
    {
        "content": "<p>It also bothers me when VS Code doesn't highlight some of the keywords with colors.  It makes me feel like my syntax is off.  See the keywords after have <code>h2 := And.left h</code> aren't colored blue:</p>\n<p><a href=\"/user_uploads/3121/V_NXGSj3sD3zENDKi3RxZ1pz/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/V_NXGSj3sD3zENDKi3RxZ1pz/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/V_NXGSj3sD3zENDKi3RxZ1pz/image.png\"></a></div>",
        "id": 359791258,
        "sender_full_name": "Jonathan Whitehead",
        "timestamp": 1684543356
    },
    {
        "content": "<p>I think that is because you have a syntax error</p>",
        "id": 359943246,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684608230
    },
    {
        "content": "<p>Which I think is the comma after the sorry</p>",
        "id": 359943267,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684608241
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"472585\">Jonathan Whitehead</span> has marked this topic as resolved.</p>",
        "id": 359948909,
        "sender_full_name": "Notification Bot",
        "timestamp": 1684611145
    }
]