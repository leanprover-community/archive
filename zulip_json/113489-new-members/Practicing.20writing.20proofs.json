[
    {
        "content": "<p>I wrote a proof that subtracting two sums over <code>range</code>s equals sum over the difference of the ranges. The proof took me a long time and seems extremely ugly. I'm hoping to learn a lot by having someone look at it for 3 seconds and say how to do it in two lines. (Please let me know in case such a question is discouraged here)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">bigsum_minus_bigsum</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">mlen</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">≤</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"bp\">∑</span> <span class=\"n\">k</span> <span class=\"k\">in</span> <span class=\"n\">range</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">k</span> <span class=\"bp\">-</span> <span class=\"bp\">∑</span> <span class=\"n\">h</span> <span class=\"k\">in</span> <span class=\"n\">range</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">h</span> <span class=\"bp\">=</span> <span class=\"bp\">∑</span> <span class=\"n\">h</span> <span class=\"k\">in</span> <span class=\"n\">range</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">-</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"bp\">+</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n        <span class=\"n\">induction</span> <span class=\"n\">m</span> <span class=\"n\">generalizing</span> <span class=\"n\">n</span> <span class=\"k\">with</span>\n        <span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"bp\">=&gt;</span>\n          <span class=\"k\">have</span> <span class=\"n\">nz</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">linarith</span>\n          <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"bp\">*</span><span class=\"o\">]</span>\n        <span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"n\">m</span> <span class=\"n\">ih</span> <span class=\"bp\">=&gt;</span>\n          <span class=\"n\">by_cases</span> <span class=\"n\">le</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">≤</span> <span class=\"n\">m</span>\n          <span class=\"bp\">·</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">minus_succ_eq_succ_minus</span><span class=\"o\">]</span>\n            <span class=\"n\">repeat</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Finset.sum_range_succ</span><span class=\"o\">]</span>\n            <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">ih</span><span class=\"o\">]</span>\n            <span class=\"k\">have</span> <span class=\"n\">minsimp</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">-</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">m</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n                <span class=\"n\">apply</span> <span class=\"n\">tsub_add_cancel_of_le</span>\n                <span class=\"n\">linarith</span>\n            <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">minsimp</span><span class=\"o\">]</span>\n            <span class=\"k\">have</span> <span class=\"n\">kk</span> <span class=\"o\">:</span> <span class=\"bp\">∑</span> <span class=\"n\">x</span> <span class=\"k\">in</span> <span class=\"n\">range</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"bp\">∑</span> <span class=\"n\">k</span> <span class=\"k\">in</span> <span class=\"n\">range</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">k</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span>\n            <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">kk</span><span class=\"o\">]</span>\n            <span class=\"k\">have</span> <span class=\"n\">mycomm</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">-</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">ring</span>\n            <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">mycomm</span><span class=\"o\">]</span>\n            <span class=\"n\">exact</span> <span class=\"n\">le</span>\n            <span class=\"n\">exact</span> <span class=\"n\">le</span>\n          <span class=\"bp\">·</span> <span class=\"k\">have</span> <span class=\"n\">eeq</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">linarith</span>\n            <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"bp\">*</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 388847887,
        "sender_full_name": "Adomas Baliuka",
        "timestamp": 1693764134
    },
    {
        "content": "<p>could be made shorter, but this works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">bigsum_diff</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">mlen</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">≤</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"bp\">∑</span> <span class=\"n\">k</span> <span class=\"k\">in</span> <span class=\"n\">range</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">k</span> <span class=\"bp\">-</span> <span class=\"bp\">∑</span> <span class=\"n\">h</span> <span class=\"k\">in</span> <span class=\"n\">range</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">h</span> <span class=\"bp\">=</span> <span class=\"bp\">∑</span> <span class=\"n\">h</span> <span class=\"k\">in</span> <span class=\"n\">range</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">-</span> <span class=\"n\">n</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"bp\">+</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">Finset.sum_range_add_sub_sum_range</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">-</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">add_sub_of_le</span> <span class=\"n\">mlen</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">this</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">this</span><span class=\"o\">]</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">add_comm</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>[edited: changed <code>covert</code> to <code>simp only [add_comm]</code>]</p>",
        "id": 388849774,
        "sender_full_name": "Moritz Firsching",
        "timestamp": 1693765484
    },
    {
        "content": "<p>Wow, thanks! It says \"expecting term\". Is there something missing after <code>convert</code>? Did you know about <code>sum_range_add_sub_sum_range</code> or did you find it by some method I could learn?</p>",
        "id": 388850254,
        "sender_full_name": "Adomas Baliuka",
        "timestamp": 1693765806
    },
    {
        "content": "<p>Here's a non-cheating proof, using only lemmas simpler than the one you're trying to prove:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.BigOperators.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Real.Basic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Finset</span>\n<span class=\"kn\">open</span> <span class=\"n\">scoped</span> <span class=\"n\">BigOperators</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">addRightEmbedding_eq_addLeftEmbedding</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">AddCancelCommMonoid</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">addRightEmbedding</span> <span class=\"n\">g</span> <span class=\"bp\">=</span> <span class=\"n\">addLeftEmbedding</span> <span class=\"n\">g</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">ext</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">add_comm</span> <span class=\"n\">_</span> <span class=\"n\">_</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">bigsum_minus_bigsum</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">mlen</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">≤</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"bp\">∑</span> <span class=\"n\">k</span> <span class=\"k\">in</span> <span class=\"n\">range</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">k</span> <span class=\"bp\">-</span> <span class=\"bp\">∑</span> <span class=\"n\">h</span> <span class=\"k\">in</span> <span class=\"n\">range</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">h</span> <span class=\"bp\">=</span> <span class=\"bp\">∑</span> <span class=\"n\">h</span> <span class=\"k\">in</span> <span class=\"n\">range</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">-</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"bp\">+</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">sub_eq_iff_eq_add</span><span class=\"o\">,</span> <span class=\"bp\">←</span><span class=\"n\">addRightEmbedding_apply</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"bp\">←</span><span class=\"n\">sum_map</span><span class=\"o\">]</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">sum_union</span><span class=\"o\">,</span> <span class=\"n\">union_comm</span><span class=\"o\">]</span>\n  <span class=\"bp\">·</span> <span class=\"n\">congr</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">addRightEmbedding_eq_addLeftEmbedding</span><span class=\"o\">]</span>\n    <span class=\"n\">convert</span> <span class=\"n\">range_add_eq_union</span> <span class=\"n\">_</span> <span class=\"n\">_</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">add_tsub_cancel_of_le</span> <span class=\"n\">mlen</span><span class=\"o\">]</span>\n  <span class=\"bp\">·</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">disjoint_left</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 388850546,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1693765998
    },
    {
        "content": "<p>Of course the better way is to use the existing lemma <code>sum_range_add_sub_sum_range </code>, which you could have found by looking for <code>Finsetsumrangerange</code> or <code>Finsetsumrangesub</code>in the docs: you know each part should appear in the name somewhere, and you can try a few permutations out (but typically <code>sum</code> will probably come before <code>range</code>).</p>",
        "id": 388850713,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1693766143
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"638715\">ab</span> <a href=\"#narrow/stream/113489-new-members/topic/Practicing.20writing.20proofs/near/388850254\">said</a>:</p>\n<blockquote>\n<p>Wow, thanks! It says \"expecting term\". Is there something missing after <code>convert</code>? Did you know about <code>sum_range_add_sub_sum_range</code> or did you find it by some method I could learn?</p>\n</blockquote>\n<p>Yes, there was something missing, I changed the original message...</p>",
        "id": 388850971,
        "sender_full_name": "Moritz Firsching",
        "timestamp": 1693766360
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span>  If you don't mind me asking, how did you think of using these embeddings? Is that a normal technique in some circumstances? It seems very weird and roundabout somehow. You build these embedding objects and then coerce them to functions? (Is there a way to list coercions? I know about <code>#synth</code> but there I need to know input and output type. Is there a way to list instances and filter just by input or output?)</p>",
        "id": 388855362,
        "sender_full_name": "Adomas Baliuka",
        "timestamp": 1693769802
    },
    {
        "content": "<p>My hand was forced by the way <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Finset.range_add_eq_union#doc\">docs#Finset.range_add_eq_union</a> was written. To be quite honest, I would have preferred a lemma of the form <code>range a = range b ∪ (range (b - a)).map (addLeftEmbedding a)</code>.<br>\nThe reason we use those embeddings is because we want to use <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Finset.map#doc\">docs#Finset.map</a> instead of <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Finset.image#doc\">docs#Finset.image</a>. This (somewhat rare pattern) is useful because it lets us carry around the proof of injectivity (or in the case of <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Finset.sup%27#doc\">docs#Finset.sup'</a> nonemptiness, or <code>i ∉ s</code> for <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Finset.cons#doc\">docs#Finset.cons</a>, etc...) and spares us a few proof obligations. Typically, I used <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Finset.sum_map#doc\">docs#Finset.sum_map</a> which doesn't require me (re)proving that the function is injective.</p>",
        "id": 388855712,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1693770080
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">bigsum_diff</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">mlen</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">≤</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"bp\">∑</span> <span class=\"n\">k</span> <span class=\"k\">in</span> <span class=\"n\">range</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">k</span> <span class=\"bp\">-</span> <span class=\"bp\">∑</span> <span class=\"n\">h</span> <span class=\"k\">in</span> <span class=\"n\">range</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">h</span> <span class=\"bp\">=</span> <span class=\"bp\">∑</span> <span class=\"n\">h</span> <span class=\"k\">in</span> <span class=\"n\">range</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">-</span> <span class=\"n\">n</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"bp\">+</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">Finset.sum_range_add_sub_sum_range</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">-</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">add_comm</span><span class=\"o\">]</span>\n  <span class=\"n\">convert</span> <span class=\"n\">Finset.sum_range_add_sub_sum_range</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span>\n  <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">add_sub_of_le</span> <span class=\"n\">mlen</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span>\n</code></pre></div>\n<p>is better than what I wrote before.</p>\n<p>I think <span class=\"user-mention\" data-user-id=\"638715\">@ab</span>  is asking about how to go from a name \"<code>Finsetsumrangesub</code>\" to the name of the theorem and one answer here is to use the search of <a href=\"https://leanprover-community.github.io/mathlib4_docs/\">https://leanprover-community.github.io/mathlib4_docs/</a>. If you already know where to look for approximately, then typing <code>Finset.sum</code> and pressing Ctrl-space will show suggestions. <br>\nfor the last exact, you can simply type <code>exact?</code> and it should find the <code> (add_sub_of_le mlen).symm</code> part</p>",
        "id": 388858793,
        "sender_full_name": "Moritz Firsching",
        "timestamp": 1693772365
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"313038\">@Moritz Firsching</span>  Why is this better? It has the same number of lines. I'm trying to understand what kind of proofs and style are considered \"good\".</p>",
        "id": 389011888,
        "sender_full_name": "Adomas Baliuka",
        "timestamp": 1693840289
    },
    {
        "content": "<p>The <code>have := ..</code> is superfluous in the latest proof</p>",
        "id": 389013357,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1693840688
    },
    {
        "content": "<p>I'm not sure I agree it's better, in any case, since the <code>simp only [add_comm]</code> is still somewhat unfortunate. If you want to use <code>convert</code> (which means \"I've <em>nearly</em> got the result I need, please show me where it differs from the current goal\"), maybe this is nicer:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.BigOperators.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Real.Basic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">BigOperators</span> <span class=\"n\">Finset</span> <span class=\"n\">Nat</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">bigsum_diff</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">mlen</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">≤</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"bp\">∑</span> <span class=\"n\">k</span> <span class=\"k\">in</span> <span class=\"n\">range</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">k</span> <span class=\"bp\">-</span> <span class=\"bp\">∑</span> <span class=\"n\">h</span> <span class=\"k\">in</span> <span class=\"n\">range</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">h</span> <span class=\"bp\">=</span> <span class=\"bp\">∑</span> <span class=\"n\">h</span> <span class=\"k\">in</span> <span class=\"n\">range</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">-</span> <span class=\"n\">n</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"bp\">+</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">convert</span> <span class=\"n\">Finset.sum_range_add_sub_sum_range</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">using</span> <span class=\"mi\">3</span>\n  <span class=\"bp\">·</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">add_sub_of_le</span> <span class=\"n\">mlen</span><span class=\"o\">]</span>\n  <span class=\"bp\">·</span> <span class=\"n\">exact</span> <span class=\"n\">add_comm</span> <span class=\"n\">_</span> <span class=\"n\">_</span>\n</code></pre></div>",
        "id": 389014200,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1693840942
    },
    {
        "content": "<p>Or you could do:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.BigOperators.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Real.Basic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">BigOperators</span> <span class=\"n\">Finset</span> <span class=\"n\">Nat</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">bigsum_diff</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">mlen</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">≤</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"bp\">∑</span> <span class=\"n\">k</span> <span class=\"k\">in</span> <span class=\"n\">range</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">k</span> <span class=\"bp\">-</span> <span class=\"bp\">∑</span> <span class=\"n\">h</span> <span class=\"k\">in</span> <span class=\"n\">range</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">h</span> <span class=\"bp\">=</span> <span class=\"bp\">∑</span> <span class=\"n\">h</span> <span class=\"k\">in</span> <span class=\"n\">range</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">-</span> <span class=\"n\">n</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"bp\">+</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"k\">calc</span>\n    <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"bp\">∑</span> <span class=\"n\">k</span> <span class=\"k\">in</span> <span class=\"n\">range</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">-</span> <span class=\"n\">n</span><span class=\"o\">)),</span> <span class=\"n\">f</span> <span class=\"n\">k</span> <span class=\"bp\">-</span> <span class=\"bp\">∑</span> <span class=\"n\">k</span> <span class=\"k\">in</span> <span class=\"n\">range</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">k</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">add_sub_of_le</span> <span class=\"n\">mlen</span><span class=\"o\">]</span>\n    <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"bp\">∑</span> <span class=\"n\">k</span> <span class=\"k\">in</span> <span class=\"n\">range</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">-</span> <span class=\"n\">n</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">Finset.sum_range_add_sub_sum_range</span> <span class=\"bp\">..</span>\n    <span class=\"c1\">-- Choose one of the following two lines</span>\n    <span class=\"c1\">-- _ = _ := by simp_rw [add_comm]</span>\n    <span class=\"c1\">-- _ = _ := Finset.sum_congr rfl fun _ _ =&gt; by rw [add_comm]</span>\n</code></pre></div>\n<p>Not sure any of those are necessarily better or worse than the other alternatives</p>",
        "id": 389015047,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1693841237
    }
]