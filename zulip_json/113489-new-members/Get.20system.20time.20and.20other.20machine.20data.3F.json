[
    {
        "content": "<p>In Core, there is a <code>SystemTime</code> structure.  Does Lean have a way to get the current clock time or Unix epoch?  I am trying to find a function but cannot see any.</p>\n<p>Similarly, is there a way to access other hardware data without reading <code>/proc</code> (which is platform-specific)?</p>",
        "id": 394421384,
        "sender_full_name": "Ioannis Konstantoulas",
        "timestamp": 1696251232
    },
    {
        "content": "<p>Are <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=monoMsNow#doc\">docs#monoMsNow</a> or <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=monoNanosNow#doc\">docs#monoNanosNow</a> useful to you? You can see the implementations here <a href=\"https://github.com/leanprover/lean4/blob/1572e55f06268a87bc82249f7c4c52dec8f5c3cf/stage0/src/runtime/io.cpp#L385\">https://github.com/leanprover/lean4/blob/1572e55f06268a87bc82249f7c4c52dec8f5c3cf/stage0/src/runtime/io.cpp#L385</a></p>",
        "id": 394463311,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1696261447
    },
    {
        "content": "<p>The monotonicity is useful, but I would like the resulting number to be related to the epoch or date.  I cannot understand the relation, if any, with the unix epoch (I don't understand all the processing after invoking <code>time_since_epoch()</code>); at least in my system <code>date +%s</code> and <code>#eval IO.monoNanosNow</code> give different results.</p>",
        "id": 394468318,
        "sender_full_name": "Ioannis Konstantoulas",
        "timestamp": 1696263074
    },
    {
        "content": "<p>There are a lot of different system times in <del>POSIX</del> most unix systems</p>",
        "id": 394515471,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1696282073
    },
    {
        "content": "<p>How different are the values you get?</p>",
        "id": 394515608,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1696282148
    },
    {
        "content": "<p>Completely different; for now, I created a project in C with functions like</p>\n<div class=\"codehilite\" data-code-language=\"C\"><pre><span></span><code><span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"s\">\"C\"</span><span class=\"w\"> </span><span class=\"kt\">uint64_t</span><span class=\"w\"> </span><span class=\"n\">system_time_nanoseconds</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">struct</span><span class=\"w\"> </span><span class=\"nc\">timespec</span><span class=\"w\"> </span><span class=\"n\">t</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"n\">clock_gettime</span><span class=\"p\">(</span><span class=\"n\">CLOCK_REALTIME</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">t</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">uint64_t</span><span class=\"p\">)(</span><span class=\"n\">t</span><span class=\"p\">.</span><span class=\"n\">tv_sec</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">uint64_t</span><span class=\"p\">)</span><span class=\"mi\">1000000000</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">uint64_t</span><span class=\"p\">)(</span><span class=\"n\">t</span><span class=\"p\">.</span><span class=\"n\">tv_nsec</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>and bindings like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[</span><span class=\"n\">extern</span> <span class=\"s2\">\"system_time_nanoseconds\"</span><span class=\"kd\">]</span>\n<span class=\"n\">opaque</span> <span class=\"n\">getSystemTimeNanoseconds</span> <span class=\"o\">:</span> <span class=\"n\">Unit</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">UInt64</span>\n</code></pre></div>\n<p>that did the job (in particular, I can use this value to correctly set <code>IO.FS.SystemTime</code>).  It seems I will also need to add date functions from C, since I cannot find such in Lean.</p>\n<p>I am sure I am overcomplicating the FFI though, I had to create a different project and <code>require</code> it locally; surely I can incorporate the C code into my existing code with some options in the <code>lakefile</code>, but I have not yet tried.</p>",
        "id": 394517553,
        "sender_full_name": "Ioannis Konstantoulas",
        "timestamp": 1696283186
    }
]