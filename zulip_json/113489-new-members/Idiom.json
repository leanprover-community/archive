[
    {
        "content": "<p>Is there a more idiomatic way to do <code> rewrite [(by ring : (a + b) * (a + b) = a * a + b * b + 2 * (a * b))]</code> in Lean 4?</p>\n<p>The context is below (line 22). This is just a trivial learning example that I set for myself, from a question which came up on Libera IRC ##math. I'd appreciate any other hints on how a more experienced user of Lean 4 would write this proof.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Nat.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Nat.GCD.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.Ring</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">toy</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">∣</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">},</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">∣</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">∣</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">intro</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">h</span>\n    <span class=\"n\">rewrite</span> <span class=\"o\">[</span><span class=\"n\">Nat.dvd_add_iff_right</span> <span class=\"o\">(</span><span class=\"n\">Nat.dvd_mul_right</span> <span class=\"n\">a</span> <span class=\"n\">a</span><span class=\"o\">)]</span>\n    <span class=\"n\">exact</span> <span class=\"n\">Nat.dvd_trans</span> <span class=\"o\">(</span><span class=\"n\">Nat.dvd_mul_right</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"n\">h</span>\n  <span class=\"n\">rewrite</span> <span class=\"o\">[</span><span class=\"n\">Nat.pow_two</span><span class=\"o\">]</span>\n  <span class=\"k\">if</span> <span class=\"n\">hz</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"k\">then</span>\n    <span class=\"n\">rewrite</span> <span class=\"o\">[</span><span class=\"n\">hz</span><span class=\"o\">,</span> <span class=\"n\">Nat.zero_add</span><span class=\"o\">,</span> <span class=\"n\">Nat.zero_mul</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">Nat.mul_self_inj</span><span class=\"o\">,</span> <span class=\"n\">Nat.zero_mul</span><span class=\"o\">]</span>\n    <span class=\"n\">exact</span> <span class=\"n\">symm</span> <span class=\"bp\">∘</span> <span class=\"n\">Nat.eq_zero_of_zero_dvd</span>\n  <span class=\"k\">else</span>\n    <span class=\"k\">let</span> <span class=\"n\">d</span> <span class=\"o\">:=</span> <span class=\"n\">Nat.gcd</span> <span class=\"n\">a</span> <span class=\"n\">b</span>\n    <span class=\"k\">have</span> <span class=\"n\">dpos</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">d</span> <span class=\"o\">:=</span> <span class=\"n\">Nat.gcd_pos_of_pos_left</span> <span class=\"n\">b</span> <span class=\"o\">(</span><span class=\"n\">Nat.pos_of_ne_zero</span> <span class=\"n\">hz</span><span class=\"o\">)</span>\n    <span class=\"k\">have</span> <span class=\"o\">⟨⟨</span><span class=\"n\">a'</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">d</span> <span class=\"bp\">*</span> <span class=\"n\">a'</span><span class=\"o\">)⟩,</span> <span class=\"o\">⟨</span><span class=\"n\">b'</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">d</span> <span class=\"bp\">*</span> <span class=\"n\">b'</span><span class=\"o\">)⟩⟩</span> <span class=\"o\">:=</span> <span class=\"n\">Nat.gcd_dvd</span> <span class=\"n\">a</span> <span class=\"n\">b</span>\n    <span class=\"k\">have</span> <span class=\"n\">hcoprime</span> <span class=\"o\">:</span> <span class=\"n\">Nat.coprime</span> <span class=\"n\">a'</span> <span class=\"n\">b'</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n      <span class=\"n\">rewrite</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"o\">(</span><span class=\"n\">Nat.div_eq_iff_eq_mul_right</span> <span class=\"n\">dpos</span> <span class=\"o\">⟨</span><span class=\"n\">a'</span><span class=\"o\">,</span> <span class=\"n\">h₁</span><span class=\"o\">⟩)</span><span class=\"bp\">.</span><span class=\"n\">mpr</span> <span class=\"n\">h₁</span><span class=\"o\">]</span>\n      <span class=\"n\">rewrite</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"o\">(</span><span class=\"n\">Nat.div_eq_iff_eq_mul_right</span> <span class=\"n\">dpos</span> <span class=\"o\">⟨</span><span class=\"n\">b'</span><span class=\"o\">,</span> <span class=\"n\">h₂</span><span class=\"o\">⟩)</span><span class=\"bp\">.</span><span class=\"n\">mpr</span> <span class=\"n\">h₂</span><span class=\"o\">]</span>\n      <span class=\"n\">exact</span> <span class=\"n\">Nat.coprime_div_gcd_div_gcd</span> <span class=\"n\">dpos</span>\n    <span class=\"n\">rewrite</span> <span class=\"o\">[(</span><span class=\"kd\">by</span> <span class=\"n\">ring</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">))]</span>\n    <span class=\"n\">rewrite</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">Nat.dvd_add_iff_left</span> <span class=\"o\">(</span><span class=\"n\">Nat.dvd_mul_left</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)]</span>\n    <span class=\"n\">rewrite</span> <span class=\"o\">[</span><span class=\"n\">h₁</span><span class=\"o\">,</span> <span class=\"n\">h₂</span><span class=\"o\">]</span>\n    <span class=\"n\">repeat</span> <span class=\"n\">rewrite</span> <span class=\"o\">[(</span><span class=\"kd\">by</span> <span class=\"n\">intro</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">;</span> <span class=\"n\">ring</span> <span class=\"o\">:</span>\n      <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">d</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">d</span> <span class=\"bp\">*</span> <span class=\"n\">d</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"o\">))]</span>\n    <span class=\"n\">rewrite</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">Nat.mul_add</span><span class=\"o\">,</span> <span class=\"n\">Nat.mul_dvd_mul_iff_left</span> <span class=\"o\">(</span><span class=\"n\">Nat.mul_pos</span> <span class=\"n\">dpos</span> <span class=\"n\">dpos</span><span class=\"o\">)]</span>\n    <span class=\"n\">intro</span> <span class=\"n\">h</span>\n    <span class=\"n\">apply</span> <span class=\"n\">congr_arg</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">d</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n    <span class=\"n\">apply</span> <span class=\"n\">Nat.dvd_antisymm</span>\n    <span class=\"bp\">.</span> <span class=\"n\">rewrite</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">Nat.coprime.dvd_mul_right</span> <span class=\"n\">hcoprime</span><span class=\"o\">]</span>\n      <span class=\"n\">exact</span> <span class=\"n\">C</span> <span class=\"n\">h</span>\n    <span class=\"bp\">.</span> <span class=\"n\">rewrite</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">Nat.coprime.dvd_mul_right</span> <span class=\"n\">hcoprime.symm</span><span class=\"o\">]</span>\n      <span class=\"n\">exact</span> <span class=\"n\">C</span> <span class=\"o\">((</span><span class=\"n\">Nat.add_comm</span> <span class=\"bp\">..</span><span class=\"o\">)</span> <span class=\"bp\">▸</span> <span class=\"o\">(</span><span class=\"n\">Nat.mul_comm</span> <span class=\"bp\">..</span><span class=\"o\">)</span> <span class=\"bp\">▸</span> <span class=\"n\">h</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 377799324,
        "sender_full_name": "Richard Copley",
        "timestamp": 1690109450
    },
    {
        "content": "<p>At the moment, not really, some people like using the similar <code>rw [show (a + b) * (a + b) = a * a + b * b + 2 * (a * b) by ring]</code> more but that is basically the same. Seeing as you are rewriting a subterm you can't use <code>convert_to</code> which would be a more idiomatic way if you wanted to change the whole goal.</p>",
        "id": 377823885,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1690115773
    },
    {
        "content": "<p>Thank you. That is nice to know.</p>",
        "id": 377824478,
        "sender_full_name": "Richard Copley",
        "timestamp": 1690115938
    },
    {
        "content": "<p>How about <code>rw [add_mul_self_eq]</code></p>",
        "id": 377828335,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1690116891
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"307953\">Ruben Van de Velde</span> <a href=\"#narrow/stream/113489-new-members/topic/Idiom/near/377828335\">said</a>:</p>\n<blockquote>\n<p>How about <code>rw [add_mul_self_eq]</code></p>\n</blockquote>\n<p>Thanks! Followed by <code>rewrite [(by ring : a * a + 2 * a * b + b * b = a * a + b * b + 2 * (a * b)]</code>? Or <code>rewrite [add_rotate, mul_assoc, add_assoc]</code>?</p>",
        "id": 377937734,
        "sender_full_name": "Richard Copley",
        "timestamp": 1690149628
    },
    {
        "content": "<p><code>add_right_comm</code> should be enough</p>",
        "id": 377937791,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1690149658
    },
    {
        "content": "<p>Great! But not quite. Still need the <code>mul_assoc</code>.<br>\nDo you think that's better?</p>",
        "id": 377938002,
        "sender_full_name": "Richard Copley",
        "timestamp": 1690149732
    },
    {
        "content": "<p>Another option is to use <code>calc</code> with <code>ring</code>.</p>",
        "id": 377951825,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1690158344
    }
]