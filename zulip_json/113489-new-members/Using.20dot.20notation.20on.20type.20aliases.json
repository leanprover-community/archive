[
    {
        "content": "<p>I want to define a type <code>Pos</code> storing x and y coordinates. To keep things simple I just use <code>def Pos := Int × Int</code>.</p>\n<p>I can then define  functions like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">Pos.valid</span> <span class=\"o\">(</span><span class=\"n\">pos</span> <span class=\"o\">:</span> <span class=\"n\">Pos</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span> <span class=\"o\">:=</span>\n  <span class=\"n\">pos.1</span> <span class=\"bp\">≥</span> <span class=\"mi\">0</span> <span class=\"bp\">&amp;&amp;</span> <span class=\"n\">pos.2</span> <span class=\"bp\">≥</span> <span class=\"mi\">0</span>\n</code></pre></div>\n<p>But how can I call them?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#eval</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">,</span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">isValid</span>\n<span class=\"k\">#eval</span> <span class=\"o\">((</span><span class=\"mi\">0</span><span class=\"o\">,</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Pos</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">isValid</span>\n</code></pre></div>\n<p>Results in</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">invalid</span> <span class=\"n\">field</span> <span class=\"bp\">'</span><span class=\"n\">isValid'</span><span class=\"o\">,</span> <span class=\"n\">the</span> <span class=\"n\">environment</span> <span class=\"n\">does</span> <span class=\"n\">not</span> <span class=\"n\">contain</span> <span class=\"bp\">'</span><span class=\"n\">Prod.isValid'</span>\n  <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"bp\">?</span><span class=\"n\">m.6156</span> <span class=\"bp\">×</span> <span class=\"bp\">?</span><span class=\"n\">m.6164</span>\n</code></pre></div>\n<p>It works if I introduce a let:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#eval</span> <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">Pos</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">((</span><span class=\"mi\">0</span><span class=\"o\">:</span><span class=\"n\">Int</span><span class=\"o\">),(</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"n\">Int</span><span class=\"o\">))</span>\n<span class=\"n\">p.valid</span>\n</code></pre></div>\n<p>but that's not very convenient.</p>",
        "id": 407097421,
        "sender_full_name": "Philipp",
        "timestamp": 1702235461
    },
    {
        "content": "<p>Also, why would <code>Pos</code> not be inhabited? Am I using type aliases completely wrong?</p>",
        "id": 407098119,
        "sender_full_name": "Philipp",
        "timestamp": 1702236198
    },
    {
        "content": "<p>Yes. Type aliases forget a lot of things about the original type.</p>",
        "id": 407098189,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1702236268
    },
    {
        "content": "<p>For one, if you want to copy over an existing instance, you should use a <code>deriving</code> clause:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">Pos</span> <span class=\"o\">:=</span> <span class=\"n\">Int</span> <span class=\"bp\">×</span> <span class=\"n\">Int</span>\n<span class=\"n\">deriving</span> <span class=\"n\">Inhabited</span>\n</code></pre></div>",
        "id": 407098213,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1702236312
    },
    {
        "content": "<p>If you use <code>abbrev Pos</code> instead of <code>def Pos</code> then all instances and dot notation carry over</p>",
        "id": 407098406,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1702236499
    }
]