[
    {
        "content": "<p>Hi, I'm trying to port some code from Haskell to Lean, to try to do some proofs. I'm having a real hard time with Monads and universe levels. Can anyone help with this issue with universe levels in the step function?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Cell</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Monad</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"o\">(</span><span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">cell</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"bp\">×</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">m</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">×</span> <span class=\"n\">s</span><span class=\"o\">)))</span> <span class=\"bp\">→</span> <span class=\"n\">Cell</span> <span class=\"n\">m</span> <span class=\"n\">a</span> <span class=\"n\">b</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">step</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Monad</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Cell</span> <span class=\"n\">m</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">→</span>  <span class=\"n\">a</span> <span class=\"bp\">→</span>  <span class=\"n\">m</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">×</span> <span class=\"n\">Cell</span> <span class=\"n\">m</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">Cell.cell</span> <span class=\"o\">(</span><span class=\"n\">cellState</span><span class=\"o\">,</span> <span class=\"n\">cellStep</span><span class=\"o\">)),</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n      <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">cellState'</span><span class=\"o\">)</span> <span class=\"bp\">←</span>  <span class=\"n\">cellStep</span> <span class=\"n\">cellState</span> <span class=\"n\">a</span>\n      <span class=\"n\">pure</span> <span class=\"o\">(</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">Cell.cell</span> <span class=\"o\">(</span><span class=\"n\">cellState'</span><span class=\"o\">,</span> <span class=\"n\">cellStep</span><span class=\"o\">))</span>\n</code></pre></div>\n<p>The universe levels in Cell were added to make it typecheck, but perhaps they are not correct.</p>\n<p>The error is on the step function, at m (b × Cell m a b):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">solve</span> <span class=\"kd\">universe</span> <span class=\"n\">constraint</span>\n  <span class=\"n\">u</span> <span class=\"bp\">=?=</span> <span class=\"n\">max</span> <span class=\"bp\">?</span><span class=\"n\">u.35573</span> <span class=\"bp\">?</span><span class=\"n\">u.35574</span>\n<span class=\"n\">while</span> <span class=\"n\">trying</span> <span class=\"n\">to</span> <span class=\"n\">unify</span>\n  <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n<span class=\"k\">with</span>\n  <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">((</span><span class=\"n\">max</span> <span class=\"n\">v</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span>\n</code></pre></div>",
        "id": 344013240,
        "sender_full_name": "Miguel Negrão",
        "timestamp": 1679584915
    },
    {
        "content": "<p>These kinds of types are tricky (also in math). Here's a possible assignment of universe levels that makes your example work out</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Cell</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">[</span><span class=\"n\">Monad</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">cell</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"bp\">×</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">m</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">×</span> <span class=\"n\">s</span><span class=\"o\">)))</span> <span class=\"bp\">→</span> <span class=\"n\">Cell</span> <span class=\"n\">m</span> <span class=\"n\">a</span> <span class=\"n\">b</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">step</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)}</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)}</span> <span class=\"o\">[</span><span class=\"n\">Monad</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Cell</span> <span class=\"n\">m</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">m</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">×</span> <span class=\"n\">Cell</span> <span class=\"n\">m</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">Cell.cell</span> <span class=\"o\">(</span><span class=\"n\">cellState</span><span class=\"o\">,</span> <span class=\"n\">cellStep</span><span class=\"o\">)),</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n      <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">cellState'</span><span class=\"o\">)</span> <span class=\"bp\">←</span>  <span class=\"n\">cellStep</span> <span class=\"n\">cellState</span> <span class=\"n\">a</span>\n      <span class=\"n\">pure</span> <span class=\"o\">(</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">Cell.cell</span> <span class=\"o\">(</span><span class=\"n\">cellState'</span><span class=\"o\">,</span> <span class=\"n\">cellStep</span><span class=\"o\">))</span>\n</code></pre></div>",
        "id": 344017323,
        "sender_full_name": "Reid Barton",
        "timestamp": 1679585641
    },
    {
        "content": "<p>Thanks ! I think I understood the trick with using u+1, and it works great for this function. Yes, it does look a lot harder in Lean than in Haskell...</p>",
        "id": 344022462,
        "sender_full_name": "Miguel Negrão",
        "timestamp": 1679586660
    },
    {
        "content": "<p>The moment I start struggling with universes I just drop them all. Do you need them to verify your Haskell code?</p>",
        "id": 344106980,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1679607618
    },
    {
        "content": "<p>That's in part because your theorems are coming from a system that is hopefully consistent, rather than one that is by design inconsistent</p>",
        "id": 344109116,
        "sender_full_name": "Reid Barton",
        "timestamp": 1679608510
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/Help.20with.20universe.20levels.20and.20Monads/near/344106980\">disse</a>:</p>\n<blockquote>\n<p>The moment I start struggling with universes I just drop them all. Do you need them to verify your Haskell code?</p>\n</blockquote>\n<p>If I drop the universes then there is an error...</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Cell2</span> <span class=\"o\">[</span><span class=\"n\">Monad</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">cell</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"bp\">×</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">m</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">×</span> <span class=\"n\">s</span><span class=\"o\">)))</span> <span class=\"bp\">→</span> <span class=\"n\">Cell</span> <span class=\"n\">m</span> <span class=\"n\">a</span> <span class=\"n\">b</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">application</span> <span class=\"n\">type</span> <span class=\"n\">mismatch</span>\n  <span class=\"n\">Cell</span> <span class=\"n\">m</span> <span class=\"n\">a</span>\n<span class=\"n\">argument</span>\n  <span class=\"n\">a</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"kt\">Type</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"mi\">1</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">u.39413</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">u.39413</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 344225226,
        "sender_full_name": "Miguel Negrão",
        "timestamp": 1679655091
    },
    {
        "content": "<p>And what if you replace <code>Type</code> by <code>Type*</code>?</p>",
        "id": 344225531,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1679655168
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/113489-new-members/topic/Help.20with.20universe.20levels.20and.20Monads/near/344109116\">disse</a>:</p>\n<blockquote>\n<p>That's in part because your theorems are coming from a system that is hopefully consistent, rather than one that is by design inconsistent</p>\n</blockquote>\n<p>Agreed, there is a price to pay for consistency, but then you can prove statements.</p>\n<p>With the solution above it seems I can't make a simple cell which receives nats and outputs nats. The universes again give an error:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">sumC</span> <span class=\"o\">[</span><span class=\"n\">Monad</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Cell</span> <span class=\"n\">m</span> <span class=\"n\">Nat</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span>\n  <span class=\"n\">Cell.cell</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">accum</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">pure</span> <span class=\"o\">(</span><span class=\"n\">accum</span><span class=\"o\">,</span> <span class=\"n\">accum</span> <span class=\"bp\">+</span> <span class=\"n\">a</span><span class=\"o\">)))</span>\n\n<span class=\"n\">application</span> <span class=\"n\">type</span> <span class=\"n\">mismatch</span>\n  <span class=\"n\">Cell</span> <span class=\"n\">m</span> <span class=\"n\">Nat</span>\n<span class=\"n\">argument</span>\n  <span class=\"n\">Nat</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"kt\">Type</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"mi\">1</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">u.38017</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">u.38017</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 344225691,
        "sender_full_name": "Miguel Negrão",
        "timestamp": 1679655214
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/113489-new-members/topic/Help.20with.20universe.20levels.20and.20Monads/near/344225531\">disse</a>:</p>\n<blockquote>\n<p>And what if you replace <code>Type</code> by <code>Type*</code>?</p>\n</blockquote>\n<p>That gives me an error, it thinks it's multiplication:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Cell2</span> <span class=\"o\">[</span><span class=\"n\">Monad</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">cell</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"bp\">×</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">m</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">×</span> <span class=\"n\">s</span><span class=\"o\">)))</span> <span class=\"bp\">→</span> <span class=\"n\">Cell</span> <span class=\"n\">m</span> <span class=\"n\">a</span> <span class=\"n\">b</span>\n\n<span class=\"n\">expected</span> <span class=\"n\">term</span>\n</code></pre></div>",
        "id": 344225996,
        "sender_full_name": "Miguel Negrão",
        "timestamp": 1679655300
    },
    {
        "content": "<p>Ah sorry you're on Lean 4. Replace <code>Type</code> with <code>Type _</code>.</p>",
        "id": 344226389,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1679655397
    },
    {
        "content": "<p>But also know that you truncated the error message right before the juicy bit.</p>",
        "id": 344226442,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1679655419
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/113489-new-members/topic/Help.20with.20universe.20levels.20and.20Monads/near/344226389\">disse</a>:</p>\n<blockquote>\n<p>Ah sorry you're on Lean 4. Replace <code>Type</code> with <code>Type _</code>.</p>\n</blockquote>\n<p>Right, I'm using lean 4.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Cell2</span> <span class=\"o\">[</span><span class=\"n\">Monad</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">cell</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"bp\">×</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">m</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">×</span> <span class=\"n\">s</span><span class=\"o\">)))</span> <span class=\"bp\">→</span> <span class=\"n\">Cell</span> <span class=\"n\">m</span> <span class=\"n\">a</span> <span class=\"n\">b</span>\n\n<span class=\"n\">error</span><span class=\"o\">:</span>\n<span class=\"n\">unexpected</span> <span class=\"n\">constructor</span> <span class=\"n\">resulting</span> <span class=\"n\">type</span>\n  <span class=\"n\">Cell</span> <span class=\"n\">m</span> <span class=\"n\">a</span> <span class=\"n\">b</span>\n</code></pre></div>\n<p>Actually I really only got that output nothing else on the previous example. I'm using vscode, and that is what appears on the info pane.</p>",
        "id": 344227351,
        "sender_full_name": "Miguel Negrão",
        "timestamp": 1679655648
    },
    {
        "content": "<p>Why use <code>inductive</code> instead of <code>structure</code>, by the way? Your inductive type has only one non-recursive constructor.</p>",
        "id": 344227788,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1679655759
    },
    {
        "content": "<p>It will have another constructor (for efficiency) later, but for now I was only testing one constructor.</p>",
        "id": 344228122,
        "sender_full_name": "Miguel Negrão",
        "timestamp": 1679655833
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Cell2</span> <span class=\"o\">[</span><span class=\"n\">Monad</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">cell</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"bp\">×</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">m</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">×</span> <span class=\"n\">s</span><span class=\"o\">)))</span> <span class=\"bp\">→</span> <span class=\"n\">Cell</span> <span class=\"n\">m</span> <span class=\"n\">a</span> <span class=\"n\">b</span>\n  <span class=\"bp\">|</span> <span class=\"n\">arrm</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">m</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">Cell</span> <span class=\"n\">m</span> <span class=\"n\">a</span> <span class=\"n\">b</span>\n</code></pre></div>",
        "id": 344228313,
        "sender_full_name": "Miguel Negrão",
        "timestamp": 1679655875
    },
    {
        "content": "<p>What I'm doing is somewhat related to <a href=\"https://github.com/leanprover-community/mathlib4/blob/601c3f93155396d17d94fb29888dc3c9bcfd4af3/Mathlib/CategoryTheory/Category/KleisliCat.lean#L46-L50\">Kleisli categories</a>. One constructor is a pure kleisli category, the other one is slightly altered with explicit state for livecoding in Haskell. The cell constructor is equivalent to product of state s with kleisli arrow <code>a -&gt; StateT s m b</code>.</p>",
        "id": 344228949,
        "sender_full_name": "Miguel Negrão",
        "timestamp": 1679656038
    },
    {
        "content": "<p>The Haskell code is this: <a href=\"https://github.com/turion/essence-of-live-coding\">https://github.com/turion/essence-of-live-coding</a></p>",
        "id": 344229458,
        "sender_full_name": "Miguel Negrão",
        "timestamp": 1679656177
    },
    {
        "content": "<p>One issue is you now have Cell and Cell2, and that m is now implicit I guess</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Cell2</span> <span class=\"o\">[</span><span class=\"n\">Monad</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">cell</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"bp\">×</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">m</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">×</span> <span class=\"n\">s</span><span class=\"o\">)))</span> <span class=\"bp\">→</span> <span class=\"n\">Cell2</span> <span class=\"n\">a</span> <span class=\"n\">b</span>\n</code></pre></div>",
        "id": 344239317,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1679658586
    },
    {
        "content": "<p>Ah, yes, thanks.</p>\n<p>So correcting that, Cell works, but then I get a different problem with any use of Cell:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Cell</span> <span class=\"o\">[</span><span class=\"n\">Monad</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">cell</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"bp\">×</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">m</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">×</span> <span class=\"n\">s</span><span class=\"o\">)))</span> <span class=\"bp\">→</span> <span class=\"n\">Cell</span> <span class=\"n\">m</span> <span class=\"n\">a</span> <span class=\"n\">b</span>\n  <span class=\"bp\">|</span> <span class=\"n\">arrm</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">m</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">Cell</span> <span class=\"n\">m</span> <span class=\"n\">a</span> <span class=\"n\">b</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">sumC</span> <span class=\"o\">[</span><span class=\"n\">Monad</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}:</span> <span class=\"n\">Cell</span> <span class=\"n\">m</span> <span class=\"n\">Nat</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span>\n  <span class=\"n\">Cell.cell</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">accum</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">pure</span> <span class=\"o\">(</span><span class=\"n\">accum</span><span class=\"o\">,</span> <span class=\"n\">accum</span> <span class=\"bp\">+</span> <span class=\"n\">a</span><span class=\"o\">)))</span>\n</code></pre></div>\n<p>Problem is in Cell m Nat Nat</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Main.lean</span><span class=\"o\">:</span><span class=\"mi\">194</span><span class=\"o\">:</span><span class=\"mi\">50</span>\n<span class=\"n\">Expected</span> <span class=\"n\">type</span>\n<span class=\"n\">m</span><span class=\"bp\">✝</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">?</span><span class=\"n\">u.36143</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"bp\">?</span><span class=\"n\">u.36142</span>\n<span class=\"n\">inst</span><span class=\"bp\">✝</span><span class=\"o\">:</span> <span class=\"n\">Monad</span> <span class=\"n\">m</span><span class=\"bp\">✝</span>\n<span class=\"n\">m</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"bp\">?</span><span class=\"n\">u.36150</span>\n<span class=\"bp\">⊢</span> <span class=\"kt\">Type</span>\n<span class=\"n\">Messages</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">)</span>\n<span class=\"n\">Main.lean</span><span class=\"o\">:</span><span class=\"mi\">194</span><span class=\"o\">:</span><span class=\"mi\">43</span>\n\n<span class=\"n\">typeclass</span> <span class=\"kd\">instance</span> <span class=\"n\">problem</span> <span class=\"n\">is</span> <span class=\"n\">stuck</span><span class=\"o\">,</span> <span class=\"n\">it</span> <span class=\"n\">is</span> <span class=\"n\">often</span> <span class=\"n\">due</span> <span class=\"n\">to</span> <span class=\"n\">metavariables</span>\n  <span class=\"n\">Monad</span> <span class=\"bp\">?</span><span class=\"n\">m.36159</span>\n</code></pre></div>",
        "id": 344245867,
        "sender_full_name": "Miguel Negrão",
        "timestamp": 1679660258
    },
    {
        "content": "<p>The argument <code>m</code> needs to be before <code>[Moand m]</code> if you look carefully at the error message you'll see you have two m's now and only the first one is a monad</p>",
        "id": 344248817,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1679660986
    },
    {
        "content": "<p>Ah, got it, so the type class constraint should come after the arguments that it refers to (sorry for newbiness... <span aria-label=\"smiling face\" class=\"emoji emoji-263a\" role=\"img\" title=\"smiling face\">:smiling_face:</span> ). This gets me a bit further, sumC now works. Then I get stuck in the code for evaluating a cell:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Cell</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Monad</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">cell</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"bp\">×</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">m</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">×</span> <span class=\"n\">s</span><span class=\"o\">)))</span> <span class=\"bp\">→</span> <span class=\"n\">Cell</span> <span class=\"n\">m</span> <span class=\"n\">a</span> <span class=\"n\">b</span>\n  <span class=\"bp\">|</span> <span class=\"n\">arrm</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">m</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">Cell</span> <span class=\"n\">m</span> <span class=\"n\">a</span> <span class=\"n\">b</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">sumC</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Monad</span> <span class=\"n\">m</span><span class=\"o\">]:</span> <span class=\"n\">Cell</span> <span class=\"n\">m</span> <span class=\"n\">Nat</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span>\n  <span class=\"n\">Cell.cell</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">accum</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">pure</span> <span class=\"o\">(</span><span class=\"n\">accum</span><span class=\"o\">,</span> <span class=\"n\">accum</span> <span class=\"bp\">+</span> <span class=\"n\">a</span><span class=\"o\">)))</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">step</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Monad</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Cell</span> <span class=\"n\">m</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">m</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">×</span> <span class=\"n\">Cell</span> <span class=\"n\">m</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Cell.cell</span> <span class=\"o\">(</span><span class=\"n\">cellState</span><span class=\"o\">,</span> <span class=\"n\">cellStep</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n      <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">cellState'</span><span class=\"o\">)</span> <span class=\"bp\">←</span>  <span class=\"n\">cellStep</span> <span class=\"n\">cellState</span> <span class=\"n\">a</span>\n      <span class=\"n\">pure</span> <span class=\"o\">(</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">Cell.cell</span> <span class=\"o\">(</span><span class=\"n\">cellState'</span><span class=\"o\">,</span> <span class=\"n\">cellStep</span><span class=\"o\">))</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Cell.arrm</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">,</span> <span class=\"n\">cell</span><span class=\"o\">))</span> <span class=\"bp\">&lt;$&gt;</span> <span class=\"n\">f</span> <span class=\"n\">a</span>\n</code></pre></div>\n<p>The error is in the type of <code>step</code></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Main.lean</span><span class=\"o\">:</span><span class=\"mi\">197</span><span class=\"o\">:</span><span class=\"mi\">0</span>\n<span class=\"n\">Messages</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"o\">)</span>\n<span class=\"n\">Main.lean</span><span class=\"o\">:</span><span class=\"mi\">197</span><span class=\"o\">:</span><span class=\"mi\">0</span>\n\n<span class=\"n\">stuck</span> <span class=\"n\">at</span> <span class=\"n\">solving</span> <span class=\"kd\">universe</span> <span class=\"n\">constraint</span>\n  <span class=\"n\">max</span> <span class=\"bp\">?</span><span class=\"n\">u.36246</span> <span class=\"bp\">?</span><span class=\"n\">u.36247</span> <span class=\"bp\">=?=</span> <span class=\"n\">max</span> <span class=\"bp\">?</span><span class=\"n\">u.36228</span> <span class=\"bp\">?</span><span class=\"n\">u.36229</span>\n<span class=\"n\">while</span> <span class=\"n\">trying</span> <span class=\"n\">to</span> <span class=\"n\">unify</span>\n  <span class=\"o\">(</span><span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"bp\">?</span><span class=\"n\">u.36247</span> <span class=\"bp\">?</span><span class=\"n\">u.36246</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"bp\">?</span><span class=\"n\">u.36215</span><span class=\"o\">)</span> <span class=\"bp\">→</span>\n    <span class=\"kt\">Type</span> <span class=\"bp\">?</span><span class=\"n\">u.36215</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">u.36215</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">u.36246</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">u.36247</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span>\n<span class=\"k\">with</span>\n  <span class=\"o\">(</span><span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"bp\">?</span><span class=\"n\">u.36228</span> <span class=\"bp\">?</span><span class=\"n\">u.36229</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"bp\">?</span><span class=\"n\">u.36215</span><span class=\"o\">)</span> <span class=\"bp\">→</span>\n    <span class=\"kt\">Type</span> <span class=\"bp\">?</span><span class=\"n\">u.36215</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">u.36215</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">u.36228</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">u.36229</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span>\n\n<span class=\"n\">Main.lean</span><span class=\"o\">:</span><span class=\"mi\">197</span><span class=\"o\">:</span><span class=\"mi\">0</span>\n\n<span class=\"n\">stuck</span> <span class=\"n\">at</span> <span class=\"n\">solving</span> <span class=\"kd\">universe</span> <span class=\"n\">constraint</span>\n  <span class=\"n\">max</span>\n  <span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">u.36228</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">u.36229</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=?=</span> <span class=\"n\">max</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">u.36215</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">u.36226</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">u.36228</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">u.36229</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">u.36246</span><span class=\"bp\">+</span><span class=\"mi\">2</span><span class=\"o\">)</span>\n<span class=\"n\">while</span> <span class=\"n\">trying</span> <span class=\"n\">to</span> <span class=\"n\">unify</span>\n  <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"bp\">?</span><span class=\"n\">u.36228</span> <span class=\"bp\">?</span><span class=\"n\">u.36229</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">((</span><span class=\"n\">max</span> <span class=\"bp\">?</span><span class=\"n\">u.36228</span> <span class=\"bp\">?</span><span class=\"n\">u.36229</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n<span class=\"k\">with</span>\n  <span class=\"kt\">Type</span>\n    <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"bp\">?</span><span class=\"n\">u.36228</span> <span class=\"bp\">?</span><span class=\"n\">u.36229</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"bp\">?</span><span class=\"n\">u.36226</span> <span class=\"bp\">?</span><span class=\"n\">u.36215</span><span class=\"o\">)</span>\n        <span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">u.36246</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"o\">((</span><span class=\"n\">max</span> <span class=\"bp\">?</span><span class=\"n\">u.36228</span> <span class=\"bp\">?</span><span class=\"n\">u.36229</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">((</span><span class=\"n\">max</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"bp\">?</span><span class=\"n\">u.36226</span> <span class=\"bp\">?</span><span class=\"n\">u.36215</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">u.36246</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span>\n</code></pre></div>",
        "id": 344261696,
        "sender_full_name": "Miguel Negrão",
        "timestamp": 1679663870
    },
    {
        "content": "<p>Did you try Reid's version again? with explicit universes</p>",
        "id": 344277207,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1679667393
    },
    {
        "content": "<p>With that version, step works, but not sumC, with the following error:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Cell</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">[</span><span class=\"n\">Monad</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">cell</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"bp\">×</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">m</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">×</span> <span class=\"n\">s</span><span class=\"o\">)))</span> <span class=\"bp\">→</span> <span class=\"n\">Cell</span> <span class=\"n\">m</span> <span class=\"n\">a</span> <span class=\"n\">b</span>\n  <span class=\"bp\">|</span> <span class=\"n\">arrm</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">m</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">Cell</span> <span class=\"n\">m</span> <span class=\"n\">a</span> <span class=\"n\">b</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">sumC</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Monad</span> <span class=\"n\">m</span><span class=\"o\">]:</span> <span class=\"n\">Cell</span> <span class=\"n\">m</span> <span class=\"n\">Nat</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span>\n  <span class=\"n\">Cell.cell</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">accum</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">pure</span> <span class=\"o\">(</span><span class=\"n\">accum</span><span class=\"o\">,</span> <span class=\"n\">accum</span> <span class=\"bp\">+</span> <span class=\"n\">a</span><span class=\"o\">)))</span>\n\n<span class=\"n\">Main.lean</span><span class=\"o\">:</span><span class=\"mi\">194</span><span class=\"o\">:</span><span class=\"mi\">50</span>\n<span class=\"n\">Expected</span> <span class=\"n\">type</span>\n<span class=\"n\">m</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"mi\">1</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"mi\">1</span>\n<span class=\"n\">inst</span><span class=\"bp\">✝</span><span class=\"o\">:</span> <span class=\"n\">Monad</span> <span class=\"n\">m</span>\n<span class=\"bp\">⊢</span> <span class=\"kt\">Type</span> <span class=\"mi\">1</span>\n<span class=\"n\">Messages</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">)</span>\n<span class=\"n\">Main.lean</span><span class=\"o\">:</span><span class=\"mi\">194</span><span class=\"o\">:</span><span class=\"mi\">49</span>\n\n<span class=\"n\">application</span> <span class=\"n\">type</span> <span class=\"n\">mismatch</span>\n  <span class=\"n\">Cell</span> <span class=\"n\">m</span> <span class=\"n\">Nat</span>\n<span class=\"n\">argument</span>\n  <span class=\"n\">Nat</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"kt\">Type</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"mi\">1</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">u.35827</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">u.35827</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 344287971,
        "sender_full_name": "Miguel Negrão",
        "timestamp": 1679669568
    },
    {
        "content": "<p>The problem here is that <code>Nat</code> (along with most simple datatypes) is explicitly declared as <code>Type 0</code> so it won't fit into places where you need a <code>Type 1</code> or <code>Type (u+1)</code>.  You can use <code>ULift</code> to move types between universes, in this case we pop <code>Nat</code> up into universe <code>u+1</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Cell</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">[</span><span class=\"n\">Monad</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">cell</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"bp\">×</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">m</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">×</span> <span class=\"n\">s</span><span class=\"o\">)))</span> <span class=\"bp\">→</span> <span class=\"n\">Cell</span> <span class=\"n\">m</span> <span class=\"n\">a</span> <span class=\"n\">b</span>\n  <span class=\"bp\">|</span> <span class=\"n\">arrm</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">m</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">Cell</span> <span class=\"n\">m</span> <span class=\"n\">a</span> <span class=\"n\">b</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">sumC</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Monad</span> <span class=\"n\">m</span><span class=\"o\">]:</span> <span class=\"n\">Cell</span> <span class=\"n\">m</span> <span class=\"o\">(</span><span class=\"n\">ULift</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ULift</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">Cell.cell</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">accum</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">pure</span> <span class=\"o\">(</span><span class=\"n\">ULift.up</span> <span class=\"n\">accum</span><span class=\"o\">,</span> <span class=\"n\">accum</span> <span class=\"bp\">+</span> <span class=\"n\">ULift.down</span> <span class=\"n\">a</span><span class=\"o\">)))</span>\n</code></pre></div>\n<p>Note that in <code>sumC</code> you need to use <code>ULift.down</code> to drop back down to universe 0 and pull out the original Nat.<br>\nThis works, but feels kind of clunky. You could also make a custom version of <code>Nat</code> that is of <code>Type u</code>, or maybe there is one already written up somewhere?</p>",
        "id": 344316449,
        "sender_full_name": "Gary Haussmann",
        "timestamp": 1679675635
    },
    {
        "content": "<p>Also if I'm at the point where I'm pulling out <code>ULift</code> I usually go back and see if I can rewrite the relevant data/functions to avoid all this universe manipulation. However if you need <code>Cell</code> and <code>step</code> to be the way they are then you're probably stuck with <code>ULift</code></p>",
        "id": 344325210,
        "sender_full_name": "Gary Haussmann",
        "timestamp": 1679677798
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"477512\">@Gary Haussmann</span>  thank you much ! With ULift indeed I can get it to compile. At the moment I don't know enough about universes to see how to write Cell and step any other way (while compiling), so I guess I'll stick with this solution. I'm having some issues with ULift though. It seems I can't use it with <code>&lt;$&gt;</code> (also called fmap or map perhaps ? ).</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Cell</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">[</span><span class=\"n\">Monad</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">cell</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"bp\">×</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">m</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">×</span> <span class=\"n\">s</span><span class=\"o\">)))</span> <span class=\"bp\">→</span> <span class=\"n\">Cell</span> <span class=\"n\">m</span> <span class=\"n\">a</span> <span class=\"n\">b</span>\n  <span class=\"bp\">|</span> <span class=\"n\">arrm</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">m</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">Cell</span> <span class=\"n\">m</span> <span class=\"n\">a</span> <span class=\"n\">b</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">sumC</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Monad</span> <span class=\"n\">m</span><span class=\"o\">]:</span> <span class=\"n\">Cell</span> <span class=\"n\">m</span> <span class=\"o\">(</span><span class=\"n\">ULift</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ULift</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">Cell.cell</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">accum</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">pure</span> <span class=\"o\">(</span><span class=\"n\">ULift.up</span> <span class=\"n\">accum</span><span class=\"o\">,</span> <span class=\"n\">accum</span> <span class=\"bp\">+</span> <span class=\"n\">ULift.down</span> <span class=\"n\">a</span><span class=\"o\">)))</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">step</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Monad</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Cell</span> <span class=\"n\">m</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">m</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">×</span> <span class=\"n\">Cell</span> <span class=\"n\">m</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Cell.cell</span> <span class=\"o\">(</span><span class=\"n\">cellState</span><span class=\"o\">,</span> <span class=\"n\">cellStep</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n      <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">cellState'</span><span class=\"o\">)</span> <span class=\"bp\">←</span>  <span class=\"n\">cellStep</span> <span class=\"n\">cellState</span> <span class=\"n\">a</span>\n      <span class=\"n\">pure</span> <span class=\"o\">(</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">Cell.cell</span> <span class=\"o\">(</span><span class=\"n\">cellState'</span><span class=\"o\">,</span> <span class=\"n\">cellStep</span><span class=\"o\">))</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Cell.arrm</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">,</span> <span class=\"n\">Cell.arrm</span> <span class=\"n\">f</span><span class=\"o\">))</span> <span class=\"bp\">&lt;$&gt;</span> <span class=\"n\">f</span> <span class=\"n\">a</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">steps</span>  <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Monad</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Cell</span> <span class=\"n\">m</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">List</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">m</span> <span class=\"o\">(</span><span class=\"n\">List</span> <span class=\"n\">b</span> <span class=\"bp\">×</span> <span class=\"n\">Cell</span> <span class=\"n\">m</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">cell</span><span class=\"o\">,</span> <span class=\"o\">[]</span>        <span class=\"bp\">=&gt;</span> <span class=\"n\">pure</span> <span class=\"o\">([],</span> <span class=\"n\">cell</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">cell</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">::</span> <span class=\"n\">as</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">cell'</span><span class=\"o\">)</span> <span class=\"bp\">←</span>  <span class=\"n\">step</span> <span class=\"n\">cell</span> <span class=\"n\">a</span>\n    <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">bs</span><span class=\"o\">,</span> <span class=\"n\">cell''</span><span class=\"o\">)</span> <span class=\"bp\">←</span>  <span class=\"n\">steps</span> <span class=\"n\">cell'</span> <span class=\"n\">as</span>\n    <span class=\"n\">pure</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">::</span> <span class=\"n\">bs</span><span class=\"o\">,</span> <span class=\"n\">cell''</span><span class=\"o\">)</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">Prod.fst</span> <span class=\"bp\">$</span> <span class=\"n\">Id.run</span> <span class=\"bp\">$</span> <span class=\"n\">step</span> <span class=\"n\">sumC</span> <span class=\"o\">(</span><span class=\"n\">ULift.up</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">:</span><span class=\"n\">Nat</span><span class=\"o\">))</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">Prod.fst</span> <span class=\"bp\">$</span> <span class=\"n\">Id.run</span> <span class=\"bp\">$</span> <span class=\"n\">steps</span> <span class=\"n\">sumC</span> <span class=\"o\">[</span><span class=\"n\">ULift.up</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"n\">Nat</span><span class=\"o\">),</span> <span class=\"n\">ULift.up</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"n\">Nat</span><span class=\"o\">),</span> <span class=\"n\">ULift.up</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"n\">Nat</span><span class=\"o\">)]</span>\n<span class=\"c1\">-- evaluates to:</span>\n<span class=\"c1\">-- [ULift.up 0, ULift.up 1, ULift.up 2]</span>\n\n<span class=\"c1\">-- Erro here:</span>\n<span class=\"k\">#eval</span> <span class=\"n\">Id.run</span> <span class=\"n\">steps</span> <span class=\"n\">sumC</span> <span class=\"o\">(</span><span class=\"n\">ULift.up</span> <span class=\"bp\">&lt;$&gt;</span> <span class=\"o\">([</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Nat</span><span class=\"o\">))</span>\n\n<span class=\"n\">Main.lean</span><span class=\"o\">:</span><span class=\"mi\">217</span><span class=\"o\">:</span><span class=\"mi\">61</span>\n<span class=\"n\">Expected</span> <span class=\"n\">type</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">ULift</span> <span class=\"n\">Nat</span><span class=\"o\">)</span>\n<span class=\"n\">Messages</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">)</span>\n<span class=\"n\">Main.lean</span><span class=\"o\">:</span><span class=\"mi\">217</span><span class=\"o\">:</span><span class=\"mi\">38</span>\n<span class=\"n\">application</span> <span class=\"n\">type</span> <span class=\"n\">mismatch</span>\n  <span class=\"bp\">?</span><span class=\"n\">m.45690</span> <span class=\"bp\">&lt;$&gt;</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">]</span>\n<span class=\"n\">argument</span>\n  <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">]</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">List</span> <span class=\"n\">Nat</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"n\">List</span> <span class=\"bp\">?</span><span class=\"n\">m.45650</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"mi\">1</span>\n<span class=\"bp\">`</span> <span class=\"bp\">``</span>\n</code></pre></div>",
        "id": 344331643,
        "sender_full_name": "Miguel Negrão",
        "timestamp": 1679679437
    },
    {
        "content": "<p>In any case, this already allows me to go on to try to prove some theorems. Thanks so much to everyone that helped !</p>",
        "id": 344332825,
        "sender_full_name": "Miguel Negrão",
        "timestamp": 1679679716
    }
]