[
    {
        "content": "<p>Does anyone know how to define a family of functions f_alpha and the supremum of this family of functions?</p>",
        "id": 387595723,
        "sender_full_name": "tsuki  hao",
        "timestamp": 1693196624
    },
    {
        "content": "<p>Tip: You can use double dollar <code>$$f_\\alpha$$</code> for LaTeX: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>f</mi><mi>α</mi></msub></mrow><annotation encoding=\"application/x-tex\">f_\\alpha</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:-0.1076em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.0037em;\">α</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>.</p>\n<p>A family of funcions <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">{</mo><msub><mi>f</mi><mi>r</mi></msub><msub><mo stretchy=\"false\">}</mo><mi>r</mi></msub></mrow><annotation encoding=\"application/x-tex\">\\{f_r\\}_r</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">{</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:-0.1076em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.02778em;\">r</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\"><span class=\"mclose\">}</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.02778em;\">r</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> is simply a function <code>f : β→γ→γ'</code> with two arguments, one for the parameter <code>r : β</code> and one for the domain of each <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>f</mi><mi>r</mi></msub></mrow><annotation encoding=\"application/x-tex\">f_r</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:-0.1076em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.02778em;\">r</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>=<code>f r</code> (if those domains do not depend on <code>r</code>, otherwise you need a dependent product).</p>\n<p>For the case of <code>γ</code> and <code>γ'</code> being the reals, the pointwise sup of the family is written <code>fun x =&gt; ⨆ (r : β), f r x</code> (or <code>λ x ↦ ⨆ (r : β), f r x</code>).</p>",
        "id": 389048362,
        "sender_full_name": "Pedro Sánchez Terraf",
        "timestamp": 1693860479
    },
    {
        "content": "<p>I think <code>⨆ (r : β), f r</code> also works, and the pointwise-ness is free (see <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=iSup_apply#doc\">docs#iSup_apply</a>)?</p>",
        "id": 389048971,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1693860969
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113489-new-members/topic/a.20list.20of.20functions/near/389048971\">said</a>:</p>\n<blockquote>\n<p>I think <code>⨆ (r : β), f r</code> also works, and the pointwise-ness is free (see <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=iSup_apply#doc\">docs#iSup_apply</a>)?</p>\n</blockquote>\n<p>Though you fell in the same trap as I did, the reals are not \"complete\" <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span></p>",
        "id": 389050580,
        "sender_full_name": "Pedro Sánchez Terraf",
        "timestamp": 1693862173
    },
    {
        "content": "<p>Does that matter here?</p>",
        "id": 389050699,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1693862209
    },
    {
        "content": "<p>Your code and my code are the same, and I think its fair to assume that the pointwise sup exists given it was asked for!</p>",
        "id": 389050810,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1693862277
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113489-new-members/topic/a.20list.20of.20functions/near/389050699\">said</a>:</p>\n<blockquote>\n<p>Does that matter here?</p>\n</blockquote>\n<p>I did for me, in the meantime I was writing an example to check everything worked fine, and that thing surprised me. I also wasn't sure everything was entirely analogous between Complete and ConditionallyComplete</p>",
        "id": 389050944,
        "sender_full_name": "Pedro Sánchez Terraf",
        "timestamp": 1693862344
    },
    {
        "content": "<p>(concerning notation and the like, I mean)</p>",
        "id": 389050986,
        "sender_full_name": "Pedro Sánchez Terraf",
        "timestamp": 1693862375
    }
]