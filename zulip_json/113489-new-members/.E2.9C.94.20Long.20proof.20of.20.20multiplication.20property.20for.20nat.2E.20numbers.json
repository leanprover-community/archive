[
    {
        "content": "<p>I finished writing the proof for one of the boss levels of the natural number game today, and its pretty big, coming in at just over a hundred lines of code. I'm not sure if there are other proofs out there that are significantly shorter, so I'd love to know if anyone here has seen one of those. <br>\n(The property that is proven in this level is the left cancellation property of multiplication for natural numbers.)</p>",
        "id": 346029125,
        "sender_full_name": "Rick de Wolf",
        "timestamp": 1680287179
    },
    {
        "content": "<p>I did this proof ages ago so it's probably not the best, but it was cached in my browser anyway!</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">induction</span> <span class=\"n\">c</span> <span class=\"k\">with</span> <span class=\"n\">d</span> <span class=\"n\">hd</span> <span class=\"n\">generalizing</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">mul_zero</span><span class=\"o\">,</span>\n<span class=\"n\">cases</span> <span class=\"n\">a</span> <span class=\"k\">with</span> <span class=\"n\">a'</span><span class=\"o\">,</span>\n<span class=\"n\">contradiction</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">succ_mul</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">add_comm</span><span class=\"o\">,</span>\n<span class=\"n\">apply</span> <span class=\"n\">add_right_eq_zero</span><span class=\"o\">,</span>\n\n<span class=\"n\">cases</span> <span class=\"n\">b</span> <span class=\"k\">with</span> <span class=\"n\">b'</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">mul_zero</span><span class=\"o\">,</span>\n<span class=\"k\">have</span> <span class=\"n\">hd</span> <span class=\"o\">:</span> <span class=\"n\">succ</span> <span class=\"n\">d</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">apply</span> <span class=\"n\">succ_ne_zero</span><span class=\"o\">,</span>\n<span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"n\">symmetry</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">mul_eq_zero_iff</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"n\">cases</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"n\">contradiction</span><span class=\"o\">,</span>\n<span class=\"n\">contradiction</span><span class=\"o\">,</span>\n\n<span class=\"n\">rw</span> <span class=\"n\">mul_succ</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">mul_succ</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">add_right_cancel_iff</span><span class=\"o\">,</span>\n<span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">b'</span> <span class=\"bp\">=</span> <span class=\"n\">d</span> <span class=\"o\">:=</span> <span class=\"n\">hd</span> <span class=\"n\">b'</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">succ_eq_succ_iff</span><span class=\"o\">,</span>\n<span class=\"n\">exact</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n</code></pre></div>",
        "id": 346042899,
        "sender_full_name": "Sky Wilshaw",
        "timestamp": 1680291604
    },
    {
        "content": "<p>Here's a 17-line proof that I tried to avoid golfing</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">induction</span> <span class=\"n\">c</span> <span class=\"k\">with</span> <span class=\"n\">n</span> <span class=\"n\">hn</span> <span class=\"n\">generalizing</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n<span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mul_zero</span><span class=\"o\">,</span> <span class=\"n\">mul_eq_zero_iff</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"n\">ha'</span> <span class=\"n\">hb</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">exfalso</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">ha</span> <span class=\"n\">ha'</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">hb</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n<span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mul_zero</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">exfalso</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">mul_pos</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">ha</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">succ_ne_zero</span> <span class=\"n\">n</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">h.symm</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mul_succ</span><span class=\"o\">,</span> <span class=\"n\">mul_succ</span><span class=\"o\">,</span> <span class=\"n\">add_right_cancel_iff</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">hn</span> <span class=\"n\">b</span> <span class=\"n\">h</span><span class=\"o\">],</span>\n    <span class=\"n\">refl</span> <span class=\"o\">}</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>There are surely other proofs that are much shorter (mine was until I expanded it).</p>",
        "id": 346042920,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1680291610
    },
    {
        "content": "<p>for example (this is mainly just folding much of what I did above into term mode):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">mynat</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n  <span class=\"k\">from</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">hx</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"o\">((</span><span class=\"n\">mul_eq_zero_iff</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mp</span> <span class=\"n\">h</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">elim</span> <span class=\"o\">(</span><span class=\"n\">false.elim</span> <span class=\"bp\">∘</span> <span class=\"n\">hx</span><span class=\"o\">)</span> <span class=\"n\">id</span><span class=\"o\">,</span>\n<span class=\"n\">induction</span> <span class=\"n\">c</span> <span class=\"k\">with</span> <span class=\"n\">n</span> <span class=\"n\">hn</span> <span class=\"n\">generalizing</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n<span class=\"n\">exact</span> <span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">this</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">ha</span> <span class=\"o\">(</span><span class=\"n\">mul_zero</span> <span class=\"n\">a</span> <span class=\"bp\">▸</span> <span class=\"n\">h</span><span class=\"o\">),</span>\n<span class=\"n\">exact</span> <span class=\"n\">mynat.cases_on</span> <span class=\"n\">b</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">this</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">ha</span> <span class=\"o\">(</span><span class=\"n\">mul_zero</span> <span class=\"n\">a</span> <span class=\"bp\">▸</span> <span class=\"n\">h.symm</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">b</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">congr_arg</span> <span class=\"n\">succ</span> <span class=\"o\">(</span><span class=\"n\">hn</span> <span class=\"n\">b</span> <span class=\"o\">(</span><span class=\"n\">add_right_cancel</span> <span class=\"n\">_</span> <span class=\"n\">a</span> <span class=\"n\">_</span> <span class=\"n\">h</span><span class=\"o\">))),</span>\n</code></pre></div>",
        "id": 346044205,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1680292082
    },
    {
        "content": "<p>I hope you'll agree that shorter doesn't necessarily mean better. This is far less readable.</p>",
        "id": 346049976,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1680294144
    },
    {
        "content": "<p>Thanks to you both! Turns out my editor was displaying the wrong line numbers, so my proof was  only 60 lines, but yours are still an improvement. Some of the syntax and mechanisms you use aren't immediately clear to me, but I'll probably learn about those things soon enough.<br>\nI definitely agree on the readability issue - code golfing is fun but usually not the smartest thing to do if your proofs need to be read again sometime :P</p>",
        "id": 346065940,
        "sender_full_name": "Rick de Wolf",
        "timestamp": 1680300952
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"603023\">Rick de Wolf</span> has marked this topic as resolved.</p>",
        "id": 346065957,
        "sender_full_name": "Notification Bot",
        "timestamp": 1680300962
    }
]