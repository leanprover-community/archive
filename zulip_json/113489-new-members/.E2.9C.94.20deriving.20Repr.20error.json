[
    {
        "content": "<p>Hi! I'm a new lean user, my first post here :) I'm reading and working through \"Functional Programming in Lean\", currently on the \"Structures\" chapter <a href=\"https://lean-lang.org/functional_programming_in_lean/getting-to-know/structures.html\">https://lean-lang.org/functional_programming_in_lean/getting-to-know/structures.html</a><br>\nI'm trying this solution for the second exercise but getting an error that I don't understand:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>   <span class=\"kd\">structure</span> <span class=\"n\">RectangularPrism</span> <span class=\"n\">where</span>\n      <span class=\"n\">height</span><span class=\"o\">:</span> <span class=\"n\">Float</span>\n      <span class=\"n\">width</span><span class=\"o\">:</span> <span class=\"n\">Float</span>\n      <span class=\"n\">depth</span><span class=\"o\">:</span> <span class=\"n\">float</span>\n      <span class=\"n\">deriving</span> <span class=\"n\">Repr</span>\n</code></pre></div>\n<p>Error (in VSCode 'Lean infoview' tab):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">typeclass</span> <span class=\"kd\">instance</span> <span class=\"n\">problem</span> <span class=\"n\">is</span> <span class=\"n\">stuck</span><span class=\"o\">,</span> <span class=\"n\">it</span> <span class=\"n\">is</span> <span class=\"n\">often</span> <span class=\"n\">due</span> <span class=\"n\">to</span> <span class=\"n\">metavariables</span>\n  <span class=\"n\">Repr</span> <span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">m.53213</span> <span class=\"n\">x</span><span class=\"bp\">✝</span> <span class=\"n\">prec</span><span class=\"bp\">✝</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>Do you know what may be causing the error and how to get rid of it?</p>\n<p>Another question - does lean4 have any formatting standard or tool, something similar to Go's gofmt or Rust's rustfmt?  Thanks!</p>",
        "id": 399946699,
        "sender_full_name": "Dmitry S.",
        "timestamp": 1698934569
    },
    {
        "content": "<p>Never mind - figured it out, a typo - the low-case \"float\" instead of \"Float\" after <code>depth: </code> <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span> </p>\n<p>For the standard formatting, I find <a href=\"https://github.com/leanprover/lean4/issues/369\">https://github.com/leanprover/lean4/issues/369</a> - still not clear if there is any tool which I could (or should) use to format the lean code \"the standard way\".</p>",
        "id": 399948098,
        "sender_full_name": "Dmitry S.",
        "timestamp": 1698934899
    },
    {
        "content": "<p>regarding the \"fat finger\" error above  - I wonder if lean's compiler error message could be more helpful - for example \"the field 'depth' has type \"float\" which doesn't exist - did you mean 'Float'?\"</p>",
        "id": 399948844,
        "sender_full_name": "Dmitry S.",
        "timestamp": 1698935083
    },
    {
        "content": "<p>There is very preliminary work on formatting tools, but nothing usable. The fact that Lean syntax is so crazily extensible makes it a lot more challenging than what you expect.</p>",
        "id": 399949023,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1698935134
    },
    {
        "content": "<p>Does writing <code>set_option autoImplicit false</code> improve the error message?</p>",
        "id": 399949075,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1698935150
    },
    {
        "content": "<p>And yes, this error message is awful. Let me ping <span class=\"user-mention\" data-user-id=\"354934\">@David Thrane Christiansen</span> who is thinking about improving error messages.</p>",
        "id": 399949199,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1698935175
    },
    {
        "content": "<p>Is there a way to pipe <code>autoImplicit is set to true</code> into every error message?</p>",
        "id": 399949317,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1698935215
    },
    {
        "content": "<p>thanks! <br>\nShould <code>set_option autoImplicit false</code> go on the top of the file?</p>",
        "id": 399949422,
        "sender_full_name": "Dmitry S.",
        "timestamp": 1698935242
    },
    {
        "content": "<p>Yes, from where it is written onwards, autoImplicits are turned off</p>",
        "id": 399949540,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1698935273
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306577\">Matthew Ballard</span> <a href=\"#narrow/stream/113489-new-members/topic/deriving.20Repr.20error/near/399949317\">said</a>:</p>\n<blockquote>\n<p>Is there a way to pipe <code>autoImplicit is set to true</code> into every error message?</p>\n</blockquote>\n<p>This would really be a temporary workaround until we get nicer error messages, but in the current state it may be a good idea.</p>",
        "id": 399949655,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1698935296
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/8hhn9s5ksIvdu0rdePkvCSN7/Screenshot-2023-11-02-at-15.28.50.png\">Screenshot-2023-11-02-at-15.28.50.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/8hhn9s5ksIvdu0rdePkvCSN7/Screenshot-2023-11-02-at-15.28.50.png\" title=\"Screenshot-2023-11-02-at-15.28.50.png\"><img src=\"/user_uploads/3121/8hhn9s5ksIvdu0rdePkvCSN7/Screenshot-2023-11-02-at-15.28.50.png\"></a></div><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Messages</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"o\">)</span>\n<span class=\"n\">Basic.lean</span><span class=\"o\">:</span><span class=\"mi\">70</span><span class=\"o\">:</span><span class=\"mi\">11</span>\n<span class=\"n\">declaration</span> <span class=\"n\">uses</span> <span class=\"bp\">'</span><span class=\"gr\">sorry</span><span class=\"bp\">'</span>\n<span class=\"n\">Basic.lean</span><span class=\"o\">:</span><span class=\"mi\">70</span><span class=\"o\">:</span><span class=\"mi\">11</span>\n<span class=\"n\">stuck</span> <span class=\"n\">at</span> <span class=\"n\">solving</span> <span class=\"kd\">universe</span> <span class=\"n\">constraint</span>\n  <span class=\"bp\">?</span><span class=\"n\">u.54718</span><span class=\"bp\">+</span><span class=\"mi\">1</span> <span class=\"bp\">=?=</span> <span class=\"n\">max</span> <span class=\"mi\">1</span> <span class=\"bp\">?</span><span class=\"n\">u.54719</span>\n<span class=\"n\">while</span> <span class=\"n\">trying</span> <span class=\"n\">to</span> <span class=\"n\">unify</span>\n  <span class=\"kt\">Type</span> <span class=\"bp\">?</span><span class=\"n\">u.54718</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">u.54718</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n<span class=\"k\">with</span>\n  <span class=\"kt\">Sort</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"mi\">1</span> <span class=\"bp\">?</span><span class=\"n\">u.54719</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"mi\">1</span> <span class=\"bp\">?</span><span class=\"n\">u.54719</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 399949917,
        "sender_full_name": "Dmitry S.",
        "timestamp": 1698935374
    },
    {
        "content": "<p>And a much better advice is to add <code>set_option relaxedAutoImplicit false</code> at the top of your file instead of <code>set_option autoImplicit false</code>.</p>",
        "id": 399949953,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1698935388
    },
    {
        "content": "<p>This way you get most of the cases where auto-implicit are very nice, and do not get the typo traps.</p>",
        "id": 399950179,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1698935440
    },
    {
        "content": "<p>Dmitry, there is nothing we can do with your latest message. You need to read the <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> link and edit your message accordingly.</p>",
        "id": 399950350,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1698935486
    },
    {
        "content": "<p>same error with <code>set_option relaxedAutoImplicit false</code> - but one important difference is that the low-case <code>float</code> is underlined red with that option drawing the user's attention to it <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span><br>\n<a href=\"/user_uploads/3121/yfJ4o5KGp02b2k4iPH7rG2Tn/Screenshot-2023-11-02-at-15.31.06.png\">Screenshot-2023-11-02-at-15.31.06.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/yfJ4o5KGp02b2k4iPH7rG2Tn/Screenshot-2023-11-02-at-15.31.06.png\" title=\"Screenshot-2023-11-02-at-15.31.06.png\"><img src=\"/user_uploads/3121/yfJ4o5KGp02b2k4iPH7rG2Tn/Screenshot-2023-11-02-at-15.31.06.png\"></a></div>",
        "id": 399950568,
        "sender_full_name": "Dmitry S.",
        "timestamp": 1698935536
    },
    {
        "content": "<p>It's not only underlined, there is an error message there.</p>",
        "id": 399950784,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1698935594
    },
    {
        "content": "<p>TIL <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> - thanks (I guess another - maybe more laborious - way is to create a small test project repo on github for MWE, right?)</p>",
        "id": 399951352,
        "sender_full_name": "Dmitry S.",
        "timestamp": 1698935757
    },
    {
        "content": "<p>out of curiosity - there's no word 'sorry' in my project - why is this warning on the line after the low-case <code>float</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">warning</span><span class=\"o\">:</span> <span class=\"n\">declaration</span> <span class=\"n\">uses</span> <span class=\"bp\">'</span><span class=\"gr\">sorry</span><span class=\"bp\">'</span>\n</code></pre></div>\n<p>?</p>",
        "id": 399952068,
        "sender_full_name": "Dmitry S.",
        "timestamp": 1698935941
    },
    {
        "content": "<p>Lean autoinserts sorries when there are mistakes.  I suspect that the reason is so that parsing can have a chance of getting to later parts of the code, even when there are errors.</p>",
        "id": 399952739,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1698936114
    },
    {
        "content": "<p>I see - thanks.</p>",
        "id": 399953328,
        "sender_full_name": "Dmitry S.",
        "timestamp": 1698936268
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"351667\">Dmitry S.</span> has marked this topic as resolved.</p>",
        "id": 399953385,
        "sender_full_name": "Notification Bot",
        "timestamp": 1698936288
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"351667\">Dmitry S.</span> <a href=\"#narrow/stream/113489-new-members/topic/.E2.9C.94.20deriving.20Repr.20error/near/399951352\">said</a>:</p>\n<blockquote>\n<p>TIL <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> - thanks (I guess another - maybe more laborious - way is to create a small test project repo on github for MWE, right?)</p>\n</blockquote>\n<p>This is very rarely necessary.</p>",
        "id": 399955506,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1698936749
    },
    {
        "content": "<p>At the very least, FPiL should discuss this particular issue and provide an example of the error message that can result. <a href=\"https://github.com/leanprover/fp-lean/issues/133\">Tracking issue</a>.</p>\n<p>Thanks!</p>",
        "id": 400416345,
        "sender_full_name": "David Thrane Christiansen",
        "timestamp": 1699211007
    }
]