[
    {
        "content": "<p>I am unable to import tactic even though I have mathlib</p>\n<p><code>$ leanproject add-mathlib\nThis project already depends on  mathlib</code></p>",
        "id": 354899562,
        "sender_full_name": "Achyut Raj",
        "timestamp": 1682953262
    },
    {
        "content": "<p>what is your leanpkg.toml and the contents of the lean file you are writing?</p>",
        "id": 354900292,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1682953429
    },
    {
        "content": "<p>I have cloned the formalising-mathematics-2023 repo and the leanpkg.toml looks like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">[</span><span class=\"n\">package</span><span class=\"o\">]</span>\n<span class=\"n\">name</span> <span class=\"bp\">=</span> <span class=\"s2\">\"mathlib\"</span>\n<span class=\"n\">version</span> <span class=\"bp\">=</span> <span class=\"s2\">\"0.1\"</span>\n<span class=\"n\">lean_version</span> <span class=\"bp\">=</span> <span class=\"s2\">\"leanprover-community/lean:3.50.3\"</span>\n<span class=\"n\">path</span> <span class=\"bp\">=</span> <span class=\"s2\">\"src\"</span>\n\n<span class=\"o\">[</span><span class=\"n\">dependencies</span><span class=\"o\">]</span><span class=\"bp\">```</span>\n</code></pre></div>",
        "id": 354900720,
        "sender_full_name": "Achyut Raj",
        "timestamp": 1682953543
    },
    {
        "content": "<p>(triple backquote before + after on their own line)</p>",
        "id": 354901120,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1682953642
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">like</span> <span class=\"n\">this</span>\n</code></pre></div>",
        "id": 354901214,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1682953668
    },
    {
        "content": "<p>and what does the lean file look like and the error you get?</p>",
        "id": 354901459,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1682953720
    },
    {
        "content": "<p>ah thanks</p>",
        "id": 354901599,
        "sender_full_name": "Achyut Raj",
        "timestamp": 1682953751
    },
    {
        "content": "<p>the error on the import statement is this <br>\n<code>invalid import: tactic\ncould not resolve import: tactic</code></p>",
        "id": 354901692,
        "sender_full_name": "Achyut Raj",
        "timestamp": 1682953776
    },
    {
        "content": "<p>the quotes need to be on their own line</p>",
        "id": 354901803,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1682953802
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">```</span>\n<span class=\"n\">like</span> <span class=\"n\">this</span>\n<span class=\"bp\">```</span>\n</code></pre></div>",
        "id": 354901880,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1682953818
    },
    {
        "content": "<p>aha!</p>",
        "id": 354901919,
        "sender_full_name": "Achyut Raj",
        "timestamp": 1682953828
    },
    {
        "content": "<p>the .lean file is pretty long, so I'll just show you the first few lines</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span> <span class=\"c1\">-- imports all the Lean tactics</span>\n\n<span class=\"c\">/-</span><span class=\"cm\">!</span>\n\n<span class=\"cm\"># Logic in Lean, example sheet 1 : \"implies\" (`→`)</span>\n\n<span class=\"cm\">We learn about propositions, and implications `P → Q` between them. You can get</span>\n<span class=\"cm\">this arrow by typing `\\to` or `\\r`. Mathematicians usually write the</span>\n<span class=\"cm\">implication arrow as `P ⇒ Q` but Lean prefers a single arrow.</span>\n\n<span class=\"cm\">## The absolute basics</span>\n\n<span class=\"cm\">`P : Prop` means that `P` is a true-false statement. `h : P` means</span>\n<span class=\"cm\">that `h` is a proof that `P` is true, or you can regard `h` as an</span>\n<span class=\"cm\">assumption that `P` is true; logically these are the same. Stuff above</span>\n<span class=\"cm\">the `⊢` symbol is your assumptions. The statement to the right of it is</span>\n<span class=\"cm\">the goal. Your job is to prove the goal from the assumptions.</span>\n\n<span class=\"cm\">## Tactics you will need</span>\n\n<span class=\"cm\">To solve the levels on this sheet you will need to know how to use the</span>\n<span class=\"cm\">following three tactics:</span>\n\n<span class=\"cm\">* `intro`</span>\n<span class=\"cm\">* `exact`</span>\n<span class=\"cm\">* `apply`</span>\n\n<span class=\"cm\">You can read the descriptions of these tactics in Part C of the online course</span>\n<span class=\"cm\">notes here https://www.ma.imperial.ac.uk/~buzzard/xena/formalising-mathematics-2023/Part_C/tactics/tactics.html</span>\n<span class=\"cm\">In this course we'll be learning about 30 tactics in total; the goal of this</span>\n<span class=\"cm\">first logic section is to get you up to speed with ten very basic ones.</span>\n\n<span class=\"cm\">## Worked examples</span>\n\n<span class=\"cm\">Click around in the proofs to see the tactic state (on the right) change.</span>\n<span class=\"cm\">The tactic is implemented and the state changes just before the comma.</span>\n<span class=\"cm\">I will use the following conventions: variables with capital</span>\n<span class=\"cm\">letters like `P`, `Q`, `R` denote propositions</span>\n<span class=\"cm\">(i.e. true/false statements) and variables whose names begin</span>\n<span class=\"cm\">with `h` like `h1` or `hP` are proofs or hypotheses.</span>\n\n<span class=\"cm\">-/</span>\n\n<span class=\"c1\">-- Throughout this sheet, `P`, `Q` and `R` will denote propositions.</span>\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"n\">Q</span> <span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n\n<span class=\"c1\">-- Here are some examples of `intro`, `exact` and `apply` being used.</span>\n\n<span class=\"c1\">-- Assume that `P` and `Q` and `R` are all true. Deduce that `P` is true.</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">hP</span> <span class=\"o\">:</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hQ</span> <span class=\"o\">:</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hR</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"c1\">-- note that `exact P` does *not* work. `P` is the proposition, `hP` is the proof.</span>\n  <span class=\"n\">exact</span> <span class=\"n\">hP</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 354902052,
        "sender_full_name": "Achyut Raj",
        "timestamp": 1682953866
    },
    {
        "content": "<p>Oh! Your toml file is wrong</p>",
        "id": 354902112,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1682953883
    },
    {
        "content": "<p>it says your project <em>is</em> mathlib</p>",
        "id": 354902157,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1682953897
    },
    {
        "content": "<p>you want it to depend on mathlib</p>",
        "id": 354902183,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1682953905
    },
    {
        "content": "<p>where did you find that leanpkg.toml file? The one at <a href=\"https://github.com/ImperialCollegeLondon/formalising-mathematics-2023/blob/main/leanpkg.toml\">formalizing-mathematics-2023</a> doesn't look like that</p>",
        "id": 354902415,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1682953956
    },
    {
        "content": "<p>oh sorry, it was in the <code>_target </code>folder</p>",
        "id": 354903283,
        "sender_full_name": "Achyut Raj",
        "timestamp": 1682954193
    },
    {
        "content": "<p>the right leanpkg.toml file lookslike this</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">[</span><span class=\"n\">package</span><span class=\"o\">]</span>\n<span class=\"n\">name</span> <span class=\"bp\">=</span> <span class=\"s2\">\"formalising-mathematics-2023\"</span>\n<span class=\"n\">version</span> <span class=\"bp\">=</span> <span class=\"s2\">\"0.1\"</span>\n<span class=\"n\">lean_version</span> <span class=\"bp\">=</span> <span class=\"s2\">\"leanprover-community/lean:3.50.3\"</span>\n<span class=\"n\">path</span> <span class=\"bp\">=</span> <span class=\"s2\">\"src\"</span>\n\n<span class=\"o\">[</span><span class=\"n\">dependencies</span><span class=\"o\">]</span>\n<span class=\"n\">mathlib</span> <span class=\"bp\">=</span> <span class=\"o\">{</span><span class=\"n\">git</span> <span class=\"bp\">=</span> <span class=\"s2\">\"https://github.com/leanprover-community/mathlib\"</span><span class=\"o\">,</span> <span class=\"n\">rev</span> <span class=\"bp\">=</span> <span class=\"s2\">\"134625f523e737f650a6ea7f0c82a6177e45e622\"</span><span class=\"o\">}</span>\n</code></pre></div>",
        "id": 354903392,
        "sender_full_name": "Achyut Raj",
        "timestamp": 1682954222
    },
    {
        "content": "<p>assuming you are using vscode, did you \"open folder\" on the project root directory (the one that contains that leanpkg.toml file)?</p>",
        "id": 354907570,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1682955182
    },
    {
        "content": "<p>no I opened a folder that contains the project root directory</p>",
        "id": 354908244,
        "sender_full_name": "Achyut Raj",
        "timestamp": 1682955356
    },
    {
        "content": "<p>that will not work, the <code>leanpkg.toml</code> file needs to be at the root or in a parent directory</p>",
        "id": 354908468,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1682955419
    },
    {
        "content": "<p>you can have both folders open in separate vscode windows if you want access to the parent folder</p>",
        "id": 354908648,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1682955459
    },
    {
        "content": "<p>Ah! okay....so I opened the root directory in VSCode and the error msg is gone....but the InfoView just says <code>Loading....</code> now.</p>",
        "id": 354909513,
        "sender_full_name": "Achyut Raj",
        "timestamp": 1682955669
    },
    {
        "content": "<p>did you run <code>leanproject get-cache</code>?</p>",
        "id": 354910354,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1682955878
    },
    {
        "content": "<p>you should run that and then restart lean</p>",
        "id": 354910416,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1682955898
    },
    {
        "content": "<p>yes it gave me this result</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">No</span> <span class=\"n\">cache</span> <span class=\"n\">available</span> <span class=\"n\">for</span> <span class=\"n\">revision</span> <span class=\"mi\">17</span><span class=\"n\">b3f9a</span>\n<span class=\"n\">No</span> <span class=\"n\">archives</span> <span class=\"n\">available</span> <span class=\"n\">for</span> <span class=\"n\">any</span> <span class=\"n\">commits</span><span class=\"bp\">!</span>\n</code></pre></div>",
        "id": 354910556,
        "sender_full_name": "Achyut Raj",
        "timestamp": 1682955947
    },
    {
        "content": "<p>You need to use <code>leanproject get-mathlib-cache</code></p>",
        "id": 354910690,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1682955986
    },
    {
        "content": "<p>Your previous command failed because you asked for a cache of formalizing-mathematics-2023</p>",
        "id": 354910754,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1682956010
    },
    {
        "content": "<p>We don't publish those anywhere, so it looked on your local machine then gave up</p>",
        "id": 354910804,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1682956023
    },
    {
        "content": "<p>(might be good for the error message to mention the project it is referring to)</p>",
        "id": 354910898,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1682956058
    },
    {
        "content": "<p>also \"did you mean <code>get-mathlib-cache</code>?\"</p>",
        "id": 354911014,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1682956085
    },
    {
        "content": "<p>it worked!<br>\nthanks a lot <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> and <span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span></p>",
        "id": 354911976,
        "sender_full_name": "Achyut Raj",
        "timestamp": 1682956367
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"609394\">Achyut Raj</span> has marked this topic as resolved.</p>",
        "id": 354913307,
        "sender_full_name": "Notification Bot",
        "timestamp": 1682956761
    },
    {
        "content": "<p>Note that if you had installed the project following the instructions in the README rather than just cloning the project then you would not have had this last problem. <code>leanproject get</code> := <code>git clone</code> + download mathlib + <code>leanproject get-mathlib-cache</code></p>",
        "id": 354922708,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1682959292
    },
    {
        "content": "<p>I see. Thanks! I'll make sure to do the same next time.</p>",
        "id": 354943847,
        "sender_full_name": "Achyut Raj",
        "timestamp": 1682964902
    }
]