[
    {
        "content": "<p>Why can't <code>rw</code> find an instance of <code>P ∧ Q</code> here?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">),</span> <span class=\"mi\">10</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"bp\">∧</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">20</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">and_comm</span><span class=\"o\">,</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>How can I swap the order of the conjuncts in the goal?</p>",
        "id": 327392843,
        "sender_full_name": "Martin C. Martin",
        "timestamp": 1676212161
    },
    {
        "content": "<p>Might be related to the fact that <code>rw</code> finds it difficult to <a href=\"#narrow/stream/113489-new-members/topic/Trouble.20rewriting.20inside.20set.20definition/near/326664885\">work under binders</a></p>",
        "id": 327393280,
        "sender_full_name": "Pedro Sánchez Terraf",
        "timestamp": 1676212363
    },
    {
        "content": "<p>Interesting, thanks!  The suggestion in that thread, using <code>simp_rw</code>, doesn't work for me.  Is there a way to swap the order of the conjuncts?</p>",
        "id": 327393496,
        "sender_full_name": "Martin C. Martin",
        "timestamp": 1676212478
    },
    {
        "content": "<p>(I'm also a new member). For fine tuning, you have the <a href=\"https://leanprover-community.github.io/extras/conv.html\"><code>conv</code> mode</a>.</p>",
        "id": 327393828,
        "sender_full_name": "Pedro Sánchez Terraf",
        "timestamp": 1676212625
    },
    {
        "content": "<p>I also don't know why <code>simp_rw</code> won't work. Here's one solution (surely not an optimal one), using the approach above.</p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">),</span> <span class=\"mi\">10</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"bp\">∧</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">20</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">conv</span>\n  <span class=\"kd\">begin</span>\n    <span class=\"n\">congr</span><span class=\"o\">,</span>\n    <span class=\"n\">funext</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">and_comm</span><span class=\"o\">,</span>\n  <span class=\"kd\">end</span><span class=\"o\">,</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n</div></div>",
        "id": 327395497,
        "sender_full_name": "Pedro Sánchez Terraf",
        "timestamp": 1676213298
    },
    {
        "content": "<p>You can also try <code>simp_rw</code>.</p>",
        "id": 327403235,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1676216984
    },
    {
        "content": "<p><code>rw</code>does not work on expressions that contain bound variables. <code>simp_rw</code> does, but applies lemmas repeatedly and so gets trapped in a loop when you give it <code>and_comm</code>. <code>simp_rw [and_comm (10 &lt; _)]</code> does work, since the lemma applies only once with a left argument to <code>and</code> that matches <code>10 &lt; _</code>.</p>",
        "id": 327403952,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1676217374
    },
    {
        "content": "<p>Or as Kevin Buzzard taught me, <code>simp_rw</code> uses <code>simp only</code> under the hood, and for the latter there is a context (ctx) optional parameter. So you can do this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"mi\">10</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"bp\">∧</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">20</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"c1\">-- rw and_comm,</span>\n  <span class=\"c1\">-- simp_rw [and_comm],</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">and_comm</span> <span class=\"n\">_</span><span class=\"o\">]</span> <span class=\"o\">{</span> <span class=\"n\">single_pass</span> <span class=\"o\">:=</span> <span class=\"n\">tt</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 327408677,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1676219768
    },
    {
        "content": "<p>You need this when specifying the arguments doesn't work, which happened to me a while ago</p>",
        "id": 327408702,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1676219795
    }
]