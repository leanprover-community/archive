[
    {
        "content": "<p><a href=\"/user_uploads/3121/0MRTCwlCrsEcZ6uYxREoGtwt/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/0MRTCwlCrsEcZ6uYxREoGtwt/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/0MRTCwlCrsEcZ6uYxREoGtwt/image.png\"></a></div><p>I want to use cs4 to close the goal, and according to what I have read in \"Mathematics in Lean\", <code>convert</code> should do the job. But instead it is leaving me with a goal that I cannot understand.</p>\n<p><a href=\"/user_uploads/3121/Ps6R71mmwKwBjM40Gj0pJuto/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/Ps6R71mmwKwBjM40Gj0pJuto/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/Ps6R71mmwKwBjM40Gj0pJuto/image.png\"></a></div><p>Could someone explain why, and what the goal means?</p>",
        "id": 386997078,
        "sender_full_name": "Vivek Rajesh Joshi",
        "timestamp": 1692852949
    },
    {
        "content": "<p>Convert is going too far. Try <code>convert cs4 using 1</code> with increasing numbers until you get something sensible</p>",
        "id": 386999251,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1692854200
    },
    {
        "content": "<p>What does <code>using</code> do?</p>",
        "id": 387006199,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1692858947
    },
    {
        "content": "<p><code>using n</code> instructs <code>congr</code> to descend <code>n</code> layers into the expressions before leaving what is left as a side-goal.  Approximately.</p>",
        "id": 387010480,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1692861414
    },
    {
        "content": "<p>So (untested) <code>congr</code> on</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">c</span>\n</code></pre></div>\n<p>probably asks to prove all equalities of the variables.  <code>congr 2</code> (or 1?) might leave</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">a</span>\n</code></pre></div>\n<p>Definitely test this!!</p>",
        "id": 387010748,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1692861564
    },
    {
        "content": "<p>(note that congr attempts to prove the side-goal, so the <code>c = c</code> goal disappears due to this extra mechanism)</p>",
        "id": 387010866,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1692861616
    },
    {
        "content": "<p>I just tried <code>congr 1</code> is it.</p>",
        "id": 387010988,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1692861699
    },
    {
        "content": "<p>Using</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hyp</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">c</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">convert</span> <span class=\"n\">hyp</span> <span class=\"n\">using</span> <span class=\"mi\">0</span>\n</code></pre></div>\n<p>produces</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">⊢</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">c</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>Using</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hyp</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">c</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">convert</span> <span class=\"n\">hyp</span> <span class=\"n\">using</span> <span class=\"mi\">1</span>\n</code></pre></div>\n<p>produces</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">⊢</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">c</span>\n</code></pre></div>\n<p>Using</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hyp</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">c</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">convert</span> <span class=\"n\">hyp</span> <span class=\"n\">using</span> <span class=\"mi\">2</span>\n</code></pre></div>\n<p>produces</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">⊢</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span>\n</code></pre></div>\n<p>Using</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hyp</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">c</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">convert</span> <span class=\"n\">hyp</span> <span class=\"n\">using</span> <span class=\"mi\">3</span>\n</code></pre></div>\n<p>produces</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">⊢</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">a</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span>\n</code></pre></div>",
        "id": 387011680,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1692862014
    },
    {
        "content": "<p>Ah, <code>using 0</code> converts to <code>↔</code>: of course, this must be how <code>congr</code> begins its descent into the expressions!<br>\nEDIT[I was confused by the fact that this is now <code>convert</code>, and no longer <code>congr</code>!]</p>",
        "id": 387017568,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1692864823
    },
    {
        "content": "<p>(Small point of information, <code>convert</code> starts with <code>=</code>. It uses <code>congr!</code> internally to apply congruence lemmas, and as a cleanup operation <code>congr!</code> converts <code>=</code> to <code>↔</code> when both sides are Props.)</p>",
        "id": 387023350,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1692867266
    },
    {
        "content": "<p>Got it, my question was resolved with <code>convert cs4 using 1</code>. Thanks a lot!</p>",
        "id": 387041801,
        "sender_full_name": "Vivek Rajesh Joshi",
        "timestamp": 1692873347
    }
]