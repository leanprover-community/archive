[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Matrix.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n<span class=\"kn\">open</span> <span class=\"n\">Set</span> <span class=\"n\">Finset</span> <span class=\"n\">BigOperators</span> <span class=\"n\">Real</span> <span class=\"n\">InnerProductSpace</span> <span class=\"n\">Matrix</span>\n<span class=\"kd\">noncomputable</span> <span class=\"kn\">section</span>\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"n\">s</span><span class=\"o\">:</span><span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}[</span><span class=\"n\">Fintype</span> <span class=\"n\">n</span><span class=\"o\">][</span><span class=\"n\">Fintype</span> <span class=\"n\">m</span><span class=\"o\">]</span>\n<span class=\"kd\">variable</span><span class=\"o\">(</span><span class=\"n\">A</span><span class=\"o\">:</span><span class=\"n\">Matrix</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"n\">ℝ</span><span class=\"o\">)(</span><span class=\"n\">b</span><span class=\"o\">:</span><span class=\"n\">m</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">ℝ</span><span class=\"o\">)(</span><span class=\"n\">c</span><span class=\"o\">:</span><span class=\"n\">n</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">ℝ</span><span class=\"o\">)(</span><span class=\"n\">d</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">)</span>\n<span class=\"kd\">def</span> <span class=\"n\">LinearFraction</span><span class=\"o\">:(</span><span class=\"n\">n</span><span class=\"bp\">-&gt;</span><span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">ℝ</span><span class=\"o\">):=</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">↦</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">⬝ᵥ</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">d</span><span class=\"o\">))</span> <span class=\"bp\">•</span> <span class=\"o\">(</span><span class=\"n\">Matrix.mulVec</span> <span class=\"n\">A</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>I meet a problem when I try to define a map from \"n-&gt;R\" to \"m -&gt; R\",it is automatically recognized as (n-&gt;R)-&gt;m-&gt;R,this is not what I want,because I want verify the convexity preserving properties of this map,so is there any ways to deal with this problem?</p>",
        "id": 386048107,
        "sender_full_name": "Kevin Wen",
        "timestamp": 1692423347
    },
    {
        "content": "<p>I'm not sure there is a problem, this is just how maps work</p>",
        "id": 386049540,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1692424341
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/37x9xof0w4dV6UaE7gyWfbko/LinearFraction.lean\">LinearFraction.lean</a><br>\nthe problem is that when I use \"LinearFraction '' s\",there will be  a mistake,I think the reason is the definition of my map.</p>",
        "id": 386196232,
        "sender_full_name": "Kevin Wen",
        "timestamp": 1692517451
    },
    {
        "content": "<p>Your problem is  just how to define this map in lean:</p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>f</mi><mo>:</mo><msup><mi mathvariant=\"double-struck\">R</mi><mi>n</mi></msup><mo>→</mo><msup><mi mathvariant=\"double-struck\">R</mi><mi>m</mi></msup><mo>:</mo><mi>f</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mfrac><mrow><mi>A</mi><mi>x</mi><mo>+</mo><mi>b</mi></mrow><mrow><msup><mi>c</mi><mi>T</mi></msup><mi>x</mi><mo>+</mo><mi>d</mi></mrow></mfrac><mo separator=\"true\">,</mo><mi>d</mi><mi>o</mi><mi>m</mi><mi>f</mi><mo>=</mo><mrow><mo fence=\"true\">{</mo><mi>x</mi><mi mathvariant=\"normal\">∣</mi><msup><mi>c</mi><mi>T</mi></msup><mi>x</mi><mo>+</mo><mi>d</mi><mo>&gt;</mo><mn>0</mn><mo fence=\"true\">}</mo></mrow></mrow><annotation encoding=\"application/x-tex\">f: \\mathbb{R}^n \\to \\mathbb{R}^m:\nf(x) = \\frac{Ax+b}{c^{T}x+d}, domf = \\left \\{ x|c^{T}x+d &gt; 0\\right \\}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7144em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">R</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7144em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7144em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">R</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7144em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">m</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:2.1408em;vertical-align:-0.7693em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.3714em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathnormal\">c</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7673em;\"><span style=\"top:-2.989em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.13889em;\">T</span></span></span></span></span></span></span></span></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord mathnormal\">d</span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">A</span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord mathnormal\">b</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7693em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">d</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\">m</span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.2413em;vertical-align:-0.35em;\"></span><span class=\"minner\"><span class=\"mopen delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size1\">{</span></span><span class=\"mord mathnormal\">x</span><span class=\"mord\">∣</span><span class=\"mord\"><span class=\"mord mathnormal\">c</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8913em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.13889em;\">T</span></span></span></span></span></span></span></span></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord mathnormal\">d</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">&gt;</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mord\">0</span><span class=\"mclose delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size1\">}</span></span></span></span></span></span></span></p>",
        "id": 386196431,
        "sender_full_name": "leo Robert",
        "timestamp": 1692517655
    },
    {
        "content": "<p>What do you mean by \"there will be a mistake\"? Do you get an error? If so, you need to tell us what the error message is!</p>",
        "id": 386198320,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1692519217
    },
    {
        "content": "<p>This is my whole text:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Analysis.NormedSpace.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.LinearAlgebra.FiniteDimensional</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Analysis.InnerProductSpace.PiL2</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Real.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Analysis.Convex.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Analysis.NormedSpace.PiLp</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.GroupPower.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.Field.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Matrix.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Analysis.NormedSpace.Basic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Set</span> <span class=\"n\">Finset</span> <span class=\"n\">BigOperators</span> <span class=\"n\">Real</span> <span class=\"n\">InnerProductSpace</span> <span class=\"n\">Matrix</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kn\">section</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"n\">s</span><span class=\"o\">:</span><span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}[</span><span class=\"n\">Fintype</span> <span class=\"n\">n</span><span class=\"o\">][</span><span class=\"n\">Fintype</span> <span class=\"n\">m</span><span class=\"o\">]</span>\n\n<span class=\"kd\">variable</span><span class=\"o\">(</span><span class=\"n\">A</span><span class=\"o\">:</span><span class=\"n\">Matrix</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"n\">ℝ</span><span class=\"o\">)(</span><span class=\"n\">b</span><span class=\"o\">:</span><span class=\"n\">m</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">ℝ</span><span class=\"o\">)(</span><span class=\"n\">c</span><span class=\"o\">:</span><span class=\"n\">n</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">ℝ</span><span class=\"o\">)(</span><span class=\"n\">d</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">LinearFraction</span><span class=\"o\">:(</span><span class=\"n\">n</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">ℝ</span><span class=\"o\">):=</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">↦</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">⬝ᵥ</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">d</span><span class=\"o\">))</span> <span class=\"bp\">•</span> <span class=\"o\">(</span><span class=\"n\">Matrix.mulVec</span> <span class=\"n\">A</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n\n<span class=\"kd\">variable</span><span class=\"o\">{</span><span class=\"n\">s</span><span class=\"o\">:</span><span class=\"n\">Set</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">ℝ</span><span class=\"o\">)}</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">LinearFractionImage</span><span class=\"o\">(</span><span class=\"n\">h1</span><span class=\"o\">:</span><span class=\"n\">Convex</span> <span class=\"n\">ℝ</span> <span class=\"n\">s</span><span class=\"o\">)(</span><span class=\"n\">h2</span><span class=\"o\">:</span><span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">,</span><span class=\"n\">c</span> <span class=\"bp\">⬝ᵥ</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">d</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n  <span class=\"o\">:</span><span class=\"n\">Convex</span> <span class=\"n\">ℝ</span> <span class=\"o\">(</span><span class=\"n\">LinearFraction</span> <span class=\"bp\">''</span> <span class=\"n\">s</span><span class=\"o\">):=</span><span class=\"kd\">by</span>\n</code></pre></div>\n<p>When I try to prove the convexity of image of linearfraction like that,there is a error:lean fails to recognize (LinearFraction '' s).I don't know the reason.</p>",
        "id": 386201191,
        "sender_full_name": "Kevin Wen",
        "timestamp": 1692521490
    },
    {
        "content": "<p>What is the actual error message?</p>",
        "id": 386201522,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1692521758
    },
    {
        "content": "<p>It will show:application type mismatch.</p>",
        "id": 386202385,
        "sender_full_name": "Kevin Wen",
        "timestamp": 1692522364
    },
    {
        "content": "<p>What's the <em>full</em> error message? It tells you exactly what you need to do to fix it, but you're skipping the important bit</p>",
        "id": 386202444,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1692522415
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">application</span> <span class=\"n\">type</span> <span class=\"n\">mismatch</span>\n  <span class=\"n\">LinearFraction</span> <span class=\"bp\">''</span> <span class=\"n\">s</span>\n<span class=\"n\">argument</span>\n  <span class=\"n\">s</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">Set</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"bp\">?</span><span class=\"n\">u.1544</span> <span class=\"bp\">?</span><span class=\"n\">u.1545</span><span class=\"o\">)</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"n\">Set</span> <span class=\"o\">(</span><span class=\"n\">Matrix</span> <span class=\"bp\">?</span><span class=\"n\">m.1547</span> <span class=\"bp\">?</span><span class=\"n\">m.1546</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"bp\">?</span><span class=\"n\">u.1544</span> <span class=\"bp\">?</span><span class=\"n\">u.1545</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>I guess it is the full error message.</p>",
        "id": 386202761,
        "sender_full_name": "Kevin Wen",
        "timestamp": 1692522668
    },
    {
        "content": "<p>That's telling you that <code>LinearFraction</code> is expecting a matrix as its first argument (because it says \"you took an image by this function, so I expected the set to correspond with the type of the first argument)</p>",
        "id": 386202856,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1692522763
    },
    {
        "content": "<p>Perhaps <code>#check LinearFraction</code> will help you see what's going on?</p>",
        "id": 386202891,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1692522786
    },
    {
        "content": "<p>This topic was moved here from <a class=\"stream-topic\" data-stream-id=\"217875\" href=\"/#narrow/stream/217875-Is-there-code-for-X.3F/topic/Definition.20of.20mapping\">#Is there code for X? &gt; Definition of mapping</a> by <span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span>.</p>",
        "id": 386202954,
        "sender_full_name": "Notification Bot",
        "timestamp": 1692522840
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">LinearFraction.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">,</span> <span class=\"n\">u_2</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_2</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">inst</span><span class=\"bp\">✝</span> <span class=\"o\">:</span> <span class=\"n\">Fintype</span> <span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">Matrix</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">✝</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">✝¹</span> <span class=\"o\">:</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span>\n</code></pre></div>\n<p>The final output value of this function is a real number, but I need a vector of type <code>m-&gt;R</code>. Is this causing the error?</p>",
        "id": 386203350,
        "sender_full_name": "Kevin Wen",
        "timestamp": 1692523182
    },
    {
        "content": "<p><code>(n → ℝ) → (m → ℝ)</code> and <code>(n → ℝ) → m → ℝ</code> are the same in the same way that <code>a + b + c</code> is the same as <code>(a + b) + c</code>; but what's the first <em>input</em> to that function?</p>",
        "id": 386203916,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1692523652
    },
    {
        "content": "<p>You need to tell it what values of <code>A</code>, <code>b</code>, and <code>c</code> to use</p>",
        "id": 386203934,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1692523675
    },
    {
        "content": "<p>I use <code>∀ x ∈ s,c ⬝ᵥ x + d &gt; 0</code> to restrict the definition field,and I use <code>variable(A:Matrix m n ℝ)(b:m -&gt; ℝ)(c:n -&gt; ℝ)(d:ℝ)</code> to tell it that <code>A</code>,<code>b</code>,<code>c</code>,<code>d</code> are the elements to be inputted.Is this the right way?</p>",
        "id": 386204603,
        "sender_full_name": "Kevin Wen",
        "timestamp": 1692524204
    },
    {
        "content": "<p>The <code>variable</code> line tells Lean that <code>LinearFraction</code> accepts those arguments; but you now need to provide them</p>",
        "id": 386204648,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1692524244
    },
    {
        "content": "<p>Writing <code>LinearFraction A b c d '' s</code> shoul dwork</p>",
        "id": 386204659,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1692524255
    },
    {
        "content": "<p>Thank you so much! Such a modification would fix the mistake I made here.</p>",
        "id": 386204862,
        "sender_full_name": "Kevin Wen",
        "timestamp": 1692524409
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"631683\">Kevin</span> has marked this topic as resolved.</p>",
        "id": 386614496,
        "sender_full_name": "Notification Bot",
        "timestamp": 1692712492
    }
]