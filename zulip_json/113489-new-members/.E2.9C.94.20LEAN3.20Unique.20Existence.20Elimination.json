[
    {
        "content": "<p>Dear all, I'm currently trying to proof for a specification and implementation of a 2to1 multiplexer, that for all inputs in1,in2,sel, there exists a unique output out, such that the implementation and specification are true.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code> <span class=\"kd\">lemma</span> <span class=\"n\">mux_complies_to_spec</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">in1</span> <span class=\"n\">in2</span> <span class=\"n\">sel</span><span class=\"o\">:</span> <span class=\"n\">bool</span><span class=\"o\">),</span>\n  <span class=\"bp\">∃!</span> <span class=\"o\">(</span><span class=\"n\">out</span> <span class=\"o\">:</span> <span class=\"n\">bool</span><span class=\"o\">),</span> <span class=\"n\">mux_spec</span> <span class=\"n\">in1</span> <span class=\"n\">in2</span> <span class=\"n\">sel</span> <span class=\"n\">out</span> <span class=\"bp\">↔</span> <span class=\"n\">mux_imp</span> <span class=\"n\">in1</span> <span class=\"n\">in2</span> <span class=\"n\">sel</span> <span class=\"bp\">=</span> <span class=\"n\">out</span> <span class=\"o\">:=</span>\n</code></pre></div>\n<p>This is the signature of the lemma that I'm trying to proof.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>    <span class=\"n\">intros</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">exists_unique_of_exists_of_unique</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"c1\">--existence of output</span>\n      <span class=\"n\">simp</span><span class=\"o\">,</span>\n      <span class=\"n\">unfold</span> <span class=\"n\">mux_spec</span> <span class=\"n\">mux_imp</span><span class=\"o\">,</span>\n      <span class=\"n\">simp</span><span class=\"o\">,</span>\n      <span class=\"n\">unfold</span> <span class=\"n\">AND</span> <span class=\"n\">OR</span><span class=\"o\">,</span>\n      <span class=\"n\">simp</span><span class=\"o\">,</span>\n      <span class=\"n\">cases</span> <span class=\"n\">sel</span><span class=\"o\">,</span>\n      <span class=\"o\">{</span>\n        <span class=\"n\">simp</span><span class=\"o\">,</span>\n        <span class=\"n\">unfold</span> <span class=\"n\">NOT</span><span class=\"o\">,</span>\n        <span class=\"n\">simp</span><span class=\"o\">,</span>\n        <span class=\"n\">left</span><span class=\"o\">,</span>\n        <span class=\"n\">rewrite</span> <span class=\"n\">eq_comm</span><span class=\"o\">,</span>\n      <span class=\"o\">},</span>\n      <span class=\"o\">{</span>\n        <span class=\"n\">simp</span><span class=\"o\">,</span>\n        <span class=\"n\">unfold</span> <span class=\"n\">NOT</span><span class=\"o\">,</span>\n        <span class=\"n\">simp</span><span class=\"o\">,</span>\n        <span class=\"n\">left</span><span class=\"o\">,</span>\n        <span class=\"n\">rewrite</span> <span class=\"n\">eq_comm</span><span class=\"o\">,</span>\n      <span class=\"o\">},</span>\n    <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"c1\">--uniqueness of output</span>\n      <span class=\"n\">intros</span> <span class=\"n\">y₁</span> <span class=\"n\">y₂</span> <span class=\"n\">h1</span> <span class=\"n\">h2</span><span class=\"o\">,</span>\n\n    <span class=\"o\">}</span>\n</code></pre></div>\n<p>I figured out how to proof the existence of the output out, but I'm stuck with the uniqueness.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">in1</span> <span class=\"n\">in2</span> <span class=\"n\">sel</span><span class=\"o\">:</span> <span class=\"n\">bool</span>\n<span class=\"bp\">⊢</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">y₁</span> <span class=\"n\">y₂</span> <span class=\"o\">:</span> <span class=\"n\">bool</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">mux_spec</span> <span class=\"n\">in1</span> <span class=\"n\">in2</span> <span class=\"n\">sel</span> <span class=\"n\">y₁</span> <span class=\"bp\">↔</span> <span class=\"n\">mux_imp</span> <span class=\"n\">in1</span> <span class=\"n\">in2</span> <span class=\"n\">sel</span> <span class=\"bp\">=</span> <span class=\"n\">y₁</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">mux_spec</span> <span class=\"n\">in1</span> <span class=\"n\">in2</span> <span class=\"n\">sel</span> <span class=\"n\">y₂</span> <span class=\"bp\">↔</span> <span class=\"n\">mux_imp</span> <span class=\"n\">in1</span> <span class=\"n\">in2</span> <span class=\"n\">sel</span> <span class=\"bp\">=</span> <span class=\"n\">y₂</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">y₁</span> <span class=\"bp\">=</span> <span class=\"n\">y₂</span>\n</code></pre></div>\n<p>I'm not sure what steps I should take to solve this goal. It seems like we have a tautology. What exactly are y₁ and y₂ representing? And is it not already clear that they must be equal to each other?</p>",
        "id": 359733926,
        "sender_full_name": "Zahir Bingen",
        "timestamp": 1684519081
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=mux_spec#doc\">docs4#mux_spec</a></p>",
        "id": 359735018,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1684519378
    },
    {
        "content": "<p>Can you post a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> ?</p>",
        "id": 359735118,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1684519409
    },
    {
        "content": "<p>I think you likely don't want exists unique here, it is a very strange statement</p>",
        "id": 359736188,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1684519744
    },
    {
        "content": "<p>The statement</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">\\</span><span class=\"k\">forall</span> <span class=\"n\">out</span><span class=\"o\">,</span> <span class=\"n\">mux_spec</span> <span class=\"n\">in1</span> <span class=\"n\">in2</span> <span class=\"n\">sel</span> <span class=\"n\">out</span> <span class=\"bp\">↔</span> <span class=\"n\">mux_imp</span> <span class=\"n\">in1</span> <span class=\"n\">in2</span> <span class=\"n\">sel</span> <span class=\"bp\">=</span> <span class=\"n\">out</span>\n</code></pre></div>\n<p>is already asserting that <code>mux_spec in1 in2 sel</code> has exactly one output, namely <code>mux_imp in1 in2 sel</code>. From this you can prove</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"bp\">∃!</span> <span class=\"o\">(</span><span class=\"n\">out</span> <span class=\"o\">:</span> <span class=\"n\">bool</span><span class=\"o\">),</span> <span class=\"n\">mux_spec</span> <span class=\"n\">in1</span> <span class=\"n\">in2</span> <span class=\"n\">sel</span> <span class=\"n\">out</span>\n</code></pre></div>\n<p>which I think is what you actually want to say</p>",
        "id": 359736532,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1684519860
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">NOT</span> <span class=\"o\">:</span> <span class=\"n\">bool</span> <span class=\"bp\">→</span> <span class=\"n\">bool</span>\n  <span class=\"bp\">|</span> <span class=\"n\">tt</span> <span class=\"o\">:=</span> <span class=\"n\">ff</span>\n  <span class=\"bp\">|</span> <span class=\"n\">ff</span> <span class=\"o\">:=</span> <span class=\"n\">tt</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">AND</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">bool</span> <span class=\"bp\">→</span> <span class=\"n\">bool</span>\n  <span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"o\">:=</span> <span class=\"n\">tt</span>\n  <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">::</span><span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">h</span> <span class=\"bp\">∧</span> <span class=\"n\">AND</span> <span class=\"n\">t</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">OR</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">bool</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">bool</span>\n  <span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"o\">:=</span> <span class=\"n\">ff</span>\n  <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">::</span><span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">h</span> <span class=\"bp\">∨</span> <span class=\"n\">OR</span> <span class=\"n\">t</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">mux_imp</span> <span class=\"o\">(</span><span class=\"n\">in1</span> <span class=\"n\">in2</span> <span class=\"n\">sel</span> <span class=\"o\">:</span> <span class=\"n\">bool</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">bool</span> <span class=\"o\">:=</span>\n    <span class=\"k\">let</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"n\">NOT</span> <span class=\"n\">sel</span><span class=\"o\">,</span>\n            <span class=\"n\">q</span> <span class=\"o\">:=</span> <span class=\"n\">AND</span> <span class=\"o\">[</span><span class=\"n\">in1</span><span class=\"o\">,</span> <span class=\"n\">p</span><span class=\"o\">],</span>\n            <span class=\"n\">r</span> <span class=\"o\">:=</span> <span class=\"n\">AND</span> <span class=\"o\">[</span><span class=\"n\">in2</span><span class=\"o\">,</span> <span class=\"n\">sel</span><span class=\"o\">]</span> <span class=\"k\">in</span>\n    <span class=\"o\">(</span><span class=\"n\">OR</span> <span class=\"o\">[</span><span class=\"n\">q</span><span class=\"o\">,</span> <span class=\"n\">r</span><span class=\"o\">])</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">mux_spec</span> <span class=\"o\">(</span><span class=\"n\">in1</span> <span class=\"n\">in2</span> <span class=\"n\">sel</span> <span class=\"n\">out</span> <span class=\"o\">:</span> <span class=\"n\">bool</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n    <span class=\"k\">if</span> <span class=\"n\">sel</span> <span class=\"k\">then</span> <span class=\"o\">(</span><span class=\"n\">out</span> <span class=\"bp\">=</span> <span class=\"n\">in2</span><span class=\"o\">)</span> <span class=\"k\">else</span> <span class=\"o\">(</span><span class=\"n\">out</span> <span class=\"bp\">=</span> <span class=\"n\">in1</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>Here are all the functions I have defined for the specification and implementation.<br>\nWhat I try to show is, that given any combination of inputs, the specification and implementation produces the same output.<br>\nSince there can not be multiple outputs that satisfies both the implementation and specification for a given set of inputs, I thought it would be appropriate to say the output must be unique:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">mux_complies_to_spec</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">in1</span> <span class=\"n\">in2</span> <span class=\"n\">sel</span><span class=\"o\">:</span> <span class=\"n\">bool</span><span class=\"o\">),</span>\n  <span class=\"bp\">∃!</span> <span class=\"o\">(</span><span class=\"n\">out</span> <span class=\"o\">:</span> <span class=\"n\">bool</span><span class=\"o\">),</span> <span class=\"n\">mux_spec</span> <span class=\"n\">in1</span> <span class=\"n\">in2</span> <span class=\"n\">sel</span> <span class=\"n\">out</span> <span class=\"bp\">↔</span> <span class=\"n\">mux_imp</span> <span class=\"n\">in1</span> <span class=\"n\">in2</span> <span class=\"n\">sel</span> <span class=\"bp\">=</span> <span class=\"n\">out</span> <span class=\"o\">:=</span>\n</code></pre></div>\n<p>I'm really new in the field of logics. I don't only want to show that the specification has one unique output, but also that the implementation has this, and that they must be the same.</p>",
        "id": 359741288,
        "sender_full_name": "Zahir Bingen",
        "timestamp": 1684521295
    },
    {
        "content": "<blockquote>\n<p>What I try to show is, that given any combination of inputs, the specification and implementation produces the same output.</p>\n</blockquote>\n<p>That is:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">mux_complies_to_spec</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">in1</span> <span class=\"n\">in2</span> <span class=\"n\">sel</span><span class=\"o\">:</span> <span class=\"n\">bool</span><span class=\"o\">),</span>\n  <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">out</span> <span class=\"o\">:</span> <span class=\"n\">bool</span><span class=\"o\">),</span> <span class=\"n\">mux_spec</span> <span class=\"n\">in1</span> <span class=\"n\">in2</span> <span class=\"n\">sel</span> <span class=\"n\">out</span> <span class=\"bp\">↔</span> <span class=\"n\">mux_imp</span> <span class=\"n\">in1</span> <span class=\"n\">in2</span> <span class=\"n\">sel</span> <span class=\"bp\">=</span> <span class=\"n\">out</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<blockquote>\n<p>Since there can not be multiple outputs that satisfies both the implementation and specification for a given set of inputs, I thought it would be appropriate to say the output must be unique:</p>\n</blockquote>\n<p>That is:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">mux_spec_unique</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">in1</span> <span class=\"n\">in2</span> <span class=\"n\">sel</span><span class=\"o\">:</span> <span class=\"n\">bool</span><span class=\"o\">),</span>\n  <span class=\"bp\">∃!</span> <span class=\"o\">(</span><span class=\"n\">out</span> <span class=\"o\">:</span> <span class=\"n\">bool</span><span class=\"o\">),</span> <span class=\"n\">mux_spec</span> <span class=\"n\">in1</span> <span class=\"n\">in2</span> <span class=\"n\">sel</span> <span class=\"n\">out</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 359781896,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1684537194
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113489-new-members/topic/LEAN3.20Unique.20Existence.20Elimination/near/359781896\">said</a>:</p>\n<blockquote>\n<blockquote>\n<p>What I try to show is, that given any combination of inputs, the specification and implementation produces the same output.</p>\n</blockquote>\n<p>That is:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">mux_complies_to_spec</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">in1</span> <span class=\"n\">in2</span> <span class=\"n\">sel</span><span class=\"o\">:</span> <span class=\"n\">bool</span><span class=\"o\">),</span>\n  <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">out</span> <span class=\"o\">:</span> <span class=\"n\">bool</span><span class=\"o\">),</span> <span class=\"n\">mux_spec</span> <span class=\"n\">in1</span> <span class=\"n\">in2</span> <span class=\"n\">sel</span> <span class=\"n\">out</span> <span class=\"bp\">↔</span> <span class=\"n\">mux_imp</span> <span class=\"n\">in1</span> <span class=\"n\">in2</span> <span class=\"n\">sel</span> <span class=\"bp\">=</span> <span class=\"n\">out</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<blockquote>\n<p>Since there can not be multiple outputs that satisfies both the implementation and specification for a given set of inputs, I thought it would be appropriate to say the output must be unique:</p>\n</blockquote>\n<p>That is:</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">mux_spec_unique</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">in1</span> <span class=\"n\">in2</span> <span class=\"n\">sel</span><span class=\"o\">:</span> <span class=\"n\">bool</span><span class=\"o\">),</span>\n  <span class=\"bp\">∃!</span> <span class=\"o\">(</span><span class=\"n\">out</span> <span class=\"o\">:</span> <span class=\"n\">bool</span><span class=\"o\">),</span> <span class=\"n\">mux_spec</span> <span class=\"n\">in1</span> <span class=\"n\">in2</span> <span class=\"n\">sel</span> <span class=\"n\">out</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>Thank you for the explanation! So if I understand it correctly, since the specification and implementation produce the same output and are equivalent to each other, we only need to proof that there exists an unique output for just the specification right?</p>",
        "id": 359794211,
        "sender_full_name": "Zahir Bingen",
        "timestamp": 1684545866
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"618701\">Zahir Bingen</span> has marked this topic as resolved.</p>",
        "id": 359955534,
        "sender_full_name": "Notification Bot",
        "timestamp": 1684615109
    }
]