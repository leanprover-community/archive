[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n\n<span class=\"kd\">universe</span> <span class=\"n\">u</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">List</span>\n\n<span class=\"c1\">-- `α` has linear order</span>\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">LinearOrder</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n\n<span class=\"sd\">/-- selection sort -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">List.selection_sort</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n  <span class=\"k\">if</span> <span class=\"n\">hl</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">l.length</span> <span class=\"k\">then</span>\n    <span class=\"k\">let</span> <span class=\"n\">μ</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">minimum_of_length_pos</span> <span class=\"n\">hl</span>\n\n    <span class=\"c1\">-- `μ` is a member of the list</span>\n    <span class=\"k\">have</span> <span class=\"n\">mem</span> <span class=\"o\">:</span> <span class=\"n\">μ</span> <span class=\"bp\">∈</span> <span class=\"n\">l</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n      <span class=\"n\">refine</span> <span class=\"n\">minimum_mem</span> <span class=\"bp\">?</span><span class=\"n\">_</span>\n      <span class=\"n\">simp</span><span class=\"bp\">?</span> <span class=\"n\">says</span>\n        <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">coe_minimum_of_length_pos</span><span class=\"o\">]</span>\n\n    <span class=\"k\">let</span> <span class=\"n\">rest</span> <span class=\"o\">:=</span> <span class=\"n\">l.erase</span> <span class=\"n\">μ</span>\n\n    <span class=\"c1\">-- lemma for termination</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">l.length</span> <span class=\"bp\">&gt;</span> <span class=\"n\">rest.length</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n      <span class=\"k\">calc</span> <span class=\"n\">l.length</span>\n        <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"n\">rest.length</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">length_erase_add_one</span> <span class=\"n\">mem</span><span class=\"o\">]</span>\n        <span class=\"n\">_</span> <span class=\"bp\">&gt;</span> <span class=\"n\">rest.length</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">linarith</span>\n\n    <span class=\"n\">μ</span> <span class=\"o\">::</span> <span class=\"o\">(</span><span class=\"n\">selection_sort</span> <span class=\"n\">rest</span><span class=\"o\">)</span>\n  <span class=\"k\">else</span>\n    <span class=\"o\">[]</span>\n  <span class=\"n\">termination_by</span> <span class=\"n\">_</span> <span class=\"n\">l</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">l.length</span>\n\n<span class=\"c1\">-- test</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">[</span><span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">4</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">5</span><span class=\"o\">,</span> <span class=\"mi\">9</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">]</span><span class=\"bp\">.</span><span class=\"n\">selection_sort</span> <span class=\"bp\">=</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"mi\">4</span><span class=\"o\">,</span> <span class=\"mi\">5</span><span class=\"o\">,</span> <span class=\"mi\">9</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">l</span> <span class=\"bp\">~</span> <span class=\"n\">selection_sort</span> <span class=\"n\">l</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"c1\">-- use induction on the length of the list</span>\n  <span class=\"n\">induction'</span> <span class=\"n\">ih</span> <span class=\"o\">:</span> <span class=\"n\">l.length</span> <span class=\"n\">generalizing</span> <span class=\"n\">l</span>\n\n  <span class=\"n\">case</span> <span class=\"n\">zero</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">replace</span> <span class=\"n\">ih</span> <span class=\"o\">:</span> <span class=\"n\">l.length</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">ih</span>\n    <span class=\"k\">have</span> <span class=\"n\">hl</span> <span class=\"o\">:</span> <span class=\"n\">l</span> <span class=\"bp\">=</span> <span class=\"o\">[]</span> <span class=\"o\">:=</span> <span class=\"n\">length_eq_zero.mp</span> <span class=\"n\">ih</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">hl</span><span class=\"o\">]</span>\n    <span class=\"k\">suffices</span> <span class=\"n\">selection_sort</span> <span class=\"n\">l</span> <span class=\"bp\">=</span> <span class=\"o\">[]</span> <span class=\"k\">from</span> <span class=\"n\">nil_perm.mpr</span> <span class=\"n\">rfl</span>\n\n    <span class=\"n\">unfold</span> <span class=\"n\">selection_sort</span>\n    <span class=\"n\">simp</span><span class=\"bp\">?</span> <span class=\"o\">[</span><span class=\"n\">hl</span><span class=\"o\">]</span> <span class=\"n\">says</span>\n      <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span>\n        <span class=\"n\">hl</span><span class=\"o\">,</span>\n        <span class=\"n\">length_nil</span><span class=\"o\">,</span>\n        <span class=\"n\">lt_self_iff_false</span><span class=\"o\">,</span>\n        <span class=\"n\">erase_nil</span><span class=\"o\">,</span>\n        <span class=\"n\">dite_false</span>\n      <span class=\"o\">]</span>\n  <span class=\"n\">case</span> <span class=\"n\">succ</span> <span class=\"n\">n</span> <span class=\"n\">IH</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">replace</span> <span class=\"n\">ih</span> <span class=\"o\">:</span> <span class=\"n\">length</span> <span class=\"n\">l</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"n\">ih</span>\n    <span class=\"n\">unfold</span> <span class=\"n\">selection_sort</span>\n    <span class=\"n\">simp</span><span class=\"bp\">?</span> <span class=\"o\">[</span><span class=\"n\">ih</span><span class=\"o\">]</span> <span class=\"n\">says</span>\n      <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span>\n        <span class=\"n\">ih</span><span class=\"o\">,</span>\n        <span class=\"n\">add_pos_iff</span><span class=\"o\">,</span>\n        <span class=\"n\">or_true</span><span class=\"o\">,</span>\n        <span class=\"n\">dite_true</span>\n      <span class=\"o\">]</span>\n    <span class=\"n\">set</span> <span class=\"n\">μ</span> <span class=\"o\">:=</span> <span class=\"n\">minimum_of_length_pos</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">length</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"k\">with</span> <span class=\"n\">hm</span>\n    <span class=\"n\">set</span> <span class=\"n\">rest</span> <span class=\"o\">:=</span> <span class=\"n\">l.erase</span> <span class=\"n\">μ</span> <span class=\"k\">with</span> <span class=\"n\">hl</span>\n\n    <span class=\"k\">suffices</span> <span class=\"n\">rest.length</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"k\">from</span> <span class=\"kd\">by</span>\n      <span class=\"k\">have</span> <span class=\"n\">hr</span> <span class=\"o\">:</span> <span class=\"n\">selection_sort</span> <span class=\"n\">rest</span> <span class=\"bp\">~</span> <span class=\"n\">rest</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n        <span class=\"n\">exact</span><span class=\"bp\">?</span> <span class=\"n\">says</span>\n          <span class=\"n\">exact</span> <span class=\"n\">Perm.symm</span> <span class=\"o\">(</span><span class=\"n\">IH</span> <span class=\"n\">rest</span> <span class=\"n\">this</span><span class=\"o\">)</span>\n\n      <span class=\"k\">suffices</span> <span class=\"n\">l</span> <span class=\"bp\">~</span> <span class=\"n\">μ</span> <span class=\"o\">::</span> <span class=\"n\">rest</span> <span class=\"k\">from</span> <span class=\"kd\">by</span>\n        <span class=\"c1\">-- how to show this</span>\n        <span class=\"gr\">sorry</span>\n\n      <span class=\"gr\">sorry</span>\n\n    <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 398482613,
        "sender_full_name": "Asei Inoue",
        "timestamp": 1698239778
    },
    {
        "content": "<p>how to show the following prop?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>      <span class=\"k\">show</span> <span class=\"n\">l</span> <span class=\"bp\">~</span> <span class=\"n\">μ</span> <span class=\"o\">::</span> <span class=\"n\">selection_sort</span> <span class=\"n\">rest</span>\n      <span class=\"k\">suffices</span> <span class=\"n\">l</span> <span class=\"bp\">~</span> <span class=\"n\">μ</span> <span class=\"o\">::</span> <span class=\"n\">rest</span> <span class=\"k\">from</span> <span class=\"kd\">by</span>\n        <span class=\"c1\">-- how to show this</span>\n        <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 398482674,
        "sender_full_name": "Asei Inoue",
        "timestamp": 1698239809
    },
    {
        "content": "<p>I have <code>hr: selection_sort rest ~ rest</code> already, so it must be a straightforward result.</p>",
        "id": 398482805,
        "sender_full_name": "Asei Inoue",
        "timestamp": 1698239864
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">by</span>\n        <span class=\"n\">apply</span> <span class=\"n\">this.trans</span>\n        <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">hr.symm</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 398483119,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1698239975
    },
    {
        "content": "<p>also you don't need <code>from by</code>, simply <code>by</code> is ok</p>",
        "id": 398483147,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1698239989
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"127136\">@Alex J. Best</span> </p>\n<p>Thank you very much!</p>\n<blockquote>\n<p>also you don't need from by, simply by is ok</p>\n</blockquote>\n<p>see <a href=\"#narrow/stream/113489-new-members/topic/.E2.9C.94.20.60suffices.60.20doesn't.20work\">https://leanprover.zulipchat.com/#narrow/stream/113489-new-members/topic/.E2.9C.94.20.60suffices.60.20doesn't.20work</a></p>",
        "id": 398483656,
        "sender_full_name": "Asei Inoue",
        "timestamp": 1698240135
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"626349\">Asei Inoue</span> has marked this topic as resolved.</p>",
        "id": 398484224,
        "sender_full_name": "Notification Bot",
        "timestamp": 1698240314
    }
]