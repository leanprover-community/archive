[
    {
        "content": "<p>Yesterday, I had to change <code>0 : nat</code> into <code>⊥ : nat</code> in some equality <code>h : … = 0</code>.<br>\nIn the absence of <code>nat.zero_eq_bot</code>, there does not seem to be a preferred way to do that.<br>\n I had entered <code>change : _ = ⊥</code>, but I finally decided I prefered adding <code>have : (0 : nat) = ⊥ := rfl</code>.<br>\nWhich one is preferable?</p>\n<p>Below is a MWE where <span class=\"user-mention\" data-user-id=\"406490\">@María Inés de Frutos Fernández</span>  and I use this.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.mv_polynomial.variables</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">σ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">mv_polynomial</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">total_degree_eq_zero_iff</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">mv_polynomial</span> <span class=\"n\">σ</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">p.total_degree</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n  <span class=\"bp\">↔</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">σ</span> <span class=\"bp\">→₀</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hm</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">∈</span> <span class=\"n\">p.support</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">σ</span><span class=\"o\">),</span> <span class=\"n\">m</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">nat_zero_eq_bot</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">⊥</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">nat_zero_eq_bot</span><span class=\"o\">,</span> <span class=\"n\">total_degree</span><span class=\"o\">,</span> <span class=\"n\">finset.sup_eq_bot_iff</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">nat_zero_eq_bot</span><span class=\"o\">],</span>\n  <span class=\"n\">apply</span> <span class=\"n\">forall_congr</span><span class=\"o\">,</span>\n  <span class=\"n\">intro</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">forall_congr</span><span class=\"o\">,</span>\n  <span class=\"n\">intro</span> <span class=\"n\">ha</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">finsupp.sum</span><span class=\"o\">,</span> <span class=\"n\">finset.sum_eq_zero_iff</span><span class=\"o\">,</span> <span class=\"n\">finsupp.mem_support_iff</span><span class=\"o\">,</span> <span class=\"n\">not_imp_self</span><span class=\"o\">],</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">mv_polynomial</span>\n</code></pre></div>",
        "id": 342759691,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1679138263
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/bot_eq_zero\">docs#bot_eq_zero</a></p>",
        "id": 342762738,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1679139227
    },
    {
        "content": "<p>Thanks! I don't understand how I didn't find it - probably because I was looking to <code>zero_eq_bot</code>…</p>",
        "id": 342773834,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1679142964
    },
    {
        "content": "<p>Another option is to introduce the term on the fly and rewrite like this <code>rw (show 0 = \\bot, from rfl)</code></p>",
        "id": 342775784,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1679143721
    }
]