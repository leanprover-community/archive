[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">myFn</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">ZMod</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Real.pi</span>\n<span class=\"bp\">|</span> <span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Real.pi</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">myFn</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ZMod</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">3</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">myFn</span><span class=\"o\">]</span>\n  <span class=\"c\">/-</span>\n<span class=\"cm\">  P : ℕ → Bool</span>\n<span class=\"cm\">  ⊢ 3 &lt;</span>\n<span class=\"cm\">    match 1 with</span>\n<span class=\"cm\">    | { val := 0, isLt := (_ : 0 % Nat.succ 1 &lt; Nat.succ 1) } =&gt; π</span>\n<span class=\"cm\">    | { val := 1, isLt := (_ : 1 % Nat.succ 1 &lt; Nat.succ 1) } =&gt; π</span>\n<span class=\"cm\">  -/</span>\n  <span class=\"c1\">-- What to do? I could do:</span>\n  <span class=\"c1\">--   change π &gt; 3</span>\n  <span class=\"c1\">--   exact Real.pi_gt_three</span>\n  <span class=\"c1\">-- But what if instead of π I had a very nasty expression? I don't want to type that nasty expression verbatim.</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 402353654,
        "sender_full_name": "Yongyi Chen",
        "timestamp": 1700095299
    },
    {
        "content": "<p>I'm not sure if things get more complicated than <code>π &gt; 3</code>, but we can also do this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">myFn</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">ZMod</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Real.pi</span>\n<span class=\"bp\">|</span> <span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Real.pi</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">myFn</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ZMod</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">3</span> <span class=\"o\">:=</span>\n  <span class=\"n\">Real.pi_gt_three</span>\n</code></pre></div>",
        "id": 402361811,
        "sender_full_name": "Gian Cordana Sanjaya",
        "timestamp": 1700099127
    },
    {
        "content": "<p>That would be defeq abuse (also see the commented out part in my code excerpt). And yes, the real use case is more complicated than <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>π</mi><mo>&gt;</mo><mn>3</mn></mrow><annotation encoding=\"application/x-tex\">\\pi&gt;3</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">π</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">&gt;</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">3</span></span></span></span>. Any way to do it without defeq abuse?</p>",
        "id": 402362965,
        "sender_full_name": "Yongyi Chen",
        "timestamp": 1700099808
    },
    {
        "content": "<p>Is this better?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">myFn</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ZMod</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">3</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">myFn</span><span class=\"o\">]</span>\n  <span class=\"n\">split</span> <span class=\"bp\">&lt;;&gt;</span>\n  <span class=\"n\">exact</span> <span class=\"n\">Real.pi_gt_three</span>\n</code></pre></div>",
        "id": 402363264,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1700099995
    },
    {
        "content": "<p>That won't work if we change the value of <code>myFn 0</code> from <code>π</code> to anything else. If you want to use <code>split</code>, I think it should be something like:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">myFn</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ZMod</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">3</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">myFn</span><span class=\"o\">]</span>\n  <span class=\"n\">split</span>\n  <span class=\"bp\">·</span> <span class=\"gr\">sorry</span> <span class=\"c1\">-- Either prove `myFn 0 &gt; 3` directly or prove `0 ≠ 1` over `ZMod 2`</span>\n  <span class=\"bp\">·</span> <span class=\"n\">exact</span> <span class=\"n\">Real.pi_gt_three</span>\n</code></pre></div>\n<p>Also, split gives us an implicit variable of type <code>(0 : ZMod 2) = 1</code>. How can we make that variable explicit?</p>",
        "id": 402364853,
        "sender_full_name": "Gian Cordana Sanjaya",
        "timestamp": 1700100821
    },
    {
        "content": "<p>I guess with this strategy we would put <code>contradiction</code> in all the cases that aren't applicable. But I feel there should be a better way to do this still.</p>",
        "id": 402365269,
        "sender_full_name": "Yongyi Chen",
        "timestamp": 1700101021
    },
    {
        "content": "<p>The first goal you can also close by <code>simp_all</code>.  There is <code>rename_i</code> for accessing inaccessible hypotheses, but it is a little gross.</p>",
        "id": 402365315,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1700101035
    },
    {
        "content": "<p>Basically as the first post showed, the entire match expression </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">match</span> <span class=\"mi\">1</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"o\">{</span> <span class=\"n\">val</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">isLt</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">%</span> <span class=\"n\">Nat.succ</span> <span class=\"mi\">1</span> <span class=\"bp\">&lt;</span> <span class=\"n\">Nat.succ</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">}</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">π</span>\n    <span class=\"bp\">|</span> <span class=\"o\">{</span> <span class=\"n\">val</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">isLt</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">%</span> <span class=\"n\">Nat.succ</span> <span class=\"mi\">1</span> <span class=\"bp\">&lt;</span> <span class=\"n\">Nat.succ</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">}</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">π</span>\n</code></pre></div>\n<p>is defeq to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>π</mi></mrow><annotation encoding=\"application/x-tex\">\\pi</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">π</span></span></span></span>. I want to know how to <code>simp</code> it (or <code>rw</code> it) to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>π</mi></mrow><annotation encoding=\"application/x-tex\">\\pi</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">π</span></span></span></span> given that <code>simp</code> refuses to change it to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>π</mi></mrow><annotation encoding=\"application/x-tex\">\\pi</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">π</span></span></span></span>.</p>",
        "id": 402365559,
        "sender_full_name": "Yongyi Chen",
        "timestamp": 1700101178
    },
    {
        "content": "<p>I think you're in trouble because lean expanded the 1 in the match arm (because it had to) but not in the match discriminant; and since they're not the same reducibly, the match can't be eliminated</p>",
        "id": 402367464,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1700102119
    },
    {
        "content": "<p>Hmm so this works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">myFn</span> <span class=\"o\">{</span><span class=\"n\">val</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">isLt</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">trivial</span> <span class=\"o\">}</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">3</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">myFn</span><span class=\"o\">]</span>\n  <span class=\"n\">exact</span> <span class=\"n\">Real.pi_gt_three</span>\n</code></pre></div>\n<p>and the match was eliminated successfully. How to eliminate the match in the original code?</p>",
        "id": 402368162,
        "sender_full_name": "Yongyi Chen",
        "timestamp": 1700102480
    }
]