[
    {
        "content": "<p>Are there any Lean functions in mathlib4 or Std that are equivalent to <code>is_some</code> or <code>unwrap</code> in Rust?</p>",
        "id": 398235188,
        "sender_full_name": "Asei Inoue",
        "timestamp": 1698136195
    },
    {
        "content": "<p>If not, what problems are keeping you from implementing it?</p>\n<p>I've implemented it myself and don't think it's too much of a problem.</p>",
        "id": 398235430,
        "sender_full_name": "Asei Inoue",
        "timestamp": 1698136247
    },
    {
        "content": "<p>My implementation: </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">is_some</span> <span class=\"o\">:</span> <span class=\"n\">Option</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">none</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">False</span>\n<span class=\"bp\">|</span> <span class=\"n\">some</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">True</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">is_some</span> <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">trivial</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">is_some</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">]</span><span class=\"bp\">.</span><span class=\"n\">minimum</span><span class=\"bp\">?</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">trivial</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">unwrap</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Option</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">is_some</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">x</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">none</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span> <span class=\"n\">contradiction</span>\n  <span class=\"bp\">|</span> <span class=\"n\">some</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">a</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">unwrap</span> <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">trivial</span><span class=\"o\">)</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">unwrap</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">]</span><span class=\"bp\">.</span><span class=\"n\">minimum</span><span class=\"bp\">?</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">trivial</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 398235503,
        "sender_full_name": "Asei Inoue",
        "timestamp": 1698136268
    },
    {
        "content": "<p>see Rust methods of option type: <a href=\"https://doc.rust-lang.org/std/option/enum.Option.html\">https://doc.rust-lang.org/std/option/enum.Option.html</a></p>",
        "id": 398236298,
        "sender_full_name": "Asei Inoue",
        "timestamp": 1698136456
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Option.isSome#doc\">docs#Option.isSome</a>, <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Option.get#doc\">docs#Option.get</a></p>",
        "id": 398239148,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1698137402
    },
    {
        "content": "<p><code>unwrap()</code> is actually more similar to <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Option.get%21#doc\">docs#Option.get!</a>, which panics on <code>none</code></p>",
        "id": 398239316,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1698137443
    },
    {
        "content": "<p>What does the attribute <code>@[inline]</code> in mathlib4 mean?</p>",
        "id": 398239522,
        "sender_full_name": "Asei Inoue",
        "timestamp": 1698137515
    },
    {
        "content": "<p>Is there a page where I can see a list of available attributes?</p>",
        "id": 398239671,
        "sender_full_name": "Asei Inoue",
        "timestamp": 1698137555
    },
    {
        "content": "<p><code>#help attr</code></p>",
        "id": 398239894,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1698137634
    },
    {
        "content": "<p><code>[inline]: mark definition to be inlined</code><br>\nI guess that's nonzero information <span aria-label=\"shrug\" class=\"emoji emoji-1f937\" role=\"img\" title=\"shrug\">:shrug:</span></p>",
        "id": 398240056,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1698137665
    },
    {
        "content": "<p>in short it's a directive to the compiler to use the body of the function instead of actually doing a function call</p>",
        "id": 398240201,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1698137704
    },
    {
        "content": "<p>it's useful for really tiny functions used as control flow operators</p>",
        "id": 398240301,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1698137731
    },
    {
        "content": "<p>Thank you very much. What does mark definition to be inlined mean and how does it differ from a definition that is not inline?</p>",
        "id": 398240308,
        "sender_full_name": "Asei Inoue",
        "timestamp": 1698137733
    },
    {
        "content": "<p><a href=\"https://en.wikipedia.org/wiki/Inline_expansion\">https://en.wikipedia.org/wiki/Inline_expansion</a></p>",
        "id": 398240576,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1698137794
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"626349\">Asei Inoue</span> has marked this topic as resolved.</p>",
        "id": 398242073,
        "sender_full_name": "Notification Bot",
        "timestamp": 1698138138
    }
]