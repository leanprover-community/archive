[
    {
        "content": "<p>This should be a fast things to evaluate, why is it so slow with <code>#eval</code>? It's just adding some vectors and forming the sequence of locations visited while doing so.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">plane_add</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"bp\">×</span><span class=\"n\">ℤ</span><span class=\"bp\">×</span><span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"bp\">×</span><span class=\"n\">ℤ</span><span class=\"bp\">×</span><span class=\"n\">ℤ</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">u.1</span><span class=\"bp\">+</span><span class=\"n\">v.1</span><span class=\"o\">,</span> <span class=\"n\">u.2.1</span><span class=\"bp\">+</span><span class=\"n\">v.2.1</span><span class=\"o\">,</span> <span class=\"n\">u.2.2</span><span class=\"bp\">+</span><span class=\"n\">v.2.2</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">ℤ</span><span class=\"bp\">×</span><span class=\"n\">ℤ</span><span class=\"bp\">×</span><span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span> <span class=\"mi\">0</span><span class=\"o\">,</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n<span class=\"kd\">def</span> <span class=\"n\">D</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">ℤ</span><span class=\"bp\">×</span><span class=\"n\">ℤ</span><span class=\"bp\">×</span><span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n<span class=\"kd\">def</span> <span class=\"n\">W</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">ℤ</span><span class=\"bp\">×</span><span class=\"n\">ℤ</span><span class=\"bp\">×</span><span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">,</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span>\n<span class=\"kd\">def</span> <span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">ℤ</span><span class=\"bp\">×</span><span class=\"n\">ℤ</span><span class=\"bp\">×</span><span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n<span class=\"kd\">def</span> <span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">ℤ</span><span class=\"bp\">×</span><span class=\"n\">ℤ</span><span class=\"bp\">×</span><span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n<span class=\"kd\">def</span> <span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">ℤ</span><span class=\"bp\">×</span><span class=\"n\">ℤ</span><span class=\"bp\">×</span><span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">MK</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">ℤ</span><span class=\"bp\">×</span><span class=\"n\">ℤ</span><span class=\"bp\">×</span><span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">[</span><span class=\"n\">D</span><span class=\"o\">,</span><span class=\"n\">D</span><span class=\"o\">,</span><span class=\"n\">D</span><span class=\"o\">,</span><span class=\"n\">S</span><span class=\"o\">,</span><span class=\"n\">S</span><span class=\"o\">,</span><span class=\"n\">A</span><span class=\"o\">,</span><span class=\"n\">A</span><span class=\"o\">,</span><span class=\"n\">A</span><span class=\"o\">,</span><span class=\"n\">A</span><span class=\"o\">,</span><span class=\"n\">W</span><span class=\"o\">,</span><span class=\"n\">D</span><span class=\"o\">,</span><span class=\"n\">D</span><span class=\"o\">,</span><span class=\"n\">D</span><span class=\"o\">,</span><span class=\"n\">F</span><span class=\"o\">,</span><span class=\"n\">A</span><span class=\"o\">,</span><span class=\"n\">W</span><span class=\"o\">,</span><span class=\"n\">D</span><span class=\"o\">,</span><span class=\"n\">D</span><span class=\"o\">,</span><span class=\"n\">S</span><span class=\"o\">,</span><span class=\"n\">S</span><span class=\"o\">,</span><span class=\"n\">S</span><span class=\"o\">,</span><span class=\"n\">A</span><span class=\"o\">,</span><span class=\"n\">A</span><span class=\"o\">,</span><span class=\"n\">A</span><span class=\"o\">,</span><span class=\"n\">A</span><span class=\"o\">]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">walk_and_last_element</span> <span class=\"o\">(</span><span class=\"n\">moves</span><span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">ℤ</span><span class=\"bp\">×</span><span class=\"n\">ℤ</span><span class=\"bp\">×</span><span class=\"n\">ℤ</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">ℤ</span><span class=\"bp\">×</span><span class=\"n\">ℤ</span><span class=\"bp\">×</span><span class=\"n\">ℤ</span><span class=\"o\">))</span> <span class=\"bp\">×</span> <span class=\"o\">(</span><span class=\"n\">ℤ</span><span class=\"bp\">×</span><span class=\"n\">ℤ</span><span class=\"bp\">×</span><span class=\"n\">ℤ</span><span class=\"o\">):=</span>\n  <span class=\"n\">list.rec_on</span> <span class=\"n\">moves</span> <span class=\"o\">([(</span><span class=\"mi\">0</span><span class=\"o\">,</span><span class=\"mi\">0</span><span class=\"o\">,</span><span class=\"mi\">0</span><span class=\"o\">)],(</span><span class=\"mi\">0</span><span class=\"o\">,</span><span class=\"mi\">0</span><span class=\"o\">,</span><span class=\"mi\">0</span><span class=\"o\">))</span> <span class=\"o\">(</span>\n    <span class=\"bp\">λ</span> <span class=\"n\">point</span> <span class=\"n\">moves_ind</span> <span class=\"n\">walk_last_ind</span><span class=\"o\">,</span>\n      <span class=\"o\">(</span>\n        <span class=\"n\">walk_last_ind.1</span> <span class=\"bp\">++</span> <span class=\"o\">[</span><span class=\"n\">plane_add</span> <span class=\"n\">walk_last_ind.2</span> <span class=\"n\">point</span><span class=\"o\">],</span>\n        <span class=\"n\">plane_add</span> <span class=\"n\">walk_last_ind.2</span> <span class=\"n\">point</span>\n      <span class=\"o\">)</span>\n  <span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">walk_from_moves</span> <span class=\"o\">(</span><span class=\"n\">moves</span><span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">ℤ</span><span class=\"bp\">×</span><span class=\"n\">ℤ</span><span class=\"bp\">×</span><span class=\"n\">ℤ</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">ℤ</span><span class=\"bp\">×</span><span class=\"n\">ℤ</span><span class=\"bp\">×</span><span class=\"n\">ℤ</span><span class=\"o\">)):=</span>\n  <span class=\"o\">(</span><span class=\"n\">walk_and_last_element</span> <span class=\"n\">moves</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">winning_walk</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">walk_from_moves</span> <span class=\"o\">(</span><span class=\"n\">MK.take</span> <span class=\"mi\">18</span><span class=\"o\">))</span>\n<span class=\"k\">#eval</span> <span class=\"n\">winning_walk</span>\n</code></pre></div>",
        "id": 357710985,
        "sender_full_name": "Bjørn Kjos-Hanssen",
        "timestamp": 1683845183
    },
    {
        "content": "<p>There's some unnecessary quadratic complexity in there from <code>walk_last_ind.1 ++ [plane_add walk_last_ind.2 point]</code>, which involves iterating through all of <code>walk_last_ind.1</code> to create a totally new list. If you are willing to work with the reverse of your lists, then <code>plane_add walk_last_ind.2 point :: walk_last_ind.1</code> should be noticably faster.</p>",
        "id": 357711680,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1683845580
    },
    {
        "content": "<p>(It shouldn't affect the speed, but just so you know <code>list.foldr</code> and <code>list.foldl</code> are more specialized list recursors that can be easier to use when you don't have dependent types.)</p>",
        "id": 357712086,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1683845821
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/113489-new-members/topic/.23eval.20is.20slow/near/357711680\">said</a>:</p>\n<blockquote>\n<p>There's some unnecessary quadratic complexity in there from <code>walk_last_ind.1 ++ [plane_add walk_last_ind.2 point]</code>, which involves iterating through all of <code>walk_last_ind.1</code> to create a totally new list. If you are willing to work with the reverse of your lists, then <code>plane_add walk_last_ind.2 point :: walk_last_ind.1</code> should be noticably faster.</p>\n</blockquote>\n<p>Thanks, I tried the <code>h::t</code> instead of <code>t++[h]</code> form earlier but it was also slow. But yes, maybe noticeably faster.</p>",
        "id": 357714705,
        "sender_full_name": "Bjørn Kjos-Hanssen",
        "timestamp": 1683847252
    },
    {
        "content": "<p>Could you try <code>#eval List.length winning_walk</code>? There's a chance that it's just that printing out the answer is slow. This at least gets it to evaluate and then print something that's quickly printable.</p>",
        "id": 357715144,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1683847530
    },
    {
        "content": "<p><code>#eval winning_walk.length</code> is slow, too.</p>",
        "id": 357715794,
        "sender_full_name": "Bjørn Kjos-Hanssen",
        "timestamp": 1683847938
    },
    {
        "content": "<p>For what it's worth, this Lean 4 implementation is very fast, assuming I translated it correctly and didn't accidentally make do a different but faster calculation:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">plane_add</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"bp\">×</span><span class=\"n\">ℤ</span><span class=\"bp\">×</span><span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"bp\">×</span><span class=\"n\">ℤ</span><span class=\"bp\">×</span><span class=\"n\">ℤ</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">u.1</span><span class=\"bp\">+</span><span class=\"n\">v.1</span><span class=\"o\">,</span> <span class=\"n\">u.2.1</span><span class=\"bp\">+</span><span class=\"n\">v.2.1</span><span class=\"o\">,</span> <span class=\"n\">u.2.2</span><span class=\"bp\">+</span><span class=\"n\">v.2.2</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">ℤ</span><span class=\"bp\">×</span><span class=\"n\">ℤ</span><span class=\"bp\">×</span><span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span> <span class=\"mi\">0</span><span class=\"o\">,</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n<span class=\"kd\">def</span> <span class=\"n\">D</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">ℤ</span><span class=\"bp\">×</span><span class=\"n\">ℤ</span><span class=\"bp\">×</span><span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n<span class=\"kd\">def</span> <span class=\"n\">W</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">ℤ</span><span class=\"bp\">×</span><span class=\"n\">ℤ</span><span class=\"bp\">×</span><span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">,</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span>\n<span class=\"kd\">def</span> <span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">ℤ</span><span class=\"bp\">×</span><span class=\"n\">ℤ</span><span class=\"bp\">×</span><span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n<span class=\"kd\">def</span> <span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">ℤ</span><span class=\"bp\">×</span><span class=\"n\">ℤ</span><span class=\"bp\">×</span><span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n<span class=\"kd\">def</span> <span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">ℤ</span><span class=\"bp\">×</span><span class=\"n\">ℤ</span><span class=\"bp\">×</span><span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">MK</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">ℤ</span><span class=\"bp\">×</span><span class=\"n\">ℤ</span><span class=\"bp\">×</span><span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">[</span><span class=\"n\">D</span><span class=\"o\">,</span><span class=\"n\">D</span><span class=\"o\">,</span><span class=\"n\">D</span><span class=\"o\">,</span><span class=\"n\">S</span><span class=\"o\">,</span><span class=\"n\">S</span><span class=\"o\">,</span><span class=\"n\">A</span><span class=\"o\">,</span><span class=\"n\">A</span><span class=\"o\">,</span><span class=\"n\">A</span><span class=\"o\">,</span><span class=\"n\">A</span><span class=\"o\">,</span><span class=\"n\">W</span><span class=\"o\">,</span><span class=\"n\">D</span><span class=\"o\">,</span><span class=\"n\">D</span><span class=\"o\">,</span><span class=\"n\">D</span><span class=\"o\">,</span><span class=\"n\">F</span><span class=\"o\">,</span><span class=\"n\">A</span><span class=\"o\">,</span><span class=\"n\">W</span><span class=\"o\">,</span><span class=\"n\">D</span><span class=\"o\">,</span><span class=\"n\">D</span><span class=\"o\">,</span><span class=\"n\">S</span><span class=\"o\">,</span><span class=\"n\">S</span><span class=\"o\">,</span><span class=\"n\">S</span><span class=\"o\">,</span><span class=\"n\">A</span><span class=\"o\">,</span><span class=\"n\">A</span><span class=\"o\">,</span><span class=\"n\">A</span><span class=\"o\">,</span><span class=\"n\">A</span><span class=\"o\">]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">walk_and_last_element</span> <span class=\"o\">(</span><span class=\"n\">moves</span><span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">ℤ</span><span class=\"bp\">×</span><span class=\"n\">ℤ</span><span class=\"bp\">×</span><span class=\"n\">ℤ</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">ℤ</span><span class=\"bp\">×</span><span class=\"n\">ℤ</span><span class=\"bp\">×</span><span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">×</span> <span class=\"o\">(</span><span class=\"n\">ℤ</span><span class=\"bp\">×</span><span class=\"n\">ℤ</span><span class=\"bp\">×</span><span class=\"n\">ℤ</span><span class=\"o\">):=</span>\n  <span class=\"n\">moves.foldr</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">point</span> <span class=\"n\">walk_last_ind</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"o\">(</span><span class=\"n\">plane_add</span> <span class=\"n\">walk_last_ind.2</span> <span class=\"n\">point</span> <span class=\"o\">::</span> <span class=\"n\">walk_last_ind.1</span><span class=\"o\">,</span>\n     <span class=\"n\">plane_add</span> <span class=\"n\">walk_last_ind.2</span> <span class=\"n\">point</span><span class=\"o\">))</span>\n    <span class=\"o\">([(</span><span class=\"mi\">0</span><span class=\"o\">,</span><span class=\"mi\">0</span><span class=\"o\">,</span><span class=\"mi\">0</span><span class=\"o\">)],(</span><span class=\"mi\">0</span><span class=\"o\">,</span><span class=\"mi\">0</span><span class=\"o\">,</span><span class=\"mi\">0</span><span class=\"o\">))</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">walk_from_moves</span> <span class=\"o\">(</span><span class=\"n\">moves</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">ℤ</span><span class=\"bp\">×</span><span class=\"n\">ℤ</span><span class=\"bp\">×</span><span class=\"n\">ℤ</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">ℤ</span><span class=\"bp\">×</span><span class=\"n\">ℤ</span><span class=\"bp\">×</span><span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">walk_and_last_element</span> <span class=\"n\">moves</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">winning_walk</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">walk_from_moves</span> <span class=\"o\">(</span><span class=\"n\">MK.take</span> <span class=\"mi\">18</span><span class=\"o\">))</span>\n<span class=\"k\">#eval</span> <span class=\"n\">winning_walk</span>\n<span class=\"c\">/-</span>\n<span class=\"cm\">[(1, 3, 0),</span>\n<span class=\"cm\"> (1, 2, 0),</span>\n<span class=\"cm\"> (1, 1, 0),</span>\n<span class=\"cm\"> (1, 0, 0),</span>\n<span class=\"cm\"> (1, 0, -1),</span>\n<span class=\"cm\"> (1, 0, -2),</span>\n<span class=\"cm\"> (1, 1, -2),</span>\n<span class=\"cm\"> (1, 2, -2),</span>\n<span class=\"cm\"> (1, 3, -2),</span>\n<span class=\"cm\"> (1, 4, -2),</span>\n<span class=\"cm\"> (1, 4, -1),</span>\n<span class=\"cm\"> (1, 3, -1),</span>\n<span class=\"cm\"> (1, 2, -1),</span>\n<span class=\"cm\"> (1, 1, -1),</span>\n<span class=\"cm\"> (0, 1, -1),</span>\n<span class=\"cm\"> (0, 2, -1),</span>\n<span class=\"cm\"> (0, 2, 0),</span>\n<span class=\"cm\"> (0, 1, 0),</span>\n<span class=\"cm\"> (0, 0, 0)]</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>",
        "id": 357715822,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1683847953
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span>  that looks great (it's reversed in a couple of ways but that should be okay). Actually the key part of your code works in Lean 3 after replacing <code>=&gt;</code> by <code>,</code>, and very fast!</p>",
        "id": 357717693,
        "sender_full_name": "Bjørn Kjos-Hanssen",
        "timestamp": 1683849223
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"347475\">Bjørn Kjos-Hanssen</span> has marked this topic as resolved.</p>",
        "id": 357723570,
        "sender_full_name": "Notification Bot",
        "timestamp": 1683852349
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"347475\">Bjørn Kjos-Hanssen</span> has marked this topic as unresolved.</p>",
        "id": 358331202,
        "sender_full_name": "Notification Bot",
        "timestamp": 1684108678
    },
    {
        "content": "<p>Here is another case where <code>#eval</code> is slow. Doesn't look like <code>foldr</code> will help(?).</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">fibo</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">list</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">×</span> <span class=\"o\">(</span><span class=\"n\">ℕ</span><span class=\"bp\">×</span><span class=\"n\">ℕ</span><span class=\"o\">):=</span> <span class=\"c1\">-- a list, and its last two elements</span>\n  <span class=\"n\">ite</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">≤</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">([</span><span class=\"mi\">0</span><span class=\"o\">],</span><span class=\"mi\">0</span><span class=\"o\">,</span><span class=\"mi\">0</span><span class=\"o\">)</span>\n  <span class=\"bp\">$</span> <span class=\"n\">nat.rec_on</span> <span class=\"n\">l</span>\n    <span class=\"o\">([</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">0</span><span class=\"o\">],</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"c1\">-- Start of Fibonacci sequence, backwards</span>\n    <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">fib_ind</span><span class=\"o\">,</span>\n      <span class=\"n\">ite</span> <span class=\"o\">(</span><span class=\"n\">fib_ind.2.1</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">fib_ind.2.2</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">%</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"n\">fib_ind</span>\n      <span class=\"o\">(</span>\n        <span class=\"o\">((</span><span class=\"n\">fib_ind.2.1</span> <span class=\"bp\">+</span> <span class=\"n\">fib_ind.2.2</span><span class=\"o\">)</span> <span class=\"bp\">%</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">::</span> <span class=\"n\">fib_ind.1</span><span class=\"o\">,</span>\n        <span class=\"o\">(</span><span class=\"n\">fib_ind.2.1</span> <span class=\"bp\">+</span> <span class=\"n\">fib_ind.2.2</span><span class=\"o\">)</span> <span class=\"bp\">%</span> <span class=\"n\">p</span><span class=\"o\">,</span>\n        <span class=\"n\">fib_ind.2.1</span>\n      <span class=\"o\">)</span>\n    <span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">pisano</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">fibo</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">p</span><span class=\"bp\">*</span><span class=\"n\">p</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"n\">reverse</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">pisano</span> <span class=\"mi\">1</span>\n<span class=\"k\">#eval</span> <span class=\"n\">pisano</span> <span class=\"mi\">2</span>\n<span class=\"k\">#eval</span> <span class=\"n\">pisano</span> <span class=\"mi\">3</span>\n<span class=\"k\">#eval</span> <span class=\"n\">pisano</span> <span class=\"mi\">4</span>\n<span class=\"k\">#eval</span> <span class=\"n\">pisano</span> <span class=\"mi\">5</span>\n</code></pre></div>\n<p>Any idea why it's so slow?</p>",
        "id": 358331253,
        "sender_full_name": "Bjørn Kjos-Hanssen",
        "timestamp": 1684108705
    }
]