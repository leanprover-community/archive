[
    {
        "content": "<p>I would like to identify <code>0</code>  as a member of the closed interval [0, 1] (see below)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">thm</span> <span class=\"o\">:</span> <span class=\"n\">true</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">let</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Set.Icc</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>This does not work due to some type issues  I don't understand well enough to fix it. Any pointers to help me understand what's going on?</p>",
        "id": 397119266,
        "sender_full_name": "Matias Heikkilä",
        "timestamp": 1697552265
    },
    {
        "content": "<p>What imports do you have? I get no errors when I use your code with <code>import Mathlib</code> (this is why we ask for imports in <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>)</p>",
        "id": 397126178,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1697554327
    },
    {
        "content": "<p>That said <code>Set.Icc</code> is a <code>Set</code> not a type so when you write what you have there you are coercing it to be the type of all elements contained in that set, which may or may not be what you need, it depends on the context.<br>\nTo use it as a set you would make statements like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">∈</span>  <span class=\"n\">Set.Icc</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span>\n</code></pre></div>",
        "id": 397126489,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1697554415
    },
    {
        "content": "<p>Which says the real number 0 is contained in the subset of reals between 0 and 1</p>",
        "id": 397126548,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1697554430
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"127136\">@Alex J. Best</span>, afk for a bit. I’ll update the example and list the imports when I’m back</p>",
        "id": 397126857,
        "sender_full_name": "Matias Heikkilä",
        "timestamp": 1697554519
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"127136\">@Alex J. Best</span> so the thing is I was preparing a small mathlib4 PR for submission, and I'm working on the file <code>Mathlib/Topology/StoneCech.lean</code>. With my current imports, the following should be an <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Topology.Bases</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Topology.DenseEmbedding</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Topology.UrysohnsLemma</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">thm</span> <span class=\"o\">:</span> <span class=\"n\">true</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">let</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Set.Icc</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>What I get is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"kd\">instance</span>\n  <span class=\"n\">OfNat</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">Icc</span> <span class=\"mi\">0</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"mi\">0</span>\n</code></pre></div>\n<p>While this example doesn't really make sense on its own, it should succesfully isolate the issue I'm currently stuck with in the proof.</p>",
        "id": 397142977,
        "sender_full_name": "Matias Heikkilä",
        "timestamp": 1697559269
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 397143263,
        "sender_full_name": "Matias Heikkilä",
        "timestamp": 1697559380
    },
    {
        "content": "<p>This too minimized. Maybe you would benefit from reading <a href=\"https://en.wikipedia.org/wiki/XY_problem\">#xy</a>.</p>",
        "id": 397143496,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1697559484
    },
    {
        "content": "<p>We could define the instance Lean asks, but this is almost surely not what you should be doing.</p>",
        "id": 397143603,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1697559520
    },
    {
        "content": "<p>Thanks, I guess my question really is, what is Lean trying to tell me here? And more generally, how to understand these kinds of errors better?</p>",
        "id": 397144307,
        "sender_full_name": "Matias Heikkilä",
        "timestamp": 1697559812
    },
    {
        "content": "<p>It is trying to tell you that the instance database that Lean is using when trying to go from a number literal to a Lean object of a given type does not contain any entry explaining how to take a 0 literal to an object with type <code>↑(Icc 0 1)</code></p>",
        "id": 397146296,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1697560575
    },
    {
        "content": "<p>And again the root cause is that you probably want to use <code>Icc 0 1</code> as a set and not as a type.</p>",
        "id": 397146555,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1697560693
    },
    {
        "content": "<p>Thanks, this actually also helped me to understand the comment by Alex above</p>",
        "id": 397146910,
        "sender_full_name": "Matias Heikkilä",
        "timestamp": 1697560841
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/113489-new-members/topic/0.20as.20a.20member.20of.20Icc.200.201/near/397146296\">said</a>:</p>\n<blockquote>\n<p>It is trying to tell you that the instance database that Lean is using when trying to go from a number literal to a Lean object of a given type does not contain any entry explaining how to take a 0 literal to an object with type <code>↑(Icc 0 1)</code></p>\n</blockquote>\n<p>I think Alex's point is that the database <em>does</em> contain this information, but you only imported some of the database</p>",
        "id": 397177289,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1697574246
    }
]