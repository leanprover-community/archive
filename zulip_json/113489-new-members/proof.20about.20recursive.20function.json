[
    {
        "content": "<p>Hi, I am having some trouble reasoning about a recursive function I wrote. I am realizing that maybe my understanding about recursive function proofs is lacking in general. So I have put together a little example adapted from FPIL, with the hope that someone can show me how one goes about this kind of thing:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">namespace</span> <span class=\"n\">mydiv</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">div</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ok</span> <span class=\"o\">:</span> <span class=\"n\">k</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span>\n  <span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"n\">k</span> <span class=\"k\">then</span>\n    <span class=\"mi\">0</span>\n  <span class=\"k\">else</span>\n    <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">div</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"n\">k</span> <span class=\"n\">ok</span>\n<span class=\"n\">decreasing_by</span> <span class=\"gr\">sorry</span> <span class=\"c1\">-- skip: already proved</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ok</span> <span class=\"o\">:</span> <span class=\"n\">k</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">div</span> <span class=\"n\">n</span> <span class=\"n\">k</span> <span class=\"n\">ok</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span> <span class=\"c1\">-- NEED HELP</span>\n<span class=\"kd\">end</span> <span class=\"n\">mydiv</span>\n</code></pre></div>",
        "id": 396112946,
        "sender_full_name": "Somo S.",
        "timestamp": 1697037776
    },
    {
        "content": "<p>I do see that <a href=\"https://github.com/leanprover/lean4/blob/master/src/Init/Data/Nat/Div.lean#L42-L54\">Nat.div_le_self</a> is a similar theorem that's already proved but I dont understand it. Dont understand <code>using Nat.strongInductionOn</code>, the <code>ind n ih</code> or the <code>cases (inferInstance : Decidable (0 &lt; k ∧ k ≤ n))</code> terms</p>",
        "id": 396113893,
        "sender_full_name": "Somo S.",
        "timestamp": 1697038055
    },
    {
        "content": "<p>so I'd rather focus on elementary technique for solving the above example (from scratch or \"as scratch as is reasonable\").. with the hope that I can generalize this to what I'm actually working on</p>",
        "id": 396114567,
        "sender_full_name": "Somo S.",
        "timestamp": 1697038242
    },
    {
        "content": "<p>I came up with</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ok</span> <span class=\"o\">:</span> <span class=\"n\">k</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">div</span> <span class=\"n\">n</span> <span class=\"n\">k</span> <span class=\"n\">ok</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">div</span>\n  <span class=\"n\">split_ifs</span> <span class=\"k\">with</span> <span class=\"n\">h</span>\n  <span class=\"bp\">·</span> <span class=\"n\">apply</span> <span class=\"n\">Nat.zero_le</span>\n  <span class=\"bp\">·</span> <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n    <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"n\">k</span> <span class=\"n\">ok</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Nat.le_sub_iff_add_le</span> <span class=\"n\">h</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">this</span>\n    <span class=\"n\">apply</span> <span class=\"n\">le_trans</span> <span class=\"bp\">?</span><span class=\"n\">_</span> <span class=\"n\">this</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">add_comm</span><span class=\"o\">]</span>\n    <span class=\"n\">gcongr</span>\n    <span class=\"n\">rwa</span> <span class=\"o\">[</span><span class=\"n\">Nat.succ_le</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>but it doesn't pass termination checking</p>",
        "id": 396114991,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1697038380
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"582386\">Somo S.</span> <a href=\"#narrow/stream/113489-new-members/topic/proof.20about.20recursive.20function/near/396114567\">said</a>:</p>\n<blockquote>\n<p>so I'd rather focus on elementary technique for solving the above example (from scratch or \"as scratch as is reasonable\").. with the hope that I can generalize this to what I'm actually working on</p>\n</blockquote>\n<p>thanks <span class=\"user-mention\" data-user-id=\"307953\">@Ruben Van de Velde</span>  .. actually, I'd like to avoid mathlib tactics. I dont want to depend on mathlib in my actual project if i can help it</p>",
        "id": 396116192,
        "sender_full_name": "Somo S.",
        "timestamp": 1697038717
    },
    {
        "content": "<p>If you mean <code>gcongr</code>, I replaced that by <code>show_term gcongr</code> which tells me <code>Try this: refine add_le_add_left ?bc (div (n - k) k ok)</code></p>",
        "id": 396117094,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1697038955
    },
    {
        "content": "<p>I suppose there are ways to avoid <code>split_ifs</code> as well</p>",
        "id": 396117220,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1697038993
    },
    {
        "content": "<p>yes and split_ifs, rwa</p>",
        "id": 396117281,
        "sender_full_name": "Somo S.",
        "timestamp": 1697039009
    },
    {
        "content": "<p>okay I will try the strategy of using show_term to get equivalents..</p>",
        "id": 396117351,
        "sender_full_name": "Somo S.",
        "timestamp": 1697039031
    },
    {
        "content": "<p><code>rwa</code> is from Std</p>",
        "id": 396117521,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1697039067
    },
    {
        "content": "<p>also can you explain what  <code>?_</code> does.. I am familiar with <code>_</code> but not <code>?_</code></p>",
        "id": 396117540,
        "sender_full_name": "Somo S.",
        "timestamp": 1697039072
    },
    {
        "content": "<p>But this is closer to mathlib-free:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ok</span> <span class=\"o\">:</span> <span class=\"n\">k</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">div</span> <span class=\"n\">n</span> <span class=\"n\">k</span> <span class=\"n\">ok</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">div</span>\n  <span class=\"n\">split_ifs</span> <span class=\"k\">with</span> <span class=\"n\">h</span>\n  <span class=\"bp\">·</span> <span class=\"n\">apply</span> <span class=\"n\">Nat.zero_le</span>\n  <span class=\"bp\">·</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">Nat.not_lt</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n    <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"n\">k</span> <span class=\"n\">ok</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Nat.le_sub_iff_add_le</span> <span class=\"n\">h</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">this</span>\n    <span class=\"n\">apply</span> <span class=\"n\">Nat.le_trans</span> <span class=\"bp\">?</span><span class=\"n\">_</span> <span class=\"n\">this</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Nat.add_comm</span><span class=\"o\">]</span>\n    <span class=\"n\">refine</span> <span class=\"n\">Nat.add_le_add_left</span> <span class=\"bp\">?</span><span class=\"n\">bc</span> <span class=\"o\">(</span><span class=\"n\">div</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"n\">k</span> <span class=\"n\">ok</span><span class=\"o\">)</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Nat.succ_le</span><span class=\"o\">]</span>\n    <span class=\"n\">assumption</span>\n<span class=\"n\">decreasing_by</span> <span class=\"gr\">sorry</span> <span class=\"c1\">-- skip: already proved</span>\n</code></pre></div>\n<p>(mostly using nat-specific lemmas rather than their generalizations)</p>",
        "id": 396117637,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1697039104
    },
    {
        "content": "<p><code>?_</code> means \"create a new goal to fill this hole\"</p>",
        "id": 396117704,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1697039122
    },
    {
        "content": "<p>is <code>split_ifs</code> similar to <code>by_cases</code> ?</p>",
        "id": 396118387,
        "sender_full_name": "Somo S.",
        "timestamp": 1697039326
    },
    {
        "content": "<p><code>split_ifs</code> looks at the <code>if</code> expressions in the goal (in this case) and creates new goals for the positive and negative cases and replaces the <code>if</code> term by the relevant case</p>",
        "id": 396118885,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1697039468
    },
    {
        "content": "<p>ok thanks. I will try to adapt this. Already useful to know I should have started by unfolding</p>",
        "id": 396119298,
        "sender_full_name": "Somo S.",
        "timestamp": 1697039577
    }
]