[
    {
        "content": "<p>How does one prove something like this</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Logic.Equiv.Defs</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">ogf</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">×</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"bp\">×</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">X</span><span class=\"o\">)</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">Ogf</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n<span class=\"o\">(</span><span class=\"n\">size</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">shape</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"n\">size</span><span class=\"o\">))</span>\n<span class=\"o\">(</span><span class=\"n\">data</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">size</span> <span class=\"bp\">→</span> <span class=\"n\">X</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">ogf_neq_Ogf</span> <span class=\"o\">{</span><span class=\"n\">c</span> <span class=\"n\">X</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">ogf</span> <span class=\"n\">c</span> <span class=\"n\">X</span> <span class=\"bp\">≠</span> <span class=\"n\">Ogf</span> <span class=\"n\">c</span> <span class=\"n\">X</span> <span class=\"o\">:=</span>\n<span class=\"k\">fun</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>The types are clearly equivalent</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">ogf_equiv_Ogf</span> <span class=\"o\">{</span><span class=\"n\">c</span> <span class=\"n\">X</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">ogf</span> <span class=\"n\">c</span> <span class=\"n\">X</span> <span class=\"bp\">≃</span> <span class=\"n\">Ogf</span> <span class=\"n\">c</span> <span class=\"n\">X</span> <span class=\"o\">:=</span>\n<span class=\"o\">⟨</span><span class=\"k\">fun</span> <span class=\"o\">⟨</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">d</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">⟨</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">d</span><span class=\"o\">⟩,</span>\n <span class=\"k\">fun</span> <span class=\"o\">⟨</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">d</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">⟨</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">d</span><span class=\"o\">⟩,</span>\n <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rfl</span><span class=\"o\">,</span>\n <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span>\n</code></pre></div>\n<p>but I've ran out of ideas how to prove they are not equal.</p>",
        "id": 401449131,
        "sender_full_name": "Slavomir Kaslev",
        "timestamp": 1699659468
    },
    {
        "content": "<p>How do you know they're not equal? In some models of Lean's type theory I should think they are equal. It's not possible to prove that Nat isn't equal to Int in Lean (for the same reason). In the cardinal model of Lean, Lean just has one type of each size, and then just makes different interfaces for that type to make the user believe that all these things are different,</p>",
        "id": 401451025,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1699661066
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110293\">Slavomir Kaslev</span> has marked this topic as resolved.</p>",
        "id": 401774974,
        "sender_full_name": "Notification Bot",
        "timestamp": 1699885748
    }
]