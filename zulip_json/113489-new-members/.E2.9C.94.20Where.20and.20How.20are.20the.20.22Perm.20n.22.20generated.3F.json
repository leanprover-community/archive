[
    {
        "content": "<p>We all know that \"Perm n\" consists of all possible permutations from 1 to n.<br>\nFor example, <br>\nWhen n=3, Perm n indicates that the set of possible permutations is {[1, 2, 3], [1, 3, 2], [2, 1, 3], [2, 3, 1], [3, 1, 2], [3, 2, 1]}</p>\n<p>But when I try to go to the definition of \"Perm\" , I only get this :</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- `Perm α` is the type of bijections from `α` to itself. -/</span>\n<span class=\"kd\">@[</span><span class=\"n\">reducible</span><span class=\"kd\">]</span>\n<span class=\"kd\">def</span> <span class=\"n\">Equiv.Perm</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">Equiv</span> <span class=\"n\">α</span> <span class=\"n\">α</span>\n</code></pre></div>\n<p>So,  where and How are the the set of possible permutations   generated?</p>",
        "id": 407652495,
        "sender_full_name": "chenjulang",
        "timestamp": 1702450153
    },
    {
        "content": "<p>They're not \"generated\". Alpha could be an uncountably infinite set. How would you \"generate\"  <code>perm \\R</code>? This is just a mathematical definition which you can prove theorems about.</p>",
        "id": 407664260,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1702454290
    },
    {
        "content": "<p>I originally wanted to use Perm n to generate some specific examples of combination problems. For example, a set can be generated to represent all permutations and combinations of n. This may allow some practical problems to be translated directly into lean</p>",
        "id": 407666314,
        "sender_full_name": "chenjulang",
        "timestamp": 1702455097
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"k\">#eval</span> <span class=\"bp\">@</span><span class=\"n\">Finset.univ</span> <span class=\"o\">(</span><span class=\"n\">Equiv.Perm</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"mi\">4</span><span class=\"o\">))</span> <span class=\"n\">_</span>\n</code></pre></div>",
        "id": 407788802,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1702492735
    },
    {
        "content": "<p>Output:</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>{0,\n {c[2, 3]},\n {c[1, 2]},\n {c[1, 2, 3]},\n {c[1, 3]},\n {c[1, 3, 2]},\n {c[0, 1]},\n {c[0, 1], c[2, 3]},\n {c[0, 1, 2]},\n {c[0, 1, 2, 3]},\n {c[0, 1, 3]},\n {c[0, 1, 3, 2]},\n {c[0, 2]},\n {c[0, 2, 3]},\n {c[0, 2, 1]},\n {c[0, 2, 3, 1]},\n {c[0, 2], c[1, 3]},\n {c[0, 2, 1, 3]},\n {c[0, 3]},\n {c[0, 3, 2]},\n {c[0, 3], c[1, 2]},\n {c[0, 3, 1, 2]},\n {c[0, 3, 1]},\n {c[0, 3, 2, 1]}}\n</code></pre></div>",
        "id": 407788832,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1702492748
    },
    {
        "content": "<p>Fantastic !!</p>",
        "id": 407842387,
        "sender_full_name": "chenjulang",
        "timestamp": 1702517124
    },
    {
        "content": "<p>But my macbook spends tons of time to build this two line...</p>",
        "id": 407843764,
        "sender_full_name": "chenjulang",
        "timestamp": 1702518028
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"665035\">chenjulang</span> has marked this topic as resolved.</p>",
        "id": 407844357,
        "sender_full_name": "Notification Bot",
        "timestamp": 1702518345
    },
    {
        "content": "<p><code>#eval @Finset.univ (Equiv.Perm (Fin 4)) fintypePerm</code> is apparently slightly faster than<br>\n<code>#eval @Finset.univ (Equiv.Perm (Fin 4)) equivFintype</code></p>",
        "id": 407845824,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1702519066
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"224323\">@Junyan Xu</span>  Thanks</p>",
        "id": 409110022,
        "sender_full_name": "chenjulang",
        "timestamp": 1703056909
    },
    {
        "content": "<p>Also , print it like this :</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">printPerms</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">List</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">List.map</span> <span class=\"n\">List.reverse</span> <span class=\"o\">(</span><span class=\"n\">List.permutations</span> <span class=\"o\">(</span><span class=\"n\">List.range</span> <span class=\"n\">n</span><span class=\"o\">))</span>\n<span class=\"k\">#eval</span> <span class=\"n\">printPerms</span> <span class=\"mi\">4</span>\n</code></pre></div>",
        "id": 409110298,
        "sender_full_name": "chenjulang",
        "timestamp": 1703056994
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/PFLdvOQ4GRj-FoxGK8KCXUWG/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/PFLdvOQ4GRj-FoxGK8KCXUWG/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/PFLdvOQ4GRj-FoxGK8KCXUWG/image.png\"></a></div>",
        "id": 409110392,
        "sender_full_name": "chenjulang",
        "timestamp": 1703057023
    }
]