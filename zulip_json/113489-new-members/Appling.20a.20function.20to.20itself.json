[
    {
        "content": "<p>I noticed functions like <code>def doTwice {α : Type} (f : α → α) (x: α) := f (f x)</code> can be applied to themselves <code>#check doTwice doTwice</code><br>\nIs there any way to type <code>def doSelf (f : ?) := f f</code> ? <br>\n<code>def doSelf (f : ({α : Type u} → (α → α) → α)) := f f</code> doesn't work. Why? (I've noticed <code>{α : Type u} → (α → α) → α) : Type (u+1)</code>)</p>",
        "id": 402903344,
        "sender_full_name": "Fejfo",
        "timestamp": 1700333617
    },
    {
        "content": "<p>The type of <code>doTwice</code> seems to be <code>{α : Type} → (α → α) → α → α</code>, not <code>{α : Type} → (α → α) → α</code></p>",
        "id": 402903763,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1700333989
    },
    {
        "content": "<p>If you fix the type of <code>f</code> in <code>doSelf</code>, then it almost works (you just need to tell it what to use for the implicit argument)</p>",
        "id": 402903865,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1700334042
    },
    {
        "content": "<p>This worked:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">doSelf</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">f</span> <span class=\"n\">f</span>\n<span class=\"kd\">def</span> <span class=\"n\">doTwice</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">f</span> <span class=\"bp\">∘</span> <span class=\"n\">f</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">doSelf</span> <span class=\"n\">doTwice</span> <span class=\"o\">(</span><span class=\"bp\">.^</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"mi\">2</span>\n</code></pre></div>",
        "id": 402905131,
        "sender_full_name": "Yongyi Chen",
        "timestamp": 1700334877
    },
    {
        "content": "<p>Fun fact:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#eval</span> <span class=\"n\">doTwice</span> <span class=\"n\">doTwice</span> <span class=\"n\">doTwice</span> <span class=\"n\">doTwice</span> <span class=\"n\">Nat.succ</span> <span class=\"mi\">1</span>\n</code></pre></div>\n<p>works and outputs 65537 while</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#eval</span> <span class=\"n\">doTwice</span> <span class=\"n\">doTwice</span> <span class=\"n\">doTwice</span> <span class=\"n\">doTwice</span> <span class=\"n\">doTwice</span> <span class=\"n\">Nat.succ</span> <span class=\"mi\">1</span>\n</code></pre></div>\n<p>causes Lean to crash!</p>",
        "id": 402905526,
        "sender_full_name": "Yongyi Chen",
        "timestamp": 1700335194
    },
    {
        "content": "<p>Another fun fact, this is a valid definition too:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">doSelf2</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">f</span> <span class=\"n\">f</span>\n</code></pre></div>\n<p>but one can't apply it to doTwice because <code>doSelf2</code> expects a family of functions <code>α -&gt; α</code> for every type α, and doTwice is not such a family -- it's only a family of functions <code>(α -&gt; α) -&gt; (α -&gt; α)</code>, in other words, a family of functions <code>α -&gt; α</code> only for those <code>α</code> which happen to be of type <code>β -&gt; β</code> for some type <code>β</code>.</p>\n<p>In fact I wonder if anyone can think of a family <code>{α : Type*} → α → α</code> besides <code>id</code>.</p>",
        "id": 402906924,
        "sender_full_name": "Yongyi Chen",
        "timestamp": 1700335983
    },
    {
        "content": "<p>In Wadler's \"theorems for free\" paper he shows that in a certain kind of type theory, <code>id</code> is the only inhabitant of that type. However in Lean you can just make things like \"if alpha = Nat then fun n \\mapsto 37 else id\"</p>",
        "id": 402907378,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1700336348
    },
    {
        "content": "<p>I did manage to do something like that!</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">doSelf2</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">f</span> <span class=\"n\">f</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">α</span>\n  <span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">=</span> <span class=\"n\">ℕ</span> <span class=\"k\">then</span>\n    <span class=\"n\">subst</span> <span class=\"n\">h</span>\n    <span class=\"n\">exact</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">37</span>\n  <span class=\"k\">else</span>\n    <span class=\"n\">exact</span> <span class=\"n\">id</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">g</span> <span class=\"mi\">4</span> <span class=\"bp\">=</span> <span class=\"mi\">37</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"n\">dite_eq_ite</span><span class=\"o\">,</span> <span class=\"n\">ite_true</span><span class=\"o\">]</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">doSelf2</span> <span class=\"n\">g</span> <span class=\"mi\">4</span> <span class=\"bp\">=</span> <span class=\"mi\">37</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">≠</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"n\">doSelf2</span><span class=\"o\">,</span> <span class=\"n\">this</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>I just have an issue with how to prove that <code>(ℕ → ℕ) ≠ ℕ</code>. Is that even provable in Lean?</p>",
        "id": 402908630,
        "sender_full_name": "Yongyi Chen",
        "timestamp": 1700337441
    },
    {
        "content": "<p>If two types have different cardinalities then you can prove they're unequal in Lean (and if they don't then you can't). So here you're OK here because Nat -&gt; Nat is uncountable and Nat is countable.</p>",
        "id": 402908855,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1700337633
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 402909117,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1700337782
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"470149\">@Joachim Breitner</span> <code>Type</code> doesn't have decidable equality, so at least you can't write that <code>if</code> statement without the definition being <code>noncomputable</code>. (At least, I don't think you can.)</p>",
        "id": 402909320,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1700337955
    },
    {
        "content": "<p>Interesting!</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">doSelf2</span> <span class=\"n\">g</span> <span class=\"mi\">4</span> <span class=\"bp\">=</span> <span class=\"mi\">37</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">≠</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">apply_fun</span> <span class=\"n\">Cardinal.mk</span>\n    <span class=\"n\">simp</span>\n    <span class=\"n\">exact</span> <span class=\"n\">ne_of_gt</span> <span class=\"n\">Cardinal.aleph0_lt_continuum</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"n\">doSelf2</span><span class=\"o\">,</span> <span class=\"n\">this</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 402909884,
        "sender_full_name": "Yongyi Chen",
        "timestamp": 1700338369
    },
    {
        "content": "<p>That makes sense. I was expecting that eliminating into Type from something that feels Prop-y (Types themselves) would not work, but this is ”just” using classical logic to decide, so that's why it works?</p>",
        "id": 402911229,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1700339332
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/Appling.20a.20function.20to.20itself/near/402907378\">said</a>:</p>\n<blockquote>\n<p>In Wadler's \"theorems for free\" paper he shows that in a certain kind of type theory, <code>id</code> is the only inhabitant of that type. However in Lean you can just make things like \"if alpha = Nat then fun n \\mapsto 37 else id\"</p>\n</blockquote>\n<p>The proof I have seen of this property relied on a very strong semantic model of system F types.</p>",
        "id": 402943856,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1700360933
    },
    {
        "content": "<p>I just checked the paper and it doesn't say anything about dependent types at all</p>",
        "id": 402944253,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1700361207
    }
]