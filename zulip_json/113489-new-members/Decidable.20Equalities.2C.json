[
    {
        "content": "<p>I read through <a href=\"https://hrmacbeth.github.io/math2001/10_Relations.html\">https://hrmacbeth.github.io/math2001/10_Relations.html</a> to get a feel for relations in Lean.  The problem that I'm having is that Lean can't seem to check equality between two structs unless I first build a framework for equality.  In continuation of a previous post that I made, consider the simple example of a structure:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">Vertex</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>I want to be able to say that for u, v of type Vertex that u = v when <a href=\"http://u.name\">u.name</a> = <a href=\"http://v.name\">v.name</a>.  Lean apparently has the machinery to be able to check that strings are equivalent, but I don't know how to extend this to a structure.  I tried to create a Prop:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">Vertex.eq</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">Vertex</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"n\">u.name</span> <span class=\"bp\">=</span> <span class=\"n\">v.name</span>\n</code></pre></div>\n<p>But then realized that I needed something of a type similar to DecidableEq.  So then I tried something like: </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">Vertex.decEq</span> <span class=\"o\">:</span> <span class=\"n\">DecidableEq</span> <span class=\"n\">Vertex</span> <span class=\"o\">:=</span>\n  <span class=\"k\">fun</span> <span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">decEq</span> <span class=\"n\">u.name</span> <span class=\"n\">v.name</span>\n</code></pre></div>\n<p>but I had problems with decEq and a fuzzy idea of what is going on with DecidableEq.  Can anyone help me out and give me some insight into Decidable types in Lean?  I didn't seem to find anything about Decidable types in the tutorial that I listed at the beginning.</p>",
        "id": 358330963,
        "sender_full_name": "Jonathan Whitehead",
        "timestamp": 1684108363
    },
    {
        "content": "<p>There's at least a metaprogram to generate a <code>DecidableEq</code> instance for you in many cases:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">Vertex</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">)</span>\n  <span class=\"n\">deriving</span> <span class=\"n\">DecidableEq</span>\n\n<span class=\"bp\">#</span><span class=\"n\">synth</span> <span class=\"n\">DecidableEq</span> <span class=\"n\">Vertex</span>\n<span class=\"c1\">-- Succeeds, and it says this is the instance:</span>\n<span class=\"c1\">-- fun a b ↦ instDecidableEqVertex a b</span>\n</code></pre></div>",
        "id": 358331479,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1684108850
    },
    {
        "content": "<p>Something you should know about equality is that every type comes with an equality relation. It's not something you have to define yourself. In fact, the <code>Vertex.eq</code> you defined is equivalent to the usual one:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">Vertex.eq</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">Vertex</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"n\">u.name</span> <span class=\"bp\">=</span> <span class=\"n\">v.name</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">Vertex.eq_iff</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">Vertex</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">u</span> <span class=\"bp\">=</span> <span class=\"n\">v</span> <span class=\"bp\">↔</span> <span class=\"n\">Vertex.eq</span> <span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">cases</span> <span class=\"n\">u</span><span class=\"bp\">;</span> <span class=\"n\">cases</span> <span class=\"n\">v</span><span class=\"bp\">;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">Vertex.eq</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 358332369,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1684109358
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/113489-new-members/topic/Decidable.20Equalities.2C/near/358331479\">said</a>:</p>\n<blockquote>\n<p>There's at least a metaprogram to generate a <code>DecidableEq</code> instance for you in many cases:</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">Vertex</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">)</span>\n  <span class=\"n\">deriving</span> <span class=\"n\">DecidableEq</span>\n\n<span class=\"bp\">#</span><span class=\"n\">synth</span> <span class=\"n\">DecidableEq</span> <span class=\"n\">Vertex</span>\n<span class=\"c1\">-- Succeeds, and it says this is the instance:</span>\n<span class=\"c1\">-- fun a b ↦ instDecidableEqVertex a b</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>Well, that seems like a nice little feature.  But what if the struct had more fields and equality was only determined by one of them?  Is there same way to specify which field constitutes equality?</p>",
        "id": 358332542,
        "sender_full_name": "Jonathan Whitehead",
        "timestamp": 1684109490
    },
    {
        "content": "<p>Maybe a way to understand the built-in equality relation is what's more-or-less it's definition: \"<code>u = v</code> if and only if whenever something is true for <code>u</code> then it is also true when <code>v</code> is substituted for <code>u</code>\". This is a nice definition mathematically, but it doesn't come with any sort of way to check whether <code>u = v</code> holds -- you have to find some statement whether either substitution succeeds or fails.</p>",
        "id": 358332628,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1684109541
    },
    {
        "content": "<p>This is where decidability comes in. A proposition <code>p</code> is called decidable if there's some program that you can evaluate that tells you whether the proposition is <code>True</code> or <code>False</code>. A type has decidable equality if for all <code>u</code> and <code>v</code> the proposition <code>u = v</code> is decidable.</p>",
        "id": 358332713,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1684109625
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"472585\">Jonathan Whitehead</span> <a href=\"#narrow/stream/113489-new-members/topic/Decidable.20Equalities.2C/near/358332542\">said</a>:</p>\n<blockquote>\n<p>But what if the struct had more fields and equality was only determined by one of them?</p>\n</blockquote>\n<p>If you want to adjust the definition of equality for a given type, that's what quotient types are for. You can use <code>Quot</code> to make more things equal (by for example forgetting about everything but a particular field).</p>",
        "id": 358333000,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1684109780
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/113489-new-members/topic/Decidable.20Equalities.2C/near/358332713\">said</a>:</p>\n<blockquote>\n<p>This is where decidability comes in. A proposition <code>p</code> is called decidable if there's some program that you can evaluate that tells you whether the proposition is <code>True</code> or <code>False</code>. A type has decidable equality if for all <code>u</code> and <code>v</code> the proposition <code>u = v</code> is decidable.</p>\n</blockquote>\n<p>This is what I thought was going on.  I was trying to define the program to evaluate the proposition but it appears that <code>deriving DecidableEq</code> does it for you.</p>",
        "id": 358333238,
        "sender_full_name": "Jonathan Whitehead",
        "timestamp": 1684109938
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/113489-new-members/topic/Decidable.20Equalities.2C/near/358333000\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"472585\">Jonathan Whitehead</span> <a href=\"#narrow/stream/113489-new-members/topic/Decidable.20Equalities.2C/near/358332542\">said</a>:</p>\n<blockquote>\n<p>But what if the struct had more fields and equality was only determined by one of them?</p>\n</blockquote>\n<p>If you want to adjust the definition of equality for a given type, that's what quotient types are for. You can use <code>Quot</code> to make more things equal (by for example forgetting about everything but a particular field).</p>\n</blockquote>\n<p>Great, is there some kind of source for this?  Or do I just need to keep digging into the repo to figure out how to use a lot of this stuff?  What do you recommend?</p>",
        "id": 358333291,
        "sender_full_name": "Jonathan Whitehead",
        "timestamp": 1684109974
    },
    {
        "content": "<p>As a working example of how to use quotient types consider:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">Edge</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">edge</span> <span class=\"o\">:</span> <span class=\"n\">Vertex</span> <span class=\"bp\">×</span> <span class=\"n\">Vertex</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>For edges (u,v) and (x,y), we want to say that the edges are equal when u=x and v=y, but we don't really care if they have the same labels.  Is there some modification of <code>`deriving DecidableEq</code> ` that would allow me to do this?</p>",
        "id": 358333991,
        "sender_full_name": "Jonathan Whitehead",
        "timestamp": 1684110346
    },
    {
        "content": "<p>I probably learned most things by using Zulip search (it's got a lot of \"unwritten documentation\"), looking at the <a href=\"https://leanprover.github.io/reference/\">Lean 3 documentation</a>, <a href=\"https://leanprover.github.io/theorem_proving_in_lean/\">#tpil</a>, digging through source, and working on mathlib.</p>",
        "id": 358334040,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1684110363
    },
    {
        "content": "<p>Oh, thanks!  I didn't even think to search Zulip, I've just been digging through the git repo for Mathlib.</p>",
        "id": 358334185,
        "sender_full_name": "Jonathan Whitehead",
        "timestamp": 1684110437
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"472585\">Jonathan Whitehead</span> <a href=\"#narrow/stream/113489-new-members/topic/Decidable.20Equalities.2C/near/358333991\">said</a>:</p>\n<blockquote>\n<p>Is there some modification of <code>`deriving DecidableEq</code> ` that would allow me to do this?</p>\n</blockquote>\n<p>No -- if two <code>Edge</code>s have different labels, then they are distinguishable, so they're not equal.</p>",
        "id": 358334335,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1684110504
    },
    {
        "content": "<p>Could we <a href=\"https://en.wikipedia.org/wiki/XY_problem\">#xy</a> a bit here? You can't mess with equality, but you can definitely create your own relations. What do you want to do with them? Prove things? or write programs that compute using the truth value?</p>",
        "id": 358334466,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1684110569
    },
    {
        "content": "<p>There's also <code>BEq</code> with the <code>==</code> relation, which is <code>Bool</code>-valued rather than <code>Prop</code>-valued, and you're free to make it work however you want. You just don't get much in the way of proofs.</p>",
        "id": 358334584,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1684110605
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/113489-new-members/topic/Decidable.20Equalities.2C/near/358334466\">said</a>:</p>\n<blockquote>\n<p>Could we <a href=\"https://en.wikipedia.org/wiki/XY_problem\">#xy</a> a bit here? You can't mess with equality, but you can definitely create your own relations. What do you want to do with them? Prove things? or write programs that compute using the truth value?</p>\n</blockquote>\n<p>Let's suppose that we want to be able to build programs/algorithms and then prove that they're correct.   So I suppose we would want to do both, prove things about them and write programs.</p>",
        "id": 358334991,
        "sender_full_name": "Jonathan Whitehead",
        "timestamp": 1684110753
    },
    {
        "content": "<p>It seems like you're saying that what I was suggesting to do would create more problems than it solves.</p>",
        "id": 358335087,
        "sender_full_name": "Jonathan Whitehead",
        "timestamp": 1684110798
    },
    {
        "content": "<p>Here's an example of <code>Quot</code> (though I'll warn you that usually you'd use <code>Quotient</code>, which is a more convenient wrapper around <code>Quot</code>):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">Vertex</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">)</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">Edge'</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">edge</span> <span class=\"o\">:</span> <span class=\"n\">Vertex</span> <span class=\"bp\">×</span> <span class=\"n\">Vertex</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Edge'.eq</span> <span class=\"o\">(</span><span class=\"n\">e1</span> <span class=\"n\">e2</span> <span class=\"o\">:</span> <span class=\"n\">Edge'</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"n\">e1.edge</span> <span class=\"bp\">=</span> <span class=\"n\">e2.edge</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Edge</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span> <span class=\"n\">Quot</span> <span class=\"n\">Edge'.eq</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Edge.mk</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">Edge'</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Edge</span> <span class=\"o\">:=</span> <span class=\"n\">Quot.mk</span> <span class=\"n\">Edge'.eq</span> <span class=\"n\">e</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">Edge.eq_iff</span> <span class=\"o\">(</span><span class=\"n\">e1</span> <span class=\"n\">e2</span> <span class=\"o\">:</span> <span class=\"n\">Edge'</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">Edge.mk</span> <span class=\"n\">e1</span> <span class=\"bp\">=</span> <span class=\"n\">Edge.mk</span> <span class=\"n\">e2</span> <span class=\"bp\">↔</span> <span class=\"n\">e1.edge</span> <span class=\"bp\">=</span> <span class=\"n\">e2.edge</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span> <span class=\"c1\">-- not so hard, but it'd be one line with Quotient</span>\n</code></pre></div>\n<p>But this is almost surely not what you want. This <code>Edge</code> type is equivalent to</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">Edge</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">edge</span> <span class=\"o\">:</span> <span class=\"n\">Vertex</span> <span class=\"bp\">×</span> <span class=\"n\">Vertex</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>When we form the quotient with <code>Quot</code> we said we wanted a type where edges are equal if their <code>edge</code> fields are equal, and that means that <code>name</code> is effectively something we no longer have access to. It's not exactly erased, but Lean will prevent us from ever writing any computation that can distinguish <code>Edge</code>s according to their <code>name</code> in any way.</p>",
        "id": 358335774,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1684111083
    },
    {
        "content": "<p>Thanks for the example, I see how <code>Quot</code> is being used now, but I guess the take-away is that we should take care to define our structs in such a way that we don't have unnecessary fields.   With my limited knowledge of these kinds of objects I suppose that I'll have to exercise a little trust in that we typically don't want to do this.   Thanks for the help!  I learned a lot.</p>",
        "id": 358336731,
        "sender_full_name": "Jonathan Whitehead",
        "timestamp": 1684111438
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"472585\">Jonathan Whitehead</span> <a href=\"#narrow/stream/113489-new-members/topic/Decidable.20Equalities.2C/near/358335087\">said</a>:</p>\n<blockquote>\n<p>It seems like you're saying that what I was suggesting to do would create more problems than it solves.</p>\n</blockquote>\n<p>Lean sort of forces you to take equality seriously. If you can distinguish two terms of a type in any way (i.e., if you can't just substitute one for the other) then they're simply not equal. If two edges have different name labels, then they are distinguishable, so they are not equal. You could either make your own relation (like use <code>BEq</code> and prove theorems about your definition to make it useful), or you could accept that the <code>name</code> field is significant, or you could remove the <code>name</code> field because it would ruin the theory.</p>\n<p>Or, if you want the <code>name</code> field only for pretty printing, say, I think you could do a hack where you use <code>Quot</code> and then write <code>unsafe</code> code to extract the <code>name</code> field while printing. A downside is that then you'll have to deal with quotients, which you shouldn't avoid, but it's easier if you don't have to use a <code>Quot</code>.</p>",
        "id": 358336855,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1684111473
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/113489-new-members/topic/Decidable.20Equalities.2C/near/358336855\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"472585\">Jonathan Whitehead</span> <a href=\"#narrow/stream/113489-new-members/topic/Decidable.20Equalities.2C/near/358335087\">said</a>:</p>\n<blockquote>\n<p>It seems like you're saying that what I was suggesting to do would create more problems than it solves.</p>\n</blockquote>\n<p>Lean sort of forces you to take equality seriously. If you can distinguish two terms of a type in any way (i.e., if you can't just substitute one for the other) then they're simply not equal. If two edges have different name labels, then they are distinguishable, so they are not equal. You could either make your own relation (like use <code>BEq</code> and prove theorems about your definition to make it useful), or you could accept that the <code>name</code> field is significant, or you could remove the <code>name</code> field because it would ruin the theory.</p>\n<p>Or, if you want the <code>name</code> field only for pretty printing, say, I think you could do a hack where you use <code>Quot</code> and then write <code>unsafe</code> code to extract the <code>name</code> field while printing.</p>\n</blockquote>\n<p>Yeah, I was thinking of the name field as being something that's just for user friendly support like printing.  But in my own curiosity I just imagined that there would be structs that we would want to call \"equal\" in a certain \"context\".   Like, maybe a struct for a Point with the two fields \"label\" and \"(x,y,z)\".  We might have point A and point B with (1,2,3) and (1,2,4).  We might want to make some equality statement about how these two points coincide (are equal in some sense) in a plane.  It seems like you would either use the Quot type or you would just define a new struct for (x,y) coordinates and some sort of framework that forgets the third parameter of (x,y,z).</p>",
        "id": 358337727,
        "sender_full_name": "Jonathan Whitehead",
        "timestamp": 1684111767
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"472585\">Jonathan Whitehead</span> <a href=\"#narrow/stream/113489-new-members/topic/Decidable.20Equalities.2C/near/358336731\">said</a>:</p>\n<blockquote>\n<p>I guess the take-away is that we should take care to define our structs in such a way that we don't have unnecessary fields.</p>\n</blockquote>\n<p>Yeah, part of the design work you need to do in formalization is to make sure equality is what you think it is. (For example, <code>SimpleGraph.Subgraph</code> took a couple of iterations before there was exactly one subgraph per <code>Subgraph</code>. If I remember correctly, one version allowed vertices outside the subgraph to be adjacent, which doesn't matter if you're only working with vertices in the subgraph, but then the cardinality of <code>Subgraph</code> is wrong.)</p>",
        "id": 358337748,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1684111775
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"472585\">Jonathan Whitehead</span> <a href=\"#narrow/stream/113489-new-members/topic/Decidable.20Equalities.2C/near/358337727\">said</a>:</p>\n<blockquote>\n<p>It seems like you would either use the Quot type or you would just define a new struct for (x,y) coordinates and some sort of framework that forgets the third parameter of (x,y,z).</p>\n</blockquote>\n<p>Yeah, you don't have to literally use <code>Quot</code> to form quotient types. The best kind of quotient is when you can write down a convenient type that's equivalent to the quotient. (Quotients in math are defined using universal properties after all, and not by a particular construction.)</p>",
        "id": 358338114,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1684111898
    },
    {
        "content": "<p>But it's worth knowing that at runtime, a <code>Quot</code> is still the original type, so all the additional \"forgotten\" data is still there.</p>",
        "id": 358338340,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1684111951
    },
    {
        "content": "<p>It's just that the surrounding theory prevents you from making use of it, in the sense that you have to keep proving that functions you define on a quotient give the same result even if you substitute one value for another that's related by your new equality relation (see <code>Quot.lift</code>)</p>",
        "id": 358338715,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1684112076
    },
    {
        "content": "<p>Here's a <code>DecidableEq</code> instance by the way:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">Vertex</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">)</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">Vertex.decEq</span> <span class=\"o\">:</span> <span class=\"n\">DecidableEq</span> <span class=\"n\">Vertex</span> <span class=\"o\">:=</span>\n  <span class=\"k\">fun</span> <span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">u.name</span> <span class=\"bp\">=</span> <span class=\"n\">v.name</span> <span class=\"k\">then</span>\n      <span class=\"n\">isTrue</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">revert</span> <span class=\"n\">h</span><span class=\"bp\">;</span> <span class=\"n\">cases</span> <span class=\"n\">u</span><span class=\"bp\">;</span> <span class=\"n\">cases</span> <span class=\"n\">v</span><span class=\"bp\">;</span> <span class=\"n\">simp</span><span class=\"o\">)</span>\n    <span class=\"k\">else</span>\n      <span class=\"n\">isFalse</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">intro</span> <span class=\"n\">h'</span><span class=\"bp\">;</span> <span class=\"n\">subst_vars</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">h</span> <span class=\"n\">rfl</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 358339884,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1684112474
    },
    {
        "content": "<p>think of <code>isTrue</code> and <code>isFalse</code> being fancy booleans that come with a proof of their truth</p>",
        "id": 358339949,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1684112494
    },
    {
        "content": "<p>(at runtime, this proof is erased, but at proving time it's important for correctness)</p>",
        "id": 358339995,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1684112510
    },
    {
        "content": "<p><code>if</code> statements are one of the main interfaces to use <code>Decidable</code> instances. There's already a <code>DecidableEq String</code> instance, so I'm able to do this <code>if</code> without Lean complaining. The <code>h :</code> notation is a way to grab ahold of a proof or disproof of the condition</p>",
        "id": 358340239,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1684112587
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/113489-new-members/topic/Decidable.20Equalities.2C/near/358339884\">said</a>:</p>\n<blockquote>\n<p>Here's a <code>DecidableEq</code> instance by the way:</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">Vertex</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">)</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">Vertex.decEq</span> <span class=\"o\">:</span> <span class=\"n\">DecidableEq</span> <span class=\"n\">Vertex</span> <span class=\"o\">:=</span>\n  <span class=\"k\">fun</span> <span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">u.name</span> <span class=\"bp\">=</span> <span class=\"n\">v.name</span> <span class=\"k\">then</span>\n      <span class=\"n\">isTrue</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">revert</span> <span class=\"n\">h</span><span class=\"bp\">;</span> <span class=\"n\">cases</span> <span class=\"n\">u</span><span class=\"bp\">;</span> <span class=\"n\">cases</span> <span class=\"n\">v</span><span class=\"bp\">;</span> <span class=\"n\">simp</span><span class=\"o\">)</span>\n    <span class=\"k\">else</span>\n      <span class=\"n\">isFalse</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">intro</span> <span class=\"n\">h'</span><span class=\"bp\">;</span> <span class=\"n\">subst_vars</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">h</span> <span class=\"n\">rfl</span><span class=\"o\">)</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>I actually had a very close implementation of this but for <code>isTrue</code> I couldn't figure out the appropriate tactics.  I needed <code>revert h</code>.  I felt like I was way off-base and ultimately abandoned finding the correct tactics.</p>",
        "id": 358341166,
        "sender_full_name": "Jonathan Whitehead",
        "timestamp": 1684112926
    },
    {
        "content": "<p>I also found it weird that within the proof, Lean didn't recognize refl.  But in the Natural Number game, you use refl.  Is this a new change?</p>",
        "id": 358341392,
        "sender_full_name": "Jonathan Whitehead",
        "timestamp": 1684113006
    },
    {
        "content": "<p>Also, I tried to use rw h but Lean complained and made me use rw [h].</p>",
        "id": 358341489,
        "sender_full_name": "Jonathan Whitehead",
        "timestamp": 1684113054
    },
    {
        "content": "<p>(You don't really need <code>revert</code> here. I just know it'll set up <code>simp</code> to be able to finish it off quick. That way I don't need <code>simp at h; simp [h]</code> or something like that.)</p>",
        "id": 358341601,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1684113102
    },
    {
        "content": "<p>Lean 3 -&gt; Lean 4 has <code>refl</code> -&gt; <code>rfl</code> and <code>rw h</code> -&gt; <code>rw [h]</code></p>",
        "id": 358341691,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1684113125
    },
    {
        "content": "<p>Outside of tactics, <code>refl</code> takes an explicit argument, vs <code>rfl</code> which doesn't.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#check</span> <span class=\"n\">refl</span> <span class=\"c1\">-- ∀ {α : Type u} {r : α → α → Prop} [inst : IsRefl α r] (a : α), r a a</span>\n<span class=\"k\">#check</span> <span class=\"n\">rfl</span> <span class=\"c1\">-- ∀ {α : Sort u} {a : α}, a = a</span>\n</code></pre></div>",
        "id": 358341825,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1684113185
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/113489-new-members/topic/Decidable.20Equalities.2C/near/358336855\">said</a>:</p>\n<blockquote>\n<p>Or, if you want the <code>name</code> field only for pretty printing, say, I think you could do a hack where you use <code>Quot</code> and then write <code>unsafe</code> code to extract the <code>name</code> field while printing. A downside is that then you'll have to deal with quotients, which you shouldn't avoid, but it's easier if you don't have to use a <code>Quot</code>.</p>\n</blockquote>\n<p>You can remove most of this pain with</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">Edge</span> <span class=\"n\">where</span>\n    <span class=\"n\">name</span> <span class=\"o\">:</span> <span class=\"n\">Trunc</span> <span class=\"n\">String</span>\n    <span class=\"n\">edge</span> <span class=\"o\">:</span> <span class=\"n\">Vertex</span> <span class=\"bp\">×</span> <span class=\"n\">Vertex</span>\n</code></pre></div>",
        "id": 358384961,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684137933
    },
    {
        "content": "<p>Here the quotient is around just one field of the structure rather than the whole thing.</p>",
        "id": 358385294,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684138006
    }
]