[
    {
        "content": "<p>Hi,  i am trying to rewrite some terms to show that they are equal, however i fail to find how to do it.</p>\n<p>I am trying to rewrite <code>P x (n1 + 1 + a) y z</code>  into <code>P x (n1 + Nat.succ a) y z</code><br>\nThe implementation of P should be irrelevant for this<br>\nI have a similar problem when trying to show that <code>n = m+(n-m)</code> with <code>(m &lt; n)</code>, n m are Integers<br>\nAny ideas on which rules i can use for that ?</p>\n<p>Is there a similar auto solver like tauto but for such simple arithmetic questions ?</p>\n<p>Thanks in advance :D</p>",
        "id": 386223892,
        "sender_full_name": "HenrikT",
        "timestamp": 1692538501
    },
    {
        "content": "<p>I suspect that</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">add_assoc</span><span class=\"o\">,</span> <span class=\"n\">add_comm</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">Nat.succ_eq_add_one</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>might work (untested).</p>",
        "id": 386226043,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1692540001
    },
    {
        "content": "<p>ok, thanks that worked.</p>\n<p>In the second case however how can i resolve that, as subtraction is not associative. <br>\nI also cannot rw the term to <code>n = n + (-m + m)</code> as <code>-m</code> is not an integer<br>\nAny ideas ?</p>",
        "id": 386230465,
        "sender_full_name": "HenrikT",
        "timestamp": 1692543122
    },
    {
        "content": "<p>Does <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Nat.add_sub_assoc#doc\">docs#Nat.add_sub_assoc</a> exits? [EDIT: it seems so, it may be what you want!]</p>",
        "id": 386231927,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1692543926
    },
    {
        "content": "<p>Note that there is also <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Nat.add_sub_cancel%27#doc\">docs#Nat.add_sub_cancel'</a>.  If you posted a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>, it would be easier to know what can be useful.</p>",
        "id": 386233257,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1692544205
    },
    {
        "content": "<p>there isn't much of a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> but what i am trying to proof is the following:<br>\n<code>theorem existsAEqualizingLt (n m : ℕ) : m &lt; n → ∃ a, n = m + a := by sorry</code></p>\n<p>Edit: Thank you for your help <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Nat.add_sub_cancel%27#doc\">docs#Nat.add_sub_cancel'</a> did the joy :D</p>\n<p>FYI: the proof looks as follows:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">existsAEqualizingLt</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"bp\">∃</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h</span>\n  <span class=\"n\">use</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">-</span><span class=\"n\">m</span><span class=\"o\">)</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Nat.add_sub_cancel'</span><span class=\"o\">]</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Nat.lt_iff_le_and_ne</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n  <span class=\"n\">exact</span> <span class=\"n\">h.1</span>\n</code></pre></div>",
        "id": 386235183,
        "sender_full_name": "HenrikT",
        "timestamp": 1692544987
    },
    {
        "content": "<p>In case you are curious about how to use the available results, you can also prove your theorem using <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=exists_add_of_le#doc\">docs#exists_add_of_le</a>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Nat.Order.Basic</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">existsAEqualizingLt</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"bp\">∃</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h</span>\n  <span class=\"n\">exact</span> <span class=\"n\">exists_add_of_le</span> <span class=\"n\">h.le</span>\n</code></pre></div>\n<p>and, in fact, the whole proof can be shortened to </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">existsAEqualizingLt</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"bp\">∃</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"k\">fun</span> <span class=\"n\">h</span> <span class=\"bp\">↦</span> <span class=\"n\">exists_add_of_le</span> <span class=\"n\">h.le</span>\n</code></pre></div>",
        "id": 386236687,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1692545961
    }
]