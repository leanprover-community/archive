[
    {
        "content": "<p>I am trying to implement an example originally demonstrated in Isabelle <a href=\"https://gist.github.com/ept/b6872fc541a68a321a26198b53b3896b#file-only_fives-thy-L1\">here</a></p>\n<p>I am stuck at the induction step, here is what I got so far</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">onlyFives</span> <span class=\"o\">(</span><span class=\"n\">xs</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"n\">xs</span> <span class=\"bp\">=</span> <span class=\"o\">[]</span> <span class=\"bp\">∨</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">),</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">xs</span> <span class=\"bp\">→</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">5</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">only_fives_concat</span> <span class=\"o\">(</span><span class=\"n\">xs</span> <span class=\"n\">ys</span><span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">onlyFives</span> <span class=\"n\">xs</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hy</span> <span class=\"o\">:</span> <span class=\"n\">onlyFives</span> <span class=\"n\">ys</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">onlyFives</span> <span class=\"o\">(</span><span class=\"n\">xs</span> <span class=\"bp\">++</span> <span class=\"n\">ys</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">intros</span>\n    <span class=\"n\">induction</span> <span class=\"n\">ys</span>\n    <span class=\"n\">case</span> <span class=\"n\">nil</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"k\">have</span> <span class=\"n\">absorb</span><span class=\"o\">:</span> <span class=\"n\">xs</span> <span class=\"bp\">=</span> <span class=\"n\">xs</span> <span class=\"bp\">++</span> <span class=\"o\">[]</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span>\n      <span class=\"n\">exact</span> <span class=\"n\">absorb</span> <span class=\"bp\">▸</span> <span class=\"n\">hx</span>\n    <span class=\"n\">case</span> <span class=\"n\">cons</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"n\">intros</span>\n      <span class=\"n\">rename_i</span> <span class=\"n\">head</span> <span class=\"n\">tail</span> <span class=\"n\">h</span>\n      <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 360363486,
        "sender_full_name": "Hossam Karim",
        "timestamp": 1684785361
    },
    {
        "content": "<p>To make things easier for you,</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">xs</span> <span class=\"bp\">=</span> <span class=\"o\">[]</span> <span class=\"bp\">∨</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">),</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">xs</span> <span class=\"bp\">→</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">5</span>\n</code></pre></div>\n<p>is the same as</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">),</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">xs</span> <span class=\"bp\">→</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">5</span>\n</code></pre></div>",
        "id": 360364278,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684785622
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.List.Lemmas</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">onlyFives</span> <span class=\"o\">(</span><span class=\"n\">xs</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"n\">xs</span> <span class=\"bp\">=</span> <span class=\"o\">[]</span> <span class=\"bp\">∨</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">),</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">xs</span> <span class=\"bp\">→</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">5</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">onlyFives_iff</span> <span class=\"o\">:</span> <span class=\"n\">onlyFives</span> <span class=\"n\">xs</span> <span class=\"bp\">↔</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">),</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">xs</span> <span class=\"bp\">→</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">5</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">xs</span> <span class=\"bp\">=</span> <span class=\"o\">[]</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">onlyFives</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">onlyFives_nil</span> <span class=\"o\">:</span> <span class=\"n\">onlyFives</span> <span class=\"o\">[]</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">onlyFives_iff</span><span class=\"o\">]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">onlyFives_cons</span> <span class=\"o\">:</span> <span class=\"n\">onlyFives</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">::</span> <span class=\"n\">xs</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">5</span> <span class=\"bp\">∧</span> <span class=\"n\">onlyFives</span> <span class=\"n\">xs</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">onlyFives_iff</span><span class=\"o\">]</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">only_fives_concat</span> <span class=\"o\">(</span><span class=\"n\">xs</span> <span class=\"n\">ys</span><span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">onlyFives</span> <span class=\"n\">xs</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hy</span> <span class=\"o\">:</span> <span class=\"n\">onlyFives</span> <span class=\"n\">ys</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">onlyFives</span> <span class=\"o\">(</span><span class=\"n\">xs</span> <span class=\"bp\">++</span> <span class=\"n\">ys</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">intros</span>\n    <span class=\"n\">induction</span> <span class=\"n\">xs</span>\n    <span class=\"n\">case</span> <span class=\"n\">nil</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">hy</span><span class=\"o\">]</span>\n    <span class=\"n\">case</span> <span class=\"n\">cons</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"n\">intros</span>\n      <span class=\"n\">rename_i</span> <span class=\"n\">head</span> <span class=\"n\">tail</span> <span class=\"n\">h</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">onlyFives_cons</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hx</span>\n      <span class=\"n\">cases</span> <span class=\"n\">hx.1</span>\n      <span class=\"n\">specialize</span> <span class=\"n\">h</span> <span class=\"n\">hx.2</span>\n      <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">onlyFives_cons</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 360366138,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1684786333
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.List.Basic</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">onlyFives</span> <span class=\"o\">(</span><span class=\"n\">xs</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"n\">xs</span> <span class=\"bp\">=</span> <span class=\"o\">[]</span> <span class=\"bp\">∨</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">),</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">xs</span> <span class=\"bp\">→</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">5</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">onlyFives_iff_forall</span> <span class=\"o\">(</span><span class=\"n\">xs</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">onlyFives</span> <span class=\"n\">xs</span> <span class=\"bp\">↔</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">),</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">xs</span> <span class=\"bp\">→</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">5</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">apply</span> <span class=\"n\">or_iff_right_of_imp</span>\n  <span class=\"n\">rintro</span> <span class=\"n\">rfl</span>\n  <span class=\"n\">intros</span> <span class=\"n\">x</span> <span class=\"n\">hx</span>\n  <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">hx</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">onlyFives_concat</span> <span class=\"o\">(</span><span class=\"n\">xs</span> <span class=\"n\">ys</span><span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">onlyFives</span> <span class=\"n\">xs</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hy</span> <span class=\"o\">:</span> <span class=\"n\">onlyFives</span> <span class=\"n\">ys</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">onlyFives</span> <span class=\"o\">(</span><span class=\"n\">xs</span> <span class=\"bp\">++</span> <span class=\"n\">ys</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">onlyFives_iff_forall</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"bp\">*</span>\n  <span class=\"n\">intros</span> <span class=\"n\">z</span> <span class=\"n\">hz</span>\n  <span class=\"n\">cases</span> <span class=\"n\">List.mem_append.mp</span> <span class=\"n\">hz</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">inl</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">apply</span> <span class=\"n\">hx</span> <span class=\"n\">_</span> <span class=\"n\">h</span>\n  <span class=\"bp\">|</span> <span class=\"n\">inr</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">apply</span> <span class=\"n\">hy</span> <span class=\"n\">_</span> <span class=\"n\">h</span>\n</code></pre></div>",
        "id": 360366427,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1684786446
    },
    {
        "content": "<p>Here's a more faithful translation of the Isabelle:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.List.Lemmas</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.List.Indexes</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">onlyFives</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n  <span class=\"bp\">|</span> <span class=\"n\">nil</span> <span class=\"o\">:</span> <span class=\"n\">onlyFives</span> <span class=\"o\">[]</span>\n  <span class=\"bp\">|</span> <span class=\"n\">concat</span> <span class=\"o\">:</span> <span class=\"n\">onlyFives</span> <span class=\"n\">xs</span> <span class=\"bp\">→</span> <span class=\"n\">onlyFives</span> <span class=\"o\">(</span><span class=\"n\">xs</span> <span class=\"bp\">++</span> <span class=\"o\">[</span><span class=\"mi\">5</span><span class=\"o\">])</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">onlyFives_append</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">onlyFives</span> <span class=\"n\">xs</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hy</span> <span class=\"o\">:</span> <span class=\"n\">onlyFives</span> <span class=\"n\">ys</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">onlyFives</span> <span class=\"o\">(</span><span class=\"n\">xs</span> <span class=\"bp\">++</span> <span class=\"n\">ys</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">induction</span> <span class=\"n\">ys</span> <span class=\"n\">using</span> <span class=\"n\">List.list_reverse_induction</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">base</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rwa</span> <span class=\"o\">[</span><span class=\"n\">List.append_nil</span><span class=\"o\">]</span>\n  <span class=\"bp\">|</span> <span class=\"n\">ind</span> <span class=\"n\">ys</span> <span class=\"n\">y</span> <span class=\"n\">ih</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">List.append_assoc</span><span class=\"o\">]</span>\n    <span class=\"c1\">-- need to do generalize to deal with dependent type hell.</span>\n    <span class=\"c1\">-- ideally we could do `cases hy` directly.</span>\n    <span class=\"n\">generalize</span> <span class=\"n\">hz</span> <span class=\"o\">:</span> <span class=\"n\">ys</span> <span class=\"bp\">++</span> <span class=\"o\">[</span><span class=\"n\">y</span><span class=\"o\">]</span> <span class=\"bp\">=</span> <span class=\"n\">z</span> <span class=\"n\">at</span> <span class=\"n\">hy</span>\n    <span class=\"n\">cases</span> <span class=\"n\">hy</span>\n    <span class=\"n\">next</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">hz</span>\n    <span class=\"n\">next</span> <span class=\"n\">ys'</span> <span class=\"n\">hy'</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">List.concat_eq_append</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">List.concat_eq_append</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hz</span>\n      <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">rfl</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">List.of_concat_eq_concat</span> <span class=\"n\">hz</span>\n      <span class=\"n\">constructor</span>\n      <span class=\"n\">exact</span> <span class=\"n\">ih</span> <span class=\"n\">hy'</span>\n</code></pre></div>\n<p>I didn't translate the proof (other than the reverse induction strategy) just the statements.</p>",
        "id": 360367726,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1684786932
    },
    {
        "content": "<p>Feel free to golf it <span class=\"user-mention\" data-user-id=\"307953\">@Ruben Van de Velde</span> <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 360367789,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1684786971
    },
    {
        "content": "<p>It'd be better if <code>concat</code> were instead using <code>5 :: xs</code> rather than <code>xs ++ [5]</code>.</p>",
        "id": 360368171,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1684787138
    },
    {
        "content": "<p>I can't read isabelle, so I'd probably resubmit my previous code for <code>onlyFives_append</code> :)</p>",
        "id": 360369292,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1684787512
    },
    {
        "content": "<p>You don't need to be able to read it, it just has to work for <code>onlyFives</code> as an inductive type. Either that one or</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">onlyFives</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n  <span class=\"bp\">|</span> <span class=\"n\">nil</span> <span class=\"o\">:</span> <span class=\"n\">onlyFives</span> <span class=\"o\">[]</span>\n  <span class=\"bp\">|</span> <span class=\"n\">cons</span> <span class=\"o\">:</span> <span class=\"n\">onlyFives</span> <span class=\"n\">xs</span> <span class=\"bp\">→</span> <span class=\"n\">onlyFives</span> <span class=\"o\">(</span><span class=\"mi\">5</span> <span class=\"o\">::</span> <span class=\"n\">xs</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 360369896,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1684787733
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"383968\">Hossam Karim</span> has marked this topic as resolved.</p>",
        "id": 360644956,
        "sender_full_name": "Notification Bot",
        "timestamp": 1684878647
    }
]