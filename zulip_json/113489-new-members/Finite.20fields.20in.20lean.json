[
    {
        "content": "<p>Hi. I'm a noob at lean but have worked a little with coq. I wanted to get familiar with finite fields. Wished to prove basic lemmas. I guess they are already proven here but wanted to get a taste of how it feels like.</p>\n<p>Any idea where I should start? lean3 is what I need I guess.</p>\n<p>Saw this: <a href=\"https://leanprover-community.github.io/mathlib_docs/field_theory/finite/basic.html\">https://leanprover-community.github.io/mathlib_docs/field_theory/finite/basic.html</a></p>\n<p>But wasn't sure how to use this.</p>",
        "id": 337937858,
        "sender_full_name": "Julin S",
        "timestamp": 1677304226
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"481130\">@Julin S</span> Could you please be more precise? Do you have a maths statement in mind that you would like to formalize?</p>",
        "id": 337940901,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1677306561
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span>  Basic things. I'm still only learning about finite fields.</p>\n<p>I was hoping to start with 'order of a finite field is always a positive power of a prime.'</p>",
        "id": 337943343,
        "sender_full_name": "Julin S",
        "timestamp": 1677308326
    },
    {
        "content": "<p>Ok. Do you think you can write that statement in Lean? Just give it a shot, and we can give hints if you get stuck.</p>",
        "id": 337943455,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1677308422
    },
    {
        "content": "<p>Is there some library that I can use? </p>\n<p><code>import field_theory.basic</code> gave error.</p>\n<p>But <code>import topology.basic</code> (as mentioned in the manual) had no errors.</p>",
        "id": 337948518,
        "sender_full_name": "Julin S",
        "timestamp": 1677311741
    },
    {
        "content": "<p>But on the other hand, found a definition of field here: <a href=\"https://github.com/leanprover-community/lftcm2020/blob/f7992fe816d7b3df81efb7ad448a30653d5c0111/src/solutions/wednesday/algebraic_hierarchy.lean\">https://github.com/leanprover-community/lftcm2020/blob/f7992fe816d7b3df81efb7ad448a30653d5c0111/src/solutions/wednesday/algebraic_hierarchy.lean</a></p>\n<p>Would that be better?</p>",
        "id": 337948609,
        "sender_full_name": "Julin S",
        "timestamp": 1677311776
    },
    {
        "content": "<p>Oh, wait. Sounds like I got an installation issue.. Let me try fixing that.</p>",
        "id": 337948821,
        "sender_full_name": "Julin S",
        "timestamp": 1677311892
    },
    {
        "content": "<p>After you have a working setup</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">field_theory.finite.basic</span>\n</code></pre></div>\n<p>should work</p>",
        "id": 337949068,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1677312014
    },
    {
        "content": "<p>How can I get the order of a finite field?</p>\n<p>I sort of randomly typed this up:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">foo</span><span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">K</span><span class=\"o\">:</span><span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">n</span><span class=\"o\">:</span><span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">fact</span> <span class=\"n\">p.prime</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span><span class=\"o\">:</span><span class=\"n\">field</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">order</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">pow</span> <span class=\"n\">p</span> <span class=\"n\">n</span>\n</code></pre></div>",
        "id": 338098756,
        "sender_full_name": "Julin S",
        "timestamp": 1677389580
    },
    {
        "content": "<p>Does <code>fact</code> serve the same purpose as implicit arguments? Or is there something more to it?</p>",
        "id": 338098775,
        "sender_full_name": "Julin S",
        "timestamp": 1677389626
    },
    {
        "content": "<p>And <code>Type*</code> denotes the type of all types, right?</p>",
        "id": 338098869,
        "sender_full_name": "Julin S",
        "timestamp": 1677389717
    },
    {
        "content": "<p>Or could this be better?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">foo</span><span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">A</span><span class=\"o\">:</span><span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">n</span><span class=\"o\">:</span><span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">fact</span> <span class=\"n\">p.prime</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span><span class=\"o\">:</span><span class=\"n\">field</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">f.card</span> <span class=\"bp\">=</span> <span class=\"n\">pow</span> <span class=\"n\">p</span> <span class=\"n\">n</span>\n</code></pre></div>",
        "id": 338099287,
        "sender_full_name": "Julin S",
        "timestamp": 1677390116
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/finite_field.card'\">docs#finite_field.card'</a> is how it's stated in mathlib.</p>",
        "id": 338100198,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1677390948
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 338104683,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1677394305
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"481130\">Julin S</span> <a href=\"#narrow/stream/113489-new-members/topic/Finite.20fields.20in.20lean/near/338099287\">said</a>:</p>\n<blockquote>\n<p>Or could this be better?</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">foo</span><span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">A</span><span class=\"o\">:</span><span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">n</span><span class=\"o\">:</span><span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">fact</span> <span class=\"n\">p.prime</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span><span class=\"o\">:</span><span class=\"n\">field</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">f.card</span> <span class=\"bp\">=</span> <span class=\"n\">pow</span> <span class=\"n\">p</span> <span class=\"n\">n</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>Try to step back and see what what you typed says. In English / maths terms, you want to express \"A field has prime power order\" or equivalently \"Given a field, there exists a prime power equalling to the field's order\", so you shouldn't be supplying the <code>p</code> or <code>n</code>. Instead, you look at the theorem in mathlib, which only takes a field as argument and states that <em>there exists</em> p and n such that etc.</p>",
        "id": 338131112,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1677410101
    },
    {
        "content": "<p>Currently this says something close to \"for all fields A and primes p and naturals n, the size of A is p^n\" (but it doesn't even say that right now, for several other reasons). You might want to start off with something simpler if you've not used lean at all before</p>",
        "id": 338136283,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1677412432
    },
    {
        "content": "<p>Yeah, I'm completely new to lean.</p>",
        "id": 338251887,
        "sender_full_name": "Julin S",
        "timestamp": 1677481677
    },
    {
        "content": "<p>A doubt: What's the difference between <code>ℕ</code> and <code>ℕ+</code>? Is it that <code>ℕ+</code> only has positive <code>ℕ</code>?</p>\n<p>Tried:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">:</span><span class=\"n\">ℕ</span><span class=\"bp\">+</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>and that gave:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"n\">type</span> <span class=\"kd\">class</span> <span class=\"kd\">instance</span> <span class=\"n\">for</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">has_zero</span> <span class=\"n\">ℕ</span><span class=\"bp\">+</span>\n</code></pre></div>",
        "id": 338252082,
        "sender_full_name": "Julin S",
        "timestamp": 1677481764
    },
    {
        "content": "<p>Thanks.</p>",
        "id": 338370232,
        "sender_full_name": "Julin S",
        "timestamp": 1677514459
    },
    {
        "content": "<p>Another doubt: How does one query for existing lemmas and theorem in the course of proving new theorems?</p>",
        "id": 338370313,
        "sender_full_name": "Julin S",
        "timestamp": 1677514479
    },
    {
        "content": "<p>You can use <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#library_search\">tactic#library_search</a> which should find if the current goal follows from an exact match of a single lemma in the library (possibly using your hypotheses).</p>",
        "id": 338396138,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1677517692
    }
]