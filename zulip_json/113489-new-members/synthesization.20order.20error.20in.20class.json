[
    {
        "content": "<p>Hey,</p>\n<p>I am new to lean and am doing a project of formalizing delta rings. I have began by making a delta ring class but have and error that says<br>\n\"Cannot find synthesization order for instance\"</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">DeltaRing</span> <span class=\"o\">(</span><span class=\"n\">A</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">Nat.Prime</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">CommRing</span> <span class=\"n\">A</span> <span class=\"n\">where</span>\n  <span class=\"o\">(</span><span class=\"n\">δ</span><span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">A</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">zero_prop</span><span class=\"o\">:</span> <span class=\"n\">δ</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">one_prop</span><span class=\"o\">:</span> <span class=\"n\">δ</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">add_prop</span><span class=\"o\">:</span> <span class=\"bp\">∀</span><span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">},</span> <span class=\"n\">δ</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">+</span><span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">δ</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">δ</span> <span class=\"o\">(</span><span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"bp\">∑</span> <span class=\"n\">i</span><span class=\"o\">:</span> <span class=\"n\">Finset.range</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"o\">(((</span><span class=\"mi\">1</span><span class=\"bp\">/</span><span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">Nat.choose</span> <span class=\"n\">p</span> <span class=\"n\">i</span><span class=\"o\">)):</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"bp\">^</span><span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">y</span><span class=\"bp\">^</span><span class=\"o\">(</span><span class=\"n\">p</span><span class=\"bp\">-</span><span class=\"n\">i</span><span class=\"o\">)))</span>\n  <span class=\"o\">(</span><span class=\"n\">mul_prop</span><span class=\"o\">:</span> <span class=\"bp\">∀</span><span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">},</span> <span class=\"n\">δ</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">*</span><span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">^</span><span class=\"n\">p</span> <span class=\"bp\">*</span> <span class=\"n\">δ</span> <span class=\"o\">(</span><span class=\"n\">y</span><span class=\"o\">))</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">y</span><span class=\"bp\">^</span><span class=\"n\">p</span> <span class=\"bp\">*</span> <span class=\"n\">δ</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">*</span> <span class=\"n\">δ</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">δ</span> <span class=\"o\">(</span><span class=\"n\">y</span><span class=\"o\">)))</span>\n</code></pre></div>",
        "id": 394630920,
        "sender_full_name": "Will Blackmore",
        "timestamp": 1696338146
    },
    {
        "content": "<p>Lean is telling you that your definition is rather problematic. Let me explain.</p>",
        "id": 394633281,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1696338913
    },
    {
        "content": "<p>Welcome! This error basically means that your instance has parameters that Lean cannot figure out. Specifically, here the <code>extends</code> keyword creates an instance of the following shape:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">(</span><span class=\"n\">A</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">Nat.Prime</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">DeltaRing</span> <span class=\"n\">A</span> <span class=\"n\">p</span> <span class=\"n\">hp</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">CommRing</span> <span class=\"n\">A</span>\n</code></pre></div>\n<p>So whenever Lean wants to find a <code>CommRing A</code> instance, it will try this instance, and suddenly need to come up with a prime number <code>p</code> out of nowhere.</p>\n<p>One solution is to use \"unbundled\" inheritance, where you don't use <code>extends</code> but instead add the parent class as a parameter:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">DeltaRing</span> <span class=\"o\">(</span><span class=\"n\">A</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">Nat.Prime</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">CommRing</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"n\">where</span>\n  <span class=\"o\">(</span><span class=\"n\">δ</span><span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">A</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">zero_prop</span><span class=\"o\">:</span> <span class=\"n\">δ</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">one_prop</span><span class=\"o\">:</span> <span class=\"n\">δ</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">add_prop</span><span class=\"o\">:</span> <span class=\"bp\">∀</span><span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">},</span> <span class=\"n\">δ</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">+</span><span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">δ</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">δ</span> <span class=\"o\">(</span><span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"bp\">∑</span> <span class=\"n\">i</span><span class=\"o\">:</span> <span class=\"n\">Finset.range</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"o\">(((</span><span class=\"mi\">1</span><span class=\"bp\">/</span><span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">Nat.choose</span> <span class=\"n\">p</span> <span class=\"n\">i</span><span class=\"o\">)):</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"bp\">^</span><span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">y</span><span class=\"bp\">^</span><span class=\"o\">(</span><span class=\"n\">p</span><span class=\"bp\">-</span><span class=\"n\">i</span><span class=\"o\">)))</span>\n  <span class=\"o\">(</span><span class=\"n\">mul_prop</span><span class=\"o\">:</span> <span class=\"bp\">∀</span><span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">},</span> <span class=\"n\">δ</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">*</span><span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">^</span><span class=\"n\">p</span> <span class=\"bp\">*</span> <span class=\"n\">δ</span> <span class=\"o\">(</span><span class=\"n\">y</span><span class=\"o\">))</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">y</span><span class=\"bp\">^</span><span class=\"n\">p</span> <span class=\"bp\">*</span> <span class=\"n\">δ</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">*</span> <span class=\"n\">δ</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">δ</span> <span class=\"o\">(</span><span class=\"n\">y</span><span class=\"o\">)))</span>\n</code></pre></div>\n<p>(untested)</p>",
        "id": 394633299,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1696338918
    },
    {
        "content": "<p>OK, Anne was faster :D</p>",
        "id": 394633394,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1696338933
    },
    {
        "content": "<p>Alternatively, if <code>p</code> and <code>hp</code> are uniquely determined by <code>A</code> (and I suppose here they are), you can tell that to Lean using <code>outParam</code>, which means it will try to pick up <code>p</code> and <code>hp</code> from the instances, instead of coming up with them upfront.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">DeltaRing</span> <span class=\"o\">(</span><span class=\"n\">A</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">outParam</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">outParam</span> <span class=\"o\">(</span><span class=\"n\">Nat.Prime</span> <span class=\"n\">p</span><span class=\"o\">))</span> <span class=\"kd\">extends</span> <span class=\"n\">CommRing</span> <span class=\"n\">A</span> <span class=\"n\">where</span>\n  <span class=\"o\">(</span><span class=\"n\">δ</span><span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">A</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">zero_prop</span><span class=\"o\">:</span> <span class=\"n\">δ</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">one_prop</span><span class=\"o\">:</span> <span class=\"n\">δ</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">add_prop</span><span class=\"o\">:</span> <span class=\"bp\">∀</span><span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">},</span> <span class=\"n\">δ</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">+</span><span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">δ</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">δ</span> <span class=\"o\">(</span><span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"bp\">∑</span> <span class=\"n\">i</span><span class=\"o\">:</span> <span class=\"n\">Finset.range</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"o\">(((</span><span class=\"mi\">1</span><span class=\"bp\">/</span><span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">Nat.choose</span> <span class=\"n\">p</span> <span class=\"n\">i</span><span class=\"o\">)):</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"bp\">^</span><span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">y</span><span class=\"bp\">^</span><span class=\"o\">(</span><span class=\"n\">p</span><span class=\"bp\">-</span><span class=\"n\">i</span><span class=\"o\">)))</span>\n  <span class=\"o\">(</span><span class=\"n\">mul_prop</span><span class=\"o\">:</span> <span class=\"bp\">∀</span><span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">},</span> <span class=\"n\">δ</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">*</span><span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">^</span><span class=\"n\">p</span> <span class=\"bp\">*</span> <span class=\"n\">δ</span> <span class=\"o\">(</span><span class=\"n\">y</span><span class=\"o\">))</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">y</span><span class=\"bp\">^</span><span class=\"n\">p</span> <span class=\"bp\">*</span> <span class=\"n\">δ</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">*</span> <span class=\"n\">δ</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">δ</span> <span class=\"o\">(</span><span class=\"n\">y</span><span class=\"o\">)))</span>\n</code></pre></div>\n<p>(untested, again)</p>",
        "id": 394634222,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1696339198
    },
    {
        "content": "<p>Thanks, the outParam worked for me</p>",
        "id": 394634699,
        "sender_full_name": "Will Blackmore",
        "timestamp": 1696339336
    },
    {
        "content": "<p>If <code>p</code> and <code>hp</code> are indeed uniquely determined, you can also move them to a field of your class:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">DeltaRing</span> <span class=\"o\">(</span><span class=\"n\">A</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">CommRing</span> <span class=\"n\">A</span> <span class=\"n\">where</span>\n  <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">Nat.Prime</span> <span class=\"n\">p</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">δ</span><span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">A</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">zero_prop</span><span class=\"o\">:</span> <span class=\"n\">δ</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">one_prop</span><span class=\"o\">:</span> <span class=\"n\">δ</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">add_prop</span><span class=\"o\">:</span> <span class=\"bp\">∀</span><span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">},</span> <span class=\"n\">δ</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">+</span><span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">δ</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">δ</span> <span class=\"o\">(</span><span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"bp\">∑</span> <span class=\"n\">i</span><span class=\"o\">:</span> <span class=\"n\">Finset.range</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"o\">(((</span><span class=\"mi\">1</span><span class=\"bp\">/</span><span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">Nat.choose</span> <span class=\"n\">p</span> <span class=\"n\">i</span><span class=\"o\">)):</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"bp\">^</span><span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">y</span><span class=\"bp\">^</span><span class=\"o\">(</span><span class=\"n\">p</span><span class=\"bp\">-</span><span class=\"n\">i</span><span class=\"o\">)))</span>\n  <span class=\"o\">(</span><span class=\"n\">mul_prop</span><span class=\"o\">:</span> <span class=\"bp\">∀</span><span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">},</span> <span class=\"n\">δ</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">*</span><span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">^</span><span class=\"n\">p</span> <span class=\"bp\">*</span> <span class=\"n\">δ</span> <span class=\"o\">(</span><span class=\"n\">y</span><span class=\"o\">))</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">y</span><span class=\"bp\">^</span><span class=\"n\">p</span> <span class=\"bp\">*</span> <span class=\"n\">δ</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">*</span> <span class=\"n\">δ</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">δ</span> <span class=\"o\">(</span><span class=\"n\">y</span><span class=\"o\">)))</span>\n</code></pre></div>\n<p>Which one of the three works best depends very much on the kind of uses: do you often talk about <code>DeltaRing</code>s where <code>p</code> is equal to one specific number (say 37) (in this case <code>outParam</code> is best), or is it almost always \"let <code>p</code> be an arbitrary prime and <code>A</code> be a <code>DeltaRing</code> for <code>p</code>\" (in this case I'd go for having <code>p</code> as a field).</p>",
        "id": 394634912,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1696339407
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"627396\">Will Blackmore</span> <a href=\"#narrow/stream/113489-new-members/topic/synthesization.20order.20error.20in.20class/near/394634699\">said</a>:</p>\n<blockquote>\n<p>Thanks, the outParam worked for me</p>\n</blockquote>\n<p>Great! This is the end of my infodump :)</p>",
        "id": 394635185,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1696339478
    },
    {
        "content": "<p>Don't get discouraged -- definitions are the hard part! Once you have the definition written, you will have all the fun of making the API for it (i.e. all the basic lemmas) to come :-). In fact it's good to ask about definitions first, because what's very discouraging is that you make a definition, prove a bunch of theorems about it, PR it to mathlib and then the experts say \"the definition is not optimal and you will have to change it, which by the way will break all your proofs\"</p>\n<p>I would be tempted to call the fields <code>map_zero</code>, <code>map_one</code>, <code>map_add</code> and <code>map_mul</code>. Or maybe <code>\\delta_zero</code> etc. I've heard some computer scientists complain when mathematicians call maps unicode characters like <code>\\delta</code> (arguing that it should be called <code>delta</code> and then you should make unicode notation for it), but here this is standard notation. I don't really know the disadvantages of unicode names, maybe it has something to do with documentation issues or something?</p>",
        "id": 394673623,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1696351844
    }
]