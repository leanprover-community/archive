[
    {
        "content": "<p>Hello ,</p>\n<p>I am trying to prove that the square function is not injective over the integers. So far I done the following:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Function</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">n</span><span class=\"bp\">^</span><span class=\"mi\">2</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">Injective</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h</span>                         <span class=\"c1\">-- h: Injective f</span>\n                                  <span class=\"c1\">-- ⊢ False</span>\n  <span class=\"k\">have</span> <span class=\"n\">h'</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>  <span class=\"c1\">-- h': f (1) = f (-1)</span>\n    <span class=\"n\">unfold</span> <span class=\"n\">f</span>\n    <span class=\"n\">norm_num</span>\n  <span class=\"n\">apply</span> <span class=\"n\">h</span> <span class=\"n\">at</span> <span class=\"n\">h'</span>                   <span class=\"c1\">-- h': 1 = -1</span>\n</code></pre></div>\n<p>But I am stuck here, I am not sure how to deduce <code>False</code> from <code>h'</code>. I tried <code>apply?</code> and <code>exact?</code> but it did not help. Searching in the Mathlib doc did not help either.</p>",
        "id": 405568045,
        "sender_full_name": "Valentin Vinoles",
        "timestamp": 1701552383
    },
    {
        "content": "<p><code>simp at h'</code> works</p>",
        "id": 405568420,
        "sender_full_name": "David Renshaw",
        "timestamp": 1701552741
    },
    {
        "content": "<p>Ho it was easy, I feel dumb right now. Thanks a lot!</p>",
        "id": 405568883,
        "sender_full_name": "Valentin Vinoles",
        "timestamp": 1701553206
    },
    {
        "content": "<p><code>norm_num at h'</code>/<code>revert h'; norm_num</code> also, and they work more generally for cases like <code>-1 = 2</code></p>",
        "id": 405568901,
        "sender_full_name": "Sabrina Jewson",
        "timestamp": 1701553222
    },
    {
        "content": "<p>also <code>hint</code> finds <code>linarith</code></p>",
        "id": 405568977,
        "sender_full_name": "David Renshaw",
        "timestamp": 1701553309
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"243791\">@David Renshaw</span> <span class=\"user-mention\" data-user-id=\"574896\">@Sabrina Jewson</span> <br>\nThanks to you two !</p>",
        "id": 405627618,
        "sender_full_name": "Valentin Vinoles",
        "timestamp": 1701596301
    }
]