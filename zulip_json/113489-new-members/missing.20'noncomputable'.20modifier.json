[
    {
        "content": "<p>What does this error mean? I was trying to define a special type of additive character : </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">add_char'</span><span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ζ_p</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"bp\">ˣ</span><span class=\"o\">)</span> <span class=\"o\">(</span> <span class=\"n\">hζ_p</span> <span class=\"o\">:</span> <span class=\"n\">is_primitive_root</span> <span class=\"n\">ζ_p</span> <span class=\"n\">p</span> <span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"bp\">ˣ</span>  <span class=\"o\">:=</span>\n  <span class=\"n\">ζ_p</span><span class=\"bp\">^</span><span class=\"o\">(</span> <span class=\"n\">zmod.val</span> <span class=\"o\">(</span><span class=\"n\">algebra.trace</span> <span class=\"o\">(</span><span class=\"n\">zmod</span> <span class=\"o\">(</span><span class=\"n\">ring_char</span> <span class=\"n\">F</span><span class=\"o\">))</span> <span class=\"n\">F</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>And the error I got was:- <br>\n<code>\ndef add_char'(x : F) (ζ_p : ℂˣ) ( hζ_p : is_primitive_root ζ_p p ) : ℂˣ  :=\n</code></p>",
        "id": 343189441,
        "sender_full_name": "Michael Wahlberg",
        "timestamp": 1679334970
    },
    {
        "content": "<p>Can you post a full <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> with imports? That doesn't look like you've pasted the error there either</p>",
        "id": 343190600,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1679335264
    },
    {
        "content": "<p>My bad. Here is the stuff I used :-</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">number_theory.legendre_symbol.add_character</span>\n<span class=\"kn\">import</span> <span class=\"n\">number_theory.legendre_symbol.zmod_char</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.char_p.char_and_card</span>\n<span class=\"kn\">import</span> <span class=\"n\">field_theory.finite.trace</span>\n<span class=\"kn\">import</span> <span class=\"n\">number_theory.cyclotomic.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.zmod.basic</span>\n\n<span class=\"kd\">universes</span> <span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"n\">w</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">F</span><span class=\"o\">]</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">fact</span> <span class=\"n\">p.prime</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">char_p</span> <span class=\"n\">F</span> <span class=\"n\">p</span><span class=\"o\">]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">add_char'</span><span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ζ_p</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"bp\">ˣ</span><span class=\"o\">)</span> <span class=\"o\">(</span> <span class=\"n\">hζ_p</span> <span class=\"o\">:</span> <span class=\"n\">is_primitive_root</span> <span class=\"n\">ζ_p</span> <span class=\"n\">p</span> <span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"bp\">ˣ</span>  <span class=\"o\">:=</span>\n  <span class=\"n\">ζ_p</span><span class=\"bp\">^</span><span class=\"o\">(</span> <span class=\"n\">zmod.val</span> <span class=\"o\">(</span><span class=\"n\">algebra.trace</span> <span class=\"o\">(</span><span class=\"n\">zmod</span> <span class=\"o\">(</span><span class=\"n\">ring_char</span> <span class=\"n\">F</span><span class=\"o\">))</span> <span class=\"n\">F</span> <span class=\"n\">x</span><span class=\"o\">))</span>\n</code></pre></div>\n<p>and the error was :- <br>\n`<br>\nmissing 'noncomputable' modifier, definition 'add_char'' depends on 'ring_char'</p>\n<p>`</p>",
        "id": 343191564,
        "sender_full_name": "Michael Wahlberg",
        "timestamp": 1679335503
    },
    {
        "content": "<p>Looks like your clipboard is betraying you</p>",
        "id": 343192707,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1679335777
    },
    {
        "content": "<p>Because the error message looks missing still</p>",
        "id": 343192810,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1679335801
    },
    {
        "content": "<p>Oh, I got it now, probably need the noncomputable modifier.</p>",
        "id": 343193154,
        "sender_full_name": "Michael Wahlberg",
        "timestamp": 1679335893
    },
    {
        "content": "<p>I think everything involving real or complex numbers is <code>noncomputable</code> (and Lean insists it be marked as such).</p>",
        "id": 343193860,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1679336060
    },
    {
        "content": "<p>You can put <code>noncomputable theory</code> at the top of your module to automatically mark anything that Lean detects is noncomputable with <code>noncomputable</code>.</p>",
        "id": 343194117,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1679336132
    },
    {
        "content": "<p>(Lean always knows the answer; needing to write <code>noncomputable</code> is a formality.)</p>",
        "id": 343194291,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1679336174
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"479359\">Michael Stoll</span> <a href=\"#narrow/stream/113489-new-members/topic/Common.20Error.20Thread/near/343193860\">said</a>:</p>\n<blockquote>\n<p>I think everything involving real or complex numbers is <code>noncomputable</code> (and Lean insists it be marked as such).</p>\n</blockquote>\n<p>That's not the case, it's just that <a href=\"https://leanprover-community.github.io/mathlib_docs/find/ring_char\">docs#ring_char</a> is noncomputable</p>",
        "id": 343194410,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1679336209
    },
    {
        "content": "<p>It's just most things involving real or complex numbers which are noncomputable (e.g. sqrt, sin, exp, ...)</p>",
        "id": 343195786,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1679336577
    },
    {
        "content": "<p>And you could argue that even the cases that are computable aren't meaningfully computable</p>",
        "id": 343195861,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1679336601
    },
    {
        "content": "<p>But I think it's straightforward to calculate the character of any finite field. For that what function should I use?</p>",
        "id": 343195908,
        "sender_full_name": "Michael Wahlberg",
        "timestamp": 1679336614
    },
    {
        "content": "<p>I think using <code>ring_char</code> is fine</p>",
        "id": 343195962,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1679336635
    },
    {
        "content": "<p>If you wanted it to be computable, you could use <code>nat.find</code> with an appropriate predicate</p>",
        "id": 343196002,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1679336643
    },
    {
        "content": "<p>Or perhaps the algorithm you have in mind is to look at the factors of <code>fintype.card F</code>?</p>",
        "id": 343196132,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1679336679
    },
    {
        "content": "<p>yup<br>\n<span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113489-new-members/topic/Common.20Error.20Thread/near/343196132\">said</a>:</p>\n<blockquote>\n<p>Or perhaps the algorithm you have in mind is to look at the factors of <code>fintype.card F</code>?</p>\n</blockquote>",
        "id": 343196293,
        "sender_full_name": "Michael Wahlberg",
        "timestamp": 1679336736
    },
    {
        "content": "<p>I think that you might be using a different concept of \"calculate\" than this <code>computable</code> stuff. I think that polynomial addition might not be computable, but you can still calculate additions easily using the <code>ring</code> tactic.</p>",
        "id": 343196437,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1679336775
    },
    {
        "content": "<p>Proving <code>nat.min_fac (fintype.card F) = ring_char F</code> would be a reasonable thing to do</p>",
        "id": 343196595,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1679336831
    },
    {
        "content": "<p>Oh, here's a better spelling of <code>ring_char F</code>; just use <code>p</code></p>",
        "id": 343196993,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1679336946
    },
    {
        "content": "<p>You already wrote <code>[char_p F p]</code> which says \"p is the characteristic of F\"</p>",
        "id": 343197040,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1679336964
    },
    {
        "content": "<p>There is no need to then re-compute p</p>",
        "id": 343197061,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1679336973
    },
    {
        "content": "<p>(<a href=\"https://leanprover-community.github.io/mathlib_docs/find/ring_char.eq\">docs#ring_char.eq</a> is a proof that they coincide)</p>",
        "id": 343197201,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1679337008
    },
    {
        "content": "<p>Is there a way to simplify match tactics in our tactic state?</p>",
        "id": 343329683,
        "sender_full_name": "Michael Wahlberg",
        "timestamp": 1679394573
    },
    {
        "content": "<p>Can you give an example of the tactic state?</p>",
        "id": 343331286,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1679395075
    },
    {
        "content": "<p>here: - <br>\n<code>\nα: Type u\nn: ℕ\nv: Vec α n\nn✝: ℕ\nx: α\nxs: Vec α n✝\n⊢ ofVector (n✝ + 1)\n    (match Vec.toVector n✝ xs with\n    | { val := l, property := h } =&gt; { val := x :: l, property := (_ : List.length (x :: l) = n✝ + 1) }) =\n  cons x xs\n</code></p>",
        "id": 343331884,
        "sender_full_name": "Michael Wahlberg",
        "timestamp": 1679395241
    },
    {
        "content": "<p>And here is my function :- </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">Vec.toVector</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}:</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">→</span>  <span class=\"n\">Vec</span> <span class=\"n\">α</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">Vector</span> <span class=\"n\">α</span> <span class=\"n\">n</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">v</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"k\">match</span> <span class=\"n\">v</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Vec.nil</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"o\">⟨[],</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Vec.cons</span> <span class=\"n\">x</span> <span class=\"n\">xs</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">match</span> <span class=\"n\">Vec.toVector</span> <span class=\"n\">_</span> <span class=\"n\">xs</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"o\">⟨</span><span class=\"n\">x</span> <span class=\"o\">::</span> <span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"kd\">by</span>\n        <span class=\"n\">rw</span><span class=\"o\">[</span><span class=\"n\">List.length_cons</span><span class=\"o\">]</span>\n        <span class=\"n\">rw</span><span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]</span>\n        <span class=\"o\">⟩</span>\n</code></pre></div>",
        "id": 343332143,
        "sender_full_name": "Michael Wahlberg",
        "timestamp": 1679395316
    },
    {
        "content": "<p>Oh, so this is now Lean4 rather than your previous question which was Lean 3?</p>",
        "id": 343337374,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1679396656
    },
    {
        "content": "<p>yup</p>",
        "id": 343338075,
        "sender_full_name": "Michael Wahlberg",
        "timestamp": 1679396871
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"575824\">Michael Wahlberg</span> has marked this topic as resolved.</p>",
        "id": 343657799,
        "sender_full_name": "Notification Bot",
        "timestamp": 1679487142
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"575824\">Michael Wahlberg</span> has marked this topic as unresolved.</p>",
        "id": 343657815,
        "sender_full_name": "Notification Bot",
        "timestamp": 1679487147
    },
    {
        "content": "<p>Okay, I am trying to define a particular type of additive character that inherits all the properties of a general additive character. How do we implement it?</p>",
        "id": 343679055,
        "sender_full_name": "Michael Wahlberg",
        "timestamp": 1679491964
    },
    {
        "content": "<p>If I want this function to inherit all the properties of an additive character, how should I go on about it?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">add_char'</span><span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"bp\">ˣ</span>  <span class=\"o\">:=</span>\n  <span class=\"n\">ζ_p</span><span class=\"bp\">^</span><span class=\"o\">(</span> <span class=\"n\">zmod.val</span> <span class=\"o\">(</span><span class=\"n\">algebra.trace</span> <span class=\"o\">(</span><span class=\"n\">zmod</span> <span class=\"o\">(</span><span class=\"n\">ring_char</span> <span class=\"n\">F</span><span class=\"o\">))</span> <span class=\"n\">F</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 343679990,
        "sender_full_name": "Michael Wahlberg",
        "timestamp": 1679492157
    },
    {
        "content": "<p>Because it's giving me type errors when I try to define my new gauss_sum using it:-</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">gauss_sum'</span> <span class=\"o\">(</span><span class=\"n\">χ</span> <span class=\"o\">:</span> <span class=\"n\">mul_char</span> <span class=\"n\">F</span> <span class=\"n\">ℂ</span> <span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span> <span class=\"o\">:=</span> <span class=\"bp\">∑</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">,</span>  <span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"n\">add_char'</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">χ</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 343680790,
        "sender_full_name": "Michael Wahlberg",
        "timestamp": 1679492326
    },
    {
        "content": "<p>What's the error you get?</p>",
        "id": 343681989,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1679492591
    },
    {
        "content": "<p>Okay my whole code is this :- </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">number_theory.legendre_symbol.add_character</span>\n<span class=\"kn\">import</span> <span class=\"n\">number_theory.legendre_symbol.zmod_char</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.char_p.char_and_card</span>\n<span class=\"kn\">import</span> <span class=\"n\">field_theory.finite.trace</span>\n<span class=\"kn\">import</span> <span class=\"n\">number_theory.cyclotomic.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.zmod.basic</span>\n<span class=\"kd\">noncomputable theory</span>\n<span class=\"kn\">open</span> <span class=\"n\">add_char</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">big_operators</span>\n\n<span class=\"kd\">universes</span> <span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"n\">w</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">F</span><span class=\"o\">]</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">fact</span> <span class=\"n\">p.prime</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">char_p</span> <span class=\"n\">F</span> <span class=\"n\">p</span><span class=\"o\">]</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">ζ_p</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"bp\">ˣ</span><span class=\"o\">}</span> <span class=\"o\">[</span> <span class=\"n\">is_primitive_root</span> <span class=\"n\">ζ_p</span> <span class=\"n\">p</span> <span class=\"o\">]</span>\n<span class=\"kd\">def</span> <span class=\"n\">add_char'</span><span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"bp\">ˣ</span>  <span class=\"o\">:=</span>\n  <span class=\"n\">ζ_p</span><span class=\"bp\">^</span><span class=\"o\">(</span> <span class=\"n\">zmod.val</span> <span class=\"o\">(</span><span class=\"n\">algebra.trace</span> <span class=\"o\">(</span><span class=\"n\">zmod</span> <span class=\"o\">(</span><span class=\"n\">ring_char</span> <span class=\"n\">F</span><span class=\"o\">))</span> <span class=\"n\">F</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">gauss_sum'</span> <span class=\"o\">(</span><span class=\"n\">χ</span> <span class=\"o\">:</span> <span class=\"n\">mul_char</span> <span class=\"n\">F</span> <span class=\"n\">ℂ</span> <span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span> <span class=\"o\">:=</span> <span class=\"bp\">∑</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">,</span>  <span class=\"o\">(</span><span class=\"n\">add_char'</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">χ</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 343684302,
        "sender_full_name": "Michael Wahlberg",
        "timestamp": 1679493137
    },
    {
        "content": "<p>and the error I got was :- <br>\n<code>\ndon't know how to synthesize placeholder\ncontext:\nF : Type u,\n_inst_1 : field F,\n_inst_2 : fintype F,\nχ : mul_char F ℂ,\nx : F\n⊢ ℂˣ\n</code></p>",
        "id": 343684517,
        "sender_full_name": "Michael Wahlberg",
        "timestamp": 1679493191
    },
    {
        "content": "<p>Lean wants to know what complex number <code>ζ_p</code> is. It can't be inferred from what you've given it.</p>",
        "id": 343697627,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1679495987
    },
    {
        "content": "<p>You need to either fix one or pass in a value to the def.</p>",
        "id": 343697820,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1679496016
    },
    {
        "content": "<p>Right now the type of <code>add_char'</code> is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">add_char'</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">_inst_1</span> <span class=\"o\">:</span> <span class=\"n\">field</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">_inst_2</span> <span class=\"o\">:</span> <span class=\"n\">fintype</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">ζ_p</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"bp\">ˣ</span><span class=\"o\">},</span> <span class=\"n\">F</span> <span class=\"bp\">→</span> <span class=\"n\">ℂ</span><span class=\"bp\">ˣ</span>\n</code></pre></div>\n<p>which means \"the unifier will figure out zeta_p despite being given no information about it\", and the unifier is indeed getting stuck.</p>\n<p>Contrast this with the fact that the unifier has to figure out <code>F</code> too (becuase it's also in <code>{}</code> brackets) but in the use case you give <code>x</code> to the function so it looks at the type of <code>x</code> and figures out that this should be what <code>F</code> is.</p>",
        "id": 343698338,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1679496123
    },
    {
        "content": "<p>But now it's giving me this error :-<br>\n<code>\nfailed to synthesize type class instance for\nF : Type u,\n_inst_1 : field F,\n_inst_2 : fintype F,\nχ : mul_char F ℂ,\nx : F\n⊢ ℂˣ\n</code></p>",
        "id": 343722006,
        "sender_full_name": "Michael Wahlberg",
        "timestamp": 1679501192
    },
    {
        "content": "<p>That error means that the type class inference system (the square bracket system) can't find the complex number you have asked it to find, which is not surprising because the units of the complex numbers are not a typeclass so the typeclass inference system doesn't know anything about them.</p>",
        "id": 343722935,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1679501394
    },
    {
        "content": "<p>How about we answer the mathematical question first. Do you want the user to be inputting a primitive p'th root of unity, or do you want to be using a fixed one such as <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>e</mi><mrow><mn>2</mn><mi>π</mi><mi>i</mi><mi mathvariant=\"normal\">/</mi><mi>p</mi></mrow></msup></mrow><annotation encoding=\"application/x-tex\">e^{2\\pi i/p}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.888em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">e</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.888em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">2</span><span class=\"mord mathnormal mtight\">πi</span><span class=\"mord mtight\">/</span><span class=\"mord mathnormal mtight\">p</span></span></span></span></span></span></span></span></span></span></span></span>? That is the design decision which was not made in your initial code.</p>",
        "id": 343723181,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1679501441
    },
    {
        "content": "<p>In your initial code you ask the unification system to find one for you, and this is not its job, and in the new variant which you didn't post, I'm guessing from the error message that you instead asked the typeclass system to find one for you, and it's not the typeclass system's job either. Your options are either to specify one yourself in code (if you want to use a fixed one) or get the user to specify one as an input (if you want it to vary).</p>",
        "id": 343723918,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1679501607
    },
    {
        "content": "<p>So, right now, I am trying to prove the properties of my add_char',<br>\nBut I am stuck here because I cannot rewrite this particular equality in my lemma:-</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">add_char'_mul_property</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">F</span> <span class=\"o\">)(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">)[</span><span class=\"n\">fact</span> <span class=\"n\">p.prime</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">char_p</span> <span class=\"n\">F</span> <span class=\"n\">p</span><span class=\"o\">]</span> <span class=\"o\">[</span> <span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"n\">is_primitive_root</span> <span class=\"n\">ζ_p</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">]:</span> <span class=\"n\">add_char'</span> <span class=\"n\">ζ_p</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">add_char'</span> <span class=\"n\">ζ_p</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">add_char'</span> <span class=\"n\">ζ_p</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">add_char'</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">ring_char</span> <span class=\"n\">F</span> <span class=\"bp\">=</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">apply</span> <span class=\"n\">ring_char.eq</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">zmod.val_add</span> <span class=\"o\">],</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h1</span><span class=\"o\">],</span>\n</code></pre></div>\n<p>and the tactic state is :-<br>\n<code>\nF : Type u,\n_inst_1 : field F,\n_inst_2 : fintype F,\nζ_p : ℂˣ,\na x : F,\np : ℕ,\n_inst_6 : fact (nat.prime p),\n_inst_7 : char_p F p,\n_inst_8 : fact (is_primitive_root ζ_p p),\nh1 : ring_char F = p\n⊢ ζ_p ^\n      (((⇑(algebra.trace (zmod (ring_char F)) F) a).val + (⇑(algebra.trace (zmod (ring_char F)) F) x).val) %\n         ring_char F) =\n    ζ_p ^ (⇑(algebra.trace (zmod (ring_char F)) F) a).val * ζ_p ^ (⇑(algebra.trace (zmod (ring_char F)) F) x).val\n</code><br>\nand my error is :-</p>\n<p>`<br>\nrewrite tactic failed, motive is not type correct<br>\n  λ (_a : ℕ),<br>\n    ζ_p ^<br>\n          (((⇑(algebra.trace (zmod (ring_char F)) F) a).val + (⇑(algebra.trace (zmod (ring_char F)) F) x).val) %<br>\n             ring_char F) =<br>\n        ζ_p ^ (⇑(algebra.trace (zmod (ring_char F)) F) a).val *\n          ζ_p ^ (⇑(algebra.trace (zmod (ring_char F)) F) x).val =<br>\n      (ζ_p ^ (((⇑(algebra.trace (zmod _a) F) a).val + (⇑(algebra.trace (zmod _a) F) x).val) % _a) =<br>\n         ζ_p ^ (⇑(algebra.trace (zmod _a) F) a).val * ζ_p ^ (⇑(algebra.trace (zmod _a) F) x).val)</p>\n<p>`</p>",
        "id": 344336969,
        "sender_full_name": "Michael Wahlberg",
        "timestamp": 1679680928
    },
    {
        "content": "<p>What's the reason for using <code>ring_char F</code> at all here instead of <code>p</code>?</p>",
        "id": 344337238,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1679681022
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113489-new-members/topic/Common.20Error.20Thread/near/344337238\">said</a>:</p>\n<blockquote>\n<p>What's the reason for using <code>ring_char F</code> at all here instead of <code>p</code>?</p>\n</blockquote>\n<p>It's inherently used in the lemma used for breaking up addition inside the trace function</p>",
        "id": 344337842,
        "sender_full_name": "Michael Wahlberg",
        "timestamp": 1679681211
    },
    {
        "content": "<p>I don't understand what you mean. Let me make my question more clear; why did you write</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">add_char'</span><span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"bp\">ˣ</span>  <span class=\"o\">:=</span>\n  <span class=\"n\">ζ_p</span><span class=\"bp\">^</span><span class=\"o\">(</span> <span class=\"n\">zmod.val</span> <span class=\"o\">(</span><span class=\"n\">algebra.trace</span> <span class=\"o\">(</span><span class=\"n\">zmod</span> <span class=\"o\">(</span><span class=\"n\">ring_char</span> <span class=\"n\">F</span><span class=\"o\">))</span> <span class=\"n\">F</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>instead of the simpler</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">add_char'</span><span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"bp\">ˣ</span>  <span class=\"o\">:=</span>\n  <span class=\"n\">ζ_p</span><span class=\"bp\">^</span><span class=\"o\">(</span> <span class=\"n\">zmod.val</span> <span class=\"o\">(</span><span class=\"n\">algebra.trace</span> <span class=\"o\">(</span><span class=\"n\">zmod</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"n\">F</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 344337963,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1679681262
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113489-new-members/topic/Common.20Error.20Thread/near/344337963\">said</a>:</p>\n<blockquote>\n<p>I don't understand what you mean. Let me make my question more clear; why did you write</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">add_char'</span><span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"bp\">ˣ</span>  <span class=\"o\">:=</span>\n  <span class=\"n\">ζ_p</span><span class=\"bp\">^</span><span class=\"o\">(</span> <span class=\"n\">zmod.val</span> <span class=\"o\">(</span><span class=\"n\">algebra.trace</span> <span class=\"o\">(</span><span class=\"n\">zmod</span> <span class=\"o\">(</span><span class=\"n\">ring_char</span> <span class=\"n\">F</span><span class=\"o\">))</span> <span class=\"n\">F</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>Then it asks me to input the value of p  again in the function along with all of its instance assumptions.<br>\nIt complicates my gauss sum summation and what not,  <br>\ninstead of the simpler</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">add_char'</span><span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"bp\">ˣ</span>  <span class=\"o\">:=</span>\n  <span class=\"n\">ζ_p</span><span class=\"bp\">^</span><span class=\"o\">(</span> <span class=\"n\">zmod.val</span> <span class=\"o\">(</span><span class=\"n\">algebra.trace</span> <span class=\"o\">(</span><span class=\"n\">zmod</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"n\">F</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 344339397,
        "sender_full_name": "Michael Wahlberg",
        "timestamp": 1679681712
    },
    {
        "content": "<p>Also, another problem that I am facing is that despite introducing p as a global variable with all of its instance assumptions, why do I still need to use it every time. For more information, let me show you my whole code:-</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">number_theory.legendre_symbol.add_character</span>\n<span class=\"kn\">import</span> <span class=\"n\">number_theory.legendre_symbol.zmod_char</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.char_p.char_and_card</span>\n<span class=\"kn\">import</span> <span class=\"n\">field_theory.finite.trace</span>\n<span class=\"kn\">import</span> <span class=\"n\">number_theory.cyclotomic.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.zmod.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.complex.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">ring_theory.roots_of_unity</span>\n<span class=\"kd\">noncomputable theory</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">add_char</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">big_operators</span>\n\n<span class=\"kd\">universes</span> <span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"n\">w</span>\n<span class=\"c1\">-- variables (f : ℕ)</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">fact</span> <span class=\"n\">p.prime</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">char_p</span> <span class=\"n\">F</span> <span class=\"n\">p</span><span class=\"o\">](</span><span class=\"n\">ζ_p</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"bp\">ˣ</span><span class=\"o\">)</span> <span class=\"o\">[</span> <span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"n\">is_primitive_root</span> <span class=\"n\">ζ_p</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">]</span>\n\n\n<span class=\"kd\">def</span> <span class=\"n\">add_char'</span><span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"bp\">ˣ</span>  <span class=\"o\">:=</span>\n  <span class=\"n\">ζ_p</span><span class=\"bp\">^</span><span class=\"o\">(</span> <span class=\"n\">zmod.val</span> <span class=\"o\">(</span><span class=\"n\">algebra.trace</span> <span class=\"o\">(</span><span class=\"n\">zmod</span> <span class=\"o\">(</span><span class=\"n\">ring_char</span> <span class=\"n\">F</span><span class=\"o\">))</span> <span class=\"n\">F</span> <span class=\"n\">x</span><span class=\"o\">))</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">gauss_sum'</span> <span class=\"o\">(</span><span class=\"n\">χ</span> <span class=\"o\">:</span> <span class=\"n\">mul_char</span> <span class=\"n\">F</span> <span class=\"n\">ℂ</span> <span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span> <span class=\"o\">:=</span> <span class=\"bp\">∑</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">,</span>  <span class=\"o\">(</span><span class=\"n\">add_char'</span> <span class=\"n\">ζ_p</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">χ</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">char_p_non_zero</span><span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">)[</span><span class=\"n\">fact</span> <span class=\"n\">p.prime</span><span class=\"o\">][</span><span class=\"n\">char_p</span> <span class=\"n\">F</span> <span class=\"n\">p</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">ne_zero</span> <span class=\"o\">(</span><span class=\"n\">ring_char</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span><span class=\"n\">out</span> <span class=\"o\">:=</span>  <span class=\"kd\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">ring_char</span> <span class=\"n\">F</span> <span class=\"bp\">=</span> <span class=\"n\">p</span> <span class=\"o\">:=</span>\n  <span class=\"kd\">begin</span>\n    <span class=\"n\">apply</span> <span class=\"n\">ring_char.eq</span> <span class=\"o\">,</span>\n  <span class=\"kd\">end</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">h1</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">nat.prime.ne_zero</span> <span class=\"o\">(</span><span class=\"n\">fact.out</span> <span class=\"n\">p.prime</span><span class=\"o\">)</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span><span class=\"o\">}</span>\n\n\n<span class=\"kd\">lemma</span> <span class=\"n\">ζ_p_pow_eq_one</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span>  <span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ζ_p</span><span class=\"bp\">^</span><span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">%</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">ζ_p</span><span class=\"bp\">^</span><span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"bp\">←</span>  <span class=\"n\">mul_inv_eq_one</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">zpow_neg</span> <span class=\"n\">ζ_p</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">zpow_add</span> <span class=\"n\">ζ_p</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span>  <span class=\"n\">is_primitive_root.zpow_eq_one_iff_dvd</span> <span class=\"o\">(</span><span class=\"n\">fact.out</span> <span class=\"o\">(</span><span class=\"n\">is_primitive_root</span> <span class=\"n\">ζ_p</span> <span class=\"n\">p</span><span class=\"o\">))</span> <span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">int.modeq_zero_iff_dvd</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"bp\">-</span><span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">ring</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">h1</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">int.modeq.add_right</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">int.mod_modeq</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n\n<span class=\"kd\">lemma</span> <span class=\"n\">add_char'_mul_property</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">F</span> <span class=\"o\">)(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">)[</span><span class=\"n\">fact</span> <span class=\"n\">p.prime</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">char_p</span> <span class=\"n\">F</span> <span class=\"n\">p</span><span class=\"o\">]</span> <span class=\"o\">[</span> <span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"n\">is_primitive_root</span> <span class=\"n\">ζ_p</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">]:</span> <span class=\"n\">add_char'</span> <span class=\"n\">ζ_p</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">add_char'</span> <span class=\"n\">ζ_p</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">add_char'</span> <span class=\"n\">ζ_p</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">add_char'</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">ring_char</span> <span class=\"n\">F</span> <span class=\"bp\">=</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">apply</span> <span class=\"n\">ring_char.eq</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">zmod.val_add</span> <span class=\"o\">],</span>\n\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 344339810,
        "sender_full_name": "Michael Wahlberg",
        "timestamp": 1679681871
    },
    {
        "content": "<p>Did you look at <a href=\"https://leanprover-community.github.io/mathlib_docs/find/add_char.primitive_char_finite_field\">docs#add_char.primitive_char_finite_field</a> ?</p>",
        "id": 344339812,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1679681873
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"479359\">Michael Stoll</span> <a href=\"#narrow/stream/113489-new-members/topic/Common.20Error.20Thread/near/344339812\">said</a>:</p>\n<blockquote>\n<p>Did you look at <a href=\"https://leanprover-community.github.io/mathlib_docs/find/add_char.primitive_char_finite_field\">docs#add_char.primitive_char_finite_field</a> ?</p>\n</blockquote>\n<p>Okay this looks promising</p>",
        "id": 344340901,
        "sender_full_name": "Michael Wahlberg",
        "timestamp": 1679682266
    },
    {
        "content": "<p>Can you edit your above message with <a href=\"https://github.com/leanprover-community/mathlib/wiki/Code-in-backticks\">#backticks</a>?</p>",
        "id": 344349611,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1679685053
    },
    {
        "content": "<p>This topic was moved here from <a class=\"stream-topic\" data-stream-id=\"113489\" href=\"/#narrow/stream/113489-new-members/topic/Common.20Error.20Thread\">#new members &gt; Common Error Thread</a> by <span class=\"user-mention silent\" data-user-id=\"260507\">Heather Macbeth</span>.</p>",
        "id": 344385238,
        "sender_full_name": "Notification Bot",
        "timestamp": 1679699774
    }
]