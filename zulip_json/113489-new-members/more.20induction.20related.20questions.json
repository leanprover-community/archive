[
    {
        "content": "<p>Hi,<br>\nso I'm still working on the induction examples. This time with unequal signs.</p>\n<p>mve:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">):</span> <span class=\"bp\">∑</span> <span class=\"n\">k</span> <span class=\"k\">in</span> <span class=\"n\">Finset.Ico</span> <span class=\"mi\">1</span> <span class=\"n\">n.succ</span><span class=\"o\">,</span> <span class=\"o\">((</span><span class=\"n\">k</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"o\">((</span><span class=\"n\">Nat.zero</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"mi\">3</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"mi\">3</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">induction</span> <span class=\"n\">n</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">simp</span>\n  <span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"n\">n</span> <span class=\"n\">ih</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">rw</span><span class=\"o\">[</span><span class=\"n\">Finset.sum_Ico_succ_top</span><span class=\"o\">]</span>\n    <span class=\"n\">rw</span><span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">succ_eq_add_one</span><span class=\"o\">]</span>\n    <span class=\"n\">rw</span><span class=\"o\">[</span><span class=\"n\">ih</span><span class=\"o\">]</span>\n    <span class=\"n\">rw</span><span class=\"o\">[</span><span class=\"n\">succ_eq_add_one</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>There is an error at <code>rw[ih] which says that it can't find the target expression. Although it's clearly there, but it's embedded in </code>Rat.blt<code> so maybe that's the problem.\nIf the rewrite is successfull I want to finish the goal by using </code>Nat.succ_lt_succ`. Is that a viable way to go? regards</p>",
        "id": 387044036,
        "sender_full_name": "Robert hackman",
        "timestamp": 1692874149
    },
    {
        "content": "<p>Natural subtraction is pathological like natural division so you can't expect things to be easy. Also you're making your life more difficult by insisting on summing from 1 to n and then taking away 1, instead of summing from 0 to n-1. As I said several times last week when I was in a field and unable to post code, you should coerce into the rationals immediately if you want these things to be as easy as they are on paper. In particular I'm very strongly of the opinion that this goal should look like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">):</span> <span class=\"bp\">∑</span> <span class=\"n\">k</span> <span class=\"k\">in</span> <span class=\"n\">Finset.Ico</span> <span class=\"mi\">1</span> <span class=\"n\">n.succ</span><span class=\"o\">,</span> <span class=\"o\">((</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">...</span>\n</code></pre></div>\n<p>As for your current problem, the <code>rw</code> tactic will only consume <em>equalities</em> and <em>iff statements</em>. Think about what the <code>rw</code> tactic does to understand why. In particular it will not consume a statement of the from <code>X &lt; Y</code> (which is what you're feeding it with <code>ih</code>) so you need to rethink your mathematical proof.</p>",
        "id": 387045975,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1692874825
    },
    {
        "content": "<p>Oh, it's probably also worth remarking that your example is of course not at all true: if n is huge then a sum of a bunch of squares is clearly going to be &gt; 1/3.</p>",
        "id": 387046267,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1692874934
    },
    {
        "content": "<p>Ok so about the whole type thing, I'm not yet thinkting in those dimension but I adapted my code.<br>\nI can't sum from 0 to n-1 because the statement is not true for 0.</p>\n<p>The logic error was a stupid mistake, this is the correct version where it's not <code>... &lt; ((Nat.zero + 1) ^ 3 ...</code> but <code>... &lt; ((n + 1) ^ 3 ...</code><br>\n<code>example (n : ℕ): ∑ k in Finset.Ico 1 n.succ, (((k : ℚ) - 1 )^2) &lt; ((n + 1) ^ (3: ℕ) : ℚ) / 3  := by </code></p>\n<p>So I will start to sarch for something that does rewrites for lt</p>",
        "id": 387049961,
        "sender_full_name": "Robert hackman",
        "timestamp": 1692876269
    },
    {
        "content": "<p>You can sum k from 0 to &lt;n instead of summing k-1 from 1 to &lt;n+1, this doesn't change anything, this is just a change of variables</p>",
        "id": 387058419,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1692879166
    },
    {
        "content": "<p>ah uff sure, sorry</p>",
        "id": 387167753,
        "sender_full_name": "Robert hackman",
        "timestamp": 1692914192
    },
    {
        "content": "<p>So I've really really tried but am not getting anywhere. So I understand why rewrite doesn't work, instead I think I have to prove thorugh manual calc or some unequality theorem that the replaced(or rewritten) version is true. I've tried to use add_lt_add_right but since I'm trying to prove induction, a+b&lt;c doesn't work because the c is c(n+1) for the goal and c(n) for the induciton hypothisis. I'm probably on the completely wrong track. Any help or tips would be greatly appreciated!</p>",
        "id": 388500590,
        "sender_full_name": "Robert hackman",
        "timestamp": 1693566135
    },
    {
        "content": "<p>Can you please post a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> containing your current work (click on the link to see the details of what this is)? That is the best way to ask questions here.</p>",
        "id": 388523549,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1693575058
    },
    {
        "content": "<p>\"can someone help me fill in this sorry in this fully working code\" is a better question than \"help me I am stuck\"</p>",
        "id": 388523691,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1693575113
    },
    {
        "content": "<p>The statement in the example does not seem to be true:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">):</span> <span class=\"bp\">∑</span> <span class=\"n\">k</span> <span class=\"k\">in</span> <span class=\"n\">Finset.Ico</span> <span class=\"mi\">1</span> <span class=\"n\">n.succ</span><span class=\"o\">,</span> <span class=\"o\">((</span><span class=\"n\">k</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"o\">((</span><span class=\"n\">Nat.zero</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"mi\">3</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"mi\">3</span>\n</code></pre></div>\n<p>You can check the left hand side and the right hand side:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"mi\">2</span>\n<span class=\"k\">#eval</span> <span class=\"bp\">∑</span> <span class=\"n\">k</span> <span class=\"k\">in</span> <span class=\"n\">Finset.Ico</span> <span class=\"mi\">1</span> <span class=\"n\">n.succ</span><span class=\"o\">,</span> <span class=\"o\">((</span><span class=\"n\">k</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">)</span> <span class=\"c1\">-- gives`1`</span>\n<span class=\"k\">#eval</span> <span class=\"o\">((</span><span class=\"n\">Nat.zero</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"mi\">3</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"mi\">3</span> <span class=\"c1\">--gives (1: Rat)/3</span>\n</code></pre></div>",
        "id": 388526042,
        "sender_full_name": "Moritz Firsching",
        "timestamp": 1693575874
    },
    {
        "content": "<p>By the way Robert, Lean does not do maths for you -- Lean checks your maths. So is your question \"I can't get Lean to understand a maths proof I know\" or is it \"I don't know how to prove this theorem myself\"?</p>",
        "id": 388531683,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1693577581
    },
    {
        "content": "<p>This is the mwe, the first one is obv. false, this one should be correct.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.BigOperators.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.BigOperators.Intervals</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Num.Lemmas</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Nat.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.Ring</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.FieldSimp</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Finset.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Nat.Interval</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Order.LocallyFinite</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Num</span>\n<span class=\"kn\">open</span> <span class=\"n\">BigOperators</span>\n<span class=\"kn\">open</span> <span class=\"n\">Finset</span>\n<span class=\"kn\">open</span> <span class=\"n\">Nat</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">):</span> <span class=\"bp\">∑</span> <span class=\"n\">k</span> <span class=\"k\">in</span> <span class=\"n\">Finset.Ico</span> <span class=\"mi\">0</span> <span class=\"n\">n.succ</span><span class=\"o\">,</span> <span class=\"o\">(((</span><span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"o\">(((</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"mi\">3</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"mi\">3</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">induction</span> <span class=\"n\">n</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">simp</span>\n  <span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"n\">n</span> <span class=\"n\">ih</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">rw</span><span class=\"o\">[</span><span class=\"n\">Finset.sum_Ico_succ_top</span><span class=\"o\">]</span>\n    <span class=\"n\">rw</span><span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">succ_eq_add_one</span><span class=\"o\">]</span>\n    <span class=\"n\">case</span> <span class=\"n\">succ</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"n\">rw</span><span class=\"o\">[</span><span class=\"n\">add_lt_add_right</span> <span class=\"n\">ih</span><span class=\"o\">]</span>\n\n      <span class=\"gr\">sorry</span>\n      <span class=\"c1\">-- rw[ih]</span>\n      <span class=\"c1\">-- rw[add_lt_add_right]</span>\n      <span class=\"c1\">-- sorry</span>\n    <span class=\"n\">case</span> <span class=\"n\">succ.hab</span> <span class=\"bp\">=&gt;</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 388573893,
        "sender_full_name": "Robert hackman",
        "timestamp": 1693591113
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/more.20induction.20related.20questions/near/388531683\">said</a>:</p>\n<blockquote>\n<p>By the way Robert, Lean does not do maths for you -- Lean checks your maths. So is your question \"I can't get Lean to understand a maths proof I know\" or is it \"I don't know how to prove this theorem myself\"?</p>\n</blockquote>\n<p>I do understand this basic induciton, but fail to translate it into the language, any other humiliations you want me to admit? I've put many many hours into the lang and am starting to make sense of the syntax/ logic, please don't let me down lol.</p>",
        "id": 388574361,
        "sender_full_name": "Robert hackman",
        "timestamp": 1693591273
    },
    {
        "content": "<p>Could you explain the proof strategy to us informally?</p>",
        "id": 388574601,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1693591375
    },
    {
        "content": "<p>The error I get on that MWE is that <code>add_lt_add_right ih</code> is a proof of a <code>&lt;</code> statement and <code>rw</code> takes equality statements</p>",
        "id": 388574997,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1693591548
    },
    {
        "content": "<p><code>calc</code> is probably the clearest way to go about this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>    <span class=\"n\">case</span> <span class=\"n\">succ</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"k\">calc</span>\n        <span class=\"bp\">∑</span> <span class=\"n\">k</span> <span class=\"k\">in</span> <span class=\"n\">Finset.Ico</span> <span class=\"mi\">0</span> <span class=\"n\">n.succ</span><span class=\"o\">,</span> <span class=\"o\">((</span><span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"o\">((</span><span class=\"n\">Nat.succ</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span>\n        <span class=\"n\">_</span> <span class=\"bp\">&lt;</span> <span class=\"bp\">↑</span><span class=\"o\">((</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"mi\">3</span> <span class=\"bp\">+</span> <span class=\"o\">((</span><span class=\"n\">Nat.succ</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"n\">add_lt_add_right</span> <span class=\"n\">ih</span> <span class=\"n\">_</span>\n        <span class=\"n\">_</span> <span class=\"bp\">&lt;</span> <span class=\"bp\">↑</span><span class=\"o\">((</span><span class=\"n\">Nat.succ</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"mi\">3</span> <span class=\"o\">:=</span> <span class=\"bp\">?</span><span class=\"n\">_</span>\n      <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 388575607,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1693591795
    },
    {
        "content": "<p>or if you like golfing:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>    <span class=\"n\">case</span> <span class=\"n\">succ</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"n\">apply</span> <span class=\"o\">(</span><span class=\"n\">add_lt_add_right</span> <span class=\"n\">ih</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">trans</span>\n      <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 388575717,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1693591829
    },
    {
        "content": "<p>This is very informal though, as thought.<br>\nFirst you show that the sum of <code>k=1 to n +1 (k-1)^2 &lt;...</code> can be written as <code>k=1 to n (k-1)^2 + (n+1-1)^2  &lt;...</code>, then you replace <code>k=1 to n (k-1)^2</code>part of above equation with the ih and prove that thourgh simplifcation until you have smth like <code>n &gt; 0</code>. That's the paper way I guess.</p>",
        "id": 388575824,
        "sender_full_name": "Robert hackman",
        "timestamp": 1693591870
    },
    {
        "content": "<p>thank you so much for the help!</p>",
        "id": 388576284,
        "sender_full_name": "Robert hackman",
        "timestamp": 1693592055
    },
    {
        "content": "<p>Really good to know that the add_lt_add_right was the right choice at least I just didn't know how to use it</p>",
        "id": 388576474,
        "sender_full_name": "Robert hackman",
        "timestamp": 1693592131
    },
    {
        "content": "<p>Yeah, <code>rw</code> eats a list of proofs but each proof <em>must</em> be either an iff or an equality: its job is to replace X by Y so X had better be equal to Y.</p>",
        "id": 388579009,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1693593088
    },
    {
        "content": "<p>I'm not sure which import you need precisely, but with the whole kitchen sink <code>import Mathlib.Tactic</code> you can replace <code>add_lt_add_right ih _</code> with <code>by gcongr</code>. It sort of does rewrites with inequalities (or more accurately, it knows the names of lemmas like <code>add_lt_add_right</code> so you don't have to)</p>",
        "id": 388579612,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1693593326
    },
    {
        "content": "<p>It also reminds me that generalized rewriting came up a lot in iris-lean, there is a <code>rw'</code> tactic which allows you to rewrite with any kind of transitive relation using a gcongr-like traversal</p>",
        "id": 388579864,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1693593444
    },
    {
        "content": "<p>it would be nice if simp supported other relations, it has basically all the tools it needs to do so</p>",
        "id": 388580117,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1693593533
    },
    {
        "content": "<p><code>gsimp</code></p>",
        "id": 388581226,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1693593954
    },
    {
        "content": "<p>Ok, I spend another 10 hours and didn't move a cm lol.<br>\nSo up front here is my mve:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.BigOperators.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.BigOperators.Intervals</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Num.Lemmas</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Nat.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.Ring</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.FieldSimp</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Finset.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Nat.Interval</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Order.LocallyFinite</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Num</span>\n<span class=\"kn\">open</span> <span class=\"n\">BigOperators</span>\n<span class=\"kn\">open</span> <span class=\"n\">Finset</span>\n<span class=\"kn\">open</span> <span class=\"n\">Nat</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">):</span> <span class=\"bp\">∑</span> <span class=\"n\">k</span> <span class=\"k\">in</span> <span class=\"n\">Finset.Ico</span> <span class=\"mi\">0</span> <span class=\"n\">n.succ</span><span class=\"o\">,</span> <span class=\"o\">(((</span><span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"o\">(((</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"mi\">3</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"mi\">3</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">induction</span> <span class=\"n\">n</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">simp</span>\n  <span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"n\">n</span> <span class=\"n\">ih</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">rw</span><span class=\"o\">[</span><span class=\"n\">Finset.sum_Ico_succ_top</span><span class=\"o\">]</span>\n    <span class=\"n\">rw</span><span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">succ_eq_add_one</span><span class=\"o\">]</span>\n    <span class=\"n\">case</span> <span class=\"n\">succ</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"k\">calc</span>\n        <span class=\"bp\">∑</span> <span class=\"n\">k</span> <span class=\"k\">in</span> <span class=\"n\">Finset.Ico</span> <span class=\"mi\">0</span> <span class=\"n\">n.succ</span><span class=\"o\">,</span> <span class=\"o\">((</span><span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"o\">((</span><span class=\"n\">Nat.succ</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span>\n        <span class=\"n\">_</span> <span class=\"bp\">&lt;</span> <span class=\"bp\">↑</span><span class=\"o\">((</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"mi\">3</span> <span class=\"bp\">+</span> <span class=\"o\">((</span><span class=\"n\">Nat.succ</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"n\">add_lt_add_right</span> <span class=\"n\">ih</span> <span class=\"n\">_</span>\n      <span class=\"n\">field_simp</span>\n      <span class=\"n\">rw</span><span class=\"o\">[</span><span class=\"n\">div_lt_div_iff</span><span class=\"o\">]</span>\n      <span class=\"n\">case</span> <span class=\"k\">calc</span><span class=\"bp\">.</span><span class=\"n\">step.b0</span> <span class=\"bp\">=&gt;</span>\n        <span class=\"n\">norm_num</span>\n      <span class=\"n\">case</span> <span class=\"k\">calc</span><span class=\"bp\">.</span><span class=\"n\">step.d0</span> <span class=\"bp\">=&gt;</span>\n        <span class=\"n\">norm_num</span>\n      <span class=\"n\">ring_nf</span>\n      <span class=\"n\">simp</span>\n      <span class=\"k\">calc</span>\n        <span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"mi\">27</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"mi\">36</span> <span class=\"bp\">+</span> <span class=\"mi\">12</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">ring_nf</span>\n    <span class=\"n\">case</span> <span class=\"n\">succ.hab</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>basically I'm currently completely overwhelemed trying to proof <code>12 + ↑n * 27 &lt; 24 + ↑n * 36</code>(without using gsimp...).<br>\nThere are many tactics that proof variations of <code>a + b &lt; a + c</code>(or theorems with iff exists) but none for rings (at least I couldn't find them). My idea now was to isolate and simplify until I get some sporadic enlightment or something like that but I'm also failing on that, so any suggestions would be welcome. regards</p>",
        "id": 389160237,
        "sender_full_name": "Robert hackman",
        "timestamp": 1693910848
    },
    {
        "content": "<blockquote>\n<p>There are many tactics that proof variations of <code>a + b &lt; a + c</code> (or theorems with iff exists) but none for rings </p>\n</blockquote>\n<p>Have you tried the lemmas you found which you thought were not for rings?</p>",
        "id": 389160532,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1693910953
    },
    {
        "content": "<p>yeah I tried many but none worked, I also understand (now...) why they don't work. Edit: I found a few lemmas it was more that I couldn't figure out how to transfrom the term..</p>",
        "id": 389162156,
        "sender_full_name": "Robert hackman",
        "timestamp": 1693911526
    },
    {
        "content": "<p>The code is full of errors for me. Can you make it error-free by sorrying all the problems rather than just letting them error?</p>",
        "id": 389245931,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1693935358
    },
    {
        "content": "<p>OK so it wasn't too bad to fix the errors: here's one way of finishing the proof.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.BigOperators.Intervals</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.FieldSimp</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">BigOperators</span>\n<span class=\"kn\">open</span> <span class=\"n\">Nat</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">):</span> <span class=\"bp\">∑</span> <span class=\"n\">k</span> <span class=\"k\">in</span> <span class=\"n\">Finset.Ico</span> <span class=\"mi\">0</span> <span class=\"n\">n.succ</span><span class=\"o\">,</span> <span class=\"o\">(((</span><span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"o\">(((</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"mi\">3</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"mi\">3</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">induction</span> <span class=\"n\">n</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">simp</span>\n  <span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"n\">n</span> <span class=\"n\">ih</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">rw</span><span class=\"o\">[</span><span class=\"n\">Finset.sum_Ico_succ_top</span><span class=\"o\">]</span>\n    <span class=\"n\">rw</span><span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">succ_eq_add_one</span><span class=\"o\">]</span>\n    <span class=\"n\">case</span> <span class=\"n\">succ</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"k\">calc</span>\n        <span class=\"bp\">∑</span> <span class=\"n\">k</span> <span class=\"k\">in</span> <span class=\"n\">Finset.Ico</span> <span class=\"mi\">0</span> <span class=\"n\">n.succ</span><span class=\"o\">,</span> <span class=\"o\">((</span><span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"o\">((</span><span class=\"n\">Nat.succ</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span>\n        <span class=\"n\">_</span> <span class=\"bp\">&lt;</span> <span class=\"bp\">↑</span><span class=\"o\">((</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"mi\">3</span> <span class=\"bp\">+</span> <span class=\"o\">((</span><span class=\"n\">Nat.succ</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"n\">add_lt_add_right</span> <span class=\"n\">ih</span> <span class=\"n\">_</span>\n      <span class=\"n\">field_simp</span>\n      <span class=\"n\">rw</span><span class=\"o\">[</span><span class=\"n\">div_lt_div_iff</span><span class=\"o\">]</span>\n      <span class=\"n\">case</span> <span class=\"k\">calc</span><span class=\"bp\">.</span><span class=\"n\">step.b0</span> <span class=\"bp\">=&gt;</span>\n        <span class=\"n\">norm_num</span>\n      <span class=\"n\">case</span> <span class=\"k\">calc</span><span class=\"bp\">.</span><span class=\"n\">step.d0</span> <span class=\"bp\">=&gt;</span>\n        <span class=\"n\">norm_num</span>\n      <span class=\"n\">ring_nf</span>\n      <span class=\"n\">simp</span>\n      <span class=\"n\">norm_cast</span>\n      <span class=\"n\">linarith</span>\n    <span class=\"n\">case</span> <span class=\"n\">succ.hab</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"n\">simp</span>\n</code></pre></div>\n<p>(note that you don't need all those imports)</p>",
        "id": 389249071,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1693935961
    },
    {
        "content": "<p>Thank you so much. What's confusing to me is that without <code>norm_cast</code>, linarith throws <code>linarith failed to find a contradiction</code>, but if I understand correctly, norm_cast is really only mutating types, that's why I thought the term's pattern wasn't \"compatible\"(without understanding why...) with linarith</p>",
        "id": 389369791,
        "sender_full_name": "Robert hackman",
        "timestamp": 1693990563
    },
    {
        "content": "<p>Well the fact that <code>12 + q * 27 &lt; 24 + q * 36</code> isn't true for all rational numbers <code>q</code>. So without the <code>norm_cast</code> step (which essentially makes the argument that <code>12 + n * 27 &lt; 24 + n * 36</code> for natural numbers interpreted as rationals if and only if the same inequality over the naturals) linarith doesn't know how to conclude as it doesn't work out that the casts of <code>n</code> must be nonnegative. After <code>norm_cast</code> the correcponding goal is more suitable for linarith<br>\nOne could argue that linarith <em>should</em> know that a natural number treated as a rational is nonnegative, but it seems it currently doesn't.</p>",
        "id": 389403349,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1694001380
    },
    {
        "content": "<p>Yeah that makes sense, thx!</p>",
        "id": 389716554,
        "sender_full_name": "Robert hackman",
        "timestamp": 1694107546
    },
    {
        "content": "<p>So I want  do finish the example with a manual more insightful proof than linarith (for learning purposes). Apperantly, when just simplifying one can use iff to proof the simplification. Why is that? I thought everyhting would need to be proofed or that just axioms applying?<br>\nNow I'm stuck at -9 &lt; 12/n since it's a type missmatch which I don't want to resolve. Instead I want to proof at that point that this Prop is true since it cannot be 12/n cannot get negative, how would I do that?</p>\n<p>Here is my mve:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.BigOperators.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.BigOperators.Intervals</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Num.Lemmas</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Nat.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.Ring</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.FieldSimp</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Finset.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Nat.Interval</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Order.LocallyFinite</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Num</span>\n<span class=\"kn\">open</span> <span class=\"n\">BigOperators</span>\n<span class=\"kn\">open</span> <span class=\"n\">Finset</span>\n<span class=\"kn\">open</span> <span class=\"n\">Nat</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">):</span> <span class=\"bp\">∑</span> <span class=\"n\">k</span> <span class=\"k\">in</span> <span class=\"n\">Finset.Ico</span> <span class=\"mi\">0</span> <span class=\"n\">n.succ</span><span class=\"o\">,</span> <span class=\"o\">(((</span><span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"o\">(((</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"mi\">3</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"mi\">3</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">induction</span> <span class=\"n\">n</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">simp</span>\n  <span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"n\">n</span> <span class=\"n\">ih</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">rw</span><span class=\"o\">[</span><span class=\"n\">Finset.sum_Ico_succ_top</span><span class=\"o\">]</span>\n    <span class=\"n\">rw</span><span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">succ_eq_add_one</span><span class=\"o\">]</span>\n    <span class=\"n\">case</span> <span class=\"n\">succ</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"k\">calc</span>\n        <span class=\"bp\">∑</span> <span class=\"n\">k</span> <span class=\"k\">in</span> <span class=\"n\">Finset.Ico</span> <span class=\"mi\">0</span> <span class=\"n\">n.succ</span><span class=\"o\">,</span> <span class=\"o\">((</span><span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"o\">((</span><span class=\"n\">Nat.succ</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span>\n        <span class=\"n\">_</span> <span class=\"bp\">&lt;</span> <span class=\"bp\">↑</span><span class=\"o\">((</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"mi\">3</span> <span class=\"bp\">+</span> <span class=\"o\">((</span><span class=\"n\">Nat.succ</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"n\">add_lt_add_right</span> <span class=\"n\">ih</span> <span class=\"n\">_</span>\n      <span class=\"n\">field_simp</span>\n      <span class=\"n\">rw</span><span class=\"o\">[</span><span class=\"n\">div_lt_div_iff</span><span class=\"o\">]</span>\n      <span class=\"n\">case</span> <span class=\"k\">calc</span><span class=\"bp\">.</span><span class=\"n\">step.b0</span> <span class=\"bp\">=&gt;</span>\n        <span class=\"n\">norm_num</span>\n      <span class=\"n\">case</span> <span class=\"k\">calc</span><span class=\"bp\">.</span><span class=\"n\">step.d0</span> <span class=\"bp\">=&gt;</span>\n        <span class=\"n\">norm_num</span>\n      <span class=\"n\">ring_nf</span>\n      <span class=\"n\">simp</span>\n      <span class=\"c1\">-- norm_cast</span>\n      <span class=\"k\">calc</span>\n        <span class=\"c1\">-- 12 + ↑n * 27 &lt; 24 + ↑n * 36 -- - 12</span>\n        <span class=\"mi\">27</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">12</span> <span class=\"bp\">+</span> <span class=\"bp\">↑</span><span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"mi\">36</span> <span class=\"bp\">↔</span> <span class=\"c1\">-- /n</span>\n        <span class=\"mi\">27</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">12</span><span class=\"bp\">/</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">36</span> <span class=\"bp\">↔</span> <span class=\"c1\">-- -36</span>\n        <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">9</span><span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">12</span><span class=\"bp\">/</span><span class=\"n\">n</span> <span class=\"bp\">↔</span> <span class=\"c1\">-- /12</span>\n\n    <span class=\"n\">case</span> <span class=\"n\">succ.hab</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"n\">simp</span>\n</code></pre></div>",
        "id": 389853305,
        "sender_full_name": "Robert hackman",
        "timestamp": 1694168517
    },
    {
        "content": "<p>Can you post code with sorrys (and comments saying \"this is the sorry I am stuck on\") rather than errors, which are very confusing?</p>",
        "id": 389885343,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1694180728
    },
    {
        "content": "<p>Sure, I hope that’s more understandable</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.BigOperators.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.BigOperators.Intervals</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Num.Lemmas</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Nat.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.Ring</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.FieldSimp</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Finset.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Nat.Interval</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Order.LocallyFinite</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Num</span>\n<span class=\"kn\">open</span> <span class=\"n\">BigOperators</span>\n<span class=\"kn\">open</span> <span class=\"n\">Finset</span>\n<span class=\"kn\">open</span> <span class=\"n\">Nat</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">):</span> <span class=\"bp\">∑</span> <span class=\"n\">k</span> <span class=\"k\">in</span> <span class=\"n\">Finset.Ico</span> <span class=\"mi\">0</span> <span class=\"n\">n.succ</span><span class=\"o\">,</span> <span class=\"o\">(((</span><span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"o\">(((</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"mi\">3</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"mi\">3</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">induction</span> <span class=\"n\">n</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">simp</span>\n  <span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"n\">n</span> <span class=\"n\">ih</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">rw</span><span class=\"o\">[</span><span class=\"n\">Finset.sum_Ico_succ_top</span><span class=\"o\">]</span>\n    <span class=\"n\">rw</span><span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">succ_eq_add_one</span><span class=\"o\">]</span>\n    <span class=\"n\">case</span> <span class=\"n\">succ</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"k\">calc</span>\n        <span class=\"bp\">∑</span> <span class=\"n\">k</span> <span class=\"k\">in</span> <span class=\"n\">Finset.Ico</span> <span class=\"mi\">0</span> <span class=\"n\">n.succ</span><span class=\"o\">,</span> <span class=\"o\">((</span><span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"o\">((</span><span class=\"n\">Nat.succ</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span>\n        <span class=\"n\">_</span> <span class=\"bp\">&lt;</span> <span class=\"bp\">↑</span><span class=\"o\">((</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"mi\">3</span> <span class=\"bp\">+</span> <span class=\"o\">((</span><span class=\"n\">Nat.succ</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"n\">add_lt_add_right</span> <span class=\"n\">ih</span> <span class=\"n\">_</span>\n      <span class=\"n\">field_simp</span>\n      <span class=\"n\">rw</span><span class=\"o\">[</span><span class=\"n\">div_lt_div_iff</span><span class=\"o\">]</span>\n      <span class=\"n\">case</span> <span class=\"k\">calc</span><span class=\"bp\">.</span><span class=\"n\">step.b0</span> <span class=\"bp\">=&gt;</span>\n        <span class=\"n\">norm_num</span>\n      <span class=\"n\">case</span> <span class=\"k\">calc</span><span class=\"bp\">.</span><span class=\"n\">step.d0</span> <span class=\"bp\">=&gt;</span>\n        <span class=\"n\">norm_num</span>\n      <span class=\"n\">ring_nf</span>\n      <span class=\"n\">simp</span>\n      <span class=\"c1\">-- norm_cast</span>\n      <span class=\"k\">calc</span>\n        <span class=\"c1\">-- 12 + ↑n * 27 &lt; 24 + ↑n * 36 -- - 12</span>\n        <span class=\"mi\">27</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">12</span> <span class=\"bp\">+</span> <span class=\"bp\">↑</span><span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"mi\">36</span> <span class=\"bp\">↔</span> <span class=\"c1\">-- /n</span>\n        <span class=\"mi\">27</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">12</span><span class=\"bp\">/</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">36</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span> <span class=\"c1\">-- -substract 36 and proof of that the natural right side cannot be smaller than the negative left side</span>\n       <span class=\"c1\">--  (-9: ℚ) &lt; 12/n ↔ -- /12</span>\n\n    <span class=\"n\">case</span> <span class=\"n\">succ.hab</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"n\">simp</span>\n</code></pre></div>",
        "id": 390035824,
        "sender_full_name": "Robert hackman",
        "timestamp": 1694266622
    },
    {
        "content": "<p>It looks like the division operation here is the division of natural numbers (where <code>1 / 2 = 0</code> as it outputs a natural number).<br>\nThat's probably not what you want (its not a very well behaved function).<br>\nuse <code>12/(n : ℚ) </code>  so that lean treats your numbers as rationals before dividing</p>",
        "id": 390036477,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1694267199
    },
    {
        "content": "<p>You also have a bunch of errors earlier and later in the snippet which I think just confuse things (and leans error reporting).<br>\nTry and focus on one sorry at a time, maybe stating things as separate lemmas if needed.</p>",
        "id": 390036587,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1694267298
    },
    {
        "content": "<p>You'll also probably need to split into cases based on whether <code>n</code> is zero or not, as that will likely be a requirement to apply many lemmas about divisibility</p>",
        "id": 390036732,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1694267420
    },
    {
        "content": "<p>Regarding the bunch of errors, there's that <code>expected := </code>(at line <code>case succ.hab</code>) error that I really don't understand. Even when I'm finishing the last line in <code>succ n ih</code>in the scope of the calc with sorry it's still there. I can't really get rid of it. Up to just now I thought that when I'm prooving the code in the (last)calc section, it would go away but not event than apperantly, I relly can't get rid of it if I'm using the calc mode</p>",
        "id": 390051334,
        "sender_full_name": "Robert hackman",
        "timestamp": 1694279872
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">):</span> <span class=\"bp\">∑</span> <span class=\"n\">k</span> <span class=\"k\">in</span> <span class=\"n\">Finset.Ico</span> <span class=\"mi\">0</span> <span class=\"n\">n.succ</span><span class=\"o\">,</span> <span class=\"o\">(((</span><span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"o\">(((</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"mi\">3</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"mi\">3</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">induction</span> <span class=\"n\">n</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">simp</span>\n  <span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"n\">n</span> <span class=\"n\">ih</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">rw</span><span class=\"o\">[</span><span class=\"n\">Finset.sum_Ico_succ_top</span><span class=\"o\">]</span>\n    <span class=\"n\">rw</span><span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">succ_eq_add_one</span><span class=\"o\">]</span>\n    <span class=\"n\">case</span> <span class=\"n\">succ</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"k\">calc</span>\n        <span class=\"bp\">∑</span> <span class=\"n\">k</span> <span class=\"k\">in</span> <span class=\"n\">Finset.Ico</span> <span class=\"mi\">0</span> <span class=\"n\">n.succ</span><span class=\"o\">,</span> <span class=\"o\">((</span><span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"o\">((</span><span class=\"n\">Nat.succ</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span>\n        <span class=\"n\">_</span> <span class=\"bp\">&lt;</span> <span class=\"bp\">↑</span><span class=\"o\">((</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"mi\">3</span> <span class=\"bp\">+</span> <span class=\"o\">((</span><span class=\"n\">Nat.succ</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"n\">add_lt_add_right</span> <span class=\"n\">ih</span> <span class=\"n\">_</span>\n      <span class=\"n\">field_simp</span>\n      <span class=\"n\">rw</span><span class=\"o\">[</span><span class=\"n\">div_lt_div_iff</span><span class=\"o\">]</span>\n      <span class=\"n\">case</span> <span class=\"k\">calc</span><span class=\"bp\">.</span><span class=\"n\">step.b0</span> <span class=\"bp\">=&gt;</span>\n        <span class=\"n\">norm_num</span>\n      <span class=\"n\">case</span> <span class=\"k\">calc</span><span class=\"bp\">.</span><span class=\"n\">step.d0</span> <span class=\"bp\">=&gt;</span>\n        <span class=\"n\">norm_num</span>\n      <span class=\"n\">ring_nf</span>\n      <span class=\"n\">simp</span>\n      <span class=\"c1\">-- norm_cast</span>\n      <span class=\"c1\">-- linarith</span>\n      <span class=\"k\">calc</span>\n        <span class=\"mi\">12</span> <span class=\"bp\">+</span> <span class=\"bp\">↑</span><span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"mi\">27</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">24</span> <span class=\"bp\">+</span> <span class=\"bp\">↑</span><span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"mi\">36</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">linarith</span>\n    <span class=\"n\">case</span> <span class=\"n\">succ.hab</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"n\">simp</span>\n</code></pre></div>\n<p>for example throws the error <code>expected := </code>, at line <code>case succ.hab</code> and this version:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">):</span> <span class=\"bp\">∑</span> <span class=\"n\">k</span> <span class=\"k\">in</span> <span class=\"n\">Finset.Ico</span> <span class=\"mi\">0</span> <span class=\"n\">n.succ</span><span class=\"o\">,</span> <span class=\"o\">(((</span><span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"o\">(((</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"mi\">3</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"mi\">3</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">induction</span> <span class=\"n\">n</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">simp</span>\n  <span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"n\">n</span> <span class=\"n\">ih</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">rw</span><span class=\"o\">[</span><span class=\"n\">Finset.sum_Ico_succ_top</span><span class=\"o\">]</span>\n    <span class=\"n\">rw</span><span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">succ_eq_add_one</span><span class=\"o\">]</span>\n    <span class=\"n\">case</span> <span class=\"n\">succ</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"k\">calc</span>\n        <span class=\"bp\">∑</span> <span class=\"n\">k</span> <span class=\"k\">in</span> <span class=\"n\">Finset.Ico</span> <span class=\"mi\">0</span> <span class=\"n\">n.succ</span><span class=\"o\">,</span> <span class=\"o\">((</span><span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"o\">((</span><span class=\"n\">Nat.succ</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span>\n        <span class=\"n\">_</span> <span class=\"bp\">&lt;</span> <span class=\"bp\">↑</span><span class=\"o\">((</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"mi\">3</span> <span class=\"bp\">+</span> <span class=\"o\">((</span><span class=\"n\">Nat.succ</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"n\">add_lt_add_right</span> <span class=\"n\">ih</span> <span class=\"n\">_</span>\n      <span class=\"n\">field_simp</span>\n      <span class=\"n\">rw</span><span class=\"o\">[</span><span class=\"n\">div_lt_div_iff</span><span class=\"o\">]</span>\n      <span class=\"n\">case</span> <span class=\"k\">calc</span><span class=\"bp\">.</span><span class=\"n\">step.b0</span> <span class=\"bp\">=&gt;</span>\n        <span class=\"n\">norm_num</span>\n      <span class=\"n\">case</span> <span class=\"k\">calc</span><span class=\"bp\">.</span><span class=\"n\">step.d0</span> <span class=\"bp\">=&gt;</span>\n        <span class=\"n\">norm_num</span>\n      <span class=\"n\">ring_nf</span>\n      <span class=\"n\">simp</span>\n      <span class=\"c1\">-- norm_cast</span>\n      <span class=\"c1\">-- linarith</span>\n      <span class=\"k\">calc</span>\n        <span class=\"mi\">12</span> <span class=\"bp\">+</span> <span class=\"bp\">↑</span><span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"mi\">27</span>\n        <span class=\"n\">_</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">24</span> <span class=\"bp\">+</span> <span class=\"bp\">↑</span><span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"mi\">36</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">linarith</span>\n    <span class=\"n\">case</span> <span class=\"n\">succ.hab</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"n\">simp</span>\n</code></pre></div>\n<p>throws <code>invalid 'calc' step, failed to synthesize </code>Trans<code> instance\n  Trans LT.lt LT.lt ?m.1047</code>at the second <code>calc</code> statement although it's technically the same (I think)</p>",
        "id": 390052843,
        "sender_full_name": "Robert hackman",
        "timestamp": 1694281240
    },
    {
        "content": "<p>I think you don't have the right syntax for <code>calc</code>. Search for examples in the source code.</p>",
        "id": 390053661,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1694282085
    },
    {
        "content": "<p>Here's an example from mathematics in Lean:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">my_lemma4</span> <span class=\"o\">:</span>\n    <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">ε</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">},</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">ε</span> <span class=\"bp\">→</span> <span class=\"n\">ε</span> <span class=\"bp\">≤</span> <span class=\"mi\">1</span> <span class=\"bp\">→</span> <span class=\"bp\">|</span><span class=\"n\">x</span><span class=\"bp\">|</span> <span class=\"bp\">&lt;</span> <span class=\"n\">ε</span> <span class=\"bp\">→</span> <span class=\"bp\">|</span><span class=\"n\">y</span><span class=\"bp\">|</span> <span class=\"bp\">&lt;</span> <span class=\"n\">ε</span> <span class=\"bp\">→</span> <span class=\"bp\">|</span><span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"bp\">|</span> <span class=\"bp\">&lt;</span> <span class=\"n\">ε</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">ε</span> <span class=\"n\">epos</span> <span class=\"n\">ele1</span> <span class=\"n\">xlt</span> <span class=\"n\">ylt</span>\n  <span class=\"k\">calc</span>\n    <span class=\"bp\">|</span><span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"bp\">|</span> <span class=\"bp\">=</span> <span class=\"bp\">|</span><span class=\"n\">x</span><span class=\"bp\">|</span> <span class=\"bp\">*</span> <span class=\"bp\">|</span><span class=\"n\">y</span><span class=\"bp\">|</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n    <span class=\"n\">_</span> <span class=\"bp\">≤</span> <span class=\"bp\">|</span><span class=\"n\">x</span><span class=\"bp\">|</span> <span class=\"bp\">*</span> <span class=\"n\">ε</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n    <span class=\"n\">_</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"n\">ε</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n    <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"n\">ε</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>Note that the first line is an equality, not a number.</p>",
        "id": 390054281,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1694282669
    },
    {
        "content": "<p>So I'm just very confused at that point.<br>\nI want to simplify by transforming both sides of the equasion, for example substracting 12, then dividing both sides by n and then 12.<br>\nI spend some time now reading thorugh docs and am still not certain which way to read it. <br>\nSo I will just assume now that when stating an in- or equality that it always refers to the left side of the equasion and that all of what I wrote above is wrong.</p>\n<p>But how do I go about transforming both sides then?</p>",
        "id": 390121234,
        "sender_full_name": "Robert hackman",
        "timestamp": 1694336852
    },
    {
        "content": "<p>Are you referring to your latest post?  This seems to work and maybe it is useful.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">):</span> <span class=\"bp\">∑</span> <span class=\"n\">k</span> <span class=\"k\">in</span> <span class=\"n\">Finset.Ico</span> <span class=\"mi\">0</span> <span class=\"n\">n.succ</span><span class=\"o\">,</span> <span class=\"o\">(((</span><span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"o\">(((</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"mi\">3</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"mi\">3</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">induction</span> <span class=\"n\">n</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">simp</span>\n  <span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"n\">n</span> <span class=\"n\">ih</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">rw</span><span class=\"o\">[</span><span class=\"n\">Finset.sum_Ico_succ_top</span> <span class=\"o\">(</span><span class=\"n\">Nat.zero_le</span> <span class=\"bp\">..</span><span class=\"o\">)]</span>\n    <span class=\"n\">rw</span><span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">Nat.succ_eq_add_one</span><span class=\"o\">]</span>\n    <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">_root_.add_lt_add_right</span> <span class=\"n\">ih</span> <span class=\"o\">(((</span><span class=\"n\">Nat.succ</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span><span class=\"o\">)</span>\n    <span class=\"n\">apply</span> <span class=\"n\">this.trans_le</span>\n    <span class=\"n\">field_simp</span>\n    <span class=\"n\">apply</span> <span class=\"n\">div_le_div</span> <span class=\"bp\">?</span><span class=\"n\">_</span> <span class=\"bp\">?</span><span class=\"n\">_</span> <span class=\"n\">zero_lt_three</span> <span class=\"n\">rfl.le</span>\n    <span class=\"bp\">·</span> <span class=\"n\">positivity</span>\n    <span class=\"bp\">·</span> <span class=\"n\">ring_nf</span>\n      <span class=\"n\">apply</span> <span class=\"n\">add_le_add_right</span>\n      <span class=\"n\">apply</span> <span class=\"n\">add_le_add_right</span>\n      <span class=\"n\">apply</span> <span class=\"n\">add_le_add</span>\n      <span class=\"bp\">·</span> <span class=\"n\">norm_num</span>\n      <span class=\"bp\">·</span> <span class=\"n\">norm_cast</span>\n        <span class=\"n\">apply</span> <span class=\"n\">Nat.mul_le_mul</span> <span class=\"n\">rfl.le</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">decide</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 390124451,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1694339081
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"321459\">Damiano Testa</span> <a href=\"#narrow/stream/113489-new-members/topic/more.20induction.20related.20questions/near/390124451\">said</a>:</p>\n<blockquote>\n<p>Are you referring to your latest post?  This seems to work and maybe it is useful.</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">):</span> <span class=\"bp\">∑</span> <span class=\"n\">k</span> <span class=\"k\">in</span> <span class=\"n\">Finset.Ico</span> <span class=\"mi\">0</span> <span class=\"n\">n.succ</span><span class=\"o\">,</span> <span class=\"o\">(((</span><span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"o\">(((</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"mi\">3</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"mi\">3</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">induction</span> <span class=\"n\">n</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">simp</span>\n  <span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"n\">n</span> <span class=\"n\">ih</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">rw</span><span class=\"o\">[</span><span class=\"n\">Finset.sum_Ico_succ_top</span> <span class=\"o\">(</span><span class=\"n\">Nat.zero_le</span> <span class=\"bp\">..</span><span class=\"o\">)]</span>\n    <span class=\"n\">rw</span><span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">Nat.succ_eq_add_one</span><span class=\"o\">]</span>\n    <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">_root_.add_lt_add_right</span> <span class=\"n\">ih</span> <span class=\"o\">(((</span><span class=\"n\">Nat.succ</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span><span class=\"o\">)</span>\n    <span class=\"n\">apply</span> <span class=\"n\">this.trans_le</span>\n    <span class=\"n\">field_simp</span>\n    <span class=\"n\">apply</span> <span class=\"n\">div_le_div</span> <span class=\"bp\">?</span><span class=\"n\">_</span> <span class=\"bp\">?</span><span class=\"n\">_</span> <span class=\"n\">zero_lt_three</span> <span class=\"n\">rfl.le</span>\n    <span class=\"bp\">·</span> <span class=\"n\">positivity</span>\n    <span class=\"bp\">·</span> <span class=\"n\">ring_nf</span>\n      <span class=\"n\">apply</span> <span class=\"n\">add_le_add_right</span>\n      <span class=\"n\">apply</span> <span class=\"n\">add_le_add_right</span>\n      <span class=\"n\">apply</span> <span class=\"n\">add_le_add</span>\n      <span class=\"bp\">·</span> <span class=\"n\">norm_num</span>\n      <span class=\"bp\">·</span> <span class=\"n\">norm_cast</span>\n        <span class=\"n\">apply</span> <span class=\"n\">Nat.mul_le_mul</span> <span class=\"n\">rfl.le</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">decide</span><span class=\"o\">)</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>thank you, this is super interesting! Will take me some time to fully understand it</p>",
        "id": 390129331,
        "sender_full_name": "Robert hackman",
        "timestamp": 1694342366
    },
    {
        "content": "<p>oh this is so cool thanks again, that was exactly what I was looking for!</p>",
        "id": 390486689,
        "sender_full_name": "Robert hackman",
        "timestamp": 1694513219
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 391485031,
        "sender_full_name": "Robert hackman",
        "timestamp": 1694948356
    },
    {
        "content": "<p>So I really wanted to have the <code>n &gt; 0</code>part explicetly in the paramters instead of putting +1 all over the goal, that's what I came up with (works..)<br>\nBut the one thing I don't understand about my code and <span class=\"user-mention\" data-user-id=\"321459\">@Damiano Testa</span> example is the <code>apply add_le_add_right/ add_le_add/ mul_le_mul</code> part. Not because I don't understand the hypothesis but because after applying it, the common parts of the equation are just cut away, but the theorem or the tactitc doesn't state that in anyway, why is it transformed in that way then?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">≥</span> <span class=\"mi\">1</span><span class=\"o\">):</span> <span class=\"bp\">∑</span> <span class=\"n\">k</span> <span class=\"k\">in</span> <span class=\"n\">Finset.Ico</span> <span class=\"mi\">1</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"o\">((</span><span class=\"n\">k</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"o\">((</span><span class=\"n\">n</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"mi\">3</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"mi\">3</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">cases'</span> <span class=\"n\">h</span>\n  <span class=\"n\">case</span> <span class=\"n\">refl</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">simp</span>\n  <span class=\"n\">case</span> <span class=\"n\">step</span> <span class=\"n\">n</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">induction</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">h</span> <span class=\"n\">using</span> <span class=\"n\">le_induction</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"n\">base</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"n\">simp</span>\n      <span class=\"n\">norm_num</span>\n    <span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"n\">n</span> <span class=\"n\">h</span> <span class=\"n\">ih</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"n\">rw</span><span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">succ_eq_add_one</span><span class=\"o\">]</span>\n      <span class=\"k\">have</span> <span class=\"n\">succ_zero_le_succ_one</span><span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">Nat.succ</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n        <span class=\"n\">apply</span> <span class=\"n\">succ_le_succ</span> <span class=\"o\">(</span><span class=\"n\">Nat.zero_le</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n      <span class=\"n\">rw</span><span class=\"o\">[</span><span class=\"n\">Finset.sum_Ico_succ_top</span> <span class=\"o\">(</span><span class=\"n\">succ_zero_le_succ_one</span> <span class=\"bp\">..</span><span class=\"o\">)]</span>\n\n      <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">_root_.add_lt_add_right</span> <span class=\"n\">ih</span> <span class=\"o\">(((</span><span class=\"n\">Nat.succ</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span><span class=\"o\">)</span>\n      <span class=\"n\">apply</span> <span class=\"n\">this.trans_le</span>\n\n      <span class=\"n\">field_simp</span>\n      <span class=\"n\">rw</span><span class=\"o\">[</span><span class=\"n\">div_le_div_iff</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">norm_num</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">norm_num</span><span class=\"o\">)]</span>\n      <span class=\"n\">ring_nf</span>\n      <span class=\"n\">apply</span> <span class=\"n\">add_le_add_right</span>\n      <span class=\"n\">apply</span> <span class=\"n\">add_le_add_right</span>\n      <span class=\"n\">apply</span> <span class=\"n\">_root_.add_le_add</span>\n      <span class=\"bp\">·</span> <span class=\"n\">norm_num</span>\n      <span class=\"bp\">·</span> <span class=\"n\">norm_cast</span>\n        <span class=\"n\">apply</span> <span class=\"n\">mul_le_mul</span> <span class=\"n\">rfl.le</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">decide</span><span class=\"o\">)</span>\n        <span class=\"n\">norm_num</span>\n        <span class=\"n\">apply</span> <span class=\"n\">Nat.zero_le</span>\n</code></pre></div>",
        "id": 392488343,
        "sender_full_name": "Robert hackman",
        "timestamp": 1695378460
    },
    {
        "content": "<p>I'm on mobile, so I what I is ever more subject to error than normal.  The lemmas <code>add_le_add/...</code> prove an inequality of the form <code>a+b ≤ c+d</code> from inequalities of the form <code>a ≤ c</code> and <code>b ≤ d</code>.  However, depending on the exact form of <code>add_le_add</code> that you use, say <code>a=c</code> in your case, some of the required inequalities are just true because they are equalities (really, someone proved this once and then you can use the more specialised result).</p>\n<p>This is indicated but the <code>right/left</code> suffix that you see in the name of the lemma.</p>",
        "id": 392498181,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1695382187
    },
    {
        "content": "<p>So, in such situations, if you use the more specialised lemma, some of the proof obligations are already done for you.</p>",
        "id": 392498332,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1695382241
    },
    {
        "content": "<p>Ok that explains why there are \"missing\"/ non explicit proofs, but I still don't understand why, when the hypothysis is  applied, it also substitutes <code>a</code>. Every time add_le_add_right is applied, the goal is simpliefied through the removal of the equal parts on both sides. Is \"apply\" doing that?</p>",
        "id": 392669126,
        "sender_full_name": "Robert hackman",
        "timestamp": 1695461483
    },
    {
        "content": "<p>Is the question about the code you pasted yesterday? Which line exactly is confusing?</p>",
        "id": 392670426,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1695462008
    },
    {
        "content": "<p>yep the last example I posted (since there is no line numeration), this is the part I'm talking about(below ring_nf):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">...</span>\n <span class=\"n\">apply</span> <span class=\"n\">add_le_add_right</span>\n      <span class=\"n\">apply</span> <span class=\"n\">add_le_add_right</span>\n      <span class=\"n\">apply</span> <span class=\"n\">_root_.add_le_add</span>\n      <span class=\"bp\">·</span> <span class=\"n\">norm_num</span>\n<span class=\"bp\">...</span>\n</code></pre></div>",
        "id": 392670719,
        "sender_full_name": "Robert hackman",
        "timestamp": 1695462131
    },
    {
        "content": "<p>So if you look at the definition of <code>add_le_add_right</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#check</span> <span class=\"n\">add_le_add_right</span>\n<span class=\"c1\">-- add_le_add_right.{u_1} {α : Type u_1} [inst✝ : Add α] [inst✝¹ : LE α]</span>\n<span class=\"c1\">--   [i : CovariantClass α α (Function.swap fun x x_1 ↦ x + x_1) fun x x_1 ↦ x ≤ x_1] {b c : α}</span>\n<span class=\"c1\">--   (bc : b ≤ c) (a : α) :</span>\n<span class=\"c1\">--   b + a ≤ c + a</span>\n</code></pre></div>\n<p>then you see it states that, under various assumptions that happen to be true for the natural numbers, if b ≤ c, then also b + a ≤ c + a. (In particular, this is because naturals are nonnegative.)</p>",
        "id": 392671372,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1695462339
    },
    {
        "content": "<p>What the <code>apply</code> tactic does is say: \"I'm trying to prove an assertion P and I have a lemma that says that Q implies P. Thanks to that lemma, it's sufficient to prove Q, so change my current goal to Q\"</p>",
        "id": 392671669,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1695462455
    },
    {
        "content": "<p>Does that clarify a bit?</p>",
        "id": 392671680,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1695462461
    },
    {
        "content": "<p>ok, I think I'm a bit at loss :D<br>\nBut I'm correct in the assumption that the substraction of  <code>a</code>(referring to a in add_le_add_right) is done through the apply tactic to get closer to the goal? <span aria-label=\"melting face\" class=\"emoji emoji-1fae0\" role=\"img\" title=\"melting face\">:melting_face:</span></p>",
        "id": 392672387,
        "sender_full_name": "Robert hackman",
        "timestamp": 1695462731
    },
    {
        "content": "<p>No subtraction ever occurs. <em>Cancellation</em> occurs, which is something different.</p>",
        "id": 392681972,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1695467136
    },
    {
        "content": "<p>One way of proving cancellation is using subtraction, but that is not what is being used here, because subtraction on the naturals is poorly behaved.</p>",
        "id": 392682058,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1695467182
    }
]