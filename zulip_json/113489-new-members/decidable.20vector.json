[
    {
        "content": "<p>How do I get Lean to recognize a quantifier like <code>  ∀ g : vector (fin 2) 3</code> as decidable?</p>\n<p>As a mwe, I think this code worked last year, but now I get <code>failed to synthesize class instance for decidable</code>.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">is_witness</span> <span class=\"o\">{</span><span class=\"n\">n</span><span class=\"o\">:</span><span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">b</span><span class=\"o\">:</span><span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">vector</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">q</span><span class=\"o\">:</span><span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">vector</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"n\">n.succ</span><span class=\"o\">):</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">∀</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">vector</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"n\">n.succ</span><span class=\"o\">,</span>\n    <span class=\"n\">g.1.nth</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"n\">h.1.nth</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span>\n    <span class=\"n\">g.1.nth</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">h.1.nth</span> <span class=\"n\">n</span> <span class=\"bp\">→</span>\n    <span class=\"bp\">∀</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">vector</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"o\">(</span>\n      <span class=\"bp\">∀</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n        <span class=\"o\">[</span><span class=\"n\">h.nth</span> <span class=\"n\">l.1</span><span class=\"o\">,</span> <span class=\"n\">h.nth</span> <span class=\"n\">l.1.succ</span><span class=\"o\">]</span> <span class=\"bp\">=</span>\n        <span class=\"o\">[</span><span class=\"n\">g.nth</span> <span class=\"n\">k.1</span><span class=\"o\">,</span> <span class=\"n\">g.nth</span> <span class=\"n\">k.1.succ</span><span class=\"o\">]</span> <span class=\"bp\">∧</span> <span class=\"n\">x.nth</span> <span class=\"n\">l</span> <span class=\"bp\">=</span> <span class=\"n\">y.nth</span> <span class=\"n\">k</span>\n    <span class=\"o\">)</span> <span class=\"bp\">→</span>\n    <span class=\"n\">g</span><span class=\"bp\">=</span><span class=\"n\">h</span> <span class=\"bp\">∧</span> <span class=\"n\">x</span><span class=\"bp\">=</span><span class=\"n\">y</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">{</span><span class=\"n\">n</span><span class=\"o\">:</span><span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">b</span><span class=\"o\">:</span><span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">vector</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">q</span><span class=\"o\">:</span><span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">vector</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"n\">n.succ</span><span class=\"o\">):</span>\n<span class=\"n\">decidable</span> <span class=\"o\">(</span><span class=\"n\">is_witness</span> <span class=\"n\">b</span> <span class=\"n\">x</span> <span class=\"n\">q</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">decidable_of_iff</span> <span class=\"o\">(</span>\n  <span class=\"bp\">∀</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">vector</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"n\">n.succ</span><span class=\"o\">,</span>\n    <span class=\"n\">g.1.nth</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"n\">h.1.nth</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span>\n    <span class=\"n\">g.1.nth</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">h.1.nth</span> <span class=\"n\">n</span> <span class=\"bp\">→</span>\n    <span class=\"bp\">∀</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">vector</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"o\">(</span>\n      <span class=\"bp\">∀</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n        <span class=\"o\">[</span><span class=\"n\">h.nth</span> <span class=\"n\">l.1</span><span class=\"o\">,</span> <span class=\"n\">h.nth</span> <span class=\"n\">l.1.succ</span><span class=\"o\">]</span> <span class=\"bp\">=</span>\n        <span class=\"o\">[</span><span class=\"n\">g.nth</span> <span class=\"n\">k.1</span><span class=\"o\">,</span> <span class=\"n\">g.nth</span> <span class=\"n\">k.1.succ</span><span class=\"o\">]</span> <span class=\"bp\">∧</span> <span class=\"n\">x.nth</span> <span class=\"n\">l</span> <span class=\"bp\">=</span> <span class=\"n\">y.nth</span> <span class=\"n\">k</span>\n    <span class=\"o\">)</span> <span class=\"bp\">→</span>\n    <span class=\"n\">g</span><span class=\"bp\">=</span><span class=\"n\">h</span> <span class=\"bp\">∧</span> <span class=\"n\">x</span><span class=\"bp\">=</span><span class=\"n\">y</span>\n<span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"n\">is_witness</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 359929867,
        "sender_full_name": "Bjørn Kjos-Hanssen",
        "timestamp": 1684601884
    },
    {
        "content": "<p>there should be an instance of <code>fintype (vector A n)</code> when <code>fintype A</code></p>",
        "id": 359929955,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1684601935
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span>  this does fix the problem (but it has a <code>sorry</code>):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">{</span><span class=\"n\">b</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">fintype</span> <span class=\"o\">(</span><span class=\"n\">vector</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 359930597,
        "sender_full_name": "Bjørn Kjos-Hanssen",
        "timestamp": 1684602234
    },
    {
        "content": "<p>you are probably just missing an import if <code>by apply_instance</code> doesn't prove it</p>",
        "id": 359930691,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1684602262
    },
    {
        "content": "<p><code>import data.fintype.vector</code> maybe</p>",
        "id": 359930787,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1684602304
    },
    {
        "content": "<p>Thanks, that did it! So I guess to get <code>anything</code> to be decidable one tries to <code>import data.fintype.anything</code>.</p>",
        "id": 359931510,
        "sender_full_name": "Bjørn Kjos-Hanssen",
        "timestamp": 1684602652
    }
]