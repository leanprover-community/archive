[
    {
        "content": "<p>Hello, I would like some help with the following. </p>\n<p>The problem is <code>f'' d d</code> in the have statement. I want f'' to be the hessian defined at c. f'' is currently evaluated at x_star from hx. Since the function is twice continuous, I would like a hessian function f'', which I can evaluate at any x in U rather than be fixed to the specific point x_star.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">analysis.inner_product_space.euclidean_dist</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic</span> <span class=\"c1\">-- imports all the Lean tactics</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.real.basic</span> <span class=\"c1\">-- imports the real numbers</span>\n\n<span class=\"kd\">notation</span> <span class=\"bp\">`𝓔`</span> <span class=\"n\">n</span><span class=\"o\">:</span><span class=\"mi\">50</span> <span class=\"o\">:=</span> <span class=\"n\">euclidean_space</span> <span class=\"n\">ℝ</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n\n<span class=\"c1\">-- f is twice continuously differentiable over U</span>\n<span class=\"kd\">def</span> <span class=\"n\">twice_continuous_diff_on</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">𝓔</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"bp\">𝓔</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"n\">continuous_on</span> <span class=\"o\">(</span><span class=\"n\">fderiv</span> <span class=\"n\">ℝ</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"n\">U</span> <span class=\"bp\">∧</span>\n  <span class=\"n\">continuous_on</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">fderiv</span> <span class=\"n\">ℝ</span> <span class=\"o\">(</span><span class=\"n\">fderiv</span> <span class=\"n\">ℝ</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"n\">U</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">necess_2nd_order_optimality_condit</span>\n    <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"bp\">𝓔</span> <span class=\"n\">n</span><span class=\"o\">)}</span>\n    <span class=\"o\">{</span><span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"bp\">𝓔</span> <span class=\"n\">n</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h_d_nonzero</span> <span class=\"o\">:</span> <span class=\"n\">d</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n    <span class=\"o\">{</span><span class=\"n\">x_star</span> <span class=\"o\">:</span> <span class=\"bp\">𝓔</span> <span class=\"n\">n</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h_xstar_in_U</span> <span class=\"o\">:</span> <span class=\"n\">x_star</span> <span class=\"bp\">∈</span> <span class=\"n\">U</span><span class=\"o\">)</span>\n    <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">𝓔</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f'</span> <span class=\"o\">:</span> <span class=\"bp\">𝓔</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"bp\">𝓔</span> <span class=\"n\">n</span> <span class=\"bp\">→</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"n\">ℝ</span><span class=\"o\">]</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f''</span> <span class=\"o\">:</span> <span class=\"bp\">𝓔</span> <span class=\"n\">n</span> <span class=\"bp\">→</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"n\">ℝ</span><span class=\"o\">]</span> <span class=\"bp\">𝓔</span> <span class=\"n\">n</span> <span class=\"bp\">→</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"n\">ℝ</span><span class=\"o\">]</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span>\n    <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">y</span> <span class=\"bp\">∈</span> <span class=\"n\">U</span><span class=\"o\">,</span> <span class=\"n\">has_fderiv_at</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">f'</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">has_fderiv_at</span> <span class=\"n\">f'</span> <span class=\"n\">f''</span> <span class=\"n\">x_star</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">h_twice_continuous</span> <span class=\"o\">:</span> <span class=\"n\">twice_continuous_diff_on</span> <span class=\"n\">f</span> <span class=\"n\">U</span><span class=\"o\">):</span>\n    <span class=\"bp\">∀</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">f''</span> <span class=\"n\">y</span> <span class=\"n\">y</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">MWE</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">3</span><span class=\"o\">)),</span> <span class=\"bp\">∃</span> <span class=\"n\">c</span> <span class=\"bp\">∈</span> <span class=\"n\">U</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">x_star</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">•</span> <span class=\"n\">d</span><span class=\"o\">))</span> <span class=\"bp\">-</span> <span class=\"n\">f</span> <span class=\"n\">x_star</span> <span class=\"bp\">=</span> <span class=\"o\">((</span><span class=\"n\">α</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"o\">)</span><span class=\"bp\">/</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">f''</span> <span class=\"n\">d</span> <span class=\"n\">d</span> <span class=\"o\">,</span>\n    <span class=\"o\">{</span>\n\n      <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n      <span class=\"o\">},</span>\n\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 342757374,
        "sender_full_name": "Abu Al Hassan",
        "timestamp": 1679137597
    },
    {
        "content": "<p>In my proof I need to do: z^{T}∇²f(h)z. Where z and h are varied hence should be inputs.</p>",
        "id": 342758597,
        "sender_full_name": "Abu Al Hassan",
        "timestamp": 1679137877
    },
    {
        "content": "<p>Replace <code>f''x_star : 𝓔 n →L[ℝ] 𝓔 n →L[ℝ] ℝ</code> with <code>f'' : 𝓔 n → (𝓔 n →L[ℝ] 𝓔 n →L[ℝ] ℝ)</code></p>",
        "id": 342762298,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1679139074
    },
    {
        "content": "<p><code>(hx : has_fderiv_at f' f''x_star x_star)</code> will then_become <code>(hx : ∀ y ∈ U, has_fderiv_at f' (f'' y) y)</code> I think</p>",
        "id": 342762658,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1679139198
    },
    {
        "content": "<p>Is <code>twice_continuous_diff_on f U</code> any different to <code>cont_diff_on ℝ 2 f U</code>?</p>",
        "id": 342797613,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1679151800
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"583816\">@Abu Al Hassan</span> did you understand Sebastian Gouezel's comment in your other thread, that you should not be working with Euclidean space because this is an irrelevant special case, and your proof will work in much more generality?</p>",
        "id": 342799023,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1679152298
    },
    {
        "content": "<p>And also I think that you should really stop thinking about things in terms of matrices. Linear and bilinear maps are the correct generality here.</p>",
        "id": 342799175,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1679152346
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113489-new-members/topic/hessian.20of.20a.20function/near/342762298\">said</a>:</p>\n<blockquote>\n<p>Replace <code>f''x_star : 𝓔 n →L[ℝ] 𝓔 n →L[ℝ] ℝ</code> with <code>f'' : 𝓔 n → (𝓔 n →L[ℝ] 𝓔 n →L[ℝ] ℝ)</code></p>\n</blockquote>\n<p>Thank you, Eric, that worked really well for me!</p>",
        "id": 342830936,
        "sender_full_name": "Abu Al Hassan",
        "timestamp": 1679167330
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/hessian.20of.20a.20function/near/342797613\">said</a>:</p>\n<blockquote>\n<p>Is <code>twice_continuous_diff_on f U</code> any different to <code>cont_diff_on ℝ 2 f U</code>?</p>\n</blockquote>\n<p>I am using that now.</p>",
        "id": 342830967,
        "sender_full_name": "Abu Al Hassan",
        "timestamp": 1679167349
    },
    {
        "content": "<p>Regarding Sebastian Gouezel's comment. I have now had a thought about it and come up with what I think works. He said generality will make proving things easier so that is convincing enough.</p>\n<p>Here are my adjustments. Hopefully, it is fine as it's my first time defining spaces in this way.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span> <span class=\"c1\">-- imports all the Lean tactics</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.real.basic</span> <span class=\"c1\">-- imports the real numbers</span>\n<span class=\"kn\">import</span> <span class=\"n\">analysis.calculus.cont_diff</span>\n<span class=\"kn\">import</span> <span class=\"n\">topology.local_extr</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">normed_add_comm_group</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">normed_space</span> <span class=\"n\">ℝ</span> <span class=\"n\">E</span><span class=\"o\">]</span>\n<span class=\"kd\">variables</span>  <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">normed_add_comm_group</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">normed_space</span> <span class=\"n\">ℝ</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">partial_order</span> <span class=\"n\">F</span><span class=\"o\">]</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">necess_2nd_order_optimality_condit</span>\n    <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">E</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h_open</span> <span class=\"o\">:</span> <span class=\"n\">is_open</span> <span class=\"n\">u</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">h_d_nonzero</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">d</span> <span class=\"bp\">∈</span> <span class=\"n\">u</span><span class=\"o\">,</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"bp\">‖</span> <span class=\"n\">d</span> <span class=\"bp\">‖</span> <span class=\"o\">)</span> <span class=\"c1\">--couldn't write d ≠ 0 as it would take d as a natural number</span>\n    <span class=\"o\">{</span><span class=\"n\">x_star</span> <span class=\"o\">:</span> <span class=\"n\">E</span><span class=\"o\">}</span>\n    <span class=\"o\">{</span><span class=\"n\">h_x_star</span> <span class=\"o\">:</span> <span class=\"n\">x_star</span> <span class=\"bp\">∈</span> <span class=\"n\">u</span><span class=\"o\">}</span>\n    <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">E</span> <span class=\"bp\">→</span> <span class=\"n\">F</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f'</span> <span class=\"o\">:</span> <span class=\"n\">E</span> <span class=\"bp\">→</span> <span class=\"n\">E</span> <span class=\"bp\">→</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"n\">ℝ</span><span class=\"o\">]</span> <span class=\"n\">F</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f''</span> <span class=\"o\">:</span> <span class=\"n\">E</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">E</span> <span class=\"bp\">→</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"n\">ℝ</span><span class=\"o\">]</span> <span class=\"n\">E</span> <span class=\"bp\">→</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"n\">ℝ</span><span class=\"o\">]</span> <span class=\"n\">F</span><span class=\"o\">)}</span>\n    <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">y</span> <span class=\"bp\">∈</span> <span class=\"n\">u</span><span class=\"o\">,</span> <span class=\"n\">has_fderiv_at</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">f'</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"n\">y</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">y</span> <span class=\"bp\">∈</span> <span class=\"n\">u</span><span class=\"o\">,</span> <span class=\"n\">has_fderiv_at</span> <span class=\"n\">f'</span> <span class=\"o\">(</span><span class=\"n\">f''</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"n\">y</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">h_stationary</span> <span class=\"o\">:</span> <span class=\"n\">f'</span> <span class=\"n\">x_star</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">h_twice_continuous_diffable</span> <span class=\"o\">:</span> <span class=\"n\">cont_diff_on</span> <span class=\"n\">ℝ</span> <span class=\"mi\">2</span> <span class=\"n\">f</span> <span class=\"n\">u</span><span class=\"o\">):</span>\n    <span class=\"n\">is_local_min_on</span> <span class=\"n\">f</span> <span class=\"n\">u</span> <span class=\"n\">x_star</span> <span class=\"bp\">→</span> <span class=\"bp\">∀</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"o\">(</span><span class=\"n\">f''</span> <span class=\"n\">x_star</span><span class=\"o\">)</span> <span class=\"n\">y</span> <span class=\"n\">y</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 342831336,
        "sender_full_name": "Abu Al Hassan",
        "timestamp": 1679167582
    },
    {
        "content": "<blockquote>\n<p>couldn't write d ≠ 0 as it would take d as a natural number</p>\n</blockquote>\n<p>Write <code>d ≠ (0 : E)</code></p>",
        "id": 342831619,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1679167761
    },
    {
        "content": "<p>Great that works, thank you</p>",
        "id": 342831770,
        "sender_full_name": "Abu Al Hassan",
        "timestamp": 1679167847
    },
    {
        "content": "<p><code>[partial_order F]</code> feels unlikely to be helpful to you, because it says nothing about the relation between order and norm.</p>",
        "id": 342831779,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1679167852
    },
    {
        "content": "<p>What do you want the meaning of \"local minimum\" to be on <code>f : E → F</code> if <code>F = ℝ^3</code>?</p>",
        "id": 342831821,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1679167888
    },
    {
        "content": "<p>Which is to say; I suspect your setup only really makes sense for <code>F = ℝ</code></p>",
        "id": 342831902,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1679167946
    },
    {
        "content": "<p>You are absolutely right that I need to make F be<code> ℝ</code>.</p>",
        "id": 342833814,
        "sender_full_name": "Abu Al Hassan",
        "timestamp": 1679169179
    },
    {
        "content": "<p>That way I get rid of <code>[partial_order F]</code> aswell :)</p>",
        "id": 342833909,
        "sender_full_name": "Abu Al Hassan",
        "timestamp": 1679169232
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"583816\">Abu Al Hassan</span> has marked this topic as resolved.</p>",
        "id": 342918688,
        "sender_full_name": "Notification Bot",
        "timestamp": 1679225889
    }
]