[
    {
        "content": "<p>I have been working through the chapter on Type Claases in <em>Theorem Proving in Lean 4</em> and had some trouble understanding <code>inferInstance</code>. I have a couple of questions.</p>\n<p>Question 1.<br>\nIn the following</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#print</span> <span class=\"n\">inferInstance</span>\n\n<span class=\"kd\">@[reducible]</span> <span class=\"kd\">def</span> <span class=\"n\">inferInstance.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"o\">[</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"k\">fun</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">i</span>\n</code></pre></div>\n<p>how should one interpret <code>[i : α]</code>? My understanding (probably faulty) is that it is related to type class but I don't quite understand this syntax, especially when it appears in the anoynmous function <code>fun {α} [i : α] =&gt; i</code>. I suppose that it is not an argument here, is that correct?</p>\n<p>Question 2.<br>\nIn what situations does one need  <code>inferInstance</code>? I couldn't quite tell from the example in the book the intuition/motivation.</p>\n<p>Any help or pointers greatly appreciated.</p>",
        "id": 374586143,
        "sender_full_name": "Kevin Cheung",
        "timestamp": 1689161898
    },
    {
        "content": "<p>An input <code>[a : T]</code> in a theorem means \"let the square bracket machine supply this input\". The code <code>variable (G : Type) [group G]</code> means \"let G be a type, and put the fact that G is a group into the square bracket machine\", and now all theorems which require G to be a group are now available to you, as well as all theorems which require G to be e.g. a monoid or a semigroup, because the square bracket machine knows that a group is a monoid.</p>\n<p>The square bracket machine is called the typeclass inference system, and it can be though of as a big database of standard facts (e.g. the reals are a field, the rationals are ordered, the integers are a group...) which can be added to with <code>[...]</code> assumptions.</p>\n<p>The definition of <code>inferInstance</code> means that the code <code>example : Field \\R := inferInstance</code> should compile, because the square bracket machine has to fill in the input <code>[i : Field \\R]</code> but this instance is in mathlib, so the machine finds <code>i</code> and then returns <code>i</code>.</p>",
        "id": 374594412,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1689163630
    },
    {
        "content": "<p>I think I am getting it. Now, in the following</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">inferInstance</span> <span class=\"n\">Nat</span><span class=\"o\">)</span>\n\n<span class=\"bp\">@</span><span class=\"n\">inferInstance</span> <span class=\"n\">Nat</span> <span class=\"o\">:</span> <span class=\"o\">[</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">]</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span>\n</code></pre></div>\n<p>how does Lean treat <code>[i : Nat]</code>? (I guess one shouldn't be passing <code>Nat</code> to <code>@inferInstance</code> but I am just curious about what's going on here.)</p>",
        "id": 374597708,
        "sender_full_name": "Kevin Cheung",
        "timestamp": 1689164244
    },
    {
        "content": "<p>You only get access to <code>[i : A]</code> if your type is a <code>class</code>. <code>Nat</code> isn’t a class. Classes should be types where it is reasonable for Lean to fill the data from some “canonical” choice when your types are concrete.</p>",
        "id": 374604542,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1689165570
    },
    {
        "content": "<blockquote>\n<p>how does Lean treat <code>[i : Nat]</code>?</p>\n</blockquote>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">#</span><span class=\"n\">synth</span> <span class=\"n\">Nat</span> <span class=\"c1\">-- type class instance expected</span>\n           <span class=\"c1\">--   ℕ</span>\n</code></pre></div>\n<p>The square bracket system failed.</p>",
        "id": 374627575,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1689169984
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306577\">Matthew Ballard</span> <a href=\"#narrow/stream/113489-new-members/topic/Questions.20on.20inferInstance/near/374604542\">said</a>:</p>\n<blockquote>\n<p>You only get access to <code>[i : A]</code> if your type is a <code>class</code>. <code>Nat</code> isn’t a class. Classes should be types where it is reasonable for Lean to fill the data from some “canonical” choice when your types are concrete.</p>\n</blockquote>\n<p>I am not sure I completely understood the last sentence. Did what it say explains why the following doesn't lead to an error?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#eval</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">inferInstance</span> <span class=\"n\">Nat</span> <span class=\"mi\">6</span><span class=\"o\">)</span>\n<span class=\"mi\">6</span>\n</code></pre></div>",
        "id": 374640840,
        "sender_full_name": "Kevin Cheung",
        "timestamp": 1689172204
    },
    {
        "content": "<p>Using <code>@</code> and filling in the second argument is getting Lean to skip the checks that <code>Nat</code> is a typeclass. If you do <code>#eval (inferInstance : Nat)</code> you'll get \"type class instance expected\"</p>",
        "id": 374643800,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1689172717
    },
    {
        "content": "<p>Here's another way to trick it: <code>#eval inferInstance (i := 6)</code>. This is using that <code>i</code> is the name of the instance argument to <code>inferInstance</code></p>",
        "id": 374644239,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1689172802
    },
    {
        "content": "<p>I believe the check only happens if Lean is responsible for filling in an instance argument.</p>",
        "id": 374644548,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1689172858
    },
    {
        "content": "<p>Lean isn't complaining with your example because Lean is taking your word for it that <code>Nat</code> is a typeclass</p>",
        "id": 374645298,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1689173001
    },
    {
        "content": "<p>Thanks for all the responses. They have been very helpful understanding the magic that Lean does.</p>",
        "id": 374645466,
        "sender_full_name": "Kevin Cheung",
        "timestamp": 1689173032
    },
    {
        "content": "<p>One last newbie question (for now). When one specifies a type hole <code>_</code>, how does one ask Lean to show the result of unification? (That is, what Lean fills it with?)</p>",
        "id": 374645731,
        "sender_full_name": "Kevin Cheung",
        "timestamp": 1689173074
    },
    {
        "content": "<p>for Q2: usually <code>inferInstance</code> is unnecessary. I think pointing out is mostly to show you how you can query the instance database</p>",
        "id": 374645772,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1689173083
    }
]