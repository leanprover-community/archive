[
    {
        "content": "<p>While trying to define a mutually recursive function, I've been running into this \"unknown constant 'bar'\" error. I can't figure out why. <br>\nHere's a MWE:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">mutual</span>\n  <span class=\"kd\">inductive</span> <span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n  <span class=\"bp\">|</span> <span class=\"n\">baseA</span>  <span class=\"o\">:</span> <span class=\"n\">A</span>\n  <span class=\"bp\">|</span> <span class=\"n\">fromBA</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"bp\">→</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">A</span>\n\n  <span class=\"kd\">inductive</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n  <span class=\"bp\">|</span> <span class=\"n\">baseB</span>  <span class=\"o\">:</span> <span class=\"n\">B</span>\n  <span class=\"bp\">|</span> <span class=\"n\">fromA</span>  <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">B</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">mutual</span>\n  <span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>    <span class=\"c1\">-- unknown constant 'bar'</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">baseB</span>   <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">True</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">fromA</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">c1</span> <span class=\"n\">c2</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">c1</span> <span class=\"bp\">=</span> <span class=\"n\">c2</span> <span class=\"bp\">∧</span> <span class=\"n\">bar</span> <span class=\"n\">a</span> <span class=\"n\">c1</span><span class=\"o\">)</span>\n\n  <span class=\"kd\">def</span> <span class=\"n\">bar</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">baseA</span>      <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">True</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">fromBA</span> <span class=\"n\">b</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">c</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">∃</span> <span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">foo</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">t</span> <span class=\"bp\">∧</span> <span class=\"n\">bar</span> <span class=\"n\">a</span> <span class=\"n\">t</span><span class=\"o\">)</span>\n<span class=\"kd\">end</span>\n<span class=\"n\">termination_by</span>\n  <span class=\"n\">foo</span> <span class=\"n\">_</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">sizeOf</span> <span class=\"n\">b</span>\n  <span class=\"n\">bar</span> <span class=\"n\">_</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">sizeOf</span> <span class=\"n\">a</span>\n\n<span class=\"c1\">-- This does work for some reason, but writing the original code like this is undesired.</span>\n<span class=\"kd\">mutual</span>\n  <span class=\"kd\">def</span> <span class=\"n\">foo'</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">baseB</span><span class=\"o\">,</span>   <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">True</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">fromA</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"bp\">∧</span> <span class=\"n\">bar'</span> <span class=\"n\">a</span> <span class=\"n\">x</span>\n\n  <span class=\"kd\">def</span> <span class=\"n\">bar'</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">baseA</span><span class=\"o\">,</span>     <span class=\"n\">_</span>  <span class=\"bp\">=&gt;</span> <span class=\"n\">True</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">fromBA</span> <span class=\"n\">b</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">foo'</span> <span class=\"n\">b</span> <span class=\"n\">x</span> <span class=\"n\">t</span> <span class=\"bp\">∧</span> <span class=\"n\">bar'</span> <span class=\"n\">a</span> <span class=\"n\">t</span><span class=\"o\">)</span>\n<span class=\"kd\">end</span>\n<span class=\"n\">termination_by</span>\n  <span class=\"n\">foo'</span> <span class=\"n\">_</span> <span class=\"n\">b</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">sizeOf</span> <span class=\"n\">b</span>\n  <span class=\"n\">bar'</span> <span class=\"n\">_</span> <span class=\"n\">a</span> <span class=\"n\">_</span>   <span class=\"bp\">=&gt;</span> <span class=\"n\">sizeOf</span> <span class=\"n\">a</span>\n</code></pre></div>",
        "id": 402277011,
        "sender_full_name": "Noam Cohen",
        "timestamp": 1700064229
    },
    {
        "content": "<p>That looks like a bug. I wonder if it's the same as <a href=\"https://github.com/leanprover/lean4/issues/2628\">https://github.com/leanprover/lean4/issues/2628</a>, but that one says <code>(kernel) unknown constant </code></p>",
        "id": 402279245,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1700064797
    },
    {
        "content": "<p>Further minimization:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">mutual</span>\n  <span class=\"kd\">inductive</span> <span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n  <span class=\"bp\">|</span> <span class=\"n\">baseA</span>  <span class=\"o\">:</span> <span class=\"n\">A</span>\n  <span class=\"bp\">|</span> <span class=\"n\">fromB</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"bp\">→</span> <span class=\"n\">A</span>\n\n  <span class=\"kd\">inductive</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n  <span class=\"bp\">|</span> <span class=\"n\">fromA</span>  <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">B</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">mutual</span>\n  <span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>    <span class=\"c1\">-- unknown constant 'bar'</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">fromA</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">c</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">bar</span> <span class=\"n\">a</span> <span class=\"n\">c</span><span class=\"o\">)</span>\n\n  <span class=\"kd\">def</span> <span class=\"n\">bar</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">baseA</span>   <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">True</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">fromB</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">foo</span> <span class=\"n\">b</span> <span class=\"n\">t</span><span class=\"o\">)</span>\n<span class=\"kd\">end</span>\n<span class=\"n\">termination_by</span>\n  <span class=\"n\">foo</span> <span class=\"n\">_</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">sizeOf</span> <span class=\"n\">b</span>\n  <span class=\"n\">bar</span> <span class=\"n\">_</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">sizeOf</span> <span class=\"n\">a</span>\n</code></pre></div>\n<p>but removing the <code>α</code>-parameter and using <code>Nat</code> there makes it work.</p>",
        "id": 402280848,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1700065200
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"470149\">Joachim Breitner</span> <a href=\"#narrow/stream/113489-new-members/topic/.22unknown.20constant.22.20in.20recursive.20mutual.20def/near/402279245\">said</a>:</p>\n<blockquote>\n<p>That looks like a bug. I wonder if it's the same as <a href=\"https://github.com/leanprover/lean4/issues/2628\">https://github.com/leanprover/lean4/issues/2628</a>, but that one says <code>(kernel) unknown constant </code></p>\n</blockquote>\n<p>Ah, that does look very similar.</p>",
        "id": 402281313,
        "sender_full_name": "Noam Cohen",
        "timestamp": 1700065301
    },
    {
        "content": "<p>But only similar, not quite the same. I’ll report an issue and have a look at some point.<br>\n<a href=\"https://github.com/leanprover/lean4/issues/2883\">https://github.com/leanprover/lean4/issues/2883</a></p>",
        "id": 402281485,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1700065350
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"470149\">Joachim Breitner</span> <a href=\"#narrow/stream/113489-new-members/topic/.22unknown.20constant.22.20in.20recursive.20mutual.20def/near/402280848\">said</a>:</p>\n<blockquote>\n<p>but removing the <code>α</code>-parameter and using <code>Nat</code> there makes it work.</p>\n</blockquote>\n<p>This still gives me an error:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">mutual</span>\n  <span class=\"kd\">inductive</span> <span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n  <span class=\"bp\">|</span> <span class=\"n\">baseA</span>  <span class=\"o\">:</span> <span class=\"n\">A</span>\n  <span class=\"bp\">|</span> <span class=\"n\">fromB</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"bp\">→</span> <span class=\"n\">A</span>\n\n  <span class=\"kd\">inductive</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n  <span class=\"bp\">|</span> <span class=\"n\">fromA</span>  <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">B</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">mutual</span>\n  <span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>    <span class=\"c1\">-- unknown constant 'bar'</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">fromA</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">c</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">bar</span> <span class=\"n\">a</span> <span class=\"n\">c</span><span class=\"o\">)</span>\n\n  <span class=\"kd\">def</span> <span class=\"n\">bar</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">baseA</span>   <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">True</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">fromB</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">),</span> <span class=\"n\">foo</span> <span class=\"n\">b</span> <span class=\"n\">t</span><span class=\"o\">)</span>\n<span class=\"kd\">end</span>\n<span class=\"n\">termination_by</span>\n  <span class=\"n\">foo</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">sizeOf</span> <span class=\"n\">x</span>\n  <span class=\"n\">bar</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">sizeOf</span> <span class=\"n\">x</span>\n</code></pre></div>\n<p>Is that not what you meant?</p>",
        "id": 402282057,
        "sender_full_name": "Noam Cohen",
        "timestamp": 1700065535
    },
    {
        "content": "<p>It is. I may have mistyped. Thanks!</p>",
        "id": 402282738,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1700065724
    }
]