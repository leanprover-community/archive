[
    {
        "content": "<p>I have been using the following structure with no problems:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.Module.LinearMap</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.RingTheory.HahnSeries</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">VertexOperator</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">CommRing</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">AddCommGroup</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Module</span> <span class=\"n\">R</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"n\">where</span>\n  <span class=\"n\">toMap</span> <span class=\"o\">:</span> <span class=\"n\">V</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">HahnSeries</span> <span class=\"n\">ℤ</span> <span class=\"n\">V</span>\n</code></pre></div>\n<p>but building up to <code>instance [CommRing R] [AddCommGroup V] [Module R V] : Module R (VertexOperator R V)</code> took about 100 lines of code with lots of <code>ext</code>, <code>intro</code> and <code>simp</code> to deal with the various fields.  It seems that linear maps already have an <code>R</code>-module structure, but my use of <code>structure</code> means this fact is obscured.  Is there an easier way to get an <code>R</code>-module action?</p>",
        "id": 407517156,
        "sender_full_name": "Scott Carnahan",
        "timestamp": 1702399004
    },
    {
        "content": "<p>You want to end up using <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Function.Injective.addCommGroup#doc\">docs#Function.Injective.addCommGroup</a> and <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Function.Injective.module#doc\">docs#Function.Injective.module</a></p>",
        "id": 407517805,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1702399205
    },
    {
        "content": "<p>Though the easiest option by far is <code>abbrev VertexOperator := V →ₗ[R] HahnSeries ℤ V</code></p>",
        "id": 407517891,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1702399233
    },
    {
        "content": "<p>Are there downsides to <code>abbrev</code>?</p>",
        "id": 407518006,
        "sender_full_name": "Scott Carnahan",
        "timestamp": 1702399268
    },
    {
        "content": "<p>Whether that's a good idea depends on whether there are behaviors that make sense for <code>VertexOperator  R V</code> which do not make sense for <code>V →ₗ[R] HahnSeries ℤ V</code></p>",
        "id": 407518026,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1702399273
    },
    {
        "content": "<p>For instance, we can't use it for <code>abbrev Polynomial := Finsupp ...</code> because we want <code>*</code> to mean different things on polynomials (convolutive) and supported functions (pointwise)</p>",
        "id": 407518136,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1702399310
    },
    {
        "content": "<p>I see.  Thanks!</p>",
        "id": 407518241,
        "sender_full_name": "Scott Carnahan",
        "timestamp": 1702399333
    },
    {
        "content": "<p>Actually, here you could use <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Equiv.module#doc\">docs#Equiv.module</a></p>",
        "id": 407518388,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1702399378
    }
]