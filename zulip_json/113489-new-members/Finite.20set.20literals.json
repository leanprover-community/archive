[
    {
        "content": "<p>Does Lean 3 have a way to write set literals, analogous to <code>{3, 5}</code>?</p>",
        "id": 352911665,
        "sender_full_name": "Martin C. Martin",
        "timestamp": 1682531798
    },
    {
        "content": "<p><code>example : {3, 5} = {5, 3} := sorry</code> gives an error.</p>",
        "id": 352911972,
        "sender_full_name": "Martin C. Martin",
        "timestamp": 1682531844
    },
    {
        "content": "<p>That's because it's ambiguous. Do either</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">({</span><span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"mi\">5</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">{</span><span class=\"mi\">5</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>or</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.finset.basic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">({</span><span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"mi\">5</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">{</span><span class=\"mi\">5</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>depending on which one you mean.</p>",
        "id": 352916696,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1682533016
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 352917527,
        "sender_full_name": "Martin C. Martin",
        "timestamp": 1682533296
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"348963\">Martin C. Martin</span> <a href=\"#narrow/stream/113489-new-members/topic/Finite.20set.20literals/near/352917527\">said</a>:</p>\n<blockquote>\n<p>Thanks!</p>\n</blockquote>\n<p>I have found it useful to write <code>{5, 3}.toFinset</code> (assuming lean 4)</p>",
        "id": 353196736,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1682588959
    },
    {
        "content": "<p>I would not recommend using that spelling</p>",
        "id": 353196914,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1682588982
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span>' suggestion above is the right spelling</p>",
        "id": 353197136,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1682589007
    },
    {
        "content": "<p>Okay. I tried this. But when I dealt with definitions or theorems on finsets and I have to use set notation, adding type annotation (on the other side of <code>:=</code>) seemed cumbersome.</p>",
        "id": 353197793,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1682589108
    },
    {
        "content": "<p>what are the benefits?</p>",
        "id": 353198121,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1682589141
    },
    {
        "content": "<p><code>{5, 3}.toFinset</code> isn't simp normal form.</p>",
        "id": 353198693,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1682589211
    },
    {
        "content": "<p>The benefits is that the resulting tem is about <code>insert 5 (singleton 3)</code> and not <code>toFinset (insert 5 (singleton 3))</code></p>",
        "id": 353198702,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1682589212
    }
]