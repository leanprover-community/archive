[
    {
        "content": "<p>Hi again,</p>\n<p>Sometimes after calling simp the result is in do notation. At least for me, this make is it a bit more difficult to visualize what I need to prove. Is there a way to force simp not to display do notation and show me instead &gt;&gt;=  and lambdas ?</p>",
        "id": 346217386,
        "sender_full_name": "Miguel Negrão",
        "timestamp": 1680364391
    },
    {
        "content": "<p>Can you give a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> ?</p>",
        "id": 346249476,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1680379994
    },
    {
        "content": "<p>I think the do notation appeared in my goal from a function definition. So let's say what we are trying to prove is in do notation, but during proof, we would like to change into desugared form, to make it easier to see which theorems apply, how would one do that ? A very simple mwe below.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">universe</span> <span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"n\">w</span>\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Monad</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">LawfulMonad</span> <span class=\"n\">m</span><span class=\"o\">]</span>\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">γ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">map_bind2</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">m</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">γ</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n    <span class=\"n\">f</span> <span class=\"bp\">&lt;$&gt;</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"k\">do</span>\n      <span class=\"k\">let</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;-</span> <span class=\"n\">x</span>\n      <span class=\"n\">f</span> <span class=\"bp\">&lt;$&gt;</span> <span class=\"n\">g</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">_</span>\n\n<span class=\"n\">unsolved</span> <span class=\"n\">goals</span>\n<span class=\"n\">m</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span>\n<span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"n\">α</span>\n<span class=\"n\">g</span><span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">m</span> <span class=\"n\">β</span>\n<span class=\"n\">f</span><span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">γ</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">f</span> <span class=\"bp\">&lt;$&gt;</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">a</span> <span class=\"bp\">←</span> <span class=\"n\">x</span>\n  <span class=\"n\">f</span> <span class=\"bp\">&lt;$&gt;</span> <span class=\"n\">g</span> <span class=\"n\">a</span>\n</code></pre></div>",
        "id": 346524937,
        "sender_full_name": "Miguel Negrão",
        "timestamp": 1680518938
    },
    {
        "content": "<p>Does</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"bp\">-</span><span class=\"n\">delab</span><span class=\"o\">]</span> <span class=\"n\">Lean.PrettyPrinter.Delaborator.delabDo</span>\n</code></pre></div>\n<p>do what you want?</p>",
        "id": 346530291,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1680520201
    },
    {
        "content": "<p>What import does that need, Alex?</p>",
        "id": 346530896,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1680520343
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.PrettyPrinter.Delaborator.delabDo#doc\">docs4#Lean.PrettyPrinter.Delaborator.delabDo</a></p>",
        "id": 346530963,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1680520364
    },
    {
        "content": "<p>I would think nothing?</p>",
        "id": 346530986,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1680520366
    },
    {
        "content": "<p>It doesn't work for me without <code>import Lean.PrettyPrinter.Delaborator.Builtins</code></p>",
        "id": 346531216,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1680520413
    },
    {
        "content": "<p>Hmm interesting, not sure I understand how that works to be honest</p>",
        "id": 346531559,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1680520480
    },
    {
        "content": "<p>I think it's because it's builtin</p>",
        "id": 346531665,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1680520514
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"127136\">Alex J. Best</span> <a href=\"#narrow/stream/113489-new-members/topic/simp.20and.20do.20notation/near/346530291\">disse</a>:</p>\n<blockquote>\n<p>Does</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"bp\">-</span><span class=\"n\">delab</span><span class=\"o\">]</span> <span class=\"n\">Lean.PrettyPrinter.Delaborator.delabDo</span>\n</code></pre></div>\n<p>do what you want?</p>\n</blockquote>\n<p>Yup, that does the trick !!! Great ! Indeed l report the same as <span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> , I need that import to make it work. Thanks all !</p>",
        "id": 346534020,
        "sender_full_name": "Miguel Negrão",
        "timestamp": 1680521025
    },
    {
        "content": "<p>FWIW, I was able to prove your lemma with <code>simp only [map_eq_pure_bind, bind_assoc]</code></p>",
        "id": 346534209,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1680521069
    },
    {
        "content": "<p>Thanks, but my example is from <a href=\"https://github.com/leanprover-community/mathlib4/blob/3d5d1404a27f4b285302a1589e1da2672590da34/Mathlib/Control/Basic.lean#L101-L103\">mathlib4</a>. Just needed something to illustrate the point. :-)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">map_bind</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">m</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">γ</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n    <span class=\"n\">f</span> <span class=\"bp\">&lt;$&gt;</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">f</span> <span class=\"bp\">&lt;$&gt;</span> <span class=\"n\">g</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">bind_pure_comp</span><span class=\"o\">,</span> <span class=\"n\">bind_assoc</span><span class=\"o\">]</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">bind_pure_comp</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 346535126,
        "sender_full_name": "Miguel Negrão",
        "timestamp": 1680521336
    }
]