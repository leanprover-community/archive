[
    {
        "content": "<p>Hello, I have the following step (in MWE form) in the middle of a proof: </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">one_le_u</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">one_le_v</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">u</span><span class=\"bp\">*</span><span class=\"n\">v</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">one_mul</span> <span class=\"mi\">1</span><span class=\"o\">]</span>\n  <span class=\"n\">apply</span> <span class=\"n\">mul_le_mul</span> <span class=\"o\">(</span><span class=\"n\">one_le_u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">one_le_v</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">norm_num</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">linarith</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>I'm happy with the result but it still feels too \"manual\", especially the <code>rw [← one_mul 1]</code>. Is there a way to get it just with <code>linarith</code>?  I tried calling <code>linarith [one_le_u, one_le_v]</code> but that goes nowhere, and I can't pass <code>mul_le_mul</code> as a parameter (at least, trying the naive way it complains)</p>",
        "id": 405921424,
        "sender_full_name": "Luigi Massacci",
        "timestamp": 1701728641
    },
    {
        "content": "<p>You can try <code>convert mul_le_mul one_le_u one_le_v ...</code></p>",
        "id": 405921585,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1701728739
    },
    {
        "content": "<p>and maybe <code>simpa using ...</code> can close the goal</p>",
        "id": 405921675,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1701728778
    },
    {
        "content": "<p>I mean, without the <code>convert</code></p>",
        "id": 405921695,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1701728789
    },
    {
        "content": "<p>Even better, we have <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=one_le_mul#doc\">docs#one_le_mul</a></p>",
        "id": 405924714,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1701728814
    },
    {
        "content": "<p>Thank you!</p>",
        "id": 405924900,
        "sender_full_name": "Luigi Massacci",
        "timestamp": 1701728891
    },
    {
        "content": "<p>Actually <code>one_le_mul</code>  gives:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"kd\">instance</span>\n  <span class=\"n\">CovariantClass</span> <span class=\"n\">ℤ</span> <span class=\"n\">ℤ</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">x_1</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">x_1</span><span class=\"o\">)</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">x_1</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">x_1</span>\n</code></pre></div>\n<p>but while typing it out the autocomplete suggested the beautiful <code>one_le_mul_of_one_le_of_one_le</code> which works. All is well that ends well.</p>",
        "id": 405925380,
        "sender_full_name": "Luigi Massacci",
        "timestamp": 1701729172
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"321459\">@Damiano Testa</span> I am lost abut all the terminology in the order hierarchy, but <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=one_le_mul#doc\">docs#one_le_mul</a> should work for the integers. Do we want to generalize it?</p>",
        "id": 405925797,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1701729396
    },
    {
        "content": "<p>Oh my, <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=one_le_mul_of_one_le_of_one_le#doc\">docs#one_le_mul_of_one_le_of_one_le</a> is what I had in mind but with a weird name. Is it possible to have a common generalization?</p>",
        "id": 405925909,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1701729479
    },
    {
        "content": "<p>Multiplication by all integers is certainly not monotone on the integers.</p>",
        "id": 405925918,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1701729482
    },
    {
        "content": "<p>There should be a <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=PosMulMono#doc\">docs#PosMulMono</a> typeclass?</p>",
        "id": 405926017,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1701729520
    },
    {
        "content": "<p>I understand that <code>CovariantClass</code> does not work here, I am just wondering if we can have a common generalization</p>",
        "id": 405926094,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1701729577
    },
    {
        "content": "<p>but maybe not</p>",
        "id": 405926105,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1701729585
    },
    {
        "content": "<p>Soon (<a href=\"https://github.com/leanprover-community/mathlib4/pull/8167\">#8167</a>) it will be possible to do this as</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">one_le_u</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">one_le_v</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">u</span><span class=\"bp\">*</span><span class=\"n\">v</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">grw</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">one_le_u</span><span class=\"o\">,</span> <span class=\"bp\">←</span><span class=\"n\">one_le_v</span><span class=\"o\">]</span>\n  <span class=\"n\">norm_num</span>\n</code></pre></div>",
        "id": 405927226,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1701730147
    },
    {
        "content": "<p>Heather, very nice!</p>\n<p>Riccardo, I suspect that there is some issue with the possibility that even though you have the inequality <code>1 ≤ u</code>, it does not follow that you also have <code>0 ≤ u</code>, since, as we all very well know, in an ordered semiring it may be the case that <code>u^2 &lt; 0</code>...</p>",
        "id": 405927621,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1701730321
    },
    {
        "content": "<p>This seems to work, though:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.Order.ZeroLEOne</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.Order.Ring.Lemmas</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">MulOneClass</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Zero</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Preorder</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">ZeroLEOneClass</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">PosMulMono</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n    <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a₁</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b₁</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">apply</span> <span class=\"n\">a₁.trans</span>\n  <span class=\"n\">conv_lhs</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">mul_one</span> <span class=\"n\">a</span><span class=\"o\">]</span>\n  <span class=\"n\">apply</span> <span class=\"n\">mul_le_mul_of_nonneg_left</span> <span class=\"n\">b₁</span> <span class=\"o\">(</span><span class=\"n\">le_trans</span> <span class=\"n\">zero_le_one</span> <span class=\"n\">a₁</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 405927954,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1701730470
    },
    {
        "content": "<p><code>hint</code> gave me</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">one_le_u</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">one_le_v</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">u</span><span class=\"bp\">*</span><span class=\"n\">v</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">exact</span> <span class=\"n\">one_le_mul_of_one_le_of_one_le</span> <span class=\"n\">one_le_u</span> <span class=\"n\">one_le_v</span>\n</code></pre></div>\n<p>Surely this is optimal, right?</p>",
        "id": 405932029,
        "sender_full_name": "Yongyi Chen",
        "timestamp": 1701732506
    },
    {
        "content": "<p><code>nlinarith</code> also handles this.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">one_le_u</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">one_le_v</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">u</span><span class=\"bp\">*</span><span class=\"n\">v</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">nlinarith</span>\n</code></pre></div>",
        "id": 405932070,
        "sender_full_name": "Yongyi Chen",
        "timestamp": 1701732552
    },
    {
        "content": "<p>Lean complains when I try to use <code>hint</code> so I assume I'm overdue for a mathlib update. There are no particular imports required to use it other than <code>Mathlib.Tactic</code> right?</p>",
        "id": 405990605,
        "sender_full_name": "Luigi Massacci",
        "timestamp": 1701760228
    },
    {
        "content": "<p><code>hint</code> is only a few weeks old. <code>Mathlib.Tactic</code> should definitely give it to you.</p>",
        "id": 406022346,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1701771327
    },
    {
        "content": "<p>Just to note that <code>Mathlib.Tactic</code> is really \"all the tactics which people remembered to put in the <code>Mathlib/Tactic.lean</code> file as opposed to definitely automatically being \"all current mathlib tactics\".</p>",
        "id": 406029414,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1701773377
    },
    {
        "content": "<p><code>#help tactic</code> shows the list of \"all tactics\"</p>",
        "id": 406033845,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1701774787
    },
    {
        "content": "<p>Assuming you've imported them, presumably</p>",
        "id": 406034721,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1701775091
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/Optimizing.20proof.20of.20silly.20inequality/near/406029414\">said</a>:</p>\n<blockquote>\n<p>Just to note that <code>Mathlib.Tactic</code> is really \"all the tactics which people remembered to put in the <code>Mathlib/Tactic.lean</code> file as opposed to definitely automatically being \"all current mathlib tactics\".</p>\n</blockquote>\n<p>Our continuous integration setup ensures that every file in the Tactic folder get imported in <code>import Mathlib.Tactic</code> so it should be a very good approximation to \"all current mathlib tactics\".</p>",
        "id": 406081190,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1701789572
    },
    {
        "content": "<p>Oh I'm behind the times! Thanks Patrick!</p>",
        "id": 406090887,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1701792298
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"466290\">Luigi Massacci</span> has marked this topic as resolved.</p>",
        "id": 406158990,
        "sender_full_name": "Notification Bot",
        "timestamp": 1701810270
    }
]