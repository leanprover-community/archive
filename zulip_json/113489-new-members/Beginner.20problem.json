[
    {
        "content": "<p>I hope this is not redicolusly stupid but I'm trying to proof example that <code>∑ k in range n, k^2 = (n*(n+1)*(2*n+1))/6</code>.<br>\nTherefor I want to use <code>sum_range_succ</code> tactic to then rewrite with ih. What I don't understand is why in the <code>sum_range_succ</code>, it's<br>\n<code>((range n.succ).map f).prod = ((range n).map f).prod * f n</code> and not <code>((range n.succ).map f).prod = ((range n).map f).prod * f n+1</code>(note that it's all to_additive). I'm not sure if my mistake is using the wrong lean(or mathlib) tactic or if it's my math that's wrong</p>",
        "id": 385440115,
        "sender_full_name": "Robert hackman",
        "timestamp": 1692184708
    },
    {
        "content": "<p>I would strongly recommend that you (a) get your normalisation right (your statement is false for n=1, <code>range</code> is 0 to n-1) and (b) coerce to the rationals before summing (ie. sum <code>(k : Rat)^2</code>). At the minute your statement uses natural number division which is pathological, and once you've sorted out your normalisation it will also use natural number subtraction which is also pathological. Coercing to the rationals fixes these problems because rational number division and subtraction are not pathological.</p>",
        "id": 385445835,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1692187066
    },
    {
        "content": "<p>The answer to your question is that <code>range n</code> is 0 to n-1.</p>",
        "id": 385445966,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1692187104
    },
    {
        "content": "<p>Thank you! I got quite \"far\" solving (that admitedly very simple example but I'm new to proof languages) but now I'm stuck again (same problem).<br>\nI need to proof that <code>n * (n + 1) * (2 * n + 1) / 6 + (n + 1) ^ 2 = (n + 1) * (n + 1 + 1) * (2 * (n + 1) + 1) / 6</code>. Now using the ring tactic is suggested everywhere but for reasons I don't understand it doesn't work. Neither does ring_nf (was suggested by the compiler) or simp. Maybe somebody has literature on how to solve such polynoms if it's not working immidiately with ring. I would simplify it myself but I just don't have an idea on how really...</p>",
        "id": 385653601,
        "sender_full_name": "Robert hackman",
        "timestamp": 1692271491
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"640752\">Robert hackman</span> <a href=\"#narrow/stream/113489-new-members/topic/Beginner.20problem/near/385653601\">said</a>:</p>\n<blockquote>\n<p>Thank you! I got quite \"far\" solving (that admitedly very simple example but I'm new to proof languages) but now I'm stuck again (same problem).<br>\nI need to proof that <code>n * (n + 1) * (2 * n + 1) / 6 + (n + 1) ^ 2 = (n + 1) * (n + 1 + 1) * (2 * (n + 1) + 1) / 6</code>. Now using the ring tactic is suggested everywhere but for reasons I don't understand it doesn't work. Neither does ring_nf (was suggested by the compiler) or simp. Maybe somebody has literature on how to solve such polynoms if it's not working immidiately with ring. I would simplify it myself but I just don't have an idea on how really...</p>\n</blockquote>\n<p>Please show a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>, but probably because of the division.</p>",
        "id": 385656014,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1692272459
    },
    {
        "content": "<p>Ok, this is the exampel I'm trying to proof(can't figure out how to do multiline code highlight sry):</p>\n<div class=\"codehilite\" data-code-language=\"import\"><pre><span></span><code>import Mathlib.Data.Num.Lemmas\nimport Mathlib.Data.Nat.Basic\nimport Mathlib.Tactic.Ring\n\nopen Num\nopen BigOperators\nopen Finset\nopen Nat\n\nexample (n : Nat) (k: Rat): ∑ k in range (n+1), k^2 = (n*(n+1)*(2*n+1)) / 6 := by\n  induction n with\n  | zero =&gt;\n    simp\n  | succ n ih =&gt;\n    rw[sum_range_succ]\n    rw[ih]\n    rw[succ_eq_add_one]\n    ring\n</code></pre></div>",
        "id": 385866080,
        "sender_full_name": "Robert hackman",
        "timestamp": 1692349549
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/wiki/Code-in-backticks\">#backticks</a> - use three rather than one. You should also use the correct capitalization for imports (i.e. <code>import Mathlib.Tactic.Ring</code> rather than <code>import Mathlib.tactic.ring</code>) to avoid confusing lean. (It's unfortunate that this works at all.)</p>",
        "id": 385871076,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1692351451
    },
    {
        "content": "<p>ah ok thx, do you maybe have an idea how to solve the polomial with the fraction? :D</p>",
        "id": 385872653,
        "sender_full_name": "Robert hackman",
        "timestamp": 1692352046
    },
    {
        "content": "<p><code>ring</code> is having difficulties with the natural division.</p>\n<p>One solution is not to use it, and then <code>field_simp</code> (<code>import Mathlib.Tactic.FieldSimp</code>) can help you get rid of it:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∑</span> <span class=\"n\">k</span> <span class=\"k\">in</span> <span class=\"n\">range</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"mi\">6</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">field_simp</span>\n  <span class=\"bp\">...</span>\n</code></pre></div>\n<p>In this case, you might need <code>push_cast</code> or <code>norm_cast</code> to finish the proof</p>\n<p>The other solution is to use a <code>Nat</code>-specific lemma first:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∑</span> <span class=\"n\">k</span> <span class=\"k\">in</span> <span class=\"n\">range</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"n\">k</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"bp\">/</span> <span class=\"mi\">6</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">symm</span>\n  <span class=\"n\">apply</span> <span class=\"n\">Nat.div_eq_of_eq_mul_left</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">norm_num</span><span class=\"o\">)</span>\n  <span class=\"bp\">...</span>\n</code></pre></div>",
        "id": 385872865,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1692352126
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"640752\">@Robert hackman</span> the statement you are formalising is not the correct way to state the theorem you want to prove. Natural division is pathological. Lean thinks 14/6=2, not 2.33333... . So the claim you're making is strictly weaker than the claim you want to make (for example you won't be able to deduce that 6 times the sum is the cubic on the numerator)</p>",
        "id": 385873920,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1692352556
    },
    {
        "content": "<p>And note that both of my suggestions come down to proving the stronger result anyway, which turns out to be easier than proving the weaker result</p>",
        "id": 385875656,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1692353148
    },
    {
        "content": "<p>Ok but how do I make it more \"strong\"? I suppose n can stay Nat but do I then have to cast the division or maybe define the return type of the example?</p>",
        "id": 385878149,
        "sender_full_name": "Robert hackman",
        "timestamp": 1692353860
    },
    {
        "content": "<p>So I've tried all comibinations off symm&amp;dif_eq.. and field simp but none seem to work. <code>field_simp</code> doesn't modify the equation at all and div_eq does get rid of the fractions (even if there is one left but that disappears after applying ring) but ring can't prove equality.<br>\nEdit: It's equal though it's just not \"recognized\"</p>\n<p>Here's my try with div_eq:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∑</span> <span class=\"n\">k</span> <span class=\"k\">in</span> <span class=\"n\">range</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"n\">k</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"bp\">/</span> <span class=\"mi\">6</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">induction</span> <span class=\"n\">n</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">simp</span>\n  <span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"n\">n</span> <span class=\"n\">ih</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">rw</span><span class=\"o\">[</span><span class=\"n\">sum_range_succ</span><span class=\"o\">]</span>\n    <span class=\"n\">rw</span><span class=\"o\">[</span><span class=\"n\">ih</span><span class=\"o\">]</span>\n    <span class=\"n\">rw</span><span class=\"o\">[</span><span class=\"n\">succ_eq_add_one</span><span class=\"o\">]</span>\n    <span class=\"n\">symm</span>\n    <span class=\"n\">apply</span> <span class=\"n\">Nat.div_eq_of_eq_mul_left</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">norm_num</span><span class=\"o\">)</span>\n    <span class=\"n\">ring</span>\n</code></pre></div>\n<p>I would be so thankful for help!</p>",
        "id": 385889475,
        "sender_full_name": "Robert hackman",
        "timestamp": 1692357337
    },
    {
        "content": "<p>Try removing the denominator before the induction</p>",
        "id": 385889943,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1692357498
    },
    {
        "content": "<p>sorry for the confusion. The resulting equation after the last ring ist actually equal (if simplified with pen and paper) but I can't get lean to \"recognize that</p>",
        "id": 385890728,
        "sender_full_name": "Robert hackman",
        "timestamp": 1692357716
    },
    {
        "content": "<p>So the result of the last applied ring tactic is this equation: <code>⊢ 6 + n * 13 + n ^ 2 * 9 + n ^ 3 * 2 = 6 + n * 12 + n ^ 2 * 6 + (n + n ^ 2 * 3 + n ^ 3 * 2) / 6 * 6</code>, which is equal but I simp or ring both don't get it to a point where one could use rfl.</p>",
        "id": 385892402,
        "sender_full_name": "Robert hackman",
        "timestamp": 1692358222
    },
    {
        "content": "<p>That still has a natural division. Please show the complete code you have now?</p>",
        "id": 385892842,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1692358370
    },
    {
        "content": "<p>That would be the current code</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">):</span> <span class=\"bp\">∑</span> <span class=\"n\">k</span> <span class=\"k\">in</span> <span class=\"n\">range</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"n\">k</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"bp\">/</span> <span class=\"mi\">6</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">induction</span> <span class=\"n\">n</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">simp</span>\n  <span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"n\">n</span> <span class=\"n\">ih</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">rw</span><span class=\"o\">[</span><span class=\"n\">sum_range_succ</span><span class=\"o\">]</span>\n    <span class=\"n\">rw</span><span class=\"o\">[</span><span class=\"n\">ih</span><span class=\"o\">]</span>\n    <span class=\"n\">rw</span><span class=\"o\">[</span><span class=\"n\">succ_eq_add_one</span><span class=\"o\">]</span>\n    <span class=\"n\">symm</span>\n    <span class=\"n\">apply</span> <span class=\"n\">Nat.div_eq_of_eq_mul_left</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">norm_num</span><span class=\"o\">)</span>\n    <span class=\"n\">ring_nf</span>\n</code></pre></div>\n<p>Edit: I'm still unsure about what you mean with \"natrual division\" or how to address it</p>",
        "id": 385893156,
        "sender_full_name": "Robert hackman",
        "timestamp": 1692358509
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"307953\">Ruben Van de Velde</span> <a href=\"#narrow/stream/113489-new-members/topic/Beginner.20problem/near/385889943\">said</a>:</p>\n<blockquote>\n<p>Try removing the denominator before the induction</p>\n</blockquote>\n<p>you haven't applied this suggestion ^</p>",
        "id": 385894880,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1692359104
    },
    {
        "content": "<p>Natural division is division between two natural numbers, rather than for example between two rational numbers.</p>",
        "id": 385895095,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1692359172
    },
    {
        "content": "<p>As a general rule, if you want to use <code>ring</code>, there shouldn't be any division symbols in your goal</p>",
        "id": 385895572,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1692359359
    },
    {
        "content": "<p>I'm sorry I'm in a field and can't write code but the answer is to coerce the summand into the rationals immediately. Then all the problems go away and the tactics start working again. You should be summing (k : Rat)^2</p>",
        "id": 385926621,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1692368196
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"307953\">Ruben Van de Velde</span> <a href=\"#narrow/stream/113489-new-members/topic/Beginner.20problem/near/385894880\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"307953\">Ruben Van de Velde</span> <a href=\"#narrow/stream/113489-new-members/topic/Beginner.20problem/near/385889943\">said</a>:</p>\n<blockquote>\n<p>Try removing the denominator before the induction</p>\n</blockquote>\n<p>you haven't applied this suggestion ^</p>\n</blockquote>\n<p>Sorry for being so stupid.<br>\nBut I'm just not fully understanding what you mean :D.<br>\nAre you saying that I should remove the <code>/ 6 </code>from the equation, which would make it false.<br>\nOr should I \"remove\" it through multiplication, which I sadly can't figure out how to do.<br>\nOr to multiply with<code>0,5</code>instead div <code>/2</code>. Again sry for not getting it... ):</p>",
        "id": 386073611,
        "sender_full_name": "Robert hackman",
        "timestamp": 1692434713
    },
    {
        "content": "<p>Kevin's suggestion is this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∑</span> <span class=\"n\">k</span> <span class=\"k\">in</span> <span class=\"n\">range</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"bp\">/</span> <span class=\"mi\">6</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n</code></pre></div>\n<p>after that, you should be able to use <code>induction</code>, <code>field_simp</code> and <code>ring</code>.</p>",
        "id": 386074193,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1692434972
    },
    {
        "content": "<p>(I think that the slight awkwardness around the type ascription is due to the not-yet-fixed parsing of <code>HPow</code>, which tries to raise <code>ℚ</code> to <code>ℚ</code>, instead of <code>ℕ</code>.  Hence the explicit coercions.  Someone else might find a more reasonable way of getting the right types in the right places.)</p>",
        "id": 386074717,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1692435182
    },
    {
        "content": "<p>Basically, this is saying: raise <code>k</code> to the natural number <code>2</code>, interpret the result as a rational number and continue with your usual parsing.  The goal now is an equality of rational numbers and division by <code>6</code> is \"actual\" division, rather than <code>Floor ∘ Div</code>.</p>",
        "id": 386075087,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1692435359
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"640752\">Robert hackman</span> <a href=\"#narrow/stream/113489-new-members/topic/Beginner.20problem/near/386073611\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"307953\">Ruben Van de Velde</span> <a href=\"#narrow/stream/113489-new-members/topic/Beginner.20problem/near/385894880\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"307953\">Ruben Van de Velde</span> <a href=\"#narrow/stream/113489-new-members/topic/Beginner.20problem/near/385889943\">said</a>:</p>\n<blockquote>\n<p>Try removing the denominator before the induction</p>\n</blockquote>\n<p>you haven't applied this suggestion ^</p>\n</blockquote>\n<p>But I'm just not fully understanding what you mean :D.</p>\n</blockquote>\n<p>Ruben suggested that you start like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.BigOperators.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Finset.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">BigOperators</span>\n<span class=\"kn\">open</span> <span class=\"n\">Finset</span>\n<span class=\"kn\">open</span> <span class=\"n\">Nat</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">):</span> <span class=\"bp\">∑</span> <span class=\"n\">k</span> <span class=\"k\">in</span> <span class=\"n\">range</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"n\">k</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"bp\">/</span> <span class=\"mi\">6</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">symm</span>\n  <span class=\"n\">apply</span> <span class=\"n\">Nat.div_eq_of_eq_mul_left</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">norm_num</span><span class=\"o\">)</span>\n  <span class=\"c1\">-- ⊢ n * (n + 1) * (2 * n + 1) = (∑ k in range (n + 1), k ^ 2) * 6</span>\n</code></pre></div>\n<p>The proof in your original post, with a couple of small modifications, closes this goal.</p>",
        "id": 386080120,
        "sender_full_name": "Richard Copley",
        "timestamp": 1692437158
    },
    {
        "content": "<p>ok, thank you all so much</p>\n<p>Current state(I didn't yet try to also implmenet the type coercion bc there is a type error at Nat.div_eq which I don't understnad):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">):</span> <span class=\"bp\">∑</span> <span class=\"n\">k</span> <span class=\"k\">in</span> <span class=\"n\">range</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"n\">k</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"bp\">/</span> <span class=\"mi\">6</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">symm</span>\n  <span class=\"n\">apply</span> <span class=\"n\">Nat.div_eq_of_eq_mul_left</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">norm_num</span><span class=\"o\">)</span>\n  <span class=\"n\">symm</span>\n  <span class=\"n\">induction</span> <span class=\"n\">n</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">simp</span>\n  <span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"n\">n</span> <span class=\"n\">ih</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">rw</span><span class=\"o\">[</span><span class=\"n\">sum_range_succ</span><span class=\"o\">]</span>\n    <span class=\"n\">rw</span><span class=\"o\">[</span><span class=\"n\">ih</span><span class=\"o\">]</span>\n    <span class=\"n\">rw</span><span class=\"o\">[</span><span class=\"n\">succ_eq_add_one</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>It throws an error that it cannot do rw[ih] because it can't find the pattern. the ih is: <code> (∑ k in range (n + 1), k ^ 2) * 6 </code> and the tactic state is <code>(∑ x in range (n + 1), x ^ 2 + (n + 1) ^ 2) * 6 = Nat.succ n * (Nat.succ n + 1) * (2 * Nat.succ n + 1)</code>. Now I tried <code>rw[mul_add]</code>but that does not change the left side. Any suggestions I'm a bit out of ideas again</p>",
        "id": 386086573,
        "sender_full_name": "Robert hackman",
        "timestamp": 1692440221
    },
    {
        "content": "<p><code>rewrite [← ih]</code></p>",
        "id": 386088165,
        "sender_full_name": "Richard Copley",
        "timestamp": 1692441304
    },
    {
        "content": "<p>ahhh I got it :) I was using <code>rw[mul_add]</code> which is alias for <code>left_distrib</code> but I needed <code>right_distrib</code>:) goal is solved thank you all so much!</p>",
        "id": 386088276,
        "sender_full_name": "Robert hackman",
        "timestamp": 1692441375
    },
    {
        "content": "<p>So that's the working version:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">):</span> <span class=\"bp\">∑</span> <span class=\"n\">k</span> <span class=\"k\">in</span> <span class=\"n\">range</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"bp\">/</span> <span class=\"mi\">6</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">symm</span>\n  <span class=\"n\">apply</span> <span class=\"n\">Nat.div_eq_of_eq_mul_left</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">norm_num</span><span class=\"o\">)</span>\n  <span class=\"n\">symm</span>\n  <span class=\"n\">induction</span> <span class=\"n\">n</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">simp</span>\n  <span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"n\">n</span> <span class=\"n\">ih</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">rw</span><span class=\"o\">[</span><span class=\"n\">sum_range_succ</span><span class=\"o\">]</span>\n    <span class=\"n\">rw</span><span class=\"o\">[</span><span class=\"n\">right_distrib</span><span class=\"o\">]</span>\n    <span class=\"n\">rw</span><span class=\"o\">[</span><span class=\"n\">ih</span><span class=\"o\">]</span>\n    <span class=\"n\">rw</span><span class=\"o\">[</span><span class=\"n\">succ_eq_add_one</span><span class=\"o\">]</span>\n    <span class=\"n\">ring</span>\n</code></pre></div>\n<p>Note that k sum is still of type N not Q. if I change it to Q Nat.div_eq... throws the following error: </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">tactic</span> <span class=\"bp\">'</span><span class=\"n\">apply'</span> <span class=\"n\">failed</span><span class=\"o\">,</span> <span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">unify</span>\n  <span class=\"bp\">?</span><span class=\"n\">m.741</span> <span class=\"bp\">/</span> <span class=\"bp\">?</span><span class=\"n\">m.740</span> <span class=\"bp\">=</span> <span class=\"bp\">?</span><span class=\"n\">m.742</span>\n<span class=\"k\">with</span>\n  <span class=\"bp\">↑</span><span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"bp\">↑</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"mi\">6</span> <span class=\"bp\">=</span> <span class=\"bp\">∑</span> <span class=\"n\">k</span> <span class=\"k\">in</span> <span class=\"n\">range</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span><span class=\"o\">)</span>\n<span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span>\n<span class=\"bp\">⊢</span> <span class=\"bp\">↑</span><span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"bp\">↑</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"mi\">6</span> <span class=\"bp\">=</span> <span class=\"bp\">∑</span> <span class=\"n\">k</span> <span class=\"k\">in</span> <span class=\"n\">range</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>Does maybe somebody have and idea why?</p>",
        "id": 386092413,
        "sender_full_name": "Robert hackman",
        "timestamp": 1692443027
    },
    {
        "content": "<p><code>theorem Nat.div_eq_of_eq_mul_left : ∀ {n m k : ℕ}, 0 &lt; n → m = k * n → m / n = k</code><br>\nThe conclusion of the lemma doesn't unify with the goal because the variables are of the wrong type. But the idea was that you wouldn't need it.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.BigOperators.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Finset.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">BigOperators</span>\n<span class=\"kn\">open</span> <span class=\"n\">Finset</span>\n<span class=\"kn\">open</span> <span class=\"n\">Nat</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">):</span> <span class=\"bp\">∑</span> <span class=\"n\">k</span> <span class=\"k\">in</span> <span class=\"n\">range</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"bp\">/</span> <span class=\"mi\">6</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">induction</span> <span class=\"n\">n</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">simp</span>\n  <span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"n\">n</span> <span class=\"n\">ih</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">rw</span><span class=\"o\">[</span><span class=\"n\">sum_range_succ</span><span class=\"o\">]</span>\n    <span class=\"n\">rw</span><span class=\"o\">[</span><span class=\"n\">ih</span><span class=\"o\">]</span>\n    <span class=\"n\">rw</span><span class=\"o\">[</span><span class=\"n\">succ_eq_add_one</span><span class=\"o\">]</span>\n    <span class=\"n\">field_simp</span>\n    <span class=\"n\">ring_nf</span>\n</code></pre></div>",
        "id": 386093774,
        "sender_full_name": "Richard Copley",
        "timestamp": 1692443960
    },
    {
        "content": "<p>(By the way, if you include all the preamble that makes the example work, it makes the 'View in playground' gadget at the top right of the code sample much more useful.)</p>",
        "id": 386093970,
        "sender_full_name": "Richard Copley",
        "timestamp": 1692444073
    },
    {
        "content": "<p>ahh oka so I see why div_eq_of_eq_mul_left was not working and also what you meant. I think I mixed up equations that why it didn't work for me. That's way more elegeant</p>\n<p>just to be sure, the reason why this works is because the equation is thanks to the coercion also applying to Rational numbers which makes field_simp and subsequently ring work because they can assume that division is \"allowed\"?</p>",
        "id": 386094419,
        "sender_full_name": "Robert hackman",
        "timestamp": 1692444451
    },
    {
        "content": "<p><code>field_simp</code> can use facts like <code>∀ (x y : ℚ) : y ≠ 0 → x / y * y = x</code> to simplify the expression. In the naturals, that fact is not true. Counterexample: <code>7 / 6 * 6 = 6 ≠ 7</code>.</p>\n<p>It so happens that <code>n * (n + 1) * (2 * n + 1) / 6 * 6 = n * (n + 1) * (2 * n + 1)</code> is always true, because <code>6 ∣ n * (n + 1) * (2 * n + 1)</code>, but <code>ring</code> can't prove that by itself.</p>",
        "id": 386095211,
        "sender_full_name": "Richard Copley",
        "timestamp": 1692445112
    },
    {
        "content": "<p>Hello,<br>\nI am very new here. Does anyone know if there is a solutions document to the exercises in \"<em>Theorem Proving in LEAN 4</em>\"?<br>\nThx</p>",
        "id": 386118025,
        "sender_full_name": "Jordi Majó",
        "timestamp": 1692459605
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"400544\">Buster</span> <a href=\"#narrow/stream/113489-new-members/topic/Beginner.20problem/near/386095211\">said</a>:</p>\n<blockquote>\n<p><code>field_simp</code> can use facts like <code>∀ (x y : ℚ) : y ≠ 0 → x / y * y = x</code> to simplify the expression. In the naturals, that fact is not true. Counterexample: <code>7 / 6 * 6 = 6 ≠ 7</code>.</p>\n<p>It so happens that <code>n * (n + 1) * (2 * n + 1) / 6 * 6 = n * (n + 1) * (2 * n + 1)</code> is always true, because <code>6 ∣ n * (n + 1) * (2 * n + 1)</code>, but <code>ring</code> can't prove that by itself.</p>\n</blockquote>\n<p>thank you!</p>",
        "id": 386198314,
        "sender_full_name": "Robert hackman",
        "timestamp": 1692519208
    },
    {
        "content": "<p>So I'm feeling a bit stupid but I can't get <code>Ico</code>(or others) to work.<br>\nMy current try looks like that: <code>example (n : ℕ): ∑ k in ((Ico 1 n) : Finset ℕ), ((k - 1 )^2 : ℕ ) &lt; n^3 / 3 := by sorry</code>. Lean(4) was complaining that <code>Ic 1 n</code> was returning a Set N and not A Finset, so I was \"casting\" it as such. But that apparently is not enough because I'm still getting the same error.</p>",
        "id": 386207130,
        "sender_full_name": "Robert hackman",
        "timestamp": 1692526023
    },
    {
        "content": "<p>(i'm using Finset.Sum, I will try using something that's not finite, which is kind of not possible so will have to cast then but how?)</p>",
        "id": 386207261,
        "sender_full_name": "Robert hackman",
        "timestamp": 1692526140
    },
    {
        "content": "<p>So I found toFinset but am failing to apply it.<br>\n<code>example (n : ℕ): ∑ k in (Ico 1 n).toFinset, ((k - 1 )^2 : ℕ ) &lt; n^3 / 3 := by sorry</code>throws <code>failed to synthesize instance\n  Fintype ↑(Ico 1 n)</code>, but why?</p>",
        "id": 386209333,
        "sender_full_name": "Robert hackman",
        "timestamp": 1692527864
    },
    {
        "content": "<p>What is <code>Ico</code> here? Is it an <code>autoImplicit</code>?</p>",
        "id": 386215133,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1692532436
    },
    {
        "content": "<p>Which is to say; can you make that a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> with imports?</p>",
        "id": 386215180,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1692532449
    },
    {
        "content": "<p>5 messages were moved here from <a class=\"stream-topic\" data-stream-id=\"113489\" href=\"/#narrow/stream/113489-new-members/topic/Definition.20of.20mapping\">#new members &gt; Definition of mapping</a> by <span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span>.</p>",
        "id": 386215605,
        "sender_full_name": "Notification Bot",
        "timestamp": 1692532860
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"640752\">Robert hackman</span> <a href=\"#narrow/stream/113489-new-members/topic/Beginner.20problem/near/386209333\">said</a>:</p>\n<blockquote>\n<p>So I found toFinset but am failing to apply it.<br>\n<code>example (n : ℕ): ∑ k in (Ico 1 n).toFinset, ((k - 1 )^2 : ℕ ) &lt; n^3 / 3 := by sorry</code>throws <code>failed to synthesize instance\n  Fintype ↑(Ico 1 n)</code>, but why?</p>\n</blockquote>\n<p>Use <code>Finset.Ico</code> instead</p>",
        "id": 386215927,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1692533134
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"307953\">Ruben Van de Velde</span> <a href=\"#narrow/stream/113489-new-members/topic/Beginner.20problem/near/386215927\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"640752\">Robert hackman</span> <a href=\"#narrow/stream/113489-new-members/topic/Beginner.20problem/near/386209333\">said</a>:</p>\n<blockquote>\n<p>So I found toFinset but am failing to apply it.<br>\n<code>example (n : ℕ): ∑ k in (Ico 1 n).toFinset, ((k - 1 )^2 : ℕ ) &lt; n^3 / 3 := by sorry</code>throws <code>failed to synthesize instance\n  Fintype ↑(Ico 1 n)</code>, but why?</p>\n</blockquote>\n<p>Use <code>Finset.Ico</code> instead</p>\n</blockquote>\n<p>Ok, did do so.</p>\n<p>Mwe:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.BigOperators.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Num.Lemmas</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Nat.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.Ring</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.FieldSimp</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Finset.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Order.LocallyFinite</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Num</span>\n<span class=\"kn\">open</span> <span class=\"n\">BigOperators</span>\n<span class=\"kn\">open</span> <span class=\"n\">Finset</span>\n<span class=\"kn\">open</span> <span class=\"n\">Nat</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">):</span> <span class=\"bp\">∑</span> <span class=\"n\">k</span> <span class=\"k\">in</span> <span class=\"n\">Finset.Ico</span> <span class=\"mi\">1</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"o\">((</span><span class=\"n\">k</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"bp\">^</span><span class=\"mi\">3</span> <span class=\"bp\">/</span> <span class=\"mi\">3</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>But it's throwing: \"failed to synthesize instance \\n  LocallyFiniteOrder ℕ\"</p>",
        "id": 386309493,
        "sender_full_name": "Robert hackman",
        "timestamp": 1692597301
    },
    {
        "content": "<p>I think that you are missing an import:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Nat.Interval</span>\n</code></pre></div>",
        "id": 386311498,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1692598515
    },
    {
        "content": "<p>I found it as follows: I assumed that the instance would be some standard fact, so <code>import Mathlib.Tactic</code> should be enough to get it.<br>\nWith that import, I typed</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">#</span><span class=\"n\">synth</span> <span class=\"n\">LocallyFiniteOrder</span> <span class=\"n\">ℕ</span>  <span class=\"c1\">-- instLocallyFiniteOrderNatToPreorderToPartialOrderStrictOrderedSemiring</span>\n<span class=\"k\">#check</span> <span class=\"n\">instLocallyFiniteOrderNatToPreorderToPartialOrderStrictOrderedSemiring</span>\n</code></pre></div>\n<p>and hovering over the instance name, I saw in the pop-up which file contained the instance.</p>\n<p>As a general rule, though, I would try to minimise imports only towards the end of a project, to avoid precisely this sort of issue.  Importing <code>Mathlib.Tactic</code> is generally a good way of getting a good mix of results that can be useful.</p>",
        "id": 386311753,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1692598681
    },
    {
        "content": "<p>this is so weird, my background is lowlevel and such and I'm very new to funcitonal programming/ Math but this seems odd.<br>\nJust to be clear: An import can depend on another import? <br>\nI'm just not used to the idea in a highlevel language context... Is there a specific reason/ advantage?<br>\nthx btw,!</p>",
        "id": 386312545,
        "sender_full_name": "Robert hackman",
        "timestamp": 1692599040
    },
    {
        "content": "<p>Also, it seems that your result is only true starting from <code>n = 2</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#eval</span> <span class=\"k\">do</span> <span class=\"c1\">-- [(0, false), (1, false), (2, true), (3, true), (4, true)]</span>\n  <span class=\"k\">let</span> <span class=\"n\">bound</span> <span class=\"o\">:=</span> <span class=\"mi\">4</span>\n  <span class=\"k\">let</span> <span class=\"n\">ns</span> <span class=\"o\">:=</span> <span class=\"n\">List.range</span> <span class=\"n\">bound</span>\n  <span class=\"k\">let</span> <span class=\"n\">res</span> <span class=\"o\">:=</span> <span class=\"n\">ns.map</span> <span class=\"bp\">&lt;|</span> <span class=\"k\">fun</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">decide</span> <span class=\"bp\">&lt;|</span> <span class=\"bp\">∑</span> <span class=\"n\">k</span> <span class=\"k\">in</span> <span class=\"n\">Finset.Ico</span> <span class=\"mi\">1</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"o\">((</span><span class=\"n\">k</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"bp\">^</span><span class=\"mi\">3</span> <span class=\"bp\">/</span> <span class=\"mi\">3</span>\n  <span class=\"n\">IO.println</span> <span class=\"o\">(</span><span class=\"n\">ns.zip</span> <span class=\"n\">res</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 386312727,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1692599135
    },
    {
        "content": "<p>The issue with your previous example was that Lean wanted to know that the interval of the natural numbers between <code>1</code> and <code>n</code> produced a <em>Fin</em>set.  This would not be true, say, for the rational numbers, so something needs to guarantee this fact.</p>\n<p>The way this happens in <code>mathlib</code> is via someone proving that \"locally finite\" suffices.  So now you need to know that <code>ℕ</code> is \"locally finite\" and this is something that Lean infers from the typeclass system: someone placed an instance of \"locally finite\" on <code>ℕ</code>.  This happened in the file that I linked to earlier.</p>\n<p>Thus, if you do not instruct Lean that \"locally finite\" is a property that <code>ℕ</code> has, then Lean will not be able to fill in the proof that the interval in <code>ℕ</code> from <code>1</code> to <code>n</code> is finite and therefore will not understand why you are telling it to build the <code>Finset.Ico 1 n</code>.</p>",
        "id": 386313106,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1692599364
    },
    {
        "content": "<p>(Also note that completely implicit in the previous discussion is the fact that <em>intervals</em> make sense when there is an underlying order that we are referring to: this is also something that happens invisibly, thanks to the typeclass system.  Except that the order on the natural numbers is defined <em>way</em> earlier than the locally finite instance.)</p>",
        "id": 386313345,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1692599490
    },
    {
        "content": "<p>As before, you can see where the instance <code>LE</code> on <code>Nat</code> is defined:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">#</span><span class=\"n\">synth</span> <span class=\"n\">LE</span> <span class=\"n\">Nat</span>  <span class=\"c1\">-- instLENat</span>\n<span class=\"k\">#check</span> <span class=\"n\">instLENat</span>  <span class=\"c1\">-- import Init.Prelude</span>\n</code></pre></div>\n<p><code>Init.Prelude</code> is a <em>very early</em> file in the import hierarchy: basically, as soon as you can talk about the natural numbers, you get inequalities between then for free.</p>",
        "id": 386313681,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1692599656
    },
    {
        "content": "<p>very interesting, thank you so much!</p>",
        "id": 386313819,
        "sender_full_name": "Robert hackman",
        "timestamp": 1692599741
    },
    {
        "content": "<p>As for your question on dependencies: a file can import anything that does not transitively depend on <em>itself</em>.  You can import files that depend on each other: for instance, this is ok</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n\n<span class=\"c1\">-- no issues</span>\n</code></pre></div>",
        "id": 386313833,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1692599749
    },
    {
        "content": "<p>thank you again!<br>\njust one last small question :D<br>\nYou mentioned that it is only from 2 on, I think that's because Ico is from n to m-1 so Ico 1 n for 1 is actuall 0 for which it's untrue in general.</p>\n<p>So I also need n to start from 1 and not 0, how would I do that?</p>",
        "id": 386315866,
        "sender_full_name": "Robert hackman",
        "timestamp": 1692600823
    },
    {
        "content": "<p>You could do it in several ways.  For instance, you could add a hypothesis <code>(h2 : 2 ≤ n)</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∑</span> <span class=\"n\">k</span> <span class=\"k\">in</span> <span class=\"n\">Finset.Ico</span> <span class=\"mi\">1</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"o\">((</span><span class=\"n\">k</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"bp\">^</span><span class=\"mi\">3</span> <span class=\"bp\">/</span> <span class=\"mi\">3</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>You could alternatively replace <code>n</code> by <code>n + 2</code> in the conclusion:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∑</span> <span class=\"n\">k</span> <span class=\"k\">in</span> <span class=\"n\">Finset.Ico</span> <span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">),</span> <span class=\"o\">((</span><span class=\"n\">k</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"mi\">3</span> <span class=\"bp\">/</span> <span class=\"mi\">3</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>I think that the first would be preferable.  Sometimes, \"adding 1\" generates better \"definitional equalities\" and you might see two versions of the same theorem, one using <code>n + 1</code> and one assuming <code>1 ≤ n</code> instead.  These should just hide implementation details, though: they can be important, but they are not specifically maths issues.</p>",
        "id": 386317095,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1692601353
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"321459\">Damiano Testa</span> <a href=\"#narrow/stream/113489-new-members/topic/Beginner.20problem/near/386317095\">said</a>:</p>\n<blockquote>\n<p>You could do it in several ways.  For instance, you could add a hypothesis <code>(h2 : 2 ≤ n)</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∑</span> <span class=\"n\">k</span> <span class=\"k\">in</span> <span class=\"n\">Finset.Ico</span> <span class=\"mi\">1</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"o\">((</span><span class=\"n\">k</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"bp\">^</span><span class=\"mi\">3</span> <span class=\"bp\">/</span> <span class=\"mi\">3</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>You could alternatively replace <code>n</code> by <code>n + 2</code> in the conclusion:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∑</span> <span class=\"n\">k</span> <span class=\"k\">in</span> <span class=\"n\">Finset.Ico</span> <span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">),</span> <span class=\"o\">((</span><span class=\"n\">k</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"mi\">3</span> <span class=\"bp\">/</span> <span class=\"mi\">3</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>I think that the first would be preferable.  Sometimes, \"adding 1\" generates better \"definitional equalities\" and you might see two versions of the same theorem, one using <code>n + 1</code> and one assuming <code>1 ≤ n</code> instead.  These should just hide implementation details, though: they can be important, but they are not specifically maths issues.</p>\n</blockquote>\n<p>ok, the second seems viable and works. But there is no way to actually define(init) n except for the type?</p>",
        "id": 386317547,
        "sender_full_name": "Robert hackman",
        "timestamp": 1692601591
    },
    {
        "content": "<p>I am not sure that I understand your question.  You can define the type of natural numbers that are at least 2 and then let <code>n</code> be a term of that type.  While this would work, you would have a lot of background work to prove all the results that you use about <code>ℕ</code> for your new custom type.</p>\n<p>However, maybe closer to what your question is asking is that you can construct <em>closed</em> terms of type <code>ℕ</code> by starting from <code>0</code> and repeatedly applying <code>Nat.succ</code> to it.  Introducing a \"generic\" term of type <code>ℕ</code> allows you to use it and you can still apply <code>Nat.succ</code> to it.  So you could introduce <code>n</code> by <code>(n : ℕ)</code> and then apply the <code>Nat.succ</code> constructor to it.  E.g. you could do <code>Nat.succ (Nat.succ n)</code>.  Note also that this is <em>different</em> from <code>n + 2</code>, because of how parentheses are inserted:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Nat.succ</span> <span class=\"o\">(</span><span class=\"n\">Nat.succ</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n<span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>However, I think that what models better a natural number starting from a given bound is to introduce a generic natural number and then assuming that it is at least the bound that you want (i.e. solution 1 above).</p>",
        "id": 386318363,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1692602008
    },
    {
        "content": "<p>In terms of preferring style 1 or 2 above, there is also a \"library\" consideration.</p>\n<p>With style 1, someone who might want to use your result would be able to apply it to <em>any</em> term of type <code>ℕ</code> and be left with a proof obligation that their term was at least 2.</p>\n<p>With style 2, applying your result requires the term to be of the form <code>(whatever in ℕ) + 2</code>.  This is less flexible than the previous method.</p>\n<p>Of course, ultimately they are equivalent and you can work with either, but, given the structure of <code>mathlib</code>, the first method leads to a smoother experience later on.</p>",
        "id": 386319081,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1692602277
    },
    {
        "content": "<p>yeah makes sense! thanks :)</p>",
        "id": 386319746,
        "sender_full_name": "Robert hackman",
        "timestamp": 1692602495
    }
]