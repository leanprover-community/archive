[
    {
        "content": "<p>I want to show that the homomorphism I have for the quotient group of the free group modulo the normal closure of the relations is injective but I am having some difficulties.  I tried doing it similar to <code>kerLift</code> in <code>QuotientGroup</code> but couldn't since the normal closure is a only subgroup of the kernel (from what we know at this point) .  Actually, the whole point of doing this injective proof is so that I can use it to prove that the normal closure is equal to the kernel of the hom between the free group and Dihedral group (the <code>lift</code> of <code>genMap</code>).  I have code for everything else but left it out to keep <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> a reasonable size.</p>\n<p>In addition to trying some form of induction similar to <code>kerLift</code>, I also tried doing by <code>rcases</code> on the terms of <code>DihedralPresentedGroup</code> but this ended up giving me some <code>Setoid</code>s and <code>Quot.mk</code>.  For these types, I also tried using an appropriate induction theorem similar to what <code>kerLift</code>, but to no avail.  Below I have the start of proof by contradiction which I was hoping I could continue on if the other aforementioned ideas are not a better course of action, however I am not even sure how to proceed beyond what I have.  I have been looking at cosets but no good ideas at the moment.  One may be remiss to not have an informal proof in hand before venturing forward on this but I have looked through multiple textbooks and haven't found any good examples as they just brush over these details (for group presentations).  Either that, or I am more dense than I care to believe.  I feel like I am starting to run out of ideas and looking for suggestions.</p>\n<p>Here is an <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.GroupTheory.PresentedGroup</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.GroupTheory.SpecificGroups.Dihedral</span>\n\n<span class=\"c1\">-- set_option maxHeartbeats 10000000</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">DihedralGroup</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">r_inv_eq_r_neg</span> <span class=\"o\">{</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ZMod</span> <span class=\"n\">n</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">=</span> <span class=\"n\">r</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">r_one_zpow</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">r</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ZMod</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">r</span> <span class=\"n\">i</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">hj</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">i.eq_nat_or_neg</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">hj</span> <span class=\"k\">with</span> <span class=\"n\">rfl</span> <span class=\"bp\">|</span> <span class=\"n\">rfl</span>\n  <span class=\"bp\">·</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">zpow_coe_nat</span><span class=\"o\">,</span> <span class=\"n\">r_one_pow</span><span class=\"o\">,</span> <span class=\"n\">Int.cast_ofNat</span><span class=\"o\">]</span>\n  <span class=\"bp\">·</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">zpow_neg</span><span class=\"o\">,</span> <span class=\"n\">zpow_coe_nat</span><span class=\"o\">,</span> <span class=\"n\">r_one_pow</span><span class=\"o\">,</span> <span class=\"n\">Int.cast_neg</span><span class=\"o\">,</span> <span class=\"n\">Int.cast_ofNat</span><span class=\"o\">,</span> <span class=\"n\">r_inv_eq_r_neg</span><span class=\"o\">]</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">r_z_pow_n</span> <span class=\"o\">{</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ZMod</span> <span class=\"n\">n</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">NeZero</span> <span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">r</span> <span class=\"n\">i</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">r</span> <span class=\"mi\">1</span> <span class=\"bp\">^</span> <span class=\"n\">i.val</span> <span class=\"bp\">=</span> <span class=\"n\">r</span> <span class=\"n\">i</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">r_one_pow</span><span class=\"o\">,</span> <span class=\"n\">r.injEq</span><span class=\"o\">]</span>\n    <span class=\"n\">exact</span> <span class=\"n\">ZMod.nat_cast_zmod_val</span> <span class=\"n\">i</span>\n  <span class=\"k\">have</span> <span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"mi\">1</span> <span class=\"bp\">^</span> <span class=\"n\">i.val</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">r</span> <span class=\"mi\">1</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">i.val</span> <span class=\"bp\">*</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">exact</span> <span class=\"n\">Eq.symm</span> <span class=\"o\">(</span><span class=\"n\">pow_mul</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">DihedralGroup</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">i.val</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n  <span class=\"k\">have</span> <span class=\"n\">h3</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">i.val</span> <span class=\"bp\">*</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">DihedralGroup</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">r_one_pow</span><span class=\"o\">,</span> <span class=\"n\">Nat.cast_mul</span><span class=\"o\">,</span> <span class=\"n\">ZMod.nat_cast_val</span><span class=\"o\">,</span> <span class=\"n\">ZMod.cast_id'</span><span class=\"o\">,</span>\n      <span class=\"n\">id_eq</span><span class=\"o\">,</span> <span class=\"n\">CharP.cast_eq_zero</span><span class=\"o\">,</span> <span class=\"n\">mul_zero</span><span class=\"o\">,</span> <span class=\"n\">one_def</span><span class=\"o\">]</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">h1</span><span class=\"o\">,</span> <span class=\"n\">h2</span><span class=\"o\">,</span> <span class=\"n\">h3</span><span class=\"o\">]</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">DihedralGroup</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">DihedralGroup</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">DihedralPresentedGroup</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">generator</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">generator</span> <span class=\"n\">n</span>\n  <span class=\"bp\">|</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">generator</span> <span class=\"n\">n</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">genMap</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">generator</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">DihedralGroup</span> <span class=\"n\">n</span>\n  <span class=\"bp\">|</span> <span class=\"n\">generator.a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">sr</span> <span class=\"mi\">1</span>\n  <span class=\"bp\">|</span> <span class=\"n\">generator.b</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">sr</span> <span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"n\">r</span> <span class=\"mi\">1</span>\n\n<span class=\"sd\">/-- Presentation ⟨a, b | a² = 1, b² = 1, (a * b)ⁿ = 1⟩  -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">Rels</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"o\">(</span><span class=\"n\">FreeGroup</span> <span class=\"o\">(</span><span class=\"n\">generator</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span><span class=\"n\">FreeGroup.of</span> <span class=\"n\">generator.a</span> <span class=\"bp\">*</span> <span class=\"n\">FreeGroup.of</span> <span class=\"n\">generator.a</span><span class=\"o\">}</span> <span class=\"bp\">∪</span>\n  <span class=\"o\">{</span><span class=\"n\">FreeGroup.of</span> <span class=\"n\">generator.b</span> <span class=\"bp\">*</span> <span class=\"n\">FreeGroup.of</span> <span class=\"n\">generator.b</span><span class=\"o\">}</span> <span class=\"bp\">∪</span>\n  <span class=\"o\">{(</span><span class=\"n\">FreeGroup.of</span> <span class=\"n\">generator.a</span> <span class=\"bp\">*</span> <span class=\"n\">FreeGroup.of</span> <span class=\"n\">generator.b</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"n\">n</span><span class=\"o\">}</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span> <span class=\"n\">abbrev</span> <span class=\"n\">DihedralPresentedGroup</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">PresentedGroup</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">Rels</span> <span class=\"n\">n</span>\n<span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span> <span class=\"n\">abbrev</span> <span class=\"n\">KerQuotClosure</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">Subgroup.map</span> <span class=\"o\">(</span><span class=\"n\">QuotientGroup.mk'</span>\n  <span class=\"o\">(</span><span class=\"n\">Subgroup.normalClosure</span> <span class=\"o\">(</span><span class=\"n\">Rels</span> <span class=\"n\">n</span><span class=\"o\">)))</span> <span class=\"o\">(</span><span class=\"n\">MonoidHom.ker</span> <span class=\"o\">(</span><span class=\"n\">FreeGroup.lift</span> <span class=\"o\">(</span><span class=\"n\">genMap</span> <span class=\"n\">n</span><span class=\"o\">)))</span>\n<span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span> <span class=\"n\">abbrev</span> <span class=\"n\">FreeGroupQuotLift</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">FreeGroup</span> <span class=\"o\">(</span><span class=\"n\">generator</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">⧸</span> <span class=\"n\">MonoidHom.ker</span> <span class=\"o\">(</span><span class=\"n\">FreeGroup.lift</span> <span class=\"o\">(</span><span class=\"n\">genMap</span> <span class=\"n\">n</span><span class=\"o\">))</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">genHom</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">FreeGroupQuotLift</span> <span class=\"n\">n</span> <span class=\"bp\">→*</span> <span class=\"n\">DihedralGroup</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n  <span class=\"n\">QuotientGroup.kerLift</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">FreeGroup.lift</span> <span class=\"o\">(</span><span class=\"n\">genMap</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">injective_genHom</span> <span class=\"o\">:</span> <span class=\"n\">Function.Injective</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">genHom</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n  <span class=\"n\">QuotientGroup.kerLift_injective</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">FreeGroup.lift</span> <span class=\"o\">(</span><span class=\"n\">genMap</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">surjective_genHom</span> <span class=\"o\">:</span> <span class=\"n\">Function.Surjective</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">genHom</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">let</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">FreeGroup</span> <span class=\"o\">(</span><span class=\"n\">generator</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">FreeGroup.of</span> <span class=\"n\">generator.a</span>\n  <span class=\"k\">let</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">FreeGroup</span> <span class=\"o\">(</span><span class=\"n\">generator</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">FreeGroup.of</span> <span class=\"n\">generator.b</span>\n  <span class=\"n\">intro</span> <span class=\"n\">g</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">g</span> <span class=\"k\">with</span> <span class=\"n\">i</span> <span class=\"bp\">|</span> <span class=\"n\">i</span>\n  <span class=\"bp\">·</span> <span class=\"n\">use</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">genHom</span><span class=\"o\">,</span> <span class=\"n\">genMap</span><span class=\"o\">]</span>\n  <span class=\"bp\">·</span> <span class=\"n\">use</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">genHom</span><span class=\"o\">,</span> <span class=\"n\">genMap</span><span class=\"o\">]</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">bijective_genHom</span> <span class=\"o\">:</span> <span class=\"n\">Function.Bijective</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">genHom</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨</span><span class=\"n\">injective_genHom</span><span class=\"o\">,</span> <span class=\"n\">surjective_genHom</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">noncomputable</span>\n<span class=\"kd\">def</span> <span class=\"n\">FreeGroupQuotLift_eq_DihedralGroup</span> <span class=\"o\">:</span> <span class=\"n\">FreeGroupQuotLift</span> <span class=\"n\">n</span> <span class=\"bp\">≃*</span> <span class=\"n\">DihedralGroup</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n  <span class=\"n\">MulEquiv.ofBijective</span> <span class=\"o\">(</span><span class=\"n\">genHom</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">bijective_genHom</span><span class=\"o\">)</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">genHom'</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">DihedralPresentedGroup</span> <span class=\"n\">n</span> <span class=\"bp\">→*</span> <span class=\"n\">DihedralGroup</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n    <span class=\"n\">PresentedGroup.toGroup</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"n\">genMap</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">&lt;|</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">r</span> <span class=\"n\">hr</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Rels</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hr</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">Set.union_singleton</span><span class=\"o\">,</span> <span class=\"n\">Set.mem_singleton_iff</span><span class=\"o\">,</span> <span class=\"n\">Set.mem_insert_iff</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hr</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">hr</span> <span class=\"k\">with</span> <span class=\"n\">hr₁</span> <span class=\"bp\">|</span> <span class=\"n\">hr₂</span> <span class=\"bp\">|</span> <span class=\"n\">hr₃</span>\n  <span class=\"bp\">·</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">hr₁</span><span class=\"o\">]</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">map_pow</span><span class=\"o\">,</span> <span class=\"n\">map_mul</span><span class=\"o\">,</span> <span class=\"n\">FreeGroup.lift.of</span><span class=\"o\">]</span>\n    <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">genMap</span><span class=\"o\">]</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">sr_mul_r</span><span class=\"o\">,</span> <span class=\"n\">add_zero</span><span class=\"o\">,</span> <span class=\"n\">sr_mul_sr</span><span class=\"o\">,</span> <span class=\"n\">sub_self</span><span class=\"o\">,</span> <span class=\"n\">add_sub_cancel</span><span class=\"o\">]</span>\n    <span class=\"n\">cases'</span> <span class=\"n\">n</span> <span class=\"k\">with</span> <span class=\"n\">n</span>\n    <span class=\"bp\">·</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">Nat.zero_eq</span><span class=\"o\">,</span> <span class=\"n\">pow_zero</span><span class=\"o\">]</span>\n    <span class=\"bp\">·</span> <span class=\"n\">exact</span> <span class=\"n\">r_z_pow_n</span>\n  <span class=\"bp\">·</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">hr₂</span><span class=\"o\">]</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">map_mul</span><span class=\"o\">,</span> <span class=\"n\">FreeGroup.lift.of</span><span class=\"o\">,</span> <span class=\"n\">genMap</span><span class=\"o\">]</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">sr_mul_r</span><span class=\"o\">,</span> <span class=\"n\">sr_mul_sr</span><span class=\"o\">,</span> <span class=\"n\">sub_self</span><span class=\"o\">,</span> <span class=\"n\">one_def</span><span class=\"o\">]</span>\n  <span class=\"bp\">·</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">hr₃</span><span class=\"o\">]</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">map_mul</span><span class=\"o\">,</span> <span class=\"n\">FreeGroup.lift.of</span><span class=\"o\">,</span> <span class=\"n\">genMap</span><span class=\"o\">]</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">sr_mul_sr</span><span class=\"o\">,</span> <span class=\"n\">sub_self</span><span class=\"o\">,</span> <span class=\"n\">one_def</span><span class=\"o\">]</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">a_relsGenMap</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">genMap</span> <span class=\"n\">n</span> <span class=\"n\">generator.a</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">genMap</span> <span class=\"n\">n</span> <span class=\"n\">generator.a</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">DihedralGroup</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">genMap</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">split</span>\n  <span class=\"bp\">·</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">sr_mul_sr</span><span class=\"o\">,</span> <span class=\"n\">sub_self</span><span class=\"o\">,</span> <span class=\"n\">one_def</span><span class=\"o\">]</span>\n  <span class=\"bp\">·</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">sr_mul_r</span><span class=\"o\">,</span> <span class=\"n\">sr_mul_sr</span><span class=\"o\">,</span> <span class=\"n\">sub_self</span><span class=\"o\">,</span> <span class=\"n\">one_def</span><span class=\"o\">]</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">b_relsGenMap</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">genMap</span> <span class=\"n\">n</span> <span class=\"n\">generator.b</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">genMap</span> <span class=\"n\">n</span> <span class=\"n\">generator.b</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">DihedralGroup</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">genMap</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">split</span>\n  <span class=\"bp\">·</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">sr_mul_sr</span><span class=\"o\">,</span> <span class=\"n\">sub_self</span><span class=\"o\">,</span> <span class=\"n\">one_def</span><span class=\"o\">]</span>\n  <span class=\"bp\">·</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">sr_mul_r</span><span class=\"o\">,</span> <span class=\"n\">sr_mul_sr</span><span class=\"o\">,</span> <span class=\"n\">sub_self</span><span class=\"o\">,</span> <span class=\"n\">one_def</span><span class=\"o\">]</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">a_b_relsGenMap</span>\n    <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"n\">genMap</span> <span class=\"n\">n</span> <span class=\"n\">generator.a</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">genMap</span> <span class=\"n\">n</span> <span class=\"n\">generator.b</span><span class=\"o\">))</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">DihedralGroup</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">genMap</span><span class=\"o\">]</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">sr_mul_r</span><span class=\"o\">,</span> <span class=\"n\">sr_mul_sr</span><span class=\"o\">,</span> <span class=\"n\">add_sub_cancel</span><span class=\"o\">]</span>\n  <span class=\"n\">cases</span> <span class=\"n\">n</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">Nat.zero_eq</span><span class=\"o\">,</span> <span class=\"n\">pow_zero</span><span class=\"o\">]</span>\n  <span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">r_z_pow_n</span><span class=\"o\">]</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">one_of_Rels</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">r</span> <span class=\"bp\">∈</span> <span class=\"n\">Rels</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">FreeGroup.lift</span> <span class=\"o\">(</span><span class=\"n\">genMap</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">r</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">r</span> <span class=\"n\">hr</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">Rels</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hr</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">Set.union_singleton</span><span class=\"o\">,</span> <span class=\"n\">Set.mem_singleton_iff</span><span class=\"o\">,</span> <span class=\"n\">Set.mem_insert_iff</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hr</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">hr</span> <span class=\"k\">with</span> <span class=\"n\">hr₁</span> <span class=\"bp\">|</span> <span class=\"n\">hr₂</span> <span class=\"bp\">|</span> <span class=\"n\">hr₃</span>\n  <span class=\"bp\">·</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">hr₁</span><span class=\"o\">]</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">map_pow</span><span class=\"o\">,</span> <span class=\"n\">map_mul</span><span class=\"o\">,</span> <span class=\"n\">FreeGroup.lift.of</span><span class=\"o\">,</span> <span class=\"n\">a_b_relsGenMap</span><span class=\"o\">]</span>\n  <span class=\"bp\">·</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">hr₂</span><span class=\"o\">]</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">map_mul</span><span class=\"o\">,</span> <span class=\"n\">FreeGroup.lift.of</span><span class=\"o\">,</span> <span class=\"n\">b_relsGenMap</span><span class=\"o\">]</span>\n  <span class=\"bp\">·</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">hr₃</span><span class=\"o\">]</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">map_mul</span><span class=\"o\">,</span> <span class=\"n\">FreeGroup.lift.of</span><span class=\"o\">,</span> <span class=\"n\">a_relsGenMap</span><span class=\"o\">]</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">injective_genHom'</span> <span class=\"o\">:</span> <span class=\"n\">Function.Injective</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">genHom'</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">injective_iff_map_eq_one</span> <span class=\"o\">(</span><span class=\"n\">genHom'</span> <span class=\"n\">n</span><span class=\"o\">)]</span>\n  <span class=\"n\">intro</span> <span class=\"n\">x</span> <span class=\"n\">h</span>\n  <span class=\"n\">by_contra</span> <span class=\"n\">H</span>\n  <span class=\"gr\">sorry</span>\n\n<span class=\"c1\">-- This gives term of type : Subgroup.normalClosure rels ≤ MonoidHom.ker (↑FreeGroup.lift f)</span>\n<span class=\"c1\">-- (PresentedGroup.closure_rels_subset_ker (@one_of_Rels n))</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">DihedralPresentedGroup</span>\n</code></pre></div>",
        "id": 394515617,
        "sender_full_name": "Newell Jensen",
        "timestamp": 1696282154
    },
    {
        "content": "<p>Since nobody has replied, maybe it is best that I put the entire branch up in a PR and put it as WIP and Help Wanted for the last sorry?</p>",
        "id": 394671365,
        "sender_full_name": "Newell Jensen",
        "timestamp": 1696350873
    },
    {
        "content": "<p>I tried to read your code on my phone this morning but when I realised I'd ploughed through a bunch of it and wasn't even half way through I gave up. Is there a way to summarise the question for busy people?</p>",
        "id": 394671950,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1696351109
    },
    {
        "content": "<p>To summarize I am just completely stuck on the injective proof that is sorry'd.  In the message I tried to convey what I had already tried, to show that I have at least put the effort in before asking for help and to give an idea of what I had been attempting.  Where I ended up was trying to construct a proof by contradiction of some sort since if the kernel of the hom is not injective this would mean that there would be a coset of the normal closure that maps to the identity in the Dihedral group which means that some other relation exists that was not taken into account.</p>",
        "id": 394672648,
        "sender_full_name": "Newell Jensen",
        "timestamp": 1696351432
    },
    {
        "content": "<p>That is also why I mentioned putting it in a PR and labeling help wanted, as it might take more time than a quick pass. This is the last theorem I need, as I already have everything else.</p>",
        "id": 394673711,
        "sender_full_name": "Newell Jensen",
        "timestamp": 1696351886
    },
    {
        "content": "<p>What's the maths statement?</p>",
        "id": 394674162,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1696352090
    },
    {
        "content": "<p>Of the branch?  <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">⟨</mo><mi>a</mi><mo separator=\"true\">,</mo><mi>b</mi><mtext> </mtext><mi mathvariant=\"normal\">∣</mi><mtext> </mtext><msup><mi>a</mi><mn>2</mn></msup><mo>=</mo><mn>1</mn><mo separator=\"true\">,</mo><msup><mi>b</mi><mn>2</mn></msup><mo>=</mo><mn>1</mn><mo separator=\"true\">,</mo><mo stretchy=\"false\">(</mo><mi>a</mi><mo>∗</mo><mi>b</mi><msup><mo stretchy=\"false\">)</mo><mi>n</mi></msup><mo>=</mo><mn>1</mn><mo stretchy=\"false\">⟩</mo><mo>≅</mo><msub><mi>D</mi><mi>n</mi></msub></mrow><annotation encoding=\"application/x-tex\">\\langle a, b\\ |\\ a^2 = 1, b^2 = 1, (a * b) ^ n = 1 \\rangle \\cong D_n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0641em;vertical-align:-0.25em;\"></span><span class=\"mopen\">⟨</span><span class=\"mord mathnormal\">a</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">b</span><span class=\"mspace\"> </span><span class=\"mord\">∣</span><span class=\"mspace\"> </span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.0085em;vertical-align:-0.1944em;\"></span><span class=\"mord\">1</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">b</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">a</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">b</span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6644em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">⟩</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≅</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">D</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:-0.0278em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>.</p>",
        "id": 394675012,
        "sender_full_name": "Newell Jensen",
        "timestamp": 1696352408
    },
    {
        "content": "<p>And what's the maths proof? That looks tricky to me.</p>",
        "id": 394677050,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1696353195
    },
    {
        "content": "<p>I can see the map and it's obviously a surjection but why is it an injection mathematically?</p>",
        "id": 394677089,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1696353214
    },
    {
        "content": "<p>I would be tempted to write down an inverse explicitly and then it's a bit of a grind to prove it's a group hom but that would get you over the line.</p>",
        "id": 394677233,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1696353273
    },
    {
        "content": "<p>One standard maths proof would count elements after showing it is a surjection.</p>",
        "id": 394684958,
        "sender_full_name": "Julian Külshammer",
        "timestamp": 1696356467
    },
    {
        "content": "<p>How do you count the elements in a finitely presented group? I guess there's no algorithm in general but here you're just saying \"well a^2=1 and b^2=1 so every element is either abababab...a or abababab...b or bababa...a or bababab...b\". Now what though? Looks like things could get messy (even stating what I just wrote there in Lean sounds pretty horrible) :-/</p>",
        "id": 394694198,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1696360245
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"443984\">@Newell Jensen</span> so are you saying that you posted a whole bunch of Lean code but actually your question was just a maths question?</p>",
        "id": 394694263,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1696360289
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> no, not that I think.  The group presentation is isomorphic to the Dihedral group (the texbooks teach us this) and therefore the hom must be injective (assuming you have the proper mapping of course).  Thus, I wanted to see how to do it in lean.  It sould be possible and this was stumping me and when I can't figure something I like to try and understand why.</p>",
        "id": 394695348,
        "sender_full_name": "Newell Jensen",
        "timestamp": 1696360786
    },
    {
        "content": "<p>See Kevin? He already had a math proof: \"the Textbooks teach us this\".</p>",
        "id": 394695560,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1696360879
    },
    {
        "content": "<p>Do we have a tactic for that?</p>",
        "id": 394695737,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1696360941
    },
    {
        "content": "<p>My point is, I think this should be possible in lean and I would like to see how to do it is all.</p>",
        "id": 394695749,
        "sender_full_name": "Newell Jensen",
        "timestamp": 1696360950
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/Group.20presentation.20hom.20injective/near/394695737\">said</a>:</p>\n<blockquote>\n<p>Do we have a tactic for that?</p>\n</blockquote>\n<p>Sure, it's spelled 's', 'o', 'r', 'r', 'y'.</p>",
        "id": 394695810,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1696360980
    },
    {
        "content": "<p>Right, but Lean doesn't do magic: if you don't know the maths proof then Lean isn't going to solve it for you. Your question is a maths question, not a Lean question (yet)</p>",
        "id": 394695813,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1696360982
    },
    {
        "content": "<p>Point taken, will see if I can figure this out.  Cheers.</p>",
        "id": 394695872,
        "sender_full_name": "Newell Jensen",
        "timestamp": 1696361021
    },
    {
        "content": "<p>Some suggestions have been made above but both of them look pretty painful to me right now (although once this is done I think it would be a nice result to put in the library)</p>",
        "id": 394695973,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1696361056
    },
    {
        "content": "<p>Yes, thanks for the suggestions.  I appreciate it.</p>",
        "id": 394696044,
        "sender_full_name": "Newell Jensen",
        "timestamp": 1696361090
    },
    {
        "content": "<p>First you need a paper proof with no gaps -- that's your strategy for the Lean proof.</p>",
        "id": 394696058,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1696361095
    },
    {
        "content": "<p>and you might want to choose wisely :-)</p>",
        "id": 394696079,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1696361107
    },
    {
        "content": "<p>Joking aside, this is a very deep fundamental laws of formalized mathematics as it exists today (as opposed to dreams of AI that don't exist yet): you need to understand why something is true before formalizing it. Somewhat fuzzy understanding could be enough, but you need some kind of understanding.</p>",
        "id": 394696083,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1696361109
    },
    {
        "content": "<p>Yes, and we need to work hard on changing that, I think. But that's a really hard problem. I want to get to a point where you can bring your math problem to Lean, and work on solving it in Lean.</p>",
        "id": 394696360,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1696361253
    },
    {
        "content": "<p>To be quite honest, this is how I use Lean sometimes. In my LeanAPAP project, I am following a long paper proof whose parts are written to a varying degree of precision.</p>",
        "id": 394697173,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1696361607
    },
    {
        "content": "<p>I take each statement, then try formalising it. If I get stuck, I read a bit more of the proof. If I get stuck, I ask <span class=\"user-mention silent\" data-user-id=\"458865\">Thomas Bloom</span> to expand a bit more.</p>",
        "id": 394697407,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1696361714
    },
    {
        "content": "<p>This is why I wrote \"somewhat fuzzy understanding could be enough\". I'm sure you still roughly understand what is going on.</p>",
        "id": 394697408,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1696361714
    },
    {
        "content": "<p>Eh, sometimes <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span></p>",
        "id": 394697455,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1696361746
    },
    {
        "content": "<p>Martin Escardo, who works in higher type theory, told me that he uses Agda like an electronic blackboard for experimentation. Here we have a situation where the fundamental objects he's working with (infinity groupoids) are so complex that he appreciates being able to use the prover to manage what is going on. But I'm not sure I've experienced this myself yet (although I have experienced this when using computer algebra packages do to clarifying calculations).</p>",
        "id": 394697698,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1696361829
    },
    {
        "content": "<p>Was able to prove the hom is surjective...now let's see if I can find a counting argument...</p>",
        "id": 394704095,
        "sender_full_name": "Newell Jensen",
        "timestamp": 1696364831
    },
    {
        "content": "<p>But I did that just to see if I could...seems like an inverse map like Kevin suggested is probably my best bet.</p>",
        "id": 394708336,
        "sender_full_name": "Newell Jensen",
        "timestamp": 1696365678
    },
    {
        "content": "<p>The issue with that is that the definition of D_n in Lean is \"either a rotation or a reflection\" so you say where the rotations go, you say where the reflections go, and now to check it's a group hom you need to check it preserves multiplication and there will be 4 cases. I guess it's not that bad at the end of the day.</p>",
        "id": 394716266,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1696370064
    },
    {
        "content": "<p>It seems the easier way to make the argument work is to first prove the isomorphism of your presentation with the presentation <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">⟨</mo><mi>r</mi><mo separator=\"true\">,</mo><mi>s</mi><mi mathvariant=\"normal\">∣</mi><msup><mi>r</mi><mi>n</mi></msup><mo>=</mo><msup><mi>s</mi><mn>2</mn></msup><mo>=</mo><mn>1</mn><mo separator=\"true\">,</mo><mi>r</mi><mi>s</mi><mi>r</mi><mo>=</mo><mi>s</mi><mo stretchy=\"false\">⟩</mo></mrow><annotation encoding=\"application/x-tex\">\\langle r,s| r^n=s^2=1, rsr=s\\rangle</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">⟨</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">s</span><span class=\"mord\">∣</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6644em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8141em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">s</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8389em;vertical-align:-0.1944em;\"></span><span class=\"mord\">1</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">rsr</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">s</span><span class=\"mclose\">⟩</span></span></span></span> and then use the counting argument or directly prove the isomorphism with the Dn in mathlib, see e.g. <a href=\"https://math.stackexchange.com/q/1019593/15416\">https://math.stackexchange.com/q/1019593/15416</a></p>",
        "id": 394729974,
        "sender_full_name": "Julian Külshammer",
        "timestamp": 1696379075
    },
    {
        "content": "<p>The arguments there all seem to be of the form \"the textbooks teach us the standard presentation and now given another presentation we can manipulate it to get the presentation we want\". So this technique changes the goal into proving that some other presentation gives the right answer and in some sense this is the hard part, because the definition in mathlib is not via a presentation.</p>\n<p>Concretely, the standard presentation r^n=s^2=(rs)^2=1 certainly also maps to our D_n, but now what? We still have to either write down an inverse or count. I'm not convinced that either problem is substantially easier than before. As far as I can see, counting involves defining an algorithm to put the element of the finitely presented group into a normal form, whatever presentation you use. That's the sort of thing a computer scientist might enjoy but not me. Writing down the inverse function will still involve the case split and hence the four cases when proving it's a group hom but it's still looking to me like this is the cheaper option and here the change of presentation doesn't buy you anything, it just changes the calculations rather than making them any easier. Am I missing something?</p>",
        "id": 394756742,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1696393579
    },
    {
        "content": "<p>The counting seems easier in the standard  presentation since you don't count sets of alternating words but instead words of the form <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>r</mi><mi>i</mi></msup><msup><mi>s</mi><mi>j</mi></msup></mrow><annotation encoding=\"application/x-tex\">r^i s^j</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8247em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8247em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathnormal\">s</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8247em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.05724em;\">j</span></span></span></span></span></span></span></span></span></span></span>. You are probably right that just writing down the map is preferable.</p>",
        "id": 394762732,
        "sender_full_name": "Julian Külshammer",
        "timestamp": 1696398066
    },
    {
        "content": "<p>Aah how about this: for the counting argument you just have to write down an explicit set of reps and then prove by induction on word length that you have everything, which just boils down to checking that the identity is in and that the set of reps is closed under multiplication on the right by the generators. Again you have four cases because the coset reps are of two kinds and there are two generators. And here you're right Julian in that the standard presentation will be easier to work with because the coset reps are a bit nicer.</p>",
        "id": 394767728,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1696401057
    },
    {
        "content": "<p>I don't know what definition of the dihedral group you use, but I would try to prove isomorphism by constructing the reverse homomorphim and checking both compositions are the identity (by checking on generators).</p>",
        "id": 394804217,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1696414095
    },
    {
        "content": "<p>The definition in lean is just an inductive type <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=DihedralGroup#doc\">docs#DihedralGroup</a> .</p>",
        "id": 394822513,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1696420033
    },
    {
        "content": "<p>I don't notice that anyone mentioned what I view as the standard argument --- apologies if I missed something (I only did a cursory read). The standard argument is especially nice for the dihedral group which has an \"obvious\" 2-dimensional faithful representation. That argument involves checking distinctness of 2-by-2 matrices, rather than distinctness of elements of a something abstract (a quotient).</p>\n<p>The group <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>D</mi><mi>n</mi></msub></mrow><annotation encoding=\"application/x-tex\">D_n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">D</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:-0.0278em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> is defined by some generators and relations (so quotient of free group), for example <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">⟨</mo><mi>r</mi><mo separator=\"true\">,</mo><mi>m</mi><mtext>  </mtext><mi mathvariant=\"normal\">∣</mi><mtext>  </mtext><msup><mi>m</mi><mn>2</mn></msup><mo>=</mo><mn>1</mn><mo separator=\"true\">,</mo><msup><mi>r</mi><mi>n</mi></msup><mo>=</mo><mn>1</mn><mo separator=\"true\">,</mo><mi>r</mi><mi>m</mi><mi>r</mi><mi>m</mi><mo>=</mo><mn>1</mn><mo stretchy=\"false\">⟩</mo></mrow><annotation encoding=\"application/x-tex\">\\langle r, m \\; | \\; m^2 = 1, r^n = 1, r m r m = 1 \\rangle</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0641em;vertical-align:-0.25em;\"></span><span class=\"mopen\">⟨</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">m</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mord\">∣</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">m</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8588em;vertical-align:-0.1944em;\"></span><span class=\"mord\">1</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6644em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8389em;vertical-align:-0.1944em;\"></span><span class=\"mord\">1</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathnormal\">m</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathnormal\">m</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">⟩</span></span></span></span>. By the relations one first indeed needs to combinatorially show that any element can be reduced to one of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>2</mn><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">2n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">2</span><span class=\"mord mathnormal\">n</span></span></span></span> words (say <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>m</mi><mi>b</mi></msup><msup><mi>r</mi><mi>j</mi></msup></mrow><annotation encoding=\"application/x-tex\">m^b r^j</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8491em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">m</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8491em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">b</span></span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8247em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.05724em;\">j</span></span></span></span></span></span></span></span></span></span></span> with <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>b</mi><mo>∈</mo><mo stretchy=\"false\">{</mo><mn>0</mn><mo separator=\"true\">,</mo><mn>1</mn><mo stretchy=\"false\">}</mo></mrow><annotation encoding=\"application/x-tex\">b \\in \\{0,1\\}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7335em;vertical-align:-0.0391em;\"></span><span class=\"mord mathnormal\">b</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">{</span><span class=\"mord\">0</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">}</span></span></span></span>, <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>j</mi><mo>∈</mo><mo stretchy=\"false\">{</mo><mn>0</mn><mo separator=\"true\">,</mo><mn>1</mn><mo separator=\"true\">,</mo><mo>…</mo><mo separator=\"true\">,</mo><mi>n</mi><mo>−</mo><mn>1</mn><mo stretchy=\"false\">}</mo></mrow><annotation encoding=\"application/x-tex\">j \\in \\{0,1,\\ldots, n-1\\}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.854em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05724em;\">j</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">{</span><span class=\"mord\">0</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">1</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"minner\">…</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">}</span></span></span></span>). The mathematically \"nontrivial\" task, then, is to show that these words are distict group elements. For that, note that the (universal property of the) quotient construction exactly tells how to construct homomorphisms from the group, so by just verifying that the <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>2</mn><mo>×</mo><mn>2</mn></mrow><annotation encoding=\"application/x-tex\">2 \\times 2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7278em;vertical-align:-0.0833em;\"></span><span class=\"mord\">2</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">2</span></span></span></span> matrices</p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>M</mi><mo>=</mo><mrow><mo fence=\"true\">[</mo><mtable rowspacing=\"0.16em\" columnalign=\"center center\" columnspacing=\"1em\"><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>0</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mo>−</mo><mn>1</mn></mrow></mstyle></mtd></mtr></mtable><mo fence=\"true\">]</mo></mrow><mspace width=\"2em\"/><mi>R</mi><mo>=</mo><mrow><mo fence=\"true\">[</mo><mtable rowspacing=\"0.16em\" columnalign=\"center center\" columnspacing=\"1em\"><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mi>cos</mi><mo>⁡</mo><mo stretchy=\"false\">(</mo><mn>2</mn><mi>π</mi><mi mathvariant=\"normal\">/</mi><mi>n</mi><mo stretchy=\"false\">)</mo></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mo>−</mo><mi>sin</mi><mo>⁡</mo><mo stretchy=\"false\">(</mo><mn>2</mn><mi>π</mi><mi mathvariant=\"normal\">/</mi><mi>n</mi><mo stretchy=\"false\">)</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mi>sin</mi><mo>⁡</mo><mo stretchy=\"false\">(</mo><mn>2</mn><mi>π</mi><mi mathvariant=\"normal\">/</mi><mi>n</mi><mo stretchy=\"false\">)</mo></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mi>cos</mi><mo>⁡</mo><mo stretchy=\"false\">(</mo><mn>2</mn><mi>π</mi><mi mathvariant=\"normal\">/</mi><mi>n</mi><mo stretchy=\"false\">)</mo></mrow></mstyle></mtd></mtr></mtable><mo fence=\"true\">]</mo></mrow></mrow><annotation encoding=\"application/x-tex\">M = \\left[ \\begin{array}{cc} 1 &amp; 0 \\\\ 0 &amp; -1 \\end{array} \\right] \\qquad R =  \\left[ \\begin{array}{cc} \\cos(2\\pi/n) &amp; -\\sin(2\\pi/n) \\\\ \\sin(2\\pi/n) &amp; \\cos(2\\pi/n) \\end{array} \\right]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:2.4em;vertical-align:-0.95em;\"></span><span class=\"minner\"><span class=\"mopen delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size3\">[</span></span><span class=\"mord\"><span class=\"mtable\"><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"col-align-c\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.45em;\"><span style=\"top:-3.61em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">1</span></span></span><span style=\"top:-2.41em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.95em;\"><span></span></span></span></span></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"col-align-c\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.45em;\"><span style=\"top:-3.61em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">0</span></span></span><span style=\"top:-2.41em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">−</span><span class=\"mord\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.95em;\"><span></span></span></span></span></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span></span></span><span class=\"mclose delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size3\">]</span></span></span><span class=\"mspace\" style=\"margin-right:2em;\"></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:2.4em;vertical-align:-0.95em;\"></span><span class=\"minner\"><span class=\"mopen delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size3\">[</span></span><span class=\"mord\"><span class=\"mtable\"><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"col-align-c\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.45em;\"><span style=\"top:-3.61em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mop\">cos</span><span class=\"mopen\">(</span><span class=\"mord\">2</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">π</span><span class=\"mord\">/</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span><span style=\"top:-2.41em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mop\">sin</span><span class=\"mopen\">(</span><span class=\"mord\">2</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">π</span><span class=\"mord\">/</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.95em;\"><span></span></span></span></span></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"col-align-c\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.45em;\"><span style=\"top:-3.61em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">−</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mop\">sin</span><span class=\"mopen\">(</span><span class=\"mord\">2</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">π</span><span class=\"mord\">/</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span><span style=\"top:-2.41em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mop\">cos</span><span class=\"mopen\">(</span><span class=\"mord\">2</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">π</span><span class=\"mord\">/</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.95em;\"><span></span></span></span></span></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span></span></span><span class=\"mclose delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size3\">]</span></span></span></span></span></span></span></p>\n<p>satisfy <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>M</mi><mn>2</mn></msup><mo>=</mo><mn mathvariant=\"bold\">1</mn></mrow><annotation encoding=\"application/x-tex\">M^2 = \\mathbf{1}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord mathbf\">1</span></span></span></span>, <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>R</mi><mi>n</mi></msup><mo>=</mo><mn mathvariant=\"bold\">1</mn></mrow><annotation encoding=\"application/x-tex\">R^n = \\mathbf{1}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6644em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord mathbf\">1</span></span></span></span>, <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>R</mi><mi>M</mi><mi>R</mi><mi>M</mi><mo>=</mo><mn mathvariant=\"bold\">1</mn></mrow><annotation encoding=\"application/x-tex\">R M R M = \\mathbf{1}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">RMRM</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord mathbf\">1</span></span></span></span>, one gets a homomorphism <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>D</mi><mi>n</mi></msub><mo>→</mo><msub><mrow><mi mathvariant=\"normal\">G</mi><mi mathvariant=\"normal\">L</mi></mrow><mn>2</mn></msub><mo stretchy=\"false\">(</mo><mi mathvariant=\"double-struck\">R</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">D_n \\to \\mathrm{GL}_2(\\R)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">D</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:-0.0278em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathrm\">GL</span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathbb\">R</span><span class=\"mclose\">)</span></span></span></span>. Now it is trivial to write down the images of the <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>2</mn><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">2n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">2</span><span class=\"mord mathnormal\">n</span></span></span></span> elements: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>m</mi><mi>b</mi></msup><msup><mi>r</mi><mi>j</mi></msup><mo>↦</mo><msup><mi>M</mi><mi>b</mi></msup><msup><mi>R</mi><mi>j</mi></msup></mrow><annotation encoding=\"application/x-tex\">m^b r^j \\mapsto M^b R^j</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8601em;vertical-align:-0.011em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">m</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8491em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">b</span></span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8247em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.05724em;\">j</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">↦</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8491em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8491em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">b</span></span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8247em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.05724em;\">j</span></span></span></span></span></span></span></span></span></span></span>. These are 2-by-2 matrices that are easy to show distinct (ok, you may need to know that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>θ</mi><mo>↦</mo><mo stretchy=\"false\">(</mo><mi>cos</mi><mo>⁡</mo><mo stretchy=\"false\">(</mo><mi>θ</mi><mo stretchy=\"false\">)</mo><mo separator=\"true\">,</mo><mi>sin</mi><mo>⁡</mo><mo stretchy=\"false\">(</mo><mi>θ</mi><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\theta \\mapsto (\\cos(\\theta),\\sin(\\theta))</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7054em;vertical-align:-0.011em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">θ</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">↦</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mop\">cos</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">θ</span><span class=\"mclose\">)</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mop\">sin</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">θ</span><span class=\"mclose\">))</span></span></span></span> is injective on <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">[</mo><mn>0</mn><mo separator=\"true\">,</mo><mn>2</mn><mi>π</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">[0,2\\pi)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">[</span><span class=\"mord\">0</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">2</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">π</span><span class=\"mclose\">)</span></span></span></span>, and you might want to write down the determinants, but still, comparisons of explicit <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>2</mn><mo>×</mo><mn>2</mn></mrow><annotation encoding=\"application/x-tex\">2 \\times 2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7278em;vertical-align:-0.0833em;\"></span><span class=\"mord\">2</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">2</span></span></span></span> matrices).</p>",
        "id": 394823666,
        "sender_full_name": "Kalle Kytölä",
        "timestamp": 1696420453
    },
    {
        "content": "<p>The issue here is that lean's D_n is <em>not</em> defined by generators and relations.</p>",
        "id": 394824418,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1696420750
    },
    {
        "content": "<p>Oh, that never crossed my mind! (Clearly I didn't really read the thread...) Sorry!</p>\n<p>But I still think surprisingly many textbooks omit the counting argument.</p>",
        "id": 394824543,
        "sender_full_name": "Kalle Kytölä",
        "timestamp": 1696420798
    },
    {
        "content": "<p>There is work on Coxeter groups being done now, right? (<a href=\"#narrow/stream/287929-mathlib4/topic/Coxeter.20Groups\">Another thread</a>.) Shouldn't we change the definition of dihedral group to match, then? Those will surely be generators and relations constructions, right?</p>",
        "id": 394824990,
        "sender_full_name": "Kalle Kytölä",
        "timestamp": 1696420932
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"373986\">@Kalle Kytölä</span> yes, that is why I am working on this branch (to show that the Coxeter group for <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi><mo>=</mo><mn>2</mn></mrow><annotation encoding=\"application/x-tex\">n=2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">2</span></span></span></span> is equal to the presentation I have here).</p>",
        "id": 394875235,
        "sender_full_name": "Newell Jensen",
        "timestamp": 1696436312
    },
    {
        "content": "<p>I don't think we should define <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=ZMod#doc\">docs#ZMod</a> as Z/nZ, so for the same reason I don't think we should change the definition of dihedral group. Concrete types and efficient operations are great for computations.</p>",
        "id": 394876484,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1696436805
    },
    {
        "content": "<p>On the other hand, adding to mathlib the <em>isomorphism</em> would almost certainly be a welcome PR.</p>",
        "id": 394877717,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1696437246
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"224323\">Junyan Xu</span> <a href=\"#narrow/stream/113489-new-members/topic/Group.20presentation.20hom.20injective/near/394876484\">said</a>:</p>\n<blockquote>\n<p>I don't think we should define <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=ZMod#doc\">docs#ZMod</a> as Z/nZ, so for the same reason I don't think we should change the definition of dihedral group. Concrete types and efficient operations are great for computations.</p>\n</blockquote>\n<p>No plans on my side to do that.  You are probably referring to what <span class=\"user-mention\" data-user-id=\"373986\">@Kalle Kytölä</span>  mentioned.</p>",
        "id": 394877856,
        "sender_full_name": "Newell Jensen",
        "timestamp": 1696437313
    },
    {
        "content": "<p>The efficiency of computation did not occur to me, although I very much like the idea that dihedral groups will be computable (hopefully also in practice!) in Mathlib. Thanks for pointing that out, <span class=\"user-mention\" data-user-id=\"224323\">@Junyan Xu</span>!</p>\n<p>So given the Mathlib definition, the counting argument purely in terms of combinatorial objects indeed seems better, and the faithful representation counting argument does not look optimal (it is still <em>one</em> quite reasonable way to count and could be used for injectivity, just not the most direct way given Mathlib definition).</p>",
        "id": 394890331,
        "sender_full_name": "Kalle Kytölä",
        "timestamp": 1696442064
    }
]