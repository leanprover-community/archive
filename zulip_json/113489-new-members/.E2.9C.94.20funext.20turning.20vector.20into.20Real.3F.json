[
    {
        "content": "<p>I introduce <code>Tuple</code> as similar to <code>Vector</code>, introduce <code>Zero</code> for the zero Tuple/Vector, then try to show that the <code>0</code> I just introduced is equal to <code>![0, 0]</code>.  However, <code>funext</code> seems to turn both sides into  <code>ℝ</code>.</p>\n<p>Specifically, just after the <code>by</code>, if I hover over each side in VSCode, the type is <code>: Fin 2 → ℝ</code>, but right after <code>funext</code>, it's <code>: ℝ</code>.</p>\n<ol>\n<li>\n<p>What's going on?  Am I misinterpreting something, or is <code>funext</code> really changing the types?</p>\n</li>\n<li>\n<p>In Lean 3 I had this working where I could eventually use <code>interval_cases</code> to get the job done.  How can I prove this now in Lean 4?</p>\n</li>\n</ol>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Real.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.Field.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Fin.VecNotation</span>\n\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n\n<span class=\"kd\">@[reducible]</span>\n<span class=\"kd\">def</span> <span class=\"n\">Tuple</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">α</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">Tuple</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Zero</span> <span class=\"o\">(</span><span class=\"n\">Tuple</span> <span class=\"n\">F</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨</span><span class=\"k\">fun</span> <span class=\"n\">i</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">0</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">@[simp]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">zero_zero</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">Tuple</span> <span class=\"n\">F</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"k\">fun</span> <span class=\"n\">i</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n  <span class=\"n\">rfl</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"bp\">!</span><span class=\"o\">[(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">),</span> <span class=\"mi\">0</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">funext</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">zero_zero</span><span class=\"o\">]</span>\n  <span class=\"n\">dsimp</span>\n  <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">Tuple</span>\n</code></pre></div>",
        "id": 389263004,
        "sender_full_name": "Martin C. Martin",
        "timestamp": 1693941056
    },
    {
        "content": "<p>Funext turns a goal about function equality into an equality about an equality on codomains by introducing a variable ranging over the domain. I.e., it turns <code>f = g</code> into <code>f x = g x</code> with a new variable <code>x</code>. So the type has changed.</p>",
        "id": 389263384,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1693941214
    },
    {
        "content": "<p>Yeah, as soon as I wrote that and took a break, I realized that's the entire point of <code>funext</code>.  Thanks.</p>",
        "id": 389276713,
        "sender_full_name": "Martin C. Martin",
        "timestamp": 1693946371
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"348963\">Martin C. Martin</span> has marked this topic as resolved.</p>",
        "id": 389276723,
        "sender_full_name": "Notification Bot",
        "timestamp": 1693946374
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"348963\">Martin C. Martin</span> has marked this topic as unresolved.</p>",
        "id": 389276738,
        "sender_full_name": "Notification Bot",
        "timestamp": 1693946381
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"348963\">Martin C. Martin</span> has marked this topic as resolved.</p>",
        "id": 389276751,
        "sender_full_name": "Notification Bot",
        "timestamp": 1693946389
    }
]