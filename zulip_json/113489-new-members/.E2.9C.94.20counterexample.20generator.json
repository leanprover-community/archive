[
    {
        "content": "<p>I was listening to a group coding session in lean, and they mentioned a counter example generator. Does Lean have such a thing ? </p>\n<p>Related to this, I'm going through the \"Theorem Proving in Lean 4 \" book. I'm doing the exercise of proving that (¬¬P → P) allows proving (p ∨ ¬p). I was stuck, to I checked online and there was suggestion of proving ((a ∨ (a → c)) → c) → c (and then just setting c to False), but it isn't obvious to me the previous statement is true, so I thought about the counter example generator.</p>",
        "id": 345203304,
        "sender_full_name": "Miguel Negrão",
        "timestamp": 1680026093
    },
    {
        "content": "<p>In Lean 3, we have <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#slim_check\">tactic#slim_check</a> but it isn't very powerful. I find it most useful for things like integer division/remainder, where the machine is less confused than you are.</p>",
        "id": 345203959,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1680026280
    },
    {
        "content": "<p>Slim check is the counterexample generator in both lean 3 and lean 4. The Lean 4 version is still under development and only a couple of days ago a frontend was added for it in <a href=\"https://github.com/leanprover-community/mathlib4/pull/3114\">!4#3114</a>. Why not try your example on that PR, it should support props fine</p>",
        "id": 345204080,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1680026309
    },
    {
        "content": "<p>For tautologies, the easy way is to use <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#tauto\">tactic#tauto</a>, which is complete for propositional logic.</p>",
        "id": 345204188,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1680026346
    },
    {
        "content": "<p>Your specific tautologies here don't hold intuitionistically, but if they did <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#itauto\">tactic#itauto</a> would know about it.</p>",
        "id": 345204494,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1680026431
    },
    {
        "content": "<p>tauto finishes the goal so it seems to be a valid intuitionistic tautology ?</p>",
        "id": 345205370,
        "sender_full_name": "Miguel Negrão",
        "timestamp": 1680026672
    },
    {
        "content": "<p>#print gives this</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">taut1</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">c</span> <span class=\"o\">:=</span>\n<span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"n\">c</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"n\">let_fun</span> <span class=\"n\">em</span> <span class=\"o\">:=</span> <span class=\"n\">Classical.propDecidable</span><span class=\"bp\">;</span>\n  <span class=\"k\">fun</span> <span class=\"n\">a_1</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"n\">Or.casesOn</span> <span class=\"o\">(</span><span class=\"n\">Decidable.not_or_of_imp</span> <span class=\"n\">a_1</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"n\">And.casesOn</span> <span class=\"o\">(</span><span class=\"n\">Iff.mp</span> <span class=\"n\">not_or</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"k\">fun</span> <span class=\"n\">left</span> <span class=\"n\">right</span> <span class=\"bp\">=&gt;</span>\n        <span class=\"n\">And.casesOn</span> <span class=\"o\">(</span><span class=\"n\">Iff.mp</span> <span class=\"n\">Decidable.not_imp</span> <span class=\"n\">right</span><span class=\"o\">)</span> <span class=\"k\">fun</span> <span class=\"n\">left_1</span> <span class=\"n\">right</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">absurd</span> <span class=\"n\">left_1</span> <span class=\"n\">left</span><span class=\"o\">)</span>\n    <span class=\"k\">fun</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">h</span>\n</code></pre></div>",
        "id": 345205596,
        "sender_full_name": "Miguel Negrão",
        "timestamp": 1680026740
    },
    {
        "content": "<p>Tauto finishing but itauto  not means it is not valid intuitionistically</p>",
        "id": 345206388,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1680026981
    },
    {
        "content": "<p>I'm not finding itauto in mathlib4, perhaps it hasn't been ported yet...</p>",
        "id": 345206752,
        "sender_full_name": "Miguel Negrão",
        "timestamp": 1680027110
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"127136\">Alex J. Best</span> <a href=\"#narrow/stream/113489-new-members/topic/counterexample.20generator/near/345204080\">disse</a>:</p>\n<blockquote>\n<p>Slim check is the counterexample generator in both lean 3 and lean 4. The Lean 4 version is still under development and only a couple of days ago a frontend was added for it in <a href=\"https://github.com/leanprover-community/mathlib4/pull/3114\">!4#3114</a>. Why not try your example on that PR, it should support props fine</p>\n</blockquote>\n<p>to use this feature I would cd into <code>lake_packages/mathlib</code> and checkout the corresponding git branch ?</p>",
        "id": 345207303,
        "sender_full_name": "Miguel Negrão",
        "timestamp": 1680027299
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"583642\">Miguel Negrão</span> <a href=\"#narrow/stream/113489-new-members/topic/counterexample.20generator/near/345206752\">said</a>:</p>\n<blockquote>\n<p>I'm not finding itauto in mathlib4, perhaps it hasn't been ported yet...</p>\n</blockquote>\n<p>I found <code>tauto</code> but not <code>itauto</code> in Mathlib4.</p>",
        "id": 345207903,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1680027465
    },
    {
        "content": "<p>Yes, the code above was done using tauto on mathlib4 / lean 4</p>",
        "id": 345208070,
        "sender_full_name": "Miguel Negrão",
        "timestamp": 1680027497
    },
    {
        "content": "<p>Given<br>\n<a href=\"https://github.com/leanprover-community/mathlib4/blob/206db646c58fe0e8fd96735f1b55e1b8a5f3e287/Mathlib/Tactic/Tauto.lean#L204\">https://github.com/leanprover-community/mathlib4/blob/206db646c58fe0e8fd96735f1b55e1b8a5f3e287/Mathlib/Tactic/Tauto.lean#L204</a><br>\ncan I still treat Mathlib4's <code>tauto</code> as an equivalent of Mathlib3's <code>tauto</code> for the purpose of my lean3-to-lean4 refence sheet?</p>",
        "id": 345209064,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1680027821
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"127136\">Alex J. Best</span> <a href=\"#narrow/stream/113489-new-members/topic/counterexample.20generator/near/345206388\">said</a>:</p>\n<blockquote>\n<p>Tauto finishing but itauto  not means it is not valid intuitionistically</p>\n</blockquote>\n<p>Is this really true? I thought that there were bugs which made this not true. Or do the bugs work in the other direction? (perhaps <code>itauto</code> accidentally solved some not-intuitionistically valid goals or something?)</p>",
        "id": 345209681,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1680028015
    },
    {
        "content": "<p>Tried slim_check, but no luck:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">taut1</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">):</span> <span class=\"o\">((</span><span class=\"n\">a</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">c</span><span class=\"o\">))</span> <span class=\"bp\">→</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">slim_check</span>\n\n\n<span class=\"n\">Failed</span> <span class=\"n\">to</span> <span class=\"n\">create</span> <span class=\"n\">a</span> <span class=\"bp\">`</span><span class=\"n\">testable</span><span class=\"bp\">`</span> <span class=\"kd\">instance</span> <span class=\"n\">for</span> <span class=\"bp\">`∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">c</span><span class=\"bp\">`.</span>\n<span class=\"n\">What</span> <span class=\"n\">to</span> <span class=\"k\">do</span><span class=\"o\">:</span>\n<span class=\"mi\">1</span><span class=\"bp\">.</span> <span class=\"n\">make</span> <span class=\"n\">sure</span> <span class=\"n\">that</span> <span class=\"n\">the</span> <span class=\"n\">types</span> <span class=\"n\">you</span> <span class=\"n\">are</span> <span class=\"n\">using</span> <span class=\"k\">have</span> <span class=\"bp\">`</span><span class=\"n\">SlimCheck.SampleableExt</span><span class=\"bp\">`</span> <span class=\"n\">instances</span>\n   <span class=\"o\">(</span><span class=\"n\">you</span> <span class=\"n\">can</span> <span class=\"n\">use</span> <span class=\"bp\">`#</span><span class=\"n\">sample</span> <span class=\"n\">my_type</span><span class=\"bp\">`</span> <span class=\"k\">if</span> <span class=\"n\">you</span> <span class=\"n\">are</span> <span class=\"n\">unsure</span><span class=\"o\">)</span><span class=\"bp\">;</span>\n<span class=\"mi\">2</span><span class=\"bp\">.</span> <span class=\"n\">make</span> <span class=\"n\">sure</span> <span class=\"n\">that</span> <span class=\"n\">the</span> <span class=\"n\">relations</span> <span class=\"n\">and</span> <span class=\"n\">predicates</span> <span class=\"n\">that</span> <span class=\"n\">your</span> <span class=\"n\">proposition</span> <span class=\"n\">use</span> <span class=\"n\">are</span> <span class=\"n\">decidable</span><span class=\"bp\">;</span>\n<span class=\"mi\">3</span><span class=\"bp\">.</span> <span class=\"n\">make</span> <span class=\"n\">sure</span> <span class=\"n\">that</span> <span class=\"n\">instances</span> <span class=\"n\">of</span> <span class=\"bp\">`</span><span class=\"n\">SlimCheck.Testable</span><span class=\"bp\">`</span> <span class=\"n\">exist</span> <span class=\"n\">that</span><span class=\"o\">,</span> <span class=\"n\">when</span> <span class=\"n\">combined</span><span class=\"o\">,</span>\n   <span class=\"n\">apply</span> <span class=\"n\">to</span> <span class=\"n\">your</span> <span class=\"n\">decorated</span> <span class=\"n\">proposition</span><span class=\"o\">:</span>\n</code></pre></div>\n<p>But my types are very generic, they are just Props...</p>",
        "id": 345210979,
        "sender_full_name": "Miguel Negrão",
        "timestamp": 1680028439
    },
    {
        "content": "<p>It might just be that I didnt write instances for them when I ported SlimCheck</p>",
        "id": 345211195,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1680028498
    },
    {
        "content": "<p>in general I didnt port all the instances since SlimCheck required more of a rewrite than a port and writing properly verified instances is..annoying, especially when it comes to verification of result minimization</p>",
        "id": 345211287,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1680028528
    },
    {
        "content": "<p>Being a newbie I still don't know anything about Decidables... does the proof above synthesized by tauto look like it has classical logic stuff ?</p>",
        "id": 345211617,
        "sender_full_name": "Miguel Negrão",
        "timestamp": 1680028654
    },
    {
        "content": "<p>Yes as soon as you have something from the <code>Classical</code> namespace it uses classical logic</p>",
        "id": 345211764,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1680028692
    },
    {
        "content": "<p>Also, can you try adding <code>[Decidable a]</code> and <code>[Decidable c]</code> ? SlimCheck only results to testing properties by cases if they are decidable</p>",
        "id": 345212017,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1680028764
    },
    {
        "content": "<p>Actually, I re-reading the line in the book I'm not sure If I'm allowed to use anything in Classical beyond dne or not, but I would assume not, since most things in classical are perhaps proved from em, and I can't assume those either, but just use dne ? </p>\n<blockquote>\n<p>Double-negation elimination allows one to prove any proposition, p, by assuming ¬p and deriving false, because that amounts to proving ¬¬p. &gt; In other words, double-negation elimination allows one to carry out a proof by contradiction, something which is not generally possible in constructive logic. As an exercise, you might try proving the converse, that is, showing that em can be proved from dne.</p>\n</blockquote>",
        "id": 345213055,
        "sender_full_name": "Miguel Negrão",
        "timestamp": 1680029110
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"395550\">Henrik Böving</span> <a href=\"#narrow/stream/113489-new-members/topic/counterexample.20generator/near/345212017\">disse</a>:</p>\n<blockquote>\n<p>Also, can you try adding <code>[Decidable a]</code> and <code>[Decidable c]</code> ? SlimCheck only results to testing properties by cases if they are decidable</p>\n</blockquote>\n<p>still no luck with those instances</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">taut1</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Decidable</span> <span class=\"n\">a</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Decidable</span> <span class=\"n\">c</span><span class=\"o\">]:</span> <span class=\"o\">((</span><span class=\"n\">a</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">c</span><span class=\"o\">))</span> <span class=\"bp\">→</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">slim_check</span>\n</code></pre></div>",
        "id": 345213366,
        "sender_full_name": "Miguel Negrão",
        "timestamp": 1680029220
    },
    {
        "content": "<p>in that case I'm guessing it does not reinterpret the implication as a disjunction.</p>",
        "id": 345215055,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1680029744
    },
    {
        "content": "<p>tauto, itauto, and slim_check all seem very cool. Thanks all for the info.</p>",
        "id": 345216958,
        "sender_full_name": "Miguel Negrão",
        "timestamp": 1680030261
    },
    {
        "content": "<p>Miguel, I'm not sure that <code>((a ∨ (a → c)) → c) → c</code> advice is very good. It sounds rather distracting to me. The only thing you should really keep in mind is that <code>¬p</code> means <code>p → False</code>.</p>",
        "id": 345219935,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1680031116
    },
    {
        "content": "<p>And indeed the exercise is to prove <code>em</code> from <code>dne</code> without using anything else that this definition of negation and the two constructors for <code>Or</code>. So your file should look like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">dne</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">¬¬</span><span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"o\">:=</span>\n  <span class=\"n\">Or.elim</span> <span class=\"o\">(</span><span class=\"n\">Classical.em</span> <span class=\"n\">p</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">hp</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">hnp</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">p</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">absurd</span> <span class=\"n\">hnp</span> <span class=\"n\">h</span><span class=\"o\">)</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">em</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"bp\">¬</span><span class=\"n\">p</span> <span class=\"o\">:=</span>\n  <span class=\"n\">dne</span> <span class=\"n\">_</span>\n</code></pre></div>\n<p>and you need to replace the <code>_</code> by some proof of <code>¬¬(p ∨ ¬p)</code>.</p>",
        "id": 345220459,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1680031230
    },
    {
        "content": "<p>and this proof should contain only <code>(fun ... =&gt; ...)</code>, <code>Or.inl</code> and <code>Or.inr</code>.</p>",
        "id": 345220631,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1680031280
    },
    {
        "content": "<p>and parentheses (or <code>&lt;|</code> if you know what that means).</p>",
        "id": 345220778,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1680031314
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> for putting me on the right track, and clarifying the exercise. I will keep trying. <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 345234538,
        "sender_full_name": "Miguel Negrão",
        "timestamp": 1680034762
    },
    {
        "content": "<p>I managed to do it using only not_or besides dne ... is that cheating ? <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span> </p>\n<div class=\"codehilite\"><pre><span></span><code>not_or {p q : Prop} : ¬(p ∨ q) ↔ ¬p ∧ ¬q\n</code></pre></div>",
        "id": 345238752,
        "sender_full_name": "Miguel Negrão",
        "timestamp": 1680036463
    },
    {
        "content": "<p>Is this Lean 4?</p>",
        "id": 345238948,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1680036540
    },
    {
        "content": "<p>Yes</p>",
        "id": 345238999,
        "sender_full_name": "Miguel Negrão",
        "timestamp": 1680036558
    },
    {
        "content": "<p>I mean, where's your proof of <code>not_or</code>?</p>",
        "id": 345239917,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1680036916
    },
    {
        "content": "<p><code>not_or</code> is fine to use. It holds intuitionistically.</p>",
        "id": 345241645,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1680037574
    },
    {
        "content": "<p>Oh, I hadn't read the preceding posts</p>",
        "id": 345242149,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1680037807
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/113489-new-members/topic/counterexample.20generator/near/345241645\">disse</a>:</p>\n<blockquote>\n<p><code>not_or</code> is fine to use. It holds intuitionistically.</p>\n</blockquote>\n<p>Cool, then it was actually pretty easy once I understood the trick. Thanks all !</p>",
        "id": 345242387,
        "sender_full_name": "Miguel Negrão",
        "timestamp": 1680037922
    },
    {
        "content": "<p>I would argue that using <code>not_or</code> is a lot less direct and probably not the intended solution.</p>",
        "id": 345246620,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1680039699
    },
    {
        "content": "<p>Indeed this still holds intuitionistically but somehow this becomes another exercise.</p>",
        "id": 345246711,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1680039729
    },
    {
        "content": "<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>proof spoiler</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<p><code>theorem dne2em {p : Prop} : p ∨ ¬p := \n  Classical.byContradiction\n    (fun h1 : ¬(p ∨ ¬p) =&gt;\n      show False from Classical.byCases\n    (fun h2 : p =&gt; absurd (Or.inl h2) h1)\n    (fun h2 : ¬p =&gt; absurd (Or.inr h2) h1))\n</code></p>\n</div></div>",
        "id": 345249059,
        "sender_full_name": "Newell Jensen",
        "timestamp": 1680040755
    },
    {
        "content": "<p>Probably other ways of doing it where you can use <code>dne</code> explicitly.</p>",
        "id": 345249384,
        "sender_full_name": "Newell Jensen",
        "timestamp": 1680040884
    },
    {
        "content": "<p>Newell, your proof of EM uses EM <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 345250176,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1680041222
    },
    {
        "content": "<p>I don't call <code>Classical.em</code> directly though.   <code>em</code> and <code>dne</code> are intimately tied to contradiction.  I suppose there is a better way to call <code>dne</code> explicitly.</p>",
        "id": 345250664,
        "sender_full_name": "Newell Jensen",
        "timestamp": 1680041449
    },
    {
        "content": "<p>Unless of course I am missing something under the hood where <code>em</code> is being used that I am unaware of.  Would love to be corrected.</p>",
        "id": 345250731,
        "sender_full_name": "Newell Jensen",
        "timestamp": 1680041486
    },
    {
        "content": "<p>Definitely similar to proof of <code>em</code> though so yeah, see your point.  Best way, at least as far as the exercise is concerned, is to probably use <code>dne</code> explicitly.</p>",
        "id": 345251582,
        "sender_full_name": "Newell Jensen",
        "timestamp": 1680041881
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 345252844,
        "sender_full_name": "Newell Jensen",
        "timestamp": 1680042411
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span> how about this one?</p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>Using DNE</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<p><code>\ntheorem dne2em' {p : Prop} : p ∨ ¬p := \n  dne\n    (fun h1 : ¬(p ∨ ¬p) =&gt;\n      show False from Classical.byCases\n    (fun h2 : p =&gt; absurd (Or.inl h2) h1)\n    (fun h2 : ¬p =&gt; absurd (Or.inr h2) h1))\n</code></p>\n</div></div>",
        "id": 345253776,
        "sender_full_name": "Newell Jensen",
        "timestamp": 1680042786
    },
    {
        "content": "<p><code>Classical.byCases</code> is EM again.</p>",
        "id": 345254118,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1680042933
    },
    {
        "content": "<p>Ah okay,  thanks.</p>",
        "id": 345254259,
        "sender_full_name": "Newell Jensen",
        "timestamp": 1680042989
    },
    {
        "content": "<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>Actual solution</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">axiom</span> <span class=\"n\">dne</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"bp\">¬¬</span><span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">p</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">excluded_middle</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"bp\">¬</span> <span class=\"n\">p</span> <span class=\"o\">:=</span>\n<span class=\"n\">dne</span> <span class=\"n\">_</span> <span class=\"bp\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">hp</span> <span class=\"bp\">↦</span> <span class=\"n\">hp</span> <span class=\"bp\">$</span> <span class=\"n\">Or.inl</span> <span class=\"bp\">$</span> <span class=\"n\">dne</span> <span class=\"n\">_</span> <span class=\"bp\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">hp'</span> <span class=\"bp\">↦</span> <span class=\"n\">hp</span> <span class=\"bp\">$</span> <span class=\"n\">Or.inr</span> <span class=\"n\">hp'</span>\n\n<span class=\"c1\">-- I didn't cheat</span>\n<span class=\"k\">#print</span> <span class=\"kd\">axioms</span> <span class=\"n\">excluded_middle</span>\n<span class=\"c1\">-- 'excluded_middle' depends on axioms: [dne]</span>\n</code></pre></div>\n</div></div>",
        "id": 345257172,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1680044203
    },
    {
        "content": "<p>For both attempts I had these were the axioms used:<br>\n<code>'dne2em' depends on axioms: [Classical.choice, Quot.sound, propext]</code></p>\n<p>Obviously didn't rely on <code>dne</code> like yours <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 345258892,
        "sender_full_name": "Newell Jensen",
        "timestamp": 1680044949
    },
    {
        "content": "<p>BTW <span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span> you can quote code in a spoiler block by enclosing it in four backticks</p>",
        "id": 345259338,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1680045169
    },
    {
        "content": "<p>Whoops, I forgot it wasn't doing both at once.</p>",
        "id": 345259453,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1680045238
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"443984\">Newell Jensen</span> <a href=\"#narrow/stream/113489-new-members/topic/counterexample.20generator/near/345258892\">said</a>:</p>\n<blockquote>\n<p>For both attempts I had these were the axioms used:<br>\n<code>'dne2em' depends on axioms: [Classical.choice, Quot.sound, propext]</code></p>\n<p>Obviously didn't rely on <code>dne</code> like yours <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>\n</blockquote>\n<p>The first one genuinely didn't use <code>dne</code>. The second one did. It didn't show up as an axiom used because you didn't make it an axiom!</p>",
        "id": 345259654,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1680045332
    },
    {
        "content": "<p>The reason I made <code>dne</code> an axiom in my code snippet was so that I could list the axioms used.</p>",
        "id": 345259695,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1680045360
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/counterexample.20generator/near/345259338\">said</a>:</p>\n<blockquote>\n<p>BTW <span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> you can quote code in a spoiler block by enclosing it in four backticks</p>\n</blockquote>\n<p>You have to specify <code> ```lean ``` </code> manually there</p>",
        "id": 345270590,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1680051250
    },
    {
        "content": "<p>Yaël, your solution is slightly convoluted, you can use</p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">dne</span> <span class=\"bp\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">h</span> <span class=\"bp\">↦</span> <span class=\"n\">h</span> <span class=\"bp\">$</span> <span class=\"n\">Or.inr</span> <span class=\"bp\">λ</span> <span class=\"n\">hp</span> <span class=\"bp\">↦</span> <span class=\"n\">h</span> <span class=\"bp\">$</span> <span class=\"n\">Or.inl</span> <span class=\"n\">hp</span>\n</code></pre></div>\n</div></div>",
        "id": 345314794,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1680074711
    },
    {
        "content": "<p>There is no need to use <code>dne</code> twice.</p>",
        "id": 345314844,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1680074729
    },
    {
        "content": "<p>My solution with not_or was</p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Std.Logic</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">dne</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">¬¬</span><span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"o\">:=</span>\n  <span class=\"n\">Or.elim</span> <span class=\"o\">(</span><span class=\"n\">Classical.em</span> <span class=\"n\">p</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">hp</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">hnp</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">p</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">absurd</span> <span class=\"n\">hnp</span> <span class=\"n\">h</span><span class=\"o\">)</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">em</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"bp\">¬</span><span class=\"n\">p</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">¬¬</span><span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"bp\">¬</span><span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">let</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"bp\">¬¬</span><span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"n\">not_or.mp</span> <span class=\"n\">h</span>\n    <span class=\"n\">x.left</span> <span class=\"o\">(</span><span class=\"n\">dne</span> <span class=\"n\">x.right</span><span class=\"o\">)</span>\n  <span class=\"n\">dne</span> <span class=\"n\">h</span>\n</code></pre></div>\n</div></div>\n<p>I will try again without not_or <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 345328806,
        "sender_full_name": "Miguel Negrão",
        "timestamp": 1680078692
    },
    {
        "content": "<p>Ah yep, makes sense. I knew I could use dne only on propositions of the form <code>p or not p</code> but my solution didn't have that</p>",
        "id": 345340462,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1680081544
    },
    {
        "content": "<p>ah, got it finally. Once you realize the answer it is truly simple... nice puzzle. It is essentially not_or together with absurd, I think, if one wanted to use less \"low-level\" approach.</p>",
        "id": 345412195,
        "sender_full_name": "Miguel Negrão",
        "timestamp": 1680098721
    },
    {
        "content": "<p>One question: looking at how ˋabsurdˋ is implemented, it uses ˋFalse.recˋ, but False is an inductive type with no constructors. What is ˋrecˋ in ˋFalse.recˋ and how is it implemented ? It's bit misterious to me how using this rec we get a proof of anything...</p>",
        "id": 345636130,
        "sender_full_name": "Miguel Negrão",
        "timestamp": 1680174574
    },
    {
        "content": "<p>Do you know about the <a href=\"https://en.wikipedia.org/wiki/Principle_of_explosion\">principle of explosion</a>?</p>",
        "id": 345636582,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1680174684
    },
    {
        "content": "<p>As a general logical principle, yes, but I'm not yet getting how it is implemented in Lean/CIC.</p>",
        "id": 345647052,
        "sender_full_name": "Miguel Negrão",
        "timestamp": 1680177186
    },
    {
        "content": "<p>If we search the documentation for <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=False.rec#doc\">docs4#False.rec</a> we see nothing, because recursion principles like <code>False.rec</code> are not defined directly: they are generated by the (are axioms of) the type theory itself. The general form for such recursion principles on an inductive type <code>T</code> is: to define <code>f : (t : T) → C t</code>, it suffices to define <code>f</code> on each constructor of the type <code>T</code>. There is no way to prove <code>False</code>, so to define <code>f : (t : False) → C t</code>, it suffices to define it on all 0 constructors, i.e. there is always such an <code>f</code>. This is basically what <code>False.rec</code> encodes.</p>",
        "id": 345648924,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1680177540
    },
    {
        "content": "<p>In the code generator <code>False.rec</code> is just a panic or undefined behavior or something, since there is supposed to be no way that one could ever pass it an argument <code>h : False</code> in the first place.</p>",
        "id": 345650080,
        "sender_full_name": "Reid Barton",
        "timestamp": 1680177767
    },
    {
        "content": "<p>It depends on the flavour of type theory how recursors are implemented precisely. I described is the situation in Lean, where recursors are primitive. In Coq I understand there are two primitives: case distinction (like <code>match</code>) and fixpoints (allowing a function to call itself, if it is well-defined), and <code>False.rec</code> would be implemented in terms of those two primitives.</p>",
        "id": 345650106,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1680177773
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"583642\">Miguel Negrão</span> has marked this topic as resolved.</p>",
        "id": 345920542,
        "sender_full_name": "Notification Bot",
        "timestamp": 1680263012
    }
]