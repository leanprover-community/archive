[
    {
        "content": "<p>Hello all! I am still relatively new to lean and I was wondering if there were any cheat/exercise sheets to get more practice for convergence using filters.</p>\n<p>I am referring to simple limits like:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">tendsto</span> <span class=\"o\">(</span><span class=\"bp\">Œª</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñï</span><span class=\"o\">,</span>  <span class=\"n\">real.exp</span><span class=\"o\">((</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñù</span><span class=\"o\">)</span><span class=\"bp\">‚Åª¬π</span><span class=\"o\">))</span> <span class=\"n\">at_top</span> <span class=\"o\">(</span><span class=\"bp\">ùìù</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n</code></pre></div>\n<p>Ultimately, my goal is to learn how to handle convergence arguments  efficiently because at the moment I am rewriting everything with tendsto_def and I don't think that's the way to go.<br>\nI imagine I could prove these kind of limits using continuity + (n : ‚Ñù)‚Åª¬π at_top (ùìù 0) but I don't know how.</p>\n<p>Thanks!</p>",
        "id": 323588666,
        "sender_full_name": "Xavier G√©n√©reux",
        "timestamp": 1674682392
    },
    {
        "content": "<p>Your intuition is correct. Here are the pieces you should need: <a href=\"https://leanprover-community.github.io/mathlib_docs/find/real.continuous_exp\">docs#real.continuous_exp</a>, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/continuous.tendsto\">docs#continuous.tendsto</a>, and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/tendsto_inverse_at_top_nhds_0_nat\">docs#tendsto_inverse_at_top_nhds_0_nat</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/real.exp_zero\">docs#real.exp_zero</a>. Can you put the pieces together?</p>",
        "id": 323589670,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1674682769
    },
    {
        "content": "<p>You should find something relevant <a href=\"https://leanprover-community.github.io/mathematics_in_lean/07_Topology.html\">here</a>.</p>",
        "id": 323590498,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1674683114
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"197836\">Jireh Loreaux</span> <a href=\"#narrow/stream/113489-new-members/topic/convergence.20using.20filters/near/323589670\">said</a>:</p>\n<blockquote>\n<p>Your intuition is correct. Here are the pieces you should need: <a href=\"https://leanprover-community.github.io/mathlib_docs/find/real.continuous_exp\">docs#real.continuous_exp</a>, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/continuous.tendsto\">docs#continuous.tendsto</a>, and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/tendsto_inverse_at_top_nhds_0_nat\">docs#tendsto_inverse_at_top_nhds_0_nat</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/real.exp_zero\">docs#real.exp_zero</a>. Can you put the pieces together?</p>\n</blockquote>\n<p>Thank you!</p>",
        "id": 323591675,
        "sender_full_name": "Xavier G√©n√©reux",
        "timestamp": 1674683571
    },
    {
        "content": "<p>I naively replicated the proof in analysis.specific_limits.basic and it seems to work!</p>",
        "id": 323591827,
        "sender_full_name": "Xavier G√©n√©reux",
        "timestamp": 1674683633
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"197836\">@Jireh Loreaux</span> <br>\nWas this what you had in mind?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">begin</span>\n<span class=\"kd\">by</span> <span class=\"n\">simpa</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">real.exp_zero</span><span class=\"o\">]</span>\n<span class=\"n\">using</span> <span class=\"o\">(</span><span class=\"n\">continuous.tendsto</span> <span class=\"n\">real.continuous_exp</span> <span class=\"mi\">0</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">comp</span> <span class=\"n\">tendsto_inverse_at_top_nhds_0_nat</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 323592004,
        "sender_full_name": "Xavier G√©n√©reux",
        "timestamp": 1674683693
    },
    {
        "content": "<p>Exactly. (sorry, I guess I forgot <a href=\"https://leanprover-community.github.io/mathlib_docs/find/filter.tendsto.comp\">docs#filter.tendsto.comp</a> in my list!)</p>",
        "id": 323592120,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1674683738
    },
    {
        "content": "<p>Great! I was not familiar with the notation with .comp at the end. Is it equivalent to:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">tendsto.comp</span> <span class=\"o\">(</span><span class=\"n\">continuous.tendsto</span> <span class=\"n\">real.continuous_exp</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"n\">tendsto_inverse_at_top_nhds_0_nat</span><span class=\"o\">,</span>\n</code></pre></div>",
        "id": 323592991,
        "sender_full_name": "Xavier G√©n√©reux",
        "timestamp": 1674684073
    },
    {
        "content": "<p>In any case thanks a lot for the tips <span aria-label=\"octopus\" class=\"emoji emoji-1f419\" role=\"img\" title=\"octopus\">:octopus:</span></p>",
        "id": 323593044,
        "sender_full_name": "Xavier G√©n√©reux",
        "timestamp": 1674684099
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"557459\">Xavier G√©n√©reux</span> has marked this topic as resolved.</p>",
        "id": 323593065,
        "sender_full_name": "Notification Bot",
        "timestamp": 1674684104
    },
    {
        "content": "<p>Yes, that notation is sometimes called \"dot notation\" or \"generalized field notation\". The way it works is this. Suppose you have <code>foo : Type</code> and <code>foo.bar : foo ‚Üí sometype</code> then for <code>baz : foo</code>, we can write <code>baz.bar</code> instead of <code>foo.bar baz</code>. There's maybe a few more details that we could get into, but this is the gist.</p>",
        "id": 323594243,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1674684571
    },
    {
        "content": "<p>So in particular you can golf your proof a bit. Using dot notation twice (and term mode rewrite instead of tactic mode simp):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">tendsto</span> <span class=\"o\">(</span><span class=\"bp\">Œª</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñï</span><span class=\"o\">,</span>  <span class=\"n\">real.exp</span><span class=\"o\">((</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñù</span><span class=\"o\">)</span><span class=\"bp\">‚Åª¬π</span><span class=\"o\">))</span> <span class=\"n\">at_top</span> <span class=\"o\">(</span><span class=\"bp\">ùìù</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">real.exp_zero</span> <span class=\"bp\">‚ñ∏</span> <span class=\"o\">(</span><span class=\"n\">real.continuous_exp.tendsto</span> <span class=\"mi\">0</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">comp</span> <span class=\"n\">tendsto_inverse_at_top_nhds_0_nat</span>\n</code></pre></div>",
        "id": 323594536,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1674684707
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"197836\">Jireh Loreaux</span> <a href=\"#narrow/stream/113489-new-members/topic/.E2.9C.94.20convergence.20using.20filters/near/323594243\">said</a>:</p>\n<blockquote>\n<p>Yes, that notation is sometimes called \"dot notation\" or \"generalized field notation\". The way it works is this. Suppose you have <code>foo : Type</code> and <code>foo.bar : foo ‚Üí sometype</code> then for <code>baz : foo</code>, we can write <code>baz.bar</code> instead of <code>foo.bar baz</code>. There's maybe a few more details that we could get into, but this is the gist.</p>\n</blockquote>\n<p>Ah good to know! I'll check it out, there seems to be an overview in <a href=\"https://leanprover.github.io/theorem_proving_in_lean/structures_and_records.html\">Theorem Proving in Lean </a>.</p>",
        "id": 323599712,
        "sender_full_name": "Xavier G√©n√©reux",
        "timestamp": 1674687096
    }
]