[
    {
        "content": "<p>I'm working through the exercises in TIPL and am having trouble with some of the exercises</p>\n<p><a href=\"https://github.com/leanprover-community/mathlib/issues/3\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/issues/3\">#3</a>.1 </p>\n<p>Q1:I'm getting an error on the or.elim in the following code. Lean is saying that it's expecting a type  p∨q but is getting type q∨p. </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">q</span> <span class=\"bp\">↔</span> <span class=\"n\">q</span> <span class=\"bp\">∨</span> <span class=\"n\">p</span> <span class=\"o\">:=</span>\n  <span class=\"n\">iff</span><span class=\"bp\">.</span><span class=\"n\">intro</span> <span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">q</span><span class=\"o\">,</span> <span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">elim</span> <span class=\"n\">h</span>\n    <span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"k\">show</span> <span class=\"n\">q</span> <span class=\"bp\">∨</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">intro_right</span> <span class=\"n\">q</span> <span class=\"n\">hp</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"n\">hq</span> <span class=\"o\">:</span> <span class=\"n\">q</span><span class=\"o\">,</span> <span class=\"k\">show</span> <span class=\"n\">q</span> <span class=\"bp\">∨</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">intro_left</span> <span class=\"n\">p</span> <span class=\"n\">hq</span><span class=\"o\">))</span>\n  <span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">q</span> <span class=\"bp\">∨</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">elim</span> <span class=\"n\">h2</span>\n    <span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"n\">hq</span> <span class=\"o\">:</span> <span class=\"n\">q</span><span class=\"o\">,</span> <span class=\"k\">show</span> <span class=\"n\">q</span> <span class=\"bp\">∨</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">intro_left</span> <span class=\"n\">p</span> <span class=\"n\">hq</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"k\">show</span> <span class=\"n\">q</span> <span class=\"bp\">∨</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">intro_right</span> <span class=\"n\">q</span> <span class=\"n\">hp</span><span class=\"o\">))</span>\n</pre></div>\n\n\n<p>Q2: I'm getting type mismatch errors again for <code>show</code> and <code>or.intro</code> in the last line of this exercise. </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"n\">r</span> <span class=\"bp\">↔</span> <span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"bp\">∨</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">iff</span><span class=\"bp\">.</span><span class=\"n\">intro</span>\n    <span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">elim</span> <span class=\"n\">h</span>\n      <span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"n\">hpq</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">q</span><span class=\"o\">,</span> <span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">elim</span> <span class=\"n\">hpq</span>\n        <span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"k\">show</span> <span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"bp\">∨</span> <span class=\"n\">r</span><span class=\"o\">),</span> <span class=\"k\">from</span> <span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">intro_left</span> <span class=\"n\">p</span> <span class=\"n\">hp</span><span class=\"o\">)))</span>\n</pre></div>",
        "id": 189827803,
        "sender_full_name": "Rocky Kamen-Rubio",
        "timestamp": 1583436788
    },
    {
        "content": "<p>Q1: the error is indeed expected. Do you know what the second input to the <code>iff.intro</code> is supposed to be a proof of? And can you see what you're proving?</p>",
        "id": 189829479,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1583437822
    },
    {
        "content": "<p>Q2: your term is not really complete so it's not surprising you have errors. Why not put in some <code>_</code>s or <code>sorry</code>s to make the term compile?</p>",
        "id": 189829539,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1583437873
    },
    {
        "content": "<p>But honestly these \"verbose mode\" things are hell to debug. Why not use full term mode or full tactic mode?</p>",
        "id": 189829579,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1583437915
    },
    {
        "content": "<p>For Q2 the full errors tell you exactly what you are doing wrong. Lean tells you exactly what it expects you to be proving and what you are proving.</p>",
        "id": 189829696,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1583437984
    },
    {
        "content": "<p>The <code>show</code> is fine, Lean is just confused by the fact that you made an error later. Can you understand the error message?</p>",
        "id": 189830145,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1583438291
    },
    {
        "content": "<p>Q1: I thought the second input to iff.intro was just in the \"other direction\", so wouldn't it work essentially the same as the first input but with the p and q reversed?</p>\n<p>Q2: You're right, I missed a whole chunk of code when I copied it over. Here is the full proof. The errors still hold though</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"n\">r</span> <span class=\"bp\">↔</span> <span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"bp\">∨</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">iff</span><span class=\"bp\">.</span><span class=\"n\">intro</span>\n    <span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">elim</span> <span class=\"n\">h</span>\n      <span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"n\">hpq</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">q</span><span class=\"o\">,</span> <span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">elim</span> <span class=\"n\">hpq</span>\n        <span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"k\">show</span> <span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"bp\">∨</span> <span class=\"n\">r</span><span class=\"o\">),</span> <span class=\"k\">from</span> <span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">intro_left</span> <span class=\"n\">p</span> <span class=\"n\">hp</span><span class=\"o\">)</span>\n        <span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"n\">hq</span> <span class=\"o\">:</span> <span class=\"n\">q</span><span class=\"o\">,</span> <span class=\"k\">show</span> <span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"bp\">∨</span> <span class=\"n\">r</span><span class=\"o\">),</span> <span class=\"k\">from</span> <span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">intro_right</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"bp\">∨</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">intro_left</span> <span class=\"n\">q</span> <span class=\"n\">hq</span><span class=\"o\">)))</span>\n      <span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"n\">hr</span> <span class=\"o\">:</span> <span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"k\">show</span> <span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"bp\">∨</span> <span class=\"n\">r</span><span class=\"o\">),</span> <span class=\"k\">from</span> <span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">intro</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"bp\">∨</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">intro_left</span> <span class=\"n\">r</span> <span class=\"n\">hr</span><span class=\"o\">)))</span>\n    <span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"bp\">∨</span> <span class=\"n\">r</span><span class=\"o\">),</span> <span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">elim</span> <span class=\"n\">h2</span>\n      <span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"k\">show</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">intro_left</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">intro_left</span> <span class=\"n\">p</span> <span class=\"n\">hp</span><span class=\"o\">))</span>\n      <span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"n\">hqr</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"bp\">∨</span> <span class=\"n\">r</span><span class=\"o\">),</span> <span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">elim</span> <span class=\"n\">hqr</span>\n        <span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"n\">hq</span> <span class=\"o\">:</span> <span class=\"n\">q</span><span class=\"o\">,</span> <span class=\"k\">show</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">intro_left</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">intro_right</span> <span class=\"n\">q</span> <span class=\"n\">hq</span><span class=\"o\">))</span>\n        <span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"n\">hr</span> <span class=\"o\">:</span> <span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"k\">show</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">intro_right</span> <span class=\"n\">r</span> <span class=\"n\">hr</span><span class=\"o\">)))</span>\n</pre></div>\n\n\n<p>Do you think it isn't productive to practice these proofs outside of tactic mode? I feel somewhat comfortable with tactic mode, but wanted to fully understand TIPL since I feel like I still don't understand a lot of what's going on in the chat/in other definitions I try to use. .</p>",
        "id": 189830871,
        "sender_full_name": "Rocky Kamen-Rubio",
        "timestamp": 1583438755
    },
    {
        "content": "<p>Q3: I'm getting a term mismatch for the two assume statements I'm passing intro <code>iff.intro</code>. I think I'm misunderstanding how iff.intro works more generally. Any guidance would be appreciated.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"bp\">∨</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">iff</span><span class=\"bp\">.</span><span class=\"n\">intro</span>\n  <span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"bp\">∨</span> <span class=\"n\">r</span><span class=\"o\">),</span>\n  <span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">elim</span> <span class=\"o\">(</span><span class=\"n\">and</span><span class=\"bp\">.</span><span class=\"n\">right</span> <span class=\"n\">h</span><span class=\"o\">),</span>\n    <span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"n\">hq</span> <span class=\"o\">:</span> <span class=\"n\">q</span><span class=\"o\">,</span> <span class=\"k\">show</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"n\">r</span><span class=\"o\">),</span>\n    <span class=\"k\">from</span> <span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">intro_left</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">and</span><span class=\"bp\">.</span><span class=\"n\">intro</span> <span class=\"o\">(</span><span class=\"n\">and</span><span class=\"bp\">.</span><span class=\"n\">left</span> <span class=\"n\">h</span><span class=\"o\">)</span>  <span class=\"n\">hq</span><span class=\"o\">))</span>\n    <span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"n\">hr</span> <span class=\"o\">:</span> <span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"k\">show</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"n\">r</span><span class=\"o\">),</span>\n    <span class=\"k\">from</span> <span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">intro_right</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">and</span><span class=\"bp\">.</span><span class=\"n\">intro</span> <span class=\"o\">(</span><span class=\"n\">and</span><span class=\"bp\">.</span><span class=\"n\">left</span> <span class=\"n\">h</span><span class=\"o\">)</span>  <span class=\"n\">hr</span><span class=\"o\">)))</span>\n  <span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"n\">r</span><span class=\"o\">),</span>\n  <span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">elim</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"n\">hpq</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"n\">q</span><span class=\"o\">,</span> <span class=\"k\">show</span> <span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"bp\">∨</span> <span class=\"n\">r</span><span class=\"o\">),</span>\n    <span class=\"k\">from</span> <span class=\"n\">and</span><span class=\"bp\">.</span><span class=\"n\">intro</span> <span class=\"o\">(</span><span class=\"n\">and</span><span class=\"bp\">.</span><span class=\"n\">left</span> <span class=\"n\">hpq</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">intro_left</span> <span class=\"n\">q</span> <span class=\"o\">(</span><span class=\"n\">and</span><span class=\"bp\">.</span><span class=\"n\">right</span> <span class=\"n\">hpq</span><span class=\"o\">)))</span>\n    <span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"n\">hpr</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"k\">show</span> <span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"bp\">∨</span> <span class=\"n\">r</span><span class=\"o\">),</span>\n    <span class=\"k\">from</span> <span class=\"n\">and</span><span class=\"bp\">.</span><span class=\"n\">intro</span> <span class=\"o\">(</span><span class=\"n\">and</span><span class=\"bp\">.</span><span class=\"n\">left</span> <span class=\"n\">hpr</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">intro_left</span> <span class=\"n\">r</span> <span class=\"o\">(</span><span class=\"n\">and</span><span class=\"bp\">.</span><span class=\"n\">right</span> <span class=\"n\">hpr</span><span class=\"o\">))))</span>\n</pre></div>",
        "id": 189830992,
        "sender_full_name": "Rocky Kamen-Rubio",
        "timestamp": 1583438851
    },
    {
        "content": "<p>I personally have never seen the point of this super-verbose term mode. But others clearly think differently because it's explained in TPIL!</p>",
        "id": 189832715,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1583440058
    },
    {
        "content": "<p>Your Q3 the errors are a real mess and I just look at all this super-verbose term mode and think \"if this was my problem I'd just start again\"</p>",
        "id": 189832846,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1583440145
    },
    {
        "content": "<p>I'm sure it's possible to debug but I don't fancy it</p>",
        "id": 189832880,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1583440170
    },
    {
        "content": "<p>The error</p>\n<div class=\"codehilite\"><pre><span></span>  type mismatch, term\n    (?m_3, ?m_4)\n  has type\n    ?m_1 × ?m_2 : Type (max ? ?)\n  but is expected to have type\n    p ∧ (q ∨ r) → p ∧ q ∨ p ∧ r : Prop\n</pre></div>\n\n\n<p>just indicates that you've got the brackets wrong somewhere.</p>",
        "id": 189833132,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1583440319
    },
    {
        "content": "<p>I would start like this:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"bp\">∨</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">iff</span><span class=\"bp\">.</span><span class=\"n\">intro</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span>\n</pre></div>\n\n\n<p>and I'd just keep checking that the errors were not insane at all stages.</p>",
        "id": 189833269,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1583440385
    },
    {
        "content": "<p>As Kevin says, there's a way to build up proofs of simple logical propositions like this by \"chasing underscores\". I worked through a different example <a href=\"#narrow/stream/113489-new-members/topic/basics/near/185070320\" title=\"#narrow/stream/113489-new-members/topic/basics/near/185070320\">here</a> and in another post linked there.</p>",
        "id": 189833320,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1583440440
    },
    {
        "content": "<p>I resolve Q2. I misread how <code>or.intro</code> is defined. Its first input should be the type of the term NOT being exacted. Fixing this now makes the proof compile successfully. </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"n\">r</span> <span class=\"bp\">↔</span> <span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"bp\">∨</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">iff</span><span class=\"bp\">.</span><span class=\"n\">intro</span>\n    <span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">elim</span> <span class=\"n\">h</span>\n      <span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"n\">hpq</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">q</span><span class=\"o\">,</span> <span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">elim</span> <span class=\"n\">hpq</span>\n        <span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"k\">show</span> <span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"bp\">∨</span> <span class=\"n\">r</span><span class=\"o\">),</span> <span class=\"k\">from</span> <span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">intro_left</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"bp\">∨</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"n\">hp</span><span class=\"o\">)</span>\n        <span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"n\">hq</span> <span class=\"o\">:</span> <span class=\"n\">q</span><span class=\"o\">,</span> <span class=\"k\">show</span> <span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"bp\">∨</span> <span class=\"n\">r</span><span class=\"o\">),</span> <span class=\"k\">from</span> <span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">intro_right</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">intro_left</span> <span class=\"n\">r</span> <span class=\"n\">hq</span><span class=\"o\">)))</span>\n      <span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"n\">hr</span> <span class=\"o\">:</span> <span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"k\">show</span> <span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"bp\">∨</span> <span class=\"n\">r</span><span class=\"o\">),</span> <span class=\"k\">from</span> <span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">intro_right</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">intro_right</span> <span class=\"n\">q</span> <span class=\"n\">hr</span><span class=\"o\">)))</span>\n    <span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"bp\">∨</span> <span class=\"n\">r</span><span class=\"o\">),</span> <span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">elim</span> <span class=\"n\">h2</span>\n      <span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"k\">show</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">intro_left</span> <span class=\"n\">r</span> <span class=\"o\">(</span><span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">intro_left</span> <span class=\"n\">q</span> <span class=\"n\">hp</span><span class=\"o\">))</span>\n      <span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"n\">hqr</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"bp\">∨</span> <span class=\"n\">r</span><span class=\"o\">),</span> <span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">elim</span> <span class=\"n\">hqr</span>\n        <span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"n\">hq</span> <span class=\"o\">:</span> <span class=\"n\">q</span><span class=\"o\">,</span> <span class=\"k\">show</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">intro_left</span> <span class=\"n\">r</span> <span class=\"o\">(</span><span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">intro_right</span> <span class=\"n\">p</span> <span class=\"n\">hq</span><span class=\"o\">))</span>\n        <span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"n\">hr</span> <span class=\"o\">:</span> <span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"k\">show</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">intro_right</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"n\">hr</span><span class=\"o\">)))</span>\n</pre></div>",
        "id": 189834369,
        "sender_full_name": "Rocky Kamen-Rubio",
        "timestamp": 1583441052
    },
    {
        "content": "<p>Q4: I'm confused how to handle an implication in the assumption of another implication, such as <code>example : (((p → q) → p) → p) :=  sorry</code>. I get intuitively that if we can get p out of p implying q, that means that p must always be true because \"p implies q\" doesn't give us p on its own. I don't see how we could translate that into lean though. I was thinking about doing a <code>by_cases</code> since this is in the classical logic section, but I feel like I don't have good tools to work with a variable like <code>((p → q) → p)</code>.</p>",
        "id": 189837526,
        "sender_full_name": "Rocky Kamen-Rubio",
        "timestamp": 1583443116
    },
    {
        "content": "<p>do cases on <code>p</code></p>",
        "id": 189837553,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1583443140
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113489-new-members/topic/TPIL.20Chapter.203.20Exercises/near/189837553\" title=\"#narrow/stream/113489-new-members/topic/TPIL.20Chapter.203.20Exercises/near/189837553\">said</a>:</p>\n<blockquote>\n<p>do cases on <code>p</code></p>\n</blockquote>\n<p>That was my original thought but I keep getting stuck here</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"o\">(((</span><span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">assume</span> <span class=\"n\">hpqp</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">p</span><span class=\"o\">,</span>\n<span class=\"n\">by_cases</span>\n  <span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">hp</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"n\">hnp</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"k\">show</span> <span class=\"bp\">...</span><span class=\"o\">)</span>\n</pre></div>\n\n\n<p>I can't think of a way to use <code>hpqp</code> in a useful way here. I feel like maybe there's a function I'm forgetting.</p>",
        "id": 189837810,
        "sender_full_name": "Rocky Kamen-Rubio",
        "timestamp": 1583443320
    },
    {
        "content": "<p>Prove <code>false</code>, by using the assumption and the implication (which will require you to prove <code>p -&gt; q</code>)</p>",
        "id": 189837926,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1583443376
    },
    {
        "content": "<p>Q3 you have some extraneous commas after applying <code>or.elim</code></p>",
        "id": 189840894,
        "sender_full_name": "Reid Barton",
        "timestamp": 1583445173
    },
    {
        "content": "<p>These term mode proofs require a lot of attention to detail.</p>",
        "id": 189840915,
        "sender_full_name": "Reid Barton",
        "timestamp": 1583445195
    }
]