[
    {
        "content": "<p>Hi everyone. I wrote the following function to merge two sorted arrays and am struggling with the termination proof. The <code>loop</code> function calls <code>choose</code> with smaller arguments, but <code>choose</code> just arranges the arguments to loop; they don’t get any smaller. What’s the correct way to go about this?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">namespace</span> <span class=\"n\">merge_sorted_arrays</span>\n<span class=\"kd\">mutual</span>\n  <span class=\"kd\">def</span> <span class=\"n\">loop</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ar1</span> <span class=\"n\">ar2</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">curr</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span>\n    <span class=\"k\">if</span> <span class=\"n\">hi</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">&lt;</span> <span class=\"n\">ar1.size</span> <span class=\"k\">then</span>\n      <span class=\"k\">if</span> <span class=\"n\">hj</span> <span class=\"o\">:</span> <span class=\"n\">j</span> <span class=\"bp\">&lt;</span> <span class=\"n\">ar2.size</span> <span class=\"k\">then</span>\n        <span class=\"k\">if</span> <span class=\"n\">ar1</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"bp\">≤</span> <span class=\"n\">ar2</span><span class=\"o\">[</span><span class=\"n\">j</span><span class=\"o\">]</span> <span class=\"k\">then</span>\n          <span class=\"n\">choose</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">j</span> <span class=\"n\">ar1</span> <span class=\"n\">ar2</span> <span class=\"o\">(</span><span class=\"n\">curr.push</span> <span class=\"n\">ar1</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">])</span>\n        <span class=\"k\">else</span>\n          <span class=\"n\">choose</span> <span class=\"n\">i</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">ar1</span> <span class=\"n\">ar2</span> <span class=\"o\">(</span><span class=\"n\">curr.push</span> <span class=\"n\">ar2</span><span class=\"o\">[</span><span class=\"n\">j</span><span class=\"o\">])</span>\n      <span class=\"k\">else</span>\n        <span class=\"c1\">-- have : Array.size ar1 + Array.size ar2 - (Array.size curr + 1) &lt; Array.size ar1 + Array.size ar2 - Array.size curr := sorry</span>\n        <span class=\"n\">choose</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">j</span> <span class=\"n\">ar1</span> <span class=\"n\">ar2</span> <span class=\"o\">(</span><span class=\"n\">curr.push</span> <span class=\"n\">ar1</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">])</span>\n    <span class=\"k\">else</span>\n      <span class=\"n\">curr</span>\n  <span class=\"kd\">def</span> <span class=\"n\">choose</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ar1</span> <span class=\"n\">ar2</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">curr</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span>\n    <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">ar2.size</span> <span class=\"bp\">-</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"o\">(</span><span class=\"n\">ar1.size</span> <span class=\"bp\">-</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"k\">then</span>\n      <span class=\"n\">loop</span> <span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"n\">ar1</span> <span class=\"n\">ar2</span> <span class=\"n\">curr</span>\n    <span class=\"k\">else</span>\n      <span class=\"n\">loop</span> <span class=\"n\">j</span> <span class=\"n\">i</span> <span class=\"n\">ar2</span> <span class=\"n\">ar1</span> <span class=\"n\">curr</span>\n<span class=\"kd\">end</span>\n<span class=\"n\">termination_by</span>\n  <span class=\"n\">loop</span> <span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"n\">ar1</span> <span class=\"n\">ar2</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">ar1.size</span> <span class=\"bp\">-</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">ar2.size</span> <span class=\"bp\">-</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"c1\">-- ar1.size + ar2.size - curr.size</span>\n  <span class=\"n\">choose</span> <span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"n\">ar1</span> <span class=\"n\">ar2</span> <span class=\"n\">curr</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">ar1.size</span> <span class=\"bp\">-</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">ar2.size</span> <span class=\"bp\">-</span> <span class=\"n\">j</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 407598494,
        "sender_full_name": "King Crawford",
        "timestamp": 1702428522
    },
    {
        "content": "<p>It’s a good start! But if I add</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">decreasing_by</span>\n  <span class=\"n\">simp_wf</span>\n</code></pre></div>\n<p>to the bottom I see this proof goal:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"mi\">5</span> <span class=\"n\">goals</span>\n<span class=\"n\">ij</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span>\n<span class=\"n\">ar1ar2curr</span><span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">ℕ</span>\n<span class=\"n\">hi</span><span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">&lt;</span> <span class=\"n\">Array.size</span> <span class=\"n\">ar1</span>\n<span class=\"n\">hj</span><span class=\"o\">:</span> <span class=\"n\">j</span> <span class=\"bp\">&lt;</span> <span class=\"n\">Array.size</span> <span class=\"n\">ar2</span>\n<span class=\"n\">h</span><span class=\"bp\">✝</span><span class=\"o\">:</span> <span class=\"n\">ar1</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"bp\">≤</span> <span class=\"n\">ar2</span><span class=\"o\">[</span><span class=\"n\">j</span><span class=\"o\">]</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">Array.size</span> <span class=\"n\">ar1</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"n\">Array.size</span> <span class=\"n\">ar1</span> <span class=\"bp\">-</span> <span class=\"n\">i</span>\n<span class=\"n\">ij</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span>\n<span class=\"n\">ar1ar2curr</span><span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">ℕ</span>\n<span class=\"n\">hi</span><span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">&lt;</span> <span class=\"n\">Array.size</span> <span class=\"n\">ar1</span>\n<span class=\"n\">hj</span><span class=\"o\">:</span> <span class=\"n\">j</span> <span class=\"bp\">&lt;</span> <span class=\"n\">Array.size</span> <span class=\"n\">ar2</span>\n<span class=\"n\">h</span><span class=\"bp\">✝</span><span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">ar1</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"bp\">≤</span> <span class=\"n\">ar2</span><span class=\"o\">[</span><span class=\"n\">j</span><span class=\"o\">]</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">Array.size</span> <span class=\"n\">ar2</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"n\">Array.size</span> <span class=\"n\">ar2</span> <span class=\"bp\">-</span> <span class=\"n\">j</span>\n<span class=\"n\">ij</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span>\n<span class=\"n\">ar1ar2curr</span><span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">ℕ</span>\n<span class=\"n\">hi</span><span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">&lt;</span> <span class=\"n\">Array.size</span> <span class=\"n\">ar1</span>\n<span class=\"n\">hj</span><span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">j</span> <span class=\"bp\">&lt;</span> <span class=\"n\">Array.size</span> <span class=\"n\">ar2</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">Array.size</span> <span class=\"n\">ar1</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"n\">Array.size</span> <span class=\"n\">ar1</span> <span class=\"bp\">-</span> <span class=\"n\">i</span>\n<span class=\"n\">ij</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span>\n<span class=\"n\">ar1ar2curr</span><span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">ℕ</span>\n<span class=\"n\">h</span><span class=\"bp\">✝</span><span class=\"o\">:</span> <span class=\"n\">Array.size</span> <span class=\"n\">ar2</span> <span class=\"bp\">-</span> <span class=\"n\">j</span> <span class=\"bp\">&lt;</span> <span class=\"n\">Array.size</span> <span class=\"n\">ar1</span> <span class=\"bp\">-</span> <span class=\"n\">i</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">False</span>\n<span class=\"n\">ij</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span>\n<span class=\"n\">ar1ar2curr</span><span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">ℕ</span>\n<span class=\"n\">h</span><span class=\"bp\">✝</span><span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">Array.size</span> <span class=\"n\">ar2</span> <span class=\"bp\">-</span> <span class=\"n\">j</span> <span class=\"bp\">&lt;</span> <span class=\"n\">Array.size</span> <span class=\"n\">ar1</span> <span class=\"bp\">-</span> <span class=\"n\">i</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">Array.size</span> <span class=\"n\">ar2</span> <span class=\"bp\">-</span> <span class=\"n\">j</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">Array.size</span> <span class=\"n\">ar1</span> <span class=\"bp\">-</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"n\">Array.size</span> <span class=\"n\">ar1</span> <span class=\"bp\">-</span> <span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">Array.size</span> <span class=\"n\">ar2</span> <span class=\"bp\">-</span> <span class=\"n\">j</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>and note the <code>False</code>; so your termination metric doesn't seem to work at the 4rth recursive call.</p>",
        "id": 407681695,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1702459943
    },
    {
        "content": "<p>You’ll make more progress if you tell it that <code>loop</code> is “below” <code>choose</code> like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">termination_by</span>\n  <span class=\"n\">loop</span> <span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"n\">ar1</span> <span class=\"n\">ar2</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">((</span><span class=\"n\">ar1.size</span> <span class=\"bp\">-</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">ar2.size</span> <span class=\"bp\">-</span> <span class=\"n\">j</span><span class=\"o\">),</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"c1\">-- ar1.size + ar2.size - curr.size</span>\n  <span class=\"n\">choose</span> <span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"n\">ar1</span> <span class=\"n\">ar2</span> <span class=\"n\">curr</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">((</span><span class=\"n\">ar1.size</span> <span class=\"bp\">-</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">ar2.size</span> <span class=\"bp\">-</span> <span class=\"n\">j</span><span class=\"o\">),</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 407682161,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1702460051
    },
    {
        "content": "<p>Now you have obligations like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">ij</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span>\n<span class=\"n\">ar1ar2curr</span><span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">ℕ</span>\n<span class=\"n\">hi</span><span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">&lt;</span> <span class=\"n\">Array.size</span> <span class=\"n\">ar1</span>\n<span class=\"n\">hj</span><span class=\"o\">:</span> <span class=\"n\">j</span> <span class=\"bp\">&lt;</span> <span class=\"n\">Array.size</span> <span class=\"n\">ar2</span>\n<span class=\"n\">h</span><span class=\"bp\">✝</span><span class=\"o\">:</span> <span class=\"n\">ar1</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"bp\">≤</span> <span class=\"n\">ar2</span><span class=\"o\">[</span><span class=\"n\">j</span><span class=\"o\">]</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">Array.size</span> <span class=\"n\">ar1</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">Array.size</span> <span class=\"n\">ar2</span> <span class=\"bp\">-</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"n\">Array.size</span> <span class=\"n\">ar1</span> <span class=\"bp\">-</span> <span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">Array.size</span> <span class=\"n\">ar2</span> <span class=\"bp\">-</span> <span class=\"n\">j</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>which look true, but which I don’t know how to solve easily. Maybe someone else knows which tactic solves that easily? I hope that soon™ you can write</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">decreasing_by</span>  <span class=\"n\">decreasing_with</span> <span class=\"n\">omega</span>\n</code></pre></div>\n<p>and it’ll just work (or it’ll even be the default.)</p>",
        "id": 407683034,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1702460251
    },
    {
        "content": "<p>Ah, and even with that you’ll run into problem in the last recursive call, because <a href=\"https://leanprover-community.github.io/mathlib4_docs/Init/WFTactics.html#tacticDecreasing_with_\"><code>decreasing_with</code></a> uses </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>    <span class=\"n\">repeat</span> <span class=\"o\">(</span><span class=\"n\">first</span> <span class=\"bp\">|</span> <span class=\"n\">apply</span> <span class=\"n\">PSigma.Lex.right</span> <span class=\"bp\">|</span> <span class=\"n\">apply</span> <span class=\"n\">PSigma.Lex.left</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>but in your case you need <code>apply PSigma.Lex.right'</code>. So you’d have to unpack that tactic as well.</p>\n<p>All a bit tedious, agreed! But at least doable.</p>",
        "id": 407684451,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1702460569
    },
    {
        "content": "<p>Thanks a lot Joachim for the thorough response. I didn't know about the <code>decreasing_by</code> trick, or that the order of the arguments to <code>termination_by</code> matters.<br>\nI had an idea yesterday to eliminate the <code>choose</code> function by substituting the definition, trying to prove that function terminates, and to use what I learn to finish the definition using mutual. I'm sure I can use what you've shown me to help with that.<br>\nI'll reply with what I come up with.<br>\nThanks!</p>",
        "id": 407794828,
        "sender_full_name": "King Crawford",
        "timestamp": 1702495258
    }
]