[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Order.FixedPoints</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Order.Zorn</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">autoImplicit</span> <span class=\"n\">true</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">warningAsError</span> <span class=\"n\">false</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Set</span> <span class=\"n\">Function</span>\n<span class=\"kn\">open</span> <span class=\"n\">Classical</span>\n<span class=\"kd\">universe</span> <span class=\"n\">u</span> <span class=\"n\">v</span>\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">fcg</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">Set</span> <span class=\"n\">α</span>\n  <span class=\"bp\">|</span> <span class=\"n\">A</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"bp\">''</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">''</span> <span class=\"n\">A</span><span class=\"o\">)</span><span class=\"bp\">ᶜ</span><span class=\"o\">)</span><span class=\"bp\">ᶜ</span>\n<span class=\"k\">#check</span> <span class=\"n\">fcg</span> <span class=\"n\">f</span> <span class=\"n\">g</span>\n\n<span class=\"kd\">def</span>  <span class=\"n\">Omega</span><span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"o\">(</span><span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">):=</span> <span class=\"o\">{</span><span class=\"n\">A</span><span class=\"o\">:</span><span class=\"n\">Set</span> <span class=\"n\">α</span> <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"bp\">''</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">''</span> <span class=\"n\">A</span><span class=\"o\">)</span><span class=\"bp\">ᶜ</span><span class=\"o\">)</span><span class=\"bp\">ᶜ⊆</span> <span class=\"n\">A</span><span class=\"o\">}</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">Omega</span>\n<span class=\"k\">#check</span> <span class=\"bp\">⋂₀</span> <span class=\"n\">Omega</span> <span class=\"n\">f</span> <span class=\"n\">g</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">setStar</span><span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">:=</span><span class=\"bp\">⋂₀</span> <span class=\"n\">Omega</span> <span class=\"n\">f</span> <span class=\"n\">g</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">setStar</span> <span class=\"n\">f</span> <span class=\"n\">g</span>\n<span class=\"k\">#check</span> <span class=\"n\">fcg</span> <span class=\"n\">setStar</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">):</span> <span class=\"n\">fcg</span> <span class=\"bp\">''</span> <span class=\"n\">setStar</span> <span class=\"bp\">=</span><span class=\"n\">setStar</span><span class=\"o\">:=</span><span class=\"kd\">by</span>\n</code></pre></div>\n<p>I  am stucked here..have difficulty of coding math idea.</p>",
        "id": 395909884,
        "sender_full_name": "Ming Li",
        "timestamp": 1696952136
    },
    {
        "content": "<p>Please read <a href=\"https://github.com/leanprover-community/mathlib/wiki/Code-in-backticks\">#backticks</a> and <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> and edit your post accordingly. This will make it a lot easier to help you.</p>",
        "id": 395910103,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1696952208
    },
    {
        "content": "<p>You should end with syntactically correct code such as</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">):</span> <span class=\"n\">fcg</span> <span class=\"bp\">''</span> <span class=\"n\">setStar</span> <span class=\"bp\">=</span> <span class=\"n\">setStar</span><span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>so that Lean gets a chance to give you an helpful error message.</p>",
        "id": 395911454,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1696952677
    },
    {
        "content": "<p>What you wrote makes no sense at all, and I don't know what you intended to write.</p>",
        "id": 395911857,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1696952831
    },
    {
        "content": "<p>Did you mean</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">):</span> <span class=\"n\">fcg</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">setStar</span> <span class=\"n\">f</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">setStar</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 395912173,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1696952938
    },
    {
        "content": "<p>I have no idea what you are trying to express, I'm only crafting a meaningful statement that is syntactically close to what you wrote.</p>",
        "id": 395912253,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1696952972
    },
    {
        "content": "<p>Thanks. That's what I mean.  Are f(S) and  f '' S the same?</p>",
        "id": 395918991,
        "sender_full_name": "Ming Li",
        "timestamp": 1696955211
    },
    {
        "content": "<p>On paper, yes. In Lean, <code>f S</code> makes no sense because f is expecting an element as an input.</p>",
        "id": 395920410,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1696955731
    }
]