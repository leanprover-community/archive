[
    {
        "content": "<p>Hi everyone,</p>\n<p>I defined two functions 'theta(t)' and 'phi(t)' and would like to have the following proof (some condition related to the proof of geodesic curves on 2D sphere).</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">analysis.special_functions.trigonometric.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">analysis.calculus.deriv</span>\n<span class=\"kn\">import</span> <span class=\"n\">analysis.calculus.iterated_deriv</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">theta</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span> <span class=\"n\">t</span>\n<span class=\"kd\">def</span> <span class=\"n\">phi</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">prop_1</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">,</span> <span class=\"n\">iterated_deriv</span> <span class=\"mi\">2</span> <span class=\"n\">theta</span> <span class=\"n\">t</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">real.sin</span><span class=\"o\">(</span><span class=\"n\">phi</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"n\">real.cos</span><span class=\"o\">(</span><span class=\"n\">phi</span> <span class=\"n\">t</span><span class=\"o\">))</span> <span class=\"bp\">*</span> <span class=\"n\">deriv</span> <span class=\"n\">theta</span> <span class=\"n\">t</span> <span class=\"bp\">*</span> <span class=\"n\">deriv</span> <span class=\"n\">phi</span> <span class=\"n\">t</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>I'm not familiar with the proof related to derivative functions. They seem to be more complicated than functions like \"sin\" and \"cos\". Should I first prove that \"deriv theta t = 1\" and \"deriv phi t = 0\" before taking further steps? Thanks!</p>",
        "id": 351505047,
        "sender_full_name": "Guangzhi Xiong",
        "timestamp": 1682051069
    },
    {
        "content": "<p>Does <code>simp [theta, phi]</code> make progress?</p>",
        "id": 351533826,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1682063123
    },
    {
        "content": "<p>Oh, that helps! The derivatives of functions have been automatically computed. Thank you so much!</p>\n<p>But now the goal becomes <code>∀ (t : ℝ), iterated_deriv 2 theta t = 0</code>. The 2-nd order derivative cannot be computed automatically. Is there any way to convert it to a target with only <code>deriv</code> instead of  <code>iterated_deriv</code>?</p>",
        "id": 351650314,
        "sender_full_name": "Guangzhi Xiong",
        "timestamp": 1682088273
    },
    {
        "content": "<p>Does rewriting <a href=\"https://leanprover-community.github.io/mathlib_docs/find/iterated_deriv_succ'\">docs#iterated_deriv_succ'</a>  help?</p>",
        "id": 351651624,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1682088482
    },
    {
        "content": "<p>Thanks for the suggestion. I use <code>rw iterated_deriv_succ'</code> twice and the target now becomes<br>\n<code>∀ (t : ℝ), iterated_deriv 0 (deriv (deriv theta)) t = 0</code><br>\nIt seems that if I define the theorem as </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">∀</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">,</span>  <span class=\"n\">deriv</span> <span class=\"o\">(</span><span class=\"n\">deriv</span> <span class=\"n\">theta</span><span class=\"o\">)</span> <span class=\"n\">t</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">real.sin</span><span class=\"o\">(</span><span class=\"n\">phi</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"n\">real.cos</span><span class=\"o\">(</span><span class=\"n\">phi</span> <span class=\"n\">t</span><span class=\"o\">))</span> <span class=\"bp\">*</span> <span class=\"n\">deriv</span> <span class=\"n\">theta</span> <span class=\"n\">t</span> <span class=\"bp\">*</span> <span class=\"n\">deriv</span> <span class=\"n\">phi</span> <span class=\"n\">t</span>\n</code></pre></div>\n<p>the target would also be <code>∀ (t : ℝ), deriv (deriv theta) t = 0</code> after applying <code>simp [theta, phi]</code>.</p>",
        "id": 351654348,
        "sender_full_name": "Guangzhi Xiong",
        "timestamp": 1682088976
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"611618\">Guangzhi Xiong</span> <a href=\"#narrow/stream/113489-new-members/topic/proof.20of.20derivative.20related.20property/near/351654348\">said</a>:</p>\n<blockquote>\n<p>Thanks for the suggestion. I use <code>rw iterated_deriv_succ'</code> twice and the target now becomes<br>\n<code>∀ (t : ℝ), iterated_deriv 0 (deriv (deriv theta)) t = 0</code><br>\nIt seems that if I define the theorem as </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">∀</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">,</span>  <span class=\"n\">deriv</span> <span class=\"o\">(</span><span class=\"n\">deriv</span> <span class=\"n\">theta</span><span class=\"o\">)</span> <span class=\"n\">t</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">real.sin</span><span class=\"o\">(</span><span class=\"n\">phi</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"n\">real.cos</span><span class=\"o\">(</span><span class=\"n\">phi</span> <span class=\"n\">t</span><span class=\"o\">))</span> <span class=\"bp\">*</span> <span class=\"n\">deriv</span> <span class=\"n\">theta</span> <span class=\"n\">t</span> <span class=\"bp\">*</span> <span class=\"n\">deriv</span> <span class=\"n\">phi</span> <span class=\"n\">t</span>\n</code></pre></div>\n<p>the target would also be <code>∀ (t : ℝ), deriv (deriv theta) t = 0</code> after applying <code>simp [theta, phi]</code>.</p>\n</blockquote>\n<p>I see in the documentation for deriv that it knows how to compute the derivative of the identity function. Maybe express theta as the identity function first?</p>",
        "id": 351655732,
        "sender_full_name": "Kevin Sullivan",
        "timestamp": 1682089244
    },
    {
        "content": "<p>Thanks for pointing that out! I also noticed that there are theorems called <a href=\"https://leanprover-community.github.io/mathlib_docs/analysis/calculus/deriv.html#deriv_id'\">deriv_id'</a> and deriv_id'', which look very helpful on this problem. I tried <code>rw</code> but it doesn't work in the current situation. Is there any other tactic that can be used to express the <code>theta</code> function as an identity function? Or should I try to use <code>id</code> when defining <code>theta</code>?</p>",
        "id": 351663186,
        "sender_full_name": "Guangzhi Xiong",
        "timestamp": 1682090678
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"611618\">Guangzhi Xiong</span> <a href=\"#narrow/stream/113489-new-members/topic/proof.20of.20derivative.20related.20property/near/351663186\">said</a>:</p>\n<blockquote>\n<p>Thanks for pointing that out! I also noticed that there are theorems called <a href=\"https://leanprover-community.github.io/mathlib_docs/analysis/calculus/deriv.html#deriv_id'\">deriv_id'</a> and deriv_id'', which look very helpful on this problem. I tried <code>rw</code> but it doesn't work in the current situation. Is there any other tactic that can be used to express the <code>theta</code> function as an identity function? Or should I try to use <code>id</code> when defining <code>theta</code>?</p>\n</blockquote>\n<p>The theorem works for id, so maybe express theta as id? Maybe then the theorem will unify with your remaining goal? (Or prove that theta = id then rewrite theta to id?)</p>",
        "id": 351666429,
        "sender_full_name": "Kevin Sullivan",
        "timestamp": 1682091379
    },
    {
        "content": "<p>Yes, by defining the <code>theta</code> function as<br>\n<code>def theta : ℝ → ℝ := id</code><br>\nthe theorem can be proved directly using <code>simp</code>. I will also try if I can prove <code>theta=id</code> without redefining the <code>theta</code> function. Many thanks to all of you for your help!</p>",
        "id": 351671702,
        "sender_full_name": "Guangzhi Xiong",
        "timestamp": 1682092766
    },
    {
        "content": "<p><code>delta theta</code> should unfold theta in your goal</p>",
        "id": 351676106,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1682093836
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"611618\">Guangzhi Xiong</span> <a href=\"#narrow/stream/113489-new-members/topic/proof.20of.20derivative.20related.20property/near/351671702\">said</a>:</p>\n<blockquote>\n<p>Yes, by defining the <code>theta</code> function as<br>\n<code>def theta : ℝ → ℝ := id</code><br>\nthe theorem can be proved directly using <code>simp</code>. I will also try if I can prove <code>theta=id</code> without redefining the <code>theta</code> function. Many thanks to all of you for your help!</p>\n</blockquote>\n<p>Consider using funext, which says that to show f = g it suffices to show \\all x, f x = g x.</p>",
        "id": 351677079,
        "sender_full_name": "Kevin Sullivan",
        "timestamp": 1682094107
    },
    {
        "content": "<p><code>theta = id</code> is true by <code>rfl</code></p>",
        "id": 351678226,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1682094445
    },
    {
        "content": "<p>Thank you all guys. I just tried <code>delta theta</code>, which unfolds <code>theta</code> to <code>λ (t : ℝ), t)</code>. Then it would be clear enough for Lean to prove the theorem by <code>simp</code>.</p>",
        "id": 351683905,
        "sender_full_name": "Guangzhi Xiong",
        "timestamp": 1682096018
    },
    {
        "content": "<p>The general rule here is that if you introduce your own <code>def</code>s, Lean will know nothing about them until you tell it otherwise</p>",
        "id": 351684101,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1682096066
    },
    {
        "content": "<p>You need to do one of:</p>\n<ul>\n<li>Write an API (collection of basic lemmas) for them</li>\n<li>Make them <code>@[reducible]</code></li>\n<li>Unfold them in your proofs using <code>delta</code>/<code>rw</code>/<code>simp</code></li>\n</ul>",
        "id": 351684243,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1682096110
    },
    {
        "content": "<p>Oh yes, I've learned that today. Thank you so much for your advice!</p>",
        "id": 351684621,
        "sender_full_name": "Guangzhi Xiong",
        "timestamp": 1682096205
    }
]