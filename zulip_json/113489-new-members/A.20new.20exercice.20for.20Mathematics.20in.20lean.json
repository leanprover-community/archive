[
    {
        "content": "<p>This could be some additional exercice for mathematics in lean, for the S02_Functions.lean</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- universel</span>\n<span class=\"kd\">def</span> <span class=\"n\">pull_image</span>  <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_2</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">β</span>  <span class=\"o\">:=</span>\n  <span class=\"o\">{</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">|</span> <span class=\"n\">f</span> <span class=\"bp\">⁻¹'</span> <span class=\"o\">{</span><span class=\"n\">y</span><span class=\"o\">}</span> <span class=\"bp\">⊆</span> <span class=\"n\">s</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span>   <span class=\"n\">f</span> <span class=\"bp\">⁻¹'</span> <span class=\"n\">v</span> <span class=\"bp\">⊆</span> <span class=\"n\">s</span> <span class=\"bp\">↔</span>  <span class=\"n\">v</span> <span class=\"bp\">⊆</span> <span class=\"n\">pull_image</span> <span class=\"n\">f</span> <span class=\"n\">s</span>   <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>around the exercice</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"bp\">''</span> <span class=\"n\">s</span> <span class=\"bp\">⊆</span> <span class=\"n\">v</span> <span class=\"bp\">↔</span> <span class=\"n\">s</span> <span class=\"bp\">⊆</span> <span class=\"n\">f</span> <span class=\"bp\">⁻¹'</span> <span class=\"n\">v</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 386130650,
        "sender_full_name": "Nicolas Rolland",
        "timestamp": 1692466883
    },
    {
        "content": "<p>and here is a solution, in my own beginner style ..</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span>\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Function</span>\n<span class=\"kn\">open</span> <span class=\"n\">Set</span>\n\n\n<span class=\"c1\">-- The subset hyperdoctrine</span>\n<span class=\"c1\">-- If a type α is seen as a set, an element of Set α is a subset of the set α.</span>\n<span class=\"c1\">-- That set of subsets has to be endowed with its categorical structure of (sub)set inclusion, and a proper functor be written etc ... to be a 'hyperdoctrine'</span>\n\n<span class=\"c1\">-- push_image ⊣ preimage ⊣ pull_image</span>\n\n<span class=\"c1\">-- `preimage` defined in library looks like this</span>\n<span class=\"kd\">def</span> <span class=\"n\">mypreimage</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">β</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Set</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">s</span> <span class=\"bp\">↦</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"bp\">|</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span> <span class=\"o\">}</span>\n\n<span class=\"c1\">--existentiel</span>\n<span class=\"kd\">def</span> <span class=\"n\">push_image</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_2</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Set</span> <span class=\"n\">β</span>  <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">s</span> <span class=\"bp\">↦</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">|</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">}</span>\n\n<span class=\"c1\">-- push_image ⊣ pre</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">push_image</span> <span class=\"n\">f</span> <span class=\"n\">s</span> <span class=\"bp\">⊆</span> <span class=\"n\">v</span> <span class=\"bp\">↔</span> <span class=\"n\">s</span> <span class=\"bp\">⊆</span> <span class=\"n\">preimage</span> <span class=\"n\">f</span> <span class=\"n\">v</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">constructor</span>\n  <span class=\"o\">{</span><span class=\"bp\">.</span> <span class=\"n\">intro</span> <span class=\"n\">h</span>\n     <span class=\"n\">exact</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">xs</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"bp\">↦</span> <span class=\"n\">xs</span> <span class=\"bp\">|&gt;</span> <span class=\"n\">mem_image_of_mem</span> <span class=\"n\">f</span> <span class=\"bp\">|&gt;</span> <span class=\"n\">h</span>\n  <span class=\"o\">}</span>\n  <span class=\"k\">show</span> <span class=\"n\">s</span> <span class=\"bp\">⊆</span> <span class=\"n\">f</span> <span class=\"bp\">⁻¹'</span> <span class=\"n\">v</span> <span class=\"bp\">→</span> <span class=\"n\">f</span> <span class=\"bp\">''</span> <span class=\"n\">s</span> <span class=\"bp\">⊆</span> <span class=\"n\">v</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h</span>\n  <span class=\"n\">rintro</span> <span class=\"n\">y</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">xs</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span> <span class=\"c1\">-- y ∈ f '' s &lt;=&gt; ∃ x, x ∈ s ^ y = f x</span>\n  <span class=\"n\">exact</span> <span class=\"n\">h</span> <span class=\"n\">xs</span>\n\n\n<span class=\"c1\">-- universel</span>\n<span class=\"kd\">def</span> <span class=\"n\">pull_image</span>  <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_2</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">β</span>  <span class=\"o\">:=</span>\n  <span class=\"o\">{</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">|</span> <span class=\"n\">preimage</span> <span class=\"n\">f</span> <span class=\"o\">{</span><span class=\"n\">y</span><span class=\"o\">}</span> <span class=\"bp\">⊆</span> <span class=\"n\">s</span> <span class=\"o\">}</span>\n\n<span class=\"c1\">-- pre ⊣ pull_image</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span>  <span class=\"n\">preimage</span> <span class=\"n\">f</span> <span class=\"n\">v</span> <span class=\"bp\">⊆</span> <span class=\"n\">s</span> <span class=\"bp\">↔</span>  <span class=\"n\">v</span> <span class=\"bp\">⊆</span> <span class=\"n\">pull_image</span> <span class=\"n\">f</span> <span class=\"n\">s</span>   <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n <span class=\"n\">constructor</span>\n <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"bp\">⁻¹'</span> <span class=\"n\">v</span> <span class=\"bp\">⊆</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"bp\">↦</span> <span class=\"kd\">by</span>\n      <span class=\"n\">intro</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">xv</span><span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">v</span><span class=\"o\">)</span>\n      <span class=\"n\">intro</span> <span class=\"n\">u</span> <span class=\"o\">(</span><span class=\"n\">fux</span><span class=\"o\">:</span> <span class=\"n\">u</span> <span class=\"bp\">∈</span> <span class=\"n\">f</span> <span class=\"bp\">⁻¹'</span> <span class=\"o\">{</span><span class=\"n\">x</span><span class=\"o\">})</span>\n      <span class=\"k\">have</span> <span class=\"n\">xsingletoninv</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">x</span><span class=\"o\">}</span> <span class=\"bp\">⊆</span> <span class=\"n\">v</span> <span class=\"o\">:=</span> <span class=\"n\">singleton_subset_iff.mpr</span> <span class=\"n\">xv</span>\n      <span class=\"n\">exact</span> <span class=\"n\">fux</span> <span class=\"bp\">|&gt;</span> <span class=\"n\">preimage_mono</span> <span class=\"n\">xsingletoninv</span> <span class=\"bp\">|&gt;</span> <span class=\"n\">h</span> <span class=\"o\">}</span>\n <span class=\"n\">exact</span> <span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">v</span> <span class=\"bp\">⊆</span> <span class=\"n\">pull_image</span> <span class=\"n\">f</span> <span class=\"n\">s</span> <span class=\"o\">)</span> <span class=\"bp\">↦</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">fxv</span><span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">f</span> <span class=\"bp\">⁻¹'</span> <span class=\"n\">v</span><span class=\"o\">)</span>\n  <span class=\"k\">have</span> <span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">f</span> <span class=\"bp\">⁻¹'</span> <span class=\"o\">(</span><span class=\"n\">pull_image</span> <span class=\"n\">f</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">preimage_mono</span> <span class=\"n\">h</span> <span class=\"n\">fxv</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"bp\">⁻¹'</span> <span class=\"o\">(</span><span class=\"n\">pull_image</span> <span class=\"n\">f</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"bp\">⊆</span> <span class=\"n\">s</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n      <span class=\"n\">intro</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">preimage</span> <span class=\"n\">f</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">}</span> <span class=\"bp\">⊆</span> <span class=\"n\">s</span><span class=\"o\">)</span>\n      <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">preimage</span> <span class=\"n\">f</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">}</span> <span class=\"o\">:=</span>  <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">|&gt;</span> <span class=\"n\">mem_singleton</span>\n      <span class=\"n\">exact</span> <span class=\"n\">hx</span> <span class=\"o\">(</span><span class=\"n\">this</span><span class=\"o\">)</span>\n  <span class=\"n\">exact</span> <span class=\"n\">this</span> <span class=\"n\">hx</span>\n</code></pre></div>",
        "id": 386249896,
        "sender_full_name": "Nicolas Rolland",
        "timestamp": 1692557782
    },
    {
        "content": "<p>This is <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Set.subset_kernImage_iff#doc\">docs#Set.subset_kernImage_iff</a></p>",
        "id": 386291785,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1692586073
    },
    {
        "content": "<p>thank you for the ref !</p>\n<p>It has a much shorter proof, worth its salt</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- `kernImage f s` is the set of `y` such that `f ⁻¹ y ⊆ s`. -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">kernImage</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">β</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span> <span class=\"n\">y</span> <span class=\"bp\">|</span> <span class=\"bp\">∀</span> <span class=\"o\">⦃</span><span class=\"n\">x</span><span class=\"o\">⦄,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"bp\">→</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span> <span class=\"o\">}</span>\n\n<span class=\"kn\">protected</span> <span class=\"kd\">theorem</span> <span class=\"n\">preimage_kernImage</span> <span class=\"o\">:</span> <span class=\"n\">GaloisConnection</span> <span class=\"o\">(</span><span class=\"n\">preimage</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">kernImage</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"o\">⟨</span><span class=\"k\">fun</span> <span class=\"n\">h</span> <span class=\"n\">_</span> <span class=\"n\">hx</span> <span class=\"n\">y</span> <span class=\"n\">hy</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">y</span> <span class=\"bp\">∈</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">hy.symm</span> <span class=\"bp\">▸</span> <span class=\"n\">hx</span>\n    <span class=\"n\">h</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n    <span class=\"k\">fun</span> <span class=\"n\">h</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">h</span> <span class=\"n\">hx</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span>\n</code></pre></div>",
        "id": 386456281,
        "sender_full_name": "Nicolas Rolland",
        "timestamp": 1692644604
    },
    {
        "content": "<p>I don’t understand, shorter than what? Indeed we also have the galois connection lemma as <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Set.preimage_kernImage#doc\">docs#Set.preimage_kernImage</a></p>",
        "id": 386457642,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1692645195
    },
    {
        "content": "<p>But indeed we could add some exercises about Galois connections, that’s always fun to formalize</p>",
        "id": 386457699,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1692645227
    }
]