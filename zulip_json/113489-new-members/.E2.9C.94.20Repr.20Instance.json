[
    {
        "content": "<p>Hi, I'm learning to use Lean and thought that it would be a good learning experience to start fresh with my own objects.  I arbitrarily chose to define a graph.  I wanted to be able to #eval the graph and see it print out a record of the vertices and edges, but I received an error message because Lean didn't know how to print the object.  Hence, I'm trying to write an Repr instance so that Lean knows what to do when I tell it to eval something.   I'm not sure what libraries to import to get to this done, and the proper way to code it.  Below is what I have.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Set.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Lean.Data.Format</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">Graph</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">vertices</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">V</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">edges</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"bp\">×</span> <span class=\"n\">V</span><span class=\"o\">))</span>\n\n<span class=\"c1\">-- Example graph</span>\n<span class=\"kd\">def</span> <span class=\"n\">example_graph</span> <span class=\"o\">:</span> <span class=\"n\">Graph</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"o\">{</span>\n  <span class=\"n\">vertices</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">},</span>\n  <span class=\"n\">edges</span> <span class=\"o\">:=</span> <span class=\"o\">{(</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">2</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"o\">,</span><span class=\"mi\">3</span><span class=\"o\">)}</span>\n<span class=\"o\">}</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">graph_repr</span> <span class=\"o\">{</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Repr</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Repr</span> <span class=\"o\">(</span><span class=\"n\">Graph</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨</span><span class=\"k\">fun</span> <span class=\"n\">G</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"Graph {{ vertices := {repr G.vertices}, edges := {repr G.edges} }}\"</span><span class=\"o\">⟩</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">example_graph</span>\n</code></pre></div>",
        "id": 358159521,
        "sender_full_name": "Jonathan Whitehead",
        "timestamp": 1684007250
    },
    {
        "content": "<p>There's a fundamental issue here, which is that without some more assumptions <code>Set V</code> isn't data per se. The definition of <code>Set V</code> is <code>V -&gt; Prop</code>, and given a value of <code>Prop</code> you can't decide whether it's true or false automatically. You can either choose a more concrete set type (like <code>Finset</code>, or maybe even <code>List</code> if you're ok with the graph type being a data structure of graphs rather than more the abstract notion of a graph), or you can add some <code>Decidable</code> instances to your <code>Repr</code> instance along with some sort of finiteness assumption that lets you enumerate elements of <code>V</code>.</p>",
        "id": 358160536,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1684007866
    },
    {
        "content": "<p>Something to think about too is that with your definition allows the vertex set to be infinite -- what should <code>Repr</code> be in this case?</p>",
        "id": 358160611,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1684007900
    },
    {
        "content": "<p>for extra fun, the vertex set could be the collection of all non-halting turing machines</p>",
        "id": 358160772,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1684008013
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/113489-new-members/topic/Repr.20Instance/near/358160536\">said</a>:</p>\n<blockquote>\n<p>There's a fundamental issue here, which is that without some more assumptions <code>Set V</code> isn't data per se. The definition of <code>Set V</code> is <code>V -&gt; Prop</code>, and given a value of <code>Prop</code> you can't decide whether it's true or false automatically. You can either choose a more concrete set type (like <code>Finset</code>, or maybe even <code>List</code> if you're ok with the graph type being a data structure of graphs rather than more the abstract notion of a graph), or you can add some <code>Decidable</code> instances to your <code>Repr</code> instance along with some sort of finiteness assumption that lets you enumerate elements of <code>V</code>.</p>\n</blockquote>\n<p>Good catch, I'll revise it.  I should have used lists to begin with, but is there a Lean package for finite lists?  I want to keep the definition as close to a survey class description as possible.  After reading your response, I realize now that I'd have to give Lean some direction on what to do with graphs infinite vertices.</p>",
        "id": 358161933,
        "sender_full_name": "Jonathan Whitehead",
        "timestamp": 1684008813
    },
    {
        "content": "<p>Instead of <code>Repr</code> it would be infinitely cooler to get Lean displaying these things as actual pictures, which I believe we're close to being able to do: see <a href=\"https://github.com/leanprover-community/mathlib4/pull/3583\">!4#3583</a> . How would one go about doing this?</p>",
        "id": 358162070,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1684008911
    },
    {
        "content": "<p>So I updated the definition to use Lists.   I looked into the fin.basics and finite.basics of Lean's Mathlib, but I don't see a special kind of List like Finset to make the List finite.  </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.List.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Lean.Data.Format</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">Graph</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">vertices</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">V</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">edges</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"bp\">×</span> <span class=\"n\">V</span><span class=\"o\">))</span>\n\n<span class=\"c1\">-- Example graph</span>\n<span class=\"kd\">def</span> <span class=\"n\">example_graph</span> <span class=\"o\">:</span> <span class=\"n\">Graph</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"o\">{</span>\n  <span class=\"n\">vertices</span> <span class=\"o\">:=</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">],</span>\n  <span class=\"n\">edges</span> <span class=\"o\">:=</span> <span class=\"o\">[(</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">2</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"o\">,</span><span class=\"mi\">3</span><span class=\"o\">)]</span>\n<span class=\"o\">}</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">graph_repr</span> <span class=\"o\">{</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Repr</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Repr</span> <span class=\"o\">(</span><span class=\"n\">Graph</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨</span><span class=\"k\">fun</span> <span class=\"n\">G</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"Graph {{ vertices := {repr G.vertices}, edges := {repr G.edges} }}\"</span><span class=\"o\">⟩</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">example_graph</span>\n</code></pre></div>\n<p>I suppose I need a good tutorial on Repr instances because I'm not sure where to begin with the instance to make sure that it avoids situations with infinite lists.</p>",
        "id": 358162749,
        "sender_full_name": "Jonathan Whitehead",
        "timestamp": 1684009398
    },
    {
        "content": "<p>A <code>List</code> is finite</p>",
        "id": 358163037,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1684009565
    },
    {
        "content": "<p>(If you're thinking about something like Haskell and its infinite lists, Lean lists are all finite. If you try to do <code>def zeros : List ℕ := 0 :: zeros</code> then Lean will complain.)</p>",
        "id": 358163115,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1684009635
    },
    {
        "content": "<p>Oh, okay.  I suppose since they're defined inductively that they're inherently finite.</p>",
        "id": 358163207,
        "sender_full_name": "Jonathan Whitehead",
        "timestamp": 1684009688
    },
    {
        "content": "<p>It turns out that <code>Finset</code> is a <code>Multiset</code> without duplicates which is a <code>List</code>-modulo-permutation. So, <code>Finset</code> represents finite sets by virtue of <code>List</code>s having finite lengths.</p>",
        "id": 358163552,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1684009929
    },
    {
        "content": "<p>That's sort of why I suggested <code>List</code> actually, since it underlies what a <code>Finset</code> is, and then you don't have to worry about how you might write a <code>Repr</code> instance for <code>Finset</code>.</p>",
        "id": 358163691,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1684010039
    },
    {
        "content": "<p>(these have the complication that since they're unordered lists, your <code>Repr</code> instance would have to somehow be unordered too, unless you either have some additional assumptions (like a total order on <code>V</code>), or (ab)use an <code>@[implemented_by]</code> trick)</p>",
        "id": 358163864,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1684010134
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/113489-new-members/topic/Repr.20Instance/near/358163691\">said</a>:</p>\n<blockquote>\n<p>That's sort of why I suggested <code>List</code> actually, since it underlies what a <code>Finset</code> is, and then you don't have to worry about how you might write a <code>Repr</code> instance for <code>Finset</code>.</p>\n</blockquote>\n<p>Thanks, I'm working on updating it to Finset to see if this gives me the behavior that I want.  However, I'm having unrelated issues and posted it in a different thread.</p>",
        "id": 358165575,
        "sender_full_name": "Jonathan Whitehead",
        "timestamp": 1684011125
    },
    {
        "content": "<p>Just an update, but I did finally get Lean to do what I wanted.  However, I had to add some extra \"structure\" to the code.  I ended up defining the vertices as a struct that consists of a label of type string.  Through the process I feel like I got a better understanding of the <code>instance</code> system.  I'm sure that what I wrote isn't optimal and I'll probably learn how to do it better as I learn more, but below is what I ended up with.  </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.List.Basic</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">Vertex</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">)</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">vertex_to_string</span> <span class=\"o\">:</span> <span class=\"n\">ToString</span> <span class=\"n\">Vertex</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨</span><span class=\"k\">fun</span> <span class=\"n\">v</span> <span class=\"bp\">=&gt;</span>  <span class=\"n\">v.name</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">Edge</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">edge</span> <span class=\"o\">:</span> <span class=\"n\">Vertex</span> <span class=\"bp\">×</span> <span class=\"n\">Vertex</span><span class=\"o\">)</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">edge_to_string</span> <span class=\"o\">:</span> <span class=\"n\">ToString</span> <span class=\"n\">Edge</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨</span><span class=\"k\">fun</span> <span class=\"n\">e</span> <span class=\"bp\">=&gt;</span>  <span class=\"s2\">\"(\"</span> <span class=\"bp\">++</span> <span class=\"n\">e.edge.fst.name</span> <span class=\"bp\">++</span> <span class=\"s2\">\", \"</span> <span class=\"bp\">++</span> <span class=\"n\">e.edge.snd.name</span> <span class=\"bp\">++</span> <span class=\"s2\">\")\"</span> <span class=\"o\">⟩</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">Graph</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">vertices</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Vertex</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">edges</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Edge</span><span class=\"o\">)</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">graph_to_string</span> <span class=\"o\">:</span> <span class=\"n\">ToString</span> <span class=\"n\">Graph</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span>\n  <span class=\"k\">fun</span> <span class=\"n\">G</span> <span class=\"bp\">=&gt;</span> <span class=\"s2\">\"{Vertices = \"</span> <span class=\"bp\">++</span>\n            <span class=\"n\">String.intercalate</span> <span class=\"s2\">\", \"</span> <span class=\"o\">(</span><span class=\"n\">G.vertices.map</span> <span class=\"n\">toString</span><span class=\"o\">)</span> <span class=\"bp\">++</span>\n            <span class=\"s2\">\" : </span><span class=\"se\">\\n</span><span class=\"s2\"> Edges = \"</span> <span class=\"bp\">++</span>\n            <span class=\"n\">String.intercalate</span> <span class=\"s2\">\", \"</span> <span class=\"o\">(</span><span class=\"n\">G.edges.map</span> <span class=\"n\">toString</span><span class=\"o\">)</span> <span class=\"bp\">++</span>\n            <span class=\"s2\">\"}\"</span>\n<span class=\"o\">⟩</span>\n\n<span class=\"c1\">-- Example graph</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">v_1</span> <span class=\"o\">:</span> <span class=\"n\">Vertex</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"s2\">\"v_1\"</span><span class=\"o\">}</span>\n<span class=\"kd\">def</span> <span class=\"n\">v_2</span> <span class=\"o\">:</span> <span class=\"n\">Vertex</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"s2\">\"v_2\"</span><span class=\"o\">}</span>\n<span class=\"kd\">def</span> <span class=\"n\">v_3</span> <span class=\"o\">:</span> <span class=\"n\">Vertex</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"s2\">\"v_3\"</span><span class=\"o\">}</span>\n\n\n<span class=\"kd\">def</span> <span class=\"n\">e_1</span> <span class=\"o\">:</span> <span class=\"n\">Edge</span> <span class=\"o\">:=</span> <span class=\"o\">{</span>\n  <span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"s2\">\"e_1\"</span><span class=\"o\">,</span>\n  <span class=\"n\">edge</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">v_1</span><span class=\"o\">,</span> <span class=\"n\">v_2</span><span class=\"o\">)</span>\n<span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">e_2</span> <span class=\"o\">:</span> <span class=\"n\">Edge</span> <span class=\"o\">:=</span> <span class=\"o\">{</span>\n  <span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"s2\">\"e_2\"</span>\n  <span class=\"n\">edge</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">v_2</span><span class=\"o\">,</span> <span class=\"n\">v_3</span><span class=\"o\">)</span>\n<span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">example_graph</span> <span class=\"o\">:</span> <span class=\"n\">Graph</span> <span class=\"o\">:=</span> <span class=\"o\">{</span>\n  <span class=\"n\">vertices</span> <span class=\"o\">:=</span> <span class=\"o\">[</span><span class=\"n\">v_1</span><span class=\"o\">,</span> <span class=\"n\">v_2</span><span class=\"o\">,</span> <span class=\"n\">v_3</span><span class=\"o\">],</span>\n  <span class=\"n\">edges</span> <span class=\"o\">:=</span> <span class=\"o\">[</span><span class=\"n\">e_1</span><span class=\"o\">,</span> <span class=\"n\">e_2</span><span class=\"o\">]</span>\n<span class=\"o\">}</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">example_graph</span>\n</code></pre></div>",
        "id": 358299933,
        "sender_full_name": "Jonathan Whitehead",
        "timestamp": 1684087790
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"472585\">Jonathan Whitehead</span> has marked this topic as resolved.</p>",
        "id": 358315654,
        "sender_full_name": "Notification Bot",
        "timestamp": 1684095483
    }
]