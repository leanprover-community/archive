[
    {
        "content": "<p>Hello, </p>\n<p>I proved the following:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n_ne_one</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">≠</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n_ne_negone</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">≠</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n_ne_zero</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n   <span class=\"bp\">∃</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">Nat.Prime</span> <span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"bp\">∃</span><span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">m</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>however I have a rather ugly manual proof passing through <code>(toNat n).factors</code> and doing cases over the sign of <code>n</code>,  for which half the lines are dedicated to translating over the  coercion between <code>Nat</code> and <code>Int</code>. I feel there must be a more quick way using some abstract algebra lemma I can't find . Happy with any suggestions!</p>",
        "id": 406341312,
        "sender_full_name": "Luigi Massacci",
        "timestamp": 1701879886
    },
    {
        "content": "<p>One approach is:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n_ne_one</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">≠</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n_ne_negone</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">≠</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n_ne_zero</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"bp\">∃</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">Nat.Prime</span> <span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"bp\">∃</span><span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">m</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">use</span> <span class=\"n\">n.natAbs.minFac</span>\n  <span class=\"n\">constructor</span>\n  <span class=\"bp\">·</span> <span class=\"n\">refine</span> <span class=\"n\">Nat.minFac_prime</span> <span class=\"bp\">?</span><span class=\"n\">h.left.n1</span>\n    <span class=\"gr\">sorry</span>\n  <span class=\"n\">use</span> <span class=\"n\">n</span> <span class=\"bp\">/</span> <span class=\"n\">n.natAbs.minFac</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mul_comm</span><span class=\"o\">]</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Int.ediv_mul_cancel</span><span class=\"o\">]</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Int.ofNat_dvd_left</span><span class=\"o\">]</span>\n  <span class=\"n\">exact</span> <span class=\"n\">Nat.minFac_dvd</span> <span class=\"o\">(</span><span class=\"n\">Int.natAbs</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 406342263,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1701880196
    },
    {
        "content": "<p>Where the <code>sorry</code> is for <code>Int.natAbs n ≠ 1</code>, which I didn't feel like proving</p>",
        "id": 406342416,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1701880222
    },
    {
        "content": "<p>Or if you know how divisibility is defined:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n_ne_one</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">≠</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n_ne_negone</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">≠</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n_ne_zero</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"bp\">∃</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">Nat.Prime</span> <span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"bp\">∃</span><span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">m</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">use</span> <span class=\"n\">n.natAbs.minFac</span>\n  <span class=\"n\">constructor</span>\n  <span class=\"bp\">·</span> <span class=\"n\">refine</span> <span class=\"n\">Nat.minFac_prime</span> <span class=\"bp\">?</span><span class=\"n\">h.left.n1</span>\n    <span class=\"gr\">sorry</span>\n  <span class=\"n\">exact</span> <span class=\"n\">Int.ofNat_dvd_left.mpr</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">Nat.minFac_dvd</span> <span class=\"o\">(</span><span class=\"n\">Int.natAbs</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 406342867,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1701880341
    },
    {
        "content": "<p>Thank you! That is much quicker than mine (1/5th the length...) and I see that <code>Nat.factors</code> is using <code>minFac</code> under the hood anyway</p>",
        "id": 406345073,
        "sender_full_name": "Luigi Massacci",
        "timestamp": 1701881092
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"466290\">Luigi Massacci</span> has marked this topic as resolved.</p>",
        "id": 406345470,
        "sender_full_name": "Notification Bot",
        "timestamp": 1701881222
    },
    {
        "content": "<p>And amazingly <code>aesop</code> can handle the <code>sorry</code> on its own just by adding <code>have := @Int.natAbs_eq_iff_sq_eq n 1</code> to the context!</p>",
        "id": 406346940,
        "sender_full_name": "Luigi Massacci",
        "timestamp": 1701881715
    },
    {
        "content": "<p>If you need to prove an existence statement, it can be quite helpful if you can actually construct an appropriate value</p>",
        "id": 406351247,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1701883065
    }
]