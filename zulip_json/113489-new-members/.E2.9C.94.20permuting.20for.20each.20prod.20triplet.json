[
    {
        "content": "<p>Hello, I am having difficulty expressing what I need in Lean 4</p>\n<p>A is a set of triplets<br>\nThere are S3 group of ways to permutes a triplet (e.g (2 3) permutes (i, j, k) to (i, k, j) and etc.)<br>\nI would like to say,  <strong>Given any σ ∈ S3, return {σ a | a ∈ A}</strong></p>\n<p>Here is what I wrote so far.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">permuting_axiswise</span> <span class=\"o\">{</span><span class=\"n\">len</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">len</span> <span class=\"bp\">×</span> <span class=\"n\">Fin</span> <span class=\"n\">len</span> <span class=\"bp\">×</span> <span class=\"n\">Fin</span> <span class=\"n\">len</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">σ</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"mi\">3</span> <span class=\"bp\">≃</span> <span class=\"n\">Fin</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">len</span> <span class=\"bp\">×</span> <span class=\"n\">Fin</span> <span class=\"n\">len</span> <span class=\"bp\">×</span> <span class=\"n\">Fin</span> <span class=\"n\">len</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">len</span> <span class=\"bp\">×</span> <span class=\"n\">Fin</span> <span class=\"n\">len</span> <span class=\"bp\">×</span> <span class=\"n\">Fin</span> <span class=\"n\">len</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">len</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">∈</span> <span class=\"n\">A</span> <span class=\"bp\">∧</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"s2\">\"(i, j, k) permuted by σ\"</span><span class=\"o\">}</span>\n</code></pre></div>\n<p>It is not obvious to me how to replace the string bit with a real code. Could someone be kind enough to help me?</p>",
        "id": 361994937,
        "sender_full_name": "Hyeokjun Kwon",
        "timestamp": 1685378880
    },
    {
        "content": "<p>You will have a much better time using <code>Fin 3 -&gt; Fin len</code> instead of <code>Fin len × Fin len × Fin len</code></p>",
        "id": 361995144,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1685378942
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"479089\">Hyeokjun Kwon</span> has marked this topic as resolved.</p>",
        "id": 361997529,
        "sender_full_name": "Notification Bot",
        "timestamp": 1685379721
    },
    {
        "content": "<p>Thank you, this seems to work perfectly</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">permuting_axiswise</span> <span class=\"o\">{</span><span class=\"n\">len</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"mi\">3</span> <span class=\"bp\">→</span> <span class=\"n\">Fin</span> <span class=\"n\">len</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">σ</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"mi\">3</span> <span class=\"bp\">≃</span> <span class=\"n\">Fin</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"mi\">3</span> <span class=\"bp\">→</span> <span class=\"n\">Fin</span> <span class=\"n\">len</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"mi\">3</span> <span class=\"bp\">→</span> <span class=\"n\">Fin</span> <span class=\"n\">len</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">A</span> <span class=\"o\">,</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">∘</span> <span class=\"n\">σ</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 361997632,
        "sender_full_name": "Hyeokjun Kwon",
        "timestamp": 1685379745
    },
    {
        "content": "<p>I think you can even write <code>σ '' A</code> instead of <code>{b : Fin 3 → Fin len | ∃ a ∈ A , b = a ∘ σ }</code></p>",
        "id": 362001019,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1685381011
    }
]