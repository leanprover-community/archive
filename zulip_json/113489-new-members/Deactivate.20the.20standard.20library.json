[
    {
        "content": "<p>The types nat, bool etc are still available.<br>\nIs it possible to disable them to have a clean version with 0 libraries? </p>\n<p>Thanks</p>",
        "id": 343052935,
        "sender_full_name": "tica",
        "timestamp": 1679301233
    },
    {
        "content": "<p>Start the top of your file with <code>prelude</code>.</p>",
        "id": 343053048,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1679301257
    },
    {
        "content": "<p>Thank you</p>",
        "id": 343053867,
        "sender_full_name": "tica",
        "timestamp": 1679301515
    },
    {
        "content": "<p>Note that if you do this you won't even have <code>=</code> (<a href=\"https://leanprover-community.github.io/mathlib_docs/find/eq\">docs#eq</a>) or the tactic framework (<a href=\"https://leanprover-community.github.io/mathlib_docs/find/tactic.step\">docs#tactic.step</a>)</p>",
        "id": 343063435,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1679304434
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> Yes I know and that's the point.</p>\n<p>I would like to see exactly what is defined in lean and is part of the standard library and what is part of the core in C++.</p>\n<p>I'm not sure if this is a good idea because I'm already stuck.</p>\n<p>What is the quotient module? <code>init_quotient</code><br>\nI guess it must be C++ code.</p>",
        "id": 343065068,
        "sender_full_name": "tica",
        "timestamp": 1679304915
    },
    {
        "content": "<blockquote>\n<p>I would like to see exactly what is defined in lean and is part of the standard library and what is part of the core in C++.</p>\n</blockquote>\n<p>Unfortunately to actually use the (meta) things in the core C++, you need to add the <code>meta constant</code> declarations in the Lean code.</p>",
        "id": 343065360,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1679304994
    },
    {
        "content": "<p>See for instance <a href=\"https://leanprover-community.github.io/mathlib_docs/find/tactic.set_goals/src\">src#tactic.set_goals</a></p>",
        "id": 343065429,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1679305019
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span>  Yes, I think I understood correctly, this is what allows us to make tactics.</p>\n<p>The <code>init_quotient</code>, what is it?</p>\n<p>I just want to understand better how lean works</p>",
        "id": 343070137,
        "sender_full_name": "tica",
        "timestamp": 1679306317
    },
    {
        "content": "<p>It comes from here, and is a \"command\" like \"def\" or \"theorem\": <a href=\"https://github.com/leanprover-community/lean/blob/34f41e59146bbda3b58adb23dff350c30093e02b/src/frontends/lean/builtin_cmds.cpp#L695\">https://github.com/leanprover-community/lean/blob/34f41e59146bbda3b58adb23dff350c30093e02b/src/frontends/lean/builtin_cmds.cpp#L695</a></p>",
        "id": 343071202,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1679306579
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span>  Thank you!<br>\nThat's what I thought (that it was C++ code).</p>\n<p>I will try to dive into the code ^^</p>",
        "id": 343071815,
        "sender_full_name": "tica",
        "timestamp": 1679306760
    }
]