[
    {
        "content": "<p>so i have this code:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">maxList</span> <span class=\"o\">(</span><span class=\"n\">list</span><span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Option</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span>\n    <span class=\"n\">List.maximum</span><span class=\"bp\">?</span> <span class=\"n\">list</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">callMaxList</span> <span class=\"o\">(</span><span class=\"n\">list</span><span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n    <span class=\"n\">maxList</span> <span class=\"n\">list</span>\n</code></pre></div>\n<p>this code gives the error </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">application</span> <span class=\"n\">type</span> <span class=\"n\">mismatch</span>\n  <span class=\"n\">maxList</span> <span class=\"n\">list</span>\n<span class=\"n\">argument</span>\n  <span class=\"n\">list</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"bp\">?</span><span class=\"n\">u.63</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"n\">List</span> <span class=\"n\">Nat</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n</code></pre></div>\n<p>what is α exactly? i thought it was like some generic type, but im starting to reconsider</p>",
        "id": 269478948,
        "sender_full_name": "Joseph O",
        "timestamp": 1643229731
    },
    {
        "content": "<p>Yes, precisely. It is a generic type, and you gave it somewhere where <code>Nat</code> was expected.</p>",
        "id": 269479217,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1643229856
    },
    {
        "content": "<p>A generic type is usually not <code>Nat</code>!</p>",
        "id": 269479262,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1643229876
    },
    {
        "content": "<p>then what is it?</p>",
        "id": 269479286,
        "sender_full_name": "Joseph O",
        "timestamp": 1643229888
    },
    {
        "content": "<p>More importantly, a general type is not a list</p>",
        "id": 269479295,
        "sender_full_name": "Reid Barton",
        "timestamp": 1643229891
    },
    {
        "content": "<p>why isnt the generic type doing its job</p>",
        "id": 269479322,
        "sender_full_name": "Joseph O",
        "timestamp": 1643229901
    },
    {
        "content": "<p>It doesn't try to unify, if that's what you mean.</p>",
        "id": 269479361,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1643229916
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/113489-new-members/topic/what.20is.20.CE.B1/near/269479295\">said</a>:</p>\n<blockquote>\n<p>More importantly, a general type is not a list</p>\n</blockquote>\n<p>what do you mean?</p>",
        "id": 269479372,
        "sender_full_name": "Joseph O",
        "timestamp": 1643229922
    },
    {
        "content": "<p>The actual definition of <code>callMaxList</code> is something like <code>def callMaxList {α : Type} (list: α) := maxList list</code>. <code>α</code> is a variable that can be provided by the user of your function <code>callMaxList</code>, and they could choose something like <code>α = Bool</code>. In that case <code>list : Bool</code> and so <code>maxList list</code> doesn't make sense.</p>",
        "id": 269479541,
        "sender_full_name": "Reid Barton",
        "timestamp": 1643229994
    },
    {
        "content": "<p><code>α : Type</code> means that you can replace <code>α</code> with any type after you've defined your function. But you're trying to do the opposite, make Lean replace <code>α</code> with <code>Nat</code>.</p>",
        "id": 269479601,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1643230022
    },
    {
        "content": "<p>What you maybe want is not an actual variable <code>list: α</code> but a metavariable <code>list: _</code>, meaning \"Lean please figure out what should go here\".</p>",
        "id": 269479739,
        "sender_full_name": "Reid Barton",
        "timestamp": 1643230086
    },
    {
        "content": "<p>Although, it would usually be better to just say what should go there.</p>",
        "id": 269479776,
        "sender_full_name": "Reid Barton",
        "timestamp": 1643230102
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/113489-new-members/topic/what.20is.20.CE.B1/near/269479601\">said</a>:</p>\n<blockquote>\n<p><code>α : Type</code> means that you can replace <code>α</code> with any type after you've defined your function. But you're trying to do the opposite, make Lean replace <code>α</code> with <code>Nat</code>.</p>\n</blockquote>\n<p>ah i see</p>",
        "id": 269479867,
        "sender_full_name": "Joseph O",
        "timestamp": 1643230161
    },
    {
        "content": "<p>I know you're familiar with f#, and I think you can think of your second definition as doing <code>let callMaxList&lt;'a&gt; (list : List&lt;a&gt;) := maxList list</code> (I probably got the syntax wrong).  This is a type error since <code>maxList</code> expects a <code>List&lt;Nat&gt;</code>, not a generic <code>List&lt;a&gt;</code>.</p>",
        "id": 269479881,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1643230168
    },
    {
        "content": "<p>Nor a generic <code>&lt;a&gt;</code>!</p>",
        "id": 269479915,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1643230191
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/113489-new-members/topic/what.20is.20.CE.B1/near/269479881\">said</a>:</p>\n<blockquote>\n<p>I know you're familiar with f#, and I think you can think of your second definition as doing <code>let callMaxList&lt;'a&gt; (list : List&lt;a&gt;) := maxList list</code> (I probably got the syntax wrong).  This is a type error since <code>maxList</code> expects a <code>List&lt;Nat&gt;</code>, not a generic <code>List&lt;a&gt;</code>.</p>\n</blockquote>\n<p>that makes sense</p>",
        "id": 269479931,
        "sender_full_name": "Joseph O",
        "timestamp": 1643230199
    },
    {
        "content": "<p>you would have to give the type</p>",
        "id": 269479985,
        "sender_full_name": "Joseph O",
        "timestamp": 1643230207
    },
    {
        "content": "<p>i have another type related question. so I was reading the manual, and came across</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">p1</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"n\">c</span> <span class=\"bp\">≤</span> <span class=\"n\">d</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">p2</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">Int</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"n\">i</span> <span class=\"bp\">%</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"bp\">*</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n</code></pre></div>\n<p>why are the return types of these two functions <code>Prop</code> instead of <code>Bool</code>?</p>",
        "id": 269480167,
        "sender_full_name": "Joseph O",
        "timestamp": 1643230288
    },
    {
        "content": "<p>because that would require them to be decidable, which is more information</p>",
        "id": 269480239,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1643230318
    },
    {
        "content": "<p>but they could have been</p>",
        "id": 269480297,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1643230332
    },
    {
        "content": "<p>what do you mean by \"decidable\"? and what does <code>Prop</code> do to the return type?</p>",
        "id": 269480343,
        "sender_full_name": "Joseph O",
        "timestamp": 1643230352
    },
    {
        "content": "<p>A handwavey answer: a <code>Prop</code> is like a <code>Bool</code> that knows <em>what</em> it is that's supposed to be true or false.</p>",
        "id": 269480345,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1643230352
    },
    {
        "content": "<p>why is that useful?</p>",
        "id": 269480385,
        "sender_full_name": "Joseph O",
        "timestamp": 1643230368
    },
    {
        "content": "<p>especially in these two functions?</p>",
        "id": 269480413,
        "sender_full_name": "Joseph O",
        "timestamp": 1643230378
    },
    {
        "content": "<p>and why is it in numbers and not booleans <a href=\"/user_uploads/3121/C87Eh27woV31SWCuCpeKKrAh/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/C87Eh27woV31SWCuCpeKKrAh/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/C87Eh27woV31SWCuCpeKKrAh/image.png\"></a></div>",
        "id": 269480507,
        "sender_full_name": "Joseph O",
        "timestamp": 1643230430
    },
    {
        "content": "<p>when wouuld i use <code>Prop</code> over <code>Bool</code>?</p>",
        "id": 269482969,
        "sender_full_name": "Joseph O",
        "timestamp": 1643231525
    },
    {
        "content": "<p>A crude way to put it is that <code>Prop</code> is for mathematics, <code>bool</code> is for computation.</p>",
        "id": 269483046,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1643231562
    },
    {
        "content": "<p>ok</p>",
        "id": 269483055,
        "sender_full_name": "Joseph O",
        "timestamp": 1643231569
    },
    {
        "content": "<p>why do mathematicians not use bool</p>",
        "id": 269483074,
        "sender_full_name": "Joseph O",
        "timestamp": 1643231581
    },
    {
        "content": "<p>Not every proposition is decidable.</p>",
        "id": 269483097,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1643231593
    },
    {
        "content": "<p>i see</p>",
        "id": 269483113,
        "sender_full_name": "Joseph O",
        "timestamp": 1643231604
    },
    {
        "content": "<p>do i would normally use bool</p>",
        "id": 269483125,
        "sender_full_name": "Joseph O",
        "timestamp": 1643231613
    },
    {
        "content": "<p>got it</p>",
        "id": 269483130,
        "sender_full_name": "Joseph O",
        "timestamp": 1643231614
    },
    {
        "content": "<p>thanks</p>",
        "id": 269483142,
        "sender_full_name": "Joseph O",
        "timestamp": 1643231617
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"467926\">J. O.</span> has marked this topic as resolved.</p>",
        "id": 269483271,
        "sender_full_name": "Notification Bot",
        "timestamp": 1643231671
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"467926\">@J. O.</span> This \"decidability\" thing people are talking about is that if you have <code>b : Bool</code>, then you can decide in finite time whether <code>b</code> is <code>true</code> or <code>false</code>, guaranteed. The design of Lean guarantees this. (The <code>partial</code> keyword in Lean 4 turns this check off, which is why it makes writing recursive functions easier, but then you don't know if your functions will infinite loop.) But if you have <code>p : Prop</code>, theoretically <code>p = True</code> or <code>p = False</code>, but there's no algorithm to decide which it is.</p>\n<p>Mathematicians work with <code>Prop</code> when we're making mathematical statements (\"propositions\") that we want to prove.</p>",
        "id": 269484946,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1643232399
    },
    {
        "content": "<p>Lean 4 also has this whole system to automatically prove/disprove certain propositions. This is what <code>[Decidable p]</code> is for, when you run across it.</p>",
        "id": 269485054,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1643232449
    },
    {
        "content": "<p>A classic example of a <code>Prop</code> that we don't know how to decide is <a href=\"https://en.wikipedia.org/wiki/P_versus_NP_problem\">P=NP</a></p>",
        "id": 269491071,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1643235409
    },
    {
        "content": "<p>If every proposition had to be decidable to be stated that would be a huge limitation for a theorem prover</p>",
        "id": 269491135,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1643235449
    },
    {
        "content": "<p>A much simpler example of an undecidable prop is <code>Nat = Int</code></p>",
        "id": 269492002,
        "sender_full_name": "Patrick Johnson",
        "timestamp": 1643235749
    },
    {
        "content": "<p>(At least in Lean 3 <code>nat = int</code> is undecidable, so I guess it also applies to Lean 4. )</p>",
        "id": 269492008,
        "sender_full_name": "Patrick Johnson",
        "timestamp": 1643235757
    }
]