[
    {
        "content": "<p>Kia ora :) </p>\n<p>I have the following definitions. Is it possible to not have to write Peano. every time I call zero and succ? Namespace doesn't seem to help with this. It pulls in add and mul, but not zero and succ. Any help would be great, thanks!</p>\n<div class=\"codehilite\" data-code-language=\"namespace\"><pre><span></span><code>inductive Peano where\n  | zero : Peano\n  | succ : Peano → Peano\n  deriving Repr\n\ndef add (m n : Peano) : Peano :=\n  match n with\n    | Peano.zero   =&gt; m\n    | Peano.succ n =&gt; Peano.succ (add m n)\n\ninstance : Add Peano where\n  add := add\n\ndef mul (m n : Peano) : Peano :=\n  match n with\n    | Peano.zero   =&gt; Peano.zero\n    | Peano.succ n =&gt; (mul m n) + m\n\ninstance : HMul Peano Peano Peano where\n  hMul := mul\nend PeanoArithmetic\n\nopen PeanoArithmetic\n\n#check add -- Finds this\n#check zero -- Doesn't find this,\n#check succ -- Nor this\n</code></pre></div>",
        "id": 404029886,
        "sender_full_name": "Robert Culling",
        "timestamp": 1700868071
    },
    {
        "content": "<p><code>open PeanoArithmetic (add zero succ)</code> perhaps?</p>",
        "id": 404031182,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1700869275
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> Thanks for your response, but Lean does not seem to like that either.</p>",
        "id": 404032529,
        "sender_full_name": "Robert Culling",
        "timestamp": 1700870431
    },
    {
        "content": "<p>The constructors <code>zero</code> and <code>succ</code> are namespaced under <code>Peano</code></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Peano</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"o\">:</span> <span class=\"n\">Peano</span>\n  <span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"o\">:</span> <span class=\"n\">Peano</span> <span class=\"bp\">→</span> <span class=\"n\">Peano</span>\n  <span class=\"n\">deriving</span> <span class=\"n\">Repr</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">PeanoArithmetic</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">add</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Peano</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Peano</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">n</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"n\">Peano.zero</span>   <span class=\"bp\">=&gt;</span> <span class=\"n\">m</span>\n    <span class=\"bp\">|</span> <span class=\"n\">Peano.succ</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Peano.succ</span> <span class=\"o\">(</span><span class=\"n\">add</span> <span class=\"n\">m</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Add</span> <span class=\"n\">Peano</span> <span class=\"n\">where</span>\n  <span class=\"n\">add</span> <span class=\"o\">:=</span> <span class=\"n\">add</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">mul</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Peano</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Peano</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">n</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"n\">Peano.zero</span>   <span class=\"bp\">=&gt;</span> <span class=\"n\">Peano.zero</span>\n    <span class=\"bp\">|</span> <span class=\"n\">Peano.succ</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">mul</span> <span class=\"n\">m</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">m</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">HMul</span> <span class=\"n\">Peano</span> <span class=\"n\">Peano</span> <span class=\"n\">Peano</span> <span class=\"n\">where</span>\n  <span class=\"n\">hMul</span> <span class=\"o\">:=</span> <span class=\"n\">mul</span>\n<span class=\"kd\">end</span> <span class=\"n\">PeanoArithmetic</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">PeanoArithmetic.add</span>\n<span class=\"c1\">-- The constructors for an inductive type are namespaced under the name of the type</span>\n<span class=\"k\">#check</span> <span class=\"n\">Peano.zero</span>\n<span class=\"k\">#check</span> <span class=\"n\">Peano.succ</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Peano</span>\n<span class=\"k\">#check</span> <span class=\"n\">zero</span>\n<span class=\"k\">#check</span> <span class=\"n\">succ</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">PeanoArithmetic</span>\n<span class=\"k\">#check</span> <span class=\"n\">add</span>\n</code></pre></div>",
        "id": 404033400,
        "sender_full_name": "Timo Carlin-Burns",
        "timestamp": 1700870949
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"525668\">Robert Culling</span> has marked this topic as resolved.</p>",
        "id": 404047964,
        "sender_full_name": "Notification Bot",
        "timestamp": 1700880428
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"500038\">@Timo Carlin-Burns</span>  thank you very much :)</p>",
        "id": 404048542,
        "sender_full_name": "Robert Culling",
        "timestamp": 1700880850
    }
]