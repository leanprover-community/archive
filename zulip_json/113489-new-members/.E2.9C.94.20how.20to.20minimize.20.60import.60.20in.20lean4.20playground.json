[
    {
        "content": "<p>In lean4 web playground, is there a way to find the smallest <code>import</code> statement that will allow the code to work properly?</p>\n<p>For example, I may want to use <code>import Mathlib.Tactic</code> while I am writing code, and then minimise the <code>import</code> when the code is finished.</p>",
        "id": 402876088,
        "sender_full_name": "Asei Inoue",
        "timestamp": 1700313607
    },
    {
        "content": "<p>I know there is a <code>#minimize_imports</code> command, but I don't know how to use it.</p>",
        "id": 402876139,
        "sender_full_name": "Asei Inoue",
        "timestamp": 1700313663
    },
    {
        "content": "<p>I think that minimize_imports may not work on the online version.  If you have a specific lemma that is \"representative\", you could try <code>#find_home! &lt;lemmaName&gt;</code> and it might work.</p>",
        "id": 402880289,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1700316950
    },
    {
        "content": "<p>As a rule of thumb, it's often true that if the statements of theorems compile then so do the proofs. But I guess this doesn't apply to minimising tactic imports; I have <code>import Mathlib.Tactic</code> at the top of all my teaching materials :-)</p>",
        "id": 402880531,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1700317111
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"321459\">@Damiano Testa</span> Thank you. But output is very long... ! whats happening?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n\n<span class=\"c\">/-</span>\n<span class=\"cm\">[Lean.Data.Parsec,</span>\n<span class=\"cm\"> Std.Lean.Float,</span>\n<span class=\"cm\"> Aesop.Nanos,</span>\n<span class=\"cm\"> Lean.LoadDynlib,</span>\n<span class=\"cm\"> Std.Data.Ord,</span>\n<span class=\"cm\"> Lean.Data.LOption,</span>\n<span class=\"cm\"> Std.WF,</span>\n<span class=\"cm\"> Std.Classes.Dvd,</span>\n<span class=\"cm\"> Lean.Data.RBMap,</span>\n<span class=\"cm\"> Lean.ImportingFlag,</span>\n<span class=\"cm\"> Lean.Data.HashSet,</span>\n<span class=\"cm\"> Std.Lean.Name,</span>\n<span class=\"cm\"> Std.Classes.BEq,</span>\n<span class=\"cm\"> Std.Data.MLList.Basic,</span>\n<span class=\"cm\"> Init.Prelude,</span>\n<span class=\"cm\"> Lean.Compiler.LCNF.Simp.Config,</span>\n<span class=\"cm\"> Lean.Meta.TransparencyMode,</span>\n<span class=\"cm\"> Lean.Data.Rat,</span>\n<span class=\"cm\"> Mathlib.Init.Data.Nat.Notation,</span>\n<span class=\"cm\"> Std.Data.Option.Init.Lemmas,</span>\n<span class=\"cm\"> Lean.Data.LBool,</span>\n<span class=\"cm\"> Std.Lean.Parser,</span>\n<span class=\"cm\"> Lean.Util.MonadBacktrack,</span>\n<span class=\"cm\"> Lean.Data.PersistentHashMap,</span>\n<span class=\"cm\"> Std.Data.Fin.Init.Lemmas,</span>\n<span class=\"cm\"> Std.Data.Array.Init.Basic,</span>\n<span class=\"cm\"> Lean.Runtime,</span>\n<span class=\"cm\"> Lean.Compiler.FFI,</span>\n<span class=\"cm\"> Lean.InternalExceptionId,</span>\n<span class=\"cm\"> Std.Data.DList,</span>\n<span class=\"cm\"> Std.Control.ForInStep.Basic,</span>\n<span class=\"cm\"> Aesop.Percent,</span>\n<span class=\"cm\"> Lean.Data.Name,</span>\n<span class=\"cm\"> Lean.Data.FuzzyMatching,</span>\n<span class=\"cm\"> Lean.Data.AssocList,</span>\n<span class=\"cm\"> Std.Data.Prod.Lex,</span>\n<span class=\"cm\"> Lean.Data.PersistentArray]</span>\n<span class=\"cm\">-/</span>\n<span class=\"bp\">#</span><span class=\"n\">find_home</span><span class=\"bp\">!</span> <span class=\"n\">Nat.add_succ</span>\n</code></pre></div>",
        "id": 402880766,
        "sender_full_name": "Asei Inoue",
        "timestamp": 1700317289
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> </p>\n<blockquote>\n<p>I have import Mathlib.Tactic at the top of all my teaching materials :-)</p>\n</blockquote>\n<p>Oh, that might be a good idea...</p>",
        "id": 402880912,
        "sender_full_name": "Asei Inoue",
        "timestamp": 1700317411
    },
    {
        "content": "<p>Of course they won't let you do this in mathlib itself, but my experience is that in the kind of files I end up editing, all the tactics I need are imported anyway...</p>",
        "id": 402881002,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1700317452
    },
    {
        "content": "<p>The output of <code>#find_home</code> is a list of all the import-minimal files where your lemma \"should\" be able to be copy pasted and compile.  It is not perfect, but usually works.</p>\n<p><code>Nat.add_succ</code> is probably one of the first lemmas that are ever proved , so it is not so surprising that it appear in so many non-Mathlib` files.  Try something with more content to see a more useful answer.</p>",
        "id": 402886949,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1700321695
    },
    {
        "content": "<p>Thank you all ... I understand that it is not easy at present.</p>",
        "id": 402975202,
        "sender_full_name": "Asei Inoue",
        "timestamp": 1700378793
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"626349\">Asei Inoue</span> has marked this topic as resolved.</p>",
        "id": 402975207,
        "sender_full_name": "Notification Bot",
        "timestamp": 1700378798
    }
]