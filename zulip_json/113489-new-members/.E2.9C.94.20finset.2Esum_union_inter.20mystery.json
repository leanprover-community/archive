[
    {
        "content": "<p>(solved, thanks Alex!) The documentation has <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finset.sum_union_inter\">docs#finset.sum_union_inter</a> but the mathlib sources itself do not <span aria-label=\"astonished\" class=\"emoji emoji-1f632\" role=\"img\" title=\"astonished\">:astonished:</span>. The \"source\" link goes to <code>finset.prod_union_inter </code> instead.</p>\n<p>(also solved the mystery of needing <code>decidable_eq T</code>, thanks Riccardo!)</p>\n<p>In any case, I am searching for something without the interesection but then using ≤ instead of =. Is there something like the following? </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.finset.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.big_operators.order</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">sum_union_le</span> <span class=\"o\">{</span> <span class=\"n\">T</span> <span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">T</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span> <span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">T</span> <span class=\"o\">}</span> <span class=\"o\">{</span> <span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">T</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"o\">},</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"bp\">∪</span> <span class=\"n\">Y</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">sum</span> <span class=\"n\">F</span> <span class=\"bp\">≤</span> <span class=\"n\">X.sum</span> <span class=\"n\">F</span> <span class=\"bp\">+</span> <span class=\"n\">Y.sum</span> <span class=\"n\">F</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intros</span> <span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">F</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"k\">calc</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"bp\">∪</span> <span class=\"n\">Y</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">sum</span> <span class=\"n\">F</span>\n       <span class=\"bp\">≤</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"bp\">∪</span> <span class=\"n\">Y</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">sum</span> <span class=\"n\">F</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"bp\">∩</span> <span class=\"n\">Y</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">sum</span> <span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"o\">}</span>\n   <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">X.sum</span> <span class=\"n\">F</span> <span class=\"bp\">+</span> <span class=\"n\">Y.sum</span> <span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">finset.sum_union_inter</span><span class=\"o\">,</span>\n  <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 274159782,
        "sender_full_name": "Malvin Gattinger",
        "timestamp": 1646414030
    },
    {
        "content": "<p>It's probably a decidability issue. Does <code>open_locale classical</code> helps (before the lemma)?</p>",
        "id": 274160020,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1646414132
    },
    {
        "content": "<p>Even better, add <code>[decidable_eq T]</code> as assumption.</p>",
        "id": 274160167,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1646414184
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/finset.sum_union_inter\">docs#finset.sum_union_inter</a> is generated by the to_additive attribute, so the original text source for it is indeed <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finset.prod_union_inter/src\">src#finset.prod_union_inter</a>. A metaprogram is generating the declaration you see in the online docs (which is why it can often be easier to find things there)</p>",
        "id": 274160264,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1646414232
    },
    {
        "content": "<p>Aha! <code>open_locale classical</code> does help. What exactly is the syntax to add assumptions? Same as <code>@[simp]</code>? -- found it!</p>",
        "id": 274160290,
        "sender_full_name": "Malvin Gattinger",
        "timestamp": 1646414246
    },
    {
        "content": "<p>Use my second solution, otherwise you risk to suffer later on</p>",
        "id": 274160344,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1646414273
    },
    {
        "content": "<p>Oh, fancy meta programs <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 274160474,
        "sender_full_name": "Malvin Gattinger",
        "timestamp": 1646414315
    },
    {
        "content": "<p>Lean has two kinds of groups : groups with group law <code>*</code> and groups with group law <code>+</code>, and then it has a metaprogram which means that you prove the results for <code>*</code> and the <code>+</code> proofs get generated for you.</p>",
        "id": 274161596,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1646414781
    },
    {
        "content": "<p>The mind-blow emoji is missing here.</p>",
        "id": 274162023,
        "sender_full_name": "Malvin Gattinger",
        "timestamp": 1646414984
    },
    {
        "content": "<p><span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span> it works, thank you all! (I am sure there is a nicer way than the above?)</p>",
        "id": 274163610,
        "sender_full_name": "Malvin Gattinger",
        "timestamp": 1646415732
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"422703\">Malvin Gattinger</span> has marked this topic as resolved.</p>",
        "id": 274164860,
        "sender_full_name": "Notification Bot",
        "timestamp": 1646416322
    }
]