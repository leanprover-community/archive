[
    {
        "content": "<p>I'm looking for some tips on figuring out what an identifier actually refers to - or help troubleshooting what I'm perceiving as shadowing, I guess. On line 216 of the attached file, I'm getting the following error:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">tactic</span> <span class=\"bp\">'</span><span class=\"n\">apply'</span> <span class=\"n\">failed</span><span class=\"o\">,</span> <span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">unify</span>\n  <span class=\"n\">List.elem</span> <span class=\"n\">x</span> <span class=\"n\">disj</span> <span class=\"bp\">=</span> <span class=\"n\">true</span>\n<span class=\"k\">with</span>\n  <span class=\"n\">List.elem</span> <span class=\"n\">x</span> <span class=\"n\">disj</span> <span class=\"bp\">=</span> <span class=\"n\">true</span>\n</code></pre></div>\n<p>It looks like it should work... My goal state is the following:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">disj</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">AllOf</span>\n<span class=\"n\">context</span> <span class=\"o\">:</span> <span class=\"n\">Request</span>\n<span class=\"n\">h_no_match</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">conj</span> <span class=\"o\">:</span> <span class=\"n\">AllOf</span><span class=\"o\">),</span> <span class=\"n\">conj</span> <span class=\"bp\">∈</span> <span class=\"n\">disj</span> <span class=\"bp\">→</span> <span class=\"n\">AllOf.eval</span> <span class=\"n\">conj</span> <span class=\"n\">context</span> <span class=\"bp\">≠</span> <span class=\"n\">MatchResult.is_match</span>\n<span class=\"n\">h_indet</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">conj</span><span class=\"o\">,</span> <span class=\"n\">conj</span> <span class=\"bp\">∈</span> <span class=\"n\">disj</span> <span class=\"bp\">∧</span> <span class=\"n\">AllOf.eval</span> <span class=\"n\">conj</span> <span class=\"n\">context</span> <span class=\"bp\">=</span> <span class=\"n\">MatchResult.indeterminate</span>\n<span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">AllOf</span>\n<span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">disj</span> <span class=\"bp\">∧</span> <span class=\"n\">AllOf.eval</span> <span class=\"n\">x</span> <span class=\"n\">context</span> <span class=\"bp\">=</span> <span class=\"n\">MatchResult.indeterminate</span>\n<span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">List.isEmpty</span> <span class=\"n\">disj</span> <span class=\"bp\">=</span> <span class=\"n\">false</span>\n<span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">AllOf</span><span class=\"o\">),</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">disj</span> <span class=\"bp\">→</span> <span class=\"bp\">¬</span><span class=\"n\">AllOf.eval</span> <span class=\"n\">x</span> <span class=\"n\">context</span> <span class=\"bp\">=</span> <span class=\"n\">MatchResult.is_match</span>\n<span class=\"n\">hx'</span> <span class=\"o\">:</span> <span class=\"n\">AllOf.eval</span> <span class=\"n\">x</span> <span class=\"n\">context</span> <span class=\"bp\">=</span> <span class=\"n\">MatchResult.indeterminate</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">List.elem</span> <span class=\"n\">x</span> <span class=\"n\">disj</span> <span class=\"bp\">=</span> <span class=\"n\">true</span>\n</code></pre></div>\n<p>It seems like everything should be referring to the same <code>x</code> and the same <code>disj</code>, so I'm not sure what's going on. How would I figure out which <code>x</code> the goal is referring to? And how would I see if that <code>x</code> is the same as the <code>x</code> in <code>hx</code>?</p>\n<p>If this looks like a bug, I can try a newer version of Lean and report back. I'm doing this in <code>v4.2.0</code> right now.</p>\n<p><a href=\"/user_uploads/3121/x71kcF6C35ifHILItJWSmnyQ/reproducible.lean\">reproducible.lean</a></p>",
        "id": 407831378,
        "sender_full_name": "Jakob Kreuze",
        "timestamp": 1702511620
    },
    {
        "content": "<p>To save people a download:</p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>File contents</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Prod.Basic</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">MatchResult</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">is_match</span>      <span class=\"o\">:</span> <span class=\"n\">MatchResult</span>\n  <span class=\"bp\">|</span> <span class=\"n\">no_match</span>      <span class=\"o\">:</span> <span class=\"n\">MatchResult</span>\n  <span class=\"bp\">|</span> <span class=\"n\">indeterminate</span> <span class=\"o\">:</span> <span class=\"n\">MatchResult</span>\n<span class=\"n\">deriving</span> <span class=\"n\">DecidableEq</span><span class=\"o\">,</span> <span class=\"n\">BEq</span><span class=\"o\">,</span> <span class=\"n\">Repr</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">LawfulBEq</span> <span class=\"n\">MatchResult</span> <span class=\"n\">where</span>\n  <span class=\"n\">eq_of_beq</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n  <span class=\"n\">rfl</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">XmlType</span>\n  <span class=\"bp\">|</span> <span class=\"n\">string</span>            <span class=\"o\">:</span> <span class=\"n\">XmlType</span>\n  <span class=\"bp\">|</span> <span class=\"n\">boolean</span>           <span class=\"o\">:</span> <span class=\"n\">XmlType</span>\n  <span class=\"bp\">|</span> <span class=\"n\">integer</span>           <span class=\"o\">:</span> <span class=\"n\">XmlType</span>\n  <span class=\"bp\">|</span> <span class=\"n\">double</span>            <span class=\"o\">:</span> <span class=\"n\">XmlType</span>\n  <span class=\"bp\">|</span> <span class=\"n\">time</span>              <span class=\"o\">:</span> <span class=\"n\">XmlType</span>\n  <span class=\"bp\">|</span> <span class=\"n\">date</span>              <span class=\"o\">:</span> <span class=\"n\">XmlType</span>\n  <span class=\"bp\">|</span> <span class=\"n\">dateTime</span>          <span class=\"o\">:</span> <span class=\"n\">XmlType</span>\n  <span class=\"bp\">|</span> <span class=\"n\">anyURI</span>            <span class=\"o\">:</span> <span class=\"n\">XmlType</span>\n  <span class=\"bp\">|</span> <span class=\"n\">hexBinary</span>         <span class=\"o\">:</span> <span class=\"n\">XmlType</span>\n  <span class=\"bp\">|</span> <span class=\"n\">base64Binary</span>      <span class=\"o\">:</span> <span class=\"n\">XmlType</span>\n  <span class=\"bp\">|</span> <span class=\"n\">dayTimeDuration</span>   <span class=\"o\">:</span> <span class=\"n\">XmlType</span>\n  <span class=\"bp\">|</span> <span class=\"n\">yearMonthDuration</span> <span class=\"o\">:</span> <span class=\"n\">XmlType</span>\n  <span class=\"bp\">|</span> <span class=\"n\">x500Name</span>          <span class=\"o\">:</span> <span class=\"n\">XmlType</span>\n  <span class=\"bp\">|</span> <span class=\"n\">rfc822Name</span>        <span class=\"o\">:</span> <span class=\"n\">XmlType</span>\n  <span class=\"bp\">|</span> <span class=\"n\">ipAddress</span>         <span class=\"o\">:</span> <span class=\"n\">XmlType</span>\n  <span class=\"bp\">|</span> <span class=\"n\">dnsName</span>           <span class=\"o\">:</span> <span class=\"n\">XmlType</span>\n<span class=\"n\">deriving</span> <span class=\"n\">DecidableEq</span><span class=\"o\">,</span> <span class=\"n\">BEq</span><span class=\"o\">,</span> <span class=\"n\">Repr</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">LawfulBEq</span> <span class=\"n\">XmlType</span> <span class=\"n\">where</span>\n  <span class=\"n\">eq_of_beq</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">intros</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">h</span>\n    <span class=\"n\">induction</span> <span class=\"n\">a</span>\n    <span class=\"n\">all_goals</span> <span class=\"n\">induction</span> <span class=\"n\">b</span>\n    <span class=\"n\">all_goals</span>\n      <span class=\"n\">first</span>\n      <span class=\"bp\">|</span> <span class=\"n\">rfl</span>\n      <span class=\"bp\">|</span> <span class=\"n\">contradiction</span>\n  <span class=\"n\">rfl</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">intro</span> <span class=\"n\">a</span>\n    <span class=\"n\">induction</span> <span class=\"n\">a</span>\n    <span class=\"n\">all_goals</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Primitive</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span> <span class=\"n\">XmlType</span> <span class=\"bp\">×</span> <span class=\"n\">String</span>\n<span class=\"n\">deriving</span> <span class=\"n\">DecidableEq</span><span class=\"o\">,</span> <span class=\"n\">BEq</span><span class=\"o\">,</span> <span class=\"n\">Repr</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">Prod.beq_iff_fst_eq_snd_eq</span>\n  <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">BEq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">BEq</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">LawfulBEq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">LawfulBEq</span> <span class=\"n\">β</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">a</span> <span class=\"bp\">==</span> <span class=\"n\">b</span>  <span class=\"bp\">↔</span> <span class=\"n\">a.fst</span> <span class=\"bp\">==</span> <span class=\"n\">b.fst</span> <span class=\"bp\">∧</span> <span class=\"n\">a.snd</span> <span class=\"bp\">==</span> <span class=\"n\">b.snd</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">apply</span> <span class=\"n\">Iff.intro</span>\n  <span class=\"o\">{</span> <span class=\"n\">simp_all</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">beq_iff_eq</span><span class=\"o\">]</span>\n    <span class=\"n\">intro</span> <span class=\"n\">_</span>\n    <span class=\"n\">trivial</span> <span class=\"o\">}</span>\n  <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">h</span>\n    <span class=\"n\">simp_all</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">beq_iff_eq</span><span class=\"o\">,</span> <span class=\"n\">Prod.eq_iff_fst_eq_snd_eq</span><span class=\"o\">]</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">LawfulBEq</span> <span class=\"n\">Primitive</span> <span class=\"n\">where</span>\n  <span class=\"n\">eq_of_beq</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">intros</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">h</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Prod.eq_iff_fst_eq_snd_eq</span><span class=\"o\">]</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Prod.beq_iff_fst_eq_snd_eq</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">beq_iff_eq</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n    <span class=\"n\">assumption</span>\n  <span class=\"n\">rfl</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">intro</span> <span class=\"n\">a</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Prod.beq_iff_fst_eq_snd_eq</span><span class=\"o\">]</span>\n    <span class=\"n\">apply</span> <span class=\"n\">And.intro</span>\n    <span class=\"n\">all_goals</span> <span class=\"n\">simp</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">Bag</span> <span class=\"n\">where</span>\n  <span class=\"n\">contents</span><span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Primitive</span>\n<span class=\"n\">deriving</span> <span class=\"n\">DecidableEq</span><span class=\"o\">,</span> <span class=\"n\">Repr</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Bag.beq</span> <span class=\"o\">(</span><span class=\"n\">b₁</span> <span class=\"n\">b₂</span> <span class=\"o\">:</span> <span class=\"n\">Bag</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span> <span class=\"o\">:=</span>\n  <span class=\"n\">b₁.contents.all</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">b₂.contents.count</span> <span class=\"n\">x</span> <span class=\"bp\">==</span> <span class=\"n\">b₁.contents.count</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">BEq</span> <span class=\"n\">Bag</span> <span class=\"n\">where</span>\n  <span class=\"n\">beq</span> <span class=\"o\">:=</span> <span class=\"n\">Bag.beq</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">Value</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">primitive</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">Primitive</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Value</span>\n  <span class=\"bp\">|</span> <span class=\"n\">bag</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Bag</span><span class=\"o\">)</span>             <span class=\"o\">:</span> <span class=\"n\">Value</span>\n<span class=\"n\">deriving</span> <span class=\"n\">DecidableEq</span><span class=\"o\">,</span> <span class=\"n\">BEq</span><span class=\"o\">,</span> <span class=\"n\">Repr</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Inhabited</span> <span class=\"n\">Value</span> <span class=\"n\">where</span>\n  <span class=\"n\">default</span> <span class=\"o\">:=</span> <span class=\"n\">Value.primitive</span> <span class=\"o\">(</span><span class=\"n\">XmlType.boolean</span><span class=\"o\">,</span> <span class=\"s2\">\"Indeterminate\"</span><span class=\"o\">)</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">Attribute</span> <span class=\"n\">where</span>\n  <span class=\"n\">category</span>   <span class=\"o\">:</span> <span class=\"n\">String</span>\n  <span class=\"n\">identifier</span> <span class=\"o\">:</span> <span class=\"n\">String</span>\n  <span class=\"n\">issuer</span>     <span class=\"o\">:</span> <span class=\"n\">Option</span> <span class=\"n\">String</span>\n  <span class=\"n\">value</span>      <span class=\"o\">:</span> <span class=\"n\">Primitive</span>\n<span class=\"n\">deriving</span> <span class=\"n\">DecidableEq</span><span class=\"o\">,</span> <span class=\"n\">BEq</span><span class=\"o\">,</span> <span class=\"n\">Repr</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">LawfulBEq</span> <span class=\"n\">Attribute</span> <span class=\"n\">where</span>\n  <span class=\"n\">eq_of_beq</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n  <span class=\"n\">rfl</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Request</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span> <span class=\"n\">List</span> <span class=\"n\">Attribute</span>\n<span class=\"n\">deriving</span> <span class=\"n\">Repr</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Identifier</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span> <span class=\"n\">String</span>\n<span class=\"n\">deriving</span> <span class=\"n\">DecidableEq</span><span class=\"o\">,</span> <span class=\"n\">BEq</span><span class=\"o\">,</span> <span class=\"n\">Repr</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">AttributeDesignator</span> <span class=\"n\">where</span>\n  <span class=\"n\">category</span>        <span class=\"o\">:</span> <span class=\"n\">String</span>\n  <span class=\"n\">identifier</span>      <span class=\"o\">:</span> <span class=\"n\">String</span>\n  <span class=\"n\">type</span>            <span class=\"o\">:</span> <span class=\"n\">XmlType</span>\n  <span class=\"n\">issuer</span>          <span class=\"o\">:</span> <span class=\"n\">Option</span> <span class=\"n\">String</span>\n  <span class=\"n\">must_be_present</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span>\n<span class=\"n\">deriving</span> <span class=\"n\">DecidableEq</span><span class=\"o\">,</span> <span class=\"n\">BEq</span><span class=\"o\">,</span> <span class=\"n\">Repr</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">Match</span> <span class=\"n\">where</span>\n  <span class=\"n\">function</span>   <span class=\"o\">:</span> <span class=\"n\">Identifier</span>\n  <span class=\"n\">designator</span> <span class=\"o\">:</span> <span class=\"n\">AttributeDesignator</span>\n  <span class=\"n\">value</span>      <span class=\"o\">:</span> <span class=\"n\">Value</span>\n<span class=\"n\">deriving</span> <span class=\"n\">DecidableEq</span><span class=\"o\">,</span> <span class=\"n\">BEq</span><span class=\"o\">,</span> <span class=\"n\">Repr</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">Match</span>\n  <span class=\"kd\">def</span> <span class=\"n\">eval</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">Match</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">context</span> <span class=\"o\">:</span> <span class=\"n\">Request</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Option</span> <span class=\"n\">Value</span> <span class=\"o\">:=</span>\n    <span class=\"k\">match</span> <span class=\"n\">m</span> <span class=\"k\">with</span>\n      <span class=\"bp\">|</span> <span class=\"n\">Match.mk</span> <span class=\"n\">fn</span> <span class=\"n\">designator</span> <span class=\"n\">value</span> <span class=\"bp\">=&gt;</span>\n        <span class=\"k\">match</span> <span class=\"n\">designator.eval</span> <span class=\"n\">context</span> <span class=\"k\">with</span>\n          <span class=\"bp\">|</span> <span class=\"n\">Sum.inl</span> <span class=\"n\">result</span> <span class=\"bp\">=&gt;</span>\n            <span class=\"k\">let</span> <span class=\"n\">results</span> <span class=\"o\">:=</span> <span class=\"k\">match</span> <span class=\"n\">result</span> <span class=\"k\">with</span>\n            <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">Value.bag</span> <span class=\"o\">(</span><span class=\"n\">Bag.mk</span> <span class=\"n\">attrs</span><span class=\"o\">))</span> <span class=\"bp\">=&gt;</span>\n              <span class=\"n\">attrs.map</span> <span class=\"k\">fun</span> <span class=\"n\">attr</span> <span class=\"bp\">=&gt;</span>\n                <span class=\"k\">let</span> <span class=\"n\">args</span> <span class=\"o\">:=</span> <span class=\"o\">[</span><span class=\"n\">value</span><span class=\"o\">,</span> <span class=\"n\">Value.primitive</span> <span class=\"n\">attr</span><span class=\"o\">]</span>\n                <span class=\"o\">(</span><span class=\"n\">Expression.apply</span> <span class=\"n\">fn</span> <span class=\"n\">args</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">eval</span> <span class=\"n\">context</span>\n            <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">Value.primitive</span> <span class=\"n\">attr</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>\n              <span class=\"k\">let</span> <span class=\"n\">args</span> <span class=\"o\">:=</span> <span class=\"o\">[</span><span class=\"n\">value</span><span class=\"o\">,</span> <span class=\"n\">Value.primitive</span> <span class=\"n\">attr</span><span class=\"o\">]</span>\n              <span class=\"o\">[(</span><span class=\"n\">Expression.apply</span> <span class=\"n\">fn</span> <span class=\"n\">args</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">eval</span> <span class=\"n\">context</span><span class=\"o\">]</span>\n\n            <span class=\"k\">let</span> <span class=\"n\">results</span> <span class=\"o\">:=</span> <span class=\"n\">results.map</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Option</span> <span class=\"n\">Value</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Value</span><span class=\"o\">))</span>\n            <span class=\"k\">if</span> <span class=\"n\">results.elem</span> <span class=\"o\">(</span><span class=\"n\">Value.primitive</span> <span class=\"o\">(</span><span class=\"bp\">#&lt;</span><span class=\"n\">XmlType.boolean</span><span class=\"o\">,</span> <span class=\"s2\">\"True\"</span><span class=\"bp\">&gt;</span><span class=\"o\">))</span> <span class=\"k\">then</span>\n              <span class=\"o\">(</span><span class=\"n\">Value.primitive</span> <span class=\"o\">(</span><span class=\"bp\">#&lt;</span><span class=\"n\">XmlType.boolean</span><span class=\"o\">,</span> <span class=\"s2\">\"True\"</span><span class=\"bp\">&gt;</span><span class=\"o\">))</span>\n            <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"n\">results.elem</span> <span class=\"o\">(</span><span class=\"n\">Value.primitive</span> <span class=\"o\">(</span><span class=\"bp\">#&lt;</span><span class=\"n\">XmlType.boolean</span><span class=\"o\">,</span> <span class=\"s2\">\"Indeterminate\"</span><span class=\"bp\">&gt;</span><span class=\"o\">))</span> <span class=\"k\">then</span>\n              <span class=\"o\">(</span><span class=\"n\">Value.primitive</span> <span class=\"o\">(</span><span class=\"bp\">#&lt;</span><span class=\"n\">XmlType.boolean</span><span class=\"o\">,</span> <span class=\"s2\">\"Indeterminate\"</span><span class=\"bp\">&gt;</span><span class=\"o\">))</span>\n            <span class=\"k\">else</span>\n              <span class=\"n\">Value.primitive</span> <span class=\"o\">(</span><span class=\"bp\">#&lt;</span><span class=\"n\">XmlType.boolean</span><span class=\"o\">,</span> <span class=\"s2\">\"False\"</span><span class=\"bp\">&gt;</span><span class=\"o\">)</span>\n          <span class=\"bp\">|</span> <span class=\"n\">Sum.inr</span> <span class=\"n\">status</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Option.none</span>\n<span class=\"kd\">end</span> <span class=\"n\">Match</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">LawfulBEq</span> <span class=\"n\">Match</span> <span class=\"n\">where</span>\n  <span class=\"n\">eq_of_beq</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n  <span class=\"n\">rfl</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">AllOf</span>  <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span> <span class=\"n\">List</span> <span class=\"n\">Match</span>\n<span class=\"n\">deriving</span> <span class=\"n\">DecidableEq</span><span class=\"o\">,</span> <span class=\"n\">BEq</span><span class=\"o\">,</span> <span class=\"n\">Repr</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">AllOf</span>\n  <span class=\"kd\">def</span> <span class=\"n\">eval</span> <span class=\"o\">(</span><span class=\"n\">conj</span> <span class=\"o\">:</span> <span class=\"n\">AllOf</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">context</span> <span class=\"o\">:</span> <span class=\"n\">Request</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">MatchResult</span> <span class=\"o\">:=</span>\n    <span class=\"k\">let</span> <span class=\"n\">result</span> <span class=\"o\">:=</span> <span class=\"n\">conj.map</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x.eval</span> <span class=\"n\">context</span><span class=\"o\">)</span>\n    <span class=\"k\">let</span> <span class=\"n\">result</span> <span class=\"o\">:=</span> <span class=\"n\">result.map</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Option</span> <span class=\"n\">Value</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x.get</span><span class=\"bp\">!</span><span class=\"o\">)</span>\n    <span class=\"k\">if</span> <span class=\"n\">result.all</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span> <span class=\"bp\">==</span> <span class=\"n\">Value.primitive</span> <span class=\"o\">(</span><span class=\"n\">XmlType.boolean</span><span class=\"o\">,</span> <span class=\"s2\">\"True\"</span><span class=\"o\">))</span> <span class=\"k\">then</span> <span class=\"n\">MatchResult.is_match</span>\n    <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"n\">result.all</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span> <span class=\"bp\">!=</span> <span class=\"n\">Value.primitive</span> <span class=\"o\">(</span><span class=\"n\">XmlType.boolean</span><span class=\"o\">,</span> <span class=\"s2\">\"False\"</span><span class=\"o\">))</span> <span class=\"bp\">∧</span>\n            <span class=\"n\">result.elem</span> <span class=\"o\">(</span><span class=\"n\">Value.primitive</span> <span class=\"o\">(</span><span class=\"n\">XmlType.boolean</span><span class=\"o\">,</span> <span class=\"s2\">\"Indeterminate\"</span><span class=\"o\">))</span>\n         <span class=\"k\">then</span> <span class=\"n\">MatchResult.indeterminate</span>\n    <span class=\"k\">else</span> <span class=\"n\">MatchResult.no_match</span>\n<span class=\"kd\">end</span> <span class=\"n\">AllOf</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">LawfulBEq</span> <span class=\"n\">AllOf</span> <span class=\"n\">where</span>\n  <span class=\"n\">eq_of_beq</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n  <span class=\"n\">rfl</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">AnyOf</span>  <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span> <span class=\"n\">List</span> <span class=\"n\">AllOf</span>\n<span class=\"n\">deriving</span> <span class=\"n\">DecidableEq</span><span class=\"o\">,</span> <span class=\"n\">BEq</span><span class=\"o\">,</span> <span class=\"n\">Repr</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">AnyOf</span>\n  <span class=\"kd\">def</span> <span class=\"n\">eval</span> <span class=\"o\">(</span><span class=\"n\">disj</span> <span class=\"o\">:</span> <span class=\"n\">AnyOf</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">context</span> <span class=\"o\">:</span> <span class=\"n\">Request</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">MatchResult</span> <span class=\"o\">:=</span>\n    <span class=\"k\">if</span> <span class=\"n\">disj.isEmpty</span> <span class=\"k\">then</span> <span class=\"n\">MatchResult.is_match</span> <span class=\"k\">else</span>\n      <span class=\"k\">let</span> <span class=\"n\">result</span> <span class=\"o\">:=</span> <span class=\"n\">disj.map</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x.eval</span> <span class=\"n\">context</span><span class=\"o\">)</span>\n      <span class=\"k\">if</span> <span class=\"n\">result.any</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span> <span class=\"bp\">==</span> <span class=\"n\">MatchResult.is_match</span><span class=\"o\">)</span> <span class=\"k\">then</span> <span class=\"n\">MatchResult.is_match</span>\n      <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"n\">result.elem</span> <span class=\"n\">MatchResult.indeterminate</span> <span class=\"k\">then</span> <span class=\"n\">MatchResult.indeterminate</span>\n      <span class=\"k\">else</span> <span class=\"n\">MatchResult.no_match</span>\n<span class=\"kd\">end</span> <span class=\"n\">AnyOf</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">LawfulBEq</span> <span class=\"n\">AnyOf</span> <span class=\"n\">where</span>\n  <span class=\"n\">eq_of_beq</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n  <span class=\"n\">rfl</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">helper</span> <span class=\"o\">{</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">BEq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">LawfulBEq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">BEq</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">LawfulBEq</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">xs</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">List.elem</span> <span class=\"n\">x</span> <span class=\"n\">xs</span> <span class=\"bp\">→</span> <span class=\"n\">List.elem</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">List.map</span> <span class=\"n\">f</span> <span class=\"n\">xs</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">induction</span> <span class=\"n\">xs</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">nil</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">simp</span>\n  <span class=\"bp\">|</span> <span class=\"n\">cons</span> <span class=\"n\">hd</span> <span class=\"n\">tl</span> <span class=\"n\">ih</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">intro</span> <span class=\"n\">h</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">List.elem_cons</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"bp\">*</span>\n    <span class=\"n\">cases</span> <span class=\"n\">h</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"n\">inl</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"n\">apply</span> <span class=\"n\">Or.intro_left</span>\n      <span class=\"n\">exact</span> <span class=\"n\">congrArg</span> <span class=\"n\">f</span> <span class=\"n\">h</span>\n    <span class=\"bp\">|</span> <span class=\"n\">inr</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"n\">apply</span> <span class=\"n\">Or.intro_right</span>\n      <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">List.contains</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"bp\">*</span>\n      <span class=\"n\">apply</span> <span class=\"n\">ih</span> <span class=\"n\">h</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">table_1_target_match_table₂</span> <span class=\"o\">(</span><span class=\"n\">disj</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">AllOf</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">context</span> <span class=\"o\">:</span> <span class=\"n\">Request</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">conj</span> <span class=\"o\">:</span> <span class=\"n\">AllOf</span><span class=\"o\">),</span> <span class=\"n\">conj</span> <span class=\"bp\">∈</span> <span class=\"n\">disj</span> <span class=\"bp\">→</span> <span class=\"n\">conj.eval</span> <span class=\"n\">context</span> <span class=\"bp\">≠</span> <span class=\"n\">MatchResult.is_match</span><span class=\"o\">)</span>\n  <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">conj</span> <span class=\"o\">:</span> <span class=\"n\">AllOf</span><span class=\"o\">),</span> <span class=\"n\">conj</span> <span class=\"bp\">∈</span> <span class=\"n\">disj</span> <span class=\"bp\">∧</span> <span class=\"n\">conj.eval</span> <span class=\"n\">context</span> <span class=\"bp\">=</span> <span class=\"n\">MatchResult.indeterminate</span><span class=\"o\">)</span>\n  <span class=\"bp\">→</span> <span class=\"n\">AnyOf.eval</span> <span class=\"n\">disj</span> <span class=\"n\">context</span> <span class=\"bp\">=</span> <span class=\"n\">MatchResult.is_match</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">intros</span> <span class=\"n\">h_no_match</span> <span class=\"n\">h_indet</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">AnyOf.eval</span><span class=\"o\">]</span>\n\n    <span class=\"k\">let</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">hx</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">h_indet</span>\n\n    <span class=\"n\">intros</span> <span class=\"n\">_</span> <span class=\"n\">h</span>\n    <span class=\"k\">have</span> <span class=\"n\">hbranch</span> <span class=\"o\">:</span> <span class=\"n\">List.elem</span> <span class=\"n\">MatchResult.indeterminate</span> <span class=\"o\">(</span><span class=\"n\">List.map</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">AllOf.eval</span> <span class=\"n\">x</span> <span class=\"n\">context</span><span class=\"o\">)</span> <span class=\"n\">disj</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">true</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n      <span class=\"k\">have</span> <span class=\"n\">hx'</span> <span class=\"o\">:</span> <span class=\"n\">AllOf.eval</span> <span class=\"n\">x</span> <span class=\"n\">context</span> <span class=\"bp\">=</span> <span class=\"n\">MatchResult.indeterminate</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n        <span class=\"n\">exact</span> <span class=\"n\">hx.right</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">hx'</span><span class=\"o\">]</span>\n      <span class=\"n\">apply</span> <span class=\"n\">helper</span> <span class=\"n\">x</span> <span class=\"n\">disj</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">y</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">y.eval</span> <span class=\"n\">context</span><span class=\"o\">)</span>\n      <span class=\"n\">apply</span> <span class=\"n\">List.elem_eq_true_of_mem</span> <span class=\"n\">hx.left</span>\n</code></pre></div>\n</div></div>",
        "id": 407833720,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1702512781
    },
    {
        "content": "<p>Can you tell us which line of the file you're talking about?</p>",
        "id": 407833863,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1702512857
    },
    {
        "content": "<p>Very last one - <code>apply List.elem_eq_true_of_mem hx.left</code>. Line 216</p>",
        "id": 407833909,
        "sender_full_name": "Jakob Kreuze",
        "timestamp": 1702512889
    },
    {
        "content": "<p>It works for me without (that) issue in the web editor, which is using a very recently lean/mathlib version. Note that telling us the lean version isn't enough; if you import <code>Mathlib</code>, we need the mathlib commit to fully reproduce.</p>",
        "id": 407834158,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1702513019
    },
    {
        "content": "<p>You can inspect what went wrong with your version by using <code>set_option pp.explicit true</code> before the lemma in question</p>",
        "id": 407834361,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1702513113
    },
    {
        "content": "<p>Then the error should be clearer</p>",
        "id": 407834368,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1702513118
    },
    {
        "content": "<p>I had mathlib pinned to <code>v4.2.0</code>.<br>\nNot exactly related, but which web editor is this? I didn't know there was one for Lean 4</p>",
        "id": 407834406,
        "sender_full_name": "Jakob Kreuze",
        "timestamp": 1702513140
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/fBka8YRC9bc1bfp0KTb-ibZY/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/fBka8YRC9bc1bfp0KTb-ibZY/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/fBka8YRC9bc1bfp0KTb-ibZY/image.png\"></a></div>",
        "id": 407834585,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1702513230
    },
    {
        "content": "<p>Neat! Thank you</p>",
        "id": 407834628,
        "sender_full_name": "Jakob Kreuze",
        "timestamp": 1702513254
    },
    {
        "content": "<p>Looks like it works in Lean/mathlib <code>v4.3.0</code> so maybe this is a bug that's since been fixed. Either way, this lets me get back to work. Appreciate the troubleshooting help</p>",
        "id": 407835111,
        "sender_full_name": "Jakob Kreuze",
        "timestamp": 1702513513
    },
    {
        "content": "<p>Does <code>set_option pp.explicit true</code> show the real cause? Or worst case, pp.all?</p>",
        "id": 408015164,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1702576893
    },
    {
        "content": "<p>One good tool for debugging these unification issues is the <code>convert</code> tactic. It looks like that <code>apply</code> could have been an <code>exact</code>, and for a non-unifying <code>exact</code> what you do is use <code>convert</code> instead.</p>",
        "id": 408096486,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1702609844
    },
    {
        "content": "<p>Either you get new goals showing what wasn't defeq to what, or <code>convert</code> magically solves the goal and, while you don't learn anything, at least the goal is solved.</p>",
        "id": 408097143,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1702610098
    }
]