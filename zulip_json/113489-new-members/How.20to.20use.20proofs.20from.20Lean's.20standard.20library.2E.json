[
    {
        "content": "<p>I read in Theorem Proving in Lean 4 <a href=\"https://leanprover.github.io/theorem_proving_in_lean4/propositions_and_proofs.html\">that</a> </p>\n<blockquote>\n<p>Lean's standard library contains proofs of many valid statements of propositional logic, all of which you are free to use in proofs of your own.</p>\n</blockquote>\n<p>But I could not find anywhere of how to use any of the proofs listed in the document. Can anyone help me find how to use, say something like <br>\n<code>p ∧ q ↔ q ∧ p</code>?</p>",
        "id": 372501935,
        "sender_full_name": "newptcai",
        "timestamp": 1688545251
    },
    {
        "content": "<p>If you have a lemma <code>foo : bar ↔ baz</code> you will typically use it as <code>rw [foo]</code> or similar.</p>",
        "id": 372504225,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1688545759
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=and_comm#doc\">docs#and_comm</a> is <code>a ∧ b ↔ b ∧ a</code></p>",
        "id": 372505816,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1688546085
    },
    {
        "content": "<p>(I guess this one is in the std4 library rather than Lean 4 itself. If you are using mathlib, then you definitely have <code>and_comm</code>.)</p>",
        "id": 372506273,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1688546180
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/113489-new-members/topic/How.20to.20use.20proofs.20from.20Lean's.20standard.20library.2E/near/372505816\">said</a>:</p>\n<blockquote>\n<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=and_comm#doc\">docs#and_comm</a> is <code>a ∧ b ↔ b ∧ a</code></p>\n</blockquote>\n<p>Thanks. But how can I load it in my .lean file?</p>",
        "id": 372506339,
        "sender_full_name": "newptcai",
        "timestamp": 1688546196
    },
    {
        "content": "<p>Have you done any exercises yet? (Do you have a working Lean environment?)</p>",
        "id": 372506635,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1688546274
    },
    {
        "content": "<p>First, show us your <code>lakefile.lean</code>.</p>",
        "id": 372506642,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1688546276
    },
    {
        "content": "<p><code>And.comm</code> does not have to be imported</p>",
        "id": 372506982,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1688546348
    },
    {
        "content": "<p>Kyle, you're referring to Lean 3 here.</p>",
        "id": 372507351,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1688546429
    },
    {
        "content": "<p>The question is explicitly about Lean 4.</p>",
        "id": 372507397,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1688546438
    },
    {
        "content": "<p>I am doing the exercise at the end of <a href=\"https://leanprover.github.io/theorem_proving_in_lean4/propositions_and_proofs.html\">this page</a><br>\nHere's my code.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">and_comm</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"n\">q</span> <span class=\"bp\">→</span> <span class=\"n\">q</span> <span class=\"bp\">∧</span> <span class=\"n\">p</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"n\">q</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"k\">have</span> <span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"n\">h.left</span>\n      <span class=\"k\">have</span> <span class=\"n\">hq</span> <span class=\"o\">:</span> <span class=\"n\">q</span> <span class=\"o\">:=</span> <span class=\"n\">h.right</span>\n      <span class=\"o\">⟨</span><span class=\"n\">hq</span><span class=\"o\">,</span> <span class=\"n\">hp</span><span class=\"o\">⟩)</span>\n\n<span class=\"c1\">-- commutativity of ∧ and ∨</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"n\">q</span> <span class=\"bp\">↔</span> <span class=\"n\">q</span> <span class=\"bp\">∧</span> <span class=\"n\">p</span> <span class=\"o\">:=</span>\n  <span class=\"n\">Iff.intro</span>\n    <span class=\"o\">(</span><span class=\"n\">and_comm</span> <span class=\"n\">p</span> <span class=\"n\">q</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">and_comm</span> <span class=\"n\">q</span> <span class=\"n\">p</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>I was just wonder if this has already been implemented in Lean so I can use directly.</p>",
        "id": 372507464,
        "sender_full_name": "newptcai",
        "timestamp": 1688546456
    },
    {
        "content": "<p>(<span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> the docs linkifier is for the mathlib4 docs now)</p>",
        "id": 372507626,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1688546493
    },
    {
        "content": "<p>Oh right, I need to get used to this.</p>",
        "id": 372507751,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1688546520
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"630021\">@newptcai</span> Sebastian pointed out that <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=And.comm#doc\">docs#And.comm</a> should be available to you</p>",
        "id": 372507868,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1688546541
    },
    {
        "content": "<p>Thank you all. This seems to work</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"n\">q</span> <span class=\"bp\">↔</span> <span class=\"n\">q</span> <span class=\"bp\">∧</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"n\">And.comm</span>\n</code></pre></div>",
        "id": 372508803,
        "sender_full_name": "newptcai",
        "timestamp": 1688546743
    },
    {
        "content": "<p>[redacted] (sorry about that)</p>",
        "id": 385000572,
        "sender_full_name": "Alexander Lucas",
        "timestamp": 1692075056
    }
]