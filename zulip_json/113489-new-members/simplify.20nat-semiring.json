[
    {
        "content": "<p>Another beginners question: what is the incantation to tell the simplifier that nat is a smearing but if possible nothing else.</p>",
        "id": 209119232,
        "sender_full_name": "Thorsten Altenkirch",
        "timestamp": 1599239812
    },
    {
        "content": "<p>basically I need that 2<em>(x+1) = 2</em>x+2</p>",
        "id": 209119387,
        "sender_full_name": "Thorsten Altenkirch",
        "timestamp": 1599239911
    },
    {
        "content": "<p>but because I am going to use this in my course I don't want any additional cleverness.</p>",
        "id": 209119415,
        "sender_full_name": "Thorsten Altenkirch",
        "timestamp": 1599239931
    },
    {
        "content": "<p>We gave up trying to make the simplifier prove things about semirings and someone wrote a <code>ring</code> tactic instead.</p>",
        "id": 209120695,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1599240664
    },
    {
        "content": "<p>(BTW you can quote equations involving multiplication by enclosing them in <code> ` </code> quotes, like <code>2*(x+1)=2*x+2</code>; then Zulip doesn't think it's <em>emphasis</em>). (You can look at the source of what other people post too)</p>",
        "id": 209120817,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1599240733
    },
    {
        "content": "<p>Distributivity is apparently what is missing in the simplifier:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">=</span><span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">x</span><span class=\"bp\">+</span><span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">mul_add</span><span class=\"o\">]</span>\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">=</span><span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">x</span><span class=\"bp\">+</span><span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">ring</span>\n</code></pre></div>",
        "id": 209121047,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1599240878
    },
    {
        "content": "<p>Import-free: <code>example (x : ℕ) : 2*(x+1)=2*x+2 := by simp [nat.left_distrib, nat.mul_one]</code></p>",
        "id": 209121291,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1599241030
    },
    {
        "content": "<p>For more control over what lemmas the simplifier uses, it's possible to create a custom simp attribute <code>semiring_simps</code> and then tag all the lemmas you want to use with it.  Then you could write <code>simp only with semiring_simps</code> (or define a new tactic <code>semiring_simp</code> that does the same). See <a href=\"https://leanprover-community.github.io/mathlib_docs/commands.html#mk_simp_attribute\">mk_simp_attribute</a>.</p>",
        "id": 209122040,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1599241520
    },
    {
        "content": "<p>yes ring is easier - no problem with this. But you can still use it to solve equations over nat.</p>",
        "id": 209129459,
        "sender_full_name": "Thorsten Altenkirch",
        "timestamp": 1599245929
    }
]