[
    {
        "content": "<p>Most of my errors are along the lines of</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">(</span><span class=\"n\">deterministic</span><span class=\"o\">)</span> <span class=\"n\">timeout</span> <span class=\"n\">at</span> <span class=\"bp\">'</span><span class=\"n\">whnf'</span><span class=\"o\">,</span> <span class=\"n\">maximum</span> <span class=\"n\">number</span> <span class=\"n\">of</span> <span class=\"n\">heartbeats</span> <span class=\"o\">(</span><span class=\"mi\">200000</span><span class=\"o\">)</span> <span class=\"n\">has</span> <span class=\"n\">been</span> <span class=\"n\">reached</span> <span class=\"o\">(</span><span class=\"n\">use</span> <span class=\"bp\">'</span><span class=\"kd\">set_option</span> <span class=\"n\">maxHeartbeats</span> <span class=\"bp\">&lt;</span><span class=\"n\">num</span><span class=\"bp\">&gt;'</span> <span class=\"n\">to</span> <span class=\"n\">set</span> <span class=\"n\">the</span> <span class=\"n\">limit</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>(also at <code>'isDefEq'</code>)</p>\n<p>I can try to provide a repro if helpful, but I'm curious to know what the heartbeats are, and if there's a classic cause for those</p>",
        "id": 327135011,
        "sender_full_name": "Jonathan Protzenko",
        "timestamp": 1676058937
    },
    {
        "content": "<p>There could be all manner of reasons for this. Why not post a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> ? Maybe something's in a loop, maybe something's taking a long time.</p>",
        "id": 327136715,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1676059473
    },
    {
        "content": "<p>heartbeats are lean doing stuff</p>",
        "id": 327136927,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1676059556
    },
    {
        "content": "<p>I think the question is about the concept of deterministic timeouts. I was puzzled by these for a very long time!</p>",
        "id": 327137175,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1676059649
    },
    {
        "content": "<p>That said, I have no idea what heartbeats are. Maybe it is something specific to Lean 4.</p>",
        "id": 327137301,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1676059689
    },
    {
        "content": "<p>A heartbeat is a step of some algorithm, like simplifier, type class resolution or checking def equality (<code>isDefEq</code>). In certain cases these do not have to terminate or they can take too long, so there is a cap on how many steps(heartbeats) the algorithm can take.</p>\n<p>The timeout error indicates that this maximum cap has been reached.</p>",
        "id": 327141206,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1676061134
    },
    {
        "content": "<p>The way to deal with it is to turn on tracing(place these lines anywhere in the file before the error):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">set_option</span> <span class=\"n\">trace.Meta.whnf</span> <span class=\"n\">true</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">trace.Meta.isDefEq</span> <span class=\"n\">true</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">trace.Meta.synthInstance</span> <span class=\"n\">true</span>\n</code></pre></div>\n<p>(usually you turn on only one of these)<br>\nInspect what is going on and fix it.</p>\n<p>A quick fix can be to increase the maximum number of heartbeats:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">set_option</span> <span class=\"n\">maxHeartbeats</span> <span class=\"mi\">1000000</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">synthInstance.maxHeartbeats</span> <span class=\"mi\">100000</span>\n</code></pre></div>\n<p>but that is usually bad idea as it can take a long time.</p>\n<p>Actually I usually decrease the number of heartbeats to have shorter traces, then they are easier to read and navigate.</p>",
        "id": 327142337,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1676061548
    },
    {
        "content": "<p>A simple example with type class timeout</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">C</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span>\n<span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">C</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)]</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"o\">⟨⟩</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">trace.Meta.synthInstance</span> <span class=\"n\">true</span> <span class=\"k\">in</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">synthInstance.maxHeartbeats</span> <span class=\"mi\">100</span> <span class=\"k\">in</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">infer_instance</span>\n</code></pre></div>",
        "id": 327142766,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1676061710
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"342995\">Jonathan Protzenko</span> <a href=\"#narrow/stream/113489-new-members/topic/what.20are.20heartbeats.3F.20I'm.20getting.20a.20series.20of.20errors/near/327135011\">said</a>:</p>\n<blockquote>\n<p>I'm curious to know what the heartbeats are, and if there's a classic cause for those</p>\n</blockquote>\n<p>Trying to unfold a well-founded definition using <code>simp</code> is one of them (you can use <code>rw [&lt;def&gt;]</code> instead).</p>",
        "id": 327144199,
        "sender_full_name": "Chris Bailey",
        "timestamp": 1676062282
    },
    {
        "content": "<p>Literally anything can cause this. A side effect you might have noticed is that Lean is slow</p>",
        "id": 327144431,
        "sender_full_name": "Reid Barton",
        "timestamp": 1676062361
    },
    {
        "content": "<p>if you're using mathlib4, then updating to the latest version (&lt;4 hours old) might give you a significant increase in efficiency (~30%), which might help in your case.</p>",
        "id": 327154496,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1676066539
    },
    {
        "content": "<p>thanks all, it's not easy to minimize, but I think I'm basically trying to reduce a term that's too big</p>",
        "id": 327158158,
        "sender_full_name": "Jonathan Protzenko",
        "timestamp": 1676068201
    },
    {
        "content": "<p>so things are probably not reducing the way I think they ought to</p>",
        "id": 327158224,
        "sender_full_name": "Jonathan Protzenko",
        "timestamp": 1676068210
    },
    {
        "content": "<p>I'll try to debug using your advice... thanks</p>",
        "id": 327158247,
        "sender_full_name": "Jonathan Protzenko",
        "timestamp": 1676068218
    },
    {
        "content": "<p>Please my lean 4 just stopped working. Any solution?</p>",
        "id": 329712988,
        "sender_full_name": "David⚛️",
        "timestamp": 1677157478
    },
    {
        "content": "<p>Can you identify which lines of code are causing the timeout?</p>",
        "id": 329715418,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1677158151
    }
]