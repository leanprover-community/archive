[
    {
        "content": "<p>Hi, I am working with polynomials over the rationals, and for composing polynomials there are two ways as far as I know: <code>g.aeval f</code> or <code>f.comp g</code>. Is there any preferences on which one should be used?</p>",
        "id": 323798438,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1674755346
    },
    {
        "content": "<p>I'd say definitely <code>comp</code> since its name is more suggestive of the purpose :)</p>",
        "id": 323801506,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1674756159
    },
    {
        "content": "<p>Ah okay!</p>",
        "id": 323802372,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1674756361
    },
    {
        "content": "<p>One other advantage in the general case is that <code>comp</code> works in a non-commutative setting, while the <code>a</code> of <code>aeval</code> refers to algebras, so it assumes the base ring is commutative.</p>",
        "id": 323802556,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1674756398
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 323808766,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1674757906
    },
    {
        "content": "<p>Do we have the lemma linking <code>aeval</code> and <code>comp</code>?</p>",
        "id": 323812485,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1674758903
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">]}</span> <span class=\"o\">:</span> <span class=\"n\">g.aeval</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">f.comp</span> <span class=\"n\">g</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">exact</span> <span class=\"n\">rfl</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 323817509,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1674760343
    },
    {
        "content": "<p>Ah! That was easy enough</p>",
        "id": 323817765,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1674760414
    },
    {
        "content": "<p>By the way, this works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">]}</span> <span class=\"o\">:</span> <span class=\"n\">g.aeval</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">f.comp</span> <span class=\"n\">g</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 323817877,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1674760444
    },
    {
        "content": "<p>Is that one of the non-tactic modes? I still haven't read about them, it seems a bit mysterious how it works</p>",
        "id": 323818670,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1674760619
    },
    {
        "content": "<p>I tried something like <code>:= simp</code> but it doesn't work</p>",
        "id": 323818710,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1674760628
    },
    {
        "content": "<p><code>rfl</code> is <a href=\"https://leanprover-community.github.io/mathlib_docs/find/eq.rfl\">docs#eq.rfl</a></p>",
        "id": 323818801,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1674760668
    },
    {
        "content": "<p>Gareth, yes, that's a term mode proof. When you do <code>exact ...</code> the thing that follows is a term. So when you do <code>begin</code> you enter tactic mode, but then <code>exact</code> takes you back into term mode, hence you might as well have stayed in term mode.</p>",
        "id": 323820105,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1674761060
    },
    {
        "content": "<p><code>:= simp</code> doesn't work because after the <code>:=</code> you're in term mode, and <code>simp</code> is a tactic. <code>:= by simp</code> might work; <code>by</code> is another way of switching into tactic mode.</p>",
        "id": 323926060,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1674774041
    }
]