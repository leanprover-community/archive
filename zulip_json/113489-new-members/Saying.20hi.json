[
    {
        "content": "<p>Hi everyone, just wanted to quickly introduce myself! I'm Rick, a MSc student in robotics with an interest in maths and CS. I came across Lean a while ago, and I've got some ideas about building a mathematical knowledgebase using Lean. Currently trying to learn Lean to see if the ideas make any sense <span aria-label=\"stuck out tongue wink\" class=\"emoji emoji-1f61c\" role=\"img\" title=\"stuck out tongue wink\">:stuck_out_tongue_wink:</span> Would love to hear from people here, especially if you've got a non-maths background as well <span aria-label=\"grinning face with smiling eyes\" class=\"emoji emoji-1f601\" role=\"img\" title=\"grinning face with smiling eyes\">:grinning_face_with_smiling_eyes:</span></p>",
        "id": 344115728,
        "sender_full_name": "Rick de Wolf",
        "timestamp": 1679611203
    },
    {
        "content": "<p>Hi RIck! I did a fair amount of robotics and control theory stuff in my MEng; so it sounds like I fall into the \"non-maths\" background you're looking for.</p>",
        "id": 344204899,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1679650465
    },
    {
        "content": "<blockquote>\n<p>I've got some ideas about building a mathematical knowledgebase using Lean.</p>\n</blockquote>\n<p>I assume you're already aware of the rather large mathematical knowledgebase we already have in the form of \"mathlib\"? You can search it at <a href=\"https://leanprover-community.github.io/mathlib_docs\">#docs</a>.</p>",
        "id": 344205023,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1679650500
    },
    {
        "content": "<p>You might be interested in some of the discussion at <a class=\"stream-topic\" data-stream-id=\"113488\" href=\"/#narrow/stream/113488-general/topic/Control.20theory.20for.20LTI.20systems\">#general &gt; Control theory for LTI systems</a>, as I imagine that overlaps with the robotics you've studied.</p>",
        "id": 344205227,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1679650555
    },
    {
        "content": "<p>Hiya Eric! Nice to hear from you. I know about mathlib through one of Kevin Buzzard's recorded talks - it seems like a monumental community effort. I'd love to help out with the mathlib4 porting project once I get some solid footing in lean. </p>\n<p>The thing I'm interested in finding out is if lean would be suitable in fields other than mathematics, which have a solid basis in maths nonetheless. So physics and engineering for example. Writing down models of physical systems, and physical laws could be interesting. I'm not yet convinced that lean is a good fit for this, but since it is such a rigorous system I feel like science in general could benefit from it.</p>\n<p>I've got some other ideas floating through my head as well, but I'll keep things brief here <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span> I'll check out the control theory discussion you linked - it seems like something that'd be a good fit for me! </p>\n<p>I'm curious, with your background in engineering, what brought you to lean?</p>",
        "id": 344253328,
        "sender_full_name": "Rick de Wolf",
        "timestamp": 1679661989
    },
    {
        "content": "<blockquote>\n<p>I'm curious though, with your background in engineering, what brought you to lean?</p>\n</blockquote>\n<p><a href=\"https://eric-wieser.github.io/divf-2022/#/\">Here's</a> some slides for a talk that I gave to the information division of my department this time last year, which somewhat answers that question. In essence, I got fed up with making sloppy algebra mistakes, and found <code>sympy</code> wasn't extensible enough to do what I wanted.</p>",
        "id": 344257287,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1679662892
    },
    {
        "content": "<blockquote>\n<p>The thing I'm interested in finding out is if lean would be suitable in fields other than mathematics, which have a solid basis in maths nonetheless. So physics and engineering for example. Writing down models of physical systems, and physical laws could be interesting.</p>\n</blockquote>\n<p><a class=\"stream-topic\" data-stream-id=\"113488\" href=\"/#narrow/stream/113488-general/topic/Formalizing.20Chemical.20Theory.20.20pt.2E.202\">#general &gt; Formalizing Chemical Theory  pt. 2</a> is an example of some other users interested in this.</p>",
        "id": 344258473,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1679663149
    },
    {
        "content": "<p>That sounds familiar haha Now you definitely have my attention - I'd love to combine the power of a computer algebra system like Sympy with Lean. The CAS that I have in mind is Julia's Symbolics.jl package, but feature support in that package is severely lacking on some fronts. It feels like reimplementing the same things that Sympy has implemented is simply inefficient. So I'm trying to think of a way to write something down once, in Lean, and then having a 'translation' layer that lets Sympy and Symbolics.jl automatically use the Lean implementation. It would cut development time down once it's up and running (if this is possible).</p>\n<p>That was a bit of a tangent, but I'll definitely check out your talk! Having some tools that help with straightforward algebraic manipulations would probably be great for engineering students.</p>",
        "id": 344261047,
        "sender_full_name": "Rick de Wolf",
        "timestamp": 1679663727
    },
    {
        "content": "<p>Nice to meet you, Rick! I was an undergraduate in aerospace engineering, though I left my university three weeks ago. I've spent most of my time studying mathematics and logic rather than physics and engineering, but I'm interested in formalizing classical mechanics. I wrote about my goals in <a class=\"stream-topic\" data-stream-id=\"113489\" href=\"/#narrow/stream/113489-new-members/topic/Bulhwi.20Cha.20.26.20Seongwoo.20Shim.3A.20Introductions\">#new members &gt; Bulhwi Cha &amp; Seongwoo Shim: Introductions</a>.</p>",
        "id": 344312511,
        "sender_full_name": "Bulhwi Cha",
        "timestamp": 1679674684
    },
    {
        "content": "<p>Sadly, Seongwoo is no longer willing to participate in formalization of classical mechanics. It's up to me to learn about Mathlib APIs and symplectic geometry.</p>\n<p><span class=\"user-mention silent\" data-user-id=\"603023\">Rick de Wolf</span> <a href=\"#narrow/stream/113489-new-members/topic/Saying.20hi/near/344253328\">said</a>:</p>\n<blockquote>\n<p>I'd love to help out with the mathlib4 porting project once I get some solid footing in lean. </p>\n</blockquote>\n<p>I finished reading <a href=\"https://leanprover.github.io/theorem_proving_in_lean4/title_page.html\">\"Theorem Proving in Lean 4\"</a> last month, and now I'm trying to port <code>data.string.basic</code> and its dependencies. I recommend this book.</p>",
        "id": 344316863,
        "sender_full_name": "Bulhwi Cha",
        "timestamp": 1679675732
    },
    {
        "content": "<p>Hey Bulwhi, nice to meet you! I'll keep an eye for your classical mechanics port, would love to see what you come up with <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span> And thanks for linking that book, I'll take a look once I'm done with the natural numbers game.</p>",
        "id": 344321480,
        "sender_full_name": "Rick de Wolf",
        "timestamp": 1679676919
    },
    {
        "content": "<p>Hi! Thanks <span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> for the shout out. I’m an assistant professor in Chemical Engineering, and I and several UG and grad students in my research group are learning Lean. On the theorem proving side, we have a vision for formalizing theories in science and engineering, using Lean not just to ensure the math is correct, but also to link together scientific concepts, as well. On the programming side, we see Lean as valuable for enabling formally correct scientific computing, to ensure that codes for running physics-based simulations are bug-free.</p>",
        "id": 344409709,
        "sender_full_name": "Tyler Josephson ⚛️",
        "timestamp": 1679717204
    },
    {
        "content": "<p>Also, pointing you to the SciLean project, as well:<br>\n<a href=\"#narrow/stream/113488-general/topic/SciLean.3A.20scientific.20computing.20with.20Lean\">https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/SciLean.3A.20scientific.20computing.20with.20Lean</a></p>",
        "id": 344410927,
        "sender_full_name": "Tyler Josephson ⚛️",
        "timestamp": 1679718442
    },
    {
        "content": "<p>Hi Tyler, nice to hear from you! I love the ideas you're talking about, they sound like a wonderful way to make knowledge more widely available. Is there any material publicly available from the ATOMS lab about the philosophy and general plans? I'd love to have a look sometime.</p>",
        "id": 344487366,
        "sender_full_name": "Rick de Wolf",
        "timestamp": 1679750650
    },
    {
        "content": "<p>Conclusions and outlook from our <a href=\"https://arxiv.org/abs/2210.12150\">arxiv paper</a> would be one place with some of our vision. Bug-free programming in Lean was first brought out in the <a href=\"https://arxiv.org/abs/1706.08605\">Certigrad paper</a>, which has been some of our inspiration. I can also send you some proposals we're hearing back from, too.</p>",
        "id": 344494262,
        "sender_full_name": "Tyler Josephson ⚛️",
        "timestamp": 1679752793
    },
    {
        "content": "<p>I have similar interests. I'm working on the mentioned library SciLean, my current focus is to bring symbolic and automatic differentiation to Lean. Once it is done we can start building lots of interesting stuff on top of it.</p>",
        "id": 344498035,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1679753852
    },
    {
        "content": "<p>That's an interesting angle <span class=\"user-mention\" data-user-id=\"346070\">@Tomas Skrivan</span>. Are you building autodiff and symbolics using pure Lean?</p>",
        "id": 344826878,
        "sender_full_name": "Rick de Wolf",
        "timestamp": 1679914182
    },
    {
        "content": "<p>Are @ mentions okay on here, by the way?</p>",
        "id": 344827063,
        "sender_full_name": "Rick de Wolf",
        "timestamp": 1679914229
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"603023\">Rick de Wolf</span> <a href=\"#narrow/stream/113489-new-members/topic/Saying.20hi/near/344826878\">said</a>:</p>\n<blockquote>\n<p>That's an interesting angle <span class=\"user-mention silent\" data-user-id=\"346070\">Tomas Skrivan</span>. Are you building autodiff and symbolics using pure Lean?</p>\n</blockquote>\n<p>Yes, I'm doing it purely in Lean.</p>",
        "id": 344832074,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1679915636
    }
]