[
    {
        "content": "<p>I used <code>#print int.eq_of_sub_eq_zero</code> and it printed the proof term:<br>\nprotected theorem int.eq_of_sub_eq_zero : ∀ {a b : ℤ}, a - b = 0 → a = b :=<br>\n<code>λ {a b : ℤ} (h : a - b = 0), have this : 0 + b = b, from (id (eq.rec (eq.refl (0 + b = b)) b.zero_add)).mpr (eq.refl b), have this : a - b + b = b, from (id (eq.rec (eq.refl (a - b + b = b)) h)).mpr this, eq.mp (eq.rec (eq.refl (a + -b + b = b)) (a.neg_add_cancel_right b)) (eq.mp (eq.rec (eq.refl (a - b + b = b)) int.sub_eq_add_neg) this)</code></p>\n<p>But when I did <code>#check λ {a b : ℤ} (h : a - b = 0), have this : 0 + b = b, from (id (eq.rec (eq.refl (0 + b = b)) b.zero_add)).mpr (eq.refl b), have this : a - b + b = b, from (id (eq.rec (eq.refl (a - b + b = b)) h)).mpr this, eq.mp (eq.rec (eq.refl (a + -b + b = b)) (a.neg_add_cancel_right b)) (eq.mp (eq.rec (eq.refl (a - b + b = b)) int.sub_eq_add_neg) this)</code>, I expected to get the type of this proof term  <code>∀ {a b : ℤ}, a - b = 0 → a = b </code>. But it is throwing error as attached: <a href=\"/user_uploads/3121/fv-8y9ZEnnmh3H3o7wCQyZ_M/image.png\">image.png</a> . Can anyone help in this regard or point what am I missing? Thanks!</p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/fv-8y9ZEnnmh3H3o7wCQyZ_M/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/fv-8y9ZEnnmh3H3o7wCQyZ_M/image.png\"></a></div>",
        "id": 276391990,
        "sender_full_name": "Ayush Agrawal",
        "timestamp": 1648065866
    },
    {
        "content": "<p>The issue is the implicit arguments, especially in things like <code>eq.rec</code>. Use <code>set_option pp.all true</code> before the <code>#print</code> to get a very explicit version of the term that should be more likely to round-trip</p>",
        "id": 276397957,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1648068480
    },
    {
        "content": "<p>after using <code>set_option pp.all true</code> above the <code>#print</code>, I am still having some errors:<br>\n<a href=\"/user_uploads/3121/DL6m9f00l3WyBrQInM-UPowy/image.png\">image.png</a> <br>\n<span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> can you please help?</p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/DL6m9f00l3WyBrQInM-UPowy/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/DL6m9f00l3WyBrQInM-UPowy/image.png\"></a></div>",
        "id": 276450389,
        "sender_full_name": "Ayush Agrawal",
        "timestamp": 1648114586
    },
    {
        "content": "<p>Can you post a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> with fully working code rather than screenshots?</p>",
        "id": 276460587,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1648120557
    },
    {
        "content": "<p>And what's your goal here? I've never felt the need to print a proof term and try to get lean to reinterpret it</p>",
        "id": 276460833,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1648120691
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"307953\">@Ruben Van de Velde</span>  I am newbie to type theory, I wanted to see how lean interprets these terms. Just wanted to know if I am understanding the details right or not</p>",
        "id": 276461023,
        "sender_full_name": "Ayush Agrawal",
        "timestamp": 1648120832
    },
    {
        "content": "<p>My guess is that the unifier is failing to solve a higher unification problem. I'm surprised that the pp.all suggestion doesn't fix it though.</p>",
        "id": 276461588,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1648121179
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span>  it is working. I put the pp.all part wrongly my bad</p>",
        "id": 276461640,
        "sender_full_name": "Ayush Agrawal",
        "timestamp": 1648121229
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"439607\">Ayush Agrawal</span> has marked this topic as resolved.</p>",
        "id": 276461670,
        "sender_full_name": "Notification Bot",
        "timestamp": 1648121245
    }
]