[
    {
        "content": "<p>I haven't worked with randomness in a functional language before, and I am having a bit of trouble. I am trying to apply a series of random functions to a number.<br>\nHere is the code I have:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">apply_random_n</span>\n  <span class=\"o\">{</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">i</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">start</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">i</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span><span class=\"o\">)</span>\n  <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">n</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">start</span>\n  <span class=\"bp\">|</span> <span class=\"n\">n'</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">let</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">i</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">⟩</span>\n    <span class=\"c1\">--r should be randomly generated each step</span>\n    <span class=\"n\">v</span> <span class=\"n\">r</span> <span class=\"o\">(</span><span class=\"n\">apply_random_n</span> <span class=\"n\">h</span> <span class=\"n\">start</span> <span class=\"n\">n'</span> <span class=\"n\">v</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>What do I need to change to generate r randomly each step? I see the Random.randFin function in mathlib, but I cannot figure out how to use it for the life of me.</p>",
        "id": 397876276,
        "sender_full_name": "Jesse Slater",
        "timestamp": 1697920391
    },
    {
        "content": "<p>Here's a file I wrote for my computer projects last year:</p>\n<div class=\"codehilite\" data-code-language=\"/-\"><pre><span></span><code>Copyright (c) 2023 Yaël Dillies. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Yaël Dillies\n-/\nimport Mathlib.Control.Random\nimport Catam.Mathlib.Data.Enum\nimport Catam.Mathlib.Data.Rat.Defs\n\n/-!\n# Additional randomness operations\n-/\n\nnamespace Random\nvariable {g : Type} {α β : Type _} [RandomGen g] {n : ℕ} [NeZero n]\n\ndef randFin' : RandG g (Fin n) :=\n  λ ⟨g⟩ ↦ (randNat g 0 n).map (λ a ↦ Fin.ofNat' a $ NeZero.pos n) ULift.up\n\ninstance : Random (Fin n) where random := randFin'\n\n/-- Return `true` with probability `p`, `false` with probability `1 - p`. If `p ≤ 0`, it always\nreturns false. If `1 ≤ p`, it always returns true. -/\ndef bernoulli (p : ℚ) : RandG g Bool := return (← rand (Fin p.den)) &lt; p.num\n\n/-- Return a bipartite graph on `n + n` vertices where each edge is present independently with\nprobability `p`. -/\ndef bipartiteGraph (n : ℕ) (p : ℚ) : RandG g (Fin n → Fin n → Bool) :=\nMonad.pi $ λ _ ↦ Monad.pi $ λ _ ↦ bernoulli p\n\n/-- Return an element of an enumerable type `α` uniformly at random. -/\ndef uniform [Enum α] [Nonempty α] : RandG g α := Enum.enum.get &lt;$&gt; randFin'\n\nend Random\n</code></pre></div>",
        "id": 397876657,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1697920933
    },
    {
        "content": "<p>Functions in function languages are pure, they cannot depend on anything other than their inputs. So you'll need to work in some sort of monad for randomness <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=IO.rand#doc\">docs#IO.rand</a> or <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=RandG#doc\">docs#RandG</a> that Yael mentions, or pass in a random state and generator each time <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=randNat#doc\">docs#randNat</a>. What you want to do precisely</p>",
        "id": 397876661,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1697920943
    },
    {
        "content": "<p>along with</p>\n<div class=\"codehilite\" data-code-language=\"/-\"><pre><span></span><code>Copyright (c) 2023 Yaël Dillies. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Yaël Dillies\n-/\nimport Mathlib.Data.Fin.Basic\nimport Mathlib.Data.List.Range\nimport Catam.Mathlib.Data.Vector.Basic\n\n/-!\n# Enumeration of types\n-/\n\nclass Enum (α : Type _) where\n  enum : List α\n  enum_nodup : enum.Nodup\n  index : α → Fin enum.length\n  enum_index : ∀ a, enum.get (index a) = a\n\ninstance {n : ℕ} : Enum (Fin n) :=\n{ enum := List.finRange _,\n  enum_nodup := List.nodup_finRange _,\n  index := λ n ↦ ⟨n, by rw [List.length_finRange]; exact n.2⟩,\n  enum_index := λ a ↦ by simp }\n\ninstance {α : Type _} {β : α → Type _} [Enum α] [∀ a, ToString (β a)] : ToString (∀ a, β a) :=\n⟨λ f ↦ toString $ Enum.enum.map $ λ a ↦ toString $ f a⟩\n\ninstance [Enum α] [Nonempty α] : NeZero (Enum.enum : List α).length :=\n⟨λ h ↦ by\n  haveI := ‹Nonempty α›.map Enum.index\n  rw [h] at this\n  exact not_isEmpty_of_nonempty (Fin 0) (inferInstance : IsEmpty (Fin 0))⟩\n\nnamespace Monad\nuniverse u v\nvariable {α : Type u} {β : Type (max u v)} {m : Type (max u v) → Type _}\n\n-- TODO: Generalise to dependent types\n/-- Return a random function from random results for each input. -/\ndef pi [Enum α] [Monad m] (r : α → m β) : m (α → β) :=\n(λ l a ↦ l.toList.get ⟨Enum.index a, by simp⟩) &lt;$&gt; Vector.mapM r ⟨Enum.enum, rfl⟩\n\nend Monad\n</code></pre></div>",
        "id": 397876675,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1697920977
    },
    {
        "content": "<p>Sorry, I can't make the repo public because of fairness concerns, but I can certainly dump those prereqs into LeanCamCombi or something for me to avoid copying everything over here.</p>",
        "id": 397876739,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1697921061
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"127136\">@Alex J. Best</span> <br>\nI don't need anything fancy, just need to generate a series of random Fin n. This is not any sort of mission critical code, and I won't be writing any proofs about it, so I just want to simplest solution.</p>",
        "id": 397877227,
        "sender_full_name": "Jesse Slater",
        "timestamp": 1697921755
    },
    {
        "content": "<p>All I need to do with the result is look at it</p>",
        "id": 397877389,
        "sender_full_name": "Jesse Slater",
        "timestamp": 1697921942
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span>  I am sure this would solve my problem, but I apologize, I have no idea how to use it.</p>",
        "id": 397877682,
        "sender_full_name": "Jesse Slater",
        "timestamp": 1697922286
    },
    {
        "content": "<p>Here is an example</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Std</span>\n\n\n<span class=\"kd\">def</span> <span class=\"n\">apply_random_n</span>\n  <span class=\"o\">{</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">i</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">start</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">i</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">StdGen</span><span class=\"o\">)</span>\n  <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">×</span> <span class=\"n\">StdGen</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">n</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">start</span><span class=\"o\">,</span> <span class=\"n\">g</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">n'</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">let</span> <span class=\"n\">rs</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">randNat</span> <span class=\"n\">g</span> <span class=\"mi\">0</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">))</span>\n    <span class=\"k\">let</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">i</span> <span class=\"o\">:=</span> <span class=\"n\">Fin.ofNat'</span> <span class=\"n\">rs.1</span> <span class=\"n\">h</span>\n    <span class=\"c1\">--r should be randomly generated each step</span>\n    <span class=\"n\">Prod.map</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"n\">id</span> <span class=\"o\">(</span><span class=\"n\">apply_random_n</span> <span class=\"n\">h</span> <span class=\"n\">start</span> <span class=\"n\">n'</span> <span class=\"n\">v</span> <span class=\"n\">rs.2</span><span class=\"o\">)</span>\n\n<span class=\"c1\">-- some code to demo how it works, you don't need to understand all of this, just that we have to update g every time</span>\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Meta</span>\n<span class=\"k\">#eval</span> <span class=\"k\">show</span> <span class=\"n\">MetaM</span> <span class=\"n\">Unit</span> <span class=\"k\">from</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">g</span> <span class=\"o\">:=</span> <span class=\"n\">mkStdGen</span>\n  <span class=\"n\">for</span> <span class=\"n\">_</span> <span class=\"k\">in</span> <span class=\"n\">List.range</span> <span class=\"mi\">10</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">apply_random_n</span> <span class=\"o\">(</span><span class=\"gr\">sorry</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">10</span><span class=\"o\">)</span> <span class=\"mi\">0</span> <span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">j</span> <span class=\"n\">i</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"n\">j.val</span><span class=\"o\">)</span> <span class=\"n\">g</span>\n    <span class=\"n\">dbg_trace</span> <span class=\"n\">a.1</span>\n    <span class=\"n\">g</span> <span class=\"o\">:=</span> <span class=\"n\">a.2</span> <span class=\"c1\">-- if you comment out this line there is no randomness</span>\n</code></pre></div>",
        "id": 397877869,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1697922598
    },
    {
        "content": "<p>Thank you, this is perfect!</p>",
        "id": 397878371,
        "sender_full_name": "Jesse Slater",
        "timestamp": 1697923240
    },
    {
        "content": "<p>Don't we have a Fin instance for <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Random#doc\">docs#Random</a> ?</p>",
        "id": 397921708,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1697961667
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Random.instRandomFinSucc#doc\">docs#Random.instRandomFinSucc</a></p>",
        "id": 397921760,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1697961693
    },
    {
        "content": "<p>I guess we should change that to NeZero as in Yaël's example</p>",
        "id": 397921790,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1697961709
    }
]