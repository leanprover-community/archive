[
    {
        "content": "<p><a href=\"https://leanprover.github.io/theorem_proving_in_lean/inductive_types.html#exercises\">Exercise 3 of Chapter 7 in *Theorem Proving in Lean*</a>  reads</p>\n<blockquote>\n<ol start=\"3\">\n<li>Define an inductive data type consisting of terms built up from the following constructors:</li>\n</ol>\n<ul>\n<li><code>const n</code>, a constant denoting the natural number <code>n</code></li>\n<li><code>var n</code>, a variable, numbered <code>n</code></li>\n<li><code>plus s t</code>, denoting the sum of <code>s</code> and <code>t</code></li>\n<li><code>times s t</code>, denoting the product of <code>s</code> and <code>t</code></li>\n</ul>\n</blockquote>\n<p>I don't understand what this type is going to look like. In particular, what does \" <code>var n</code>, a variable numbered n\" mean? Is that the same <code>n</code> as in the first bullet point? If so,  would that type consist of a constant, like <code>n=3</code> and then a variable indexed by 3? Seems it can't be that, but I  can't find any other interpretation.</p>",
        "id": 340677071,
        "sender_full_name": "Quinn Culver",
        "timestamp": 1678384838
    },
    {
        "content": "<p>The constructed type will consist of “arithmetical expressions”.</p>\n<p>I understand that any expression of the form <code>const ...</code> (where in <code>...</code> you put any expression of type <code>nat</code>) will, by construction, be an expression having the type you are constructing.</p>",
        "id": 340678986,
        "sender_full_name": "Pedro Sánchez Terraf",
        "timestamp": 1678385380
    },
    {
        "content": "<p>So, essentially, you have countably many constant symbols, same with variables, and you can write expressions denoting the sum and product of other expressions. So <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>c</mi><mn>2</mn></msub><mo>+</mo><msub><mi>v</mi><mn>5</mn></msub></mrow><annotation encoding=\"application/x-tex\">c_2 + v_5</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">c</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.5806em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">5</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> would correspond to</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">plus</span> <span class=\"o\">(</span><span class=\"n\">const</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">var</span> <span class=\"mi\">5</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>What I don't really know is how that relates to</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">plus</span> <span class=\"o\">(</span><span class=\"n\">const</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">var</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"bp\">+</span><span class=\"mi\">3</span><span class=\"o\">))</span>\n</code></pre></div>",
        "id": 340679601,
        "sender_full_name": "Pedro Sánchez Terraf",
        "timestamp": 1678385580
    },
    {
        "content": "<p>What I'm sure is that if <code>n</code> and <code>m</code> are different naturals, then <code>const n</code>, <code>var n</code> and <code>var m</code> are all pairwise distinct.</p>",
        "id": 340679862,
        "sender_full_name": "Pedro Sánchez Terraf",
        "timestamp": 1678385652
    },
    {
        "content": "<p>Thanks, that's helpful.</p>",
        "id": 340680064,
        "sender_full_name": "Quinn Culver",
        "timestamp": 1678385724
    },
    {
        "content": "<p>Related thread: <a class=\"stream-topic\" data-stream-id=\"113489\" href=\"/#narrow/stream/113489-new-members/topic/Trying.20to.20understand.20Theorem.20Proving.20in.20Lean.204.20exercise.207.2E3\">#new members &gt; Trying to understand Theorem Proving in Lean 4 exercise 7.3</a>.</p>",
        "id": 340732161,
        "sender_full_name": "Bulhwi Cha",
        "timestamp": 1678403892
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"245476\">Quinn Culver</span> has marked this topic as resolved.</p>",
        "id": 340910410,
        "sender_full_name": "Notification Bot",
        "timestamp": 1678466209
    }
]