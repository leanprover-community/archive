[
    {
        "content": "<p>Can anyone explain this interesting type used by a bicategory?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span>\n<span class=\"k\">#check</span> <span class=\"n\">A</span> <span class=\"bp\">⟶</span> <span class=\"n\">B</span>  <span class=\"c1\">-- it's of type \"Type\"</span>\n</code></pre></div>\n<p>I want to make my own bicategory with a <code>homCategory</code> component of my own devising, but first I need to know how this hom component works (my Hom component was a category structure with seven entries I think).</p>",
        "id": 384101395,
        "sender_full_name": "Dean Young",
        "timestamp": 1691791364
    },
    {
        "content": "<p>It is <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Quiver#doc\">docs#Quiver</a>.  The type class provides notation for hom types.</p>",
        "id": 384238381,
        "sender_full_name": "Jason Rute",
        "timestamp": 1691840583
    },
    {
        "content": "<p>See this PA answer for how a notation type class is used: <a href=\"https://proofassistants.stackexchange.com/a/1755/122\">https://proofassistants.stackexchange.com/a/1755/122</a></p>",
        "id": 384240203,
        "sender_full_name": "Jason Rute",
        "timestamp": 1691840975
    },
    {
        "content": "<p>Actually maybe answer is for a more complicated question.  Anyway, in general, if you want a structure to use a particular overloaded notation like &lt; you extend that structure off the type class for that notation.  In this case that long arrow is just a notation for the type of morphisms.  You can see it in the definition of Category: <a href=\"https://github.com/leanprover-community/mathlib4/blob/3d6112b5c7d095d3088b359c611a5a2704c5dbdc/Mathlib/CategoryTheory/Category/Basic.lean#L94\">https://github.com/leanprover-community/mathlib4/blob/3d6112b5c7d095d3088b359c611a5a2704c5dbdc/Mathlib/CategoryTheory/Category/Basic.lean#L94</a></p>",
        "id": 384242398,
        "sender_full_name": "Jason Rute",
        "timestamp": 1691841451
    },
    {
        "content": "<p>I think (but am not at a computer to check) that when you write <code>A ⟶ B</code>, the reason this type checks is that <code>A</code> and <code>B</code> are automatically coerced into being elements of the category <code>CategoryTheory.LargeCategory (Type u)</code> which is the type theoretic version of the category Set.  So <code>A ⟶ B</code> is just the usual type <code>A -&gt; B</code> of functions from A to B in this particular case.  See <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=CategoryTheory.types_hom#doc\">docs#CategoryTheory.types_hom</a></p>",
        "id": 384252128,
        "sender_full_name": "Jason Rute",
        "timestamp": 1691843716
    },
    {
        "content": "<p>But in general, for <code>x ⟶ y</code> to make sense, x and y have to be elements of a structure which extends Quiver, such as a Category.</p>",
        "id": 384252942,
        "sender_full_name": "Jason Rute",
        "timestamp": 1691843907
    }
]