[
    {
        "content": "<p>Hi there.<br>\nI already installed a lean 4 toolchain with <code>elan</code>. After I created a new project with lake (after I used <code>lake init</code> in a path), however, running lake will print<code>info: downloading component 'lean'</code> and will automatically start to download a duplicate Lean. Why this happens and how should I prevent it from happening?<br>\nBy the way, I would like to know how to install and use mathlib4 in my code. It seems that I should use the command <code>lake exe cache get</code>, but this also works for a single project. Will this lead to duplicate downloads of mathlib for each of the projects?<br>\nTo be honest, I am still a little confused with the use of lake. It seems to be a Cabal equivalence for Lean, which provides convenience for building projects. But I am just going through some basic tutorials about theorem proving, and I don't even compile the codes. I am not sure whether I have to use lake, but I didn't find other way to install mathlib.</p>",
        "id": 377634432,
        "sender_full_name": "Cheesehead",
        "timestamp": 1690041089
    },
    {
        "content": "<p>It is correct in doing this. Just because you have <em>a</em> version of Lean does not mean you have the <em>correct</em> version of Lean for your current project. Since Lean is still a  quickly evolving language with new (potentially breaking) things every nightly each project maintains a lean-toolchain file with the precise version of Lean that it expects. Once lake gets run on a project the first thing that happens is that the proper Lean nightly will get downloaded and then that will be used for you. That said if you have two projects that happen to depend on the same nightly it will not redownload it after it got it for the first time</p>",
        "id": 377635790,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1690041508
    },
    {
        "content": "<p>With respect to installting mathlib4 you have to declare it as a dependency in your lakefile and then it will just work. The <code>lake exe cache get</code> is a custom command provided by mathlib4 such that you do not have to compile mathlib4 from scratch in your depending project.</p>",
        "id": 377636087,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1690041608
    },
    {
        "content": "<p>ANd finally yes you cannot get around using lake, it is the intended way of using Lean 4.</p>",
        "id": 377636152,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1690041625
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"395550\">Henrik Böving</span> <a href=\"#narrow/stream/113489-new-members/topic/running.20lake.20causes.20duplicate.20download.20of.20Lean/near/377635790\">said</a>:</p>\n<blockquote>\n<p>It is correct in doing this. Just because you have <em>a</em> version of Lean does not mean you have the <em>correct</em> version of Lean for your current project. Since Lean is still a  quickly evolving language with new (potentially breaking) things every nightly each project maintains a lean-toolchain file with the precise version of Lean that it expects. Once lake gets run on a project the first thing that happens is that the proper Lean nightly will get downloaded and then that will be used for you. That said if you have two projects that happen to depend on the same nightly it will not redownload it after it got it for the first time</p>\n</blockquote>\n<p>Ok, that really makes sense. Thanks so much for your explanation!</p>",
        "id": 377636555,
        "sender_full_name": "Cheesehead",
        "timestamp": 1690041764
    }
]