[
    {
        "content": "<p>Was wondering if there was any code in Mathlib that might be able to help with the below example.  </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.NumberTheory.Divisors</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Nat</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">hn</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hk</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">d</span> <span class=\"bp\">∈</span> <span class=\"n\">properDivisors</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">d</span> <span class=\"bp\">∣</span> <span class=\"n\">k</span> <span class=\"bp\">→</span> <span class=\"n\">n</span> <span class=\"bp\">≤</span> <span class=\"n\">k</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">d</span> <span class=\"n\">hd</span> <span class=\"n\">hdk</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mem_properDivisors</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hd</span>\n  <span class=\"n\">cases'</span> <span class=\"n\">hd</span> <span class=\"k\">with</span> <span class=\"n\">hdn</span> <span class=\"n\">hltn</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>I see that there is <code>dvd_left_iff_eq</code> and I tried different variations of this on the example I have above but was unable to get anything to work.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- Original code if you want to uncomment and probe...</span>\n <span class=\"sd\">/-- Two natural numbers are equal if and only if they have the same divisors. -/</span>\n <span class=\"kd\">theorem</span> <span class=\"n\">dvd_left_iff_eq</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">∣</span> <span class=\"n\">m</span> <span class=\"bp\">↔</span> <span class=\"n\">a</span> <span class=\"bp\">∣</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n   <span class=\"o\">⟨</span><span class=\"k\">fun</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Nat.dvd_antisymm</span> <span class=\"o\">((</span><span class=\"n\">h</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mp</span> <span class=\"n\">dvd_rfl</span><span class=\"o\">)</span> <span class=\"o\">((</span><span class=\"n\">h</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mpr</span> <span class=\"n\">dvd_rfl</span><span class=\"o\">),</span> <span class=\"k\">fun</span> <span class=\"n\">h</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]⟩</span>\n</code></pre></div>\n<p>Like, how does the <code>dvd_rfl</code> work above but doesn't work here?  I still don't understand.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">hn</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hk</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">d</span> <span class=\"bp\">∈</span> <span class=\"n\">properDivisors</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"bp\">∣</span> <span class=\"n\">k</span> <span class=\"bp\">↔</span> <span class=\"n\">d</span> <span class=\"bp\">∣</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"bp\">↔</span> <span class=\"n\">k</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨</span><span class=\"k\">fun</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">dvd_left_iff_eq.1</span> <span class=\"k\">fun</span> <span class=\"n\">d</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Nat.dvd_antisymm</span> <span class=\"o\">((</span><span class=\"n\">h</span> <span class=\"n\">d</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mp</span> <span class=\"n\">dvd_rfl</span><span class=\"o\">)</span> <span class=\"o\">((</span><span class=\"n\">h</span> <span class=\"n\">d</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mpr</span> <span class=\"n\">dvd_rfl</span><span class=\"o\">),</span>\n    <span class=\"k\">fun</span> <span class=\"n\">h</span> <span class=\"n\">d</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]⟩</span>\n\n<span class=\"c1\">-- application type mismatch</span>\n<span class=\"c1\">--   Iff.mp (h d ?m.964) dvd_rfl</span>\n<span class=\"c1\">-- argument</span>\n<span class=\"c1\">--   dvd_rfl</span>\n<span class=\"c1\">-- has type</span>\n<span class=\"c1\">--   d ∣ d : Prop</span>\n<span class=\"c1\">-- but is expected to have type</span>\n<span class=\"c1\">--   d ∣ k : Prop</span>\n</code></pre></div>",
        "id": 358191767,
        "sender_full_name": "Newell Jensen",
        "timestamp": 1684028060
    },
    {
        "content": "<p>This statement doesn't look true</p>",
        "id": 358200391,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1684037832
    },
    {
        "content": "<p>take <code>d = 2</code>, <code>k = 4</code>, <code>n = 8</code> for example</p>",
        "id": 358200465,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1684037917
    },
    {
        "content": "<p>True, thanks Mario!</p>",
        "id": 358200494,
        "sender_full_name": "Newell Jensen",
        "timestamp": 1684037984
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"443984\">Newell Jensen</span> has marked this topic as resolved.</p>",
        "id": 358202829,
        "sender_full_name": "Notification Bot",
        "timestamp": 1684040548
    },
    {
        "content": "<p>I'm sad that</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.NumberTheory.Divisors</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.SlimCheck</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Nat</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">hn</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hk</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">d</span> <span class=\"bp\">∈</span> <span class=\"n\">properDivisors</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"bp\">∣</span> <span class=\"n\">k</span> <span class=\"bp\">↔</span> <span class=\"n\">d</span> <span class=\"bp\">∣</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"bp\">↔</span> <span class=\"n\">k</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">slim_check</span>\n</code></pre></div>\n<p>doesn't try to find a counterexample here; I think it may be a bug in the <code>Testable</code> instances for <code>slim_check</code>.</p>",
        "id": 358256420,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1684069767
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"395550\">@Henrik Böving</span>, any ideas?</p>",
        "id": 358256569,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1684069819
    },
    {
        "content": "<p>Minimizing a little bit it seems to struggle with this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">d</span> <span class=\"bp\">∈</span> <span class=\"n\">properDivisors</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">True</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"n\">True</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">slim_check</span>\n</code></pre></div>",
        "id": 358257540,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1684070237
    },
    {
        "content": "<p>Hmmm, I''ve been looking at the type class trace for a while now but I can't figure out why it is not capable of resolving a testable instance here, maybe someone elseknows?</p>",
        "id": 358261401,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1684071794
    },
    {
        "content": "<p>(Remark that <code>(∀ d ∈ properDivisors 0, True) ↔ True</code> is true whereas Scott's original example isn't)</p>",
        "id": 358263657,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1684072577
    },
    {
        "content": "<p>Is there a <code>Decidable (∈ properDivisors)</code> instance? Or is it true via decidable equality?</p>",
        "id": 358272576,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684076134
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.NumberTheory.Divisors</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Nat</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n\n<span class=\"bp\">#</span><span class=\"n\">synth</span> <span class=\"n\">Decidable</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">∈</span> <span class=\"n\">properDivisors</span> <span class=\"n\">k</span><span class=\"o\">)</span>\n<span class=\"c1\">-- Finset.decidableMem n (properDivisors k)</span>\n</code></pre></div>",
        "id": 358274728,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1684076956
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> <span class=\"user-mention\" data-user-id=\"395550\">@Henrik Böving</span> This was the first thing I tried yesterday after seeing this thread, too.  The following is a number-theory-free example which fails on <code>slim_check</code> -- is it to be expected?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.SlimCheck</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Nat</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">k</span> <span class=\"n\">d</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">hn</span><span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">hk</span><span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">k</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">hltn</span><span class=\"o\">:</span> <span class=\"n\">d</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">ha</span><span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">d</span> <span class=\"bp\">*</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">hb</span><span class=\"o\">:</span> <span class=\"n\">k</span> <span class=\"bp\">=</span> <span class=\"n\">d</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">n</span> <span class=\"bp\">≤</span> <span class=\"n\">k</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">slim_check</span>\n</code></pre></div>",
        "id": 358281191,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1684079728
    },
    {
        "content": "<p>(False inputs 8, 4, 2, 4, 2)</p>",
        "id": 358281683,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1684079918
    },
    {
        "content": "<p>No should also work</p>",
        "id": 358281744,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1684079946
    },
    {
        "content": "<p><code>2 1 1 2 1</code> is also false. I wonder though whether <code>slim_check</code> is just assigning random small values to variables, in which case the chances that <code>n = d * a</code> and <code>k = d * b</code> both hold are very small.</p>",
        "id": 358281905,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1684080006
    },
    {
        "content": "<p>No Kevin slim check isnt even starting to assign variables here, it does also not do that in the previous example, that is also why it doesnt matter if the satement is true or false. The issue is that slim check cannot even figure out how to test the statement.</p>",
        "id": 358282050,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1684080055
    },
    {
        "content": "<p>If we eliminate the equalities it does work though:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.SlimCheck</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Nat</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">k</span> <span class=\"n\">d</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">hn</span><span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">hk</span><span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">k</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">hltn</span><span class=\"o\">:</span> <span class=\"n\">d</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">d</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">d</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">slim_check</span>\n<span class=\"c\">/-</span>\n<span class=\"cm\">Found problems!</span>\n<span class=\"cm\">n := 4</span>\n<span class=\"cm\">k := 6</span>\n<span class=\"cm\">d := 2</span>\n<span class=\"cm\">a := 4</span>\n<span class=\"cm\">b := 1</span>\n<span class=\"cm\">guard: 0 &lt; 4</span>\n<span class=\"cm\">guard: 0 &lt; 6</span>\n<span class=\"cm\">guard: 2 &lt; 4</span>\n<span class=\"cm\">issue: 8 ≤ 2 does not hold</span>\n<span class=\"cm\">(0 shrinks)</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>",
        "id": 358282120,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1684080085
    },
    {
        "content": "<p>Eliminating n and k completely also works fine:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.SlimCheck</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Nat</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">k</span> <span class=\"n\">d</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">hn</span><span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">d</span> <span class=\"bp\">*</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">hk</span><span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">d</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">hltn</span><span class=\"o\">:</span> <span class=\"n\">d</span> <span class=\"bp\">&lt;</span> <span class=\"n\">d</span> <span class=\"bp\">*</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">d</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">d</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">slim_check</span>\n<span class=\"c\">/-</span>\n<span class=\"cm\">Found problems!</span>\n<span class=\"cm\">n is irrelevant (unused)</span>\n<span class=\"cm\">k is irrelevant (unused)</span>\n<span class=\"cm\">d := 2</span>\n<span class=\"cm\">a := 2</span>\n<span class=\"cm\">b := 1</span>\n<span class=\"cm\">guard: 0 &lt; 4</span>\n<span class=\"cm\">guard: 0 &lt; 2</span>\n<span class=\"cm\">guard: 2 &lt; 4</span>\n<span class=\"cm\">issue: 4 ≤ 2 does not hold</span>\n<span class=\"cm\">(0 shrinks)</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>",
        "id": 358282384,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1684080184
    },
    {
        "content": "<p>Oh yeah this is a red herring, sorry: I am surprised and pleased to see that this works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">37</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">≠</span> <span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">37</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">slim_check</span> <span class=\"c1\">-- works</span>\n</code></pre></div>",
        "id": 358282898,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1684080434
    }
]