[
    {
        "content": "<p>This code produces a \"failed to instantiate goal\" error:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">|</span> <span class=\"n\">true</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">|</span> <span class=\"n\">true</span><span class=\"o\">}),</span> <span class=\"n\">true</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">use</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">n</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"k\">then</span> <span class=\"mi\">0</span> <span class=\"k\">else</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"gr\">sorry</span><span class=\"o\">⟩,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>But when I change <code>∃ (n : ℕ), n &gt; 0</code> to something simpler, like <code>0 = 0</code>, then it works. Obviously I'm working on something a bit different than this (this is the minimalistiest example I found), but I need to define a function with \"if\" for it, and then because of this problem I can't even try to fill the sorry.<br>\nI think maybe I'm just misunderstanding something basic about subtypes or defining functions this way, so any clarification is welcome (:</p>",
        "id": 339943160,
        "sender_full_name": "Nir Paz",
        "timestamp": 1678128200
    },
    {
        "content": "<p>This is just <code>use</code> being annoying</p>",
        "id": 339949789,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1678130296
    },
    {
        "content": "<p>I haven't tested your example, but one thing that seems possible is that since <code>if</code> requires a <code>decidable</code> instances (and there's not immediately one here), <code>use</code> fails, and <code>use</code> can be unfriendly like that. Maybe try using the <code>classical</code> tactic first? This adds the classical decidable instances.</p>",
        "id": 339949790,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1678130296
    },
    {
        "content": "<p>Use <code>refine</code> instead of <code>use</code> and you'll get a better error message</p>",
        "id": 339949858,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1678130320
    },
    {
        "content": "<p>By the way, functions go from types to types and the domain and codomain of your f are terms (because they're subsets), so they're being coerced into types which causes a bit of obfuscation. You can use <code>{x : \\R // true}</code> to make the subtype directly.</p>",
        "id": 339950178,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1678130411
    },
    {
        "content": "<p>using classical worked, thanks!</p>",
        "id": 339984520,
        "sender_full_name": "Nir Paz",
        "timestamp": 1678143821
    }
]