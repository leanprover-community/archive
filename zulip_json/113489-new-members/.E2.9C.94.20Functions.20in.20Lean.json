[
    {
        "content": "<p>Hi. I am new to Lean and have a question about functions</p>\n<p>Can something kindly explain why the below code does not produce an element of type D?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code> <span class=\"kd\">example</span>  <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">A</span>  <span class=\"bp\">→</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"bp\">→</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"bp\">→</span> <span class=\"n\">D</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">):</span> <span class=\"n\">D</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n<span class=\"n\">exact</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">)))</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 328070235,
        "sender_full_name": "Pehan Amarathunge",
        "timestamp": 1676483018
    },
    {
        "content": "<p>Hi. The problem is that you didn't declare <code>A</code>...<code>D</code>. You may add that assumption:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">C</span> <span class=\"n\">D</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">A</span>  <span class=\"bp\">→</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"bp\">→</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"bp\">→</span> <span class=\"n\">D</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">):</span> <span class=\"n\">D</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">exact</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">)))</span> <span class=\"c1\">-- Works!</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 328072363,
        "sender_full_name": "Pedro Sánchez Terraf",
        "timestamp": 1676483632
    },
    {
        "content": "<p>Hi there. Thanks for replying.<br>\nI'm sorry if this is a stupid question, but what exactly do you mean by declaring A...D and what exactly does the line you added with Type* do, because I included it and it still doesn't work instead I get A: Type ? in the infoview?</p>\n<p>Sorry if these are very basic questions, I'm still quite new to Lean</p>",
        "id": 328074944,
        "sender_full_name": "Pehan Amarathunge",
        "timestamp": 1676484279
    },
    {
        "content": "<p><code>(A B C D: Type*)</code> means \"<code>A</code>...<code>D</code> are types\", which amounts to say that they are some objects in Lean's logic. Every variable in a Lean statement must be \"presented\" in such a way (as you did for <code>f</code>,...,<code>a</code>).</p>\n<p>The message you see is the goal just before been closed. If you add a comma before the <code>end</code>, you'll see that it succeeds. Finally, the <code>?</code> is the (unspecified) universe of the variable <code>A</code> (and so on).</p>",
        "id": 328076243,
        "sender_full_name": "Pedro Sánchez Terraf",
        "timestamp": 1676484666
    },
    {
        "content": "<p>If you replace <code>Type*</code> with <code>Type</code>, you won't see the question marks anymore (while restricting yourself to the first type universe, i.e. <code>Type 0</code>).</p>",
        "id": 328076549,
        "sender_full_name": "Pedro Sánchez Terraf",
        "timestamp": 1676484754
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"579866\">Pehan Amarathunge</span> has marked this topic as resolved.</p>",
        "id": 328076709,
        "sender_full_name": "Notification Bot",
        "timestamp": 1676484809
    },
    {
        "content": "<p>Thank you for your time. I understand now :)</p>",
        "id": 328076795,
        "sender_full_name": "Pehan Amarathunge",
        "timestamp": 1676484839
    }
]