[
    {
        "content": "<p>Hi, I have the following code which is not compiling at the <code>pow_eq_card_one</code> step. I <em>think</em> it's because things are getting coerced in ways that we don't want, but I'm not sure.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.zmod.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.nat.prime</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.nat.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">group_theory.sylow</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.int.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.finset.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic.ring</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.polynomial.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.polynomial.degree.definitions</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.polynomial.eval</span>\n\n\n<span class=\"n\">open_locale</span> <span class=\"n\">classical</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">vanish_poly_for_subgroup'</span>\n  <span class=\"o\">{</span><span class=\"n\">k</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n  <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">k</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">k</span><span class=\"o\">]</span>\n  <span class=\"o\">{</span><span class=\"n\">G</span><span class=\"o\">:</span> <span class=\"n\">subgroup</span> <span class=\"o\">(</span><span class=\"n\">units</span> <span class=\"n\">k</span><span class=\"o\">)}</span>\n  <span class=\"o\">:</span>\n  <span class=\"bp\">∃</span> <span class=\"n\">f</span><span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">g</span><span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">,</span> <span class=\"n\">f.eval</span> <span class=\"n\">g</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">let</span> <span class=\"n\">s</span><span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">k</span> <span class=\"o\">:=</span> <span class=\"n\">polynomial.monomial</span> <span class=\"o\">(</span><span class=\"n\">fintype.card</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">c</span><span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">k</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">polynomial.C</span> <span class=\"mi\">1</span><span class=\"o\">),</span>\n  <span class=\"k\">let</span> <span class=\"n\">v</span><span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">k</span> <span class=\"o\">:=</span> <span class=\"n\">s</span> <span class=\"bp\">-</span> <span class=\"n\">c</span><span class=\"o\">,</span>\n  <span class=\"n\">use</span> <span class=\"n\">v</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">v_eq_s_minus_c</span><span class=\"o\">:</span> <span class=\"n\">v</span> <span class=\"bp\">=</span> <span class=\"n\">s</span> <span class=\"bp\">-</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n    <span class=\"n\">simp</span><span class=\"o\">,</span>\n  <span class=\"kd\">end</span><span class=\"o\">,</span>\n  <span class=\"n\">intros</span> <span class=\"n\">g</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">v_eq_s_minus_c</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">polynomial.eval_sub</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">polynomial.eval_monomial</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">polynomial.eval_C</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">one_mul</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"bp\">@</span><span class=\"n\">pow_card_eq_one</span> <span class=\"n\">G</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span><span class=\"o\">,</span>\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 343589040,
        "sender_full_name": "Pratyush Mishra",
        "timestamp": 1679468381
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">vanish_poly_for_subgroup'</span>\n  <span class=\"o\">{</span><span class=\"n\">k</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n  <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">k</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">k</span><span class=\"o\">]</span>\n  <span class=\"o\">{</span><span class=\"n\">G</span><span class=\"o\">:</span> <span class=\"n\">subgroup</span> <span class=\"o\">(</span><span class=\"n\">units</span> <span class=\"n\">k</span><span class=\"o\">)}</span>\n  <span class=\"o\">:</span>\n  <span class=\"bp\">∃</span> <span class=\"n\">f</span><span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">g</span><span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">,</span> <span class=\"n\">f.eval</span> <span class=\"n\">g</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">let</span> <span class=\"n\">s</span><span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">k</span> <span class=\"o\">:=</span> <span class=\"n\">polynomial.monomial</span> <span class=\"o\">(</span><span class=\"n\">fintype.card</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">c</span><span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">k</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">polynomial.C</span> <span class=\"mi\">1</span><span class=\"o\">),</span>\n  <span class=\"k\">let</span> <span class=\"n\">v</span><span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">k</span> <span class=\"o\">:=</span> <span class=\"n\">s</span> <span class=\"bp\">-</span> <span class=\"n\">c</span><span class=\"o\">,</span>\n  <span class=\"n\">use</span> <span class=\"n\">v</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">v_eq_s_minus_c</span><span class=\"o\">:</span> <span class=\"n\">v</span> <span class=\"bp\">=</span> <span class=\"n\">s</span> <span class=\"bp\">-</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n    <span class=\"n\">simp</span><span class=\"o\">,</span>\n  <span class=\"kd\">end</span><span class=\"o\">,</span>\n  <span class=\"n\">intros</span> <span class=\"n\">g</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">v_eq_s_minus_c</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">polynomial.eval_sub</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">polynomial.eval_monomial</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">polynomial.eval_C</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">one_mul</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">coe_coe</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">units.coe_pow</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">subgroup.coe_pow</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"bp\">@</span><span class=\"n\">pow_card_eq_one</span> <span class=\"n\">G</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 343590998,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1679469019
    },
    {
        "content": "<p><code>simp</code> told me to use <code>coe_coe</code> and then the usual coercion lemmas are called <code>type.coe_op</code> and looking at the infoview I guessed the correct names</p>",
        "id": 343591164,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1679469098
    },
    {
        "content": "<p>Thank you! how do I find the lemmas/theorems recommend by simp?</p>",
        "id": 343591290,
        "sender_full_name": "Pratyush Mishra",
        "timestamp": 1679469143
    },
    {
        "content": "<p><code>simp?</code> or <code>squeeze_simp</code></p>",
        "id": 343591344,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1679469167
    },
    {
        "content": "<p>Great, thank you so much!</p>",
        "id": 343591461,
        "sender_full_name": "Pratyush Mishra",
        "timestamp": 1679469211
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"596810\">Pratyush Mishra</span> has marked this topic as resolved.</p>",
        "id": 343591471,
        "sender_full_name": "Notification Bot",
        "timestamp": 1679469213
    },
    {
        "content": "<p>If you want to be lazy you can let <code>simp</code> do all the work:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">vanish_poly_for_subgroup'</span>\n  <span class=\"o\">{</span><span class=\"n\">k</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n  <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">k</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">k</span><span class=\"o\">]</span>\n  <span class=\"o\">{</span><span class=\"n\">G</span><span class=\"o\">:</span> <span class=\"n\">subgroup</span> <span class=\"o\">(</span><span class=\"n\">units</span> <span class=\"n\">k</span><span class=\"o\">)}</span>\n  <span class=\"o\">:</span>\n  <span class=\"bp\">∃</span> <span class=\"n\">f</span><span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">g</span><span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">,</span> <span class=\"n\">f.eval</span> <span class=\"n\">g</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">use</span> <span class=\"n\">polynomial.monomial</span> <span class=\"o\">(</span><span class=\"n\">fintype.card</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">polynomial.C</span> <span class=\"mi\">1</span><span class=\"o\">),</span>\n  <span class=\"n\">intros</span> <span class=\"n\">g</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">units.coe_pow</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">subgroup.coe_pow</span><span class=\"o\">],</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 343592358,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1679469558
    },
    {
        "content": "<p>Does this statement really say what you think it does? It looks to me like it can be proved as <code>⟨0, λ g, polynomial.zero_eval _⟩</code> (<a href=\"https://leanprover-community.github.io/mathlib_docs/find/polynomial.zero_eval\">docs#polynomial.zero_eval</a>)</p>",
        "id": 343593030,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1679469778
    },
    {
        "content": "<p>Hmm, that lemma must be called something else</p>",
        "id": 343593561,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1679469936
    },
    {
        "content": "<p>Demanding that f be monic makes it harder</p>",
        "id": 343602600,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1679473211
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113489-new-members/topic/.E2.9C.94.20How.20to.20uncoerce.3F/near/343593030\">said</a>:</p>\n<blockquote>\n<p>Does this statement really say what you think it does? It looks to me like it can be proved as <code>⟨0, λ g, polynomial.zero_eval _⟩</code> (<a href=\"https://leanprover-community.github.io/mathlib_docs/find/polynomial.zero_eval\">docs#polynomial.zero_eval</a>)</p>\n</blockquote>\n<p>That link doesn't go anywhere, but for the MWE I omitted a constraint that <code>f.nat_degree = fintype.card G</code>, which means it's not the zero polynomial (if that's what you meant)</p>",
        "id": 343607577,
        "sender_full_name": "Pratyush Mishra",
        "timestamp": 1679474688
    }
]