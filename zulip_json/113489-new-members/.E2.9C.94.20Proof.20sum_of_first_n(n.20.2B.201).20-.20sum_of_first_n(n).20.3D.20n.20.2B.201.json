[
    {
        "content": "<p>hi, I'm new to lean, and want your advice on my first code. I started trying to prove that the sum of the first <code>n</code> integers is <code>n * (n + 1) / 2</code>. </p>\n<p>But first wanted to prove the following theorem, to use it later during induction. I'm using Lean4</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">sum_of_first_n</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">sum_of_first_n_diff</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">sum_of_first_n</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"n\">sum_of_first_n</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span> <span class=\"c1\">-- the code on the link</span>\n</code></pre></div>\n<p><a href=\"https://gist.github.com/mfornet/2dbe3eca5e91498403bed84c88d49f4d\">Here is the full code</a>.</p>\n<p>1) I got to this point where I couldn't  finalize a proof (see <code>sorry</code> in the code)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span>\n<span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"mi\">2</span> <span class=\"bp\">∣</span> <span class=\"n\">n</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">n</span> <span class=\"bp\">%</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span>\n</code></pre></div>\n<p>How could I prove this?</p>\n<p>2) The proof of <code>sum_of_first_n_diff</code> is way longer than expected, but none of <code>ring</code>, <code>ring_nf</code>, <code>simp</code> were helping much during algebraic manipulation, I guess because I had a division and subtraction on Natural Numbers.</p>\n<p>I'd appreciate any advice building this kind of proofs.</p>",
        "id": 396078042,
        "sender_full_name": "Marcelo Fornet",
        "timestamp": 1697027214
    },
    {
        "content": "<p>The first advice is not to use subtraction and division of natural numbers</p>",
        "id": 396078893,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1697027507
    },
    {
        "content": "<p>And you can probably find some useful lemmas in <a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/Data/Nat/Parity.html\">https://leanprover-community.github.io/mathlib4_docs/Mathlib/Data/Nat/Parity.html</a>. Many of which are tagged <code>parity_simps</code> so that <code>simp [parity_simps]</code> will maybe be useful</p>",
        "id": 396079154,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1697027590
    },
    {
        "content": "<p>Second, it's easiest to answer if you give a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"mi\">2</span> <span class=\"bp\">∣</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">%</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 396079252,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1697027629
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"307953\">Ruben Van de Velde</span> <a href=\"#narrow/stream/113489-new-members/topic/Proof.20sum_of_first_n.28n.20.2B.201.29.20-.20sum_of_first_n.28n.29.20.3D.20n.20.2B.201/near/396079252\">said</a>:</p>\n<blockquote>\n<p>Second, it's easiest to answer if you give a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> like</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"mi\">2</span> <span class=\"bp\">∣</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">%</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>noted, the example is in the link, but I'll make sure to include it in the post next time.</p>",
        "id": 396079392,
        "sender_full_name": "Marcelo Fornet",
        "timestamp": 1697027676
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"mi\">2</span> <span class=\"bp\">∣</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">%</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span><span class=\"bp\">?</span>\n</code></pre></div>\n<p>shows (among other things)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Try</span> <span class=\"n\">this</span><span class=\"o\">:</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"bp\">@</span><span class=\"n\">Nat.not_even_iff</span><span class=\"o\">]</span>\n<span class=\"c1\">-- ¬Even n</span>\n</code></pre></div>\n<p>which seems helpful</p>",
        "id": 396079424,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1697027689
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"307953\">Ruben Van de Velde</span> <a href=\"#narrow/stream/113489-new-members/topic/Proof.20sum_of_first_n.28n.20.2B.201.29.20-.20sum_of_first_n.28n.29.20.3D.20n.20.2B.201/near/396078893\">said</a>:</p>\n<blockquote>\n<p>The first advice is not to use subtraction and division of natural numbers</p>\n</blockquote>\n<p>I see how I can get rid partially of subtraction, but not about division in this particular theorem</p>",
        "id": 396079482,
        "sender_full_name": "Marcelo Fornet",
        "timestamp": 1697027710
    },
    {
        "content": "<p><code>rw?</code> again shows</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Try</span> <span class=\"n\">this</span><span class=\"o\">:</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">@</span><span class=\"n\">even_iff_two_dvd</span><span class=\"o\">]</span>\n<span class=\"c1\">-- ¬2 ∣ n</span>\n</code></pre></div>",
        "id": 396079604,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1697027757
    },
    {
        "content": "<p>And you have that as a hypothesis, so this works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"mi\">2</span> <span class=\"bp\">∣</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">%</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"bp\">@</span><span class=\"n\">Nat.not_even_iff</span><span class=\"o\">]</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">@</span><span class=\"n\">even_iff_two_dvd</span><span class=\"o\">]</span>\n  <span class=\"n\">exact</span> <span class=\"n\">h</span>\n</code></pre></div>",
        "id": 396079738,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1697027792
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"456449\">Marcelo Fornet</span> <a href=\"#narrow/stream/113489-new-members/topic/Proof.20sum_of_first_n.28n.20.2B.201.29.20-.20sum_of_first_n.28n.29.20.3D.20n.20.2B.201/near/396079482\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"307953\">Ruben Van de Velde</span> <a href=\"#narrow/stream/113489-new-members/topic/Proof.20sum_of_first_n.28n.20.2B.201.29.20-.20sum_of_first_n.28n.29.20.3D.20n.20.2B.201/near/396078893\">said</a>:</p>\n<blockquote>\n<p>The first advice is not to use subtraction and division of natural numbers</p>\n</blockquote>\n<p>I see how I can get rid partially of subtraction, but not about division in this particular theorem</p>\n</blockquote>\n<p>You can state the theorem as <code>sum ... = (n : ℚ) * (n + 1) / 2</code> instead. This way tactics that can clear denominators etc will work better</p>",
        "id": 396080271,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1697027985
    },
    {
        "content": "<p>My advice is to try to prove a different result. Even if that one is mathematically easy and a good example of mathematical induction, it is unfortunately a little painful to do in Lean. If you really want to do it you can try</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">sum_of_first_n</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span> <span class=\"o\">:=</span>\n  <span class=\"o\">((</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">((</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">sum_of_first_n</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span><span class=\"bp\">/</span><span class=\"mi\">2</span>\n</code></pre></div>",
        "id": 396080468,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1697028046
    },
    {
        "content": "<p>too slow <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 396080637,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1697028117
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"307953\">Ruben Van de Velde</span> <a href=\"#narrow/stream/113489-new-members/topic/Proof.20sum_of_first_n.28n.20.2B.201.29.20-.20sum_of_first_n.28n.29.20.3D.20n.20.2B.201/near/396079604\">said</a>:</p>\n<blockquote>\n<p><code>rw?</code> again shows</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Try</span> <span class=\"n\">this</span><span class=\"o\">:</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">@</span><span class=\"n\">even_iff_two_dvd</span><span class=\"o\">]</span>\n<span class=\"c1\">-- ¬2 ∣ n</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>TIL about rw? It it great. I notice it only suggests theorems imported in the scope (which makes sense). Is there any way to help me import useful namespaces?</p>",
        "id": 396081203,
        "sender_full_name": "Marcelo Fornet",
        "timestamp": 1697028293
    },
    {
        "content": "<p>You can add <code>import Mathlib</code> on top of your file to get everything.</p>",
        "id": 396081423,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1697028373
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"130384\">Riccardo Brasca</span> <a href=\"#narrow/stream/113489-new-members/topic/Proof.20sum_of_first_n.28n.20.2B.201.29.20-.20sum_of_first_n.28n.29.20.3D.20n.20.2B.201/near/396080468\">said</a>:</p>\n<blockquote>\n<p>My advice is to try to prove a different result. Even if that one is mathematically easy and a good example of mathematical induction, it is unfortunately a little painful to do in Lean. If you really want to do it you can try</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">sum_of_first_n</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span> <span class=\"o\">:=</span>\n  <span class=\"o\">((</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">((</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">sum_of_first_n</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span><span class=\"bp\">/</span><span class=\"mi\">2</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>This would be helpful, is there any formal way to say and proof that the two versions are equivalent </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">sum_of_first_n_rat</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span> <span class=\"o\">:=</span>\n  <span class=\"o\">((</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">((</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">sum_of_first_n</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span>\n</code></pre></div>",
        "id": 396084038,
        "sender_full_name": "Marcelo Fornet",
        "timestamp": 1697029236
    },
    {
        "content": "<p>Sure:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">sum_of_first_n_rat</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">sum_of_first_n</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">dsimp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">sum_of_first_n_rat</span><span class=\"o\">,</span> <span class=\"n\">sum_of_first_n</span><span class=\"o\">]</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Nat.cast_div</span><span class=\"o\">]</span>\n  <span class=\"bp\">·</span> <span class=\"n\">norm_cast</span>\n  <span class=\"bp\">·</span> <span class=\"n\">exact</span> <span class=\"n\">even_iff_two_dvd.mp</span> <span class=\"n\">n.even_mul_succ_self</span>\n  <span class=\"bp\">·</span> <span class=\"n\">norm_num</span>\n  <span class=\"n\">done</span>\n</code></pre></div>\n<p>which relies on the not-entirely-trivial <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Nat.even_mul_succ_self#doc\">docs#Nat.even_mul_succ_self</a> to show that the natural number division makes sense here</p>",
        "id": 396085877,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1697029834
    },
    {
        "content": "<p>I got it to work, by moving to rationals for making the algebraic proof. Thanks everyone for your help.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Nat.Parity</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Real.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.LibrarySearch</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.NormNum</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">sum_of_first_n_rat</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span> <span class=\"o\">:=</span>\n  <span class=\"o\">((</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">((</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">sum_of_first_n</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">sum_of_first_n_equiv</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">sum_of_first_n_rat</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">sum_of_first_n</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">dsimp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">sum_of_first_n_rat</span><span class=\"o\">,</span> <span class=\"n\">sum_of_first_n</span><span class=\"o\">]</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Nat.cast_div</span><span class=\"o\">]</span>\n  <span class=\"bp\">·</span> <span class=\"n\">norm_cast</span>\n  <span class=\"bp\">·</span> <span class=\"n\">exact</span> <span class=\"n\">even_iff_two_dvd.mp</span> <span class=\"n\">n.even_mul_succ_self</span>\n  <span class=\"bp\">·</span> <span class=\"n\">norm_num</span>\n  <span class=\"n\">done</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">sum_of_first_n_diff_rat</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">sum_of_first_n_rat</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">sum_of_first_n_rat</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">sum_of_first_n_rat</span><span class=\"o\">]</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">Nat.cast_add</span><span class=\"o\">]</span>\n  <span class=\"n\">ring</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">eq_on_rat_eq_on_nat</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">exact</span> <span class=\"n\">Nat.cast_inj.mp</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">sum_of_first_n_diff</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">sum_of_first_n</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">sum_of_first_n</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">apply</span> <span class=\"n\">eq_on_rat_eq_on_nat</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">Nat.cast_add</span><span class=\"o\">]</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">sum_of_first_n_equiv</span><span class=\"o\">]</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">sum_of_first_n_diff_rat</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 396130403,
        "sender_full_name": "Marcelo Fornet",
        "timestamp": 1697042869
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"456449\">Marcelo Fornet</span> has marked this topic as resolved.</p>",
        "id": 396130455,
        "sender_full_name": "Notification Bot",
        "timestamp": 1697042883
    }
]