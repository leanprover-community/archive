[
    {
        "content": "<p>Hi, guys!! I just need to resolve some final steps in my Fibonacci code - can someone help with this?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">fib</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">ℤ</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">+</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">fib</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">fib</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">fib_rule</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">fib</span><span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">fib</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">fib</span><span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">strong_induction</span> <span class=\"o\">{</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">m</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">P</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">P</span> <span class=\"n\">n</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span> <span class=\"c1\">-- this is already proven</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">fib_add</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hm</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hn</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">):</span> <span class=\"n\">fib</span><span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">fib</span><span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">fib</span><span class=\"o\">(</span><span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">fib</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">fib</span><span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span> <span class=\"c1\">-- this is also proven</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hm</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hyp_div</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">∣</span> <span class=\"n\">n</span><span class=\"o\">):</span> <span class=\"n\">fib</span><span class=\"o\">(</span><span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">∣</span> <span class=\"n\">fib</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">hyp_div</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">induction</span> <span class=\"n\">k</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">fib</span><span class=\"o\">],</span>\n  <span class=\"o\">},</span>\n  <span class=\"o\">{</span>\n    <span class=\"n\">change</span> <span class=\"n\">fib</span> <span class=\"n\">m</span> <span class=\"bp\">∣</span> <span class=\"n\">fib</span><span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">k_n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)),</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mul_add</span><span class=\"o\">,</span> <span class=\"n\">add_comm</span><span class=\"o\">,</span> <span class=\"n\">mul_one</span><span class=\"o\">],</span>\n    <span class=\"n\">rw</span> <span class=\"n\">fib_add</span> <span class=\"o\">(</span><span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"n\">k_n</span><span class=\"o\">),</span>\n    <span class=\"n\">apply</span> <span class=\"n\">dvd_add</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">dvd_mul_of_dvd_left</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">k_ih</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">hm</span><span class=\"o\">,</span>\n  <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>now, all we have to do is say that since we're inducting on k and that this is the induction step, k must be greater than the base case (where k = 0). therefore, m and k are both positive -&gt; their product is positive. how would i write this in LEAN?</p>",
        "id": 326278729,
        "sender_full_name": "Lawrence Lin",
        "timestamp": 1675741818
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"562652\">@Lawrence Lin</span> Sounds like something I would be good at by this point (I am new too) :P Firstly, the thing you are trying to prove right now is false, since your goal looks like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">m</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span>\n<span class=\"n\">hm</span><span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span>\n<span class=\"n\">k_n</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span>\n<span class=\"n\">k_ih</span><span class=\"o\">:</span> <span class=\"n\">fib</span> <span class=\"n\">m</span> <span class=\"bp\">∣</span> <span class=\"n\">fib</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"n\">k_n</span><span class=\"o\">)</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"n\">k_n</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span>\n</code></pre></div>\n<p>Which is false for m = 1 and k_n = 0, since k | 0</p>",
        "id": 326284036,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1675746843
    },
    {
        "content": "<p>I think you can treat the case n = 0 separately. Not sure if it's the best way but it's an easy way. So something like <code>cases n</code> at the start.</p>",
        "id": 326284234,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1675747025
    },
    {
        "content": "<p>By the way here are some \"I wish someone told me\" for you<br>\n(1) almost always write <code>&lt;</code>, since most theorems are written that way and it makes searching for theorems easier. So write 0 &lt; m and such.<br>\n(2) you don't need a lot of the (), since lean interprets expressions after a function as its arguments. So <code>fib m (m * k)</code>would work instead of <code>fib_add (m) (m * k_n)</code><br>\n(3) After you write <code>simp</code> you can change it to a <code>squeeze_simp</code>, then it will tell you which theorems it used. It will help you learn too!<br>\n(4) Also, I don't think you know this, but for <code>induction</code> you can name the arguments generated. The syntax is <code>induction ... using ... ...</code>. In this case, you can write <code>induction k with k ik</code>, if you hate underscores like me</p>",
        "id": 326284511,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1675747236
    },
    {
        "content": "<p>Oh and to answer your original question, you need <code>mul_pos</code>. Here:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hm</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hyp_div</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">∣</span> <span class=\"n\">n</span><span class=\"o\">):</span> <span class=\"n\">fib</span><span class=\"o\">(</span><span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">∣</span> <span class=\"n\">fib</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">hyp_div</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">induction</span> <span class=\"n\">k</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">fib</span><span class=\"o\">],</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">by_cases</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">k_n</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">mul_one</span><span class=\"o\">],</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">replace</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"n\">nat.one_le_iff_ne_zero.2</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n      <span class=\"n\">change</span> <span class=\"n\">fib</span> <span class=\"n\">m</span> <span class=\"bp\">∣</span> <span class=\"n\">fib</span><span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">k_n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)),</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mul_add</span><span class=\"o\">,</span> <span class=\"n\">add_comm</span><span class=\"o\">,</span> <span class=\"n\">mul_one</span><span class=\"o\">],</span>\n      <span class=\"n\">rw</span> <span class=\"n\">fib_add</span> <span class=\"o\">(</span><span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"n\">k_n</span><span class=\"o\">),</span>\n      <span class=\"n\">apply</span> <span class=\"n\">dvd_add</span><span class=\"o\">,</span>\n      <span class=\"n\">simp</span><span class=\"o\">,</span>\n      <span class=\"n\">apply</span> <span class=\"n\">dvd_mul_of_dvd_left</span><span class=\"o\">,</span>\n      <span class=\"n\">apply</span> <span class=\"n\">k_ih</span><span class=\"o\">,</span>\n      <span class=\"n\">exact</span> <span class=\"n\">hm</span><span class=\"o\">,</span>\n      <span class=\"n\">apply</span> <span class=\"n\">mul_pos</span> <span class=\"n\">hm</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"o\">},</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 326285358,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1675747822
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hm</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hyp_div</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">∣</span> <span class=\"n\">n</span><span class=\"o\">):</span> <span class=\"n\">fib</span><span class=\"o\">(</span><span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">∣</span> <span class=\"n\">fib</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">hyp_div</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">induction</span> <span class=\"n\">k</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">fib</span><span class=\"o\">],</span> <span class=\"o\">},</span>\n  <span class=\"c1\">-- by the way, you can use `cases k_n` too, but then... you can try :)</span>\n  <span class=\"o\">{</span> <span class=\"n\">by_cases</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">k_n</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">mul_one</span><span class=\"o\">],</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">replace</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"n\">nat.one_le_iff_ne_zero.2</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n      <span class=\"c1\">-- rw [] writes each in order</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">nat.succ_eq_add_one</span><span class=\"o\">,</span> <span class=\"n\">mul_add</span><span class=\"o\">,</span> <span class=\"n\">add_comm</span><span class=\"o\">,</span> <span class=\"n\">mul_one</span><span class=\"o\">,</span> <span class=\"n\">fib_add</span> <span class=\"n\">m</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"n\">k_n</span><span class=\"o\">)</span> <span class=\"n\">hm</span> <span class=\"n\">_</span><span class=\"o\">],</span>\n      <span class=\"n\">apply</span> <span class=\"n\">dvd_add</span><span class=\"o\">,</span>\n      <span class=\"n\">apply</span> <span class=\"n\">dvd_mul_left</span><span class=\"o\">,</span>\n      <span class=\"n\">apply</span> <span class=\"n\">dvd_mul_of_dvd_left</span> <span class=\"n\">k_ih</span><span class=\"o\">,</span>\n      <span class=\"n\">apply</span> <span class=\"n\">mul_pos</span> <span class=\"n\">hm</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"o\">},</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 326285598,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1675748021
    },
    {
        "content": "<p>thank you! let me digest this rq ;w;<br>\nalso... i'm pretty sure lean was cool with the case fib(n) | 0? hm..</p>",
        "id": 326285846,
        "sender_full_name": "Lawrence Lin",
        "timestamp": 1675748206
    },
    {
        "content": "<p>Yea lean is fine, that's exact what I prove in the <code>{ rw [h, mul_one] }</code>. But to use <code>mul_pos</code>, it's not fine</p>",
        "id": 326285952,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1675748295
    },
    {
        "content": "<p>Oh I think I know why. I think your <code>(hn : n &gt; 0)</code> in <code>fib_add</code> is unnecessary.</p>",
        "id": 326286125,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1675748413
    },
    {
        "content": "<p>oh...</p>",
        "id": 326286168,
        "sender_full_name": "Lawrence Lin",
        "timestamp": 1675748454
    },
    {
        "content": "<p>yep, it was.</p>",
        "id": 326286222,
        "sender_full_name": "Lawrence Lin",
        "timestamp": 1675748510
    },
    {
        "content": "<p>i often find myself doing a lot of like, \"nasty conversions\" just to get lean to listen to me... sigh. i'll try to avoid it!! thank you for your help gareth c:</p>",
        "id": 326286288,
        "sender_full_name": "Lawrence Lin",
        "timestamp": 1675748541
    },
    {
        "content": "<p>After removing that the proof is 7 lines (with the inlined brackets like I wrote it) :D</p>",
        "id": 326286301,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1675748556
    },
    {
        "content": "<p>No problem!</p>",
        "id": 326286303,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1675748561
    },
    {
        "content": "<p>ooh 1s lemme try</p>",
        "id": 326286312,
        "sender_full_name": "Lawrence Lin",
        "timestamp": 1675748572
    },
    {
        "content": "<p>wait, the proof is 7 lines?</p>",
        "id": 326286325,
        "sender_full_name": "Lawrence Lin",
        "timestamp": 1675748585
    },
    {
        "content": "<p>5 if I try</p>",
        "id": 326286351,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1675748601
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hm</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hyp_div</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">∣</span> <span class=\"n\">n</span><span class=\"o\">):</span> <span class=\"n\">fib</span><span class=\"o\">(</span><span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">∣</span> <span class=\"n\">fib</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">hyp_div</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">induction</span> <span class=\"n\">k</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">fib</span><span class=\"o\">],</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">nat.succ_eq_add_one</span><span class=\"o\">,</span> <span class=\"n\">mul_add</span><span class=\"o\">,</span> <span class=\"n\">add_comm</span><span class=\"o\">,</span> <span class=\"n\">mul_one</span><span class=\"o\">,</span> <span class=\"n\">fib_add</span> <span class=\"n\">m</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"n\">k_n</span><span class=\"o\">)</span> <span class=\"n\">hm</span><span class=\"o\">],</span>\n    <span class=\"n\">apply</span> <span class=\"n\">dvd_add</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">dvd_mul_left</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">dvd_mul_of_dvd_left</span> <span class=\"n\">k_ih</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 326286362,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1675748612
    },
    {
        "content": "<p>oh...</p>",
        "id": 326286455,
        "sender_full_name": "Lawrence Lin",
        "timestamp": 1675748667
    },
    {
        "content": "<p>let me re-digest that :')</p>",
        "id": 326286487,
        "sender_full_name": "Lawrence Lin",
        "timestamp": 1675748698
    },
    {
        "content": "<p>Here's one more thing you can try and explore. You see those repeated <code>apply</code>s? It's annoying to type them out, especially when you have 9187359723859 different things. With <code>simp</code>, you can provide lemmas to it to tell lean which lemmas to use. So you can write this!</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hm</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hyp_div</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">∣</span> <span class=\"n\">n</span><span class=\"o\">):</span> <span class=\"n\">fib</span><span class=\"o\">(</span><span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">∣</span> <span class=\"n\">fib</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">hyp_div</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">induction</span> <span class=\"n\">k</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">fib</span><span class=\"o\">,</span> <span class=\"n\">mul_zero</span><span class=\"o\">,</span> <span class=\"n\">dvd_zero</span><span class=\"o\">],</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">nat.succ_eq_add_one</span><span class=\"o\">,</span> <span class=\"n\">mul_add</span><span class=\"o\">,</span> <span class=\"n\">add_comm</span><span class=\"o\">,</span> <span class=\"n\">mul_one</span><span class=\"o\">,</span> <span class=\"n\">fib_add</span> <span class=\"n\">m</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"n\">k_n</span><span class=\"o\">)</span> <span class=\"n\">hm</span><span class=\"o\">],</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">dvd_add</span><span class=\"o\">,</span> <span class=\"n\">dvd_mul_left</span><span class=\"o\">,</span> <span class=\"n\">dvd_mul_of_dvd_left</span> <span class=\"n\">k_ih</span><span class=\"o\">],</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>The <code>only</code> just means... \"only\". It speeds up computation too.</p>",
        "id": 326286663,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1675748826
    },
    {
        "content": "<p>oh wow.</p>",
        "id": 326286927,
        "sender_full_name": "Lawrence Lin",
        "timestamp": 1675749073
    },
    {
        "content": "<p>lemme try applying that to my old code</p>",
        "id": 326287009,
        "sender_full_name": "Lawrence Lin",
        "timestamp": 1675749127
    },
    {
        "content": "<p>seems like simp only doesn't really work sometimes</p>",
        "id": 326287162,
        "sender_full_name": "Lawrence Lin",
        "timestamp": 1675749294
    },
    {
        "content": "<p>specifically with lt_trans</p>",
        "id": 326287290,
        "sender_full_name": "Lawrence Lin",
        "timestamp": 1675749372
    },
    {
        "content": "<p>Oh yea, essentially if uses it only if it knows everything it needs</p>",
        "id": 326287340,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1675749429
    },
    {
        "content": "<p>For <code>lt_trans</code> you need two arguments <code>lt_trans [[a &lt; b]] [[b &lt; c]]</code>, so you should provide those.</p>",
        "id": 326287371,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1675749462
    },
    {
        "content": "<p>fair enough<br>\nlet me try</p>",
        "id": 326287409,
        "sender_full_name": "Lawrence Lin",
        "timestamp": 1675749482
    },
    {
        "content": "<p>ouch lean isn't happy with it, 1s</p>",
        "id": 326287509,
        "sender_full_name": "Lawrence Lin",
        "timestamp": 1675749564
    },
    {
        "content": "<p>simp only [lt_add_one, lt_trans [[lt_add_one]] [[lt_add_one]]],<br>\ndid this</p>",
        "id": 326287515,
        "sender_full_name": "Lawrence Lin",
        "timestamp": 1675749571
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">fib_add</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hm</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">fib</span><span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">fib</span><span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">fib</span><span class=\"o\">(</span><span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">fib</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">fib</span><span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">apply</span> <span class=\"n\">strong_induction</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n  <span class=\"n\">intro</span> <span class=\"n\">k</span><span class=\"o\">,</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">k</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">fib</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span>\n    <span class=\"n\">cases</span> <span class=\"n\">k</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span>\n      <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">fib</span><span class=\"o\">],</span>\n      <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">fib_rule'</span><span class=\"o\">,</span> <span class=\"n\">hm</span><span class=\"o\">],</span>\n    <span class=\"o\">},</span>\n    <span class=\"o\">{</span>\n      <span class=\"n\">change</span> <span class=\"n\">fib</span><span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">fib</span><span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">fib</span> <span class=\"o\">(</span><span class=\"n\">k.succ.succ</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">fib</span> <span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"n\">fib</span> <span class=\"n\">k.succ.succ</span> <span class=\"bp\">*</span> <span class=\"n\">fib</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">),</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">add_assoc</span> <span class=\"n\">m</span> <span class=\"n\">k</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"n\">k</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"bp\">←</span><span class=\"n\">add_assoc</span><span class=\"o\">],</span>\n\n      <span class=\"k\">have</span> <span class=\"n\">H1</span> <span class=\"o\">:</span> <span class=\"n\">fib</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">fib</span> <span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"n\">fib</span> <span class=\"n\">k</span> <span class=\"bp\">*</span> <span class=\"n\">fib</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">fib</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">fib</span> <span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"n\">fib</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">fib</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">fib</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">fib</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"bp\">*</span> <span class=\"n\">fib</span> <span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">fib</span><span class=\"o\">(</span><span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">fib</span><span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"bp\">*</span> <span class=\"n\">fib</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">),</span>\n      <span class=\"o\">{</span>\n        <span class=\"n\">ring_nf</span><span class=\"o\">,</span>\n      <span class=\"o\">},</span>\n\n      <span class=\"n\">rw</span> <span class=\"n\">H1</span><span class=\"o\">,</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">fib_rule</span><span class=\"o\">,</span> <span class=\"bp\">←</span><span class=\"n\">fib_rule</span><span class=\"o\">],</span>\n\n      <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">lt_add_one</span><span class=\"o\">],</span>\n      <span class=\"n\">apply</span> <span class=\"n\">lt_trans</span><span class=\"o\">,</span>\n      <span class=\"n\">apply</span> <span class=\"n\">lt_add_one</span><span class=\"o\">,</span>\n      <span class=\"n\">apply</span> <span class=\"n\">lt_add_one</span><span class=\"o\">,</span>\n    <span class=\"o\">},</span>\n  <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>here was the working lean code for fib_add</p>",
        "id": 326287677,
        "sender_full_name": "Lawrence Lin",
        "timestamp": 1675749666
    },
    {
        "content": "<p>(it is messy sorry)</p>",
        "id": 326287801,
        "sender_full_name": "Lawrence Lin",
        "timestamp": 1675749747
    },
    {
        "content": "<p>Try <code>exact lt_trans (lt_add_one _) (lt_add_one _)</code> instead.</p>",
        "id": 326287860,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1675749810
    },
    {
        "content": "<p>why exact and not apply?</p>",
        "id": 326287975,
        "sender_full_name": "Lawrence Lin",
        "timestamp": 1675749881
    },
    {
        "content": "<p><code>exact</code> means (you guessed it) you have the exact statement</p>",
        "id": 326288012,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1675749908
    },
    {
        "content": "<p>Here <code>lt_trans ...</code> is exactly what you want, so <code>exact</code> works</p>",
        "id": 326288031,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1675749922
    },
    {
        "content": "<p>ah</p>",
        "id": 326288051,
        "sender_full_name": "Lawrence Lin",
        "timestamp": 1675749942
    },
    {
        "content": "<p>do you know how i can get rid of my H1</p>",
        "id": 326288125,
        "sender_full_name": "Lawrence Lin",
        "timestamp": 1675749965
    },
    {
        "content": "<p>i think it's pretty unnecessary but...</p>",
        "id": 326288134,
        "sender_full_name": "Lawrence Lin",
        "timestamp": 1675749971
    },
    {
        "content": "<p>By the way consider using <code>by_cases</code> like I did in my origin answer all the way up, it will decluster all the <code>succ</code></p>",
        "id": 326288162,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1675749986
    },
    {
        "content": "<p>Maybe I can try to prove that part from scratch, then you can see?</p>",
        "id": 326288208,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1675750023
    },
    {
        "content": "<p>ah- sure!</p>",
        "id": 326288240,
        "sender_full_name": "Lawrence Lin",
        "timestamp": 1675750035
    },
    {
        "content": "<p>thank you u.u</p>",
        "id": 326288248,
        "sender_full_name": "Lawrence Lin",
        "timestamp": 1675750042
    },
    {
        "content": "<p>(i don't know, been playing with lean for a few months and yet i still can't get the hang of it :( )</p>",
        "id": 326288267,
        "sender_full_name": "Lawrence Lin",
        "timestamp": 1675750055
    },
    {
        "content": "<p>i rmb implementing strong induction just to make that proof work haha</p>",
        "id": 326288344,
        "sender_full_name": "Lawrence Lin",
        "timestamp": 1675750098
    },
    {
        "content": "<p>Hahaha, it's in mathlib already</p>",
        "id": 326288788,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1675750431
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/nat.strong_induction_on/\">https://leanprover-community.github.io/mathlib_docs/find/nat.strong_induction_on/</a><br>\nYou use this by writing <code>induction n using nat.strong_induction_on</code></p>",
        "id": 326288851,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1675750449
    },
    {
        "content": "<p>._.</p>",
        "id": 326289029,
        "sender_full_name": "Lawrence Lin",
        "timestamp": 1675750620
    },
    {
        "content": "<p>aaaaaaaaaa</p>",
        "id": 326289035,
        "sender_full_name": "Lawrence Lin",
        "timestamp": 1675750623
    },
    {
        "content": "<p>tbf i did try using that one then gave up ahaha ;w;<br>\nidk...</p>",
        "id": 326289045,
        "sender_full_name": "Lawrence Lin",
        "timestamp": 1675750634
    },
    {
        "content": "<p>Sorry it took a while, I am slow too hahahaha. Here you go:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">fib_add</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hm</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">fib</span><span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">fib</span><span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">fib</span><span class=\"o\">(</span><span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">fib</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">fib</span><span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">apply</span> <span class=\"n\">strong_induction</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- use `intros` instead of `intro`</span>\n  <span class=\"n\">intros</span> <span class=\"n\">k</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- using by_cases instead of cases for... my eyes</span>\n  <span class=\"n\">cases</span> <span class=\"n\">k</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">fib</span><span class=\"o\">],</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">cases</span> <span class=\"n\">k</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"c1\">-- see how `fib_rule'` takes arguments, so i supply them? in `fib_rule' m hm`</span>\n      <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">fib</span><span class=\"o\">,</span> <span class=\"n\">fib_rule'</span> <span class=\"n\">m</span> <span class=\"n\">hm</span><span class=\"o\">],</span>\n    <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">nat.succ_eq_add_one</span><span class=\"o\">,</span> <span class=\"n\">add_assoc</span><span class=\"o\">],</span>\n      <span class=\"n\">norm_num</span><span class=\"o\">,</span>\n      <span class=\"c1\">-- we \"massage\" things into the right form, then expand everything</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">add_assoc</span><span class=\"o\">,</span> <span class=\"n\">fib</span><span class=\"o\">,</span> <span class=\"n\">nat.succ_eq_add_one</span><span class=\"o\">,</span> <span class=\"n\">add_assoc</span> <span class=\"n\">m</span> <span class=\"n\">k</span> <span class=\"mi\">1</span><span class=\"o\">],</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h</span> <span class=\"n\">k</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">_</span><span class=\"o\">],</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">fib_rule</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"n\">fib_rule</span> <span class=\"n\">k</span><span class=\"o\">],</span>\n      <span class=\"c1\">-- and then ring gets rid of everything</span>\n      <span class=\"n\">ring</span><span class=\"o\">,</span>\n      <span class=\"n\">exact</span> <span class=\"n\">nat.lt_succ_self</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n      <span class=\"n\">exact</span> <span class=\"n\">lt_trans</span> <span class=\"o\">(</span><span class=\"n\">nat.lt_succ_self</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">nat.lt_succ_self</span> <span class=\"n\">_</span><span class=\"o\">),</span>\n    <span class=\"o\">},</span>\n  <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 326290961,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1675751833
    },
    {
        "content": "<p>but yea, my proof idea is \"expand everything to base case, then deal with it\", which seems to be yours too</p>",
        "id": 326291065,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1675751907
    },
    {
        "content": "<p>You would be better off using r:=m-1 as your variable and not m, so you don't have to deal with natural subtraction and the hypothesis that m&gt;0</p>",
        "id": 326297755,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1675755526
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"579936\">Gareth Ma</span> <a href=\"#narrow/stream/113489-new-members/topic/Fibonacci.20Divisibility.20Sequence/near/326291065\">said</a>:</p>\n<blockquote>\n<p>but yea, my proof idea is \"expand everything to base case, then deal with it\", which seems to be yours too</p>\n</blockquote>\n<p>yep :3c</p>",
        "id": 326494629,
        "sender_full_name": "Lawrence Lin",
        "timestamp": 1675823555
    }
]